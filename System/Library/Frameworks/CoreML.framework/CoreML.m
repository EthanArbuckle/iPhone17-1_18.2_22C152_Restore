void std::default_delete<StorageManager>::operator()[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x19F3C1920);
}

void CoreML::MIL::Opsets::RegisterCoreMLOpsets()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  char v1 = 7;
  strcpy((char *)&__p, "CoreML5");
  operator new();
}

void sub_19E5901B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (*(char *)(v58 - 201) < 0) {
    operator delete(*(void **)(v58 - 224));
  }
  if (a55 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a42 < 0)
  {
    operator delete(a37);
    if ((v57 & 1) == 0)
    {
LABEL_14:
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v58 - 192);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v58 - 112);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v58 - 152);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a16);
      std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::~__hash_table((uint64_t)&a25);
      MEMORY[0x19F3C1920](v55, 0xA1C40BD48D6D6);
      _Unwind_Resume(a1);
    }
  }
  else if (!v57)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v56);
  goto LABEL_14;
}

char *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string const&,std::string&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    v14 = *(char ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(char **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  v17 = (void *)(a1 + 16);
  v18 = (char *)operator new(0x40uLL);
  i = v18;
  v30[0] = v18;
  v30[1] = a1 + 16;
  char v31 = 0;
  *(void *)v18 = 0;
  *((void *)v18 + 1) = v10;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v18 + 16), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
    *((void *)v18 + 4) = *(void *)(a3 + 16);
  }
  v19 = (std::string *)(i + 40);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *((void *)i + 7) = *(void *)(a4 + 16);
  }
  char v31 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)i = *v27;
LABEL_44:
    void *v27 = i;
    goto LABEL_45;
  }
  *(void *)i = *v17;
  void *v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_44;
  }
LABEL_45:
  v30[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
  return i;
}

void sub_19E5908B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v1 < 0;
  if (v1 >= 0) {
    unint64_t v4 = (uint64_t *)a1;
  }
  else {
    unint64_t v4 = *(uint64_t **)a1;
  }
  if (!v3) {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      unint64_t v34 = 0x9DDFEA08EB382D69;
      uint64_t v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      uint64_t v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      uint64_t v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      uint64_t v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      uint64_t v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      uint64_t v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      unint64_t v50 = v46 + v48;
      unint64_t v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      unint64_t v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      unint64_t v53 = v47 + v2 + v46 + v44;
      uint64_t v54 = v53 + v43;
      unint64_t v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      uint64_t v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v57 = v56 + v45 + v48;
      uint64_t v58 = __ROR8__(v57, 44);
      uint64_t v59 = v57 + v49;
      uint64_t v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      uint64_t v62 = *v4;
      v61 = v4 + 4;
      unint64_t v63 = v62 - 0x4B6D499041670D8DLL * v43;
      uint64_t v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v65 = *(v61 - 3);
        uint64_t v66 = v63 + v54 + v50 + v65;
        uint64_t v67 = v61[2];
        uint64_t v68 = v61[3];
        uint64_t v69 = v61[1];
        unint64_t v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        uint64_t v70 = v52 + v59;
        uint64_t v71 = *(v61 - 2);
        uint64_t v72 = *(v61 - 1);
        uint64_t v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        uint64_t v74 = v73 + v59 + v72;
        uint64_t v75 = v73 + v65 + v71;
        uint64_t v54 = v75 + v72;
        uint64_t v76 = __ROR8__(v75, 44) + v73;
        unint64_t v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        unint64_t v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        unint64_t v55 = v76 + __ROR8__(v74 + v77, 21);
        unint64_t v78 = v63 + v60 + *v61;
        uint64_t v59 = v78 + v69 + v67 + v68;
        uint64_t v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        unint64_t v52 = v77;
        v64 += 64;
      }
      while (v64);
      unint64_t v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      unint64_t v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      unint64_t v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      unint64_t v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      unint64_t v9 = (char *)v4 + v2;
      uint64_t v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v12 = v4[1];
      uint64_t v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      unint64_t v16 = v4 + 2;
      uint64_t v14 = v4[2];
      uint64_t v15 = v16[1];
      uint64_t v17 = __ROR8__(v13 + v15, 52);
      uint64_t v18 = __ROR8__(v13, 37);
      uint64_t v19 = v13 + v12;
      uint64_t v20 = __ROR8__(v19, 7);
      uint64_t v21 = v19 + v14;
      uint64_t v22 = v20 + v18;
      uint64_t v23 = *((void *)v9 - 4) + v14;
      uint64_t v24 = v11 + v15;
      uint64_t v25 = __ROR8__(v24 + v23, 52);
      uint64_t v26 = v22 + v17;
      uint64_t v27 = __ROR8__(v23, 37);
      uint64_t v28 = *((void *)v9 - 3) + v23;
      uint64_t v29 = __ROR8__(v28, 7);
      uint64_t v30 = v26 + __ROR8__(v21, 31);
      uint64_t v31 = v28 + v10;
      uint64_t v32 = v31 + v24;
      uint64_t v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      unint64_t v34 = 0x9AE16A3B2F90404FLL;
      unint64_t v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      uint64_t v36 = v4[1];
      unint64_t v37 = 0xB492B66FBE98F273 * *v4;
      unint64_t v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      unint64_t v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      unint64_t v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      int v82 = *(_DWORD *)v4;
      uint64_t v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      unint64_t v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      unint64_t v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      unint64_t v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

char *std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__emplace_unique_key_args<std::string,std::string const&,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v10)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v15 + 16, a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t v15 = (char *)operator new(0x48uLL);
  v31[0] = v15;
  v31[1] = a1 + 16;
  char v32 = 0;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v10;
  uint64_t v18 = (std::string *)(v15 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v15 + 4) = *(void *)(a3 + 16);
  }
  uint64_t v19 = a4 + 3;
  uint64_t v20 = (void *)a4[3];
  if (v20)
  {
    if (v20 == a4)
    {
      *((void *)v15 + 8) = v15 + 40;
      (*(void (**)(void *))(*a4 + 24))(a4);
      goto LABEL_27;
    }
    *((void *)v15 + 8) = v20;
  }
  else
  {
    uint64_t v19 = v15 + 64;
  }
  void *v19 = 0;
LABEL_27:
  char v32 = 1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v11 || (float)(v22 * (float)v11) < v21)
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      size_t v26 = v25;
    }
    else {
      size_t v26 = v24;
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v26);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v27 = *(void *)a1;
  uint64_t v28 = *(void **)(*(void *)a1 + 8 * v4);
  if (v28)
  {
    *(void *)uint64_t v15 = *v28;
LABEL_47:
    *uint64_t v28 = v15;
    goto LABEL_48;
  }
  *(void *)uint64_t v15 = *v17;
  void *v17 = v15;
  *(void *)(v27 + 8 * v4) = v17;
  if (*(void *)v15)
  {
    unint64_t v29 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v29 >= v11) {
        v29 %= v11;
      }
    }
    else
    {
      v29 &= v11 - 1;
    }
    uint64_t v28 = (void *)(*(void *)a1 + 8 * v29);
    goto LABEL_47;
  }
LABEL_48:
  v31[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v31);
  return v15;
}

void sub_19E591054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v5 = operator new(8 * prime);
  std::string::size_type v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    uint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          *uint64_t v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          uint64_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        v8 = v14;
        uint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      BOOL v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      BOOL v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      BOOL v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,0>(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int8x8_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_19E5915F4(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint8x8_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return 0;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  size_t v15 = operator new(0x28uLL);
  *size_t v15 = 0;
  v15[1] = v8;
  unint64_t v16 = (std::string *)(v15 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v15[4] = *(void *)(a3 + 16);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *size_t v15 = *v24;
LABEL_41:
    *unint64_t v24 = v15;
    goto LABEL_42;
  }
  *size_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    unint64_t v25 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return 1;
}

void sub_19E591848(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__node_insert_unique(uint64_t a1, unsigned __int8 *a2)
{
  int8x8_t v4 = a2 + 16;
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a2 + 16));
  unint64_t v6 = v5;
  *((void *)a2 + 1) = v5;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    unint64_t v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v10 = v5;
      if (v7 <= v5) {
        unint64_t v10 = v5 % v7;
      }
    }
    else
    {
      unint64_t v10 = (v7 - 1) & v5;
    }
    unint64_t v11 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v13 = *((void *)i + 1);
        if (v13 == v6)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v4)) {
            return 0;
          }
        }
        else
        {
          if (v9 > 1)
          {
            if (v13 >= v7) {
              v13 %= v7;
            }
          }
          else
          {
            v13 &= v7 - 1;
          }
          if (v13 != v10) {
            break;
          }
        }
      }
    }
  }
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v6 = *((void *)a2 + 1);
  }
  uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v20.i16[0] = vaddlv_u8(v20);
  if (v20.u32[0] > 1uLL)
  {
    if (v6 >= v7) {
      v6 %= v7;
    }
  }
  else
  {
    v6 &= v7 - 1;
  }
  unint64_t v21 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v6);
  if (v21)
  {
    *(void *)a2 = *v21;
LABEL_37:
    *unint64_t v21 = a2;
    goto LABEL_38;
  }
  *(void *)a2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2;
  *(void *)(*(void *)a1 + 8 * v6) = a1 + 16;
  if (*(void *)a2)
  {
    unint64_t v22 = *(void *)(*(void *)a2 + 8);
    if (v20.u32[0] > 1uLL)
    {
      if (v22 >= v7) {
        v22 %= v7;
      }
    }
    else
    {
      v22 &= v7 - 1;
    }
    unint64_t v21 = (unsigned __int8 **)(*(void *)a1 + 8 * v22);
    goto LABEL_37;
  }
LABEL_38:
  ++*(void *)(a1 + 24);
  return 1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_impl<char const(&)[9],char const(&)[9]>(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 **)(a1 + 16);
  unint64_t v3 = (unsigned __int8 *)operator new(0x40uLL);
  v23[0] = v3;
  v23[1] = v2;
  *(void *)unint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)v3 + 2, "classify");
  std::string::basic_string[abi:ne180100]<0>((void *)v3 + 5, "classify");
  char v24 = 1;
  *((void *)v3 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v3 + 16));
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v3 + 16));
  unint64_t v5 = v4;
  *((void *)v3 + 1) = v4;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v9 = v4;
      if (v6 <= v4) {
        unint64_t v9 = v4 % v6;
      }
    }
    else
    {
      unint64_t v9 = (v6 - 1) & v4;
    }
    unint64_t v10 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == v5)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v3 + 16)) {
            goto LABEL_39;
          }
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v6) {
              v12 %= v6;
            }
          }
          else
          {
            v12 &= v6 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v6 || (float)(v14 * (float)v6) < v13)
  {
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v18);
    unint64_t v6 = *(void *)(a1 + 8);
    unint64_t v5 = *((void *)v3 + 1);
  }
  uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] > 1uLL)
  {
    if (v5 >= v6) {
      v5 %= v6;
    }
  }
  else
  {
    v5 &= v6 - 1;
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v5);
  if (v21)
  {
    *(void *)unint64_t v3 = *v21;
LABEL_37:
    *unint64_t v21 = v3;
    goto LABEL_38;
  }
  *(void *)unint64_t v3 = *v2;
  *uint64_t v2 = v3;
  *(void *)(v20 + 8 * v5) = v2;
  if (*(void *)v3)
  {
    unint64_t v22 = *(void *)(*(void *)v3 + 8);
    if (v19.u32[0] > 1uLL)
    {
      if (v22 >= v6) {
        v22 %= v6;
      }
    }
    else
    {
      v22 &= v6 - 1;
    }
    unint64_t v21 = (unsigned __int8 **)(*(void *)a1 + 8 * v22);
    goto LABEL_37;
  }
LABEL_38:
  ++*(void *)(a1 + 24);
  v23[0] = 0;
LABEL_39:
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v23);
}

void sub_19E591CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void sub_19E591F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, std::mutex *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,id a28)
{
  std::mutex::unlock(a10);
  objc_destroyWeak(location);

  objc_destroyWeak(&a28);
  _Unwind_Resume(a1);
}

void sub_19E592768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint8_t buf)
{
  uint64_t v33 = v30;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&buf, 8);

  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::requiredBufferSize(void *a1, void *a2, unsigned __int16 a3)
{
  id v5 = a1;
  id v6 = a2;
  uint8x8_t v7 = v21 + 1;
  BOOL v8 = v21 == v22 || v7 == v22;
  unint64_t v9 = v21;
  if (!v8)
  {
    unint64_t v10 = *v21;
    unint64_t v9 = v21;
    unint64_t v11 = v21 + 1;
    do
    {
      unint64_t v13 = *v11++;
      unint64_t v12 = v13;
      BOOL v14 = v10 >= v13;
      if (v10 <= v13) {
        unint64_t v10 = v12;
      }
      if (!v14) {
        unint64_t v9 = v7;
      }
      uint8x8_t v7 = v11;
    }
    while (v11 != v22);
  }
  BOOL v15 = __p[0];
  unint64_t v16 = *(void *)((char *)__p[0] + (char *)v9 - (char *)v21);
  unint64_t v17 = *v9;
  if (!v21 || (unint64_t v22 = v21, operator delete(v21), (v15 = __p[0]) != 0))
  {
    __p[1] = v15;
    operator delete(v15);
  }
  unint64_t v18 = v16 * v17;
  if (!is_mul_ok(v16, v17)) {
    unint64_t v18 = -1;
  }
  if (is_mul_ok(v18, a3 >> 3)) {
    uint64_t v19 = v18 * (a3 >> 3);
  }
  else {
    uint64_t v19 = -1;
  }

  return v19;
}

void sub_19E592A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E592BE8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, long long buf)
{
  uint64_t v23 = v20;
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  MEMORY[0x19F3C1920](v23, 0x10A0C4077B4ED97);
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (a2 == 1)
  {
    unint64_t v25 = __cxa_begin_catch(a1);
    size_t v26 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v31;
      _os_log_error_impl(&dword_19E58B000, v26, OS_LOG_TYPE_ERROR, "Failed to initialize MLMultiArray with shape, dataType, and storage order. (Underlying exception: %s)", (uint8_t *)&buf, 0xCu);
    }

    if (v19)
    {
      uint64_t v27 = (void *)MEMORY[0x1E4F28C58];
      a15 = *MEMORY[0x1E4F28568];
      uint64_t v28 = NSString;
      (*(void (**)(void *))(*(void *)v25 + 16))(v25);
      unint64_t v29 = [v28 stringWithFormat:@"Failed to initialize MLMultiArray with shape, dataType, and storage order. (Underlying exception: %s)"];
      a16 = v29;
      uint64_t v30 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a16 forKeys:&a15 count:1];
      void *v19 = [v27 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v30];
    }
    __cxa_end_catch();
    JUMPOUT(0x19E592BA4);
  }

  _Unwind_Resume(a1);
}

uint64_t CoreML::MultiArrayBuffer::MultiArrayBuffer(uint64_t a1, unint64_t **a2, int a3, int a4, size_t a5)
{
  CoreML::MultiArrayBuffer::stridesForConiguousArray((unint64_t **)__p, a2, a4);
  CoreML::MultiArrayBuffer::MultiArrayBuffer(a1, (uint64_t)a2, (uint64_t)__p, a3, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_19E592E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::MultiArrayBuffer::MultiArrayBuffer(uint64_t a1, uint64_t a2, uint64_t a3, int a4, size_t a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EF0DAF70;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v10 = (char *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  if (a1 + 24 != a2) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)(a1 + 24), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  if (v10 != (char *)a3) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v10, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  }
  *(_DWORD *)(a1 + 72) = a4;
  unint64_t v11 = *(unint64_t **)(a1 + 24);
  unint64_t v12 = 1;
  while (v11 != *(unint64_t **)(a1 + 32))
  {
    unint64_t v13 = *v11++;
    unint64_t v14 = v12 * v13;
    if (is_mul_ok(v12, v13)) {
      unint64_t v12 = v14;
    }
    else {
      unint64_t v12 = -1;
    }
  }
  *(void *)(a1 + 80) = v12;
  *(_WORD *)(a1 + 88) = CoreML::MultiArrayBuffer::computeAttributes((uint64_t **)a2, *(uint64_t **)a3, *(void *)(a3 + 8), 1);
  *(void *)(a1 + 96) = 0;
  BOOL v15 = *(char **)a2;
  unint64_t v16 = *(char **)(a2 + 8);
  unint64_t v17 = (uint64_t)&v16[-*(void *)a2] >> 3;
  unint64_t v18 = *(char **)a3;
  if (v17 != (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3)
  {
    unint64_t v32 = (uint64_t)&v16[-*(void *)a2] >> 3;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v40, v32);
    unint64_t v34 = std::string::insert(&v40, 0, "strides must be ");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    uint64_t v36 = std::string::append(&buf, " elements for shape");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v16 == v15)
  {
    unint64_t v19 = 1;
  }
  else
  {
    unint64_t v19 = 0;
    if (v17 <= 1) {
      unint64_t v17 = 1;
    }
    while (1)
    {
      unint64_t v21 = *(void *)v15;
      v15 += 8;
      unint64_t v20 = v21;
      unint64_t v22 = *(void *)v18;
      v18 += 8;
      uint64_t v23 = v20 * v22;
      unint64_t v24 = is_mul_ok(v20, v22) ? v23 : -1;
      if (!v24) {
        break;
      }
      if (v19 <= v24) {
        unint64_t v19 = v24;
      }
      if (!--v17) {
        goto LABEL_24;
      }
    }
    unint64_t v19 = 0;
  }
LABEL_24:
  if (is_mul_ok(v19, (unsigned __int16)a4 >> 3)) {
    unint64_t v25 = v19 * ((unsigned __int16)a4 >> 3);
  }
  else {
    unint64_t v25 = -1;
  }
  if (v25)
  {
    if (v25 != -1)
    {
      if (a5 >= 2)
      {
        size_t v26 = (a5 + v25 - 1) / a5 * a5;
        if (v26 >= v25)
        {
          malloc_type_aligned_alloc(a5, v26, 0x59E15B9CuLL);
          operator new();
        }
        unint64_t v38 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v39 = std::bad_alloc::bad_alloc(v38);
        __cxa_throw(v39, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
      }
      operator new[]();
    }
    CoreChannel = MLLoggingGetCoreChannel();
    if (os_log_type_enabled(CoreChannel, OS_LOG_TYPE_ERROR))
    {
      CoreML::shapeToString((uint64_t)&__p, (uint64_t *)a2);
      unint64_t v29 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
      _os_log_error_impl(&dword_19E58B000, CoreChannel, OS_LOG_TYPE_ERROR, "Failed to allocate MultiArrayBuffer with shape %s due to integer overflow", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v30 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v31 = std::bad_alloc::bad_alloc(v30);
    __cxa_throw(v31, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
  }
  return a1;
}

void sub_19E5932C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v32 & 1) == 0)
    {
LABEL_10:
      unint64_t v34 = *v30;
      if (*v30)
      {
        v28[7] = v34;
        operator delete(v34);
      }
      long long v35 = *v29;
      if (*v29)
      {
        v28[4] = v35;
        operator delete(v35);
      }
      uint64_t v36 = (std::__shared_weak_count *)v28[2];
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v31);
  goto LABEL_10;
}

void sub_19E593314(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    MEMORY[0x19F3C1900](v2, 0x1000C8077774924);
    __cxa_rethrow();
  }
  JUMPOUT(0x19E5933F8);
}

void sub_19E593344(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  id v5 = *v3;
  if (*v3)
  {
    v1[7] = v5;
    operator delete(v5);
  }
  id v6 = *v2;
  if (*v2)
  {
    v1[4] = v6;
    operator delete(v6);
  }
  uint8x8_t v7 = (std::__shared_weak_count *)v1[2];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  _Unwind_Resume(a1);
}

void sub_19E593358(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    free(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x19E5933F8);
}

void sub_19E593378(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  id v5 = *v3;
  if (*v3)
  {
    v1[7] = v5;
    operator delete(v5);
  }
  id v6 = *v2;
  if (*v2)
  {
    v1[4] = v6;
    operator delete(v6);
  }
  uint8x8_t v7 = (std::__shared_weak_count *)v1[2];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  _Unwind_Resume(a1);
}

void sub_19E593384(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x19E5933F8);
}

void sub_19E593398(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v15);
  JUMPOUT(0x19E5933CCLL);
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint8x8_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint8x8_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    unint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    unint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    unint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

unint64_t CoreML::MultiArrayBuffer::stridesForConiguousArray(unint64_t **a1, unint64_t **a2, int a3)
{
  unint64_t v6 = a2[1] - *a2;
  uint64_t v17 = 1;
  unint64_t result = (unint64_t)std::vector<unsigned long>::vector(a1, v6, &v17);
  if (a3)
  {
    uint64_t v8 = *a2;
    unint64_t v9 = a2[1];
    if (*a2 != v9)
    {
      uint64_t v10 = *a1;
      unint64_t v11 = 1;
      do
      {
        unint64_t result = CoreML::SafeMultiplies<unsigned long>::operator()(v11, *v8);
        *v10++ = v11;
        ++v8;
        unint64_t v11 = result;
      }
      while (v8 != v9);
    }
  }
  else
  {
    unint64_t v13 = *a2;
    unint64_t v12 = a2[1];
    if (v12 != *a2)
    {
      unint64_t v14 = a1[1] - 1;
      unint64_t v15 = 1;
      do
      {
        unint64_t v16 = *--v12;
        unint64_t result = CoreML::SafeMultiplies<unsigned long>::operator()(v15, v16);
        *v14-- = v15;
        unint64_t v15 = result;
      }
      while (v12 != v13);
    }
  }
  return result;
}

void sub_19E5935D4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::SafeMultiplies<unsigned long>::operator()(unint64_t a1, unint64_t a2)
{
  if (!is_mul_ok(a1, a2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "integer overflow in multiplication.");
    __cxa_throw(exception, (struct type_info *)off_1E59A3018, MEMORY[0x1E4FBA1D0]);
  }
  return a1 * a2;
}

void sub_19E593658(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint8x8_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_19E5936D4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t StorageManager::StorageManager(uint64_t a1, void *a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  uint64_t v3 = a2[1];
  *(void *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_19E59374C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

void sub_19E59386C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t CoreML::MultiArrayBuffer::offsetForIndex(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    a2 += *(void *)(a1 + 80);
  }
  uint64_t v3 = *(char **)(a1 + 24);
  unint64_t v4 = *(char **)(a1 + 32);
  if (v4 - v3 == 8) {
    return **(void **)(a1 + 48) * a2;
  }
  if (v4 == v3) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v6 = (v4 - v3) >> 3;
  unint64_t v7 = *(void *)(a1 + 80);
  uint64_t v8 = *(uint64_t **)(a1 + 48);
  if (v6 <= 1) {
    unint64_t v6 = 1;
  }
  do
  {
    unint64_t v9 = *(void *)v3;
    v3 += 8;
    v7 /= v9;
    uint64_t v10 = *v8++;
    result += v10 * (a2 / v7);
    a2 %= v7;
    --v6;
  }
  while (v6);
  return result;
}

void sub_19E59399C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_19E593ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }

  _Unwind_Resume(a1);
}

void StorageManager::mutableStorage(StorageManager *this, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 24) && (unsigned __int8 v4 = atomic_load((unsigned __int8 *)a2), (v4 & 1) != 0))
  {
    unint64_t v6 = (os_unfair_lock_s *)(a2 + 4);
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 4));
    unsigned __int8 v7 = atomic_load((unsigned __int8 *)a2);
    if (v7)
    {
      id v36 = 0;
      uint64_t v37 = 0;
      (*(void (**)(void))(*(void *)(a2 + 24) + 16))();
      id v8 = v36;
      uint64_t v9 = v37;
      CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&__p, *(void *)(a2 + 8));
      uint64_t v10 = __p;
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      if ((void *)v9 != v10)
      {
        if ([v8 count] == (uint64_t)(*(void *)(*(void *)(a2 + 8) + 56)
                                                  - *(void *)(*(void *)(a2 + 8) + 48)) >> 3)
        {
          std::string __p = 0;
          unint64_t v34 = 0;
          unint64_t v35 = 0;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          id v11 = v8;
          uint64_t v12 = [v11 countByEnumeratingWithState:&v29 objects:v38 count:16];
          if (v12)
          {
            uint64_t v13 = *(void *)v30;
            do
            {
              for (uint64_t i = 0; i != v12; ++i)
              {
                if (*(void *)v30 != v13) {
                  objc_enumerationMutation(v11);
                }
                unsigned int v15 = [*(id *)(*((void *)&v29 + 1) + 8 * i) unsignedIntValue];
                uint64_t v16 = v15;
                uint64_t v17 = v34;
                if ((unint64_t)v34 >= v35)
                {
                  unint64_t v19 = (std::__shared_weak_count *)__p;
                  int64_t v20 = ((char *)v34 - (unsigned char *)__p) >> 3;
                  unint64_t v21 = v20 + 1;
                  if ((unint64_t)(v20 + 1) >> 61) {
                    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v22 = v35 - (void)__p;
                  if ((uint64_t)(v35 - (void)__p) >> 2 > v21) {
                    unint64_t v21 = v22 >> 2;
                  }
                  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v23 = v21;
                  }
                  if (v23)
                  {
                    unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v35, v23);
                    unint64_t v19 = (std::__shared_weak_count *)__p;
                    uint64_t v17 = v34;
                  }
                  else
                  {
                    unint64_t v24 = 0;
                  }
                  unint64_t v25 = &v24[8 * v20];
                  *(void *)unint64_t v25 = v16;
                  p_shared_owners = (std::__shared_weak_count *)(v25 + 8);
                  while (v17 != v19)
                  {
                    uint64_t shared_weak_owners = v17[-1].__shared_weak_owners_;
                    uint64_t v17 = (std::__shared_weak_count *)((char *)v17 - 8);
                    *((void *)v25 - 1) = shared_weak_owners;
                    v25 -= 8;
                  }
                  std::string __p = v25;
                  unint64_t v34 = p_shared_owners;
                  unint64_t v35 = (unint64_t)&v24[8 * v23];
                  if (v19) {
                    operator delete(v19);
                  }
                }
                else
                {
                  v34->__vftable = (std::__shared_weak_count_vtbl *)v15;
                  p_shared_owners = (std::__shared_weak_count *)&v17->__shared_owners_;
                }
                unint64_t v34 = p_shared_owners;
              }
              uint64_t v12 = [v11 countByEnumeratingWithState:&v29 objects:v38 count:16];
            }
            while (v12);
          }

          uint64_t v27 = operator new(0x88uLL);
          v27[1] = 0;
          v27[2] = 0;
          void *v27 = &unk_1EF0DD7A0;
          CoreML::MultiArrayBuffer::MultiArrayBuffer(v27 + 3, v37);
        }
        id v28 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"The mutable shaped buffer provider has reported incorrect dimensions of strides." userInfo:0];
        objc_exception_throw(v28);
      }
      atomic_store(0, (unsigned __int8 *)a2);
    }
    os_unfair_lock_unlock(v6);
    std::atomic_load[abi:ne180100]<CoreML::MultiArrayBuffer>(this, (void *)(a2 + 8));
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)this = *(void *)(a2 + 8);
    *((void *)this + 1) = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_19E593E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void CoreML::MultiArrayBuffer::getBytesWithHandler(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unint64_t v25 = a2;
  std::atomic_load[abi:ne180100]<CoreML::MultiArrayBuffer>(&v26, (void *)(a1 + 8));
  if (v26)
  {
    uint64_t v3 = *(unint64_t **)(a1 + 48);
    unsigned __int8 v4 = *(unint64_t **)(a1 + 56);
    if (v3 != v4)
    {
      uint64_t v5 = v3 + 1;
      if (v3 + 1 == v4)
      {
        unsigned __int8 v7 = *(unint64_t **)(a1 + 48);
      }
      else
      {
        unint64_t v6 = *v3;
        unsigned __int8 v7 = *(unint64_t **)(a1 + 48);
        id v8 = v3 + 1;
        do
        {
          unint64_t v10 = *v8++;
          unint64_t v9 = v10;
          BOOL v11 = v6 >= v10;
          if (v6 <= v10) {
            unint64_t v6 = v9;
          }
          if (!v11) {
            unsigned __int8 v7 = v5;
          }
          uint64_t v5 = v8;
        }
        while (v8 != v4);
      }
      unint64_t v17 = *v7;
      unint64_t v18 = *(void *)(*(void *)(a1 + 24) + (char *)v7 - (char *)v3);
      unint64_t v19 = *v7 * v18;
      if (is_mul_ok(v17, v18)) {
        unint64_t v20 = v19;
      }
      else {
        unint64_t v20 = -1;
      }
      is_mul_ok(v20, (unsigned __int16)*(_DWORD *)(a1 + 72) >> 3);
    }
    v25[2]();
  }
  else
  {
    uint64_t v12 = *(__CVBuffer **)(a1 + 96);
    if (v12)
    {
      uint64_t v13 = v25;
      CVReturn v14 = CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(a1 + 96), 0);
      if (v14)
      {
        CVReturn v21 = v14;
        uint64_t v22 = MLLoggingGetCoreChannel();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67109120;
          CVReturn v29 = v21;
          _os_log_error_impl(&dword_19E58B000, v22, OS_LOG_TYPE_ERROR, "Failed to lock pixel buffer with error: %d", buf, 8u);
        }

        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        unint64_t v24 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v24, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
      }
      BaseAddress = CVPixelBufferGetBaseAddress(v12);
      size_t DataSize = CVPixelBufferGetDataSize(v12);
      ((void (*)(void (**)(void), void *, size_t))v13[2])(v13, BaseAddress, DataSize);
      CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 96), 0);
    }
    else
    {
      ((void (*)(void (**)(void), void, void))v25[2])(v25, 0, 0);
    }
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
}

void sub_19E594130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

void std::atomic_load[abi:ne180100]<CoreML::MultiArrayBuffer>(void *a1, void *a2)
{
  sp_mut = std::__get_sp_mut(a2);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }

  std::__sp_mut::unlock(sp_mut);
}

void sub_19E59424C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double StorageManager::storage(StorageManager *this, uint64_t a2)
{
  if (*(void *)(a2 + 24) && (unsigned __int8 v3 = atomic_load((unsigned __int8 *)a2), (v3 & 1) != 0))
  {
    std::atomic_load[abi:ne180100]<CoreML::MultiArrayBuffer>(&v6, (void *)(a2 + 8));
    double result = *(double *)&v6;
    *(_OWORD *)this = v6;
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 16);
    *(void *)this = *(void *)(a2 + 8);
    *((void *)this + 1) = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

uint64_t ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19E594834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,long long buf)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  MEMORY[0x19F3C1920](v25, 0x10A0C4077B4ED97);
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  if (__p) {
    operator delete(__p);
  }
  if ((void)buf)
  {
    *((void *)&buf + 1) = buf;
    operator delete((void *)buf);
  }
  if (a2 == 1)
  {
    uint64_t v30 = __cxa_begin_catch(a1);
    long long v31 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v36;
      _os_log_error_impl(&dword_19E58B000, v31, OS_LOG_TYPE_ERROR, "Failed to initialize MLMultiArray using existing buffer. (Underlying exception: %s)", (uint8_t *)&buf, 0xCu);
    }

    long long v32 = (void *)MEMORY[0x1E4F28C58];
    a19 = *MEMORY[0x1E4F28568];
    uint64_t v33 = NSString;
    (*(void (**)(void *))(*(void *)v30 + 16))(v30);
    unint64_t v34 = [v33 stringWithFormat:@"Failed to initialize MLMultiArray using existing buffer. (Underlying exception: %s)"];
    a20 = (uint64_t)v34;
    unint64_t v35 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a20 forKeys:&a19 count:1];
    [v32 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v35];
    objc_claimAutoreleasedReturnValue();

    __cxa_end_catch();
    JUMPOUT(0x19E5947BCLL);
  }

  _Unwind_Resume(a1);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void anonymous namespace'::indexVectorFromNSArray(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  id v21 = v3;
  std::vector<unsigned long>::reserve((void **)a1, [v3 count]);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v4 = v21;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = [*(id *)(*((void *)&v22 + 1) + 8 * i) unsignedLongLongValue];
        uint64_t v9 = v8;
        BOOL v11 = *(uint64_t **)(a1 + 8);
        unint64_t v10 = *(void *)(a1 + 16);
        if ((unint64_t)v11 >= v10)
        {
          uint64_t v13 = *(uint64_t **)a1;
          uint64_t v14 = ((uint64_t)v11 - *(void *)a1) >> 3;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v10 - (void)v13;
          if (v16 >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 16, v17);
            uint64_t v13 = *(uint64_t **)a1;
            BOOL v11 = *(uint64_t **)(a1 + 8);
          }
          else
          {
            unint64_t v18 = 0;
          }
          unint64_t v19 = (uint64_t *)&v18[8 * v14];
          uint64_t *v19 = v9;
          uint64_t v12 = v19 + 1;
          while (v11 != v13)
          {
            uint64_t v20 = *--v11;
            *--unint64_t v19 = v20;
          }
          *(void *)a1 = v19;
          *(void *)(a1 + 8) = v12;
          *(void *)(a1 + 16) = &v18[8 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *BOOL v11 = v8;
          uint64_t v12 = v11 + 1;
        }
        *(void *)(a1 + 8) = v12;
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v5);
  }
}

void sub_19E594D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v13 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  id v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    unsigned __int8 v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    BOOL v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E594F4C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::MultiArrayBuffer::computeAttributes(uint64_t **a1, uint64_t *a2, uint64_t a3, int a4)
{
  unint64_t v4 = (a3 - (uint64_t)a2) >> 3;
  int64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v4 != v6 - *a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v19, a1[1] - *a1);
    unint64_t v15 = std::string::insert(&v19, 0, "strides must be ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    unint64_t v17 = std::string::append(&v20, " elements for shape");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v21);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a4) {
    uint64_t result = 4;
  }
  else {
    uint64_t result = 0;
  }
  if (v6 == v5)
  {
LABEL_9:
    uint64_t result = result | 1;
  }
  else
  {
    uint64_t v8 = 1;
    uint64_t v9 = (a3 - (uint64_t)a2) >> 3;
    while (a2[v9 - 1] == v8)
    {
      v8 *= v5[--v9];
      if (!v9) {
        goto LABEL_9;
      }
    }
  }
  if (v6 == v5) {
    return result | 2;
  }
  if (v4 <= 1) {
    unint64_t v4 = 1;
  }
  uint64_t v10 = 1;
  while (1)
  {
    uint64_t v11 = *a2++;
    if (v11 != v10) {
      break;
    }
    uint64_t v12 = *v5++;
    v10 *= v12;
    if (!--v4) {
      return result | 2;
    }
  }
  return result;
}

void sub_19E5950D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

uint64_t std::__shared_ptr_emplace<CoreML::MultiArrayBuffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void CoreML::MultiArrayBuffer::~MultiArrayBuffer(CoreML::MultiArrayBuffer *this)
{
  *(void *)this = &unk_1EF0DAF70;
  uint64_t v2 = (__CVBuffer *)*((void *)this + 12);
  if (v2) {
    CVPixelBufferRelease(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
  int64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

{
  uint64_t vars8;

  CoreML::MultiArrayBuffer::~MultiArrayBuffer(this);

  JUMPOUT(0x19F3C1920);
}

uint64_t StorageManager::StorageManager(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  *(unsigned char *)a1 = v5 != 0;
  *(_DWORD *)(a1 + 4) = 0;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = *(void *)(a1 + 24) = _Block_copy(v5);

  return a1;
}

void sub_19E59527C(_Unwind_Exception *a1)
{
  unint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType,unsigned long)::$_1,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x19F3C1900);
  }
  return result;
}

void sub_19E595408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Archiver::_IDataBlobImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Archiver::_IDataBlobImpl::~_IDataBlobImpl(Archiver::_IDataBlobImpl *this)
{
  *(void *)this = &unk_1EF0DCAD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  Archiver::_IDataBlobImpl::~_IDataBlobImpl(this);

  JUMPOUT(0x19F3C1920);
}

uint64_t std::__shared_ptr_pointer<std::ifstream *,std::shared_ptr<std::istream>::__shared_ptr_default_delete<std::istream,std::ifstream>,std::allocator<std::ifstream>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_emplace<Archiver::_IArchiveDiskImpl>::__on_zero_shared(uint64_t a1)
{
}

void Archiver::_IArchiveImpl::~_IArchiveImpl(Archiver::_IArchiveImpl *this)
{
  *(void *)this = &unk_1EF0DCA30;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t std::__shared_ptr_emplace<CoreML::Specification::ModelDescription>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_19E5957E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

void sub_19E5958C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<Archiver::MMappedFile *,std::shared_ptr<Archiver::MMappedFile>::__shared_ptr_default_delete<Archiver::MMappedFile,Archiver::MMappedFile>,std::allocator<Archiver::MMappedFile>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void Archiver::MMappedFile::~MMappedFile(Archiver::MMappedFile *this)
{
  Archiver::MMappedFile::~MMappedFile(this);

  JUMPOUT(0x19F3C1920);
}

{
  void *v2;
  NSObject *v3;
  void *v4;
  int v5;
  int v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EF0DCA00;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2 != (void *)-1 && munmap(v2, *((void *)this + 5)) == -1)
  {
    uint64_t v3 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      unint64_t v4 = (void *)((char *)this + 8);
      if (*((char *)this + 31) < 0) {
        unint64_t v4 = (void *)*v4;
      }
      id v5 = *__error();
      uint64_t v6 = 136315394;
      uint64_t v7 = v4;
      uint64_t v8 = 1024;
      uint64_t v9 = v5;
      _os_log_error_impl(&dword_19E58B000, v3, OS_LOG_TYPE_ERROR, "File %s: error unmapping memory; msg=%{errno}d",
        (uint8_t *)&v6,
        0x12u);
    }
  }
  *((void *)this + 4) = -1;
  *((void *)this + 5) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void sub_19E595AA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__shared_ptr_emplace<CoreML::Specification::Metadata>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_19E595C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E595C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E596AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19E596F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(a1);
}

void sub_19E5970C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E5973D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t prepareEngine(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  if ([v5 conformsToProtocol:&unk_1EF12E148])
  {
    id v6 = v5;
    uint64_t v7 = [v6 configuration];
    uint64_t v8 = [v7 predictionConcurrencyHint];

    if (v8 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v8;
    }
    if (v9 >= a2) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = v9;
    }
    uint64_t v11 = [v6 prepareWithConcurrencyHint:v10 error:a3];
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

void sub_19E5974E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E597580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5976AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E59775C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E597AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E59810C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5987EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19E598ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E598B8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id URLOfMILTextInArchive(_MLModelInputArchiver *a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kModelMILFileName);
  IArchive::blob(&v9, *(void *)a1, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = (void *)(v9 + 8);
  if (*(char *)(v9 + 31) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  uint64_t v3 = (void *)MEMORY[0x1E4F1CB10];
  unint64_t v4 = [NSString stringWithUTF8String:v2];
  id v5 = [v3 fileURLWithPath:v4 isDirectory:0];

  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }

  return v5;
}

void sub_19E599434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  long long v18 = v17;

  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(a1);
}

void sub_19E599AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (**a11)(void), uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }

  a11[2](a11);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,std::string>::at(uint64_t a1, void *a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 56;
}

void sub_19E59A2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,uint64_t a35,uint64_t a36,void *a37,void *a38)
{
  _Unwind_Resume(a1);
}

id conformedStateDescriptions(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (!v6)
  {

LABEL_15:
    id v7 = v4;
    goto LABEL_16;
  }
  id v7 = 0;
  uint64_t v8 = *(void *)v14;
  do
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if (*(void *)v14 != v8) {
        objc_enumerationMutation(v5);
      }
      uint64_t v10 = *(void *)(*((void *)&v13 + 1) + 8 * i);
      uint64_t v11 = objc_msgSend(v5, "objectForKeyedSubscript:", v10, (void)v13);
      if ([v11 type] == 8)
      {
        if (!v7) {
          id v7 = (id)[v4 mutableCopy];
        }
        [v7 setObject:v11 forKeyedSubscript:v10];
      }
    }
    uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  }
  while (v6);

  if (!v7) {
    goto LABEL_15;
  }
LABEL_16:

  return v7;
}

void sub_19E59A5F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E59A6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E59A3018, MEMORY[0x1E4FBA1D0]);
}

void sub_19E59A740(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E59A85C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E59AAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t operator>>(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(*(void *)a1 + 32) + 16))(*(void *)(*(void *)a1 + 32));
  uint64_t v2 = (void *)std::istream::read();
  if ((*((unsigned char *)v2 + *(void *)(*v2 - 24) + 32) & 5) != 0)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    *(void *)&v5.__val_ = 1;
    v5.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, "Error reading from archive.", &v5);
    __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
  }
  return a1;
}

{
  void *v2;
  std::ios_base::failure *exception;
  std::error_code v5;

  (*(void (**)(void))(**(void **)(*(void *)a1 + 32) + 16))(*(void *)(*(void *)a1 + 32));
  uint64_t v2 = (void *)std::istream::read();
  if ((*((unsigned char *)v2 + *(void *)(*v2 - 24) + 32) & 5) != 0)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    *(void *)&v5.__val_ = 1;
    v5.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, "Error reading from archive.", &v5);
    __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
  }
  return a1;
}

{
  void *v2;
  std::ios_base::failure *exception;
  std::error_code v5;

  (*(void (**)(void))(**(void **)(*(void *)a1 + 32) + 16))(*(void *)(*(void *)a1 + 32));
  uint64_t v2 = (void *)std::istream::read();
  if ((*((unsigned char *)v2 + *(void *)(*v2 - 24) + 32) & 5) != 0)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    *(void *)&v5.__val_ = 1;
    v5.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, "Error reading from archive.", &v5);
    __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
  }
  return a1;
}

{
  void *v2;
  std::ios_base::failure *exception;
  std::error_code v5;

  (*(void (**)(void))(**(void **)(*(void *)a1 + 32) + 16))(*(void *)(*(void *)a1 + 32));
  uint64_t v2 = (void *)std::istream::read();
  if ((*((unsigned char *)v2 + *(void *)(*v2 - 24) + 32) & 5) != 0)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    *(void *)&v5.__val_ = 1;
    v5.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, "Error reading from archive.", &v5);
    __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
  }
  return a1;
}

{
  void *v2;
  std::ios_base::failure *exception;
  std::error_code v5;

  (*(void (**)(void))(**(void **)(*(void *)a1 + 32) + 16))(*(void *)(*(void *)a1 + 32));
  uint64_t v2 = (void *)std::istream::read();
  if ((*((unsigned char *)v2 + *(void *)(*v2 - 24) + 32) & 5) != 0)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    *(void *)&v5.__val_ = 1;
    v5.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, "Error reading from archive.", &v5);
    __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
  }
  return a1;
}

void sub_19E59AC00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E59ACF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E59B520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,std::__shared_weak_count *a26,int a27,__int16 a28,char a29,char a30)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::find<std::string>(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  id v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  size_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v3 + 4, a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      size_t v5 = v3;
    }
    id v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, _OWORD **a3)
{
  size_t v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  BOOL v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    BOOL v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((void *)v6 + 8) = 0;
    *((void *)v6 + 9) = 0;
    *((void *)v6 + 7) = 0;
    char v12 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

uint64_t IArchive::hasNestedArchive(void *a1, void *a2)
{
  size_t v4 = a1 + 3;
  size_t v5 = (void *)a1[3];
  if (v5)
  {
    BOOL v6 = a1 + 3;
    do
    {
      BOOL v7 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v5 + 4, a2);
      uint64_t v8 = v5 + 1;
      if (!v7)
      {
        uint64_t v8 = v5;
        BOOL v6 = v5;
      }
      size_t v5 = (void *)*v8;
    }
    while (*v8);
    if (v6 != v4 && !google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, v6 + 4)) {
      return 1;
    }
  }
  uint64_t v9 = *(uint64_t (**)(void))(*(void *)*a1 + 48);

  return v9();
}

BOOL Archiver::_IArchiveDiskImpl::hasNestedArchive(uint64_t a1, uint64_t a2)
{
  v20[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 31) >= 0) {
    size_t v4 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    size_t v4 = *(void *)(a1 + 16);
  }
  size_t v5 = &v17;
  std::string::basic_string[abi:ne180100]((uint64_t)&v17, v4 + 1);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    size_t v5 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    uint64_t v8 = *(char **)(a1 + 8);
    BOOL v7 = (char *)(a1 + 8);
    BOOL v6 = v8;
    if (v7[23] >= 0) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v6;
    }
    memmove(v5, v9, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 47;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v11 = *(const std::string::value_type **)a2;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a2 + 8);
  }
  uint64_t v13 = std::string::append(&v17, v11, v12);
  std::string __p = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  std::ifstream::basic_ifstream(v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  BOOL v14 = *(_DWORD *)&v19[*(void *)(v18[0] - 24) + 16] == 0;
  v18[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x19F3C1500](v19);
  std::istream::~istream();
  MEMORY[0x19F3C1850](v20);
  return v14;
}

void sub_19E59BAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  id v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  BOOL v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x19F3C14F0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;

  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  id v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  BOOL v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x19F3C14F0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_19E59BCB8(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x19F3C1850](v1);
  _Unwind_Resume(a1);
}

uint64_t operator>><std::string,std::string>(uint64_t a1, uint64_t **a2)
{
  unint64_t v13 = 0;
  operator>>(a1);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a2[1]);
  *a2 = (uint64_t *)(a2 + 1);
  a2[2] = 0;
  a2[1] = 0;
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)uint64_t v11 = 0u;
  if (v13)
  {
    for (unint64_t i = 0; i < v13; ++i)
    {
      operator>>(a1, (std::string *)v11);
      operator>>(a1, (std::string *)&__p[1]);
      uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_equal<std::string>(a2, a2 + 1, &v17, &v16, v11);
      if (!*v5)
      {
        BOOL v6 = v5;
        uint64_t v7 = (char *)operator new(0x50uLL);
        uint64_t v8 = v7;
        v14[0] = v7;
        v14[1] = a2 + 1;
        char v15 = 0;
        if (SHIBYTE(__p[0]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v7 + 32), (const std::string::value_type *)v11[0], (std::string::size_type)v11[1]);
        }
        else
        {
          *((_OWORD *)v7 + 2) = *(_OWORD *)v11;
          *((void **)v7 + 6) = __p[0];
        }
        uint64_t v9 = (std::string *)(v8 + 56);
        if (SHIBYTE(__p[3]) < 0)
        {
          std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)__p[1], (std::string::size_type)__p[2]);
        }
        else
        {
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[1];
          *((void **)v8 + 9) = __p[3];
        }
        char v15 = 1;
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a2, v17, v6, (uint64_t *)v8);
        v14[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
      }
    }
    if (SHIBYTE(__p[3]) < 0) {
      operator delete(__p[1]);
    }
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v11[0]);
  }
  return a1;
}

void sub_19E59BE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (*(char *)(v16 + 55) < 0) {
    operator delete(*v17);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&a16);
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t operator>>(uint64_t a1, std::string *a2)
{
  return a1;
}

void sub_19E59BFF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Archiver::_IDataBlobImpl::asStream(Archiver::_IDataBlobImpl *this)
{
  if (!*((void *)this + 4)) {
    operator new();
  }
  return *((void *)this + 4);
}

void sub_19E59C158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void sub_19E59C2BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_equal<std::string>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 == a2 || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a5, a2 + 4))
  {
    uint64_t v11 = *a2;
    if ((void *)*a1 == a2)
    {
      unint64_t v13 = a2;
LABEL_17:
      if (v11)
      {
        *a3 = v13;
        return v13 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v11)
    {
      std::string::size_type v12 = (void *)*a2;
      do
      {
        unint64_t v13 = v12;
        std::string::size_type v12 = (void *)v12[1];
      }
      while (v12);
    }
    else
    {
      uint64_t v16 = a2;
      do
      {
        unint64_t v13 = (void *)v16[2];
        BOOL v17 = *v13 == (void)v16;
        uint64_t v16 = v13;
      }
      while (v17);
    }
    if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v13 + 4, a5)) {
      goto LABEL_17;
    }
  }
  else
  {
    if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2 + 4, a5))
    {
      *a3 = a2;
      *a4 = a2;
      return a4;
    }
    uint64_t v14 = a2[1];
    if (v14)
    {
      char v15 = (void *)a2[1];
      do
      {
        a4 = v15;
        char v15 = (void *)*v15;
      }
      while (v15);
    }
    else
    {
      int v18 = a2;
      do
      {
        a4 = (void *)v18[2];
        BOOL v17 = *a4 == (void)v18;
        int v18 = a4;
      }
      while (!v17);
    }
    if (a4 == v9 || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a5, a4 + 4))
    {
      if (v14)
      {
        *a3 = a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return a4;
    }
  }

  return std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_19E59C69C(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x19F3C1850](v1);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,IArchive>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = (void *)v3;
      if (*(void *)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void **)(a1 + 8);
      uint64_t v9 = (void *)v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          uint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          std::string v19 = (void *)v3;
          uint64_t v11 = (uint64_t **)v3;
LABEL_14:
          std::string::size_type v12 = (char *)operator new(0x60uLL);
          unint64_t v13 = (uint64_t *)v12;
          if (*((char *)v5 + 55) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v12 + 32), (const std::string::value_type *)v5[4], v5[5]);
          }
          else
          {
            long long v14 = *((_OWORD *)v5 + 2);
            *((void *)v12 + 6) = v5[6];
            *((_OWORD *)v12 + 2) = v14;
          }
          uint64_t v15 = v5[8];
          v13[7] = v5[7];
          v13[8] = v15;
          if (v15) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
          }
          std::map<std::string,IArchive>::map[abi:ne180100](v13 + 9, v5 + 9);
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v19, v11, v13);
          goto LABEL_20;
        }
        std::string v19 = v7;
        uint64_t v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        uint64_t v11 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v19, v5 + 4);
      }
      if (!*v11) {
        goto LABEL_14;
      }
LABEL_20:
      uint64_t v16 = (void *)v5[1];
      if (v16)
      {
        do
        {
          BOOL v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          BOOL v17 = (void *)v5[2];
          BOOL v10 = *v17 == (void)v5;
          uint64_t v5 = v17;
        }
        while (!v10);
      }
      uint64_t v5 = v17;
    }
    while (v17 != v4);
  }
  return a1;
}

void sub_19E59C874(_Unwind_Exception *a1)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,IArchive>,void *>>>::operator()[abi:ne180100](0, v1);
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void sub_19E59C970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, long long a10, char a11, char a12)
{
  if (a2 == 1)
  {
    std::string::size_type v12 = __cxa_begin_catch(exception_object);
    unint64_t v13 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)v12 + 16))(v12);
      LODWORD(__p) = 136315394;
      WORD2(a10) = 2080;
      *(void *)((char *)&a10 + 6) = v14;
      _os_log_error_impl(&dword_19E58B000, v13, OS_LOG_TYPE_ERROR, "Failed to convert string %s to integer with exception message: %s. Fellback to 0.", (uint8_t *)&__p, 0x16u);
    }

    __cxa_end_catch();
    JUMPOUT(0x19E59C930);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E59CCC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom(uint64_t a1, void *a2)
{
  uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v9, a2);
  uint64_t v4 = v9[0];
  if (v9[0])
  {
    uint64_t v5 = a1 + 8;
    do
    {
      uint64_t v6 = *((void *)v4 + 3);
      uint64_t v7 = (const std::string *)(v6 + 24);
      uint64_t v8 = google::protobuf::Map<std::string,std::string>::operator[](v5, v6);
      std::string::operator=((std::string *)v8, v7);
      uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(v9);
      uint64_t v4 = v9[0];
    }
    while (v9[0]);
  }
  return result;
}

google::protobuf::Arena **google::protobuf::Map<std::string,std::string>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  std::string::size_type v24 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  uint64_t v6 = v26[0];
  if (v26[0]) {
    goto LABEL_18;
  }
  unint64_t v7 = v4[1];
  unint64_t v8 = *v4 + 1;
  unint64_t v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      uint64_t v20 = 2 * v7;
LABEL_33:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize((uint64_t)v4, v20, v5);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v25, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      uint64_t v11 = v25[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    char v21 = 0;
    unint64_t v22 = ((5 * v8) >> 2) + 1;
    do
      ++v21;
    while (v22 << v21 < v9);
    uint64_t v20 = v7 >> v21 <= 8 ? 8 : v7 >> v21;
    if (v20 != v7) {
      goto LABEL_33;
    }
  }
  uint64_t v11 = v26[3];
LABEL_11:
  std::string::size_type v12 = (google::protobuf::Arena *)v4[5];
  if (v12) {
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E4FBA3A0], 40);
  }
  else {
    Aligned = (std::string *)operator new(0x28uLL);
  }
  uint64_t v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v24;
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v25, (uint64_t)v4, v11, v14);
  ++*v4;
  uint64_t v6 = v25[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (!*(void *)a1) {
      operator new();
    }
    uint64_t v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E4FBA3A0], 48);
    BOOL v17 = *(google::protobuf::Arena **)a1;
    v16[1] = 0;
    v16[2] = 0;
    *uint64_t v16 = 0;
    google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
    int v18 = *(google::protobuf::Arena **)a1;
    v16[4] = 0;
    v16[5] = 0;
    v16[3] = 0;
    google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
    std::string::operator=((std::string *)v16, (const std::string *)a2);
    *(void *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_19E59CFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x19F3C1920](v14, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(void *a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t result = google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(a2, a3);
  unint64_t v9 = result;
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(v10 + 8 * result);
  if (v11)
  {
    if (v11 != *(void *)(v10 + 8 * (result ^ 1)))
    {
      while (1)
      {
        uint64_t result = std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v11, a3);
        if (result) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 32);
        if (!v11) {
          goto LABEL_10;
        }
      }
      *a1 = v11;
      goto LABEL_12;
    }
    unint64_t v9 = result & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v12 = *(void *)(v10 + 8 * (result & 0xFFFFFFFFFFFFFFFELL));
    uint64_t result = std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, a3);
    if (v12 + 8 != result)
    {
      if (a4) {
        *a4 = result;
      }
      *a1 = *(void *)(result + 32);
LABEL_12:
      a1[1] = a2;
      a1[2] = v9;
      goto LABEL_13;
    }
  }
LABEL_10:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
LABEL_13:
  a1[3] = v9;
  return result;
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(uint64_t a1, unsigned char *a2)
{
  if ((char)a2[23] >= 0) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = *(unsigned char **)a2;
  }
  char v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = 0;
    size_t v5 = v2 + 1;
    do
    {
      uint64_t v4 = 5 * v4 + v3;
      int v6 = *v5++;
      char v3 = v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v4 = 0;
  }
  return (*(void *)(a1 + 8) - 1) & (*(void *)(a1 + 16) + v4);
}

uint64_t *google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(uint64_t *result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v5 = a3;
  unint64_t v7 = result;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(v8 + 8 * a3);
  if (!v9)
  {
    a4[4] = 0;
    *(void *)(v8 + 8 * a3) = a4;
    goto LABEL_8;
  }
  if (v9 != *(void *)(v8 + 8 * (a3 ^ 1)))
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(v8 + 8 * a3);
    do
    {
      ++v10;
      uint64_t v11 = *(void *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      a4[4] = v9;
      *(void *)(v8 + 8 * a3) = a4;
LABEL_11:
      *unint64_t v7 = (uint64_t)v4;
      v7[1] = a2;
      v7[2] = v5;
      return result;
    }
    google::protobuf::Map<std::string,std::string>::InnerMap::TreeConvert(a2, a3);
    v4[4] = 0;
    uint64_t v14 = *(void *)(*(void *)(a2 + 32) + 8 * v5);
    long long v15 = v4;
    uint64_t result = std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, v4, (uint64_t *)&v15);
    v5 &= ~1uLL;
    uint64_t v4 = (void *)result[4];
LABEL_8:
    unint64_t v12 = *(void *)(a2 + 24);
    if (v5 < v12) {
      unint64_t v12 = v5;
    }
    *(void *)(a2 + 24) = v12;
    goto LABEL_11;
  }
  a4[4] = 0;
  uint64_t v13 = *(void *)(v8 + 8 * a3);
  long long v15 = a4;
  uint64_t result = std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, a4, (uint64_t *)&v15);
  *unint64_t v7 = result[4];
  v7[1] = a2;
  v7[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void *google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(void *result, void *a2)
{
  unint64_t v2 = a2[3];
  unint64_t v3 = a2[1];
  if (v3 <= v2)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v4 = a2[4];
    while (1)
    {
      uint64_t v5 = *(void *)(v4 + 8 * v2);
      if (v5) {
        break;
      }
      if (v3 == ++v2)
      {
        uint64_t v5 = 0;
        unint64_t v2 = a2[1];
        goto LABEL_9;
      }
    }
    if (v5 == *(void *)(v4 + 8 * (v2 ^ 1))) {
      uint64_t v5 = *(void *)(*(void *)v5 + 32);
    }
  }
LABEL_9:
  *uint64_t result = v5;
  result[1] = a2;
  result[2] = v2;
  return result;
}

void CoreML::Specification::Metadata::~Metadata(CoreML::Specification::Metadata *this)
{
  *(void *)this = &unk_1EF0DABB8;
  uint64_t v2 = *((void *)this + 6);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x19F3C1920](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 7);
  if ((long long *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x19F3C1920](v4, 0x1012C40EC159624);
  }
  uint64_t v6 = *((void *)this + 8);
  if ((long long *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    MEMORY[0x19F3C1920](v6, 0x1012C40EC159624);
  }
  uint64_t v7 = *((void *)this + 9);
  if ((long long *)v7 != &google::protobuf::internal::fixed_address_empty_string && v7)
  {
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    MEMORY[0x19F3C1920](v7, 0x1012C40EC159624);
  }
  google::protobuf::Map<std::string,std::string>::~Map((void *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::Metadata::~Metadata(this);

  JUMPOUT(0x19F3C1920);
}

void *google::protobuf::Map<std::string,std::string>::~Map(void *a1)
{
  google::protobuf::Map<std::string,std::string>::clear(a1);
  if (!*a1)
  {
    uint64_t v2 = a1[2];
    if (v2)
    {
      uint64_t v3 = google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x19F3C1920](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

void google::protobuf::Map<std::string,std::string>::clear(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  unint64_t v2 = v1[3];
  unint64_t v3 = v1[1];
  if (v3 > v2)
  {
    uint64_t v5 = v1[4];
    while (1)
    {
      uint64_t v6 = *(void *)(v5 + 8 * v2);
      if (v6) {
        break;
      }
      if (v3 == ++v2) {
        return;
      }
    }
    if (v6 != *(void *)(v5 + 8 * (v2 ^ 1)) || (uint64_t v6 = *(void *)(*(void *)v6 + 32)) != 0)
    {
      do
      {
        v7[0] = v6;
        v7[1] = v1;
        v7[2] = v2;
        google::protobuf::Map<std::string,std::string>::erase((uint64_t)v8, a1, v7);
        uint64_t v6 = v8[0];
        uint64_t v1 = (void *)v8[1];
        unint64_t v2 = v8[2];
      }
      while (v8[0]);
    }
  }
}

__n128 google::protobuf::Map<std::string,std::string>::erase(uint64_t a1, void *a2, void *a3)
{
  if (!*a2)
  {
    uint64_t v6 = *(void *)(*a3 + 24);
    if (v6)
    {
      if (*(char *)(v6 + 47) < 0) {
        operator delete(*(void **)(v6 + 24));
      }
      if (*(char *)(v6 + 23) < 0) {
        operator delete(*(void **)v6);
      }
      MEMORY[0x19F3C1920](v6, 0x1012C403467C318);
    }
  }
  long long v18 = *(_OWORD *)a3;
  unint64_t v19 = a3[2];
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(a3);
  uint64_t v7 = (void *)a2[2];
  uint64_t v20 = 0;
  BOOL v8 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v18, &v20);
  unint64_t v9 = v19;
  unint64_t v10 = (void **)v18;
  uint64_t v11 = v7[4];
  uint64_t v12 = *(void *)(v11 + 8 * v19);
  if (v8)
  {
    uint64_t v13 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(v18, *(void *)(v11 + 8 * v19));
LABEL_14:
    *(void *)(v7[4] + 8 * v9) = v13;
    goto LABEL_15;
  }
  uint64_t v14 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, *(void **)(v20 + 32));
  if ((uint64_t *)(v12 + 8) != v14) {
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v12, v14);
  }
  if (!*(void *)(v12 + 24))
  {
    google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(v7[5], (void **)v12);
    uint64_t v13 = 0;
    *(void *)(v7[4] + ((8 * v9) | 8)) = 0;
    v9 &= ~1uLL;
    goto LABEL_14;
  }
LABEL_15:
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v7, v10);
  --*v7;
  if (v9 == v7[3])
  {
    unint64_t v16 = v7[1];
    if (v9 < v16)
    {
      uint64_t v17 = v7[4];
      do
      {
        if (*(void *)(v17 + 8 * v9)) {
          break;
        }
        void v7[3] = ++v9;
      }
      while (v16 != v9);
    }
  }
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(void *)(a1 + 16) = a3[2];
  return result;
}

BOOL google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned __int8 **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16) & (*(void *)(v3 + 8) - 1);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(v3 + 32);
  uint64_t v7 = *(void *)(v6 + 8 * v5);
  if ((unsigned __int8 *)v7 == v4) {
    return 1;
  }
  if (v7 && v7 != *(void *)(v6 + 8 * (v5 ^ 1)))
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v7 + 32);
      if (!v7) {
        break;
      }
      if ((unsigned __int8 *)v7 == v4) {
        return 1;
      }
    }
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v13, v3, v4, a2);
  uint64_t v9 = v14;
  *(void *)(a1 + 16) = v14;
  uint64_t v10 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v11 = *(void *)(v10 + 8 * v9);
  return !v11 || v11 != *(void *)(v10 + 8 * (v9 ^ 1));
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(a2 + 32);
  if (v2 == a1) {
    return v3;
  }
  *(void *)(v2 + 32) = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList();
  return v2;
}

void google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(uint64_t a1, void **__p)
{
  if (*((char *)__p + 23) < 0) {
    operator delete(*__p);
  }
  if (!*(void *)(a1 + 40))
  {
    operator delete(__p);
  }
}

void *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 32);
  if (v2) {
    goto LABEL_2;
  }
  uint64_t v11 = 0;
  if (google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::KeyValuePair>::revalidate_if_necessary((uint64_t)a1, (uint64_t *)&v11))
  {
    unint64_t v3 = a1[2] + 1;
LABEL_13:
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::SearchFrom(a1, v3);
    return a1;
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = *(void *)(*(void *)(a1[1] + 32) + 8 * v4);
  uint64_t v6 = (uint64_t)v11;
  uint64_t v7 = (void *)v11[1];
  if (v7)
  {
    do
    {
      BOOL v8 = v7;
      uint64_t v7 = (void *)*v7;
    }
    while (v7);
  }
  else
  {
    do
    {
      BOOL v8 = *(void **)(v6 + 16);
      BOOL v9 = *v8 == v6;
      uint64_t v6 = (uint64_t)v8;
    }
    while (!v9);
  }
  uint64_t v11 = v8;
  if (v8 == (void *)(v5 + 8))
  {
    unint64_t v3 = v4 + 2;
    goto LABEL_13;
  }
  uint64_t v2 = v8[4];
LABEL_2:
  *a1 = v2;
  return a1;
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    unint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      do
      {
        uint64_t v4 = *(void *)(a1 + 32);
        uint64_t v5 = *(void *)(v4 + 8 * v3);
        if (v5)
        {
          if (v5 == *(void *)(v4 + 8 * (v3 ^ 1)))
          {
            uint64_t v7 = v3 + 1;
            *(void *)(v4 + 8 * (v3 + 1)) = 0;
            *(void *)(*(void *)(a1 + 32) + 8 * v3) = 0;
            BOOL v8 = *(uint64_t **)v5;
            do
            {
              BOOL v9 = (void **)v8[4];
              uint64_t v10 = (uint64_t *)v8[1];
              uint64_t v11 = v8;
              if (v10)
              {
                do
                {
                  uint64_t v12 = v10;
                  uint64_t v10 = (uint64_t *)*v10;
                }
                while (v10);
              }
              else
              {
                do
                {
                  uint64_t v12 = (uint64_t *)v11[2];
                  BOOL v13 = *v12 == (void)v11;
                  uint64_t v11 = v12;
                }
                while (!v13);
              }
              std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v5, v8);
              google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, v9);
              BOOL v8 = v12;
            }
            while (v12 != (uint64_t *)(v5 + 8));
            google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(*(void *)(a1 + 40), (void **)v5);
            goto LABEL_17;
          }
          *(void *)(v4 + 8 * v3) = 0;
          do
          {
            uint64_t v6 = *(void *)(v5 + 32);
            google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, (void **)v5);
            uint64_t v5 = v6;
          }
          while (v6);
        }
        uint64_t v7 = v3;
LABEL_17:
        uint64_t v3 = v7 + 1;
        unint64_t v2 = *(void *)(a1 + 8);
      }
      while (v7 + 1 < v2);
    }
    *(void *)a1 = 0;
    *(void *)(a1 + 24) = v2;
    if (!*(void *)(a1 + 40)) {
      operator delete(*(void **)(a1 + 32));
    }
  }
  return a1;
}

unsigned __int8 **google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::operator++(unsigned __int8 **a1)
{
  unint64_t v2 = *a1;
  uint64_t v3 = (unsigned __int8 *)*((void *)*a1 + 4);
  if (v3) {
    goto LABEL_2;
  }
  unint64_t v16 = 0;
  uint64_t v4 = (uint64_t)a1[1];
  uint64_t v5 = (unint64_t)a1[2] & (*(void *)(v4 + 8) - 1);
  a1[2] = (unsigned __int8 *)v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v7 = *(void *)(v6 + 8 * v5);
  if ((unsigned __int8 *)v7 == v2) {
    goto LABEL_11;
  }
  if (v7 && v7 != *(void *)(v6 + 8 * (v5 ^ 1)))
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v7 + 32);
      if (!v7) {
        break;
      }
      if ((unsigned __int8 *)v7 == v2) {
        goto LABEL_11;
      }
    }
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v17, v4, v2, (uint64_t *)&v16);
  uint64_t v5 = v18;
  a1[2] = (unsigned __int8 *)v18;
  uint64_t v8 = *((void *)a1[1] + 4);
  uint64_t v9 = *(void *)(v8 + 8 * v5);
  if (!v9 || v9 != *(void *)(v8 + 8 * (v5 ^ 1)))
  {
LABEL_11:
    unint64_t v10 = v5 + 1;
LABEL_12:
    google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::SearchFrom(a1, v10);
    return a1;
  }
  uint64_t v12 = (uint64_t)v16;
  BOOL v13 = (void *)v16[1];
  if (v13)
  {
    do
    {
      uint64_t v14 = v13;
      BOOL v13 = (void *)*v13;
    }
    while (v13);
  }
  else
  {
    do
    {
      uint64_t v14 = *(void **)(v12 + 16);
      BOOL v15 = *v14 == v12;
      uint64_t v12 = (uint64_t)v14;
    }
    while (!v15);
  }
  unint64_t v16 = v14;
  if (v14 == (void *)(v9 + 8))
  {
    unint64_t v10 = v5 + 2;
    goto LABEL_12;
  }
  uint64_t v3 = (unsigned __int8 *)v14[4];
LABEL_2:
  *a1 = v3;
  return a1;
}

void *google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::KeyValuePair const>::SearchFrom(void *result, unint64_t a2)
{
  *__n128 result = 0;
  uint64_t v2 = result[1];
  unint64_t v3 = *(void *)(v2 + 8);
  if (v3 <= a2)
  {
LABEL_6:
    result[2] = a2;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 32);
    while (1)
    {
      uint64_t v5 = *(void *)(v4 + 8 * a2);
      if (v5) {
        break;
      }
      if (v3 == ++a2)
      {
        a2 = v3;
        goto LABEL_6;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8 * (a2 ^ 1));
    result[2] = a2;
    if (v5 == v6) {
      *__n128 result = *(void *)(*(void *)v5 + 32);
    }
    else {
      *__n128 result = v5;
    }
  }
  return result;
}

void sub_19E59E0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E59E218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E59E498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27)
{
  _Unwind_Resume(a1);
}

void sub_19E59E6FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E59E874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E59EC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E59F108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19E59F95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

NSArray *MLAllComputeDevices(void)
{
  v0 = +[MLAllComputeDeviceRegistry sharedRegistry];
  uint64_t v1 = [v0 registeredComputeDevices];

  return (NSArray *)v1;
}

void sub_19E59FF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

id CoreML::numericArrayToObjC<google::protobuf::RepeatedField<long long>,long long>(int *a1)
{
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = v2 + 8;
  BOOL v4 = v2 == 0;
  if (v2) {
    uint64_t v5 = v2 + 8;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v3 + 8 * *a1;
  if (v4) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:(v6 - v5) >> 3];
  uint64_t v8 = *((void *)a1 + 1);
  if (v8) {
    uint64_t v9 = (void *)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8) {
    uint64_t v10 = v8 + 8 + 8 * *a1;
  }
  else {
    uint64_t v10 = 0;
  }
  for (; v9 != (void *)v10; ++v9)
  {
    uint64_t v11 = [NSNumber numberWithLongLong:*v9];
    [v7 addObject:v11];
  }

  return v7;
}

void sub_19E5A02EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5A0890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::NSArrayFromIndexVector(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:(uint64_t)(a1[1] - *a1) >> 3];
  uint64_t v3 = (void *)*a1;
  BOOL v4 = (void *)a1[1];
  if ((void *)*a1 != v4)
  {
    do
    {
      uint64_t v5 = [NSNumber numberWithUnsignedLong:*v3];
      [v2 addObject:v5];

      ++v3;
    }
    while (v3 != v4);
  }

  return v2;
}

void sub_19E5A0FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _MLModelMetadataSpecification::_MLModelMetadataSpecification(_MLModelMetadataSpecification *this, const CoreML::Specification::Metadata *a2)
{
  BOOL v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *BOOL v4 = &unk_1EF0DD6F8;
  *(void *)this = CoreML::Specification::Metadata::Metadata((CoreML::Specification::Metadata *)(v4 + 3), a2);
  *((void *)this + 1) = v4;
}

void sub_19E5A11D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

CoreML::Specification::Metadata *CoreML::Specification::Metadata::Metadata(CoreML::Specification::Metadata *this, const CoreML::Specification::Metadata *a2)
{
  *(void *)this = &unk_1EF0DABB8;
  *((void *)this + 1) = 0;
  BOOL v4 = (unint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  uint64_t v5 = (char *)this + 16;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  google::protobuf::Map<std::string,std::string>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 20) = 0;
  uint64_t v6 = *((void *)a2 + 1);
  if (v6) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom((uint64_t)v5, *((void **)a2 + 5));
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v7 = *((void *)a2 + 6);
  if (*(char *)(v7 + 23) < 0) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
  }
  if ((long long *)v7 != &google::protobuf::internal::fixed_address_empty_string && v8) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  *((void *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v9 = *((void *)a2 + 7);
  if (*(char *)(v9 + 23) < 0) {
    uint64_t v10 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  }
  if ((long long *)v9 != &google::protobuf::internal::fixed_address_empty_string && v10) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  *((void *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v11 = *((void *)a2 + 8);
  if (*(char *)(v11 + 23) < 0) {
    uint64_t v12 = *(void *)(v11 + 8);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
  }
  if ((long long *)v11 != &google::protobuf::internal::fixed_address_empty_string && v12) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  *((void *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  uint64_t v13 = *((void *)a2 + 9);
  if (*(char *)(v13 + 23) < 0) {
    uint64_t v14 = *(void *)(v13 + 8);
  }
  else {
    uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
  }
  if ((long long *)v13 != &google::protobuf::internal::fixed_address_empty_string && v14) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  return this;
}

void sub_19E5A1354(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void sub_19E5A15E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29)
{
  uint64_t v33 = *(void **)(v31 - 120);
  long long v32 = *(void **)(v31 - 112);

  _Unwind_Resume(a1);
}

void sub_19E5A16B8()
{
}

void sub_19E5A16C8()
{
}

void sub_19E5A16D8()
{
}

void sub_19E5A16E8()
{
}

void sub_19E5A16F4()
{
}

void sub_19E5A1700()
{
}

void sub_19E5A1708()
{
}

void sub_19E5A1710()
{
}

void sub_19E5A1718()
{
}

void sub_19E5A1720()
{
}

void sub_19E5A1728()
{
}

void sub_19E5A1730()
{
}

void sub_19E5A17BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5A1A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E5A1D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5A3580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,void *a30)
{
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x280]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x298]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x2B0]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x2C8]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x2E0]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x2F8]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x310]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x328]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x340]);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)STACK[0x358]);

  if (SLOBYTE(STACK[0x37F]) < 0) {
    operator delete((void *)STACK[0x368]);
  }

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

char *IArchive::nestedArchive(void *a1, uint64_t a2)
{
  BOOL v4 = a1 + 3;
  uint64_t v5 = (void *)a1[3];
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v6 = a1 + 3;
  do
  {
    BOOL v7 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v5 + 4, (void *)a2);
    uint64_t v8 = v5 + 1;
    if (!v7)
    {
      uint64_t v8 = v5;
      uint64_t v6 = v5;
    }
    uint64_t v5 = (void *)*v8;
  }
  while (*v8);
  if (v6 != v4
    && !google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()((void *)a2, v6 + 4))
  {
    return (char *)(v6 + 7);
  }
LABEL_8:
  uint64_t v9 = (uint64_t **)(v4 - 1);
  (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 32))(&v20);
  long long v21 = v20;
  if (*((void *)&v20 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  unint64_t v22 = &v23;
  uint64_t v10 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)v9, &v25, (void *)a2);
  uint64_t v11 = (char *)*v10;
  if (!*v10)
  {
    uint64_t v12 = (uint64_t **)v10;
    uint64_t v11 = (char *)operator new(0x60uLL);
    uint64_t v13 = (std::string *)(v11 + 32);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((void *)v11 + 6) = *(void *)(a2 + 16);
    }
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 8) = 0;
    *((void *)v11 + 11) = 0;
    *((void *)v11 + 10) = 0;
    *((void *)v11 + 9) = v11 + 80;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v9, v25, v12, (uint64_t *)v11);
  }
  BOOL v15 = (std::__shared_weak_count *)*((void *)v11 + 8);
  *(_OWORD *)(v11 + 56) = v21;
  uint64_t v14 = v11 + 56;
  long long v21 = 0uLL;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  unint64_t v16 = v11 + 80;
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*((char **)v11 + 10));
  uint64_t v17 = v23;
  *((void *)v11 + 9) = v22;
  *((void *)v11 + 10) = v17;
  uint64_t v18 = v24;
  *((void *)v11 + 11) = v24;
  if (v18)
  {
    *(void *)(v17 + 16) = v16;
    uint64_t v17 = 0;
    unint64_t v22 = &v23;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
  }
  else
  {
    *((void *)v11 + 9) = v16;
  }
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy((char *)v17);
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  return v14;
}

void sub_19E5A3CCC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,IArchive>,void *>>>::operator()[abi:ne180100](0, v3);
  _MLModelInputArchiver::~_MLModelInputArchiver((_MLModelInputArchiver *)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*((void *)a1 + 1));
    std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*((void *)a1 + 10));
    uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t operator>><std::string,float>(uint64_t a1, uint64_t a2)
{
  unint64_t v12 = 0;
  operator>>(a1);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a2 + 8));
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  memset(&__p, 0, sizeof(__p));
  int v11 = 0;
  if (v12)
  {
    for (unint64_t i = 0; i < v12; ++i)
    {
      operator>>(a1, &__p);
      operator>>(a1);
      uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_equal<std::string>((void *)a2, (void *)(a2 + 8), &v14, &v13, &__p);
      if (!*v5)
      {
        uint64_t v6 = v5;
        BOOL v7 = (char *)operator new(0x40uLL);
        uint64_t v8 = (std::string *)(v7 + 32);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *((void *)v7 + 6) = *((void *)&__p.__r_.__value_.__l + 2);
        }
        *((_DWORD *)v7 + 14) = v11;
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a2, v14, v6, (uint64_t *)v7);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

void sub_19E5A3FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](0, v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19E5A42F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t operator>><std::string>(uint64_t a1, std::vector<std::string> *a2)
{
  return a1;
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer begin = this->__begin_;
  std::vector<std::string>::pointer end = this->__end_;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  unint64_t v6 = __sz - v5;
  if (__sz <= v5)
  {
    if (__sz < v5)
    {
      unint64_t v16 = &begin[__sz];
      while (end != v16)
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(end[-1].__r_.__value_.__l.__data_);
        }
        --end;
      }
      this->__end_ = v16;
    }
  }
  else
  {
    p_end_cap = &this->__end_cap_;
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v6)
    {
      size_t v17 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(end, v17);
      this->__end_ = (std::vector<std::string>::pointer)((char *)end + v17);
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      std::vector<std::string>::size_type v10 = 2 * v9;
      if (2 * v9 <= __sz) {
        std::vector<std::string>::size_type v10 = __sz;
      }
      if (v9 >= 0x555555555555555) {
        unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v11 = v10;
      }
      unint64_t v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v11);
      uint64_t v13 = v12 + v5;
      __v.__first_ = v12;
      __v.__begin_ = v13;
      __v.__end_cap_.__value_ = &v12[v14];
      size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v13, v15);
      __v.__end_ = (std::string *)((char *)v13 + v15);
      std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
}

void sub_19E5A4614(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

id CoreML::stringArrayToObjC(uint64_t **a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v3 = *a1;
  BOOL v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      unint64_t v5 = v3;
      if (*((char *)v3 + 23) < 0) {
        unint64_t v5 = (uint64_t *)*v3;
      }
      unint64_t v6 = [NSString stringWithUTF8String:v5];
      [v2 addObject:v6];

      v3 += 3;
    }
    while (v3 != v4);
  }

  return v2;
}

void sub_19E5A46C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void sub_19E5A4BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  unint64_t v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  unint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    BOOL v7 = (uint64_t **)v5;
    unint64_t v6 = (char *)operator new(0x40uLL);
    uint64_t v8 = (std::string *)(v6 + 32);
    unint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[56] = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_19E5A4CDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  unint64_t v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  unint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    BOOL v7 = (uint64_t **)v5;
    unint64_t v6 = (char *)operator new(0x40uLL);
    uint64_t v8 = (std::string *)(v6 + 32);
    unint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *((_DWORD *)v6 + 14) = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_19E5A4D90(_Unwind_Exception *a1)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  BOOL v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        BOOL v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, v4 + 4)) {
          break;
        }
        BOOL v4 = (void *)*v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v8, a3)) {
        break;
      }
      unint64_t v5 = v7 + 1;
      BOOL v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    BOOL v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  size_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      int v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      size_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), size_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            long long v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            int v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *int v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), size_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *int v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        int v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *int v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *size_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  size_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  int v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    int v6 = (uint64_t *)operator new(0x50uLL);
    int v8 = (std::string *)(v6 + 4);
    unint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v12, v7, v6);
  }
  return v6;
}

void sub_19E5A513C(_Unwind_Exception *a1)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void sub_19E5A5228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5A5380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::espressoPlanPriorityFromPredictionOptions(_anonymous_namespace_ *this, MLPredictionOptions *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v2 = this;
  int v3 = [(_anonymous_namespace_ *)v2 aneExecutionPriority];
  unsigned int v4 = [(_anonymous_namespace_ *)v2 aneQoS];
  if (v3 == @"MLANEExecutionPriority_Unspecified")
  {
    if (v4 <= 0x10) {
      int v9 = 0x7FFF;
    }
    else {
      int v9 = 24574;
    }
    if (v4 <= 0x18) {
      int v10 = v9;
    }
    else {
      int v10 = 0x3FFF;
    }
    if (v4 <= 0x20) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = 0x2000;
    }
    if (v4) {
      uint64_t v7 = v11;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  else
  {
    size_t v5 = v3;
    int v6 = v5;
    if (v5 == @"MLANEExecutionPriority_2")
    {
      uint64_t v7 = 1;
    }
    else if (v5 == @"MLANEExecutionPriority_3")
    {
      uint64_t v7 = 0x2000;
    }
    else if (v5 == @"MLANEExecutionPriority_4")
    {
      uint64_t v7 = 0x3FFFLL;
    }
    else if (v5 == @"MLANEExecutionPriority_5")
    {
      uint64_t v7 = 24574;
    }
    else
    {
      uint64_t v7 = 0x7FFFLL;
      if (v5 != @"MLANEExecutionPriority_6" && v5 != @"MLANEExecutionPriority_7")
      {
        int v8 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 138412290;
          uint64_t v14 = v6;
          _os_log_error_impl(&dword_19E58B000, v8, OS_LOG_TYPE_ERROR, "Unrecognized ANE execution priority %@", buf, 0xCu);
        }

        [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"Unrecognized ANE execution priority %@", v6 format];
        uint64_t v7 = 0;
      }
    }
  }
  return v7;
}

void sub_19E5A5588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<std::string>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::vector<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  int v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      size_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        size_t v5 = *(void ***)(a1 + 16);
      }
      int v2 = v5;
    }
    while (v5 != a2);
  }
}

id neuralNetworkOutputFromArchive(_MLModelInputArchiver *a1)
{
  if ((*(unsigned int (**)(void))(**(void **)a1 + 56))(*(void *)a1) == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "CompiledObject");
    int v2 = (*(void (**)(void, void **))(**(void **)a1 + 40))(*(void *)a1, __p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      int v3 = v2;
    }
    else {
      int v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_19E5A5968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E5A59E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5A5B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Archiver::_IArchiveDiskImpl::storageType(Archiver::_IArchiveDiskImpl *this)
{
  return 0;
}

void ___ZN8Archiver14_IDataBlobImpl6asDataEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  int v2 = *(std::__shared_weak_count **)(v1 + 56);
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_19E5A60E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_19E5A6678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  kdebug_trace();

  _Unwind_Resume(a1);
}

uint64_t CoreML::vectorizeMultiArray<float,float>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65568 && *(_DWORD *)(a3 + 72) == 65568;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  if (((unsigned __int16)v7 & *(_WORD *)(a1 + 88)) != 0)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v15, a3);
    int v8 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v15, a1);
    uint64_t v9 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    memcpy(v8, v9, 4 * *(void *)(a1 + 80));
  }
  else
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v15, a3);
    unsigned int v11 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v15, a1, a2, 1);
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)v12, a1, 1, 0);
    while (v17 != (_DWORD *)v12[14])
    {
      *v11++ = *v17;
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v15);
    }
    if (__p)
    {
      long long v14 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v12);
    if (v18)
    {
      unint64_t v19 = v18;
      operator delete(v18);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v15);
  }
  return 1;
}

void sub_19E5A6878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void CoreML::MultiArrayBuffer::loadBuffer(CoreML::MultiArrayBuffer *this, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  std::atomic_load[abi:ne180100]<CoreML::MultiArrayBuffer>(&v11, (void *)(a2 + 8));
  if (v11)
  {
    BOOL v4 = v12;
    *(void *)this = v11;
    *((void *)this + 1) = v4;
  }
  else
  {
    size_t v5 = *(__CVBuffer **)(a2 + 96);
    if (v5)
    {
      *(unsigned char *)(a2 + 104) = 1;
      CVReturn v6 = CVPixelBufferLockBaseAddress(v5, 0);
      if (!v6)
      {
        CVPixelBufferGetBaseAddress(v5);
        CVPixelBufferRetain(v5);
        operator new();
      }
      CoreChannel = MLLoggingGetCoreChannel();
      if (os_log_type_enabled(CoreChannel, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v6;
        _os_log_error_impl(&dword_19E58B000, CoreChannel, OS_LOG_TYPE_ERROR, "Failed to lock pixel buffer with error: %d", buf, 8u);
      }
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      long long v10 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v10, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
    }
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    __int16 v7 = v12;
    if (v12)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_19E5A6B48()
{
}

void sub_19E5A6B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  JUMPOUT(0x19E5A6BCCLL);
}

void sub_19E5A6BA4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CoreML::MultiArrayBuffer::copyInto(CoreML::MultiArrayBuffer *this, CoreML::MultiArrayBuffer *a2)
{
  int v4 = *((_DWORD *)this + 18);
  if (v4 > 65599)
  {
    if (v4 == 131104)
    {
      int v18 = *((_DWORD *)a2 + 18);
      if (v18 > 65599)
      {
        if (v18 == 131104)
        {
          BOOL v55 = (*((_WORD *)this + 44) & 1) == 0;
          if (*((_WORD *)this + 44)) {
            __int16 v56 = 1;
          }
          else {
            __int16 v56 = 2;
          }
          if (((unsigned __int16)v56 & *((_WORD *)a2 + 44)) == 0)
          {
            CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
            CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
            if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
            {
              uint64_t v136 = 0;
              v137 = &v136;
              uint64_t v138 = 0x4802000000;
              v139 = __Block_byref_object_copy__12603;
              v140 = __Block_byref_object_dispose__12604;
              uint64_t v120 = 0;
              v121 = &v120;
              uint64_t v122 = 0x4802000000;
              v123 = __Block_byref_object_copy__12603;
              v124 = __Block_byref_object_dispose__12604;
              if (CoreML::initVIBuffer((CoreML *)v114, (const CoreML::MultiArrayBuffer *)&v141, v84)
                && CoreML::initVIBuffer((CoreML *)v109, (const CoreML::MultiArrayBuffer *)(v121 + 5), v85))
              {
                uint64_t v99 = MEMORY[0x1E4F143A8];
                uint64_t v100 = 0x40000000;
                v101 = ___ZN6CoreMLL16copyMultiArrayVIIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke;
                v102 = &unk_1E59A44E0;
                v105 = v109;
                v103 = &v136;
                v104 = &v120;
                CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v114, &v99);
                goto LABEL_278;
              }
              _Block_object_dispose(&v120, 8);
              _Block_object_dispose(&v136, 8);
              if (v116 != v115 && v119)
              {
                uint64_t v136 = 0;
                v137 = &v136;
                uint64_t v138 = 0xD802000000;
                v139 = __Block_byref_object_copy__15;
                v140 = __Block_byref_object_dispose__16;
                uint64_t v120 = 0;
                v121 = &v120;
                uint64_t v122 = 0xD802000000;
                v123 = __Block_byref_object_copy__15;
                v124 = __Block_byref_object_dispose__16;
                long long v141 = 0u;
                long long v142 = 0u;
                long long v143 = 0u;
                long long v144 = 0u;
                long long v145 = 0u;
                long long v146 = 0u;
                long long v147 = 0u;
                long long v148 = 0u;
                long long v149 = 0u;
                long long v150 = 0u;
                long long v151 = 0u;
                long long v125 = 0u;
                long long v126 = 0u;
                long long v127 = 0u;
                long long v128 = 0u;
                long long v129 = 0u;
                long long v130 = 0u;
                long long v131 = 0u;
                long long v132 = 0u;
                long long v133 = 0u;
                long long v134 = 0u;
                long long v135 = 0u;
                BOOL inited = CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v115, v117, v118, (uint64_t)&v141);
                BOOL v95 = CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v110, v112, v113, (uint64_t)(v121 + 5));
                if (inited && v95)
                {
                  uint64_t v99 = MEMORY[0x1E4F143A8];
                  uint64_t v100 = 0x40000000;
                  v101 = ___ZN6CoreMLL18copyMultiArrayBNNSIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke;
                  v102 = &unk_1E59A4530;
                  v105 = v109;
                  v103 = &v136;
                  v104 = &v120;
                  CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v114, &v99);
                  goto LABEL_278;
                }
                _Block_object_dispose(&v120, 8);
                _Block_object_dispose(&v136, 8);
              }
              CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v136, (uint64_t)v114, v55, 1);
              CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v120, (uint64_t)v114, 1, 0);
              CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v99, (uint64_t)v109, v55, 1);
              while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
              {
                *(_DWORD *)v106 = **((_DWORD **)&v145 + 1);
                CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v136);
                CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v99);
              }
              goto LABEL_315;
            }
            goto LABEL_241;
          }
          BOOL v57 = (*((_WORD *)this + 44) & 1) == 0;
          return CoreML::vectorizeMultiArray<int,int>((uint64_t)this, v57, (uint64_t)a2);
        }
        else
        {
          if (v18 != 65600) {
            return v2 & 1;
          }
          BOOL v31 = (*((_WORD *)this + 44) & 1) == 0;
          if (*((_WORD *)this + 44)) {
            __int16 v32 = 1;
          }
          else {
            __int16 v32 = 2;
          }
          if (((unsigned __int16)v32 & *((_WORD *)a2 + 44)) == 0)
          {
            CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
            CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
            if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
            {
              uint64_t v136 = 0;
              v137 = &v136;
              uint64_t v138 = 0x4802000000;
              v139 = __Block_byref_object_copy__12603;
              v140 = __Block_byref_object_dispose__12604;
              uint64_t v120 = 0;
              v121 = &v120;
              uint64_t v122 = 0x4802000000;
              v123 = __Block_byref_object_copy__12603;
              v124 = __Block_byref_object_dispose__12604;
              _Block_object_dispose(&v120, 8);
              _Block_object_dispose(&v136, 8);
              if (v116 != v115 && v119)
              {
                uint64_t v136 = 0;
                v137 = &v136;
                uint64_t v138 = 0xD802000000;
                v139 = __Block_byref_object_copy__15;
                v140 = __Block_byref_object_dispose__16;
                uint64_t v120 = 0;
                v121 = &v120;
                uint64_t v122 = 0xD802000000;
                v123 = __Block_byref_object_copy__15;
                v124 = __Block_byref_object_dispose__16;
                long long v141 = 0u;
                long long v142 = 0u;
                long long v143 = 0u;
                long long v144 = 0u;
                long long v145 = 0u;
                long long v146 = 0u;
                long long v147 = 0u;
                long long v148 = 0u;
                long long v149 = 0u;
                long long v150 = 0u;
                long long v151 = 0u;
                long long v125 = 0u;
                long long v126 = 0u;
                long long v127 = 0u;
                long long v128 = 0u;
                long long v129 = 0u;
                long long v130 = 0u;
                long long v131 = 0u;
                long long v132 = 0u;
                long long v133 = 0u;
                long long v134 = 0u;
                long long v135 = 0u;
                CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v115, v117, v118, (uint64_t)&v141);
                _Block_object_dispose(&v120, 8);
                _Block_object_dispose(&v136, 8);
              }
              CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v136, (uint64_t)v114, v31, 1);
              CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v120, (uint64_t)v114, 1, 0);
              CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v99, (uint64_t)v109, v31, 1);
              while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
              {
                double *v106 = (double)(int)**((_DWORD **)&v145 + 1);
                CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v136);
                CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v99);
              }
              goto LABEL_315;
            }
            goto LABEL_241;
          }
          BOOL v33 = (*((_WORD *)this + 44) & 1) == 0;
          return CoreML::vectorizeMultiArray<int,double>((uint64_t)this, v33, (uint64_t)a2);
        }
      }
      else if (v18 == 65552)
      {
        BOOL v43 = (*((_WORD *)this + 44) & 1) == 0;
        if (*((_WORD *)this + 44)) {
          __int16 v44 = 1;
        }
        else {
          __int16 v44 = 2;
        }
        if (((unsigned __int16)v44 & *((_WORD *)a2 + 44)) == 0)
        {
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
          if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
          {
            uint64_t v136 = 0;
            v137 = &v136;
            uint64_t v138 = 0x4802000000;
            v139 = __Block_byref_object_copy__12603;
            v140 = __Block_byref_object_dispose__12604;
            uint64_t v120 = 0;
            v121 = &v120;
            uint64_t v122 = 0x4802000000;
            v123 = __Block_byref_object_copy__12603;
            v124 = __Block_byref_object_dispose__12604;
            _Block_object_dispose(&v120, 8);
            _Block_object_dispose(&v136, 8);
            if (v116 != v115 && v119)
            {
              uint64_t v136 = 0;
              v137 = &v136;
              uint64_t v138 = 0xD802000000;
              v139 = __Block_byref_object_copy__15;
              v140 = __Block_byref_object_dispose__16;
              uint64_t v120 = 0;
              v121 = &v120;
              uint64_t v122 = 0xD802000000;
              v123 = __Block_byref_object_copy__15;
              v124 = __Block_byref_object_dispose__16;
              long long v141 = 0u;
              long long v142 = 0u;
              long long v143 = 0u;
              long long v144 = 0u;
              long long v145 = 0u;
              long long v146 = 0u;
              long long v147 = 0u;
              long long v148 = 0u;
              long long v149 = 0u;
              long long v150 = 0u;
              long long v151 = 0u;
              long long v125 = 0u;
              long long v126 = 0u;
              long long v127 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v132 = 0u;
              long long v133 = 0u;
              long long v134 = 0u;
              long long v135 = 0u;
              BOOL v78 = CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v115, v117, v118, (uint64_t)&v141);
              BOOL v79 = _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v110, v112, v113, (uint64_t)(v121 + 5));
              if (v78 && v79)
              {
                uint64_t v99 = MEMORY[0x1E4F143A8];
                uint64_t v100 = 0x40000000;
                v101 = ___ZN6CoreMLL18copyMultiArrayBNNSIiDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke;
                v102 = &unk_1E59A4580;
                v105 = v109;
                v103 = &v136;
                v104 = &v120;
                CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v114, &v99);
                goto LABEL_278;
              }
              _Block_object_dispose(&v120, 8);
              _Block_object_dispose(&v136, 8);
            }
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v136, (uint64_t)v114, v43, 1);
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v120, (uint64_t)v114, 1, 0);
            _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v99, (uint64_t)v109, v43, 1);
            while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
            {
              *(short float *)v106 = (short float)(int)**((_DWORD **)&v145 + 1);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v136);
              _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v99);
            }
            goto LABEL_315;
          }
          goto LABEL_241;
        }
        BOOL v45 = (*((_WORD *)this + 44) & 1) == 0;
        return _ZN6CoreMLL19vectorizeMultiArrayIiDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_((uint64_t)this, v45, (uint64_t)a2);
      }
      else
      {
        if (v18 != 65568) {
          return v2 & 1;
        }
        BOOL v19 = (*((_WORD *)this + 44) & 1) == 0;
        if (*((_WORD *)this + 44)) {
          __int16 v20 = 1;
        }
        else {
          __int16 v20 = 2;
        }
        if (((unsigned __int16)v20 & *((_WORD *)a2 + 44)) == 0)
        {
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
          if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
          {
            uint64_t v136 = 0;
            v137 = &v136;
            uint64_t v138 = 0x4802000000;
            v139 = __Block_byref_object_copy__12603;
            v140 = __Block_byref_object_dispose__12604;
            uint64_t v120 = 0;
            v121 = &v120;
            uint64_t v122 = 0x4802000000;
            v123 = __Block_byref_object_copy__12603;
            v124 = __Block_byref_object_dispose__12604;
            _Block_object_dispose(&v120, 8);
            _Block_object_dispose(&v136, 8);
            if (v116 != v115 && v119)
            {
              uint64_t v136 = 0;
              v137 = &v136;
              uint64_t v138 = 0xD802000000;
              v139 = __Block_byref_object_copy__15;
              v140 = __Block_byref_object_dispose__16;
              uint64_t v120 = 0;
              v121 = &v120;
              uint64_t v122 = 0xD802000000;
              v123 = __Block_byref_object_copy__15;
              v124 = __Block_byref_object_dispose__16;
              long long v141 = 0u;
              long long v142 = 0u;
              long long v143 = 0u;
              long long v144 = 0u;
              long long v145 = 0u;
              long long v146 = 0u;
              long long v147 = 0u;
              long long v148 = 0u;
              long long v149 = 0u;
              long long v150 = 0u;
              long long v151 = 0u;
              long long v125 = 0u;
              long long v126 = 0u;
              long long v127 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v132 = 0u;
              long long v133 = 0u;
              long long v134 = 0u;
              long long v135 = 0u;
              BOOL v63 = CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v115, v117, v118, (uint64_t)&v141);
              BOOL v64 = CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v110, v112, v113, (uint64_t)(v121 + 5));
              if (v63 && v64)
              {
                uint64_t v99 = MEMORY[0x1E4F143A8];
                uint64_t v100 = 0x40000000;
                v101 = ___ZN6CoreMLL18copyMultiArrayBNNSIifEEbRKNS_16MultiArrayBufferERS1__block_invoke;
                v102 = &unk_1E59A4490;
                v105 = v109;
                v103 = &v136;
                v104 = &v120;
                CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v114, &v99);
                goto LABEL_278;
              }
              _Block_object_dispose(&v120, 8);
              _Block_object_dispose(&v136, 8);
            }
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v136, (uint64_t)v114, v19, 1);
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v120, (uint64_t)v114, 1, 0);
            CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v99, (uint64_t)v109, v19, 1);
            while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
            {
              *(float *)v106 = (float)(int)**((_DWORD **)&v145 + 1);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v136);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v99);
            }
            goto LABEL_315;
          }
          goto LABEL_241;
        }
        BOOL v21 = (*((_WORD *)this + 44) & 1) == 0;
        return CoreML::vectorizeMultiArray<int,float>((uint64_t)this, v21, (uint64_t)a2);
      }
    }
    else
    {
      if (v4 != 65600) {
        return v2 & 1;
      }
      int v10 = *((_DWORD *)a2 + 18);
      if (v10 > 65599)
      {
        if (v10 == 131104)
        {
          BOOL v49 = (*((_WORD *)this + 44) & 1) == 0;
          if (*((_WORD *)this + 44)) {
            __int16 v50 = 1;
          }
          else {
            __int16 v50 = 2;
          }
          if (((unsigned __int16)v50 & *((_WORD *)a2 + 44)) == 0)
          {
            CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
            CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
            if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
            {
              uint64_t v136 = 0;
              v137 = &v136;
              uint64_t v138 = 0x4802000000;
              v139 = __Block_byref_object_copy__12603;
              v140 = __Block_byref_object_dispose__12604;
              uint64_t v120 = 0;
              v121 = &v120;
              uint64_t v122 = 0x4802000000;
              v123 = __Block_byref_object_copy__12603;
              v124 = __Block_byref_object_dispose__12604;
              _Block_object_dispose(&v120, 8);
              _Block_object_dispose(&v136, 8);
              if (v116 != v115 && v119)
              {
                uint64_t v136 = 0;
                v137 = &v136;
                uint64_t v138 = 0xD802000000;
                v139 = __Block_byref_object_copy__15;
                v140 = __Block_byref_object_dispose__16;
                uint64_t v120 = 0;
                v121 = &v120;
                uint64_t v122 = 0xD802000000;
                v123 = __Block_byref_object_copy__15;
                v124 = __Block_byref_object_dispose__16;
                long long v141 = 0u;
                long long v142 = 0u;
                long long v143 = 0u;
                long long v144 = 0u;
                long long v145 = 0u;
                long long v146 = 0u;
                long long v147 = 0u;
                long long v148 = 0u;
                long long v149 = 0u;
                long long v150 = 0u;
                long long v151 = 0u;
                long long v125 = 0u;
                long long v126 = 0u;
                long long v127 = 0u;
                long long v128 = 0u;
                long long v129 = 0u;
                long long v130 = 0u;
                long long v131 = 0u;
                long long v132 = 0u;
                long long v133 = 0u;
                long long v134 = 0u;
                long long v135 = 0u;
                CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v110, v112, v113, (uint64_t)&v125);
                _Block_object_dispose(&v120, 8);
                _Block_object_dispose(&v136, 8);
              }
              CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v136, (uint64_t)v114, v49, 1);
              CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v120, (uint64_t)v114, 1, 0);
              CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v99, (uint64_t)v109, v49, 1);
              while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
              {
                *(_DWORD *)v106 = (int)**((double **)&v145 + 1);
                CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v136);
                CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v99);
              }
              goto LABEL_315;
            }
            goto LABEL_241;
          }
          BOOL v51 = (*((_WORD *)this + 44) & 1) == 0;
          return CoreML::vectorizeMultiArray<double,int>((uint64_t)this, v51, (uint64_t)a2);
        }
        else
        {
          if (v10 != 65600) {
            return v2 & 1;
          }
          BOOL v25 = (*((_WORD *)this + 44) & 1) == 0;
          if (*((_WORD *)this + 44)) {
            __int16 v26 = 1;
          }
          else {
            __int16 v26 = 2;
          }
          if (((unsigned __int16)v26 & *((_WORD *)a2 + 44)) == 0)
          {
            CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
            CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
            if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
            {
              uint64_t v136 = 0;
              v137 = &v136;
              uint64_t v138 = 0x4802000000;
              v139 = __Block_byref_object_copy__12603;
              v140 = __Block_byref_object_dispose__12604;
              uint64_t v120 = 0;
              v121 = &v120;
              uint64_t v122 = 0x4802000000;
              v123 = __Block_byref_object_copy__12603;
              v124 = __Block_byref_object_dispose__12604;
              if (CoreML::initVIBuffer((CoreML *)v114, (const CoreML::MultiArrayBuffer *)&v141, v65)
                && CoreML::initVIBuffer((CoreML *)v109, (const CoreML::MultiArrayBuffer *)(v121 + 5), v66))
              {
                uint64_t v99 = MEMORY[0x1E4F143A8];
                uint64_t v100 = 0x40000000;
                v101 = ___ZN6CoreMLL16copyMultiArrayVIIddEEbRKNS_16MultiArrayBufferERS1__block_invoke;
                v102 = &unk_1E59A4288;
                v105 = v109;
                v103 = &v136;
                v104 = &v120;
                CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v114, &v99);
                goto LABEL_278;
              }
              _Block_object_dispose(&v120, 8);
              _Block_object_dispose(&v136, 8);
              if (v116 != v115 && v119)
              {
                uint64_t v136 = 0;
                v137 = &v136;
                uint64_t v138 = 0xD802000000;
                v139 = __Block_byref_object_copy__15;
                v140 = __Block_byref_object_dispose__16;
                uint64_t v120 = 0;
                v121 = &v120;
                uint64_t v122 = 0xD802000000;
                v123 = __Block_byref_object_copy__15;
                v124 = __Block_byref_object_dispose__16;
                long long v141 = 0u;
                long long v142 = 0u;
                long long v143 = 0u;
                long long v144 = 0u;
                long long v145 = 0u;
                long long v146 = 0u;
                long long v147 = 0u;
                long long v148 = 0u;
                long long v149 = 0u;
                long long v150 = 0u;
                long long v151 = 0u;
                long long v125 = 0u;
                long long v126 = 0u;
                long long v127 = 0u;
                long long v128 = 0u;
                long long v129 = 0u;
                long long v130 = 0u;
                long long v131 = 0u;
                long long v132 = 0u;
                long long v133 = 0u;
                long long v134 = 0u;
                long long v135 = 0u;
                _Block_object_dispose(&v120, 8);
                _Block_object_dispose(&v136, 8);
              }
              CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v136, (uint64_t)v114, v25, 1);
              CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v120, (uint64_t)v114, 1, 0);
              CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v99, (uint64_t)v109, v25, 1);
              while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
              {
                double *v106 = **((double **)&v145 + 1);
                CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v136);
                CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v99);
              }
              goto LABEL_315;
            }
            goto LABEL_241;
          }
          BOOL v27 = (*((_WORD *)this + 44) & 1) == 0;
          return CoreML::vectorizeMultiArray<double,double>((uint64_t)this, v27, (uint64_t)a2);
        }
      }
      else if (v10 == 65552)
      {
        BOOL v37 = (*((_WORD *)this + 44) & 1) == 0;
        if (*((_WORD *)this + 44)) {
          __int16 v38 = 1;
        }
        else {
          __int16 v38 = 2;
        }
        if (((unsigned __int16)v38 & *((_WORD *)a2 + 44)) == 0)
        {
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
          if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
          {
            uint64_t v136 = 0;
            v137 = &v136;
            uint64_t v138 = 0x4802000000;
            v139 = __Block_byref_object_copy__12603;
            v140 = __Block_byref_object_dispose__12604;
            uint64_t v120 = 0;
            v121 = &v120;
            uint64_t v122 = 0x4802000000;
            v123 = __Block_byref_object_copy__12603;
            v124 = __Block_byref_object_dispose__12604;
            _Block_object_dispose(&v120, 8);
            _Block_object_dispose(&v136, 8);
            if (v116 != v115 && v119)
            {
              uint64_t v136 = 0;
              v137 = &v136;
              uint64_t v138 = 0xD802000000;
              v139 = __Block_byref_object_copy__15;
              v140 = __Block_byref_object_dispose__16;
              uint64_t v120 = 0;
              v121 = &v120;
              uint64_t v122 = 0xD802000000;
              v123 = __Block_byref_object_copy__15;
              v124 = __Block_byref_object_dispose__16;
              long long v141 = 0u;
              long long v142 = 0u;
              long long v143 = 0u;
              long long v144 = 0u;
              long long v145 = 0u;
              long long v146 = 0u;
              long long v147 = 0u;
              long long v148 = 0u;
              long long v149 = 0u;
              long long v150 = 0u;
              long long v151 = 0u;
              long long v125 = 0u;
              long long v126 = 0u;
              long long v127 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v132 = 0u;
              long long v133 = 0u;
              long long v134 = 0u;
              long long v135 = 0u;
              _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v110, v112, v113, (uint64_t)&v125);
              _Block_object_dispose(&v120, 8);
              _Block_object_dispose(&v136, 8);
            }
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v136, (uint64_t)v114, v37, 1);
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v120, (uint64_t)v114, 1, 0);
            _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v99, (uint64_t)v109, v37, 1);
            while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
            {
              _D0 = **((void **)&v145 + 1);
              __asm { FCVT            H0, D0 }
              *(_WORD *)v106 = _D0;
              CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v136);
              _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v99);
            }
            goto LABEL_315;
          }
          goto LABEL_241;
        }
        BOOL v39 = (*((_WORD *)this + 44) & 1) == 0;
        return _ZN6CoreMLL19vectorizeMultiArrayIdDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_((uint64_t)this, v39, (uint64_t)a2);
      }
      else
      {
        if (v10 != 65568) {
          return v2 & 1;
        }
        BOOL v11 = (*((_WORD *)this + 44) & 1) == 0;
        if (*((_WORD *)this + 44)) {
          __int16 v12 = 1;
        }
        else {
          __int16 v12 = 2;
        }
        if (((unsigned __int16)v12 & *((_WORD *)a2 + 44)) == 0)
        {
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
          if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
          {
            uint64_t v136 = 0;
            v137 = &v136;
            uint64_t v138 = 0x4802000000;
            v139 = __Block_byref_object_copy__12603;
            v140 = __Block_byref_object_dispose__12604;
            uint64_t v120 = 0;
            v121 = &v120;
            uint64_t v122 = 0x4802000000;
            v123 = __Block_byref_object_copy__12603;
            v124 = __Block_byref_object_dispose__12604;
            _Block_object_dispose(&v120, 8);
            _Block_object_dispose(&v136, 8);
            if (v116 != v115 && v119)
            {
              uint64_t v136 = 0;
              v137 = &v136;
              uint64_t v138 = 0xD802000000;
              v139 = __Block_byref_object_copy__15;
              v140 = __Block_byref_object_dispose__16;
              uint64_t v120 = 0;
              v121 = &v120;
              uint64_t v122 = 0xD802000000;
              v123 = __Block_byref_object_copy__15;
              v124 = __Block_byref_object_dispose__16;
              long long v141 = 0u;
              long long v142 = 0u;
              long long v143 = 0u;
              long long v144 = 0u;
              long long v145 = 0u;
              long long v146 = 0u;
              long long v147 = 0u;
              long long v148 = 0u;
              long long v149 = 0u;
              long long v150 = 0u;
              long long v151 = 0u;
              long long v125 = 0u;
              long long v126 = 0u;
              long long v127 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v132 = 0u;
              long long v133 = 0u;
              long long v134 = 0u;
              long long v135 = 0u;
              CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v110, v112, v113, (uint64_t)&v125);
              _Block_object_dispose(&v120, 8);
              _Block_object_dispose(&v136, 8);
            }
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v136, (uint64_t)v114, v11, 1);
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v120, (uint64_t)v114, 1, 0);
            CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v99, (uint64_t)v109, v11, 1);
            while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
            {
              float v60 = **((double **)&v145 + 1);
              *(float *)v106 = v60;
              CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v136);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v99);
            }
            goto LABEL_315;
          }
          goto LABEL_241;
        }
        BOOL v13 = (*((_WORD *)this + 44) & 1) == 0;
        return CoreML::vectorizeMultiArray<double,float>((uint64_t)this, v13, (uint64_t)a2);
      }
    }
  }
  else if (v4 == 65552)
  {
    int v14 = *((_DWORD *)a2 + 18);
    if (v14 > 65599)
    {
      if (v14 == 131104)
      {
        BOOL v52 = (*((_WORD *)this + 44) & 1) == 0;
        if (*((_WORD *)this + 44)) {
          __int16 v53 = 1;
        }
        else {
          __int16 v53 = 2;
        }
        if (((unsigned __int16)v53 & *((_WORD *)a2 + 44)) == 0)
        {
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
          if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
          {
            uint64_t v136 = 0;
            v137 = &v136;
            uint64_t v138 = 0x4802000000;
            v139 = __Block_byref_object_copy__12603;
            v140 = __Block_byref_object_dispose__12604;
            uint64_t v120 = 0;
            v121 = &v120;
            uint64_t v122 = 0x4802000000;
            v123 = __Block_byref_object_copy__12603;
            v124 = __Block_byref_object_dispose__12604;
            _Block_object_dispose(&v120, 8);
            _Block_object_dispose(&v136, 8);
            if (v116 != v115 && v119)
            {
              uint64_t v136 = 0;
              v137 = &v136;
              uint64_t v138 = 0xD802000000;
              v139 = __Block_byref_object_copy__15;
              v140 = __Block_byref_object_dispose__16;
              uint64_t v120 = 0;
              v121 = &v120;
              uint64_t v122 = 0xD802000000;
              v123 = __Block_byref_object_copy__15;
              v124 = __Block_byref_object_dispose__16;
              long long v141 = 0u;
              long long v142 = 0u;
              long long v143 = 0u;
              long long v144 = 0u;
              long long v145 = 0u;
              long long v146 = 0u;
              long long v147 = 0u;
              long long v148 = 0u;
              long long v149 = 0u;
              long long v150 = 0u;
              long long v151 = 0u;
              long long v125 = 0u;
              long long v126 = 0u;
              long long v127 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v132 = 0u;
              long long v133 = 0u;
              long long v134 = 0u;
              long long v135 = 0u;
              BOOL v82 = _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v115, v117, v118, (uint64_t)&v141);
              BOOL v83 = CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v110, v112, v113, (uint64_t)(v121 + 5));
              if (v82 && v83)
              {
                uint64_t v99 = MEMORY[0x1E4F143A8];
                uint64_t v100 = 0x40000000;
                v101 = ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_iEEbRKNS_16MultiArrayBufferERS1__block_invoke;
                v102 = &unk_1E59A4670;
                v105 = v109;
                v103 = &v136;
                v104 = &v120;
                CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v114, &v99);
                goto LABEL_278;
              }
              _Block_object_dispose(&v120, 8);
              _Block_object_dispose(&v136, 8);
            }
            _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v136, (uint64_t)v114, v52, 1);
            _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v120, (uint64_t)v114, 1, 0);
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v99, (uint64_t)v109, v52, 1);
            while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
            {
              *(_DWORD *)v106 = (int)**((short float **)&v145 + 1);
              _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v136);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v99);
            }
            goto LABEL_315;
          }
          goto LABEL_241;
        }
        BOOL v54 = (*((_WORD *)this + 44) & 1) == 0;
        return _ZN6CoreMLL19vectorizeMultiArrayIDF16_iEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_((uint64_t)this, v54, (uint64_t)a2);
      }
      else
      {
        if (v14 != 65600) {
          return v2 & 1;
        }
        BOOL v28 = (*((_WORD *)this + 44) & 1) == 0;
        if (*((_WORD *)this + 44)) {
          __int16 v29 = 1;
        }
        else {
          __int16 v29 = 2;
        }
        if (((unsigned __int16)v29 & *((_WORD *)a2 + 44)) == 0)
        {
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
          if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
          {
            uint64_t v136 = 0;
            v137 = &v136;
            uint64_t v138 = 0x4802000000;
            v139 = __Block_byref_object_copy__12603;
            v140 = __Block_byref_object_dispose__12604;
            uint64_t v120 = 0;
            v121 = &v120;
            uint64_t v122 = 0x4802000000;
            v123 = __Block_byref_object_copy__12603;
            v124 = __Block_byref_object_dispose__12604;
            _Block_object_dispose(&v120, 8);
            _Block_object_dispose(&v136, 8);
            if (v116 != v115 && v119)
            {
              uint64_t v136 = 0;
              v137 = &v136;
              uint64_t v138 = 0xD802000000;
              v139 = __Block_byref_object_copy__15;
              v140 = __Block_byref_object_dispose__16;
              uint64_t v120 = 0;
              v121 = &v120;
              uint64_t v122 = 0xD802000000;
              v123 = __Block_byref_object_copy__15;
              v124 = __Block_byref_object_dispose__16;
              long long v141 = 0u;
              long long v142 = 0u;
              long long v143 = 0u;
              long long v144 = 0u;
              long long v145 = 0u;
              long long v146 = 0u;
              long long v147 = 0u;
              long long v148 = 0u;
              long long v149 = 0u;
              long long v150 = 0u;
              long long v151 = 0u;
              long long v125 = 0u;
              long long v126 = 0u;
              long long v127 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v132 = 0u;
              long long v133 = 0u;
              long long v134 = 0u;
              long long v135 = 0u;
              _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v115, v117, v118, (uint64_t)&v141);
              _Block_object_dispose(&v120, 8);
              _Block_object_dispose(&v136, 8);
            }
            _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v136, (uint64_t)v114, v28, 1);
            _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v120, (uint64_t)v114, 1, 0);
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v99, (uint64_t)v109, v28, 1);
            while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
            {
              _H0 = **((_WORD **)&v145 + 1);
              __asm { FCVT            D0, H0 }
              *(void *)v106 = _D0;
              _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v136);
              CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v99);
            }
            goto LABEL_315;
          }
          goto LABEL_241;
        }
        BOOL v30 = (*((_WORD *)this + 44) & 1) == 0;
        return _ZN6CoreMLL19vectorizeMultiArrayIDF16_dEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_((uint64_t)this, v30, (uint64_t)a2);
      }
    }
    else if (v14 == 65552)
    {
      BOOL v40 = (*((_WORD *)this + 44) & 1) == 0;
      if (*((_WORD *)this + 44)) {
        __int16 v41 = 1;
      }
      else {
        __int16 v41 = 2;
      }
      if (((unsigned __int16)v41 & *((_WORD *)a2 + 44)) == 0)
      {
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
        if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
        {
          uint64_t v136 = 0;
          v137 = &v136;
          uint64_t v138 = 0x4802000000;
          v139 = __Block_byref_object_copy__12603;
          v140 = __Block_byref_object_dispose__12604;
          uint64_t v120 = 0;
          v121 = &v120;
          uint64_t v122 = 0x4802000000;
          v123 = __Block_byref_object_copy__12603;
          v124 = __Block_byref_object_dispose__12604;
          if (CoreML::initVIBuffer((CoreML *)v114, (const CoreML::MultiArrayBuffer *)&v141, v76)
            && CoreML::initVIBuffer((CoreML *)v109, (const CoreML::MultiArrayBuffer *)(v121 + 5), v77))
          {
            uint64_t v99 = MEMORY[0x1E4F143A8];
            uint64_t v100 = 0x40000000;
            v101 = ___ZN6CoreMLL16copyMultiArrayVIIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke;
            v102 = &unk_1E59A46C0;
            v105 = v109;
            v103 = &v136;
            v104 = &v120;
            CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v114, &v99);
            goto LABEL_278;
          }
          _Block_object_dispose(&v120, 8);
          _Block_object_dispose(&v136, 8);
          if (v116 != v115 && v119)
          {
            uint64_t v136 = 0;
            v137 = &v136;
            uint64_t v138 = 0xD802000000;
            v139 = __Block_byref_object_copy__15;
            v140 = __Block_byref_object_dispose__16;
            uint64_t v120 = 0;
            v121 = &v120;
            uint64_t v122 = 0xD802000000;
            v123 = __Block_byref_object_copy__15;
            v124 = __Block_byref_object_dispose__16;
            long long v141 = 0u;
            long long v142 = 0u;
            long long v143 = 0u;
            long long v144 = 0u;
            long long v145 = 0u;
            long long v146 = 0u;
            long long v147 = 0u;
            long long v148 = 0u;
            long long v149 = 0u;
            long long v150 = 0u;
            long long v151 = 0u;
            long long v125 = 0u;
            long long v126 = 0u;
            long long v127 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v132 = 0u;
            long long v133 = 0u;
            long long v134 = 0u;
            long long v135 = 0u;
            BOOL v92 = _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v115, v117, v118, (uint64_t)&v141);
            BOOL v93 = _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v110, v112, v113, (uint64_t)(v121 + 5));
            if (v92 && v93)
            {
              uint64_t v99 = MEMORY[0x1E4F143A8];
              uint64_t v100 = 0x40000000;
              v101 = ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke;
              v102 = &unk_1E59A4710;
              v105 = v109;
              v103 = &v136;
              v104 = &v120;
              CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v114, &v99);
              goto LABEL_278;
            }
            _Block_object_dispose(&v120, 8);
            _Block_object_dispose(&v136, 8);
          }
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v136, (uint64_t)v114, v40, 1);
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v120, (uint64_t)v114, 1, 0);
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v99, (uint64_t)v109, v40, 1);
          while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
          {
            *(_WORD *)v106 = **((_WORD **)&v145 + 1);
            _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v136);
            _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v99);
          }
          goto LABEL_315;
        }
        goto LABEL_241;
      }
      BOOL v42 = (*((_WORD *)this + 44) & 1) == 0;
      return _ZN6CoreMLL19vectorizeMultiArrayIDF16_DF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_((uint64_t)this, v42, (uint64_t)a2);
    }
    else
    {
      if (v14 != 65568) {
        return v2 & 1;
      }
      BOOL v15 = (*((_WORD *)this + 44) & 1) == 0;
      if (*((_WORD *)this + 44)) {
        __int16 v16 = 1;
      }
      else {
        __int16 v16 = 2;
      }
      if (((unsigned __int16)v16 & *((_WORD *)a2 + 44)) == 0)
      {
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
        if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
        {
          uint64_t v136 = 0;
          v137 = &v136;
          uint64_t v138 = 0x4802000000;
          v139 = __Block_byref_object_copy__12603;
          v140 = __Block_byref_object_dispose__12604;
          uint64_t v120 = 0;
          v121 = &v120;
          uint64_t v122 = 0x4802000000;
          v123 = __Block_byref_object_copy__12603;
          v124 = __Block_byref_object_dispose__12604;
          if (CoreML::initVIBuffer((CoreML *)v114, (const CoreML::MultiArrayBuffer *)&v141, v61)
            && CoreML::initVIBuffer((CoreML *)v109, (const CoreML::MultiArrayBuffer *)(v121 + 5), v62))
          {
            uint64_t v99 = MEMORY[0x1E4F143A8];
            uint64_t v100 = 0x40000000;
            v101 = ___ZN6CoreMLL16copyMultiArrayVIIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke;
            v102 = &unk_1E59A45D0;
            v105 = v109;
            v103 = &v136;
            v104 = &v120;
            CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v114, &v99);
            goto LABEL_278;
          }
          _Block_object_dispose(&v120, 8);
          _Block_object_dispose(&v136, 8);
          if (v116 != v115 && v119)
          {
            uint64_t v136 = 0;
            v137 = &v136;
            uint64_t v138 = 0xD802000000;
            v139 = __Block_byref_object_copy__15;
            v140 = __Block_byref_object_dispose__16;
            uint64_t v120 = 0;
            v121 = &v120;
            uint64_t v122 = 0xD802000000;
            v123 = __Block_byref_object_copy__15;
            v124 = __Block_byref_object_dispose__16;
            long long v141 = 0u;
            long long v142 = 0u;
            long long v143 = 0u;
            long long v144 = 0u;
            long long v145 = 0u;
            long long v146 = 0u;
            long long v147 = 0u;
            long long v148 = 0u;
            long long v149 = 0u;
            long long v150 = 0u;
            long long v151 = 0u;
            long long v125 = 0u;
            long long v126 = 0u;
            long long v127 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v132 = 0u;
            long long v133 = 0u;
            long long v134 = 0u;
            long long v135 = 0u;
            BOOL v88 = _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v115, v117, v118, (uint64_t)&v141);
            BOOL v89 = CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v110, v112, v113, (uint64_t)(v121 + 5));
            if (v88 && v89)
            {
              uint64_t v99 = MEMORY[0x1E4F143A8];
              uint64_t v100 = 0x40000000;
              v101 = ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke;
              v102 = &unk_1E59A4620;
              v105 = v109;
              v103 = &v136;
              v104 = &v120;
              CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v114, &v99);
              goto LABEL_278;
            }
            _Block_object_dispose(&v120, 8);
            _Block_object_dispose(&v136, 8);
          }
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v136, (uint64_t)v114, v15, 1);
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v120, (uint64_t)v114, 1, 0);
          CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v99, (uint64_t)v109, v15, 1);
          while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
          {
            _H0 = **((_WORD **)&v145 + 1);
            __asm { FCVT            S0, H0 }
            *(_DWORD *)v106 = _S0;
            _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v136);
            CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v99);
          }
LABEL_315:
          if (__p)
          {
            v108 = __p;
            operator delete(__p);
          }
          CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v99);
          if (*((void *)&v130 + 1))
          {
            *(void *)&long long v131 = *((void *)&v130 + 1);
            operator delete(*((void **)&v130 + 1));
          }
          CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v120);
          if (*((void *)&v146 + 1))
          {
            *(void *)&long long v147 = *((void *)&v146 + 1);
            operator delete(*((void **)&v146 + 1));
          }
          CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v136);
          goto LABEL_322;
        }
LABEL_241:
        char v2 = 0;
LABEL_242:
        CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v109);
        CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v114);
        return v2 & 1;
      }
      BOOL v17 = (*((_WORD *)this + 44) & 1) == 0;
      return _ZN6CoreMLL19vectorizeMultiArrayIDF16_fEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_((uint64_t)this, v17, (uint64_t)a2);
    }
  }
  else
  {
    if (v4 != 65568) {
      return v2 & 1;
    }
    int v5 = *((_DWORD *)a2 + 18);
    if (v5 > 65599)
    {
      if (v5 == 131104)
      {
        BOOL v46 = (*((_WORD *)this + 44) & 1) == 0;
        if (*((_WORD *)this + 44)) {
          __int16 v47 = 1;
        }
        else {
          __int16 v47 = 2;
        }
        if (((unsigned __int16)v47 & *((_WORD *)a2 + 44)) == 0)
        {
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
          if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
          {
            uint64_t v136 = 0;
            v137 = &v136;
            uint64_t v138 = 0x4802000000;
            v139 = __Block_byref_object_copy__12603;
            v140 = __Block_byref_object_dispose__12604;
            uint64_t v120 = 0;
            v121 = &v120;
            uint64_t v122 = 0x4802000000;
            v123 = __Block_byref_object_copy__12603;
            v124 = __Block_byref_object_dispose__12604;
            _Block_object_dispose(&v120, 8);
            _Block_object_dispose(&v136, 8);
            if (v116 != v115 && v119)
            {
              uint64_t v136 = 0;
              v137 = &v136;
              uint64_t v138 = 0xD802000000;
              v139 = __Block_byref_object_copy__15;
              v140 = __Block_byref_object_dispose__16;
              uint64_t v120 = 0;
              v121 = &v120;
              uint64_t v122 = 0xD802000000;
              v123 = __Block_byref_object_copy__15;
              v124 = __Block_byref_object_dispose__16;
              long long v141 = 0u;
              long long v142 = 0u;
              long long v143 = 0u;
              long long v144 = 0u;
              long long v145 = 0u;
              long long v146 = 0u;
              long long v147 = 0u;
              long long v148 = 0u;
              long long v149 = 0u;
              long long v150 = 0u;
              long long v151 = 0u;
              long long v125 = 0u;
              long long v126 = 0u;
              long long v127 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v132 = 0u;
              long long v133 = 0u;
              long long v134 = 0u;
              long long v135 = 0u;
              BOOL v80 = CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v115, v117, v118, (uint64_t)&v141);
              BOOL v81 = CoreML::initBNNSDArrayDescriptor<int>((uint64_t)&v110, v112, v113, (uint64_t)(v121 + 5));
              if (v80 && v81)
              {
                uint64_t v99 = MEMORY[0x1E4F143A8];
                uint64_t v100 = 0x40000000;
                v101 = ___ZN6CoreMLL18copyMultiArrayBNNSIfiEEbRKNS_16MultiArrayBufferERS1__block_invoke;
                v102 = &unk_1E59A43A0;
                v105 = v109;
                v103 = &v136;
                v104 = &v120;
                CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v114, &v99);
                goto LABEL_278;
              }
              _Block_object_dispose(&v120, 8);
              _Block_object_dispose(&v136, 8);
            }
            CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v136, (uint64_t)v114, v46, 1);
            CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v120, (uint64_t)v114, 1, 0);
            CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v99, (uint64_t)v109, v46, 1);
            while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
            {
              *(_DWORD *)v106 = (int)**((float **)&v145 + 1);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v136);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v99);
            }
            goto LABEL_315;
          }
          goto LABEL_241;
        }
        BOOL v48 = (*((_WORD *)this + 44) & 1) == 0;
        return CoreML::vectorizeMultiArray<float,int>((uint64_t)this, v48, (uint64_t)a2);
      }
      else
      {
        if (v5 != 65600) {
          return v2 & 1;
        }
        BOOL v22 = (*((_WORD *)this + 44) & 1) == 0;
        if (*((_WORD *)this + 44)) {
          __int16 v23 = 1;
        }
        else {
          __int16 v23 = 2;
        }
        if (((unsigned __int16)v23 & *((_WORD *)a2 + 44)) == 0)
        {
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
          if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
          {
            uint64_t v136 = 0;
            v137 = &v136;
            uint64_t v138 = 0x4802000000;
            v139 = __Block_byref_object_copy__12603;
            v140 = __Block_byref_object_dispose__12604;
            uint64_t v120 = 0;
            v121 = &v120;
            uint64_t v122 = 0x4802000000;
            v123 = __Block_byref_object_copy__12603;
            v124 = __Block_byref_object_dispose__12604;
            _Block_object_dispose(&v120, 8);
            _Block_object_dispose(&v136, 8);
            if (v116 != v115 && v119)
            {
              uint64_t v136 = 0;
              v137 = &v136;
              uint64_t v138 = 0xD802000000;
              v139 = __Block_byref_object_copy__15;
              v140 = __Block_byref_object_dispose__16;
              uint64_t v120 = 0;
              v121 = &v120;
              uint64_t v122 = 0xD802000000;
              v123 = __Block_byref_object_copy__15;
              v124 = __Block_byref_object_dispose__16;
              long long v141 = 0u;
              long long v142 = 0u;
              long long v143 = 0u;
              long long v144 = 0u;
              long long v145 = 0u;
              long long v146 = 0u;
              long long v147 = 0u;
              long long v148 = 0u;
              long long v149 = 0u;
              long long v150 = 0u;
              long long v151 = 0u;
              long long v125 = 0u;
              long long v126 = 0u;
              long long v127 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v132 = 0u;
              long long v133 = 0u;
              long long v134 = 0u;
              long long v135 = 0u;
              CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v115, v117, v118, (uint64_t)&v141);
              _Block_object_dispose(&v120, 8);
              _Block_object_dispose(&v136, 8);
            }
            CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v136, (uint64_t)v114, v22, 1);
            CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v120, (uint64_t)v114, 1, 0);
            CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v99, (uint64_t)v109, v22, 1);
            while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
            {
              double *v106 = **((float **)&v145 + 1);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v136);
              CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v99);
            }
            goto LABEL_315;
          }
          goto LABEL_241;
        }
        BOOL v24 = (*((_WORD *)this + 44) & 1) == 0;
        return CoreML::vectorizeMultiArray<float,double>((uint64_t)this, v24, (uint64_t)a2);
      }
    }
    else
    {
      if (v5 != 65552)
      {
        if (v5 == 65568)
        {
          BOOL v6 = (*((_WORD *)this + 44) & 1) == 0;
          if (*((_WORD *)this + 44)) {
            __int16 v7 = 1;
          }
          else {
            __int16 v7 = 2;
          }
          if (((unsigned __int16)v7 & *((_WORD *)a2 + 44)) != 0)
          {
            BOOL v8 = (*((_WORD *)this + 44) & 1) == 0;
            return CoreML::vectorizeMultiArray<float,float>((uint64_t)this, v8, (uint64_t)a2);
          }
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
          CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
          if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
          {
            uint64_t v136 = 0;
            v137 = &v136;
            uint64_t v138 = 0x4802000000;
            v139 = __Block_byref_object_copy__12603;
            v140 = __Block_byref_object_dispose__12604;
            uint64_t v120 = 0;
            v121 = &v120;
            uint64_t v122 = 0x4802000000;
            v123 = __Block_byref_object_copy__12603;
            v124 = __Block_byref_object_dispose__12604;
            if (CoreML::initVIBuffer((CoreML *)v114, (const CoreML::MultiArrayBuffer *)&v141, v58)
              && CoreML::initVIBuffer((CoreML *)v109, (const CoreML::MultiArrayBuffer *)(v121 + 5), v59))
            {
              uint64_t v99 = MEMORY[0x1E4F143A8];
              uint64_t v100 = 0x40000000;
              v101 = ___ZN6CoreMLL16copyMultiArrayVIIffEEbRKNS_16MultiArrayBufferERS1__block_invoke;
              v102 = &unk_1E59A4300;
              v105 = v109;
              v103 = &v136;
              v104 = &v120;
              CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v114, &v99);
LABEL_278:
              _Block_object_dispose(&v120, 8);
              _Block_object_dispose(&v136, 8);
LABEL_322:
              char v2 = 1;
              goto LABEL_242;
            }
            _Block_object_dispose(&v120, 8);
            _Block_object_dispose(&v136, 8);
            if (v116 != v115 && v119)
            {
              uint64_t v136 = 0;
              v137 = &v136;
              uint64_t v138 = 0xD802000000;
              v139 = __Block_byref_object_copy__15;
              v140 = __Block_byref_object_dispose__16;
              uint64_t v120 = 0;
              v121 = &v120;
              uint64_t v122 = 0xD802000000;
              v123 = __Block_byref_object_copy__15;
              v124 = __Block_byref_object_dispose__16;
              long long v141 = 0u;
              long long v142 = 0u;
              long long v143 = 0u;
              long long v144 = 0u;
              long long v145 = 0u;
              long long v146 = 0u;
              long long v147 = 0u;
              long long v148 = 0u;
              long long v149 = 0u;
              long long v150 = 0u;
              long long v151 = 0u;
              long long v125 = 0u;
              long long v126 = 0u;
              long long v127 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v130 = 0u;
              long long v131 = 0u;
              long long v132 = 0u;
              long long v133 = 0u;
              long long v134 = 0u;
              long long v135 = 0u;
              BOOL v86 = CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v115, v117, v118, (uint64_t)&v141);
              BOOL v87 = CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v110, v112, v113, (uint64_t)(v121 + 5));
              if (v86 && v87)
              {
                uint64_t v99 = MEMORY[0x1E4F143A8];
                uint64_t v100 = 0x40000000;
                v101 = ___ZN6CoreMLL18copyMultiArrayBNNSIffEEbRKNS_16MultiArrayBufferERS1__block_invoke;
                v102 = &unk_1E59A4350;
                v105 = v109;
                v103 = &v136;
                v104 = &v120;
                CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v114, &v99);
                goto LABEL_278;
              }
              _Block_object_dispose(&v120, 8);
              _Block_object_dispose(&v136, 8);
            }
            CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v136, (uint64_t)v114, v6, 1);
            CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v120, (uint64_t)v114, 1, 0);
            CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v99, (uint64_t)v109, v6, 1);
            while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
            {
              *(_DWORD *)v106 = **((_DWORD **)&v145 + 1);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v136);
              CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v99);
            }
            goto LABEL_315;
          }
          goto LABEL_241;
        }
        return v2 & 1;
      }
      BOOL v34 = (*((_WORD *)this + 44) & 1) == 0;
      if (*((_WORD *)this + 44)) {
        __int16 v35 = 1;
      }
      else {
        __int16 v35 = 2;
      }
      if (((unsigned __int16)v35 & *((_WORD *)a2 + 44)) == 0)
      {
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v114, (uint64_t)this);
        CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)v109, (uint64_t)a2);
        if (v111 - (void)v110 == v116 - v115 && !memcmp(v115, v110, v111 - (void)v110))
        {
          uint64_t v136 = 0;
          v137 = &v136;
          uint64_t v138 = 0x4802000000;
          v139 = __Block_byref_object_copy__12603;
          v140 = __Block_byref_object_dispose__12604;
          uint64_t v120 = 0;
          v121 = &v120;
          uint64_t v122 = 0x4802000000;
          v123 = __Block_byref_object_copy__12603;
          v124 = __Block_byref_object_dispose__12604;
          if (CoreML::initVIBuffer((CoreML *)v114, (const CoreML::MultiArrayBuffer *)&v141, v73)
            && CoreML::initVIBuffer((CoreML *)v109, (const CoreML::MultiArrayBuffer *)(v121 + 5), v74))
          {
            uint64_t v99 = MEMORY[0x1E4F143A8];
            uint64_t v100 = 0x40000000;
            v101 = ___ZN6CoreMLL16copyMultiArrayVIIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke;
            v102 = &unk_1E59A43F0;
            v105 = v109;
            v103 = &v136;
            v104 = &v120;
            CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v114, &v99);
            goto LABEL_278;
          }
          _Block_object_dispose(&v120, 8);
          _Block_object_dispose(&v136, 8);
          if (v116 != v115 && v119)
          {
            uint64_t v136 = 0;
            v137 = &v136;
            uint64_t v138 = 0xD802000000;
            v139 = __Block_byref_object_copy__15;
            v140 = __Block_byref_object_dispose__16;
            uint64_t v120 = 0;
            v121 = &v120;
            uint64_t v122 = 0xD802000000;
            v123 = __Block_byref_object_copy__15;
            v124 = __Block_byref_object_dispose__16;
            long long v141 = 0u;
            long long v142 = 0u;
            long long v143 = 0u;
            long long v144 = 0u;
            long long v145 = 0u;
            long long v146 = 0u;
            long long v147 = 0u;
            long long v148 = 0u;
            long long v149 = 0u;
            long long v150 = 0u;
            long long v151 = 0u;
            long long v125 = 0u;
            long long v126 = 0u;
            long long v127 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v132 = 0u;
            long long v133 = 0u;
            long long v134 = 0u;
            long long v135 = 0u;
            BOOL v90 = CoreML::initBNNSDArrayDescriptor<float>((uint64_t)&v115, v117, v118, (uint64_t)&v141);
            BOOL v91 = _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor((uint64_t)&v110, v112, v113, (uint64_t)(v121 + 5));
            if (v90 && v91)
            {
              uint64_t v99 = MEMORY[0x1E4F143A8];
              uint64_t v100 = 0x40000000;
              v101 = ___ZN6CoreMLL18copyMultiArrayBNNSIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke;
              v102 = &unk_1E59A4440;
              v105 = v109;
              v103 = &v136;
              v104 = &v120;
              CoreML::MultiArrayBuffer::getBytesWithHandler((uint64_t)v114, &v99);
              goto LABEL_278;
            }
            _Block_object_dispose(&v120, 8);
            _Block_object_dispose(&v136, 8);
          }
          CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v136, (uint64_t)v114, v34, 1);
          CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v120, (uint64_t)v114, 1, 0);
          _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v99, (uint64_t)v109, v34, 1);
          while (*((void *)&v145 + 1) != *((void *)&v129 + 1))
          {
            _S0 = **((_DWORD **)&v145 + 1);
            __asm { FCVT            H0, S0 }
            *(_WORD *)v106 = _S0;
            CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v136);
            _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v99);
          }
          goto LABEL_315;
        }
        goto LABEL_241;
      }
      BOOL v36 = (*((_WORD *)this + 44) & 1) == 0;
      return _ZN6CoreMLL19vectorizeMultiArrayIfDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_((uint64_t)this, v36, (uint64_t)a2);
    }
  }
}

void sub_19E5A9FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

void sub_19E5AA31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5AA6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5AAACC(_Unwind_Exception *a1)
{
  BOOL v8 = v5;

  _Unwind_Resume(a1);
}

void sub_19E5AB1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  _Unwind_Resume(a1);
}

uint64_t IArchive::rewind(uint64_t this)
{
  uint64_t v1 = this;
  char v2 = *(void **)(*(void *)(*(void *)this + 32) + 32);
  if (v2)
  {
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
    this = std::istream::seekg();
  }
  int v3 = *(void **)(v1 + 16);
  int v4 = (void *)(v1 + 24);
  if (v3 != v4)
  {
    do
    {
      this = IArchive::rewind((IArchive *)(v3 + 7));
      int v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          int v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          BOOL v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          int v3 = v6;
        }
        while (!v7);
      }
      int v3 = v6;
    }
    while (v6 != v4);
  }
  return this;
}

void sub_19E5AB78C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5ABCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    JUMPOUT(0x19E5ABBC8);
  }
  _Unwind_Resume(exception_object);
}

id MLLoggingGetCoreChannel()
{
  if (MLLoggingGetCoreChannel_onceToken != -1) {
    dispatch_once(&MLLoggingGetCoreChannel_onceToken, &__block_literal_global_16112);
  }
  v0 = (void *)MLLoggingGetCoreChannel_coreChannel;

  return v0;
}

void sub_19E5AC068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  BOOL v19 = v18;

  _Unwind_Resume(a1);
}

uint64_t MLLoggingAllowsInstrumentation(int a1, const char *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (os_variant_has_internal_content()) {
    return 1;
  }
  if (MLLoggingAllowsInstrumentationBasedOnEntitlements_onceToken != -1) {
    dispatch_once(&MLLoggingAllowsInstrumentationBasedOnEntitlements_onceToken, &__block_literal_global_12);
  }
  if (MLLoggingAllowsInstrumentationBasedOnEntitlements_allowed) {
    return 1;
  }
  if (MLLoggingAllowsInstrumentationBasedOnProcess_onceToken != -1) {
    dispatch_once(&MLLoggingAllowsInstrumentationBasedOnProcess_onceToken, &__block_literal_global_10);
  }
  if (MLLoggingAllowsInstrumentationBasedOnProcess_allowed != 1) {
    return 0;
  }
  if (a2)
  {
    memset(&v13, 0, 512);
    int v5 = statfs(a2, &v13);
    BOOL v6 = (v5 | v13.f_flags & 0x4000) == 0;
    BOOL v7 = [NSString stringWithUTF8String:a2];
    HomeDirectory = MLLoggingGetHomeDirectory();
    if (HomeDirectory)
    {
      uint64_t v9 = [NSString stringWithUTF8String:HomeDirectory];
      int v10 = [v9 stringByAppendingPathComponent:@"/Library/Trial"];

      free(HomeDirectory);
      if ([v7 hasPrefix:v10]) {
        int v11 = 1;
      }
      else {
        int v11 = [v7 hasPrefix:@"/private/var/mobile/Library/Trial"];
      }
      if ([v7 hasPrefix:@"/System/Library/AssetsV2/"]) {
        int v12 = 1;
      }
      else {
        int v12 = [v7 hasPrefix:@"/private/var/MobileAsset/AssetsV2"];
      }
      LODWORD(HomeDirectory) = v6 & ((v11 | v12) ^ 1);
    }
  }
  else
  {
    LODWORD(HomeDirectory) = 0;
  }
  return HomeDirectory & a1;
}

void sub_19E5AC874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5ACA94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5ACB68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5ACBEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5ACC70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5ACD0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5ACD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5ACEBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5ACF5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5AD034(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19E5AD140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_19E5AD4E8(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19E5AD6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5ADD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,MIL::Attributes::IOAliasInfo *a25,uint64_t a26)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a26);
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>>>::~__hash_table((uint64_t)&a16);
  uint64_t v32 = a24;
  a24 = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  std::unique_ptr<MIL::Attributes::IOAliasInfo>::reset[abi:ne180100](&a25);
  if (a2 == 3)
  {
    BOOL v33 = (MIL::ValidationError *)__cxa_begin_catch(a1);
    if (v28)
    {
      BOOL v34 = v33;
      uint64_t Reason = MIL::ValidationError::GetReason(v33);
      (*(void (**)(MIL::ValidationError *))(*(void *)v34 + 16))(v34);
      *BOOL v28 = +[MLModelErrorUtils programValidationAtLoadErrorWithReason:Reason format:@"%s"];
    }
  }
  else if (a2 == 2)
  {
    BOOL v36 = (MIL::ParseError *)__cxa_begin_catch(a1);
    if (v28)
    {
      BOOL v37 = v36;
      uint64_t v38 = MIL::ParseError::GetReason(v36);
      (*(void (**)(MIL::ParseError *))(*(void *)v37 + 16))(v37);
      *BOOL v28 = +[MLModelErrorUtils programParsingAtLoadErrorWithReason:v38 format:@"%s"];
    }
  }
  else
  {
    if (a2 != 1)
    {
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      }

      _Unwind_Resume(a1);
    }
    BOOL v39 = __cxa_begin_catch(a1);
    if (v28)
    {
      (*(void (**)(void *))(*(void *)v39 + 16))(v39);
      *BOOL v28 = +[MLModelErrorUtils genericErrorWithFormat:@"%s"];
    }
  }
  void *v27 = 0;
  __cxa_end_catch();
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  JUMPOUT(0x19E5ADD1CLL);
}

void sub_19E5AE1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t *CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(CoreML::Specification::protobuf_Normalizer_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_Normalizer_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

uint64_t CoreML::Specification::ArrayFeatureType_ShapeRange::MergePartialFromCodedStream(CoreML::Specification::ArrayFeatureType_ShapeRange *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  int v5 = (CoreML::Specification::ArrayFeatureType_ShapeRange *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      BOOL v6 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        LODWORD(v7) = 0;
LABEL_7:
        unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *(void *)a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8) {
        break;
      }
      int v12 = (int *)*((void *)this + 4);
      if (!v12)
      {
        int v13 = *((_DWORD *)this + 6);
        int v14 = *((_DWORD *)this + 7);
LABEL_23:
        if (v13 <= v14)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v5, v14 - v13 + 1);
          int v12 = (int *)*((void *)this + 4);
        }
        int v14 = *v12;
        goto LABEL_26;
      }
      int v13 = *((_DWORD *)this + 6);
      int v14 = *v12;
      if (v13 < *v12)
      {
        *((_DWORD *)this + 6) = v13 + 1;
        Aligned = *(google::protobuf::Arena ***)&v12[2 * v13 + 2];
        goto LABEL_31;
      }
      if (v14 == *((_DWORD *)this + 7)) {
        goto LABEL_23;
      }
LABEL_26:
      *int v12 = v14 + 1;
      __int16 v16 = *(google::protobuf::Arena **)v5;
      if (!*(void *)v5) {
        operator new();
      }
      CoreML::Specification::SizeRange::SizeRange((CoreML::Specification::SizeRange *)Aligned);
      BOOL v17 = google::protobuf::Arena::AllocateAligned(v16, 0, 24);
      void *v17 = (google::protobuf::Arena *)Aligned;
      v17[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::SizeRange>;
      int v18 = (unint64_t *)((char *)v16 + 32);
      do
        unint64_t v19 = __ldxr(v18);
      while (__stxr((unint64_t)v17, v18));
      v17[2] = (google::protobuf::Arena *)v19;
      uint64_t v20 = *((void *)this + 4);
      uint64_t v21 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v21 + 1;
      *(void *)(v20 + 8 * v21 + _Block_object_dispose(&STACK[0x278], 8) = Aligned;
LABEL_31:
      BOOL v22 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v22 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v22;
        *(void *)a2 = v22 + 1;
      }
      int v24 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v26 = *((_DWORD *)a2 + 13);
      BOOL v27 = __OFSUB__(v26--, 1);
      *((_DWORD *)a2 + 13) = v26;
      if (v26 < 0 == v27)
      {
        int v28 = v24;
        uint64_t result = CoreML::Specification::SizeRange::MergePartialFromCodedStream((CoreML::Specification::SizeRange *)Aligned, (char **)a2, v25);
        if (!result) {
          return result;
        }
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v28)) {
          continue;
        }
      }
      return 0;
    }
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19E5AE5D4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

CoreML::Specification::SizeRange *CoreML::Specification::SizeRange::SizeRange(CoreML::Specification::SizeRange *this)
{
  *(void *)this = &unk_1EF0DAEB0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::SizeRange *)&CoreML::Specification::_SizeRange_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x278], 8) = 0;
  return this;
}

void sub_19E5AE65C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SizeRange::MergePartialFromCodedStream(CoreML::Specification::SizeRange *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = *a2;
        if (*a2 >= a2[1])
        {
          LODWORD(v6) = 0;
LABEL_6:
          unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback((google::protobuf::io::CodedInputStream *)a2, v6);
          unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_20;
          }
          goto LABEL_7;
        }
        uint64_t v6 = *v5;
        if (*v5 < 1) {
          goto LABEL_6;
        }
        *a2 = v5 + 1;
        unint64_t v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_20;
        }
LABEL_7:
        if (v7 >> 3 != 2) {
          break;
        }
        if (v7 != 16) {
          goto LABEL_20;
        }
        int v11 = *a2;
        if (*a2 >= a2[1] || *v11 < 0)
        {
          unint64_t Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
          if ((v15 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v11;
          *a2 = v11 + 1;
        }
        *((void *)this + 3) = Varint64Fallback;
      }
      if (v7 >> 3 != 1 || v7 != 8) {
        break;
      }
      int v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        *((void *)this + 2) = google::protobuf::io::CodedInputStream::ReadVarint64Fallback((google::protobuf::io::CodedInputStream *)a2);
        if ((v14 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        *((void *)this + 2) = *v10;
        *a2 = v10 + 1;
      }
    }
LABEL_20:
    if (v7) {
      BOOL v13 = (v7 & 7) == 4;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      return 1;
    }
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField((google::protobuf::internal::WireFormatLite *)a2, (google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

unint64_t google::protobuf::io::CodedInputStream::ReadVarint64Fallback(google::protobuf::io::CodedInputStream *this)
{
  int v3 = *(char **)this;
  unint64_t v2 = *((void *)this + 1);
  if ((int)(v2 - *(void *)this) <= 9 && (v2 <= (unint64_t)v3 || *(char *)(v2 - 1) < 0))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = v8;
      if (v8 == 10) {
        break;
      }
      while (1)
      {
        int v11 = *(char **)this;
        if (*(void *)this != *((void *)this + 1)) {
          break;
        }
        if ((google::protobuf::io::CodedInputStream::Refresh(this) & 1) == 0) {
          return 0;
        }
      }
      char v12 = *v11;
      v9 |= (unint64_t)(*v11 & 0x7F) << (7 * v10);
      *(void *)this = v11 + 1;
      uint64_t v8 = v10 + 1;
      if ((v12 & 0x80) == 0) {
        return v9;
      }
    }
    return 0;
  }
  else
  {
    char v4 = (unsigned __int8 *)(v3 + 1);
    unsigned int v5 = *v3;
    if (*v3 < 0)
    {
      unsigned int v5 = v5 + (v3[1] << 7) - 128;
      if (v3[1] < 0)
      {
        unsigned int v5 = v5 + (v3[2] << 14) - 0x4000;
        if (v3[2] < 0)
        {
          unsigned int v5 = v5 + (v3[3] << 21) - 0x200000;
          if (v3[3] < 0)
          {
            v5 -= 0x10000000;
            unsigned int v6 = v3[4];
            if (v3[4] < 0)
            {
              unsigned int v6 = v6 + (v3[5] << 7) - 128;
              if (v3[5] < 0)
              {
                unsigned int v6 = v6 + (v3[6] << 14) - 0x4000;
                if (v3[6] < 0)
                {
                  unsigned int v6 = v6 + (v3[7] << 21) - 0x200000;
                  if (v3[7] < 0)
                  {
                    v6 -= 0x10000000;
                    uint64_t v7 = v3[8];
                    if (v3[8] < 0)
                    {
                      if (v3[9] < 0) {
                        return 0;
                      }
                      char v4 = (unsigned __int8 *)(v3 + 10);
                      uint64_t v7 = v7 + (v3[9] << 7) - 128;
                    }
                    else
                    {
                      char v4 = (unsigned __int8 *)(v3 + 9);
                    }
                  }
                  else
                  {
                    uint64_t v7 = 0;
                    char v4 = (unsigned __int8 *)(v3 + 8);
                  }
                }
                else
                {
                  uint64_t v7 = 0;
                  char v4 = (unsigned __int8 *)(v3 + 7);
                }
              }
              else
              {
                uint64_t v7 = 0;
                char v4 = (unsigned __int8 *)(v3 + 6);
              }
            }
            else
            {
              uint64_t v7 = 0;
              char v4 = (unsigned __int8 *)(v3 + 5);
            }
          }
          else
          {
            unsigned int v6 = 0;
            uint64_t v7 = 0;
            char v4 = (unsigned __int8 *)(v3 + 4);
          }
        }
        else
        {
          unsigned int v6 = 0;
          uint64_t v7 = 0;
          char v4 = (unsigned __int8 *)(v3 + 3);
        }
      }
      else
      {
        unsigned int v6 = 0;
        uint64_t v7 = 0;
        char v4 = (unsigned __int8 *)(v3 + 2);
      }
    }
    else
    {
      unsigned int v6 = 0;
      uint64_t v7 = 0;
    }
    unint64_t v9 = v5 | ((unint64_t)v6 << 28) | (v7 << 56);
    *(void *)this = v4;
  }
  return v9;
}

uint64_t CoreML::Specification::ModelDescription::MergePartialFromCodedStream(CoreML::Specification::ModelDescription *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int v5 = (std::string **)((char *)this + 152);
  BOOL v55 = (CoreML::Specification::ModelDescription *)((char *)this + 88);
  __int16 v56 = (char *)this + 112;
  unsigned int v6 = (char *)this + 64;
  uint64_t v7 = (std::string **)((char *)this + 144);
  uint64_t v8 = (std::string **)((char *)this + 136);
  unint64_t v9 = (char *)this + 40;
  BOOL v54 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      uint64_t v10 = *(unsigned __int8 **)a2;
      unint64_t v11 = *((void *)a2 + 1);
      if (*(void *)a2 >= v11)
      {
        LODWORD(v13) = 0;
      }
      else
      {
        char v12 = v10 + 1;
        uint64_t v13 = *v10;
        if ((char)*v10 >= 1)
        {
          *(void *)a2 = v12;
          unint64_t v14 = v13 | 0x100000000;
          if ((v14 & 0x100000000) == 0) {
            goto LABEL_9;
          }
          goto LABEL_17;
        }
        if ((unint64_t)v12 < v11)
        {
          int v15 = *v12;
          if ((v13 & ~v15) >= 0x80)
          {
            *(void *)a2 = v10 + 2;
            unint64_t v14 = (v13 + (v15 << 7) - 128) | 0x100000000;
            goto LABEL_17;
          }
        }
      }
      unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v13);
      unint64_t v14 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v14 & 0x100000000) == 0) {
        goto LABEL_9;
      }
LABEL_17:
      unsigned int v18 = v14 >> 3;
      if (v14 >> 3 <= 0x31)
      {
        switch(v18)
        {
          case 0xAu:
            if (v14 != 82) {
              goto LABEL_9;
            }
            uint64_t v19 = (uint64_t)v9;
            goto LABEL_61;
          case 0xBu:
            if (v14 != 90) {
              goto LABEL_9;
            }
            if (*v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
            }
            uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v8);
            if (!result) {
              return result;
            }
            unsigned int v25 = *v8;
            if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
            {
              unsigned int v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
              std::string::size_type size = (*v8)->__r_.__value_.__l.__size_;
            }
            else
            {
              LODWORD(size) = HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
            }
            BOOL v39 = "CoreML.Specification.ModelDescription.predictedFeatureName";
            goto LABEL_75;
          case 0xCu:
            if (v14 != 98) {
              goto LABEL_9;
            }
            if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
            }
            uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v7);
            if (!result) {
              return result;
            }
            unsigned int v25 = *v7;
            if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
            {
              unsigned int v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
              std::string::size_type size = (*v7)->__r_.__value_.__l.__size_;
            }
            else
            {
              LODWORD(size) = HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
            }
            BOOL v39 = "CoreML.Specification.ModelDescription.predictedProbabilitiesName";
            goto LABEL_75;
          case 0xDu:
            if (v14 != 106) {
              goto LABEL_9;
            }
            uint64_t v19 = (uint64_t)v6;
            goto LABEL_61;
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
            goto LABEL_9;
          case 0x14u:
            if (v14 != 162) {
              goto LABEL_9;
            }
            BOOL v27 = (int *)*((void *)this + 13);
            if (!v27)
            {
              int v28 = *((_DWORD *)this + 24);
              int v29 = *((_DWORD *)this + 25);
LABEL_82:
              if (v28 <= v29)
              {
                google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(v55, v29 - v28 + 1);
                BOOL v27 = (int *)*((void *)this + 13);
              }
              int v29 = *v27;
              goto LABEL_85;
            }
            int v28 = *((_DWORD *)this + 24);
            int v29 = *v27;
            if (v28 < *v27)
            {
              *((_DWORD *)this + 24) = v28 + 1;
              Aligned = *(google::protobuf::Arena ***)&v27[2 * v28 + 2];
              goto LABEL_90;
            }
            if (v29 == *((_DWORD *)this + 25)) {
              goto LABEL_82;
            }
LABEL_85:
            int *v27 = v29 + 1;
            BOOL v43 = *(google::protobuf::Arena **)v55;
            if (!*(void *)v55) {
              operator new();
            }
            CoreML::Specification::FunctionDescription::FunctionDescription((CoreML::Specification::FunctionDescription *)Aligned);
            __int16 v44 = google::protobuf::Arena::AllocateAligned(v43, 0, 24);
            *__int16 v44 = (google::protobuf::Arena *)Aligned;
            v44[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::FunctionDescription>;
            BOOL v45 = (unint64_t *)((char *)v43 + 32);
            do
              unint64_t v46 = __ldxr(v45);
            while (__stxr((unint64_t)v44, v45));
            v44[2] = (google::protobuf::Arena *)v46;
            uint64_t v47 = *((void *)this + 13);
            uint64_t v48 = *((int *)this + 24);
            *((_DWORD *)this + 24) = v48 + 1;
            *(void *)(v47 + 8 * v48 + _Block_object_dispose(&STACK[0x278], 8) = Aligned;
LABEL_90:
            BOOL v49 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v49 < 0)
            {
              int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (VarintSizeAsIntFallback < 0) {
                return 0;
              }
            }
            else
            {
              int VarintSizeAsIntFallback = *v49;
              *(void *)a2 = v49 + 1;
            }
            int v51 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
            int v53 = *((_DWORD *)a2 + 13);
            BOOL v37 = __OFSUB__(v53--, 1);
            *((_DWORD *)a2 + 13) = v53;
            if (v53 < 0 != v37) {
              return 0;
            }
            int v38 = v51;
            uint64_t result = CoreML::Specification::FunctionDescription::MergePartialFromCodedStream((CoreML::Specification::FunctionDescription *)Aligned, a2, v52);
            if (!result) {
              return result;
            }
            break;
          case 0x15u:
            if (v14 != 170) {
              goto LABEL_9;
            }
            if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
            }
            uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v5);
            if (!result) {
              return result;
            }
            unsigned int v25 = *v5;
            if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
            {
              unsigned int v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
              std::string::size_type size = (*v5)->__r_.__value_.__l.__size_;
            }
            else
            {
              LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
            }
            BOOL v39 = "CoreML.Specification.ModelDescription.defaultFunctionName";
LABEL_75:
            if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v25, size, 0, (uint64_t)v39))return 0; {
            continue;
            }
          default:
            if (v18 != 1 || v14 != 10) {
              goto LABEL_9;
            }
            uint64_t v19 = (uint64_t)v54;
            goto LABEL_61;
        }
        goto LABEL_96;
      }
      if (v18 == 50) {
        break;
      }
      if (v18 != 100 || v14 != 34) {
        goto LABEL_9;
      }
      uint64_t v20 = (CoreML::Specification::Metadata *)*((void *)this + 20);
      if (!v20) {
        operator new();
      }
      uint64_t v21 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v21 < 0)
      {
        int v22 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v22 < 0) {
          return 0;
        }
      }
      else
      {
        int v22 = *v21;
        *(void *)a2 = v21 + 1;
      }
      int v40 = google::protobuf::io::CodedInputStream::PushLimit(a2, v22);
      int v42 = *((_DWORD *)a2 + 13);
      BOOL v37 = __OFSUB__(v42--, 1);
      *((_DWORD *)a2 + 13) = v42;
      if (v42 < 0 != v37) {
        return 0;
      }
      int v38 = v40;
      uint64_t result = CoreML::Specification::Metadata::MergePartialFromCodedStream(v20, a2, v41);
      if (!result) {
        return result;
      }
LABEL_96:
      if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v38)) {
        return 0;
      }
    }
    if (v14 == 146)
    {
      uint64_t v19 = (uint64_t)v56;
LABEL_61:
      BOOL v31 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v19);
      uint64_t v32 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v32 < 0)
      {
        int v33 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v33 < 0) {
          return 0;
        }
      }
      else
      {
        int v33 = *v32;
        *(void *)a2 = v32 + 1;
      }
      int v34 = google::protobuf::io::CodedInputStream::PushLimit(a2, v33);
      int v36 = *((_DWORD *)a2 + 13);
      BOOL v37 = __OFSUB__(v36--, 1);
      *((_DWORD *)a2 + 13) = v36;
      if (v36 < 0 != v37) {
        return 0;
      }
      int v38 = v34;
      uint64_t result = CoreML::Specification::FeatureDescription::MergePartialFromCodedStream((CoreML::Specification::FeatureDescription *)v31, a2, v35);
      if (!result) {
        return result;
      }
      goto LABEL_96;
    }
LABEL_9:
    if (!v14 || (v14 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v14, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19E5AEF30(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40FD9EAC30);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::CodedInputStream::PushLimit(google::protobuf::io::CodedInputStream *this, int a2)
{
  int v2 = *((_DWORD *)this + 6);
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *((unsigned int *)this + 10);
  uint64_t v5 = *((int *)this + 11);
  int v6 = v2 - v5 + *(_DWORD *)this - v3;
  if ((v6 ^ 0x7FFFFFFF) >= a2 && (int)v4 - v6 > a2)
  {
    int v8 = v6 + a2;
    *((_DWORD *)this + 10) = v8;
    uint64_t v9 = v3 + v5;
    *((void *)this + 1) = v9;
    int v10 = *((_DWORD *)this + 12);
    if (v10 >= v8) {
      int v10 = v8;
    }
    BOOL v11 = __OFSUB__(v2, v10);
    int v12 = v2 - v10;
    if ((v12 < 0) ^ v11 | (v12 == 0)) {
      int v12 = 0;
    }
    else {
      *((void *)this + 1) = v9 - v12;
    }
    *((_DWORD *)this + 11) = v12;
  }
  return v4;
}

BOOL google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(google::protobuf::io::CodedInputStream *this, int a2)
{
  int v2 = *((unsigned __int8 *)this + 36);
  *((_DWORD *)this + 10) = a2;
  int v3 = *((_DWORD *)this + 12);
  uint64_t v4 = *((void *)this + 1) + *((int *)this + 11);
  *((void *)this + 1) = v4;
  if (v3 >= a2) {
    int v5 = a2;
  }
  else {
    int v5 = v3;
  }
  int v6 = *((_DWORD *)this + 6);
  BOOL v7 = __OFSUB__(v6, v5);
  int v8 = v6 - v5;
  if ((v8 < 0) ^ v7 | (v8 == 0)) {
    int v8 = 0;
  }
  else {
    *((void *)this + 1) = v4 - v8;
  }
  *((_DWORD *)this + 11) = v8;
  *((unsigned char *)this + 36) = 0;
  ++*((_DWORD *)this + 13);
  return v2 != 0;
}

google::protobuf::Arena **google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(uint64_t a1)
{
  int v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v3 = *(_DWORD *)(a1 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    if (v3 <= v4)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v4 - v3 + 1);
      int v2 = *(int **)(a1 + 16);
    }
    int v4 = *v2;
    goto LABEL_9;
  }
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = *v2;
  if (v3 < *v2)
  {
    *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v3 + 1;
    return *(google::protobuf::Arena ***)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_9:
  *int v2 = v4 + 1;
  int v6 = *(google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::FeatureDescription::FeatureDescription((CoreML::Specification::FeatureDescription *)Aligned);
  BOOL v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
  *BOOL v7 = (google::protobuf::Arena *)Aligned;
  v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureDescription>;
  int v8 = (unint64_t *)((char *)v6 + 32);
  do
    unint64_t v9 = __ldxr(v8);
  while (__stxr((unint64_t)v7, v8));
  v7[2] = (google::protobuf::Arena *)v9;
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v11 + 1;
  *(void *)(v10 + 8 * v11 + _Block_object_dispose(&STACK[0x278], 8) = Aligned;
  return Aligned;
}

void sub_19E5AF16C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

CoreML::Specification::FeatureDescription *CoreML::Specification::FeatureDescription::FeatureDescription(CoreML::Specification::FeatureDescription *this)
{
  *(void *)this = &unk_1EF0D2E70;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_19E5AF200(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unint64_t *CoreML::Specification::protobuf_Model_2eproto::InitDefaults(CoreML::Specification::protobuf_Model_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_Model_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_Model_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Model_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

uint64_t CoreML::Specification::FeatureDescription::MergePartialFromCodedStream(CoreML::Specification::FeatureDescription *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  int v5 = (std::string **)((char *)this + 24);
  int v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        BOOL v7 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1))
        {
          LODWORD(v_Block_object_dispose(&STACK[0x278], 8) = 0;
LABEL_7:
          unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
          unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v9 & 0x100000000) == 0) {
            goto LABEL_32;
          }
          goto LABEL_8;
        }
        uint64_t v8 = *v7;
        if (*v7 < 1) {
          goto LABEL_7;
        }
        *(void *)a2 = v7 + 1;
        unint64_t v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0) {
          goto LABEL_32;
        }
LABEL_8:
        unsigned int v11 = v9 >> 3;
        if (v9 >> 3 != 3) {
          break;
        }
        if (v9 != 26) {
          goto LABEL_32;
        }
        __int16 v16 = (CoreML::Specification::FeatureType *)*((void *)this + 4);
        if (!v16) {
          operator new();
        }
        BOOL v17 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v17 < 0)
        {
          int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v17;
          *(void *)a2 = v17 + 1;
        }
        int v20 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
        int v22 = *((_DWORD *)a2 + 13);
        BOOL v23 = __OFSUB__(v22--, 1);
        *((_DWORD *)a2 + 13) = v22;
        if (v22 < 0 == v23)
        {
          int v24 = v20;
          uint64_t result = CoreML::Specification::FeatureType::MergePartialFromCodedStream(v16, a2, v21);
          if (!result) {
            return result;
          }
          if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v24)) {
            continue;
          }
        }
        return 0;
      }
      if (v11 != 2) {
        break;
      }
      if (v9 != 18) {
        goto LABEL_32;
      }
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v5);
      if (!result) {
        return result;
      }
      unint64_t v14 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        unint64_t v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
        std::string::size_type size = (*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      unsigned int v25 = "CoreML.Specification.FeatureDescription.shortDescription";
LABEL_47:
      if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v14, size, 0, (uint64_t)v25)) {
        return 0;
      }
    }
    if (v11 == 1 && v9 == 10)
    {
      if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t result = google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v6);
      if (!result) {
        return result;
      }
      unint64_t v14 = *v6;
      if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
      {
        unint64_t v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
        std::string::size_type size = (*v6)->__r_.__value_.__l.__size_;
      }
      else
      {
        LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
      }
      unsigned int v25 = "CoreML.Specification.FeatureDescription.name";
      goto LABEL_47;
    }
LABEL_32:
    if (!v9 || (v9 & 7) == 4) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0) {
      return 0;
    }
  }
}

void sub_19E5AF4E4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::WireFormatLite::ReadBytes(unsigned __int8 **a1, std::string *this)
{
  int v5 = (char *)*a1;
  char v4 = a1[1];
  if (*a1 >= v4)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    LODWORD(v6) = *v5;
    if ((*v5 & 0x80000000) == 0)
    {
      BOOL v7 = (unsigned __int8 *)(v5 + 1);
      *a1 = v7;
      goto LABEL_4;
    }
  }
  uint64_t Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback((google::protobuf::io::CodedInputStream *)a1, v6);
  if ((Varint32Fallback & 0x8000000080000000) != 0) {
    return 0;
  }
  LODWORD(v6) = Varint32Fallback;
  BOOL v7 = *a1;
  char v4 = a1[1];
LABEL_4:
  if ((int)v6 <= (int)v4 - (int)v7)
  {
    uint64_t v6 = v6;
    std::string::resize(this, v6, 0);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    memcpy(this, *a1, v6);
  }
  else
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      if (this->__r_.__value_.__l.__size_)
      {
        *this->__r_.__value_.__l.__data_ = 0;
        this->__r_.__value_.__l.__size_ = 0;
      }
    }
    else if (*((unsigned char *)&this->__r_.__value_.__s + 23))
    {
      this->__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
    }
    int v8 = *((_DWORD *)a1 + 12);
    if (v8 >= *((_DWORD *)a1 + 10)) {
      int v8 = *((_DWORD *)a1 + 10);
    }
    if (v8 != 0x7FFFFFFF)
    {
      int v9 = v8 - *((_DWORD *)a1 + 6) + *((_DWORD *)a1 + 11) + *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
      BOOL v10 = v9 < (int)v6 || (int)v6 < 1;
      if (!v10 && v9 >= 1) {
        std::string::reserve(this, v6);
      }
    }
    while (1)
    {
      int v12 = (const std::string::value_type *)*a1;
      int64_t v13 = a1[1] - *a1;
      int v14 = v6 - v13;
      if ((int)v6 <= (int)v13) {
        break;
      }
      uint64_t v6 = (int)v13;
      if (v13)
      {
        std::string::append(this, v12, (int)v13);
        int v12 = (const std::string::value_type *)*a1;
      }
      *a1 = (unsigned __int8 *)&v12[v6];
      LODWORD(v6) = v14;
      if ((google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)a1) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v6 = (int)v6;
    std::string::append(this, v12, (int)v6);
  }
  *a1 += v6;
  return 1;
}

BOOL google::protobuf::internal::WireFormatLite::VerifyUtf8String(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  if (!a2)
  {
    int v25 = 0;
    goto LABEL_56;
  }
  uint64_t v6 = (unsigned int *)((char *)a1 + a2);
  BOOL v7 = a1;
  uint64_t v8 = a1 & 7;
  if ((a1 & 7) != 0 && a2 >= 1)
  {
    char v9 = (_BYTE)a1 + 1;
    BOOL v7 = a1;
    while ((*(char *)v7 & 0x80000000) == 0)
    {
      BOOL v7 = (unsigned int *)((char *)v7 + 1);
      uint64_t v8 = v9 & 7;
      if ((v9 & 7) != 0)
      {
        ++v9;
        if (v7 < v6) {
          continue;
        }
      }
      goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    if (!v8 && v7 < (unsigned int *)((char *)v6 - 7))
    {
      do
      {
        if (((v7[1] | *v7) & 0x80808080) != 0) {
          break;
        }
        v7 += 2;
      }
      while (v7 < (unsigned int *)((char *)v6 - 7));
    }
  }
  if (v7 < v6)
  {
    int64_t v10 = (char *)a1 + a2 - (char *)v7;
    while ((*(char *)v7 & 0x80000000) == 0)
    {
      BOOL v7 = (unsigned int *)((char *)v7 + 1);
      if (!--v10)
      {
        LODWORD(v7) = a1 + a2;
        break;
      }
    }
  }
  int v11 = v7 - a1;
  if (a2 == v7 - a1) {
    goto LABEL_55;
  }
  int v12 = (unsigned int *)((char *)a1 + v11);
  int64_t v13 = (unsigned int *)((char *)v12 + a2 - (uint64_t)v11);
  int v14 = (unsigned int *)((char *)v13 - 7);
  int v15 = (char *)a1 + a2;
  __int16 v16 = v12;
  while (1)
  {
    uint64_t v17 = v16 & 7;
    if ((v16 & 7) != 0 && v16 < v13)
    {
      char v18 = (_BYTE)v16 + 1;
      while (!google::protobuf::internal::utf8acceptnonsurrogates_fast[*(unsigned __int8 *)v16])
      {
        __int16 v16 = (unsigned int *)((char *)v16 + 1);
        uint64_t v17 = v18 & 7;
        if ((v18 & 7) != 0)
        {
          ++v18;
          if (v16 < v13) {
            continue;
          }
        }
        goto LABEL_25;
      }
LABEL_33:
      uint64_t v19 = v16;
      goto LABEL_34;
    }
LABEL_25:
    if (v17 || v16 >= v14) {
      goto LABEL_33;
    }
    uint64_t v19 = v16;
    while (1)
    {
      unint64_t v20 = v19[1];
      if ((((*v19 - 538976288) | (v20 - 538976288) | *v19 | v20) & 0x80808080) != 0)
      {
        if (google::protobuf::internal::utf8acceptnonsurrogates_fast[BYTE1(*v19)] | google::protobuf::internal::utf8acceptnonsurrogates_fast[*v19] | google::protobuf::internal::utf8acceptnonsurrogates_fast[BYTE2(*v19)] | google::protobuf::internal::utf8acceptnonsurrogates_fast[(unint64_t)*v19 >> 24]) {
          goto LABEL_34;
        }
        if (google::protobuf::internal::utf8acceptnonsurrogates_fast[BYTE1(v20)] | google::protobuf::internal::utf8acceptnonsurrogates_fast[v20] | google::protobuf::internal::utf8acceptnonsurrogates_fast[BYTE2(v20)] | google::protobuf::internal::utf8acceptnonsurrogates_fast[v20 >> 24]) {
          break;
        }
      }
      v19 += 2;
      if (v19 >= v14) {
        goto LABEL_34;
      }
    }
    ++v19;
LABEL_34:
    if (v19 >= v13) {
      break;
    }
    uint64_t v21 = v15 - (char *)v19;
    int v22 = (unsigned int *)((char *)v19 - 1);
    BOOL v23 = (char *)&google::protobuf::internal::utf8acceptnonsurrogates;
    __int16 v16 = v19;
    while (1)
    {
      uint64_t v24 = v23[*(unsigned __int8 *)v16];
      if (v24 > 0xEF) {
        break;
      }
      __int16 v16 = (unsigned int *)((char *)v16 + 1);
      BOOL v23 = (char *)&google::protobuf::internal::utf8acceptnonsurrogates + 256 * v24;
      int v22 = (unsigned int *)((char *)v22 + 1);
      if (!--v21) {
        goto LABEL_47;
      }
    }
    if (v23 - &google::protobuf::internal::utf8acceptnonsurrogates >= 0x100)
    {
      do
      {
        __int16 v16 = v22;
        if (v22 <= v12) {
          break;
        }
        int v22 = (unsigned int *)((char *)v22 - 1);
      }
      while ((*(unsigned char *)v16 & 0xC0) == 0x80);
    }
    if (v24 != 253)
    {
      int v32 = v16 - v12;
      goto LABEL_54;
    }
  }
  LODWORD(v13) = v19;
  BOOL v23 = (char *)&google::protobuf::internal::utf8acceptnonsurrogates;
LABEL_47:
  if (v23 - &google::protobuf::internal::utf8acceptnonsurrogates >= 0x100)
  {
    if (v19 > v6) {
      uint64_t v6 = v19;
    }
    int v26 = (unsigned int *)((char *)v6 - 1);
    do
    {
      int64_t v13 = v26;
      if (v26 <= v12) {
        break;
      }
      int v26 = (unsigned int *)((char *)v26 - 1);
    }
    while ((*(unsigned char *)v13 & 0xC0) == 0x80);
  }
  int v32 = v13 - v12;
LABEL_54:
  LODWORD(v7) = v7 + v32;
LABEL_55:
  int v25 = v7 - a1;
LABEL_56:
  if (v25 != a2)
  {
    BOOL v27 = "serializing";
    if (a3 != 1) {
      BOOL v27 = 0;
    }
    if (a3) {
      int v28 = v27;
    }
    else {
      int v28 = "parsing";
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_19EC86ACE);
    if (a4)
    {
      google::protobuf::StringPrintf(&v33, a4);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v33;
    }
    LODWORD(v33.__r_.__value_.__l.__data_) = 2;
    v33.__r_.__value_.__l.__size_ = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-int"
                                                            "ernal/deps/protobuf/src/google/protobuf/wire_format_lite.cc";
    LODWORD(v33.__r_.__value_.__r.__words[2]) = 629;
    memset(&v34, 0, sizeof(v34));
    std::string::append(&v34, "String field");
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(&v34, (const std::string::value_type *)p_p, size);
    std::string::append(&v34, " contains invalid ");
    std::string::append(&v34, "UTF-8 data when ");
    std::string::append(&v34, v28);
    std::string::append(&v34, " a protocol ");
    std::string::append(&v34, "buffer. Use the 'bytes' type if you intend to send raw ");
    std::string::append(&v34, "bytes. ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v33);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return v25 == a2;
}

void sub_19E5AFAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena()
{
}

void sub_19E5AFB84(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

CoreML::Specification::FeatureType *CoreML::Specification::FeatureType::FeatureType(CoreML::Specification::FeatureType *this)
{
  *(void *)this = &unk_1EF0CEAC0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 4) = 0;
  return this;
}

void sub_19E5AFC0C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

unint64_t *CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(CoreML::Specification::protobuf_FeatureTypes_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_FeatureTypes_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

uint64_t CoreML::Specification::FeatureType::MergePartialFromCodedStream(CoreML::Specification::FeatureType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
LABEL_1:
    int v5 = *(unsigned __int8 **)a2;
    unint64_t v6 = *((void *)a2 + 1);
    if (*(void *)a2 >= v6)
    {
      LODWORD(v_Block_object_dispose(&STACK[0x278], 8) = 0;
      goto LABEL_104;
    }
    BOOL v7 = v5 + 1;
    uint64_t v8 = *v5;
    if ((char)*v5 >= 1)
    {
      *(void *)a2 = v7;
      unint64_t v9 = v8 | 0x100000000;
      if ((v9 & 0x100000000) != 0) {
        goto LABEL_8;
      }
      goto LABEL_105;
    }
    if ((unint64_t)v7 < v6)
    {
      int v10 = *v7;
      if ((v8 & ~v10) >= 0x80) {
        break;
      }
    }
LABEL_104:
    unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
    unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v9 & 0x100000000) != 0) {
      goto LABEL_8;
    }
LABEL_105:
    if (v9) {
      BOOL v66 = (v9 & 7) == 4;
    }
    else {
      BOOL v66 = 1;
    }
    if (v66) {
      return 1;
    }
    if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0) {
      return 0;
    }
  }
  *(void *)a2 = v5 + 2;
  unint64_t v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
LABEL_8:
  switch(v9 >> 3)
  {
    case 1u:
      if (v9 != 10) {
        goto LABEL_105;
      }
      if (*((_DWORD *)this + 9) != 1)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
        operator new();
      }
      int v11 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v11 < 0)
      {
        int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v11;
        *(void *)a2 = v11 + 1;
      }
      unsigned int v35 = (CoreML::Specification::Int64FeatureType *)google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
      int v37 = *((_DWORD *)a2 + 13);
      BOOL v38 = __OFSUB__(v37--, 1);
      *((_DWORD *)a2 + 13) = v37;
      if (v37 < 0 != v38) {
        return 0;
      }
      int v39 = (int)v35;
      uint64_t result = CoreML::Specification::Int64FeatureType::MergePartialFromCodedStream(v35, (char **)a2, v36);
      if (result) {
        goto LABEL_80;
      }
      break;
    case 2u:
      if (v9 != 18) {
        goto LABEL_105;
      }
      if (*((_DWORD *)this + 9) != 2)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 2;
        operator new();
      }
      int v15 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v15 < 0)
      {
        int v16 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v16 < 0) {
          return 0;
        }
      }
      else
      {
        int v16 = *v15;
        *(void *)a2 = v15 + 1;
      }
      unsigned int v41 = (CoreML::Specification::DoubleFeatureType *)google::protobuf::io::CodedInputStream::PushLimit(a2, v16);
      int v43 = *((_DWORD *)a2 + 13);
      BOOL v38 = __OFSUB__(v43--, 1);
      *((_DWORD *)a2 + 13) = v43;
      if (v43 < 0 != v38) {
        return 0;
      }
      int v39 = (int)v41;
      uint64_t result = CoreML::Specification::DoubleFeatureType::MergePartialFromCodedStream(v41, (char **)a2, v42);
      if (result) {
        goto LABEL_80;
      }
      break;
    case 3u:
      if (v9 != 26) {
        goto LABEL_105;
      }
      if (*((_DWORD *)this + 9) != 3)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 3;
        operator new();
      }
      uint64_t v17 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v17 < 0)
      {
        int v18 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v18 < 0) {
          return 0;
        }
      }
      else
      {
        int v18 = *v17;
        *(void *)a2 = v17 + 1;
      }
      __int16 v44 = (CoreML::Specification::StringFeatureType *)google::protobuf::io::CodedInputStream::PushLimit(a2, v18);
      int v46 = *((_DWORD *)a2 + 13);
      BOOL v38 = __OFSUB__(v46--, 1);
      *((_DWORD *)a2 + 13) = v46;
      if (v46 < 0 != v38) {
        return 0;
      }
      int v39 = (int)v44;
      uint64_t result = CoreML::Specification::StringFeatureType::MergePartialFromCodedStream(v44, (char **)a2, v45);
      if (result)
      {
LABEL_80:
        uint64_t v47 = a2;
        int v48 = v39;
        goto LABEL_101;
      }
      break;
    case 4u:
      if (v9 != 34) {
        goto LABEL_105;
      }
      if (*((_DWORD *)this + 9) != 4)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 4;
        operator new();
      }
      uint64_t v19 = (CoreML::Specification::ImageFeatureType *)*((void *)this + 3);
      uint64_t v24 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v24 < 0)
      {
        int v25 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v25 < 0) {
          return 0;
        }
      }
      else
      {
        int v25 = *v24;
        *(void *)a2 = v24 + 1;
      }
      int v49 = google::protobuf::io::CodedInputStream::PushLimit(a2, v25);
      int v51 = *((_DWORD *)a2 + 13);
      BOOL v38 = __OFSUB__(v51--, 1);
      *((_DWORD *)a2 + 13) = v51;
      if (v51 < 0 != v38) {
        return 0;
      }
      int v52 = v49;
      uint64_t result = CoreML::Specification::ImageFeatureType::MergePartialFromCodedStream(v19, a2, v50);
      if (result) {
        goto LABEL_100;
      }
      break;
    case 5u:
      if (v9 != 42) {
        goto LABEL_105;
      }
      if (*((_DWORD *)this + 9) != 5)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 5;
        operator new();
      }
      unint64_t v20 = (CoreML::Specification::ArrayFeatureType *)*((void *)this + 3);
      int v26 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v26 < 0)
      {
        int v27 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v27 < 0) {
          return 0;
        }
      }
      else
      {
        int v27 = *v26;
        *(void *)a2 = v26 + 1;
      }
      int v53 = google::protobuf::io::CodedInputStream::PushLimit(a2, v27);
      int v55 = *((_DWORD *)a2 + 13);
      BOOL v38 = __OFSUB__(v55--, 1);
      *((_DWORD *)a2 + 13) = v55;
      if (v55 < 0 != v38) {
        return 0;
      }
      int v52 = v53;
      uint64_t result = CoreML::Specification::ArrayFeatureType::MergePartialFromCodedStream(v20, a2, v54);
      if (result) {
        goto LABEL_100;
      }
      break;
    case 6u:
      if (v9 != 50) {
        goto LABEL_105;
      }
      if (*((_DWORD *)this + 9) != 6)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 6;
        operator new();
      }
      uint64_t v21 = (CoreML::Specification::DictionaryFeatureType *)*((void *)this + 3);
      int v28 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v28 < 0)
      {
        int v29 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v29 < 0) {
          return 0;
        }
      }
      else
      {
        int v29 = *v28;
        *(void *)a2 = v28 + 1;
      }
      int v56 = google::protobuf::io::CodedInputStream::PushLimit(a2, v29);
      int v58 = *((_DWORD *)a2 + 13);
      BOOL v38 = __OFSUB__(v58--, 1);
      *((_DWORD *)a2 + 13) = v58;
      if (v58 < 0 != v38) {
        return 0;
      }
      int v52 = v56;
      uint64_t result = CoreML::Specification::DictionaryFeatureType::MergePartialFromCodedStream(v21, a2, v57);
      if (result) {
        goto LABEL_100;
      }
      break;
    case 7u:
      if (v9 != 58) {
        goto LABEL_105;
      }
      if (*((_DWORD *)this + 9) != 7)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 7;
        operator new();
      }
      int v22 = (CoreML::Specification::SequenceFeatureType *)*((void *)this + 3);
      BOOL v30 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v30 < 0)
      {
        int v31 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v31 < 0) {
          return 0;
        }
      }
      else
      {
        int v31 = *v30;
        *(void *)a2 = v30 + 1;
      }
      int v59 = google::protobuf::io::CodedInputStream::PushLimit(a2, v31);
      int v61 = *((_DWORD *)a2 + 13);
      BOOL v38 = __OFSUB__(v61--, 1);
      *((_DWORD *)a2 + 13) = v61;
      if (v61 < 0 != v38) {
        return 0;
      }
      int v52 = v59;
      uint64_t result = CoreML::Specification::SequenceFeatureType::MergePartialFromCodedStream(v22, a2, v60);
      if (result) {
        goto LABEL_100;
      }
      break;
    case 8u:
      if (v9 != 66) {
        goto LABEL_105;
      }
      if (*((_DWORD *)this + 9) != 8)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 8;
        operator new();
      }
      BOOL v23 = (CoreML::Specification::StateFeatureType *)*((void *)this + 3);
      int v32 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v32 < 0)
      {
        int v33 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v33 < 0) {
          return 0;
        }
      }
      else
      {
        int v33 = *v32;
        *(void *)a2 = v32 + 1;
      }
      int v62 = google::protobuf::io::CodedInputStream::PushLimit(a2, v33);
      int v64 = *((_DWORD *)a2 + 13);
      BOOL v38 = __OFSUB__(v64--, 1);
      *((_DWORD *)a2 + 13) = v64;
      if (v64 < 0 != v38) {
        return 0;
      }
      int v52 = v62;
      uint64_t result = CoreML::Specification::StateFeatureType::MergePartialFromCodedStream(v23, a2, v63);
      if (result)
      {
LABEL_100:
        uint64_t v47 = a2;
        int v48 = v52;
LABEL_101:
        if (google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v47, v48)) {
          goto LABEL_1;
        }
        return 0;
      }
      break;
    default:
      if (v9 >> 3 != 1000 || v9 != 64) {
        goto LABEL_105;
      }
      int64_t v13 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v13 < 0)
      {
        unint64_t Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
        if ((v34 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        unint64_t Varint64Fallback = *v13;
        *(void *)a2 = v13 + 1;
      }
      *((unsigned char *)this + 16) = Varint64Fallback != 0;
      goto LABEL_1;
  }
  return result;
}

void sub_19E5B03C0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

unint64_t google::protobuf::io::CodedInputStream::ReadTagFallback(google::protobuf::io::CodedInputStream *this, int a2)
{
  int v3 = *(unsigned __int8 **)this;
  char v4 = (char *)*((void *)this + 1);
  int v5 = v4 - *(void *)this;
  if (v5 <= 9)
  {
    if (v5 < 1)
    {
      if (!v5)
      {
        int v10 = *((_DWORD *)this + 11);
        int v11 = *((_DWORD *)this + 6);
        if ((v10 > 0 || v11 == *((_DWORD *)this + 10)) && v11 - v10 < *((_DWORD *)this + 12)) {
          goto LABEL_27;
        }
      }
    }
    else if ((*(v4 - 1) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    if (v3 != (unsigned __int8 *)v4) {
      goto LABEL_12;
    }
    if (google::protobuf::io::CodedInputStream::Refresh(this))
    {
      int v3 = *(unsigned __int8 **)this;
      char v4 = (char *)*((void *)this + 1);
LABEL_12:
      if (v3 >= (unsigned __int8 *)v4 || (char)*v3 < 0)
      {
        unint64_t result = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
        if ((v9 & 1) == 0) {
          return 0;
        }
        return result;
      }
      unint64_t result = *v3;
LABEL_15:
      *(void *)this = v3 + 1;
      return result;
    }
    int v12 = *((_DWORD *)this + 12);
    if (*((_DWORD *)this + 6) - *((_DWORD *)this + 11) >= v12)
    {
      unint64_t result = 0;
      BOOL v13 = *((_DWORD *)this + 10) == v12;
      goto LABEL_29;
    }
LABEL_27:
    unint64_t result = 0;
    BOOL v13 = 1;
LABEL_29:
    *((unsigned char *)this + 36) = v13;
    return result;
  }
LABEL_4:
  if (!a2)
  {
    unint64_t result = 0;
    goto LABEL_15;
  }
  uint64_t v6 = a2 + (v3[1] << 7) - 128;
  if ((char)v3[1] < 0)
  {
    uint64_t v6 = v6 + (v3[2] << 14) - 0x4000;
    if ((char)v3[2] < 0)
    {
      uint64_t v6 = v6 + (v3[3] << 21) - 0x200000;
      if ((char)v3[3] < 0)
      {
        int v14 = (char)v3[4];
        uint64_t v6 = (v6 + (v14 << 28) - 0x10000000);
        if (v14 < 0)
        {
          uint64_t v15 = 0;
          while ((char)v3[v15 + 5] < 0)
          {
            unint64_t result = 0;
            if (++v15 == 5) {
              return result;
            }
          }
          uint64_t v7 = (uint64_t)&v3[v15 + 6];
        }
        else
        {
          uint64_t v7 = (uint64_t)(v3 + 5);
        }
      }
      else
      {
        uint64_t v7 = (uint64_t)(v3 + 4);
      }
    }
    else
    {
      uint64_t v7 = (uint64_t)(v3 + 3);
    }
  }
  else
  {
    uint64_t v7 = (uint64_t)(v3 + 2);
  }
  *(void *)this = v7;
  return v6;
}

uint64_t CoreML::Specification::FeatureType::clear_Type(uint64_t this)
{
  uint64_t v1 = this;
  switch(*(_DWORD *)(this + 36))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      this = *(void *)(this + 24);
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

void CoreML::Specification::ArrayFeatureType::~ArrayFeatureType(CoreML::Specification::ArrayFeatureType *this)
{
  CoreML::Specification::ArrayFeatureType::~ArrayFeatureType(this);

  JUMPOUT(0x19F3C1920);
}

{
  void *v2;

  *(void *)this = &unk_1EF0D1618;
  if (*((_DWORD *)this + 15)) {
    CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility((uint64_t)this);
  }
  if (*((_DWORD *)this + 16)) {
    *((_DWORD *)this + 16) = 0;
  }
  int v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

CoreML::Specification::ArrayFeatureType *CoreML::Specification::ArrayFeatureType::ArrayFeatureType(CoreML::Specification::ArrayFeatureType *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EF0D1618;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::ArrayFeatureType *)&CoreML::Specification::_ArrayFeatureType_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 7) = 0;
  return this;
}

void sub_19E5B0718(_Unwind_Exception *a1)
{
  char v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ArrayFeatureType::MergePartialFromCodedStream(CoreML::Specification::ArrayFeatureType *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  int v5 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = *(unsigned __int8 **)a2;
        unint64_t v7 = *((void *)a2 + 1);
        if (*(void *)a2 >= v7)
        {
          LODWORD(v9) = 0;
LABEL_16:
          unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
          unint64_t v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
          if ((v10 & 0x100000000) == 0) {
            goto LABEL_9;
          }
          goto LABEL_17;
        }
        uint64_t v8 = v6 + 1;
        uint64_t v9 = *v6;
        if ((char)*v6 < 1)
        {
          if ((unint64_t)v8 < v7)
          {
            int v11 = *v8;
            if ((v9 & ~v11) >= 0x80)
            {
              *(void *)a2 = v6 + 2;
              unint64_t v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
              goto LABEL_17;
            }
          }
          goto LABEL_16;
        }
        *(void *)a2 = v8;
        unint64_t v10 = v9 | 0x100000000;
        if ((v10 & 0x100000000) == 0) {
          goto LABEL_9;
        }
LABEL_17:
        unsigned int v14 = v10 >> 3;
        if (v10 >> 3 > 0x1E) {
          break;
        }
        if (v14 == 1)
        {
          if (v10 == 8)
          {
            if ((google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(google::protobuf::internal::WireFormatLite::FieldType)3>(10, a2, (uint64_t)v5) & 1) == 0)return 0; {
          }
            }
          else
          {
            if (v10 != 10) {
              goto LABEL_9;
            }
            uint64_t v21 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v21 < 0)
            {
              int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (VarintSizeAsIntFallback < 0) {
                return 0;
              }
            }
            else
            {
              int VarintSizeAsIntFallback = *v21;
              *(void *)a2 = v21 + 1;
            }
            int v40 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
            while (1)
            {
              int v41 = *((_DWORD *)a2 + 10);
              uint64_t v42 = *((int *)a2 + 11);
              unint64_t v43 = *((void *)a2 + 1);
              int v44 = *((_DWORD *)a2 + 6);
              if (v41 == 0x7FFFFFFF) {
                break;
              }
              unsigned int v45 = *(char **)a2;
              if ((int)(v41 - v44 + v42 + v43 - *(void *)a2) < 1) {
                break;
              }
              if ((unint64_t)v45 >= v43 || *v45 < 0)
              {
                unint64_t Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
                if ((v48 & 1) == 0) {
                  return 0;
                }
                unint64_t v46 = Varint64Fallback;
              }
              else
              {
                unint64_t v46 = *v45;
                *(void *)a2 = v45 + 1;
              }
              signed int v49 = *((_DWORD *)this + 4);
              if (v49 == *((_DWORD *)this + 5))
              {
                google::protobuf::RepeatedField<double>::Reserve(v5, v49 + 1);
                signed int v49 = *v5;
              }
              uint64_t v50 = *((void *)this + 3);
              *((_DWORD *)this + 4) = v49 + 1;
              *(void *)(v50 + 8 * v49 + _Block_object_dispose(&STACK[0x278], 8) = v46;
            }
            *((_DWORD *)a2 + 10) = v40;
            uint64_t v51 = v43 + v42;
            *((void *)a2 + 1) = v43 + v42;
            int v52 = *((_DWORD *)a2 + 12);
            if (v52 >= v40) {
              int v52 = v40;
            }
            BOOL v34 = __OFSUB__(v44, v52);
            int v53 = v44 - v52;
            if ((v53 < 0) ^ v34 | (v53 == 0)) {
              int v53 = 0;
            }
            else {
              *((void *)a2 + 1) = v51 - v53;
            }
            *((_DWORD *)a2 + 11) = v53;
            *((unsigned char *)a2 + 36) = 0;
          }
        }
        else if (v14 == 2)
        {
          if (v10 != 16) {
            goto LABEL_9;
          }
          BOOL v23 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1))
          {
            int v24 = 0;
          }
          else
          {
            int v24 = *v23;
            if ((*v23 & 0x80000000) == 0)
            {
              *(void *)a2 = v23 + 1;
              goto LABEL_97;
            }
          }
          uint64_t Varint32Fallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v24);
          int v24 = Varint32Fallback;
          if (Varint32Fallback < 0) {
            return 0;
          }
LABEL_97:
          *((_DWORD *)this + 9) = v24;
        }
        else if (v14 == 21 && v10 == 170)
        {
          if (*((_DWORD *)this + 15) != 21)
          {
            CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility((uint64_t)this);
            *((_DWORD *)this + 15) = 21;
            operator new();
          }
          uint64_t v17 = (CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)*((void *)this + 5);
          int v27 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v27 < 0)
          {
            int v28 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v28 < 0) {
              return 0;
            }
          }
          else
          {
            int v28 = *v27;
            *(void *)a2 = v27 + 1;
          }
          int v31 = google::protobuf::io::CodedInputStream::PushLimit(a2, v28);
          int v33 = *((_DWORD *)a2 + 13);
          BOOL v34 = __OFSUB__(v33--, 1);
          *((_DWORD *)a2 + 13) = v33;
          if (v33 < 0 != v34) {
            return 0;
          }
          int v35 = v31;
          uint64_t result = CoreML::Specification::ArrayFeatureType_EnumeratedShapes::MergePartialFromCodedStream(v17, a2, v32);
          if (!result) {
            return result;
          }
LABEL_70:
          if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v35)) {
            return 0;
          }
        }
        else
        {
LABEL_9:
          if (v10) {
            BOOL v12 = (v10 & 7) == 4;
          }
          else {
            BOOL v12 = 1;
          }
          if (v12) {
            return 1;
          }
          if ((google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0)return 0; {
        }
          }
      }
      if (v10 >> 3 <= 0x32) {
        break;
      }
      if (v14 == 51)
      {
        if (v10 != 157) {
          goto LABEL_9;
        }
        *((_DWORD *)this + 16) = 0;
        unsigned int v56 = 0;
        int v25 = *(unsigned int **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) < 4)
        {
          uint64_t result = google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v56);
          if (!result) {
            return result;
          }
          unsigned int v26 = v56;
        }
        else
        {
          unsigned int v26 = *v25;
          *(void *)a2 = v25 + 1;
        }
        *((_DWORD *)this + 12) = v26;
        *((_DWORD *)this + 16) = 51;
      }
      else
      {
        if (v14 != 61 || v10 != 233) {
          goto LABEL_9;
        }
        *((_DWORD *)this + 16) = 0;
        unint64_t v57 = 0;
        int v18 = *(unint64_t **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) < 8)
        {
          uint64_t result = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v57);
          if (!result) {
            return result;
          }
          unint64_t v19 = v57;
        }
        else
        {
          unint64_t v19 = *v18;
          *(void *)a2 = v18 + 1;
        }
        *((void *)this + 6) = v19;
        *((_DWORD *)this + 16) = 61;
      }
    }
    if (v14 == 31) {
      break;
    }
    if (v14 != 41 || v10 != 72) {
      goto LABEL_9;
    }
    *((_DWORD *)this + 16) = 0;
    uint64_t v15 = *(char **)a2;
    if (*(void *)a2 >= *((void *)a2 + 1))
    {
      int v16 = 0;
    }
    else
    {
      int v16 = *v15;
      if ((*v15 & 0x80000000) == 0)
      {
        *(void *)a2 = v15 + 1;
        goto LABEL_92;
      }
    }
    uint64_t v54 = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v16);
    int v16 = v54;
    if (v54 < 0) {
      return 0;
    }
LABEL_92:
    *((_DWORD *)this + 12) = v16;
    *((_DWORD *)this + 16) = 41;
  }
  if (v10 != 250) {
    goto LABEL_9;
  }
  if (*((_DWORD *)this + 15) != 31)
  {
    CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility((uint64_t)this);
    *((_DWORD *)this + 15) = 31;
    operator new();
  }
  unint64_t v20 = (CoreML::Specification::ArrayFeatureType_ShapeRange *)*((void *)this + 5);
  int v29 = *(char **)a2;
  if (*(void *)a2 >= *((void *)a2 + 1) || *v29 < 0)
  {
    int v30 = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
    if (v30 < 0) {
      return 0;
    }
  }
  else
  {
    int v30 = *v29;
    *(void *)a2 = v29 + 1;
  }
  int v37 = google::protobuf::io::CodedInputStream::PushLimit(a2, v30);
  int v39 = *((_DWORD *)a2 + 13);
  BOOL v34 = __OFSUB__(v39--, 1);
  *((_DWORD *)a2 + 13) = v39;
  if (v39 < 0 == v34)
  {
    int v35 = v37;
    uint64_t result = CoreML::Specification::ArrayFeatureType_ShapeRange::MergePartialFromCodedStream(v20, a2, v38);
    if (!result) {
      return result;
    }
    goto LABEL_70;
  }
  return 0;
}

void sub_19E5B0CA8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::CodedInputStream::ReadVarint32Fallback(google::protobuf::io::CodedInputStream *this, int a2)
{
  unint64_t v3 = *(void *)this;
  unint64_t v2 = *((void *)this + 1);
  if ((int)(v2 - *(void *)this) <= 9 && (v2 <= v3 || *(char *)(v2 - 1) < 0))
  {
    uint64_t Varint64Fallback = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
    if ((v7 & 1) == 0) {
      return -1;
    }
  }
  else
  {
    unsigned int v4 = a2 + (*(unsigned __int8 *)(v3 + 1) << 7) - 128;
    if (*(char *)(v3 + 1) < 0)
    {
      unsigned int v4 = v4 + (*(unsigned __int8 *)(v3 + 2) << 14) - 0x4000;
      if (*(char *)(v3 + 2) < 0)
      {
        unsigned int v4 = v4 + (*(unsigned __int8 *)(v3 + 3) << 21) - 0x200000;
        if (*(char *)(v3 + 3) < 0)
        {
          int v8 = *(char *)(v3 + 4);
          unsigned int v4 = v4 + (v8 << 28) - 0x10000000;
          if (v8 < 0)
          {
            uint64_t v9 = 0;
            while (*(char *)(v3 + v9 + 5) < 0)
            {
              ++v9;
              uint64_t Varint64Fallback = -1;
              if (v9 == 5) {
                return Varint64Fallback;
              }
            }
            uint64_t v5 = v3 + v9 + 6;
          }
          else
          {
            uint64_t v5 = v3 + 5;
          }
        }
        else
        {
          uint64_t v5 = v3 + 4;
        }
      }
      else
      {
        uint64_t v5 = v3 + 3;
      }
    }
    else
    {
      uint64_t v5 = v3 + 2;
    }
    *(void *)this = v5;
    return v4;
  }
  return Varint64Fallback;
}

void google::protobuf::RepeatedField<double>::Reserve(unsigned int *a1, int a2)
{
  signed int v2 = a1[1];
  if (v2 < a2)
  {
    unsigned int v4 = (google::protobuf::Arena **)*((void *)a1 + 1);
    if (v4) {
      uint64_t v5 = *v4;
    }
    else {
      uint64_t v5 = 0;
    }
    int v6 = 2 * v2;
    if (v6 <= a2) {
      int v6 = a2;
    }
    if (v6 <= 4) {
      unsigned int v7 = 4;
    }
    else {
      unsigned int v7 = v6;
    }
    uint64_t v8 = 8 * v7;
    if (v5) {
      Aligned = google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x1E4FBA380], v8 + 8);
    }
    else {
      Aligned = operator new(v8 + 8);
    }
    *((void *)a1 + 1) = Aligned;
    void *Aligned = v5;
    a1[1] = v7;
    uint64_t v10 = *a1;
    if ((int)v10 >= 1) {
      memcpy(Aligned + 1, v4 + 1, 8 * v10);
    }
    if (v4 && !*v4)
    {
      operator delete(v4);
    }
  }
}

unsigned int *google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(google::protobuf::internal::RepeatedPtrFieldBase *this, int a2)
{
  int v2 = *((_DWORD *)this + 2);
  int v3 = *((_DWORD *)this + 3);
  int v4 = v2 + a2;
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  if (v3 < v2 + a2)
  {
    uint64_t v7 = *(void *)this;
    int v8 = 2 * v3;
    if (2 * v3 <= v4) {
      int v8 = v4;
    }
    if (v8 <= 4) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = v8;
    }
    uint64_t v10 = 8 * v9;
    if (v7) {
      Aligned = (unsigned int *)google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)this, MEMORY[0x1E4FBA380], v10 + 8);
    }
    else {
      Aligned = (unsigned int *)operator new(v10 + 8);
    }
    *((void *)this + 2) = Aligned;
    *((_DWORD *)this + 3) = v9;
    if (v5 && (uint64_t v12 = *v5, (int)v12 >= 1))
    {
      memcpy(Aligned + 2, v5 + 2, 8 * v12);
      Aligned = (unsigned int *)*((void *)this + 2);
      unsigned int *Aligned = *v5;
      if (!v7) {
        goto LABEL_15;
      }
    }
    else
    {
      unsigned int *Aligned = 0;
      if (!v7)
      {
LABEL_15:
        operator delete(v5);
        Aligned = (unsigned int *)*((void *)this + 2);
      }
    }
    int v2 = *((_DWORD *)this + 2);
    uint64_t v5 = Aligned;
  }
  return &v5[2 * v2 + 2];
}

void CoreML::Specification::ModelDescription::~ModelDescription(CoreML::Specification::ModelDescription *this)
{
  *(void *)this = &unk_1EF0D1C08;
  uint64_t v2 = *((void *)this + 17);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x19F3C1920](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 18);
  if ((long long *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x19F3C1920](v4, 0x1012C40EC159624);
  }
  uint64_t v6 = *((void *)this + 19);
  if ((long long *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    MEMORY[0x19F3C1920](v6, 0x1012C40EC159624);
  }
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    uint64_t v7 = *((void *)this + 20);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 14);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 11);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ModelDescription::~ModelDescription(this);

  JUMPOUT(0x19F3C1920);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    int v3 = v2 + 2;
    uint64_t v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3) {
          (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void CoreML::Specification::FeatureDescription::~FeatureDescription(CoreML::Specification::FeatureDescription *this)
{
  CoreML::Specification::FeatureDescription::~FeatureDescription(this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(void *)this = &unk_1EF0D2E70;
  uint64_t v2 = *((void *)this + 2);
  if ((long long *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x19F3C1920](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((long long *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x19F3C1920](v4, 0x1012C40EC159624);
  }
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    uint64_t v6 = *((void *)this + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t *google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 24) && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0) {
        operator delete(*(void **)v3);
      }
      MEMORY[0x19F3C1920](v3, 0x1032C402ED93987);
    }
  }
  *a1 = 0;
  return a1;
}

void CoreML::Specification::FeatureType::~FeatureType(CoreML::Specification::FeatureType *this)
{
  CoreML::Specification::FeatureType::~FeatureType(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0CEAC0;
  if (*((_DWORD *)this + 9)) {
    CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

unint64_t *google::protobuf::GoogleOnceInitImpl(unint64_t *result, uint64_t a2)
{
  unint64_t v2 = atomic_load(result);
  if (v2 != 2)
  {
    unint64_t v3 = result;
    do
      unint64_t v4 = __ldxr(result);
    while (!v4 && __stxr(1uLL, result));
    __dmb(0xBu);
    if (v4)
    {
      while (v4 == 1)
      {
        uint64_t result = (unint64_t *)sched_yield();
        unint64_t v4 = atomic_load(v3);
      }
    }
    else
    {
      uint64_t result = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      atomic_store(2uLL, v3);
    }
  }
  return result;
}

uint64_t google::protobuf::internal::FunctionClosure0::Run(uint64_t (**this)(void))
{
  int v2 = *((unsigned __int8 *)this + 16);
  uint64_t result = this[1]();
  if (this && v2)
  {
    unint64_t v4 = (uint64_t (*)(uint64_t (**)(void)))*((void *)*this + 1);
    return v4(this);
  }
  return result;
}

void CoreML::Specification::SizeRange::~SizeRange(CoreML::Specification::SizeRange *this)
{
  *(void *)this = &unk_1EF0DAEB0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0DAEB0;
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 60);
  if (v2 == 31 || v2 == 21)
  {
    this = *(void *)(this + 40);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 60) = 0;
  return this;
}

CoreML::Specification::Metadata *CoreML::Specification::Metadata::Metadata(CoreML::Specification::Metadata *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EF0DABB8;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x278], 8) = 0;
  int v2 = google::protobuf::Map<std::string,std::string>::Init((uint64_t)this + 24);
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x278], 8) = 0;
  if (this != (CoreML::Specification::Metadata *)&CoreML::Specification::_Metadata_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults((CoreML::Specification::protobuf_Model_2eproto *)v2);
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + _Block_object_dispose(&STACK[0x278], 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 20) = 0;
  return this;
}

void sub_19E5B1698(_Unwind_Exception *a1)
{
  google::protobuf::Map<std::string,std::string>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Map<std::string,std::string>::Init(uint64_t a1)
{
  int v2 = *(google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::InnerMap(Aligned, v2);
  uint64_t result = google::protobuf::Arena::AllocateAligned(v2, 0, 24);
  *uint64_t result = (google::protobuf::Arena *)Aligned;
  result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<google::protobuf::Map<std::string,std::string>::InnerMap>;
  uint64_t v5 = (unint64_t *)((char *)v2 + 32);
  do
    unint64_t v6 = __ldxr(v5);
  while (__stxr((unint64_t)result, v5));
  result[2] = (google::protobuf::Arena *)v6;
  *(void *)(a1 + 16) = Aligned;
  return result;
}

void sub_19E5B176C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Metadata::MergePartialFromCodedStream(CoreML::Specification::Metadata *this, google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unint64_t v4 = (google::protobuf::Arena **)((char *)this + 16);
  uint64_t v5 = (void *)((char *)this + 24);
  uint64_t v50 = (std::string **)((char *)this + 64);
  uint64_t v51 = (std::string **)((char *)this + 72);
  unint64_t v6 = (std::string **)((char *)this + 56);
  uint64_t v7 = (std::string **)((char *)this + 48);
  while (1)
  {
    while (1)
    {
      int v8 = *(unsigned __int8 **)a2;
      unint64_t v9 = *((void *)a2 + 1);
      if (*(void *)a2 < v9) {
        break;
      }
      LODWORD(v11) = 0;
LABEL_116:
      unsigned int TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v11);
      unint64_t v12 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v12 & 0x100000000) == 0) {
        goto LABEL_117;
      }
LABEL_9:
      switch(v12 >> 3)
      {
        case 1u:
          if (v12 != 10) {
            goto LABEL_117;
          }
          if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v7)) {
            return 0;
          }
          unsigned int v14 = *v7;
          if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
          {
            unsigned int v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
            std::string::size_type size = (*v7)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
          }
          unint64_t v43 = "CoreML.Specification.Metadata.shortDescription";
          goto LABEL_97;
        case 2u:
          if (v12 != 18) {
            goto LABEL_117;
          }
          if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v6)) {
            return 0;
          }
          unsigned int v14 = *v6;
          if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
          {
            unsigned int v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
            std::string::size_type size = (*v6)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
          }
          unint64_t v43 = "CoreML.Specification.Metadata.versionString";
          goto LABEL_97;
        case 3u:
          if (v12 != 26) {
            goto LABEL_117;
          }
          if (*v50 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v50)) {
            return 0;
          }
          unsigned int v14 = *v50;
          if (SHIBYTE((*v50)->__r_.__value_.__r.__words[2]) < 0)
          {
            unsigned int v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
            std::string::size_type size = (*v50)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v50)->__r_.__value_.__r.__words[2]);
          }
          unint64_t v43 = "CoreML.Specification.Metadata.author";
          goto LABEL_97;
        case 4u:
          if (v12 != 34) {
            goto LABEL_117;
          }
          if (*v51 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, *v51)) {
            return 0;
          }
          unsigned int v14 = *v51;
          if (SHIBYTE((*v51)->__r_.__value_.__r.__words[2]) < 0)
          {
            unsigned int v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
            std::string::size_type size = (*v51)->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(size) = HIBYTE((*v51)->__r_.__value_.__r.__words[2]);
          }
          unint64_t v43 = "CoreML.Specification.Metadata.license";
LABEL_97:
          if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String((unsigned int *)v14, size, 0, (uint64_t)v43)) {
            return 0;
          }
          continue;
        default:
          if (v12 >> 3 != 100 || v12 != 34) {
            goto LABEL_117;
          }
          int v52 = v4;
          int v53 = v5;
          memset(&__p, 0, sizeof(__p));
          unsigned int v56 = 0;
          int v16 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v16 < 0)
          {
            int v18 = v5;
            unint64_t v19 = v4;
            int VarintSizeAsIntFallback = google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0) {
              goto LABEL_111;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v16;
            *(void *)a2 = v16 + 1;
          }
          int v20 = google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
          int v21 = *((_DWORD *)a2 + 13);
          BOOL v22 = __OFSUB__(v21--, 1);
          *((_DWORD *)a2 + 13) = v21;
          if (v21 < 0 != v22)
          {
            int v18 = v5;
            unint64_t v19 = v4;
            goto LABEL_111;
          }
          int v23 = v20;
          int v18 = v5;
          unint64_t v19 = v4;
          int v24 = *(unsigned char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v24 != 10)
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            memset(&__p, 0, sizeof(__p));
LABEL_69:
            unsigned int v36 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*v52);
            if (v56 != v36)
            {
              if (v56) {
                (*((void (**)(void))*v56 + 1))();
              }
              unsigned int v56 = v36;
            }
            int v37 = (long long *)v36[2];
            *((_DWORD *)v36 + 10) |= 1u;
            if (v37 == &google::protobuf::internal::fixed_address_empty_string) {
              google::protobuf::internal::ArenaStringPtr::CreateInstance();
            }
            std::string::operator=((std::string *)v37, &__p);
            int v34 = (*((uint64_t (**)(google::protobuf::Arena **, google::protobuf::io::CodedInputStream *))*v56
                   + 11))(v56, a2);
            if (v34) {
              __n128 v38 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::UseKeyAndValueFromEntry((uint64_t)&v52);
            }
            if ((*((uint64_t (**)(google::protobuf::Arena **, __n128))*v56 + 5))(v56, v38)) {
              goto LABEL_78;
            }
            goto LABEL_64;
          }
          *(void *)a2 = v24 + 1;
          if (!google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, &__p)) {
            goto LABEL_111;
          }
          if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) < 1) {
            goto LABEL_69;
          }
          if (**(unsigned char **)a2 != 18) {
            goto LABEL_69;
          }
          uint64_t v25 = *(void *)v53[2];
          int v55 = (std::string *)google::protobuf::Map<std::string,std::string>::operator[]((uint64_t)v53, (uint64_t)&__p);
          if (v25 == *(void *)v53[2]) {
            goto LABEL_69;
          }
          google::protobuf::io::CodedInputStream::Skip(a2, 1u);
          if ((google::protobuf::internal::WireFormatLite::ReadBytes((unsigned __int8 **)a2, v55) & 1) == 0)
          {
            google::protobuf::Map<std::string,std::string>::erase(v53, (unsigned __int8 *)&__p);
LABEL_111:
            BOOL v45 = 0;
            int v46 = 6;
            goto LABEL_103;
          }
          if (*(void *)a2 == *((void *)a2 + 1)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + _Block_object_dispose(&STACK[0x278], 8) = 0;
            *((unsigned char *)a2 + 36) = 1;
            goto LABEL_79;
          }
          unsigned int v26 = google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*v52);
          if (v56 != v26)
          {
            if (v56) {
              (*((void (**)(void))*v56 + 1))();
            }
            unsigned int v56 = v26;
          }
          int v27 = v55;
          int v28 = v26[3];
          *((_DWORD *)v26 + 10) |= 2u;
          if (v28 == (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstance();
          }
          if (*((char *)v28 + 23) < 0)
          {
            int v29 = v27;
            operator delete(*(void **)v28);
            int v27 = v29;
          }
          long long v30 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          *((void *)v28 + 2) = *((void *)&v27->__r_.__value_.__l + 2);
          *(_OWORD *)int v28 = v30;
          *((unsigned char *)&v27->__r_.__value_.__s + 23) = 0;
          v27->__r_.__value_.__s.__data_[0] = 0;
          google::protobuf::Map<std::string,std::string>::erase(v53, (unsigned __int8 *)&__p);
          int v31 = v56;
          *((_DWORD *)v56 + 10) |= 1u;
          unsigned int v32 = v31[2];
          if (v32 == (google::protobuf::Arena *)&google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstance();
          }
          if (*((char *)v32 + 23) < 0) {
            operator delete(*(void **)v32);
          }
          long long v33 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *((void *)v32 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)unsigned int v32 = v33;
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          int v34 = (*((uint64_t (**)(google::protobuf::Arena **, google::protobuf::io::CodedInputStream *))*v56
                 + 11))(v56, a2);
          if (v34) {
            __n128 v35 = google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::UseKeyAndValueFromEntry((uint64_t)&v52);
          }
          if ((*((uint64_t (**)(google::protobuf::Arena **, __n128))*v56 + 5))(v56, v35))
          {
LABEL_78:
            unsigned int v56 = 0;
            if ((v34 & 1) == 0)
            {
              BOOL v45 = 0;
              int v46 = 6;
              goto LABEL_105;
            }
            goto LABEL_79;
          }
LABEL_64:
          if (!v34) {
            goto LABEL_111;
          }
LABEL_79:
          if (!google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v23)) {
            goto LABEL_111;
          }
          int v39 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? (unsigned int *)&__p
              : (unsigned int *)__p.__r_.__value_.__r.__words[0];
          int v40 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? HIBYTE(__p.__r_.__value_.__r.__words[2])
              : LODWORD(__p.__r_.__value_.__r.__words[1]);
          if (!google::protobuf::internal::WireFormatLite::VerifyUtf8String(v39, v40, 0, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.key"))goto LABEL_111; {
          int v41 = (unsigned int *)v55;
          }
          if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0)
          {
            int v41 = (unsigned int *)v55->__r_.__value_.__r.__words[0];
            std::string::size_type v42 = v55->__r_.__value_.__l.__size_;
          }
          else
          {
            LODWORD(v42) = HIBYTE(v55->__r_.__value_.__r.__words[2]);
          }
          BOOL v44 = google::protobuf::internal::WireFormatLite::VerifyUtf8String(v41, v42, 0, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.value");
          BOOL v45 = v44;
          if (v44) {
            int v46 = 0;
          }
          else {
            int v46 = 6;
          }
LABEL_103:
          if (v56) {
            (*((void (**)(google::protobuf::Arena **))*v56 + 1))(v56);
          }
LABEL_105:
          unint64_t v4 = v19;
          uint64_t v5 = v18;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (!v45 && v46) {
            return 0;
          }
          break;
      }
    }
    uint64_t v10 = v8 + 1;
    uint64_t v11 = *v8;
    if ((char)*v8 < 1)
    {
      if ((unint64_t)v10 < v9)
      {
        int v13 = *v10;
        if ((v11 & ~v13) >= 0x80)
        {
          *(void *)a2 = v8 + 2;
          unint64_t v12 = (v11 + (v13 << 7) - 128) | 0x100000000;
          goto LABEL_9;
        }
      }
      goto LABEL_116;
    }
    *(void *)a2 = v10;
    unint64_t v12 = v11 | 0x100000000;
    if ((v12 & 0x100000000) != 0) {
      goto LABEL_9;
    }
LABEL_117:
    if (!v12 || (v12 & 7) == 4) {
      return 1;
    }
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v12, a3))return 0; {
  }
    }
}

void sub_19E5B1FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::protobuf::internal::MapEntryImpl<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<google::protobuf::internal::MapEntryLite<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::~Parser((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::CodedInputStream::Skip(google::protobuf::io::CodedInputStream *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *((void *)this + 1) - *(void *)this;
  BOOL v5 = __OFSUB__(a2, v4);
  int v6 = a2 - v4;
  if ((v6 < 0) ^ v5 | (v6 == 0))
  {
    *(void *)this = v3 + a2;
    return 1;
  }
  if (*((int *)this + 11) >= 1)
  {
    uint64_t v7 = 0;
    *(void *)this = v3 + (int)v4;
    return v7;
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  int v8 = *((_DWORD *)this + 10);
  if (*((_DWORD *)this + 12) < v8) {
    int v8 = *((_DWORD *)this + 12);
  }
  int v9 = *((_DWORD *)this + 6);
  uint64_t v10 = (v8 - v9);
  if ((int)v10 < v6)
  {
    if ((int)v10 >= 1)
    {
      *((_DWORD *)this + 6) = v8;
      (*(void (**)(void, uint64_t))(**((void **)this + 2) + 32))(*((void *)this + 2), v10);
    }
    return 0;
  }
  *((_DWORD *)this + 6) = v9 + v6;
  unint64_t v12 = *(uint64_t (**)(void))(**((void **)this + 2) + 32);

  return v12();
}

void CoreML::Specification::ArrayFeatureType_ShapeRange::~ArrayFeatureType_ShapeRange(CoreML::Specification::ArrayFeatureType_ShapeRange *this)
{
  CoreML::Specification::ArrayFeatureType_ShapeRange::~ArrayFeatureType_ShapeRange(this);

  JUMPOUT(0x19F3C1920);
}

{
  *(void *)this = &unk_1EF0D7648;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)this + 2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

CoreML::Specification::ArrayFeatureType_ShapeRange *CoreML::Specification::ArrayFeatureType_ShapeRange::ArrayFeatureType_ShapeRange(CoreML::Specification::ArrayFeatureType_ShapeRange *this)
{
  *(void *)this = &unk_1EF0D7648;
  *(_OWORD *)((char *)this + _Block_object_dispose(&STACK[0x278], 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::ArrayFeatureType_ShapeRange *)&CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_19E5B2200(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::InitShutdownFunctions(google::protobuf::internal *this)
{
}

void sub_19E5B22AC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::InitEmptyString(google::protobuf::internal *this, void (*a2)(void))
{
  google::protobuf::internal::fixed_address_empty_string = 0uLL;
  qword_1EB4E20F0 = 0;
  byte_1EB4E20F8 = 1;
  return google::protobuf::internal::OnShutdown((google::protobuf::internal *)google::protobuf::internal::DeleteEmptyString, a2);
}

double CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_ClassConfidenceThresholding_default_instance_ = (uint64_t)&unk_1EF0D76E0;
  double result = 0.0;
  unk_1EB4DD178 = 0u;
  *(_OWORD *)&dword_1EB4DD188 = 0u;
  dword_1EB4DD198 = 0;
  byte_1EB4DD1A0 = 1;
  return result;
}

unint64_t *CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(CoreML::Specification::protobuf_DataStructures_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_DataStructures_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

double CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_ItemSimilarityRecommender_ConnectedItem_default_instance_ = (uint64_t)&unk_1EF0D92C8;
  *(void *)algn_1EB4DD2A8 = 0;
  qword_1EB4DD2B0 = 0;
  unk_1EB4DD2B8 = 0;
  dword_1EB4DD2C0 = 0;
  byte_1EB4DD2C8 = 1;
  CoreML::Specification::_ItemSimilarityRecommender_SimilarItems_default_instance_ = (uint64_t)&unk_1EF0D9198;
  double result = 0.0;
  unk_1EB4DD260 = 0u;
  unk_1EB4DD270 = 0u;
  unk_1EB4DD280 = 0u;
  dword_1EB4DD290 = 0;
  byte_1EB4DD298 = 1;
  CoreML::Specification::_ItemSimilarityRecommender_default_instance_ = (uint64_t)&unk_1EF0D69D0;
  *(_OWORD *)algn_1EB4E12E0 = 0u;
  *(_OWORD *)&algn_1EB4E12E0[16] = 0u;
  qword_1EB4E1300 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB4E1308 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E1310 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB4E1318 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E1320 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB4E1328 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1EB4E1340 = 0;
  byte_1EB4E1348 = 1;
  qword_1EB4E1330 = (uint64_t)&CoreML::Specification::_StringVector_default_instance_;
  unk_1EB4E1338 = &CoreML::Specification::_Int64Vector_default_instance_;
  return result;
}

double CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::TableStruct *this)
{
  google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_ = (uint64_t)&unk_1EF0D86E8;
  *(void *)algn_1EB4E1D08 = 0;
  qword_1EB4E1D10 = 0;
  unk_1EB4E1D18 = 0;
  dword_1EB4E1D20 = 0;
  byte_1EB4E1D28 = 1;
  CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_ = (uint64_t)&unk_1EF0D93F8;
  unk_1EB4DCFE0 = 0;
  unk_1EB4DCFF0 = 0;
  byte_1EB4DCFF8 = 1;
  CoreML::Specification::_BayesianProbitRegressor_FeatureWeight_default_instance_ = (uint64_t)&unk_1EF0D8FD0;
  double result = 0.0;
  unk_1EB4DD228 = 0u;
  unk_1EB4DD238 = 0u;
  qword_1EB4DD248 = 0;
  byte_1EB4DD250 = 1;
  CoreML::Specification::_BayesianProbitRegressor_default_instance_ = (uint64_t)&unk_1EF0D5B90;
  *(_OWORD *)&dword_1EB4E0C70 = 0u;
  unk_1EB4E0C60 = 0u;
  qword_1EB4E0C80 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E0C88 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E0C90 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E0C98 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E0CA0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E0CA8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E0CB0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E0CB8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  byte_1EB4E0CD0 = 1;
  qword_1EB4DCFE8 = (uint64_t)&CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_;
  qword_1EB4E0CC0 = (uint64_t)&CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_;
  *(void *)&dword_1EB4E0CC8 = 0;
  return result;
}

unint64_t *CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  double result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_NonMaximumSuppression_PickTop_default_instance_ = (uint64_t)&unk_1EF0D8060;
  qword_1EB4E1B08 = 0;
  byte_1EB4E1B10 = 0;
  dword_1EB4E1B14 = 0;
  byte_1EB4E1B18 = 1;
  CoreML::Specification::_NonMaximumSuppression_default_instance_ = (uint64_t)&unk_1EF0D4E80;
  qword_1EB4E06B0 = 0;
  qword_1EB4E06B8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E06C0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E06C8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E06D0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E06D8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E06E0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  xmmword_1EB4E06E8 = 0uLL;
  dword_1EB4E0710 = 0;
  qword_1EB4E0708 = 0;
  byte_1EB4E0718 = 1;
  return result;
}

unint64_t *CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::TableStruct *this)
{
  double result = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_ArrayFeatureExtractor_default_instance_ = (uint64_t)&unk_1EF0D4890;
  qword_1EB4E04A0 = 0;
  qword_1EB4E04A8 = 0;
  qword_1EB4E04B0 = 0;
  dword_1EB4E04BC = 0;
  byte_1EB4E04C0 = 1;
  return result;
}

unint64_t *CoreML::Specification::protobuf_CategoricalMapping_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_CategoricalMapping_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  double result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_CategoricalMapping_default_instance_ = (uint64_t)&unk_1EF0D2DD8;
  *(void *)algn_1EB4DF6E8 = 0;
  dword_1EB4DF708 = 0;
  qword_1EB4DF700 = 0;
  byte_1EB4DF710 = 1;
  return result;
}

double CoreML::Specification::protobuf_FeatureVectorizer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_FeatureVectorizer_2eproto::TableStruct *this)
{
  google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_FeatureVectorizer_InputColumn_default_instance_ = (uint64_t)&unk_1EF0D7E98;
  unk_1EB4DCFB0 = 0;
  qword_1EB4DCFB8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB4DCFC0 = 0;
  dword_1EB4DCFC8 = 0;
  byte_1EB4DCFD0 = 1;
  CoreML::Specification::_FeatureVectorizer_default_instance_ = (uint64_t)&unk_1EF0D2620;
  double result = 0.0;
  unk_1EB4DF4D8 = 0u;
  *(_OWORD *)&dword_1EB4DF4E8 = 0u;
  dword_1EB4DF4F8 = 0;
  byte_1EB4DF500 = 1;
  return result;
}

unint64_t *CoreML::Specification::protobuf_DictVectorizer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_DictVectorizer_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  double result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_DictVectorizer_default_instance_ = (uint64_t)&unk_1EF0D01E8;
  *(void *)algn_1EB4DE8F8 = 0;
  qword_1EB4DE908 = 0;
  byte_1EB4DE910 = 1;
  return result;
}

void CoreML::Specification::protobuf_DataStructures_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_DataStructures_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
  qword_1EB4E1518 = 0;
  unk_1EB4E1520 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E1528 = 0;
  unk_1EB4E1530 = 0;
  dword_1EB4E1538 = 0;
  CoreML::Specification::_StringToInt64Map_MapEntry_default_instance_ = (uint64_t)&unk_1EF0DC7E0;
  byte_1EB4E1540 = 1;
  CoreML::Specification::StringToInt64Map::StringToInt64Map((CoreML::Specification::StringToInt64Map *)&CoreML::Specification::_StringToInt64Map_default_instance_);
}

unint64_t *CoreML::Specification::protobuf_OneHotEncoder_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_OneHotEncoder_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  double result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  qword_1EB4DE820 = 0;
  qword_1EB4DE808 = 0;
  *(void *)&byte_1EB4DE810 = 0;
  CoreML::Specification::_OneHotEncoder_default_instance_ = (uint64_t)&unk_1EF0CFE58;
  byte_1EB4DE828 = 1;
  return result;
}

double CoreML::Specification::protobuf_GLMClassifier_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_GLMClassifier_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_GLMClassifier_DoubleArray_default_instance_ = (uint64_t)&unk_1EF0D6938;
  *(void *)algn_1EB4DD148 = 0;
  qword_1EB4DD150 = 0;
  unk_1EB4DD158 = 0;
  dword_1EB4DD164 = 0;
  byte_1EB4DD168 = 1;
  CoreML::Specification::_GLMClassifier_default_instance_ = (uint64_t)&unk_1EF0CFD28;
  double result = 0.0;
  *(_OWORD *)&qword_1EB4DE738 = 0u;
  *(_OWORD *)&dword_1EB4DE748 = 0u;
  *(_OWORD *)&dword_1EB4DE758 = 0u;
  unk_1EB4DE76C = 0;
  qword_1EB4DE780 = 0;
  byte_1EB4DE788 = 1;
  return result;
}

double CoreML::Specification::protobuf_TreeEnsemble_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_TreeEnsemble_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_TreeEnsembleParameters_TreeNode_EvaluationInfo_default_instance_ = (uint64_t)&unk_1EF0D9490;
  *(void *)algn_1EB4DD2D8 = 0;
  qword_1EB4DD2E0 = 0;
  unk_1EB4DD2E8 = 0;
  dword_1EB4DD2F0 = 0;
  byte_1EB4DD2F8 = 1;
  CoreML::Specification::_TreeEnsembleParameters_TreeNode_default_instance_ = (uint64_t)&unk_1EF0D8650;
  double result = 0.0;
  unk_1EB4DD1B0 = 0u;
  unk_1EB4DD1C0 = 0u;
  unk_1EB4DD1D0 = 0u;
  unk_1EB4DD1E0 = 0u;
  unk_1EB4DD1F0 = 0u;
  unk_1EB4DD200 = 0u;
  dword_1EB4DD210 = 0;
  byte_1EB4DD218 = 1;
  CoreML::Specification::_TreeEnsembleParameters_default_instance_ = (uint64_t)&unk_1EF0D5AF8;
  *(_OWORD *)algn_1EB4E0C08 = 0u;
  *(_OWORD *)&algn_1EB4E0C08[16] = 0u;
  *(_OWORD *)&algn_1EB4E0C08[32] = 0u;
  qword_1EB4E0C40 = 0;
  dword_1EB4E0C48 = 0;
  byte_1EB4E0C50 = 1;
  qword_1EB4E0BE0 = 0;
  dword_1EB4E0BD0 = 0;
  CoreML::Specification::_TreeEnsembleClassifier_default_instance_ = (uint64_t)&unk_1EF0D5A60;
  unk_1EB4E0BC0 = 0;
  byte_1EB4E0BE8 = 1;
  CoreML::Specification::_TreeEnsembleRegressor_default_instance_ = (uint64_t)&unk_1EF0D50E0;
  unk_1EB4E07E0 = 0;
  byte_1EB4E07F8 = 1;
  qword_1EB4E0BC8 = (uint64_t)&CoreML::Specification::_TreeEnsembleParameters_default_instance_;
  qword_1EB4E07E8 = (uint64_t)&CoreML::Specification::_TreeEnsembleParameters_default_instance_;
  unk_1EB4E07F0 = 0;
  return result;
}

double CoreML::Specification::protobuf_GLMRegressor_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_GLMRegressor_2eproto::TableStruct *this)
{
  google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_GLMRegressor_DoubleArray_default_instance_ = (uint64_t)&unk_1EF0D6478;
  *(void *)algn_1EB4DD118 = 0;
  qword_1EB4DD120 = 0;
  unk_1EB4DD128 = 0;
  dword_1EB4DD134 = 0;
  byte_1EB4DD138 = 1;
  CoreML::Specification::_GLMRegressor_default_instance_ = (uint64_t)&unk_1EF0CF608;
  double result = 0.0;
  *(_OWORD *)&qword_1EB4DE530 = 0u;
  *(_OWORD *)&dword_1EB4DE540 = 0u;
  *(_OWORD *)&dword_1EB4DE550 = 0u;
  dword_1EB4DE564 = 0;
  unk_1EB4DE568 = 0;
  byte_1EB4DE570 = 1;
  return result;
}

double CoreML::Specification::protobuf_FeatureTypes_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_FeatureTypes_2eproto::TableStruct *this)
{
  google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_Int64FeatureType_default_instance_ = (uint64_t)&unk_1EF0D19A8;
  qword_1EB4DF078 = 0;
  dword_1EB4DF080 = 0;
  byte_1EB4DF088 = 1;
  CoreML::Specification::_DoubleFeatureType_default_instance_ = (uint64_t)&unk_1EF0D2588;
  qword_1EB4DF4B8 = 0;
  dword_1EB4DF4C0 = 0;
  byte_1EB4DF4C8 = 1;
  CoreML::Specification::_StringFeatureType_default_instance_ = (uint64_t)&unk_1EF0D29B0;
  qword_1EB4DF5E0 = 0;
  dword_1EB4DF5E8 = 0;
  byte_1EB4DF5F0 = 1;
  CoreML::Specification::_SizeRange_default_instance_ = (uint64_t)&unk_1EF0DAEB0;
  *(void *)algn_1EB4DE268 = 0;
  qword_1EB4DE270 = 0;
  unk_1EB4DE278 = 0;
  dword_1EB4DE280 = 0;
  byte_1EB4DE288 = 1;
  CoreML::Specification::_ImageFeatureType_ImageSize_default_instance_ = (uint64_t)&unk_1EF0D7188;
  unk_1EB4DCEF0 = 0;
  dword_1EB4DCF08 = 0;
  qword_1EB4DCEF8 = 0;
  unk_1EB4DCF00 = 0;
  byte_1EB4DCF10 = 1;
  CoreML::Specification::_ImageFeatureType_EnumeratedImageSizes_default_instance_ = (uint64_t)&unk_1EF0D9068;
  unk_1EB4E1FF8 = 0u;
  *(_OWORD *)&dword_1EB4E2008 = 0u;
  dword_1EB4E2018 = 0;
  byte_1EB4E2020 = 1;
  dword_1EB4E1CC0 = 0;
  CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_ = (uint64_t)&unk_1EF0D8520;
  *(void *)algn_1EB4E1CA8 = 0;
  byte_1EB4E1CC8 = 1;
  double result = 0.0;
  qword_1EB4DF050 = 0;
  CoreML::Specification::_ImageFeatureType_default_instance_ = (uint64_t)&unk_1EF0D1910;
  *(void *)algn_1EB4DF028 = 0;
  dword_1EB4DF040 = 0;
  qword_1EB4DF030 = 0;
  qword_1EB4DF038 = 0;
  byte_1EB4DF058 = 1;
  CoreML::Specification::_ArrayFeatureType_Shape_default_instance_ = (uint64_t)&unk_1EF0D5178;
  *(void *)algn_1EB4DD0B8 = 0;
  qword_1EB4DD0C0 = 0;
  unk_1EB4DD0C8 = 0;
  dword_1EB4DD0D4 = 0;
  byte_1EB4DD0D8 = 1;
  CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_ = (uint64_t)&unk_1EF0D8C40;
  dword_1EB4E1EB0 = 0;
  *(_OWORD *)&dword_1EB4E1EA0 = 0u;
  *(_OWORD *)algn_1EB4E1E90 = 0u;
  byte_1EB4E1EB8 = 1;
  CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_ = (uint64_t)&unk_1EF0D7648;
  dword_1EB4E17B8 = 0;
  *(_OWORD *)&dword_1EB4E17A8 = 0u;
  unk_1EB4E1798 = 0u;
  byte_1EB4E17C0 = 1;
  CoreML::Specification::_ArrayFeatureType_default_instance_ = (uint64_t)&unk_1EF0D1618;
  *(void *)algn_1EB4DEF38 = 0;
  qword_1EB4DEF40 = 0;
  qword_1EB4DEF48 = 0;
  dword_1EB4DEF54 = 0;
  dword_1EB4DEF70 = 0;
  qword_1EB4DEF68 = 0;
  byte_1EB4DEF78 = 1;
  CoreML::Specification::_DictionaryFeatureType_default_instance_ = (uint64_t)&unk_1EF0D49C0;
  unk_1EB4E0520 = 0;
  qword_1EB4E0530 = 0;
  byte_1EB4E0538 = 1;
  qword_1EB4E0138 = 0;
  CoreML::Specification::_SequenceFeatureType_default_instance_ = (uint64_t)&unk_1EF0D3DE0;
  unk_1EB4E0120 = 0;
  byte_1EB4E0140 = 1;
  CoreML::Specification::_StateFeatureType_default_instance_ = (uint64_t)&unk_1EF0D1F98;
  unk_1EB4DCEC0 = 0;
  qword_1EB4DCED0 = 0;
  byte_1EB4DCED8 = 1;
  CoreML::Specification::_FeatureType_default_instance_ = (uint64_t)&unk_1EF0CEAC0;
  unk_1EB4DE3C0 = 0;
  byte_1EB4DE3C8 = 0;
  qword_1EB4DE3D8 = 0;
  byte_1EB4DE3E0 = 1;
  qword_1EB4E1CB0 = (uint64_t)&CoreML::Specification::_SizeRange_default_instance_;
  qword_1EB4E1CB8 = (uint64_t)&CoreML::Specification::_SizeRange_default_instance_;
  qword_1EB4E0128 = (uint64_t)&CoreML::Specification::_SizeRange_default_instance_;
  return result;
}

CoreML::Specification::CustomModel *CoreML::Specification::protobuf_CustomModel_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_CustomModel_2eproto::TableStruct *this)
{
  google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_CustomModel_CustomModelParamValue_default_instance_ = (uint64_t)&unk_1EF0D8CD8;
  unk_1EB4E1F00 = 0;
  qword_1EB4E1F10 = 0;
  byte_1EB4E1F18 = 1;
  qword_1EB4E17D0 = 0;
  unk_1EB4E17D8 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E17E0 = 0;
  unk_1EB4E17E8 = 0;
  dword_1EB4E17F0 = 0;
  CoreML::Specification::_CustomModel_ParametersEntry_default_instance_ = (uint64_t)&unk_1EF0DC2A0;
  byte_1EB4E17F8 = 1;
  double result = CoreML::Specification::CustomModel::CustomModel((CoreML::Specification::CustomModel *)&CoreML::Specification::_CustomModel_default_instance_);
  *((unsigned char *)result + 72) = 1;
  qword_1EB4E17D0 = (uint64_t)&CoreML::Specification::_CustomModel_ParametersEntry_default_instance_;
  qword_1EB4E17E0 = (uint64_t)&CoreML::Specification::_CustomModel_CustomModelParamValue_default_instance_;
  return result;
}

double CoreML::Specification::protobuf_Parameters_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Parameters_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  double result = 0.0;
  qword_1EB4DE9F8 = 0;
  qword_1EB4DE9E0 = 0;
  unk_1EB4DE9E8 = 0;
  CoreML::Specification::_Int64Parameter_default_instance_ = (uint64_t)&unk_1EF0D03B0;
  byte_1EB4DEA00 = 1;
  qword_1EB4DEC78 = 0;
  qword_1EB4DEC60 = 0;
  unk_1EB4DEC68 = 0;
  CoreML::Specification::_DoubleParameter_default_instance_ = (uint64_t)&unk_1EF0D0D30;
  byte_1EB4DEC80 = 1;
  CoreML::Specification::_StringParameter_default_instance_ = (uint64_t)off_1EF0D11F0;
  *(void *)algn_1EB4DEDB8 = 0;
  qword_1EB4DEDC0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_1EB4DEDC8 = 0;
  byte_1EB4DEDD0 = 1;
  CoreML::Specification::_BoolParameter_default_instance_ = (uint64_t)&unk_1EF0CFBF8;
  unk_1EB4DE6E0 = 0;
  byte_1EB4DE6E8 = 0;
  dword_1EB4DE6EC = 0;
  byte_1EB4DE6F0 = 1;
  return result;
}

unint64_t *CoreML::Specification::protobuf_Normalizer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Normalizer_2eproto::TableStruct *this)
{
  double result = google::protobuf::internal::InitProtobufDefaults(this);
  qword_1EB4DE2F0 = 0;
  *(void *)&dword_1EB4DE2F8 = 0;
  CoreML::Specification::_Normalizer_default_instance_ = (uint64_t)&unk_1EF0CE730;
  byte_1EB4DE300 = 1;
  return result;
}

unint64_t *CoreML::Specification::protobuf_Imputer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Imputer_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  double result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_Imputer_default_instance_ = (uint64_t)&unk_1EF0D9788;
  unk_1EB4DE0F0 = 0;
  dword_1EB4DE110 = 0;
  qword_1EB4DE108 = 0;
  byte_1EB4DE118 = 1;
  return result;
}

unint64_t *CoreML::Specification::protobuf_Scaler_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Scaler_2eproto::TableStruct *this)
{
  double result = google::protobuf::internal::InitProtobufDefaults(this);
  qword_1EB4DE0C8 = 0;
  qword_1EB4DE0D0 = 0;
  CoreML::Specification::_Scaler_default_instance_ = (uint64_t)&unk_1EF0D9658;
  qword_1EB4DE0A8 = 0;
  qword_1EB4DE0B0 = 0;
  qword_1EB4DE0B8 = 0;
  dword_1EB4DE0DC = 0;
  byte_1EB4DE0E0 = 1;
  return result;
}

double CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::TableStruct *this)
{
  google::protobuf::internal::InitProtobufDefaults(this);
  qword_1EB4E2230 = 0;
  *(void *)&dword_1EB4E2238 = 0;
  CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Scene_default_instance_ = (uint64_t)&unk_1EF0CF278;
  byte_1EB4E2240 = 1;
  CoreML::Specification::CoreMLModels::_VisionFeaturePrint_Objects_default_instance_ = (uint64_t)&unk_1EF0CF3A8;
  double result = 0.0;
  *(_OWORD *)algn_1EB4E21F0 = 0u;
  *(_OWORD *)&dword_1EB4E2200 = 0u;
  qword_1EB4E2210 = 0;
  byte_1EB4E2218 = 1;
  CoreML::Specification::CoreMLModels::_VisionFeaturePrint_default_instance_ = (uint64_t)&unk_1EF0CF148;
  qword_1EB4DDE78 = 0;
  qword_1EB4DDE88 = 0;
  byte_1EB4DDE90 = 1;
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::TableStruct *this)
{
  double result = google::protobuf::internal::InitProtobufDefaults(this);
  qword_1EB4DD658 = 0;
  *(void *)&dword_1EB4DD660 = 0;
  CoreML::Specification::CoreMLModels::_AudioFeaturePrint_Sound_default_instance_ = (uint64_t)&unk_1EF0CF1E0;
  byte_1EB4DD668 = 1;
  CoreML::Specification::CoreMLModels::_AudioFeaturePrint_default_instance_ = (uint64_t)&unk_1EF0CF0B0;
  qword_1EB4DD628 = 0;
  qword_1EB4DD638 = 0;
  byte_1EB4DD640 = 1;
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  double result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::CoreMLModels::_TextClassifier_default_instance_ = (uint64_t)&unk_1EF0CF018;
  qword_1EB4DDE30 = 0;
  qword_1EB4DDE38 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DDE40 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_1EB4DDE48 = 0;
  qword_1EB4DDE58 = 0;
  byte_1EB4DDE60 = 1;
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  double result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::CoreMLModels::_WordTagger_default_instance_ = (uint64_t)&unk_1EF0CEEE8;
  qword_1EB4DDD98 = 0;
  qword_1EB4DDDA0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DDDA8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DDDB0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DDDB8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DDDC0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DDDC8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_1EB4DDDD0 = 0;
  qword_1EB4DDDE0 = 0;
  byte_1EB4DDDE8 = 1;
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  double result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::CoreMLModels::_Gazetteer_default_instance_ = (uint64_t)&unk_1EF0CF4D8;
  qword_1EB4DDD50 = 0;
  qword_1EB4DDD58 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DDD60 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_1EB4DDD68 = 0;
  qword_1EB4DDD78 = 0;
  byte_1EB4DDD80 = 1;
  return result;
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML8Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0DD498;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML7Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0DD440;
  a2[1] = v2;
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0DD3E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRTensorValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML6_trainOpset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0DD4F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0,std::allocator<CoreML::MIL::Opsets::CoreML5Opset::GetOperatorConstructors(MIL::MILContext &)::$_0>,std::unique_ptr<MIL::IROperator> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0DD390;
  a2[1] = v2;
  return result;
}

void sub_19E5B3958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B3A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B3C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  kdebug_trace();

  _Unwind_Resume(a1);
}

void sub_19E5B3E48(_Unwind_Exception *a1)
{
  v2[2](v2);
  _Unwind_Resume(a1);
}

void sub_19E5B3FDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B479C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  _Unwind_Resume(a1);
}

void sub_19E5B4CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E5B4E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B4EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B4F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B52AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E5B5740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  a18 = *MEMORY[0x1E4FBA408];
  uint64_t v65 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&a18 + *(void *)(a18 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  a20 = v65;
  a21 = MEMORY[0x1E4FBA470] + 16;
  if (a34 < 0) {
    operator delete(a29);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3C1850](&a37);
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a2 == 1)
  {
    BOOL v66 = __cxa_begin_catch(a1);
    if (v62)
    {
      (*(void (**)(void *))(*(void *)v66 + 16))(v66);
      *int v62 = +[MLModelErrorUtils IOErrorWithFormat:@"%s"];
    }
    __cxa_end_catch();
    JUMPOUT(0x19E5B5720);
  }
  _Unwind_Resume(a1);
}

CoreML::Specification::ModelDescription *_ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification16ModelDescriptionENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(CoreML::Specification::ModelDescription **a1)
{
  uint64_t v2 = operator new(0xC8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_1EF0DD688;
  uint64_t result = CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)(v2 + 3));
  *a1 = result;
  a1[1] = (CoreML::Specification::ModelDescription *)v2;
  return result;
}

void sub_19E5B59B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::ModelDescription(CoreML::Specification::ModelDescription *this)
{
  *(_OWORD *)((char *)this + _Block_object_dispose(&STACK[0x278], 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(void *)this = &unk_1EF0D1C08;
  *(_OWORD *)((char *)this + 8_Block_object_dispose(&STACK[0x278], 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  }
  *((void *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 1_Block_object_dispose(&STACK[0x278], 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  return this;
}

void sub_19E5B5A88(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v6);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v2);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::CodedInputStream::Refresh(google::protobuf::io::CodedInputStream *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v2 = *((_DWORD *)this + 11);
  if (v2 > 0 || *((int *)this + 7) > 0 || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))
  {
    int v3 = *((_DWORD *)this + 6) - v2;
    int v4 = *((_DWORD *)this + 12);
    if (v3 >= v4 && v4 != *((_DWORD *)this + 10))
    {
      LODWORD(v20[0]) = 2;
      v20[1] = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/io/coded_stream.cc";
      int v21 = 193;
      memset(&__p, 0, sizeof(__p));
      std::string::append(&__p, "A protocol message was rejected because it was too big (more than ");
      snprintf(__str, 0x80uLL, "%d", *((_DWORD *)this + 12));
      char v27 = 0;
      std::string::append(&__p, __str);
      std::string::append(&__p, " bytes).  To increase the limit (or to disable these warnings), see CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.");
      google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)v20);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    return 0;
  }
  else
  {
    v20[0] = 0;
    int v19 = 0;
    uint64_t v7 = *((void *)this + 2);
    do
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, void *, int *))(*(void *)v7 + 16))(v7, v20, &v19);
      if (!v5)
      {
        *(void *)this = 0;
        *((void *)this + 1) = 0;
        return v5;
      }
      int v8 = v19;
    }
    while (!v19);
    uint64_t v9 = v20[0] + v19;
    *(void *)this = v20[0];
    *((void *)this + 1) = v9;
    if (v8 < 0)
    {
      *(_DWORD *)__str = 3;
      int v24 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/io/coded_stream.cc";
      int v25 = 599;
      memset(v26, 0, 24);
      std::string::append(v26, "CHECK failed: (buffer_size) >= (0): ");
      google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)__str);
      if (SHIBYTE(v26[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26[0].__r_.__value_.__l.__data_);
      }
      int v8 = v19;
    }
    int v10 = *((_DWORD *)this + 6);
    int v11 = v10 - (v8 ^ 0x7FFFFFFF);
    if (v10 <= (v8 ^ 0x7FFFFFFF))
    {
      int v13 = v8 + v10;
      uint64_t v12 = *((void *)this + 1);
    }
    else
    {
      *((_DWORD *)this + 7) = v11;
      uint64_t v12 = *((void *)this + 1) - v11;
      *((void *)this + 1) = v12;
      int v13 = 0x7FFFFFFF;
    }
    *((_DWORD *)this + 6) = v13;
    int v14 = *((_DWORD *)this + 10);
    uint64_t v15 = v12 + *((int *)this + 11);
    *((void *)this + 1) = v15;
    int v16 = *((_DWORD *)this + 12);
    if (v16 >= v14) {
      int v16 = v14;
    }
    BOOL v17 = __OFSUB__(v13, v16);
    int v18 = v13 - v16;
    if ((v18 < 0) ^ v17 | (v18 == 0)) {
      int v18 = 0;
    }
    else {
      *((void *)this + 1) = v15 - v18;
    }
    *((_DWORD *)this + 11) = v18;
  }
  return v5;
}

void sub_19E5B5D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::io::CopyingInputStreamAdaptor::Next(google::protobuf::io::CopyingInputStreamAdaptor *this, const void **a2, int *a3)
{
  if (*((unsigned char *)this + 17)) {
    return 0;
  }
  uint64_t v7 = *((void *)this + 4);
  if (!v7) {
    operator new[]();
  }
  uint64_t v8 = *((unsigned int *)this + 12);
  if ((int)v8 >= 1)
  {
    *a2 = (const void *)(v7 + *((int *)this + 11) - v8);
    *a3 = v8;
    *((_DWORD *)this + 12) = 0;
    return 1;
  }
  int v9 = (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 1) + 16))(*((void *)this + 1), v7, *((unsigned int *)this + 10));
  *((_DWORD *)this + 11) = v9;
  if (v9 > 0)
  {
    *((void *)this + 3) += v9;
    *a3 = v9;
    *a2 = (const void *)*((void *)this + 4);
    return 1;
  }
  if (v9 < 0) {
    *((unsigned char *)this + 17) = 1;
  }
  if (*((_DWORD *)this + 12))
  {
    int v10 = 3;
    int v11 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/io/zero_co"
          "py_stream_impl_lite.cc";
    int v12 = 346;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "CHECK failed: (backup_bytes_) == (0): ");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  *((_DWORD *)this + 11) = 0;
  uint64_t result = *((void *)this + 4);
  if (result)
  {
    MEMORY[0x19F3C1900](result, 0x1000C8077774924);
    uint64_t result = 0;
    *((void *)this + 4) = 0;
  }
  return result;
}

void sub_19E5B5F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::io::IstreamInputStream::Next(google::protobuf::io::IstreamInputStream *this, const void **a2, int *a3)
{
  return google::protobuf::io::CopyingInputStreamAdaptor::Next((google::protobuf::io::IstreamInputStream *)((char *)this + 24), a2, a3);
}

uint64_t google::protobuf::io::IstreamInputStream::CopyingIstreamInputStream::Read(google::protobuf::io::IstreamInputStream::CopyingIstreamInputStream *this, void *a2)
{
  std::istream::read();
  uint64_t v3 = *((void *)this + 1);
  uint64_t result = *(unsigned int *)(v3 + 8);
  if (!result)
  {
    int v5 = *(_DWORD *)(v3 + *(void *)(*(void *)v3 - 24) + 32);
    int v6 = v5 & 5;
    int v7 = v5 & 2;
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x19F3C15B0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      int v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x19F3C15C0](v13);
  return a1;
}

void sub_19E5B60F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x19F3C15C0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x19E5B60D8);
}

void sub_19E5B614C(_Unwind_Exception *a1)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x278], 8) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  int v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = 0;
  int v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x278], 8) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x278], 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_19E5B6410(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x19F3C1850](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      int v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_19E5B65A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor(google::protobuf::io::CopyingInputStreamAdaptor *this)
{
  *(void *)this = &unk_1EF0DB3A8;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    MEMORY[0x19F3C1900](v3, 0x1000C8077774924);
  }
}

{
  uint64_t vars8;

  google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor(this);

  JUMPOUT(0x19F3C1920);
}

void google::protobuf::io::CodedInputStream::~CodedInputStream(google::protobuf::io::CodedInputStream *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    if (*((_DWORD *)this + 7) + *((_DWORD *)this + 11) + *((_DWORD *)this + 2) - *(_DWORD *)this >= 1)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
      unsigned int v3 = *((_DWORD *)this + 6) - *((_DWORD *)this + 11) + *(void *)this - *((_DWORD *)this + 2);
      *((void *)this + 1) = *(void *)this;
      *((_DWORD *)this + 11) = 0;
      *((void *)this + 3) = v3;
    }
  }
}

uint64_t google::protobuf::MessageLite::ParseFromCodedStream(google::protobuf::MessageLite *this, google::protobuf::io::CodedInputStream *a2)
{
  (*(void (**)(google::protobuf::MessageLite *))(*(void *)this + 56))(this);
  uint64_t result = (*(uint64_t (**)(google::protobuf::MessageLite *, google::protobuf::io::CodedInputStream *))(*(void *)this + 88))(this, a2);
  if (result)
  {
    if ((*(uint64_t (**)(google::protobuf::MessageLite *))(*(void *)this + 64))(this))
    {
      return 1;
    }
    else
    {
      int v12 = 2;
      int v13 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/message_lite.cc";
      int v14 = 121;
      memset(&v15, 0, sizeof(v15));
      memset(&__p, 0, sizeof(__p));
      std::string::append(&__p, "Can't ");
      std::string::append(&__p, "parse");
      std::string::append(&__p, " message of type \"");
      (*(void (**)(std::string::value_type **__return_ptr, google::protobuf::MessageLite *))(*(void *)this + 16))(&v16, this);
      if ((v18 & 0x80u) == 0) {
        int v5 = (const std::string::value_type *)&v16;
      }
      else {
        int v5 = v16;
      }
      if ((v18 & 0x80u) == 0) {
        std::string::size_type v6 = v18;
      }
      else {
        std::string::size_type v6 = v17;
      }
      std::string::append(&__p, v5, v6);
      if ((char)v18 < 0) {
        operator delete(v16);
      }
      std::string::append(&__p, "\" because it is missing required fields: ");
      (*(void (**)(std::string::value_type **__return_ptr, google::protobuf::MessageLite *))(*(void *)this + 72))(&v16, this);
      if ((v18 & 0x80u) == 0) {
        uint64_t v7 = (const std::string::value_type *)&v16;
      }
      else {
        uint64_t v7 = v16;
      }
      if ((v18 & 0x80u) == 0) {
        std::string::size_type v8 = v18;
      }
      else {
        std::string::size_type v8 = v17;
      }
      std::string::append(&__p, v7, v8);
      if ((char)v18 < 0) {
        operator delete(v16);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v15, (const std::string::value_type *)p_p, size);
      google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      return 0;
    }
  }
  return result;
}

void sub_19E5B6924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::ModelDescription::IsInitialized(CoreML::Specification::ModelDescription *this)
{
  return 1;
}

CoreML::Result *CoreML::Result::Result(CoreML::Result *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "not an error");
  *(void *)this = 0;
  std::operator+<char>();
  if (v4 < 0) {
    operator delete(__p);
  }
  return this;
}

void sub_19E5B69E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::ModelDescription::Clear(CoreML::Specification::ModelDescription *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    unsigned int v3 = (CoreML::Specification::FeatureDescription **)(*((void *)this + 4) + 8);
    do
    {
      char v4 = *v3++;
      CoreML::Specification::FeatureDescription::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  uint64_t v5 = *((unsigned int *)this + 12);
  if ((int)v5 >= 1)
  {
    std::string::size_type v6 = (CoreML::Specification::FeatureDescription **)(*((void *)this + 7) + 8);
    do
    {
      uint64_t v7 = *v6++;
      CoreML::Specification::FeatureDescription::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 12) = 0;
  }
  uint64_t v8 = *((unsigned int *)this + 18);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = (CoreML::Specification::FeatureDescription **)(*((void *)this + 10) + 8);
    do
    {
      uint64_t v10 = *v9++;
      CoreML::Specification::FeatureDescription::Clear(v10);
      --v8;
    }
    while (v8);
    *((_DWORD *)this + 1_Block_object_dispose(&STACK[0x278], 8) = 0;
  }
  uint64_t v11 = *((unsigned int *)this + 24);
  if ((int)v11 >= 1)
  {
    int v12 = (uint64_t *)(*((void *)this + 13) + 8);
    do
    {
      uint64_t v13 = *v12++;
      CoreML::Specification::FunctionDescription::Clear(v13);
      --v11;
    }
    while (v11);
    *((_DWORD *)this + 24) = 0;
  }
  uint64_t v14 = *((unsigned int *)this + 30);
  if ((int)v14 >= 1)
  {
    std::string v15 = (CoreML::Specification::FeatureDescription **)(*((void *)this + 16) + 8);
    do
    {
      int v16 = *v15++;
      CoreML::Specification::FeatureDescription::Clear(v16);
      --v14;
    }
    while (v14);
    *((_DWORD *)this + 30) = 0;
  }
  uint64_t v17 = *((void *)this + 17);
  if ((long long *)v17 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v17 + 23) < 0)
    {
      **(unsigned char **)uint64_t v17 = 0;
      *(void *)(v17 + _Block_object_dispose(&STACK[0x278], 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v17 = 0;
      *(unsigned char *)(v17 + 23) = 0;
    }
  }
  uint64_t v18 = *((void *)this + 18);
  if ((long long *)v18 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v18 + 23) < 0)
    {
      **(unsigned char **)uint64_t v18 = 0;
      *(void *)(v18 + _Block_object_dispose(&STACK[0x278], 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v18 = 0;
      *(unsigned char *)(v18 + 23) = 0;
    }
  }
  uint64_t v19 = *((void *)this + 19);
  if ((long long *)v19 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v19 + 23) < 0)
    {
      **(unsigned char **)uint64_t v19 = 0;
      *(void *)(v19 + _Block_object_dispose(&STACK[0x278], 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v19 = 0;
      *(unsigned char *)(v19 + 23) = 0;
    }
  }
  uint64_t result = *((void *)this + 20);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 20) = 0;
  return result;
}

void sub_19E5B6CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B6D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B6E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B7360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B7504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E5B7584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B76D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B7734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B7AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, ...)
{
  va_start(va, a7);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

void sub_19E5B7CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ElapsedTimeRecorder::~ElapsedTimeRecorder(id *this)
{
  if (*((unsigned char *)this + 48))
  {
    kdebug_trace();
    [this[1] maybeLogPredictionEvent:mach_absolute_time() - (void)*this];
    *((unsigned char *)this + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
  }
}

void sub_19E5B8030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B8108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B85FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19E5B89FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

void sub_19E5B8C44(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, uint64_t a12, uint64_t a13, void *a14)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }

  kdebug_trace();
  if (a2 == 3)
  {
    uint64_t v19 = __cxa_begin_catch(a1);
    int v20 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v28;
      _os_log_error_impl(&dword_19E58B000, v20, OS_LOG_TYPE_ERROR, "Unable to compute the prediction using a user-provided custom layer in a neural network model. It can be an invalid input data or broken/unsupported model. (Underlying exception: %s)", (uint8_t *)&buf, 0xCu);
    }

    if (v14)
    {
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      int v21 = +[MLModelErrorUtils genericErrorWithFormat:@"%s"];
      id v22 = +[MLModelErrorUtils errorWithCode:4 underlyingError:v21 format:@"Unable to compute the prediction using a user-provided custom layer in a neural network model. It can be an invalid input data or broken/unsupported model."];
LABEL_12:
      *uint64_t v14 = v22;
LABEL_17:
    }
  }
  else
  {
    int v23 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v24 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v29;
        _os_log_error_impl(&dword_19E58B000, v24, OS_LOG_TYPE_ERROR, "Unable to compute the prediction using a neural network model due to a runtime error. It can be an invalid input data or broken/unsupported model. (Underlying exception: %s)", (uint8_t *)&buf, 0xCu);
      }

      if (v14)
      {
        (*(void (**)(void *))(*(void *)v23 + 16))(v23);
        int v21 = +[MLModelErrorUtils genericErrorWithFormat:@"%s"];
        id v22 = +[MLModelErrorUtils errorWithCode:0 underlyingError:v21 format:@"Unable to compute the prediction using a neural network model due to a runtime error. It can be an invalid input data or broken/unsupported model."];
        goto LABEL_12;
      }
    }
    else
    {
      int v25 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_error_impl(&dword_19E58B000, v25, OS_LOG_TYPE_ERROR, "Unable to compute the prediction using a neural network model due to an unknown error. It can be an invalid input data or broken/unsupported model.", (uint8_t *)&buf, 2u);
      }

      if (v14)
      {
        unsigned int v26 = (void *)MEMORY[0x1E4F28C58];
        a13 = *MEMORY[0x1E4F28568];
        int v21 = [NSString stringWithFormat:@"Unable to compute the prediction using a neural network model due to an unknown error. It can be an invalid input data or broken/unsupported model."];
        a14 = v21;
        char v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a14 forKeys:&a13 count:1];
        *uint64_t v14 = [v26 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v27];

        goto LABEL_17;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x19E5B8BB8);
}

void sub_19E5B9820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E5B9B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_19E5B9CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5B9DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5BA01C(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void CoreML::MIL::Opsets::CoreML6Opset::~CoreML6Opset(CoreML::MIL::Opsets::CoreML6Opset *this)
{
  MIL::IROpset::~IROpset(this);

  JUMPOUT(0x19F3C1920);
}

void sub_19E5BA11C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5BA29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E5BA308()
{
  JUMPOUT(0x19E5BA300);
}

void sub_19E5BA368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5BA574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }

  _Unwind_Resume(a1);
}

void IArchive::blob(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 24))(&v5, a2, a3);
  char v4 = v6;
  *a1 = v5;
  a1[1] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void Archiver::_IArchiveDiskImpl::getNestedArchive(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(char *)(a1 + 31) >= 0) {
    size_t v6 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    size_t v6 = *(void *)(a1 + 16);
  }
  uint64_t v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*(char *)(a1 + 31) >= 0) {
      uint64_t v8 = (const void *)(a1 + 8);
    }
    else {
      uint64_t v8 = *(const void **)(a1 + 8);
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a2;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a2 + 8);
  }
  int v12 = std::string::append(&v16, v10, v11);
  std::string __p = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = operator new(0x50uLL);
  v13[1] = 0;
  v13[2] = 0;
  *uint64_t v13 = &unk_1EF0DD8F0;
  *(void *)&long long v14 = Archiver::_IArchiveDiskImpl::_IArchiveDiskImpl((uint64_t)(v13 + 3), (uint64_t)&__p, *(_DWORD *)(a1 + 48));
  *((void *)&v14 + 1) = v13;
  *a3 = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19E5BA7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Archiver::_IArchiveDiskImpl::getBlob(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  if (*(char *)(a1 + 31) >= 0) {
    size_t v6 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    size_t v6 = *(void *)(a1 + 16);
  }
  uint64_t v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*(char *)(a1 + 31) >= 0) {
      uint64_t v8 = (const void *)(a1 + 8);
    }
    else {
      uint64_t v8 = *(const void **)(a1 + 8);
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a2;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a2 + 8);
  }
  int v12 = std::string::append(&v16, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string::size_type v15 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  Archiver::_IArchiveDiskImpl::createBlob(a1, (long long *)__p, a3);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19E5BA8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Archiver::_IArchiveDiskImpl::_IArchiveDiskImpl(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v55 = *(std::string *)a2;
  }
  *(void *)a1 = &unk_1EF0DCA30;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
    int v6 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    if (v6 < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::string *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v55;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(void *)a1 = &unk_1EF0DCBB0;
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__msg, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __msg = *(std::string *)a2;
    }
    std::string::basic_string[abi:ne180100]<0>(&v57, "coremldata.bin");
    if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__msg.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __msg.__r_.__value_.__l.__size_;
    }
    uint64_t v8 = &v55;
    std::string::basic_string[abi:ne180100]((uint64_t)&v55, size + 1);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_msg = &__msg;
      }
      else {
        p_msg = (std::string *)__msg.__r_.__value_.__r.__words[0];
      }
      memmove(v8, p_msg, size);
    }
    *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + size) = 47;
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v57;
    }
    else {
      uint64_t v10 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v11 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v11 = v57.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v55, (const std::string::value_type *)v10, v11);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v54 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__msg.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__msg.__r_.__value_.__l.__data_);
    }
    std::ifstream::basic_ifstream((uint64_t *)&v55);
    if (*(_DWORD *)((char *)&v55 + *(void *)(v55.__r_.__value_.__r.__words[0] - 24) + 32))
    {
      std::operator+<char>();
      char v27 = std::string::append(&v57, ". It is not a valid .mlmodelc file. ");
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      __msg.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      uint64_t v29 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        long long v30 = &__msg;
        if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v30 = (std::string *)__msg.__r_.__value_.__r.__words[0];
        }
        LODWORD(v57.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
        _os_log_error_impl(&dword_19E58B000, v29, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v57, 0xCu);
      }

      exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      unsigned int v32 = std::iostream_category();
      v57.__r_.__value_.__r.__words[0] = 1;
      v57.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
      std::ios_base::failure::failure(exception, &__msg, (const std::error_code *)&v57);
      __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
    }
    unsigned int __val = 0;
    std::istream::read();
    if (*(_DWORD *)((char *)&v55 + *(void *)(v55.__r_.__value_.__r.__words[0] - 24) + 32))
    {
      std::operator+<char>();
      long long v33 = std::string::append(&v57, ". It is not a valid .mlmodelc file. ");
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      __msg.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      __n128 v35 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        unsigned int v36 = &__msg;
        if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unsigned int v36 = (std::string *)__msg.__r_.__value_.__r.__words[0];
        }
        LODWORD(v57.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_error_impl(&dword_19E58B000, v35, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v57, 0xCu);
      }

      int v37 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      __n128 v38 = std::iostream_category();
      v57.__r_.__value_.__r.__words[0] = 1;
      v57.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
      std::ios_base::failure::failure(v37, &__msg, (const std::error_code *)&v57);
      __cxa_throw(v37, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
    }
    long long v14 = +[MLModelTypeRegistry sharedInstance];
    std::string::size_type v15 = [v14 classesForLoadingModelType:__val];
    BOOL v16 = [v15 count] == 0;

    if (v16)
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v50.__r_.__value_.__l.__data_, (const void **)__p, " is not a valid .mlmodelc file because the first word (");
      std::to_string(&v49, __val);
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v39 = &v49;
      }
      else {
        int v39 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v40 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v40 = v49.__r_.__value_.__l.__size_;
      }
      int v41 = std::string::append(&v50, (const std::string::value_type *)v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      unint64_t v43 = std::string::append(&v57, ") is not recognizable. ");
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      __msg.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
      BOOL v45 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        int v46 = &__msg;
        if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v46 = (std::string *)__msg.__r_.__value_.__r.__words[0];
        }
        LODWORD(v57.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
        _os_log_error_impl(&dword_19E58B000, v45, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v57, 0xCu);
      }

      uint64_t v47 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
      char v48 = std::iostream_category();
      v57.__r_.__value_.__r.__words[0] = 1;
      v57.__r_.__value_.__l.__size_ = (std::string::size_type)v48;
      std::ios_base::failure::failure(v47, &__msg, (const std::error_code *)&v57);
      __cxa_throw(v47, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
    }
    a3 = 1;
    v55.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA3F8];
    *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words
                              + *(void *)(v55.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8]
                                                                                                + 24);
    MEMORY[0x19F3C1500](&v55.__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    MEMORY[0x19F3C1850](&v56);
    if (SHIBYTE(v54) < 0) {
      operator delete(__p[0]);
    }
  }
  *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = a3;
  std::string::basic_string[abi:ne180100]<0>(&__msg, "coremldata.bin");
  if (*(char *)(a1 + 31) >= 0) {
    size_t v17 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    size_t v17 = *(void *)(a1 + 16);
  }
  uint64_t v18 = &v55;
  std::string::basic_string[abi:ne180100]((uint64_t)&v55, v17 + 1);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v18 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  if (v17)
  {
    if (*(char *)(a1 + 31) >= 0) {
      uint64_t v19 = (const void *)(a1 + 8);
    }
    else {
      uint64_t v19 = *(const void **)(a1 + 8);
    }
    memmove(v18, v19, v17);
  }
  *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 47;
  if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v20 = &__msg;
  }
  else {
    int v20 = (std::string *)__msg.__r_.__value_.__r.__words[0];
  }
  if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v21 = HIBYTE(__msg.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v21 = __msg.__r_.__value_.__l.__size_;
  }
  id v22 = std::string::append(&v55, (const std::string::value_type *)v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  std::string::size_type v54 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  Archiver::_IArchiveDiskImpl::createBlob(a1, (long long *)__p, (__n128 *)&v57);
  std::string::size_type v24 = v57.__r_.__value_.__l.__size_;
  int v25 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v57.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 40) = v24;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__msg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__msg.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_19E5BB158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a37);
  if (a35 < 0) {
    operator delete(a30);
  }
  Archiver::_IArchiveImpl::~_IArchiveImpl(v42);
  _Unwind_Resume(a1);
}

void sub_19E5BB2E4()
{
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    int v6 = operator new(v4 + 1);
    *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

__n128 Archiver::_IArchiveDiskImpl::createBlob@<Q0>(uint64_t a1@<X0>, long long *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 48) == 2)
  {
    uint64_t v5 = (char *)operator new(0x78uLL);
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
    *(void *)uint64_t v5 = &unk_1EF0DD960;
    Archiver::_IDataBlobImpl::_IDataBlobImpl((uint64_t)(v5 + 24), a2);
    *((void *)v5 + 3) = &unk_1EF0DCD58;
    int v6 = operator new(0x58uLL);
    v6[1] = 0;
    v6[2] = 0;
    *int v6 = &unk_1EF0DDA08;
    Archiver::MMappedFile::MMappedFile((uint64_t)(v6 + 3), a2);
    v6[3] = &unk_1EF0DCE38;
    v6[9] = 0;
    v6[10] = 0;
    unint64_t v7 = v6[8];
    if (v7 <= 0x3F)
    {
      std::string::basic_string[abi:ne180100]<0>(&v63, "file does not contain encrypted model header");
      id v22 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        long long v23 = &v63;
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v23 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        LODWORD(v64.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        _os_log_error_impl(&dword_19E58B000, v22, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v64, 0xCu);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &v63);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v8 = v6[7];
    if (*(_DWORD *)v8 != 1162759500)
    {
      std::string::basic_string[abi:ne180100]<0>(&v63, "unrecognized magic word in the encrypted model header");
      int v25 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        unsigned int v26 = &v63;
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unsigned int v26 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        LODWORD(v64.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
        _os_log_error_impl(&dword_19E58B000, v25, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v64, 0xCu);
      }

      char v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v27, &v63);
      __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (!*(unsigned char *)(v8 + 4) || *(unsigned __int8 *)(v8 + 4) >= 3u)
    {
      std::to_string(&v64, *(unsigned __int8 *)(v8 + 4));
      size_t v17 = std::string::insert(&v64, 0, "unsupported major version = ");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      uint64_t v19 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        int v20 = &v63;
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v20 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        LODWORD(v64.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
        _os_log_error_impl(&dword_19E58B000, v19, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v64, 0xCu);
      }

      std::string::size_type v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v21, &v63);
      __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (*(unsigned char *)(v8 + 4) == 1) {
      unsigned int v9 = 64;
    }
    else {
      unsigned int v9 = *(unsigned __int8 *)(v8 + 7);
    }
    uint64_t v12 = v9;
    if (v7 <= v9)
    {
      std::to_string(&v64, v9);
      long long v28 = std::string::insert(&v64, 0, "file does not contain any payload, sizeOfHeader = ");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      long long v30 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        int v31 = &v63;
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v31 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        LODWORD(v64.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
        _os_log_error_impl(&dword_19E58B000, v30, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v64, 0xCu);
      }

      unsigned int v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v32, &v63);
      __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void *)(v8 + 8);
    if (v13 - 1 >= v7 - v9)
    {
      std::to_string(&v64, *(void *)(v8 + 8));
      long long v33 = std::string::insert(&v64, 0, "illegal value for original file size = ");
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      __n128 v35 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        unsigned int v36 = &v63;
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unsigned int v36 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        LODWORD(v64.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_error_impl(&dword_19E58B000, v35, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v64, 0xCu);
      }

      int v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v37, &v63);
      __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v14 = *(void *)(v8 + 16);
    if (v14)
    {
      if (v14 >> 52)
      {
        std::to_string(&v64, *(void *)(v8 + 16));
        __n128 v38 = std::string::insert(&v64, 0, "illegal value for number of encrypted pages = ");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        std::string::size_type v40 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          int v41 = &v63;
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v41 = (std::string *)v63.__r_.__value_.__r.__words[0];
          }
          LODWORD(v64.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
          _os_log_error_impl(&dword_19E58B000, v40, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v64, 0xCu);
        }

        long long v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v42, &v63);
        __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (v7 < v14 << 12)
      {
        std::to_string(&v64, *(void *)(v8 + 16));
        unint64_t v43 = std::string::insert(&v64, 0, "illegal number of encrypted pages = ");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        BOOL v45 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          int v46 = &v63;
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v46 = (std::string *)v63.__r_.__value_.__r.__words[0];
          }
          LODWORD(v64.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
          _os_log_error_impl(&dword_19E58B000, v45, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v64, 0xCu);
        }

        uint64_t v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v47, &v63);
        __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v15 = mremap_encrypted();
      if (v15)
      {
        std::to_string(&v61, v15);
        v48 = std::string::insert(&v61, 0, "failed to invoke mremap_encrypted with __n128 result = ");
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        std::string v50 = std::string::append(&v62, ", error = ");
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        int v52 = __error();
        std::to_string(&__p, *v52);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::string v55 = std::string::append(&v64, (const std::string::value_type *)p_p, size);
        long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        std::string v57 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
        {
          uint64_t v58 = &v63;
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v58 = (std::string *)v63.__r_.__value_.__r.__words[0];
          }
          LODWORD(v64.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 4) = (std::string::size_type)v58;
          _os_log_error_impl(&dword_19E58B000, v57, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v64, 0xCu);
        }

        int v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v59, &v63);
        __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v8 = v6[7];
    }
    v6[9] = v8 + v12;
    v6[10] = v13;
    *(void *)&long long v16 = v6 + 3;
    *((void *)&v16 + 1) = v6;
    *(_OWORD *)(v5 + 8_Block_object_dispose(&STACK[0x278], 8) = v16;
    *((void *)v5 + 13) = 0;
    *((void *)v5 + 14) = 0;
    result.n128_u64[0] = (unint64_t)(v5 + 24);
    result.n128_u64[1] = (unint64_t)v5;
    *a3 = result;
  }
  else
  {
    uint64_t v10 = operator new(0x58uLL);
    v10[1] = 0;
    v10[2] = 0;
    *uint64_t v10 = &unk_1EF0DD848;
    a3->n128_u64[0] = Archiver::_IDataBlobImpl::_IDataBlobImpl((uint64_t)(v10 + 3), a2);
    a3->n128_u64[1] = (unint64_t)v10;
  }
  return result;
}

void sub_19E5BBD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  Archiver::MMappedFile::~MMappedFile(v36);
  std::__shared_weak_count::~__shared_weak_count(v35);
  operator delete(v38);
  Archiver::_IDataBlobImpl::~_IDataBlobImpl(v34);
  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v39);
  _Unwind_Resume(a1);
}

void sub_19E5BBE94()
{
}

void sub_19E5BBE9C()
{
}

void sub_19E5BBEA4()
{
}

uint64_t Archiver::_IDataBlobImpl::_IDataBlobImpl(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_1EF0DCAD8;
  unsigned int v3 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = 0u;
  return a1;
}

id Archiver::_IDataBlobImpl::asData(Archiver::_IDataBlobImpl *this)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x4012000000;
  uint64_t v12 = __Block_byref_object_copy__6410;
  uint64_t v13 = __Block_byref_object_dispose__6411;
  unint64_t v14 = "";
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 24))(&v15);
  uint64_t v1 = v10[6];
  if (v1 && (*(uint64_t (**)(uint64_t))(*(void *)v1 + 24))(v1))
  {
    id v2 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v10[6] + 16))(v10[6]);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v10[6] + 24))(v10[6]);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = ___ZN8Archiver14_IDataBlobImpl6asDataEv_block_invoke;
    void v8[3] = &unk_1E59A4BA0;
    v8[4] = &v9;
    uint64_t v5 = [v2 initWithBytesNoCopy:v3 length:v4 deallocator:v8];
  }
  else
  {
    uint64_t v5 = [MEMORY[0x1E4F1C9B8] data];
  }
  int v6 = (void *)v5;
  _Block_object_dispose(&v9, 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }

  return v6;
}

void sub_19E5BC0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(a1);
}

uint64_t Archiver::MMappedFile::size(Archiver::MMappedFile *this)
{
  return *((void *)this + 5);
}

uint64_t Archiver::MMappedFile::data(Archiver::MMappedFile *this)
{
  return *((void *)this + 4);
}

void *Archiver::_IDataBlobImpl::asMMappedFile@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = this[6];
  if (!v3)
  {
    if (!this[4]) {
      operator new();
    }
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    int v6 = std::string::append(&v9, " already opened as stream attempted to open as mmapped file.");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    *(void *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, &__msg, &__ec);
    __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
  }
  uint64_t v4 = this[7];
  *a2 = v3;
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void sub_19E5BC28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t Archiver::MMappedFile::MMappedFile(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_1EF0DCA00;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  }
  *(void *)(a1 + 32) = -1;
  *(void *)(a1 + 40) = 0;
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v5 = (const char *)a2;
  }
  else {
    uint64_t v5 = *(const char **)a2;
  }
  int v6 = open(v5, 0);
  int v7 = v6;
  if (v6 == -1)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    uint64_t v11 = std::string::append(&v46, ":");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    uint64_t v13 = __error();
    unint64_t v14 = strerror(*v13);
    std::string::basic_string[abi:ne180100]<0>(&v45, v14);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v45;
    }
    else {
      uint64_t v15 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v45.__r_.__value_.__l.__size_;
    }
    size_t v17 = std::string::append(&__msg, (const std::string::value_type *)v15, size);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    *(void *)&v44.st_uid = *((void *)&v17->__r_.__value_.__l + 2);
    *(_OWORD *)&v44.st_dev = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    *(void *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, (const std::string *)&v44, &__ec);
    __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
  }
  memset(&v44, 0, sizeof(v44));
  if (fstat(v6, &v44) == -1)
  {
    close(v7);
    uint64_t v19 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    int v20 = std::string::append(&v45, ":");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    id v22 = __error();
    long long v23 = strerror(*v22);
    std::string::basic_string[abi:ne180100]<0>(&__ec, v23);
    if ((v43 & 0x80u) == 0) {
      p_ec = &__ec;
    }
    else {
      p_ec = *(std::error_code **)&__ec.__val_;
    }
    if ((v43 & 0x80u) == 0) {
      std::string::size_type cat = v43;
    }
    else {
      std::string::size_type cat = (std::string::size_type)__ec.__cat_;
    }
    unsigned int v26 = std::string::append(&v46, (const std::string::value_type *)p_ec, cat);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    *(void *)&v41.__val_ = 1;
    v41.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(v19, &__msg, &v41);
    __cxa_throw(v19, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
  }
  if ((v44.st_mode & 0xF000) != 0x8000)
  {
    close(v7);
    long long v28 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    long long v29 = std::string::append(&v46, ": not a regular file.");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    int v31 = std::iostream_category();
    v45.__r_.__value_.__r.__words[0] = 1;
    v45.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
    std::ios_base::failure::failure(v28, &__msg, (const std::error_code *)&v45);
    __cxa_throw(v28, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
  }
  uint64_t v8 = mmap(0, v44.st_size, 1, 2, v7, 0);
  *(void *)(a1 + 32) = v8;
  if (v8 == (void *)-1)
  {
    close(v7);
    unsigned int v32 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    long long v33 = std::string::append(&v45, ": error opening mmap: ");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    __n128 v35 = __error();
    unsigned int v36 = strerror(*v35);
    std::string::basic_string[abi:ne180100]<0>(&__ec, v36);
    if ((v43 & 0x80u) == 0) {
      int v37 = &__ec;
    }
    else {
      int v37 = *(std::error_code **)&__ec.__val_;
    }
    if ((v43 & 0x80u) == 0) {
      std::string::size_type v38 = v43;
    }
    else {
      std::string::size_type v38 = (std::string::size_type)__ec.__cat_;
    }
    long long v39 = std::string::append(&v46, (const std::string::value_type *)v37, v38);
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    *(void *)&v41.__val_ = 1;
    v41.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(v32, &__msg, &v41);
    __cxa_throw(v32, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
  }
  *(void *)(a1 + 40) = v44.st_size;
  close(v7);
  return a1;
}

void sub_19E5BC7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v27 - 57) < 0) {
    operator delete(*(void **)(v27 - 80));
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 89) < 0) {
    operator delete(*(void **)(v27 - 112));
  }
  if (*(char *)(v27 - 113) < 0)
  {
    operator delete(*(void **)(v27 - 136));
    if ((v26 & 1) == 0)
    {
LABEL_12:
      if (*(char *)(v23 + 31) < 0) {
        operator delete(*v24);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v25);
  goto LABEL_12;
}

void sub_19E5BC970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5BCCE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5BD334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL Archiver::_IArchiveDiskImpl::isENMLFormat(Archiver::_IArchiveDiskImpl *this)
{
  return *((_DWORD *)this + 12) == 2;
}

void sub_19E5BEBC0()
{
}

void sub_19E5BEBCC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  int v6 = *v5;
  if (!*v5)
  {
    int v7 = v5;
    int v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    uint64_t v8 = (std::string *)(v6 + 4);
    std::string v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_19E5BED0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>(uint64_t a1)
{
  id v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_19E5BF184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_19E5C0328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char *a45,uint64_t a46,uint64_t a47,char *a48,uint64_t a49,uint64_t a50,char *a51,uint64_t a52,uint64_t a53,char *a54,uint64_t a55,uint64_t a56,char *a57,uint64_t a58,uint64_t a59,char *a60,uint64_t a61,uint64_t a62,char *a63)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a45);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a48);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a51);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a54);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a57);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a60);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(a63);

  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,espresso_buffer_t *>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, void *a2, _OWORD **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v14, a2);
  int v6 = *v5;
  if (!*v5)
  {
    int v7 = v5;
    int v6 = operator new(0x40uLL);
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((void *)v6 + 7) = 0;
    uint64_t v10 = v14;
    *(void *)int v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v10;
    *int v7 = v6;
    uint64_t v11 = **(void **)a1;
    long long v12 = (uint64_t *)v6;
    if (v11)
    {
      *(void *)a1 = v11;
      long long v12 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
    ++*(void *)(a1 + 16);
  }
  return v6;
}

void std::vector<std::map<std::string,espresso_buffer_t *>>::resize(char ***a1)
{
  uint64_t v3 = *a1;
  id v2 = a1[1];
  uint64_t v4 = (char *)v2 - (char *)*a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
  if (v5 <= 1)
  {
    int v6 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * (v6 - v2) >= 2 - v5)
    {
      long long v29 = &v2[3 * (2 - v5)];
      uint64_t v30 = 48 - 8 * (v4 >> 3);
      int v31 = v2 + 1;
      do
      {
        *int v31 = 0;
        v31[1] = 0;
        *(v31 - 1) = v31;
        v31 += 3;
        v30 -= 24;
      }
      while (v30);
      a1[1] = v29;
      return;
    }
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 - v3);
    unint64_t v8 = 0x5555555555555556 * (v6 - v3);
    if (v8 <= 2) {
      unint64_t v8 = 2;
    }
    if (v7 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(24 * v9);
    uint64_t v11 = &v10[24 * v5];
    long long v12 = (char **)(v10 + 48);
    char v13 = v11 + 8;
    unint64_t v14 = v5 - 2;
    do
    {
      *char v13 = 0;
      v13[1] = 0;
      *(v13 - 1) = v13;
      v13 += 3;
    }
    while (!__CFADD__(v14++, 1));
    long long v16 = &v10[24 * v9];
    long long v18 = *a1;
    size_t v17 = a1[1];
    if (v17 == *a1)
    {
      *a1 = (char **)v11;
      a1[1] = v12;
      a1[2] = (char **)v16;
      if (!v17) {
        return;
      }
    }
    else
    {
      uint64_t v19 = 0;
      do
      {
        int v20 = &v11[v19 * 8];
        *((void *)v20 - 3) = v17[v19 - 3];
        long long v21 = (char *)&v17[v19 - 2];
        uint64_t v22 = *(void *)v21;
        *(void *)&v11[v19 * 8 - 16] = *(void *)v21;
        uint64_t v23 = (uint64_t)&v11[v19 * 8 - 16];
        int v24 = v17[v19 - 1];
        *((void *)v20 - 1) = v24;
        if (v24)
        {
          *(void *)(v22 + 16) = v23;
          v17[v19 - 3] = v21;
          *(void *)long long v21 = 0;
          v17[v19 - 1] = 0;
        }
        else
        {
          *((void *)v20 - 3) = v23;
        }
        v19 -= 3;
      }
      while (&v17[v19] != v18);
      int v25 = *a1;
      size_t v17 = a1[1];
      *a1 = (char **)&v11[v19 * 8];
      a1[1] = v12;
      a1[2] = (char **)v16;
      if (v17 != v25)
      {
        do
        {
          int v26 = v17 - 3;
          std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(v17 - 2));
          size_t v17 = v26;
        }
        while (v26 != v25);
        size_t v17 = v25;
      }
      if (!v17) {
        return;
      }
    }
    operator delete(v17);
    return;
  }
  if (v4 != 48)
  {
    uint64_t v27 = v3 + 6;
    if (v2 != v3 + 6)
    {
      do
      {
        long long v28 = v2 - 3;
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(v2 - 2));
        id v2 = v28;
      }
      while (v28 != v27);
    }
    a1[1] = v27;
  }
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  unint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *__n128 result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    __n128 result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *uint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    unint64_t v8 = *a1;
    int v9 = 0;
    unint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    int v4 = *a1;
    *a1 = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_19E5C0A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + _Block_object_dispose(&STACK[0x278], 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    uint64_t *v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + _Block_object_dispose(&STACK[0x278], 8) = i;
    uint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + _Block_object_dispose(&STACK[0x278], 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void sub_19E5C0D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5C0E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5C12D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  if (__n > this->__end_cap_.__value_ - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(__n);
    int v5 = (int *)&v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    int v7 = (int *)&v4[4 * v6];
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<std::string>::pointer end = this->__end_;
    uint64_t v10 = v5;
    if (end != this->__begin_)
    {
      uint64_t v10 = v5;
      do
      {
        int v11 = *--end;
        *--uint64_t v10 = v11;
      }
      while (end != begin);
    }
    this->__begin_ = v10;
    this->__end_ = v5;
    this->__end_cap_.__value_ = v7;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void CoreML::MIL::Opsets::CoreML6_trainOpset::~CoreML6_trainOpset(CoreML::MIL::Opsets::CoreML6_trainOpset *this)
{
  MIL::IROpset::~IROpset(this);

  JUMPOUT(0x19F3C1920);
}

void sub_19E5C184C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E5C1914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5C19AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5C1A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5C1BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5C1CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E5C1F34()
{
  __cxa_end_catch();
  JUMPOUT(0x19E5C1E20);
}

void sub_19E5C1F50()
{
}

void sub_19E5C1F58()
{
}

uint64_t *IArchive::IArchive(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x50uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD8F0;
  *a1 = Archiver::_IArchiveDiskImpl::_IArchiveDiskImpl((uint64_t)&v6[1], a2, a3);
  a1[1] = (uint64_t)v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  a1[4] = 0;
  a1[3] = 0;
  a1[2] = (uint64_t)(a1 + 3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return a1;
}

void sub_19E5C2008(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_19E5C22D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5C241C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5C26E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5C2904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5C2A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5C2C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v23 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_19E5C2D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5C3594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E5C4DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint8_t buf,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::unique_ptr<e5rt_e5_compiler,MLE5ObjectDeleter<e5rt_e5_compiler>>::reset[abi:ne180100](&a26);
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_e5_compiler_options,MLE5ObjectDeleter<e5rt_e5_compiler_options>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1) {
    return (uint64_t *)e5rt_e5_compiler_options_release();
  }
  return result;
}

uint64_t *std::unique_ptr<e5rt_e5_compiler,MLE5ObjectDeleter<e5rt_e5_compiler>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1) {
    return (uint64_t *)e5rt_e5_compiler_release();
  }
  return result;
}

void sub_19E5C61C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_19E5C7978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  std::unique_ptr<std::map<std::string,_BlobShape>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::map<std::string,_BlobShape>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(v2 + 8));
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void sub_19E5C8144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_19E5C872C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5C8D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_19E5C9524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

CoreML::Specification::CustomModel *CoreML::Specification::CustomModel::CustomModel(CoreML::Specification::CustomModel *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EF0CE8F8;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x278], 8) = 0;
  uint64_t v2 = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::Init((uint64_t)this + 24);
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x278], 8) = 0;
  if (this != (CoreML::Specification::CustomModel *)&CoreML::Specification::_CustomModel_default_instance_) {
    CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults((CoreML::Specification::protobuf_CustomModel_2eproto *)v2);
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_19E5C9710(_Unwind_Exception *a1)
{
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::Init(uint64_t a1)
{
  uint64_t v2 = *(google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::InnerMap(Aligned, v2);
  __n128 result = google::protobuf::Arena::AllocateAligned(v2, 0, 24);
  *__n128 result = (google::protobuf::Arena *)Aligned;
  result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap>;
  int v5 = (unint64_t *)((char *)v2 + 32);
  do
    unint64_t v6 = __ldxr(v5);
  while (__stxr((unint64_t)result, v5));
  result[2] = (google::protobuf::Arena *)v6;
  *(void *)(a1 + 16) = Aligned;
  return result;
}

void sub_19E5C97E4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

void CoreML::Specification::StringToInt64Map::StringToInt64Map(CoreML::Specification::StringToInt64Map *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EF0D2030;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x278], 8) = 0;
  operator new();
}

void sub_19E5C98AC(_Unwind_Exception *a1)
{
  google::protobuf::Map<std::string,long long>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *google::protobuf::Map<std::string,long long>::InnerMap::InnerMap(void *a1, google::protobuf::Arena *a2)
{
  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  uint32_t v4 = arc4random();
  unsigned int v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  long long v10 = xmmword_19EC7B890;
  uint64_t v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  int v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)int v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19E5C99BC(void *a1)
{
  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E5C9978);
}

void CoreML::Specification::Int64ToDoubleMap::Int64ToDoubleMap(CoreML::Specification::Int64ToDoubleMap *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EF0D1A40;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x278], 8) = 0;
  operator new();
}

void sub_19E5C9A88(_Unwind_Exception *a1)
{
  google::protobuf::Map<long long,double>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *google::protobuf::Map<long long,double>::InnerMap::InnerMap(void *a1, google::protobuf::Arena *a2)
{
  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  uint32_t v4 = arc4random();
  unsigned int v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  long long v10 = xmmword_19EC7B890;
  uint64_t v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  int v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)int v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19E5C9B98(void *a1)
{
  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E5C9B54);
}

void CoreML::Specification::Int64ToStringMap::Int64ToStringMap(CoreML::Specification::Int64ToStringMap *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EF0D1AD8;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x278], 8) = 0;
  operator new();
}

void sub_19E5C9C64(_Unwind_Exception *a1)
{
  google::protobuf::Map<long long,std::string>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *google::protobuf::Map<long long,std::string>::InnerMap::InnerMap(void *a1, google::protobuf::Arena *a2)
{
  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  uint32_t v4 = arc4random();
  unsigned int v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  long long v10 = xmmword_19EC7B890;
  uint64_t v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  int v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)int v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19E5C9D74(void *a1)
{
  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E5C9D30);
}

void CoreML::Specification::StringToDoubleMap::StringToDoubleMap(CoreML::Specification::StringToDoubleMap *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EF0D2A48;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x278], 8) = 0;
  operator new();
}

void sub_19E5C9E40(_Unwind_Exception *a1)
{
  google::protobuf::Map<std::string,long long>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *google::protobuf::Map<std::string,double>::InnerMap::InnerMap(void *a1, google::protobuf::Arena *a2)
{
  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  uint32_t v4 = arc4random();
  unsigned int v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  long long v10 = xmmword_19EC7B890;
  uint64_t v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  int v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)int v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19E5C9F50(void *a1)
{
  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E5C9F0CLL);
}

void CoreML::Specification::MILSpec::protobuf_MIL_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::MILSpec::protobuf_MIL_2eproto::TableStruct *this)
{
  qword_1EB4DDA40 = 0;
  unk_1EB4DDA48 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DDA50 = 0;
  unk_1EB4DDA58 = 0;
  dword_1EB4DDA60 = 0;
  CoreML::Specification::MILSpec::_Program_FunctionsEntry_default_instance_ = (uint64_t)&unk_1EF0DC5E8;
  byte_1EB4DDA68 = 1;
  qword_1EB4DDA78 = 0;
  unk_1EB4DDA80 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DDA88 = 0;
  unk_1EB4DDA90 = 0;
  dword_1EB4DDA98 = 0;
  CoreML::Specification::MILSpec::_Program_AttributesEntry_default_instance_ = (uint64_t)&unk_1EF0DC498;
  byte_1EB4DDAA0 = 1;
  CoreML::Specification::MILSpec::Program::Program((CoreML::Specification::MILSpec::Program *)&CoreML::Specification::MILSpec::_Program_default_instance_);
}

void CoreML::Specification::MILSpec::Operation::Operation(CoreML::Specification::MILSpec::Operation *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EF0DA828;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x278], 8) = 0;
  operator new();
}

void sub_19E5CA804(_Unwind_Exception *a1)
{
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v3 + 3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(v3);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::InnerMap(void *a1, google::protobuf::Arena *a2)
{
  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  uint32_t v4 = arc4random();
  unsigned int v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  long long v10 = xmmword_19EC7B890;
  uint64_t v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  int v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)int v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19E5CA93C(void *a1)
{
  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E5CA8F8);
}

CoreML::Specification::MILSpec::Function *CoreML::Specification::MILSpec::Function::Function(CoreML::Specification::MILSpec::Function *this)
{
  *(void *)this = &unk_1EF0DA5C8;
  *(_OWORD *)((char *)this + _Block_object_dispose(&STACK[0x278], 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::Init((uint64_t)this + 48);
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 22) = 0;
  uint64_t v2 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)this + 80);
  *((_DWORD *)this + 22) = 0;
  if (this != (CoreML::Specification::MILSpec::Function *)&CoreML::Specification::MILSpec::_Function_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults((CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)v2);
  }
  *((void *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 2_Block_object_dispose(&STACK[0x278], 8) = 0;
  return this;
}

void sub_19E5CAA14(_Unwind_Exception *a1)
{
  unsigned int v5 = v4;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(v5);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::~Map(v3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::Init(uint64_t a1)
{
  uint64_t v2 = *(google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InnerMap(Aligned, v2);
  __n128 result = google::protobuf::Arena::AllocateAligned(v2, 0, 24);
  *__n128 result = (google::protobuf::Arena *)Aligned;
  result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap>;
  unsigned int v5 = (unint64_t *)((char *)v2 + 32);
  do
    unint64_t v6 = __ldxr(v5);
  while (__stxr((unint64_t)result, v5));
  result[2] = (google::protobuf::Arena *)v6;
  *(void *)(a1 + 16) = Aligned;
  return result;
}

void sub_19E5CAB08(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

void *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InnerMap(void *a1, google::protobuf::Arena *a2)
{
  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  uint32_t v4 = arc4random();
  unsigned int v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  long long v10 = xmmword_19EC7B890;
  uint64_t v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  int v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)int v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19E5CABF8(void *a1)
{
  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E5CABB4);
}

void *google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::InnerMap::InnerMap(void *a1, google::protobuf::Arena *a2)
{
  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  uint32_t v4 = arc4random();
  unsigned int v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  long long v10 = xmmword_19EC7B890;
  uint64_t v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  int v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)int v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19E5CACEC(void *a1)
{
  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E5CACA8);
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init(uint64_t a1)
{
  uint64_t v2 = *(google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InnerMap(Aligned, v2);
  __n128 result = google::protobuf::Arena::AllocateAligned(v2, 0, 24);
  *__n128 result = (google::protobuf::Arena *)Aligned;
  result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap>;
  unsigned int v5 = (unint64_t *)((char *)v2 + 32);
  do
    unint64_t v6 = __ldxr(v5);
  while (__stxr((unint64_t)result, v5));
  result[2] = (google::protobuf::Arena *)v6;
  *(void *)(a1 + 16) = Aligned;
  return result;
}

void sub_19E5CADC4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

void *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InnerMap(void *a1, google::protobuf::Arena *a2)
{
  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  uint32_t v4 = arc4random();
  unsigned int v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  long long v10 = xmmword_19EC7B890;
  uint64_t v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  int v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)int v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19E5CAEB4(void *a1)
{
  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E5CAE70);
}

void *google::protobuf::Map<std::string,std::string>::InnerMap::InnerMap(void *a1, google::protobuf::Arena *a2)
{
  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  uint32_t v4 = arc4random();
  unsigned int v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  long long v10 = xmmword_19EC7B890;
  uint64_t v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  int v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)int v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19E5CAFA8(void *a1)
{
  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E5CAF64);
}

uint64_t std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>(uint64_t a1, void *a2)
{
  uint64_t result = a2[1];
  uint64_t v5 = result - *a2;
  if (result != *a2)
  {
    unint64_t v6 = v5 + 1;
    if (v5 == -1)
    {
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a1, 0x40uLL);
      return std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      unint64_t v7 = __clz(v6);
      uint64_t v8 = 63;
      if (((v6 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v8 = 64;
      }
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a1, v8 - v7);
      do
        unint64_t v9 = std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v6);
      return *a2 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = a3;
  if (a3 % 0x1E) {
    unint64_t v3 = a3 / 0x1E + 1;
  }
  else {
    unint64_t v3 = a3 / 0x1E;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16) = a3 / v3;
  *(void *)(result + 24) = v3;
  unint64_t v5 = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x40) {
    unint64_t v5 = 0;
  }
  *(void *)(result + 40) = v5;
  if ((v5 ^ 0x7FFFFFFE) > v5 / v3)
  {
    ++v3;
    unint64_t v4 = a3 / v3;
    *(void *)(result + 16) = a3 / v3;
    *(void *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      *(void *)(result + 32) = v3 - a3 + (v3 << 6);
      *(void *)(result + 40) = 0;
      LOBYTE(v4) = 64;
      goto LABEL_15;
    }
    *(void *)(result + 40) = (-1 << v4) & 0x7FFFFFFE;
  }
  *(void *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 >= 0x3F)
  {
LABEL_15:
    *(void *)(result + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
    unsigned int v6 = -1;
    *(_DWORD *)(result + 56) = 0xFFFFFFFF >> -(char)v4;
    goto LABEL_16;
  }
  *(void *)(result + 4_Block_object_dispose(&STACK[0x278], 8) = 0x3FFFFFFFuLL >> v4 << (v4 + 1);
  unsigned int v6 = -1;
  unsigned int v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4) {
    unsigned int v7 = 0;
  }
  *(_DWORD *)(result + 56) = v7;
  if (v4 <= 0x1E) {
    unsigned int v6 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
LABEL_16:
  *(_DWORD *)(result + 60) = v6;
  return result;
}

uint64_t std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__eval(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    unint64_t v4 = *(unsigned int **)a1;
    unint64_t v5 = *(void *)(a1 + 40);
    unint64_t v6 = *(void *)(a1 + 16);
    unsigned int v7 = **(_DWORD **)a1;
    unsigned int v8 = *(_DWORD *)(*(void *)a1 + 1028);
    do
    {
      do
      {
        unint64_t v9 = (char *)v4
           + (((unint64_t)((((unint64_t)(v8 - 1) << 7) * (unsigned __int128)0x8000000201uLL) >> 64) >> 3) & 0xFFC);
        v4[257] = *((_DWORD *)v9 + 1);
        unsigned int v10 = v7 / 0x1F31D;
        unsigned int v11 = 16807 * (v7 % 0x1F31D);
        v10 *= 2836;
        BOOL v12 = v11 >= v10;
        unsigned int v13 = v11 - v10;
        if (v12) {
          int v14 = 0;
        }
        else {
          int v14 = 0x7FFFFFFF;
        }
        unsigned int v7 = v14 + v13;
        *((_DWORD *)v9 + 1) = v7;
        unsigned int v8 = v4[257];
        unint64_t v15 = v8 - 1;
      }
      while (v5 <= v15);
      uint64_t v16 = v2 << v6;
      if (v6 >= 0x40) {
        uint64_t v16 = 0;
      }
      uint64_t v2 = v16 + (*(_DWORD *)(a1 + 56) & v15);
      ++v3;
    }
    while (v3 != v1);
    *unint64_t v4 = v7;
  }
  else
  {
    uint64_t v2 = 0;
  }
  unint64_t v17 = *(void *)(a1 + 24);
  if (v1 < v17)
  {
    uint64_t v18 = *(unsigned int **)a1;
    unint64_t v19 = *(void *)(a1 + 48);
    unint64_t v20 = *(void *)(a1 + 16);
    unsigned int v21 = **(_DWORD **)a1;
    unsigned int v22 = *(_DWORD *)(*(void *)a1 + 1028);
    do
    {
      do
      {
        uint64_t v23 = (char *)v18
            + (((unint64_t)((((unint64_t)(v22 - 1) << 7) * (unsigned __int128)0x8000000201uLL) >> 64) >> 3) & 0xFFC);
        v18[257] = *((_DWORD *)v23 + 1);
        unsigned int v24 = v21 / 0x1F31D;
        unsigned int v25 = 16807 * (v21 % 0x1F31D);
        v24 *= 2836;
        BOOL v12 = v25 >= v24;
        unsigned int v26 = v25 - v24;
        if (v12) {
          int v27 = 0;
        }
        else {
          int v27 = 0x7FFFFFFF;
        }
        unsigned int v21 = v27 + v26;
        *((_DWORD *)v23 + 1) = v21;
        unsigned int v22 = v18[257];
        unint64_t v28 = v22 - 1;
      }
      while (v19 <= v28);
      uint64_t v29 = v2 << (v20 + 1);
      if (v20 >= 0x3F) {
        uint64_t v29 = 0;
      }
      uint64_t v2 = v29 + (*(_DWORD *)(a1 + 60) & v28);
      ++v1;
    }
    while (v1 != v17);
    unsigned int *v18 = v21;
  }
  return v2;
}

unsigned int *std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](unsigned int *result)
{
  unsigned int v1 = *result;
  for (uint64_t i = 1; i != 257; ++i)
  {
    unsigned int v3 = v1 / 0x1F31D;
    unsigned int v4 = 16807 * (v1 % 0x1F31D);
    v3 *= 2836;
    BOOL v5 = v4 >= v3;
    unsigned int v6 = v4 - v3;
    if (v5) {
      int v7 = 0;
    }
    else {
      int v7 = 0x7FFFFFFF;
    }
    unsigned int v1 = v7 + v6;
    result[i] = v1;
  }
  unsigned int v8 = 16807 * (v1 % 0x1F31D);
  unsigned int v9 = 2836 * (v1 / 0x1F31D);
  BOOL v5 = v8 >= v9;
  unsigned int v10 = v8 - v9;
  if (v5) {
    int v11 = 0;
  }
  else {
    int v11 = 0x7FFFFFFF;
  }
  unsigned int v12 = v11 + v10;
  *uint64_t result = v12;
  result[257] = v12;
  return result;
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_19E5CB3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

google::protobuf::Arena **google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(google::protobuf::Arena *a1, uint64_t a2, size_t __sz)
{
  if (a1) {
    return google::protobuf::Arena::AllocateAligned(a1, MEMORY[0x1E4FBA3A0], 8 * a2);
  }
  else {
    return (google::protobuf::Arena **)operator new(8 * a2);
  }
}

void CoreML::Specification::MILSpec::Program::Program(CoreML::Specification::MILSpec::Program *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EF0DA498;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + _Block_object_dispose(&STACK[0x278], 8) = 0;
  operator new();
}

void sub_19E5CB4C4(_Unwind_Exception *a1)
{
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(v3);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::InnerMap(void *a1, google::protobuf::Arena *a2)
{
  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  uint32_t v4 = arc4random();
  unsigned int v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  long long v10 = xmmword_19EC7B890;
  uint64_t v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  unsigned int v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)unsigned int v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19E5CB5E4(void *a1)
{
  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E5CB5A0);
}

CoreML::Specification::MILSpec::Block *CoreML::Specification::MILSpec::Block::Block(CoreML::Specification::MILSpec::Block *this)
{
  *(void *)this = &unk_1EF0DA368;
  *(_OWORD *)((char *)this + _Block_object_dispose(&STACK[0x278], 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 8_Block_object_dispose(&STACK[0x278], 8) = 0u;
  *((_DWORD *)this + 26) = 0;
  uint64_t v2 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)this + 96);
  *((_DWORD *)this + 26) = 0;
  if (this != (CoreML::Specification::MILSpec::Block *)&CoreML::Specification::MILSpec::_Block_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults((CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)v2);
  }
  *((_DWORD *)this + 30) = 0;
  return this;
}

void sub_19E5CB6A4(_Unwind_Exception *a1)
{
  unsigned int v5 = v4;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(v5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)(v2 + 64));
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::TensorType *CoreML::Specification::MILSpec::TensorType::TensorType(CoreML::Specification::MILSpec::TensorType *this)
{
  *(void *)this = &unk_1EF0D9820;
  *(_OWORD *)((char *)this + _Block_object_dispose(&STACK[0x278], 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  uint64_t v2 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::Init((uint64_t)this + 48);
  *((_DWORD *)this + 14) = 0;
  if (this != (CoreML::Specification::MILSpec::TensorType *)&CoreML::Specification::MILSpec::_TensorType_default_instance_) {
    CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults((CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)v2);
  }
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  return this;
}

void sub_19E5CB778(_Unwind_Exception *a1)
{
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::~Map(v3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::MIL::Opsets::CoreML8Opset::~CoreML8Opset(CoreML::MIL::Opsets::CoreML8Opset *this)
{
  MIL::IROpset::~IROpset(this);

  JUMPOUT(0x19F3C1920);
}

void CoreML::MIL::Opsets::CoreML7Opset::~CoreML7Opset(CoreML::MIL::Opsets::CoreML7Opset *this)
{
  MIL::IROpset::~IROpset(this);

  JUMPOUT(0x19F3C1920);
}

void CoreML::MIL::Opsets::CoreML5Opset::~CoreML5Opset(CoreML::MIL::Opsets::CoreML5Opset *this)
{
  MIL::IROpset::~IROpset(this);

  JUMPOUT(0x19F3C1920);
}

void sub_19E5CB8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLE5ProgramLibraryOnDeviceAOTCompilationImpl;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19E5CBC24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5CBED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5CC0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19E5CC49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  _Block_object_dispose(&a16, 8);
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }

  _Unwind_Resume(a1);
}

void sub_19E5CC674(void *a1)
{
}

void sub_19E5CC680(_Unwind_Exception *a1)
{
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_19E5CC7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5CC808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  long long v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)MLE5ProgramLibrary;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

MIL::IRDictionaryValue *std::__shared_ptr_pointer<MIL::IRDictionaryValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(MIL::IRDictionaryValue **)(a1 + 24);
  if (result)
  {
    MIL::IRDictionaryValue::~IRDictionaryValue(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void sub_19E5CC94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5CCE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  InputNameToShapes::~InputNameToShapes((char **)&__p);
  unsigned int v24 = *(std::__shared_weak_count **)(v22 - 96);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }

  _Unwind_Resume(a1);
}

void sub_19E5CD138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  std::random_device v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }

  _Unwind_Resume(a1);
}

void sub_19E5CD4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  unsigned int v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    unsigned int v8 = result + 1;
    size_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unsigned int v9 = (uint64_t *)v6[1];
    }
    else {
      unsigned int v9 = v6;
    }
    unsigned int v26 = result;
    int v27 = v9;
    unint64_t v28 = v9;
    if (v9)
    {
      int v27 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        uint64_t v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 4));
          *((_DWORD *)v9 + 14) = *((_DWORD *)v10 + 14);
          int v11 = *v8;
          std::random_device v12 = v5 + 1;
          unsigned int v13 = v5 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                std::random_device v12 = (uint64_t **)v11;
                if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v28 + 4, v11 + 4)) {
                  break;
                }
                int v11 = *v12;
                unsigned int v13 = v12;
                if (!*v12) {
                  goto LABEL_14;
                }
              }
              int v11 = v12[1];
            }
            while (v11);
            unsigned int v13 = v12 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v5, (uint64_t)v12, v13, v28);
          unsigned int v9 = v27;
          unint64_t v28 = v27;
          if (v27) {
            int v27 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v27);
          }
          int v14 = (void *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              int v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (void *)v10[2];
              BOOL v15 = *a2 == (void)v10;
              uint64_t v10 = a2;
            }
            while (!v15);
          }
          if (!v9) {
            break;
          }
          uint64_t v10 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v26);
  }
  if (a2 != a3)
  {
    uint64_t v16 = v5 + 1;
    do
    {
      unint64_t v17 = (char *)operator new(0x40uLL);
      uint64_t v18 = v17;
      unint64_t v19 = v17 + 32;
      if (*((char *)a2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v17 + 32), (const std::string::value_type *)a2[4], a2[5]);
      }
      else
      {
        long long v20 = *((_OWORD *)a2 + 2);
        *((void *)v17 + 6) = a2[6];
        *(_OWORD *)unint64_t v19 = v20;
      }
      *((_DWORD *)v18 + 14) = *((_DWORD *)a2 + 14);
      unsigned int v21 = *v16;
      uint64_t v22 = v5 + 1;
      uint64_t v23 = v5 + 1;
      if (*v16)
      {
        do
        {
          while (1)
          {
            uint64_t v22 = (uint64_t **)v21;
            if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v19, v21 + 4)) {
              break;
            }
            unsigned int v21 = *v22;
            uint64_t v23 = v22;
            if (!*v22) {
              goto LABEL_35;
            }
          }
          unsigned int v21 = v22[1];
        }
        while (v21);
        uint64_t v23 = v22 + 1;
      }
LABEL_35:
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v5, (uint64_t)v22, v23, (uint64_t *)v18);
      unsigned int v24 = (void *)a2[1];
      if (v24)
      {
        do
        {
          unsigned int v25 = v24;
          unsigned int v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          unsigned int v25 = (void *)a2[2];
          BOOL v15 = *v25 == (void)a2;
          a2 = v25;
        }
        while (!v15);
      }
      a2 = v25;
    }
    while (v25 != a3);
  }
  return result;
}

void sub_19E5CD750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](0, v10);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    unsigned int v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        uint32_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint32_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; unsigned int v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          unsigned int v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<std::string,InputNameToShapes>,std::__map_value_compare<std::string,std::__value_type<std::string,InputNameToShapes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,InputNameToShapes>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, _OWORD **a3)
{
  unsigned int v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    size_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0xC8uLL);
    v11[1] = a1 + 1;
    unsigned int v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((void *)v6 + _Block_object_dispose(&STACK[0x278], 8) = 0;
    *((void *)v6 + 7) = v6 + 4;
    *((void *)v6 + 11) = 0;
    *((void *)v6 + 9) = 0;
    *((void *)v6 + 10) = (char *)v6 + 88;
    *((void *)v6 + 14) = 0;
    *((void *)v6 + 12) = 0;
    *((void *)v6 + 13) = v6 + 7;
    *((void *)v6 + 17) = 0;
    *((void *)v6 + 20) = 0;
    *((void *)v6 + 15) = 0;
    *((void *)v6 + 16) = (char *)v6 + 136;
    *((void *)v6 + 1_Block_object_dispose(&STACK[0x278], 8) = 0;
    *((void *)v6 + 19) = v6 + 10;
    *((void *)v6 + 23) = 0;
    *((void *)v6 + 24) = 0;
    *((void *)v6 + 21) = 0;
    *((void *)v6 + 22) = (char *)v6 + 184;
    char v12 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,InputNameToShapes>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,InputNameToShapes>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

uint64_t std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v2);
  }
  return a1;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_19E5CD9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + _Block_object_dispose(&STACK[0x278], 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  int v11 = this;
  char v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      char v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_19E5CDAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

void sub_19E5CDF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a27 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E5CE6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>>>::~__hash_table(v16 - 176);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  unsigned int v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 16));
      unint64_t v8 = v7;
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        unint64_t v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v7;
          if (v7 >= v9) {
            unint64_t v2 = v7 % v9;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v7;
        }
        char v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v2);
        if (v12)
        {
          for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v14 = *((void *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v5 + 16)) {
                goto LABEL_46;
              }
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9) {
                  v14 %= v9;
                }
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2) {
                break;
              }
            }
          }
        }
      }
      BOOL v15 = operator new(0x38uLL);
      v29[0] = v15;
      v29[1] = a1 + 16;
      char v30 = 0;
      *BOOL v15 = 0;
      v15[1] = v8;
      uint64_t v16 = (std::string *)(v15 + 2);
      if ((char)v5[39] < 0)
      {
        std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)v5 + 2), *((void *)v5 + 3));
      }
      else
      {
        long long v17 = *((_OWORD *)v5 + 1);
        v15[4] = *((void *)v5 + 4);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      v15[5] = *((void *)v5 + 5);
      uint64_t v18 = *((void *)v5 + 6);
      v15[6] = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      char v30 = 1;
      float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v20 = *(float *)(a1 + 32);
      if (!v9 || (float)(v20 * (float)v9) < v19)
      {
        BOOL v21 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v21 = 1;
        }
        unint64_t v22 = v21 | (2 * v9);
        unint64_t v23 = vcvtps_u32_f32(v19 / v20);
        if (v22 <= v23) {
          size_t v24 = v23;
        }
        else {
          size_t v24 = v22;
        }
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v24);
        unint64_t v9 = *(void *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
      }
      uint64_t v25 = *(void *)a1;
      unsigned int v26 = *(void **)(*(void *)a1 + 8 * v2);
      if (v26)
      {
        *BOOL v15 = *v26;
      }
      else
      {
        *BOOL v15 = *v6;
        *uint64_t v6 = v15;
        *(void *)(v25 + 8 * v2) = v6;
        if (!*v15) {
          goto LABEL_45;
        }
        unint64_t v27 = *(void *)(*v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v27 >= v9) {
            v27 %= v9;
          }
        }
        else
        {
          v27 &= v9 - 1;
        }
        unsigned int v26 = (void *)(*(void *)a1 + 8 * v27);
      }
      *unsigned int v26 = v15;
LABEL_45:
      v29[0] = 0;
      ++*(void *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
LABEL_46:
      unsigned int v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_19E5CEA64(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::Blob::StorageData const>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::Blob::StorageData const>>,0>(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,InputNameToShapes>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,InputNameToShapes>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,InputNameToShapes>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::Blob::StorageData const>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t ___ZN12_GLOBAL__N_128serializeProgramForDebuggingENSt3__110shared_ptrIKN3MIL9IRProgramEEEP20MLModelConfiguration_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  return result;
}

id get_ANEDeviceInfoClass(void)
{
  uint64_t v4 = 0;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)get_ANEDeviceInfoClass(void)::softClass;
  uint64_t v7 = get_ANEDeviceInfoClass(void)::softClass;
  if (!get_ANEDeviceInfoClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = ___ZL22get_ANEDeviceInfoClassv_block_invoke;
    v3[3] = &unk_1E59A51A0;
    v3[4] = &v4;
    ___ZL22get_ANEDeviceInfoClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_19E5CEE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class ___ZL22get_ANEDeviceInfoClassv_block_invoke(uint64_t a1)
{
  if (!AppleNeuralEngineLibraryCore(char **)::frameworkLibrary) {
    AppleNeuralEngineLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  Class result = objc_getClass("_ANEDeviceInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  get_ANEDeviceInfoClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void CoreML::NNCompiler::Backend::MIL::LoadProgram()
{
  CoreML::MIL::CoreMLUtil::MakeContext((CoreML::MIL::CoreMLUtil *)&v0);
}

void sub_19E5CF3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::string *a10, uint64_t a11, uint64_t a12, std::string *a13, uint64_t a14, uint64_t a15, std::string *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::MIL::CoreMLUtil::MakeContext(CoreML::MIL::CoreMLUtil *this)
{
}

void sub_19E5CF9C0(_Unwind_Exception *exception_object)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v2;
  *unint64_t v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

void __MLLoggingGetInstrumentsActiveChannel_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.coreml", "DynamicTracing");
  id v1 = (void *)MLLoggingGetInstrumentsActiveChannel_instrumentsActiveChannel;
  MLLoggingGetInstrumentsActiveChannel_instrumentsActiveChannel = (uint64_t)v0;

  if (!MLLoggingGetInstrumentsActiveChannel_instrumentsActiveChannel
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)unint64_t v2 = 0;
    _os_log_error_impl(&dword_19E58B000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Couldn't create os_log_t instrumentsActiveChannel", v2, 2u);
  }
}

void __MLLoggingGetCoreChannel_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.coreml", "coreml");
  id v1 = (void *)MLLoggingGetCoreChannel_coreChannel;
  MLLoggingGetCoreChannel_coreChannel = (uint64_t)v0;

  if (!MLLoggingGetCoreChannel_coreChannel && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)unint64_t v2 = 0;
    _os_log_error_impl(&dword_19E58B000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Couldn't create os_log_t coreChannel", v2, 2u);
  }
}

void std::__tree<std::__value_type<std::string,InputNameToShapes>,std::__map_value_compare<std::string,std::__value_type<std::string,InputNameToShapes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,InputNameToShapes>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,InputNameToShapes>,std::__map_value_compare<std::string,std::__value_type<std::string,InputNameToShapes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,InputNameToShapes>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,InputNameToShapes>,std::__map_value_compare<std::string,std::__value_type<std::string,InputNameToShapes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,InputNameToShapes>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,InputNameToShapes>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t *std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<std::unique_ptr<MIL::IRTensorValue const>,std::unique_ptr<MIL::IRTensorValue const>,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unsigned int v5 = std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(a1, a2);
  std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(v5 + 2, a3);
  return a1;
}

void sub_19E5CFBB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *Class result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  Class result = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::CoreMLModels::_WordEmbedding_default_instance_ = (uint64_t)&unk_1EF0CEF80;
  qword_1EB4DDE00 = 0;
  qword_1EB4DDE08 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DDE10 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DDE18 = 0;
  byte_1EB4DDE20 = 1;
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct *this)
{
  Class result = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_Vggish_default_instance_ = (uint64_t)&unk_1EF0CF440;
  qword_1EB4DDEE0 = 0;
  dword_1EB4DDEE8 = 0;
  byte_1EB4DDEF0 = 1;
  CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_ = (uint64_t)&unk_1EF0CF310;
  qword_1EB4DDEB0 = 0;
  qword_1EB4DDEC0 = 0;
  byte_1EB4DDEC8 = 1;
  return result;
}

double CoreML::Specification::protobuf_SVM_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_SVM_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::_LinearKernel_default_instance_ = (uint64_t)&unk_1EF0CF6A0;
  qword_1EB4DE580 = 0;
  dword_1EB4DE588 = 0;
  byte_1EB4DE590 = 1;
  qword_1EB4DE240 = 0;
  qword_1EB4DE248 = 0;
  CoreML::Specification::_RBFKernel_default_instance_ = (uint64_t)&unk_1EF0DAE18;
  dword_1EB4DE250 = 0;
  byte_1EB4DE258 = 1;
  CoreML::Specification::_PolyKernel_default_instance_ = (uint64_t)&unk_1EF0CE7C8;
  double result = 0.0;
  unk_1EB4DE310 = 0u;
  unk_1EB4DE320 = 0u;
  byte_1EB4DE330 = 1;
  CoreML::Specification::_SigmoidKernel_default_instance_ = (uint64_t)&unk_1EF0CFEF0;
  *(void *)algn_1EB4DE848 = 0;
  qword_1EB4DE850 = 0;
  unk_1EB4DE858 = 0;
  dword_1EB4DE860 = 0;
  byte_1EB4DE868 = 1;
  CoreML::Specification::_Kernel_default_instance_ = (uint64_t)&unk_1EF0D95C0;
  unk_1EB4DE060 = 0;
  qword_1EB4DE070 = 0;
  byte_1EB4DE078 = 1;
  CoreML::Specification::_SparseNode_default_instance_ = (uint64_t)&unk_1EF0CE860;
  *(void *)algn_1EB4DCF58 = 0;
  qword_1EB4DCF60 = 0;
  unk_1EB4DCF68 = 0;
  byte_1EB4DCF70 = 1;
  CoreML::Specification::_SparseVector_default_instance_ = (uint64_t)&unk_1EF0CF868;
  unk_1EB4DD048 = 0u;
  unk_1EB4DD058 = 0u;
  dword_1EB4DD068 = 0;
  byte_1EB4DD070 = 1;
  CoreML::Specification::_SparseSupportVectors_default_instance_ = (uint64_t)&unk_1EF0D46C8;
  *(_OWORD *)algn_1EB4E0410 = 0u;
  *(_OWORD *)&dword_1EB4E0420 = 0u;
  dword_1EB4E0430 = 0;
  byte_1EB4E0438 = 1;
  CoreML::Specification::_DenseVector_default_instance_ = (uint64_t)&unk_1EF0CE990;
  *(void *)algn_1EB4DD018 = 0;
  qword_1EB4DD020 = 0;
  unk_1EB4DD028 = 0;
  dword_1EB4DD034 = 0;
  byte_1EB4DD038 = 1;
  CoreML::Specification::_DenseSupportVectors_default_instance_ = (uint64_t)&unk_1EF0D37F0;
  dword_1EB4DFFD8 = 0;
  unk_1EB4DFFC8 = 0u;
  unk_1EB4DFFB8 = 0u;
  byte_1EB4DFFE0 = 1;
  CoreML::Specification::_Coefficients_default_instance_ = (uint64_t)&unk_1EF0CEE50;
  unk_1EB4DE4D0 = 0;
  qword_1EB4DE4D8 = 0;
  unk_1EB4DE4E0 = 0;
  dword_1EB4DE4EC = 0;
  byte_1EB4DE4F0 = 1;
  CoreML::Specification::_SupportVectorRegressor_default_instance_ = (uint64_t)&unk_1EF0D59C8;
  qword_1EB4E0B98 = 0;
  *(_OWORD *)&qword_1EB4E0B80 = 0u;
  unk_1EB4E0B70 = 0u;
  byte_1EB4E0BA0 = 1;
  qword_1EB4E0FB8 = 0;
  qword_1EB4E0FC0 = 0;
  qword_1EB4E0FD0 = 0;
  qword_1EB4E0FD8 = 0;
  CoreML::Specification::_SupportVectorClassifier_default_instance_ = (uint64_t)&unk_1EF0D6218;
  qword_1EB4E0F68 = 0;
  qword_1EB4E0F70 = 0;
  qword_1EB4E0F78 = 0;
  qword_1EB4E0FA8 = 0;
  *(_OWORD *)&qword_1EB4E0F98 = 0u;
  unk_1EB4E0F88 = 0u;
  dword_1EB4E1008 = 0;
  qword_1EB4E1000 = 0;
  byte_1EB4E1010 = 1;
  qword_1EB4E0B78 = (uint64_t)&CoreML::Specification::_Kernel_default_instance_;
  qword_1EB4E0B80 = (uint64_t)&CoreML::Specification::_Coefficients_default_instance_;
  qword_1EB4E0FE8 = (uint64_t)&CoreML::Specification::_Kernel_default_instance_;
  return result;
}

double CoreML::Specification::protobuf_Model_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Model_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  uint64_t v2 = CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *)inited);
  uint64_t v3 = CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto *)v2);
  uint64_t v4 = CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto *)v3);
  unsigned int v5 = CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto *)v4);
  uint64_t v6 = CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto *)v5);
  uint64_t v7 = CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto *)v6);
  unint64_t v8 = CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults((CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto *)v7);
  unint64_t v9 = CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults((CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto *)v8);
  uint8x8_t v10 = CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults((CoreML::Specification::protobuf_CategoricalMapping_2eproto *)v9);
  unint64_t v11 = CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults((CoreML::Specification::protobuf_CustomModel_2eproto *)v10);
  char v12 = CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults((CoreML::Specification::protobuf_DictVectorizer_2eproto *)v11);
  uint64_t v13 = CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)v12);
  unint64_t v14 = CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureVectorizer_2eproto *)v13);
  BOOL v15 = CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults((CoreML::Specification::protobuf_GLMRegressor_2eproto *)v14);
  uint64_t v16 = CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults((CoreML::Specification::protobuf_GLMClassifier_2eproto *)v15);
  long long v17 = CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults((CoreML::Specification::protobuf_NearestNeighbors_2eproto *)v16);
  uint64_t v18 = CoreML::Specification::protobuf_Identity_2eproto::InitDefaults((CoreML::Specification::protobuf_Identity_2eproto *)v17);
  float v19 = CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults((CoreML::Specification::protobuf_Imputer_2eproto *)v18);
  float v20 = CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults((CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)v19);
  BOOL v21 = CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults((CoreML::Specification::protobuf_NeuralNetwork_2eproto *)v20);
  unint64_t v22 = CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults((CoreML::Specification::protobuf_Normalizer_2eproto *)v21);
  unint64_t v23 = CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults((CoreML::Specification::protobuf_OneHotEncoder_2eproto *)v22);
  size_t v24 = CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults((CoreML::Specification::protobuf_Scaler_2eproto *)v23);
  uint64_t v25 = CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults((CoreML::Specification::protobuf_NonMaximumSuppression_2eproto *)v24);
  unsigned int v26 = CoreML::Specification::protobuf_SVM_2eproto::InitDefaults((CoreML::Specification::protobuf_SVM_2eproto *)v25);
  unint64_t v27 = CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults((CoreML::Specification::protobuf_TreeEnsemble_2eproto *)v26);
  unint64_t v28 = CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults((CoreML::Specification::protobuf_Parameters_2eproto *)v27);
  uint64_t v29 = CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults((CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto *)v28);
  char v30 = CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults((CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto *)v29);
  int v31 = CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults((CoreML::Specification::protobuf_LinkedModel_2eproto *)v30);
  CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto::InitDefaults((CoreML::Specification::protobuf_ClassConfidenceThresholding_2eproto *)v31);
  CoreML::Specification::_Pipeline_default_instance_ = (uint64_t)&unk_1EF0DAC50;
  unk_1EB4E22B0 = 0u;
  unk_1EB4E22C0 = 0u;
  unk_1EB4E22D0 = 0u;
  unk_1EB4E22DC = 0u;
  byte_1EB4E22F0 = 1;
  qword_1EB4DFD60 = 0;
  qword_1EB4DFD68 = 0;
  CoreML::Specification::_PipelineClassifier_default_instance_ = (uint64_t)&unk_1EF0D3168;
  dword_1EB4DFD70 = 0;
  byte_1EB4DFD78 = 1;
  qword_1EB4DF570 = 0;
  qword_1EB4DF578 = 0;
  CoreML::Specification::_PipelineRegressor_default_instance_ = (uint64_t)&unk_1EF0D27E8;
  dword_1EB4DF580 = 0;
  byte_1EB4DF588 = 1;
  CoreML::Specification::_FeatureDescription_default_instance_ = (uint64_t)&unk_1EF0D2E70;
  unk_1EB4DD080 = 0;
  qword_1EB4DD088 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB4DD090 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DD098 = 0;
  dword_1EB4DD0A0 = 0;
  byte_1EB4DD0A8 = 1;
  qword_1EB4E13F8 = 0;
  unk_1EB4E1400 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E1408 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB4E1410 = 0;
  dword_1EB4E1418 = 0;
  CoreML::Specification::_Metadata_UserDefinedEntry_default_instance_ = (uint64_t)&unk_1EF0DC690;
  byte_1EB4E1420 = 1;
  unsigned int v32 = CoreML::Specification::Metadata::Metadata((CoreML::Specification::Metadata *)&CoreML::Specification::_Metadata_default_instance_);
  *((unsigned char *)v32 + 8_Block_object_dispose(&STACK[0x278], 8) = 1;
  CoreML::Specification::_FunctionDescription_default_instance_ = (uint64_t)&unk_1EF0D3920;
  double result = 0.0;
  unk_1EB4DCE18 = 0u;
  unk_1EB4DCE28 = 0u;
  unk_1EB4DCE38 = 0u;
  unk_1EB4DCE48 = 0u;
  unk_1EB4DCE58 = 0u;
  qword_1EB4DCE68 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB4DCE70 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DCE78 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_1EB4DCE80 = 0;
  byte_1EB4DCE88 = 1;
  CoreML::Specification::_ModelDescription_default_instance_ = (uint64_t)&unk_1EF0D1C08;
  unk_1EB4DF1B0 = 0u;
  unk_1EB4DF1C0 = 0u;
  unk_1EB4DF1D0 = 0u;
  unk_1EB4DF1E0 = 0u;
  unk_1EB4DF1F0 = 0u;
  unk_1EB4DF200 = 0u;
  unk_1EB4DF210 = 0u;
  unk_1EB4DF220 = 0u;
  qword_1EB4DF230 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB4DF238 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DF240 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_1EB4DF250 = 0;
  byte_1EB4DF258 = 1;
  CoreML::Specification::_SerializedModel_default_instance_ = (uint64_t)&unk_1EF0D1028;
  *(void *)algn_1EB4DED48 = 0;
  qword_1EB4DED50 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB4DED58 = &google::protobuf::internal::fixed_address_empty_string;
  dword_1EB4DED60 = 0;
  byte_1EB4DED68 = 1;
  qword_1EB4DDF20 = 0;
  *(uint64_t *)((char *)&qword_1EB4DDF08 + 5) = 0;
  CoreML::Specification::_Model_default_instance_ = (uint64_t)&unk_1EF0D9528;
  unk_1EB4DDF00 = 0;
  byte_1EB4DDF28 = 1;
  qword_1EB4DFD68 = (uint64_t)&CoreML::Specification::_Pipeline_default_instance_;
  qword_1EB4DF578 = (uint64_t)&CoreML::Specification::_Pipeline_default_instance_;
  qword_1EB4DD098 = (uint64_t)&CoreML::Specification::_FeatureType_default_instance_;
  qword_1EB4E13F8 = (uint64_t)&CoreML::Specification::_Metadata_UserDefinedEntry_default_instance_;
  qword_1EB4DF248 = (uint64_t)v32;
  qword_1EB4DDF08 = (uint64_t)&CoreML::Specification::_ModelDescription_default_instance_;
  return result;
}

unint64_t *CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(CoreML::Specification::MILSpec::protobuf_MIL_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::MILSpec::protobuf_MIL_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(CoreML::Specification::protobuf_NonMaximumSuppression_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(CoreML::Specification::protobuf_CategoricalMapping_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_CategoricalMapping_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(CoreML::Specification::protobuf_FeatureVectorizer_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_FeatureVectorizer_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(CoreML::Specification::protobuf_NearestNeighbors_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_NearestNeighbors_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(CoreML::Specification::protobuf_DictVectorizer_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_DictVectorizer_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(CoreML::Specification::protobuf_OneHotEncoder_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_OneHotEncoder_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(CoreML::Specification::protobuf_NeuralNetwork_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_NeuralNetwork_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(CoreML::Specification::protobuf_GLMClassifier_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_GLMClassifier_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(CoreML::Specification::protobuf_TreeEnsemble_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_TreeEnsemble_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(CoreML::Specification::protobuf_GLMRegressor_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_GLMRegressor_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(CoreML::Specification::protobuf_LinkedModel_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_LinkedModel_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_LinkedModel_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_LinkedModel_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  double result = CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults((CoreML::Specification::protobuf_Parameters_2eproto *)inited);
  CoreML::Specification::_LinkedModel_default_instance_ = (uint64_t)&unk_1EF0CED20;
  unk_1EB4DE480 = 0;
  qword_1EB4DE490 = 0;
  byte_1EB4DE498 = 1;
  CoreML::Specification::_LinkedModelFile_default_instance_ = (uint64_t)&unk_1EF0D0EF8;
  *(void *)algn_1EB4DECD8 = 0;
  dword_1EB4DECF0 = 0;
  byte_1EB4DECF8 = 1;
  qword_1EB4DECE0 = (uint64_t)&CoreML::Specification::_StringParameter_default_instance_;
  unk_1EB4DECE8 = &CoreML::Specification::_StringParameter_default_instance_;
  return result;
}

void CoreML::Specification::protobuf_NeuralNetwork_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_NeuralNetwork_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  uint64_t v2 = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults((CoreML::Specification::protobuf_Parameters_2eproto *)v2);
  CoreML::Specification::_NeuralNetwork_default_instance_ = (uint64_t)&unk_1EF0CFDC0;
  unk_1EB4DE7A8 = 0u;
  *(_OWORD *)&dword_1EB4DE7B8 = 0u;
  *(_OWORD *)algn_1EB4DE7C8 = 0u;
  *(_OWORD *)&algn_1EB4DE7C8[16] = 0u;
  *(_OWORD *)((char *)&qword_1EB4DE7E0 + 4) = 0u;
  byte_1EB4DE7F8 = 1;
  CoreML::Specification::_NeuralNetworkImageScaler_default_instance_ = (uint64_t)&unk_1EF0D6640;
  unk_1EB4E11A0 = 0u;
  *(_OWORD *)&dword_1EB4E11B0 = 0u;
  byte_1EB4E11C0 = 1;
  CoreML::Specification::_NeuralNetworkMeanImage_default_instance_ = (uint64_t)&unk_1EF0D5638;
  unk_1EB4E09C0 = 0;
  qword_1EB4E09C8 = 0;
  qword_1EB4E09D0 = 0;
  dword_1EB4E09DC = 0;
  byte_1EB4E09E0 = 1;
  CoreML::Specification::_NeuralNetworkPreprocessing_default_instance_ = (uint64_t)&unk_1EF0D72B8;
  *(void *)algn_1EB4E1618 = 0;
  qword_1EB4E1620 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E1630 = 0;
  byte_1EB4E1638 = 1;
  CoreML::Specification::_ActivationReLU_default_instance_ = (uint64_t)&unk_1EF0CFF88;
  qword_1EB4DE878 = 0;
  dword_1EB4DE880 = 0;
  byte_1EB4DE888 = 1;
  CoreML::Specification::_ActivationLeakyReLU_default_instance_ = (uint64_t)&unk_1EF0D36C0;
  qword_1EB4DFF70 = 0;
  qword_1EB4DFF78 = 0;
  byte_1EB4DFF80 = 1;
  CoreML::Specification::_ActivationTanh_default_instance_ = (uint64_t)&unk_1EF0D0020;
  qword_1EB4DE898 = 0;
  dword_1EB4DE8A0 = 0;
  byte_1EB4DE8A8 = 1;
  dword_1EB4E01C0 = 0;
  CoreML::Specification::_ActivationScaledTanh_default_instance_ = (uint64_t)&unk_1EF0D3F10;
  unk_1EB4E01B0 = 0;
  qword_1EB4E01B8 = 0;
  byte_1EB4E01C8 = 1;
  CoreML::Specification::_ActivationSigmoid_default_instance_ = (uint64_t)&unk_1EF0D2160;
  qword_1EB4DF3D0 = 0;
  dword_1EB4DF3D8 = 0;
  byte_1EB4DF3E0 = 1;
  qword_1EB4DEE80 = 0;
  unk_1EB4DEE88 = 0;
  CoreML::Specification::_ActivationLinear_default_instance_ = (uint64_t)&unk_1EF0D14E8;
  dword_1EB4DEE90 = 0;
  byte_1EB4DEE98 = 1;
  qword_1EB4E0478 = 0;
  unk_1EB4E0480 = 0;
  CoreML::Specification::_ActivationSigmoidHard_default_instance_ = (uint64_t)&unk_1EF0D47F8;
  dword_1EB4E0488 = 0;
  byte_1EB4E0490 = 1;
  qword_1EB4DEAF0 = 0;
  qword_1EB4DEAF8 = 0;
  CoreML::Specification::_ActivationPReLU_default_instance_ = (uint64_t)&unk_1EF0D07D8;
  dword_1EB4DEB00 = 0;
  byte_1EB4DEB08 = 1;
  CoreML::Specification::_ActivationELU_default_instance_ = (uint64_t)&unk_1EF0CFAC8;
  qword_1EB4DE678 = 0;
  qword_1EB4DE680 = 0;
  byte_1EB4DE688 = 1;
  qword_1EB4E1250 = 0;
  *(void *)&dword_1EB4E1258 = 0;
  CoreML::Specification::_ActivationThresholdedReLU_default_instance_ = (uint64_t)&unk_1EF0D68A0;
  byte_1EB4E1260 = 1;
  CoreML::Specification::_ActivationSoftsign_default_instance_ = (uint64_t)&unk_1EF0D2B78;
  qword_1EB4DF660 = 0;
  dword_1EB4DF668 = 0;
  byte_1EB4DF670 = 1;
  CoreML::Specification::_ActivationSoftplus_default_instance_ = (uint64_t)&unk_1EF0D2AE0;
  qword_1EB4DF640 = 0;
  dword_1EB4DF648 = 0;
  byte_1EB4DF650 = 1;
  CoreML::Specification::_ActivationParametricSoftplus_default_instance_ = (uint64_t)&unk_1EF0D7BA0;
  unk_1EB4E1960 = 0;
  dword_1EB4E1978 = 0;
  qword_1EB4E1968 = 0;
  qword_1EB4E1970 = 0;
  byte_1EB4E1980 = 1;
  CoreML::Specification::_ActivationParams_default_instance_ = (uint64_t)&unk_1EF0D1580;
  *(void *)algn_1EB4DEEA8 = 0;
  qword_1EB4DEEB8 = 0;
  byte_1EB4DEEC0 = 1;
  CoreML::Specification::_Tensor_default_instance_ = (uint64_t)&unk_1EF0D96F0;
  unk_1EB4DCF20 = 0;
  qword_1EB4DCF28 = 0;
  unk_1EB4DCF30 = 0;
  unk_1EB4DCF3C = 0;
  byte_1EB4DCF48 = 1;
  CoreML::Specification::_NeuralNetworkLayer_default_instance_ = (uint64_t)&unk_1EF0D2FA0;
  unk_1EB4DF7B0 = 0u;
  unk_1EB4DF7A0 = 0u;
  unk_1EB4DF790 = 0u;
  unk_1EB4DF780 = 0u;
  unk_1EB4DF770 = 0u;
  unk_1EB4DF760 = 0u;
  qword_1EB4DF7C0 = 0;
  unk_1EB4DF7C8 = &google::protobuf::internal::fixed_address_empty_string;
  byte_1EB4DF7D0 = 0;
  qword_1EB4DF7E0 = 0;
  byte_1EB4DF7E8 = 1;
  CoreML::Specification::_BranchLayerParams_default_instance_ = (uint64_t)&unk_1EF0D2328;
  qword_1EB4DF440 = 0;
  dword_1EB4DF458 = 0;
  qword_1EB4DF448 = 0;
  qword_1EB4DF450 = 0;
  byte_1EB4DF460 = 1;
  CoreML::Specification::_LoopLayerParams_default_instance_ = (uint64_t)&unk_1EF0D0F90;
  qword_1EB4DED08 = 0;
  qword_1EB4DED10 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DED18 = 0;
  dword_1EB4DED30 = 0;
  qword_1EB4DED20 = 0;
  qword_1EB4DED28 = 0;
  byte_1EB4DED38 = 1;
  CoreML::Specification::_LoopBreakLayerParams_default_instance_ = (uint64_t)&unk_1EF0D4208;
  qword_1EB4E02A8 = 0;
  dword_1EB4E02B0 = 0;
  byte_1EB4E02B8 = 1;
  CoreML::Specification::_LoopContinueLayerParams_default_instance_ = (uint64_t)&unk_1EF0D5E88;
  qword_1EB4E0D80 = 0;
  dword_1EB4E0D88 = 0;
  byte_1EB4E0D90 = 1;
  CoreML::Specification::_CopyLayerParams_default_instance_ = (uint64_t)&unk_1EF0D0B68;
  qword_1EB4DEBE0 = 0;
  dword_1EB4DEBE8 = 0;
  byte_1EB4DEBF0 = 1;
  qword_1EB4E0980 = 0;
  unk_1EB4E0988 = 0;
  CoreML::Specification::_GreaterThanLayerParams_default_instance_ = (uint64_t)&unk_1EF0D5508;
  byte_1EB4E0990 = 1;
  qword_1EB4E0CE0 = 0;
  unk_1EB4E0CE8 = 0;
  CoreML::Specification::_GreaterEqualLayerParams_default_instance_ = (uint64_t)&unk_1EF0D5CC0;
  byte_1EB4E0CF0 = 1;
  qword_1EB4E0050 = 0;
  unk_1EB4E0058 = 0;
  CoreML::Specification::_LessThanLayerParams_default_instance_ = (uint64_t)&unk_1EF0D3AE8;
  byte_1EB4E0060 = 1;
  qword_1EB4E0268 = 0;
  unk_1EB4E0270 = 0;
  CoreML::Specification::_LessEqualLayerParams_default_instance_ = (uint64_t)&unk_1EF0D40D8;
  byte_1EB4E0278 = 1;
  qword_1EB4DEFE8 = 0;
  unk_1EB4DEFF0 = 0;
  CoreML::Specification::_EqualLayerParams_default_instance_ = (uint64_t)&unk_1EF0D17E0;
  byte_1EB4DEFF8 = 1;
  qword_1EB4E0090 = 0;
  unk_1EB4E0098 = 0;
  CoreML::Specification::_NotEqualLayerParams_default_instance_ = (uint64_t)&unk_1EF0D3C18;
  byte_1EB4E00A0 = 1;
  CoreML::Specification::_LogicalAndLayerParams_default_instance_ = (uint64_t)&unk_1EF0D4C20;
  qword_1EB4E05E0 = 0;
  dword_1EB4E05E8 = 0;
  byte_1EB4E05F0 = 1;
  CoreML::Specification::_LogicalOrLayerParams_default_instance_ = (uint64_t)&unk_1EF0D4170;
  qword_1EB4E0288 = 0;
  dword_1EB4E0290 = 0;
  byte_1EB4E0298 = 1;
  CoreML::Specification::_LogicalXorLayerParams_default_instance_ = (uint64_t)&unk_1EF0D4D50;
  qword_1EB4E0620 = 0;
  dword_1EB4E0628 = 0;
  byte_1EB4E0630 = 1;
  CoreML::Specification::_LogicalNotLayerParams_default_instance_ = (uint64_t)&unk_1EF0D4CB8;
  qword_1EB4E0600 = 0;
  dword_1EB4E0608 = 0;
  byte_1EB4E0610 = 1;
  CoreML::Specification::_BorderAmounts_EdgeSizes_default_instance_ = (uint64_t)&unk_1EF0D5C28;
  *(void *)algn_1EB4DD0E8 = 0;
  dword_1EB4DD100 = 0;
  qword_1EB4DD0F0 = 0;
  unk_1EB4DD0F8 = 0;
  byte_1EB4DD108 = 1;
  CoreML::Specification::_BorderAmounts_default_instance_ = (uint64_t)&unk_1EF0CFC90;
  dword_1EB4DE720 = 0;
  unk_1EB4DE710 = 0u;
  unk_1EB4DE700 = 0u;
  byte_1EB4DE728 = 1;
  qword_1EB4DE5F8 = 0;
  qword_1EB4DE600 = 0;
  CoreML::Specification::_ValidPadding_default_instance_ = (uint64_t)&unk_1EF0CF998;
  dword_1EB4DE608 = 0;
  byte_1EB4DE610 = 1;
  qword_1EB4DE4B0 = 0;
  *(void *)&dword_1EB4DE4B8 = 0;
  CoreML::Specification::_SamePadding_default_instance_ = (uint64_t)&unk_1EF0CEDB8;
  byte_1EB4DE4C0 = 1;
  qword_1EB4DE5D8 = 0;
  unk_1EB4DE5E0 = 0;
  CoreML::Specification::_SamplingMode_default_instance_ = (uint64_t)&unk_1EF0CF7D0;
  byte_1EB4DE5E8 = 1;
  qword_1EB4DF6C8 = 0;
  unk_1EB4DF6D0 = 0;
  CoreML::Specification::_BoxCoordinatesMode_default_instance_ = (uint64_t)&unk_1EF0D2D40;
  byte_1EB4DF6D8 = 1;
  CoreML::Specification::_WeightParams_default_instance_ = (uint64_t)&unk_1EF0CFA30;
  unk_1EB4DE620 = 0;
  qword_1EB4DE628 = 0;
  unk_1EB4DE630 = 0;
  qword_1EB4DE640 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EB4DE648 = &google::protobuf::internal::fixed_address_empty_string;
  byte_1EB4DE660 = 0;
  qword_1EB4DE650 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4DE658 = 0;
  dword_1EB4DE664 = 0;
  byte_1EB4DE668 = 1;
  qword_1EB4DFE18 = 0;
  qword_1EB4DFE00 = 0;
  unk_1EB4DFE08 = 0;
  CoreML::Specification::_QuantizationParams_default_instance_ = (uint64_t)&unk_1EF0D3298;
  byte_1EB4DFE20 = 1;
  qword_1EB4E1178 = 0;
  unk_1EB4E1180 = 0;
  CoreML::Specification::_LinearQuantizationParams_default_instance_ = (uint64_t)&unk_1EF0D65A8;
  *(void *)algn_1EB4E1158 = 0;
  qword_1EB4E1160 = 0;
  qword_1EB4E1168 = 0;
  dword_1EB4E118C = 0;
  byte_1EB4E1190 = 1;
  CoreML::Specification::_LookUpTableQuantizationParams_default_instance_ = (uint64_t)&unk_1EF0D7FC8;
  *(void *)algn_1EB4E1AD8 = 0;
  qword_1EB4E1AE0 = 0;
  unk_1EB4E1AE8 = 0;
  dword_1EB4E1AF4 = 0;
  byte_1EB4E1AF8 = 1;
  qword_1EB4E0850 = 0;
  qword_1EB4E0858 = 0;
  qword_1EB4E0868 = 0;
  qword_1EB4E0870 = 0;
  qword_1EB4E0880 = 0;
  qword_1EB4E0888 = 0;
  CoreML::Specification::_ConvolutionLayerParams_default_instance_ = (uint64_t)&unk_1EF0D52A8;
  unk_1EB4E0830 = 0;
  qword_1EB4E0838 = 0;
  qword_1EB4E0840 = 0;
  *(_OWORD *)((char *)&qword_1EB4E08B0 + 2) = 0u;
  xmmword_1EB4E0898 = 0u;
  *(_OWORD *)&qword_1EB4E08A8 = 0u;
  qword_1EB4E08D0 = 0;
  byte_1EB4E08D8 = 1;
  CoreML::Specification::_Convolution3DLayerParams_default_instance_ = (uint64_t)&unk_1EF0D63E0;
  qword_1EB4E10A0 = 0;
  qword_1EB4E10A8 = 0;
  qword_1EB4E10B0 = 0;
  dword_1EB4E1120 = 0;
  *(_OWORD *)&dword_1EB4E1110 = 0u;
  *(_OWORD *)&byte_1EB4E1100 = 0u;
  *(_OWORD *)&dword_1EB4E10F0 = 0u;
  unk_1EB4E10E0 = 0u;
  *(_OWORD *)&dword_1EB4E10D0 = 0u;
  *(_OWORD *)&qword_1EB4E10C0 = 0u;
  byte_1EB4E1128 = 1;
  CoreML::Specification::_InnerProductLayerParams_default_instance_ = (uint64_t)&unk_1EF0D5D58;
  dword_1EB4E0D2C = 0;
  *(long long *)((char *)&xmmword_1EB4E0D18 + 2) = 0u;
  *(_OWORD *)&qword_1EB4E0D10 = 0u;
  *(_OWORD *)&qword_1EB4E0D00 = 0u;
  byte_1EB4E0D30 = 1;
  CoreML::Specification::_EmbeddingLayerParams_default_instance_ = (uint64_t)&unk_1EF0D4040;
  dword_1EB4E0254 = 0;
  unk_1EB4E0241 = 0u;
  unk_1EB4E0238 = 0u;
  *(_OWORD *)algn_1EB4E0228 = 0u;
  byte_1EB4E0258 = 1;
  CoreML::Specification::_EmbeddingNDLayerParams_default_instance_ = (uint64_t)&unk_1EF0D5340;
  dword_1EB4E0924 = 0;
  *(long long *)((char *)&xmmword_1EB4E0910 + 1) = 0u;
  *(_OWORD *)&qword_1EB4E0908 = 0u;
  *(_OWORD *)&qword_1EB4E08F8 = 0u;
  byte_1EB4E0928 = 1;
  CoreML::Specification::_BatchnormLayerParams_default_instance_ = (uint64_t)&unk_1EF0D3FA8;
  *(long long *)((char *)&xmmword_1EB4E0200 + 4) = 0u;
  *(_OWORD *)&qword_1EB4E01F8 = 0u;
  *(_OWORD *)&qword_1EB4E01E8 = 0u;
  *(_OWORD *)&qword_1EB4E01D8 = 0u;
  byte_1EB4E0218 = 1;
  CoreML::Specification::_PoolingLayerParams_ValidCompletePadding_default_instance_ = (uint64_t)&unk_1EF0D9360;
  unk_1EB4E20A0 = 0;
  qword_1EB4E20A8 = 0;
  qword_1EB4E20B0 = 0;
  dword_1EB4E20BC = 0;
  byte_1EB4E20C0 = 1;
  qword_1EB4DFDA8 = 0;
  qword_1EB4DFDB0 = 0;
  CoreML::Specification::_PoolingLayerParams_default_instance_ = (uint64_t)&unk_1EF0D3200;
  *(void *)algn_1EB4DFD88 = 0;
  qword_1EB4DFD90 = 0;
  qword_1EB4DFD98 = 0;
  word_1EB4DFDC0 = 0;
  dword_1EB4DFDBC = 0;
  qword_1EB4DFDD0 = 0;
  byte_1EB4DFDD8 = 1;
  CoreML::Specification::_Pooling3DLayerParams_default_instance_ = (uint64_t)&unk_1EF0D42A0;
  qword_1EB4E0308 = 0;
  unk_1EB4E02F8 = 0u;
  unk_1EB4E02E8 = 0u;
  unk_1EB4E02D8 = 0u;
  unk_1EB4E02C8 = 0u;
  byte_1EB4E0310 = 1;
  qword_1EB4E15D0 = 0;
  *(void *)&dword_1EB4E15D8 = 0;
  CoreML::Specification::_GlobalPooling3DLayerParams_default_instance_ = (uint64_t)&unk_1EF0D70F0;
  byte_1EB4E15E0 = 1;
  qword_1EB4E1FB8 = 0;
  *(void *)&dword_1EB4E1FC0 = 0;
  CoreML::Specification::_PaddingLayerParams_PaddingConstant_default_instance_ = (uint64_t)&unk_1EF0D8EA0;
  byte_1EB4E1FC8 = 1;
  CoreML::Specification::_PaddingLayerParams_PaddingReflection_default_instance_ = (uint64_t)&unk_1EF0D8F38;
  qword_1EB4E1FD8 = 0;
  dword_1EB4E1FE0 = 0;
  byte_1EB4E1FE8 = 1;
  CoreML::Specification::_PaddingLayerParams_PaddingReplication_default_instance_ = (uint64_t)&unk_1EF0D9100;
  qword_1EB4E2030 = 0;
  dword_1EB4E2038 = 0;
  byte_1EB4E2040 = 1;
  qword_1EB4DFD00 = 0;
  qword_1EB4DFCE8 = 0;
  qword_1EB4DFCF0 = 0;
  CoreML::Specification::_PaddingLayerParams_default_instance_ = (uint64_t)&unk_1EF0D3038;
  byte_1EB4DFD08 = 1;
  CoreML::Specification::_ConcatLayerParams_default_instance_ = (uint64_t)&unk_1EF0D23C0;
  unk_1EB4DF470 = 0;
  byte_1EB4DF478 = 0;
  dword_1EB4DF47C = 0;
  byte_1EB4DF480 = 1;
  CoreML::Specification::_LRNLayerParams_default_instance_ = (uint64_t)&unk_1EF0D0448;
  *(long long *)((char *)&xmmword_1EB4DEA28 + _Block_object_dispose(&STACK[0x278], 8) = 0u;
  *(_OWORD *)&qword_1EB4DEA20 = 0u;
  byte_1EB4DEA40 = 1;
  CoreML::Specification::_SoftmaxLayerParams_default_instance_ = (uint64_t)&unk_1EF0D34F8;
  qword_1EB4DFED0 = 0;
  dword_1EB4DFED8 = 0;
  byte_1EB4DFEE0 = 1;
  qword_1EB4DF320 = 0;
  qword_1EB4DF328 = 0;
  CoreML::Specification::_SplitLayerParams_default_instance_ = (uint64_t)&unk_1EF0D1E68;
  dword_1EB4DF330 = 0;
  byte_1EB4DF338 = 1;
  qword_1EB4DE8B8 = 0;
  *(void *)&dword_1EB4DE8C0 = 0;
  CoreML::Specification::_AddLayerParams_default_instance_ = (uint64_t)&unk_1EF0D00B8;
  byte_1EB4DE8C8 = 1;
  qword_1EB4E0070 = 0;
  *(void *)&dword_1EB4E0078 = 0;
  CoreML::Specification::_MultiplyLayerParams_default_instance_ = (uint64_t)&unk_1EF0D3B80;
  byte_1EB4E0080 = 1;
  CoreML::Specification::_UnaryFunctionLayerParams_default_instance_ = (uint64_t)&unk_1EF0D6808;
  *(long long *)((char *)&xmmword_1EB4E1228 + _Block_object_dispose(&STACK[0x278], 8) = 0u;
  *(_OWORD *)&qword_1EB4E1220 = 0u;
  byte_1EB4E1240 = 1;
  qword_1EB4E0180 = 0;
  unk_1EB4E0188 = 0;
  CoreML::Specification::_UpsampleLayerParams_default_instance_ = (uint64_t)&unk_1EF0D3E78;
  unk_1EB4E0160 = 0;
  qword_1EB4E0168 = 0;
  unk_1EB4E0170 = 0;
  *(void *)&dword_1EB4E0194 = 0;
  dword_1EB4E019C = 0;
  byte_1EB4E01A0 = 1;
  CoreML::Specification::_ResizeBilinearLayerParams_default_instance_ = (uint64_t)&unk_1EF0D6D60;
  *(void *)algn_1EB4E1478 = 0;
  qword_1EB4E1480 = 0;
  unk_1EB4E1488 = 0;
  qword_1EB4E1498 = 0;
  dword_1EB4E14A0 = 0;
  byte_1EB4E14A8 = 1;
  CoreML::Specification::_CropResizeLayerParams_default_instance_ = (uint64_t)&unk_1EF0D4928;
  unk_1EB4E04D0 = 0;
  qword_1EB4E04D8 = 0;
  unk_1EB4E04E0 = 0;
  qword_1EB4E04F0 = 0;
  unk_1EB4E04F8 = 0;
  dword_1EB4E0508 = 0;
  qword_1EB4E0500 = 0;
  byte_1EB4E0510 = 1;
  CoreML::Specification::_BiasLayerParams_default_instance_ = (uint64_t)&unk_1EF0D09A0;
  qword_1EB4DEB58 = 0;
  qword_1EB4DEB60 = 0;
  qword_1EB4DEB68 = 0;
  qword_1EB4DEB78 = 0;
  dword_1EB4DEB80 = 0;
  byte_1EB4DEB88 = 1;
  qword_1EB4DF2A8 = 0;
  qword_1EB4DF2B0 = 0;
  CoreML::Specification::_ScaleLayerParams_default_instance_ = (uint64_t)&unk_1EF0D1D38;
  qword_1EB4DF288 = 0;
  qword_1EB4DF290 = 0;
  qword_1EB4DF298 = 0;
  qword_1EB4DF2C0 = 0;
  qword_1EB4DF2C8 = 0;
  byte_1EB4DF2D0 = 0;
  dword_1EB4DF2D4 = 0;
  byte_1EB4DF2D8 = 1;
  qword_1EB4E0D48 = 0;
  qword_1EB4E0D50 = 0;
  CoreML::Specification::_LoadConstantLayerParams_default_instance_ = (uint64_t)&unk_1EF0D5DF0;
  unk_1EB4E0D40 = 0;
  qword_1EB4E0D60 = 0;
  dword_1EB4E0D68 = 0;
  byte_1EB4E0D70 = 1;
  qword_1EB4E09A0 = 0;
  *(void *)&dword_1EB4E09A8 = 0;
  CoreML::Specification::_L2NormalizeLayerParams_default_instance_ = (uint64_t)&unk_1EF0D55A0;
  byte_1EB4E09B0 = 1;
  qword_1EB4DF740 = 0;
  unk_1EB4DF748 = 0;
  CoreML::Specification::_FlattenLayerParams_default_instance_ = (uint64_t)&unk_1EF0D2F08;
  byte_1EB4DF750 = 1;
  qword_1EB4DFE48 = 0;
  unk_1EB4DFE50 = 0;
  CoreML::Specification::_ReshapeLayerParams_default_instance_ = (uint64_t)&unk_1EF0D3330;
  unk_1EB4DFE40 = 0;
  unk_1EB4DFE5C = 0;
  byte_1EB4DFE68 = 1;
  qword_1EB4DFD38 = 0;
  unk_1EB4DFD40 = 0;
  CoreML::Specification::_PermuteLayerParams_default_instance_ = (uint64_t)&unk_1EF0D30D0;
  unk_1EB4DFD30 = 0;
  dword_1EB4DFD4C = 0;
  byte_1EB4DFD50 = 1;
  qword_1EB4E1438 = 0;
  *(void *)&dword_1EB4E1440 = 0;
  CoreML::Specification::_ReorganizeDataLayerParams_default_instance_ = (uint64_t)&unk_1EF0D6C30;
  unk_1EB4E1430 = 0;
  byte_1EB4E1448 = 1;
  CoreML::Specification::_SliceLayerParams_default_instance_ = (uint64_t)&unk_1EF0D1DD0;
  qword_1EB4DF308 = 0;
  *(_OWORD *)algn_1EB4DF2F8 = 0u;
  *(_OWORD *)algn_1EB4DF2E8 = 0u;
  byte_1EB4DF310 = 1;
  qword_1EB4DF5A0 = 0;
  *(void *)&dword_1EB4DF5A8 = 0;
  CoreML::Specification::_ReduceLayerParams_default_instance_ = (uint64_t)&unk_1EF0D2880;
  *(void *)algn_1EB4DF598 = 0;
  byte_1EB4DF5B0 = 1;
  qword_1EB4DEC28 = 0;
  unk_1EB4DEC30 = 0;
  CoreML::Specification::_CropLayerParams_default_instance_ = (uint64_t)&unk_1EF0D0C98;
  unk_1EB4DEC20 = 0;
  qword_1EB4DEC40 = 0;
  dword_1EB4DEC48 = 0;
  byte_1EB4DEC50 = 1;
  CoreML::Specification::_AverageLayerParams_default_instance_ = (uint64_t)&unk_1EF0D2CA8;
  qword_1EB4DF6A8 = 0;
  dword_1EB4DF6B0 = 0;
  byte_1EB4DF6B8 = 1;
  CoreML::Specification::_MaxLayerParams_default_instance_ = (uint64_t)&unk_1EF0D04E0;
  qword_1EB4DEA50 = 0;
  dword_1EB4DEA58 = 0;
  byte_1EB4DEA60 = 1;
  CoreML::Specification::_MinLayerParams_default_instance_ = (uint64_t)&unk_1EF0D0578;
  qword_1EB4DEA70 = 0;
  dword_1EB4DEA78 = 0;
  byte_1EB4DEA80 = 1;
  CoreML::Specification::_DotProductLayerParams_default_instance_ = (uint64_t)&unk_1EF0D4A58;
  qword_1EB4E0558 = 0;
  byte_1EB4E0560 = 0;
  dword_1EB4E0564 = 0;
  byte_1EB4E0568 = 1;
  dword_1EB4E1D98 = 0;
  qword_1EB4E1D88 = 0;
  qword_1EB4E1D90 = 0;
  CoreML::Specification::_MeanVarianceNormalizeLayerParams_default_instance_ = (uint64_t)&unk_1EF0D88B0;
  byte_1EB4E1DA0 = 1;
  dword_1EB4E14C8 = 0;
  qword_1EB4E14B8 = 0;
  qword_1EB4E14C0 = 0;
  CoreML::Specification::_SequenceRepeatLayerParams_default_instance_ = (uint64_t)&unk_1EF0D6DF8;
  byte_1EB4E14D0 = 1;
  CoreML::Specification::_SimpleRecurrentLayerParams_default_instance_ = (uint64_t)&unk_1EF0D7480;
  dword_1EB4E1704 = 0;
  *(_OWORD *)((char *)&qword_1EB4E16F0 + 3) = 0u;
  *(_OWORD *)&qword_1EB4E16E8 = 0u;
  *(_OWORD *)&qword_1EB4E16D8 = 0u;
  *(_OWORD *)algn_1EB4E16C8 = 0u;
  byte_1EB4E1708 = 1;
  CoreML::Specification::_GRULayerParams_default_instance_ = (uint64_t)&unk_1EF0D0318;
  dword_1EB4DE9CC = 0;
  *(_OWORD *)((char *)&qword_1EB4DE9B8 + 3) = 0u;
  *(_OWORD *)&qword_1EB4DE9B0 = 0u;
  *(_OWORD *)&qword_1EB4DE9A0 = 0u;
  *(_OWORD *)&qword_1EB4DE990 = 0u;
  *(_OWORD *)&qword_1EB4DE980 = 0u;
  *(_OWORD *)&qword_1EB4DE970 = 0u;
  *(_OWORD *)&dword_1EB4DE960 = 0u;
  *(_OWORD *)algn_1EB4DE950 = 0u;
  byte_1EB4DE9D0 = 1;
  dword_1EB4DE2DC = 0;
  qword_1EB4DE2C8 = 0;
  unk_1EB4DE2D0 = 0;
  CoreML::Specification::_LSTMParams_default_instance_ = (uint64_t)&unk_1EF0CE698;
  byte_1EB4DE2D8 = 0;
  byte_1EB4DE2E0 = 1;
  CoreML::Specification::_LSTMWeightParams_default_instance_ = (uint64_t)&unk_1EF0D1B70;
  dword_1EB4DF198 = 0;
  unk_1EB4DF188 = 0u;
  unk_1EB4DF178 = 0u;
  unk_1EB4DF168 = 0u;
  unk_1EB4DF158 = 0u;
  unk_1EB4DF148 = 0u;
  unk_1EB4DF138 = 0u;
  unk_1EB4DF128 = 0u;
  *(_OWORD *)algn_1EB4DF118 = 0u;
  byte_1EB4DF1A0 = 1;
  CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_ = (uint64_t)&unk_1EF0D8190;
  dword_1EB4E1BB4 = 0;
  byte_1EB4E1BB0 = 0;
  *(_OWORD *)&qword_1EB4E1BA0 = 0u;
  *(_OWORD *)&qword_1EB4E1B90 = 0u;
  *(_OWORD *)&dword_1EB4E1B80 = 0u;
  *(_OWORD *)algn_1EB4E1B70 = 0u;
  byte_1EB4E1BB8 = 1;
  CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_ = (uint64_t)&unk_1EF0D7C38;
  *(_OWORD *)((char *)&qword_1EB4E19E8 + 4) = 0u;
  *(_OWORD *)&qword_1EB4E19E0 = 0u;
  *(_OWORD *)&algn_1EB4E19C8[8] = 0u;
  *(_OWORD *)&qword_1EB4E19C0 = 0u;
  unk_1EB4E19B0 = 0u;
  *(_OWORD *)&dword_1EB4E19A0 = 0u;
  *(_OWORD *)algn_1EB4E1990 = 0u;
  byte_1EB4E1A00 = 1;
  CoreML::Specification::_CustomLayerParams_CustomLayerParamValue_default_instance_ = (uint64_t)&unk_1EF0D9230;
  *(void *)algn_1EB4E2050 = 0;
  qword_1EB4E2060 = 0;
  byte_1EB4E2068 = 1;
  qword_1EB4E1EC8 = 0;
  unk_1EB4E1ED0 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1EB4E1ED8 = 0;
  unk_1EB4E1EE0 = 0;
  dword_1EB4E1EE8 = 0;
  CoreML::Specification::_CustomLayerParams_ParametersEntry_default_instance_ = (uint64_t)&unk_1EF0DC348;
  byte_1EB4E1EF0 = 1;
  CoreML::Specification::CustomLayerParams::CustomLayerParams((CoreML::Specification::CustomLayerParams *)&CoreML::Specification::_CustomLayerParams_default_instance_);
}

double CoreML::Specification::protobuf_NearestNeighbors_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_NearestNeighbors_2eproto::TableStruct *this)
{
  BOOL inited = google::protobuf::internal::InitProtobufDefaults(this);
  uint64_t v2 = CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults((CoreML::Specification::protobuf_DataStructures_2eproto *)inited);
  CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults((CoreML::Specification::protobuf_Parameters_2eproto *)v2);
  qword_1EB4E1838 = 0;
  *(void *)&dword_1EB4E1840 = 0;
  CoreML::Specification::_KNearestNeighborsClassifier_default_instance_ = (uint64_t)&unk_1EF0D7778;
  qword_1EB4E1808 = 0;
  byte_1EB4E1848 = 1;
  CoreML::Specification::_NearestNeighborsIndex_default_instance_ = (uint64_t)&unk_1EF0D4DE8;
  dword_1EB4E0680 = 0;
  qword_1EB4E0678 = 0;
  double result = 0.0;
  unk_1EB4E0640 = 0u;
  unk_1EB4E0650 = 0u;
  dword_1EB4E0660 = 0;
  byte_1EB4E0688 = 1;
  CoreML::Specification::_UniformWeighting_default_instance_ = (uint64_t)&unk_1EF0D20C8;
  qword_1EB4DF3B0 = 0;
  dword_1EB4DF3B8 = 0;
  byte_1EB4DF3C0 = 1;
  CoreML::Specification::_InverseDistanceWeighting_default_instance_ = (uint64_t)&unk_1EF0D6510;
  qword_1EB4E1138 = 0;
  dword_1EB4E1140 = 0;
  byte_1EB4E1148 = 1;
  CoreML::Specification::_LinearIndex_default_instance_ = (uint64_t)&unk_1EF0CEC88;
  qword_1EB4DE460 = 0;
  dword_1EB4DE468 = 0;
  byte_1EB4DE470 = 1;
  CoreML::Specification::_SingleKdTreeIndex_default_instance_ = (uint64_t)&unk_1EF0D2918;
  qword_1EB4DF5C0 = 0;
  qword_1EB4DF5C8 = 0;
  byte_1EB4DF5D0 = 1;
  CoreML::Specification::_SquaredEuclideanDistance_default_instance_ = (uint64_t)&unk_1EF0D6770;
  qword_1EB4E1200 = 0;
  dword_1EB4E1208 = 0;
  byte_1EB4E1210 = 1;
  qword_1EB4E1810 = (uint64_t)&CoreML::Specification::_NearestNeighborsIndex_default_instance_;
  qword_1EB4E1818 = (uint64_t)&CoreML::Specification::_Int64Parameter_default_instance_;
  return result;
}

unint64_t *CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(CoreML::Specification::protobuf_Parameters_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_Parameters_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(CoreML::Specification::protobuf_CustomModel_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_CustomModel_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(CoreML::Specification::protobuf_Identity_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_Identity_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_Identity_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Identity_2eproto::TableStruct *this)
{
  double result = google::protobuf::internal::InitProtobufDefaults(this);
  CoreML::Specification::_Identity_default_instance_ = (uint64_t)&unk_1EF0DAA88;
  qword_1EB4DE178 = 0;
  dword_1EB4DE180 = 0;
  byte_1EB4DE188 = 1;
  return result;
}

unint64_t *google::protobuf::internal::InitProtobufDefaults(google::protobuf::internal *this)
{
  unint64_t v1 = atomic_load(&google::protobuf::internal::empty_string_once_init_);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = google::protobuf::internal::InitEmptyString;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&google::protobuf::internal::empty_string_once_init_, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(CoreML::Specification::protobuf_Imputer_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_Imputer_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(CoreML::Specification::protobuf_Scaler_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_Scaler_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(CoreML::Specification::protobuf_SVM_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::protobuf_SVM_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

void CoreML::Specification::CustomLayerParams::CustomLayerParams(CoreML::Specification::CustomLayerParams *this)
{
  *(void *)this = &unk_1EF0D24F0;
  *(_OWORD *)((char *)this + _Block_object_dispose(&STACK[0x278], 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  operator new();
}

void sub_19E5D38AC(_Unwind_Exception *a1)
{
  char v4 = v3;
  google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::~Map(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((void *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void *google::protobuf::Map<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue>::InnerMap::InnerMap(void *a1, google::protobuf::Arena *a2)
{
  *a1 = 0;
  std::random_device::random_device[abi:ne180100](&v12);
  uint32_t v4 = arc4random();
  unsigned int v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  v11[0] = v5;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v11);
  long long v10 = xmmword_19EC7B890;
  uint64_t v6 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)v11, &v10);
  std::random_device::~random_device(&v12);
  a1[2] = v6;
  a1[4] = 0;
  a1[5] = a2;
  unint64_t v8 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(a2, 8, v7);
  *(_OWORD *)unint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  a1[3] = 8;
  a1[4] = v8;
  a1[1] = 8;
  return a1;
}

void sub_19E5D39D0(void *a1)
{
  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E5D398CLL);
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

unint64_t *CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v3[0] = &unk_1EF0DC9D8;
    v3[1] = CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::TableStruct::InitDefaultsImpl;
    char v4 = 0;
    return google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(void)::once, (uint64_t)v3);
  }
  return result;
}

uint64_t google::protobuf::internal::OnShutdown(google::protobuf::internal *this, void (*a2)(void))
{
  unint64_t v3 = atomic_load(&google::protobuf::internal::shutdown_functions_init);
  if (v3 != 2)
  {
    v18[0] = &unk_1EF0DC9D8;
    v18[1] = google::protobuf::internal::InitShutdownFunctions;
    char v19 = 0;
    google::protobuf::GoogleOnceInitImpl(&google::protobuf::internal::shutdown_functions_init, (uint64_t)v18);
  }
  char v4 = (google::protobuf::internal::Mutex *)google::protobuf::internal::shutdown_functions_mutex;
  google::protobuf::internal::Mutex::Lock((pthread_mutex_t **)google::protobuf::internal::shutdown_functions_mutex);
  uint64_t v5 = google::protobuf::internal::shutdown_functions;
  size_t v7 = *(void **)(google::protobuf::internal::shutdown_functions + 8);
  unint64_t v6 = *(void *)(google::protobuf::internal::shutdown_functions + 16);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *(void **)google::protobuf::internal::shutdown_functions;
    uint64_t v10 = ((uint64_t)v7 - *(void *)google::protobuf::internal::shutdown_functions) >> 3;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v14 = (char *)operator new(8 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    BOOL v15 = &v14[8 * v10];
    *(void *)BOOL v15 = this;
    unint64_t v8 = v15 + 8;
    if (v7 != v9)
    {
      do
      {
        uint64_t v16 = *--v7;
        *((void *)v15 - 1) = v16;
        v15 -= 8;
      }
      while (v7 != v9);
      size_t v7 = *(void **)v5;
    }
    *(void *)uint64_t v5 = v15;
    *(void *)(v5 + _Block_object_dispose(&STACK[0x278], 8) = v8;
    *(void *)(v5 + 16) = &v14[8 * v13];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *size_t v7 = this;
    unint64_t v8 = v7 + 1;
  }
  *(void *)(v5 + _Block_object_dispose(&STACK[0x278], 8) = v8;
  return google::protobuf::internal::Mutex::Unlock(v4);
}

void sub_19E5D3F1C(_Unwind_Exception *a1)
{
  google::protobuf::internal::Mutex::Unlock(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::Mutex::Unlock(pthread_mutex_t **this)
{
  int v1 = pthread_mutex_unlock(*this);
  if (v1)
  {
    int v2 = v1;
    int v4 = 3;
    uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/stubs/common.cc";
    int v6 = 384;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "pthread_mutex_unlock: ");
    unint64_t v3 = strerror(v2);
    std::string::append(&__p, v3);
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_19E5D3FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void google::protobuf::internal::Mutex::Lock(pthread_mutex_t **this)
{
  int v1 = pthread_mutex_lock(*this);
  if (v1)
  {
    int v2 = v1;
    int v4 = 3;
    uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-internal/deps/protobuf/src/google/protobuf/stubs/common.cc";
    int v6 = 377;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "pthread_mutex_lock: ");
    unint64_t v3 = strerror(v2);
    std::string::append(&__p, v3);
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_19E5D408C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::makeProgramWithMemoryLayout(uint64_t *a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  unint64_t v8 = v7;
  uint64_t v9 = *a2;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  a1[1] = (uint64_t)v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string v45 = v10;
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    std::string v45 = 0;
  }
  uint64_t v44 = v9;
  unint64_t v11 = [v7 inputDescriptionsByName];
  uint64_t v12 = [v8 outputDescriptionsByName];
  CoreML::addMemoryLayoutToProgram((uint64_t)buf, &v44, a3, v11, v12);
  long long v43 = *(_OWORD *)buf;
  *(_OWORD *)a1 = *(_OWORD *)buf;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }

  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  unint64_t v13 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if ((*(uint64_t (**)(void, uint64_t))(*(void *)v43 + 56))(v43, a3))
  {
    unint64_t v14 = (MIL::Transform::ProgramTransformer *)MEMORY[0x19F3C0AC0](v65, v43);
    MIL::Transform::ProgramTransformer::GetProgramBuilder((uint64_t *)&v63, v14);
    MIL::Builder::ProgramBuilder::GetFunction();
    (*(void (**)(void))(*(void *)v43 + 40))(v43);
    MIL::IRTensorValueType::MakeScalar();
    Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
    long long v66 = 0u;
    long long v67 = 0u;
    int v68 = 1065353216;
    MIL::Builder::FunctionBuilder::GetInputs((uint64_t *)buf, v61);
    for (uint64_t i = v52; i; uint64_t i = (void *)*i)
    {
      long long v17 = (MIL::Builder::Variable *)i[2];
      Type = (_anonymous_namespace_ *)MIL::Builder::Variable::TryGetType(v17);
      {
        uint64_t Name = MIL::Builder::Variable::GetName(v17);
        if (*(char *)(Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)Name, *(void *)(Name + 8));
        }
        else
        {
          long long v21 = *(_OWORD *)Name;
          v60.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
          *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v21;
        }
        MIL::IRTensorValueType::MakeStringValue();
        MIL::IRTensorValueType::MakeBoolValue(Scalar);
        std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_impl<std::unique_ptr<MIL::IRTensorValue const>,std::unique_ptr<MIL::IRTensorValue const>>((uint64_t)&v66, (uint64_t *)&v50, (uint64_t *)&v49);
        std::string::size_type v22 = v49.__r_.__value_.__r.__words[0];
        v49.__r_.__value_.__r.__words[0] = 0;
        if (v22) {
          (*(void (**)(std::string::size_type))(*(void *)v22 + 8))(v22);
        }
        std::string::size_type v23 = v50.__r_.__value_.__r.__words[0];
        v50.__r_.__value_.__r.__words[0] = 0;
        if (v23) {
          (*(void (**)(std::string::size_type))(*(void *)v23 + 8))(v23);
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
      }
    }
    std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::~__hash_table((uint64_t)buf);
    MIL::Builder::FunctionBuilder::SelectedSpecialization(v61);
    MIL::Builder::FunctionBuilder::GetBlock();
    if (v58)
    {
      MIL::Builder::BlockBuilder::GetOutputs((uint64_t *)buf, v58);
      size_t v24 = *(MIL::Builder::Variable ***)buf;
      uint64_t v25 = *(MIL::Builder::Variable ***)&buf[8];
      if (*(void *)buf != *(void *)&buf[8])
      {
        do
        {
          unsigned int v26 = *v24;
          unint64_t v27 = (_anonymous_namespace_ *)MIL::Builder::Variable::TryGetType(*v24);
          {
            uint64_t v29 = MIL::Builder::Variable::GetName(v26);
            if (*(char *)(v29 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v29, *(void *)(v29 + 8));
            }
            else
            {
              long long v30 = *(_OWORD *)v29;
              v57.__r_.__value_.__r.__words[2] = *(void *)(v29 + 16);
              *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v30;
            }
            MIL::IRTensorValueType::MakeStringValue();
            MIL::IRTensorValueType::MakeBoolValue(Scalar);
            std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_impl<std::unique_ptr<MIL::IRTensorValue const>,std::unique_ptr<MIL::IRTensorValue const>>((uint64_t)&v66, (uint64_t *)&v50, (uint64_t *)&v49);
            std::string::size_type v31 = v49.__r_.__value_.__r.__words[0];
            v49.__r_.__value_.__r.__words[0] = 0;
            if (v31) {
              (*(void (**)(std::string::size_type))(*(void *)v31 + 8))(v31);
            }
            std::string::size_type v32 = v50.__r_.__value_.__r.__words[0];
            v50.__r_.__value_.__r.__words[0] = 0;
            if (v32) {
              (*(void (**)(std::string::size_type))(*(void *)v32 + 8))(v32);
            }
            if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v57.__r_.__value_.__l.__data_);
            }
          }
          ++v24;
        }
        while (v24 != v25);
        size_t v24 = *(MIL::Builder::Variable ***)buf;
      }
      if (v24)
      {
        *(void *)&buf[8] = v24;
        operator delete(v24);
      }
    }
    if (*((void *)&v67 + 1))
    {
      MIL::IRDictionaryValueType::Make();
      MIL::IRDictionaryValueType::MakeValue();
      if (*(void *)buf) {
        operator new();
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "NeuralEngineOptimizedIOBuffer");
      uint64_t v53 = 0;
      std::string::size_type v54 = 0;
      MIL::Builder::FunctionBuilder::SetAttribute();
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
      if (v56 < 0) {
        operator delete(__p);
      }
      MIL::Builder::ProgramBuilder::CreateProgram((uint64_t *)buf, v63);
      if (((*(uint64_t (**)(uint8_t *))(*(void *)&buf[8] + 16))(&buf[8]) & 1) == 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        MIL::MILResult::GetMessage((MIL::MILResult *)&buf[8]);
        std::operator+<char>();
        unsigned int v36 = std::string::append(&v48, " location");
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v49.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        uint64_t Location = MIL::MILResult::GetLocation((MIL::MILResult *)&buf[8]);
        (*(void (**)(void *__return_ptr))(*(void *)Location + 24))(v46);
        if ((v47 & 0x80u) == 0) {
          long long v39 = (const std::string::value_type *)v46;
        }
        else {
          long long v39 = (const std::string::value_type *)v46[0];
        }
        if ((v47 & 0x80u) == 0) {
          std::string::size_type v40 = v47;
        }
        else {
          std::string::size_type v40 = v46[1];
        }
        std::error_code v41 = std::string::append(&v49, v39, v40);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v50);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (*(void *)buf) {
        operator new();
      }
      *(void *)std::string buf = 0;
      if (*((void *)&v43 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
      }
      MEMORY[0x19F3C0600](&buf[8]);
      uint64_t v34 = *(void *)buf;
      *(void *)std::string buf = 0;
      if (v34) {
        (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
      }
      long long v43 = 0uLL;
    }
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v66);
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
    if (v64) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
    }
    MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v65);
  }
  else
  {
    long long v33 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_19E58B000, v33, OS_LOG_TYPE_INFO, "Not inserting NeuralEngineOptimizedIOBuffer attribute because it does not have the specified entry point function.", buf, 2u);
    }
  }
  *(_OWORD *)a1 = v43;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_19E5D4834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v67 & 1) == 0) {
      goto LABEL_13;
    }
  }
  else if (!v67)
  {
LABEL_13:
    std::pair<std::unique_ptr<MIL::IRProgram>,MIL::ValidationResult>::~pair((uint64_t *)&a41);
    if (v65) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v65);
    }
    uint64_t v71 = *(std::__shared_weak_count **)(v68 - 232);
    if (v71) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v71);
    }
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v68 - 144);
    uint64_t v72 = *(std::__shared_weak_count **)(v68 - 192);
    if (v72) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v72);
    }
    uint64_t v73 = *(std::__shared_weak_count **)(v68 - 176);
    if (v73) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v73);
    }
    MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)(v68 - 168));
    if (v64)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
    }
    uint64_t v74 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v75 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        uint64_t v81 = (*(uint64_t (**)(void *))(*(void *)v74 + 16))(v74);
        *(_DWORD *)(v68 - 144) = 136315138;
        *(void *)(v68 - 140) = v81;
        _os_log_error_impl(&dword_19E58B000, v75, OS_LOG_TYPE_ERROR, "Failed to configure ML Program for the feature types declared in the model description. It is likely an invalid or broken model. (Underlying exception: %s)", (uint8_t *)(v68 - 144), 0xCu);
      }

      if (v63)
      {
        (*(void (**)(void *))(*(void *)v74 + 16))(v74);
        uint64_t v76 = +[MLModelErrorUtils genericErrorWithFormat:@"%s"];
        *std::string v63 = +[MLModelErrorUtils errorWithCode:3 underlyingError:v76 format:@"Failed to configure ML Program for the feature types declared in the model description. It is likely an invalid or broken model."];
      }
    }
    else
    {
      unint64_t v77 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)(v68 - 144) = 0;
        _os_log_error_impl(&dword_19E58B000, v77, OS_LOG_TYPE_ERROR, "Failed to set proper memory layout info in the MIL program with unexpected error.", (uint8_t *)(v68 - 144), 2u);
      }

      if (v63)
      {
        BOOL v78 = (void *)MEMORY[0x1E4F28C58];
        *(void *)(v68 - 160) = *MEMORY[0x1E4F28568];
        BOOL v79 = [NSString stringWithFormat:@"Failed to set proper memory layout info in the MIL program with unexpected error."];
        *(void *)(v68 - 152) = v79;
        BOOL v80 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v68 - 152 forKeys:v68 - 160 count:1];
        *std::string v63 = [v78 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v80];
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x19E5D4700);
  }
  __cxa_free_exception(v66);
  goto LABEL_13;
}

uint64_t anonymous namespace'::isEligibleForNeuralEngineOptimizedIOBufferAttribute(_anonymous_namespace_ *this, const IRValueType *a2)
{
  uint64_t result = (*(uint64_t (**)(_anonymous_namespace_ *, const IRValueType *))(*(void *)this + 24))(this, a2);
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)result + 88))(result);
    if (v4 > 0xB || ((1 << v4) & 0x830) == 0) {
      return 0;
    }
    int v6 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 96))(v3);
    if (v6[1] - *v6 < 0x10uLL)
    {
      return 0;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v6[1] - 8) + 16))(*(void *)(v6[1] - 8));
      if (result)
      {
        uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
        return v7 == 8 || (unint64_t)(v7 - 1) < 4;
      }
    }
  }
  return result;
}

uint64_t std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::~__hash_table(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  unsigned int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  unsigned int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void CoreML::addMemoryLayoutToProgram(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v230 = *MEMORY[0x1E4F143B8];
  id v173 = a4;
  id v172 = a5;
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, a3);
  uint64_t v10 = v9;
  if (!v9)
  {
    uint64_t v18 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_19E58B000, v18, OS_LOG_TYPE_INFO, "Not adding memory layout to program because it doesn't have the specified entry point function.", buf, 2u);
    }
LABEL_17:

    *(_OWORD *)a1 = *(_OWORD *)a2;
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_333;
  }
  unint64_t v11 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 128))(v9);
  uint64_t v170 = v10;
  uint64_t v12 = v11 + 1;
  unint64_t v13 = (void *)*v11;
  if ((void *)*v11 != v11 + 1)
  {
    while (!MIL::IRValueType::TryCastAsStateType((MIL::IRValueType *)v13[7]))
    {
      unint64_t v14 = (void *)v13[1];
      if (v14)
      {
        do
        {
          BOOL v15 = v14;
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          BOOL v15 = (void *)v13[2];
          BOOL v16 = *v15 == (void)v13;
          unint64_t v13 = v15;
        }
        while (!v16);
      }
      unint64_t v13 = v15;
      if (v15 == v12) {
        goto LABEL_10;
      }
    }
    uint64_t v18 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_19E58B000, v18, OS_LOG_TYPE_INFO, "Not adding memory layout to program due to the inputs containing one or more states.", buf, 2u);
    }
    goto LABEL_17;
  }
LABEL_10:
  (*(void (**)(void))(*(void *)*a2 + 40))();
  MIL::Attributes::FlexibleShapeInfo::Make();
  MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes((uint64_t *)buf, v211);
  if (*(void *)buf) {
    BOOL v17 = *(void *)(*(void *)buf + 24) != 0;
  }
  else {
    BOOL v17 = 0;
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v17)
  {
    uint64_t EnumeratedShapes = MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v211);
    v169 = a2;
    *(_OWORD *)std::string buf = 0u;
    long long v189 = 0u;
    float v190 = *(float *)(EnumeratedShapes + 32);
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)buf, *(void *)(EnumeratedShapes + 8));
    for (uint64_t i = *(unsigned __int8 **)(EnumeratedShapes + 16); i; uint64_t i = *(unsigned __int8 **)i)
    {
      unint64_t v22 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(i + 16));
      unint64_t v23 = v22;
      unint64_t v24 = *(void *)&buf[8];
      if (*(void *)&buf[8])
      {
        uint8x8_t v25 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&buf[8]);
        v25.i16[0] = vaddlv_u8(v25);
        unint64_t v26 = v25.u32[0];
        if (v25.u32[0] > 1uLL)
        {
          unint64_t v5 = v22;
          if (v22 >= *(void *)&buf[8]) {
            unint64_t v5 = v22 % *(void *)&buf[8];
          }
        }
        else
        {
          unint64_t v5 = (*(void *)&buf[8] - 1) & v22;
        }
        unint64_t v27 = *(unsigned __int8 ***)(*(void *)buf + 8 * v5);
        if (v27)
        {
          for (j = *v27; j; j = *(unsigned __int8 **)j)
          {
            unint64_t v29 = *((void *)j + 1);
            if (v29 == v23)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](j + 16, i + 16)) {
                goto LABEL_111;
              }
            }
            else
            {
              if (v26 > 1)
              {
                if (v29 >= v24) {
                  v29 %= v24;
                }
              }
              else
              {
                v29 &= v24 - 1;
              }
              if (v29 != v5) {
                break;
              }
            }
          }
        }
      }
      long long v30 = (char *)operator new(0x50uLL);
      std::string::size_type v31 = v30;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v189;
      __p.__r_.__value_.__s.__data_[16] = 0;
      *(void *)long long v30 = 0;
      *((void *)v30 + 1) = v23;
      if ((char)i[39] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v30 + 16), *((const std::string::value_type **)i + 2), *((void *)i + 3));
      }
      else
      {
        long long v32 = *((_OWORD *)i + 1);
        *((void *)v30 + 4) = *((void *)i + 4);
        *((_OWORD *)v30 + 1) = v32;
      }
      unint64_t v179 = v5;
      unint64_t v182 = v24;
      unint64_t v176 = v23;
      *(_OWORD *)(v31 + 40) = 0u;
      unint64_t v5 = (unint64_t)(v31 + 40);
      *(_OWORD *)(v31 + 56) = 0u;
      *((_DWORD *)v31 + 1_Block_object_dispose(&STACK[0x278], 8) = *((_DWORD *)i + 18);
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)(v31 + 40), *((void *)i + 6));
      v177 = i;
      long long v33 = (unsigned __int8 *)*((void *)i + 7);
      if (v33)
      {
        obj = v31 + 56;
        do
        {
          unint64_t v34 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v33 + 16));
          unint64_t v35 = v34;
          unint64_t v36 = *((void *)v31 + 6);
          if (v36)
          {
            uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
            v37.i16[0] = vaddlv_u8(v37);
            unint64_t v38 = v37.u32[0];
            if (v37.u32[0] > 1uLL)
            {
              unint64_t v24 = v34;
              if (v34 >= v36) {
                unint64_t v24 = v34 % v36;
              }
            }
            else
            {
              unint64_t v24 = (v36 - 1) & v34;
            }
            long long v39 = *(unsigned __int8 ***)(*(void *)v5 + 8 * v24);
            if (v39)
            {
              for (k = *v39; k; k = *(unsigned __int8 **)k)
              {
                unint64_t v41 = *((void *)k + 1);
                if (v41 == v35)
                {
                  if (std::equal_to<std::string>::operator()[abi:ne180100](k + 16, v33 + 16)) {
                    goto LABEL_88;
                  }
                }
                else
                {
                  if (v38 > 1)
                  {
                    if (v41 >= v36) {
                      v41 %= v36;
                    }
                  }
                  else
                  {
                    v41 &= v36 - 1;
                  }
                  if (v41 != v24) {
                    break;
                  }
                }
              }
            }
          }
          long long v42 = (char *)operator new(0x40uLL);
          long long v43 = v42;
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
          __s.__r_.__value_.__l.__size_ = (std::string::size_type)(v31 + 56);
          __s.__r_.__value_.__s.__data_[16] = 0;
          *(void *)long long v42 = 0;
          *((void *)v42 + 1) = v35;
          if ((char)v33[39] < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v42 + 16), *((const std::string::value_type **)v33 + 2), *((void *)v33 + 3));
          }
          else
          {
            long long v44 = *((_OWORD *)v33 + 1);
            *((void *)v42 + 4) = *((void *)v33 + 4);
            *((_OWORD *)v42 + 1) = v44;
          }
          v43[5] = 0;
          v43[6] = 0;
          v43[7] = 0;
          std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v43 + 5, *((const void **)v33 + 5), *((void *)v33 + 6), (uint64_t)(*((void *)v33 + 6) - *((void *)v33 + 5)) >> 3);
          __s.__r_.__value_.__s.__data_[16] = 1;
          float v45 = (float)(unint64_t)(*((void *)v31 + 8) + 1);
          float v46 = *((float *)v31 + 18);
          if (!v36 || (float)(v46 * (float)v36) < v45)
          {
            BOOL v47 = (v36 & (v36 - 1)) != 0;
            if (v36 < 3) {
              BOOL v47 = 1;
            }
            unint64_t v48 = v47 | (2 * v36);
            unint64_t v49 = vcvtps_u32_f32(v45 / v46);
            if (v48 <= v49) {
              size_t v50 = v49;
            }
            else {
              size_t v50 = v48;
            }
            std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)(v31 + 40), v50);
            unint64_t v36 = *((void *)v31 + 6);
            if ((v36 & (v36 - 1)) != 0)
            {
              if (v35 >= v36) {
                unint64_t v24 = v35 % v36;
              }
              else {
                unint64_t v24 = v35;
              }
            }
            else
            {
              unint64_t v24 = (v36 - 1) & v35;
            }
          }
          uint64_t v51 = *(void *)v5;
          int v52 = *(void **)(*(void *)v5 + 8 * v24);
          if (v52)
          {
            *long long v43 = *v52;
          }
          else
          {
            *long long v43 = *obj;
            void *obj = v43;
            *(void *)(v51 + 8 * v24) = obj;
            if (!*v43) {
              goto LABEL_87;
            }
            unint64_t v53 = *(void *)(*v43 + 8);
            if ((v36 & (v36 - 1)) != 0)
            {
              if (v53 >= v36) {
                v53 %= v36;
              }
            }
            else
            {
              v53 &= v36 - 1;
            }
            int v52 = (void *)(*(void *)v5 + 8 * v53);
          }
          *int v52 = v43;
LABEL_87:
          __s.__r_.__value_.__r.__words[0] = 0;
          ++*((void *)v31 + 8);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__s);
LABEL_88:
          long long v33 = *(unsigned __int8 **)v33;
        }
        while (v33);
      }
      __p.__r_.__value_.__s.__data_[16] = 1;
      float v54 = (float)(unint64_t)(*((void *)&v189 + 1) + 1);
      uint64_t i = v177;
      unint64_t v55 = v179;
      unint64_t v56 = v182;
      if (!v182 || (float)(v190 * (float)v182) < v54)
      {
        BOOL v57 = (v182 & (v182 - 1)) != 0;
        if (v182 < 3) {
          BOOL v57 = 1;
        }
        unint64_t v58 = v57 | (2 * v182);
        unint64_t v59 = vcvtps_u32_f32(v54 / v190);
        if (v58 <= v59) {
          size_t v60 = v59;
        }
        else {
          size_t v60 = v58;
        }
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)buf, v60);
        unint64_t v56 = *(void *)&buf[8];
        if ((*(void *)&buf[8] & (*(void *)&buf[8] - 1)) != 0)
        {
          if (v176 >= *(void *)&buf[8]) {
            unint64_t v55 = v176 % *(void *)&buf[8];
          }
          else {
            unint64_t v55 = v176;
          }
        }
        else
        {
          unint64_t v55 = (*(void *)&buf[8] - 1) & v176;
        }
      }
      uint64_t v61 = *(void *)buf;
      std::string v62 = *(void **)(*(void *)buf + 8 * v55);
      if (v62)
      {
        *(void *)std::string::size_type v31 = *v62;
      }
      else
      {
        *(void *)std::string::size_type v31 = v189;
        *(void *)&long long v189 = v31;
        *(void *)(v61 + 8 * v55) = &v189;
        if (!*(void *)v31) {
          goto LABEL_110;
        }
        unint64_t v63 = *(void *)(*(void *)v31 + 8);
        if ((v56 & (v56 - 1)) != 0)
        {
          if (v63 >= v56) {
            v63 %= v56;
          }
        }
        else
        {
          v63 &= v56 - 1;
        }
        std::string v62 = (void *)(*(void *)buf + 8 * v63);
      }
      *std::string v62 = v31;
LABEL_110:
      __p.__r_.__value_.__r.__words[0] = 0;
      ++*((void *)&v189 + 1);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
LABEL_111:
      ;
    }
    unint64_t v64 = *((void *)&v189 + 1);
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table((uint64_t)buf);
    if (v64 <= 1)
    {
      uint64_t v138 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v170 + 128))(v170);
      v139 = v138 + 1;
      v140 = (void *)*v138;
      if ((void *)*v138 != v138 + 1)
      {
        do
        {
          uint64_t v141 = (*(uint64_t (**)(void))(*(void *)v140[7] + 24))(v140[7]);
          if (!v141)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x19F3C1380](exception, "Some IO of the program is not tensor type.");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          long long v142 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v141 + 96))(v141);
          uint64_t v143 = *v142;
          uint64_t v144 = v142[1];
          while (v143 != v144)
          {
            if ((*(uint64_t (**)(void))(**(void **)v143 + 24))()) {
              goto LABEL_328;
            }
            v143 += 8;
          }
          long long v145 = (void *)v140[1];
          if (v145)
          {
            do
            {
              long long v146 = v145;
              long long v145 = (void *)*v145;
            }
            while (v145);
          }
          else
          {
            do
            {
              long long v146 = (void *)v140[2];
              BOOL v16 = *v146 == (void)v140;
              v140 = v146;
            }
            while (!v16);
          }
          v140 = v146;
        }
        while (v146 != v139);
      }
      (*(void (**)(uint8_t *__return_ptr))(*(void *)v170 + 160))(buf);
      long long v147 = *(char **)buf;
      long long v148 = *(char **)&buf[8];
      if (*(void *)buf == *(void *)&buf[8])
      {
        int v153 = 0;
      }
      else
      {
        while (2)
        {
          uint64_t v149 = (*(uint64_t (**)(void))(**(void **)v147 + 24))();
          if (!v149)
          {
            v168 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x19F3C1380](v168, "Some IO of the program is not tensor type.");
            __cxa_throw(v168, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          long long v150 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v149 + 96))(v149);
          uint64_t v151 = *v150;
          uint64_t v152 = v150[1];
          while (v151 != v152)
          {
            if ((*(uint64_t (**)(void))(**(void **)v151 + 24))())
            {
              int v153 = 1;
              goto LABEL_323;
            }
            v151 += 8;
          }
          v147 += 8;
          if (v147 != v148) {
            continue;
          }
          break;
        }
        int v153 = 0;
LABEL_323:
        long long v147 = *(char **)buf;
      }
      if (v147)
      {
        *(void *)&buf[8] = v147;
        operator delete(v147);
      }
      if (v153)
      {
LABEL_328:
        v155 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v155, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_19E58B000, v155, OS_LOG_TYPE_INFO, "Not adding memory layout to program due to it being data dependent.", buf, 2u);
        }

        *(_OWORD *)a1 = *(_OWORD *)v169;
        void *v169 = 0;
        v169[1] = 0;
        goto LABEL_331;
      }
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*v169 + 48))(&v209);
    MEMORY[0x19F3C0AC0](v208, *v169);
    MIL::Transform::ProgramTransformer::GetProgramBuilder((uint64_t *)&v206, (MIL::Transform::ProgramTransformer *)v208);
    MIL::Builder::ProgramBuilder::GetFunction();
    MIL::Builder::FunctionBuilder::SelectedSpecialization(v204);
    MIL::Builder::FunctionBuilder::GetBlock();
    MIL::Builder::BlockBuilder::GetOutputNames(v201, v202);
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    id obja = v173;
    uint64_t v65 = [obja countByEnumeratingWithState:&v197 objects:v229 count:16];
    if (!v65) {
      goto LABEL_172;
    }
    uint64_t v180 = *(void *)v198;
    while (1)
    {
      uint64_t v183 = v65;
      for (uint64_t m = 0; m != v183; ++m)
      {
        if (*(void *)v198 != v180) {
          objc_enumerationMutation(obja);
        }
        int v67 = [obja objectForKeyedSubscript:*(void *)(*((void *)&v197 + 1) + 8 * m)];
        if ([v67 type] == 5)
        {
          uint64_t v68 = v205;
          v196[0] = v204;
          v196[1] = (MIL::Builder::FunctionBuilder *)v205;
          if (v205) {
            atomic_fetch_add_explicit(&v205->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v68) {
            goto LABEL_169;
          }
          goto LABEL_170;
        }
        if ([v67 type] != 4) {
          goto LABEL_170;
        }
        uint64_t v69 = v204;
        uint64_t v68 = v205;
        if (v205) {
          atomic_fetch_add_explicit(&v205->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        id v70 = v67;
        id v71 = [v70 name];
        std::string::basic_string[abi:ne180100]<0>(buf, (char *)[v71 UTF8String]);

        Input = (MIL::Builder::Variable *)MIL::Builder::FunctionBuilder::TryGetInput();
        uint64_t Type = MIL::Builder::Variable::TryGetType(Input);
        uint64_t v74 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 24))(Type);
        if (!v74)
        {
          v157 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x19F3C1380](v157, "Converting image input -> tensor buffer requires input to be a tensor");
          __cxa_throw(v157, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v75 = [v70 imageConstraint];
        uint64_t v76 = (*(uint64_t (**)(uint64_t))(*(void *)v74 + 96))(v74);
        int v77 = (*(uint64_t (**)(uint64_t))(*(void *)v74 + 88))(v74);
        MIL::Builder::FunctionBuilder::SelectedSpecialization(v69);
        MIL::Builder::FunctionBuilder::GetBlock();
        uint64_t OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
        if (*(void *)(OperationsByInput + 24) == 1)
        {
          MIL::Builder::FunctionBuilder::SelectedSpecialization(v69);
          Opset = (MIL::IROpset *)MIL::MILContext::GetOpset();
          uint64_t v80 = *(void *)(OperationsByInput + 16);
          BOOL v82 = *(MIL::Builder::OperationBuilder **)(v80 + 16);
          uint64_t v81 = *(std::__shared_weak_count **)(v80 + 24);
          if (v81) {
            atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v178 = v81;
          uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(v82);
          unint64_t v84 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          {
            p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
            if (__s.__r_.__value_.__l.__size_ == 4)
            {
LABEL_134:
              if (LODWORD(p_s->__r_.__value_.__l.__data_) == 1953718627)
              {
                Output = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v82);
                MIL::Builder::Variable::GetName(Output);
                BOOL v87 = (MIL::IRValueType *)MIL::Builder::Variable::TryGetType(Output);
                uint64_t v88 = MIL::IRValueType::AsTensorType(v87);
                (*(void (**)(uint64_t))(*(void *)v88 + 88))(v88);
                v224 = v82;
                v225 = v178;
                if (v178) {
                  atomic_fetch_add_explicit(&v178->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                MIL::Builder::BlockBuilder::RemoveOperation();
                if (v225) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v225);
                }
                uint64_t v89 = (*(uint64_t (**)(uint64_t))(*(void *)v74 + 96))(v74);
                memset(&__p, 0, sizeof(__p));
                std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v89, *(void *)(v89 + 8), (uint64_t)(*(void *)(v89 + 8) - *(void *)v89) >> 3);
                MIL::IRTensorValueType::MakeWithShape();
                MIL::Builder::FunctionBuilder::RemoveInput();
                if (SBYTE7(v189) < 0)
                {
                  std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
                }
                else
                {
                  *(_OWORD *)&v219.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
                  v219.__r_.__value_.__r.__words[2] = v189;
                }
                MIL::Builder::FunctionBuilder::AddInput();
                if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v219.__r_.__value_.__l.__data_);
                }
                if (SBYTE7(v189) < 0)
                {
                  std::string::__init_copy_ctor_external(&v215, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
                }
                else
                {
                  *(_OWORD *)&v215.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
                  v215.__r_.__value_.__r.__words[2] = v189;
                }
                v223 = 0;
                v222 = 0;
                MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
                if (v223) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v223);
                }
                if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v215.__r_.__value_.__l.__data_);
                }
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) == 0) {
                  goto LABEL_158;
                }
              }
              else if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) == 0)
              {
                goto LABEL_158;
              }
              p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
            }
            operator delete(p_s);
          }
          else if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) == 4)
          {
            p_s = &__s;
            goto LABEL_134;
          }
LABEL_158:
          if (v178) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v178);
          }
        }
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
        __s.__r_.__value_.__l.__size_ = (std::string::size_type)v68;
        if (v68) {
          atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v68) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v68);
        }
        if (v214.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v214.__r_.__value_.__l.__size_);
        }

        if (SBYTE7(v189) < 0) {
          operator delete(*(void **)buf);
        }

        if (v68) {
LABEL_169:
        }
          std::__shared_weak_count::__release_shared[abi:ne180100](v68);
LABEL_170:
      }
      uint64_t v65 = [obja countByEnumeratingWithState:&v197 objects:v229 count:16];
      if (!v65)
      {
LABEL_172:

        long long v194 = 0u;
        long long v195 = 0u;
        long long v192 = 0u;
        long long v193 = 0u;
        unint64_t v90 = (unint64_t)v172;
        uint64_t v91 = [(id)v90 countByEnumeratingWithState:&v192 objects:v228 count:16];
        if (!v91) {
          goto LABEL_283;
        }
        uint64_t v184 = *(void *)v193;
        unint64_t v174 = v90;
        while (1)
        {
          id objb = (id)v91;
          for (n = 0; n != objb; n = (char *)n + 1)
          {
            if (*(void *)v193 != v184) {
              objc_enumerationMutation((id)v90);
            }
            BOOL v93 = [(id)v90 objectForKeyedSubscript:*(void *)(*((void *)&v192 + 1) + 8 * (void)n)];
            if ([v93 type] == 5)
            {
              v94 = v205;
              v191[0] = v204;
              v191[1] = (MIL::Builder::FunctionBuilder *)v205;
              if (v205) {
                atomic_fetch_add_explicit(&v205->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (!v94) {
                goto LABEL_281;
              }
LABEL_280:
              std::__shared_weak_count::__release_shared[abi:ne180100](v94);
              goto LABEL_281;
            }
            if ([v93 type] != 4) {
              goto LABEL_281;
            }
            BOOL v95 = v204;
            v94 = v205;
            if (v205) {
              atomic_fetch_add_explicit(&v205->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            id v96 = v93;
            id v97 = [v96 name];
            std::string::basic_string[abi:ne180100]<0>(&__s, (char *)[v97 UTF8String]);

            MIL::Builder::FunctionBuilder::SelectedSpecialization(v95);
            MIL::Builder::FunctionBuilder::GetBlock();
            MIL::Builder::FunctionBuilder::SelectedSpecialization(v95);
            v98 = (MIL::IROpset *)MIL::MILContext::GetOpset();
            Variable = (MIL::Builder::Variable *)MIL::Builder::BlockBuilder::GetVariable();
            uint64_t v100 = MIL::Builder::Variable::TryGetType(Variable);
            uint64_t v101 = (*(uint64_t (**)(uint64_t))(*(void *)v100 + 24))(v100);
            if (!v101)
            {
              v158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              std::runtime_error::runtime_error(v158, (const std::string *)buf);
              __cxa_throw(v158, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            v181 = [v96 imageConstraint];
            uint64_t v102 = (*(uint64_t (**)(uint64_t))(*(void *)v101 + 96))(v101);
            int v103 = (*(uint64_t (**)(uint64_t))(*(void *)v101 + 88))(v101);
            MIL::Builder::BlockBuilder::GetOperation();
            uint64_t v104 = MIL::Builder::OperationBuilder::GetOperator(v222);
            v105 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v104 + 16))(v104);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              if (__p.__r_.__value_.__l.__size_ != 4) {
                goto LABEL_267;
              }
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 4) {
                goto LABEL_267;
              }
              p_p = &__p;
            }
            if (LODWORD(p_p->__r_.__value_.__l.__data_) == 1953718627)
            {
              uint64_t v107 = MIL::Builder::BlockBuilder::GetOperationsByInput();
              id v175 = v96;
              *(_OWORD *)std::string buf = 0u;
              long long v189 = 0u;
              float v190 = *(float *)(v107 + 32);
              std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)buf, *(void *)(v107 + 8));
              for (iuint64_t i = *(void **)(v107 + 16); ii; iuint64_t i = (void *)*ii)
              {
                unint64_t v109 = ii[2];
                unint64_t v110 = 0x9DDFEA08EB382D69 * (((8 * v109) + 8) ^ HIDWORD(v109));
                unint64_t v111 = 0x9DDFEA08EB382D69 * (HIDWORD(v109) ^ (v110 >> 47) ^ v110);
                unint64_t v112 = 0x9DDFEA08EB382D69 * (v111 ^ (v111 >> 47));
                unint64_t v113 = *(void *)&buf[8];
                if (*(void *)&buf[8])
                {
                  uint8x8_t v114 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&buf[8]);
                  v114.i16[0] = vaddlv_u8(v114);
                  if (v114.u32[0] > 1uLL)
                  {
                    unint64_t v90 = 0x9DDFEA08EB382D69 * (v111 ^ (v111 >> 47));
                    if (v112 >= *(void *)&buf[8]) {
                      unint64_t v90 = v112 % *(void *)&buf[8];
                    }
                  }
                  else
                  {
                    unint64_t v90 = v112 & (*(void *)&buf[8] - 1);
                  }
                  v115 = *(void **)(*(void *)buf + 8 * v90);
                  if (v115)
                  {
                    for (jj = (void *)*v115; jj; jj = (void *)*jj)
                    {
                      unint64_t v117 = jj[1];
                      if (v117 == v112)
                      {
                        if (jj[2] == v109) {
                          goto LABEL_233;
                        }
                      }
                      else
                      {
                        if (v114.u32[0] > 1uLL)
                        {
                          if (v117 >= *(void *)&buf[8]) {
                            v117 %= *(void *)&buf[8];
                          }
                        }
                        else
                        {
                          v117 &= *(void *)&buf[8] - 1;
                        }
                        if (v117 != v90) {
                          break;
                        }
                      }
                    }
                  }
                }
                v118 = operator new(0x20uLL);
                void *v118 = 0;
                v118[1] = v112;
                v118[2] = ii[2];
                uint64_t v119 = ii[3];
                v118[3] = v119;
                if (v119) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v119 + 8), 1uLL, memory_order_relaxed);
                }
                float v120 = (float)(unint64_t)(*((void *)&v189 + 1) + 1);
                if (!v113 || (float)(v190 * (float)v113) < v120)
                {
                  BOOL v121 = (v113 & (v113 - 1)) != 0;
                  if (v113 < 3) {
                    BOOL v121 = 1;
                  }
                  unint64_t v122 = v121 | (2 * v113);
                  unint64_t v123 = vcvtps_u32_f32(v120 / v190);
                  if (v122 <= v123) {
                    size_t v124 = v123;
                  }
                  else {
                    size_t v124 = v122;
                  }
                  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)buf, v124);
                  unint64_t v113 = *(void *)&buf[8];
                  if ((*(void *)&buf[8] & (*(void *)&buf[8] - 1)) != 0)
                  {
                    if (v112 >= *(void *)&buf[8]) {
                      unint64_t v90 = v112 % *(void *)&buf[8];
                    }
                    else {
                      unint64_t v90 = v112;
                    }
                  }
                  else
                  {
                    unint64_t v90 = (*(void *)&buf[8] - 1) & v112;
                  }
                }
                uint64_t v125 = *(void *)buf;
                long long v126 = *(void **)(*(void *)buf + 8 * v90);
                if (v126)
                {
                  void *v118 = *v126;
                }
                else
                {
                  void *v118 = v189;
                  *(void *)&long long v189 = v118;
                  *(void *)(v125 + 8 * v90) = &v189;
                  if (!*v118) {
                    goto LABEL_232;
                  }
                  unint64_t v127 = *(void *)(*v118 + 8);
                  if ((v113 & (v113 - 1)) != 0)
                  {
                    if (v127 >= v113) {
                      v127 %= v113;
                    }
                  }
                  else
                  {
                    v127 &= v113 - 1;
                  }
                  long long v126 = (void *)(*(void *)buf + 8 * v127);
                }
                *long long v126 = v118;
LABEL_232:
                ++*((void *)&v189 + 1);
LABEL_233:
                ;
              }
              unint64_t v90 = v174;
              id v96 = v175;
              if (!*((void *)&v189 + 1))
              {
                v220 = v222;
                v221 = v223;
                if (v223) {
                  atomic_fetch_add_explicit(&v223->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                MIL::Builder::BlockBuilder::RemoveOperation();
                if (v221) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v221);
                }
                std::string::basic_string[abi:ne180100]<0>(&v219, "x");
                ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
                if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v219.__r_.__value_.__l.__data_);
                }
                uint64_t Name = MIL::Builder::Variable::GetName(ArgumentForParameter);
                if (*(char *)(Name + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)Name, *(void *)(Name + 8));
                }
                else
                {
                  long long v130 = *(_OWORD *)Name;
                  v219.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
                  *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v130;
                }
                MIL::Builder::BlockBuilder::GetOperation();
                long long v131 = v217;
                long long v132 = v218;
                if (v218) {
                  atomic_fetch_add_explicit(&v218->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (v132) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v132);
                }
                if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v215, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v215 = __s;
                }
                MIL::Builder::OperationBuilder::RenameOutput();
                if (v216) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v216);
                }
                if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v215.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v214, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v214 = __s;
                }
                uint64_t v212 = 0;
                v213 = 0;
                MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
                if (v213) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v213);
                }
                if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v214.__r_.__value_.__l.__data_);
                }
                if (v218) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v218);
                }
                if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v219.__r_.__value_.__l.__data_);
                }
              }
              std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)buf);
            }
LABEL_267:
            *(void *)std::string buf = v95;
            *(void *)&buf[8] = v94;
            if (v94) {
              atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v94) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v94);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v223) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v223);
            }

            if (v225) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v225);
            }
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s.__r_.__value_.__l.__data_);
            }

            if (v94) {
              goto LABEL_280;
            }
LABEL_281:
          }
          uint64_t v91 = [(id)v90 countByEnumeratingWithState:&v192 objects:v228 count:16];
          if (!v91)
          {
LABEL_283:

            MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&__s, v202);
            std::string::size_type size = __s.__r_.__value_.__l.__size_;
            for (std::string::size_type kk = __s.__r_.__value_.__r.__words[0]; kk != size; kk += 24)
              MIL::Builder::BlockBuilder::RemoveOutput();
            uint64_t v135 = v201[0];
            uint64_t v136 = v201[1];
            while (v135 != v136)
            {
              MIL::Builder::BlockBuilder::AddOutput();
              v135 += 24;
            }
            MIL::Transform::ProgramTransformer::EliminateDeadNodes((MIL::Transform::ProgramTransformer *)v208);
            MIL::Builder::ProgramBuilder::CreateProgram((uint64_t *)buf, v206);
            if (((*(uint64_t (**)(uint8_t *))(*(void *)&buf[8] + 16))(&buf[8]) & 1) == 0)
            {
              v160 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              MIL::MILResult::GetMessage((MIL::MILResult *)&buf[8]);
              std::operator+<char>();
              v161 = std::string::append(&v215, " location");
              long long v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
              v219.__r_.__value_.__r.__words[2] = v161->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v162;
              v161->__r_.__value_.__l.__size_ = 0;
              v161->__r_.__value_.__r.__words[2] = 0;
              v161->__r_.__value_.__r.__words[0] = 0;
              uint64_t Location = MIL::MILResult::GetLocation((MIL::MILResult *)&buf[8]);
              (*(void (**)(std::string *__return_ptr))(*(void *)Location + 24))(&v214);
              if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v164 = &v214;
              }
              else {
                v164 = (std::string *)v214.__r_.__value_.__r.__words[0];
              }
              if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v165 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v165 = v214.__r_.__value_.__l.__size_;
              }
              v166 = std::string::append(&v219, (const std::string::value_type *)v164, v165);
              long long v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v166->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v167;
              v166->__r_.__value_.__l.__size_ = 0;
              v166->__r_.__value_.__r.__words[2] = 0;
              v166->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v160, &__p);
              __cxa_throw(v160, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            uint64_t v137 = *(void *)buf;
            *(void *)a1 = *(void *)buf;
            if (v137) {
              operator new();
            }
            *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = 0;
            *(void *)std::string buf = 0;
            MEMORY[0x19F3C0600](&buf[8]);
            uint64_t v154 = *(void *)buf;
            *(void *)std::string buf = 0;
            if (v154) {
              (*(void (**)(uint64_t))(*(void *)v154 + 8))(v154);
            }
            *(void *)std::string buf = &__s;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            *(void *)std::string buf = v201;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            if (v203) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v203);
            }
            if (v205) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v205);
            }
            if (v207) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v207);
            }
            MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v208);
            if (v210) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v210);
            }
            goto LABEL_331;
          }
        }
      }
    }
  }
  char v19 = +[MLLogging coreChannel];
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_19E58B000, v19, OS_LOG_TYPE_INFO, "Not adding memory layout to program due to the inputs having range flexibility.", buf, 2u);
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
LABEL_331:
  v156 = v211;
  v211 = 0;
  if (v156)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v156);
    MEMORY[0x19F3C1920]();
  }
LABEL_333:
}

void sub_19E5D6B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (SLOBYTE(STACK[0x207]) < 0)
  {
    operator delete(a73);
    if ((v74 & 1) == 0)
    {
LABEL_12:
      std::pair<std::unique_ptr<MIL::IRProgram>,MIL::ValidationResult>::~pair((uint64_t *)&a23);
      a23 = &STACK[0x298];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      STACK[0x280] = (unint64_t)&a52;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
      if (a56) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a56);
      }
      if (a58) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a58);
      }
      if (a60) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a60);
      }
      MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&a61);
      if (a63) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a63);
      }
      std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::reset[abi:ne180100](&a64);

      _Unwind_Resume(a1);
    }
  }
  else if (!v74)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v73);
  goto LABEL_12;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

void sub_19E5D7244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_impl<std::unique_ptr<MIL::IRTensorValue const>,std::unique_ptr<MIL::IRTensorValue const>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = (uint64_t *)(a1 + 16);
  uint64_t v7 = (uint64_t *)operator new(0x30uLL);
  v29[0] = v7;
  v29[1] = v6;
  *uint64_t v7 = 0;
  v7[1] = 0;
  std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<std::unique_ptr<MIL::IRTensorValue const>,std::unique_ptr<MIL::IRTensorValue const>,0>(v7 + 2, a2, a3);
  char v30 = 1;
  v7[1] = MIL::IRValueMapHasher::operator()();
  unint64_t v8 = MIL::IRValueMapHasher::operator()();
  v7[1] = v8;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v10 = v8;
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v9 <= v8) {
        unint64_t v13 = v8 % v9;
      }
    }
    else
    {
      unint64_t v13 = (v9 - 1) & v8;
    }
    unint64_t v14 = *(void **)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      BOOL v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (MIL::IRValueMapEq::operator()()) {
              goto LABEL_39;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v16 >= v9) {
                v16 %= v9;
              }
            }
            else
            {
              v16 &= v9 - 1;
            }
            if (v16 != v13) {
              break;
            }
          }
          BOOL v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v22);
  }
  int8x8_t v23 = *(int8x8_t *)(a1 + 8);
  unint64_t v24 = v7[1];
  uint8x8_t v25 = (uint8x8_t)vcnt_s8(v23);
  v25.i16[0] = vaddlv_u8(v25);
  if (v25.u32[0] > 1uLL)
  {
    if (v24 >= *(void *)&v23) {
      v24 %= *(void *)&v23;
    }
  }
  else
  {
    v24 &= *(void *)&v23 - 1;
  }
  uint64_t v26 = *(void *)a1;
  unint64_t v27 = *(uint64_t **)(*(void *)a1 + 8 * v24);
  if (v27)
  {
    *uint64_t v7 = *v27;
LABEL_37:
    uint64_t *v27 = (uint64_t)v7;
    goto LABEL_38;
  }
  *uint64_t v7 = *v6;
  *int v6 = (uint64_t)v7;
  *(void *)(v26 + 8 * v24) = v6;
  if (*v7)
  {
    unint64_t v28 = *(void *)(*v7 + 8);
    if (v25.u32[0] > 1uLL)
    {
      if (v28 >= *(void *)&v23) {
        v28 %= *(void *)&v23;
      }
    }
    else
    {
      v28 &= *(void *)&v23 - 1;
    }
    unint64_t v27 = (uint64_t *)(*(void *)a1 + 8 * v28);
    goto LABEL_37;
  }
LABEL_38:
  ++*(void *)(a1 + 24);
  v29[0] = 0;
LABEL_39:
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
}

void sub_19E5D758C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void sub_19E5D76C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5D77B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5D785C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5D7A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E5D7AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void type metadata accessor for IOSurfaceRef(uint64_t a1)
{
}

__n128 __swift_memcpy176_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x278], 8) = v8;
  return result;
}

uint64_t sub_19E5D7C10(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 176)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_19E5D7C30(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16_Block_object_dispose(&STACK[0x278], 8) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 176) = v3;
  return result;
}

void type metadata accessor for BNNSNDArrayDescriptor(uint64_t a1)
{
}

void type metadata accessor for CVBuffer(uint64_t a1)
{
}

void type metadata accessor for MLComputeUnits(uint64_t a1)
{
}

uint64_t sub_19E5D7CC4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 1;
  }
  char v3 = (uint64_t *)(v1 + 32);
  uint64_t v4 = 1;
  while (1)
  {
    uint64_t v5 = *v3++;
    uint64_t result = v4 * v5;
    if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63) {
      break;
    }
    uint64_t v4 = result;
    if (!--v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_19E5D7D08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = a4;
  int64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    unint64_t v21 = (void *)MEMORY[0x1E4FBC860];
    uint64_t result = sub_19E66F5D8(0, v10, 0);
    unint64_t v12 = v21;
    unint64_t v13 = (uint64_t *)(a3 + 32);
    while (1)
    {
      uint64_t v15 = *v13++;
      uint64_t v14 = v15;
      if (v15 < 0) {
        break;
      }
      unint64_t v17 = v21[2];
      unint64_t v16 = v21[3];
      if (v17 >= v16 >> 1) {
        uint64_t result = sub_19E66F5D8(v16 > 1, v17 + 1, 1);
      }
      v21[2] = v17 + 1;
      float v18 = &v21[2 * v17];
      v18[4] = 0;
      v18[5] = v14;
      if (!--v10)
      {
        if (v21[4] == v21[5]) {
          goto LABEL_8;
        }
        if (v17)
        {
          BOOL v19 = v21 + 7;
          while (*(v19 - 1) != *v19)
          {
            v19 += 2;
            if (!--v17) {
              goto LABEL_14;
            }
          }
LABEL_8:
          uint64_t result = 0;
        }
        else
        {
LABEL_14:
          uint64_t result = sub_19E5D8B5C((uint64_t)v21);
        }
        uint64_t v5 = a4;
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
    unint64_t v12 = &unk_1EF0C6710;
    uint64_t result = sub_19E5D8B5C((uint64_t)&unk_1EF0C6710);
LABEL_16:
    *a5 = a1;
    a5[1] = a2;
    a5[2] = a3;
    a5[3] = v5;
    a5[4] = v12;
    a5[5] = result;
  }
  return result;
}

uint64_t sub_19E5D7E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_19E6D3FA0();
  if (v5)
  {
    if (*(void *)(v2[2] + 16))
    {
      uint64_t v6 = *v2;
      uint64_t v7 = sub_19E669DA4(v5, (void *)v2[3]);
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(*(void *)(a1 + 16) - 8);
      (*(void (**)(uint64_t, uint64_t, void))(v12 + 16))(a2, v6 + *(void *)(v12 + 72) * v7, *(void *)(a1 + 16));
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(*(void *)(a1 + 16) - 8);
      (*(void (**)(uint64_t, void, void))(v12 + 16))(a2, *v2, *(void *)(a1 + 16));
    }
    long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 56);
    uint64_t v9 = a2;
    uint64_t v10 = 0;
  }
  else
  {
    long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56);
    uint64_t v9 = a2;
    uint64_t v10 = 1;
  }

  return v8(v9, v10, 1);
}

uint64_t sub_19E5D8014()
{
  return 2;
}

uint64_t sub_19E5D801C()
{
  uint64_t v0 = sub_19E5D89AC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_19E5D8074()
{
  return sub_19EBF6878();
}

uint64_t sub_19E5D809C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[2] = a3;
  v6[3] = a4;
  v6[4] = a5;
  v6[5] = a1;
  v6[6] = a2;
  return (*(uint64_t (**)(void, void *, uint64_t, uint64_t))(a5 + 152))(sub_19E5D8408, v6, a4, a3);
}

uint64_t sub_19E5D80FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *))
{
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E5D7D08(a1, a2, a3, a4, v14);
  a5(v14);
  if (v6)
  {
    uint64_t v27 = v15;
    sub_19E5D8438((uint64_t)&v27);
    uint64_t v26 = v16;
    sub_19E5D8438((uint64_t)&v26);
    long long v23 = v17;
    uint64_t v25 = v17;
    sub_19E5D8438((uint64_t)&v25);
    sub_19E5D8464((uint64_t)&v23 + 8, (uint64_t)v24);
    uint64_t v12 = v24;
  }
  else
  {
    uint64_t v22 = v15;
    sub_19E5D8438((uint64_t)&v22);
    uint64_t v21 = v16;
    sub_19E5D8438((uint64_t)&v21);
    long long v18 = v17;
    uint64_t v20 = v17;
    sub_19E5D8438((uint64_t)&v20);
    sub_19E5D8464((uint64_t)&v18 + 8, (uint64_t)v19);
    uint64_t v12 = v19;
  }
  return sub_19E5D8438((uint64_t)v12);
}

void *sub_19E5D8244@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x278], 8) = 0;
  return result;
}

void sub_19E5D8254(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_19E5D8260(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_19E5D8274@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_19E5D8284(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_19E5D8290()
{
  return sub_19EBF63F8();
}

uint64_t sub_19E5D82DC()
{
  return sub_19EBF63E8();
}

uint64_t sub_19E5D8334()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E5D839C()
{
  swift_getWitnessTable();

  return sub_19EBF63D8();
}

uint64_t sub_19E5D8408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19E5D80FC(a1, a2, a3, a4, *(void (**)(void *))(v4 + 40));
}

uint64_t sub_19E5D8438(uint64_t a1)
{
  return a1;
}

uint64_t sub_19E5D8464(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945B960);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_19E5D8510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t initializeBufferWithCopyOfBuffer for InternalError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_19E5D854C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_19E5D8598(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_19E5D85F8(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_OWORD *sub_19E5D86AC(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_19E5D870C(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_19E5D8754(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 4_Block_object_dispose(&STACK[0x278], 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for ScalarSequence()
{
  return __swift_instantiateGenericMetadata();
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_19E5D87C4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_19E5D87E4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for vImage_Buffer(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for BNNSDataType(uint64_t a1)
{
}

void type metadata accessor for BNNSDataLayout(uint64_t a1)
{
}

void type metadata accessor for BNNSNDArrayFlags(uint64_t a1)
{
}

void type metadata accessor for MLFeatureType(uint64_t a1)
{
}

void sub_19E5D889C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_19E5D88E4()
{
  return swift_getWitnessTable();
}

uint64_t sub_19E5D8900()
{
  return sub_19E5D8968((unint64_t *)&qword_1E945BD20);
}

uint64_t sub_19E5D8934()
{
  return sub_19E5D8968(&qword_1E945BD28);
}

uint64_t sub_19E5D8968(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CFString(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_19E5D89C4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  swift_unownedRetainStrong();
  id v3 = objc_msgSend(*(id *)(v1 + 32), sel_signaledValue);
  swift_release();
  return (unint64_t)v3 >= v2;
}

BOOL sub_19E5D8A18()
{
  unint64_t v1 = *(void *)(v0 + 24);
  return (unint64_t)objc_msgSend(*(id *)(*(void *)(v0 + 16) + 40), sel_signaledValue) >= v1;
}

uint64_t sub_19E5D8A50(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    sub_19E66F600(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = a1 + 32;
    do
    {
      swift_getKeyPath();
      swift_getAtKeyPath();
      swift_release();
      unint64_t v6 = *(void *)(v9 + 16);
      unint64_t v5 = *(void *)(v9 + 24);
      if (v6 >= v5 >> 1) {
        sub_19E66F600(v5 > 1, v6 + 1, 1);
      }
      *(void *)(v9 + 16) = v6 + 1;
      *(void *)(v9 + 8 * v6 + 32) = v8;
      v4 += 16;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_19E5D8B5C(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    sub_19E66F600(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v6 = *v4;
      v4 += 2;
      uint64_t v5 = v6;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_19E66F600(v7 > 1, v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(void *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t MLShapedArraySlice.shape.getter()
{
  sub_19E5DE79C();

  return swift_bridgeObjectRetain();
}

double MLShapedArraySlice.init(bytesNoCopy:shape:strides:deallocator:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10 = sub_19EBF6388();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
  MLShapedArray.init(bytesNoCopy:shape:strides:deallocator:)(a1, a2, a3, (uint64_t)v13, (uint64_t *)v20);
  long long v19 = v20[0];
  sub_19E5D9A64((uint64_t *)&v19, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], (uint64_t *)v20);
  long long v17 = v20[1];
  long long v18 = v20[0];
  long long v16 = v20[2];
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a4, v10);
  long long v14 = v17;
  *a5 = v18;
  a5[1] = v14;
  double result = *(double *)&v16;
  a5[2] = v16;
  return result;
}

double sub_19E5D8DC4@<D0>(long long *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  long long v7 = *a1;
  sub_19E5D9A64((uint64_t *)&v7, a2, MEMORY[0x1E4FBC860], (uint64_t *)v8);
  double result = *(double *)v8;
  long long v5 = v8[1];
  long long v6 = v8[2];
  *a3 = v8[0];
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

double MLShapedArraySlice.init(unsafeUninitializedShape:initializingWith:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  MLShapedArray.init(unsafeUninitializedShape:initializingWith:)(a1, (uint64_t *)v8);
  if (!v2)
  {
    long long v7 = v8[0];
    sub_19E5D9A64((uint64_t *)&v7, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], (uint64_t *)v8);
    double result = *(double *)v8;
    long long v5 = v8[1];
    long long v6 = v8[2];
    *a2 = v8[0];
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

double MLShapedArraySlice.init(scalar:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  MLShapedArray.init(scalar:)((uint64_t)v8, a2, (uint64_t *)v15);
  long long v14 = v15[0];
  sub_19E5D9A64((uint64_t *)&v14, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], (uint64_t *)v15);
  long long v12 = v15[1];
  long long v13 = v15[0];
  long long v11 = v15[2];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  long long v9 = v12;
  *a3 = v13;
  a3[1] = v9;
  double result = *(double *)&v11;
  a3[2] = v11;
  return result;
}

__n128 MLShapedArraySlice.init(data:shape:strides:)@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  sub_19E5DE7A4(a1, a2);
  MLShapedArray.init(data:shape:strides:)(a1, a2, a3, a4, (uint64_t *)v16);
  long long v13 = v16[0];
  swift_unknownObjectRetain();
  long long v15 = v13;
  sub_19E5D9A64((uint64_t *)&v15, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], (uint64_t *)v16);
  long long v12 = v16[1];
  long long v14 = v16[0];
  __n128 v11 = (__n128)v16[2];
  sub_19E5DE7FC(a1, a2);
  swift_unknownObjectRelease();
  *a5 = v14;
  a5[1] = v12;
  __n128 result = v11;
  a5[2] = v11;
  return result;
}

double MLShapedArraySlice.init<A>(scalars:shape:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v11);
  MLShapedArray.init<A>(scalars:shape:)((uint64_t)v10, a2, a3, (uint64_t *)v18);
  long long v17 = v18[0];
  sub_19E5D9A64((uint64_t *)&v17, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], (uint64_t *)v18);
  long long v15 = v18[1];
  long long v16 = v18[0];
  long long v14 = v18[2];
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a3);
  long long v12 = v15;
  *a4 = v16;
  a4[1] = v12;
  double result = *(double *)&v14;
  a4[2] = v14;
  return result;
}

double MLShapedArraySlice.init<A>(concatenating:alongAxis:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  uint64_t v11 = (void *)sub_19E66A55C(a1, a2, a4, a5, a6);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  __n128 v13 = MLShapedArraySlice.init(_:)(v11, a3, AssociatedConformanceWitness, v17);
  (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)(a4 - 8) + 8))(a1, a4, v13);
  double result = *(double *)v17;
  long long v15 = v17[1];
  long long v16 = v17[2];
  *a7 = v17[0];
  a7[1] = v15;
  a7[2] = v16;
  return result;
}

__n128 MLShapedArraySlice.init(_:)@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  id v7 = a1;
  MLShapedArray.init(_:)(v7, a2, a3, (size_t *)v14);
  long long v11 = v14[0];
  swift_unknownObjectRetain();
  long long v13 = v11;
  sub_19E5D9A64((uint64_t *)&v13, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], (uint64_t *)v14);
  long long v10 = v14[1];
  long long v12 = v14[0];
  __n128 v9 = (__n128)v14[2];
  swift_unknownObjectRelease();

  *a4 = v12;
  a4[1] = v10;
  __n128 result = v9;
  a4[2] = v9;
  return result;
}

double MLShapedArraySlice.init<A>(squeezing:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  long long v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v12, a1);
  double v13 = sub_19E5D9680((uint64_t)v12, a2, a3, a4, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t))sub_19E66A7B0, v17);
  (*(void (**)(uint64_t, uint64_t, double))(v10 + 8))(a1, a3, v13);
  double result = *(double *)v17;
  long long v15 = v17[1];
  long long v16 = v17[2];
  *a5 = v17[0];
  a5[1] = v15;
  a5[2] = v16;
  return result;
}

double MLShapedArraySlice.init<A>(expandingDimensionsOf:alongAxis:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  long long v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v15);
  double v16 = sub_19E5D9800((uint64_t)v14, a2, a3, a4, a5, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E66A9C0, v20);
  (*(void (**)(uint64_t, uint64_t, double))(v12 + 8))(a1, a4, v16);
  double result = *(double *)v20;
  long long v18 = v20[1];
  long long v19 = v20[2];
  *a6 = v20[0];
  a6[1] = v18;
  a6[2] = v19;
  return result;
}

double sub_19E5D9680@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t)@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v12 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  long long v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v12 + 16))(v14, a1);
  a5(v21, v14, a2, a3, a4);
  swift_getAssociatedConformanceWitness();
  long long v20 = v21[0];
  sub_19E5D9A64((uint64_t *)&v20, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], (uint64_t *)v21);
  long long v18 = v21[1];
  long long v19 = v21[0];
  long long v17 = v21[2];
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a3);
  long long v15 = v18;
  *a6 = v19;
  a6[1] = v15;
  double result = *(double *)&v17;
  a6[2] = v17;
  return result;
}

double sub_19E5D9800@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, _OWORD *a7@<X8>)
{
  uint64_t v14 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  double v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v17);
  a6(v24, v16, a2, a3, a4, a5);
  swift_getAssociatedConformanceWitness();
  long long v23 = v24[0];
  sub_19E5D9A64((uint64_t *)&v23, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], (uint64_t *)v24);
  long long v21 = v24[1];
  long long v22 = v24[0];
  long long v20 = v24[2];
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, a4);
  long long v18 = v21;
  *a7 = v22;
  a7[1] = v18;
  double result = *(double *)&v20;
  a7[2] = v20;
  return result;
}

__n128 MLShapedArraySlice.init(mutating:shape:)@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  long long v5 = a1;
  MLShapedArray.init(mutating:shape:)(v5, a2, (size_t *)v12);
  long long v9 = v12[0];
  swift_unknownObjectRetain();
  long long v11 = v9;
  sub_19E5D9A64((uint64_t *)&v11, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], (uint64_t *)v12);
  long long v8 = v12[1];
  long long v10 = v12[0];
  __n128 v7 = (__n128)v12[2];
  swift_unknownObjectRelease();

  *a3 = v10;
  a3[1] = v8;
  __n128 result = v7;
  a3[2] = v7;
  return result;
}

uint64_t sub_19E5D9A64@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  type metadata accessor for MLShapedArray();
  unint64_t v9 = *(void *)(MLShapedArray.shape.getter() + 16);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v11 = *(void *)(a2 + 16);
  if (v9 < v11) {
    goto LABEL_27;
  }
  uint64_t v12 = MLShapedArray.shape.getter();
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    uint64_t v14 = *(void *)(a2 + 16);
    if (v14)
    {
      uint64_t v15 = 0;
      unint64_t v16 = v14 - 1;
      unint64_t v17 = v13 - 1;
      if (v16 < v17) {
        unint64_t v17 = v16;
      }
      unint64_t v18 = v17 + 1;
      while (*(void *)(a2 + 32 + 8 * v15) < *(void *)(v12 + 8 * v15 + 32))
      {
        if (v18 == ++v15) {
          goto LABEL_9;
        }
      }
LABEL_26:
      uint64_t result = swift_bridgeObjectRelease();
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
  }
LABEL_9:
  uint64_t v40 = a3;
  swift_bridgeObjectRelease();
  uint64_t v41 = v7;
  swift_bridgeObjectRetain();
  uint64_t v19 = MLShapedArray.shape.getter();
  uint64_t result = sub_19E5D9CF4(v11, v19);
  int64_t v23 = v22 >> 1;
  uint64_t v24 = (v22 >> 1) - v21;
  if (__OFSUB__(v22 >> 1, v21))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v24)
  {
    uint64_t v25 = v20;
    uint64_t v26 = v21;
    long long v42 = (void *)MEMORY[0x1E4FBC860];
    uint64_t result = sub_19E66F5D8(0, v24 & ~(v24 >> 63), 0);
    if (v24 < 0)
    {
LABEL_29:
      __break(1u);
      return result;
    }
    uint64_t v27 = v42;
    if (v26 <= v23) {
      uint64_t v28 = v23;
    }
    else {
      uint64_t v28 = v26;
    }
    uint64_t v29 = v28 - v26;
    char v30 = (uint64_t *)(v25 + 8 * v26);
    while (v29)
    {
      uint64_t v31 = *v30;
      if (*v30 < 0) {
        goto LABEL_25;
      }
      unint64_t v33 = v42[2];
      unint64_t v32 = v42[3];
      if (v33 >= v32 >> 1) {
        sub_19E66F5D8(v32 > 1, v33 + 1, 1);
      }
      v42[2] = v33 + 1;
      unint64_t v34 = &v42[2 * v33];
      v34[4] = 0;
      v34[5] = v31;
      --v29;
      ++v30;
      if (!--v24)
      {
        swift_unknownObjectRelease();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  swift_unknownObjectRelease();
  uint64_t v27 = (void *)MEMORY[0x1E4FBC860];
LABEL_23:
  uint64_t v35 = sub_19E636E5C(v40);
  swift_bridgeObjectRelease();
  uint64_t v36 = sub_19E66B3C8(v35, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v37 = swift_bridgeObjectRetain();
  uint64_t v38 = sub_19E5D8A50(v37);
  uint64_t v39 = sub_19E5D8B5C(v36);
  swift_bridgeObjectRelease();
  uint64_t result = sub_19E612A98(v39);
  *a4 = v38;
  a4[1] = v41;
  a4[2] = v8;
  a4[3] = a2;
  a4[4] = v36;
  a4[5] = a2;
  return result;
}

uint64_t sub_19E5D9CF4(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = *(void *)(a2 + 16);
    if ((uint64_t)v2 >= result) {
      unint64_t v3 = result;
    }
    else {
      unint64_t v3 = *(void *)(a2 + 16);
    }
    if (result) {
      unint64_t v4 = v3;
    }
    else {
      unint64_t v4 = 0;
    }
    if (v2 >= v4) {
      return a2;
    }
  }
  __break(1u);
  return result;
}

double sub_19E5D9D34@<D0>(long long *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  long long v7 = *a1;
  sub_19E5D9A64((uint64_t *)&v7, MEMORY[0x1E4FBC860], a2, (uint64_t *)v8);
  double result = *(double *)v8;
  long long v5 = v8[1];
  long long v6 = v8[2];
  *a3 = v8[0];
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

uint64_t MLShapedArraySlice.strides.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for MLShapedArray();
  uint64_t v2 = MLShapedArray.strides.getter();
  uint64_t v3 = sub_19E5D9CF4(*(void *)(v1 + 16), v2);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v9 = v8;
  if ((v8 & 1) == 0) {
    goto LABEL_2;
  }
  sub_19EBF73A8();
  swift_unknownObjectRetain_n();
  uint64_t v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = *(void *)(v11 + 16);
  swift_release();
  if (__OFSUB__(v9 >> 1, v7))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v12 != (v9 >> 1) - v7)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    uint64_t v10 = sub_19E5DDDB0(v3, v5, v7, v9);
    goto LABEL_9;
  }
  uint64_t v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = MEMORY[0x1E4FBC860];
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v10;
}

uint64_t MLShapedArraySlice.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = *(void *)(v2 + 24);
  long long v9 = *(_OWORD *)(v2 + 8);
  long long v10 = v9;
  (*(void (**)(char *))(v6 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE60);
  uint64_t v7 = sub_19EBF69D8();
  return sub_19E5D9A64((uint64_t *)&v10, v5, v7, a2);
}

uint64_t MLShapedArraySlice.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19E5DB66C(a1, a2, a3, a4, a5, (void (*)(void))sub_19E5DE854);
}

{
  return sub_19E5DB66C(a1, a2, a3, a4, a5, (void (*)(void))sub_19E5DEF0C);
}

{
  uint64_t (*v9)(uint64_t);
  uint64_t vars8;

  sub_19E5DF2F8(a1, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
  long long v9 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8);

  return v9(a1);
}

BOOL sub_19E5D9FF0(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  return *a1 >= v2 && *a1 <= v3 && v3 >= v1 && v1 >= v2;
}

void *sub_19E5DA010(void *result)
{
  uint64_t v1 = result[1];
  if (!__OFSUB__(v1, *result)) {
    return (void *)(v1 - *result == result[2]);
  }
  __break(1u);
  return result;
}

BOOL sub_19E5DA030(void *a1)
{
  uint64_t v1 = a1[2];
  return v1 >= *a1 && v1 < a1[1];
}

void *sub_19E5DA048@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[2];
  if (__OFSUB__(*result, v2)) {
    __break(1u);
  }
  else {
    *a2 = *result - v2;
  }
  return result;
}

uint64_t sub_19E5DA064(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  unint64_t v59 = a4;
  BOOL v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  unint64_t v55 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v53 = (char *)&v40 - v13;
  uint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v41 = (char *)&v40 - v17;
  uint64_t v18 = sub_19EBF6E68();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v51 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  int64_t v23 = (char *)&v40 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v40 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v50 = *((void *)v15 - 1);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  int v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  char v30 = (char *)&v40 - v29;
  uint64_t v31 = sub_19EBF6818();
  uint64_t v61 = sub_19EBF7148();
  uint64_t v56 = sub_19EBF7158();
  sub_19EBF70C8();
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  unint64_t v59 = v30;
  uint64_t result = sub_19EBF67F8();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    unint64_t v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    unint64_t v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_19EBF6EB8();
      uint64_t result = (*v33)(v23, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v23, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v23, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v23, AssociatedTypeWitness);
      sub_19EBF7138();
      if (!--v31)
      {
        uint64_t v35 = v54;
        uint64_t v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  uint64_t v36 = v51;
LABEL_9:
  sub_19EBF6EB8();
  unint64_t v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    int v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    uint64_t v38 = (void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v39 = v41;
    uint64_t v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      sub_19EBF7138();
      sub_19EBF6EB8();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

uint64_t sub_19E5DA760(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void v12[2] = a6;
  _OWORD v12[3] = a7;
  v12[4] = a8;
  v12[5] = a9;
  v12[6] = a1;
  v12[7] = sub_19E669DA4(a4, a3);
  v12[8] = a3;
  uint64_t v10 = type metadata accessor for MLShapedArraySlice();
  return MLShapedArraySlice.withUnsafeShapedBufferPointer<A>(_:)((uint64_t)sub_19E5DFE90, (uint64_t)v12, v10, MEMORY[0x1E4FBC848] + 8);
}

uint64_t sub_19E5DA81C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t result = sub_19EBF6758();
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v14 = result;
  uint64_t v20 = a6;
  uint64_t result = sub_19EBF6758();
  if (result)
  {
    uint64_t v15 = *(void *)(*(void *)(a8 - 8) + 72);
    unint64_t v16 = a3[2];
    if (v16 == a4[2])
    {
      uint64_t v17 = result;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = sub_19E60F71C(0, v16);
      if (v16 == a7[2])
      {
        uint64_t v18 = result;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v19 = sub_19E60F71C(0, v16);
        sub_19E6B395C(v18, a3, a4, v19, a3, a7, v14, v17 + v15 * v20, a8, a8);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t MLShapedArraySlice.withUnsafeShapedBufferPointer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v6 = v4[2];
  *(_OWORD *)&void v12[16] = v4[1];
  long long v13 = v6;
  *(_OWORD *)uint64_t v12 = *v4;
  long long v14 = *(_OWORD *)&v12[8];
  long long v11 = *(_OWORD *)&v12[8];
  uint64_t v7 = *(void *)(a3 + 24);
  v10[2] = *(void *)(a3 + 16);
  v10[3] = a4;
  v10[4] = v7;
  v10[5] = *((void *)&v6 + 1);
  v10[6] = v12;
  v10[7] = a1;
  v10[8] = a2;
  v10[9] = *(void *)v12;
  sub_19E5DEE80((uint64_t)&v14);
  uint64_t v8 = type metadata accessor for MLShapedArray();
  MLShapedArray.withUnsafeShapedBufferPointer<A>(_:)((uint64_t)sub_19E5DEE48, (uint64_t)v10, v8, a4);
  return swift_unknownObjectRelease();
}

uint64_t MLShapedArraySlice.withUnsafeMutableShapedBufferPointer<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a5;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = type metadata accessor for MLShapedArray();
  uint64_t v10 = sub_19E66B6F4();
  if (v10) {
    uint64_t v10 = sub_19E5DAEAC();
  }
  uint64_t v11 = v5[5];
  uint64_t v12 = *v5;
  MEMORY[0x1F4188790](v10);
  void v14[2] = v7;
  _OWORD v14[3] = a4;
  v14[4] = v8;
  v14[5] = v11;
  v14[6] = v5;
  v14[7] = v15;
  v14[8] = v16;
  v14[9] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MLShapedArray.withUnsafeMutableShapedBufferPointer<A>(_:)((uint64_t)sub_19E5DEEAC, (uint64_t)v14, v9, a4, v17);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*MLShapedArraySlice.subscript.modify(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(void **a1, char a2)
{
  uint64_t v11 = (uint64_t *)malloc(0x60uLL);
  *a1 = v11;
  v11[8] = a5;
  v11[9] = v5;
  v11[6] = a3;
  v11[7] = a4;
  uint64_t v12 = *(void *)(a4 - 8);
  uint64_t v13 = v12;
  v11[10] = v12;
  v11[11] = (uint64_t)malloc(*(void *)(v12 + 64));
  (*(void (**)(void))(v13 + 16))();
  MLShapedArraySlice.subscript.getter(a2, v11);
  return sub_19E5DAC9C;
}

{
  uint64_t v5;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v10 = (uint64_t *)malloc(0x60uLL);
  *a1 = v10;
  v10[8] = a5;
  v10[9] = v5;
  v10[6] = a3;
  v10[7] = a4;
  uint64_t v11 = *(void *)(a4 - 8);
  uint64_t v12 = v11;
  void v10[10] = v11;
  v10[11] = (uint64_t)malloc(*(void *)(v11 + 64));
  (*(void (**)(void))(v12 + 16))();
  MLShapedArraySlice.subscript.getter(v10);
  return sub_19E5DB87C;
}

void sub_19E5DAC9C(void **a1, char a2)
{
}

uint64_t sub_19E5DACB4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = sub_19E669DA4(a5, a4);
  uint64_t result = sub_19EBF6758();
  if (result)
  {
    if (__OFSUB__(a2, v15))
    {
      __break(1u);
    }
    else
    {
      uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a7;
      a2 = sub_19EBF6768();
      uint64_t v15 = v17;
      a1 = sub_19E5D9CF4(*(void *)(*(void *)(a6 + 24) + 16), (uint64_t)a4);
      a7 = v18;
      a8 = v19;
      a6 = v20;
      if ((v20 & 1) == 0)
      {
        swift_bridgeObjectRetain();
LABEL_5:
        uint64_t v21 = sub_19E5DDDB0(a1, a7, a8, a6);
LABEL_12:
        swift_unknownObjectRelease();
        v24(a2, v15, a9, v21);
        return swift_release();
      }
      sub_19EBF73A8();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v22 = swift_dynamicCastClass();
      if (!v22)
      {
        swift_unknownObjectRelease();
        uint64_t v22 = MEMORY[0x1E4FBC860];
      }
      uint64_t v23 = *(void *)(v22 + 16);
      swift_release();
      if (!__OFSUB__(a6 >> 1, a8))
      {
        if (v23 == (a6 >> 1) - a8)
        {
          uint64_t v21 = swift_dynamicCastClass();
          if (!v21)
          {
            swift_unknownObjectRelease();
            uint64_t v21 = MEMORY[0x1E4FBC860];
          }
          goto LABEL_12;
        }
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_15:
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E5DAEAC()
{
  uint64_t v1 = (void *)v0;
  uint64_t v2 = swift_bridgeObjectRetain();
  MLShapedArray.init(unsafeUninitializedShape:initializingWith:)(v2, (uint64_t *)&v14);
  long long v13 = v14;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)(v0 + _Block_object_dispose(&STACK[0x278], 8) = v13;
  swift_bridgeObjectRelease();
  uint64_t v3 = MEMORY[0x1E4FBC860];
  v1[3] = MEMORY[0x1E4FBC860];
  uint64_t v4 = *v1;
  int64_t v5 = *(void *)(*v1 + 16);
  if (v5)
  {
    *(void *)&long long v14 = v3;
    swift_bridgeObjectRetain();
    uint64_t result = sub_19E66F5D8(0, v5, 0);
    uint64_t v7 = 0;
    uint64_t v3 = v14;
    while (1)
    {
      uint64_t v8 = *(void *)(v4 + 8 * v7 + 32);
      if (v8 < 0) {
        break;
      }
      *(void *)&long long v14 = v3;
      unint64_t v10 = *(void *)(v3 + 16);
      unint64_t v9 = *(void *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        uint64_t result = sub_19E66F5D8(v9 > 1, v10 + 1, 1);
        uint64_t v3 = v14;
      }
      ++v7;
      *(void *)(v3 + 16) = v10 + 1;
      uint64_t v11 = v3 + 16 * v10;
      *(void *)(v11 + 32) = 0;
      *(void *)(v11 + 40) = v8;
      if (v5 == v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    v1[4] = v3;
    uint64_t v12 = sub_19E60F71C(0, *(void *)(v4 + 16));
    swift_unknownObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    v1[5] = v12;
  }
  return result;
}

uint64_t sub_19E5DB040(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3[3];
  uint64_t v6 = a3[4];
  uint64_t v15 = *a3;
  long long v16 = *(_OWORD *)(a3 + 1);
  uint64_t v17 = v5;
  uint64_t v18 = v6;
  uint64_t v10 = a4;
  uint64_t v11 = a5;
  uint64_t v12 = a3;
  uint64_t v13 = a2;
  uint64_t v14 = a1;
  uint64_t v7 = type metadata accessor for MLShapedArraySlice();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MLShapedArraySlice.withUnsafeShapedBufferPointer<A>(_:)((uint64_t)sub_19E5DFD88, (uint64_t)v9, v7, MEMORY[0x1E4FBC848] + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_19E5DB154(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void **)a5;
  unint64_t v9 = *(void *)(*(void *)a5 + 16);
  if (v9 != a4[2])
  {
    __break(1u);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_19E60F71C(0, v9);
  uint64_t v15 = *(void **)a5;
  unint64_t v16 = v15[2];
  if (v16 != a6[2])
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v17 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_19E60F71C(0, v16);
  uint64_t v19 = sub_19EBF6758();
  if (!v19)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v20 = v19;
  uint64_t v21 = sub_19EBF6758();
  if (v21)
  {
    sub_19E6B395C(v17, v8, a4, v18, v15, a6, v20, v21, a8, a8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_9:
  __break(1u);
}

double sub_19E5DB2B4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  return MLShapedArraySlice.init(bytesNoCopy:shape:strides:deallocator:)(a1, a2, a3, a4, a5);
}

double sub_19E5DB2C0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return MLShapedArraySlice.init(unsafeUninitializedShape:initializingWith:)(a1, a2);
}

uint64_t sub_19E5DB2E0()
{
  sub_19E5DE79C();

  return swift_bridgeObjectRetain();
}

uint64_t sub_19E5DB30C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return MLShapedArraySlice.subscript.getter(a1, a2);
}

uint64_t sub_19E5DB320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_19E5DB5D4(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5DE854);
}

uint64_t (*sub_19E5DB338(uint64_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v10 = (uint64_t **)malloc(0x28uLL);
  *a1 = v10;
  v10[4] = (uint64_t *)MLShapedArraySlice.subscript.modify(v10, a2, a5, a3, a4);
  return sub_19E5DB3C0;
}

uint64_t sub_19E5DB3C4@<X0>(uint64_t *a1@<X8>)
{
  return MLShapedArraySlice.subscript.getter(a1);
}

uint64_t MLShapedArraySlice.subscript.getter@<X0>(uint64_t *a1@<X8>)
{
  long long v16 = *(_OWORD *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_19EBF6BA8();
  uint64_t v5 = sub_19E5D9CF4(v4, v3);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  unint64_t v11 = v10;
  if ((v10 & 1) == 0) {
    goto LABEL_2;
  }
  sub_19EBF73A8();
  swift_unknownObjectRetain_n();
  uint64_t v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_unknownObjectRelease();
    uint64_t v13 = MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = *(void *)(v13 + 16);
  swift_release();
  if (__OFSUB__(v11 >> 1, v9))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v14 != (v11 >> 1) - v9)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    uint64_t v12 = sub_19E5DDF1C(v5, v7, v9, v11);
    goto LABEL_9;
  }
  uint64_t v12 = swift_dynamicCastClass();
  if (!v12)
  {
    swift_unknownObjectRelease();
    uint64_t v12 = MEMORY[0x1E4FBC860];
  }
LABEL_9:
  swift_unknownObjectRelease();
  long long v18 = v16;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE70);
  sub_19E5DFDB8(&qword_1E945BF10, (uint64_t *)&unk_1E945CE70);
  swift_unknownObjectRetain();
  sub_19EBF6C68();
  return sub_19E5D9A64((uint64_t *)&v18, v17, v12, a1);
}

uint64_t sub_19E5DB5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_19E5DB5D4(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5DEF0C);
}

uint64_t sub_19E5DB5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  a7(a1, a2, a5, a3, a4);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v9(a2, a3);
}

uint64_t sub_19E5DB66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  a6();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8);

  return v8(a2, a4);
}

uint64_t (*sub_19E5DB6DC(uint64_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  unint64_t v10 = (uint64_t **)malloc(0x28uLL);
  *a1 = v10;
  v10[4] = (uint64_t *)MLShapedArraySlice.subscript.modify(v10, a2, a5, a3, a4);
  return sub_19E5DB3C0;
}

void sub_19E5DB87C(void **a1, char a2)
{
}

void sub_19E5DB894(void **a1, char a2, void (*a3)(void *, void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v8 = (*a1)[4];
  uint64_t v7 = (*a1)[5];
  uint64_t v10 = (*a1)[10];
  uint64_t v9 = (void *)(*a1)[11];
  uint64_t v11 = (*a1)[8];
  uint64_t v13 = (*a1)[6];
  uint64_t v12 = (*a1)[7];
  v16[0] = **a1;
  v16[1] = v4;
  v16[2] = v5;
  _OWORD v16[3] = v6;
  v16[4] = v8;
  v16[5] = v7;
  if (a2)
  {
    uint64_t v14 = v11;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a3(v16, v9, v13, v12, v14);
    (*(void (**)(void *, uint64_t))(v10 + 8))(v9, v12);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    a3(v16, v9, v13, v12, v11);
    (*(void (**)(void *, uint64_t))(v10 + 8))(v9, v12);
  }
  free(v9);

  free(v3);
}

uint64_t sub_19E5DB9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MLShapedArraySlice.subscript.getter(a1, a4, a2, a3);
}

uint64_t MLShapedArraySlice.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1F4188790](a1);
  long long v9 = *v4;
  long long v22 = v4[1];
  long long v23 = v9;
  long long v21 = v4[2];
  (*(void (**)(char *))(v10 + 16))((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = sub_19EBF69D8();
  uint64_t v12 = *(void *)(result + 16);
  if (v12 == *(void *)(v23 + 16))
  {
    uint64_t v13 = result;
    if (!v12)
    {
LABEL_7:
      long long v24 = v23;
      long long v25 = v22;
      long long v26 = v21;
      MEMORY[0x1F4188790](result);
      uint64_t v19 = *(void *)(a2 + 16);
      uint64_t v20 = *(void *)(a2 + 24);
      *((void *)&v21 - 6) = v19;
      *((void *)&v21 - 5) = a3;
      *((void *)&v21 - 4) = v20;
      *((void *)&v21 - 3) = a4;
      *((void *)&v21 - 2) = v13;
      MLShapedArraySlice.withUnsafeShapedBufferPointer<A>(_:)((uint64_t)sub_19E5DF27C, (uint64_t)(&v21 - 4), a2, v19);
      return swift_bridgeObjectRelease();
    }
    uint64_t v14 = (uint64_t *)(result + 32);
    uint64_t v15 = (uint64_t *)(v23 + 32);
    while (1)
    {
      uint64_t v17 = *v14++;
      uint64_t v16 = v17;
      if (v17 < 0) {
        break;
      }
      uint64_t v18 = *v15++;
      if (v16 >= v18) {
        break;
      }
      if (!--v12) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19E5DBBCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_19E5DF2F8(a1, a2, a5, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  long long v9 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a5 + 16) - 8) + 8);

  return v9(a1);
}

uint64_t (*sub_19E5DBD30(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v10 = malloc(0x28uLL);
  *a1 = v10;
  v10[4] = MLShapedArraySlice.subscript.modify(v10, a2, a5, a3, a4);
  return sub_19E5DB3C0;
}

void (*MLShapedArraySlice.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x50uLL);
  *a1 = v11;
  void v11[2] = a5;
  v11[3] = v5;
  *uint64_t v11 = a3;
  v11[1] = a4;
  uint64_t v12 = *(void *)(a3 + 16);
  v11[4] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v11[5] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[6] = malloc(v14);
  uint64_t v15 = malloc(v14);
  uint64_t v16 = *(void *)(a4 - 8);
  uint64_t v17 = v16;
  v11[7] = v15;
  v11[8] = v16;
  v11[9] = malloc(*(void *)(v16 + 64));
  (*(void (**)(void))(v17 + 16))();
  MLShapedArraySlice.subscript.getter(a2, a3, a4, a5);
  return sub_19E5DBF38;
}

void sub_19E5DBF38(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[8];
  uint64_t v5 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  uint64_t v6 = (*a1)[4];
  uint64_t v7 = (*a1)[5];
  uint64_t v8 = (*a1)[2];
  uint64_t v10 = **a1;
  uint64_t v9 = (*a1)[1];
  uint64_t v12 = (void *)(*a1)[9];
  if (a2)
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v5, v4, v6);
    sub_19E5DF2F8((uint64_t)v5, (uint64_t)v12, v10, v9, v8);
    (*(void (**)(void *, uint64_t))(v3 + 8))(v12, v9);
    uint64_t v11 = *(void (**)(void *, uint64_t))(v7 + 8);
    v11(v5, v6);
    v11(v4, v6);
  }
  else
  {
    sub_19E5DF2F8((uint64_t)v4, (uint64_t)v12, v10, v9, v8);
    (*(void (**)(void *, uint64_t))(v3 + 8))(v12, v9);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v4, v6);
  }
  free(v12);
  free(v4);
  free(v5);

  free(v2);
}

uint64_t sub_19E5DC0A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MLShapedArraySlice.withUnsafeShapedBufferPointer<A>(_:)(a1, a2, a4, a3);
}

uint64_t sub_19E5DC0C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return MLShapedArraySlice.withUnsafeMutableShapedBufferPointer<A>(_:)(a1, a2, a4, a3, a5);
}

uint64_t sub_19E5DC0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41842C8](a1, a2, a3, a4, MEMORY[0x1E4FBB590]);
}

uint64_t sub_19E5DC0FC(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable();

  return MLShapedArrayProtocol.subscript.setter(a1, v5, a3, WitnessTable);
}

uint64_t (*sub_19E5DC168(void *a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  uint64_t v7 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable();
  v6[4] = MLShapedArrayProtocol.subscript.modify(v6, v7, a3, WitnessTable);
  return sub_19E5DB3C0;
}

uint64_t sub_19E5DC200(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t WitnessTable = swift_getWitnessTable();

  return MLShapedArrayProtocol.subscript.setter(a1, v5, v6, a3, WitnessTable);
}

uint64_t (*sub_19E5DC278(void *a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  uint64_t WitnessTable = swift_getWitnessTable();
  v6[4] = MLShapedArrayProtocol.subscript.modify(v6, v8, v7, a3, WitnessTable);
  return sub_19E5DB3C0;
}

void sub_19E5DC314(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t sub_19E5DC35C()
{
  return sub_19EBF6718();
}

uint64_t sub_19E5DC3E0()
{
  return sub_19EBF66F8();
}

uint64_t sub_19E5DC404()
{
  return sub_19EBF66E8();
}

uint64_t sub_19E5DC428(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MLShapedArrayProtocol.init(arrayLiteral:)(a1, a2, WitnessTable);
}

uint64_t sub_19E5DC490()
{
  swift_getWitnessTable();

  return sub_19EBF6B68();
}

uint64_t sub_19E5DC500(void *a1)
{
  swift_getWitnessTable();
  uint64_t result = sub_19EBF6B68();
  *a1 = v3;
  return result;
}

uint64_t sub_19E5DC570()
{
  swift_getWitnessTable();

  return sub_19EBF6B58();
}

uint64_t sub_19E5DC5F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_19E5DC668@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLShapedArraySlice.startIndex.getter();
  *a1 = result;
  return result;
}

uint64_t MLShapedArraySlice.startIndex.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (*(void *)(v1 + 16)) {
    return *(void *)(v1 + 32);
  }
  else {
    return 0;
  }
}

uint64_t sub_19E5DC6AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MLShapedArraySlice.endIndex.getter();
  *a1 = result;
  return result;
}

uint64_t MLShapedArraySlice.endIndex.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (*(void *)(v1 + 16)) {
    return *(void *)(v1 + 40);
  }
  else {
    return 0;
  }
}

void (*sub_19E5DC6F0(void ***a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (void **)malloc(0x28uLL);
  *a1 = v6;
  uint64_t v7 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable();
  v6[4] = sub_19E5F856C(v6, v7, a3, WitnessTable);
  return sub_19E5DC788;
}

void sub_19E5DC788(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t sub_19E5DC7D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t WitnessTable = swift_getWitnessTable();

  return MLShapedArrayProtocol.subscript.getter(v3, v4, a2, WitnessTable);
}

uint64_t sub_19E5DC844(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v3 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842C0](a1, WitnessTable, v3);
}

uint64_t sub_19E5DC8B4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MLShapedArrayProtocol.count.getter(a1, WitnessTable);
}

void sub_19E5DC908(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = 256;
}

void *sub_19E5DC918@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (__OFADD__(*result, a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + a2;
  }
  return result;
}

void *sub_19E5DC93C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *sub_19E5DC954(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 sub_19E5DC96C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = MLShapedArraySlice.startIndex.getter();
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  __n128 result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = v3;
  return result;
}

uint64_t sub_19E5DC9A4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t sub_19E5DC9F8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

double sub_19E5DCA4C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void (*a3)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t)@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 + a1 - 24);
  uint64_t v8 = *(void *)(a2 + a1 - 8);
  uint64_t v9 = type metadata accessor for MLShapedArraySlice();
  a3(v12, a1, v9, v7, v8);
  long long v10 = v12[1];
  *a4 = v12[0];
  a4[1] = v10;
  double result = *(double *)&v13;
  a4[2] = v13;
  return result;
}

uint64_t sub_19E5DCAE0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a4 + a3 - 24);
  uint64_t v8 = *(void *)(a4 + a3 - 8);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5];
  uint64_t v14 = *a1;
  long long v15 = *(_OWORD *)(a1 + 1);
  uint64_t v16 = v9;
  uint64_t v17 = v10;
  uint64_t v18 = v11;
  uint64_t v12 = type metadata accessor for MLShapedArraySlice();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a5(&v14, a3, v12, v7, v8);
}

uint64_t sub_19E5DCBB8(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v38 = a7;
  uint64_t v14 = *(void *)(a9 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_19EBF6758();
  uint64_t v37 = result;
  if (result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a5, a9);
    uint64_t v18 = sub_19EBF69D8();
    uint64_t v36 = sub_19E669DA4(v18, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_19EBF6BA8();
    uint64_t v20 = sub_19E5D9CF4(v19, (uint64_t)a6);
    uint64_t v22 = v21;
    long long v24 = v23;
    unint64_t v26 = v25;
    if (v25)
    {
      sub_19EBF73A8();
      swift_unknownObjectRetain_n();
      uint64_t v27 = swift_dynamicCastClass();
      if (!v27)
      {
        swift_unknownObjectRelease();
        uint64_t v27 = MEMORY[0x1E4FBC860];
      }
      uint64_t v28 = *(void *)(v27 + 16);
      swift_release();
      if (__OFSUB__(v26 >> 1, v24)) {
        goto LABEL_16;
      }
      if (v28 != (v26 >> 1) - (void)v24) {
        goto LABEL_17;
      }
      long long v24 = (void *)swift_dynamicCastClass();
      if (!v24)
      {
        swift_unknownObjectRelease();
        long long v24 = (void *)MEMORY[0x1E4FBC860];
      }
      goto LABEL_10;
    }
    while (1)
    {
      long long v24 = (void *)sub_19E5DDDB0(v20, v22, (uint64_t)v24, v26);
LABEL_10:
      swift_unknownObjectRelease();
      uint64_t result = sub_19EBF6758();
      if (!result) {
        break;
      }
      uint64_t v29 = *(void *)(*(void *)(a8 - 8) + 72);
      unint64_t v30 = a3[2];
      if (v30 == a4[2])
      {
        uint64_t v20 = result;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v31 = sub_19E60F71C(0, v30);
        if (v30 == v24[2])
        {
          uint64_t v32 = v31;
          uint64_t v33 = v20 + v29 * v36;
          swift_bridgeObjectRetain();
          uint64_t v34 = sub_19E60F71C(0, v30);
          sub_19E6B3D30(v32, (uint64_t)a3, a4, v34, a3, v24, v37, v33, a8);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19E5DCEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + a2 - 24);
  uint64_t v5 = *(void *)(a3 + a2 - 8);
  uint64_t v6 = type metadata accessor for MLShapedArraySlice();
  return MLShapedArraySlice.subscript.getter(a2, v6, v4, v5);
}

uint64_t sub_19E5DCF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + a3 - 24);
  uint64_t v7 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = type metadata accessor for MLShapedArraySlice();
  return sub_19E5DF2F8(a1, a3, v8, v6, v7);
}

void MLShapedArraySlice.init(data:shape:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 16);
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v9 = sub_19EBF6968();
    *(void *)(v9 + 16) = v8;
  }
  else
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = 0;
  *(void *)&v15[0] = v9 + 32;
  *((void *)&v15[0] + 1) = v8;
  sub_19E6B5844(v15, &v14, a3);
  uint64_t v10 = v14;
  BOOL v11 = v8 < v14;
  if (v8 < v14)
  {
    __break(1u);
    if (v11) {
      __break(1u);
    }
    *(void *)(v9 + 16) = v10;
    swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    *(void *)(v9 + 16) = v14;
    swift_bridgeObjectRelease();
    MLShapedArraySlice.init(data:shape:strides:)(a1, a2, a3, v9, v15);
    long long v12 = v15[1];
    long long v13 = v15[2];
    *a4 = v15[0];
    a4[1] = v12;
    a4[2] = v13;
  }
}

double MLShapedArraySlice.reshaped(to:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_19E5DD2C0(a1, a2, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))MLShapedArray.init<A>(reshaping:to:), a3);
}

double MLShapedArraySlice.squeezingShape()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_19E5DD1D8(a1, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t))sub_19E66A7B0, a2);
}

double MLShapedArraySlice.expandingShape(at:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v13 = *v3;
  long long v14 = *(_OWORD *)(v3 + 1);
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  uint64_t v17 = v9;
  uint64_t v10 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_19E5D9800((uint64_t)&v13, a1, v10, a2, WitnessTable, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E66A9C0, a3);
}

double MLShapedArraySlice.transposed()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_19E5DD1D8(a1, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t))sub_19E66AB60, a2);
}

double sub_19E5DD1D8@<D0>(uint64_t a1@<X0>, void (*a2)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v13 = *v3;
  long long v14 = *(_OWORD *)(v3 + 1);
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  uint64_t v17 = v9;
  uint64_t v10 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_19E5D9680((uint64_t)&v13, v10, a1, WitnessTable, a2, a3);
}

double MLShapedArraySlice.transposed(permutation:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_19E5DD2C0(a1, a2, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E66AD1C, a3);
}

double sub_19E5DD2C0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v9 = v4[3];
  uint64_t v10 = v4[4];
  uint64_t v11 = v4[5];
  uint64_t v15 = *v4;
  long long v16 = *(_OWORD *)(v4 + 1);
  uint64_t v17 = v9;
  uint64_t v18 = v10;
  uint64_t v19 = v11;
  uint64_t v12 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_19E5D9800((uint64_t)&v15, a1, v12, a2, WitnessTable, a3, a4);
}

void MLShapedArraySlice.changingLayout(to:)(unint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v4 = *a1;
  long long v5 = v2[1];
  long long v25 = *v2;
  long long v26 = v5;
  long long v27 = v2[2];
  uint64_t v6 = v25;
  if (!v4) {
    goto LABEL_10;
  }
  if (v4 != 1)
  {
    uint64_t v9 = (void *)v4;
    goto LABEL_17;
  }
  unint64_t v7 = *(void *)(v25 + 16);
  swift_bridgeObjectRetain();
  if (!v7)
  {
    unint64_t v10 = 0;
    uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_16;
  }
  uint64_t v8 = sub_19EBF6968();
  uint64_t v9 = (void *)v8;
  *(void *)(v8 + 16) = v7;
  unint64_t v10 = *(void *)(v6 + 16);
  if (!v10)
  {
LABEL_16:
    v9[2] = v10;
    swift_bridgeObjectRelease();
LABEL_17:
    v24[0] = v25;
    v24[1] = v26;
    v24[2] = v27;
    sub_19E5DF494(v4);
    uint64_t v18 = (void *)MLShapedArraySlice.strides.getter();
    BOOL v19 = sub_19E5DDC7C(v9, v18);
    swift_bridgeObjectRelease();
    if (v19)
    {
      swift_bridgeObjectRelease();
      long long v20 = v26;
      *a2 = v25;
      a2[1] = v20;
      a2[2] = v27;
      sub_19E5DF520((uint64_t)&v25);
    }
    else
    {
      uint64_t v21 = type metadata accessor for StandardStorage();
      MEMORY[0x1F4188790](v21);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_19E63B0D8(v6, (uint64_t)v9);
      swift_bridgeObjectRelease();
      sub_19E5F4CBC(v22, (uint64_t)&off_1EF0C70A8, v24);
      v23[0] = v24[0];
      sub_19E5D8DC4(v23, MEMORY[0x1E4FBC860], a2);
    }
    return;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 1;
  do
  {
    *(void *)(v8 + 8 * v11 + 32) = v12;
    uint64_t v13 = *(void *)(v6 + 32 + 8 * v11);
    uint64_t v14 = v12 * v13;
    uint64_t v15 = (unsigned __int128)(v12 * (__int128)v13) >> 64;
    BOOL v16 = v15 < v14 >> 63;
    if (v15 != v14 >> 63)
    {
      __break(1u);
      goto LABEL_22;
    }
    ++v11;
    uint64_t v12 = v14;
  }
  while (v10 != v11);
  if (v7 >= v10) {
    goto LABEL_16;
  }
  __break(1u);
LABEL_10:
  uint64_t v17 = *(void *)(v6 + 16);
  swift_bridgeObjectRetain();
  if (v17)
  {
    uint64_t v9 = (void *)sub_19EBF6968();
    v9[2] = v17;
  }
  else
  {
    uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  }
  *(void *)&v23[0] = 0;
  *(void *)&v24[0] = v9 + 4;
  *((void *)&v24[0] + 1) = v17;
  sub_19E6B5844(v24, v23, v6);
  unint64_t v10 = *(void *)&v23[0];
  BOOL v16 = v17 < *(void *)&v23[0];
  if (v17 >= *(uint64_t *)&v23[0]) {
    goto LABEL_16;
  }
LABEL_22:
  __break(1u);
  if (v16) {
    __break(1u);
  }
  v9[2] = v10;
  swift_bridgeObjectRelease();
  __break(1u);
}

uint64_t sub_19E5DD664(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t result = sub_19EBF6758();
  if (result)
  {
    uint64_t v12 = result;
    uint64_t result = sub_19EBF6758();
    if (result)
    {
      unint64_t v13 = a3[2];
      if (v13 == a4[2])
      {
        uint64_t v14 = result;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t result = sub_19E60F71C(0, v13);
        if (v13 == a6[2])
        {
          uint64_t v15 = result;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v16 = sub_19E60F71C(0, v13);
          sub_19E6B395C(v15, a3, a4, v16, a3, a6, v12, v14, a7, a7);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t MLShapedArraySlice.withUnsafeMutableShapedBufferPointer<A>(using:_:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  unint64_t v12 = *a1;
  uint64_t v13 = *v6;
  uint64_t v36 = a3;
  uint64_t v37 = a6;
  uint64_t v38 = a5;
  unint64_t v39 = v12;
  if (!v12) {
    goto LABEL_10;
  }
  uint64_t v35 = v8;
  if (v12 != 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = (void *)v12;
    goto LABEL_20;
  }
  int64_t v14 = *(void *)(v13 + 16);
  swift_bridgeObjectRetain();
  if (!v14)
  {
    unint64_t v17 = 0;
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
LABEL_19:
    v16[2] = v17;
LABEL_20:
    uint64_t v34 = a2;
    sub_19E5DF494(v12);
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void *)(a4 + 16);
    uint64_t v22 = *(void *)(a4 + 24);
    uint64_t v23 = type metadata accessor for MLShapedArray();
    v33[11] = v9 + 1;
    if (sub_19E66B6F4())
    {
      uint64_t v24 = v38;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v24 = v38;
      long long v25 = *((_OWORD *)v9 + 1);
      v40[0] = *(_OWORD *)v9;
      v40[1] = v25;
      v40[2] = *((_OWORD *)v9 + 2);
      long long v26 = (void *)MLShapedArraySlice.strides.getter();
      BOOL v27 = sub_19E5DDC7C(v26, v16);
      swift_bridgeObjectRelease();
      uint64_t v28 = swift_bridgeObjectRelease();
      if (v27)
      {
LABEL_24:
        uint64_t v29 = v9[5];
        uint64_t v30 = *v9;
        *(void *)&v40[0] = v39;
        MEMORY[0x1F4188790](v28);
        v33[2] = v21;
        v33[3] = v24;
        v33[4] = v22;
        v33[5] = v29;
        v33[6] = v9;
        v33[7] = v34;
        v33[8] = v36;
        v33[9] = v30;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        MLShapedArray.withUnsafeMutableShapedBufferPointer<A>(using:_:)((unint64_t *)v40, (uint64_t)sub_19E5DEEAC, (uint64_t)v33, v23, v24);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t v28 = sub_19E5DAEAC();
    goto LABEL_24;
  }
  uint64_t v15 = sub_19EBF6968();
  uint64_t v16 = (void *)v15;
  *(void *)(v15 + 16) = v14;
  unint64_t v17 = *(void *)(v13 + 16);
  if (!v17)
  {
    unint64_t v12 = v39;
    goto LABEL_19;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 1;
  unint64_t v12 = v39;
  do
  {
    *(void *)(v15 + 8 * v18 + 32) = v19;
    uint64_t v20 = *(void *)(v13 + 32 + 8 * v18);
    if ((unsigned __int128)(v19 * (__int128)v20) >> 64 != (v19 * v20) >> 63)
    {
      __break(1u);
      goto LABEL_26;
    }
    ++v18;
    v19 *= v20;
  }
  while (v17 != v18);
  if (v14 >= v17) {
    goto LABEL_19;
  }
  __break(1u);
LABEL_10:
  int64_t v14 = *(void *)(v13 + 16);
  swift_bridgeObjectRetain();
  if (v14)
  {
    uint64_t v16 = (void *)sub_19EBF6968();
    v16[2] = v14;
  }
  else
  {
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v41 = 0;
  *(void *)&v40[0] = v16 + 4;
  *((void *)&v40[0] + 1) = v14;
  sub_19E6B5844(v40, &v41, v13);
  if (!v8)
  {
    if (v14 >= v41)
    {
      uint64_t v35 = 0;
      v16[2] = v41;
      unint64_t v12 = v39;
      goto LABEL_20;
    }
LABEL_26:
    __break(1u);
  }
  uint64_t v32 = v41;
  if (v14 < v41) {
    __break(1u);
  }
  v16[2] = v32;
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_19E5DDAA4@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  v25[3] = a7;
  uint64_t v14 = sub_19E669DA4(a3, a2);
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t result = sub_19EBF6758();
  if (result)
  {
    if (__OFSUB__(v15, v14))
    {
      __break(1u);
    }
    else
    {
      uint64_t v24 = (void (*)(void *, uint64_t, uint64_t))a5;
      v25[0] = sub_19EBF6E98();
      v25[1] = v17;
      a8 = sub_19E5D9CF4(*(void *)(*(void *)(a4 + 24) + 16), (uint64_t)a2);
      uint64_t v14 = v18;
      uint64_t v15 = v19;
      a5 = v20;
      if ((v20 & 1) == 0)
      {
        swift_bridgeObjectRetain();
LABEL_5:
        uint64_t v21 = sub_19E5DDDB0(a8, v14, v15, a5);
LABEL_12:
        swift_unknownObjectRelease();
        v24(v25, a6, v21);
        return swift_release();
      }
      sub_19EBF73A8();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v22 = swift_dynamicCastClass();
      if (!v22)
      {
        swift_unknownObjectRelease();
        uint64_t v22 = MEMORY[0x1E4FBC860];
      }
      uint64_t v23 = *(void *)(v22 + 16);
      swift_release();
      if (!__OFSUB__(a5 >> 1, v15))
      {
        if (v23 == (a5 >> 1) - v15)
        {
          uint64_t v21 = swift_dynamicCastClass();
          if (!v21)
          {
            swift_unknownObjectRelease();
            uint64_t v21 = MEMORY[0x1E4FBC860];
          }
          goto LABEL_12;
        }
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_15:
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

BOOL sub_19E5DDC7C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  uint64_t v3 = a1 + 5;
  unint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_19E5DDCE8(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = sub_19EBF7388(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_19EBF7388() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_19E5DDDB0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x1E4FBC860];
    }
    uint64_t v8 = 8 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = v9 + 32;
        uint64_t v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8]) {
          goto LABEL_19;
        }
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
      uint64_t v9 = (char *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      *((void *)v9 + 2) = v5;
      *((void *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = sub_19EBF7278();
  __break(1u);
  return result;
}

uint64_t sub_19E5DDF1C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x1E4FBC860];
    }
    uint64_t v8 = 16 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = v9 + 32;
        uint64_t v13 = (char *)(a2 + 16 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8]) {
          goto LABEL_19;
        }
        memcpy(v12, v13, 16 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1E945B970);
      uint64_t v9 = (char *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 17;
      }
      *((void *)v9 + 2) = v5;
      *((void *)v9 + 3) = 2 * (v11 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = sub_19EBF7278();
  __break(1u);
  return result;
}

uint64_t sub_19E5DE088(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BFA8);
  uint64_t v3 = swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * (v5 >> 4);
  uint64_t v6 = sub_19E5DE468((uint64_t)&v8, (_OWORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_19E5DFBF8();
  if (v6 != v1)
  {
    __break(1u);
    return MEMORY[0x1E4FBC860];
  }
  return v3;
}

int64_t *sub_19E5DE170(int64_t *result, int64_t a2)
{
  int64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2) {
      return (int64_t *)MEMORY[0x1E4FBC860];
    }
    int64_t v4 = (int64_t)result;
    if (v2 <= 0)
    {
      uint64_t v5 = (int64_t *)MEMORY[0x1E4FBC860];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
      uint64_t v5 = (int64_t *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    uint64_t result = sub_19E5DE66C(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_19E5DE238(uint64_t result, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a5;
  if (!a2) {
    goto LABEL_33;
  }
  if (!a3)
  {
    uint64_t v11 = 0;
    goto LABEL_37;
  }
  if (a3 < 0) {
    goto LABEL_46;
  }
  if (!a5)
  {
LABEL_33:
    uint64_t v11 = 0;
LABEL_37:
    *(void *)uint64_t result = a4;
    *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = v5;
    return v11;
  }
  uint64_t v8 = a2;
  uint64_t v9 = a4 + 32;
  uint64_t v25 = result;
  uint64_t v26 = a4 + 8;
  uint64_t v10 = 1;
  uint64_t v27 = a4 + 32;
  while (1)
  {
    uint64_t v11 = v10;
    uint64_t v13 = v5 + 2;
    unint64_t v12 = v5[2];
    if (!v12)
    {
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v18 = v5;
      goto LABEL_30;
    }
    uint64_t v14 = v12 - 1;
    uint64_t v15 = v5[v12 + 3];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      break;
    }
    if (v12 > *(void *)(a4 + 16)) {
      goto LABEL_43;
    }
    if (v17 >= *(void *)(v9 + 16 * v14 + 8))
    {
      uint64_t result = swift_bridgeObjectRetain();
      if (v12 != 1)
      {
        uint64_t v19 = (void *)(v26 + 16 * v12);
        uint64_t v18 = v5;
        while (v18)
        {
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_19E612754(v18);
            uint64_t v18 = (void *)result;
          }
          unint64_t v20 = v12 - 1;
          if ((int64_t)(v12 - 1) >= v18[2])
          {
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            goto LABEL_42;
          }
          v18[v12 + 3] = 0;
          uint64_t v14 = v12 - 2;
          if ((int64_t)(v12 - 2) >= *v13) {
            goto LABEL_39;
          }
          uint64_t v21 = v13[v12];
          BOOL v16 = __OFADD__(v21, 1);
          uint64_t v22 = v21 + 1;
          if (v16) {
            goto LABEL_40;
          }
          if (v14 >= *(void *)(a4 + 16)) {
            goto LABEL_41;
          }
          if (v22 < *v19)
          {
            uint64_t v9 = v27;
            goto LABEL_25;
          }
          v19 -= 2;
          --v12;
          if (v20 == 1) {
            goto LABEL_23;
          }
        }
        goto LABEL_47;
      }
LABEL_23:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v18 = 0;
      uint64_t v9 = v27;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = v5;
LABEL_25:
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_19E612754(v18);
        uint64_t v18 = (void *)result;
      }
      if (v14 >= v18[2]) {
        goto LABEL_44;
      }
      uint64_t v23 = v18[v14 + 4];
      BOOL v16 = __OFADD__(v23, 1);
      uint64_t v24 = v23 + 1;
      if (v16) {
        goto LABEL_45;
      }
      v18[v14 + 4] = v24;
    }
LABEL_30:
    void *v8 = v5;
    if (v11 == a3)
    {
      uint64_t v5 = v18;
      uint64_t v11 = a3;
LABEL_36:
      uint64_t result = v25;
      goto LABEL_37;
    }
    ++v8;
    uint64_t v10 = v11 + 1;
    uint64_t v5 = v18;
    if (!v18) {
      goto LABEL_36;
    }
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_19E5DE468(uint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *uint64_t v11 = *(_OWORD *)(*(void *)(a4 + 56) + 16 * v16);
    if (v13 == v10)
    {
      swift_unknownObjectRetain();
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = swift_unknownObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

int64_t *sub_19E5DE66C(int64_t *result, int64_t *a2, int64_t a3, int64_t a4, int64_t a5)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    unint64_t v5 = a4;
LABEL_7:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0) {
    goto LABEL_31;
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4) {
    goto LABEL_32;
  }
  if (a5 > a4)
  {
    unint64_t v5 = a4 + 1;
    *a2 = a4;
    unint64_t v6 = a3 - 1;
    if (a3 == 1) {
      goto LABEL_7;
    }
    unint64_t v7 = a3 - 2;
    if (a3 - 2 >= (unint64_t)(~a4 + a5)) {
      unint64_t v7 = ~a4 + a5;
    }
    if (v7 < v6) {
      unint64_t v6 = v7;
    }
    unint64_t v8 = v6 + 1;
    if (v8 > 4)
    {
      uint64_t v11 = v8 & 3;
      if ((v8 & 3) == 0) {
        uint64_t v11 = 4;
      }
      unint64_t v12 = v8 - v11;
      uint64_t v9 = v8 - v11 + 1;
      unint64_t v13 = v5 + v12;
      uint64_t v10 = &a2[v12];
      int64x2_t v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_19EC35D70);
      unint64_t v15 = (int64x2_t *)(a2 + 3);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *unint64_t v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      unint64_t v5 = v13;
    }
    else
    {
      uint64_t v9 = 1;
      uint64_t v10 = a2;
    }
    int64_t v17 = v10 + 1;
    int64_t v18 = v5;
    while (a3 != v9)
    {
      if (a5 == v18)
      {
        unint64_t v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v18 >= a5) {
        goto LABEL_30;
      }
      ++v9;
      unint64_t v5 = v18 + 1;
      *v17++ = v18++;
      if (a3 == v9) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19E5DE79C()
{
  return *(void *)v0;
}

uint64_t sub_19E5DE7A4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_19E5DE7FC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_19E5DE854(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v65 = a5;
  uint64_t v53 = a3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1E945CE70);
  uint64_t v10 = *(void *)(a5 + 8);
  *(void *)&long long v70 = a4;
  *((void *)&v70 + 1) = v9;
  uint64_t v57 = v9;
  *(void *)&long long v71 = v10;
  *((void *)&v71 + 1) = sub_19E5DFDB8((unint64_t *)&unk_1E945CF20, (uint64_t *)&unk_1E945CE70);
  uint64_t v55 = *((void *)&v71 + 1);
  uint64_t v11 = sub_19EBF7018();
  uint64_t v58 = *(void *)(v11 - 8);
  uint64_t v59 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v56 = (char *)&v49 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E945BFB0);
  uint64_t v14 = sub_19E5DFDB8(&qword_1E945BFB8, &qword_1E945BFB0);
  *(void *)&long long v70 = a4;
  *((void *)&v70 + 1) = v13;
  uint64_t v62 = v14;
  uint64_t v63 = v13;
  uint64_t v66 = v10;
  *(void *)&long long v71 = v10;
  *((void *)&v71 + 1) = v14;
  uint64_t v15 = sub_19EBF7018();
  uint64_t v68 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  int64_t v18 = (char *)&v49 - v17;
  uint64_t v19 = *(void *)(a4 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v16);
  uint64_t v54 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v49 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v49 - v25;
  long long v27 = a1[1];
  long long v70 = *a1;
  long long v71 = v27;
  long long v72 = a1[2];
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v67 = a2;
  unint64_t v64 = v28;
  v28((char *)&v49 - v25, a2, a4);
  uint64_t v29 = v61;
  uint64_t v30 = *(void *)(*(void *)(v61 + 32) + 16);
  uint64_t v31 = sub_19EBF6BA8();
  uint64_t v60 = *(uint64_t (**)(char *, uint64_t))(v19 + 8);
  uint64_t result = v60(v26, a4);
  if (v30 != v31)
  {
    __break(1u);
    goto LABEL_6;
  }
  v64(v24, v67, a4);
  uint64_t v33 = v29;
  uint64_t v69 = *(void *)(v29 + 32);
  sub_19EBF73E8();
  uint64_t WitnessTable = swift_getWitnessTable();
  char v35 = sub_19EBF6848();
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t))(v68 + 8);
  uint64_t v52 = v15;
  v68 += 8;
  uint64_t v51 = v36;
  v36(v18, v15);
  uint64_t v37 = v60;
  uint64_t result = v60(v24, a4);
  if ((v35 & 1) == 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v50 = WitnessTable;
  uint64_t v38 = v54;
  v64(v54, v67, a4);
  uint64_t v69 = v70;
  unint64_t v39 = v56;
  sub_19EBF73E8();
  uint64_t v40 = v59;
  swift_getWitnessTable();
  char v41 = sub_19EBF6848();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v39, v40);
  uint64_t result = v37(v38, a4);
  if (v41)
  {
    uint64_t v69 = *(void *)(v33 + 32);
    sub_19EBF73E8();
    uint64_t v42 = v52;
    uint64_t v44 = sub_19E5DA064((void (*)(char *, char *))sub_19E5DA048, 0, v52, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC248], v50, MEMORY[0x1E4FBC278], v43);
    uint64_t v45 = v51(v18, v42);
    MEMORY[0x1F4188790](v45);
    uint64_t v46 = v53;
    uint64_t v47 = *(void *)(v53 + 24);
    *(&v49 - 6) = *(void *)(v53 + 16);
    *(&v49 - 5) = a4;
    uint64_t v48 = v65;
    *(&v49 - 4) = v47;
    *(&v49 - 3) = v48;
    *(&v49 - 2) = v44;
    *(&v49 - 1) = (uint64_t)&v70;
    MLShapedArraySlice.withUnsafeMutableShapedBufferPointer<A>(_:)((uint64_t)sub_19E5DFDFC, (uint64_t)(&v49 - 8), v46, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC848]);
    swift_bridgeObjectRelease();
    return sub_19E5DFE2C((uint64_t)&v70);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_19E5DEE48(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_19E5DACB4(a1, a2, a3, a4, *(void *)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 56), *(void *)(v4 + 64), *(void *)(v4 + 72));
}

uint64_t sub_19E5DEE80(uint64_t a1)
{
  return a1;
}

uint64_t sub_19E5DEEAC@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  return sub_19E5DF588(a1, a2, a3);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_19E5DEF0C(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v34 = a3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E945BFB0);
  uint64_t v10 = sub_19E5DFDB8(&qword_1E945BFB8, &qword_1E945BFB0);
  uint64_t v11 = *(void *)(a5 + 8);
  uint64_t v37 = v10;
  uint64_t v38 = v9;
  *(void *)&long long v44 = v9;
  *((void *)&v44 + 1) = a4;
  *(void *)&long long v45 = v10;
  *((void *)&v45 + 1) = v11;
  uint64_t v36 = v11;
  uint64_t v12 = sub_19EBF7018();
  uint64_t v39 = *(void *)(v12 - 8);
  uint64_t v40 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v33 - v14;
  uint64_t v16 = *(void *)(a4 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v13);
  uint64_t v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v33 - v20;
  long long v22 = a1[1];
  long long v44 = *a1;
  long long v45 = v22;
  long long v46 = a1[2];
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v42 = a2;
  v23((char *)&v33 - v20, a2, a4);
  uint64_t v33 = a5;
  uint64_t v24 = sub_19EBF6BA8();
  uint64_t v25 = v41;
  uint64_t v26 = *(void *)(*(void *)(v41 + 32) + 16);
  char v35 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
  uint64_t result = v35(v21, a4);
  if (v26 < v24)
  {
    __break(1u);
  }
  else
  {
    v23(v19, v42, a4);
    uint64_t v43 = *(void *)(v25 + 32);
    sub_19EBF73E8();
    uint64_t v28 = v40;
    swift_getWitnessTable();
    char v29 = sub_19EBF6848();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v28);
    uint64_t result = v35(v19, a4);
    if (v29)
    {
      MEMORY[0x1F4188790](result);
      uint64_t v30 = v34;
      uint64_t v31 = *(void *)(v34 + 24);
      *(&v33 - 6) = *(void *)(v34 + 16);
      *(&v33 - 5) = a4;
      uint64_t v32 = v33;
      *(&v33 - 4) = v31;
      *(&v33 - 3) = v32;
      *(&v33 - 2) = (uint64_t)&v44;
      *(&v33 - 1) = v42;
      MLShapedArraySlice.withUnsafeMutableShapedBufferPointer<A>(_:)((uint64_t)sub_19E5DFCA0, (uint64_t)(&v33 - 8), v30, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC848]);
      return sub_19E5DFE2C((uint64_t)&v44);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_19E5DF27C@<X0>(uint64_t a1@<X0>, void *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = sub_19E669DA4(*(void *)(v3 + 48), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a3, a1 + *(void *)(*(void *)(v6 - 8) + 72) * v7, v6);
}

uint64_t sub_19E5DF2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(unsigned char *))(v11 + 16))(&v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  uint64_t result = sub_19EBF69D8();
  uint64_t v13 = *(void *)(result + 16);
  if (v13 == *(void *)(*(void *)v5 + 16))
  {
    uint64_t v14 = result;
    if (!v13)
    {
LABEL_7:
      MEMORY[0x1F4188790](result);
      uint64_t v20 = *(void *)(a3 + 24);
      *(void *)&v21[-48] = *(void *)(a3 + 16);
      *(void *)&v21[-40] = a4;
      *(void *)&v21[-32] = v20;
      *(void *)&v21[-24] = a5;
      *(void *)&v21[-16] = v14;
      *(void *)&v21[-8] = a1;
      MLShapedArraySlice.withUnsafeMutableShapedBufferPointer<A>(_:)((uint64_t)sub_19E5DFC24, (uint64_t)&v21[-64], a3, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC848]);
      return swift_bridgeObjectRelease();
    }
    uint64_t v15 = (uint64_t *)(result + 32);
    uint64_t v16 = (uint64_t *)(*(void *)v5 + 32);
    while (1)
    {
      uint64_t v18 = *v15++;
      uint64_t v17 = v18;
      if (v18 < 0) {
        break;
      }
      uint64_t v19 = *v16++;
      if (v17 >= v19) {
        break;
      }
      if (!--v13) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_19E5DF494(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_19E5DF4A4(uint64_t a1)
{
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[5];
  v6[2] = v1[2];
  v6[3] = v2;
  v6[4] = a1;
  v6[5] = v3;
  uint64_t v4 = type metadata accessor for MLShapedArraySlice();
  return MLShapedArraySlice.withUnsafeShapedBufferPointer<A>(_:)((uint64_t)sub_19E5DFC04, (uint64_t)v6, v4, MEMORY[0x1E4FBC848] + 8);
}

uint64_t sub_19E5DF520(uint64_t a1)
{
  return a1;
}

uint64_t sub_19E5DF588@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  return sub_19E5DDAA4(a1, a2, *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 72), a3, *(void *)(v3 + 16));
}

uint64_t sub_19E5DF5C0(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t sub_19E5DF5C8(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t sub_19E5DF648()
{
  return swift_getWitnessTable();
}

uint64_t sub_19E5DF664()
{
  return sub_19E5DF7D0(&qword_1E945BF18);
}

unint64_t sub_19E5DF698()
{
  unint64_t result = qword_1E945CE80;
  if (!qword_1E945CE80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945CE80);
  }
  return result;
}

uint64_t sub_19E5DF6EC()
{
  return swift_getWitnessTable();
}

uint64_t sub_19E5DF708()
{
  return swift_getWitnessTable();
}

uint64_t sub_19E5DF724()
{
  return swift_getWitnessTable();
}

uint64_t sub_19E5DF740()
{
  return sub_19E5DF7D0(qword_1E945BF20);
}

uint64_t sub_19E5DF774()
{
  return swift_getWitnessTable();
}

uint64_t sub_19E5DF790()
{
  return MEMORY[0x1E4FBB568];
}

uint64_t sub_19E5DF79C()
{
  return sub_19E5DF7D0((unint64_t *)&qword_1E945CE90);
}

uint64_t sub_19E5DF7D0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1E945CE60);
    sub_19E5DF698();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_19E5DF840()
{
  return swift_getWitnessTable();
}

double sub_19E5DF85C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  return sub_19E5DCA4C(a1, a2, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))MLShapedArraySlice.subscript.getter, a3);
}

uint64_t sub_19E5DF888(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19E5DCAE0(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5DE854);
}

uint64_t sub_19E5DF8B4()
{
  return 32;
}

__n128 sub_19E5DF8C0(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

double sub_19E5DF8CC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  return sub_19E5DCA4C(a1, a2, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))MLShapedArraySlice.subscript.getter, a3);
}

uint64_t sub_19E5DF8F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19E5DCAE0(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5DEF0C);
}

uint64_t sub_19E5DF924()
{
  return 32;
}

__n128 sub_19E5DF930(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_19E5DF944()
{
  return 32;
}

__n128 sub_19E5DF950(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_19E5DF95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

uint64_t sub_19E5DF964()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_19E5DF9B8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_19E5DFA38(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = v4;
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_19E5DFAE4(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLModelStructure.Program.Function(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLModelStructure.Program.Function(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 4_Block_object_dispose(&STACK[0x278], 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for MLShapedArraySlice()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_19E5DFBF8()
{
  return swift_release();
}

uint64_t sub_19E5DFC04(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  return sub_19E5DD664(a1, a2, a3, a4, *(void *)(v4 + 32), *(void **)(v4 + 40), *(void *)(v4 + 16));
}

uint64_t sub_19E5DFC24(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3[2];
  uint64_t v5 = v3[6];
  uint64_t v6 = v3[7];
  uint64_t v7 = *a1;
  uint64_t v8 = sub_19E669DA4(v5, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(v7 + *(void *)(*(void *)(v4 - 8) + 72) * v8, v6, v4);
}

uint64_t sub_19E5DFCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3 + 56);
  long long v5 = *(_OWORD *)(v3 + 32);
  v8[1] = *(_OWORD *)(v3 + 16);
  v8[2] = v5;
  uint64_t v9 = v4;
  uint64_t v10 = a3;
  uint64_t v11 = a1;
  uint64_t v6 = type metadata accessor for MLShapedArraySlice();
  return MLShapedArraySlice.withUnsafeShapedBufferPointer<A>(_:)((uint64_t)sub_19E5DFD30, (uint64_t)v8, v6, MEMORY[0x1E4FBC848] + 8);
}

uint64_t sub_19E5DFD30(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  return sub_19E5DCBB8(a1, a2, a3, a4, *(void *)(v4 + 48), *(void **)(v4 + 56), *(void *)(v4 + 64), *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_19E5DFD68(uint64_t a1, uint64_t a2)
{
  return sub_19E5DB040(a1, a2, *(uint64_t **)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void sub_19E5DFD88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_19E5DB154(a1, a2, a3, a4, *(void *)(v4 + 32), *(void **)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 16));
}

uint64_t sub_19E5DFDB8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_19E5DFDFC(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_19E5DA760(a1, a2, a3, v3[6], v3[7], v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_19E5DFE2C(uint64_t a1)
{
  return a1;
}

uint64_t sub_19E5DFE90(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  return sub_19E5DA81C(a1, a2, a3, a4, *(void *)(v4 + 48), *(void *)(v4 + 56), *(void **)(v4 + 64), *(void *)(v4 + 16));
}

uint64_t sub_19E5DFEC8()
{
  return sub_19E5DF7D0((unint64_t *)&qword_1E945CE90);
}

void *sub_19E5DFEFC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  if (__OFSUB__(v2, *result)) {
    __break(1u);
  }
  else {
    *a2 = v2 - *result;
  }
  return result;
}

BOOL sub_19E5DFF20(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_19E5DFF38()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E5DFF80()
{
  return sub_19EBF7488();
}

uint64_t sub_19E5DFFAC()
{
  return sub_19EBF74B8();
}

unint64_t sub_19E5DFFF0()
{
  sub_19E5E05D8(v0, (uint64_t)v2);
  return sub_19E5E0028();
}

unint64_t sub_19E5E0028()
{
  sub_19E5E05D8(v0, (uint64_t)&v5);
  switch(v6)
  {
    case 1:
      if (qword_1E945BB28 != -1) {
        swift_once();
      }
      unint64_t v2 = 0xD00000000000001ELL;
      if (byte_1E946A4F1 == 1)
      {
        sub_19EBF6FE8();
        sub_19EBF67D8();
        sub_19EBF7188();
        goto LABEL_27;
      }
      break;
    case 2:
      if (qword_1E945BB28 != -1) {
        swift_once();
      }
      unint64_t v2 = 0xD00000000000001ELL;
      if (byte_1E946A4F1 == 1)
      {
        sub_19EBF6FE8();
        goto LABEL_25;
      }
      break;
    case 3:
      if (qword_1E945BB28 != -1) {
        swift_once();
      }
      unint64_t v2 = 0xD00000000000001ELL;
      if (byte_1E946A4F1 == 1)
      {
        sub_19EBF6FE8();
        sub_19EBF67D8();
        sub_19EBF67D8();
        sub_19EBF67D8();
        sub_19EBF67D8();
        sub_19EBF67D8();
        sub_19EBF67D8();
        goto LABEL_27;
      }
      break;
    case 4:
      if (qword_1E945BB28 != -1) {
        swift_once();
      }
      unint64_t v2 = 0xD00000000000001ELL;
      if (byte_1E946A4F1 == 1)
      {
        sub_19EBF6FE8();
        sub_19EBF67D8();
        sub_19EBF67D8();
        sub_19EBF67D8();
        goto LABEL_27;
      }
      break;
    case 5:
      if (qword_1E945BB28 != -1) {
        swift_once();
      }
      unint64_t v2 = 0xD00000000000001ELL;
      if (byte_1E946A4F1 == 1)
      {
        sub_19EBF6FE8();
        sub_19EBF67D8();
        sub_19EBF67D8();
        sub_19EBF67D8();
        goto LABEL_26;
      }
      break;
    case 6:
      char v3 = v5;
      sub_19EBF6FE8();
      sub_19EBF67D8();
      sub_19E6C1A2C(v3);
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
LABEL_25:
      sub_19EBF67D8();
LABEL_26:
      sub_19EBF7188();
      goto LABEL_27;
    default:
      char v1 = v5;
      sub_19EBF6FE8();
      sub_19EBF67D8();
      sub_19E6C1A2C(v1);
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
LABEL_27:
      sub_19EBF67D8();
      unint64_t v2 = 0;
      break;
  }
  return v2;
}

uint64_t sub_19E5E05D8(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[2];
  *(unsigned char *)(a2 + 4_Block_object_dispose(&STACK[0x278], 8) = *((unsigned char *)a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t sub_19E5E05F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t result = a2;
  if (a7 != 5)
  {
    if (a7 != 4)
    {
      if (a7 != 3) {
        return result;
      }
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t destroy for InternalError(uint64_t a1)
{
  return sub_19E5E0688(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
}

uint64_t sub_19E5E0688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t result = a2;
  if (a7 != 5)
  {
    if (a7 != 4)
    {
      if (a7 != 3) {
        return result;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InternalError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_19E5E05F8(*(void *)a2, v4, v5, v6, v7, v8, v9);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = v9;
  return a1;
}

uint64_t assignWithCopy for InternalError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_19E5E05F8(*(void *)a2, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  char v16 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = v9;
  sub_19E5E0688(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for InternalError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  char v11 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = v3;
  sub_19E5E0688(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(unsigned char *)(result + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
    *(void *)__n128 result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4_Block_object_dispose(&STACK[0x278], 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_19E5E091C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t sub_19E5E0928(uint64_t result, char a2)
{
  *(unsigned char *)(result + 4_Block_object_dispose(&STACK[0x278], 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for InternalError()
{
  return &type metadata for InternalError;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DeviceKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19E5E0AA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_19E5E0AD0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_19E5E0AD8(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceKind()
{
  return &type metadata for DeviceKind;
}

unint64_t sub_19E5E0AF8()
{
  unint64_t result = qword_1E945BFC0;
  if (!qword_1E945BFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945BFC0);
  }
  return result;
}

uint64_t sub_19E5E0B4C()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v4 = 0;
  size_t v3 = 4;
  uint64_t result = sysctlbyname("kern.hv_vmm_present", &v4, &v3, 0, 0);
  if (result) {
    BOOL v1 = 1;
  }
  else {
    BOOL v1 = v4 == 0;
  }
  char v2 = !v1;
  byte_1E946A4F0 = v2;
  return result;
}

void sub_19E5E0BD4()
{
  uint64_t v0 = (void *)sub_19EBF6788();
  char v1 = MGGetBoolAnswer();

  byte_1E946A4F1 = v1;
}

uint64_t sub_19E5E0C2C()
{
  if (qword_1E945BB20 != -1) {
    uint64_t result = swift_once();
  }
  byte_1E946A4F2 = (byte_1E946A4F0 & 1) == 0;
  return result;
}

uint64_t sub_19E5E0C88()
{
  uint64_t result = sub_19E5E0CAC();
  byte_1E946A4F3 = result & 1;
  return result;
}

uint64_t sub_19E5E0CAC()
{
  id v0 = objc_msgSend(self, sel_processInfo);
  id v1 = objc_msgSend(v0, sel_environment);

  uint64_t v2 = sub_19EBF6638();
  if (!*(void *)(v2 + 16)) {
    goto LABEL_8;
  }
  sub_19E662844(0xD000000000000019, 0x800000019EC08530);
  if ((v3 & 1) == 0) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (sub_19EBF67B8() == 1702195828 && v4 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    swift_bridgeObjectRelease();
    return 1;
  }
  char v6 = sub_19EBF7388();
  swift_bridgeObjectRelease();
  if (v6) {
    goto LABEL_8;
  }
  uint64_t v8 = sub_19EBF67B8();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  if (v8 == 7562617 && v10 == 0xE300000000000000) {
    goto LABEL_8;
  }
  char v12 = sub_19EBF7388();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_19E5E0E58()
{
  return MEMORY[0x1F4186488](v0, 16, 7);
}

uint64_t type metadata accessor for PlatformInfo()
{
  return self;
}

uint64_t sub_19E5E0E8C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 4) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_19E5E0EA0(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for InputError(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int8 *)(result + 64);
  if (v2 >= 0xB) {
    unsigned int v2 = *(_DWORD *)result + 11;
  }
  switch(v2)
  {
    case 1u:
    case 2u:
    case 5u:
      swift_bridgeObjectRelease();
      goto LABEL_14;
    case 4u:
      uint64_t v3 = *(void *)(result + 8);
      uint64_t v4 = *(void *)(v1 + 16);
      char v5 = *(unsigned char *)(v1 + 24);
      uint64_t result = sub_19E5E0FD8(v3, v4, v5);
      break;
    case 7u:
LABEL_14:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 9u:
      uint64_t v6 = *(void *)(result + 8);
      char v7 = *(unsigned char *)(v1 + 16);
      uint64_t result = sub_19E5E0FEC(v6, v7);
      break;
    case 0xAu:
      __swift_destroy_boxed_opaque_existential_0(result);
      uint64_t result = __swift_destroy_boxed_opaque_existential_0(v1 + 32);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_19E5E0FD8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 4) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_19E5E0FEC(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t initializeWithCopy for InputError(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 64);
  if (v4 >= 0xB) {
    unsigned int v4 = *(_DWORD *)a2 + 11;
  }
  switch(v4)
  {
    case 1u:
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v5;
      char v6 = 1;
      goto LABEL_10;
    case 2u:
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v7;
      char v6 = 2;
      goto LABEL_10;
    case 3u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v8 = 3;
      goto LABEL_16;
    case 4u:
      uint64_t v9 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      uint64_t v10 = *(void *)(a2 + 16);
      char v11 = *(unsigned char *)(a2 + 24);
      sub_19E5E0E8C(v9, v10, v11);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v9;
      *(void *)(a1 + 16) = v10;
      *(unsigned char *)(a1 + 24) = v11;
      char v8 = 4;
      goto LABEL_16;
    case 5u:
      uint64_t v12 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v12;
      char v6 = 5;
LABEL_10:
      *(unsigned char *)(a1 + 64) = v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    case 6u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v8 = 6;
      goto LABEL_16;
    case 7u:
      uint64_t v13 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v13;
      *(unsigned char *)(a1 + 64) = 7;
      swift_bridgeObjectRetain();
      return a1;
    case 8u:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      char v8 = 8;
      goto LABEL_16;
    case 9u:
      *(_WORD *)a1 = *(_WORD *)a2;
      uint64_t v14 = *(void *)(a2 + 8);
      char v15 = *(unsigned char *)(a2 + 16);
      sub_19E5E0EA0(v14, v15);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v14;
      *(unsigned char *)(a1 + 16) = v15;
      char v8 = 9;
      goto LABEL_16;
    case 0xAu:
      uint64_t v16 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v16;
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1, a2);
      uint64_t v17 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v17;
      (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 32, a2 + 32);
      char v8 = 10;
LABEL_16:
      *(unsigned char *)(a1 + 64) = v8;
      break;
    default:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(unsigned char *)(a1 + 64) = 0;
      break;
  }
  return a1;
}

uint64_t assignWithCopy for InputError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 64);
    if (v4 >= 0xB) {
      unsigned int v4 = *(_DWORD *)a1 + 11;
    }
    switch(v4)
    {
      case 1u:
      case 2u:
      case 5u:
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 4u:
        sub_19E5E0FD8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
        break;
      case 7u:
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      case 9u:
        sub_19E5E0FEC(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
        break;
      case 0xAu:
        __swift_destroy_boxed_opaque_existential_0(a1);
        __swift_destroy_boxed_opaque_existential_0(a1 + 32);
        break;
      default:
        break;
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 64);
    if (v5 >= 0xB) {
      unsigned int v5 = *(_DWORD *)a2 + 11;
    }
    switch(v5)
    {
      case 1u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
        char v6 = 1;
        goto LABEL_19;
      case 2u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
        char v6 = 2;
        goto LABEL_19;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 3;
        goto LABEL_25;
      case 4u:
        *(void *)a1 = *(void *)a2;
        uint64_t v8 = *(void *)(a2 + 8);
        uint64_t v9 = *(void *)(a2 + 16);
        char v10 = *(unsigned char *)(a2 + 24);
        sub_19E5E0E8C(v8, v9, v10);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v8;
        *(void *)(a1 + 16) = v9;
        *(unsigned char *)(a1 + 24) = v10;
        char v7 = 4;
        goto LABEL_25;
      case 5u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
        char v6 = 5;
LABEL_19:
        *(unsigned char *)(a1 + 64) = v6;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return a1;
      case 6u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 6;
        goto LABEL_25;
      case 7u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
        *(unsigned char *)(a1 + 64) = 7;
        swift_bridgeObjectRetain();
        return a1;
      case 8u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        char v7 = 8;
        goto LABEL_25;
      case 9u:
        *(_WORD *)a1 = *(_WORD *)a2;
        uint64_t v11 = *(void *)(a2 + 8);
        char v12 = *(unsigned char *)(a2 + 16);
        sub_19E5E0EA0(v11, v12);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v11;
        *(unsigned char *)(a1 + 16) = v12;
        char v7 = 9;
        goto LABEL_25;
      case 0xAu:
        uint64_t v13 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v13;
        (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
        uint64_t v14 = *(void *)(a2 + 56);
        *(void *)(a1 + 56) = v14;
        (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 32, a2 + 32);
        char v7 = 10;
LABEL_25:
        *(unsigned char *)(a1 + 64) = v7;
        break;
      default:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(unsigned char *)(a1 + 64) = 0;
        break;
    }
  }
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for InputError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 64);
    if (v4 >= 0xB) {
      unsigned int v4 = *(_DWORD *)a1 + 11;
    }
    switch(v4)
    {
      case 1u:
      case 2u:
      case 5u:
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 4u:
        sub_19E5E0FD8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
        break;
      case 7u:
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      case 9u:
        sub_19E5E0FEC(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
        break;
      case 0xAu:
        __swift_destroy_boxed_opaque_existential_0(a1);
        __swift_destroy_boxed_opaque_existential_0(a1 + 32);
        break;
      default:
        break;
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 64);
    if (v5 >= 0xB) {
      unsigned int v5 = *(_DWORD *)a2 + 11;
    }
    switch(v5)
    {
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v6 = 1;
        break;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v6 = 2;
        break;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v6 = 3;
        break;
      case 4u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
        char v6 = 4;
        break;
      case 5u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v6 = 5;
        break;
      case 6u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v6 = 6;
        break;
      case 7u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v6 = 7;
        break;
      case 8u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        char v6 = 8;
        break;
      case 9u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        char v6 = 9;
        break;
      case 0xAu:
        long long v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        long long v8 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = v8;
        char v6 = 10;
        break;
      default:
        char v6 = 0;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        break;
    }
    *(unsigned char *)(a1 + 64) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for InputError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6 && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 >= 0xB) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for InputError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(unsigned char *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 4_Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 246;
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_19E5E180C(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 64);
  if (result >= 0xB) {
    return (*(_DWORD *)a1 + 11);
  }
  return result;
}

uint64_t sub_19E5E1828(uint64_t result, unsigned int a2)
{
  if (a2 > 0xA)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 4_Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 11;
    LOBYTE(a2) = 11;
  }
  *(unsigned char *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for InputError()
{
  return &type metadata for InputError;
}

uint64_t sub_19E5E1864()
{
  sub_19E5E2970(v0, (uint64_t)&v70);
  switch(v74)
  {
    case 1:
      long long v3 = v70;
      *(void *)&long long v68 = 0;
      *((void *)&v68 + 1) = 0xE000000000000000;
      sub_19EBF6FE8();
      sub_19EBF67D8();
      int64_t v4 = *(void *)(v3 + 16);
      uint64_t v5 = MEMORY[0x1E4FBC860];
      if (v4)
      {
        uint64_t v61 = MEMORY[0x1E4FBC860];
        sub_19E66F688(0, v4, 0);
        uint64_t v5 = v61;
        char v6 = (uint64_t *)(v3 + 32);
        do
        {
          uint64_t v7 = *v6++;
          *(void *)&v67[0] = 96;
          *((void *)&v67[0] + 1) = 0xE100000000000000;
          uint64_t v65 = v7;
          sub_19EBF67A8();
          sub_19EBF67D8();
          swift_bridgeObjectRelease();
          sub_19EBF67D8();
          uint64_t v61 = v5;
          unint64_t v9 = *(void *)(v5 + 16);
          unint64_t v8 = *(void *)(v5 + 24);
          if (v9 >= v8 >> 1)
          {
            sub_19E66F688(v8 > 1, v9 + 1, 1);
            uint64_t v5 = v61;
          }
          *(void *)(v5 + 16) = v9 + 1;
          uint64_t v10 = v5 + 16 * v9;
          *(void *)(v10 + 32) = 96;
          *(void *)(v10 + 40) = 0xE100000000000000;
          --v4;
        }
        while (v4);
      }
      *(void *)&v67[0] = v5;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BFC8);
      sub_19E5E3430();
      sub_19EBF66B8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      int64_t v45 = *(void *)(*((void *)&v3 + 1) + 16);
      uint64_t v46 = MEMORY[0x1E4FBC860];
      if (v45)
      {
        uint64_t v61 = MEMORY[0x1E4FBC860];
        sub_19E66F688(0, v45, 0);
        uint64_t v46 = v61;
        uint64_t v47 = (uint64_t *)(*((void *)&v3 + 1) + 32);
        do
        {
          uint64_t v48 = *v47++;
          *(void *)&v67[0] = 96;
          *((void *)&v67[0] + 1) = 0xE100000000000000;
          uint64_t v65 = v48;
          sub_19EBF67A8();
          sub_19EBF67D8();
          swift_bridgeObjectRelease();
          sub_19EBF67D8();
          uint64_t v61 = v46;
          unint64_t v50 = *(void *)(v46 + 16);
          unint64_t v49 = *(void *)(v46 + 24);
          if (v50 >= v49 >> 1)
          {
            sub_19E66F688(v49 > 1, v50 + 1, 1);
            uint64_t v46 = v61;
          }
          *(void *)(v46 + 16) = v50 + 1;
          uint64_t v51 = v46 + 16 * v50;
          *(void *)(v51 + 32) = 96;
          *(void *)(v51 + 40) = 0xE100000000000000;
          --v45;
        }
        while (v45);
      }
      *(void *)&v67[0] = v46;
      sub_19EBF66B8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_49;
    case 2:
      long long v11 = v70;
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      *(void *)&long long v68 = 0xD000000000000013;
      *((void *)&v68 + 1) = 0x800000019EC086D0;
      uint64_t v12 = MEMORY[0x1E4FBB550];
      MEMORY[0x19F3BF220](v11, MEMORY[0x1E4FBB550]);
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      MEMORY[0x19F3BF220](*((void *)&v11 + 1), v12);
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_51;
    case 3:
      uint64_t v13 = *((void *)&v70 + 1);
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      *(void *)&long long v68 = 0xD00000000000001FLL;
      *((void *)&v68 + 1) = 0x800000019EC086B0;
      sub_19EBF67A8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      *(void *)&v67[0] = 96;
      *((void *)&v67[0] + 1) = 0xE100000000000000;
      uint64_t v61 = v13;
      goto LABEL_30;
    case 4:
      uint64_t v14 = *((void *)&v70 + 1);
      uint64_t v15 = v70;
      uint64_t v16 = v71;
      char v17 = v72;
      sub_19EBF6FE8();
      sub_19EBF67D8();
      char v69 = v17;
      __swift_instantiateConcreteTypeFromMangledName(qword_1E945BFD8);
      sub_19EBF7188();
      sub_19E5E0FD8(v14, v16, v17);
      sub_19EBF67D8();
      *(void *)&long long v68 = 96;
      *((void *)&v68 + 1) = 0xE100000000000000;
      uint64_t v61 = v15;
      sub_19EBF67A8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      return 0;
    case 5:
      long long v19 = v70;
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      *(void *)&long long v68 = 0xD000000000000020;
      *((void *)&v68 + 1) = 0x800000019EC08660;
      int64_t v20 = *(void *)(v19 + 16);
      uint64_t v21 = MEMORY[0x1E4FBC860];
      if (v20)
      {
        uint64_t v61 = MEMORY[0x1E4FBC860];
        sub_19E66F688(0, v20, 0);
        uint64_t v21 = v61;
        long long v22 = (uint64_t *)(v19 + 32);
        do
        {
          uint64_t v23 = *v22++;
          *(void *)&v67[0] = 96;
          *((void *)&v67[0] + 1) = 0xE100000000000000;
          uint64_t v65 = v23;
          sub_19EBF67A8();
          sub_19EBF67D8();
          swift_bridgeObjectRelease();
          sub_19EBF67D8();
          uint64_t v61 = v21;
          unint64_t v25 = *(void *)(v21 + 16);
          unint64_t v24 = *(void *)(v21 + 24);
          if (v25 >= v24 >> 1)
          {
            sub_19E66F688(v24 > 1, v25 + 1, 1);
            uint64_t v21 = v61;
          }
          *(void *)(v21 + 16) = v25 + 1;
          uint64_t v26 = v21 + 16 * v25;
          *(void *)(v26 + 32) = 96;
          *(void *)(v26 + 40) = 0xE100000000000000;
          --v20;
        }
        while (v20);
      }
      *(void *)&v67[0] = v21;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BFC8);
      sub_19E5E3430();
      sub_19EBF66B8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      int64_t v52 = *(void *)(*((void *)&v19 + 1) + 16);
      uint64_t v53 = MEMORY[0x1E4FBC860];
      if (v52)
      {
        uint64_t v61 = MEMORY[0x1E4FBC860];
        sub_19E66F688(0, v52, 0);
        uint64_t v53 = v61;
        uint64_t v54 = (uint64_t *)(*((void *)&v19 + 1) + 32);
        do
        {
          uint64_t v55 = *v54++;
          *(void *)&v67[0] = 96;
          *((void *)&v67[0] + 1) = 0xE100000000000000;
          uint64_t v65 = v55;
          sub_19EBF67A8();
          sub_19EBF67D8();
          swift_bridgeObjectRelease();
          sub_19EBF67D8();
          uint64_t v61 = v53;
          unint64_t v57 = *(void *)(v53 + 16);
          unint64_t v56 = *(void *)(v53 + 24);
          if (v57 >= v56 >> 1)
          {
            sub_19E66F688(v56 > 1, v57 + 1, 1);
            uint64_t v53 = v61;
          }
          *(void *)(v53 + 16) = v57 + 1;
          uint64_t v58 = v53 + 16 * v57;
          *(void *)(v58 + 32) = 96;
          *(void *)(v58 + 40) = 0xE100000000000000;
          --v52;
        }
        while (v52);
      }
      *(void *)&v67[0] = v53;
      sub_19EBF66B8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_49:
      sub_19EBF67D8();
      goto LABEL_50;
    case 6:
      long long v27 = v70;
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      *(void *)&long long v68 = 0x2073697841;
      *((void *)&v68 + 1) = 0xE500000000000000;
      *(void *)&v67[0] = 96;
      *((void *)&v67[0] + 1) = 0xE100000000000000;
      uint64_t v61 = v27;
      sub_19EBF67A8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      if (__OFSUB__(0, *((void *)&v27 + 1)))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        JUMPOUT(0x19E5E2944);
      }
      *(void *)&v67[0] = sub_19EBF7318();
      *((void *)&v67[0] + 1) = v28;
      sub_19EBF67D8();
      uint64_t v61 = *((void *)&v27 + 1);
      sub_19EBF7318();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      unint64_t v30 = *((void *)&v67[0] + 1);
      uint64_t v29 = *(void *)&v67[0];
      *(void *)&v67[0] = 96;
      *((void *)&v67[0] + 1) = 0xE100000000000000;
      goto LABEL_46;
    case 7:
      long long v31 = v70;
      *(void *)&long long v68 = 0;
      *((void *)&v68 + 1) = 0xE000000000000000;
      sub_19EBF6FE8();
      sub_19EBF67D8();
      int64_t v32 = *(void *)(v31 + 16);
      uint64_t v33 = MEMORY[0x1E4FBC860];
      if (v32)
      {
        uint64_t v61 = MEMORY[0x1E4FBC860];
        sub_19E66F688(0, v32, 0);
        uint64_t v33 = v61;
        uint64_t v34 = (uint64_t *)(v31 + 32);
        do
        {
          uint64_t v35 = *v34++;
          *(void *)&v67[0] = 96;
          *((void *)&v67[0] + 1) = 0xE100000000000000;
          uint64_t v65 = v35;
          sub_19EBF67A8();
          sub_19EBF67D8();
          swift_bridgeObjectRelease();
          sub_19EBF67D8();
          uint64_t v61 = v33;
          unint64_t v37 = *(void *)(v33 + 16);
          unint64_t v36 = *(void *)(v33 + 24);
          if (v37 >= v36 >> 1)
          {
            sub_19E66F688(v36 > 1, v37 + 1, 1);
            uint64_t v33 = v61;
          }
          *(void *)(v33 + 16) = v37 + 1;
          uint64_t v38 = v33 + 16 * v37;
          *(void *)(v38 + 32) = 96;
          *(void *)(v38 + 40) = 0xE100000000000000;
          --v32;
        }
        while (v32);
      }
      *(void *)&v67[0] = v33;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BFC8);
      sub_19E5E3430();
      sub_19EBF66B8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      if (__OFSUB__(0, *((void *)&v31 + 1))) {
        goto LABEL_54;
      }
      *(void *)&v67[0] = sub_19EBF7318();
      *((void *)&v67[0] + 1) = v59;
      sub_19EBF67D8();
      uint64_t v61 = *((void *)&v31 + 1);
      sub_19EBF7318();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      unint64_t v30 = *((void *)&v67[0] + 1);
      uint64_t v29 = *(void *)&v67[0];
      *(void *)&v67[0] = 96;
      *((void *)&v67[0] + 1) = 0xE100000000000000;
LABEL_46:
      uint64_t v61 = v29;
      unint64_t v62 = v30;
      swift_bridgeObjectRetain();
      sub_19EBF67A8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      goto LABEL_51;
    case 8:
      char v39 = BYTE2(v70);
      char v40 = BYTE3(v70);
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      *(void *)&long long v68 = 0xD000000000000026;
      *((void *)&v68 + 1) = 0x800000019EC085B0;
      sub_19EBF67A8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      *(void *)&v67[0] = 96;
      *((void *)&v67[0] + 1) = 0xE100000000000000;
      LOBYTE(v61) = v39;
      BYTE1(v61) = v40;
      goto LABEL_30;
    case 9:
      char v41 = v70;
      char v42 = BYTE1(v70);
      uint64_t v43 = *((void *)&v70 + 1);
      char v44 = v71;
      *(void *)&long long v68 = 0;
      *((void *)&v68 + 1) = 0xE000000000000000;
      sub_19EBF6FE8();
      sub_19EBF67D8();
      sub_19EBF7188();
      sub_19E5E0FEC(v43, v44);
      sub_19EBF67D8();
      *(void *)&v67[0] = 96;
      *((void *)&v67[0] + 1) = 0xE100000000000000;
      LOBYTE(v61) = v41;
      BYTE1(v61) = v42;
LABEL_30:
      sub_19EBF67A8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      sub_19EBF67D8();
LABEL_50:
      swift_bridgeObjectRelease();
      goto LABEL_51;
    case 10:
      sub_19E5E29A8(&v70, &v68);
      sub_19E5E29A8(&v73, v67);
      uint64_t v61 = 0;
      unint64_t v62 = 0xE000000000000000;
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      uint64_t v65 = 0x207475706E49;
      unint64_t v66 = 0xE600000000000000;
      uint64_t v63 = 96;
      unint64_t v64 = 0xE100000000000000;
      sub_19E5E29B8((uint64_t)&v68, (uint64_t)&v61);
      sub_19EBF67A8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      uint64_t v63 = 96;
      unint64_t v64 = 0xE100000000000000;
      sub_19E5E29B8((uint64_t)v67, (uint64_t)&v61);
      sub_19EBF67A8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      uint64_t v18 = v65;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v67);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v68);
      return v18;
    default:
      char v1 = BYTE2(v70);
      char v2 = BYTE3(v70);
      *(void *)&long long v68 = 0;
      *((void *)&v68 + 1) = 0xE000000000000000;
      sub_19EBF6FE8();
      sub_19EBF67D8();
      sub_19EBF67A8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      *(void *)&v67[0] = 96;
      *((void *)&v67[0] + 1) = 0xE100000000000000;
      LOBYTE(v61) = v1;
      BYTE1(v61) = v2;
      sub_19EBF67A8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
LABEL_51:
      sub_19EBF67D8();
      return v68;
  }
}

uint64_t sub_19E5E2970(uint64_t a1, uint64_t a2)
{
  return a2;
}

_OWORD *sub_19E5E29A8(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_19E5E29B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_19E5E2A14(uint64_t a1, char a2)
{
  if (!a2)
  {
    uint64_t v9 = 96;
    sub_19E6C1A2C(a1);
    sub_19EBF67D8();
    swift_bridgeObjectRelease();
LABEL_11:
    sub_19EBF67D8();
    return v9;
  }
  if (a2 != 1)
  {
    sub_19EBF6FE8();
    swift_bridgeObjectRelease();
    uint64_t v9 = 6299745;
    sub_19EBF75D8();
    sub_19EBF67D8();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    sub_19E66F688(0, v3, 0);
    uint64_t v4 = a1 + 32;
    do
    {
      v4 += 2;
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      unint64_t v6 = *(void *)(v10 + 16);
      unint64_t v5 = *(void *)(v10 + 24);
      if (v6 >= v5 >> 1) {
        sub_19E66F688(v5 > 1, v6 + 1, 1);
      }
      *(void *)(v10 + 16) = v6 + 1;
      uint64_t v7 = v10 + 16 * v6;
      *(void *)(v7 + 32) = 96;
      *(void *)(v7 + 40) = 0xE100000000000000;
      --v3;
    }
    while (v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BFC8);
  sub_19E5E3430();
  sub_19EBF66B8();
  swift_bridgeObjectRelease();
  uint64_t v9 = 0x20666F20656E6FLL;
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_19E5E2D70()
{
  return sub_19E5E2A14(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_19E5E2D7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = sub_19EBF7288();
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v38 = v4;
  MEMORY[0x1F4188790](v4);
  unint64_t v6 = (char *)&v33 - v5;
  uint64_t v7 = sub_19EBF7198();
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v36 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = sub_19EBF6728();
  uint64_t v34 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v14 = *(void *)(v2 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v11);
  char v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  long long v19 = (uint64_t *)((char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v20 + 16))(v19, v39, a1);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch((int)EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v23 = v34;
      (*(void (**)(char *, uint64_t *, uint64_t))(v34 + 32))(v13, v19, v10);
      uint64_t v40 = 0;
      unint64_t v41 = 0xE000000000000000;
      sub_19EBF67D8();
      swift_getWitnessTable();
      sub_19EBF7368();
      sub_19EBF67D8();
      uint64_t v22 = v40;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v10);
      break;
    case 2:
      uint64_t v25 = v35;
      uint64_t v24 = v36;
      (*(void (**)(char *, uint64_t *, uint64_t))(v35 + 32))(v9, v19, v36);
      uint64_t v40 = 0;
      unint64_t v41 = 0xE000000000000000;
      sub_19EBF67D8();
      sub_19EBF7358();
      sub_19EBF67D8();
      uint64_t v22 = v40;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v24);
      break;
    case 3:
      uint64_t v27 = v37;
      uint64_t v26 = v38;
      (*(void (**)(char *, uint64_t *, uint64_t))(v37 + 32))(v6, v19, v38);
      uint64_t v40 = 0;
      unint64_t v41 = 0xE000000000000000;
      sub_19EBF67D8();
      sub_19EBF7358();
      sub_19EBF67D8();
      uint64_t v22 = v40;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v26);
      break;
    case 4:
      uint64_t v40 = *v19;
      MEMORY[0x1F4188790](EnumCaseMultiPayload);
      *(&v33 - 2) = v2;
      *(&v33 - 1) = v3;
      uint64_t v28 = sub_19EBF69C8();
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v31 = sub_19E5F7AC4((void (*)(char *, char *))sub_19E5E4CD8, (uint64_t)(&v33 - 4), v28, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v30);
      swift_bridgeObjectRelease();
      uint64_t v40 = v31;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BFC8);
      sub_19E5E3430();
      sub_19EBF66B8();
      swift_bridgeObjectRelease();
      uint64_t v40 = 0x20666F20656E6FLL;
      unint64_t v41 = 0xE700000000000000;
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      uint64_t v22 = v40;
      break;
    default:
      (*(void (**)(char *, uint64_t *, uint64_t))(v14 + 32))(v17, v19, v2);
      uint64_t v40 = 0;
      unint64_t v41 = 0xE000000000000000;
      sub_19EBF67D8();
      sub_19EBF7358();
      sub_19EBF67D8();
      uint64_t v22 = v40;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v2);
      break;
  }
  return v22;
}

uint64_t sub_19E5E33A4@<X0>(void *a1@<X8>)
{
  sub_19EBF67D8();
  sub_19EBF7358();
  uint64_t result = sub_19EBF67D8();
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return result;
}

unint64_t sub_19E5E3430()
{
  unint64_t result = qword_1E945BFD0;
  if (!qword_1E945BFD0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E945BFC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945BFD0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ScalarKindExpectation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_19E5E0EA0(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  return a1;
}

uint64_t destroy for ScalarKindExpectation(uint64_t a1)
{
  return sub_19E5E0FEC(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for ScalarKindExpectation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_19E5E0EA0(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  sub_19E5E0FEC(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + _Block_object_dispose(&STACK[0x278], 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for ScalarKindExpectation(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v3;
  sub_19E5E0FEC(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScalarKindExpectation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScalarKindExpectation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + _Block_object_dispose(&STACK[0x278], 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_19E5E3618(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_19E5E3620(uint64_t result, char a2)
{
  *(unsigned char *)(result + _Block_object_dispose(&STACK[0x278], 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ScalarKindExpectation()
{
  return &type metadata for ScalarKindExpectation;
}

uint64_t sub_19E5E3638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t sub_19E5E3640()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = sub_19EBF6728();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v0;
}

void *sub_19E5E3730(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v8;
  unint64_t v10 = v7 + v8;
  if (((v7 + v9) & ~v9) + v7 > v7) {
    v7 += (v7 + v8) & ~(unint64_t)v8;
  }
  if (v7 <= 8) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = v7;
  }
  int v12 = v8 & 0x100000;
  if (v9 > 7 || v12 != 0 || (unint64_t)(v11 + 1) > 0x18)
  {
    uint64_t v15 = *(void *)a2;
    *int v4 = *(void *)a2;
    int v4 = (void *)(v15 + ((v9 & 0xF8 ^ 0x1F8) & (v9 + 16)));
    swift_retain();
  }
  else
  {
    unsigned int v17 = a2[v11];
    unsigned int v18 = v17 - 5;
    if (v17 >= 5)
    {
      if (v11 <= 3) {
        uint64_t v19 = v11;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_25;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_25;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_25;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_25:
          int v21 = (v20 | (v18 << (8 * v11))) + 5;
          unsigned int v17 = v20 + 5;
          if (v11 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v22 = ~v9;
    switch(v17)
    {
      case 1u:
        uint64_t v23 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16);
        v23(a1, a2, v5);
        v23((void *)(((unint64_t)v4 + v10) & v22), (unsigned __int8 *)((unint64_t)&a2[v10] & v22), v5);
        *((unsigned char *)v4 + v11) = 1;
        break;
      case 2u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        *((unsigned char *)v4 + v11) = 2;
        break;
      case 3u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        *((unsigned char *)v4 + v11) = 3;
        break;
      case 4u:
        *a1 = *(void *)a2;
        *((unsigned char *)a1 + v11) = 4;
        swift_bridgeObjectRetain();
        break;
      default:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        *((unsigned char *)v4 + v11) = 0;
        break;
    }
  }
  return v4;
}

uint64_t sub_19E5E39B4(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = a1;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = v5 + v6;
  if (((v5 + v6) & ~v6) + v5 > v5) {
    v5 += (v5 + v6) & ~v6;
  }
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  unsigned int v8 = a1[v5];
  unsigned int v9 = v8 - 5;
  if (v8 >= 5)
  {
    if (v5 <= 3) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v11 = *(_DWORD *)a1;
LABEL_14:
        int v12 = (v11 | (v9 << (8 * v5))) + 5;
        unsigned int v8 = v11 + 5;
        if (v5 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v13 = ~v6;
  switch(v8)
  {
    case 1u:
      unsigned int v17 = *(void (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      v17(a1, v3);
      a1 = (unsigned __int8 *)((unint64_t)&v2[v7] & v13);
      uint64_t v15 = v3;
      uint64_t v14 = (uint64_t (*)(unsigned __int8 *, uint64_t))v17;
      goto LABEL_19;
    case 4u:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      uint64_t v14 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      uint64_t v15 = *(void *)(a2 + 16);
LABEL_19:
      uint64_t result = v14(a1, v15);
      break;
  }
  return result;
}

void *sub_19E5E3B98(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 > v7) {
    v7 += (v7 + v8) & ~v8;
  }
  if (v7 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v7;
  }
  unsigned int v11 = a2[v10];
  unsigned int v12 = v11 - 5;
  if (v11 >= 5)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        goto LABEL_15;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        goto LABEL_15;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_15;
      case 4:
        int v14 = *(_DWORD *)a2;
LABEL_15:
        int v15 = (v14 | (v12 << (8 * v10))) + 5;
        unsigned int v11 = v14 + 5;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v16 = ~v8;
  switch(v11)
  {
    case 1u:
      unsigned int v17 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16);
      v17(a1, a2, v5);
      v17((void *)(((unint64_t)a1 + v9) & v16), (unsigned __int8 *)((unint64_t)&a2[v9] & v16), v5);
      *((unsigned char *)a1 + v10) = 1;
      break;
    case 2u:
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((unsigned char *)a1 + v10) = 2;
      break;
    case 3u:
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((unsigned char *)a1 + v10) = 3;
      break;
    case 4u:
      *a1 = *(void *)a2;
      *((unsigned char *)a1 + v10) = 4;
      swift_bridgeObjectRetain();
      break;
    default:
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((unsigned char *)a1 + v10) = 0;
      break;
  }
  return a1;
}

unsigned __int8 *sub_19E5E3DDC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 > v7) {
      v7 += (v7 + v8) & ~v8;
    }
    if (v7 <= 8) {
      uint64_t v10 = 8;
    }
    else {
      uint64_t v10 = v7;
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 5;
    if (v11 >= 5)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_16;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_16;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_16;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_16:
          int v15 = (v14 | (v12 << (8 * v10))) + 5;
          unsigned int v11 = v14 + 5;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v16 = ~v8;
    switch(v11)
    {
      case 1u:
        unsigned int v17 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
        v17(a1, v5);
        v17((unsigned __int8 *)((unint64_t)&a1[v9] & v16), v5);
        break;
      case 4u:
        swift_bridgeObjectRelease();
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
        break;
    }
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 5;
    if (v18 >= 5)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 5;
          unsigned int v18 = v21 + 5;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    switch(v18)
    {
      case 1u:
        uint64_t v24 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16);
        v24(a1, a2, v5);
        v24((unsigned __int8 *)((unint64_t)&a1[v9] & v16), (unsigned __int8 *)((unint64_t)&a2[v9] & v16), v5);
        char v23 = 1;
        goto LABEL_39;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        char v23 = 2;
        goto LABEL_39;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        char v23 = 3;
LABEL_39:
        a1[v10] = v23;
        break;
      case 4u:
        *(void *)a1 = *(void *)a2;
        a1[v10] = 4;
        swift_bridgeObjectRetain();
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        a1[v10] = 0;
        break;
    }
  }
  return a1;
}

void *sub_19E5E414C(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 > v7) {
    v7 += (v7 + v8) & ~v8;
  }
  if (v7 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v7;
  }
  unsigned int v11 = a2[v10];
  unsigned int v12 = v11 - 5;
  if (v11 >= 5)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        goto LABEL_15;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        goto LABEL_15;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_15;
      case 4:
        int v14 = *(_DWORD *)a2;
LABEL_15:
        int v15 = (v14 | (v12 << (8 * v10))) + 5;
        unsigned int v11 = v14 + 5;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v16 = ~v8;
  switch(v11)
  {
    case 1u:
      unsigned int v18 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 32);
      v18(a1, a2, v5);
      v18((void *)(((unint64_t)a1 + v9) & v16), (unsigned __int8 *)((unint64_t)&a2[v9] & v16), v5);
      char v17 = 1;
      break;
    case 2u:
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v17 = 2;
      break;
    case 3u:
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v17 = 3;
      break;
    case 4u:
      *a1 = *(void *)a2;
      char v17 = 4;
      break;
    default:
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v17 = 0;
      break;
  }
  *((unsigned char *)a1 + v10) = v17;
  return a1;
}

unsigned __int8 *sub_19E5E4380(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 > v7) {
      v7 += (v7 + v8) & ~v8;
    }
    if (v7 <= 8) {
      uint64_t v10 = 8;
    }
    else {
      uint64_t v10 = v7;
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 5;
    if (v11 >= 5)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_16;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_16;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_16;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_16:
          int v15 = (v14 | (v12 << (8 * v10))) + 5;
          unsigned int v11 = v14 + 5;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v16 = ~v8;
    switch(v11)
    {
      case 1u:
        char v17 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
        v17(a1, v5);
        v17((unsigned __int8 *)((unint64_t)&a1[v9] & v16), v5);
        break;
      case 4u:
        swift_bridgeObjectRelease();
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
        break;
    }
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 5;
    if (v18 >= 5)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 5;
          unsigned int v18 = v21 + 5;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    switch(v18)
    {
      case 1u:
        uint64_t v24 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32);
        v24(a1, a2, v5);
        v24((unsigned __int8 *)((unint64_t)&a1[v9] & v16), (unsigned __int8 *)((unint64_t)&a2[v9] & v16), v5);
        char v23 = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        char v23 = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        char v23 = 3;
        break;
      case 4u:
        *(void *)a1 = *(void *)a2;
        char v23 = 4;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        char v23 = 0;
        break;
    }
    a1[v10] = v23;
  }
  return a1;
}

uint64_t sub_19E5E46E8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = ((v4 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v5 > v4) {
    unint64_t v4 = v5;
  }
  uint64_t v6 = 8;
  if (v4 > 8) {
    uint64_t v6 = v4;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_24;
  }
  uint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 251) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v11 < 2)
    {
LABEL_24:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 5) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_24;
  }
LABEL_16:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 252;
}

void sub_19E5E4860(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = ((v6 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v7 > v6) {
    unint64_t v6 = v7;
  }
  if (v6 <= 8) {
    unint64_t v6 = 8;
  }
  size_t v8 = v6 + 1;
  if (a3 < 0xFC)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 251) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFB)
  {
    unsigned int v10 = a2 - 252;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v6 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v6 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_36:
        __break(1u);
        JUMPOUT(0x19E5E4A6CLL);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_24;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      default:
LABEL_24:
        if (a2) {
LABEL_25:
        }
          a1[v6] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_19E5E4A94(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  unint64_t v4 = ((v3 + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v4 > v3) {
    unint64_t v3 = v4;
  }
  uint64_t v5 = 8;
  if (v3 > 8) {
    uint64_t v5 = v3;
  }
  uint64_t v6 = a1[v5];
  int v7 = v6 - 5;
  if (v6 >= 5)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_14;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_14:
        unsigned int v10 = (v9 | (v7 << (8 * v5))) + 5;
        LODWORD(v6) = v9 + 5;
        if (v5 >= 4) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v10;
        }
        break;
      default:
        return v6;
    }
  }
  return v6;
}

void sub_19E5E4B90(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  unint64_t v6 = ((v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
  if (a2 > 4)
  {
    if (v6 > v5) {
      unint64_t v5 = v6;
    }
    if (v5 <= 8) {
      size_t v7 = 8;
    }
    else {
      size_t v7 = v5;
    }
    unsigned int v8 = a2 - 5;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 5;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 5;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    if (v6 > v5) {
      unint64_t v5 = v6;
    }
    if (v5 <= 8) {
      unint64_t v5 = 8;
    }
    a1[v5] = a2;
  }
}

uint64_t type metadata accessor for ComparableExpectation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_19E5E4CD8@<X0>(void *a1@<X8>)
{
  return sub_19E5E33A4(a1);
}

uint64_t sub_19E5E4CFC()
{
  sub_19E5E4E2C();
  uint64_t result = sub_19EBF6E28();
  qword_1E946A4F8 = result;
  return result;
}

uint64_t sub_19E5E4D5C(uint64_t a1)
{
  return sub_19E5E4EA0(a1, MEMORY[0x1E4FBD360], qword_1E946A500, MEMORY[0x1E4FBD368]);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_19E5E4E2C()
{
  unint64_t result = qword_1E945C060;
  if (!qword_1E945C060)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E945C060);
  }
  return result;
}

uint64_t sub_19E5E4E6C(uint64_t a1)
{
  return sub_19E5E4EA0(a1, MEMORY[0x1E4FBD330], qword_1E946A518, MEMORY[0x1E4FBD320]);
}

uint64_t sub_19E5E4EA0(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(id))
{
  uint64_t v6 = a2(0);
  __swift_allocate_value_buffer(v6, a3);
  __swift_project_value_buffer(v6, (uint64_t)a3);
  if (qword_1E945BB40 != -1) {
    swift_once();
  }
  return a4((id)qword_1E946A4F8);
}

id MLFeatureValue.init<A>(shapedArray:)(long long *a1)
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_19E5E5014();
  long long v8 = *a1;
  uint64_t v3 = type metadata accessor for MLShapedArray();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v5 = (void *)sub_19E63974C((uint64_t)&v8, v3, WitnessTable);
  swift_unknownObjectRelease();
  id v6 = objc_msgSend(ObjCClassFromMetadata, sel_featureValueWithMultiArray_, v5);

  return v6;
}

unint64_t sub_19E5E5014()
{
  unint64_t result = qword_1E945CFE0;
  if (!qword_1E945CFE0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E945CFE0);
  }
  return result;
}

void MLFeatureValue.shapedArrayValue<A>(of:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  id v8 = objc_msgSend(v4, sel_multiArrayValue);
  if (v8)
  {
    unsigned int v9 = v8;
    id v10 = objc_msgSend(v8, sel_dataType);
    if (v10 == (id)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2))
    {
      MLShapedArray.init(_:)(v9, a1, a2, (size_t *)&v11);
      *(_OWORD *)a3 = v11;
      return;
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x278], 8) = 0;
}

uint64_t sub_19E5E5110(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6570616873;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6570616873;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v6 = 0x656469727473;
      goto LABEL_5;
    case 2:
      uint64_t v5 = 0x795472616C616373;
      unint64_t v3 = 0xEA00000000006570;
      break;
    case 3:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v6 = 0x72616C616373;
LABEL_5:
      uint64_t v5 = v6 & 0xFFFFFFFFFFFFLL | 0x73000000000000;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0xE700000000000000;
      uint64_t v8 = 0x656469727473;
      goto LABEL_12;
    case 2:
      uint64_t v2 = 0x795472616C616373;
      unint64_t v7 = 0xEA00000000006570;
      goto LABEL_9;
    case 3:
      unint64_t v7 = 0xE700000000000000;
      uint64_t v8 = 0x72616C616373;
LABEL_12:
      if (v5 == (v8 & 0xFFFFFFFFFFFFLL | 0x73000000000000)) {
        goto LABEL_13;
      }
      goto LABEL_15;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_15;
      }
LABEL_13:
      if (v3 == v7) {
        char v9 = 1;
      }
      else {
LABEL_15:
      }
        char v9 = sub_19EBF7388();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t MLShapedArray<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = a3;
  uint64_t v10 = a1;
  return (*(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), unsigned char *, uint64_t, uint64_t, uint64_t))(WitnessTable + 152))(sub_19E5E6D54, v6, MEMORY[0x1E4FBC848] + 8, v7, WitnessTable);
}

uint64_t sub_19E5E534C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MLShapedArray<>.encode(to:)(a1, a2, *(void *)(a3 - 8));
}

double MLShapedArray<>.init(from:)@<D0>(void *a1@<X0>, char *a2@<X3>, _OWORD *a3@<X8>)
{
  uint64_t v7 = (char *)type metadata accessor for MLShapedArray();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_19E5E5410(a1, v7, WitnessTable, a2, (uint64_t)&v10);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  if (!v3)
  {
    double result = *(double *)&v10;
    *a3 = v10;
  }
  return result;
}

uint64_t sub_19E5E5410@<X0>(void *a1@<X1>, char *a2@<X2>, uint64_t a3@<X3>, char *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v67 = a4;
  uint64_t v68 = a5;
  uint64_t v70 = a3;
  uint64_t v71 = a2;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = sub_19EBF6388();
  uint64_t v69 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C068);
  uint64_t v72 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  long long v11 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  unint64_t v12 = sub_19E5E61B8();
  int v13 = v73;
  uint64_t result = sub_19EBF7528();
  if (!v13)
  {
    long long v73 = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE70);
    LOBYTE(v74) = 0;
    sub_19E5E6D74(&qword_1E945C078);
    sub_19EBF72C8();
    uint64_t v15 = v76;
    LOBYTE(v74) = 1;
    sub_19EBF72C8();
    uint64_t v16 = v76;
    LOBYTE(v74) = 3;
    sub_19E5E620C();
    sub_19EBF72C8();
    uint64_t v66 = v16;
    uint64_t v17 = v76;
    unint64_t v18 = v77;
    LOBYTE(v76) = 2;
    uint64_t v19 = sub_19EBF72B8();
    unint64_t v64 = v18;
    v60[1] = 0;
    uint64_t v63 = v17;
    uint64_t v65 = (void *)v19;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    int v22 = *(uint64_t (**)(void))(AssociatedConformanceWitness + 8);
    uint64_t v62 = AssociatedTypeWitness;
    uint64_t v61 = v22;
    uint64_t v23 = ((uint64_t (*)(uint64_t, uint64_t))v22)(AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((void *)v23 == v65)
    {
      unsigned __int16 v24 = (unsigned __int16)v65;
      type metadata accessor for DataStorage();
      uint64_t v62 = v15;
      uint64_t v25 = v66;
      uint64_t v26 = sub_19E6B58E8(v15, v66);
      unint64_t v27 = v64;
      unint64_t v28 = v64 >> 62;
      uint64_t v29 = v63;
      uint64_t v30 = v6;
      switch(v64 >> 62)
      {
        case 1uLL:
          LODWORD(v31) = HIDWORD(v63) - v63;
          uint64_t v32 = v69;
          if (__OFSUB__(HIDWORD(v63), v63))
          {
            __break(1u);
LABEL_21:
            __break(1u);
LABEL_22:
            __break(1u);
LABEL_23:
            __break(1u);
            JUMPOUT(0x19E5E5F7CLL);
          }
          uint64_t v31 = (int)v31;
LABEL_11:
          if (v26 == v31)
          {
LABEL_12:
            uint64_t v45 = v32;
            uint64_t v46 = swift_allocObject();
            *(void *)(v46 + 16) = v29;
            *(void *)(v46 + 24) = v27;
            uint64_t v47 = v73;
            *long long v73 = nullsub_1;
            v47[1] = v46;
            uint64_t v48 = (*(uint64_t (**)(void *, void, uint64_t))(v45 + 104))(v47, *MEMORY[0x1E4F27758], v30);
            uint64_t v65 = v60;
            MEMORY[0x1F4188790](v48);
            uint64_t v69 = v30;
            uint64_t v49 = v70;
            v60[-6] = v71;
            v60[-5] = v49;
            uint64_t v50 = v62;
            v60[-4] = v67;
            v60[-3] = v50;
            v60[-2] = v25;
            v60[-1] = v47;
            sub_19E5DE7A4(v29, v27);
            sub_19EBF63A8();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_19E5DE7FC(v29, v27);
            (*(void (**)(char *, uint64_t))(v72 + 8))(v11, v9);
            uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v45 + 8))(v47, v69);
          }
          else
          {
LABEL_14:
            uint64_t v51 = v26;
            uint64_t v70 = v24 >> 3;
            char v75 = 3;
            uint64_t v76 = 0;
            unint64_t v77 = 0xE000000000000000;
            sub_19EBF6FE8();
            sub_19EBF67D8();
            uint64_t v52 = v28;
            uint64_t v53 = 0;
            uint64_t v71 = v11;
            long long v73 = (void *)v9;
            uint64_t v54 = v72;
            switch(v52)
            {
              case 0:
                uint64_t v53 = BYTE6(v64);
                goto LABEL_19;
              case 1:
                LODWORD(v53) = HIDWORD(v29) - v29;
                if (__OFSUB__(HIDWORD(v29), v29)) {
                  goto LABEL_22;
                }
                uint64_t v53 = (int)v53;
LABEL_19:
                uint64_t v74 = v53;
                uint64_t v57 = MEMORY[0x1E4FBB550];
                sub_19EBF7318();
                sub_19EBF67D8();
                swift_bridgeObjectRelease();
                sub_19EBF67D8();
                uint64_t v74 = v51;
                sub_19EBF7318();
                sub_19EBF67D8();
                swift_bridgeObjectRelease();
                sub_19EBF67D8();
                MEMORY[0x19F3BF220](v62, v57);
                sub_19EBF67D8();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_19EBF67D8();
                MEMORY[0x19F3BF220](v66, v57);
                sub_19EBF67D8();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_19EBF67D8();
                uint64_t v74 = v70;
                sub_19EBF7318();
                sub_19EBF67D8();
                swift_bridgeObjectRelease();
                sub_19EBF67D8();
                sub_19EBF7078();
                swift_allocError();
                sub_19E5E6C9C();
                uint64_t v58 = v71;
                uint64_t v59 = v73;
                sub_19EBF7058();
                swift_bridgeObjectRelease();
                swift_willThrow();
                sub_19E5DE7FC(v29, v64);
                uint64_t result = (*(uint64_t (**)(char *, void *))(v54 + 8))(v58, v59);
                break;
              case 2:
                uint64_t v56 = *(void *)(v29 + 16);
                uint64_t v55 = *(void *)(v29 + 24);
                BOOL v44 = __OFSUB__(v55, v56);
                uint64_t v53 = v55 - v56;
                if (!v44) {
                  goto LABEL_19;
                }
                goto LABEL_23;
              case 3:
                goto LABEL_19;
              default:
                JUMPOUT(0);
            }
          }
          break;
        case 2uLL:
          uint64_t v43 = *(void *)(v63 + 16);
          uint64_t v42 = *(void *)(v63 + 24);
          BOOL v44 = __OFSUB__(v42, v43);
          uint64_t v31 = v42 - v43;
          uint64_t v32 = v69;
          if (!v44) {
            goto LABEL_11;
          }
          goto LABEL_21;
        case 3uLL:
          uint64_t v32 = v69;
          if (v26) {
            goto LABEL_14;
          }
          goto LABEL_12;
        default:
          uint64_t v31 = BYTE6(v64);
          uint64_t v32 = v69;
          goto LABEL_11;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v69 = AssociatedConformanceWitness + 8;
      uint64_t v70 = AssociatedConformanceWitness;
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      uint64_t v33 = sub_19EBF7518();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C088);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_19EC36240;
      *(void *)(inited + 56) = &type metadata for MLShapedArrayCodingKeys;
      *(void *)(inited + 64) = v12;
      *(unsigned char *)(inited + 32) = 2;
      uint64_t v76 = v33;
      sub_19E612BE0(inited);
      uint64_t v68 = v76;
      uint64_t v35 = sub_19EBF7078();
      long long v73 = (void *)v9;
      uint64_t v36 = v35;
      swift_allocError();
      uint64_t v38 = v37;
      uint64_t v67 = (char *)v37 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E945C090) + 48);
      *uint64_t v38 = v71;
      uint64_t v76 = 0;
      unint64_t v77 = 0xE000000000000000;
      sub_19EBF6FE8();
      uint64_t v71 = v11;
      sub_19EBF67D8();
      uint64_t v39 = self;
      id v40 = objc_msgSend(v39, sel_stringForDataType_, v65);
      sub_19EBF6798();

      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
      id v41 = objc_msgSend(v39, sel_stringForDataType_, v61());
      sub_19EBF6798();

      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      sub_19EBF7068();
      (*(void (**)(char **, void, uint64_t))(*(void *)(v36 - 8) + 104))(v38, *MEMORY[0x1E4FBBA70], v36);
      swift_willThrow();
      sub_19E5DE7FC(v63, v64);
      return (*(uint64_t (**)(char *, void *))(v72 + 8))(v71, v73);
    }
  }
  return result;
}

double sub_19E5E5F9C@<D0>(void *a1@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  return MLShapedArray<>.init(from:)(a1, *(char **)(a2 - 8), a3);
}

uint64_t MLShapedArraySlice<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = a3;
  uint64_t v10 = a1;
  return (*(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), unsigned char *, uint64_t, uint64_t, uint64_t))(WitnessTable + 152))(sub_19E5E6D54, v6, MEMORY[0x1E4FBC848] + 8, v7, WitnessTable);
}

uint64_t sub_19E5E6084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MLShapedArraySlice<>.encode(to:)(a1, a2, *(void *)(a3 - 8));
}

double MLShapedArraySlice<>.init(from:)@<D0>(void *a1@<X0>, char *a2@<X3>, _OWORD *a3@<X8>)
{
  uint64_t v7 = (char *)type metadata accessor for MLShapedArraySlice();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_19E5E5410(a1, v7, WitnessTable, a2, (uint64_t)v12);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  if (!v3)
  {
    double result = *(double *)v12;
    long long v10 = v12[1];
    long long v11 = v12[2];
    *a3 = v12[0];
    a3[1] = v10;
    a3[2] = v11;
  }
  return result;
}

double sub_19E5E6150@<D0>(void *a1@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  return MLShapedArraySlice<>.init(from:)(a1, *(char **)(a2 - 8), a3);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_19E5E61B8()
{
  unint64_t result = qword_1E945C070;
  if (!qword_1E945C070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C070);
  }
  return result;
}

unint64_t sub_19E5E620C()
{
  unint64_t result = qword_1E945C080;
  if (!qword_1E945C080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C080);
  }
  return result;
}

uint64_t sub_19E5E6260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v38 = a4;
  uint64_t v36 = a7;
  uint64_t v37 = a6;
  v33[1] = a1;
  uint64_t v34 = a2;
  uint64_t v9 = sub_19EBF6388();
  uint64_t v35 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  long long v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C0A0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a5, a5[3]);
  sub_19E5E61B8();
  sub_19EBF7538();
  uint64_t v40 = a3;
  char v42 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE70);
  sub_19E5E6D74(&qword_1E945C0A8);
  uint64_t v16 = v39;
  sub_19EBF72F8();
  if (v16) {
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  uint64_t v39 = v11;
  uint64_t v17 = v9;
  uint64_t v40 = v38;
  char v42 = 1;
  sub_19EBF72F8();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
  LOBYTE(v40) = 2;
  sub_19EBF72E8();
  uint64_t v21 = v34;
  uint64_t result = sub_19EBF6758();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v22 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 72);
  uint64_t v23 = v21 * v22;
  unsigned __int16 v24 = v39;
  if ((unsigned __int128)(v21 * (__int128)v22) >> 64 != (v21 * v22) >> 63)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v25 = result;
  uint64_t v26 = *MEMORY[0x1E4F27740];
  unint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 104);
  uint64_t v38 = v17;
  v27(v39, v26, v17);
  sub_19EBF6378();
  if (v23)
  {
    sub_19EBF6318();
    swift_allocObject();
    swift_retain();
    uint64_t v28 = sub_19EBF62D8();
    uint64_t v29 = sub_19E672650(v28, v23);
    unint64_t v31 = v30;
    swift_release();
  }
  else
  {
    uint64_t v32 = (void (*)(uint64_t, void))sub_19EBF6378();
    v32(v25, 0);
    swift_release();
    swift_release();
    uint64_t v29 = 0;
    unint64_t v31 = 0xC000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v38);
  uint64_t v40 = v29;
  unint64_t v41 = v31;
  char v42 = 3;
  sub_19E5E6DD8();
  sub_19EBF72F8();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return sub_19E5DE7FC(v29, v31);
}

uint64_t sub_19E5E66D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = sub_19EBF6388();
  uint64_t result = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 16))(v17, a5);
    unint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(a7 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v18(a1, a3, a4, v17, a6, a7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_19E5E6810(unsigned __int8 *a1, char *a2)
{
  return sub_19E5E5110(*a1, *a2);
}

uint64_t sub_19E5E681C()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E5E68F4()
{
  sub_19EBF67C8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_19E5E69B4()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E5E6A88@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_19E5E70D0();
  *a1 = result;
  return result;
}

void sub_19E5E6AB8(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x6570616873;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x73656469727473;
      goto LABEL_3;
    case 2:
      *a1 = 0x795472616C616373;
      a1[1] = 0xEA00000000006570;
      break;
    case 3:
      *a1 = 0x7372616C616373;
      a1[1] = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_19E5E6B54()
{
  uint64_t result = 0x6570616873;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x73656469727473;
      break;
    case 2:
      uint64_t result = 0x795472616C616373;
      break;
    case 3:
      uint64_t result = 0x7372616C616373;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_19E5E6BE4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_19E5E70D0();
  *a1 = result;
  return result;
}

uint64_t sub_19E5E6C0C()
{
  return 0;
}

void sub_19E5E6C18(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_19E5E6C24(uint64_t a1)
{
  unint64_t v2 = sub_19E5E61B8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_19E5E6C60(uint64_t a1)
{
  unint64_t v2 = sub_19E5E61B8();

  return MEMORY[0x1F41862B0](a1, v2);
}

unint64_t sub_19E5E6C9C()
{
  unint64_t result = qword_1E945C098;
  if (!qword_1E945C098)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E945C068);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C098);
  }
  return result;
}

uint64_t sub_19E5E6CF8()
{
  sub_19E5DE7FC(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_19E5E6D30(uint64_t a1, uint64_t a2)
{
  return sub_19E5E66D4(a1, a2, v2[5], v2[6], v2[7], v2[2], v2[3]);
}

uint64_t sub_19E5E6D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19E5E6260(a1, a2, a3, a4, *(void **)(v4 + 40), *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_19E5E6D74(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1E945CE70);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_19E5E6DD8()
{
  unint64_t result = qword_1E945C0B0;
  if (!qword_1E945C0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C0B0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MLShapedArrayCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MLShapedArrayCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19E5E6F88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *sub_19E5E6FB0(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MLShapedArrayCodingKeys()
{
  return &type metadata for MLShapedArrayCodingKeys;
}

unint64_t sub_19E5E6FCC()
{
  unint64_t result = qword_1E945C0B8;
  if (!qword_1E945C0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C0B8);
  }
  return result;
}

unint64_t sub_19E5E7024()
{
  unint64_t result = qword_1E945C0C0;
  if (!qword_1E945C0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C0C0);
  }
  return result;
}

unint64_t sub_19E5E707C()
{
  unint64_t result = qword_1E945C0C8;
  if (!qword_1E945C0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C0C8);
  }
  return result;
}

uint64_t sub_19E5E70D0()
{
  unint64_t v0 = sub_19EBF7298();
  swift_bridgeObjectRelease();
  if (v0 >= 4) {
    return 4;
  }
  else {
    return v0;
  }
}

uint64_t sub_19E5E711C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)result + 16);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)(result + 32) >> 1;
  if (v2 == v3) {
    return 1;
  }
  unsigned int v4 = (void *)(*(void *)result + 32);
  if (v2 <= v3) {
    uint64_t v5 = *(void *)(result + 32) >> 1;
  }
  else {
    uint64_t v5 = *(void *)(result + 24);
  }
  uint64_t v6 = ~v2 + v3;
  BOOL v7 = (void *)(*(void *)(result + 16) + 8 * v2);
  uint64_t v8 = v5 - v2;
  uint64_t v9 = v1 - 1;
  while (v8)
  {
    uint64_t v10 = v6;
    unint64_t result = *v7 >= *v4;
    if (*v7 >= *v4)
    {
      if (v9)
      {
        --v6;
        ++v7;
        ++v4;
        --v8;
        --v9;
        if (v10) {
          continue;
        }
      }
    }
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E5E71A0(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)result + 16);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)(result + 32) >> 1;
  if (v2 == v3) {
    return 1;
  }
  unsigned int v4 = (void *)(*(void *)result + 32);
  if (v2 <= v3) {
    uint64_t v5 = *(void *)(result + 32) >> 1;
  }
  else {
    uint64_t v5 = *(void *)(result + 24);
  }
  uint64_t v6 = ~v2 + v3;
  BOOL v7 = (void *)(*(void *)(result + 16) + 8 * v2);
  uint64_t v8 = v5 - v2;
  uint64_t v9 = v1 - 1;
  while (v8)
  {
    uint64_t v10 = v6;
    unint64_t result = *v4 >= *v7;
    if (*v4 >= *v7)
    {
      if (v9)
      {
        --v6;
        ++v7;
        ++v4;
        --v8;
        --v9;
        if (v10) {
          continue;
        }
      }
    }
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E5E7224(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

void sub_19E5E7288()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 16);
  if (v2) {
    BOOL v3 = v2 == 1;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_16:
    }
      uint64_t v1 = sub_19E612754(v1);
    unint64_t v4 = 0;
    uint64_t v5 = v2 + 3;
    do
    {
      if (v4 != v5 - 4)
      {
        unint64_t v7 = v1[2];
        if (v4 >= v7)
        {
          __break(1u);
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }
        if (v5 - 4 >= v7) {
          goto LABEL_15;
        }
        uint64_t v8 = &v1[v4];
        uint64_t v9 = v8[4];
        v8[4] = v1[v5];
        v1[v5] = v9;
      }
      ++v4;
      int64_t v6 = v5 - 5;
      --v5;
    }
    while ((uint64_t)v4 < v6);
    *(void *)uint64_t v0 = v1;
  }
}

unint64_t sub_19E5E7344()
{
  sub_19EBF6738();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C0E0);
  int v0 = swift_dynamicCast();
  if (v0) {
    unsigned int v1 = sub_19EBF6CB8();
  }
  else {
    unsigned int v1 = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C0E8);
  if (swift_dynamicCast())
  {
    unsigned int v1 = sub_19EBF6C98();
    unsigned __int8 v2 = 0;
  }
  else
  {
    unsigned __int8 v2 = v0 ^ 1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C0F0);
  if (swift_dynamicCast())
  {
    unsigned int v1 = sub_19EBF6CF8();
    unsigned __int8 v2 = 0;
  }
  return v1 | ((unint64_t)v2 << 32);
}

uint64_t sub_19E5E7448(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unint64_t v18 = sub_19E5E7344();
  if ((v18 & 0x100000000) != 0) {
    return 0;
  }
  int v19 = v18;
  uint64_t v25 = a4;
  unint64_t v20 = sub_19E5E7344();
  if ((v20 & 0x100000000) != 0) {
    return 0;
  }
  int v21 = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E5E799C(a2, (uint64_t)a3, v19, (uint64_t)v28);
  sub_19E5E7C14((uint64_t)v28, (uint64_t)v36, &qword_1E945C0D0);
  if (sub_19E5E7BF8((uint64_t)v36) == 1) {
    return 0;
  }
  v39[8] = v36[8];
  long long v40 = v37;
  long long v41 = v38;
  v39[4] = v36[4];
  v39[5] = v36[5];
  v39[6] = v36[6];
  v39[7] = v36[7];
  v39[0] = v36[0];
  v39[1] = v36[1];
  v39[2] = v36[2];
  v39[3] = v36[3];
  *(void *)&src.flags = *(void *)&v36[0];
  *(_OWORD *)src.std::string::size_type size = *(_OWORD *)((char *)v39 + 8);
  *(_OWORD *)&src.size[2] = *(_OWORD *)((char *)&v39[1] + 8);
  *(_OWORD *)&src.size[4] = *(_OWORD *)((char *)&v39[2] + 8);
  *(_OWORD *)&src.size[6] = *(_OWORD *)((char *)&v39[3] + 8);
  *(_OWORD *)src.stride = *(_OWORD *)((char *)&v39[4] + 8);
  *(_OWORD *)&src.stride[2] = *(_OWORD *)((char *)&v39[5] + 8);
  *(_OWORD *)&src.stride[4] = *(_OWORD *)((char *)&v39[6] + 8);
  src.data_type = v37;
  *(_OWORD *)&src.stride[6] = *(_OWORD *)((char *)&v39[7] + 8);
  sub_19E5E7C14((uint64_t)&v40 + 8, (uint64_t)v42, &qword_1E945C0D8);
  sub_19E5E7C14((uint64_t)v42, (uint64_t)&src.table_data, &qword_1E945C0D8);
  src.table_data_type = v41;
  *(void *)&src.data_scale = *(void *)((char *)&v41 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E5E799C(a5, (uint64_t)a6, v21, (uint64_t)v29);
  sub_19E5E7C14((uint64_t)v29, (uint64_t)v30, &qword_1E945C0D0);
  if (sub_19E5E7BF8((uint64_t)v30) == 1) {
    return 0;
  }
  *(_OWORD *)&v33[128] = v30[8];
  long long v34 = v31;
  long long v35 = v32;
  *(_OWORD *)&v33[64] = v30[4];
  *(_OWORD *)&v33[80] = v30[5];
  *(_OWORD *)&v33[96] = v30[6];
  *(_OWORD *)&v33[112] = v30[7];
  *(_OWORD *)uint64_t v33 = v30[0];
  *(_OWORD *)&v33[16] = v30[1];
  *(_OWORD *)&v33[32] = v30[2];
  *(_OWORD *)&v33[48] = v30[3];
  *(void *)&dest.flags = *(void *)&v30[0];
  *(_OWORD *)dest.std::string::size_type size = *(_OWORD *)&v33[8];
  *(_OWORD *)&dest.size[2] = *(_OWORD *)&v33[24];
  *(_OWORD *)&dest.size[4] = *(_OWORD *)&v33[40];
  *(_OWORD *)&dest.size[6] = *(_OWORD *)&v33[56];
  *(_OWORD *)dest.stride = *(_OWORD *)&v33[72];
  *(_OWORD *)&dest.stride[2] = *(_OWORD *)&v33[88];
  dest.data_type = v31;
  *(_OWORD *)&dest.stride[4] = *(_OWORD *)&v33[104];
  *(_OWORD *)&dest.stride[6] = *(_OWORD *)&v33[120];
  sub_19E5E7C14((uint64_t)&v34 + 8, (uint64_t)v43, &qword_1E945C0D8);
  sub_19E5E7C14((uint64_t)v43, (uint64_t)&dest.table_data, &qword_1E945C0D8);
  dest.table_data_type = v35;
  *(void *)&dest.data_scale = *(void *)((char *)&v35 + 4);
  uint64_t v23 = (void *)(a7 + *(void *)(*(void *)(a9 - 8) + 72) * sub_19E669DA4(a1, a3));
  unsigned __int16 v24 = (void *)(a8 + *(void *)(*(void *)(a10 - 8) + 72) * sub_19E669DA4(v25, a6));
  src.data = v23;
  dest.data = v24;
  BNNSCopy(&dest, &src, 0);
  return 1;
}

unint64_t sub_19E5E7840(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = *(void *)(*a1 + 16);
  if (!HIDWORD(v2))
  {
    if (v2 <= 8)
    {
      v11[0] = *a1;
      v11[1] = v1;
      void v11[2] = v1 + 32;
      v11[3] = v2 != 0;
      v11[4] = (2 * v2) | 1;
      swift_bridgeObjectRetain();
      char v5 = sub_19E5E711C((uint64_t)v11);
      swift_bridgeObjectRelease();
      if (v5)
      {
        uint64_t v6 = 0;
      }
      else
      {
        uint64_t v7 = *(void *)(v1 + 16);
        unsigned __int8 v4 = 1;
        v10[0] = v1;
        v10[1] = v1;
        v10[2] = v1 + 32;
        v10[3] = v7 != 0;
        v10[4] = (2 * v7) | 1;
        swift_bridgeObjectRetain();
        char v8 = sub_19E5E71A0((uint64_t)v10);
        swift_bridgeObjectRelease();
        if ((v8 & 1) == 0)
        {
          uint64_t v3 = 0;
          goto LABEL_10;
        }
        sub_19E5E7288();
        uint64_t v6 = 1;
      }
      unsigned __int8 v4 = 0;
      uint64_t v3 = (v2 << 16) | (unint64_t)v6 | 0x8000;
    }
    else
    {
      uint64_t v3 = 0;
      unsigned __int8 v4 = 1;
    }
LABEL_10:
    LOBYTE(v11[0]) = v4;
    return v3 | ((unint64_t)v4 << 32);
  }
  unint64_t result = sub_19EBF71E8();
  __break(1u);
  return result;
}

uint64_t sub_19E5E799C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int v32 = 0;
  memset(v31, 0, sizeof(v31));
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v35 = 0;
  if (!*(void *)(a1 + 16) || (sub_19E5E7224(0, a1) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    swift_bridgeObjectRelease();
    sub_19E5E7C78((uint64_t)v17);
LABEL_5:
    sub_19E5E7C14((uint64_t)v17, (uint64_t)v36, &qword_1E945C0D0);
    return sub_19E5E7C14((uint64_t)v36, a4, &qword_1E945C0D0);
  }
  uint64_t v16 = a2;
  swift_bridgeObjectRelease();
  unint64_t v9 = sub_19E5E7840(&v16);
  if ((v9 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  int v10 = v9;
  unint64_t v11 = *(void *)(v16 + 16);
  if (v11)
  {
    if (v11 > 8)
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v16 + 32 < (unint64_t)&v31[4] + 8 * v11 + 8 && (unint64_t)&v31[4] + 8 < v16 + 32 + 8 * v11) {
      goto LABEL_24;
    }
    memcpy((char *)&v31[4] + 8, (const void *)(v16 + 32), 8 * v11);
  }
  unint64_t v13 = *(void *)(a1 + 16);
  if (!v13)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v18 = *(_OWORD *)((char *)v31 + 8);
    long long v19 = *(_OWORD *)((char *)&v31[1] + 8);
    long long v20 = *(_OWORD *)((char *)&v31[2] + 8);
    long long v21 = *(_OWORD *)((char *)&v31[3] + 8);
    v17[0] = 0;
    v17[1] = v10;
    long long v22 = *(_OWORD *)((char *)&v31[4] + 8);
    long long v23 = *(_OWORD *)((char *)&v31[5] + 8);
    long long v24 = *(_OWORD *)((char *)&v31[6] + 8);
    long long v25 = *(_OWORD *)((char *)&v31[7] + 8);
    uint64_t v26 = 0;
    int v27 = a3;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v30 = 1065353216;
    sub_19E5E7CA0((uint64_t)v17);
    goto LABEL_5;
  }
  if (v13 > 8) {
LABEL_23:
  }
    __break(1u);
  uint64_t v14 = (char *)(a1 + 32);
  size_t v15 = 8 * v13;
  if (a1 + 32 >= (unint64_t)v31 + 8 * v13 + 8 || (char *)v31 + 8 >= &v14[v15])
  {
    memcpy((char *)v31 + 8, v14, v15);
    goto LABEL_20;
  }
LABEL_24:
  uint64_t result = sub_19EBF7278();
  __break(1u);
  return result;
}

uint64_t sub_19E5E7BF8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_19E5E7C14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

double sub_19E5E7C78(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x278], 8) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 176) = 1;
  return result;
}

uint64_t sub_19E5E7CA0(uint64_t result)
{
  *(unsigned char *)(result + 176) = 0;
  return result;
}

uint64_t sub_19E5E7CA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = a4;
  int64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    long long v21 = (void *)MEMORY[0x1E4FBC860];
    uint64_t result = sub_19E66F5D8(0, v10, 0);
    uint64_t v12 = v21;
    unint64_t v13 = (uint64_t *)(a3 + 32);
    do
    {
      uint64_t v15 = *v13++;
      uint64_t v14 = v15;
      if (v15 < 0)
      {
        __break(1u);
        return result;
      }
      unint64_t v17 = v21[2];
      unint64_t v16 = v21[3];
      if (v17 >= v16 >> 1) {
        uint64_t result = sub_19E66F5D8(v16 > 1, v17 + 1, 1);
      }
      v21[2] = v17 + 1;
      long long v18 = &v21[2 * v17];
      v18[4] = 0;
      v18[5] = v14;
      --v10;
    }
    while (v10);
    if (v21[4] == v21[5])
    {
LABEL_8:
      uint64_t result = 0;
      uint64_t v5 = a4;
      goto LABEL_17;
    }
    if (v17)
    {
      long long v19 = v21 + 7;
      while (*(v19 - 1) != *v19)
      {
        v19 += 2;
        if (!--v17) {
          goto LABEL_15;
        }
      }
      goto LABEL_8;
    }
LABEL_15:
    uint64_t result = sub_19E5D8B5C((uint64_t)v21);
    uint64_t v5 = a4;
  }
  else
  {
    uint64_t v12 = &unk_1EF0C66B0;
    if (qword_1EF0C66D0 == unk_1EF0C66D8) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = sub_19E5D8B5C((uint64_t)&unk_1EF0C66B0);
    }
  }
LABEL_17:
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = v5;
  a5[4] = v12;
  a5[5] = result;
  return result;
}

uint64_t sub_19E5E7E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = a4;
  int64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    long long v21 = (void *)MEMORY[0x1E4FBC860];
    uint64_t result = sub_19E66F5D8(0, v10, 0);
    uint64_t v12 = v21;
    unint64_t v13 = (uint64_t *)(a3 + 32);
    do
    {
      uint64_t v15 = *v13++;
      uint64_t v14 = v15;
      if (v15 < 0)
      {
        __break(1u);
        return result;
      }
      unint64_t v17 = v21[2];
      unint64_t v16 = v21[3];
      if (v17 >= v16 >> 1) {
        uint64_t result = sub_19E66F5D8(v16 > 1, v17 + 1, 1);
      }
      v21[2] = v17 + 1;
      long long v18 = &v21[2 * v17];
      v18[4] = 0;
      v18[5] = v14;
      --v10;
    }
    while (v10);
    if (v21[4] == v21[5])
    {
LABEL_8:
      uint64_t result = 0;
      uint64_t v5 = a4;
      goto LABEL_17;
    }
    if (v17)
    {
      long long v19 = v21 + 7;
      while (*(v19 - 1) != *v19)
      {
        v19 += 2;
        if (!--v17) {
          goto LABEL_15;
        }
      }
      goto LABEL_8;
    }
LABEL_15:
    uint64_t result = sub_19E5D8B5C((uint64_t)v21);
    uint64_t v5 = a4;
  }
  else
  {
    uint64_t v12 = &unk_1EF0C66E0;
    if (qword_1EF0C6700 == unk_1EF0C6708) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = sub_19E5D8B5C((uint64_t)&unk_1EF0C66E0);
    }
  }
LABEL_17:
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = v5;
  a5[4] = v12;
  a5[5] = result;
  return result;
}

uint64_t sub_19E5E7F80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = a4;
  int64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    long long v21 = (void *)MEMORY[0x1E4FBC860];
    uint64_t result = sub_19E66F5D8(0, v10, 0);
    uint64_t v12 = v21;
    unint64_t v13 = (uint64_t *)(a3 + 32);
    do
    {
      uint64_t v15 = *v13++;
      uint64_t v14 = v15;
      if (v15 < 0)
      {
        __break(1u);
        return result;
      }
      unint64_t v17 = v21[2];
      unint64_t v16 = v21[3];
      if (v17 >= v16 >> 1) {
        uint64_t result = sub_19E66F5D8(v16 > 1, v17 + 1, 1);
      }
      v21[2] = v17 + 1;
      long long v18 = &v21[2 * v17];
      v18[4] = 0;
      v18[5] = v14;
      --v10;
    }
    while (v10);
    if (v21[4] == v21[5])
    {
LABEL_8:
      uint64_t result = 0;
      uint64_t v5 = a4;
      goto LABEL_17;
    }
    if (v17)
    {
      long long v19 = v21 + 7;
      while (*(v19 - 1) != *v19)
      {
        v19 += 2;
        if (!--v17) {
          goto LABEL_15;
        }
      }
      goto LABEL_8;
    }
LABEL_15:
    uint64_t result = sub_19E5D8B5C((uint64_t)v21);
    uint64_t v5 = a4;
  }
  else
  {
    uint64_t v12 = &unk_1EF0C6770;
    if (qword_1EF0C6790 == unk_1EF0C6798) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = sub_19E5D8B5C((uint64_t)&unk_1EF0C6770);
    }
  }
LABEL_17:
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = v5;
  a5[4] = v12;
  a5[5] = result;
  return result;
}

uint64_t sub_19E5E80EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = a4;
  int64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    long long v21 = (void *)MEMORY[0x1E4FBC860];
    uint64_t result = sub_19E66F5D8(0, v10, 0);
    uint64_t v12 = v21;
    unint64_t v13 = (uint64_t *)(a3 + 32);
    do
    {
      uint64_t v15 = *v13++;
      uint64_t v14 = v15;
      if (v15 < 0)
      {
        __break(1u);
        return result;
      }
      unint64_t v17 = v21[2];
      unint64_t v16 = v21[3];
      if (v17 >= v16 >> 1) {
        uint64_t result = sub_19E66F5D8(v16 > 1, v17 + 1, 1);
      }
      v21[2] = v17 + 1;
      long long v18 = &v21[2 * v17];
      v18[4] = 0;
      v18[5] = v14;
      --v10;
    }
    while (v10);
    if (v21[4] == v21[5])
    {
LABEL_8:
      uint64_t result = 0;
      uint64_t v5 = a4;
      goto LABEL_17;
    }
    if (v17)
    {
      long long v19 = v21 + 7;
      while (*(v19 - 1) != *v19)
      {
        v19 += 2;
        if (!--v17) {
          goto LABEL_15;
        }
      }
      goto LABEL_8;
    }
LABEL_15:
    uint64_t result = sub_19E5D8B5C((uint64_t)v21);
    uint64_t v5 = a4;
  }
  else
  {
    uint64_t v12 = &unk_1EF0C6740;
    if (qword_1EF0C6760 == unk_1EF0C6768) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = sub_19E5D8B5C((uint64_t)&unk_1EF0C6740);
    }
  }
LABEL_17:
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = v5;
  a5[4] = v12;
  a5[5] = result;
  return result;
}

id sub_19E5E8258(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (!v1) {
    return (id)v2;
  }
  uint64_t v3 = a1;
  uint64_t v28 = MEMORY[0x1E4FBC860];
  sub_19E66F6E8(0, v1, 0);
  uint64_t v2 = v28;
  id result = (id)sub_19E5F4768(v3);
  uint64_t v6 = (uint64_t)result;
  uint64_t v7 = 0;
  uint64_t v8 = v3 + 64;
  uint64_t v23 = v3 + 80;
  int64_t v24 = v1;
  int v25 = v5;
  uint64_t v26 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(v3 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_24;
    }
    double v12 = *(double *)(*(void *)(v3 + 56) + 8 * v6);
    id v27 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(*(void *)(v3 + 48) + 8 * v6));
    id result = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v12);
    id v13 = result;
    uint64_t v14 = v3;
    unint64_t v16 = *(void *)(v28 + 16);
    unint64_t v15 = *(void *)(v28 + 24);
    if (v16 >= v15 >> 1) {
      id result = (id)sub_19E66F6E8(v15 > 1, v16 + 1, 1);
    }
    *(void *)(v28 + 16) = v16 + 1;
    uint64_t v17 = v28 + 16 * v16;
    *(void *)(v17 + 32) = v27;
    *(void *)(v17 + 40) = v13;
    int64_t v9 = 1 << *(unsigned char *)(v14 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = v26;
    uint64_t v18 = *(void *)(v26 + 8 * v11);
    if ((v18 & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    uint64_t v3 = v14;
    int v5 = v25;
    if (*(_DWORD *)(v14 + 36) != v25) {
      goto LABEL_27;
    }
    unint64_t v19 = v18 & (-2 << (v6 & 0x3F));
    if (v19)
    {
      int64_t v9 = __clz(__rbit64(v19)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v24;
    }
    else
    {
      unint64_t v20 = v11 + 1;
      unint64_t v21 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v24;
      if (v11 + 1 < v21)
      {
        unint64_t v22 = *(void *)(v26 + 8 * v20);
        if (v22)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v11)
          {
            unint64_t v22 = *(void *)(v23 + 8 * v11++);
            if (v22)
            {
              unint64_t v20 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    uint64_t v6 = v9;
    if (v7 == v10) {
      return (id)v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_19E5E84A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  Objectuint64_t Type = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  void v11[2] = sub_19E5F6854;
  v11[3] = &v12;
  v11[4] = v7;
  void v11[5] = v8;
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, unsigned char *@<X8>), void *, void, uint64_t, uint64_t))(a4 + 32))(&v15, sub_19E5F6884, v11, MEMORY[0x1E4FBB390], ObjectType, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v4) {
    char v9 = v15;
  }
  return v9 & 1;
}

uint64_t sub_19E5E85BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  Objectuint64_t Type = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  void v11[2] = sub_19E5F67BC;
  v11[3] = &v12;
  v11[4] = v7;
  void v11[5] = v8;
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, unsigned char *@<X8>), void *, void, uint64_t, uint64_t))(a4 + 32))(&v15, sub_19E5F66A8, v11, MEMORY[0x1E4FBB390], ObjectType, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v4) {
    char v9 = v15;
  }
  return v9 & 1;
}

uint64_t sub_19E5E86D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  Objectuint64_t Type = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  void v11[2] = sub_19E5F66F0;
  v11[3] = &v12;
  v11[4] = v7;
  void v11[5] = v8;
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, unsigned char *@<X8>), void *, void, uint64_t, uint64_t))(a4 + 32))(&v15, sub_19E5F6720, v11, MEMORY[0x1E4FBB390], ObjectType, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v4) {
    char v9 = v15;
  }
  return v9 & 1;
}

uint64_t sub_19E5E87E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  Objectuint64_t Type = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  void v11[2] = sub_19E5F6678;
  v11[3] = &v12;
  v11[4] = v7;
  void v11[5] = v8;
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, unsigned char *@<X8>), void *, void, uint64_t, uint64_t))(a4 + 32))(&v15, sub_19E5F66A8, v11, MEMORY[0x1E4FBB390], ObjectType, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v4) {
    char v9 = v15;
  }
  return v9 & 1;
}

uint64_t sub_19E5E88F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v9)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), void *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t result;
  void v12[6];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v14 = a1;
  uint64_t v15 = a2;
  Objectuint64_t Type = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  _OWORD v12[2] = sub_19E5F64CC;
  _OWORD v12[3] = &v13;
  v12[4] = v7;
  v12[5] = v8;
  char v9 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), void *, uint64_t, uint64_t, uint64_t))(a4 + 32);
  int64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C1B0);
  v9(&v16, sub_19E5F64FC, v12, v10, ObjectType, a4);
  swift_bridgeObjectRelease();
  id result = swift_bridgeObjectRelease();
  if (!v4) {
    return v16;
  }
  return result;
}

uint64_t sub_19E5E8A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v9)(uint64_t *__return_ptr, void *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, void *@<X8>), void *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t result;
  void v12[6];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v14 = a1;
  uint64_t v15 = a2;
  Objectuint64_t Type = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  _OWORD v12[2] = sub_19E5F6468;
  _OWORD v12[3] = &v13;
  v12[4] = v7;
  v12[5] = v8;
  char v9 = *(void (**)(uint64_t *__return_ptr, void *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, void *@<X8>), void *, uint64_t, uint64_t, uint64_t))(a4 + 32);
  int64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C1A8);
  v9(&v16, sub_19E5F638C, v12, v10, ObjectType, a4);
  swift_bridgeObjectRelease();
  id result = swift_bridgeObjectRelease();
  if (!v4) {
    return v16;
  }
  return result;
}

uint64_t sub_19E5E8B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v9)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), void *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t result;
  void v12[6];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v14 = a1;
  uint64_t v15 = a2;
  Objectuint64_t Type = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  _OWORD v12[2] = sub_19E5F63D0;
  _OWORD v12[3] = &v13;
  v12[4] = v7;
  v12[5] = v8;
  char v9 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), void *, uint64_t, uint64_t, uint64_t))(a4 + 32);
  int64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C1A0);
  v9(&v16, sub_19E5F6400, v12, v10, ObjectType, a4);
  swift_bridgeObjectRelease();
  id result = swift_bridgeObjectRelease();
  if (!v4) {
    return v16;
  }
  return result;
}

uint64_t sub_19E5E8C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v9)(uint64_t *__return_ptr, void *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, void *@<X8>), void *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t result;
  void v12[6];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v14 = a1;
  uint64_t v15 = a2;
  Objectuint64_t Type = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  _OWORD v12[2] = sub_19E5F635C;
  _OWORD v12[3] = &v13;
  v12[4] = v7;
  v12[5] = v8;
  char v9 = *(void (**)(uint64_t *__return_ptr, void *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, void *@<X8>), void *, uint64_t, uint64_t, uint64_t))(a4 + 32);
  int64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C198);
  v9(&v16, sub_19E5F638C, v12, v10, ObjectType, a4);
  swift_bridgeObjectRelease();
  id result = swift_bridgeObjectRelease();
  if (!v4) {
    return v16;
  }
  return result;
}

uint64_t sub_19E5E8D78@<X0>(id a1@<X0>, size_t *a2@<X8>)
{
  uint64_t v6 = sub_19EBF6388();
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v60 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  char v9 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v57 = (uint64_t (**)(uint64_t, uint64_t))((char *)v55 - v11);
  MEMORY[0x1F4188790](v10);
  uint64_t v58 = (uint64_t (**)(uint64_t, uint64_t))((char *)v55 - v12);
  if (objc_msgSend(a1, sel_dataType) == (id)65600)
  {
    uint64_t v56 = v9;
    id v13 = objc_msgSend(a1, sel_shape);
    unint64_t v2 = sub_19E5F47F0();
    unint64_t v3 = sub_19EBF68E8();

    if (!(v3 >> 62))
    {
      uint64_t v14 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_19EBF7228();
  swift_bridgeObjectRelease();
LABEL_4:
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v61 = a2;
  id v62 = a1;
  if (v14)
  {
    uint64_t v63 = MEMORY[0x1E4FBC860];
    uint64_t result = sub_19E66F600(0, v14 & ~(v14 >> 63), 0);
    if (v14 < 0)
    {
      __break(1u);
      goto LABEL_38;
    }
    v55[1] = v2;
    uint64_t v17 = 0;
    uint64_t v18 = v63;
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v19 = (id)MEMORY[0x19F3BF970](v17, v3);
      }
      else {
        id v19 = *(id *)(v3 + 8 * v17 + 32);
      }
      unint64_t v20 = v19;
      id v21 = objc_msgSend(v19, sel_integerValue);

      uint64_t v63 = v18;
      unint64_t v23 = *(void *)(v18 + 16);
      unint64_t v22 = *(void *)(v18 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_19E66F600(v22 > 1, v23 + 1, 1);
        uint64_t v18 = v63;
      }
      ++v17;
      *(void *)(v18 + 16) = v23 + 1;
      *(void *)(v18 + 8 * v23 + 32) = v21;
    }
    while (v14 != v17);
    swift_bridgeObjectRelease();
    a1 = v62;
    uint64_t v15 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = MEMORY[0x1E4FBC860];
  }
  id v24 = objc_msgSend(a1, sel_strides);
  unint64_t v25 = sub_19EBF68E8();

  if (v25 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_19EBF7228();
    swift_bridgeObjectRelease();
    if (v26)
    {
LABEL_17:
      uint64_t v63 = v15;
      uint64_t result = sub_19E66F600(0, v26 & ~(v26 >> 63), 0);
      if ((v26 & 0x8000000000000000) == 0)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v63;
        do
        {
          if ((v25 & 0xC000000000000001) != 0) {
            id v29 = (id)MEMORY[0x19F3BF970](v27, v25);
          }
          else {
            id v29 = *(id *)(v25 + 8 * v27 + 32);
          }
          uint64_t v30 = v29;
          id v31 = objc_msgSend(v29, sel_integerValue);

          uint64_t v63 = v28;
          unint64_t v33 = *(void *)(v28 + 16);
          unint64_t v32 = *(void *)(v28 + 24);
          if (v33 >= v32 >> 1)
          {
            sub_19E66F600(v32 > 1, v33 + 1, 1);
            uint64_t v28 = v63;
          }
          ++v27;
          *(void *)(v28 + 16) = v33 + 1;
          *(void *)(v28 + 8 * v33 + 32) = v31;
        }
        while (v26 != v27);
        swift_bridgeObjectRelease();
        a1 = v62;
        goto LABEL_30;
      }
LABEL_38:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v26) {
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v28 = MEMORY[0x1E4FBC860];
LABEL_30:
  uint64_t v34 = (__CVBuffer *)objc_msgSend(a1, sel_pixelBuffer);
  if (v34)
  {
    int v35 = v34;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE50);
    swift_allocObject();
    size_t v36 = sub_19E6728F0(v35, v18, 0);

    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v37 = &off_1EF0C82D0;
  }
  else
  {
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = a1;
    long long v40 = v58;
    uint64_t v39 = v59;
    *uint64_t v58 = sub_19E5F69A0;
    v40[1] = (uint64_t (*)(uint64_t, uint64_t))v38;
    uint64_t v41 = v60;
    (*(void (**)(uint64_t (**)(uint64_t, uint64_t), void, uint64_t))(v39 + 104))(v40, *MEMORY[0x1E4F27758], v60);
    id v62 = a1;
    id v42 = objc_msgSend(v62, sel_bytes);
    uint64_t v43 = *(void (**)(char *, uint64_t (**)(uint64_t, uint64_t), uint64_t))(v39 + 16);
    uint64_t v44 = v57;
    v43((char *)v57, v40, v41);
    uint64_t v45 = sub_19E5EF008(v18, v28);
    uint64_t v46 = v56;
    v43(v56, v44, v41);
    sub_19EBF6378();
    if (v45)
    {
      sub_19EBF6318();
      swift_allocObject();
      swift_retain();
      uint64_t v47 = sub_19EBF62D8();
      uint64_t v48 = sub_19E672650(v47, v45);
      unint64_t v50 = v49;
      swift_release();
    }
    else
    {
      uint64_t v51 = (void (*)(id, void))sub_19EBF6378();
      v51(v42, 0);
      swift_release();
      swift_release();
      uint64_t v48 = 0;
      unint64_t v50 = 0xC000000000000000;
    }
    uint64_t v52 = v60;
    uint64_t v53 = *(void (**)(char *, uint64_t))(v59 + 8);
    v53(v46, v60);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C1B8);
    swift_allocObject();
    size_t v36 = (size_t)sub_19E5F32D0(v48, v50, v18, v28, sub_19E5EF008);
    v53((char *)v57, v52);

    uint64_t result = ((uint64_t (*)(void, uint64_t))v53)(v58, v52);
    uint64_t v37 = &off_1EF0C57A0;
  }
  uint64_t v54 = v61;
  size_t *v61 = v36;
  v54[1] = (size_t)v37;
  return result;
}

uint64_t sub_19E5E93D8@<X0>(id a1@<X0>, size_t *a2@<X8>)
{
  uint64_t v6 = sub_19EBF6388();
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v60 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  char v9 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v57 = (uint64_t (**)(uint64_t, uint64_t))((char *)v55 - v11);
  MEMORY[0x1F4188790](v10);
  uint64_t v58 = (uint64_t (**)(uint64_t, uint64_t))((char *)v55 - v12);
  if (objc_msgSend(a1, sel_dataType) == (id)65568)
  {
    uint64_t v56 = v9;
    id v13 = objc_msgSend(a1, sel_shape);
    unint64_t v2 = sub_19E5F47F0();
    unint64_t v3 = sub_19EBF68E8();

    if (!(v3 >> 62))
    {
      uint64_t v14 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_19EBF7228();
  swift_bridgeObjectRelease();
LABEL_4:
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v61 = a2;
  id v62 = a1;
  if (v14)
  {
    uint64_t v63 = MEMORY[0x1E4FBC860];
    uint64_t result = sub_19E66F600(0, v14 & ~(v14 >> 63), 0);
    if (v14 < 0)
    {
      __break(1u);
      goto LABEL_38;
    }
    v55[1] = v2;
    uint64_t v17 = 0;
    uint64_t v18 = v63;
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v19 = (id)MEMORY[0x19F3BF970](v17, v3);
      }
      else {
        id v19 = *(id *)(v3 + 8 * v17 + 32);
      }
      unint64_t v20 = v19;
      id v21 = objc_msgSend(v19, sel_integerValue);

      uint64_t v63 = v18;
      unint64_t v23 = *(void *)(v18 + 16);
      unint64_t v22 = *(void *)(v18 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_19E66F600(v22 > 1, v23 + 1, 1);
        uint64_t v18 = v63;
      }
      ++v17;
      *(void *)(v18 + 16) = v23 + 1;
      *(void *)(v18 + 8 * v23 + 32) = v21;
    }
    while (v14 != v17);
    swift_bridgeObjectRelease();
    a1 = v62;
    uint64_t v15 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = MEMORY[0x1E4FBC860];
  }
  id v24 = objc_msgSend(a1, sel_strides);
  unint64_t v25 = sub_19EBF68E8();

  if (v25 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_19EBF7228();
    swift_bridgeObjectRelease();
    if (v26)
    {
LABEL_17:
      uint64_t v63 = v15;
      uint64_t result = sub_19E66F600(0, v26 & ~(v26 >> 63), 0);
      if ((v26 & 0x8000000000000000) == 0)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v63;
        do
        {
          if ((v25 & 0xC000000000000001) != 0) {
            id v29 = (id)MEMORY[0x19F3BF970](v27, v25);
          }
          else {
            id v29 = *(id *)(v25 + 8 * v27 + 32);
          }
          uint64_t v30 = v29;
          id v31 = objc_msgSend(v29, sel_integerValue);

          uint64_t v63 = v28;
          unint64_t v33 = *(void *)(v28 + 16);
          unint64_t v32 = *(void *)(v28 + 24);
          if (v33 >= v32 >> 1)
          {
            sub_19E66F600(v32 > 1, v33 + 1, 1);
            uint64_t v28 = v63;
          }
          ++v27;
          *(void *)(v28 + 16) = v33 + 1;
          *(void *)(v28 + 8 * v33 + 32) = v31;
        }
        while (v26 != v27);
        swift_bridgeObjectRelease();
        a1 = v62;
        goto LABEL_30;
      }
LABEL_38:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v26) {
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v28 = MEMORY[0x1E4FBC860];
LABEL_30:
  uint64_t v34 = (__CVBuffer *)objc_msgSend(a1, sel_pixelBuffer);
  if (v34)
  {
    int v35 = v34;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE50);
    swift_allocObject();
    size_t v36 = sub_19E6728F0(v35, v18, 0);

    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v37 = &off_1EF0C82D0;
  }
  else
  {
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = a1;
    long long v40 = v58;
    uint64_t v39 = v59;
    *uint64_t v58 = sub_19E5F69C4;
    v40[1] = (uint64_t (*)(uint64_t, uint64_t))v38;
    uint64_t v41 = v60;
    (*(void (**)(uint64_t (**)(uint64_t, uint64_t), void, uint64_t))(v39 + 104))(v40, *MEMORY[0x1E4F27758], v60);
    id v62 = a1;
    id v42 = objc_msgSend(v62, sel_bytes);
    uint64_t v43 = *(void (**)(char *, uint64_t (**)(uint64_t, uint64_t), uint64_t))(v39 + 16);
    uint64_t v44 = v57;
    v43((char *)v57, v40, v41);
    uint64_t v45 = sub_19E5EEE60(v18, v28);
    uint64_t v46 = v56;
    v43(v56, v44, v41);
    sub_19EBF6378();
    if (v45)
    {
      sub_19EBF6318();
      swift_allocObject();
      swift_retain();
      uint64_t v47 = sub_19EBF62D8();
      uint64_t v48 = sub_19E672650(v47, v45);
      unint64_t v50 = v49;
      swift_release();
    }
    else
    {
      uint64_t v51 = (void (*)(id, void))sub_19EBF6378();
      v51(v42, 0);
      swift_release();
      swift_release();
      uint64_t v48 = 0;
      unint64_t v50 = 0xC000000000000000;
    }
    uint64_t v52 = v60;
    uint64_t v53 = *(void (**)(char *, uint64_t))(v59 + 8);
    v53(v46, v60);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C1C0);
    swift_allocObject();
    size_t v36 = (size_t)sub_19E5F33B0(v48, v50, v18, v28);
    v53((char *)v57, v52);

    uint64_t result = ((uint64_t (*)(void, uint64_t))v53)(v58, v52);
    uint64_t v37 = &off_1EF0C57A0;
  }
  uint64_t v54 = v61;
  size_t *v61 = v36;
  v54[1] = (size_t)v37;
  return result;
}

uint64_t sub_19E5E9A24@<X0>(id a1@<X0>, size_t *a2@<X8>)
{
  uint64_t v6 = sub_19EBF6388();
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v60 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  char v9 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v57 = (uint64_t (**)(uint64_t, uint64_t))((char *)v55 - v11);
  MEMORY[0x1F4188790](v10);
  uint64_t v58 = (uint64_t (**)(uint64_t, uint64_t))((char *)v55 - v12);
  if (objc_msgSend(a1, sel_dataType) == (id)65552)
  {
    uint64_t v56 = v9;
    id v13 = objc_msgSend(a1, sel_shape);
    unint64_t v2 = sub_19E5F47F0();
    unint64_t v3 = sub_19EBF68E8();

    if (!(v3 >> 62))
    {
      uint64_t v14 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_19EBF7228();
  swift_bridgeObjectRelease();
LABEL_4:
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v61 = a2;
  id v62 = a1;
  if (v14)
  {
    uint64_t v63 = MEMORY[0x1E4FBC860];
    uint64_t result = sub_19E66F600(0, v14 & ~(v14 >> 63), 0);
    if (v14 < 0)
    {
      __break(1u);
      goto LABEL_38;
    }
    v55[1] = v2;
    uint64_t v17 = 0;
    uint64_t v18 = v63;
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v19 = (id)MEMORY[0x19F3BF970](v17, v3);
      }
      else {
        id v19 = *(id *)(v3 + 8 * v17 + 32);
      }
      unint64_t v20 = v19;
      id v21 = objc_msgSend(v19, sel_integerValue);

      uint64_t v63 = v18;
      unint64_t v23 = *(void *)(v18 + 16);
      unint64_t v22 = *(void *)(v18 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_19E66F600(v22 > 1, v23 + 1, 1);
        uint64_t v18 = v63;
      }
      ++v17;
      *(void *)(v18 + 16) = v23 + 1;
      *(void *)(v18 + 8 * v23 + 32) = v21;
    }
    while (v14 != v17);
    swift_bridgeObjectRelease();
    a1 = v62;
    uint64_t v15 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = MEMORY[0x1E4FBC860];
  }
  id v24 = objc_msgSend(a1, sel_strides);
  unint64_t v25 = sub_19EBF68E8();

  if (v25 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_19EBF7228();
    swift_bridgeObjectRelease();
    if (v26)
    {
LABEL_17:
      uint64_t v63 = v15;
      uint64_t result = sub_19E66F600(0, v26 & ~(v26 >> 63), 0);
      if ((v26 & 0x8000000000000000) == 0)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v63;
        do
        {
          if ((v25 & 0xC000000000000001) != 0) {
            id v29 = (id)MEMORY[0x19F3BF970](v27, v25);
          }
          else {
            id v29 = *(id *)(v25 + 8 * v27 + 32);
          }
          uint64_t v30 = v29;
          id v31 = objc_msgSend(v29, sel_integerValue);

          uint64_t v63 = v28;
          unint64_t v33 = *(void *)(v28 + 16);
          unint64_t v32 = *(void *)(v28 + 24);
          if (v33 >= v32 >> 1)
          {
            sub_19E66F600(v32 > 1, v33 + 1, 1);
            uint64_t v28 = v63;
          }
          ++v27;
          *(void *)(v28 + 16) = v33 + 1;
          *(void *)(v28 + 8 * v33 + 32) = v31;
        }
        while (v26 != v27);
        swift_bridgeObjectRelease();
        a1 = v62;
        goto LABEL_30;
      }
LABEL_38:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v26) {
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v28 = MEMORY[0x1E4FBC860];
LABEL_30:
  uint64_t v34 = (__CVBuffer *)objc_msgSend(a1, sel_pixelBuffer);
  if (v34)
  {
    int v35 = v34;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE50);
    swift_allocObject();
    size_t v36 = sub_19E6728F0(v35, v18, 0);

    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v37 = &off_1EF0C82D0;
  }
  else
  {
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = a1;
    long long v40 = v58;
    uint64_t v39 = v59;
    *uint64_t v58 = sub_19E5F69C4;
    v40[1] = (uint64_t (*)(uint64_t, uint64_t))v38;
    uint64_t v41 = v60;
    (*(void (**)(uint64_t (**)(uint64_t, uint64_t), void, uint64_t))(v39 + 104))(v40, *MEMORY[0x1E4F27758], v60);
    id v62 = a1;
    id v42 = objc_msgSend(v62, sel_bytes);
    uint64_t v43 = *(void (**)(char *, uint64_t (**)(uint64_t, uint64_t), uint64_t))(v39 + 16);
    uint64_t v44 = v57;
    v43((char *)v57, v40, v41);
    uint64_t v45 = sub_19E5EECC0(v18, v28);
    uint64_t v46 = v56;
    v43(v56, v44, v41);
    sub_19EBF6378();
    if (v45)
    {
      sub_19EBF6318();
      swift_allocObject();
      swift_retain();
      uint64_t v47 = sub_19EBF62D8();
      uint64_t v48 = sub_19E672650(v47, v45);
      unint64_t v50 = v49;
      swift_release();
    }
    else
    {
      uint64_t v51 = (void (*)(id, void))sub_19EBF6378();
      v51(v42, 0);
      swift_release();
      swift_release();
      uint64_t v48 = 0;
      unint64_t v50 = 0xC000000000000000;
    }
    uint64_t v52 = v60;
    uint64_t v53 = *(void (**)(char *, uint64_t))(v59 + 8);
    v53(v46, v60);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C1C8);
    swift_allocObject();
    size_t v36 = (size_t)sub_19E5F32D0(v48, v50, v18, v28, sub_19E5EECC0);
    v53((char *)v57, v52);

    uint64_t result = ((uint64_t (*)(void, uint64_t))v53)(v58, v52);
    uint64_t v37 = &off_1EF0C57A0;
  }
  uint64_t v54 = v61;
  size_t *v61 = v36;
  v54[1] = (size_t)v37;
  return result;
}

uint64_t sub_19E5EA084@<X0>(id a1@<X0>, size_t *a2@<X8>)
{
  uint64_t v6 = sub_19EBF6388();
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v60 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  char v9 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v57 = (uint64_t (**)(uint64_t, uint64_t))((char *)v55 - v11);
  MEMORY[0x1F4188790](v10);
  uint64_t v58 = (uint64_t (**)(uint64_t, uint64_t))((char *)v55 - v12);
  if (objc_msgSend(a1, sel_dataType) == (id)131104)
  {
    uint64_t v56 = v9;
    id v13 = objc_msgSend(a1, sel_shape);
    unint64_t v2 = sub_19E5F47F0();
    unint64_t v3 = sub_19EBF68E8();

    if (!(v3 >> 62))
    {
      uint64_t v14 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_19EBF7228();
  swift_bridgeObjectRelease();
LABEL_4:
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v61 = a2;
  id v62 = a1;
  if (v14)
  {
    uint64_t v63 = MEMORY[0x1E4FBC860];
    uint64_t result = sub_19E66F600(0, v14 & ~(v14 >> 63), 0);
    if (v14 < 0)
    {
      __break(1u);
      goto LABEL_38;
    }
    v55[1] = v2;
    uint64_t v17 = 0;
    uint64_t v18 = v63;
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v19 = (id)MEMORY[0x19F3BF970](v17, v3);
      }
      else {
        id v19 = *(id *)(v3 + 8 * v17 + 32);
      }
      unint64_t v20 = v19;
      id v21 = objc_msgSend(v19, sel_integerValue);

      uint64_t v63 = v18;
      unint64_t v23 = *(void *)(v18 + 16);
      unint64_t v22 = *(void *)(v18 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_19E66F600(v22 > 1, v23 + 1, 1);
        uint64_t v18 = v63;
      }
      ++v17;
      *(void *)(v18 + 16) = v23 + 1;
      *(void *)(v18 + 8 * v23 + 32) = v21;
    }
    while (v14 != v17);
    swift_bridgeObjectRelease();
    a1 = v62;
    uint64_t v15 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = MEMORY[0x1E4FBC860];
  }
  id v24 = objc_msgSend(a1, sel_strides);
  unint64_t v25 = sub_19EBF68E8();

  if (v25 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_19EBF7228();
    swift_bridgeObjectRelease();
    if (v26)
    {
LABEL_17:
      uint64_t v63 = v15;
      uint64_t result = sub_19E66F600(0, v26 & ~(v26 >> 63), 0);
      if ((v26 & 0x8000000000000000) == 0)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v63;
        do
        {
          if ((v25 & 0xC000000000000001) != 0) {
            id v29 = (id)MEMORY[0x19F3BF970](v27, v25);
          }
          else {
            id v29 = *(id *)(v25 + 8 * v27 + 32);
          }
          uint64_t v30 = v29;
          id v31 = objc_msgSend(v29, sel_integerValue);

          uint64_t v63 = v28;
          unint64_t v33 = *(void *)(v28 + 16);
          unint64_t v32 = *(void *)(v28 + 24);
          if (v33 >= v32 >> 1)
          {
            sub_19E66F600(v32 > 1, v33 + 1, 1);
            uint64_t v28 = v63;
          }
          ++v27;
          *(void *)(v28 + 16) = v33 + 1;
          *(void *)(v28 + 8 * v33 + 32) = v31;
        }
        while (v26 != v27);
        swift_bridgeObjectRelease();
        a1 = v62;
        goto LABEL_30;
      }
LABEL_38:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v26) {
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v28 = MEMORY[0x1E4FBC860];
LABEL_30:
  uint64_t v34 = (__CVBuffer *)objc_msgSend(a1, sel_pixelBuffer);
  if (v34)
  {
    int v35 = v34;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE50);
    swift_allocObject();
    size_t v36 = sub_19E6728F0(v35, v18, 0);

    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v37 = &off_1EF0C82D0;
  }
  else
  {
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = a1;
    long long v40 = v58;
    uint64_t v39 = v59;
    *uint64_t v58 = sub_19E5F69C4;
    v40[1] = (uint64_t (*)(uint64_t, uint64_t))v38;
    uint64_t v41 = v60;
    (*(void (**)(uint64_t (**)(uint64_t, uint64_t), void, uint64_t))(v39 + 104))(v40, *MEMORY[0x1E4F27758], v60);
    id v62 = a1;
    id v42 = objc_msgSend(v62, sel_bytes);
    uint64_t v43 = *(void (**)(char *, uint64_t (**)(uint64_t, uint64_t), uint64_t))(v39 + 16);
    uint64_t v44 = v57;
    v43((char *)v57, v40, v41);
    uint64_t v45 = sub_19E5EEE60(v18, v28);
    uint64_t v46 = v56;
    v43(v56, v44, v41);
    sub_19EBF6378();
    if (v45)
    {
      sub_19EBF6318();
      swift_allocObject();
      swift_retain();
      uint64_t v47 = sub_19EBF62D8();
      uint64_t v48 = sub_19E672650(v47, v45);
      unint64_t v50 = v49;
      swift_release();
    }
    else
    {
      uint64_t v51 = (void (*)(id, void))sub_19EBF6378();
      v51(v42, 0);
      swift_release();
      swift_release();
      uint64_t v48 = 0;
      unint64_t v50 = 0xC000000000000000;
    }
    uint64_t v52 = v60;
    uint64_t v53 = *(void (**)(char *, uint64_t))(v59 + 8);
    v53(v46, v60);
    __swift_instantiateConcreteTypeFromMangledName(qword_1E945C1D0);
    swift_allocObject();
    size_t v36 = (size_t)sub_19E5F33B0(v48, v50, v18, v28);
    v53((char *)v57, v52);

    uint64_t result = ((uint64_t (*)(void, uint64_t))v53)(v58, v52);
    uint64_t v37 = &off_1EF0C57A0;
  }
  uint64_t v54 = v61;
  size_t *v61 = v36;
  v54[1] = (size_t)v37;
  return result;
}

uint64_t sub_19E5EA6D0(double **a1)
{
  char v75 = *a1;
  int64_t v1 = a1[3];
  uint64_t v78 = a1[2];
  unint64_t v3 = a1[4];
  unint64_t v2 = a1[5];
  uint64_t v74 = a1[6];
  uint64_t v4 = a1[10];
  uint64_t v76 = a1[8];
  unint64_t v77 = a1[9];
  int v5 = a1[11];
  uint64_t result = sub_19E5F68E0((uint64_t)a1);
  uint64_t v71 = v3 + 4;
  uint64_t v72 = v4;
  long long v73 = v3;
  uint64_t v68 = v3 + 1;
  uint64_t v69 = v4 + 4;
  uint64_t v67 = v4 + 1;
  uint64_t v70 = v1;
  while (1)
  {
    if (!v2)
    {
LABEL_98:
      uint64_t v66 = 1;
LABEL_100:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v66;
    }
    uint64_t v10 = (unint64_t *)(v2 + 2);
    unint64_t v9 = *((void *)v2 + 2);
    if (v9)
    {
      uint64_t v11 = v9 - 1;
      double v12 = v2[v9 + 3];
      BOOL v13 = __OFADD__(*(void *)&v12, 1);
      uint64_t v14 = *(void *)&v12 + 1;
      if (v13) {
        goto LABEL_117;
      }
      unint64_t v15 = *((void *)v73 + 2);
      if (v9 > v15) {
        goto LABEL_118;
      }
      if (v14 >= *(void *)&v71[2 * v11 + 1])
      {
        uint64_t result = swift_bridgeObjectRetain();
        if (v9 != 1)
        {
          uint64_t v17 = (int64_t *)&v68[2 * v9];
          unint64_t v18 = v9;
          unint64_t v16 = v2;
          while (v16)
          {
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_19E612754(v16);
              unint64_t v16 = (double *)result;
            }
            unint64_t v19 = v18 - 1;
            if ((int64_t)(v18 - 1) >= *((void *)v16 + 2))
            {
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
              goto LABEL_109;
            }
            v16[v18 + 3] = 0.0;
            uint64_t v11 = v18 - 2;
            if ((uint64_t)(v18 - 2) >= (uint64_t)*v10) {
              goto LABEL_102;
            }
            unint64_t v20 = v10[v18];
            BOOL v13 = __OFADD__(v20, 1);
            int64_t v21 = v20 + 1;
            if (v13) {
              goto LABEL_103;
            }
            if (v11 >= (uint64_t)v15) {
              goto LABEL_104;
            }
            if (v21 < *v17)
            {
              int64_t v1 = v70;
              goto LABEL_25;
            }
            v17 -= 2;
            --v18;
            if (v19 == 1) {
              goto LABEL_23;
            }
          }
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
LABEL_23:
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v16 = 0;
        int64_t v1 = v70;
      }
      else
      {
        swift_bridgeObjectRetain();
        unint64_t v16 = v2;
LABEL_25:
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_19E612754(v16);
          unint64_t v16 = (double *)result;
        }
        if (v11 >= *((void *)v16 + 2)) {
          goto LABEL_123;
        }
        double v22 = v16[v11 + 4];
        BOOL v13 = __OFADD__(*(void *)&v22, 1);
        *(void *)&double v23 = *(void *)&v22 + 1;
        if (v13) {
          goto LABEL_124;
        }
        v16[v11 + 4] = v23;
      }
    }
    else
    {
      uint64_t result = swift_bridgeObjectRetain();
      unint64_t v16 = v2;
    }
    if (*((void *)v78 + 2))
    {
      unint64_t v24 = *v10;
      unint64_t v25 = *((void *)v1 + 2);
      if (v25 < *v10) {
        goto LABEL_119;
      }
      if (v9)
      {
        if (!v24) {
          goto LABEL_127;
        }
        uint64_t v26 = *((void *)v2 + 4);
        uint64_t v27 = *((void *)v1 + 4);
        uint64_t v28 = v26 * v27;
        if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63) {
          goto LABEL_128;
        }
        if (v9 != 1)
        {
          if (v24 < 2) {
            goto LABEL_131;
          }
          if (v25 != 1)
          {
            if (v25 <= 1) {
              uint64_t v29 = 1;
            }
            else {
              uint64_t v29 = *((void *)v1 + 2);
            }
            unint64_t v30 = 2 - v24;
            uint64_t v31 = 1 - v29;
            unint64_t v32 = 1 - v25;
            uint64_t v33 = 5;
            while (v31 + v33 != 5)
            {
              double v34 = v2[v33];
              double v35 = v1[v33];
              uint64_t v36 = *(void *)&v34 * *(void *)&v35;
              if ((unsigned __int128)(*(uint64_t *)&v34 * (__int128)*(uint64_t *)&v35) >> 64 != (uint64_t)(*(void *)&v34 * *(void *)&v35) >> 63) {
                goto LABEL_110;
              }
              BOOL v13 = __OFADD__(v28, v36);
              v28 += v36;
              if (v13) {
                goto LABEL_111;
              }
              if (2 - v9 + v33 == 5) {
                goto LABEL_52;
              }
              if (v30 + v33 == 5) {
                goto LABEL_112;
              }
              ++v33;
              if (v32 + v33 == 5) {
                goto LABEL_52;
              }
            }
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
            goto LABEL_133;
          }
        }
      }
      else
      {
        uint64_t v28 = 0;
      }
LABEL_52:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v37 = &v75[v28];
      if (!v5) {
        goto LABEL_98;
      }
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v37 = v75;
      if (!v5) {
        goto LABEL_98;
      }
    }
    double v38 = *v37;
    uint64_t v39 = (unint64_t *)(v5 + 2);
    unint64_t v40 = *((void *)v5 + 2);
    if (v40) {
      break;
    }
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v45 = v5;
LABEL_71:
    uint64_t v51 = v77;
LABEL_78:
    if (*((void *)v76 + 2))
    {
      unint64_t v54 = *v39;
      unint64_t v55 = *((void *)v51 + 2);
      if (v55 < *v39) {
        goto LABEL_122;
      }
      if (v40)
      {
        if (!v54) {
          goto LABEL_129;
        }
        uint64_t v56 = *((void *)v5 + 4);
        uint64_t v57 = *((void *)v51 + 4);
        uint64_t v7 = v56 * v57;
        if ((unsigned __int128)(v56 * (__int128)v57) >> 64 != (v56 * v57) >> 63) {
          goto LABEL_130;
        }
        if (v40 != 1)
        {
          if (v54 < 2) {
            goto LABEL_132;
          }
          if (v55 != 1)
          {
            if (v55 <= 1) {
              uint64_t v58 = 1;
            }
            else {
              uint64_t v58 = *((void *)v51 + 2);
            }
            unint64_t v59 = 2 - v54;
            uint64_t v60 = 1 - v58;
            unint64_t v61 = 1 - v55;
            uint64_t v62 = 5;
            while (v60 + v62 != 5)
            {
              double v63 = v5[v62];
              double v64 = v51[v62];
              uint64_t v65 = *(void *)&v63 * *(void *)&v64;
              if ((unsigned __int128)(*(uint64_t *)&v63 * (__int128)*(uint64_t *)&v64) >> 64 != (uint64_t)(*(void *)&v63 * *(void *)&v64) >> 63) {
                goto LABEL_114;
              }
              BOOL v13 = __OFADD__(v7, v65);
              v7 += v65;
              if (v13) {
                goto LABEL_115;
              }
              if (2 - v40 + v62 == 5) {
                goto LABEL_3;
              }
              if (v59 + v62 == 5) {
                goto LABEL_116;
              }
              ++v62;
              if (v61 + v62 == 5) {
                goto LABEL_3;
              }
            }
            goto LABEL_113;
          }
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
LABEL_3:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = &v74[v7];
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = v74;
    }
    unint64_t v2 = v16;
    int v5 = v45;
    if (v38 != *v8)
    {
      uint64_t v66 = 0;
      goto LABEL_100;
    }
  }
  uint64_t v41 = v40 - 1;
  double v42 = v5[v40 + 3];
  BOOL v13 = __OFADD__(*(void *)&v42, 1);
  uint64_t v43 = *(void *)&v42 + 1;
  if (v13) {
    goto LABEL_120;
  }
  unint64_t v44 = *((void *)v72 + 2);
  if (v40 > v44) {
    goto LABEL_121;
  }
  if (v43 < *(void *)&v69[2 * v41 + 1])
  {
    swift_bridgeObjectRetain();
    uint64_t v45 = v5;
LABEL_73:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_19E612754(v45);
      uint64_t v45 = (double *)result;
    }
    uint64_t v51 = v77;
    if (v41 >= *((void *)v45 + 2)) {
      goto LABEL_125;
    }
    double v52 = v45[v41 + 4];
    BOOL v13 = __OFADD__(*(void *)&v52, 1);
    *(void *)&double v53 = *(void *)&v52 + 1;
    if (v13) {
      goto LABEL_126;
    }
    v45[v41 + 4] = v53;
    goto LABEL_78;
  }
  uint64_t result = swift_bridgeObjectRetain();
  if (v40 == 1)
  {
LABEL_70:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v45 = 0;
    int64_t v1 = v70;
    goto LABEL_71;
  }
  uint64_t v46 = (int64_t *)&v67[2 * v40];
  unint64_t v47 = v40;
  uint64_t v45 = v5;
  while (v45)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_19E612754(v45);
      uint64_t v45 = (double *)result;
    }
    unint64_t v48 = v47 - 1;
    if ((int64_t)(v47 - 1) >= *((void *)v45 + 2)) {
      goto LABEL_105;
    }
    v45[v47 + 3] = 0.0;
    uint64_t v41 = v47 - 2;
    if ((uint64_t)(v47 - 2) >= (uint64_t)*v39) {
      goto LABEL_106;
    }
    unint64_t v49 = v39[v47];
    BOOL v13 = __OFADD__(v49, 1);
    int64_t v50 = v49 + 1;
    if (v13) {
      goto LABEL_107;
    }
    if (v41 >= (uint64_t)v44) {
      goto LABEL_108;
    }
    if (v50 < *v46)
    {
      int64_t v1 = v70;
      goto LABEL_73;
    }
    v46 -= 2;
    --v47;
    if (v48 == 1) {
      goto LABEL_70;
    }
  }
LABEL_134:
  __break(1u);
  return result;
}

uint64_t sub_19E5EAD10(float **a1)
{
  char v75 = *a1;
  int64_t v1 = a1[3];
  uint64_t v78 = a1[2];
  unint64_t v3 = a1[4];
  unint64_t v2 = a1[5];
  uint64_t v74 = a1[6];
  uint64_t v4 = a1[10];
  uint64_t v76 = a1[8];
  unint64_t v77 = a1[9];
  int v5 = a1[11];
  uint64_t result = sub_19E5F68E0((uint64_t)a1);
  uint64_t v71 = v3 + 8;
  uint64_t v72 = v4;
  long long v73 = v3;
  uint64_t v68 = v3 + 2;
  uint64_t v69 = v4 + 8;
  uint64_t v67 = v4 + 2;
  uint64_t v70 = v1;
  while (1)
  {
    if (!v2)
    {
LABEL_98:
      uint64_t v66 = 1;
LABEL_100:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v66;
    }
    uint64_t v10 = (unint64_t *)(v2 + 4);
    unint64_t v9 = *((void *)v2 + 2);
    if (v9)
    {
      uint64_t v11 = v9 - 1;
      uint64_t v12 = *(void *)&v2[2 * v9 + 6];
      BOOL v13 = __OFADD__(v12, 1);
      uint64_t v14 = v12 + 1;
      if (v13) {
        goto LABEL_117;
      }
      unint64_t v15 = *((void *)v73 + 2);
      if (v9 > v15) {
        goto LABEL_118;
      }
      if (v14 >= *(void *)&v71[4 * v11 + 2])
      {
        uint64_t result = swift_bridgeObjectRetain();
        if (v9 != 1)
        {
          uint64_t v17 = (int64_t *)&v68[4 * v9];
          unint64_t v18 = v9;
          unint64_t v16 = v2;
          while (v16)
          {
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_19E612754(v16);
              unint64_t v16 = (float *)result;
            }
            unint64_t v19 = v18 - 1;
            if ((int64_t)(v18 - 1) >= *((void *)v16 + 2))
            {
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
              goto LABEL_109;
            }
            *(void *)&v16[2 * v18 + 6] = 0;
            uint64_t v11 = v18 - 2;
            if ((uint64_t)(v18 - 2) >= (uint64_t)*v10) {
              goto LABEL_102;
            }
            unint64_t v20 = v10[v18];
            BOOL v13 = __OFADD__(v20, 1);
            int64_t v21 = v20 + 1;
            if (v13) {
              goto LABEL_103;
            }
            if (v11 >= (uint64_t)v15) {
              goto LABEL_104;
            }
            if (v21 < *v17)
            {
              int64_t v1 = v70;
              goto LABEL_25;
            }
            v17 -= 2;
            --v18;
            if (v19 == 1) {
              goto LABEL_23;
            }
          }
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
LABEL_23:
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v16 = 0;
        int64_t v1 = v70;
      }
      else
      {
        swift_bridgeObjectRetain();
        unint64_t v16 = v2;
LABEL_25:
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_19E612754(v16);
          unint64_t v16 = (float *)result;
        }
        if (v11 >= *((void *)v16 + 2)) {
          goto LABEL_123;
        }
        uint64_t v22 = *(void *)&v16[2 * v11 + 8];
        BOOL v13 = __OFADD__(v22, 1);
        uint64_t v23 = v22 + 1;
        if (v13) {
          goto LABEL_124;
        }
        *(void *)&v16[2 * v11 + 8] = v23;
      }
    }
    else
    {
      uint64_t result = swift_bridgeObjectRetain();
      unint64_t v16 = v2;
    }
    if (*((void *)v78 + 2))
    {
      unint64_t v24 = *v10;
      unint64_t v25 = *((void *)v1 + 2);
      if (v25 < *v10) {
        goto LABEL_119;
      }
      if (v9)
      {
        if (!v24) {
          goto LABEL_127;
        }
        uint64_t v26 = *((void *)v2 + 4);
        uint64_t v27 = *((void *)v1 + 4);
        uint64_t v28 = v26 * v27;
        if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63) {
          goto LABEL_128;
        }
        if (v9 != 1)
        {
          if (v24 < 2) {
            goto LABEL_131;
          }
          if (v25 != 1)
          {
            if (v25 <= 1) {
              uint64_t v29 = 1;
            }
            else {
              uint64_t v29 = *((void *)v1 + 2);
            }
            unint64_t v30 = 2 - v24;
            uint64_t v31 = 1 - v29;
            unint64_t v32 = 1 - v25;
            uint64_t v33 = 5;
            while (v31 + v33 != 5)
            {
              uint64_t v34 = *(void *)&v2[2 * v33];
              uint64_t v35 = *(void *)&v1[2 * v33];
              uint64_t v36 = v34 * v35;
              if ((unsigned __int128)(v34 * (__int128)v35) >> 64 != (v34 * v35) >> 63) {
                goto LABEL_110;
              }
              BOOL v13 = __OFADD__(v28, v36);
              v28 += v36;
              if (v13) {
                goto LABEL_111;
              }
              if (2 - v9 + v33 == 5) {
                goto LABEL_52;
              }
              if (v30 + v33 == 5) {
                goto LABEL_112;
              }
              ++v33;
              if (v32 + v33 == 5) {
                goto LABEL_52;
              }
            }
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
            goto LABEL_133;
          }
        }
      }
      else
      {
        uint64_t v28 = 0;
      }
LABEL_52:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v37 = &v75[v28];
      if (!v5) {
        goto LABEL_98;
      }
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v37 = v75;
      if (!v5) {
        goto LABEL_98;
      }
    }
    float v38 = *v37;
    uint64_t v39 = (unint64_t *)(v5 + 4);
    unint64_t v40 = *((void *)v5 + 2);
    if (v40) {
      break;
    }
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v45 = v5;
LABEL_71:
    uint64_t v51 = v77;
LABEL_78:
    if (*((void *)v76 + 2))
    {
      unint64_t v54 = *v39;
      unint64_t v55 = *((void *)v51 + 2);
      if (v55 < *v39) {
        goto LABEL_122;
      }
      if (v40)
      {
        if (!v54) {
          goto LABEL_129;
        }
        uint64_t v56 = *((void *)v5 + 4);
        uint64_t v57 = *((void *)v51 + 4);
        uint64_t v7 = v56 * v57;
        if ((unsigned __int128)(v56 * (__int128)v57) >> 64 != (v56 * v57) >> 63) {
          goto LABEL_130;
        }
        if (v40 != 1)
        {
          if (v54 < 2) {
            goto LABEL_132;
          }
          if (v55 != 1)
          {
            if (v55 <= 1) {
              uint64_t v58 = 1;
            }
            else {
              uint64_t v58 = *((void *)v51 + 2);
            }
            unint64_t v59 = 2 - v54;
            uint64_t v60 = 1 - v58;
            unint64_t v61 = 1 - v55;
            uint64_t v62 = 5;
            while (v60 + v62 != 5)
            {
              uint64_t v63 = *(void *)&v5[2 * v62];
              uint64_t v64 = *(void *)&v51[2 * v62];
              uint64_t v65 = v63 * v64;
              if ((unsigned __int128)(v63 * (__int128)v64) >> 64 != (v63 * v64) >> 63) {
                goto LABEL_114;
              }
              BOOL v13 = __OFADD__(v7, v65);
              v7 += v65;
              if (v13) {
                goto LABEL_115;
              }
              if (2 - v40 + v62 == 5) {
                goto LABEL_3;
              }
              if (v59 + v62 == 5) {
                goto LABEL_116;
              }
              ++v62;
              if (v61 + v62 == 5) {
                goto LABEL_3;
              }
            }
            goto LABEL_113;
          }
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
LABEL_3:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = &v74[v7];
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = v74;
    }
    unint64_t v2 = v16;
    int v5 = v45;
    if (v38 != *v8)
    {
      uint64_t v66 = 0;
      goto LABEL_100;
    }
  }
  uint64_t v41 = v40 - 1;
  uint64_t v42 = *(void *)&v5[2 * v40 + 6];
  BOOL v13 = __OFADD__(v42, 1);
  uint64_t v43 = v42 + 1;
  if (v13) {
    goto LABEL_120;
  }
  unint64_t v44 = *((void *)v72 + 2);
  if (v40 > v44) {
    goto LABEL_121;
  }
  if (v43 < *(void *)&v69[4 * v41 + 2])
  {
    swift_bridgeObjectRetain();
    uint64_t v45 = v5;
LABEL_73:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_19E612754(v45);
      uint64_t v45 = (float *)result;
    }
    uint64_t v51 = v77;
    if (v41 >= *((void *)v45 + 2)) {
      goto LABEL_125;
    }
    uint64_t v52 = *(void *)&v45[2 * v41 + 8];
    BOOL v13 = __OFADD__(v52, 1);
    uint64_t v53 = v52 + 1;
    if (v13) {
      goto LABEL_126;
    }
    *(void *)&v45[2 * v41 + 8] = v53;
    goto LABEL_78;
  }
  uint64_t result = swift_bridgeObjectRetain();
  if (v40 == 1)
  {
LABEL_70:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v45 = 0;
    int64_t v1 = v70;
    goto LABEL_71;
  }
  uint64_t v46 = (int64_t *)&v67[4 * v40];
  unint64_t v47 = v40;
  uint64_t v45 = v5;
  while (v45)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_19E612754(v45);
      uint64_t v45 = (float *)result;
    }
    unint64_t v48 = v47 - 1;
    if ((int64_t)(v47 - 1) >= *((void *)v45 + 2)) {
      goto LABEL_105;
    }
    *(void *)&v45[2 * v47 + 6] = 0;
    uint64_t v41 = v47 - 2;
    if ((uint64_t)(v47 - 2) >= (uint64_t)*v39) {
      goto LABEL_106;
    }
    unint64_t v49 = v39[v47];
    BOOL v13 = __OFADD__(v49, 1);
    int64_t v50 = v49 + 1;
    if (v13) {
      goto LABEL_107;
    }
    if (v41 >= (uint64_t)v44) {
      goto LABEL_108;
    }
    if (v50 < *v46)
    {
      int64_t v1 = v70;
      goto LABEL_73;
    }
    v46 -= 2;
    --v47;
    if (v48 == 1) {
      goto LABEL_70;
    }
  }
LABEL_134:
  __break(1u);
  return result;
}

uint64_t sub_19E5EB350(short float **a1)
{
  char v75 = *a1;
  int64_t v1 = a1[3];
  uint64_t v78 = a1[2];
  unint64_t v3 = a1[4];
  unint64_t v2 = a1[5];
  uint64_t v74 = a1[6];
  uint64_t v4 = a1[10];
  uint64_t v76 = a1[8];
  unint64_t v77 = a1[9];
  int v5 = a1[11];
  uint64_t result = sub_19E5F68E0((uint64_t)a1);
  uint64_t v71 = v3 + 16;
  uint64_t v72 = v4;
  long long v73 = v3;
  uint64_t v68 = v3 + 4;
  uint64_t v69 = v4 + 16;
  uint64_t v67 = v4 + 4;
  uint64_t v70 = v1;
  while (1)
  {
    if (!v2)
    {
LABEL_98:
      uint64_t v66 = 1;
LABEL_100:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v66;
    }
    uint64_t v10 = (unint64_t *)(v2 + 8);
    unint64_t v9 = *((void *)v2 + 2);
    if (v9)
    {
      uint64_t v11 = v9 - 1;
      uint64_t v12 = *(void *)&v2[4 * v9 + 12];
      BOOL v13 = __OFADD__(v12, 1);
      uint64_t v14 = v12 + 1;
      if (v13) {
        goto LABEL_117;
      }
      unint64_t v15 = *((void *)v73 + 2);
      if (v9 > v15) {
        goto LABEL_118;
      }
      if (v14 >= *(void *)&v71[8 * v11 + 4])
      {
        uint64_t result = swift_bridgeObjectRetain();
        if (v9 != 1)
        {
          uint64_t v17 = (int64_t *)&v68[8 * v9];
          unint64_t v18 = v9;
          unint64_t v16 = v2;
          while (v16)
          {
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_19E612754(v16);
              unint64_t v16 = (short float *)result;
            }
            unint64_t v19 = v18 - 1;
            if ((int64_t)(v18 - 1) >= *((void *)v16 + 2))
            {
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
              goto LABEL_109;
            }
            *(void *)&v16[4 * v18 + 12] = 0;
            uint64_t v11 = v18 - 2;
            if ((uint64_t)(v18 - 2) >= (uint64_t)*v10) {
              goto LABEL_102;
            }
            unint64_t v20 = v10[v18];
            BOOL v13 = __OFADD__(v20, 1);
            int64_t v21 = v20 + 1;
            if (v13) {
              goto LABEL_103;
            }
            if (v11 >= (uint64_t)v15) {
              goto LABEL_104;
            }
            if (v21 < *v17)
            {
              int64_t v1 = v70;
              goto LABEL_25;
            }
            v17 -= 2;
            --v18;
            if (v19 == 1) {
              goto LABEL_23;
            }
          }
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
LABEL_23:
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v16 = 0;
        int64_t v1 = v70;
      }
      else
      {
        swift_bridgeObjectRetain();
        unint64_t v16 = v2;
LABEL_25:
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_19E612754(v16);
          unint64_t v16 = (short float *)result;
        }
        if (v11 >= *((void *)v16 + 2)) {
          goto LABEL_123;
        }
        uint64_t v22 = *(void *)&v16[4 * v11 + 16];
        BOOL v13 = __OFADD__(v22, 1);
        uint64_t v23 = v22 + 1;
        if (v13) {
          goto LABEL_124;
        }
        *(void *)&v16[4 * v11 + 16] = v23;
      }
    }
    else
    {
      uint64_t result = swift_bridgeObjectRetain();
      unint64_t v16 = v2;
    }
    if (*((void *)v78 + 2))
    {
      unint64_t v24 = *v10;
      unint64_t v25 = *((void *)v1 + 2);
      if (v25 < *v10) {
        goto LABEL_119;
      }
      if (v9)
      {
        if (!v24) {
          goto LABEL_127;
        }
        uint64_t v26 = *((void *)v2 + 4);
        uint64_t v27 = *((void *)v1 + 4);
        uint64_t v28 = v26 * v27;
        if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63) {
          goto LABEL_128;
        }
        if (v9 != 1)
        {
          if (v24 < 2) {
            goto LABEL_131;
          }
          if (v25 != 1)
          {
            if (v25 <= 1) {
              uint64_t v29 = 1;
            }
            else {
              uint64_t v29 = *((void *)v1 + 2);
            }
            unint64_t v30 = 2 - v24;
            uint64_t v31 = 1 - v29;
            unint64_t v32 = 1 - v25;
            uint64_t v33 = 5;
            while (v31 + v33 != 5)
            {
              uint64_t v34 = *(void *)&v2[4 * v33];
              uint64_t v35 = *(void *)&v1[4 * v33];
              uint64_t v36 = v34 * v35;
              if ((unsigned __int128)(v34 * (__int128)v35) >> 64 != (v34 * v35) >> 63) {
                goto LABEL_110;
              }
              BOOL v13 = __OFADD__(v28, v36);
              v28 += v36;
              if (v13) {
                goto LABEL_111;
              }
              if (2 - v9 + v33 == 5) {
                goto LABEL_52;
              }
              if (v30 + v33 == 5) {
                goto LABEL_112;
              }
              ++v33;
              if (v32 + v33 == 5) {
                goto LABEL_52;
              }
            }
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
            goto LABEL_133;
          }
        }
      }
      else
      {
        uint64_t v28 = 0;
      }
LABEL_52:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v37 = &v75[v28];
      if (!v5) {
        goto LABEL_98;
      }
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v37 = v75;
      if (!v5) {
        goto LABEL_98;
      }
    }
    short float v38 = *v37;
    uint64_t v39 = (unint64_t *)(v5 + 8);
    unint64_t v40 = *((void *)v5 + 2);
    if (v40) {
      break;
    }
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v45 = v5;
LABEL_71:
    uint64_t v51 = v77;
LABEL_78:
    if (*((void *)v76 + 2))
    {
      unint64_t v54 = *v39;
      unint64_t v55 = *((void *)v51 + 2);
      if (v55 < *v39) {
        goto LABEL_122;
      }
      if (v40)
      {
        if (!v54) {
          goto LABEL_129;
        }
        uint64_t v56 = *((void *)v5 + 4);
        uint64_t v57 = *((void *)v51 + 4);
        uint64_t v7 = v56 * v57;
        if ((unsigned __int128)(v56 * (__int128)v57) >> 64 != (v56 * v57) >> 63) {
          goto LABEL_130;
        }
        if (v40 != 1)
        {
          if (v54 < 2) {
            goto LABEL_132;
          }
          if (v55 != 1)
          {
            if (v55 <= 1) {
              uint64_t v58 = 1;
            }
            else {
              uint64_t v58 = *((void *)v51 + 2);
            }
            unint64_t v59 = 2 - v54;
            uint64_t v60 = 1 - v58;
            unint64_t v61 = 1 - v55;
            uint64_t v62 = 5;
            while (v60 + v62 != 5)
            {
              uint64_t v63 = *(void *)&v5[4 * v62];
              uint64_t v64 = *(void *)&v51[4 * v62];
              uint64_t v65 = v63 * v64;
              if ((unsigned __int128)(v63 * (__int128)v64) >> 64 != (v63 * v64) >> 63) {
                goto LABEL_114;
              }
              BOOL v13 = __OFADD__(v7, v65);
              v7 += v65;
              if (v13) {
                goto LABEL_115;
              }
              if (2 - v40 + v62 == 5) {
                goto LABEL_3;
              }
              if (v59 + v62 == 5) {
                goto LABEL_116;
              }
              ++v62;
              if (v61 + v62 == 5) {
                goto LABEL_3;
              }
            }
            goto LABEL_113;
          }
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
LABEL_3:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = &v74[v7];
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = v74;
    }
    unint64_t v2 = v16;
    int v5 = v45;
    if (v38 != *v8)
    {
      uint64_t v66 = 0;
      goto LABEL_100;
    }
  }
  uint64_t v41 = v40 - 1;
  uint64_t v42 = *(void *)&v5[4 * v40 + 12];
  BOOL v13 = __OFADD__(v42, 1);
  uint64_t v43 = v42 + 1;
  if (v13) {
    goto LABEL_120;
  }
  unint64_t v44 = *((void *)v72 + 2);
  if (v40 > v44) {
    goto LABEL_121;
  }
  if (v43 < *(void *)&v69[8 * v41 + 4])
  {
    swift_bridgeObjectRetain();
    uint64_t v45 = v5;
LABEL_73:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_19E612754(v45);
      uint64_t v45 = (short float *)result;
    }
    uint64_t v51 = v77;
    if (v41 >= *((void *)v45 + 2)) {
      goto LABEL_125;
    }
    uint64_t v52 = *(void *)&v45[4 * v41 + 16];
    BOOL v13 = __OFADD__(v52, 1);
    uint64_t v53 = v52 + 1;
    if (v13) {
      goto LABEL_126;
    }
    *(void *)&v45[4 * v41 + 16] = v53;
    goto LABEL_78;
  }
  uint64_t result = swift_bridgeObjectRetain();
  if (v40 == 1)
  {
LABEL_70:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v45 = 0;
    int64_t v1 = v70;
    goto LABEL_71;
  }
  uint64_t v46 = (int64_t *)&v67[8 * v40];
  unint64_t v47 = v40;
  uint64_t v45 = v5;
  while (v45)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_19E612754(v45);
      uint64_t v45 = (short float *)result;
    }
    unint64_t v48 = v47 - 1;
    if ((int64_t)(v47 - 1) >= *((void *)v45 + 2)) {
      goto LABEL_105;
    }
    *(void *)&v45[4 * v47 + 12] = 0;
    uint64_t v41 = v47 - 2;
    if ((uint64_t)(v47 - 2) >= (uint64_t)*v39) {
      goto LABEL_106;
    }
    unint64_t v49 = v39[v47];
    BOOL v13 = __OFADD__(v49, 1);
    int64_t v50 = v49 + 1;
    if (v13) {
      goto LABEL_107;
    }
    if (v41 >= (uint64_t)v44) {
      goto LABEL_108;
    }
    if (v50 < *v46)
    {
      int64_t v1 = v70;
      goto LABEL_73;
    }
    v46 -= 2;
    --v47;
    if (v48 == 1) {
      goto LABEL_70;
    }
  }
LABEL_134:
  __break(1u);
  return result;
}

uint64_t sub_19E5EB990(int **a1)
{
  uint64_t v74 = *a1;
  int64_t v1 = a1[3];
  unint64_t v77 = a1[2];
  unint64_t v2 = a1[4];
  unint64_t v3 = a1[5];
  long long v73 = a1[6];
  uint64_t v4 = a1[10];
  char v75 = a1[8];
  uint64_t v76 = a1[9];
  int v5 = a1[11];
  uint64_t result = sub_19E5F68E0((uint64_t)a1);
  uint64_t v70 = v2 + 8;
  uint64_t v71 = v4;
  uint64_t v72 = v2;
  uint64_t v67 = v2 + 2;
  uint64_t v68 = v4 + 8;
  uint64_t v66 = v4 + 2;
  uint64_t v69 = v1;
  while (1)
  {
    if (!v3)
    {
LABEL_98:
      uint64_t v65 = 1;
LABEL_100:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v65;
    }
    uint64_t v10 = (unint64_t *)(v3 + 4);
    unint64_t v9 = *((void *)v3 + 2);
    if (v9)
    {
      uint64_t v11 = v9 - 1;
      uint64_t v12 = *(void *)&v3[2 * v9 + 6];
      BOOL v13 = __OFADD__(v12, 1);
      uint64_t v14 = v12 + 1;
      if (v13) {
        goto LABEL_117;
      }
      unint64_t v15 = *((void *)v72 + 2);
      if (v9 > v15) {
        goto LABEL_118;
      }
      if (v14 >= *(void *)&v70[4 * v11 + 2])
      {
        uint64_t result = swift_bridgeObjectRetain();
        if (v9 != 1)
        {
          uint64_t v17 = (int64_t *)&v67[4 * v9];
          unint64_t v18 = v9;
          unint64_t v16 = v3;
          while (v16)
          {
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_19E612754(v16);
              unint64_t v16 = (int *)result;
            }
            unint64_t v19 = v18 - 1;
            if ((int64_t)(v18 - 1) >= *((void *)v16 + 2))
            {
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
              goto LABEL_109;
            }
            *(void *)&v16[2 * v18 + 6] = 0;
            uint64_t v11 = v18 - 2;
            if ((uint64_t)(v18 - 2) >= (uint64_t)*v10) {
              goto LABEL_102;
            }
            unint64_t v20 = v10[v18];
            BOOL v13 = __OFADD__(v20, 1);
            int64_t v21 = v20 + 1;
            if (v13) {
              goto LABEL_103;
            }
            if (v11 >= (uint64_t)v15) {
              goto LABEL_104;
            }
            if (v21 < *v17)
            {
              int64_t v1 = v69;
              goto LABEL_25;
            }
            v17 -= 2;
            --v18;
            if (v19 == 1) {
              goto LABEL_23;
            }
          }
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
LABEL_23:
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v16 = 0;
        int64_t v1 = v69;
      }
      else
      {
        swift_bridgeObjectRetain();
        unint64_t v16 = v3;
LABEL_25:
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_19E612754(v16);
          unint64_t v16 = (int *)result;
        }
        if (v11 >= *((void *)v16 + 2)) {
          goto LABEL_123;
        }
        uint64_t v22 = *(void *)&v16[2 * v11 + 8];
        BOOL v13 = __OFADD__(v22, 1);
        uint64_t v23 = v22 + 1;
        if (v13) {
          goto LABEL_124;
        }
        *(void *)&v16[2 * v11 + 8] = v23;
      }
    }
    else
    {
      uint64_t result = swift_bridgeObjectRetain();
      unint64_t v16 = v3;
    }
    if (*((void *)v77 + 2))
    {
      unint64_t v24 = *v10;
      unint64_t v25 = *((void *)v1 + 2);
      if (v25 < *v10) {
        goto LABEL_119;
      }
      if (v9)
      {
        if (!v24) {
          goto LABEL_127;
        }
        uint64_t v26 = *((void *)v3 + 4);
        uint64_t v27 = *((void *)v1 + 4);
        uint64_t v28 = v26 * v27;
        if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63) {
          goto LABEL_128;
        }
        if (v9 != 1)
        {
          if (v24 < 2) {
            goto LABEL_131;
          }
          if (v25 != 1)
          {
            if (v25 <= 1) {
              uint64_t v29 = 1;
            }
            else {
              uint64_t v29 = *((void *)v1 + 2);
            }
            unint64_t v30 = 2 - v24;
            uint64_t v31 = 1 - v29;
            unint64_t v32 = 1 - v25;
            uint64_t v33 = 5;
            while (v31 + v33 != 5)
            {
              uint64_t v34 = *(void *)&v3[2 * v33];
              uint64_t v35 = *(void *)&v1[2 * v33];
              uint64_t v36 = v34 * v35;
              if ((unsigned __int128)(v34 * (__int128)v35) >> 64 != (v34 * v35) >> 63) {
                goto LABEL_110;
              }
              BOOL v13 = __OFADD__(v28, v36);
              v28 += v36;
              if (v13) {
                goto LABEL_111;
              }
              if (2 - v9 + v33 == 5) {
                goto LABEL_52;
              }
              if (v30 + v33 == 5) {
                goto LABEL_112;
              }
              ++v33;
              if (v32 + v33 == 5) {
                goto LABEL_52;
              }
            }
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
            goto LABEL_133;
          }
        }
      }
      else
      {
        uint64_t v28 = 0;
      }
LABEL_52:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v37 = &v74[v28];
      if (!v5) {
        goto LABEL_98;
      }
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v37 = v74;
      if (!v5) {
        goto LABEL_98;
      }
    }
    short float v38 = (unint64_t *)(v5 + 4);
    unint64_t v39 = *((void *)v5 + 2);
    int v78 = *v37;
    if (v39) {
      break;
    }
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v44 = v5;
LABEL_71:
    int64_t v50 = v76;
LABEL_78:
    if (*((void *)v75 + 2))
    {
      unint64_t v53 = *v38;
      unint64_t v54 = *((void *)v50 + 2);
      if (v54 < *v38) {
        goto LABEL_122;
      }
      if (v39)
      {
        if (!v53) {
          goto LABEL_129;
        }
        uint64_t v55 = *((void *)v5 + 4);
        uint64_t v56 = *((void *)v50 + 4);
        uint64_t v7 = v55 * v56;
        if ((unsigned __int128)(v55 * (__int128)v56) >> 64 != (v55 * v56) >> 63) {
          goto LABEL_130;
        }
        if (v39 != 1)
        {
          if (v53 < 2) {
            goto LABEL_132;
          }
          if (v54 != 1)
          {
            if (v54 <= 1) {
              uint64_t v57 = 1;
            }
            else {
              uint64_t v57 = *((void *)v50 + 2);
            }
            unint64_t v58 = 2 - v53;
            uint64_t v59 = 1 - v57;
            unint64_t v60 = 1 - v54;
            uint64_t v61 = 5;
            while (v59 + v61 != 5)
            {
              uint64_t v62 = *(void *)&v5[2 * v61];
              uint64_t v63 = *(void *)&v50[2 * v61];
              uint64_t v64 = v62 * v63;
              if ((unsigned __int128)(v62 * (__int128)v63) >> 64 != (v62 * v63) >> 63) {
                goto LABEL_114;
              }
              BOOL v13 = __OFADD__(v7, v64);
              v7 += v64;
              if (v13) {
                goto LABEL_115;
              }
              if (2 - v39 + v61 == 5) {
                goto LABEL_3;
              }
              if (v58 + v61 == 5) {
                goto LABEL_116;
              }
              ++v61;
              if (v60 + v61 == 5) {
                goto LABEL_3;
              }
            }
            goto LABEL_113;
          }
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
LABEL_3:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = &v73[v7];
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = v73;
    }
    unint64_t v3 = v16;
    int v5 = v44;
    if (v78 != *v8)
    {
      uint64_t v65 = 0;
      goto LABEL_100;
    }
  }
  uint64_t v40 = v39 - 1;
  uint64_t v41 = *(void *)&v5[2 * v39 + 6];
  BOOL v13 = __OFADD__(v41, 1);
  uint64_t v42 = v41 + 1;
  if (v13) {
    goto LABEL_120;
  }
  unint64_t v43 = *((void *)v71 + 2);
  if (v39 > v43) {
    goto LABEL_121;
  }
  if (v42 < *(void *)&v68[4 * v40 + 2])
  {
    swift_bridgeObjectRetain();
    unint64_t v44 = v5;
LABEL_73:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_19E612754(v44);
      unint64_t v44 = (int *)result;
    }
    int64_t v50 = v76;
    if (v40 >= *((void *)v44 + 2)) {
      goto LABEL_125;
    }
    uint64_t v51 = *(void *)&v44[2 * v40 + 8];
    BOOL v13 = __OFADD__(v51, 1);
    uint64_t v52 = v51 + 1;
    if (v13) {
      goto LABEL_126;
    }
    *(void *)&v44[2 * v40 + 8] = v52;
    goto LABEL_78;
  }
  uint64_t result = swift_bridgeObjectRetain();
  if (v39 == 1)
  {
LABEL_70:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v44 = 0;
    int64_t v1 = v69;
    goto LABEL_71;
  }
  uint64_t v45 = (int64_t *)&v66[4 * v39];
  unint64_t v46 = v39;
  unint64_t v44 = v5;
  while (v44)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_19E612754(v44);
      unint64_t v44 = (int *)result;
    }
    unint64_t v47 = v46 - 1;
    if ((int64_t)(v46 - 1) >= *((void *)v44 + 2)) {
      goto LABEL_105;
    }
    *(void *)&v44[2 * v46 + 6] = 0;
    uint64_t v40 = v46 - 2;
    if ((uint64_t)(v46 - 2) >= (uint64_t)*v38) {
      goto LABEL_106;
    }
    unint64_t v48 = v38[v46];
    BOOL v13 = __OFADD__(v48, 1);
    int64_t v49 = v48 + 1;
    if (v13) {
      goto LABEL_107;
    }
    if (v40 >= (uint64_t)v43) {
      goto LABEL_108;
    }
    if (v49 < *v45)
    {
      int64_t v1 = v69;
      goto LABEL_73;
    }
    v45 -= 2;
    --v46;
    if (v47 == 1) {
      goto LABEL_70;
    }
  }
LABEL_134:
  __break(1u);
  return result;
}

uint64_t sub_19E5EBFD0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v4) {
    int64_t v6 = *(void *)(a1 + 16);
  }
  else {
    int64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v34 = MEMORY[0x1E4FBC860];
  sub_19E66F600(0, v6, 0);
  int64_t v7 = v6;
  unint64_t v31 = v4;
  uint64_t v33 = a1;
  int64_t v30 = v5;
  if (v6)
  {
    uint64_t v8 = (uint64_t *)(a1 + 32);
    unint64_t v9 = (uint64_t *)(a2 + 32);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v11 = v7;
    uint64_t v12 = a2;
    while (v4)
    {
      if (!v5) {
        goto LABEL_28;
      }
      uint64_t v13 = *v8 * *v9;
      if ((unsigned __int128)(*v8 * (__int128)*v9) >> 64 != v13 >> 63) {
        goto LABEL_29;
      }
      unint64_t v15 = *(void *)(v34 + 16);
      unint64_t v14 = *(void *)(v34 + 24);
      if (v15 >= v14 >> 1)
      {
        uint64_t v28 = v12;
        uint64_t result = sub_19E66F600(v14 > 1, v15 + 1, 1);
        uint64_t v12 = v28;
      }
      --v5;
      *(void *)(v34 + 16) = v15 + 1;
      *(void *)(v34 + 8 * v15 + 32) = v13;
      --v4;
      ++v9;
      ++v8;
      if (!--v11) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v12 = a2;
LABEL_14:
    if (v31 <= v30)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v34;
    }
    uint64_t v16 = 0;
    if (v7 <= v30) {
      int64_t v17 = v30;
    }
    else {
      int64_t v17 = v7;
    }
    int64_t v18 = v17 - v7;
    unint64_t v19 = v31 - v7;
    uint64_t v20 = 8 * v7 + 32;
    uint64_t v21 = v33 + v20;
    uint64_t v22 = v12 + v20;
    while (v19 != v16)
    {
      if (v30 - v7 == v16) {
        goto LABEL_26;
      }
      if (v18 == v16) {
        goto LABEL_31;
      }
      uint64_t v23 = *(void *)(v21 + 8 * v16);
      uint64_t v24 = *(void *)(v22 + 8 * v16);
      uint64_t v25 = v23 * v24;
      if ((unsigned __int128)(v23 * (__int128)v24) >> 64 != (v23 * v24) >> 63) {
        goto LABEL_32;
      }
      unint64_t v27 = *(void *)(v34 + 16);
      unint64_t v26 = *(void *)(v34 + 24);
      if (v27 >= v26 >> 1)
      {
        uint64_t v29 = v12;
        uint64_t v32 = v18;
        uint64_t result = sub_19E66F600(v26 > 1, v27 + 1, 1);
        int64_t v18 = v32;
        uint64_t v12 = v29;
      }
      *(void *)(v34 + 16) = v27 + 1;
      *(void *)(v34 + 8 * v27 + 32) = v25;
      if (v19 == ++v16) {
        goto LABEL_26;
      }
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

unint64_t sub_19E5EC214(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  unint64_t result = sub_19E5DDC7C(a2, a5);
  if ((result & 1) == 0) {
    goto LABEL_47;
  }
  uint64_t v17 = a2[2];
  if (v17)
  {
    if (sub_19E5DDC7C(a3, a6) && (sub_19E632D1C((int64_t)a2, (uint64_t)a3) & 1) != 0)
    {
      unint64_t result = sub_19E632D1C((int64_t)a5, (uint64_t)a6);
      if (result)
      {
        if (!*(void *)(a1 + 16))
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        if (!a3[2])
        {
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v19 = a3[4];
        uint64_t v20 = v18 * v19;
        if ((unsigned __int128)(v18 * (__int128)v19) >> 64 != (v18 * v19) >> 63)
        {
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }
        if (!*(void *)(a4 + 16))
        {
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
        if (!a6[2])
        {
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        uint64_t v21 = *(void *)(a4 + 32);
        uint64_t v22 = a6[4];
        uint64_t v23 = v21 * v22;
        if ((unsigned __int128)(v21 * (__int128)v22) >> 64 != (v21 * v22) >> 63)
        {
LABEL_58:
          __break(1u);
          return result;
        }
        uint64_t v24 = &a7[v20];
        uint64_t v25 = a2 + 4;
        uint64_t v26 = 1;
        unint64_t result = (unint64_t)&a8[v23];
        while (1)
        {
          uint64_t v27 = *v25++;
          uint64_t v28 = v26 * v27;
          if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63) {
            break;
          }
          uint64_t v26 = v28;
          if (!--v17)
          {
            if (result < (unint64_t)v24 || result >= (unint64_t)&v24[v28] || (void *)result != v24)
            {
              return (unint64_t)memmove((void *)result, v24, 8 * v28);
            }
            return result;
          }
        }
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
    }
    unint64_t result = sub_19E5F2070(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
    if ((result & 1) == 0)
    {
      uint64_t v48 = sub_19E631A24(a1, (uint64_t)a2, (uint64_t)a3);
      uint64_t v46 = v29;
      uint64_t v31 = v30;
      unint64_t result = sub_19E631A24(a4, (uint64_t)a5, (uint64_t)a6);
      unint64_t v49 = result;
      uint64_t v47 = v33;
      uint64_t v34 = a2[4];
      if (v34 < 0)
      {
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      uint64_t v35 = v32;
      if (v34)
      {
        uint64_t v36 = a1;
        if (!*(void *)(a1 + 16))
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        if (!a3[2])
        {
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        if (!*(void *)(a4 + 16))
        {
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        if (!a6[2])
        {
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        uint64_t v37 = a7;
        short float v38 = a3;
        uint64_t v39 = 0;
        uint64_t v40 = *(void *)(v36 + 32);
        uint64_t v41 = v38[4];
        uint64_t v42 = *(void *)(a4 + 32);
        uint64_t v43 = a6[4];
        while (1)
        {
          uint64_t v44 = v40 + v39;
          if (__OFADD__(v40, v39)) {
            break;
          }
          if ((unsigned __int128)(v44 * (__int128)v41) >> 64 != (v44 * v41) >> 63) {
            goto LABEL_43;
          }
          uint64_t v45 = v42 + v39;
          if (__OFADD__(v42, v39)) {
            goto LABEL_44;
          }
          if ((unsigned __int128)(v45 * (__int128)v43) >> 64 != (v45 * v43) >> 63) {
            goto LABEL_45;
          }
          ++v39;
          unint64_t result = sub_19E5EC214(v48, v46, v31, v49, v47, v35, &v37[v44 * v41], &a8[v45 * v43]);
          if (v34 == v39) {
            goto LABEL_34;
          }
        }
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
LABEL_34:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  else if (a8 < a7 || a7 + 1 <= a8 || a8 != a7)
  {
    *a8 = *a7;
  }
  return result;
}

unint64_t sub_19E5EC558(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, _DWORD *a7, _DWORD *a8)
{
  unint64_t result = sub_19E5DDC7C(a2, a5);
  if ((result & 1) == 0) {
    goto LABEL_48;
  }
  uint64_t v17 = a2[2];
  if (v17)
  {
    if (sub_19E5DDC7C(a3, a6) && (sub_19E632D1C((int64_t)a2, (uint64_t)a3) & 1) != 0)
    {
      unint64_t result = sub_19E632D1C((int64_t)a5, (uint64_t)a6);
      if (result)
      {
        if (!*(void *)(a1 + 16))
        {
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        if (!a3[2])
        {
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v19 = a3[4];
        uint64_t v20 = v18 * v19;
        if ((unsigned __int128)(v18 * (__int128)v19) >> 64 != (v18 * v19) >> 63)
        {
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        if (!*(void *)(a4 + 16))
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        if (!a6[2])
        {
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        uint64_t v21 = *(void *)(a4 + 32);
        uint64_t v22 = a6[4];
        uint64_t v23 = v21 * v22;
        if ((unsigned __int128)(v21 * (__int128)v22) >> 64 != (v21 * v22) >> 63)
        {
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }
        uint64_t v24 = &a7[v20];
        uint64_t v25 = a2 + 4;
        uint64_t v26 = 1;
        unint64_t result = (unint64_t)&a8[v23];
        while (1)
        {
          uint64_t v27 = *v25++;
          uint64_t v28 = v26 * v27;
          if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63) {
            break;
          }
          uint64_t v26 = v28;
          if (!--v17)
          {
            if (result < (unint64_t)v24 || result >= (unint64_t)&v24[v28] || (_DWORD *)result != v24)
            {
              return (unint64_t)memmove((void *)result, v24, 4 * v28);
            }
            return result;
          }
        }
        goto LABEL_47;
      }
    }
    unint64_t result = sub_19E5F2200(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
    if ((result & 1) == 0)
    {
      unint64_t result = sub_19E5EF1B0(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
      if ((result & 1) == 0)
      {
        uint64_t v47 = a7;
        uint64_t v48 = a8;
        uint64_t v29 = a1;
        uint64_t v49 = sub_19E631A24(a1, (uint64_t)a2, (uint64_t)a3);
        uint64_t v31 = v30;
        uint64_t v33 = v32;
        unint64_t result = sub_19E631A24(a4, (uint64_t)a5, (uint64_t)a6);
        unint64_t v50 = result;
        uint64_t v36 = a2[4];
        if (v36 < 0)
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        uint64_t v37 = v34;
        uint64_t v38 = v35;
        if (v36)
        {
          if (!*(void *)(v29 + 16))
          {
LABEL_56:
            __break(1u);
            goto LABEL_57;
          }
          if (!a3[2])
          {
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
          if (!*(void *)(a4 + 16))
          {
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
          if (!a6[2])
          {
LABEL_59:
            __break(1u);
            return result;
          }
          uint64_t v39 = a6;
          uint64_t v40 = 0;
          uint64_t v41 = *(void *)(v29 + 32);
          uint64_t v42 = a3[4];
          uint64_t v43 = *(void *)(a4 + 32);
          uint64_t v44 = v39[4];
          while (1)
          {
            uint64_t v45 = v41 + v40;
            if (__OFADD__(v41, v40)) {
              break;
            }
            if ((unsigned __int128)(v45 * (__int128)v42) >> 64 != (v45 * v42) >> 63) {
              goto LABEL_44;
            }
            uint64_t v46 = v43 + v40;
            if (__OFADD__(v43, v40)) {
              goto LABEL_45;
            }
            if ((unsigned __int128)(v46 * (__int128)v44) >> 64 != (v46 * v44) >> 63) {
              goto LABEL_46;
            }
            ++v40;
            unint64_t result = sub_19E5EC558(v49, v31, v33, v50, v37, v38, &v47[v45 * v42], &v48[v46 * v44]);
            if (v36 == v40) {
              goto LABEL_35;
            }
          }
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
  }
  else if (a8 < a7 || a7 + 1 <= a8 || a8 != a7)
  {
    *a8 = *a7;
  }
  return result;
}

unint64_t sub_19E5EC8D0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, _WORD *a7, _WORD *a8)
{
  unint64_t result = sub_19E5DDC7C(a2, a5);
  if ((result & 1) == 0) {
    goto LABEL_48;
  }
  uint64_t v17 = a2[2];
  if (v17)
  {
    if (sub_19E5DDC7C(a3, a6) && (sub_19E632D1C((int64_t)a2, (uint64_t)a3) & 1) != 0)
    {
      unint64_t result = sub_19E632D1C((int64_t)a5, (uint64_t)a6);
      if (result)
      {
        if (!*(void *)(a1 + 16))
        {
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        if (!a3[2])
        {
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v19 = a3[4];
        uint64_t v20 = v18 * v19;
        if ((unsigned __int128)(v18 * (__int128)v19) >> 64 != (v18 * v19) >> 63)
        {
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        if (!*(void *)(a4 + 16))
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        if (!a6[2])
        {
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        uint64_t v21 = *(void *)(a4 + 32);
        uint64_t v22 = a6[4];
        uint64_t v23 = v21 * v22;
        if ((unsigned __int128)(v21 * (__int128)v22) >> 64 != (v21 * v22) >> 63)
        {
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }
        uint64_t v24 = &a7[v20];
        uint64_t v25 = a2 + 4;
        uint64_t v26 = 1;
        unint64_t result = (unint64_t)&a8[v23];
        while (1)
        {
          uint64_t v27 = *v25++;
          uint64_t v28 = v26 * v27;
          if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63) {
            break;
          }
          uint64_t v26 = v28;
          if (!--v17)
          {
            if (result < (unint64_t)v24 || result >= (unint64_t)&v24[v28] || (_WORD *)result != v24)
            {
              return (unint64_t)memmove((void *)result, v24, 2 * v28);
            }
            return result;
          }
        }
        goto LABEL_47;
      }
    }
    unint64_t result = sub_19E5F2390(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
    if ((result & 1) == 0)
    {
      unint64_t result = sub_19E5EF550(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
      if ((result & 1) == 0)
      {
        uint64_t v47 = a7;
        uint64_t v48 = a8;
        uint64_t v29 = a1;
        uint64_t v49 = sub_19E631A24(a1, (uint64_t)a2, (uint64_t)a3);
        uint64_t v31 = v30;
        uint64_t v33 = v32;
        unint64_t result = sub_19E631A24(a4, (uint64_t)a5, (uint64_t)a6);
        unint64_t v50 = result;
        uint64_t v36 = a2[4];
        if (v36 < 0)
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        uint64_t v37 = v34;
        uint64_t v38 = v35;
        if (v36)
        {
          if (!*(void *)(v29 + 16))
          {
LABEL_56:
            __break(1u);
            goto LABEL_57;
          }
          if (!a3[2])
          {
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
          if (!*(void *)(a4 + 16))
          {
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
          if (!a6[2])
          {
LABEL_59:
            __break(1u);
            return result;
          }
          uint64_t v39 = a6;
          uint64_t v40 = 0;
          uint64_t v41 = *(void *)(v29 + 32);
          uint64_t v42 = a3[4];
          uint64_t v43 = *(void *)(a4 + 32);
          uint64_t v44 = v39[4];
          while (1)
          {
            uint64_t v45 = v41 + v40;
            if (__OFADD__(v41, v40)) {
              break;
            }
            if ((unsigned __int128)(v45 * (__int128)v42) >> 64 != (v45 * v42) >> 63) {
              goto LABEL_44;
            }
            uint64_t v46 = v43 + v40;
            if (__OFADD__(v43, v40)) {
              goto LABEL_45;
            }
            if ((unsigned __int128)(v46 * (__int128)v44) >> 64 != (v46 * v44) >> 63) {
              goto LABEL_46;
            }
            ++v40;
            unint64_t result = sub_19E5EC8D0(v49, v31, v33, v50, v37, v38, &v47[v45 * v42], &v48[v46 * v44]);
            if (v36 == v40) {
              goto LABEL_35;
            }
          }
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
  }
  else if (a8 < a7 || a7 + 1 <= a8 || a8 != a7)
  {
    *a8 = *a7;
  }
  return result;
}

unint64_t sub_19E5ECC48(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, _DWORD *a7, _DWORD *a8)
{
  unint64_t result = sub_19E5DDC7C(a2, a5);
  if ((result & 1) == 0) {
    goto LABEL_48;
  }
  uint64_t v17 = a2[2];
  if (v17)
  {
    if (sub_19E5DDC7C(a3, a6) && (sub_19E632D1C((int64_t)a2, (uint64_t)a3) & 1) != 0)
    {
      unint64_t result = sub_19E632D1C((int64_t)a5, (uint64_t)a6);
      if (result)
      {
        if (!*(void *)(a1 + 16))
        {
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        if (!a3[2])
        {
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v19 = a3[4];
        uint64_t v20 = v18 * v19;
        if ((unsigned __int128)(v18 * (__int128)v19) >> 64 != (v18 * v19) >> 63)
        {
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        if (!*(void *)(a4 + 16))
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        if (!a6[2])
        {
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        uint64_t v21 = *(void *)(a4 + 32);
        uint64_t v22 = a6[4];
        uint64_t v23 = v21 * v22;
        if ((unsigned __int128)(v21 * (__int128)v22) >> 64 != (v21 * v22) >> 63)
        {
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }
        uint64_t v24 = &a7[v20];
        uint64_t v25 = a2 + 4;
        uint64_t v26 = 1;
        unint64_t result = (unint64_t)&a8[v23];
        while (1)
        {
          uint64_t v27 = *v25++;
          uint64_t v28 = v26 * v27;
          if ((unsigned __int128)(v26 * (__int128)v27) >> 64 != (v26 * v27) >> 63) {
            break;
          }
          uint64_t v26 = v28;
          if (!--v17)
          {
            if (result < (unint64_t)v24 || result >= (unint64_t)&v24[v28] || (_DWORD *)result != v24)
            {
              return (unint64_t)memmove((void *)result, v24, 4 * v28);
            }
            return result;
          }
        }
        goto LABEL_47;
      }
    }
    unint64_t result = sub_19E5F2200(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
    if ((result & 1) == 0)
    {
      unint64_t result = sub_19E5EF8F0(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
      if ((result & 1) == 0)
      {
        uint64_t v47 = a7;
        uint64_t v48 = a8;
        uint64_t v29 = a1;
        uint64_t v49 = sub_19E631A24(a1, (uint64_t)a2, (uint64_t)a3);
        uint64_t v31 = v30;
        uint64_t v33 = v32;
        unint64_t result = sub_19E631A24(a4, (uint64_t)a5, (uint64_t)a6);
        unint64_t v50 = result;
        uint64_t v36 = a2[4];
        if (v36 < 0)
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        uint64_t v37 = v34;
        uint64_t v38 = v35;
        if (v36)
        {
          if (!*(void *)(v29 + 16))
          {
LABEL_56:
            __break(1u);
            goto LABEL_57;
          }
          if (!a3[2])
          {
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
          if (!*(void *)(a4 + 16))
          {
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
          if (!a6[2])
          {
LABEL_59:
            __break(1u);
            return result;
          }
          uint64_t v39 = a6;
          uint64_t v40 = 0;
          uint64_t v41 = *(void *)(v29 + 32);
          uint64_t v42 = a3[4];
          uint64_t v43 = *(void *)(a4 + 32);
          uint64_t v44 = v39[4];
          while (1)
          {
            uint64_t v45 = v41 + v40;
            if (__OFADD__(v41, v40)) {
              break;
            }
            if ((unsigned __int128)(v45 * (__int128)v42) >> 64 != (v45 * v42) >> 63) {
              goto LABEL_44;
            }
            uint64_t v46 = v43 + v40;
            if (__OFADD__(v43, v40)) {
              goto LABEL_45;
            }
            if ((unsigned __int128)(v46 * (__int128)v44) >> 64 != (v46 * v44) >> 63) {
              goto LABEL_46;
            }
            ++v40;
            unint64_t result = sub_19E5ECC48(v49, v31, v33, v50, v37, v38, &v47[v45 * v42], &v48[v46 * v44]);
            if (v36 == v40) {
              goto LABEL_35;
            }
          }
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
  }
  else if (a8 < a7 || a7 + 1 <= a8 || a8 != a7)
  {
    *a8 = *a7;
  }
  return result;
}

uint64_t sub_19E5ECFC0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = v2[1];
  Objectuint64_t Type = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(ObjectType, v6) & 1) != 0
    && swift_isUniquelyReferenced_nonNull())
  {
    uint64_t v8 = (_UNKNOWN **)v2[1];
  }
  else
  {
    uint64_t v9 = v2[1];
    uint64_t v10 = swift_unknownObjectRetain();
    uint64_t v11 = sub_19E5F5AFC(v10, v9, 0, MEMORY[0x1E4FBB3D0], (uint64_t)sub_19E5F6328, &qword_1E945C190, sub_19E6CD5B4);
    swift_unknownObjectRelease_n();
    uint64_t v8 = &off_1EF0C70A8;
    *unint64_t v3 = v11;
    v3[1] = (uint64_t)&off_1EF0C70A8;
  }
  uint64_t v12 = swift_getObjectType();
  MEMORY[0x1F4188790](v12);
  v15[2] = v3;
  _OWORD v15[3] = a1;
  v15[4] = a2;
  uint64_t v13 = (void (*)(void, void, void, void, void))v8[5];
  swift_unknownObjectRetain();
  v13(sub_19E5F6308, v15, MEMORY[0x1E4FBC848] + 8, v12, v8);
  return swift_unknownObjectRelease();
}

uint64_t sub_19E5ED14C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = v2[1];
  Objectuint64_t Type = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(ObjectType, v6) & 1) != 0
    && swift_isUniquelyReferenced_nonNull())
  {
    uint64_t v8 = (_UNKNOWN **)v2[1];
  }
  else
  {
    uint64_t v9 = v2[1];
    uint64_t v10 = swift_unknownObjectRetain();
    uint64_t v11 = sub_19E5F5AFC(v10, v9, 0, MEMORY[0x1E4FBB470], (uint64_t)sub_19E5F6208, &qword_1E945C178, sub_19E6CD750);
    swift_unknownObjectRelease_n();
    uint64_t v8 = &off_1EF0C70A8;
    *unint64_t v3 = v11;
    v3[1] = (uint64_t)&off_1EF0C70A8;
  }
  uint64_t v12 = swift_getObjectType();
  MEMORY[0x1F4188790](v12);
  v15[2] = v3;
  _OWORD v15[3] = a1;
  v15[4] = a2;
  uint64_t v13 = (void (*)(void, void, void, void, void))v8[5];
  swift_unknownObjectRetain();
  v13(sub_19E5F61E8, v15, MEMORY[0x1E4FBC848] + 8, v12, v8);
  return swift_unknownObjectRelease();
}

uint64_t sub_19E5ED2D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = v2[1];
  Objectuint64_t Type = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(ObjectType, v6) & 1) != 0
    && swift_isUniquelyReferenced_nonNull())
  {
    uint64_t v8 = (_UNKNOWN **)v2[1];
  }
  else
  {
    uint64_t v9 = v2[1];
    uint64_t v10 = swift_unknownObjectRetain();
    uint64_t v11 = sub_19E5F5AFC(v10, v9, 0, MEMORY[0x1E4FBC5E0], (uint64_t)sub_19E5F613C, &qword_1E945C160, sub_19E6CD8EC);
    swift_unknownObjectRelease_n();
    uint64_t v8 = &off_1EF0C70A8;
    *unint64_t v3 = v11;
    v3[1] = (uint64_t)&off_1EF0C70A8;
  }
  uint64_t v12 = swift_getObjectType();
  MEMORY[0x1F4188790](v12);
  v15[2] = v3;
  _OWORD v15[3] = a1;
  v15[4] = a2;
  uint64_t v13 = (void (*)(void, void, void, void, void))v8[5];
  swift_unknownObjectRetain();
  v13(sub_19E5F611C, v15, MEMORY[0x1E4FBC848] + 8, v12, v8);
  return swift_unknownObjectRelease();
}

uint64_t sub_19E5ED464(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = v2[1];
  Objectuint64_t Type = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(ObjectType, v6) & 1) != 0
    && swift_isUniquelyReferenced_nonNull())
  {
    uint64_t v8 = (_UNKNOWN **)v2[1];
  }
  else
  {
    uint64_t v9 = v2[1];
    uint64_t v10 = swift_unknownObjectRetain();
    uint64_t v11 = sub_19E5F5AFC(v10, v9, 0, MEMORY[0x1E4FBC150], (uint64_t)sub_19E5F603C, &qword_1E945C148, sub_19E6CDA88);
    swift_unknownObjectRelease_n();
    uint64_t v8 = &off_1EF0C70A8;
    *unint64_t v3 = v11;
    v3[1] = (uint64_t)&off_1EF0C70A8;
  }
  uint64_t v12 = swift_getObjectType();
  MEMORY[0x1F4188790](v12);
  v15[2] = v3;
  _OWORD v15[3] = a1;
  v15[4] = a2;
  uint64_t v13 = (void (*)(void, void, void, void, void))v8[5];
  swift_unknownObjectRetain();
  v13(sub_19E5F69AC, v15, MEMORY[0x1E4FBC848] + 8, v12, v8);
  return swift_unknownObjectRelease();
}

uint64_t sub_19E5ED5F0(uint64_t a1, uint64_t a2)
{
  void (*v29)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), void *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  id v33;
  void *v34;
  void v35[6];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t aBlock;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  void *v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;

  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  uint64_t v37 = (uint64_t *)(v4 + 16);
  *(void *)(v4 + 24) = a2;
  Objectuint64_t Type = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v7 = v6(ObjectType, a2);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  uint64_t v39 = v4;
  if (v8)
  {
    uint64_t v36 = a1;
    aBlock = MEMORY[0x1E4FBC860];
    sub_19EBF70D8();
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v10 + 1;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v7 + 8 * v10 + 32));
      sub_19EBF70A8();
      sub_19EBF7108();
      sub_19EBF7118();
      sub_19EBF70B8();
      uint64_t v10 = v11;
    }
    while (v8 != v11);
    uint64_t v38 = aBlock;
    swift_bridgeObjectRelease();
    uint64_t v4 = v39;
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v38 = MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    aBlock = v9;
    sub_19EBF70D8();
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v14 + 1;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v12 + 8 * v14 + 32));
      sub_19EBF70A8();
      sub_19EBF7108();
      sub_19EBF7118();
      sub_19EBF70B8();
      uint64_t v14 = v15;
    }
    while (v13 != v15);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C180);
  uint64_t v16 = swift_dynamicCastClass();
  if (v16)
  {
    uint64_t v17 = *(void **)(v16 + 16);
    id v18 = objc_allocWithZone((Class)MLMultiArray);
    sub_19E5F47F0();
    id v19 = v17;
    uint64_t v20 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v44 = sub_19E5F623C;
    uint64_t v45 = v4;
    aBlock = MEMORY[0x1E4F143A8];
    uint64_t v41 = 1107296256;
    uint64_t v42 = sub_19E5F2010;
    uint64_t v43 = &block_descriptor_32;
    uint64_t v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    id v23 = objc_msgSend(v18, sel_initWithPixelBuffer_shape_strides_mutableShapedBufferProvider_, v19, v20, v21, v22);
    _Block_release(v22);
    swift_unknownObjectRelease();
    swift_release_n();

LABEL_13:
    return (uint64_t)v23;
  }
  swift_beginAccess();
  uint64_t v24 = *(void *)(v4 + 24);
  uint64_t v25 = swift_getObjectType();
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
  swift_unknownObjectRetain();
  uint64_t v27 = v26(v25, v24);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v25, v24);
  uint64_t v37 = &v36;
  v35[2] = sub_19E5F4CBC;
  v35[3] = 0;
  v35[4] = v27;
  v35[5] = MEMORY[0x1F4188790](v28);
  uint64_t v29 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), void *, uint64_t, uint64_t, uint64_t))(v24 + 32);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C188);
  v29(&aBlock, sub_19E5F6280, v35, v30, v25, v24);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v32 = aBlock;
  if (aBlock)
  {
    uint64_t v33 = objc_allocWithZone((Class)MLMultiArray);
    sub_19E5F47F0();
    uint64_t v20 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v44 = sub_19E5F623C;
    uint64_t v45 = v39;
    aBlock = MEMORY[0x1E4F143A8];
    uint64_t v41 = 1107296256;
    uint64_t v42 = sub_19E5F2010;
    uint64_t v43 = &block_descriptor_29;
    uint64_t v34 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    id v23 = objc_msgSend(v33, sel_initWithBytesNoCopy_shape_dataType_strides_mutableShapedBufferProvider_, v32, v20, 65600, v21, v34);
    _Block_release(v34);
    swift_unknownObjectRelease();
    swift_release_n();
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E5EDBA4(uint64_t a1, uint64_t a2)
{
  void (*v29)(uint64_t *__return_ptr, void *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, void *@<X8>), void *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  id v33;
  void *v34;
  void v35[6];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t aBlock;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  void *v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;

  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  uint64_t v37 = (uint64_t *)(v4 + 16);
  *(void *)(v4 + 24) = a2;
  Objectuint64_t Type = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v7 = v6(ObjectType, a2);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  uint64_t v39 = v4;
  if (v8)
  {
    uint64_t v36 = a1;
    aBlock = MEMORY[0x1E4FBC860];
    sub_19EBF70D8();
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v10 + 1;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v7 + 8 * v10 + 32));
      sub_19EBF70A8();
      sub_19EBF7108();
      sub_19EBF7118();
      sub_19EBF70B8();
      uint64_t v10 = v11;
    }
    while (v8 != v11);
    uint64_t v38 = aBlock;
    swift_bridgeObjectRelease();
    uint64_t v4 = v39;
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v38 = MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    aBlock = v9;
    sub_19EBF70D8();
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v14 + 1;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v12 + 8 * v14 + 32));
      sub_19EBF70A8();
      sub_19EBF7108();
      sub_19EBF7118();
      sub_19EBF70B8();
      uint64_t v14 = v15;
    }
    while (v13 != v15);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C168);
  uint64_t v16 = swift_dynamicCastClass();
  if (v16)
  {
    uint64_t v17 = *(void **)(v16 + 16);
    id v18 = objc_allocWithZone((Class)MLMultiArray);
    sub_19E5F47F0();
    id v19 = v17;
    uint64_t v20 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v44 = sub_19E5F6170;
    uint64_t v45 = v4;
    aBlock = MEMORY[0x1E4F143A8];
    uint64_t v41 = 1107296256;
    uint64_t v42 = sub_19E5F2010;
    uint64_t v43 = &block_descriptor_23;
    uint64_t v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    id v23 = objc_msgSend(v18, sel_initWithPixelBuffer_shape_strides_mutableShapedBufferProvider_, v19, v20, v21, v22);
    _Block_release(v22);
    swift_unknownObjectRelease();
    swift_release_n();

LABEL_13:
    return (uint64_t)v23;
  }
  swift_beginAccess();
  uint64_t v24 = *(void *)(v4 + 24);
  uint64_t v25 = swift_getObjectType();
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
  swift_unknownObjectRetain();
  uint64_t v27 = v26(v25, v24);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v25, v24);
  uint64_t v37 = &v36;
  v35[2] = sub_19E5F69C8;
  v35[3] = 0;
  v35[4] = v27;
  v35[5] = MEMORY[0x1F4188790](v28);
  uint64_t v29 = *(void (**)(uint64_t *__return_ptr, void *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, void *@<X8>), void *, uint64_t, uint64_t, uint64_t))(v24 + 32);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C170);
  v29(&aBlock, sub_19E5F5AB4, v35, v30, v25, v24);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v32 = aBlock;
  if (aBlock)
  {
    uint64_t v33 = objc_allocWithZone((Class)MLMultiArray);
    sub_19E5F47F0();
    uint64_t v20 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v44 = sub_19E5F6170;
    uint64_t v45 = v39;
    aBlock = MEMORY[0x1E4F143A8];
    uint64_t v41 = 1107296256;
    uint64_t v42 = sub_19E5F2010;
    uint64_t v43 = &block_descriptor_20;
    uint64_t v34 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    id v23 = objc_msgSend(v33, sel_initWithBytesNoCopy_shape_dataType_strides_mutableShapedBufferProvider_, v32, v20, 65568, v21, v34);
    _Block_release(v34);
    swift_unknownObjectRelease();
    swift_release_n();
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E5EE158(uint64_t a1, uint64_t a2)
{
  void (*v29)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), void *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  id v33;
  void *v34;
  void v35[6];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t aBlock;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  void *v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;

  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  uint64_t v37 = (uint64_t *)(v4 + 16);
  *(void *)(v4 + 24) = a2;
  Objectuint64_t Type = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v7 = v6(ObjectType, a2);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  uint64_t v39 = v4;
  if (v8)
  {
    uint64_t v36 = a1;
    aBlock = MEMORY[0x1E4FBC860];
    sub_19EBF70D8();
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v10 + 1;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v7 + 8 * v10 + 32));
      sub_19EBF70A8();
      sub_19EBF7108();
      sub_19EBF7118();
      sub_19EBF70B8();
      uint64_t v10 = v11;
    }
    while (v8 != v11);
    uint64_t v38 = aBlock;
    swift_bridgeObjectRelease();
    uint64_t v4 = v39;
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v38 = MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    aBlock = v9;
    sub_19EBF70D8();
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v14 + 1;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v12 + 8 * v14 + 32));
      sub_19EBF70A8();
      sub_19EBF7108();
      sub_19EBF7118();
      sub_19EBF70B8();
      uint64_t v14 = v15;
    }
    while (v13 != v15);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE50);
  uint64_t v16 = swift_dynamicCastClass();
  if (v16)
  {
    uint64_t v17 = *(void **)(v16 + 16);
    id v18 = objc_allocWithZone((Class)MLMultiArray);
    sub_19E5F47F0();
    id v19 = v17;
    uint64_t v20 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v44 = sub_19E5F6070;
    uint64_t v45 = v4;
    aBlock = MEMORY[0x1E4F143A8];
    uint64_t v41 = 1107296256;
    uint64_t v42 = sub_19E5F2010;
    uint64_t v43 = &block_descriptor_14;
    uint64_t v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    id v23 = objc_msgSend(v18, sel_initWithPixelBuffer_shape_strides_mutableShapedBufferProvider_, v19, v20, v21, v22);
    _Block_release(v22);
    swift_unknownObjectRelease();
    swift_release_n();

LABEL_13:
    return (uint64_t)v23;
  }
  swift_beginAccess();
  uint64_t v24 = *(void *)(v4 + 24);
  uint64_t v25 = swift_getObjectType();
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
  swift_unknownObjectRetain();
  uint64_t v27 = v26(v25, v24);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v25, v24);
  uint64_t v37 = &v36;
  v35[2] = sub_19E5F69C8;
  v35[3] = 0;
  v35[4] = v27;
  v35[5] = MEMORY[0x1F4188790](v28);
  uint64_t v29 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), void *, uint64_t, uint64_t, uint64_t))(v24 + 32);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C158);
  v29(&aBlock, sub_19E5F60B4, v35, v30, v25, v24);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v32 = aBlock;
  if (aBlock)
  {
    uint64_t v33 = objc_allocWithZone((Class)MLMultiArray);
    sub_19E5F47F0();
    uint64_t v20 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v44 = sub_19E5F6070;
    uint64_t v45 = v39;
    aBlock = MEMORY[0x1E4F143A8];
    uint64_t v41 = 1107296256;
    uint64_t v42 = sub_19E5F2010;
    uint64_t v43 = &block_descriptor_11;
    uint64_t v34 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    id v23 = objc_msgSend(v33, sel_initWithBytesNoCopy_shape_dataType_strides_mutableShapedBufferProvider_, v32, v20, 65552, v21, v34);
    _Block_release(v34);
    swift_unknownObjectRelease();
    swift_release_n();
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E5EE70C(uint64_t a1, uint64_t a2)
{
  void (*v29)(uint64_t *__return_ptr, void *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, void *@<X8>), void *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  id v33;
  void *v34;
  void v35[6];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t aBlock;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  void *v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;

  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  uint64_t v37 = (uint64_t *)(v4 + 16);
  *(void *)(v4 + 24) = a2;
  Objectuint64_t Type = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v7 = v6(ObjectType, a2);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  uint64_t v39 = v4;
  if (v8)
  {
    uint64_t v36 = a1;
    aBlock = MEMORY[0x1E4FBC860];
    sub_19EBF70D8();
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v10 + 1;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v7 + 8 * v10 + 32));
      sub_19EBF70A8();
      sub_19EBF7108();
      sub_19EBF7118();
      sub_19EBF70B8();
      uint64_t v10 = v11;
    }
    while (v8 != v11);
    uint64_t v38 = aBlock;
    swift_bridgeObjectRelease();
    uint64_t v4 = v39;
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v38 = MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    aBlock = v9;
    sub_19EBF70D8();
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v14 + 1;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v12 + 8 * v14 + 32));
      sub_19EBF70A8();
      sub_19EBF7108();
      sub_19EBF7118();
      sub_19EBF70B8();
      uint64_t v14 = v15;
    }
    while (v13 != v15);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C138);
  uint64_t v16 = swift_dynamicCastClass();
  if (v16)
  {
    uint64_t v17 = *(void **)(v16 + 16);
    id v18 = objc_allocWithZone((Class)MLMultiArray);
    sub_19E5F47F0();
    id v19 = v17;
    uint64_t v20 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v44 = sub_19E5F5A70;
    uint64_t v45 = v4;
    aBlock = MEMORY[0x1E4F143A8];
    uint64_t v41 = 1107296256;
    uint64_t v42 = sub_19E5F2010;
    uint64_t v43 = &block_descriptor_5;
    uint64_t v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    id v23 = objc_msgSend(v18, sel_initWithPixelBuffer_shape_strides_mutableShapedBufferProvider_, v19, v20, v21, v22);
    _Block_release(v22);
    swift_unknownObjectRelease();
    swift_release_n();

LABEL_13:
    return (uint64_t)v23;
  }
  swift_beginAccess();
  uint64_t v24 = *(void *)(v4 + 24);
  uint64_t v25 = swift_getObjectType();
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
  swift_unknownObjectRetain();
  uint64_t v27 = v26(v25, v24);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v25, v24);
  uint64_t v37 = &v36;
  v35[2] = sub_19E5F69C8;
  v35[3] = 0;
  v35[4] = v27;
  v35[5] = MEMORY[0x1F4188790](v28);
  uint64_t v29 = *(void (**)(uint64_t *__return_ptr, void *(*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, void *@<X8>), void *, uint64_t, uint64_t, uint64_t))(v24 + 32);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C140);
  v29(&aBlock, sub_19E5F5AB4, v35, v30, v25, v24);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v32 = aBlock;
  if (aBlock)
  {
    uint64_t v33 = objc_allocWithZone((Class)MLMultiArray);
    sub_19E5F47F0();
    uint64_t v20 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)sub_19EBF68D8();
    swift_bridgeObjectRelease();
    uint64_t v44 = sub_19E5F5A70;
    uint64_t v45 = v39;
    aBlock = MEMORY[0x1E4F143A8];
    uint64_t v41 = 1107296256;
    uint64_t v42 = sub_19E5F2010;
    uint64_t v43 = &block_descriptor_1;
    uint64_t v34 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    id v23 = objc_msgSend(v33, sel_initWithBytesNoCopy_shape_dataType_strides_mutableShapedBufferProvider_, v32, v20, 131104, v21, v34);
    _Block_release(v34);
    swift_unknownObjectRelease();
    swift_release_n();
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E5EECC0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    unint64_t v5 = (uint64_t *)(result + 32);
    uint64_t v6 = 1;
    uint64_t v7 = (uint64_t *)(result + 32);
    uint64_t v8 = *(void *)(result + 16);
    do
    {
      uint64_t v9 = *v7++;
      uint64_t v10 = v6 * v9;
      if ((unsigned __int128)(v6 * (__int128)v9) >> 64 != (v6 * v9) >> 63)
      {
        __break(1u);
        goto LABEL_26;
      }
      uint64_t v6 = v10;
      --v8;
    }
    while (v8);
    if (!v10) {
      return 0;
    }
    uint64_t v11 = 1;
    while (1)
    {
      uint64_t v12 = *v5++;
      uint64_t v13 = v11 * v12;
      if ((unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63) {
        break;
      }
      uint64_t v11 = v13;
      if (!--v4)
      {
        if (!v13) {
          return 0;
        }
        goto LABEL_10;
      }
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_10:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_19E5EBFD0(v3, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    int64_t v16 = 1;
    goto LABEL_23;
  }
  int64_t v16 = *(void *)(v14 + 32);
  unint64_t v17 = v15 - 1;
  if (v15 == 1) {
    goto LABEL_23;
  }
  if (v15 >= 5)
  {
    unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFFCLL | 1;
    int64x2_t v19 = vdupq_n_s64(v16);
    uint64_t v20 = (int64x2_t *)(v14 + 56);
    unint64_t v21 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v22 = v19;
    do
    {
      int64x2_t v19 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v19, v20[-1]), (int8x16_t)v19, (int8x16_t)v20[-1]);
      int64x2_t v22 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v22, *v20), (int8x16_t)v22, *(int8x16_t *)v20);
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    int8x16_t v23 = vbslq_s8((int8x16_t)vcgtq_s64(v19, v22), (int8x16_t)v19, (int8x16_t)v22);
    uint64_t v24 = vextq_s8(v23, v23, 8uLL).u64[0];
    int64_t v16 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v23.i64[0], v24), *(int8x8_t *)v23.i8, (int8x8_t)v24);
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFFCLL)) {
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v18 = 1;
  }
  unint64_t v25 = v15 - v18;
  uint64_t v26 = (int64_t *)(v14 + 8 * v18 + 32);
  do
  {
    int64_t v28 = *v26++;
    int64_t v27 = v28;
    if (v16 <= v28) {
      int64_t v16 = v27;
    }
    --v25;
  }
  while (v25);
LABEL_23:
  unint64_t result = swift_bridgeObjectRelease();
  if (v16 + 0x4000000000000000 >= 0) {
    return 2 * v16;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_19E5EEE60(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    unint64_t v5 = (uint64_t *)(result + 32);
    uint64_t v6 = 1;
    uint64_t v7 = (uint64_t *)(result + 32);
    uint64_t v8 = *(void *)(result + 16);
    do
    {
      uint64_t v9 = *v7++;
      uint64_t v10 = v6 * v9;
      if ((unsigned __int128)(v6 * (__int128)v9) >> 64 != (v6 * v9) >> 63)
      {
        __break(1u);
        goto LABEL_26;
      }
      uint64_t v6 = v10;
      --v8;
    }
    while (v8);
    if (!v10) {
      return 0;
    }
    uint64_t v11 = 1;
    while (1)
    {
      uint64_t v12 = *v5++;
      uint64_t v13 = v11 * v12;
      if ((unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63) {
        break;
      }
      uint64_t v11 = v13;
      if (!--v4)
      {
        if (!v13) {
          return 0;
        }
        goto LABEL_10;
      }
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_10:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_19E5EBFD0(v3, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    int64_t v16 = 1;
    goto LABEL_23;
  }
  int64_t v16 = *(void *)(v14 + 32);
  unint64_t v17 = v15 - 1;
  if (v15 == 1) {
    goto LABEL_23;
  }
  if (v15 >= 5)
  {
    unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFFCLL | 1;
    int64x2_t v19 = vdupq_n_s64(v16);
    uint64_t v20 = (int64x2_t *)(v14 + 56);
    unint64_t v21 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v22 = v19;
    do
    {
      int64x2_t v19 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v19, v20[-1]), (int8x16_t)v19, (int8x16_t)v20[-1]);
      int64x2_t v22 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v22, *v20), (int8x16_t)v22, *(int8x16_t *)v20);
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    int8x16_t v23 = vbslq_s8((int8x16_t)vcgtq_s64(v19, v22), (int8x16_t)v19, (int8x16_t)v22);
    uint64_t v24 = vextq_s8(v23, v23, 8uLL).u64[0];
    int64_t v16 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v23.i64[0], v24), *(int8x8_t *)v23.i8, (int8x8_t)v24);
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFFCLL)) {
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v18 = 1;
  }
  unint64_t v25 = v15 - v18;
  uint64_t v26 = (int64_t *)(v14 + 8 * v18 + 32);
  do
  {
    int64_t v28 = *v26++;
    int64_t v27 = v28;
    if (v16 <= v28) {
      int64_t v16 = v27;
    }
    --v25;
  }
  while (v25);
LABEL_23:
  unint64_t result = swift_bridgeObjectRelease();
  if ((unint64_t)(v16 - 0x2000000000000000) >> 62 == 3) {
    return 4 * v16;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_19E5EF008(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    unint64_t v5 = (uint64_t *)(result + 32);
    uint64_t v6 = 1;
    uint64_t v7 = (uint64_t *)(result + 32);
    uint64_t v8 = *(void *)(result + 16);
    do
    {
      uint64_t v9 = *v7++;
      uint64_t v10 = v6 * v9;
      if ((unsigned __int128)(v6 * (__int128)v9) >> 64 != (v6 * v9) >> 63)
      {
        __break(1u);
        goto LABEL_26;
      }
      uint64_t v6 = v10;
      --v8;
    }
    while (v8);
    if (!v10) {
      return 0;
    }
    uint64_t v11 = 1;
    while (1)
    {
      uint64_t v12 = *v5++;
      uint64_t v13 = v11 * v12;
      if ((unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63) {
        break;
      }
      uint64_t v11 = v13;
      if (!--v4)
      {
        if (!v13) {
          return 0;
        }
        goto LABEL_10;
      }
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_10:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_19E5EBFD0(v3, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    int64_t v16 = 1;
    goto LABEL_23;
  }
  int64_t v16 = *(void *)(v14 + 32);
  unint64_t v17 = v15 - 1;
  if (v15 == 1) {
    goto LABEL_23;
  }
  if (v15 >= 5)
  {
    unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFFCLL | 1;
    int64x2_t v19 = vdupq_n_s64(v16);
    uint64_t v20 = (int64x2_t *)(v14 + 56);
    unint64_t v21 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v22 = v19;
    do
    {
      int64x2_t v19 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v19, v20[-1]), (int8x16_t)v19, (int8x16_t)v20[-1]);
      int64x2_t v22 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v22, *v20), (int8x16_t)v22, *(int8x16_t *)v20);
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    int8x16_t v23 = vbslq_s8((int8x16_t)vcgtq_s64(v19, v22), (int8x16_t)v19, (int8x16_t)v22);
    uint64_t v24 = vextq_s8(v23, v23, 8uLL).u64[0];
    int64_t v16 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v23.i64[0], v24), *(int8x8_t *)v23.i8, (int8x8_t)v24);
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFFCLL)) {
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v18 = 1;
  }
  unint64_t v25 = v15 - v18;
  uint64_t v26 = (int64_t *)(v14 + 8 * v18 + 32);
  do
  {
    int64_t v28 = *v26++;
    int64_t v27 = v28;
    if (v16 <= v28) {
      int64_t v16 = v27;
    }
    --v25;
  }
  while (v25);
LABEL_23:
  unint64_t result = swift_bridgeObjectRelease();
  if ((unint64_t)(v16 - 0x1000000000000000) >> 61 == 7) {
    return 8 * v16;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_19E5EF1B0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v16 = sub_19EBF6C98();
  int v17 = sub_19EBF6C98();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E5E799C(a2, (uint64_t)a3, v16, (uint64_t)v24);
  sub_19E5E7C14((uint64_t)v24, (uint64_t)v32, &qword_1E945C0D0);
  if (sub_19E5E7BF8((uint64_t)v32) == 1) {
    return 0;
  }
  uint64_t v21 = a8;
  v35[8] = v32[8];
  long long v36 = v33;
  long long v37 = v34;
  v35[4] = v32[4];
  v35[5] = v32[5];
  v35[6] = v32[6];
  v35[7] = v32[7];
  v35[0] = v32[0];
  v35[1] = v32[1];
  v35[2] = v32[2];
  v35[3] = v32[3];
  *(void *)&src.flags = *(void *)&v32[0];
  *(_OWORD *)src.std::string::size_type size = *(_OWORD *)((char *)v35 + 8);
  *(_OWORD *)&src.size[2] = *(_OWORD *)((char *)&v35[1] + 8);
  *(_OWORD *)&src.size[4] = *(_OWORD *)((char *)&v35[2] + 8);
  *(_OWORD *)&src.size[6] = *(_OWORD *)((char *)&v35[3] + 8);
  *(_OWORD *)src.stride = *(_OWORD *)((char *)&v35[4] + 8);
  *(_OWORD *)&src.stride[2] = *(_OWORD *)((char *)&v35[5] + 8);
  *(_OWORD *)&src.stride[4] = *(_OWORD *)((char *)&v35[6] + 8);
  src.data_type = v33;
  *(_OWORD *)&src.stride[6] = *(_OWORD *)((char *)&v35[7] + 8);
  sub_19E5E7C14((uint64_t)&v36 + 8, (uint64_t)v38, &qword_1E945C0D8);
  sub_19E5E7C14((uint64_t)v38, (uint64_t)&src.table_data, &qword_1E945C0D8);
  src.table_data_type = v37;
  *(void *)&src.data_scale = *(void *)((char *)&v37 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E5E799C(a5, (uint64_t)a6, v17, (uint64_t)v25);
  sub_19E5E7C14((uint64_t)v25, (uint64_t)v26, &qword_1E945C0D0);
  if (sub_19E5E7BF8((uint64_t)v26) == 1) {
    return 0;
  }
  *(_OWORD *)&v29[128] = v26[8];
  long long v30 = v27;
  long long v31 = v28;
  *(_OWORD *)&v29[64] = v26[4];
  *(_OWORD *)&v29[80] = v26[5];
  *(_OWORD *)&v29[96] = v26[6];
  *(_OWORD *)&v29[112] = v26[7];
  *(_OWORD *)uint64_t v29 = v26[0];
  *(_OWORD *)&v29[16] = v26[1];
  *(_OWORD *)&v29[32] = v26[2];
  *(_OWORD *)&v29[48] = v26[3];
  *(void *)&dest.flags = *(void *)&v26[0];
  *(_OWORD *)dest.std::string::size_type size = *(_OWORD *)&v29[8];
  *(_OWORD *)&dest.size[2] = *(_OWORD *)&v29[24];
  *(_OWORD *)&dest.size[4] = *(_OWORD *)&v29[40];
  *(_OWORD *)&dest.size[6] = *(_OWORD *)&v29[56];
  *(_OWORD *)dest.stride = *(_OWORD *)&v29[72];
  *(_OWORD *)&dest.stride[2] = *(_OWORD *)&v29[88];
  dest.data_type = v27;
  *(_OWORD *)&dest.stride[4] = *(_OWORD *)&v29[104];
  *(_OWORD *)&dest.stride[6] = *(_OWORD *)&v29[120];
  sub_19E5E7C14((uint64_t)&v30 + 8, (uint64_t)v39, &qword_1E945C0D8);
  sub_19E5E7C14((uint64_t)v39, (uint64_t)&dest.table_data, &qword_1E945C0D8);
  dest.table_data_type = v31;
  *(void *)&dest.data_scale = *(void *)((char *)&v31 + 4);
  int64x2_t v19 = (void *)(a7 + 4 * sub_19E669DA4(a1, a3));
  uint64_t v20 = sub_19E669DA4(a4, a6);
  src.data = v19;
  dest.data = (void *)(v21 + 4 * v20);
  BNNSCopy(&dest, &src, 0);
  return 1;
}

uint64_t sub_19E5EF550(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v16 = sub_19EBF6CF8();
  int v17 = sub_19EBF6CF8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E5E799C(a2, (uint64_t)a3, v16, (uint64_t)v24);
  sub_19E5E7C14((uint64_t)v24, (uint64_t)v32, &qword_1E945C0D0);
  if (sub_19E5E7BF8((uint64_t)v32) == 1) {
    return 0;
  }
  uint64_t v21 = a8;
  v35[8] = v32[8];
  long long v36 = v33;
  long long v37 = v34;
  v35[4] = v32[4];
  v35[5] = v32[5];
  v35[6] = v32[6];
  v35[7] = v32[7];
  v35[0] = v32[0];
  v35[1] = v32[1];
  v35[2] = v32[2];
  v35[3] = v32[3];
  *(void *)&src.flags = *(void *)&v32[0];
  *(_OWORD *)src.std::string::size_type size = *(_OWORD *)((char *)v35 + 8);
  *(_OWORD *)&src.size[2] = *(_OWORD *)((char *)&v35[1] + 8);
  *(_OWORD *)&src.size[4] = *(_OWORD *)((char *)&v35[2] + 8);
  *(_OWORD *)&src.size[6] = *(_OWORD *)((char *)&v35[3] + 8);
  *(_OWORD *)src.stride = *(_OWORD *)((char *)&v35[4] + 8);
  *(_OWORD *)&src.stride[2] = *(_OWORD *)((char *)&v35[5] + 8);
  *(_OWORD *)&src.stride[4] = *(_OWORD *)((char *)&v35[6] + 8);
  src.data_type = v33;
  *(_OWORD *)&src.stride[6] = *(_OWORD *)((char *)&v35[7] + 8);
  sub_19E5E7C14((uint64_t)&v36 + 8, (uint64_t)v38, &qword_1E945C0D8);
  sub_19E5E7C14((uint64_t)v38, (uint64_t)&src.table_data, &qword_1E945C0D8);
  src.table_data_type = v37;
  *(void *)&src.data_scale = *(void *)((char *)&v37 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E5E799C(a5, (uint64_t)a6, v17, (uint64_t)v25);
  sub_19E5E7C14((uint64_t)v25, (uint64_t)v26, &qword_1E945C0D0);
  if (sub_19E5E7BF8((uint64_t)v26) == 1) {
    return 0;
  }
  *(_OWORD *)&v29[128] = v26[8];
  long long v30 = v27;
  long long v31 = v28;
  *(_OWORD *)&v29[64] = v26[4];
  *(_OWORD *)&v29[80] = v26[5];
  *(_OWORD *)&v29[96] = v26[6];
  *(_OWORD *)&v29[112] = v26[7];
  *(_OWORD *)uint64_t v29 = v26[0];
  *(_OWORD *)&v29[16] = v26[1];
  *(_OWORD *)&v29[32] = v26[2];
  *(_OWORD *)&v29[48] = v26[3];
  *(void *)&dest.flags = *(void *)&v26[0];
  *(_OWORD *)dest.std::string::size_type size = *(_OWORD *)&v29[8];
  *(_OWORD *)&dest.size[2] = *(_OWORD *)&v29[24];
  *(_OWORD *)&dest.size[4] = *(_OWORD *)&v29[40];
  *(_OWORD *)&dest.size[6] = *(_OWORD *)&v29[56];
  *(_OWORD *)dest.stride = *(_OWORD *)&v29[72];
  *(_OWORD *)&dest.stride[2] = *(_OWORD *)&v29[88];
  dest.data_type = v27;
  *(_OWORD *)&dest.stride[4] = *(_OWORD *)&v29[104];
  *(_OWORD *)&dest.stride[6] = *(_OWORD *)&v29[120];
  sub_19E5E7C14((uint64_t)&v30 + 8, (uint64_t)v39, &qword_1E945C0D8);
  sub_19E5E7C14((uint64_t)v39, (uint64_t)&dest.table_data, &qword_1E945C0D8);
  dest.table_data_type = v31;
  *(void *)&dest.data_scale = *(void *)((char *)&v31 + 4);
  int64x2_t v19 = (void *)(a7 + 2 * sub_19E669DA4(a1, a3));
  uint64_t v20 = sub_19E669DA4(a4, a6);
  src.data = v19;
  dest.data = (void *)(v21 + 2 * v20);
  BNNSCopy(&dest, &src, 0);
  return 1;
}

uint64_t sub_19E5EF8F0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v16 = sub_19EBF6CB8();
  int v17 = sub_19EBF6CB8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E5E799C(a2, (uint64_t)a3, v16, (uint64_t)v24);
  sub_19E5E7C14((uint64_t)v24, (uint64_t)v32, &qword_1E945C0D0);
  if (sub_19E5E7BF8((uint64_t)v32) == 1) {
    return 0;
  }
  uint64_t v21 = a8;
  v35[8] = v32[8];
  long long v36 = v33;
  long long v37 = v34;
  v35[4] = v32[4];
  v35[5] = v32[5];
  v35[6] = v32[6];
  v35[7] = v32[7];
  v35[0] = v32[0];
  v35[1] = v32[1];
  v35[2] = v32[2];
  v35[3] = v32[3];
  *(void *)&src.flags = *(void *)&v32[0];
  *(_OWORD *)src.std::string::size_type size = *(_OWORD *)((char *)v35 + 8);
  *(_OWORD *)&src.size[2] = *(_OWORD *)((char *)&v35[1] + 8);
  *(_OWORD *)&src.size[4] = *(_OWORD *)((char *)&v35[2] + 8);
  *(_OWORD *)&src.size[6] = *(_OWORD *)((char *)&v35[3] + 8);
  *(_OWORD *)src.stride = *(_OWORD *)((char *)&v35[4] + 8);
  *(_OWORD *)&src.stride[2] = *(_OWORD *)((char *)&v35[5] + 8);
  *(_OWORD *)&src.stride[4] = *(_OWORD *)((char *)&v35[6] + 8);
  src.data_type = v33;
  *(_OWORD *)&src.stride[6] = *(_OWORD *)((char *)&v35[7] + 8);
  sub_19E5E7C14((uint64_t)&v36 + 8, (uint64_t)v38, &qword_1E945C0D8);
  sub_19E5E7C14((uint64_t)v38, (uint64_t)&src.table_data, &qword_1E945C0D8);
  src.table_data_type = v37;
  *(void *)&src.data_scale = *(void *)((char *)&v37 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E5E799C(a5, (uint64_t)a6, v17, (uint64_t)v25);
  sub_19E5E7C14((uint64_t)v25, (uint64_t)v26, &qword_1E945C0D0);
  if (sub_19E5E7BF8((uint64_t)v26) == 1) {
    return 0;
  }
  *(_OWORD *)&v29[128] = v26[8];
  long long v30 = v27;
  long long v31 = v28;
  *(_OWORD *)&v29[64] = v26[4];
  *(_OWORD *)&v29[80] = v26[5];
  *(_OWORD *)&v29[96] = v26[6];
  *(_OWORD *)&v29[112] = v26[7];
  *(_OWORD *)uint64_t v29 = v26[0];
  *(_OWORD *)&v29[16] = v26[1];
  *(_OWORD *)&v29[32] = v26[2];
  *(_OWORD *)&v29[48] = v26[3];
  *(void *)&dest.flags = *(void *)&v26[0];
  *(_OWORD *)dest.std::string::size_type size = *(_OWORD *)&v29[8];
  *(_OWORD *)&dest.size[2] = *(_OWORD *)&v29[24];
  *(_OWORD *)&dest.size[4] = *(_OWORD *)&v29[40];
  *(_OWORD *)&dest.size[6] = *(_OWORD *)&v29[56];
  *(_OWORD *)dest.stride = *(_OWORD *)&v29[72];
  *(_OWORD *)&dest.stride[2] = *(_OWORD *)&v29[88];
  dest.data_type = v27;
  *(_OWORD *)&dest.stride[4] = *(_OWORD *)&v29[104];
  *(_OWORD *)&dest.stride[6] = *(_OWORD *)&v29[120];
  sub_19E5E7C14((uint64_t)&v30 + 8, (uint64_t)v39, &qword_1E945C0D8);
  sub_19E5E7C14((uint64_t)v39, (uint64_t)&dest.table_data, &qword_1E945C0D8);
  dest.table_data_type = v31;
  *(void *)&dest.data_scale = *(void *)((char *)&v31 + 4);
  int64x2_t v19 = (void *)(a7 + 4 * sub_19E669DA4(a1, a3));
  uint64_t v20 = sub_19E669DA4(a4, a6);
  src.data = v19;
  dest.data = (void *)(v21 + 4 * v20);
  BNNSCopy(&dest, &src, 0);
  return 1;
}

uint64_t MLSendableFeatureValue.type.getter()
{
  uint64_t result = *(void *)v0;
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      uint64_t result = 1;
      break;
    case 2:
    case 3:
    case 4:
      uint64_t result = 2;
      break;
    case 5:
      uint64_t result = 3;
      break;
    case 6:
      uint64_t result = 7;
      break;
    case 7:
    case 8:
      uint64_t result = 6;
      break;
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
      uint64_t result = 5;
      break;
    default:
      return result;
  }
  return result;
}

BOOL MLSendableFeatureValue.isUndefined.getter()
{
  return *(unsigned char *)(v0 + 16) == 0;
}

uint64_t MLSendableFeatureValue.isScalar.getter()
{
  return (*(unsigned __int8 *)(v0 + 16) < 5u) & (0x1Au >> *(unsigned char *)(v0 + 16));
}

uint64_t MLSendableFeatureValue.isShapedArray.getter()
{
  return (*(unsigned __int8 *)(v0 + 16) < 0xDuLL) & (0x1A00u >> *(unsigned char *)(v0 + 16));
}

uint64_t MLSendableFeatureValue.integerValue.getter()
{
  if (v0[16] == 1) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

uint64_t MLSendableFeatureValue.float16Value.getter()
{
  int v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 16);
  BOOL v3 = v2 == 2;
  int v4 = v2 != 2;
  if (!v3) {
    int v1 = 0;
  }
  return v1 | (v4 << 16);
}

uint64_t MLSendableFeatureValue.floatValue.getter()
{
  uint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 16);
  BOOL v3 = v2 == 3;
  uint64_t v4 = v2 != 3;
  if (!v3) {
    uint64_t v1 = 0;
  }
  return v1 | (v4 << 32);
}

uint64_t MLSendableFeatureValue.doubleValue.getter()
{
  if (v0[16] == 4) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

uint64_t MLSendableFeatureValue.stringValue.getter()
{
  if (*((unsigned char *)v0 + 16) != 5) {
    return 0;
  }
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLSendableFeatureValue.stringArrayValue.getter()
{
  if (*(unsigned char *)(v0 + 16) == 6) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t MLSendableFeatureValue.stringDictionaryValue.getter()
{
  if (*(unsigned char *)(v0 + 16) == 7) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t MLSendableFeatureValue.integerDictionaryValue.getter()
{
  if (*(unsigned char *)(v0 + 16) == 8) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

void MLSendableFeatureValue.shapedArrayValue<A>(of:)(uint64_t a1@<X8>)
{
  int v3 = *(unsigned __int8 *)(v1 + 16);
  if (v3 == 12)
  {
    if (swift_dynamicCastMetatype())
    {
      swift_unknownObjectRetain();
      uint64_t v4 = (uint64_t *)&unk_1E945C0F8;
      goto LABEL_11;
    }
  }
  else if (v3 == 11)
  {
    if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
    {
      swift_unknownObjectRetain();
      uint64_t v4 = (uint64_t *)&unk_1E945C100;
      goto LABEL_11;
    }
  }
  else if (v3 == 9 && swift_dynamicCastMetatype())
  {
    swift_unknownObjectRetain();
    uint64_t v4 = (uint64_t *)&unk_1E945C108;
LABEL_11:
    __swift_instantiateConcreteTypeFromMangledName(v4);
    type metadata accessor for MLShapedArray();
    swift_dynamicCast();
    *(_OWORD *)a1 = v5;
    return;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = 0;
}

uint64_t MLSendableFeatureValue.init(undefined:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x278], 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t MLSendableFeatureValue.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x278], 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  *(void *)a2 = (int)result;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x278], 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  *(void *)a2 = result;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x278], 8) = 0;
  *(unsigned char *)(a2 + 16) = 6;
  return result;
}

{
  *(void *)a2 = result;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x278], 8) = 0;
  *(unsigned char *)(a2 + 16) = 7;
  return result;
}

{
  *(void *)a2 = result;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x278], 8) = 0;
  *(unsigned char *)(a2 + 16) = 8;
  return result;
}

void MLSendableFeatureValue.init(_:)(uint64_t a1@<X8>, unsigned int a2@<S0>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
}

{
  *(void *)a1 = a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = 0;
  *(unsigned char *)(a1 + 16) = 3;
}

void MLSendableFeatureValue.init(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = 0;
  *(unsigned char *)(a1 + 16) = 4;
}

uint64_t MLSendableFeatureValue.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x278], 8) = a2;
  *(unsigned char *)(a3 + 16) = 5;
  return result;
}

uint64_t MLSendableFeatureValue.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_19E5F348C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v3;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x278], 8) = 0;
  *(unsigned char *)(a2 + 16) = 7;
  return result;
}

{
  void *v3;
  uint64_t result;

  uint64_t v3 = sub_19E5F3640(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v3;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x278], 8) = 0;
  *(unsigned char *)(a2 + 16) = 8;
  return result;
}

uint64_t MLSendableFeatureValue.init<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for MLShapedArray();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C108);
    uint64_t result = swift_dynamicCast();
    long long v3 = v5;
    char v4 = 9;
LABEL_9:
    *(_OWORD *)a1 = v3;
    *(unsigned char *)(a1 + 16) = v4;
    return result;
  }
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for MLShapedArray();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C110);
    uint64_t result = swift_dynamicCast();
    long long v3 = v5;
    char v4 = 10;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for MLShapedArray();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C100);
    uint64_t result = swift_dynamicCast();
    long long v3 = v5;
    char v4 = 11;
    goto LABEL_9;
  }
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for MLShapedArray();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C0F8);
    uint64_t result = swift_dynamicCast();
    long long v3 = v5;
    char v4 = 12;
    goto LABEL_9;
  }
  sub_19EBF6FE8();
  swift_bridgeObjectRelease();
  sub_19EBF75D8();
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  uint64_t result = sub_19EBF71F8();
  __break(1u);
  return result;
}

void MLSendableFeatureValue.init(_:)(void *a1@<X0>, _OWORD *a2@<X8>)
{
  switch((unint64_t)objc_msgSend(a1, sel_type))
  {
    case 0uLL:
      id v6 = objc_msgSend(a1, (SEL)&selRef_taskIdentifier);
      uint64_t v7 = a1;
      unint64_t v8 = (unint64_t)v6;

      char v4 = 0;
      *a2 = v8;
      goto LABEL_4;
    case 1uLL:
      id v9 = objc_msgSend(a1, sel_int64Value);
      uint64_t v10 = a1;
      unint64_t v11 = (unint64_t)v9;

      char v4 = 1;
      *a2 = v11;
      goto LABEL_4;
    case 2uLL:
      objc_msgSend(a1, sel_doubleValue);
      unint64_t v105 = v5;

      char v4 = 4;
      *a2 = v105;
      goto LABEL_4;
    case 3uLL:
      long long v27 = a1;
      id v28 = objc_msgSend(a1, sel_stringValue);
      uint64_t v29 = sub_19EBF6798();
      uint64_t v31 = v30;

      *(void *)&long long v32 = v29;
      *((void *)&v32 + 1) = v31;
      char v4 = 5;
      *a2 = v32;
      goto LABEL_4;
    case 5uLL:
      long long v33 = a1;
      id v34 = objc_msgSend(a1, sel_multiArrayValue);
      if (!v34) {
        goto LABEL_136;
      }
      uint64_t v35 = v34;
      uint64_t v36 = (uint64_t)objc_msgSend(v34, sel_dataType);
      if (v36 > 65599)
      {
        if (v36 == 131104)
        {
          sub_19E5EA084(v35, (size_t *)&v121);

          char v4 = 9;
          *a2 = v121;
          goto LABEL_4;
        }
        if (v36 == 65600)
        {
          sub_19E5E8D78(v35, (size_t *)&v121);

          char v4 = 12;
          *a2 = v121;
          goto LABEL_4;
        }
      }
      else
      {
        if (v36 == 65552)
        {
          sub_19E5E9A24(v35, (size_t *)&v121);

          char v4 = 10;
          *a2 = v121;
          goto LABEL_4;
        }
        if (v36 == 65568)
        {
          sub_19E5E93D8(v35, (size_t *)&v121);

          char v4 = 11;
          *a2 = v121;
          goto LABEL_4;
        }
      }

      goto LABEL_3;
    case 6uLL:
      uint64_t v101 = a1;
      id v12 = objc_msgSend(a1, sel_dictionaryValue);
      sub_19E5F47F0();
      uint64_t v13 = sub_19EBF6638();

      uint64_t v14 = v13 + 64;
      uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
      uint64_t v16 = -1;
      if (v15 < 64) {
        uint64_t v16 = ~(-1 << v15);
      }
      unint64_t v17 = v16 & *(void *)(v13 + 64);
      int64_t v18 = (unint64_t)(v15 + 63) >> 6;
      swift_bridgeObjectRetain_n();
      int64_t v19 = 0;
      uint64_t v100 = a2;
      break;
    case 7uLL:
      long long v37 = a1;
      id v38 = objc_msgSend(a1, sel_sequenceValue);
      if (!v38) {
        goto LABEL_137;
      }
      uint64_t v39 = v38;
      if (objc_msgSend(v38, (SEL)&selRef_taskIdentifier) == (id)3)
      {
        id v40 = objc_msgSend(v39, sel_stringValues);
        uint64_t v41 = sub_19EBF68E8();

        char v4 = 6;
        *a2 = (unint64_t)v41;
        goto LABEL_4;
      }

      goto LABEL_3;
    default:

      goto LABEL_3;
  }
  do
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v19 << 6);
    }
    else
    {
      int64_t v24 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
        goto LABEL_124;
      }
      if (v24 >= v18) {
        goto LABEL_70;
      }
      unint64_t v25 = *(void *)(v14 + 8 * v24);
      ++v19;
      if (!v25)
      {
        int64_t v19 = v24 + 1;
        if (v24 + 1 >= v18) {
          goto LABEL_70;
        }
        unint64_t v25 = *(void *)(v14 + 8 * v19);
        if (!v25)
        {
          int64_t v19 = v24 + 2;
          if (v24 + 2 >= v18) {
            goto LABEL_70;
          }
          unint64_t v25 = *(void *)(v14 + 8 * v19);
          if (!v25)
          {
            int64_t v19 = v24 + 3;
            if (v24 + 3 >= v18) {
              goto LABEL_70;
            }
            unint64_t v25 = *(void *)(v14 + 8 * v19);
            if (!v25)
            {
              int64_t v19 = v24 + 4;
              if (v24 + 4 >= v18) {
                goto LABEL_70;
              }
              unint64_t v25 = *(void *)(v14 + 8 * v19);
              if (!v25)
              {
                int64_t v26 = v24 + 5;
                if (v26 >= v18)
                {
LABEL_70:
                  swift_release();
                  swift_bridgeObjectRelease();
                  int64_t v54 = *(void *)(v13 + 16);
                  if (!v54)
                  {
                    swift_bridgeObjectRelease();
                    uint64_t v64 = MEMORY[0x1E4FBC860];
                    goto LABEL_113;
                  }
                  uint64_t v110 = MEMORY[0x1E4FBC860];
                  sub_19E66F6C8(0, v54, 0);
                  uint64_t v55 = sub_19E5F4768(v13);
                  if ((v55 & 0x8000000000000000) == 0)
                  {
                    unint64_t v57 = v55;
                    if (v55 < 1 << *(unsigned char *)(v13 + 32))
                    {
                      uint64_t v58 = 0;
                      uint64_t v99 = v13 + 80;
                      uint64_t v104 = v13 + 64;
                      uint64_t v106 = v13;
                      int64_t v102 = v54;
                      int v103 = v56;
                      while (1)
                      {
                        unint64_t v59 = v57 >> 6;
                        if ((*(void *)(v14 + 8 * (v57 >> 6)) & (1 << v57)) == 0) {
                          goto LABEL_125;
                        }
                        if (*(_DWORD *)(v13 + 36) != v56) {
                          goto LABEL_126;
                        }
                        sub_19E5F4830(*(void *)(v13 + 48) + 40 * v57, (uint64_t)&v121);
                        id v124 = *(id *)(*(void *)(v13 + 56) + 8 * v57);
                        unint64_t v60 = v124;
                        sub_19E5F4830((uint64_t)&v121, (uint64_t)&v118);
                        *((void *)&v120 + 1) = v60;
                        long long v115 = v118;
                        long long v116 = v119;
                        *(_OWORD *)unint64_t v117 = v120;
                        id v61 = v60;
                        sub_19E5F4974((uint64_t)&v121);
                        sub_19E5F4830((uint64_t)&v115, (uint64_t)&v113);
                        id v114 = v117[1];
                        swift_dynamicCast();
                        sub_19E5F4830((uint64_t)&v115, (uint64_t)v111);
                        id v112 = v117[1];
                        objc_msgSend(v117[1], sel_doubleValue);
                        uint64_t v63 = v62;
                        sub_19E5F488C((uint64_t)v111);
                        sub_19E5F4974((uint64_t)&v115);
                        uint64_t v64 = v110;
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                        {
                          sub_19E66F6C8(0, *(void *)(v110 + 16) + 1, 1);
                          uint64_t v64 = v110;
                        }
                        unint64_t v66 = *(void *)(v64 + 16);
                        unint64_t v65 = *(void *)(v64 + 24);
                        if (v66 >= v65 >> 1)
                        {
                          sub_19E66F6C8(v65 > 1, v66 + 1, 1);
                          uint64_t v64 = v110;
                        }
                        *(void *)(v64 + 16) = v66 + 1;
                        uint64_t v67 = (void *)(v64 + 24 * v66);
                        v67[4] = v108;
                        v67[5] = v109;
                        v67[6] = v63;
                        uint64_t v13 = v106;
                        uint64_t v68 = 1 << *(unsigned char *)(v106 + 32);
                        if ((uint64_t)v57 >= v68) {
                          goto LABEL_127;
                        }
                        uint64_t v14 = v104;
                        uint64_t v69 = *(void *)(v104 + 8 * v59);
                        if ((v69 & (1 << v57)) == 0) {
                          goto LABEL_128;
                        }
                        int v56 = v103;
                        if (*(_DWORD *)(v106 + 36) != v103) {
                          goto LABEL_129;
                        }
                        unint64_t v70 = v69 & (-2 << (v57 & 0x3F));
                        if (v70)
                        {
                          unint64_t v57 = __clz(__rbit64(v70)) | v57 & 0xFFFFFFFFFFFFFFC0;
                          int64_t v71 = v102;
                        }
                        else
                        {
                          unint64_t v72 = v59 + 1;
                          unint64_t v73 = (unint64_t)(v68 + 63) >> 6;
                          int64_t v71 = v102;
                          if (v59 + 1 >= v73)
                          {
LABEL_91:
                            unint64_t v57 = 1 << *(unsigned char *)(v106 + 32);
                          }
                          else
                          {
                            unint64_t v74 = *(void *)(v104 + 8 * v72);
                            if (!v74)
                            {
                              do
                              {
                                if (v73 - 2 == v59) {
                                  goto LABEL_91;
                                }
                                unint64_t v74 = *(void *)(v99 + 8 * v59++);
                              }
                              while (!v74);
                              unint64_t v72 = v59 + 1;
                            }
                            unint64_t v57 = __clz(__rbit64(v74)) + (v72 << 6);
                          }
                        }
                        if (++v58 == v71) {
                          break;
                        }
                        if ((v57 & 0x8000000000000000) != 0 || (uint64_t)v57 >= v68) {
                          goto LABEL_124;
                        }
                      }
                      swift_bridgeObjectRelease();
LABEL_113:
                      a2 = v100;
                      if (*(void *)(v64 + 16))
                      {
                        __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C120);
                        uint64_t v93 = sub_19EBF7268();
                      }
                      else
                      {
                        uint64_t v93 = MEMORY[0x1E4FBC868];
                      }
                      *(void *)&long long v121 = v93;
                      v94 = (void *)swift_bridgeObjectRetain();
                      sub_19E5F3D40(v94, 1, &v121);

                      swift_bridgeObjectRelease();
                      *(void *)&long long v95 = v121;
                      char v4 = 7;
                      *uint64_t v100 = v95;
                      goto LABEL_4;
                    }
                  }
LABEL_124:
                  __break(1u);
LABEL_125:
                  __break(1u);
LABEL_126:
                  __break(1u);
LABEL_127:
                  __break(1u);
LABEL_128:
                  __break(1u);
LABEL_129:
                  __break(1u);
LABEL_130:
                  __break(1u);
LABEL_131:
                  __break(1u);
LABEL_132:
                  __break(1u);
LABEL_133:
                  __break(1u);
                  goto LABEL_134;
                }
                unint64_t v25 = *(void *)(v14 + 8 * v26);
                if (!v25)
                {
                  while (1)
                  {
                    int64_t v19 = v26 + 1;
                    if (__OFADD__(v26, 1)) {
                      break;
                    }
                    if (v19 >= v18) {
                      goto LABEL_70;
                    }
                    unint64_t v25 = *(void *)(v14 + 8 * v19);
                    ++v26;
                    if (v25) {
                      goto LABEL_31;
                    }
                  }
LABEL_134:
                  __break(1u);
                  goto LABEL_135;
                }
                int64_t v19 = v26;
              }
            }
          }
        }
      }
LABEL_31:
      unint64_t v17 = (v25 - 1) & v25;
      unint64_t v21 = __clz(__rbit64(v25)) + (v19 << 6);
    }
    sub_19E5F4830(*(void *)(v13 + 48) + 40 * v21, (uint64_t)&v121);
    long long v118 = v121;
    long long v119 = v122;
    *(void *)&long long v120 = v123;
    int64x2_t v22 = (void *)sub_19EBF6FA8();
    self;
    uint64_t v23 = swift_dynamicCastObjCClass();

    sub_19E5F488C((uint64_t)&v118);
  }
  while (v23);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v42 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v43 = -1;
  if (v42 < 64) {
    uint64_t v43 = ~(-1 << v42);
  }
  unint64_t v44 = v43 & *(void *)(v13 + 64);
  int64_t v45 = (unint64_t)(v42 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  int64_t v46 = 0;
  while (v44)
  {
    unint64_t v47 = __clz(__rbit64(v44));
    v44 &= v44 - 1;
    unint64_t v48 = v47 | (v46 << 6);
LABEL_45:
    sub_19E5F4830(*(void *)(v13 + 48) + 40 * v48, (uint64_t)&v121);
    long long v118 = v121;
    long long v119 = v122;
    *(void *)&long long v120 = v123;
    uint64_t v49 = (void *)sub_19EBF6FA8();
    self;
    uint64_t v50 = swift_dynamicCastObjCClass();

    sub_19E5F488C((uint64_t)&v118);
    if (!v50)
    {

      swift_release();
      swift_bridgeObjectRelease_n();
LABEL_3:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      char v4 = -1;
      goto LABEL_4;
    }
  }
  int64_t v51 = v46 + 1;
  if (__OFADD__(v46, 1)) {
    goto LABEL_130;
  }
  if (v51 < v45)
  {
    unint64_t v52 = *(void *)(v14 + 8 * v51);
    ++v46;
    if (!v52)
    {
      int64_t v46 = v51 + 1;
      if (v51 + 1 >= v45) {
        goto LABEL_96;
      }
      unint64_t v52 = *(void *)(v14 + 8 * v46);
      if (!v52)
      {
        int64_t v46 = v51 + 2;
        if (v51 + 2 >= v45) {
          goto LABEL_96;
        }
        unint64_t v52 = *(void *)(v14 + 8 * v46);
        if (!v52)
        {
          int64_t v46 = v51 + 3;
          if (v51 + 3 >= v45) {
            goto LABEL_96;
          }
          unint64_t v52 = *(void *)(v14 + 8 * v46);
          if (!v52)
          {
            int64_t v46 = v51 + 4;
            if (v51 + 4 >= v45) {
              goto LABEL_96;
            }
            unint64_t v52 = *(void *)(v14 + 8 * v46);
            if (!v52)
            {
              int64_t v53 = v51 + 5;
              if (v53 >= v45) {
                goto LABEL_96;
              }
              unint64_t v52 = *(void *)(v14 + 8 * v53);
              if (!v52)
              {
                while (1)
                {
                  int64_t v46 = v53 + 1;
                  if (__OFADD__(v53, 1)) {
                    break;
                  }
                  if (v46 >= v45) {
                    goto LABEL_96;
                  }
                  unint64_t v52 = *(void *)(v14 + 8 * v46);
                  ++v53;
                  if (v52) {
                    goto LABEL_64;
                  }
                }
LABEL_135:
                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
                swift_unexpectedError();
                __break(1u);
                JUMPOUT(0x19E5F1030);
              }
              int64_t v46 = v53;
            }
          }
        }
      }
    }
LABEL_64:
    unint64_t v44 = (v52 - 1) & v52;
    unint64_t v48 = __clz(__rbit64(v52)) + (v46 << 6);
    goto LABEL_45;
  }
LABEL_96:
  swift_release();
  swift_bridgeObjectRelease();
  int64_t v75 = *(void *)(v13 + 16);
  if (v75)
  {
    uint64_t v107 = MEMORY[0x1E4FBC860];
    sub_19E66F6A8(0, v75, 0);
    uint64_t v76 = sub_19E5F4768(v13);
    int v78 = v77;
    char v80 = v79 & 1;
    uint64_t v81 = v107;
    for (int64_t i = v75 - 1; ; --i)
    {
      id v83 = sub_19E5F48E0(&v121, v76, v78, v80 & 1, v13);
      id v124 = v83;
      sub_19E5F4830((uint64_t)&v121, (uint64_t)&v118);
      *((void *)&v120 + 1) = v83;
      long long v115 = v118;
      long long v116 = v119;
      *(_OWORD *)unint64_t v117 = v120;
      id v84 = v83;
      sub_19E5F4974((uint64_t)&v121);
      sub_19E5F4830((uint64_t)&v115, (uint64_t)&v113);
      id v114 = v117[1];
      unint64_t v85 = (void *)sub_19EBF6FA8();
      sub_19E5F488C((uint64_t)&v113);
      self;
      id v86 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_integerValue);

      sub_19E5F4830((uint64_t)&v115, (uint64_t)v111);
      id v112 = v117[1];
      objc_msgSend(v117[1], sel_doubleValue);
      uint64_t v88 = v87;
      sub_19E5F488C((uint64_t)v111);
      sub_19E5F4974((uint64_t)&v115);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19E66F6A8(0, *(void *)(v81 + 16) + 1, 1);
        uint64_t v81 = v107;
      }
      unint64_t v90 = *(void *)(v81 + 16);
      unint64_t v89 = *(void *)(v81 + 24);
      if (v90 >= v89 >> 1)
      {
        sub_19E66F6A8(v89 > 1, v90 + 1, 1);
        uint64_t v81 = v107;
      }
      *(void *)(v81 + 16) = v90 + 1;
      uint64_t v91 = v81 + 16 * v90;
      *(void *)(v91 + 32) = v86;
      *(void *)(v91 + 40) = v88;
      if (v76 < 0 || v76 >= -(-1 << *(unsigned char *)(v13 + 32))) {
        goto LABEL_131;
      }
      if (((*(void *)(v14 + (((unint64_t)v76 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v76) & 1) == 0) {
        goto LABEL_132;
      }
      if (*(_DWORD *)(v13 + 36) != v78) {
        goto LABEL_133;
      }
      uint64_t v92 = sub_19EBF6F88();
      if (!i) {
        break;
      }
      uint64_t v76 = v92;
      char v80 = 0;
      int v78 = *(_DWORD *)(v13 + 36);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v81 = MEMORY[0x1E4FBC860];
  }
  if (*(void *)(v81 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE30);
    uint64_t v96 = sub_19EBF7268();
  }
  else
  {
    uint64_t v96 = MEMORY[0x1E4FBC868];
  }
  *(void *)&long long v121 = v96;
  id v97 = (void *)swift_bridgeObjectRetain();
  sub_19E5F39F0(v97, 1, &v121);

  swift_bridgeObjectRelease();
  *(void *)&long long v98 = v121;
  char v4 = 8;
  *a2 = v98;
LABEL_4:
  *((unsigned char *)a2 + 16) = v4;
}

uint64_t static MLSendableFeatureValue.== infix(_:_:)(long long *a1, long long *a2)
{
  char v2 = *((unsigned char *)a1 + 16);
  char v3 = *((unsigned char *)a2 + 16);
  long long v7 = *a1;
  char v8 = v2;
  long long v5 = *a2;
  char v6 = v3;
  return sub_19E5F4CC4((void **)&v7, (void **)&v5) & 1;
}

uint64_t sub_19E5F10A0(long long *a1, long long *a2)
{
  char v2 = *((unsigned char *)a1 + 16);
  char v3 = *((unsigned char *)a2 + 16);
  long long v7 = *a1;
  char v8 = v2;
  long long v5 = *a2;
  char v6 = v3;
  return sub_19E5F4CC4((void **)&v7, (void **)&v5) & 1;
}

unint64_t MLSendableFeatureValue.debugDescription.getter()
{
  return sub_19E5F1128();
}

unint64_t sub_19E5F1128()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      unint64_t v7 = 0xD000000000000011;
      sub_19EBF7318();
      goto LABEL_12;
    case 2:
      unint64_t v7 = 0;
      sub_19EBF6FE8();
      sub_19EBF67D8();
      sub_19EBF7558();
      return v7;
    case 3:
      unint64_t v7 = 0;
      sub_19EBF6FE8();
      sub_19EBF67D8();
      sub_19EBF6B08();
      return v7;
    case 4:
      unint64_t v7 = 0;
      sub_19EBF6FE8();
      sub_19EBF67D8();
      sub_19EBF6AE8();
      return v7;
    case 5:
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      unint64_t v7 = 0xD000000000000010;
      sub_19EBF67D8();
      return v7;
    case 6:
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      unint64_t v7 = 0xD000000000000016;
      MEMORY[0x19F3BF220](v1, MEMORY[0x1E4FBB1A0]);
      goto LABEL_12;
    case 7:
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      unint64_t v7 = 0xD00000000000001BLL;
      goto LABEL_11;
    case 8:
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      unint64_t v7 = 0xD00000000000001CLL;
LABEL_11:
      sub_19EBF6648();
LABEL_12:
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      return v7;
    case 9:
      swift_unknownObjectRetain();
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      unint64_t v7 = 0xD00000000000001ELL;
      sub_19E5F3104(v1, v2);
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      uint64_t v3 = v1;
      uint64_t v4 = v2;
      char v5 = 9;
      goto LABEL_17;
    case 0xA:
      swift_unknownObjectRetain();
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      unint64_t v7 = 0xD000000000000020;
      sub_19E5F2FEC(v1, v2);
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      uint64_t v3 = v1;
      uint64_t v4 = v2;
      char v5 = 10;
      goto LABEL_17;
    case 0xB:
      swift_unknownObjectRetain();
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      unint64_t v7 = 0xD00000000000001ELL;
      sub_19E5F2ED4(v1, v2);
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      uint64_t v3 = v1;
      uint64_t v4 = v2;
      char v5 = 11;
      goto LABEL_17;
    case 0xC:
      swift_unknownObjectRetain();
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      unint64_t v7 = 0xD00000000000001FLL;
      sub_19E5F2DBC(v1, v2);
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      uint64_t v3 = v1;
      uint64_t v4 = v2;
      char v5 = 12;
LABEL_17:
      sub_19E5F5740(v3, v4, v5);
      break;
    default:
      unint64_t v7 = 0;
      sub_19EBF6FE8();
      sub_19EBF67D8();
      type metadata accessor for MLFeatureType(0);
      sub_19EBF7188();
      break;
  }
  return v7;
}

unint64_t sub_19E5F16F4()
{
  return sub_19E5F1128();
}

uint64_t sub_19E5F1730(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    double v18 = *(double *)(*(void *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_19E662844(v16, v17);
    char v21 = v20;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(double *)(*(void *)(a2 + 56) + 8 * v19) != v18) {
      return 0;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

unint64_t sub_19E5F18E4(unint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    uint64_t v15 = 8 * v11;
    double v16 = *(double *)(*(void *)(v3 + 56) + v15);
    uint64_t result = sub_19E6628BC(*(void *)(*(void *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(double *)(*(void *)(a2 + 56) + 8 * result) != v16) {
      return 0;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

id MLFeatureValue.init(_:)(uint64_t a1)
{
  id v1 = *(id *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  switch(*(unsigned char *)(a1 + 16))
  {
    case 1:
      goto LABEL_11;
    case 2:
      _H8 = *(void *)a1;
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
      __asm { FCVT            D0, H8 }
      id v3 = objc_msgSend(ObjCClassFromMetadata, sel_featureValueWithDouble_, _D0);
      goto LABEL_12;
    case 3:
      id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_featureValueWithDouble_, *(float *)&v1);
      goto LABEL_12;
    case 4:
      id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_featureValueWithDouble_, *(double *)&v1);
      goto LABEL_12;
    case 5:
      long long v27 = (void *)swift_getObjCClassFromMetadata();
      id v28 = (void *)sub_19EBF6788();
      sub_19E5F5740((uint64_t)v1, v2, 5);
      id v1 = objc_msgSend(v27, sel_featureValueWithString_, v28);

      return v1;
    case 6:
      uint64_t v29 = (void *)swift_getObjCClassFromMetadata();
      uint64_t v30 = (void *)sub_19EBF68D8();
      sub_19E5F5740((uint64_t)v1, v2, 6);
      id v31 = objc_msgSend(self, sel_sequenceWithStringArray_, v30);

      id v32 = objc_msgSend(v29, sel_featureValueWithSequence_, v31);
      return v32;
    case 7:
      int64_t v24 = (void *)swift_getObjCClassFromMetadata();
      sub_19E5F37CC((uint64_t)v1);
      sub_19E5F5740((uint64_t)v1, v2, 7);
      sub_19E5F47F0();
      unint64_t v25 = (void *)sub_19EBF6628();
      swift_release();
      id v1 = objc_msgSend(v24, sel_featureValueWithStringKeyDictionary_, v25);

      if (v1) {
        return v1;
      }
      __break(1u);
LABEL_11:
      id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_featureValueWithInt64_, v1);
      goto LABEL_12;
    case 8:
      long long v33 = sub_19E5E8258(*(void *)a1);
      sub_19E5F5740((uint64_t)v1, v2, 8);
      if (v33[2])
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE20);
        uint64_t v34 = sub_19EBF7268();
      }
      else
      {
        uint64_t v34 = MEMORY[0x1E4FBC868];
      }
      uint64_t v41 = v34;
      id v38 = (void *)swift_bridgeObjectRetain();
      sub_19E5F40C4(v38, 1, &v41);
      swift_bridgeObjectRelease();
      uint64_t v39 = (void *)swift_getObjCClassFromMetadata();
      sub_19E5F47F0();
      sub_19E5F57A0();
      id v40 = (void *)sub_19EBF6628();
      swift_release();
      id v1 = objc_msgSend(v39, sel_featureValueWithInt64KeyDictionary_, v40);

      if (!v1)
      {
        __break(1u);
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x19E5F1F6CLL);
      }
      return v1;
    case 9:
      int64_t v14 = (void *)swift_getObjCClassFromMetadata();
      uint64_t v15 = swift_unknownObjectRetain();
      double v16 = (void *)sub_19E5EE70C(v15, v2);
      id v7 = objc_msgSend(v14, sel_featureValueWithMultiArray_, v16);

      uint64_t v8 = (uint64_t)v1;
      uint64_t v9 = v2;
      char v10 = 9;
      goto LABEL_20;
    case 0xA:
      uint64_t v35 = (void *)swift_getObjCClassFromMetadata();
      uint64_t v36 = swift_unknownObjectRetain();
      long long v37 = (void *)sub_19E5EE158(v36, v2);
      id v7 = objc_msgSend(v35, sel_featureValueWithMultiArray_, v37);

      uint64_t v8 = (uint64_t)v1;
      uint64_t v9 = v2;
      char v10 = 10;
      goto LABEL_20;
    case 0xB:
      int64_t v4 = (void *)swift_getObjCClassFromMetadata();
      uint64_t v5 = swift_unknownObjectRetain();
      uint64_t v6 = (void *)sub_19E5EDBA4(v5, v2);
      id v7 = objc_msgSend(v4, sel_featureValueWithMultiArray_, v6);

      uint64_t v8 = (uint64_t)v1;
      uint64_t v9 = v2;
      char v10 = 11;
      goto LABEL_20;
    case 0xC:
      unint64_t v11 = (void *)swift_getObjCClassFromMetadata();
      uint64_t v12 = swift_unknownObjectRetain();
      unint64_t v13 = (void *)sub_19E5ED5F0(v12, v2);
      id v7 = objc_msgSend(v11, sel_featureValueWithMultiArray_, v13);

      uint64_t v8 = (uint64_t)v1;
      uint64_t v9 = v2;
      char v10 = 12;
LABEL_20:
      sub_19E5F5740(v8, v9, v10);
      id result = v7;
      break;
    default:
      id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_undefinedFeatureValueWithType_, v1);
LABEL_12:
      id result = v3;
      break;
  }
  return result;
}

uint64_t sub_19E5F1FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void *))
{
  v8[2] = a1;
  _OWORD v8[3] = a2;
  swift_beginAccess();
  a5(a4, v8);
  return swift_endAccess();
}

uint64_t sub_19E5F2010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

uint64_t sub_19E5F2070(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E63AD88(a2, (uint64_t)a3, 8, (uint64_t)v24);
  sub_19E5E7C14((uint64_t)v24, (uint64_t)v30, &qword_1E945C150);
  if (v34) {
    return 0;
  }
  vImagePixelCount v16 = v31;
  vImagePixelCount v17 = v32;
  size_t v18 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E63AD88(a5, (uint64_t)a6, 8, (uint64_t)v25);
  sub_19E5E7C14((uint64_t)v25, (uint64_t)v26, &qword_1E945C150);
  if (v29) {
    return 0;
  }
  long long v21 = v27;
  size_t v20 = v28;
  src.data = (void *)(a7 + 8 * sub_19E669DA4(a1, a3));
  src.height = v16;
  src.width = v17;
  src.rowBytes = v18;
  dest.data = (void *)(a8 + 8 * sub_19E669DA4(a4, a6));
  *(_OWORD *)&dest.height = v21;
  dest.rowBytes = v20;
  vImageCopyBuffer(&src, &dest, 8uLL, 0x10u);
  return 1;
}

uint64_t sub_19E5F2200(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E63AD88(a2, (uint64_t)a3, 4, (uint64_t)v24);
  sub_19E5E7C14((uint64_t)v24, (uint64_t)v30, &qword_1E945C150);
  if (v34) {
    return 0;
  }
  vImagePixelCount v16 = v31;
  vImagePixelCount v17 = v32;
  size_t v18 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E63AD88(a5, (uint64_t)a6, 4, (uint64_t)v25);
  sub_19E5E7C14((uint64_t)v25, (uint64_t)v26, &qword_1E945C150);
  if (v29) {
    return 0;
  }
  long long v21 = v27;
  size_t v20 = v28;
  src.data = (void *)(a7 + 4 * sub_19E669DA4(a1, a3));
  src.height = v16;
  src.width = v17;
  src.rowBytes = v18;
  dest.data = (void *)(a8 + 4 * sub_19E669DA4(a4, a6));
  *(_OWORD *)&dest.height = v21;
  dest.rowBytes = v20;
  vImageCopyBuffer(&src, &dest, 4uLL, 0x10u);
  return 1;
}

uint64_t sub_19E5F2390(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E63AD88(a2, (uint64_t)a3, 2, (uint64_t)v24);
  sub_19E5E7C14((uint64_t)v24, (uint64_t)v30, &qword_1E945C150);
  if (v34) {
    return 0;
  }
  vImagePixelCount v16 = v31;
  vImagePixelCount v17 = v32;
  size_t v18 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E63AD88(a5, (uint64_t)a6, 2, (uint64_t)v25);
  sub_19E5E7C14((uint64_t)v25, (uint64_t)v26, &qword_1E945C150);
  if (v29) {
    return 0;
  }
  long long v21 = v27;
  size_t v20 = v28;
  src.data = (void *)(a7 + 2 * sub_19E669DA4(a1, a3));
  src.height = v16;
  src.width = v17;
  src.rowBytes = v18;
  dest.data = (void *)(a8 + 2 * sub_19E669DA4(a4, a6));
  *(_OWORD *)&dest.height = v21;
  dest.rowBytes = v20;
  vImageCopyBuffer(&src, &dest, 2uLL, 0x10u);
  return 1;
}

uint64_t sub_19E5F2520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  Objectuint64_t Type = swift_getObjectType();
  char v10 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 8);
  uint64_t v11 = v10(ObjectType, a4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(ObjectType, a4);
  unint64_t v13 = *(void *)(v11 + 16);
  if (v13 != *(void *)(result + 16))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v14 = result;
  uint64_t v15 = sub_19E60F71C(0, v13);
  uint64_t result = v10(ObjectType, a4);
  unint64_t v16 = *(void *)(result + 16);
  if (v16 != *(void *)(a5 + 16))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v17 = result;
  swift_bridgeObjectRetain();
  uint64_t result = sub_19E60F71C(0, v16);
  if (!a1)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (*a6)
  {
    a7(v15, v11, v14, result, v17, a5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_19E5F26A0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  a3(&var1);
  if (!v3) {
    char v4 = var1;
  }
  return v4 & 1;
}

uint64_t sub_19E5F2704(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  a3(&var1);
  if (!v3) {
    char v4 = var1;
  }
  return v4 & 1;
}

uint64_t sub_19E5F2764(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  a3(&var1);
  if (!v3) {
    char v4 = var1;
  }
  return v4 & 1;
}

void *sub_19E5F27C8(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr))
{
  uint64_t result = a3(&v5);
  if (!v3) {
    return (void *)v5;
  }
  return result;
}

void *sub_19E5F2828(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr))
{
  uint64_t result = a3(&v5);
  if (!v3) {
    return (void *)v5;
  }
  return result;
}

void *sub_19E5F2884(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr))
{
  uint64_t result = a3(&v5);
  if (!v3) {
    return (void *)v5;
  }
  return result;
}

void *sub_19E5F28E4(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr))
{
  uint64_t result = a3(&v5);
  if (!v3) {
    return (void *)v5;
  }
  return result;
}

void *sub_19E5F294C(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr))
{
  uint64_t result = a3(&v5);
  if (!v3) {
    return (void *)v5;
  }
  return result;
}

void *sub_19E5F29B0(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr))
{
  uint64_t result = a3(&v5);
  if (!v3) {
    return (void *)v5;
  }
  return result;
}

uint64_t sub_19E5F2A18(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a3 + 8);
  Objectuint64_t Type = swift_getObjectType();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  swift_unknownObjectRetain();
  uint64_t v10 = v9(ObjectType, v7);
  swift_unknownObjectRelease();
  uint64_t v11 = *(void *)(a3 + 8);
  uint64_t v12 = swift_getObjectType();
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
  swift_unknownObjectRetain();
  uint64_t v14 = v13(v12, v11);
  swift_unknownObjectRelease();
  uint64_t v15 = (a2 - a1) / 8;
  if (!a1) {
    uint64_t v15 = 0;
  }
  v18[0] = a1;
  v18[1] = v15;
  a4(v18, v10, v14);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19E5F2B50(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a3 + 8);
  Objectuint64_t Type = swift_getObjectType();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  swift_unknownObjectRetain();
  uint64_t v10 = v9(ObjectType, v7);
  swift_unknownObjectRelease();
  uint64_t v11 = *(void *)(a3 + 8);
  uint64_t v12 = swift_getObjectType();
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
  swift_unknownObjectRetain();
  uint64_t v14 = v13(v12, v11);
  swift_unknownObjectRelease();
  uint64_t v15 = (a2 - a1) / 2;
  if (!a1) {
    uint64_t v15 = 0;
  }
  v18[0] = a1;
  v18[1] = v15;
  a4(v18, v10, v14);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19E5F2C84(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a3 + 8);
  Objectuint64_t Type = swift_getObjectType();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  swift_unknownObjectRetain();
  uint64_t v10 = v9(ObjectType, v7);
  swift_unknownObjectRelease();
  uint64_t v11 = *(void *)(a3 + 8);
  uint64_t v12 = swift_getObjectType();
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
  swift_unknownObjectRetain();
  uint64_t v14 = v13(v12, v11);
  swift_unknownObjectRelease();
  uint64_t v15 = (a2 - a1) / 4;
  if (!a1) {
    uint64_t v15 = 0;
  }
  v18[0] = a1;
  v18[1] = v15;
  a4(v18, v10, v14);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19E5F2DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(sub_19E5E88F8((uint64_t)sub_19E5F49D4, 0, a1, a2) + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      ++v3;
      sub_19EBF7188();
      sub_19EBF67D8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_19E5F2ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(sub_19E5E8A18((uint64_t)sub_19E5F4A00, 0, a1, a2) + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      ++v3;
      sub_19EBF7188();
      sub_19EBF67D8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_19E5F2FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(sub_19E5E8B38((uint64_t)sub_19E5F4BA0, 0, a1, a2) + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      ++v3;
      sub_19EBF7188();
      sub_19EBF67D8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_19E5F3104(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(sub_19E5E8C58((uint64_t)sub_19E5F4BCC, 0, a1, a2) + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      ++v3;
      sub_19EBF7188();
      sub_19EBF67D8();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return 0;
}

int64_t sub_19E5F321C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  int64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v5 = vdupq_n_s64(v2);
      uint64_t v6 = (int64x2_t *)(a1 + 56);
      unint64_t v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v8 = v5;
      do
      {
        int64x2_t v5 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, v6[-1]), (int8x16_t)v5, (int8x16_t)v6[-1]);
        int64x2_t v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, *v6), (int8x16_t)v8, *(int8x16_t *)v6);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      int8x16_t v9 = vbslq_s8((int8x16_t)vcgtq_s64(v5, v8), (int8x16_t)v5, (int8x16_t)v8);
      uint64_t v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      int64_t v2 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v9.i64[0], v10), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL)) {
        return v2;
      }
    }
    else
    {
      unint64_t v4 = 1;
    }
    unint64_t v11 = v1 - v4;
    uint64_t v12 = (int64_t *)(a1 + 8 * v4 + 32);
    do
    {
      int64_t v14 = *v12++;
      int64_t v13 = v14;
      if (v2 <= v14) {
        int64_t v2 = v13;
      }
      --v11;
    }
    while (v11);
  }
  return v2;
}

void *sub_19E5F32D0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (*(void *)(a3 + 16) != *(void *)(a4 + 16))
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    JUMPOUT(0x19E5F33A0);
  }
  uint64_t v10 = a5(a3, a4);
  uint64_t v11 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v11) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_11;
      }
      uint64_t v11 = (int)v11;
LABEL_7:
      if (v10 != v11) {
        goto LABEL_10;
      }
      v5[4] = a3;
      v5[5] = a4;
      v5[2] = a1;
      v5[3] = a2;
      return v5;
    case 2uLL:
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      BOOL v14 = __OFSUB__(v12, v13);
      uint64_t v11 = v12 - v13;
      if (!v14) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v11 = BYTE6(a2);
      goto LABEL_7;
  }
}

void *sub_19E5F33B0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a3 + 16) != *(void *)(a4 + 16))
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    JUMPOUT(0x19E5F347CLL);
  }
  uint64_t v9 = sub_19E5EEE60(a3, a4);
  uint64_t v10 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v10) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_11;
      }
      uint64_t v10 = (int)v10;
LABEL_7:
      if (v9 != v10) {
        goto LABEL_10;
      }
      v4[4] = a3;
      v4[5] = a4;
      v4[2] = a1;
      v4[3] = a2;
      return v4;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v10 = v11 - v12;
      if (!v13) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v10 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_19E5F348C(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C120);
  uint64_t result = sub_19EBF7238();
  unint64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = result + 64;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    unint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t result = v16[1];
    uint64_t v18 = 8 * i;
    double v19 = (double)*(uint64_t *)(*(void *)(a1 + 56) + 8 * i);
    *(void *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    size_t v20 = (void *)(v3[6] + 16 * i);
    *size_t v20 = v17;
    v20[1] = result;
    *(double *)(v3[7] + v1_Block_object_dispose(&STACK[0x278], 8) = v19;
    uint64_t v21 = v3[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v3[2] = v23;
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v9) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        return (uint64_t)v3;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v9) {
          return (uint64_t)v3;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v9) {
    return (uint64_t)v3;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_19E5F3640(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE30);
  uint64_t result = (void *)sub_19EBF7238();
  int64_t v3 = 0;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    uint64_t v14 = 8 * i;
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8 * i);
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    *(void *)((char *)result + ((i >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << i;
    *(void *)(result[6] + v14) = v15;
    *(double *)(result[7] + v14) = (double)v16;
    uint64_t v17 = result[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    result[2] = v19;
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_24;
    }
    if (v11 >= v8) {
      return result;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        return result;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          return result;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v7 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v8) {
    return result;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      return result;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_19E5F37CC(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C130);
  uint64_t result = (void *)sub_19EBF7238();
  int64_t v3 = result;
  int64_t v4 = 0;
  uint64_t v28 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v26 = v6;
  int64_t v27 = (unint64_t)(v8 + 63) >> 6;
  int64_t v11 = (char *)(result + 8);
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v12 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v28 + 48) + 16 * i);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    double v20 = *(double *)(*(void *)(v28 + 56) + 8 * i);
    id v21 = objc_allocWithZone(NSNumber);
    swift_bridgeObjectRetain();
    uint64_t result = objc_msgSend(v21, sel_initWithDouble_, v20);
    *(void *)&v11[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    BOOL v22 = (void *)(v3[6] + 16 * i);
    *BOOL v22 = v19;
    v22[1] = v18;
    *(void *)(v3[7] + 8 * i) = result;
    uint64_t v23 = v3[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v3[2] = v25;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v14 >= v27) {
      return v3;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v27) {
        return v3;
      }
      unint64_t v15 = *(void *)(v26 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v27) {
          return v3;
        }
        unint64_t v15 = *(void *)(v26 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v10 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v27) {
    return v3;
  }
  unint64_t v15 = *(void *)(v26 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v27) {
      return v3;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_19E5F39F0(void *a1, char a2, void *a3)
{
  uint64_t v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)*a3;
  unint64_t v11 = sub_19E6628BC(v7);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_19E66640C();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    double v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v21 = 8 * v11;
    *(void *)(v20[6] + v21) = v7;
    *(void *)(v20[7] + v21) = v8;
    uint64_t v22 = v20[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v20[2] = v24;
    uint64_t v25 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v26 = a1 + 7;
    while (1)
    {
      uint64_t v27 = *(v26 - 1);
      uint64_t v28 = *v26;
      char v29 = (void *)*a3;
      unint64_t v30 = sub_19E6628BC(v27);
      uint64_t v32 = v29[2];
      BOOL v33 = (v31 & 1) == 0;
      BOOL v23 = __OFADD__(v32, v33);
      uint64_t v34 = v32 + v33;
      if (v23) {
        break;
      }
      char v35 = v31;
      if (v29[3] < v34)
      {
        sub_19E66395C(v34, 1);
        unint64_t v30 = sub_19E6628BC(v27);
        if ((v35 & 1) != (v36 & 1)) {
          goto LABEL_25;
        }
      }
      if (v35) {
        goto LABEL_10;
      }
      long long v37 = (void *)*a3;
      *(void *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      uint64_t v38 = 8 * v30;
      *(void *)(v37[6] + v3_Block_object_dispose(&STACK[0x278], 8) = v27;
      *(void *)(v37[7] + v3_Block_object_dispose(&STACK[0x278], 8) = v28;
      uint64_t v39 = v37[2];
      BOOL v23 = __OFADD__(v39, 1);
      uint64_t v40 = v39 + 1;
      if (v23) {
        goto LABEL_24;
      }
      v37[2] = v40;
      v26 += 2;
      if (!--v25) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_19E66395C(v14, a2 & 1);
  unint64_t v16 = sub_19E6628BC(v7);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v18 = (void *)swift_allocError();
    swift_willThrow();
    id v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945C970);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_19EBF7408();
  __break(1u);
LABEL_26:
  sub_19EBF6FE8();
  sub_19EBF67D8();
  sub_19EBF7188();
  sub_19EBF67D8();
  sub_19EBF71F8();
  __break(1u);
}

void sub_19E5F3D40(void *a1, char a2, void *a3)
{
  uint64_t v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v8 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v9 = a1[6];
  swift_bridgeObjectRetain();
  char v10 = (void *)*a3;
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_19E662844(v8, v7);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14)) {
    goto LABEL_23;
  }
  char v16 = v11;
  if (v10[3] >= v15)
  {
    if (a2)
    {
      if (v11) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_19E66659C();
      if (v16) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v21 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    uint64_t v22 = (uint64_t *)(v21[6] + 16 * v12);
    *uint64_t v22 = v8;
    v22[1] = v7;
    *(void *)(v21[7] + 8 * v12) = v9;
    uint64_t v23 = v21[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    uint64_t v26 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v27 = a1 + 9;
    while (1)
    {
      uint64_t v29 = *(v27 - 2);
      uint64_t v28 = *(v27 - 1);
      uint64_t v30 = *v27;
      char v31 = (void *)*a3;
      swift_bridgeObjectRetain();
      unint64_t v32 = sub_19E662844(v29, v28);
      uint64_t v34 = v31[2];
      BOOL v35 = (v33 & 1) == 0;
      BOOL v24 = __OFADD__(v34, v35);
      uint64_t v36 = v34 + v35;
      if (v24) {
        break;
      }
      char v37 = v33;
      if (v31[3] < v36)
      {
        sub_19E663C08(v36, 1);
        unint64_t v32 = sub_19E662844(v29, v28);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_25;
        }
      }
      if (v37) {
        goto LABEL_10;
      }
      uint64_t v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      uint64_t v40 = (uint64_t *)(v39[6] + 16 * v32);
      *uint64_t v40 = v29;
      v40[1] = v28;
      *(void *)(v39[7] + 8 * v32) = v30;
      uint64_t v41 = v39[2];
      BOOL v24 = __OFADD__(v41, 1);
      uint64_t v42 = v41 + 1;
      if (v24) {
        goto LABEL_24;
      }
      v39[2] = v42;
      v27 += 3;
      if (!--v26) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_19E663C08(v15, a2 & 1);
  unint64_t v17 = sub_19E662844(v8, v7);
  if ((v16 & 1) == (v18 & 1))
  {
    unint64_t v12 = v17;
    if ((v16 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    id v19 = (void *)swift_allocError();
    swift_willThrow();
    id v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945C970);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_19EBF7408();
  __break(1u);
LABEL_26:
  sub_19EBF6FE8();
  sub_19EBF67D8();
  sub_19EBF7188();
  sub_19EBF67D8();
  sub_19EBF71F8();
  __break(1u);
}

void sub_19E5F40C4(void *a1, char a2, void *a3)
{
  uint64_t v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = (void *)a1[5];
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)*a3;
  id v10 = v7;
  id v11 = v8;
  unint64_t v13 = sub_19E662B10((uint64_t)v10);
  uint64_t v14 = v9[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15)) {
    goto LABEL_23;
  }
  char v17 = v12;
  if (v9[3] >= v16)
  {
    if (a2)
    {
      if (v12) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_19E66674C();
      if (v17) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v22 = (void *)*a3;
    *(void *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    uint64_t v23 = 8 * v13;
    *(void *)(v22[6] + v23) = v10;
    *(void *)(v22[7] + v23) = v11;
    uint64_t v24 = v22[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v26;
    uint64_t v27 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v28 = (void **)(a1 + 7);
    while (1)
    {
      uint64_t v29 = *v28;
      uint64_t v30 = (void *)*a3;
      id v10 = *(v28 - 1);
      id v11 = v29;
      unint64_t v31 = sub_19E662B10((uint64_t)v10);
      uint64_t v33 = v30[2];
      BOOL v34 = (v32 & 1) == 0;
      BOOL v25 = __OFADD__(v33, v34);
      uint64_t v35 = v33 + v34;
      if (v25) {
        break;
      }
      char v36 = v32;
      if (v30[3] < v35)
      {
        sub_19E663F10(v35, 1);
        unint64_t v31 = sub_19E662B10((uint64_t)v10);
        if ((v36 & 1) != (v37 & 1)) {
          goto LABEL_25;
        }
      }
      if (v36) {
        goto LABEL_10;
      }
      char v38 = (void *)*a3;
      *(void *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      uint64_t v39 = 8 * v31;
      *(void *)(v38[6] + v39) = v10;
      *(void *)(v38[7] + v39) = v11;
      uint64_t v40 = v38[2];
      BOOL v25 = __OFADD__(v40, 1);
      uint64_t v41 = v40 + 1;
      if (v25) {
        goto LABEL_24;
      }
      v38[2] = v41;
      v28 += 2;
      if (!--v27) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_19E663F10(v16, a2 & 1);
  unint64_t v18 = sub_19E662B10((uint64_t)v10);
  if ((v17 & 1) == (v19 & 1))
  {
    unint64_t v13 = v18;
    if ((v17 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    id v20 = (void *)swift_allocError();
    swift_willThrow();
    id v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945C970);
    if ((swift_dynamicCast() & 1) == 0)
    {

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_19E5F47F0();
  sub_19EBF7408();
  __break(1u);
LABEL_26:
  sub_19EBF6FE8();
  sub_19EBF67D8();
  sub_19E5F47F0();
  sub_19EBF7188();
  sub_19EBF67D8();
  sub_19EBF71F8();
  __break(1u);
}

uint64_t sub_19E5F443C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(void *__return_ptr, char *)@<X4>, void (*a6)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t)@<X6>, unsigned char *a7@<X8>)
{
  uint64_t v9 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a6((void *)((char *)v17 + 1), a1, a2, a3, a4);
  a5(v17, (char *)v17 + 1);
  if (v9)
  {
    uint64_t v30 = v18;
    sub_19E5D8438((uint64_t)&v30);
    uint64_t v29 = v19;
    sub_19E5D8438((uint64_t)&v29);
    long long v26 = v20;
    uint64_t v28 = v20;
    sub_19E5D8438((uint64_t)&v28);
    sub_19E5E7C14((uint64_t)&v26 + 8, (uint64_t)v27, (uint64_t *)&unk_1E945B960);
    return sub_19E5D8438((uint64_t)v27);
  }
  else
  {
    uint64_t v25 = v18;
    sub_19E5D8438((uint64_t)&v25);
    uint64_t v24 = v19;
    sub_19E5D8438((uint64_t)&v24);
    long long v21 = v20;
    uint64_t v23 = v20;
    sub_19E5D8438((uint64_t)&v23);
    sub_19E5E7C14((uint64_t)&v21 + 8, (uint64_t)v22, (uint64_t *)&unk_1E945B960);
    uint64_t result = sub_19E5D8438((uint64_t)v22);
    *a7 = v17[0];
  }
  return result;
}

uint64_t sub_19E5F45B4@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void *)@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v5 = a1[2];
  uint64_t v16 = a1[1];
  uint64_t v17 = *a1;
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[5];
  uint64_t v14 = *a2;
  uint64_t v15 = a1[4];
  uint64_t v9 = a2[3];
  uint64_t v12 = a2[4];
  uint64_t v13 = a2[1];
  uint64_t v10 = a2[5];
  uint64_t v30 = a2[2];
  uint64_t v8 = v30;
  long long v25 = *((_OWORD *)a2 + 2);
  uint64_t v27 = v25;
  uint64_t v28 = v9;
  sub_19E5E7C14((uint64_t)&v25 + 8, (uint64_t)v26, (uint64_t *)&unk_1E945B960);
  uint64_t v23 = v6;
  uint64_t v24 = v5;
  long long v20 = *((_OWORD *)v4 + 2);
  uint64_t v22 = v20;
  sub_19E5E7C14((uint64_t)&v20 + 8, (uint64_t)v21, (uint64_t *)&unk_1E945B960);
  v29[0] = v14;
  v29[1] = v13;
  void v29[2] = v8;
  v29[3] = v9;
  v29[4] = v12;
  v29[5] = v10;
  v29[6] = v17;
  v29[7] = v16;
  v29[8] = v5;
  unsigned char v29[9] = v6;
  v29[10] = v15;
  v29[11] = v7;
  sub_19E5F63A4((uint64_t)&v30);
  sub_19E5F63A4((uint64_t)&v28);
  sub_19E5F63A4((uint64_t)&v27);
  sub_19E5F63A4((uint64_t)v26);
  sub_19E5F63A4((uint64_t)&v24);
  sub_19E5F63A4((uint64_t)&v23);
  sub_19E5F63A4((uint64_t)&v22);
  sub_19E5F63A4((uint64_t)v21);
  LOBYTE(v4) = a3(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v4 & 1;
  return result;
}

uint64_t sub_19E5F4768(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

unint64_t sub_19E5F47F0()
{
  unint64_t result = qword_1E945BB10;
  if (!qword_1E945BB10)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E945BB10);
  }
  return result;
}

uint64_t sub_19E5F4830(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_19E5F488C(uint64_t a1)
{
  return a1;
}

id sub_19E5F48E0(id result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a5 + 36) != a3)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  sub_19E5F4830(*(void *)(a5 + 48) + 40 * a2, (uint64_t)result);
  unint64_t v7 = *(void **)(*(void *)(a5 + 56) + 8 * a2);

  return v7;
}

uint64_t sub_19E5F4974(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C118);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19E5F49D4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_19E5F4BF8(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E6CE144, a2);
}

uint64_t sub_19E5F4A00@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_19E5F4BF8(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E6CE9D4, a2);
}

uint64_t sub_19E5F4A2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t *__return_ptr, void *)@<X4>, void (*a6)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t)@<X6>, void *a7@<X8>)
{
  uint64_t v9 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a6(v18, a1, a2, a3, a4);
  a5(&v17, v18);
  if (v9)
  {
    uint64_t v31 = v19;
    sub_19E5D8438((uint64_t)&v31);
    uint64_t v30 = v20;
    sub_19E5D8438((uint64_t)&v30);
    long long v27 = v21;
    uint64_t v29 = v21;
    sub_19E5D8438((uint64_t)&v29);
    sub_19E5E7C14((uint64_t)&v27 + 8, (uint64_t)v28, (uint64_t *)&unk_1E945B960);
    return sub_19E5D8438((uint64_t)v28);
  }
  else
  {
    uint64_t v26 = v19;
    sub_19E5D8438((uint64_t)&v26);
    uint64_t v25 = v20;
    sub_19E5D8438((uint64_t)&v25);
    long long v22 = v21;
    uint64_t v24 = v21;
    sub_19E5D8438((uint64_t)&v24);
    sub_19E5E7C14((uint64_t)&v22 + 8, (uint64_t)v23, (uint64_t *)&unk_1E945B960);
    uint64_t result = sub_19E5D8438((uint64_t)v23);
    *a7 = v17;
  }
  return result;
}

uint64_t sub_19E5F4BA0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_19E5F4BF8(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E6CF264, a2);
}

uint64_t sub_19E5F4BCC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_19E5F4BF8(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E6CFAEC, a2);
}

uint64_t sub_19E5F4BF8@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1[2];
  uint64_t v13 = a1[3];
  uint64_t v6 = v13;
  uint64_t v14 = v5;
  uint64_t v8 = a1[5];
  uint64_t v12 = a1[4];
  uint64_t v7 = v12;
  uint64_t v9 = *a1;
  sub_19E5F63A4((uint64_t)&v14);
  sub_19E5F63A4((uint64_t)&v13);
  sub_19E5F63A4((uint64_t)&v12);
  swift_bridgeObjectRetain();
  uint64_t v10 = a2(v9, v5, v6, v7, v8);
  sub_19E5D8438((uint64_t)&v14);
  sub_19E5D8438((uint64_t)&v13);
  sub_19E5D8438((uint64_t)&v12);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v10;
  return result;
}

uint64_t sub_19E5F4CBC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_19E5F4CC4(void **a1, void **a2)
{
  double v2 = *(double *)a1;
  uint64_t v3 = (uint64_t)a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  double v6 = *(double *)a2;
  uint64_t v5 = (uint64_t)a2[1];
  int v7 = *((unsigned __int8 *)a2 + 16);
  switch(v4)
  {
    case 1:
      if (v7 != 1) {
        goto LABEL_41;
      }
      sub_19E5F5740((uint64_t)*a1, v3, 1);
      uint64_t v8 = *(void *)&v6;
      uint64_t v9 = v5;
      char v10 = 1;
      goto LABEL_6;
    case 2:
      if (v7 != 2) {
        goto LABEL_41;
      }
      sub_19E5F5740((uint64_t)*a1, v3, 2);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 2);
      char v11 = *(short float *)&v2 == *(short float *)&v6;
      return v11 & 1;
    case 3:
      if (v7 != 3) {
        goto LABEL_41;
      }
      sub_19E5F5740((uint64_t)*a1, v3, 3);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 3);
      char v11 = *(float *)&v2 == *(float *)&v6;
      return v11 & 1;
    case 4:
      if (v7 != 4) {
        goto LABEL_41;
      }
      sub_19E5F5740((uint64_t)*a1, v3, 4);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 4);
      char v11 = v2 == v6;
      return v11 & 1;
    case 5:
      if (v7 != 5) {
        goto LABEL_40;
      }
      if (*(void *)&v2 == *(void *)&v6 && v3 == v5) {
        char v11 = 1;
      }
      else {
        char v11 = sub_19EBF7388();
      }
      sub_19E5F57FC(*(uint64_t *)&v6, v5, 5);
      sub_19E5F57FC(*(uint64_t *)&v2, v3, 5);
      sub_19E5F5740(*(uint64_t *)&v2, v3, 5);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 5);
      return v11 & 1;
    case 6:
      if (v7 != 6) {
        goto LABEL_40;
      }
      char v11 = sub_19E5DDCE8(*a1, *a2);
      sub_19E5F57FC(*(uint64_t *)&v6, v5, 6);
      sub_19E5F57FC(*(uint64_t *)&v2, v3, 6);
      sub_19E5F5740(*(uint64_t *)&v2, v3, 6);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 6);
      return v11 & 1;
    case 7:
      if (v7 != 7) {
        goto LABEL_40;
      }
      sub_19E5F57FC((uint64_t)*a2, (uint64_t)a2[1], 7);
      sub_19E5F57FC(*(uint64_t *)&v2, v3, 7);
      char v11 = sub_19E5F1730(*(uint64_t *)&v2, *(uint64_t *)&v6);
      sub_19E5F5740(*(uint64_t *)&v2, v3, 7);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 7);
      return v11 & 1;
    case 8:
      if (v7 == 8)
      {
        char v11 = sub_19E5F18E4((unint64_t)*a1, (uint64_t)*a2);
        sub_19E5F57FC(*(uint64_t *)&v6, v5, 8);
        sub_19E5F57FC(*(uint64_t *)&v2, v3, 8);
        sub_19E5F5740(*(uint64_t *)&v2, v3, 8);
        sub_19E5F5740(*(uint64_t *)&v6, v5, 8);
        return v11 & 1;
      }
LABEL_40:
      swift_bridgeObjectRetain();
      goto LABEL_41;
    case 9:
      if (v7 != 9) {
        goto LABEL_39;
      }
      Objectuint64_t Type = swift_getObjectType();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
      sub_19E5F57FC(*(uint64_t *)&v6, v5, 9);
      sub_19E5F57FC(*(uint64_t *)&v2, v3, 9);
      sub_19E5F57FC(*(uint64_t *)&v6, v5, 9);
      sub_19E5F57FC(*(uint64_t *)&v2, v3, 9);
      uint64_t v15 = (void *)v14(ObjectType, v3);
      uint64_t v16 = swift_getObjectType();
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      swift_unknownObjectRetain();
      uint64_t v18 = (void *)v17(v16, v5);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 9);
      LOBYTE(v16) = sub_19E5DDC7C(v15, v18);
      swift_bridgeObjectRelease();
      uint64_t v19 = swift_bridgeObjectRelease();
      if (v16)
      {
        MEMORY[0x1F4188790](v19);
        double v49 = v6;
        uint64_t v50 = v5;
        char v11 = sub_19E5E87E4((uint64_t)sub_19E5F65E8, (uint64_t)v48, *(uint64_t *)&v2, v3);
        sub_19E5F5740(*(uint64_t *)&v2, v3, 9);
        sub_19E5F5740(*(uint64_t *)&v6, v5, 9);
        sub_19E5F5740(*(uint64_t *)&v6, v5, 9);
        uint64_t v20 = *(void *)&v2;
        uint64_t v21 = v3;
        char v22 = 9;
        goto LABEL_38;
      }
      sub_19E5F5740(*(uint64_t *)&v2, v3, 9);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 9);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 9);
      uint64_t v44 = *(void *)&v2;
      uint64_t v45 = v3;
      char v46 = 9;
      goto LABEL_42;
    case 10:
      if (v7 != 10) {
        goto LABEL_39;
      }
      uint64_t v37 = swift_getObjectType();
      char v38 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
      sub_19E5F57FC(*(uint64_t *)&v6, v5, 10);
      sub_19E5F57FC(*(uint64_t *)&v2, v3, 10);
      sub_19E5F57FC(*(uint64_t *)&v6, v5, 10);
      sub_19E5F57FC(*(uint64_t *)&v2, v3, 10);
      uint64_t v39 = (void *)v38(v37, v3);
      uint64_t v40 = swift_getObjectType();
      uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      swift_unknownObjectRetain();
      uint64_t v42 = (void *)v41(v40, v5);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 10);
      LOBYTE(v40) = sub_19E5DDC7C(v39, v42);
      swift_bridgeObjectRelease();
      uint64_t v43 = swift_bridgeObjectRelease();
      if (v40)
      {
        MEMORY[0x1F4188790](v43);
        double v49 = v6;
        uint64_t v50 = v5;
        char v11 = sub_19E5E86D0((uint64_t)sub_19E5F65A8, (uint64_t)v48, *(uint64_t *)&v2, v3);
        sub_19E5F5740(*(uint64_t *)&v2, v3, 10);
        sub_19E5F5740(*(uint64_t *)&v6, v5, 10);
        sub_19E5F5740(*(uint64_t *)&v6, v5, 10);
        uint64_t v20 = *(void *)&v2;
        uint64_t v21 = v3;
        char v22 = 10;
        goto LABEL_38;
      }
      sub_19E5F5740(*(uint64_t *)&v2, v3, 10);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 10);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 10);
      uint64_t v44 = *(void *)&v2;
      uint64_t v45 = v3;
      char v46 = 10;
      goto LABEL_42;
    case 11:
      if (v7 != 11) {
        goto LABEL_39;
      }
      uint64_t v23 = swift_getObjectType();
      uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
      sub_19E5F57FC(*(uint64_t *)&v6, v5, 11);
      sub_19E5F57FC(*(uint64_t *)&v2, v3, 11);
      sub_19E5F57FC(*(uint64_t *)&v6, v5, 11);
      sub_19E5F57FC(*(uint64_t *)&v2, v3, 11);
      uint64_t v25 = (void *)v24(v23, v3);
      uint64_t v26 = swift_getObjectType();
      long long v27 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      swift_unknownObjectRetain();
      uint64_t v28 = (void *)v27(v26, v5);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 11);
      LOBYTE(v26) = sub_19E5DDC7C(v25, v28);
      swift_bridgeObjectRelease();
      uint64_t v29 = swift_bridgeObjectRelease();
      if (v26)
      {
        MEMORY[0x1F4188790](v29);
        double v49 = v6;
        uint64_t v50 = v5;
        char v11 = sub_19E5E85BC((uint64_t)sub_19E5F6568, (uint64_t)v48, *(uint64_t *)&v2, v3);
        sub_19E5F5740(*(uint64_t *)&v2, v3, 11);
        sub_19E5F5740(*(uint64_t *)&v6, v5, 11);
        sub_19E5F5740(*(uint64_t *)&v6, v5, 11);
        uint64_t v20 = *(void *)&v2;
        uint64_t v21 = v3;
        char v22 = 11;
        goto LABEL_38;
      }
      sub_19E5F5740(*(uint64_t *)&v2, v3, 11);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 11);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 11);
      uint64_t v44 = *(void *)&v2;
      uint64_t v45 = v3;
      char v46 = 11;
      goto LABEL_42;
    case 12:
      if (v7 != 12)
      {
LABEL_39:
        swift_unknownObjectRetain();
LABEL_41:
        sub_19E5F57FC(*(uint64_t *)&v6, v5, v7);
        sub_19E5F5740(*(uint64_t *)&v2, v3, v4);
        uint64_t v44 = *(void *)&v6;
        uint64_t v45 = v5;
        char v46 = v7;
        goto LABEL_42;
      }
      uint64_t v30 = swift_getObjectType();
      uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
      sub_19E5F57FC(*(uint64_t *)&v6, v5, 12);
      sub_19E5F57FC(*(uint64_t *)&v2, v3, 12);
      sub_19E5F57FC(*(uint64_t *)&v6, v5, 12);
      sub_19E5F57FC(*(uint64_t *)&v2, v3, 12);
      char v32 = (void *)v31(v30, v3);
      uint64_t v33 = swift_getObjectType();
      BOOL v34 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      swift_unknownObjectRetain();
      uint64_t v35 = (void *)v34(v33, v5);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 12);
      LOBYTE(v33) = sub_19E5DDC7C(v32, v35);
      swift_bridgeObjectRelease();
      uint64_t v36 = swift_bridgeObjectRelease();
      if ((v33 & 1) == 0)
      {
        sub_19E5F5740(*(uint64_t *)&v2, v3, 12);
        sub_19E5F5740(*(uint64_t *)&v6, v5, 12);
        sub_19E5F5740(*(uint64_t *)&v6, v5, 12);
        uint64_t v44 = *(void *)&v2;
        uint64_t v45 = v3;
        char v46 = 12;
LABEL_42:
        sub_19E5F5740(v44, v45, v46);
        char v11 = 0;
        return v11 & 1;
      }
      MEMORY[0x1F4188790](v36);
      double v49 = v6;
      uint64_t v50 = v5;
      char v11 = sub_19E5E84A8((uint64_t)sub_19E5F6528, (uint64_t)v48, *(uint64_t *)&v2, v3);
      sub_19E5F5740(*(uint64_t *)&v2, v3, 12);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 12);
      sub_19E5F5740(*(uint64_t *)&v6, v5, 12);
      uint64_t v20 = *(void *)&v2;
      uint64_t v21 = v3;
      char v22 = 12;
LABEL_38:
      sub_19E5F5740(v20, v21, v22);
      return v11 & 1;
    default:
      if (*((unsigned char *)a2 + 16)) {
        goto LABEL_41;
      }
      sub_19E5F5740((uint64_t)*a1, v3, 0);
      uint64_t v8 = *(void *)&v6;
      uint64_t v9 = v5;
      char v10 = 0;
LABEL_6:
      sub_19E5F5740(v8, v9, v10);
      char v11 = *(void *)&v2 == *(void *)&v6;
      return v11 & 1;
  }
}

uint64_t sub_19E5F5740(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 5:
    case 6:
    case 7:
    case 8:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 9:
    case 10:
    case 11:
    case 12:
      uint64_t result = swift_unknownObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_19E5F57A0()
{
  unint64_t result = qword_1E945C128;
  if (!qword_1E945C128)
  {
    sub_19E5F47F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C128);
  }
  return result;
}

uint64_t sub_19E5F57FC(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 5:
    case 6:
    case 7:
    case 8:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    case 9:
    case 10:
    case 11:
    case 12:
      uint64_t result = swift_unknownObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for MLSendableFeatureValue()
{
  return &type metadata for MLSendableFeatureValue;
}

uint64_t destroy for MLSendableFeatureValue.Value(uint64_t a1)
{
  return sub_19E5F5740(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s6CoreML22MLSendableFeatureValueV5ValueOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_19E5F57FC(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s6CoreML22MLSendableFeatureValueV5ValueOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_19E5F57FC(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_19E5F5740(v6, v7, v8);
  return a1;
}

uint64_t _s6CoreML22MLSendableFeatureValueV5ValueOwta_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_19E5F5740(v4, v5, v6);
  return a1;
}

uint64_t _s6CoreML22MLSendableFeatureValueV5ValueOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF4 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 244);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0xC) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s6CoreML22MLSendableFeatureValueV5ValueOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 244;
    *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0;
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_19E5F5A18(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_19E5F5A20(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MLSendableFeatureValue.Value()
{
  return &type metadata for MLSendableFeatureValue.Value;
}

uint64_t sub_19E5F5A38()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_19E5F5A70(uint64_t a1, uint64_t a2)
{
  return sub_19E5F1FA0(a1, a2, v2, (uint64_t)sub_19E5F5AE4, (void (*)(uint64_t, void *))sub_19E5ED464);
}

void *sub_19E5F5AB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_19E5F61B4(a1, a2, a3);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void *sub_19E5F5AE4(void *a1)
{
  return sub_19E5F62AC(a1);
}

uint64_t sub_19E5F5AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t (*a7)(uint64_t, int64_t))
{
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  if (a3)
  {
    uint64_t v10 = a3;
  }
  else
  {
    Objectuint64_t Type = swift_getObjectType();
    uint64_t v12 = v9(ObjectType, a2);
    int64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      uint64_t v10 = sub_19EBF6968();
      *(void *)(v10 + 16) = v13;
    }
    else
    {
      uint64_t v10 = MEMORY[0x1E4FBC860];
    }
    int64_t v75 = v13;
    uint64_t v76 = 0;
    uint64_t v74 = v10 + 32;
    sub_19E6B5844(&v74, &v76, v12);
    uint64_t v14 = v76;
    BOOL v16 = __OFSUB__(v13, v76);
    BOOL v15 = v13 - v76 < 0;
    if (v13 < v76) {
      goto LABEL_60;
    }
    *(void *)(v10 + 16) = v76;
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = swift_getObjectType();
  unint64_t v72 = v9;
  uint64_t v18 = v9(v17, a2);
  uint64_t v19 = v18;
  uint64_t v14 = *(void *)(v18 + 16);
  unint64_t v70 = a7;
  if (v14)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 1;
    do
    {
      uint64_t v22 = *(void *)(v18 + 8 * v20 + 32);
      uint64_t v23 = v21 * v22;
      uint64_t v24 = (unsigned __int128)(v21 * (__int128)v22) >> 64;
      BOOL v16 = __OFSUB__(v24, v23 >> 63);
      BOOL v15 = v24 - (v23 >> 63) < 0;
      if (v24 != v23 >> 63)
      {
        __break(1u);
        goto LABEL_56;
      }
      uint64_t v21 = v23;
      ++v20;
    }
    while (v14 != v20);
    if (v23) {
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v40 = swift_unknownObjectRetain();
    int64_t v27 = 0;
    uint64_t v41 = MEMORY[0x1E4FBC860];
    goto LABEL_32;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_19E5EBFD0(v19, v10);
  swift_bridgeObjectRelease();
  unint64_t v26 = *(void *)(v25 + 16);
  if (!v26)
  {
    int64_t v27 = 0;
    goto LABEL_26;
  }
  int64_t v27 = *(void *)(v25 + 32);
  unint64_t v28 = v26 - 1;
  if (v26 == 1) {
    goto LABEL_26;
  }
  if (v26 >= 5)
  {
    unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFFCLL | 1;
    int64x2_t v30 = vdupq_n_s64(v27);
    uint64_t v31 = (int64x2_t *)(v25 + 56);
    unint64_t v32 = v28 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v33 = v30;
    do
    {
      int64x2_t v30 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v30, v31[-1]), (int8x16_t)v30, (int8x16_t)v31[-1]);
      int64x2_t v33 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v33, *v31), (int8x16_t)v33, *(int8x16_t *)v31);
      v31 += 2;
      v32 -= 4;
    }
    while (v32);
    int8x16_t v34 = vbslq_s8((int8x16_t)vcgtq_s64(v30, v33), (int8x16_t)v30, (int8x16_t)v33);
    uint64_t v35 = vextq_s8(v34, v34, 8uLL).u64[0];
    int64_t v27 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v34.i64[0], v35), *(int8x8_t *)v34.i8, (int8x8_t)v35);
    if (v28 == (v28 & 0xFFFFFFFFFFFFFFFCLL)) {
      goto LABEL_26;
    }
  }
  else
  {
    unint64_t v29 = 1;
  }
  unint64_t v36 = v26 - v29;
  uint64_t v37 = (int64_t *)(v25 + 8 * v29 + 32);
  do
  {
    int64_t v39 = *v37++;
    int64_t v38 = v39;
    if (v27 <= v39) {
      int64_t v27 = v38;
    }
    --v36;
  }
  while (v36);
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v26)
  {
    if (v27 < 0) {
      goto LABEL_64;
    }
    if (!v27) {
      goto LABEL_29;
    }
  }
  else
  {
    int64_t v27 = 1;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v40 = sub_19EBF6968();
  uint64_t v41 = v40;
  *(void *)(v40 + 16) = v27;
LABEL_32:
  uint64_t v42 = v41 + 32;
  uint64_t v74 = v41 + 32;
  int64_t v75 = v27;
  MEMORY[0x1F4188790](v40);
  (*(void (**)(uint64_t))(a2 + 32))(a5);
  uint64_t v14 = v74;
  if (v74)
  {
    BOOL v16 = __OFSUB__(v42, v74);
    BOOL v15 = v42 - v74 < 0;
    if (v42 != v74)
    {
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    *(void *)(v41 + 16) = v27;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = v72(v17, a2);
    __swift_instantiateConcreteTypeFromMangledName(a6);
    uint64_t v44 = (void *)swift_allocObject();
    uint64_t v14 = *(void *)(v43 + 16);
    if (v14)
    {
      uint64_t v45 = (uint64_t *)(v43 + 32);
      uint64_t v46 = 1;
      while (1)
      {
        uint64_t v47 = *v45++;
        uint64_t v48 = v46 * v47;
        uint64_t v49 = (unsigned __int128)(v46 * (__int128)v47) >> 64;
        BOOL v16 = __OFSUB__(v49, v48 >> 63);
        BOOL v15 = v49 - (v48 >> 63) < 0;
        if (v49 != v48 >> 63) {
          break;
        }
        uint64_t v46 = v48;
        if (!--v14)
        {
          if (v48) {
            goto LABEL_39;
          }
          int64_t v53 = 0;
          goto LABEL_53;
        }
      }
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v50 = swift_bridgeObjectRetain();
    uint64_t v51 = sub_19E5EBFD0(v50, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v52 = *(void *)(v51 + 16);
    if (!v52)
    {
      swift_bridgeObjectRelease();
      int64_t v53 = 1;
      goto LABEL_53;
    }
    int64_t v53 = *(void *)(v51 + 32);
    unint64_t v54 = v52 - 1;
    if (v52 != 1)
    {
      if (v52 >= 5)
      {
        unint64_t v55 = v54 & 0xFFFFFFFFFFFFFFFCLL | 1;
        int64x2_t v56 = vdupq_n_s64(v53);
        unint64_t v57 = (int64x2_t *)(v51 + 56);
        unint64_t v58 = v54 & 0xFFFFFFFFFFFFFFFCLL;
        int64x2_t v59 = v56;
        do
        {
          int64x2_t v56 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v56, v57[-1]), (int8x16_t)v56, (int8x16_t)v57[-1]);
          int64x2_t v59 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v59, *v57), (int8x16_t)v59, *(int8x16_t *)v57);
          v57 += 2;
          v58 -= 4;
        }
        while (v58);
        int8x16_t v60 = vbslq_s8((int8x16_t)vcgtq_s64(v56, v59), (int8x16_t)v56, (int8x16_t)v59);
        uint64_t v61 = vextq_s8(v60, v60, 8uLL).u64[0];
        int64_t v53 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v60.i64[0], v61), *(int8x8_t *)v60.i8, (int8x8_t)v61);
        if (v54 == (v54 & 0xFFFFFFFFFFFFFFFCLL)) {
          goto LABEL_52;
        }
      }
      else
      {
        unint64_t v55 = 1;
      }
      unint64_t v62 = v52 - v55;
      uint64_t v63 = (int64_t *)(v51 + 8 * v55 + 32);
      do
      {
        int64_t v65 = *v63++;
        int64_t v64 = v65;
        if (v53 <= v65) {
          int64_t v53 = v64;
        }
        --v62;
      }
      while (v62);
    }
LABEL_52:
    swift_bridgeObjectRelease();
    if (v53 < 0)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
LABEL_53:
    uint64_t v66 = swift_retain();
    uint64_t v67 = v70(v66, v53);
    swift_bridgeObjectRelease();
    uint64_t v68 = *(void *)(v67 + 16);
    swift_bridgeObjectRelease();
    BOOL v16 = __OFSUB__(v53, v68);
    BOOL v15 = v53 - v68 < 0;
    if (v53 == v68)
    {
      v44[3] = v43;
      v44[4] = v10;
      v44[2] = v67;
      return (uint64_t)v44;
    }
    goto LABEL_59;
  }
LABEL_61:
  __break(1u);
  if (v15 == v16) {
    goto LABEL_65;
  }
  __break(1u);
LABEL_64:
  sub_19EBF71E8();
  __break(1u);
LABEL_65:
  *(void *)(v10 + 16) = v14;
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_19E5F603C(uint64_t a1, uint64_t a2)
{
  return sub_19E5F2520(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5ECC48);
}

uint64_t sub_19E5F6070(uint64_t a1, uint64_t a2)
{
  return sub_19E5F1FA0(a1, a2, v2, (uint64_t)sub_19E5F5AE4, (void (*)(uint64_t, void *))sub_19E5ED2D8);
}

uint64_t sub_19E5F60B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_19E5F60E0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void))sub_19E5F294C, a3);
}

uint64_t sub_19E5F60E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = a3(a1, a2, v4[2], v4[3], v4[4], v4[5]);
  if (!v5)
  {
    *a4 = result;
    a4[1] = v8;
  }
  return result;
}

uint64_t sub_19E5F611C(uint64_t a1, uint64_t a2)
{
  return sub_19E5F2B50(a1, a2, *(void *)(v2 + 16), *(void (**)(void *, uint64_t, uint64_t))(v2 + 24));
}

uint64_t sub_19E5F613C(uint64_t a1, uint64_t a2)
{
  return sub_19E5F2520(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5EC8D0);
}

uint64_t sub_19E5F6170(uint64_t a1, uint64_t a2)
{
  return sub_19E5F1FA0(a1, a2, v2, (uint64_t)sub_19E5F5AE4, (void (*)(uint64_t, void *))sub_19E5ED14C);
}

void *sub_19E5F61B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_19E5F29B0(a1, a2, *(void *(**)(uint64_t *__return_ptr))(v3 + 16));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
  }
  return result;
}

uint64_t sub_19E5F61E8(uint64_t a1, uint64_t a2)
{
  return sub_19E5F2C84(a1, a2, *(void *)(v2 + 16), *(void (**)(void *, uint64_t, uint64_t))(v2 + 24));
}

uint64_t sub_19E5F6208(uint64_t a1, uint64_t a2)
{
  return sub_19E5F2520(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5EC558);
}

uint64_t sub_19E5F623C(uint64_t a1, uint64_t a2)
{
  return sub_19E5F1FA0(a1, a2, v2, (uint64_t)sub_19E5F5AE4, (void (*)(uint64_t, void *))sub_19E5ECFC0);
}

uint64_t sub_19E5F6280@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_19E5F60E0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void))sub_19E5F28E4, a3);
}

void *sub_19E5F62AC(void *result)
{
  if (*result)
  {
    uint64_t v2 = *(void **)(v1 + 24);
    **(void **)(v1 + 16) = *result;
    uint64_t v3 = (void *)sub_19EBF68D8();
    uint64_t result = v3;
    *uint64_t v2 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_19E5F6308(uint64_t a1, uint64_t a2)
{
  return sub_19E5F2A18(a1, a2, *(void *)(v2 + 16), *(void (**)(void *, uint64_t, uint64_t))(v2 + 24));
}

uint64_t sub_19E5F6328(uint64_t a1, uint64_t a2)
{
  return sub_19E5F2520(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5EC214);
}

uint64_t sub_19E5F635C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_19E5F4A2C(a1, a2, a3, a4, *(void (**)(uint64_t *__return_ptr, void *))(v5 + 16), (void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5E80EC, a5);
}

void *sub_19E5F638C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_19E5F6498(a1, a2, a3);
}

uint64_t sub_19E5F63A4(uint64_t a1)
{
  return a1;
}

uint64_t sub_19E5F63D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_19E5F4A2C(a1, a2, a3, a4, *(void (**)(uint64_t *__return_ptr, void *))(v5 + 16), (void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5E7F80, a5);
}

uint64_t sub_19E5F6400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_19E5F642C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void))sub_19E5F2828, a3);
}

uint64_t sub_19E5F642C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = a3(a1, a2, v4[2], v4[3], v4[4], v4[5]);
  if (!v5) {
    *a4 = result;
  }
  return result;
}

uint64_t sub_19E5F6468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_19E5F4A2C(a1, a2, a3, a4, *(void (**)(uint64_t *__return_ptr, void *))(v5 + 16), (void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5E7E14, a5);
}

void *sub_19E5F6498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_19E5F2884(a1, a2, *(void *(**)(uint64_t *__return_ptr))(v3 + 16));
  if (!v4) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_19E5F64CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_19E5F4A2C(a1, a2, a3, a4, *(void (**)(uint64_t *__return_ptr, void *))(v5 + 16), (void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5E7CA8, a5);
}

uint64_t sub_19E5F64FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_19E5F642C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void))sub_19E5F27C8, a3);
}

uint64_t sub_19E5F6528@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_19E5F6628(a1, (uint64_t)sub_19E5F68B0, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))sub_19E5E84A8, a2);
}

uint64_t sub_19E5F6568@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_19E5F6628(a1, (uint64_t)sub_19E5F6824, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))sub_19E5E85BC, a2);
}

uint64_t sub_19E5F65A8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_19E5F6628(a1, (uint64_t)sub_19E5F678C, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))sub_19E5E86D0, a2);
}

uint64_t sub_19E5F65E8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_19E5F6628(a1, (uint64_t)sub_19E5F66C0, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))sub_19E5E87E4, a2);
}

uint64_t sub_19E5F6628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, void *, uint64_t, uint64_t)@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v4 + 24);
  v10[2] = a1;
  uint64_t result = a3(a2, v10, v7, v8);
  *a4 = result & 1;
  return result;
}

uint64_t sub_19E5F6678@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  return sub_19E5F443C(a1, a2, a3, a4, *(void (**)(void *__return_ptr, char *))(v5 + 16), (void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5E80EC, a5);
}

uint64_t sub_19E5F66A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_19E5F67EC(a1, a2, a3);
}

uint64_t sub_19E5F66C0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_19E5F45B4(a1, *(void **)(v2 + 16), (uint64_t (*)(void *))sub_19E5EB990, a2);
}

uint64_t sub_19E5F66F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  return sub_19E5F443C(a1, a2, a3, a4, *(void (**)(void *__return_ptr, char *))(v5 + 16), (void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5E7F80, a5);
}

uint64_t sub_19E5F6720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_19E5F674C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void))sub_19E5F2704, a3);
}

uint64_t sub_19E5F674C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void)@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = a3(a1, a2, v4[2], v4[3], v4[4], v4[5]);
  if (!v5) {
    *a4 = result & 1;
  }
  return result;
}

uint64_t sub_19E5F678C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_19E5F45B4(a1, *(void **)(v2 + 16), (uint64_t (*)(void *))sub_19E5EB350, a2);
}

uint64_t sub_19E5F67BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  return sub_19E5F443C(a1, a2, a3, a4, *(void (**)(void *__return_ptr, char *))(v5 + 16), (void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5E7E14, a5);
}

uint64_t sub_19E5F67EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_19E5F2764(a1, a2, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
  if (!v4) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t sub_19E5F6824@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_19E5F45B4(a1, *(void **)(v2 + 16), (uint64_t (*)(void *))sub_19E5EAD10, a2);
}

uint64_t sub_19E5F6854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  return sub_19E5F443C(a1, a2, a3, a4, *(void (**)(void *__return_ptr, char *))(v5 + 16), (void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_19E5E7CA8, a5);
}

uint64_t sub_19E5F6884@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_19E5F674C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void))sub_19E5F26A0, a3);
}

uint64_t sub_19E5F68B0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_19E5F45B4(a1, *(void **)(v2 + 16), (uint64_t (*)(void *))sub_19E5EA6D0, a2);
}

uint64_t sub_19E5F68E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_19E5F6968()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_19E5F69A0(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_19E5F69AC(uint64_t a1, uint64_t a2)
{
  return sub_19E5F61E8(a1, a2);
}

uint64_t sub_19E5F69C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_19E5F4CBC(a1, a2, a3);
}

uint64_t sub_19E5F6A34()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_19E5F6AD8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 64))(v14, v13);
  int64x2_t v30 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 72);
  uint64_t result = v30(a4, a5);
  unint64_t v17 = *(void *)(v15 + 16);
  if (v17 == *(void *)(result + 16))
  {
    uint64_t v18 = (void *)result;
    unint64_t v29 = v12;
    uint64_t v31 = a1;
    uint64_t v32 = v10;
    unint64_t v19 = sub_19E60F71C(0, v17);
    unint64_t v28 = a3;
    uint64_t v20 = sub_19E6315C8(a3, v19, v15, v18);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v20)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, a2, a4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v33 = MLShapedArrayProtocol.scalars.getter(a4, a5);
      swift_getAssociatedTypeWitness();
      uint64_t v23 = sub_19EBF69C8();
      uint64_t v24 = v28;
      swift_bridgeObjectRetain();
      uint64_t WitnessTable = swift_getWitnessTable();
      unint64_t v26 = v29;
      MLShapedArrayProtocol.init<A>(scalars:shape:)((uint64_t)&v33, v24, a4, v23, a5, WitnessTable);
      uint64_t v27 = v32;
      (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v31, v26, a4);
      uint64_t v22 = v30(a4, a5);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v26, a4);
    }
    return v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_19E5F6D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v15[1] = a4;
  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(*v4 + 80);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)v15 - v11;
  uint64_t v13 = (uint64_t)v4 + *(void *)(v8 + 96);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  uint64_t v17 = v9;
  uint64_t v18 = a3;
  uint64_t v19 = *(void *)(v8 + 88);
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  (*(void (**)(uint64_t (*)(uint64_t, uint64_t), unsigned char *, uint64_t, uint64_t))(v19 + 152))(sub_19E5F7794, v16, a3, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_19E5F6F08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v55 = a4;
  uint64_t v9 = *v5;
  uint64_t v10 = *(void *)(*v5 + 80);
  uint64_t v49 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  unint64_t v54 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  int64_t v53 = (char *)&v46 - v14;
  int64x2_t v56 = *(char **)(v15 - 8);
  MEMORY[0x1F4188790](v13);
  unint64_t v52 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_19EBF6E68();
  uint64_t v58 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v46 - v21;
  uint64_t v57 = a3;
  uint64_t v61 = a3;
  unint64_t v62 = v5;
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  uint64_t v63 = a1;
  uint64_t v64 = a2;
  uint64_t v23 = (uint64_t)v5 + *(void *)(v9 + 96);
  swift_beginAccess();
  uint64_t v24 = *(void *)(v9 + 88);
  uint64_t v25 = *(void (**)(uint64_t (*)(), uint64_t *, uint64_t, uint64_t, uint64_t))(v24 + 160);
  uint64_t v59 = v17;
  uint64_t v26 = v65;
  v25((uint64_t (*)())sub_19E5F76F8, (uint64_t *)v60, v17, v10, v24);
  uint64_t result = swift_endAccess();
  if (!v26)
  {
    uint64_t v46 = v24 + 160;
    unint64_t v28 = v52;
    uint64_t v47 = v25;
    uint64_t v48 = v24;
    uint64_t v30 = (uint64_t)v53;
    unint64_t v29 = v54;
    uint64_t v65 = 0;
    uint64_t v31 = v58;
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v20, v22, v59);
    int v32 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v56 + 6))(v20, 1, v57);
    uint64_t v35 = *(char **)(v31 + 8);
    uint64_t v34 = v31 + 8;
    uint64_t v33 = v35;
    if (v32 == 1)
    {
      int64x2_t v56 = v22;
      uint64_t v58 = v34;
      unint64_t v52 = v33;
      ((void (*)(char *, uint64_t))v33)(v20, v59);
      uint64_t v36 = v49;
      uint64_t v37 = (uint64_t)v29;
      (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v29, v23, v10);
      unint64_t v38 = *(uint64_t *)((char *)v5 + *(void *)(*v5 + 104));
      swift_bridgeObjectRetain();
      uint64_t v39 = v48;
      uint64_t v40 = sub_19E5F6AD8(v30, v37, v38, v10, v48);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v10);
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 40))(v23, v30, v10);
      swift_endAccess();
      *(uint64_t *)((char *)v5 + *(void *)(*v5 + 112)) = v40;
      uint64_t v41 = swift_bridgeObjectRelease();
      MEMORY[0x1F4188790](v41);
      uint64_t v42 = v57;
      *(&v46 - 6) = v10;
      *(&v46 - 5) = v42;
      uint64_t v43 = v50;
      *(&v46 - 4) = v39;
      *(&v46 - 3) = v43;
      *(&v46 - 2) = v51;
      swift_beginAccess();
      v47(sub_19E5F7718, &v46 - 8, v42, v10, v39);
      swift_endAccess();
      return ((uint64_t (*)(char *, uint64_t))v52)(v56, v59);
    }
    else
    {
      ((void (*)(char *, uint64_t))v33)(v22, v59);
      uint64_t v44 = v57;
      uint64_t v45 = (void (*)(char *, char *, uint64_t))*((void *)v56 + 4);
      v45(v28, v20, v57);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v45)(v55, v28, v44);
    }
  }
  return result;
}

uint64_t sub_19E5F7448@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t (*a3)(uint64_t)@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  if (sub_19E5DDC7C(a1, *(void **)(a2 + *(void *)(*(void *)a2 + 112))))
  {
    swift_getAssociatedTypeWitness();
    uint64_t v9 = sub_19EBF6EE8();
    uint64_t result = a3(v9);
    if (v5) {
      return result;
    }
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a5, v11, 1, a4);
}

uint64_t sub_19E5F7570()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_19E5F7618()
{
  sub_19E5F7570();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t type metadata accessor for ReshapedStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_19E5F7688()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_19E5F76A4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_19E5F76C0()
{
  return 1;
}

uint64_t sub_19E5F76C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_19E5F6D64(a1, a2, a3, a4);
}

uint64_t sub_19E5F76E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_19E5F6F08(a1, a2, a3, a4);
}

uint64_t sub_19E5F76F8@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  return sub_19E5F7448(a1, *(void *)(v2 + 24), *(uint64_t (**)(uint64_t))(v2 + 32), *(void *)(v2 + 16), a2);
}

uint64_t sub_19E5F7718()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 40);
  swift_getAssociatedTypeWitness();
  uint64_t v2 = sub_19EBF6EE8();
  return v1(v2);
}

uint64_t sub_19E5F7794(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v2 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x19F3BF1C0](a1, a2, AssociatedTypeWitness);
  return v5(v7);
}

uint64_t sub_19E5F7814(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = *(void *)(*v2 + 80);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v27 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v27 - v12, a1, v7);
  uint64_t v14 = *(void *)(v6 + 88);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 64))(v7, v14);
  uint64_t v16 = *(void *)(result + 16);
  if (v16)
  {
    uint64_t v17 = (uint64_t *)(result + 32);
    uint64_t v18 = 1;
    while (1)
    {
      uint64_t v19 = *v17++;
      uint64_t v20 = v18 * v19;
      if ((unsigned __int128)(v18 * (__int128)v19) >> 64 != (v18 * v19) >> 63) {
        break;
      }
      uint64_t v18 = v20;
      if (!--v16) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v20 = 1;
LABEL_7:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(a2 + 16);
  if (v21)
  {
    uint64_t v22 = (uint64_t *)(a2 + 32);
    uint64_t v23 = 1;
    while (1)
    {
      uint64_t v24 = *v22++;
      uint64_t v25 = v23 * v24;
      if ((unsigned __int128)(v23 * (__int128)v24) >> 64 != (v23 * v24) >> 63) {
        break;
      }
      uint64_t v23 = v25;
      if (!--v21) {
        goto LABEL_13;
      }
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v25 = 1;
LABEL_13:
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  if (v20 == v25)
  {
    uint64_t v26 = sub_19E5F6AD8((uint64_t)v11, a1, a2, v7, v14);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))((uint64_t)v3 + *(void *)(*v3 + 96), v11, v7);
    *(uint64_t *)((char *)v3 + *(void *)(*v3 + 112)) = v26;
    *(uint64_t *)((char *)v3 + *(void *)(*v3 + 104)) = a2;
    return (uint64_t)v3;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_19E5F7A78(uint64_t a1, unint64_t a2)
{
  return sub_19E5F7814(a1, a2);
}

uint64_t sub_19E5F7AC4(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  unint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v26 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = sub_19EBF6BA8();
  if (!v20) {
    return sub_19EBF6958();
  }
  uint64_t v21 = v20;
  uint64_t v27 = v15;
  uint64_t v43 = sub_19EBF7148();
  uint64_t v35 = sub_19EBF7158();
  sub_19EBF70C8();
  uint64_t v41 = v19;
  uint64_t result = sub_19EBF6B98();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    uint64_t v37 = v23;
    uint64_t v24 = v27;
    while (1)
    {
      uint64_t v25 = (void (*)(char *, void))sub_19EBF6C58();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      sub_19EBF7138();
      sub_19EBF6BE8();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

Swift::Int __swiftcall MLShapedArrayProtocol.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t MLShapedArrayProtocol.subscript.setter(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_19EC36240;
  *(void *)(v8 + 32) = a2;
  long long v9 = a1[1];
  v15[0] = *a1;
  v15[1] = v9;
  void v15[2] = a1[2];
  uint64_t v14 = v8;
  uint64_t v10 = *(uint64_t (**)(_OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 112);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE70);
  uint64_t v12 = sub_19E5DFDB8(&qword_1E945C258, (uint64_t *)&unk_1E945CE70);
  return v10(v15, &v14, v11, v12, a3, a4);
}

{
  uint64_t vars8;

  sub_19E5FE080(a1, a2, a3, a4);

  return swift_bridgeObjectRelease();
}

{
  uint64_t v8;
  long long v9;
  uint64_t v10;
  uint64_t v12;
  _OWORD v13[3];

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CFD0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_19EC36240;
  sub_19E5FE124(a2, v8 + 32);
  long long v9 = a1[1];
  v13[0] = *a1;
  v13[1] = v9;
  v13[2] = a1[2];
  uint64_t v12 = v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C270);
  sub_19E5DFDB8(&qword_1E945C278, &qword_1E945C270);
  sub_19E5FDED4(v13, (uint64_t)&v12, a3, v10, a4);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_0(a2);
}

{
  long long v6;
  uint64_t (*v7)(_OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _OWORD v12[3];

  uint64_t v6 = a1[1];
  v12[0] = *a1;
  v12[1] = v6;
  _OWORD v12[2] = a1[2];
  uint64_t v11 = a2;
  uint64_t v7 = *(uint64_t (**)(_OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 112);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE70);
  long long v9 = sub_19E5DFDB8(&qword_1E945C258, (uint64_t *)&unk_1E945CE70);
  return v7(v12, &v11, v8, v9, a3, a4);
}

void (*MLShapedArrayProtocol.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void **a1, char a2)
{
  long long v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[8] = a4;
  v9[9] = v4;
  v9[6] = a2;
  v9[7] = a3;
  MLShapedArrayProtocol.subscript.getter(a2, a3, a4);
  return sub_19E5F8040;
}

{
  uint64_t v4;
  void *v9;

  long long v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[8] = a4;
  v9[9] = v4;
  v9[6] = a2;
  v9[7] = a3;
  MLShapedArrayProtocol.subscript.getter(a2, a3, a4);
  return sub_19E5F9830;
}

{
  uint64_t v4;
  void *v9;
  void *v10;
  void (*v11)(void *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  long long v9 = malloc(0x58uLL);
  *a1 = v9;
  v9[9] = a4;
  v9[10] = v4;
  v9[7] = a2;
  v9[8] = a3;
  v9[6] = a2;
  uint64_t v10 = v9 + 6;
  uint64_t v11 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 104);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE70);
  uint64_t v13 = sub_19E5DFDB8(&qword_1E945C258, (uint64_t *)&unk_1E945CE70);
  v11(v10, v12, v13, a3, a4);
  return sub_19E5FA10C;
}

void sub_19E5F8040(void **a1, char a2)
{
  BOOL v2 = *a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = (*a1)[3];
  uint64_t v7 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v8 = (*a1)[8];
  uint64_t v10 = (*a1)[6];
  uint64_t v9 = (*a1)[7];
  *(void *)&long long v11 = **a1;
  *((void *)&v11 + 1) = v3;
  uint64_t v12 = v4;
  uint64_t v13 = v5;
  uint64_t v14 = v7;
  uint64_t v15 = v6;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MLShapedArrayProtocol.subscript.setter(&v11, v10, v9, v8);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    MLShapedArrayProtocol.subscript.setter(&v11, v10, v9, v8);
  }

  free(v2);
}

uint64_t MLShapedArrayProtocol.subscript.setter(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CFD0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 56) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE60);
  *(void *)(inited + 64) = &protocol witness table for <> Range<A>;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  uint64_t v12 = (void *)sub_19E5F89D8(v5, a4, a4, a5);
  uint64_t v13 = sub_19E66B3C8(inited, v12);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C260);
  swift_arrayDestroy();
  long long v14 = a1[1];
  v20[0] = *a1;
  v20[1] = v14;
  void v20[2] = a1[2];
  uint64_t v19 = v13;
  uint64_t v15 = *(uint64_t (**)(_OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 88);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BFB0);
  uint64_t v17 = sub_19E5DFDB8(&qword_1E945C268, &qword_1E945BFB0);
  return v15(v20, &v19, v16, v17, a4, a5);
}

{
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t vars8;

  sub_19E5FDED4(a1, a2, a3, a4, a5);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8);

  return v7(a2, a4);
}

void (*MLShapedArrayProtocol.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(void **a1, char a2)
{
  long long v11 = malloc(0x58uLL);
  *a1 = v11;
  v11[9] = a5;
  v11[10] = v5;
  v11[7] = a3;
  v11[8] = a4;
  void v11[6] = a2;
  MLShapedArrayProtocol.subscript.getter(a2, a3, a4, a5);
  return sub_19E5F8350;
}

void sub_19E5F8350(void **a1, char a2)
{
  BOOL v2 = *a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = (*a1)[3];
  uint64_t v7 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v8 = (*a1)[9];
  uint64_t v10 = (*a1)[7];
  uint64_t v9 = (*a1)[8];
  uint64_t v11 = (*a1)[6];
  *(void *)&long long v12 = **a1;
  *((void *)&v12 + 1) = v3;
  uint64_t v13 = v4;
  uint64_t v14 = v5;
  uint64_t v15 = v7;
  uint64_t v16 = v6;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MLShapedArrayProtocol.subscript.setter(&v12, v11, v10, v9, v8);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    MLShapedArrayProtocol.subscript.setter(&v12, v11, v10, v9, v8);
  }

  free(v2);
}

uint64_t MLShapedArrayProtocol.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_19EC36240;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = MEMORY[0x19F3BF2D0](v7, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  *(void *)(v5 + 32) = v8;
  uint64_t v9 = sub_19EBF69C8();
  uint64_t WitnessTable = swift_getWitnessTable();
  return MLShapedArrayProtocol.init<A>(scalars:shape:)((uint64_t)&v12, v5, a2, v9, a3, WitnessTable);
}

void (*sub_19E5F856C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4))(void **a1)
{
  *a1 = malloc(0x30uLL);
  MLShapedArrayProtocol.subscript.getter(a2, a3, a4);
  return sub_19E5F85E8;
}

void sub_19E5F85E8(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t MLShapedArrayProtocol.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CFD0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 56) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE60);
  *(void *)(inited + 64) = &protocol witness table for <> Range<A>;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  uint64_t v10 = (void *)sub_19E5F89D8(v4, a3, a3, a4);
  uint64_t v11 = sub_19E66B3C8(inited, v10);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C260);
  swift_arrayDestroy();
  uint64_t v16 = v11;
  uint64_t v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 80);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BFB0);
  uint64_t v14 = sub_19E5DFDB8(&qword_1E945C268, &qword_1E945BFB0);
  v12(&v16, v13, v14, a3, a4);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *))(v8 + 16))((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C260);
  uint64_t v9 = sub_19EBF69D8();
  uint64_t v10 = (void *)sub_19E5F89D8(v4, a2, a2, a4);
  uint64_t v11 = sub_19E66B3C8(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = v11;
  uint64_t v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 80);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BFB0);
  uint64_t v14 = sub_19E5DFDB8(&qword_1E945C268, &qword_1E945BFB0);
  v12(&v17, v13, v14, a2, a4);
  return swift_bridgeObjectRelease();
}

uint64_t MLShapedArrayProtocol.count.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t (**)(void))(a2 + 64);
  uint64_t v5 = *(void *)(v4() + 16);
  swift_bridgeObjectRelease();
  if (!v5) {
    return 0;
  }
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
  if (*(void *)(result + 16))
  {
    uint64_t v7 = *(void *)(result + 32);
    swift_bridgeObjectRelease();
    return v7;
  }
  __break(1u);
  return result;
}

Swift::Int __swiftcall MLShapedArrayProtocol.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t MLShapedArrayProtocol.scalars.getter(uint64_t a1, uint64_t a2)
{
  v6[2] = a1;
  v6[3] = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_19EBF69C8();
  sub_19E5D809C((uint64_t)sub_19E5FAD20, (uint64_t)v6, a1, v4, a2);
  return v6[5];
}

uint64_t MLShapedArrayProtocol.init<A>(scalars:shape:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a6;
  v13[6] = a2;
  v13[7] = a1;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t (*)(void *, void *), void *, uint64_t, uint64_t))(a5 + 56);
  swift_bridgeObjectRetain();
  v11(a2, sub_19E5FD1C8, v13, a3, a5);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
}

uint64_t sub_19E5F89D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v36 - v13;
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 64);
  uint64_t v39 = v15;
  *(void *)&long long v40 = v12;
  uint64_t v18 = *(void *)(v16(v17, v15) + 16);
  swift_bridgeObjectRelease();
  uint64_t v19 = MEMORY[0x1E4FBC860];
  if (!v18) {
    return v19;
  }
  uint64_t v38 = v4;
  uint64_t v20 = *(void (**)(char *, void, uint64_t))(v8 + 16);
  v20(v14, v40, a3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for MLShapedArray();
  if (swift_dynamicCast())
  {
    swift_unknownObjectRelease();
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a2, a4);
    int64_t v22 = *(void *)(v21 + 16);
    if (v22)
    {
      uint64_t v47 = v19;
      uint64_t result = sub_19E66F5D8(0, v22, 0);
      uint64_t v24 = 0;
      uint64_t v19 = v47;
      while (1)
      {
        uint64_t v25 = *(void *)(v21 + 8 * v24 + 32);
        if (v25 < 0) {
          break;
        }
        uint64_t v47 = v19;
        unint64_t v27 = *(void *)(v19 + 16);
        unint64_t v26 = *(void *)(v19 + 24);
        if (v27 >= v26 >> 1)
        {
          uint64_t result = sub_19E66F5D8(v26 > 1, v27 + 1, 1);
          uint64_t v19 = v47;
        }
        ++v24;
        *(void *)(v19 + 16) = v27 + 1;
        unint64_t v28 = v19 + 16 * v27;
        *(void *)(v28 + 32) = 0;
        *(void *)(v28 + 40) = v25;
        if (v22 == v24) {
          goto LABEL_12;
        }
      }
      __break(1u);
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  uint64_t v36 = a2;
  uint64_t v37 = a4;
  v20(v11, v40, a3);
  type metadata accessor for MLShapedArraySlice();
  if (swift_dynamicCast())
  {
    uint64_t v19 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    return v19;
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_1E945B970);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_19EC36240;
  uint64_t v30 = v39;
  sub_19EBF6B98();
  uint64_t v31 = v47;
  uint64_t result = sub_19EBF6BD8();
  uint64_t v32 = v41;
  if (v41 >= v31)
  {
    *(void *)(v29 + 32) = v31;
    *(void *)(v29 + 40) = v32;
    sub_19EBF6B98();
    MLShapedArrayProtocol.subscript.getter(v46, a3, v30);
    uint64_t v41 = v47;
    long long v40 = v48;
    long long v42 = v48;
    uint64_t v43 = v49;
    uint64_t v44 = v50;
    uint64_t v45 = v51;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v33 = type metadata accessor for MLShapedArraySlice();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v35 = sub_19E5F89D8(&v41, v36, v33, v37, WitnessTable);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v47 = v29;
    sub_19E612A80(v35);
    return v47;
  }
LABEL_17:
  __break(1u);
  return result;
}

BOOL MLShapedArrayProtocol.isScalar.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((*(uint64_t (**)(void))(a2 + 64))() + 16);
  swift_bridgeObjectRelease();
  return v2 == 0;
}

uint64_t MLShapedArrayProtocol.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_19EC36240;
  *(void *)(v6 + 32) = a1;
  uint64_t v11 = v6;
  uint64_t v7 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 104);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE70);
  uint64_t v9 = sub_19E5DFDB8(&qword_1E945C258, (uint64_t *)&unk_1E945CE70);
  v7(&v11, v8, v9, a2, a3);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v5;
  uint64_t v7;

  uint64_t v7 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C270);
  sub_19E5DFDB8(&qword_1E945C278, &qword_1E945C270);
  return MLShapedArrayProtocol.subscript.getter((uint64_t)&v7, a2, v5, a3);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CFD0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_19EC36240;
  sub_19E5FE124(a1, v6 + 32);
  uint64_t v9 = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C270);
  sub_19E5DFDB8(&qword_1E945C278, &qword_1E945C270);
  MLShapedArrayProtocol.subscript.getter((uint64_t)&v9, a2, v7, a3);
  return swift_bridgeObjectRelease();
}

{
  uint64_t (*v5)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v9 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 104);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE70);
  uint64_t v7 = sub_19E5DFDB8(&qword_1E945C258, (uint64_t *)&unk_1E945CE70);
  return v5(&v9, v6, v7, a2, a3);
}

{
  uint64_t (*v5)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v9 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 128);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE70);
  uint64_t v7 = sub_19E5DFDB8(&qword_1E945C258, (uint64_t *)&unk_1E945CE70);
  return v5(&v9, v6, v7, a2, a3);
}

double sub_19E5F9118@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  MLShapedArrayProtocol.subscript.getter(a1, *(void *)(a2 + a1 - 32), *(void *)(a2 + a1 - 24), *(void *)(a2 + a1 - 16));
  *a3 = v5;
  a3[1] = v6;
  double result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

uint64_t sub_19E5F9170(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 32);
  uint64_t v6 = *(void *)(a4 + a3 - 24);
  uint64_t v7 = *(void *)(a4 + a3 - 16);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  uint64_t v12 = *a1;
  long long v13 = *(_OWORD *)(a1 + 1);
  uint64_t v14 = v8;
  uint64_t v15 = v9;
  uint64_t v16 = v10;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_19E5FDED4(&v12, a3, v5, v6, v7);
}

void (*MLShapedArrayProtocol.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(void **a1, char a2)
{
  long long v13 = malloc(0x68uLL);
  *a1 = v13;
  v13[9] = a6;
  void v13[10] = v6;
  v13[7] = a4;
  v13[8] = a5;
  v13[6] = a3;
  uint64_t v14 = *(void *)(a4 - 8);
  uint64_t v15 = v14;
  v13[11] = v14;
  v13[12] = malloc(*(void *)(v14 + 64));
  (*(void (**)(void))(v15 + 16))();
  MLShapedArrayProtocol.subscript.getter(a2, a3, a4, a5);
  return sub_19E5F93B0;
}

void sub_19E5F93B0(void **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = (*a1)[3];
  uint64_t v7 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v9 = (*a1)[11];
  uint64_t v8 = (void *)(*a1)[12];
  uint64_t v11 = (*a1)[7];
  uint64_t v10 = (*a1)[8];
  uint64_t v12 = (*a1)[6];
  *(void *)&long long v14 = **a1;
  *((void *)&v14 + 1) = v3;
  uint64_t v15 = v4;
  uint64_t v16 = v5;
  uint64_t v17 = v7;
  uint64_t v18 = v6;
  if (a2)
  {
    uint64_t v13 = v10;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_19E5FDED4(&v14, (uint64_t)v8, v12, v11, v13);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v8, v11);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_19E5FDED4(&v14, (uint64_t)v8, v12, v11, v10);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v8, v11);
  }
  free(v8);

  free(v2);
}

double sub_19E5F950C@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  MLShapedArrayProtocol.subscript.getter(*a1, a1[1], *(uint64_t *)((char *)a1 + a2 - 16), *(uint64_t *)((char *)a1 + a2 - 8));
  *a3 = v5;
  a3[1] = v6;
  double result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

uint64_t sub_19E5F955C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t *)((char *)a3 + a4 - 16);
  uint64_t v5 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  uint64_t v12 = *a1;
  long long v13 = *(_OWORD *)(a1 + 1);
  uint64_t v14 = v8;
  uint64_t v15 = v9;
  uint64_t v16 = v10;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return MLShapedArrayProtocol.subscript.setter(&v12, v6, v7, v4, v5);
}

uint64_t sub_19E5F96A8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t *)((char *)a3 + a4 - 16);
  uint64_t v5 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v6 = *a3;
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v11 = *a1;
  long long v12 = *(_OWORD *)(a1 + 1);
  uint64_t v13 = v7;
  uint64_t v14 = v8;
  uint64_t v15 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E5FE080(&v11, v6, v4, v5);

  return swift_bridgeObjectRelease();
}

void sub_19E5F9830(void **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = (*a1)[3];
  uint64_t v7 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v8 = (*a1)[8];
  uint64_t v9 = (*a1)[6];
  uint64_t v10 = (*a1)[7];
  *(void *)&long long v11 = **a1;
  *((void *)&v11 + 1) = v3;
  uint64_t v12 = v4;
  uint64_t v13 = v5;
  uint64_t v14 = v7;
  uint64_t v15 = v6;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_19E5FE080(&v11, v9, v10, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_19E5FE080(&v11, v9, v10, v8);
  }
  swift_bridgeObjectRelease();

  free(v2);
}

double sub_19E5F9A3C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  MLShapedArrayProtocol.subscript.getter(a1, *(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = v5;
  a3[1] = v6;
  double result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

uint64_t sub_19E5F9A90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  sub_19E5FE124(a3, (uint64_t)v16);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v11 = *a1;
  long long v12 = *(_OWORD *)(a1 + 1);
  uint64_t v13 = v7;
  uint64_t v14 = v8;
  uint64_t v15 = v9;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return MLShapedArrayProtocol.subscript.setter(&v11, (uint64_t)v16, v5, v6);
}

void (*MLShapedArrayProtocol.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x98uLL);
  *a1 = v9;
  v9[17] = a4;
  v9[18] = v4;
  unsigned char v9[16] = a3;
  sub_19E5FE124(a2, (uint64_t)(v9 + 6));
  MLShapedArrayProtocol.subscript.getter(a2, a3, a4);
  return sub_19E5F9CD0;
}

void sub_19E5F9CD0(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (long long *)(*a1 + 6);
  uint64_t v5 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v7 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v8 = (*a1)[4];
  uint64_t v9 = (*a1)[5];
  if (a2)
  {
    uint64_t v10 = v2[17];
    uint64_t v11 = v2[16];
    sub_19E5FE188(v3, (uint64_t)(v2 + 11));
    *(void *)&long long v14 = v5;
    *((void *)&v14 + 1) = v4;
    uint64_t v15 = v7;
    uint64_t v16 = v6;
    uint64_t v17 = v8;
    uint64_t v18 = v9;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MLShapedArrayProtocol.subscript.setter(&v14, (uint64_t)(v2 + 11), v11, v10);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = v2[17];
    uint64_t v13 = v2[16];
    *(void *)&long long v14 = **a1;
    *((void *)&v14 + 1) = v4;
    uint64_t v15 = v7;
    uint64_t v16 = v6;
    uint64_t v17 = v8;
    uint64_t v18 = v9;
    MLShapedArrayProtocol.subscript.setter(&v14, (uint64_t)v3, v13, v12);
  }

  free(v2);
}

uint64_t sub_19E5F9EAC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t *)((char *)a3 + a4 - 16);
  uint64_t v5 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v6 = *a3;
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v11 = *a1;
  long long v12 = *(_OWORD *)(a1 + 1);
  uint64_t v13 = v7;
  uint64_t v14 = v8;
  uint64_t v15 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return MLShapedArrayProtocol.subscript.setter(&v11, v6, v4, v5);
}

void sub_19E5FA10C(void **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = (*a1)[3];
  uint64_t v7 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v8 = (*a1)[9];
  uint64_t v10 = (*a1)[7];
  uint64_t v9 = (*a1)[8];
  *(void *)&long long v11 = **a1;
  *((void *)&v11 + 1) = v3;
  uint64_t v12 = v4;
  uint64_t v13 = v5;
  uint64_t v14 = v7;
  uint64_t v15 = v6;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MLShapedArrayProtocol.subscript.setter(&v11, v10, v9, v8);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    MLShapedArrayProtocol.subscript.setter(&v11, v10, v9, v8);
  }

  free(v2);
}

uint64_t MLShapedArrayProtocol.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_19E5FE1A0(a1, a2, a3, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v6(a1, AssociatedTypeWitness);
}

void (*MLShapedArrayProtocol.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v9 = malloc(0x48uLL);
  *a1 = v9;
  void v9[3] = a4;
  v9[4] = v4;
  v9[1] = a2;
  v9[2] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[5] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v9[6] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[7] = malloc(v12);
  v9[8] = malloc(v12);
  *uint64_t v9 = a2;
  uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 128);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE70);
  uint64_t v15 = sub_19E5DFDB8(&qword_1E945C258, (uint64_t *)&unk_1E945CE70);
  v13(v9, v14, v15, a3, a4);
  return sub_19E5FA4CC;
}

void sub_19E5FA4CC(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 56);
  uint64_t v4 = *(void **)(*(void *)a1 + 64);
  uint64_t v5 = *(void *)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 48);
  uint64_t v7 = *(void *)(*(void *)a1 + 24);
  uint64_t v9 = *(void *)(*(void *)a1 + 8);
  uint64_t v8 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 56), v4, v5);
    swift_bridgeObjectRetain();
    sub_19E5FE1A0((uint64_t)v3, v9, v8, v7);
    uint64_t v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
    v10(v4, v5);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_19E5FE1A0((uint64_t)v4, v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

void MLShapedArrayProtocol.subscript.getter(uint64_t a1@<X2>, uint64_t a2@<X3>, _OWORD *a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_19EBF6E68();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v13[-1] - v8;
  uint64_t v10 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2) + 16);
  swift_bridgeObjectRelease();
  if (v10)
  {
    sub_19EBF6B98();
    uint64_t v11 = v12;
    v13[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C280);
    v13[4] = &protocol witness table for <> PartialRangeFrom<A>;
    v13[0] = v11;
    MLShapedArrayProtocol.subscript.getter((uint64_t)v13, a1, a2);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
  }
  else
  {
    MLShapedArrayProtocol.scalar.getter(a1, a2, (uint64_t)v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v9, 1, AssociatedTypeWitness) == 1)
    {
      __break(1u);
    }
    else
    {
      swift_getAssociatedConformanceWitness();
      MLShapedArraySlice.init(scalar:)((uint64_t)v9, AssociatedTypeWitness, a3);
    }
  }
}

uint64_t MLShapedArrayProtocol.scalar.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)((*(uint64_t (**)(void))(a2 + 64))() + 16);
  swift_bridgeObjectRelease();
  if (v6)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
    return v8(a3, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    MLShapedArrayProtocol.scalars.getter(a1, a2);
    swift_getAssociatedTypeWitness();
    sub_19EBF69C8();
    swift_getWitnessTable();
    sub_19EBF6C18();
    return swift_bridgeObjectRelease();
  }
}

uint64_t MLShapedArrayProtocol.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19E5FE554(a1, a4, a5);
}

uint64_t MLShapedArrayProtocol.scalar.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19E5FE2F4(a1, a2, a3);
  swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_19EBF6E68();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(a1, v4);
}

void (*MLShapedArrayProtocol.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x48uLL);
  *a1 = v9;
  v9[7] = a5;
  v9[8] = v5;
  v9[6] = a4;
  MLShapedArrayProtocol.subscript.getter(a4, a5, v9);
  return sub_19E5FA9F8;
}

void sub_19E5FA9F8(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = (*a1)[3];
  uint64_t v7 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v8 = (*a1)[7];
  uint64_t v9 = (*a1)[6];
  v10[0] = **a1;
  v10[1] = v3;
  v10[2] = v4;
  v10[3] = v5;
  void v10[4] = v7;
  void v10[5] = v6;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_19E5FE554(v10, v9, v8);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_19E5FE554(v10, v9, v8);
  }

  free(v2);
}

uint64_t MLShapedArrayProtocol.scalarCount.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(a2 + 64))();
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(result + 32);
    uint64_t v5 = 1;
    while (1)
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = v5 * v6;
      if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63) {
        break;
      }
      uint64_t v5 = v7;
      if (!--v3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v7 = 1;
LABEL_7:
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

uint64_t sub_19E5FAB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 16);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v6 = swift_bridgeObjectRetain();
  sub_19E5FE7B4(v6, v4, v5);

  return swift_bridgeObjectRelease();
}

uint64_t MLShapedArrayProtocol.scalars.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19E5FE7B4(a1, a2, a3);

  return swift_bridgeObjectRelease();
}

uint64_t sub_19E5FABFC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = v3;
  uint64_t v7 = v5;
  sub_19E5D8464((uint64_t)&v5 + 8, (uint64_t)v6);
  sub_19E5F63A4((uint64_t)&v9);
  sub_19E5F63A4((uint64_t)&v8);
  sub_19E5F63A4((uint64_t)&v7);
  sub_19E5F63A4((uint64_t)v6);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ScalarSequence();
  swift_getWitnessTable();
  uint64_t result = sub_19EBF69D8();
  *a2 = result;
  return result;
}

uint64_t sub_19E5FAD20@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_19E5FABFC(a1, a2);
}

uint64_t sub_19E5FAD3C(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v62 = a3;
  int8x16_t v60 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v61 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v58 = (char *)&v52 - v6;
  int64_t v7 = *(void *)(a2 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v55 = a4;
  if (v7)
  {
    uint64_t v63 = MEMORY[0x1E4FBC860];
    sub_19E66F5D8(0, v7, 0);
    uint64_t result = v63;
    uint64_t v9 = (uint64_t *)(a2 + 32);
    while (1)
    {
      uint64_t v11 = *v9++;
      uint64_t v10 = v11;
      if (v11 < 0) {
        break;
      }
      uint64_t v63 = result;
      unint64_t v13 = *(void *)(result + 16);
      unint64_t v12 = *(void *)(result + 24);
      if (v13 >= v12 >> 1)
      {
        sub_19E66F5D8(v12 > 1, v13 + 1, 1);
        uint64_t result = v63;
      }
      *(void *)(result + 16) = v13 + 1;
      uint64_t v14 = result + 16 * v13;
      *(void *)(v14 + 32) = 0;
      *(void *)(v14 + 40) = v10;
      if (!--v7) {
        goto LABEL_7;
      }
    }
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
  }
  else
  {
LABEL_7:
    uint64_t result = (uint64_t)sub_19E6D41D8((void *)result);
    uint64_t v16 = result;
    if (v15)
    {
      uint64_t v17 = v15;
      uint64_t v18 = 0;
      uint64_t v56 = result + 32;
      uint64_t v57 = v61 + 40;
      uint64_t v54 = result + 8;
      int64_t v53 = v62 + 6;
      do
      {
        int64_t v22 = v17;
        uint64_t v23 = v17 + 2;
        unint64_t v24 = v17[2];
        if (v24)
        {
          uint64_t v25 = v24 - 1;
          uint64_t v26 = v17[v24 + 3];
          BOOL v27 = __OFADD__(v26, 1);
          uint64_t v28 = v26 + 1;
          if (v27) {
            goto LABEL_66;
          }
          if (v24 > *(void *)(v16 + 16)) {
            goto LABEL_67;
          }
          if (v28 >= *(void *)(v56 + 16 * v25 + 8))
          {
            uint64_t result = swift_bridgeObjectRetain();
            if (v24 != 1)
            {
              uint64_t v29 = (int64_t *)(v54 + 16 * v24);
              unint64_t v30 = v24;
              while (v17)
              {
                uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                if ((result & 1) == 0)
                {
                  uint64_t result = (uint64_t)sub_19E612754(v17);
                  uint64_t v17 = (void *)result;
                }
                unint64_t v31 = v30 - 1;
                if ((int64_t)(v30 - 1) >= v17[2])
                {
                  __break(1u);
LABEL_60:
                  __break(1u);
LABEL_61:
                  __break(1u);
LABEL_62:
                  __break(1u);
                  goto LABEL_63;
                }
                v17[v30 + 3] = 0;
                uint64_t v25 = v30 - 2;
                if ((uint64_t)(v30 - 2) >= (uint64_t)*v23) {
                  goto LABEL_60;
                }
                unint64_t v32 = v23[v30];
                BOOL v27 = __OFADD__(v32, 1);
                int64_t v33 = v32 + 1;
                if (v27) {
                  goto LABEL_61;
                }
                if (v25 >= *(void *)(v16 + 16)) {
                  goto LABEL_62;
                }
                if (v33 < *v29) {
                  goto LABEL_29;
                }
                v29 -= 2;
                --v30;
                if (v31 == 1) {
                  goto LABEL_28;
                }
              }
              goto LABEL_80;
            }
LABEL_28:
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v17 = 0;
          }
          else
          {
            swift_bridgeObjectRetain();
LABEL_29:
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_19E612754(v17);
              uint64_t v17 = (void *)result;
            }
            if (v25 >= v17[2]) {
              goto LABEL_74;
            }
            uint64_t v34 = v17[v25 + 4];
            BOOL v27 = __OFADD__(v34, 1);
            uint64_t v35 = v34 + 1;
            if (v27) {
              goto LABEL_75;
            }
            v17[v25 + 4] = v35;
          }
        }
        else
        {
          uint64_t result = swift_bridgeObjectRetain();
        }
        if (__OFADD__(v18, 1)) {
          goto LABEL_64;
        }
        unint64_t v36 = *v23;
        unint64_t v37 = v62[2];
        if (v37 < *v23) {
          goto LABEL_65;
        }
        uint64_t v38 = *v60;
        if (v24)
        {
          if (!v36) {
            goto LABEL_68;
          }
          uint64_t v39 = v22[4];
          uint64_t v40 = v62[4];
          uint64_t v19 = v39 * v40;
          if ((unsigned __int128)(v39 * (__int128)v40) >> 64 != (v39 * v40) >> 63) {
            goto LABEL_69;
          }
          if (v24 != 1)
          {
            if (v36 < 2) {
              goto LABEL_76;
            }
            if (v37 != 1)
            {
              uint64_t v41 = v22[5];
              uint64_t v42 = v62[5];
              uint64_t v43 = v41 * v42;
              if ((unsigned __int128)(v41 * (__int128)v42) >> 64 != (v41 * v42) >> 63) {
                goto LABEL_77;
              }
              BOOL v27 = __OFADD__(v19, v43);
              v19 += v43;
              if (v27) {
                goto LABEL_78;
              }
              if (v24 != 2)
              {
                BOOL v44 = v36 >= 3;
                unint64_t v45 = v36 - 3;
                if (!v44) {
                  goto LABEL_79;
                }
                unint64_t v46 = v37 - 2;
                if (v37 != 2)
                {
                  uint64_t v47 = v22 + 6;
                  if (v37 <= 2) {
                    unint64_t v37 = 2;
                  }
                  unint64_t v48 = v37 - 2;
                  unint64_t v49 = v24 - 3;
                  uint64_t v50 = v53;
                  while (v48)
                  {
                    uint64_t v51 = *v47 * *v50;
                    if ((unsigned __int128)(*v47 * (__int128)*v50) >> 64 != v51 >> 63) {
                      goto LABEL_71;
                    }
                    BOOL v27 = __OFADD__(v19, v51);
                    v19 += v51;
                    if (v27) {
                      goto LABEL_72;
                    }
                    if (!v49) {
                      goto LABEL_10;
                    }
                    if (!v45) {
                      goto LABEL_73;
                    }
                    ++v50;
                    ++v47;
                    --v45;
                    --v48;
                    --v49;
                    if (!--v46) {
                      goto LABEL_10;
                    }
                  }
                  goto LABEL_70;
                }
              }
            }
          }
        }
        else
        {
          uint64_t v19 = 0;
        }
LABEL_10:
        swift_bridgeObjectRelease();
        uint64_t v21 = v58;
        uint64_t v20 = AssociatedTypeWitness;
        sub_19EBF69E8();
        uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v61 + 40))(v38 + *(void *)(v61 + 72) * v19, v21, v20);
        ++v18;
      }
      while (v17);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*MLShapedArrayProtocol.scalars.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = MLShapedArrayProtocol.scalars.getter(a2, a3);
  return sub_19E5FB254;
}

uint64_t sub_19E5FB254(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  if (a2)
  {
    uint64_t v5 = swift_bridgeObjectRetain();
    sub_19E5FE7B4(v5, v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_19E5FE7B4(v4, v3, v2);
  }

  return swift_bridgeObjectRelease();
}

void (*MLShapedArrayProtocol.scalar.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  int64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *int64_t v7 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_19EBF6E68();
  void v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  uint64_t v11 = malloc(v10);
  v7[6] = v11;
  MLShapedArrayProtocol.scalar.getter(a2, a3, (uint64_t)v11);
  return sub_19E5FB3C8;
}

void sub_19E5FB3C8(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[5];
  uint64_t v4 = (void *)(*a1)[6];
  uint64_t v5 = (*a1)[3];
  uint64_t v6 = (*a1)[4];
  uint64_t v7 = (*a1)[1];
  uint64_t v8 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[5], v4, v5);
    sub_19E5FE2F4((uint64_t)v3, v8, v7);
    uint64_t v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v3, v5);
    v9(v4, v5);
  }
  else
  {
    sub_19E5FE2F4((*a1)[6], v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t MLShapedArrayProtocol.fill(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_19E66F568(AssociatedTypeWitness, AssociatedTypeWitness);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  swift_allocObject();
  uint64_t v8 = sub_19EBF6918();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, a1, AssociatedTypeWitness);
  uint64_t v13 = sub_19E669D78(v8);
  uint64_t v10 = sub_19EBF69C8();
  uint64_t WitnessTable = swift_getWitnessTable();
  MLShapedArrayProtocol.fill<A>(with:)((uint64_t)&v13, a2, v10, a3, WitnessTable);
  return swift_bridgeObjectRelease();
}

uint64_t MLShapedArrayProtocol.fill<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for LoopIterator();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = &v19[-v15];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  sub_19E63CB00((uint64_t)v12, a3, a5, v16);
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  unint64_t v24 = v16;
  (*(void (**)(uint64_t (*)(uint64_t *, uint64_t, void *), unsigned char *, uint64_t, uint64_t, uint64_t))(a4 + 160))(sub_19E5FE8A4, v19, MEMORY[0x1E4FBC848] + 8, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_19E5FB7FC(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v71 = a4;
  unint64_t v72 = a1;
  uint64_t v67 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = sub_19EBF6E68();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v70 = (uint64_t)&v62 - v13;
  int64_t v14 = *(void *)(a2 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v65 = a6;
  if (v14)
  {
    uint64_t v73 = MEMORY[0x1E4FBC860];
    sub_19E66F5D8(0, v14, 0);
    uint64_t result = v73;
    uint64_t v16 = (uint64_t *)(a2 + 32);
    while (1)
    {
      uint64_t v18 = *v16++;
      uint64_t v17 = v18;
      if (v18 < 0) {
        break;
      }
      uint64_t v73 = result;
      unint64_t v20 = *(void *)(result + 16);
      unint64_t v19 = *(void *)(result + 24);
      if (v20 >= v19 >> 1)
      {
        sub_19E66F5D8(v19 > 1, v20 + 1, 1);
        uint64_t result = v73;
      }
      *(void *)(result + 16) = v20 + 1;
      uint64_t v21 = result + 16 * v20;
      *(void *)(v21 + 32) = 0;
      *(void *)(v21 + 40) = v17;
      if (!--v14) {
        goto LABEL_7;
      }
    }
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
  }
  else
  {
LABEL_7:
    uint64_t result = (uint64_t)sub_19E6D41D8((void *)result);
    uint64_t v23 = result;
    if (v22)
    {
      unint64_t v24 = v22;
      uint64_t v66 = result + 32;
      uint64_t v68 = AssociatedTypeWitness - 8;
      uint64_t v69 = AssociatedTypeWitness;
      uint64_t v63 = result + 8;
      uint64_t v64 = a8;
      do
      {
        uint64_t v25 = v24 + 2;
        unint64_t v26 = v24[2];
        if (v26)
        {
          uint64_t v27 = v26 - 1;
          uint64_t v28 = v24 + 4;
          uint64_t v29 = v24[v26 + 3];
          BOOL v30 = __OFADD__(v29, 1);
          uint64_t v31 = v29 + 1;
          if (v30) {
            goto LABEL_65;
          }
          if (v26 > *(void *)(v23 + 16)) {
            goto LABEL_66;
          }
          if (v31 >= *(void *)(v66 + 16 * v27 + 8))
          {
            uint64_t result = swift_bridgeObjectRetain();
            if (v26 != 1)
            {
              uint64_t v35 = (int64_t *)(v63 + 16 * v26);
              unint64_t v36 = v26;
              unint64_t v32 = v24;
              while (v32)
              {
                uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                if ((result & 1) == 0)
                {
                  uint64_t result = (uint64_t)sub_19E612754(v32);
                  unint64_t v32 = (void *)result;
                }
                unint64_t v37 = v36 - 1;
                if ((int64_t)(v36 - 1) >= v32[2])
                {
                  __break(1u);
LABEL_61:
                  __break(1u);
LABEL_62:
                  __break(1u);
LABEL_63:
                  __break(1u);
                  goto LABEL_64;
                }
                v32[v36 + 3] = 0;
                uint64_t v27 = v36 - 2;
                if ((uint64_t)(v36 - 2) >= (uint64_t)*v25) {
                  goto LABEL_61;
                }
                unint64_t v38 = v25[v36];
                BOOL v30 = __OFADD__(v38, 1);
                int64_t v39 = v38 + 1;
                if (v30) {
                  goto LABEL_62;
                }
                if (v27 >= *(void *)(v23 + 16)) {
                  goto LABEL_63;
                }
                if (v39 < *v35) {
                  goto LABEL_27;
                }
                v35 -= 2;
                --v36;
                if (v37 == 1) {
                  goto LABEL_26;
                }
              }
              goto LABEL_80;
            }
LABEL_26:
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v32 = 0;
            uint64_t v40 = v67;
          }
          else
          {
            swift_bridgeObjectRetain();
            unint64_t v32 = v24;
LABEL_27:
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_19E612754(v32);
              unint64_t v32 = (void *)result;
            }
            uint64_t v40 = v67;
            if (v27 >= v32[2]) {
              goto LABEL_74;
            }
            uint64_t v41 = v32[v27 + 4];
            BOOL v30 = __OFADD__(v41, 1);
            uint64_t v42 = v41 + 1;
            if (v30) {
              goto LABEL_75;
            }
            v32[v27 + 4] = v42;
          }
          unint64_t v43 = *v25;
          unint64_t v44 = v40[2];
          if (v44 < *v25) {
            goto LABEL_67;
          }
          if (!v43) {
            goto LABEL_68;
          }
          uint64_t v45 = v40[4];
          uint64_t v33 = *v28 * v45;
          if ((unsigned __int128)(*v28 * (__int128)v45) >> 64 != v33 >> 63) {
            goto LABEL_69;
          }
          uint64_t v34 = *v72;
          if (v26 != 1)
          {
            if (v43 < 2) {
              goto LABEL_76;
            }
            if (v44 != 1)
            {
              uint64_t v46 = v24[5];
              uint64_t v47 = v40[5];
              uint64_t v48 = v46 * v47;
              if ((unsigned __int128)(v46 * (__int128)v47) >> 64 != (v46 * v47) >> 63) {
                goto LABEL_77;
              }
              BOOL v30 = __OFADD__(v33, v48);
              v33 += v48;
              if (v30) {
                goto LABEL_78;
              }
              if (v26 != 2)
              {
                if (v43 < 3) {
                  goto LABEL_79;
                }
                if (v44 != 2)
                {
                  if (v44 <= 2) {
                    uint64_t v53 = 2;
                  }
                  else {
                    uint64_t v53 = v40[2];
                  }
                  unint64_t v54 = 3 - v43;
                  uint64_t v55 = 2 - v53;
                  unint64_t v56 = 2 - v44;
                  unint64_t v57 = 3 - v26;
                  uint64_t v58 = 6;
                  uint64_t v49 = v69;
                  while (v55 + v58 != 6)
                  {
                    uint64_t v59 = v24[v58];
                    uint64_t v60 = v40[v58];
                    uint64_t v61 = v59 * v60;
                    if ((unsigned __int128)(v59 * (__int128)v60) >> 64 != (v59 * v60) >> 63) {
                      goto LABEL_71;
                    }
                    BOOL v30 = __OFADD__(v33, v61);
                    v33 += v61;
                    if (v30) {
                      goto LABEL_72;
                    }
                    if (v57 + v58 != 6)
                    {
                      if (v54 + v58 == 6) {
                        goto LABEL_73;
                      }
                      ++v58;
                      if (v56 + v58 != 6) {
                        continue;
                      }
                    }
                    swift_bridgeObjectRelease();
                    unint64_t v24 = v32;
                    goto LABEL_45;
                  }
                  goto LABEL_70;
                }
              }
            }
          }
          swift_bridgeObjectRelease();
          unint64_t v24 = v32;
        }
        else
        {
          uint64_t v33 = 0;
          uint64_t v34 = *v72;
        }
        uint64_t v49 = v69;
LABEL_45:
        uint64_t v50 = type metadata accessor for LoopIterator();
        uint64_t v51 = v70;
        sub_19E63CCE0(v50, v70);
        uint64_t v52 = *(void *)(v49 - 8);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v51, 1, v49);
        if (result == 1) {
          goto LABEL_81;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 40))(v34 + *(void *)(v52 + 72) * v33, v51, v49);
      }
      while (v24);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

double sub_19E5FBCF4@<D0>(void *a1@<X1>, uint64_t a2@<X2>, void (*a3)(_OWORD *__return_ptr, void, void, void)@<X3>, _OWORD *a4@<X8>)
{
  a3(v7, *a1, *(void *)((char *)a1 + a2 - 16), *(void *)((char *)a1 + a2 - 8));
  long long v5 = v7[1];
  *a4 = v7[0];
  a4[1] = v5;
  double result = *(double *)&v8;
  a4[2] = v8;
  return result;
}

uint64_t sub_19E5FBD4C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t *)((char *)a3 + a4 - 16);
  uint64_t v5 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v6 = *a3;
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v11 = *a1;
  long long v12 = *(_OWORD *)(a1 + 1);
  uint64_t v13 = v7;
  uint64_t v14 = v8;
  uint64_t v15 = v9;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return MLShapedArrayProtocol.subscript.setter(&v11, v6, v4, v5);
}

uint64_t MLShapedArrayProtocol<>.init(identityMatrixOfSize:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_19EC365B0;
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a1;
  return (*(uint64_t (**)(void))(a3 + 56))();
}

{
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_19EC365B0;
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a1;
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t sub_19E5FBEC0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  sub_19EBF6688();
  sub_19EBF6688();
  swift_getAssociatedConformanceWitness();
  sub_19E66BBBC(v11, v12, v15, v16, (uint64_t)v10, (uint64_t)v8, AssociatedTypeWitness);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v13)(v10, AssociatedTypeWitness);
}

uint64_t MLShapedArrayProtocol<>.init(randomScalarsIn:shape:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(a2 + 32);
    uint64_t v9 = 1;
    do
    {
      uint64_t v10 = *v8++;
      uint64_t v11 = v9 * v10;
      if ((unsigned __int128)(v9 * (__int128)v10) >> 64 != (v9 * v10) >> 63)
      {
        __break(1u);
        return result;
      }
      uint64_t v9 = v11;
      --v7;
    }
    while (v7);
    if ((v11 & 0x8000000000000000) == 0) {
      goto LABEL_8;
    }
    __break(1u);
  }
  uint64_t v9 = 1;
LABEL_8:
  v24[0] = 0;
  v24[1] = v9;
  uint64_t v12 = MEMORY[0x1F4188790](result);
  v22[2] = a3;
  v22[3] = a4;
  v22[4] = v13;
  v22[5] = v14;
  v22[6] = v12;
  v22[9] = v13;
  uint64_t v23 = v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE60);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v17 = sub_19E5FE964();
  v24[0] = sub_19E5F7AC4((void (*)(char *, char *))sub_19E5FE8EC, (uint64_t)v22, v15, AssociatedTypeWitness, MEMORY[0x1E4FBC248], v17, MEMORY[0x1E4FBC278], v18);
  uint64_t v19 = sub_19EBF69C8();
  uint64_t WitnessTable = swift_getWitnessTable();
  MLShapedArrayProtocol.init<A>(scalars:shape:)((uint64_t)v24, a2, a3, v19, a4, WitnessTable);
  uint64_t v21 = sub_19EBF6C78();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v23, v21);
}

{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  void v21[8];
  uint64_t v22;
  void v23[2];

  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(a2 + 32);
    uint64_t v9 = 1;
    do
    {
      uint64_t v10 = *v8++;
      uint64_t v11 = v9 * v10;
      if ((unsigned __int128)(v9 * (__int128)v10) >> 64 != (v9 * v10) >> 63)
      {
        __break(1u);
        return result;
      }
      uint64_t v9 = v11;
      --v7;
    }
    while (v7);
    if ((v11 & 0x8000000000000000) == 0) {
      goto LABEL_8;
    }
    __break(1u);
  }
  uint64_t v9 = 1;
LABEL_8:
  v23[0] = 0;
  v23[1] = v9;
  uint64_t v12 = MEMORY[0x1F4188790](result);
  v21[2] = a3;
  _OWORD v21[3] = a4;
  v21[4] = v13;
  v21[5] = v12;
  v21[7] = v13;
  uint64_t v22 = v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE60);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = sub_19E5FE964();
  v23[0] = sub_19E5F7AC4((void (*)(char *, char *))sub_19E5FEA00, (uint64_t)v21, v14, AssociatedTypeWitness, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v17);
  uint64_t v18 = sub_19EBF69C8();
  uint64_t WitnessTable = swift_getWitnessTable();
  MLShapedArrayProtocol.init<A>(scalars:shape:)((uint64_t)v23, a2, a3, v18, a4, WitnessTable);
  unint64_t v20 = sub_19EBF6C78();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v22, v20);
}

uint64_t sub_19E5FC308(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v16 - v10;
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v17 = v12;
  uint64_t v21 = 0;
  sub_19E5FEFB8();
  sub_19EBF6F58();
  uint64_t v21 = 1;
  sub_19EBF6F58();
  swift_getAssociatedConformanceWitness();
  sub_19E66BBBC(v17, v13, v19, v20, (uint64_t)v11, (uint64_t)v9, AssociatedTypeWitness);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v9, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v14)(v11, AssociatedTypeWitness);
}

uint64_t MLShapedArrayProtocol.init(repeating:shape:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v7[2] = a3;
  void v7[3] = a4;
  v7[4] = a1;
  (*(void (**)(uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t))(a4 + 56))(a2, sub_19E5FEA68, v7, a3, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_19E5FC798(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v98 = a4;
  uint64_t v96 = a2;
  uint64_t v91 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v80 = sub_19EBF6E68();
  uint64_t v79 = *(void *)(v80 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v80);
  unint64_t v89 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v79 - v15;
  uint64_t v92 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  id v97 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  unint64_t v90 = (char *)&v79 - v20;
  uint64_t v21 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = a8;
  uint64_t v94 = a6;
  uint64_t v95 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v95);
  unint64_t v26 = (char *)&v79 - v25;
  int64_t v27 = *(void *)(a3 + 16);
  if (v27)
  {
    uint64_t v28 = a3;
    uint64_t v29 = (uint64_t *)(a3 + 32);
    uint64_t v30 = 1;
    uint64_t v31 = *(void *)(a3 + 16);
    do
    {
      uint64_t v32 = *v29++;
      uint64_t v33 = v30 * v32;
      if ((unsigned __int128)(v30 * (__int128)v32) >> 64 != (v30 * v32) >> 63) {
        goto LABEL_73;
      }
      uint64_t v30 = v33;
      --v31;
    }
    while (v31);
  }
  else
  {
    uint64_t v28 = a3;
    uint64_t v33 = 1;
  }
  uint64_t v82 = v24;
  (*(void (**)(char *, void *, uint64_t))(v21 + 16))(v23, v98, v94);
  sub_19EBF67F8();
  if (v27)
  {
    unint64_t v90 = v26;
    uint64_t v84 = AssociatedTypeWitness;
    uint64_t v99 = MEMORY[0x1E4FBC860];
    sub_19E66F5D8(0, v27, 0);
    uint64_t v34 = (void *)v99;
    uint64_t v35 = (uint64_t *)(v28 + 32);
    do
    {
      uint64_t v36 = *v35++;
      uint64_t v21 = v36;
      if (v36 < 0) {
        goto LABEL_74;
      }
      uint64_t v99 = (uint64_t)v34;
      unint64_t v38 = v34[2];
      unint64_t v37 = v34[3];
      if (v38 >= v37 >> 1)
      {
        sub_19E66F5D8(v37 > 1, v38 + 1, 1);
        uint64_t v34 = (void *)v99;
      }
      v34[2] = v38 + 1;
      int64_t v39 = &v34[2 * v38];
      v39[4] = 0;
      v39[5] = v21;
      --v27;
    }
    while (v27);
    uint64_t v40 = sub_19E6D41D8(v34);
    uint64_t v42 = v41;
    uint64_t v21 = 0;
    uint64_t v87 = (void (**)(char *, char *, uint64_t))(v92 + 32);
    uint64_t v88 = (unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
    unint64_t v85 = v40 + 4;
    uint64_t v86 = v92 + 40;
    long long v98 = v40;
    id v83 = v40 + 1;
    uint64_t v81 = v96 + 6;
    uint64_t v43 = v84;
    while (v42)
    {
      uint64_t v46 = v42;
      uint64_t v47 = v42 + 2;
      uint64_t v48 = (char *)v42[2];
      if (!v48)
      {
        swift_bridgeObjectRetain();
        goto LABEL_41;
      }
      uint64_t v49 = v48 - 1;
      uint64_t v50 = v42[(void)(v48 - 1) + 4];
      BOOL v45 = __OFADD__(v50, 1);
      uint64_t v51 = v50 + 1;
      if (v45) {
        goto LABEL_77;
      }
      if ((unint64_t)v48 > v98[2]) {
        goto LABEL_78;
      }
      if (v51 < v85[2 * (void)v49 + 1])
      {
        swift_bridgeObjectRetain();
        goto LABEL_36;
      }
      swift_bridgeObjectRetain();
      if (v48 == (char *)1)
      {
LABEL_34:
        swift_bridgeObjectRelease();
        uint64_t v42 = 0;
        uint64_t v43 = v84;
        goto LABEL_41;
      }
      uint64_t v52 = &v83[2 * (void)v48];
      unint64_t v26 = v48;
      while (1)
      {
        if (!v42) {
          goto LABEL_91;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v42 = sub_19E612754(v42);
        }
        uint64_t v53 = v26 - 1;
        if ((uint64_t)(v26 - 1) >= v42[2])
        {
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }
        v42[(void)v26 + 3] = 0;
        uint64_t v49 = v26 - 2;
        if ((uint64_t)(v26 - 2) >= (uint64_t)*v47) {
          goto LABEL_70;
        }
        unint64_t v54 = v47[(void)v26];
        BOOL v45 = __OFADD__(v54, 1);
        int64_t v55 = v54 + 1;
        if (v45) {
          goto LABEL_71;
        }
        if ((uint64_t)v49 >= v98[2]) {
          goto LABEL_72;
        }
        if (v55 < *v52) {
          break;
        }
        v52 -= 2;
        --v26;
        if (v53 == (char *)1) {
          goto LABEL_34;
        }
      }
      uint64_t v43 = v84;
LABEL_36:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v42 = sub_19E612754(v42);
      }
      if ((uint64_t)v49 >= v42[2]) {
        goto LABEL_85;
      }
      uint64_t v56 = v42[(void)v49 + 4];
      BOOL v45 = __OFADD__(v56, 1);
      uint64_t v57 = v56 + 1;
      if (v45)
      {
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        (*(void (**)(char *, uint64_t))(v79 + 8))(v26, v80);
        uint64_t v99 = 0;
        unint64_t v100 = 0xE000000000000000;
        sub_19EBF6FE8();
        swift_bridgeObjectRelease();
        uint64_t v99 = 0xD000000000000015;
        unint64_t v100 = 0x800000019EC08C60;
        uint64_t v101 = v33;
        sub_19EBF7318();
        sub_19EBF67D8();
        swift_bridgeObjectRelease();
        sub_19EBF67D8();
        swift_bridgeObjectRetain();
        sub_19EBF67D8();
        swift_bridgeObjectRelease();
        uint64_t v16 = (char *)v99;
        unint64_t v77 = v100;
        uint64_t v101 = v21;
        uint64_t v99 = sub_19EBF7318();
        unint64_t v100 = v78;
        sub_19EBF67D8();
        uint64_t v99 = (uint64_t)v16;
        unint64_t v100 = v77;
        swift_bridgeObjectRetain();
        sub_19EBF67D8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        while (1)
        {
          sub_19EBF71F8();
          __break(1u);
LABEL_94:
          (*(void (**)(char *, uint64_t))(v79 + 8))(v16, v80);
        }
      }
      v42[(void)v49 + 4] = v57;
LABEL_41:
      swift_getAssociatedConformanceWitness();
      unint64_t v26 = v89;
      sub_19EBF6EB8();
      if ((*v88)(v26, 1, v43) == 1) {
        goto LABEL_92;
      }
      (*v87)(v97, v26, v43);
      unint64_t v58 = *v47;
      unint64_t v59 = v96[2];
      if (v59 < *v47) {
        goto LABEL_75;
      }
      uint64_t v60 = *v91;
      if (!v48)
      {
        uint64_t v44 = 0;
        goto LABEL_15;
      }
      if (!v58) {
        goto LABEL_79;
      }
      uint64_t v61 = v46[4];
      uint64_t v62 = v96[4];
      uint64_t v44 = v61 * v62;
      if ((unsigned __int128)(v61 * (__int128)v62) >> 64 != (v61 * v62) >> 63) {
        goto LABEL_80;
      }
      if (v48 == (char *)1) {
        goto LABEL_15;
      }
      if (v58 < 2) {
        goto LABEL_87;
      }
      if (v59 == 1) {
        goto LABEL_15;
      }
      uint64_t v63 = v46[5];
      uint64_t v64 = v96[5];
      uint64_t v65 = v63 * v64;
      if ((unsigned __int128)(v63 * (__int128)v64) >> 64 != (v63 * v64) >> 63) {
        goto LABEL_88;
      }
      BOOL v45 = __OFADD__(v44, v65);
      v44 += v65;
      if (v45) {
        goto LABEL_89;
      }
      if (v48 != (char *)2)
      {
        BOOL v66 = v58 >= 3;
        unint64_t v67 = v58 - 3;
        if (!v66) {
          goto LABEL_90;
        }
        unint64_t v68 = v59 - 2;
        if (v59 != 2)
        {
          uint64_t v69 = v46 + 6;
          if (v59 <= 2) {
            unint64_t v59 = 2;
          }
          unint64_t v70 = v59 - 2;
          uint64_t v71 = v48 - 3;
          unint64_t v72 = v81;
          while (v70)
          {
            uint64_t v73 = *v69 * *v72;
            if ((unsigned __int128)(*v69 * (__int128)*v72) >> 64 != v73 >> 63) {
              goto LABEL_82;
            }
            BOOL v45 = __OFADD__(v44, v73);
            v44 += v73;
            if (v45) {
              goto LABEL_83;
            }
            if (!v71) {
              goto LABEL_15;
            }
            if (!v67) {
              goto LABEL_84;
            }
            ++v72;
            ++v69;
            --v67;
            --v70;
            --v71;
            if (!--v68) {
              goto LABEL_15;
            }
          }
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
          goto LABEL_86;
        }
      }
LABEL_15:
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, char *, uint64_t))(v92 + 40))(v60 + *(void *)(v92 + 72) * v44, v97, v43);
      BOOL v45 = __OFADD__(v21++, 1);
      if (v45) {
        goto LABEL_76;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v26 = v90;
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    sub_19EBF6EB8();
    uint64_t v74 = v92;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v16, 1, AssociatedTypeWitness) == 1) {
      goto LABEL_94;
    }
    int64_t v75 = v90;
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v90, v16, AssociatedTypeWitness);
    (*(void (**)(void, char *, uint64_t))(v74 + 40))(*v91, v75, AssociatedTypeWitness);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v26, v95);
}

uint64_t sub_19E5FD1C8(void *a1, void *a2)
{
  return sub_19E5FC798(a1, a2, *(void *)(v2 + 48), *(void **)(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t MLShapedArrayProtocol.init(bytesNoCopy:shape:deallocator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a4;
  uint64_t v17 = a1;
  uint64_t v8 = sub_19EBF6388();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v12)
  {
    uint64_t v13 = sub_19EBF6968();
    *(void *)(v13 + 16) = v12;
  }
  else
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
  }
  v19[1] = v12;
  uint64_t v20 = 0;
  v19[0] = v13 + 32;
  sub_19E6B5844(v19, &v20, a2);
  uint64_t v14 = v20;
  if (v12 < v20)
  {
    __break(1u);
    __break(1u);
    *(void *)(v13 + 16) = v14;
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    *(void *)(v13 + 16) = v20;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(a5 + 48))(v17, a2, v13, v11, v18, a5);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a3, v8);
  }
  return result;
}

uint64_t MLShapedArrayProtocol.init<A>(converting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 64))(a3, a5);
  _OWORD v12[2] = a2;
  _OWORD v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  v12[6] = a1;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(a4 + 56))(v10, sub_19E5FEACC, v12, a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
}

void sub_19E5FD4A8(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  unint64_t v5 = a3[2];
  if (v5 != a4[2])
  {
    __break(1u);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_19E60F71C(0, v5);
  if (v5 != a5[2])
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v16 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_19E60F71C(0, v5);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = sub_19EBF6758();
  if (!v12)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v13 = v12;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_19EBF6758();
  if (v15)
  {
    sub_19E6B395C(v16, a3, a4, v10, a3, a5, v13, v15, AssociatedTypeWitness, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t MLShapedArrayProtocol.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_19EBF6388();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  unint64_t v12 = (unint64_t)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  id v17 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v18 = a1;
  if (v17 == objc_msgSend(a1, sel_dataType))
  {
    unint64_t v49 = v12;
    uint64_t v51 = a4;
    id v19 = objc_msgSend(a1, sel_shape);
    unint64_t v56 = sub_19E5F47F0();
    unint64_t v12 = sub_19EBF68E8();

    uint64_t v50 = v14;
    if (!(v12 >> 62))
    {
      uint64_t v20 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_19EBF7228();
  swift_bridgeObjectRelease();
LABEL_4:
  uint64_t v21 = MEMORY[0x1E4FBC860];
  uint64_t v57 = v18;
  uint64_t v54 = a3;
  uint64_t v55 = v8;
  uint64_t v52 = a2;
  uint64_t v53 = v9;
  if (v20)
  {
    uint64_t v58 = MEMORY[0x1E4FBC860];
    uint64_t result = sub_19E66F600(0, v20 & ~(v20 >> 63), 0);
    if (v20 < 0)
    {
      __break(1u);
      goto LABEL_32;
    }
    uint64_t v23 = 0;
    uint64_t v24 = v58;
    do
    {
      if ((v12 & 0xC000000000000001) != 0) {
        id v25 = (id)MEMORY[0x19F3BF970](v23, v12);
      }
      else {
        id v25 = *(id *)(v12 + 8 * v23 + 32);
      }
      unint64_t v26 = v25;
      id v27 = objc_msgSend(v25, sel_integerValue);

      uint64_t v58 = v24;
      unint64_t v29 = *(void *)(v24 + 16);
      unint64_t v28 = *(void *)(v24 + 24);
      if (v29 >= v28 >> 1)
      {
        sub_19E66F600(v28 > 1, v29 + 1, 1);
        uint64_t v24 = v58;
      }
      ++v23;
      *(void *)(v24 + 16) = v29 + 1;
      *(void *)(v24 + 8 * v29 + 32) = v27;
    }
    while (v20 != v23);
    swift_bridgeObjectRelease();
    uint64_t v18 = v57;
    uint64_t v21 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = MEMORY[0x1E4FBC860];
  }
  id v30 = objc_msgSend(v18, sel_strides);
  unint64_t v31 = sub_19EBF68E8();

  if (!(v31 >> 62))
  {
    uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v32) {
      goto LABEL_17;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    uint64_t v34 = MEMORY[0x1E4FBC860];
LABEL_30:
    uint64_t v40 = swift_allocObject();
    uint64_t v41 = v57;
    *(void *)(v40 + 16) = v57;
    uint64_t v42 = v50;
    *uint64_t v50 = nullsub_1;
    v42[1] = v40;
    uint64_t v43 = v53;
    uint64_t v44 = v55;
    (*(void (**)(void *, void, uint64_t))(v53 + 104))(v42, *MEMORY[0x1E4F27758], v55);
    id v45 = v41;
    id v46 = objc_msgSend(v45, sel_bytes);
    unint64_t v47 = v49;
    (*(void (**)(unint64_t, void *, uint64_t))(v43 + 16))(v49, v42, v44);
    (*(void (**)(id, uint64_t, uint64_t, unint64_t, uint64_t))(v54 + 48))(v46, v24, v34, v47, v52);

    return (*(uint64_t (**)(void *, uint64_t))(v43 + 8))(v42, v44);
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = sub_19EBF7228();
  swift_bridgeObjectRelease();
  if (!v32) {
    goto LABEL_29;
  }
LABEL_17:
  uint64_t v58 = v21;
  uint64_t result = sub_19E66F600(0, v32 & ~(v32 >> 63), 0);
  if ((v32 & 0x8000000000000000) == 0)
  {
    uint64_t v33 = 0;
    uint64_t v34 = v58;
    do
    {
      if ((v31 & 0xC000000000000001) != 0) {
        id v35 = (id)MEMORY[0x19F3BF970](v33, v31);
      }
      else {
        id v35 = *(id *)(v31 + 8 * v33 + 32);
      }
      uint64_t v36 = v35;
      id v37 = objc_msgSend(v35, sel_integerValue);

      uint64_t v58 = v34;
      unint64_t v39 = *(void *)(v34 + 16);
      unint64_t v38 = *(void *)(v34 + 24);
      if (v39 >= v38 >> 1)
      {
        sub_19E66F600(v38 > 1, v39 + 1, 1);
        uint64_t v34 = v58;
      }
      ++v33;
      *(void *)(v34 + 16) = v39 + 1;
      *(void *)(v34 + 8 * v39 + 32) = v37;
    }
    while (v32 != v33);
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
LABEL_32:
  __break(1u);
  return result;
}

void MLShapedArrayProtocol.init(converting:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (uint64_t)objc_msgSend(a1, sel_dataType);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness) != v8)
  {
    if (v8 > 65599)
    {
      if (v8 == 65600)
      {
        id v11 = a1;
        sub_19E5E8D78(v11, (size_t *)&v18);
        long long v17 = v18;
        unint64_t v12 = &qword_1E945C0F8;
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C0F8);
        uint64_t v14 = (unint64_t *)&unk_1E945C288;
        goto LABEL_14;
      }
      if (v8 == 131104)
      {
        id v11 = a1;
        sub_19E5EA084(v11, (size_t *)&v18);
        long long v17 = v18;
        unint64_t v12 = &qword_1E945C108;
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C108);
        uint64_t v14 = (unint64_t *)&unk_1E945C2A0;
        goto LABEL_14;
      }
    }
    else
    {
      if (v8 == 65552)
      {
        id v11 = a1;
        sub_19E5E9A24(v11, (size_t *)&v18);
        long long v17 = v18;
        unint64_t v12 = &qword_1E945C110;
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C110);
        uint64_t v14 = (unint64_t *)&unk_1E945C290;
LABEL_14:
        uint64_t v15 = sub_19E5DFDB8(v14, v12);
        MLShapedArrayProtocol.init<A>(converting:)((uint64_t)&v17, a2, v13, a3, v15);

        return;
      }
      if (v8 == 65568)
      {
        id v11 = a1;
        sub_19E5E93D8(v11, (size_t *)&v18);
        long long v17 = v18;
        unint64_t v12 = &qword_1E945C100;
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C100);
        uint64_t v14 = (unint64_t *)&unk_1E945C298;
        goto LABEL_14;
      }
    }
    sub_19EBF6FE8();
    swift_bridgeObjectRelease();
    id v16 = objc_msgSend(self, sel_stringForDataType_, objc_msgSend(a1, sel_dataType));
    sub_19EBF6798();

    sub_19EBF67D8();
    swift_bridgeObjectRelease();
    sub_19EBF67D8();
    sub_19EBF71F8();
    __break(1u);
    return;
  }

  MLShapedArrayProtocol.init(_:)(a1, a2, a3, a4);
}

uint64_t sub_19E5FDED4(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *))(v10 + 16))((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C260);
  uint64_t v11 = sub_19EBF69D8();
  unint64_t v12 = (void *)sub_19E5F89D8(v5, a3, a3, a5);
  uint64_t v13 = sub_19E66B3C8(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v14 = a1[1];
  v21[0] = *a1;
  v21[1] = v14;
  v21[2] = a1[2];
  uint64_t v20 = v13;
  uint64_t v15 = *(uint64_t (**)(_OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 88);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BFB0);
  uint64_t v17 = sub_19E5DFDB8(&qword_1E945C268, &qword_1E945BFB0);
  return v15(v21, &v20, v16, v17, a3, a5);
}

uint64_t sub_19E5FE080(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v6 = a1[1];
  v10[0] = *a1;
  v10[1] = v6;
  v10[2] = a1[2];
  uint64_t v9 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C270);
  sub_19E5DFDB8(&qword_1E945C278, &qword_1E945C270);
  return sub_19E5FDED4(v10, (uint64_t)&v9, a3, v7, a4);
}

uint64_t sub_19E5FE124(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_19E5FE188(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_19E5FE1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v16 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v16 - v9, a1);
  uint64_t v17 = a2;
  unint64_t v12 = *(uint64_t (**)(char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 136);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE70);
  uint64_t v14 = sub_19E5DFDB8(&qword_1E945C258, (uint64_t *)&unk_1E945CE70);
  return v12(v10, &v17, v13, v14, a3, a4);
}

uint64_t sub_19E5FE2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_19EBF6E68();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = &v17[-v10];
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = &v17[-v13];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v11, v7);
    __break(1u);
  }
  else
  {
    uint64_t v15 = (*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 32))(v14, v11, AssociatedTypeWitness);
    MEMORY[0x1F4188790](v15);
    *(void *)&v17[-32] = a2;
    *(void *)&v17[-24] = a3;
    *(void *)&v17[-16] = v14;
    (*(void (**)(uint64_t (*)(uint64_t *)))(a3 + 160))(sub_19E5FF02C);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_19E5FE554(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_19EBF6E68();
  uint64_t v23 = *(void *)(v8 - 8);
  uint64_t v24 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v22 = (uint64_t)v21 - v9;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = a1[2];
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  uint64_t v25 = a1[5];
  uint64_t v26 = v4;
  uint64_t v15 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3) + 16);
  swift_bridgeObjectRelease();
  if (v15)
  {
    sub_19EBF6B98();
    uint64_t v16 = v27;
    v32[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C280);
    v32[4] = &protocol witness table for <> PartialRangeFrom<A>;
    *(void *)&long long v27 = v10;
    *((void *)&v27 + 1) = v11;
    uint64_t v28 = v12;
    uint64_t v29 = v13;
    uint64_t v30 = v14;
    uint64_t v31 = v25;
    v32[0] = v16;
    return MLShapedArrayProtocol.subscript.setter(&v27, (uint64_t)v32, a2, a3);
  }
  else
  {
    v21[1] = v10;
    *(void *)&long long v27 = v10;
    *((void *)&v27 + 1) = v11;
    uint64_t v28 = v12;
    uint64_t v29 = v13;
    uint64_t v30 = v14;
    uint64_t v31 = v25;
    swift_getAssociatedConformanceWitness();
    uint64_t v18 = type metadata accessor for MLShapedArraySlice();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v20 = v22;
    MLShapedArrayProtocol.scalar.getter(v18, WitnessTable, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    sub_19E5FE2F4(v20, a2, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v20, v24);
  }
}

uint64_t sub_19E5FE7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x19F3BF2D0](a1, AssociatedTypeWitness);
  uint64_t result = MLShapedArrayProtocol.scalarCount.getter(a2, a3);
  if (v7 == result)
  {
    MEMORY[0x1F4188790](result);
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    uint64_t v11 = a1;
    return (*(uint64_t (**)(uint64_t (*)(uint64_t *, uint64_t, void *)))(a3 + 160))(sub_19E5FF00C);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_19E5FE8A4(uint64_t *a1, uint64_t a2, void *a3)
{
  return sub_19E5FB7FC(a1, a2, a3, v3[6], v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_19E5FE8C8(uint64_t *a1, uint64_t a2)
{
  return sub_19E5FBEC0(a1, a2, *(void *)(v2 + 48));
}

uint64_t sub_19E5FE8EC()
{
  return sub_19EBF6608();
}

unint64_t sub_19E5FE964()
{
  unint64_t result = qword_1E945CE90;
  if (!qword_1E945CE90)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1E945CE60);
    sub_19E5DF698();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945CE90);
  }
  return result;
}

uint64_t sub_19E5FE9E0(uint64_t *a1, uint64_t a2)
{
  return sub_19E5FC308(a1, a2, *(void *)(v2 + 40), *(void *)(v2 + 16));
}

uint64_t sub_19E5FEA00()
{
  return sub_19EBF71A8();
}

uint64_t sub_19E5FEA68()
{
  return sub_19EBF6EA8();
}

uint64_t sub_19E5FEACC(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a1;
  uint64_t v3 = *(void *)(v2 + 40);
  v5[2] = *(void *)(v2 + 16);
  long long v6 = *(_OWORD *)(v2 + 24);
  uint64_t v7 = v3;
  uint64_t v8 = a2;
  return (*(uint64_t (**)(void, void *, uint64_t, void))(v3 + 152))(sub_19E5FEF88, v5, MEMORY[0x1E4FBC848] + 8, v6);
}

uint64_t sub_19E5FEB48()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_19E5FEB88()
{
  return 32;
}

__n128 sub_19E5FEB94(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_19E5FEBA8()
{
  return 16;
}

__n128 sub_19E5FEBB4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_19E5FEBC0@<D0>(void *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  return sub_19E5FBCF4(a1, a2, (void (*)(_OWORD *__return_ptr, void, void, void))MLShapedArrayProtocol.subscript.getter, a3);
}

uint64_t sub_19E5FEBF0()
{
  return 16;
}

__n128 sub_19E5FEBFC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_19E5FEC10()
{
  return 16;
}

__n128 sub_19E5FEC1C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_19E5FEC28@<D0>(void *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  return sub_19E5FBCF4(a1, a2, (void (*)(_OWORD *__return_ptr, void, void, void))MLShapedArrayProtocol.subscript.getter, a3);
}

uint64_t sub_19E5FEC58()
{
  return 16;
}

__n128 sub_19E5FEC64(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_19E5FEC70(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return MLShapedArrayProtocol.subscript.getter(*a2, *(uint64_t *)((char *)a2 + a3 - 16), *(uint64_t *)((char *)a2 + a3 - 8));
}

uint64_t sub_19E5FECA4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t *)((char *)a3 + a4 - 16);
  uint64_t v6 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v7 = *a3;
  swift_bridgeObjectRetain();
  return sub_19E5FE1A0(a1, v7, v5, v6);
}

uint64_t sub_19E5FED00()
{
  return 16;
}

__n128 sub_19E5FED0C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_19E5FED18@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = MLShapedArrayProtocol.scalars.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_19E5FED50()
{
  return 16;
}

__n128 sub_19E5FED5C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_19E5FED68@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return MLShapedArrayProtocol.scalar.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8), a3);
}

uint64_t sub_19E5FED94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19E5FE2F4(a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t sub_19E5FEDC0()
{
  return 16;
}

__n128 sub_19E5FEDCC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_19E5FEDD8@<D0>(void *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  return sub_19E5FBCF4(a1, a2, (void (*)(_OWORD *__return_ptr, void, void, void))MLShapedArrayProtocol.subscript.getter, a3);
}

uint64_t sub_19E5FEE08()
{
  return 16;
}

__n128 sub_19E5FEE14(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of MLShapedArrayProtocol.init(bytesNoCopy:shape:strides:deallocator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.init(unsafeUninitializedShape:initializingWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.shape.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.strides.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 80))();
}

{
  return (*(uint64_t (**)(void))(a5 + 104))();
}

{
  return (*(uint64_t (**)(void))(a5 + 128))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 88))();
}

{
  return (*(uint64_t (**)(void))(a6 + 112))();
}

{
  return (*(uint64_t (**)(void))(a6 + 136))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 96))();
}

{
  return (*(uint64_t (**)(void))(a6 + 120))();
}

{
  return (*(uint64_t (**)(void))(a6 + 144))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.withUnsafeShapedBufferPointer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 152))();
}

uint64_t dispatch thunk of MLShapedArrayProtocol.withUnsafeMutableShapedBufferPointer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 160))();
}

void sub_19E5FEF88(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  sub_19E5FD4A8(a1, a2, a3, a4, *(void **)(v4 + 48));
}

unint64_t sub_19E5FEFB8()
{
  unint64_t result = qword_1E945C2A8;
  if (!qword_1E945C2A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C2A8);
  }
  return result;
}

uint64_t sub_19E5FF00C(uint64_t *a1, uint64_t a2, void *a3)
{
  return sub_19E5FAD3C(a1, a2, a3, *(void *)(v3 + 32));
}

uint64_t sub_19E5FF02C(uint64_t *a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(v3, v2, AssociatedTypeWitness);
}

uint64_t static MLTensor..! prefix(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (unint64_t)*a1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  LODWORD(v5) = *v5;
  if (v5)
  {
LABEL_15:
    char v24 = *v6;
    LOBYTE(v27[0]) = (_BYTE)v5;
    BYTE1(v27[0]) = v24;
    v27[1] = 0;
    char v28 = 0;
    char v31 = 9;
    sub_19E5E2970((uint64_t)v27, (uint64_t)&v26);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E5FF3B0);
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v7 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v9 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v27);
  swift_bridgeObjectRelease();
  sub_19E601010(v7);
  uint64_t v10 = v29;
  uint64_t v11 = v30;
  __swift_project_boxed_opaque_existential_1(v27, v29);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_19EC36240;
  *(void *)(v12 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_19EC36240;
  uint64_t v14 = v13;
  uint64_t v25 = a2;
  switch((int)v3)
  {
    case 1:
    case 3:
      uint64_t v15 = (void *)(v9 + 24);
      uint64_t v16 = (char *)(v9 + 32);
      uint64_t v17 = (char *)(v9 + 33);
      break;
    case 2:
      uint64_t v15 = (void *)(v9 + 16);
      uint64_t v16 = (char *)(v9 + 24);
      uint64_t v17 = (char *)(v9 + 25);
      break;
    default:
      uint64_t v15 = (void *)(v2 + 40);
      uint64_t v16 = (char *)(v2 + 48);
      uint64_t v17 = (char *)(v2 + 49);
      break;
  }
  char v18 = *v17;
  char v19 = *v16;
  *(void *)(v13 + 32) = *v15;
  *(unsigned char *)(v13 + 40) = v19;
  *(unsigned char *)(v13 + 41) = v18;
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 96);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v21 = v20(v12, v14, v10, v11);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(unsigned __int8 **)(v21 + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v22 = *(void *)(v21 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  *uint64_t v25 = v22;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v27);
}

uint64_t static MLTensor..& infix(_:_:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = *a2;
  unint64_t v6 = (unint64_t)*a1 >> 62;
  switch(v6)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v7 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v8 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v7 = (unsigned __int8 *)(v4 + 48);
      uint64_t v8 = (char *)(v4 + 49);
      break;
  }
  int v9 = *v7;
  if (v9) {
    goto LABEL_25;
  }
  switch(v5 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v10 = (unsigned __int8 *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v10 = (unsigned __int8 *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v8 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v10 = (unsigned __int8 *)(v5 + 48);
      uint64_t v8 = (char *)(v5 + 49);
      break;
  }
  int v9 = *v10;
  if (v9) {
    goto LABEL_25;
  }
  uint64_t v11 = v6;
  switch((int)v6)
  {
    case 1:
    case 3:
      uint64_t v12 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      uint64_t v12 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v12 = (void **)(v4 + 40);
      break;
  }
  uint64_t v13 = *v12;
  swift_bridgeObjectRetain();
  switch(v5 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v14 = (void **)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v14 = (void **)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v14 = (void **)(v5 + 40);
      break;
  }
  uint64_t v15 = *v14;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_19E6753E8(v13, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v16)
  {
    switch(v11)
    {
      case 1:
      case 3:
        char v28 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2:
        char v28 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        char v28 = (uint64_t *)(v4 + 40);
        break;
    }
    uint64_t v29 = *v28;
    swift_bridgeObjectRetain();
    uint64_t v32 = v29;
    uint64_t v33 = swift_bridgeObjectRetain();
    char v37 = 1;
    sub_19E5E2970((uint64_t)&v32, (uint64_t)v31);
    sub_19E5E1864();
LABEL_31:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E5FF88CLL);
  }
  uint64_t v30 = a3;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v17 = (void *)v31[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v4;
  *(void *)(inited + 40) = v5;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)&v32);
  swift_bridgeObjectRelease();
  sub_19E601010(v17);
  uint64_t v19 = v35;
  uint64_t v20 = v36;
  __swift_project_boxed_opaque_existential_1(&v32, v35);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_19EC365B0;
  *(void *)(v21 + 32) = v4;
  *(void *)(v21 + 40) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v22 = swift_initStackObject();
  *(_OWORD *)(v22 + 16) = xmmword_19EC36240;
  *(void *)(v22 + 32) = v16;
  *(_WORD *)(v22 + 40) = 0;
  uint64_t v23 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 104);
  swift_retain();
  swift_retain();
  uint64_t v24 = v23(0, v21, v22, v19, v20);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v24 + 16))
  {
    __break(1u);
LABEL_25:
    char v27 = *v8;
    LOBYTE(v32) = v9;
    BYTE1(v32) = v27;
    uint64_t v33 = 0;
    char v34 = 0;
    char v37 = 9;
    sub_19E5E2970((uint64_t)&v32, (uint64_t)v31);
    sub_19E5E1864();
    goto LABEL_31;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  *uint64_t v30 = v25;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v32);
}

uint64_t static MLTensor..| infix(_:_:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = *a2;
  unint64_t v6 = (unint64_t)*a1 >> 62;
  switch(v6)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v7 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v8 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v7 = (unsigned __int8 *)(v4 + 48);
      uint64_t v8 = (char *)(v4 + 49);
      break;
  }
  int v9 = *v7;
  if (v9) {
    goto LABEL_25;
  }
  switch(v5 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v10 = (unsigned __int8 *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v10 = (unsigned __int8 *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v8 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v10 = (unsigned __int8 *)(v5 + 48);
      uint64_t v8 = (char *)(v5 + 49);
      break;
  }
  int v9 = *v10;
  if (v9) {
    goto LABEL_25;
  }
  uint64_t v11 = v6;
  switch((int)v6)
  {
    case 1:
    case 3:
      uint64_t v12 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      uint64_t v12 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v12 = (void **)(v4 + 40);
      break;
  }
  uint64_t v13 = *v12;
  swift_bridgeObjectRetain();
  switch(v5 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v14 = (void **)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v14 = (void **)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v14 = (void **)(v5 + 40);
      break;
  }
  uint64_t v15 = *v14;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_19E6753E8(v13, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v16)
  {
    switch(v11)
    {
      case 1:
      case 3:
        char v28 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2:
        char v28 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        char v28 = (uint64_t *)(v4 + 40);
        break;
    }
    uint64_t v29 = *v28;
    swift_bridgeObjectRetain();
    uint64_t v32 = v29;
    uint64_t v33 = swift_bridgeObjectRetain();
    char v37 = 1;
    sub_19E5E2970((uint64_t)&v32, (uint64_t)v31);
    sub_19E5E1864();
LABEL_31:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E5FFDA8);
  }
  uint64_t v30 = a3;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v17 = (void *)v31[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v4;
  *(void *)(inited + 40) = v5;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)&v32);
  swift_bridgeObjectRelease();
  sub_19E601010(v17);
  uint64_t v19 = v35;
  uint64_t v20 = v36;
  __swift_project_boxed_opaque_existential_1(&v32, v35);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_19EC365B0;
  *(void *)(v21 + 32) = v4;
  *(void *)(v21 + 40) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v22 = swift_initStackObject();
  *(_OWORD *)(v22 + 16) = xmmword_19EC36240;
  *(void *)(v22 + 32) = v16;
  *(_WORD *)(v22 + 40) = 0;
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 104);
  swift_retain();
  swift_retain();
  uint64_t v24 = v23(1, v21, v22, v19, v20);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v24 + 16))
  {
    __break(1u);
LABEL_25:
    char v27 = *v8;
    LOBYTE(v32) = v9;
    BYTE1(v32) = v27;
    uint64_t v33 = 0;
    char v34 = 0;
    char v37 = 9;
    sub_19E5E2970((uint64_t)&v32, (uint64_t)v31);
    sub_19E5E1864();
    goto LABEL_31;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  *uint64_t v30 = v25;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v32);
}

uint64_t static MLTensor..^ infix(_:_:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = *a2;
  unint64_t v6 = (unint64_t)*a1 >> 62;
  switch(v6)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v7 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v8 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v7 = (unsigned __int8 *)(v4 + 48);
      uint64_t v8 = (char *)(v4 + 49);
      break;
  }
  int v9 = *v7;
  if (v9) {
    goto LABEL_25;
  }
  switch(v5 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v10 = (unsigned __int8 *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v10 = (unsigned __int8 *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v8 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v10 = (unsigned __int8 *)(v5 + 48);
      uint64_t v8 = (char *)(v5 + 49);
      break;
  }
  int v9 = *v10;
  if (v9) {
    goto LABEL_25;
  }
  uint64_t v11 = v6;
  switch((int)v6)
  {
    case 1:
    case 3:
      uint64_t v12 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      uint64_t v12 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v12 = (void **)(v4 + 40);
      break;
  }
  uint64_t v13 = *v12;
  swift_bridgeObjectRetain();
  switch(v5 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v14 = (void **)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v14 = (void **)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v14 = (void **)(v5 + 40);
      break;
  }
  uint64_t v15 = *v14;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_19E6753E8(v13, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v16)
  {
    switch(v11)
    {
      case 1:
      case 3:
        char v28 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2:
        char v28 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        char v28 = (uint64_t *)(v4 + 40);
        break;
    }
    uint64_t v29 = *v28;
    swift_bridgeObjectRetain();
    uint64_t v32 = v29;
    uint64_t v33 = swift_bridgeObjectRetain();
    char v37 = 1;
    sub_19E5E2970((uint64_t)&v32, (uint64_t)v31);
    sub_19E5E1864();
LABEL_31:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E6002C4);
  }
  uint64_t v30 = a3;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v17 = (void *)v31[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v4;
  *(void *)(inited + 40) = v5;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)&v32);
  swift_bridgeObjectRelease();
  sub_19E601010(v17);
  uint64_t v19 = v35;
  uint64_t v20 = v36;
  __swift_project_boxed_opaque_existential_1(&v32, v35);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_19EC365B0;
  *(void *)(v21 + 32) = v4;
  *(void *)(v21 + 40) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v22 = swift_initStackObject();
  *(_OWORD *)(v22 + 16) = xmmword_19EC36240;
  *(void *)(v22 + 32) = v16;
  *(_WORD *)(v22 + 40) = 0;
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 104);
  swift_retain();
  swift_retain();
  uint64_t v24 = v23(2, v21, v22, v19, v20);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v24 + 16))
  {
    __break(1u);
LABEL_25:
    char v27 = *v8;
    LOBYTE(v32) = v9;
    BYTE1(v32) = v27;
    uint64_t v33 = 0;
    char v34 = 0;
    char v37 = 9;
    sub_19E5E2970((uint64_t)&v32, (uint64_t)v31);
    sub_19E5E1864();
    goto LABEL_31;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  *uint64_t v30 = v25;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v32);
}

uint64_t MLTensor.all(keepRank:)(char a1)
{
  return sub_19E600948(a1, (void (*)(int64_t *, void))MLTensor.all(alongAxes:keepRank:));
}

uint64_t MLTensor.all(alongAxes:keepRank:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v5 = *v3;
  unint64_t v6 = (unint64_t)*v3 >> 62;
  switch(v6)
  {
    case 1uLL:
    case 3uLL:
      int v9 = (unsigned __int8 *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v10 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      int v9 = (unsigned __int8 *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v10 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      int v9 = (unsigned __int8 *)(v5 + 48);
      uint64_t v10 = (char *)(v5 + 49);
      break;
  }
  int v11 = *v9;
  if (v11)
  {
LABEL_22:
    char v33 = *v10;
    LOBYTE(v45) = v11;
    BYTE1(v45) = v33;
    uint64_t v46 = 0;
    char v47 = 0;
    char v48 = 9;
    sub_19E5E2970((uint64_t)&v45, (uint64_t)v44);
    sub_19E5E1864();
LABEL_33:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E60089CLL);
  }
  uint64_t v12 = v6;
  switch((int)v6)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      uint64_t v13 = v6;
      uint64_t v14 = swift_bridgeObjectRetain();
      uint64_t v15 = sub_19E675588(v14, a1, 1);
      swift_bridgeObjectRelease();
      if (!v15)
      {
        switch(v13)
        {
          case 0:
            uint64_t v34 = v5 + 40;
            goto LABEL_29;
          case 1:
          case 3:
            uint64_t v34 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 24;
            goto LABEL_29;
          case 2:
            uint64_t v34 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 16;
LABEL_29:
            uint64_t v36 = *(void *)(*(void *)v34 + 16);
            id v45 = (void *)a1;
            uint64_t v46 = v36;
            char v48 = 7;
            sub_19E5E2970((uint64_t)&v45, (uint64_t)v44);
            swift_bridgeObjectRetain();
            sub_19E5E1864();
            goto LABEL_33;
          default:
            goto LABEL_34;
        }
      }
      uint64_t v40 = v12;
      unint64_t v38 = a3;
      if (qword_1E945BB70 != -1) {
        swift_once();
      }
      sub_19EBF75A8();
      uint64_t v16 = v45;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_19EC36240;
      *(void *)(inited + 32) = v5;
      uint64_t v39 = v5 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      sub_19E634690(inited, (uint64_t)v41);
      swift_bridgeObjectRelease();
      sub_19E601010(v16);
      uint64_t v18 = v42;
      uint64_t v19 = v43;
      __swift_project_boxed_opaque_existential_1(v41, v42);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_19EC36240;
      *(void *)(v20 + 32) = v5;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
      uint64_t v21 = swift_initStackObject();
      *(_OWORD *)(v21 + 16) = xmmword_19EC36240;
      uint64_t v22 = v21;
      switch(v40)
      {
        case 1:
        case 3:
          uint64_t v23 = (char *)(v39 + 32);
          uint64_t v24 = (char *)(v39 + 33);
          break;
        case 2:
          uint64_t v23 = (char *)(v39 + 24);
          uint64_t v24 = (char *)(v39 + 25);
          break;
        default:
          uint64_t v23 = (char *)(v5 + 48);
          uint64_t v24 = (char *)(v5 + 49);
          break;
      }
      char v25 = *v24;
      char v26 = *v23;
      *(void *)(v21 + 32) = v15;
      *(unsigned char *)(v21 + 40) = v26;
      *(unsigned char *)(v21 + 41) = v25;
      char v27 = *(uint64_t (**)(void, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 112);
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v28 = v27(0, a1, 0xD000000000000011, 0x800000019EC08DC0, v20, v22, v18, v19);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*(void *)(v28 + 16))
      {
        __break(1u);
        goto LABEL_22;
      }
      unint64_t v29 = *(void *)(v28 + 32);
      swift_retain();
      swift_bridgeObjectRelease();
      if ((a2 & 1) == 0)
      {
        switch(v40)
        {
          case 0:
          case 1:
          case 2:
          case 3:
            uint64_t v30 = swift_bridgeObjectRetain();
            char v31 = (void *)sub_19E675588(v30, a1, 0);
            swift_bridgeObjectRelease();
            if (!v31)
            {
              switch(v40)
              {
                case 0:
                  uint64_t v35 = v5 + 40;
                  goto LABEL_32;
                case 1:
                case 3:
                  uint64_t v35 = v39 + 24;
                  goto LABEL_32;
                case 2:
                  uint64_t v35 = v39 + 16;
LABEL_32:
                  uint64_t v37 = *(void *)(*(void *)v35 + 16);
                  id v45 = (void *)a1;
                  uint64_t v46 = v37;
                  char v48 = 7;
                  sub_19E5E2970((uint64_t)&v45, (uint64_t)v44);
                  swift_bridgeObjectRetain();
                  sub_19E5E1864();
                  goto LABEL_33;
                default:
                  goto LABEL_34;
              }
            }
            id v45 = (void *)v29;
            MLTensor.reshaped(to:)(v31, v38);
            swift_release();
            swift_bridgeObjectRelease();
            return __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
          default:
            goto LABEL_34;
        }
      }
      *unint64_t v38 = v29;
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
    default:
LABEL_34:
      JUMPOUT(0);
  }
}

{
  return MLTensor.all(alongAxes:keepRank:)(a1, a2, a3);
}

uint64_t MLTensor.any(keepRank:)(char a1)
{
  return sub_19E600948(a1, (void (*)(int64_t *, void))MLTensor.any(alongAxes:keepRank:));
}

uint64_t sub_19E600948(char a1, void (*a2)(int64_t *, void))
{
  uint64_t v3 = *v2;
  switch((unint64_t)*v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v6 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v6 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v6 = v3 + 40;
      break;
  }
  uint64_t v7 = sub_19E5DE170(0, *(void *)(*(void *)v6 + 16));
  a2(v7, a1 & 1);

  return swift_release();
}

uint64_t MLTensor.any(alongAxes:keepRank:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v5 = *v3;
  unint64_t v6 = (unint64_t)*v3 >> 62;
  switch(v6)
  {
    case 1uLL:
    case 3uLL:
      int v9 = (unsigned __int8 *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v10 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      int v9 = (unsigned __int8 *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v10 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      int v9 = (unsigned __int8 *)(v5 + 48);
      uint64_t v10 = (char *)(v5 + 49);
      break;
  }
  int v11 = *v9;
  if (v11)
  {
LABEL_22:
    char v33 = *v10;
    LOBYTE(v45) = v11;
    BYTE1(v45) = v33;
    uint64_t v46 = 0;
    char v47 = 0;
    char v48 = 9;
    sub_19E5E2970((uint64_t)&v45, (uint64_t)v44);
    sub_19E5E1864();
LABEL_33:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E600F7CLL);
  }
  uint64_t v12 = v6;
  switch((int)v6)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      uint64_t v13 = v6;
      uint64_t v14 = swift_bridgeObjectRetain();
      uint64_t v15 = sub_19E675588(v14, a1, 1);
      swift_bridgeObjectRelease();
      if (!v15)
      {
        switch(v13)
        {
          case 0:
            uint64_t v34 = v5 + 40;
            goto LABEL_29;
          case 1:
          case 3:
            uint64_t v34 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 24;
            goto LABEL_29;
          case 2:
            uint64_t v34 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 16;
LABEL_29:
            uint64_t v36 = *(void *)(*(void *)v34 + 16);
            id v45 = (void *)a1;
            uint64_t v46 = v36;
            char v48 = 7;
            sub_19E5E2970((uint64_t)&v45, (uint64_t)v44);
            swift_bridgeObjectRetain();
            sub_19E5E1864();
            goto LABEL_33;
          default:
            goto LABEL_34;
        }
      }
      uint64_t v40 = v12;
      unint64_t v38 = a3;
      if (qword_1E945BB70 != -1) {
        swift_once();
      }
      sub_19EBF75A8();
      uint64_t v16 = v45;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_19EC36240;
      *(void *)(inited + 32) = v5;
      uint64_t v39 = v5 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      sub_19E634690(inited, (uint64_t)v41);
      swift_bridgeObjectRelease();
      sub_19E601010(v16);
      uint64_t v18 = v42;
      uint64_t v19 = v43;
      __swift_project_boxed_opaque_existential_1(v41, v42);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_19EC36240;
      *(void *)(v20 + 32) = v5;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
      uint64_t v21 = swift_initStackObject();
      *(_OWORD *)(v21 + 16) = xmmword_19EC36240;
      uint64_t v22 = v21;
      switch(v40)
      {
        case 1:
        case 3:
          uint64_t v23 = (char *)(v39 + 32);
          uint64_t v24 = (char *)(v39 + 33);
          break;
        case 2:
          uint64_t v23 = (char *)(v39 + 24);
          uint64_t v24 = (char *)(v39 + 25);
          break;
        default:
          uint64_t v23 = (char *)(v5 + 48);
          uint64_t v24 = (char *)(v5 + 49);
          break;
      }
      char v25 = *v24;
      char v26 = *v23;
      *(void *)(v21 + 32) = v15;
      *(unsigned char *)(v21 + 40) = v26;
      *(unsigned char *)(v21 + 41) = v25;
      char v27 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 112);
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v28 = v27(1, a1, 0xD000000000000011, 0x800000019EC08DC0, v20, v22, v18, v19);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*(void *)(v28 + 16))
      {
        __break(1u);
        goto LABEL_22;
      }
      unint64_t v29 = *(void *)(v28 + 32);
      swift_retain();
      swift_bridgeObjectRelease();
      if ((a2 & 1) == 0)
      {
        switch(v40)
        {
          case 0:
          case 1:
          case 2:
          case 3:
            uint64_t v30 = swift_bridgeObjectRetain();
            char v31 = (void *)sub_19E675588(v30, a1, 0);
            swift_bridgeObjectRelease();
            if (!v31)
            {
              switch(v40)
              {
                case 0:
                  uint64_t v35 = v5 + 40;
                  goto LABEL_32;
                case 1:
                case 3:
                  uint64_t v35 = v39 + 24;
                  goto LABEL_32;
                case 2:
                  uint64_t v35 = v39 + 16;
LABEL_32:
                  uint64_t v37 = *(void *)(*(void *)v35 + 16);
                  id v45 = (void *)a1;
                  uint64_t v46 = v37;
                  char v48 = 7;
                  sub_19E5E2970((uint64_t)&v45, (uint64_t)v44);
                  swift_bridgeObjectRetain();
                  sub_19E5E1864();
                  goto LABEL_33;
                default:
                  goto LABEL_34;
              }
            }
            id v45 = (void *)v29;
            MLTensor.reshaped(to:)(v31, v38);
            swift_release();
            swift_bridgeObjectRelease();
            return __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
          default:
            goto LABEL_34;
        }
      }
      *unint64_t v38 = v29;
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
    default:
LABEL_34:
      JUMPOUT(0);
  }
}

{
  return MLTensor.any(alongAxes:keepRank:)(a1, a2, a3);
}

void sub_19E601010(id a1)
{
  if ((unint64_t)a1 >= 2) {
}
  }

uint64_t sub_19E601020(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    sub_19E66F758(0, v1, 0);
    uint64_t v2 = v12;
    uint64_t v4 = (unint64_t *)(a1 + 32);
    do
    {
      unint64_t v6 = *v4++;
      unint64_t v5 = v6;
      switch(v6 >> 62)
      {
        case 1uLL:
        case 3uLL:
          uint64_t v7 = (uint64_t *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 24);
          break;
        case 2uLL:
          uint64_t v7 = (uint64_t *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 16);
          break;
        default:
          uint64_t v7 = (uint64_t *)(v5 + 40);
          break;
      }
      uint64_t v8 = *v7;
      swift_bridgeObjectRetain();
      unint64_t v10 = *(void *)(v12 + 16);
      unint64_t v9 = *(void *)(v12 + 24);
      if (v10 >= v9 >> 1) {
        sub_19E66F758(v9 > 1, v10 + 1, 1);
      }
      *(void *)(v12 + 16) = v10 + 1;
      *(void *)(v12 + 8 * v10 + 32) = v8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_19E601140(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    sub_19E66F708(0, v1, 0);
    uint64_t v2 = v10;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v5 = v6;
      unint64_t v8 = *(void *)(v10 + 16);
      unint64_t v7 = *(void *)(v10 + 24);
      swift_retain();
      if (v8 >= v7 >> 1) {
        sub_19E66F708(v7 > 1, v8 + 1, 1);
      }
      *(void *)(v10 + 16) = v8 + 1;
      *(void *)(v10 + 8 * v8 + 32) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t MLTensor.reshaped(to:)@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *v2;
  unint64_t v4 = *v2 >> 62;
  switch(v4)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v7 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      unint64_t v7 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      unint64_t v7 = (void **)(v3 + 40);
      break;
  }
  unint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  BOOL v9 = sub_19E5DDC7C(a1, v8);
  swift_bridgeObjectRelease();
  if (v9)
  {
    *a2 = v3;
    return swift_retain();
  }
  uint64_t v11 = a1[2];
  char v48 = a2;
  if (v11)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if (a1[v12 + 4] == -1)
      {
        uint64_t v52 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_19E66F600(0, v13[2] + 1, 1);
          uint64_t v13 = v52;
        }
        unint64_t v15 = v13[2];
        unint64_t v14 = v13[3];
        if (v15 >= v14 >> 1)
        {
          sub_19E66F600(v14 > 1, v15 + 1, 1);
          uint64_t v13 = v52;
        }
        v13[2] = v15 + 1;
        v13[v15 + 4] = -1;
      }
      ++v12;
    }
    while (v11 != v12);
    swift_bridgeObjectRelease();
    unint64_t v16 = v13[2];
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v17 = 0;
    uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v21 = a1[v17 + 4];
      if (v21 >= 1)
      {
        uint64_t v52 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_19E66F600(0, v18[2] + 1, 1);
          uint64_t v18 = v52;
        }
        unint64_t v20 = v18[2];
        unint64_t v19 = v18[3];
        if (v20 >= v19 >> 1)
        {
          sub_19E66F600(v19 > 1, v20 + 1, 1);
          uint64_t v18 = v52;
        }
        void v18[2] = v20 + 1;
        v18[v20 + 4] = v21;
      }
      ++v17;
    }
    while (v11 != v17);
    swift_bridgeObjectRelease();
    a2 = v48;
    uint64_t v22 = v18[2];
    if (v22)
    {
LABEL_27:
      uint64_t v23 = 0;
      uint64_t v24 = 1;
      do
      {
        uint64_t v25 = v18[v23 + 4];
        uint64_t v26 = (unsigned __int128)(v24 * (__int128)v25) >> 64;
        v24 *= v25;
        if (v26 != v24 >> 63)
        {
          __break(1u);
          goto LABEL_59;
        }
        ++v23;
      }
      while (v22 != v23);
      swift_release();
      if (v16 > 1) {
        goto LABEL_61;
      }
      if (v16 == 1)
      {
        uint64_t v27 = sub_19E606E50(v3);
        if (v24 == -1) {
          goto LABEL_42;
        }
        if (v24) {
LABEL_40:
        }
          v27 %= v24;
        if (!v27)
        {
LABEL_42:
          swift_retain();
          uint64_t v28 = swift_bridgeObjectRetain();
          uint64_t v29 = sub_19E607690(v28, v3, v24);
          swift_bridgeObjectRelease();
          swift_release();
          a1 = (void *)v29;
          goto LABEL_45;
        }
LABEL_61:
        sub_19EBF71F8();
        __break(1u);
        JUMPOUT(0x19E6018F4);
      }
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v16 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    swift_release();
    uint64_t v22 = v18[2];
    if (v22) {
      goto LABEL_27;
    }
  }
  swift_release();
  if (v16 > 1) {
    goto LABEL_61;
  }
  if (v16 == 1)
  {
    uint64_t v27 = sub_19E606E50(v3);
    uint64_t v24 = 1;
    goto LABEL_40;
  }
  uint64_t v24 = 1;
LABEL_43:
  if (sub_19E606E50(v3) != v24) {
    goto LABEL_61;
  }
  swift_bridgeObjectRetain();
LABEL_45:
  uint64_t v24 = v4;
  switch((int)v4)
  {
    case 1:
    case 3:
      uint64_t v30 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      uint64_t v30 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v30 = (void **)(v3 + 40);
      break;
  }
  char v31 = *v30;
  swift_bridgeObjectRetain();
  BOOL v32 = sub_19E5DDC7C(a1, v31);
  swift_bridgeObjectRelease();
  if (v32)
  {
    swift_bridgeObjectRelease();
    *a2 = v3;
    return swift_retain();
  }
  else
  {
    if (qword_1E945BB70 != -1) {
LABEL_59:
    }
      swift_once();
    sub_19EBF75A8();
    char v33 = v52;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19EC36240;
    *(void *)(inited + 32) = v3;
    uint64_t v35 = v3 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    sub_19E634690(inited, (uint64_t)v49);
    swift_bridgeObjectRelease();
    sub_19E601010(v33);
    uint64_t v36 = v50;
    uint64_t v37 = v51;
    __swift_project_boxed_opaque_existential_1(v49, v50);
    uint64_t v38 = swift_initStackObject();
    *(_OWORD *)(v38 + 16) = xmmword_19EC36240;
    *(void *)(v38 + 32) = v3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
    uint64_t v39 = swift_initStackObject();
    *(_OWORD *)(v39 + 16) = xmmword_19EC36240;
    uint64_t v40 = v39;
    switch(v24)
    {
      case 1:
      case 3:
        uint64_t v41 = (char *)(v35 + 32);
        uint64_t v42 = (char *)(v35 + 33);
        break;
      case 2:
        uint64_t v41 = (char *)(v35 + 24);
        uint64_t v42 = (char *)(v35 + 25);
        break;
      default:
        uint64_t v41 = (char *)(v3 + 48);
        uint64_t v42 = (char *)(v3 + 49);
        break;
    }
    char v43 = *v42;
    char v44 = *v41;
    uint64_t v52 = a1;
    strcpy(v53, "transformation");
    v53[15] = -18;
    uint64_t v54 = 0x65706168736572;
    unint64_t v55 = 0xE700000000000000;
    *(void *)(v39 + 32) = a1;
    *(unsigned char *)(v39 + 40) = v44;
    *(unsigned char *)(v39 + 41) = v43;
    id v45 = *(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 80);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v46 = v45(&v52, v38, v40, v36, v37);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_bridgeObjectRelease();
    if (!*(void *)(v46 + 16))
    {
      __break(1u);
      goto LABEL_61;
    }
    unint64_t v47 = *(void *)(v46 + 32);
    swift_retain();
    swift_bridgeObjectRelease();
    *char v48 = v47;
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v49);
  }
}

uint64_t MLTensor.cast(like:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  switch((unint64_t)*a1 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v3 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      unint64_t v4 = (unsigned __int8 *)(v3 + 32);
      uint64_t v5 = (unsigned char *)(v3 + 33);
      break;
    case 2uLL:
      uint64_t v6 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      unint64_t v4 = (unsigned __int8 *)(v6 + 24);
      uint64_t v5 = (unsigned char *)(v6 + 25);
      break;
    default:
      unint64_t v4 = (unsigned __int8 *)(v2 + 48);
      uint64_t v5 = (unsigned char *)(v2 + 49);
      break;
  }
  __int16 v7 = *v4;
  if (*v5) {
    __int16 v8 = 256;
  }
  else {
    __int16 v8 = 0;
  }
  return sub_19E6019D0(v8 | v7, a2);
}

uint64_t sub_19E6019D0@<X0>(__int16 a1@<W0>, void *a2@<X8>)
{
  uint64_t v3 = *v2;
  switch((unint64_t)*v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v5 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2uLL:
      uint64_t v5 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      uint64_t v5 = (unsigned __int8 *)(v3 + 48);
      break;
  }
  if (*v5 == a1)
  {
    *a2 = v3;
    return swift_retain();
  }
  else
  {
    if (qword_1E945BB70 != -1) {
      swift_once();
    }
    sub_19EBF75A8();
    __int16 v7 = (void *)v22[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19EC36240;
    *(void *)(inited + 32) = v3;
    swift_retain();
    sub_19E634690(inited, (uint64_t)v19);
    swift_bridgeObjectRelease();
    sub_19E601010(v7);
    uint64_t v9 = v20;
    uint64_t v10 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_19EC36240;
    *(void *)(v11 + 32) = v3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
    uint64_t v12 = swift_initStackObject();
    *(_OWORD *)(v12 + 16) = xmmword_19EC36240;
    uint64_t v13 = v12;
    uint64_t v14 = swift_bridgeObjectRetain();
    v22[0] = 0xD000000000000011;
    v22[1] = 0x800000019EC09240;
    v22[2] = 1953718627;
    v22[3] = 0xE400000000000000;
    __int16 v23 = a1 & 0x1FF;
    *(void *)(v13 + 32) = v14;
    *(unsigned char *)(v13 + 40) = a1;
    *(unsigned char *)(v13 + 41) = HIBYTE(a1) & 1;
    unint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 64);
    swift_retain();
    uint64_t v16 = v15(v22, v11, v13, v9, v10);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_bridgeObjectRelease();
    if (!*(void *)(v16 + 16))
    {
      __break(1u);
      JUMPOUT(0x19E601CACLL);
    }
    uint64_t v17 = *(void *)(v16 + 32);
    swift_retain();
    swift_bridgeObjectRelease();
    *a2 = v17;
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  }
}

uint64_t MLTensor.cast<A>(to:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __int16 v3 = sub_19E6C1448(a1, 0);
  return sub_19E6019D0(v3 & 0x1FF, a2);
}

uint64_t MLTensor.squeezingShape()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2 = *v1;
  switch(*v1 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v4 = (v2 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v4 = (v2 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v4 = v2 + 40;
      break;
  }
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)(*(void *)v4 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    __int16 v8 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if (*(void *)(v5 + 8 * v7 + 32) == 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          __int16 v8 = sub_19E607468(0, v8[2] + 1, 1, v8, &qword_1E945BB18);
        }
        unint64_t v10 = v8[2];
        unint64_t v9 = v8[3];
        if (v10 >= v9 >> 1) {
          __int16 v8 = sub_19E607468((void *)(v9 > 1), v10 + 1, 1, v8, &qword_1E945BB18);
        }
        v8[2] = v10 + 1;
        v8[v10 + 4] = v7;
      }
      ++v7;
    }
    while (v6 != v7);
    swift_bridgeObjectRelease();
    if (v8[2]) {
      goto LABEL_15;
    }
  }
  else
  {
    __int16 v8 = (void *)MEMORY[0x1E4FBC860];
    if (*(void *)(MEMORY[0x1E4FBC860] + 16))
    {
LABEL_15:
      MLTensor.squeezingShape(at:)((uint64_t)v8, a1);
      return swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  *a1 = v2;

  return swift_retain();
}

void *sub_19E601EF8(void (*a1)(void *__return_ptr, void), uint64_t a2, uint64_t a3)
{
  void (*v17)(void *__return_ptr, void);

  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  __int16 v8 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v17 = a1;
  do
  {
    uint64_t v9 = *(void *)(a3 + 8 * v7 + 32);
    v16[0] = v7;
    v16[1] = v9;
    a1(&v14, v16);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    if ((v15 & 1) == 0)
    {
      uint64_t v10 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        __int16 v8 = sub_19E607468(0, v8[2] + 1, 1, v8, &qword_1E945BB18);
      }
      unint64_t v12 = v8[2];
      unint64_t v11 = v8[3];
      if (v12 >= v11 >> 1) {
        __int16 v8 = sub_19E607468((void *)(v11 > 1), v12 + 1, 1, v8, &qword_1E945BB18);
      }
      v8[2] = v12 + 1;
      v8[v12 + 4] = v10;
      a1 = v17;
    }
    ++v7;
  }
  while (v4 != v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t MLTensor.squeezingShape(at:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *v2 >> 62;
  uint64_t v6 = (void *)swift_bridgeObjectRetain();
  uint64_t v7 = (void *)sub_19E675858(v6, a1);
  swift_bridgeObjectRelease();
  if (!v7)
  {
    swift_retain();
    sub_19EBF6FE8();
    swift_bridgeObjectRelease();
    switch((int)v3)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        uint64_t v9 = swift_bridgeObjectRetain();
        uint64_t v10 = MEMORY[0x1E4FBB550];
        MEMORY[0x19F3BF220](v9, MEMORY[0x1E4FBB550]);
        sub_19EBF67D8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_19EBF67D8();
        MEMORY[0x19F3BF220](a1, v10);
        sub_19EBF67D8();
        swift_bridgeObjectRelease();
        sub_19EBF71F8();
        __break(1u);
        JUMPOUT(0x19E602258);
      default:
        JUMPOUT(0);
    }
  }
  MLTensor.reshaped(to:)(v7, a2);

  return swift_bridgeObjectRelease();
}

{
  return MLTensor.squeezingShape(at:)(a1, a2);
}

uint64_t MLTensor.expandingShape(at:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return MLTensor.expandingShape(at:)(a1, a2);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  uint64_t v3 = *v2 >> 62;
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = (void *)sub_19E675DB4(v6, a1);
  swift_bridgeObjectRelease();
  if (!v7)
  {
    swift_retain();
    sub_19EBF6FE8();
    swift_bridgeObjectRelease();
    switch((int)v3)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        uint64_t v9 = swift_bridgeObjectRetain();
        uint64_t v10 = MEMORY[0x1E4FBB550];
        MEMORY[0x19F3BF220](v9, MEMORY[0x1E4FBB550]);
        sub_19EBF67D8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_19EBF67D8();
        MEMORY[0x19F3BF220](a1, v10);
        sub_19EBF67D8();
        swift_bridgeObjectRelease();
        sub_19EBF71F8();
        __break(1u);
        JUMPOUT(0x19E6024DCLL);
      default:
        JUMPOUT(0);
    }
  }
  MLTensor.reshaped(to:)(v7, a2);

  return swift_bridgeObjectRelease();
}

uint64_t MLTensor.flattened()@<X0>(unint64_t *a1@<X8>)
{
  return MLTensor.reshaped(to:)(qword_1EF0CA400, a1);
}

uint64_t sub_19E602538@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *v2;
  unint64_t v4 = *v2 >> 62;
  switch(v4)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v7 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v7 = (void **)(v3 + 40);
      break;
  }
  __int16 v8 = *v7;
  swift_bridgeObjectRetain();
  BOOL v9 = sub_19E5DDC7C(a1, v8);
  swift_bridgeObjectRelease();
  if (v9)
  {
LABEL_11:
    *a2 = v3;
    return swift_retain();
  }
  else
  {
    uint64_t v10 = a1[2];
    switch((int)v4)
    {
      case 0:
        uint64_t v11 = v3 + 40;
        goto LABEL_10;
      case 1:
      case 3:
        uint64_t v11 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 24;
        goto LABEL_10;
      case 2:
        uint64_t v11 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 16;
LABEL_10:
        if (*(void *)(*(void *)v11 + 16) == v10) {
          goto LABEL_11;
        }
        uint64_t v13 = swift_bridgeObjectRetain();
        uint64_t v14 = (void *)sub_19E675F50(v13, v10);
        swift_bridgeObjectRelease();
        if (!v14)
        {
          swift_retain();
          sub_19EBF6FE8();
          swift_bridgeObjectRelease();
          switch((int)v4)
          {
            case 0:
            case 1:
            case 2:
            case 3:
              uint64_t v15 = swift_bridgeObjectRetain();
              MEMORY[0x19F3BF220](v15, MEMORY[0x1E4FBB550]);
              sub_19EBF67D8();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_19EBF67D8();
              sub_19EBF7318();
              sub_19EBF67D8();
              swift_bridgeObjectRelease();
              sub_19EBF67D8();
              sub_19EBF71F8();
              __break(1u);
              JUMPOUT(0x19E602844);
            default:
              break;
          }
LABEL_20:
          JUMPOUT(0);
        }
        MLTensor.reshaped(to:)(v14, a2);
        uint64_t result = swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_20;
    }
  }
  return result;
}

uint64_t MLTensor.transposed()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  switch((unint64_t)*v1 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v4 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v4 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v4 = v3 + 40;
      break;
  }
  uint64_t v5 = sub_19E6029FC(0, *(void *)(*(void *)v4 + 16));
  MLTensor.transposed(permutation:)(v5, a1);

  return swift_bridgeObjectRelease();
}

uint64_t sub_19E602940(uint64_t result)
{
  int64_t v1 = (void *)result;
  unint64_t v2 = *(void *)(result + 16);
  if (v2 < 2) {
    return (uint64_t)v1;
  }
  unint64_t v3 = 0;
  unint64_t v4 = v2 >> 1;
  for (unint64_t i = v2 + 3; ; --i)
  {
    if (v3 == i - 4) {
      goto LABEL_5;
    }
    unint64_t v6 = v1[2];
    if (v3 >= v6) {
      break;
    }
    if (i - 4 >= v6) {
      goto LABEL_12;
    }
    uint64_t v7 = v1[v3 + 4];
    uint64_t v8 = v1[i];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_19E612754(v1);
      int64_t v1 = (void *)result;
    }
    v1[v3 + 4] = v8;
    v1[i] = v7;
LABEL_5:
    if (v4 == ++v3) {
      return (uint64_t)v1;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_19E6029FC(uint64_t result, int64_t a2)
{
  int64_t v2 = a2 - result;
  if (__OFSUB__(a2, result)) {
    goto LABEL_22;
  }
  if (v2)
  {
    int64_t v4 = result;
    if (v2 <= 0)
    {
      uint64_t v5 = (int64_t *)MEMORY[0x1E4FBC860];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
      uint64_t v5 = (int64_t *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      v5[2] = v2;
      void v5[3] = 2 * (v7 >> 3);
    }
    uint64_t result = (uint64_t)sub_19E5DE66C(v15, v5 + 4, v2, v4, a2);
    if (result != v2) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v5 = (int64_t *)MEMORY[0x1E4FBC860];
  }
  unint64_t v8 = v5[2];
  if (v8 < 2) {
    return (uint64_t)v5;
  }
  unint64_t v9 = 0;
  unint64_t v10 = v8 >> 1;
  for (unint64_t i = v8 + 3; ; --i)
  {
    if (v9 == i - 4) {
      goto LABEL_14;
    }
    unint64_t v12 = v5[2];
    if (v9 >= v12) {
      break;
    }
    if (i - 4 >= v12) {
      goto LABEL_21;
    }
    int64_t v13 = v5[v9 + 4];
    int64_t v14 = v5[i];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_19E612754(v5);
      uint64_t v5 = (int64_t *)result;
    }
    v5[v9 + 4] = v14;
    v5[i] = v13;
LABEL_14:
    if (v10 == ++v9) {
      return (uint64_t)v5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_19E602B54(int64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int64_t v4 = (void *)sub_19E6CD3E0(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v5 = v4[2];
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 < 2) {
    return (uint64_t)v4;
  }
  unint64_t v7 = 0;
  unint64_t v8 = v5 >> 1;
  for (unint64_t i = v5 + 1; ; --i)
  {
    if (v7 == i - 2) {
      goto LABEL_5;
    }
    unint64_t v10 = v4[2];
    if (v7 >= v10) {
      break;
    }
    if (i - 2 >= v10) {
      goto LABEL_12;
    }
    long long v11 = *(_OWORD *)&v4[2 * i];
    long long v12 = *(_OWORD *)&v4[2 * v7 + 4];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_19E61277C(v4);
      int64_t v4 = (void *)result;
    }
    *(_OWORD *)&v4[2 * v7 + 4] = v11;
    *(_OWORD *)&v4[2 * i] = v12;
LABEL_5:
    if (v8 == ++v7) {
      return (uint64_t)v4;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t MLTensor.transposed(permutation:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = (unint64_t)*v2 >> 62;
  switch(v7)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v9 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v9 = v5 + 40;
      break;
  }
  if (*(void *)(*(void *)v9 + 16) < v6) {
    goto LABEL_33;
  }
  if (v6)
  {
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        break;
      }
      uint64_t v12 = v5 + 40;
      switch((int)v7)
      {
        case 1:
        case 3:
          uint64_t v12 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 24;
          break;
        case 2:
          uint64_t v12 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 16;
          break;
        default:
          break;
      }
      if (*(void *)(a1 + 32 + 8 * v10) >= *(void *)(*(void *)v12 + 16)) {
        goto LABEL_33;
      }
      ++v10;
      if (v11 == v6) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_31:
    swift_once();
LABEL_28:
    sub_19EBF75A8();
    unint64_t v19 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19EC36240;
    *(void *)(inited + 32) = v5;
    swift_retain();
    sub_19E634690(inited, (uint64_t)v30);
    swift_bridgeObjectRelease();
    sub_19E601010(v19);
    uint64_t v21 = v31;
    uint64_t v22 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    char v33 = (void *)a1;
    strcpy(v34, "transformation");
    v34[15] = -18;
    uint64_t v35 = 0x736F70736E617274;
    unint64_t v36 = 0xE900000000000065;
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_19EC36240;
    *(void *)(v23 + 32) = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
    uint64_t v24 = swift_initStackObject();
    *(void *)(v24 + 32) = v3;
    *(_OWORD *)(v24 + 16) = xmmword_19EC36240;
    *(unsigned char *)(v24 + 40) = (_BYTE)a2;
    *(unsigned char *)(v24 + 41) = v29;
    uint64_t v25 = *(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 88);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v26 = v25(&v33, v23, v24, v21, v22);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v26 + 16))
    {
      uint64_t v27 = *(void *)(v26 + 32);
      swift_retain();
      swift_bridgeObjectRelease();
      *uint64_t v28 = v27;
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
    }
    __break(1u);
    while (1)
    {
LABEL_33:
      sub_19EBF71F8();
      __break(1u);
    }
  }
LABEL_14:
  uint64_t v13 = v7;
  switch((int)v7)
  {
    case 1:
    case 3:
      uint64_t v14 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v14 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v14 = v5 + 40;
      break;
  }
  if (*(void *)(*(void *)v14 + 16) > 1uLL)
  {
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v3 = sub_19E6760B8(v16, a1);
    swift_bridgeObjectRelease();
    if (!v3) {
      goto LABEL_33;
    }
    uint64_t v28 = a2;
    switch(v13)
    {
      case 0:
        uint64_t v17 = (unsigned char *)(v5 + 48);
        uint64_t v18 = (char *)(v5 + 49);
        break;
      case 1:
      case 3:
        uint64_t v17 = (unsigned char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        uint64_t v18 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 33);
        break;
      case 2:
        uint64_t v17 = (unsigned char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        uint64_t v18 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 25);
        break;
      default:
        JUMPOUT(0);
    }
    char v29 = *v18;
    LOBYTE(a2) = *v17;
    if (qword_1E945BB70 == -1) {
      goto LABEL_28;
    }
    goto LABEL_31;
  }
  *a2 = v5;

  return swift_retain();
}

{
  return MLTensor.transposed(permutation:)(a1, a2);
}

uint64_t MLTensor.replacing(with:where:)@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *a1;
  uint64_t v5 = *a2;
  unint64_t v6 = *v3;
  unint64_t v7 = (unint64_t)*a2 >> 62;
  switch(v7)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (unsigned __int8 *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v10 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v9 = (unsigned __int8 *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v10 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v9 = (unsigned __int8 *)(v5 + 48);
      uint64_t v10 = (char *)(v5 + 49);
      break;
  }
  int v11 = *v9;
  if (v11)
  {
    char v60 = *v10;
    LOBYTE(v63) = v11;
    BYTE1(v63) = v60;
    uint64_t v64 = 0;
    char v65 = 0;
    char v68 = 9;
    sub_19E5E2970((uint64_t)&v63, (uint64_t)v62);
    sub_19E5E1864();
    goto LABEL_49;
  }
  switch(v4 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v12 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v12 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v12 = (void **)(v4 + 40);
      break;
  }
  uint64_t v13 = *v12;
  swift_bridgeObjectRetain();
  unint64_t v14 = v6 >> 62;
  switch(v6 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v15 = (void **)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v15 = (void **)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v15 = (void **)(v6 + 40);
      break;
  }
  uint64_t v16 = *v15;
  swift_bridgeObjectRetain();
  uint64_t v63 = v13;
  uint64_t v64 = v16;
  char v68 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_19E675244(v13, v16);
  swift_bridgeObjectRelease();
  if (!v17) {
    goto LABEL_47;
  }
  sub_19E607D84((uint64_t)&v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  switch((int)v7)
  {
    case 1:
    case 3:
      uint64_t v18 = (void **)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      uint64_t v18 = (void **)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v18 = (void **)(v5 + 40);
      break;
  }
  unint64_t v19 = *v18;
  swift_bridgeObjectRetain();
  uint64_t v20 = v14;
  switch((int)v14)
  {
    case 1:
    case 3:
      uint64_t v21 = (void **)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      uint64_t v21 = (void **)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v21 = (void **)(v6 + 40);
      break;
  }
  uint64_t v22 = *v21;
  swift_bridgeObjectRetain();
  uint64_t v63 = v19;
  uint64_t v64 = v22;
  char v68 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_19E675244(v19, v22);
  swift_bridgeObjectRelease();
  if (!v23)
  {
LABEL_47:
    sub_19E5E2970((uint64_t)&v63, (uint64_t)v62);
    sub_19E5E1864();
LABEL_49:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E603918);
  }
  sub_19E607D84((uint64_t)&v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  switch(v20)
  {
    case 0:
      uint64_t v24 = (unsigned __int8 *)(v6 + 48);
      uint64_t v25 = (unsigned __int8 *)(v6 + 49);
      break;
    case 1:
    case 3:
      uint64_t v24 = (unsigned __int8 *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v25 = (unsigned __int8 *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v24 = (unsigned __int8 *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v25 = (unsigned __int8 *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      JUMPOUT(0);
  }
  int v26 = *v25;
  unsigned int v27 = *v24;
  switch(v4 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v28 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      char v29 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v28 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      char v29 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v28 = (unsigned __int8 *)(v4 + 48);
      char v29 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v30 = *v29;
  __int16 v31 = *v28;
  if (v26) {
    int v32 = 256;
  }
  else {
    int v32 = 0;
  }
  uint64_t v33 = v32 | v27;
  if (v30) {
    __int16 v34 = 256;
  }
  else {
    __int16 v34 = 0;
  }
  __int16 v35 = sub_19E636D20(v33, v34 | v31) & 0x1FF;
  sub_19E6019D0(v35, &v63);
  unint64_t v36 = (unint64_t)v63;
  sub_19E6019D0(v35, &v63);
  unint64_t v37 = (unint64_t)v63;
  uint64_t v38 = a3;
  uint64_t v39 = (void *)swift_bridgeObjectRetain();
  sub_19E602538(v39, (unint64_t *)&v63);
  swift_bridgeObjectRelease();
  unint64_t v40 = (unint64_t)v63;
  v62[0] = v5;
  uint64_t v61 = v38;
  uint64_t v41 = (void *)swift_bridgeObjectRetain();
  sub_19E602538(v41, (unint64_t *)&v63);
  swift_bridgeObjectRelease();
  unint64_t v42 = (unint64_t)v63;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v43 = (void *)v62[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365F0;
  *(void *)(inited + 32) = v36;
  *(void *)(inited + 40) = v37;
  *(void *)(inited + 4_Block_object_dispose(&STACK[0x278], 8) = v42;
  uint64_t v45 = v36 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)&v63);
  swift_bridgeObjectRelease();
  sub_19E601010(v43);
  uint64_t v47 = v66;
  uint64_t v46 = v67;
  __swift_project_boxed_opaque_existential_1(&v63, v66);
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_19EC365F0;
  *(void *)(v48 + 32) = v42;
  *(void *)(v48 + 40) = v40;
  *(void *)(v48 + 4_Block_object_dispose(&STACK[0x278], 8) = v36;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v49 = swift_initStackObject();
  *(_OWORD *)(v49 + 16) = xmmword_19EC36240;
  uint64_t v50 = v49;
  switch(v36 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v51 = (void *)(v45 + 24);
      uint64_t v52 = (char *)(v45 + 32);
      uint64_t v53 = (char *)(v45 + 33);
      break;
    case 2uLL:
      uint64_t v51 = (void *)(v45 + 16);
      uint64_t v52 = (char *)(v45 + 24);
      uint64_t v53 = (char *)(v45 + 25);
      break;
    default:
      uint64_t v51 = (void *)(v36 + 40);
      uint64_t v52 = (char *)(v36 + 48);
      uint64_t v53 = (char *)(v36 + 49);
      break;
  }
  char v54 = *v53;
  char v55 = *v52;
  *(void *)(v49 + 32) = *v51;
  *(unsigned char *)(v49 + 40) = v55;
  *(unsigned char *)(v49 + 41) = v54;
  unint64_t v56 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 128);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v57 = v56(0x726F66736E617274, 0xEE006E6F6974616DLL, 0x7463656C6573, 0xE600000000000000, v48, v50, v47, v46);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v57 + 16))
  {
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v58 = *(void *)(v57 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  void *v61 = v58;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v63);
}

uint64_t MLTensor.replacing<A>(with:where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *v10;
  unint64_t v80 = *v3;
  unint64_t v12 = v80 >> 62;
  switch(v80 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v13 = (unsigned __int8 *)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      unint64_t v14 = (char *)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v13 = (unsigned __int8 *)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      unint64_t v14 = (char *)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v13 = (unsigned __int8 *)(v80 + 48);
      unint64_t v14 = (char *)(v80 + 49);
      break;
  }
  char v15 = *v14;
  unsigned int v16 = *v13;
  LOBYTE(v82) = v16;
  BYTE1(v82) = v15;
  id v83 = &unk_1EF0CA488;
  char v84 = 1;
  char v87 = 9;
  if (v16 < 9) {
    goto LABEL_67;
  }
  sub_19E607D84((uint64_t)&v82);
  __int16 v17 = sub_19E6C1448(a2, 1);
  uint64_t v79 = v12;
  switch((int)v12)
  {
    case 1:
    case 3:
      uint64_t v18 = (unsigned __int8 *)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      unint64_t v19 = (unsigned char *)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v18 = (unsigned __int8 *)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      unint64_t v19 = (unsigned char *)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v18 = (unsigned __int8 *)(v80 + 48);
      unint64_t v19 = (unsigned char *)(v80 + 49);
      break;
  }
  int v20 = *v18;
  if (v20 == v17)
  {
LABEL_11:
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a2);
    MLTensor.init<A>(_:scalarType:)((uint64_t)v9, a2, &v82);
  }
  else
  {
    uint64_t v21 = v17 & 0x1FF;
    __int16 v22 = *v19 ? 256 : 0;
    char v23 = sub_19E636D20(v21, v22 | (unsigned __int16)v20);
    uint64_t v24 = &protocol witness table for Bool;
    uint64_t v25 = MEMORY[0x1E4FBB390];
    switch(v23)
    {
      case 1:
        uint64_t v24 = &protocol witness table for UInt8;
        uint64_t v25 = MEMORY[0x1E4FBC358];
        break;
      case 2:
        uint64_t v24 = &protocol witness table for UInt16;
        uint64_t v25 = MEMORY[0x1E4FBC450];
        break;
      case 3:
        uint64_t v24 = &protocol witness table for UInt32;
        uint64_t v25 = MEMORY[0x1E4FBC4C0];
        break;
      case 4:
      case 8:
      case 11:
        goto LABEL_11;
      case 5:
        uint64_t v24 = &protocol witness table for Int8;
        uint64_t v25 = MEMORY[0x1E4FBC098];
        break;
      case 6:
        uint64_t v24 = &protocol witness table for Int16;
        uint64_t v25 = MEMORY[0x1E4FBC0F8];
        break;
      case 7:
        uint64_t v24 = &protocol witness table for Int32;
        uint64_t v25 = MEMORY[0x1E4FBC150];
        break;
      case 9:
        uint64_t v24 = &protocol witness table for Float16;
        uint64_t v25 = MEMORY[0x1E4FBC5E0];
        break;
      case 10:
        uint64_t v24 = &protocol witness table for Float;
        uint64_t v25 = MEMORY[0x1E4FBB470];
        break;
      default:
        break;
    }
    sub_19E636C40(v25, a2, v25, (uint64_t)v24, &v82);
  }
  unint64_t v26 = v82;
  uint64_t v27 = v79;
  switch(v79)
  {
    case 1:
    case 3:
      uint64_t v28 = (unsigned __int8 *)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      char v29 = (char *)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v28 = (unsigned __int8 *)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      char v29 = (char *)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v28 = (unsigned __int8 *)(v80 + 48);
      char v29 = (char *)(v80 + 49);
      break;
  }
  char v30 = *v29;
  int v31 = *v28;
  unint64_t v32 = v82 >> 62;
  switch(v82 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v33 = (unsigned __int8 *)((v82 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      __int16 v34 = (char *)((v82 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v33 = (unsigned __int8 *)((v82 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      __int16 v34 = (char *)((v82 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v33 = (unsigned __int8 *)(v82 + 48);
      __int16 v34 = (char *)(v82 + 49);
      break;
  }
  char v35 = *v34;
  int v36 = *v33;
  LOBYTE(v82) = v31;
  BYTE1(v82) = v30;
  BYTE2(v82) = v36;
  BYTE3(v82) = v35;
  char v87 = 8;
  if (v31 != v36) {
    goto LABEL_67;
  }
  sub_19E607D84((uint64_t)&v82);
  switch(v11 >> 62)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v37 = (unsigned __int8 *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v38 = (char *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v37 = (unsigned __int8 *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v38 = (char *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v37 = (unsigned __int8 *)(v11 + 48);
      uint64_t v38 = (char *)(v11 + 49);
      break;
  }
  int v39 = *v37;
  if (v39)
  {
    char v71 = *v38;
    LOBYTE(v82) = v39;
    BYTE1(v82) = v71;
    id v83 = 0;
    char v84 = 0;
    char v87 = 9;
    sub_19E5E2970((uint64_t)&v82, (uint64_t)v81);
    sub_19E5E1864();
    goto LABEL_71;
  }
  switch((int)v32)
  {
    case 1:
    case 3:
      unint64_t v40 = (void **)((v26 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      unint64_t v40 = (void **)((v26 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      unint64_t v40 = (void **)(v26 + 40);
      break;
  }
  uint64_t v41 = *v40;
  swift_bridgeObjectRetain();
  switch(v27)
  {
    case 1:
    case 3:
      unint64_t v42 = (void **)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      unint64_t v42 = (void **)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      unint64_t v42 = (void **)(v80 + 40);
      break;
  }
  char v43 = *v42;
  swift_bridgeObjectRetain();
  unint64_t v82 = (unint64_t)v41;
  id v83 = v43;
  char v87 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v44 = sub_19E675244(v41, v43);
  swift_bridgeObjectRelease();
  if (!v44) {
    goto LABEL_67;
  }
  sub_19E607D84((uint64_t)&v82);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  switch(v11 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v45 = (void **)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v45 = (void **)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v45 = (void **)(v11 + 40);
      break;
  }
  uint64_t v46 = *v45;
  swift_bridgeObjectRetain();
  switch(v27)
  {
    case 1:
    case 3:
      uint64_t v47 = (void **)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      uint64_t v47 = (void **)((v80 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v47 = (void **)(v80 + 40);
      break;
  }
  uint64_t v48 = *v47;
  swift_bridgeObjectRetain();
  unint64_t v82 = (unint64_t)v46;
  id v83 = v48;
  char v87 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v49 = sub_19E675244(v46, v48);
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_67:
    sub_19E5E2970((uint64_t)&v82, (uint64_t)v81);
    sub_19E5E1864();
LABEL_71:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E6043FCLL);
  }
  sub_19E607D84((uint64_t)&v82);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v81[0] = v26;
  switch(v27)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      uint64_t v50 = (void *)swift_bridgeObjectRetain();
      sub_19E602538(v50, &v82);
      swift_bridgeObjectRelease();
      unint64_t v51 = v82;
      v81[0] = v11;
      unint64_t v72 = v26;
      uint64_t v73 = a3;
      uint64_t v52 = (void *)swift_bridgeObjectRetain();
      sub_19E602538(v52, &v82);
      swift_bridgeObjectRelease();
      unint64_t v53 = v82;
      if (qword_1E945BB70 != -1) {
        swift_once();
      }
      sub_19EBF75A8();
      char v54 = (void *)v81[0];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
      uint64_t inited = swift_initStackObject();
      long long v74 = xmmword_19EC365F0;
      *(_OWORD *)(inited + 16) = xmmword_19EC365F0;
      unint64_t v56 = v80;
      *(void *)(inited + 32) = v80;
      *(void *)(inited + 40) = v51;
      *(void *)(inited + 4_Block_object_dispose(&STACK[0x278], 8) = v53;
      uint64_t v57 = v56 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v77 = v53 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      swift_retain();
      uint64_t v78 = v51 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      sub_19E634690(inited, (uint64_t)&v82);
      swift_bridgeObjectRelease();
      sub_19E601010(v54);
      uint64_t v58 = v86;
      uint64_t v76 = v85;
      int64_t v75 = __swift_project_boxed_opaque_existential_1(&v82, v85);
      uint64_t v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = v74;
      *(void *)(v59 + 32) = v53;
      *(void *)(v59 + 40) = v51;
      *(void *)(v59 + 4_Block_object_dispose(&STACK[0x278], 8) = v56;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
      uint64_t v60 = swift_initStackObject();
      *(_OWORD *)(v60 + 16) = xmmword_19EC36240;
      uint64_t v61 = v60;
      switch(v79)
      {
        case 1:
        case 3:
          uint64_t v62 = (void *)(v57 + 24);
          uint64_t v63 = (char *)(v57 + 32);
          uint64_t v64 = (char *)(v57 + 33);
          break;
        case 2:
          uint64_t v62 = (void *)(v57 + 16);
          uint64_t v63 = (char *)(v57 + 24);
          uint64_t v64 = (char *)(v57 + 25);
          break;
        default:
          uint64_t v62 = (void *)(v80 + 40);
          uint64_t v63 = (char *)(v80 + 48);
          uint64_t v64 = (char *)(v80 + 49);
          break;
      }
      char v65 = *v64;
      char v66 = *v63;
      *(void *)(v60 + 32) = *v62;
      *(unsigned char *)(v60 + 40) = v66;
      *(unsigned char *)(v60 + 41) = v65;
      uint64_t v67 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 128);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v68 = v67(0x726F66736E617274, 0xEE006E6F6974616DLL, 0x7463656C6573, 0xE600000000000000, v59, v61, v76, v58);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_bridgeObjectRelease();
      if (!*(void *)(v68 + 16))
      {
        __break(1u);
        goto LABEL_67;
      }
      uint64_t v69 = *(void *)(v68 + 32);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      *uint64_t v73 = v69;
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v82);
    default:
      JUMPOUT(0);
  }
}

uint64_t sub_19E6044DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_43;
  }
  uint64_t v11 = a1 + 32;
  unint64_t v10 = *(void *)(a1 + 32);
  switch(v10 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v13 = (v10 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v13 = (v10 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v13 = v10 + 40;
      break;
  }
  uint64_t v14 = 0;
  uint64_t v15 = *(void *)(*(void *)v13 + 16);
  do
  {
    uint64_t v16 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    unint64_t v17 = *(void *)(a1 + 8 * v14 + 32);
    switch(v17 >> 62)
    {
      case 1uLL:
      case 3uLL:
        uint64_t v18 = (v17 & 0x3FFFFFFFFFFFFFFFLL) + 24;
        break;
      case 2uLL:
        uint64_t v18 = (v17 & 0x3FFFFFFFFFFFFFFFLL) + 16;
        break;
      default:
        uint64_t v18 = v17 + 40;
        break;
    }
    if (*(void *)(*(void *)v18 + 16) != v15) {
      goto LABEL_43;
    }
    ++v14;
  }
  while (v16 != v8);
  if (!v15) {
    goto LABEL_43;
  }
  v43[0] = a2;
  v43[1] = v15;
  char v44 = 6;
  uint64_t v3 = -v15;
  if (-v15 > a2) {
    goto LABEL_44;
  }
  if (v15 <= a2) {
    goto LABEL_44;
  }
  sub_19E607D84((uint64_t)v43);
  uint64_t v4 = (v15 & (a2 >> 63)) + a2;
  v43[0] = v4;
  v43[1] = v15;
  char v44 = 6;
  if (v4 < v3 || v4 >= v15) {
    goto LABEL_44;
  }
  sub_19E607D84((uint64_t)v43);
  __int16 v19 = sub_19E6051A4(a1);
  if ((v19 & 0xFF00) == 0x200) {
    goto LABEL_43;
  }
  int v39 = a3;
  int64_t v20 = *(void *)(a1 + 16);
  if (v20)
  {
    __int16 v21 = v19;
    v43[0] = MEMORY[0x1E4FBC860];
    sub_19E66F788(0, v20, 0);
    __int16 v22 = (void *)v43[0];
    __int16 v23 = v21 & 0x1FF;
    do
    {
      v11 += 8;
      sub_19E6019D0(v23, v40);
      uint64_t v3 = v40[0];
      v43[0] = v22;
      unint64_t v6 = v22[2];
      unint64_t v24 = v22[3];
      unint64_t v25 = v6 + 1;
      if (v6 >= v24 >> 1)
      {
        sub_19E66F788(v24 > 1, v6 + 1, 1);
        __int16 v22 = (void *)v43[0];
      }
      v22[2] = v25;
      v22[v6 + 4] = v3;
      --v20;
    }
    while (v20);
  }
  else
  {
    __int16 v22 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v25 = *(void *)(MEMORY[0x1E4FBC860] + 16);
  }
  if (v25 != 1)
  {
    uint64_t v15 = 0;
    uint64_t v28 = sub_19E601020((uint64_t)v22);
    uint64_t v5 = sub_19E6761B4(v28, v4);
    swift_bridgeObjectRelease();
    if (!v5)
    {
      v43[0] = 0;
      v43[1] = 0xE000000000000000;
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      v43[0] = 0xD00000000000002ELL;
      v43[1] = 0x800000019EC09050;
      v40[0] = v4;
      sub_19EBF7318();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }
    if (v22[2])
    {
      unint64_t v29 = v22[4];
      switch(v29 >> 62)
      {
        case 1uLL:
        case 3uLL:
          uint64_t v30 = v29 & 0x3FFFFFFFFFFFFFFFLL;
          int v31 = (unsigned char *)(v30 + 32);
          unint64_t v32 = (unsigned char *)(v30 + 33);
          break;
        case 2uLL:
          uint64_t v33 = v29 & 0x3FFFFFFFFFFFFFFFLL;
          int v31 = (unsigned char *)(v33 + 24);
          unint64_t v32 = (unsigned char *)(v33 + 25);
          break;
        default:
          int v31 = (unsigned char *)(v29 + 48);
          unint64_t v32 = (unsigned char *)(v29 + 49);
          break;
      }
      LOBYTE(v6) = *v32;
      LOBYTE(v3) = *v31;
      uint64_t v15 = sub_19E601140((uint64_t)v22);
      swift_bridgeObjectRelease();
      if (qword_1E945BB70 == -1) {
        goto LABEL_36;
      }
      goto LABEL_41;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    swift_once();
LABEL_36:
    sub_19EBF75A8();
    __int16 v34 = (void *)v43[0];
    sub_19E634690(v15, (uint64_t)v40);
    sub_19E601010(v34);
    uint64_t v35 = v41;
    uint64_t v36 = v42;
    __swift_project_boxed_opaque_existential_1(v40, v41);
    strcpy((char *)v43, "transformation");
    HIBYTE(v43[1]) = -18;
    v43[2] = 0x7461636E6F63;
    v43[3] = 0xE600000000000000;
    v43[4] = v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 32) = v5;
    *(_OWORD *)(inited + 16) = xmmword_19EC36240;
    *(unsigned char *)(inited + 40) = v3;
    *(unsigned char *)(inited + 41) = v6;
    uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 136))(v43, v15, inited, v35, v36);
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    if (*(void *)(v38 + 16))
    {
      uint64_t v26 = *(void *)(v38 + 32);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v40);
      goto LABEL_38;
    }
    __break(1u);
    while (1)
    {
LABEL_43:
      sub_19EBF71F8();
      __break(1u);
LABEL_44:
      sub_19E5E2970((uint64_t)v43, (uint64_t)v40);
      sub_19E5E1864();
    }
  }
  uint64_t v26 = v22[4];
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_38:
  *int v39 = v26;
  return result;
}

uint64_t MLTensor.init<A>(concatenating:alongAxis:)@<X0>(uint64_t a1@<X0>, uint64_t inited@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (sub_19EBF6BC8())
  {
    int v36 = 0;
    uint64_t i = 399;
    goto LABEL_40;
  }
  sub_19EBF6C18();
  if ((~v43[0] & 0xF000000000000007) == 0) {
    goto LABEL_34;
  }
  switch((unint64_t)v43[0] >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v10 = (v43[0] & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v10 = (v43[0] & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v10 = v43[0] + 40;
      break;
  }
  uint64_t v11 = *(void *)(*(void *)v10 + 16);
  uint64_t v12 = sub_19E607DD8(v43[0]);
  MEMORY[0x1F4188790](v12);
  uint64_t i = v11;
  uint64_t v13 = 0;
  if ((sub_19EBF6848() & 1) == 0)
  {
    int v36 = 0;
    uint64_t i = 401;
    goto LABEL_40;
  }
  if (!v11)
  {
    int v36 = 0;
    uint64_t i = 402;
    goto LABEL_40;
  }
  v43[0] = inited;
  v43[1] = v11;
  char v44 = 6;
  if (-v11 > inited || v11 <= inited) {
    goto LABEL_35;
  }
  sub_19E607D84((uint64_t)v43);
  inited += v11 & (inited >> 63);
  v43[0] = inited;
  v43[1] = v11;
  char v44 = 6;
  if (inited < -v11 || inited >= v11) {
    goto LABEL_35;
  }
  sub_19E607D84((uint64_t)v43);
  uint64_t v16 = sub_19E6365BC(a3);
  if ((v16 & 0xFF00) == 0x200)
  {
    int v36 = 0;
    for (uint64_t i = 408; ; uint64_t i = 420)
    {
LABEL_40:
      sub_19EBF71F8();
      __break(1u);
LABEL_41:
      v43[0] = 0;
      v43[1] = 0xE000000000000000;
      sub_19EBF6FE8();
      swift_bridgeObjectRelease();
      v43[0] = 0xD00000000000002ELL;
      v43[1] = 0x800000019EC09050;
      v40[0] = inited;
      sub_19EBF7318();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      int v36 = 0;
    }
  }
  unint64_t v17 = &v37;
  LOWORD(i) = MEMORY[0x1F4188790](v16) & 0x1FF;
  uint64_t v19 = sub_19E5F7AC4((void (*)(char *, char *))sub_19E607E5C, (uint64_t)&v34, a3, (uint64_t)&type metadata for MLTensor, MEMORY[0x1E4FBC248], a4, MEMORY[0x1E4FBC278], v18);
  uint64_t v20 = v19;
  if (*(void *)(v19 + 16) != 1)
  {
    uint64_t v23 = sub_19E601020(v19);
    uint64_t v24 = sub_19E6761B4(v23, inited);
    swift_bridgeObjectRelease();
    if (!v24) {
      goto LABEL_41;
    }
    if (*(void *)(v20 + 16))
    {
      unint64_t v25 = *(void *)(v20 + 32);
      switch(v25 >> 62)
      {
        case 1uLL:
        case 3uLL:
          uint64_t v26 = v25 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v27 = (unsigned char *)(v26 + 32);
          uint64_t v28 = (unsigned __int8 *)(v26 + 33);
          break;
        case 2uLL:
          uint64_t v29 = v25 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v27 = (unsigned char *)(v29 + 24);
          uint64_t v28 = (unsigned __int8 *)(v29 + 25);
          break;
        default:
          uint64_t v27 = (unsigned char *)(v25 + 48);
          uint64_t v28 = (unsigned __int8 *)(v25 + 49);
          break;
      }
      uint64_t v38 = a5;
      int v39 = *v28;
      LOBYTE(v17) = *v27;
      uint64_t v13 = sub_19E601140(v20);
      swift_bridgeObjectRelease();
      if (qword_1E945BB70 == -1) {
        goto LABEL_28;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
LABEL_28:
    sub_19EBF75A8();
    uint64_t v30 = (void *)v43[0];
    sub_19E634690(v13, (uint64_t)v40);
    sub_19E601010(v30);
    uint64_t v31 = v41;
    uint64_t v32 = v42;
    __swift_project_boxed_opaque_existential_1(v40, v41);
    strcpy((char *)v43, "transformation");
    HIBYTE(v43[1]) = -18;
    v43[2] = 0x7461636E6F63;
    v43[3] = 0xE600000000000000;
    v43[4] = inited;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 32) = v24;
    *(_OWORD *)(inited + 16) = xmmword_19EC36240;
    *(unsigned char *)(inited + 40) = (_BYTE)v17;
    *(unsigned char *)(inited + 41) = v39;
    uint64_t v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 136))(v43, v13, inited, v31, v32);
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    if (*(void *)(v33 + 16))
    {
      uint64_t v21 = *(void *)(v33 + 32);
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
      uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v40);
      a5 = v38;
      goto LABEL_30;
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    sub_19E5E2970((uint64_t)v43, (uint64_t)v40);
    sub_19E5E1864();
    int v36 = 0;
    uint64_t i = 215;
    goto LABEL_40;
  }
  uint64_t v21 = *(void *)(v19 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
LABEL_30:
  *a5 = v21;
  return result;
}

uint64_t sub_19E6051A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 512;
  }
  unint64_t v3 = *(void *)(a1 + 32);
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v4 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v5 = (unsigned __int8 *)(v4 + 32);
      unint64_t v6 = (unsigned __int8 *)(v4 + 33);
      break;
    case 2uLL:
      uint64_t v8 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v5 = (unsigned __int8 *)(v8 + 24);
      unint64_t v6 = (unsigned __int8 *)(v8 + 25);
      break;
    default:
      uint64_t v5 = (unsigned __int8 *)(v3 + 48);
      unint64_t v6 = (unsigned __int8 *)(v3 + 49);
      break;
  }
  int v9 = *v6;
  unsigned int v10 = *v5;
  uint64_t v11 = v1 - 1;
  if (v1 != 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
    while (1)
    {
      unint64_t v13 = *(void *)(a1 + 8 * v12 + 40);
      switch(v13 >> 62)
      {
        case 1uLL:
        case 3uLL:
          uint64_t v14 = (unsigned char *)((v13 & 0x3FFFFFFFFFFFFFFFLL) + 32);
          uint64_t v15 = (char *)((v13 & 0x3FFFFFFFFFFFFFFFLL) + 33);
          break;
        case 2uLL:
          uint64_t v14 = (unsigned char *)((v13 & 0x3FFFFFFFFFFFFFFFLL) + 24);
          uint64_t v15 = (char *)((v13 & 0x3FFFFFFFFFFFFFFFLL) + 25);
          break;
        default:
          uint64_t v14 = (unsigned char *)(v13 + 48);
          uint64_t v15 = (char *)(v13 + 49);
          break;
      }
      char v16 = *v15;
      unint64_t v17 = *v14;
      if (v9)
      {
        if (v16) {
          goto LABEL_33;
        }
        if ((v17 - 9) < 3) {
          goto LABEL_26;
        }
        if (v10 - 9 >= 3)
        {
          if (!v10 || !*v14) {
            goto LABEL_33;
          }
LABEL_26:
          int v9 = 0;
LABEL_27:
          unsigned int v10 = *v14;
          goto LABEL_10;
        }
        int v9 = 1;
      }
      else
      {
        if ((v16 & 1) == 0) {
          goto LABEL_33;
        }
        if (v10 - 9 >= 3)
        {
          if ((v17 - 9) < 3)
          {
            int v9 = 1;
            goto LABEL_27;
          }
          if (*v14) {
            BOOL v18 = v10 == 0;
          }
          else {
            BOOL v18 = 1;
          }
          if (v18)
          {
LABEL_33:
            uint64_t v19 = qword_1E945BB78;
            swift_retain();
            if (v19 != -1) {
              swift_once();
            }
            if (*((void *)off_1E945C718 + 2) <= (unint64_t)v10)
            {
              __break(1u);
LABEL_44:
              __break(1u);
              JUMPOUT(0x19E6053E0);
            }
            uint64_t v20 = *((void *)off_1E945C718 + v10 + 4);
            if (*(void *)(v20 + 16) <= v17) {
              goto LABEL_44;
            }
            uint64_t v21 = v20 + 2 * v17;
            unsigned int v10 = *(unsigned __int8 *)(v21 + 32);
            int v9 = *(unsigned __int8 *)(v21 + 33);
            swift_release();
            goto LABEL_10;
          }
        }
        int v9 = 0;
      }
LABEL_10:
      if (v11 == ++v12)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  if (v9) {
    int v22 = 256;
  }
  else {
    int v22 = 0;
  }
  return v22 & 0xFFFFFF00 | v10;
}

uint64_t sub_19E605400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a3;
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v16 = MEMORY[0x1E4FBC860];
    sub_19E66F788(0, v6, 0);
    uint64_t v7 = v16;
    uint64_t v8 = a1 + 32;
    do
    {
      v8 += 8;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_19EC36240;
      *(void *)(v9 + 32) = a2;
      swift_retain();
      MLTensor.expandingShape(at:)(v9, &v15);
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v10 = v15;
      uint64_t v16 = v7;
      unint64_t v12 = *(void *)(v7 + 16);
      unint64_t v11 = *(void *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_19E66F788(v11 > 1, v12 + 1, 1);
        uint64_t v7 = v16;
      }
      *(void *)(v7 + 16) = v12 + 1;
      *(void *)(v7 + 8 * v12 + 32) = v10;
      --v6;
    }
    while (v6);
    uint64_t v5 = a3;
  }
  sub_19E6044DC(v7, a2, &v16);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = v16;
  return result;
}

uint64_t MLTensor.init<A>(stacking:alongAxis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X7>, void *a6@<X8>)
{
  _OWORD v12[2] = a2;
  uint64_t v10 = sub_19E5F7AC4((void (*)(char *, char *))sub_19E607FA8, (uint64_t)v12, a3, (uint64_t)&type metadata for MLTensor, MEMORY[0x1E4FBC248], a4, MEMORY[0x1E4FBC278], a5);
  sub_19E6044DC(v10, a2, &v13);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  *a6 = v13;
  return result;
}

uint64_t sub_19E60562C@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_19EC36240;
  *(void *)(v4 + 32) = a1;
  MLTensor.expandingShape(at:)(v4, a2);
  return swift_bridgeObjectRelease();
}

uint64_t MLTensor.concatenated(with:alongAxis:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CF90);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v7;
  *(void *)(inited + 40) = v6;
  swift_retain();
  swift_retain();
  return sub_19E6044DC(inited, a2, a3);
}

uint64_t MLTensor.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_19E605400(a1, 0, &v4);
  *a2 = v4;
  return result;
}

uint64_t sub_19E60577C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_19E605400(a1, 0, &v4);
  *a2 = v4;
  return result;
}

uint64_t MLTensor.init<A>(_:alongAxis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v12, a1);
  MLTensor.init<A>(stacking:alongAxis:)((uint64_t)v12, a2, a3, a4, v13, &v16);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a3);
  *a5 = v16;
  return result;
}

uint64_t MLTensor.unstacked(alongAxis:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = (unint64_t)*v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v5 = (v2 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v5 = (v2 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v5 = v2 + 40;
      break;
  }
  uint64_t v6 = *(void *)(*(void *)v5 + 16);
  v21[0] = a1;
  v21[1] = v6;
  char v22 = 6;
  uint64_t v7 = v21;
  if (-v6 > a1 || v6 <= a1)
  {
LABEL_25:
    sub_19E5E2970((uint64_t)v7, (uint64_t)v20);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E605B64);
  }
  uint64_t v7 = (void *)sub_19E607D84((uint64_t)v21);
  unint64_t v9 = (v6 & (a1 >> 63)) + a1;
  v21[0] = v2;
  switch((int)v3)
  {
    case 1:
    case 3:
      uint64_t v10 = (uint64_t *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      uint64_t v10 = (uint64_t *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v10 = (uint64_t *)(v2 + 40);
      break;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v11 = *v10;
  if (v9 >= *(void *)(v11 + 16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v12 = *(void *)(MLTensor.split(count:alongAxis:)(*(void *)(v11 + 8 * v9 + 32), v9) + 16);
  if (v12)
  {
    v21[0] = MEMORY[0x1E4FBC860];
    sub_19E66F788(0, v12, 0);
    uint64_t v13 = 0;
    uint64_t v14 = v21[0];
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_19EC36240;
      *(void *)(v15 + 32) = v9;
      swift_retain();
      MLTensor.squeezingShape(at:)(v15, v20);
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v16 = v20[0];
      v21[0] = v14;
      unint64_t v18 = *(void *)(v14 + 16);
      unint64_t v17 = *(void *)(v14 + 24);
      if (v18 >= v17 >> 1)
      {
        sub_19E66F788(v17 > 1, v18 + 1, 1);
        uint64_t v14 = v21[0];
      }
      ++v13;
      *(void *)(v14 + 16) = v18 + 1;
      *(void *)(v14 + 8 * v18 + 32) = v16;
    }
    while (v12 != v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return v14;
}

uint64_t MLTensor.split(count:alongAxis:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *v2;
  unint64_t v4 = *v2 >> 62;
  switch(v4)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v7 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v7 = v3 + 40;
      break;
  }
  int64_t v8 = *(void *)(*(void *)v7 + 16);
  uint64_t v35 = (void *)a2;
  unint64_t v36 = v8;
  v40[24] = 6;
  if (-v8 > a2 || v8 <= a2)
  {
    sub_19E5E2970((uint64_t)&v35, (uint64_t)v32);
    sub_19E5E1864();
    goto LABEL_36;
  }
  sub_19E607D84((uint64_t)&v35);
  unint64_t v10 = (v8 & (a2 >> 63)) + a2;
  unint64_t v4 = v4;
  switch((int)v4)
  {
    case 1:
    case 3:
      uint64_t v11 = (uint64_t *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      uint64_t v11 = (uint64_t *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v11 = (uint64_t *)(v3 + 40);
      break;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = *v11;
    if (v10 < *(void *)(v12 + 16))
    {
      if (a1 == -1) {
        goto LABEL_19;
      }
      uint64_t v13 = *(void *)(v12 + 8 * v10 + 32);
      if (a1) {
        v13 %= a1;
      }
      if (!v13)
      {
LABEL_19:
        uint64_t v14 = (void *)swift_bridgeObjectRetain();
        uint64_t v15 = sub_19E67638C(v14, a1, v10);
        swift_bridgeObjectRelease();
        if (v15)
        {
          swift_retain();
          unint64_t v4 = sub_19E607A08(v15, v3);
          swift_bridgeObjectRelease();
          swift_release();
          if (qword_1E945BB70 == -1) {
            goto LABEL_21;
          }
          goto LABEL_31;
        }
        uint64_t v35 = 0;
        unint64_t v36 = 0xE000000000000000;
        swift_retain();
        sub_19EBF6FE8();
        sub_19EBF67D8();
        switch((int)v4)
        {
          case 0:
          case 1:
          case 2:
          case 3:
            uint64_t v30 = swift_bridgeObjectRetain();
            MEMORY[0x19F3BF220](v30, MEMORY[0x1E4FBB550]);
            sub_19EBF67D8();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_19EBF67D8();
            sub_19EBF7318();
            sub_19EBF67D8();
            swift_bridgeObjectRelease();
            sub_19EBF67D8();
            v32[0] = v10;
            sub_19EBF7318();
            sub_19EBF67D8();
            swift_bridgeObjectRelease();
            break;
          default:
            JUMPOUT(0);
        }
      }
LABEL_36:
      sub_19EBF71F8();
      __break(1u);
      JUMPOUT(0x19E60616CLL);
    }
  }
  __break(1u);
LABEL_31:
  swift_once();
LABEL_21:
  sub_19EBF75A8();
  unint64_t v16 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v3;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v32);
  swift_bridgeObjectRelease();
  sub_19E601010(v16);
  uint64_t v18 = v33;
  uint64_t v19 = v34;
  __swift_project_boxed_opaque_existential_1(v32, v33);
  uint64_t v35 = (void *)a1;
  LOBYTE(v36) = 0;
  unint64_t v37 = v10;
  uint64_t v38 = 0x74696C7073;
  unint64_t v39 = 0xE500000000000000;
  strcpy(v40, "transformation");
  v40[15] = -18;
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_19EC36240;
  *(void *)(v20 + 32) = v3;
  uint64_t v21 = *(uint64_t (**)(void **, uint64_t, unint64_t, uint64_t, uint64_t))(v19 + 144);
  swift_retain();
  uint64_t v22 = v21(&v35, v20, v4, v18, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v23 = *(void *)(v22 + 16);
  if (v23)
  {
    uint64_t v31 = MEMORY[0x1E4FBC860];
    sub_19E66F788(0, v23, 0);
    uint64_t v24 = 0;
    uint64_t v25 = v31;
    unint64_t v26 = *(void *)(v31 + 16);
    do
    {
      uint64_t v27 = *(void *)(v22 + 8 * v24 + 32);
      unint64_t v28 = *(void *)(v31 + 24);
      swift_retain();
      if (v26 >= v28 >> 1) {
        sub_19E66F788(v28 > 1, v26 + 1, 1);
      }
      ++v24;
      *(void *)(v31 + 16) = v26 + 1;
      *(void *)(v31 + 8 * v26++ + 32) = v27;
    }
    while (v23 != v24);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = MEMORY[0x1E4FBC860];
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
  return v25;
}

uint64_t MLTensor.split(sizes:alongAxis:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *v2;
  unint64_t v4 = *v2 >> 62;
  switch(v4)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v7 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v7 = v3 + 40;
      break;
  }
  if (!*(void *)(*(void *)v7 + 16)) {
    goto LABEL_46;
  }
  uint64_t v8 = v4;
  switch((int)v4)
  {
    case 0:
      uint64_t v9 = v3 + 40;
      break;
    case 1:
    case 3:
      uint64_t v9 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v9 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
LABEL_47:
      JUMPOUT(0);
  }
  int64_t v10 = *(void *)(*(void *)v9 + 16);
  char v43 = (void *)a2;
  unint64_t v44 = v10;
  v48[24] = 6;
  if (-v10 > a2 || v10 <= a2)
  {
    sub_19E5E2970((uint64_t)&v43, (uint64_t)v40);
    sub_19E5E1864();
    goto LABEL_46;
  }
  sub_19E607D84((uint64_t)&v43);
  unint64_t v12 = (v10 & (a2 >> 63)) + a2;
  switch(v8)
  {
    case 1:
    case 3:
      uint64_t v13 = (uint64_t *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      uint64_t v13 = (uint64_t *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v13 = (uint64_t *)(v3 + 40);
      break;
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v14 = *v13;
  if (v12 >= *(void *)(v14 + 16))
  {
LABEL_40:
    __break(1u);
LABEL_41:
    swift_once();
    goto LABEL_30;
  }
  uint64_t v15 = *(void *)(v14 + 8 * v12 + 32);
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = (uint64_t *)(a1 + 32);
    while (1)
    {
      uint64_t v19 = *v18++;
      BOOL v20 = __OFADD__(v17, v19);
      v17 += v19;
      if (v20) {
        break;
      }
      if (!--v16)
      {
        if (v15 == v17) {
          goto LABEL_28;
        }
LABEL_46:
        sub_19EBF71F8();
        __break(1u);
        JUMPOUT(0x19E60682CLL);
      }
    }
    __break(1u);
    goto LABEL_39;
  }
  if (v15) {
    goto LABEL_46;
  }
LABEL_28:
  uint64_t v21 = (void *)swift_bridgeObjectRetain();
  uint64_t v22 = sub_19E6764E0(v21, a1, v12);
  swift_bridgeObjectRelease();
  if (!v22)
  {
    char v43 = 0;
    unint64_t v44 = 0xE000000000000000;
    swift_retain();
    sub_19EBF6FE8();
    sub_19EBF67D8();
    switch(v8)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        uint64_t v37 = swift_bridgeObjectRetain();
        uint64_t v38 = MEMORY[0x1E4FBB550];
        MEMORY[0x19F3BF220](v37, MEMORY[0x1E4FBB550]);
        sub_19EBF67D8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_19EBF67D8();
        MEMORY[0x19F3BF220](a1, v38);
        sub_19EBF67D8();
        swift_bridgeObjectRelease();
        sub_19EBF67D8();
        v40[0] = v12;
        sub_19EBF7318();
        sub_19EBF67D8();
        swift_bridgeObjectRelease();
        goto LABEL_46;
      default:
        goto LABEL_47;
    }
  }
  swift_retain();
  uint64_t v8 = sub_19E607A08((uint64_t)v22, v3);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1E945BB70 != -1) {
    goto LABEL_41;
  }
LABEL_30:
  sub_19EBF75A8();
  int64_t v23 = v43;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v3;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v40);
  swift_bridgeObjectRelease();
  sub_19E601010(v23);
  uint64_t v25 = v41;
  uint64_t v26 = v42;
  __swift_project_boxed_opaque_existential_1(v40, v41);
  char v43 = (void *)a1;
  LOBYTE(v44) = 1;
  unint64_t v45 = v12;
  uint64_t v46 = 0x74696C7073;
  unint64_t v47 = 0xE500000000000000;
  strcpy(v48, "transformation");
  v48[15] = -18;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_19EC36240;
  *(void *)(v27 + 32) = v3;
  unint64_t v28 = *(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 144);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v29 = v28(&v43, v27, v8, v25, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v30 = *(void *)(v29 + 16);
  if (v30)
  {
    uint64_t v39 = MEMORY[0x1E4FBC860];
    sub_19E66F788(0, v30, 0);
    uint64_t v31 = 0;
    uint64_t v32 = v39;
    unint64_t v33 = *(void *)(v39 + 16);
    do
    {
      uint64_t v34 = *(void *)(v29 + 8 * v31 + 32);
      unint64_t v35 = *(void *)(v39 + 24);
      swift_retain();
      if (v33 >= v35 >> 1) {
        sub_19E66F788(v35 > 1, v33 + 1, 1);
      }
      ++v31;
      *(void *)(v39 + 16) = v33 + 1;
      *(void *)(v39 + 8 * v33++ + 32) = v34;
    }
    while (v30 != v31);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = MEMORY[0x1E4FBC860];
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v40);
  return v32;
}

uint64_t MLTensor.reversed(alongAxes:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return MLTensor.reversed(alongAxes:)(a1, a2);
}

{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t (*v37)(void *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  void v41[3];
  uint64_t v42;
  uint64_t v43;
  void v44[3];
  char v45[24];
  uint64_t vars8;

  uint64_t v7 = *v2;
  uint64_t v8 = *v2 >> 62;
  switch(v8)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v9 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v9 = v7 + 40;
      break;
  }
  int64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(*(void *)v9 + 16);
  if (v11)
  {
    unint64_t v12 = (uint64_t *)(v10 + 32);
    uint64_t v13 = 1;
    do
    {
      uint64_t v14 = *v12++;
      uint64_t v15 = v13 * v14;
      if ((unsigned __int128)(v13 * (__int128)v14) >> 64 != (v13 * v14) >> 63)
      {
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v13 = v15;
      --v11;
    }
    while (v11);
    if (v15 == 1) {
      goto LABEL_10;
    }
    uint64_t v5 = v8;
    if (*(void *)(a1 + 16))
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      switch((int)v8)
      {
        case 1:
        case 3:
          uint64_t v17 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 24;
          break;
        case 2:
          uint64_t v17 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 16;
          break;
        default:
          uint64_t v17 = v7 + 40;
          break;
      }
      sub_19E5DE170(0, *(void *)(*(void *)v17 + 16));
    }
    unint64_t v4 = v7 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    uint64_t v18 = swift_bridgeObjectRetain();
    unint64_t v3 = sub_19E607850(v18, v7);
    swift_bridgeObjectRelease_n();
    swift_release();
    uint64_t v19 = *(void *)(v3 + 16);
    switch(v5)
    {
      case 0:
        BOOL v20 = v7 + 40;
        break;
      case 1:
      case 3:
        BOOL v20 = v4 + 24;
        break;
      case 2:
        BOOL v20 = v4 + 16;
        break;
      default:
        JUMPOUT(0);
    }
    if (*(void *)(*(void *)v20 + 16) < v19) {
      goto LABEL_44;
    }
    if (v19)
    {
      uint64_t v21 = 0;
      while (1)
      {
        uint64_t v22 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          break;
        }
        int64_t v23 = v7 + 40;
        switch(v5)
        {
          case 1:
          case 3:
            int64_t v23 = v4 + 24;
            break;
          case 2:
            int64_t v23 = v4 + 16;
            break;
          default:
            break;
        }
        if (*(void *)(v3 + 32 + 8 * v21) >= *(void *)(*(void *)v23 + 16)) {
          goto LABEL_44;
        }
        ++v21;
        if (v22 == v19) {
          goto LABEL_33;
        }
      }
LABEL_41:
      __break(1u);
    }
    else
    {
LABEL_33:
      if (qword_1E945BB70 == -1)
      {
LABEL_34:
        sub_19EBF75A8();
        uint64_t v24 = (void *)v44[0];
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_19EC36240;
        *(void *)(inited + 32) = v7;
        swift_retain();
        sub_19E634690(inited, (uint64_t)v41);
        swift_bridgeObjectRelease();
        sub_19E601010(v24);
        uint64_t v26 = v42;
        uint64_t v27 = v43;
        __swift_project_boxed_opaque_existential_1(v41, v42);
        unint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = xmmword_19EC36240;
        *(void *)(v28 + 32) = v7;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
        uint64_t v29 = swift_initStackObject();
        *(_OWORD *)(v29 + 16) = xmmword_19EC36240;
        int64_t v30 = v29;
        unint64_t v40 = a2;
        switch(v5)
        {
          case 1:
          case 3:
            uint64_t v31 = (uint64_t *)(v4 + 24);
            uint64_t v32 = (char *)(v4 + 32);
            unint64_t v33 = (char *)(v4 + 33);
            break;
          case 2:
            uint64_t v31 = (uint64_t *)(v4 + 16);
            uint64_t v32 = (char *)(v4 + 24);
            unint64_t v33 = (char *)(v4 + 25);
            break;
          default:
            uint64_t v31 = (uint64_t *)(v7 + 40);
            uint64_t v32 = (char *)(v7 + 48);
            unint64_t v33 = (char *)(v7 + 49);
            break;
        }
        uint64_t v34 = *v33;
        unint64_t v35 = *v32;
        unint64_t v36 = *v31;
        v44[0] = v3;
        v44[1] = 0x65737265766572;
        v44[2] = 0xE700000000000000;
        strcpy(v45, "transformation");
        v45[15] = -18;
        *(void *)(v29 + 32) = v36;
        *(unsigned char *)(v29 + 40) = v35;
        *(unsigned char *)(v29 + 41) = v34;
        uint64_t v37 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 152);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v38 = v37(v44, v28, v30, v26, v27);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v38 + 16))
        {
          uint64_t v39 = *(void *)(v38 + 32);
          swift_retain();
          swift_bridgeObjectRelease();
          *unint64_t v40 = v39;
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
          return swift_bridgeObjectRelease();
        }
        __break(1u);
        while (1)
        {
LABEL_44:
          sub_19EBF71F8();
          __break(1u);
        }
      }
    }
    swift_once();
    goto LABEL_34;
  }
LABEL_10:
  *a2 = v7;

  return swift_retain();
}

uint64_t sub_19E606E50(unint64_t a1)
{
  switch(a1 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v1 = (a1 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v1 = (a1 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v1 = a1 + 40;
      break;
  }
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 16);
  if (!v3) {
    return 1;
  }
  unint64_t v4 = (uint64_t *)(v2 + 32);
  uint64_t v5 = 1;
  do
  {
    uint64_t v6 = *v4++;
    uint64_t result = v5 * v6;
    if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
    {
      __break(1u);
      JUMPOUT(0x19E606ED4);
    }
    uint64_t v5 = result;
    --v3;
  }
  while (v3);
  return result;
}

void *sub_19E606EE4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_19E607468(a1, a2, a3, a4, &qword_1E945BB18);
}

void *sub_19E606EF0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2C0);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      _OWORD v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19E607B80(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_19E607000(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_19E60724C(a1, a2, a3, a4, qword_1E945B970);
}

void *sub_19E60700C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C088);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      _OWORD v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_19E607C74(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_19E607130(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      _OWORD v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19E607EB4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_19E607240(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_19E60724C(a1, a2, a3, a4, &qword_1E945C2D8);
}

void *sub_19E60724C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      void v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v14 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19E607FC8(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_19E607358(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF80);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      _OWORD v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19E6080B4(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_19E607468(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      void v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v14 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19E6081A0(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_19E607574(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2D0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      _OWORD v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19E60828C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_19E607684(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_19E60724C(a1, a2, a3, a4, &qword_1E945C2C8);
}

uint64_t sub_19E607690(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v26 = MEMORY[0x1E4FBC860];
    sub_19E66F600(0, v4, 0);
    uint64_t v8 = 0;
    uint64_t result = v26;
    uint64_t v9 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 24;
    uint64_t v10 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 16;
    uint64_t v11 = a2 + 40;
    unint64_t v12 = a2 >> 62;
    do
    {
      uint64_t v13 = *(void *)(a1 + 32 + 8 * v8);
      if (v13 == -1)
      {
        uint64_t v14 = v11;
        switch(v12)
        {
          case 1uLL:
          case 3uLL:
            uint64_t v14 = v9;
            break;
          case 2uLL:
            uint64_t v14 = v10;
            break;
          default:
            break;
        }
        uint64_t v15 = *(void *)v14;
        uint64_t v16 = *(void *)(*(void *)v14 + 16);
        if (v16)
        {
          uint64_t v17 = (uint64_t *)(v15 + 32);
          uint64_t v18 = 1;
          do
          {
            uint64_t v19 = *v17++;
            uint64_t v20 = v18 * v19;
            if ((unsigned __int128)(v18 * (__int128)v19) >> 64 != (v18 * v19) >> 63)
            {
              __break(1u);
              goto LABEL_22;
            }
            uint64_t v18 = v20;
            --v16;
          }
          while (v16);
          if (!a3)
          {
LABEL_22:
            __break(1u);
LABEL_23:
            __break(1u);
            JUMPOUT(0x19E607840);
          }
        }
        else
        {
          uint64_t v20 = 1;
          if (!a3) {
            goto LABEL_22;
          }
        }
        if (v20 == 0x8000000000000000 && a3 == -1) {
          goto LABEL_23;
        }
        uint64_t v13 = v20 / a3;
      }
      uint64_t v27 = result;
      unint64_t v22 = *(void *)(result + 16);
      unint64_t v21 = *(void *)(result + 24);
      if (v22 >= v21 >> 1)
      {
        uint64_t v24 = v10;
        uint64_t v25 = v9;
        uint64_t v23 = v11;
        sub_19E66F600(v21 > 1, v22 + 1, 1);
        uint64_t v11 = v23;
        uint64_t v10 = v24;
        uint64_t v9 = v25;
        uint64_t result = v27;
      }
      ++v8;
      *(void *)(result + 16) = v22 + 1;
      *(void *)(result + 8 * v22 + 32) = v13;
    }
    while (v8 != v4);
  }
  return result;
}

uint64_t sub_19E607850(uint64_t a1, unint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v22 = MEMORY[0x1E4FBC860];
    sub_19E66F600(0, v2, 0);
    uint64_t v3 = v22;
    unint64_t v6 = (uint64_t *)(a1 + 32);
    uint64_t v17 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 16;
    uint64_t v18 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 24;
    uint64_t v7 = a2 + 40;
    unint64_t v8 = a2 >> 62;
    do
    {
      uint64_t v10 = *v6++;
      uint64_t v9 = v10;
      uint64_t v11 = v7;
      switch(v8)
      {
        case 1uLL:
        case 3uLL:
          uint64_t v11 = v18;
          break;
        case 2uLL:
          uint64_t v11 = v17;
          break;
        default:
          break;
      }
      uint64_t v12 = *(void *)(*(void *)v11 + 16);
      v20[0] = v9;
      v20[1] = v12;
      char v21 = 6;
      if (v9 < -v12 || v9 >= v12)
      {
        sub_19E5E2970((uint64_t)v20, (uint64_t)v19);
        sub_19E5E1864();
        sub_19EBF71F8();
        __break(1u);
        JUMPOUT(0x19E6079F8);
      }
      sub_19E607D84((uint64_t)v20);
      uint64_t v22 = v3;
      unint64_t v15 = *(void *)(v3 + 16);
      unint64_t v14 = *(void *)(v3 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_19E66F600(v14 > 1, v15 + 1, 1);
        uint64_t v3 = v22;
      }
      *(void *)(v3 + 16) = v15 + 1;
      *(void *)(v3 + 8 * v15 + 32) = (v12 & (v9 >> 63)) + v9;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_19E607A08(uint64_t a1, unint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v23 = MEMORY[0x1E4FBC860];
    sub_19E66F728(0, v2, 0);
    unint64_t v6 = (uint64_t *)(a1 + 32);
    uint64_t v3 = v23;
    uint64_t v7 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 32;
    uint64_t v18 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 24;
    uint64_t v19 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 33;
    uint64_t v17 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 25;
    char v21 = (char *)(a2 + 49);
    uint64_t v22 = (char *)(a2 + 48);
    unint64_t v20 = a2 >> 62;
    do
    {
      uint64_t v8 = *v6;
      uint64_t v10 = v21;
      uint64_t v9 = v22;
      switch(v20)
      {
        case 1uLL:
        case 3uLL:
          uint64_t v9 = (char *)v7;
          uint64_t v10 = (char *)v19;
          break;
        case 2uLL:
          uint64_t v10 = (char *)v17;
          uint64_t v9 = (char *)v18;
          break;
        default:
          break;
      }
      char v11 = *v10;
      char v12 = *v9;
      unint64_t v14 = *(void *)(v23 + 16);
      unint64_t v13 = *(void *)(v23 + 24);
      swift_bridgeObjectRetain();
      if (v14 >= v13 >> 1) {
        sub_19E66F728(v13 > 1, v14 + 1, 1);
      }
      *(void *)(v23 + 16) = v14 + 1;
      uint64_t v15 = v23 + 16 * v14;
      *(void *)(v15 + 32) = v8;
      *(unsigned char *)(v15 + 40) = v12;
      *(unsigned char *)(v15 + 41) = v11;
      ++v6;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_19E607B80(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_19EBF7278();
  __break(1u);
  return result;
}

uint64_t sub_19E607C74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2E0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_19EBF7278();
  __break(1u);
  return result;
}

uint64_t sub_19E607D84(uint64_t a1)
{
  return a1;
}

uint64_t sub_19E607DD8(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return swift_release();
  }
  return result;
}

BOOL sub_19E607DF0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  switch((unint64_t)*a1 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v3 = (v2 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v3 = (v2 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v3 = v2 + 40;
      break;
  }
  return *(void *)(*(void *)v3 + 16) == *(void *)(v1 + 16);
}

uint64_t sub_19E607E5C@<X0>(void *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 17)) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return sub_19E6019D0(v2 | *(unsigned __int8 *)(v1 + 16), a1);
}

uint64_t sub_19E607EB4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_19EBF7278();
  __break(1u);
  return result;
}

uint64_t sub_19E607FA8@<X0>(unint64_t *a1@<X8>)
{
  return sub_19E60562C(*(void *)(v1 + 16), a1);
}

char *sub_19E607FC8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_19EBF7278();
  __break(1u);
  return result;
}

char *sub_19E6080B4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_19EBF7278();
  __break(1u);
  return result;
}

char *sub_19E6081A0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_19EBF7278();
  __break(1u);
  return result;
}

uint64_t sub_19E60828C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_19EBF7278();
  __break(1u);
  return result;
}

uint64_t MLTensor.ResizeMethod.hash(into:)()
{
  if (*v0 == 2) {
    return sub_19EBF7488();
  }
  sub_19EBF7488();
  return sub_19EBF7498();
}

uint64_t static MLTensor.ResizeMethod.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  char v3 = v2 == 2;
  int v4 = *a2;
  if (v4 != 2) {
    char v3 = 0;
  }
  if (v2 != 2 && v4 != 2) {
    char v3 = ((v2 & 1) == 0) ^ v4;
  }
  return v3 & 1;
}

uint64_t MLTensor.ResizeMethod.hashValue.getter()
{
  int v1 = *v0;
  sub_19EBF7478();
  sub_19EBF7488();
  if (v1 != 2) {
    sub_19EBF7498();
  }
  return sub_19EBF74B8();
}

uint64_t sub_19E608478()
{
  int v1 = *v0;
  sub_19EBF7478();
  sub_19EBF7488();
  if (v1 != 2) {
    sub_19EBF7498();
  }
  return sub_19EBF74B8();
}

uint64_t sub_19E6084E8()
{
  if (*v0 == 2) {
    return sub_19EBF7488();
  }
  sub_19EBF7488();
  return sub_19EBF7498();
}

uint64_t sub_19E608538()
{
  int v1 = *v0;
  sub_19EBF7478();
  sub_19EBF7488();
  if (v1 != 2) {
    sub_19EBF7498();
  }
  return sub_19EBF74B8();
}

uint64_t sub_19E6085A4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  char v3 = v2 == 2;
  int v4 = *a2;
  if (v4 != 2) {
    char v3 = 0;
  }
  if (v2 != 2 && v4 != 2) {
    char v3 = ((v2 & 1) == 0) ^ v4;
  }
  return v3 & 1;
}

uint64_t MLTensor.ResizeMethod.description.getter()
{
  int v1 = *v0;
  unint64_t v2 = 0xD000000000000018;
  if ((v1 & 1) == 0) {
    unint64_t v2 = 0x7261656E696C6962;
  }
  if (v1 == 2) {
    return 0x4E7473657261656ELL;
  }
  else {
    return v2;
  }
}

uint64_t sub_19E608648()
{
  int v1 = *v0;
  unint64_t v2 = 0xD000000000000018;
  if ((v1 & 1) == 0) {
    unint64_t v2 = 0x7261656E696C6962;
  }
  if (v1 == 2) {
    return 0x4E7473657261656ELL;
  }
  else {
    return v2;
  }
}

uint64_t MLTensor.resized(to:method:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  char v6 = *a3;
  unint64_t v7 = *v4;
  uint64_t v8 = *v4 >> 62;
  switch(v8)
  {
    case 1:
    case 3:
      char v11 = (unsigned __int8 *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      char v12 = (char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      char v11 = (unsigned __int8 *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      char v12 = (char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      char v11 = (unsigned __int8 *)(v7 + 48);
      char v12 = (char *)(v7 + 49);
      break;
  }
  char v13 = *v12;
  unsigned int v14 = *v11;
  LOBYTE(v55) = v14;
  BYTE1(v55) = v13;
  unint64_t v56 = &unk_1EF0CA2B8;
  LOBYTE(v57) = 1;
  char v61 = 9;
  if (v14 < 9)
  {
    sub_19E5E2970((uint64_t)&v55, (uint64_t)v52);
    sub_19E5E1864();
    goto LABEL_56;
  }
  sub_19E607D84((uint64_t)&v55);
  switch((int)v8)
  {
    case 1:
    case 3:
      uint64_t v15 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v15 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v15 = v7 + 40;
      break;
  }
  if (*(void *)(*(void *)v15 + 16) != 4)
  {
    switch((int)v8)
    {
      case 1:
      case 3:
        uint64_t v16 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 24;
        break;
      case 2:
        uint64_t v16 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 16;
        break;
      default:
        uint64_t v16 = v7 + 40;
        break;
    }
    if (*(void *)(*(void *)v16 + 16) != 3) {
      goto LABEL_56;
    }
  }
  if (a1 < 1 || a2 <= 0)
  {
LABEL_56:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E608DD8);
  }
  switch((int)v8)
  {
    case 1:
    case 3:
      uint64_t v17 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v17 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v17 = v7 + 40;
      break;
  }
  uint64_t v18 = *(void *)(*(void *)v17 + 16);
  if (v18 == 3)
  {
    v52[0] = v7;
    MLTensor.expandingShape(at:)((uint64_t)&unk_1EF0CA268, &v55);
    unint64_t v19 = v55;
    uint64_t v8 = v55 >> 62;
  }
  else
  {
    swift_retain();
    unint64_t v19 = v7;
  }
  uint64_t v46 = a4;
  char v50 = v6;
  uint64_t v49 = v18;
  switch(v8)
  {
    case 1:
    case 3:
      unint64_t v20 = (uint64_t *)((v19 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      unint64_t v20 = (uint64_t *)((v19 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      unint64_t v20 = (uint64_t *)(v19 + 40);
      break;
  }
  uint64_t v21 = *v20;
  swift_bridgeObjectRetain();
  int64_t v22 = sub_19E608E38(*(void *)(v21 + 16) - 2, v21);
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  unint64_t v28 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  unint64_t v55 = v22;
  unint64_t v56 = v24;
  uint64_t v57 = v26;
  unint64_t v58 = v28;
  sub_19E609C7C(inited);
  swift_setDeallocating();
  uint64_t v31 = v55;
  uint64_t v30 = (uint64_t)v56;
  uint64_t v32 = v57;
  unint64_t v33 = v58;
  if (v58)
  {
    uint64_t v51 = a1;
    uint64_t v35 = a2;
    sub_19EBF73A8();
    swift_unknownObjectRetain_n();
    uint64_t v36 = swift_dynamicCastClass();
    if (!v36)
    {
      swift_unknownObjectRelease();
      uint64_t v36 = MEMORY[0x1E4FBC860];
    }
    uint64_t v37 = *(void *)(v36 + 16);
    swift_release();
    if (!__OFSUB__(v33 >> 1, v32))
    {
      if (v37 == (v33 >> 1) - (void)v32)
      {
        uint64_t v34 = swift_dynamicCastClass();
        a2 = v35;
        a1 = v51;
        if (!v34)
        {
          swift_unknownObjectRelease();
          uint64_t v34 = MEMORY[0x1E4FBC860];
        }
        goto LABEL_38;
      }
      goto LABEL_53;
    }
    __break(1u);
    goto LABEL_51;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    uint64_t v34 = sub_19E5DDDB0(v31, v30, (uint64_t)v32, v33);
LABEL_38:
    uint64_t v48 = v34;
    swift_unknownObjectRelease();
    switch((int)v8)
    {
      case 0:
        uint64_t v38 = (char *)(v19 + 48);
        uint64_t v39 = (char *)(v19 + 49);
        break;
      case 1:
      case 3:
        uint64_t v38 = (char *)((v19 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        uint64_t v39 = (char *)((v19 & 0x3FFFFFFFFFFFFFFFLL) + 33);
        break;
      case 2:
        uint64_t v38 = (char *)((v19 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        uint64_t v39 = (char *)((v19 & 0x3FFFFFFFFFFFFFFFLL) + 25);
        break;
      default:
        JUMPOUT(0);
    }
    char v47 = *v39;
    char v40 = *v38;
    if (qword_1E945BB70 != -1) {
      swift_once();
    }
    sub_19EBF75A8();
    uint64_t v41 = (void *)v55;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
    uint64_t v42 = swift_initStackObject();
    uint64_t v51 = 1;
    *(_OWORD *)(v42 + 16) = xmmword_19EC36240;
    *(void *)(v42 + 32) = v7;
    swift_retain();
    sub_19E634690(v42, (uint64_t)v52);
    swift_bridgeObjectRelease();
    sub_19E601010(v41);
    uint64_t v8 = v53;
    unint64_t v33 = v54;
    __swift_project_boxed_opaque_existential_1(v52, v53);
    unint64_t v55 = 0x6567616D69;
    unint64_t v56 = (void *)0xE500000000000000;
    LOBYTE(v57) = 0;
    unint64_t v58 = a1;
    uint64_t v59 = a2;
    char v60 = v50;
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_19EC36240;
    *(void *)(v35 + 32) = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
    uint64_t v43 = swift_initStackObject();
    *(_OWORD *)(v43 + 16) = xmmword_19EC36240;
    *(void *)(v43 + 32) = v48;
    *(unsigned char *)(v43 + 40) = v40;
    *(unsigned char *)(v43 + 41) = v47;
    unint64_t v7 = v33 + 224;
    uint64_t v32 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t, uint64_t, unint64_t))(v33 + 224);
    v19 &= 0x3FFFFFFFFFFFFFFFuLL;
    swift_retain();
    uint64_t v30 = v32(&v55, v35, v43, v8, v33);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_bridgeObjectRelease();
    if (v49 != 3) {
      break;
    }
    if (*(void *)(v30 + 16))
    {
      swift_retain();
      swift_bridgeObjectRelease();
      MLTensor.squeezingShape(at:)((uint64_t)&unk_1EF0CA290, &v55);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      unint64_t v44 = v55;
      goto LABEL_49;
    }
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    swift_unknownObjectRelease();
    a2 = v35;
    a1 = v51;
  }
  if (!*(void *)(v30 + 16)) {
    goto LABEL_52;
  }
  unint64_t v44 = *(void *)(v30 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
LABEL_49:
  *uint64_t v46 = v44;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v52);
}

int64_t sub_19E608E38(int64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = *(void *)(a2 + 16);
    if ((uint64_t)v2 >= result) {
      unint64_t v3 = result;
    }
    else {
      unint64_t v3 = *(void *)(a2 + 16);
    }
    if (!result) {
      unint64_t v3 = 0;
    }
    if (v2 >= v3) {
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_19E608E7C(uint64_t result)
{
  uint64_t v2 = result;
  unint64_t v3 = *(void *)(v1 + 24);
  int v4 = *(void **)v1;
  int64_t v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(), *(void *)uint64_t v1 = v4, (result & 1) == 0))
  {
    uint64_t v9 = v4;
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v8 = *(void *)(v1 + 8);
  sub_19EBF73A8();
  swift_unknownObjectRetain();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t result = MEMORY[0x1E4FBC860];
  }
  uint64_t v9 = *(void **)(result + 16);
  if (v8 + 8 * v6 + 8 * v7 == result + 8 * (void)v9 + 32) {
    goto LABEL_31;
  }
  uint64_t result = swift_release();
  while (1)
  {
    if (v7 >= v2) {
      goto LABEL_28;
    }
    uint64_t v9 = *(void **)v1;
LABEL_9:
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v10 = v5 - v7;
    if (__OFSUB__(v5, v7))
    {
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v11 = *(void *)(v1 + 8);
    if (v10 <= v2 ? v2 : v5 - v7) {
      break;
    }
    int v4 = (void *)MEMORY[0x1E4FBC860];
    if (v5 >= v7) {
      goto LABEL_17;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    unint64_t v19 = *(void *)(result + 24);
    uint64_t result = swift_release();
    unint64_t v20 = (v19 >> 1) - (void)v9;
    BOOL v21 = __OFADD__(v7, v20);
    v7 += v20;
    if (v21) {
      goto LABEL_40;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
  int v4 = (void *)swift_allocObject();
  uint64_t result = _swift_stdlib_malloc_size(v4);
  uint64_t v13 = result - 32;
  if (result < 32) {
    uint64_t v13 = result - 25;
  }
  v4[2] = v10;
  v4[3] = 2 * (v13 >> 3);
  if (v5 < v7) {
    goto LABEL_30;
  }
LABEL_17:
  if ((v10 & 0x8000000000000000) == 0)
  {
    unint64_t v14 = (unint64_t)(v4 + 4);
    uint64_t v15 = (void *)(v11 + 8 * v7);
    if (v15 >= &v4[v10 + 4] || v14 >= (unint64_t)&v15[v10])
    {
      memcpy(v4 + 4, v15, 8 * v10);
      if (!__OFSUB__(0, v7))
      {
        uint64_t v17 = v4[2];
        uint64_t v18 = v7 + v17;
        if (!__OFADD__(v7, v17))
        {
          if (v18 >= v7)
          {
            uint64_t result = swift_unknownObjectRelease();
            if ((v18 & 0x8000000000000000) == 0)
            {
              *(void *)(v1 + _Block_object_dispose(&STACK[0x278], 8) = v14 - 8 * v7;
              *(void *)(v1 + 16) = v7;
              *(void *)(v1 + 24) = (2 * v18) | 1;
LABEL_28:
              *(void *)uint64_t v1 = v4;
              return result;
            }
            goto LABEL_38;
          }
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
LABEL_41:
  uint64_t result = sub_19EBF7278();
  __break(1u);
  return result;
}

uint64_t sub_19E6090EC(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = v4[2];
  uint64_t v7 = v4[3] >> 1;
  uint64_t v8 = v7 - v6;
  if (__OFSUB__(v7, v6))
  {
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v10 = *a1;
  uint64_t v11 = *(void *)(*a1 + 16);
  BOOL v30 = __OFSUB__(v11, a2);
  uint64_t v12 = v11 - a2;
  if (v30)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v15 = v8 - a2;
  if (__OFSUB__(v8, a2))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  BOOL v30 = __OFSUB__(v15, v14);
  uint64_t v16 = v15 - v14;
  if (v30)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v38 = v16;
  __dst = (char *)(v10 + 32);
  uint64_t v18 = sub_19E609640(v8);
  uint64_t v37 = (char *)(v10 + 32 + 8 * a2 + 8 * a3);
  if (v18)
  {
    uint64_t v36 = a4;
    if (a2 < 0) {
      goto LABEL_46;
    }
    uint64_t v19 = v18;
    uint64_t v20 = v4[2];
    BOOL v21 = (char *)(v4[1] + 8 * v20);
    int64_t v22 = &v21[8 * a2];
    if (__dst != v21 || __dst >= v22) {
      memmove(__dst, v21, 8 * a2);
    }
    v36(v10 + 32 + 8 * a2, a3);
    if (v14 < 0) {
      goto LABEL_46;
    }
    uint64_t v23 = &v22[8 * v38];
    if (v37 != v23 || v37 >= &v23[8 * v14]) {
      memmove(v37, v23, 8 * v14);
    }
    *(void *)(v19 + 16) = 0;
    swift_release();
LABEL_26:
    swift_retain();
    uint64_t result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v20))
    {
      uint64_t v34 = *(void *)(v10 + 16);
      BOOL v30 = __OFADD__(v20, v34);
      uint64_t v35 = v20 + v34;
      if (!v30)
      {
        if (v35 >= v20)
        {
          if ((v35 & 0x8000000000000000) == 0)
          {
            *int v4 = v10;
            v4[1] = &__dst[-8 * v20];
            v4[2] = v20;
            v4[3] = (2 * v35) | 1;
            return result;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v25 = (void (*)(char *, uint64_t))a4;
  uint64_t v20 = v4[2];
  uint64_t v26 = v20 + a2;
  if (__OFADD__(v20, a2))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v26 < v20)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (__OFSUB__(v26, v20))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v27 = v4[1];
  memcpy(__dst, (const void *)(v27 + 8 * v20), 8 * a2);
  v25(&__dst[8 * a2], a3);
  uint64_t v28 = v26 + v38;
  if (__OFADD__(v26, v38))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v29 = v4[3] >> 1;
  BOOL v30 = __OFSUB__(v29, v28);
  BOOL v31 = v29 < v28;
  uint64_t v32 = v29 - v28;
  if (v31)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (!v30)
  {
    memcpy(v37, (const void *)(v27 + 8 * v28), 8 * v32);
    goto LABEL_26;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = sub_19EBF7278();
  __break(1u);
  return result;
}

uint64_t sub_19E609368(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  unint64_t v4 = v3 >> 1;
  BOOL v5 = __OFSUB__(v3 >> 1, v2);
  uint64_t v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v7 = result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7) {
    return result;
  }
  sub_19EBF73A8();
  swift_unknownObjectRetain();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t result = MEMORY[0x1E4FBC860];
  }
  uint64_t v8 = *(void *)(result + 16);
  BOOL v5 = __OFADD__(v8, v7);
  uint64_t v9 = v8 + v7;
  if (v5) {
    goto LABEL_13;
  }
  *(void *)(result + 16) = v9;
  uint64_t result = swift_release();
  uint64_t v10 = v4 + v7;
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *(void *)(v1 + 24) = v3 & 1 | (2 * v10);
  return result;
}

uint64_t sub_19E609420(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7) {
      goto LABEL_21;
    }
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v7 = a2;
  uint64_t v6 = result;
  if ((a6 & 1) == 0) {
    goto LABEL_34;
  }
  sub_19EBF73A8();
  swift_unknownObjectRetain();
  uint64_t v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = a4 + 8 * a5 + 8 * v8;
  if (v13 == v11 + 8 * v12 + 32)
  {
    unint64_t v15 = *(void *)(v11 + 24);
    uint64_t result = swift_release();
    uint64_t v16 = (v15 >> 1) - v12;
    uint64_t v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release();
    uint64_t v14 = v8;
  }
  swift_unknownObjectRetain();
  uint64_t v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      uint64_t v17 = MEMORY[0x1E4FBC860];
    }
    uint64_t v18 = *(void *)(v17 + 16);
    if (v13 == v17 + 8 * v18 + 32)
    {
      unint64_t v20 = *(void *)(v17 + 24);
      uint64_t result = swift_release();
      uint64_t v21 = (v20 >> 1) - v18;
      BOOL v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    uint64_t v17 = MEMORY[0x1E4FBC860];
  }
  uint64_t v19 = *(void *)(v17 + 16);
  if (v13 == v17 + 8 * v19 + 32)
  {
    unint64_t v23 = *(void *)(v17 + 24);
    uint64_t result = swift_release();
    uint64_t v24 = (v23 >> 1) - v19;
    BOOL v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22) {
      goto LABEL_21;
    }
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7) {
    uint64_t v25 = v7;
  }
  else {
    uint64_t v25 = v8;
  }
  if (v25 <= v6) {
    uint64_t v26 = v6;
  }
  else {
    uint64_t v26 = v25;
  }
  if (!v26) {
    return MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
  uint64_t v27 = (void *)swift_allocObject();
  int64_t v28 = _swift_stdlib_malloc_size(v27);
  uint64_t v29 = v28 - 32;
  if (v28 < 32) {
    uint64_t v29 = v28 - 25;
  }
  void v27[2] = v6;
  v27[3] = 2 * (v29 >> 3);
  return (uint64_t)v27;
}

uint64_t (*sub_19E609624())(void, void, void)
{
  return nullsub_1;
}

uint64_t sub_19E609640(uint64_t a1)
{
  int64_t isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!isUniquelyReferenced_nonNull) {
    return 0;
  }
  uint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v8 = v1[1];
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
  sub_19EBF73A8();
  swift_unknownObjectRetain();
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  uint64_t v10 = *(void *)(v9 + 16);
  if (v8 + 8 * v6 + 8 * v7 != v9 + 8 * v10 + 32)
  {
    swift_release();
LABEL_8:
    uint64_t v11 = v7;
    goto LABEL_10;
  }
  unint64_t v12 = *(void *)(v9 + 24);
  uint64_t result = swift_release();
  uint64_t v14 = (v12 >> 1) - v10;
  BOOL v15 = __OFADD__(v7, v14);
  uint64_t v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1) {
      return 0;
    }
    sub_19EBF73A8();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x1E4FBC860];
    }
    uint64_t v16 = v8 + 8 * v6 - a1;
    uint64_t v17 = v16 - 32;
    uint64_t v18 = v16 - 25;
    if (v17 >= 0) {
      uint64_t v18 = v17;
    }
    int64_t isUniquelyReferenced_nonNull = v7 + (v18 >> 3);
    if (!__OFADD__(v7, v18 >> 3))
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4) {
        return a1;
      }
LABEL_21:
      sub_19E6097B0(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

unint64_t sub_19E6097B0(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = a3 - v4;
  if (__OFSUB__(a3, v4))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(v7 + 16);
  BOOL v9 = __OFSUB__(v8, a2);
  uint64_t v10 = v8 - a2;
  if (v9) {
    goto LABEL_18;
  }
  if (v10 < 0)
  {
LABEL_21:
    uint64_t result = sub_19EBF7278();
    __break(1u);
    return result;
  }
  uint64_t result = v7 + 32 + 8 * result + 8 * a3;
  uint64_t v11 = (const void *)(v7 + 32 + 8 * a2);
  if ((const void *)result != v11 || result >= (unint64_t)v11 + 8 * v10) {
    uint64_t result = (unint64_t)memmove((void *)result, v11, 8 * v10);
  }
  uint64_t v13 = *(void *)(v7 + 16);
  BOOL v9 = __OFADD__(v13, v6);
  uint64_t v14 = v13 + v6;
  if (v9) {
    goto LABEL_19;
  }
  *(void *)(v7 + 16) = v14;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_19E6098A4(uint64_t result, unint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  uint64_t v5 = (v3 >> 1) - v4;
  if (__OFSUB__(v3 >> 1, v4)) {
    goto LABEL_57;
  }
  unint64_t v43 = *(void *)(result + 16);
  if (v43 == a2) {
    return result;
  }
  if (v43 <= a2) {
    goto LABEL_58;
  }
  uint64_t v6 = (uint64_t *)v2;
  uint64_t v42 = result + 32;
  uint64_t v7 = *(void *)(result + 32 + 8 * a2);
  unint64_t v46 = a2 + 1;
  uint64_t v41 = result + 48;
  while (!__OFADD__(v5, 1))
  {
    uint64_t v47 = sub_19E609420(v5, v5 + 1, *v6, v6[1], v4, v3);
    uint64_t v8 = (void (*)(uint64_t, uint64_t))sub_19E609624();
    BOOL v9 = v6;
    sub_19E6090EC(&v47, v5, 0, v8);
    swift_release();
    uint64_t result = swift_release();
    uint64_t v4 = v6[2];
    unint64_t v3 = v6[3];
    uint64_t v10 = (v3 >> 1) - v4;
    if (__OFSUB__(v3 >> 1, v4)) {
      goto LABEL_52;
    }
    unint64_t v44 = v3 >> 1;
    uint64_t v45 = v5 + 1;
    uint64_t v11 = v6[1];
    if (v3)
    {
      int64_t v12 = (v3 >> 1) - v4;
      uint64_t v13 = v5;
      unint64_t v14 = v6[3];
      sub_19EBF73A8();
      swift_unknownObjectRetain();
      uint64_t v15 = swift_dynamicCastClass();
      if (!v15)
      {
        swift_unknownObjectRelease();
        uint64_t v15 = MEMORY[0x1E4FBC860];
      }
      uint64_t v16 = *(void *)(v15 + 16);
      if (v11 + 8 * v4 + 8 * v12 == v15 + 8 * v16 + 32)
      {
        uint64_t v18 = v11;
        uint64_t v19 = v4;
        unint64_t v20 = *(void *)(v15 + 24);
        uint64_t result = swift_release();
        uint64_t v21 = (v20 >> 1) - v16;
        BOOL v22 = __OFADD__(v12, v21);
        uint64_t v17 = v12 + v21;
        if (v22) {
          goto LABEL_56;
        }
        uint64_t v10 = v12;
        uint64_t v4 = v19;
        uint64_t v11 = v18;
        uint64_t v6 = v9;
        unint64_t v3 = v14;
        uint64_t v5 = v13;
        if (v13 >= v17)
        {
LABEL_41:
          BOOL v23 = 0;
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t result = swift_release();
        uint64_t v17 = v12;
        unint64_t v3 = v14;
        uint64_t v5 = v13;
        uint64_t v10 = v12;
        if (v13 >= v12) {
          goto LABEL_41;
        }
      }
    }
    else
    {
      uint64_t v17 = (v3 >> 1) - v4;
      if (v5 >= v10) {
        goto LABEL_41;
      }
    }
    *(void *)(v11 + 8 * v4 + 8 * v5) = v7;
    if (v46 != v43)
    {
      if (v46 <= v43) {
        unint64_t v24 = v43;
      }
      else {
        unint64_t v24 = v46;
      }
      unint64_t v25 = v43 + ~v46;
      if (v25 >= v17 + ~v5) {
        unint64_t v25 = v17 + ~v5;
      }
      if (v25 >= v24 - v46) {
        unint64_t v25 = v24 - v46;
      }
      unint64_t v26 = v25 + 1;
      if (v26 > 0xA)
      {
        uint64_t v27 = 8 * v46;
        if (v11 + 8 * v5 + 8 * v4 - (v42 + 8 * v46) + 8 >= 0x20)
        {
          uint64_t v28 = v26 & 3;
          if ((v26 & 3) == 0) {
            uint64_t v28 = 4;
          }
          unint64_t v29 = v26 - v28;
          v46 += v29;
          v45 += v29;
          BOOL v30 = (_OWORD *)(v11 + 8 * v5 + 8 * v4 + 24);
          BOOL v31 = (long long *)(v41 + v27);
          do
          {
            long long v32 = *v31;
            *(v30 - 1) = *(v31 - 1);
            *BOOL v30 = v32;
            v30 += 2;
            v31 += 2;
            v29 -= 4;
          }
          while (v29);
        }
      }
      uint64_t v33 = 0;
      unint64_t v34 = v24 - v46;
      uint64_t v35 = v17 - v45;
      while (v34 != v33)
      {
        uint64_t v7 = *(void *)(v42 + 8 * v46 + 8 * v33);
        BOOL v23 = v35 != v33;
        if (v35 == v33)
        {
          v46 += v33 + 1;
          uint64_t v5 = v17;
          goto LABEL_42;
        }
        *(void *)(v11 + 8 * v45 + 8 * v4 + 8 * v33++) = v7;
        if (!(v46 - v43 + v33))
        {
          uint64_t v7 = 0;
          uint64_t v5 = v45 + v33;
          goto LABEL_38;
        }
      }
      goto LABEL_50;
    }
    uint64_t v7 = 0;
    BOOL v23 = 1;
    uint64_t v5 = v45;
LABEL_38:
    unint64_t v46 = v43;
LABEL_42:
    uint64_t v36 = v5 - v10;
    if (__OFSUB__(v5, v10)) {
      goto LABEL_53;
    }
    if (v36)
    {
      char v37 = v3;
      sub_19EBF73A8();
      swift_unknownObjectRetain();
      uint64_t result = swift_dynamicCastClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        uint64_t result = MEMORY[0x1E4FBC860];
      }
      uint64_t v38 = *(void *)(result + 16);
      BOOL v22 = __OFADD__(v38, v36);
      uint64_t v39 = v38 + v36;
      if (v22) {
        goto LABEL_54;
      }
      *(void *)(result + 16) = v39;
      uint64_t result = swift_release();
      unint64_t v40 = v44 + v36;
      if (__OFADD__(v44, v36)) {
        goto LABEL_55;
      }
      if ((v40 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_50:
        __break(1u);
        break;
      }
      unint64_t v3 = v37 & 1 | (2 * v40);
      v6[3] = v3;
    }
    if (v23) {
      return result;
    }
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t sub_19E609C7C(uint64_t a1)
{
  uint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  uint64_t v4 = (v2 >> 1) - v3;
  if (__OFSUB__(v2 >> 1, v3))
  {
    __break(1u);
    goto LABEL_36;
  }
  int64_t v6 = *(void *)(a1 + 16);
  if ((v2 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v7 = v1[1];
  sub_19EBF73A8();
  swift_unknownObjectRetain();
  uint64_t v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
    uint64_t v8 = MEMORY[0x1E4FBC860];
  }
  uint64_t v9 = *(void *)(v8 + 16);
  if (v7 + 8 * v3 + 8 * v4 != v8 + 8 * v9 + 32)
  {
    swift_release();
LABEL_7:
    uint64_t v10 = v4;
    goto LABEL_9;
  }
  unint64_t v11 = *(void *)(v8 + 24);
  swift_release();
  uint64_t v12 = (v11 >> 1) - v9;
  BOOL v13 = __OFADD__(v4, v12);
  uint64_t v10 = v4 + v12;
  if (v13)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
LABEL_9:
  uint64_t v14 = v4 + v6;
  if (__OFADD__(v4, v6))
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v10 < v14)
  {
    if (v10 + 0x4000000000000000 < 0)
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    uint64_t v15 = 2 * v10;
    if (v15 > v14) {
      uint64_t v14 = v15;
    }
  }
  uint64_t result = sub_19E608E7C(v14);
  uint64_t v18 = v1[2];
  unint64_t v17 = v1[3];
  uint64_t v19 = (v17 >> 1) - v18;
  if (__OFSUB__(v17 >> 1, v18)) {
    goto LABEL_37;
  }
  unint64_t v20 = (char *)(v1[1] + 8 * v18 + 8 * v19);
  if ((v17 & 1) == 0)
  {
LABEL_20:
    uint64_t v23 = v19;
    goto LABEL_22;
  }
  sub_19EBF73A8();
  swift_unknownObjectRetain();
  uint64_t v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_unknownObjectRelease();
    uint64_t v21 = MEMORY[0x1E4FBC860];
  }
  uint64_t v22 = *(void *)(v21 + 16);
  if (v20 != (char *)(v21 + 8 * v22 + 32))
  {
    uint64_t result = swift_release();
    goto LABEL_20;
  }
  unint64_t v24 = *(void *)(v21 + 24);
  uint64_t result = swift_release();
  uint64_t v25 = (v24 >> 1) - v22;
  BOOL v13 = __OFADD__(v19, v25);
  uint64_t v23 = v19 + v25;
  if (v13)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    uint64_t result = sub_19EBF7278();
    __break(1u);
    return result;
  }
LABEL_22:
  int64_t v26 = v23 - v19;
  if (__OFSUB__(v23, v19))
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (!v6) {
    goto LABEL_30;
  }
  if (v26 < v6) {
    goto LABEL_39;
  }
  uint64_t v27 = (char *)(a1 + 32);
  size_t v28 = 8 * v6;
  if (a1 + 32 < (unint64_t)&v20[8 * v6] && v20 < &v27[v28]) {
    goto LABEL_44;
  }
  uint64_t result = (uint64_t)memcpy(v20, v27, v28);
  if (v6 <= 0) {
    goto LABEL_30;
  }
  if (__OFADD__(v19, v6)) {
    goto LABEL_41;
  }
  uint64_t result = sub_19E609368(v19 + v6);
LABEL_30:
  if (v6 == v26)
  {
    return sub_19E6098A4(a1, v6);
  }
  return result;
}

unint64_t sub_19E609EFC()
{
  unint64_t result = qword_1E945C2E8;
  if (!qword_1E945C2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C2E8);
  }
  return result;
}

uint64_t _s12ResizeMethodOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 2;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x19E60A00CLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = (v7 + 2147483646) & 0x7FFFFFFF;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *_s12ResizeMethodOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x19E60A0F4);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_19E60A11C(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

unsigned char *sub_19E60A138(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLTensor.ResizeMethod()
{
  return &type metadata for MLTensor.ResizeMethod;
}

void *sub_19E60A160(void *result)
{
  uint64_t v2 = v1[2];
  unint64_t v3 = v1[3];
  uint64_t v4 = (v3 >> 1) - v2;
  if (__OFSUB__(v3 >> 1, v2)) {
    goto LABEL_48;
  }
  uint64_t v5 = result[4];
  uint64_t v35 = result[3] >> 1;
  if (v5 == v35) {
    return result;
  }
  uint64_t v6 = result[2];
  if (v5 < v6 || v5 >= v35) {
    goto LABEL_49;
  }
  uint64_t v8 = v5 + 1;
  uint64_t v9 = *(void *)(result[1] + 8 * v5);
  uint64_t v28 = result[1];
  uint64_t v29 = result[2];
  BOOL v30 = v1;
  while (!__OFADD__(v4, 1))
  {
    uint64_t v36 = sub_19E609420(v4, v4 + 1, *v1, v1[1], v2, v3);
    uint64_t v10 = (void (*)(uint64_t, uint64_t))sub_19E609624();
    sub_19E6090EC(&v36, v4, 0, v10);
    swift_release();
    unint64_t result = (void *)swift_release();
    uint64_t v2 = v1[2];
    unint64_t v3 = v1[3];
    uint64_t v11 = (v3 >> 1) - v2;
    if (__OFSUB__(v3 >> 1, v2)) {
      goto LABEL_43;
    }
    uint64_t v31 = v4 + 1;
    unint64_t v32 = v3 >> 1;
    uint64_t v12 = v1[1];
    if (v3)
    {
      uint64_t v33 = v4;
      uint64_t v13 = v1[2];
      sub_19EBF73A8();
      swift_unknownObjectRetain();
      uint64_t v14 = swift_dynamicCastClass();
      if (!v14)
      {
        swift_unknownObjectRelease();
        uint64_t v14 = MEMORY[0x1E4FBC860];
      }
      uint64_t v15 = *(void *)(v14 + 16);
      if (v12 + 8 * v13 + 8 * v11 == v14 + 8 * v15 + 32)
      {
        unint64_t v17 = *(void *)(v14 + 24);
        unint64_t result = (void *)swift_release();
        uint64_t v18 = (v17 >> 1) - v15;
        BOOL v19 = __OFADD__(v11, v18);
        int64_t v16 = v11 + v18;
        if (v19) {
          goto LABEL_47;
        }
        uint64_t v6 = v29;
      }
      else
      {
        unint64_t result = (void *)swift_release();
        int64_t v16 = v11;
      }
      uint64_t v2 = v13;
      uint64_t v4 = v33;
      if (v33 >= v16)
      {
LABEL_32:
        BOOL v20 = 0;
        goto LABEL_33;
      }
    }
    else
    {
      int64_t v16 = (v3 >> 1) - v2;
      if (v4 >= v11) {
        goto LABEL_32;
      }
    }
    *(void *)(v12 + 8 * v2 + 8 * v4) = v9;
    if (v8 != v35)
    {
      uint64_t v21 = 0;
      uint64_t v22 = ~v4 + v16;
      while (v8 >= v6 && v8 + v21 < v35)
      {
        uint64_t v9 = *(void *)(v28 + 8 * v8 + 8 * v21);
        BOOL v20 = v22 != v21;
        if (v22 == v21)
        {
          v8 += v21 + 1;
          uint64_t v4 = v16;
          goto LABEL_33;
        }
        *(void *)(v12 + 8 * v4 + 8 * v2 + 8 + 8 * v21++) = v9;
        if (!(v8 - v35 + v21))
        {
          uint64_t v9 = 0;
          uint64_t v4 = v31 + v21;
          uint64_t v8 = v35;
          goto LABEL_33;
        }
      }
      goto LABEL_41;
    }
    uint64_t v9 = 0;
    BOOL v20 = 1;
    uint64_t v4 = v31;
    uint64_t v8 = v35;
LABEL_33:
    uint64_t v23 = v4 - v11;
    if (__OFSUB__(v4, v11)) {
      goto LABEL_44;
    }
    unsigned int v1 = v30;
    if (v23)
    {
      uint64_t v34 = v4;
      uint64_t v24 = v2;
      sub_19EBF73A8();
      swift_unknownObjectRetain();
      unint64_t result = (void *)swift_dynamicCastClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        unint64_t result = (void *)MEMORY[0x1E4FBC860];
      }
      uint64_t v25 = result[2];
      BOOL v19 = __OFADD__(v25, v23);
      uint64_t v26 = v25 + v23;
      if (v19) {
        goto LABEL_45;
      }
      result[2] = v26;
      unint64_t result = (void *)swift_release();
      unint64_t v27 = v32 + v23;
      if (__OFADD__(v32, v23)) {
        goto LABEL_46;
      }
      if ((v27 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
        break;
      }
      unint64_t v3 = v3 & 1 | (2 * v27);
      void v30[3] = v3;
      uint64_t v6 = v29;
      uint64_t v2 = v24;
      uint64_t v4 = v34;
    }
    if (v20) {
      return result;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

void *sub_19E60A470(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v8 = v4[2];
  unint64_t v7 = v4[3];
  uint64_t v9 = (v7 >> 1) - v8;
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((v7 & 1) == 0)
  {
LABEL_8:
    uint64_t v15 = v9;
    goto LABEL_10;
  }
  uint64_t v12 = v4[1];
  sub_19EBF73A8();
  swift_unknownObjectRetain();
  uint64_t v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_unknownObjectRelease();
    uint64_t v13 = MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = *(void *)(v13 + 16);
  if (v12 + 8 * v8 + 8 * v9 != v13 + 8 * v14 + 32)
  {
    swift_release();
    goto LABEL_8;
  }
  unint64_t v16 = *(void *)(v13 + 24);
  swift_release();
  uint64_t v17 = (v16 >> 1) - v14;
  BOOL v18 = __OFADD__(v9, v17);
  uint64_t v15 = v9 + v17;
  if (v18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_10:
  uint64_t v19 = v9 + v6;
  if (__OFADD__(v9, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v15 < v19)
  {
    if (v15 + 0x4000000000000000 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    uint64_t v20 = 2 * v15;
    if (v20 > v19) {
      uint64_t v19 = v20;
    }
  }
  unint64_t result = (void *)sub_19E608E7C(v19);
  uint64_t v23 = v4[2];
  unint64_t v22 = v4[3];
  uint64_t v24 = (v22 >> 1) - v23;
  if (__OFSUB__(v22 >> 1, v23)) {
    goto LABEL_40;
  }
  uint64_t v25 = (char *)(v4[1] + 8 * v23 + 8 * v24);
  if ((v22 & 1) == 0)
  {
LABEL_21:
    uint64_t v28 = v24;
    goto LABEL_23;
  }
  sub_19EBF73A8();
  swift_unknownObjectRetain();
  uint64_t v26 = swift_dynamicCastClass();
  if (!v26)
  {
    swift_unknownObjectRelease();
    uint64_t v26 = MEMORY[0x1E4FBC860];
  }
  uint64_t v27 = *(void *)(v26 + 16);
  if (v25 != (char *)(v26 + 8 * v27 + 32))
  {
    unint64_t result = (void *)swift_release();
    goto LABEL_21;
  }
  unint64_t v29 = *(void *)(v26 + 24);
  unint64_t result = (void *)swift_release();
  uint64_t v30 = (v29 >> 1) - v27;
  BOOL v18 = __OFADD__(v24, v30);
  uint64_t v28 = v24 + v30;
  if (v18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_23:
  uint64_t v31 = v28 - v24;
  if (__OFSUB__(v28, v24))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      uint64_t v6 = 0;
      unint64_t v5 = a3;
      goto LABEL_34;
    }
    goto LABEL_42;
  }
  if (v31 < v6)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v6 < 0) {
    goto LABEL_48;
  }
  unint64_t v32 = (char *)(a2 + 8 * a3);
  size_t v33 = 8 * v6;
  if (v32 < &v25[8 * v6] && v25 < &v32[v33]) {
    goto LABEL_48;
  }
  unint64_t result = memcpy(v25, v32, v33);
  if (v6)
  {
    if (__OFADD__(v24, v6))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      unint64_t result = (void *)sub_19EBF7278();
      __break(1u);
      return result;
    }
    unint64_t result = (void *)sub_19E609368(v24 + v6);
  }
LABEL_34:
  if (v6 == v31)
  {
    v36[0] = a1;
    v36[1] = a2;
    v36[2] = a3;
    v36[3] = a4;
    v36[4] = v5;
    return sub_19E60A160(v36);
  }
  return result;
}

uint64_t MLTensor.clamped(to:)@<X0>(void *a1@<X8>, unsigned int a2@<S0>, unsigned int a3@<S1>)
{
  uint64_t v4 = *v3;
  unint64_t v5 = (unint64_t)*v3 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v10 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v9 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v10 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v9 = (unsigned __int8 *)(v4 + 48);
      uint64_t v10 = (char *)(v4 + 49);
      break;
  }
  char v11 = *v10;
  unsigned int v12 = *v9;
  LOBYTE(v33[0]) = v12;
  BYTE1(v33[0]) = v11;
  v33[1] = &unk_1EF0CA210;
  char v34 = 1;
  char v37 = 9;
  uint64_t v13 = v33;
  if (v12 < 9)
  {
LABEL_15:
    sub_19E5E2970((uint64_t)v13, (uint64_t)&v32);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E60AA84);
  }
  sub_19E607D84((uint64_t)v33);
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v14 = v32;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v4;
  uint64_t v16 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v33);
  swift_bridgeObjectRelease();
  sub_19E601010(v14);
  uint64_t v18 = v35;
  uint64_t v17 = v36;
  __swift_project_boxed_opaque_existential_1(v33, v35);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_19EC36240;
  *(void *)(v19 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_19EC36240;
  uint64_t v21 = v20;
  uint64_t v31 = a1;
  switch((int)v5)
  {
    case 1:
    case 3:
      unint64_t v22 = (void *)(v16 + 24);
      uint64_t v23 = (char *)(v16 + 32);
      uint64_t v24 = (char *)(v16 + 33);
      break;
    case 2:
      unint64_t v22 = (void *)(v16 + 16);
      uint64_t v23 = (char *)(v16 + 24);
      uint64_t v24 = (char *)(v16 + 25);
      break;
    default:
      unint64_t v22 = (void *)(v4 + 40);
      uint64_t v23 = (char *)(v4 + 48);
      uint64_t v24 = (char *)(v4 + 49);
      break;
  }
  char v25 = *v24;
  char v26 = *v23;
  *(void *)(v20 + 32) = *v22;
  *(unsigned char *)(v20 + 40) = v26;
  *(unsigned char *)(v20 + 41) = v25;
  uint64_t v27 = *(uint64_t (**)(unint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 232);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v28 = v27(a2 | ((unint64_t)a3 << 32), 0, v19, v21, v18, v17);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v13 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v28 + 16))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v29 = *(void *)(v28 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  *uint64_t v31 = v29;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v33);
}

uint64_t MLTensor.clamped(to:)(float a1)
{
  return sub_19E60AAD4((void (*)(unint64_t *, uint64_t *))pointwiseMax(_:_:), a1);
}

{
  return sub_19E60AAD4((void (*)(unint64_t *, uint64_t *))pointwiseMin(_:_:), a1);
}

uint64_t sub_19E60AAD4(void (*a1)(unint64_t *, uint64_t *), float a2)
{
  unint64_t v16 = *v2;
  *(float *)&uint64_t v14 = a2;
  switch(v16 >> 62)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v16 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (unsigned char *)((v16 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v16 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (unsigned char *)((v16 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v16 + 48);
      uint64_t v6 = (unsigned char *)(v16 + 49);
      break;
  }
  int v7 = *v5;
  if (v7 == 10)
  {
LABEL_10:
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF00);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19EC36240;
    *(float *)(inited + 32) = a2;
    sub_19E60B13C(MEMORY[0x1E4FBC860], inited, &v15);
  }
  else
  {
    if (*v6) {
      __int16 v8 = 256;
    }
    else {
      __int16 v8 = 0;
    }
    char v9 = sub_19E636D20(266, v8 | (unsigned __int16)v7);
    uint64_t v10 = &protocol witness table for Bool;
    uint64_t v11 = MEMORY[0x1E4FBB390];
    switch(v9)
    {
      case 1:
        uint64_t v10 = &protocol witness table for UInt8;
        uint64_t v11 = MEMORY[0x1E4FBC358];
        break;
      case 2:
        uint64_t v10 = &protocol witness table for UInt16;
        uint64_t v11 = MEMORY[0x1E4FBC450];
        break;
      case 3:
        uint64_t v10 = &protocol witness table for UInt32;
        uint64_t v11 = MEMORY[0x1E4FBC4C0];
        break;
      case 4:
      case 8:
      case 11:
        goto LABEL_10;
      case 5:
        uint64_t v10 = &protocol witness table for Int8;
        uint64_t v11 = MEMORY[0x1E4FBC098];
        break;
      case 6:
        uint64_t v10 = &protocol witness table for Int16;
        uint64_t v11 = MEMORY[0x1E4FBC0F8];
        break;
      case 7:
        uint64_t v10 = &protocol witness table for Int32;
        uint64_t v11 = MEMORY[0x1E4FBC150];
        break;
      case 9:
        uint64_t v10 = &protocol witness table for Float16;
        uint64_t v11 = MEMORY[0x1E4FBC5E0];
        break;
      case 10:
        uint64_t v10 = &protocol witness table for Float;
        uint64_t v11 = MEMORY[0x1E4FBB470];
        break;
      default:
        break;
    }
    sub_19E636C40(v11, MEMORY[0x1E4FBB470], v11, (uint64_t)v10, &v15);
  }
  uint64_t v14 = v15;
  a1(&v16, &v14);
  return swift_release();
}

uint64_t MLTensor.softmax(alongAxis:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *v2;
  unint64_t v4 = (unint64_t)*v2 >> 62;
  switch(v4)
  {
    case 1uLL:
    case 3uLL:
      int v7 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      __int16 v8 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      int v7 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      __int16 v8 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      int v7 = (unsigned __int8 *)(v3 + 48);
      __int16 v8 = (char *)(v3 + 49);
      break;
  }
  char v9 = *v8;
  unsigned int v10 = *v7;
  LOBYTE(v37) = v10;
  BYTE1(v37) = v9;
  uint64_t v38 = &unk_1EF0CA2E0;
  char v39 = 1;
  char v42 = 9;
  uint64_t v11 = &v37;
  if (v10 < 9) {
    goto LABEL_23;
  }
  sub_19E607D84((uint64_t)&v37);
  uint64_t v12 = v4;
  switch((int)v4)
  {
    case 1:
    case 3:
      uint64_t v13 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v13 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v13 = v3 + 40;
      break;
  }
  uint64_t v14 = *(void *)(*(void *)v13 + 16);
  uint64_t v37 = a1;
  uint64_t v38 = (void *)v14;
  char v42 = 6;
  if (-v14 > a1 || v14 <= a1)
  {
    sub_19E5E2970((uint64_t)&v37, (uint64_t)v36);
    sub_19E5E1864();
    goto LABEL_25;
  }
  uint64_t v35 = a2;
  sub_19E607D84((uint64_t)&v37);
  uint64_t v16 = (v14 & (a1 >> 63)) + a1;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v17 = (void *)v36[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v3;
  uint64_t v19 = v3 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)&v37);
  swift_bridgeObjectRelease();
  sub_19E601010(v17);
  uint64_t v20 = v40;
  uint64_t v21 = v41;
  __swift_project_boxed_opaque_existential_1(&v37, v40);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_19EC36240;
  *(void *)(v22 + 32) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v23 = swift_initStackObject();
  *(_OWORD *)(v23 + 16) = xmmword_19EC36240;
  uint64_t v24 = v23;
  switch(v12)
  {
    case 1:
    case 3:
      uint64_t v25 = v16;
      char v26 = (void *)(v19 + 24);
      uint64_t v27 = (char *)(v19 + 32);
      uint64_t v28 = (char *)(v19 + 33);
      break;
    case 2:
      uint64_t v25 = v16;
      char v26 = (void *)(v19 + 16);
      uint64_t v27 = (char *)(v19 + 24);
      uint64_t v28 = (char *)(v19 + 25);
      break;
    default:
      uint64_t v25 = v16;
      char v26 = (void *)(v3 + 40);
      uint64_t v27 = (char *)(v3 + 48);
      uint64_t v28 = (char *)(v3 + 49);
      break;
  }
  char v29 = *v28;
  char v30 = *v27;
  *(void *)(v23 + 32) = *v26;
  *(unsigned char *)(v23 + 40) = v30;
  *(unsigned char *)(v23 + 41) = v29;
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 232);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v32 = v31(v25, 1, v22, v24, v20, v21);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v11 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v32 + 16))
  {
    __break(1u);
LABEL_23:
    sub_19E5E2970((uint64_t)v11, (uint64_t)v36);
    sub_19E5E1864();
LABEL_25:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E60B10CLL);
  }
  uint64_t v33 = *(void *)(v32 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  *uint64_t v35 = v33;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v37);
}

uint64_t sub_19E60B13C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v20[6] = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(a1 + 32);
    uint64_t v7 = 1;
    uint64_t v8 = *(void *)(a1 + 16);
    while (1)
    {
      uint64_t v9 = *v6++;
      uint64_t v10 = v7 * v9;
      if ((unsigned __int128)(v7 * (__int128)v9) >> 64 != (v7 * v9) >> 63) {
        break;
      }
      uint64_t v7 = v10;
      if (!--v8) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v10 = 1;
LABEL_7:
  if (v10 == *(void *)(a2 + 16))
  {
    MEMORY[0x1F4188790](a1);
    if (qword_1E945BB70 == -1)
    {
LABEL_9:
      sub_19EBF75A8();
      uint64_t v11 = (void *)v20[5];
      sub_19E634690(MEMORY[0x1E4FBC860], (uint64_t)v20);
      sub_19E601010(v11);
      uint64_t v12 = v20[4];
      uint64_t v13 = __swift_project_boxed_opaque_existential_1(v20, v20[3]);
      MEMORY[0x1F4188790](v13);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t)))(v12 + 8))(a1, 10, sub_19E60BCD0);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
      uint64_t result = swift_bridgeObjectRelease();
      *a3 = v14;
      return result;
    }
LABEL_11:
    swift_once();
    goto LABEL_9;
  }
  v20[0] = 0;
  v20[1] = 0xE000000000000000;
  sub_19EBF6FE8();
  sub_19EBF67D8();
  if (v5)
  {
    uint64_t v16 = (uint64_t *)(a1 + 32);
    uint64_t v17 = 1;
    while (1)
    {
      uint64_t v18 = *v16++;
      uint64_t v19 = v17 * v18;
      if ((unsigned __int128)(v17 * (__int128)v18) >> 64 != (v17 * v18) >> 63) {
        break;
      }
      uint64_t v17 = v19;
      if (!--v5) {
        goto LABEL_18;
      }
    }
    __break(1u);
  }
LABEL_18:
  sub_19EBF7318();
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  sub_19EBF7318();
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  uint64_t result = sub_19EBF71F8();
  __break(1u);
  return result;
}

uint64_t sub_19E60B474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v20[6] = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(a1 + 32);
    uint64_t v7 = 1;
    uint64_t v8 = *(void *)(a1 + 16);
    while (1)
    {
      uint64_t v9 = *v6++;
      uint64_t v10 = v7 * v9;
      if ((unsigned __int128)(v7 * (__int128)v9) >> 64 != (v7 * v9) >> 63) {
        break;
      }
      uint64_t v7 = v10;
      if (!--v8) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v10 = 1;
LABEL_7:
  if (v10 == *(void *)(a2 + 16))
  {
    MEMORY[0x1F4188790](a1);
    if (qword_1E945BB70 == -1)
    {
LABEL_9:
      sub_19EBF75A8();
      uint64_t v11 = (void *)v20[5];
      sub_19E634690(MEMORY[0x1E4FBC860], (uint64_t)v20);
      sub_19E601010(v11);
      uint64_t v12 = v20[4];
      uint64_t v13 = __swift_project_boxed_opaque_existential_1(v20, v20[3]);
      MEMORY[0x1F4188790](v13);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t)))(v12 + 8))(a1, 7, sub_19E60BC94);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
      uint64_t result = swift_bridgeObjectRelease();
      *a3 = v14;
      return result;
    }
LABEL_11:
    swift_once();
    goto LABEL_9;
  }
  v20[0] = 0;
  v20[1] = 0xE000000000000000;
  sub_19EBF6FE8();
  sub_19EBF67D8();
  if (v5)
  {
    uint64_t v16 = (uint64_t *)(a1 + 32);
    uint64_t v17 = 1;
    while (1)
    {
      uint64_t v18 = *v16++;
      uint64_t v19 = v17 * v18;
      if ((unsigned __int128)(v17 * (__int128)v18) >> 64 != (v17 * v18) >> 63) {
        break;
      }
      uint64_t v17 = v19;
      if (!--v5) {
        goto LABEL_18;
      }
    }
    __break(1u);
  }
LABEL_18:
  sub_19EBF7318();
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  sub_19EBF7318();
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  uint64_t result = sub_19EBF71F8();
  __break(1u);
  return result;
}

uint64_t sub_19E60B7AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v20[6] = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(a1 + 32);
    uint64_t v7 = 1;
    uint64_t v8 = *(void *)(a1 + 16);
    while (1)
    {
      uint64_t v9 = *v6++;
      uint64_t v10 = v7 * v9;
      if ((unsigned __int128)(v7 * (__int128)v9) >> 64 != (v7 * v9) >> 63) {
        break;
      }
      uint64_t v7 = v10;
      if (!--v8) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v10 = 1;
LABEL_7:
  if (v10 == *(void *)(a2 + 16))
  {
    MEMORY[0x1F4188790](a1);
    if (qword_1E945BB70 == -1)
    {
LABEL_9:
      sub_19EBF75A8();
      uint64_t v11 = (void *)v20[5];
      sub_19E634690(MEMORY[0x1E4FBC860], (uint64_t)v20);
      sub_19E601010(v11);
      uint64_t v12 = v20[4];
      uint64_t v13 = __swift_project_boxed_opaque_existential_1(v20, v20[3]);
      MEMORY[0x1F4188790](v13);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(uint64_t, uint64_t)))(v12 + 8))(a1, 0, sub_19E60BCD0);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
      uint64_t result = swift_bridgeObjectRelease();
      *a3 = v14;
      return result;
    }
LABEL_11:
    swift_once();
    goto LABEL_9;
  }
  v20[0] = 0;
  v20[1] = 0xE000000000000000;
  sub_19EBF6FE8();
  sub_19EBF67D8();
  if (v5)
  {
    uint64_t v16 = (uint64_t *)(a1 + 32);
    uint64_t v17 = 1;
    while (1)
    {
      uint64_t v18 = *v16++;
      uint64_t v19 = v17 * v18;
      if ((unsigned __int128)(v17 * (__int128)v18) >> 64 != (v17 * v18) >> 63) {
        break;
      }
      uint64_t v17 = v19;
      if (!--v5) {
        goto LABEL_18;
      }
    }
    __break(1u);
  }
LABEL_18:
  sub_19EBF7318();
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  sub_19EBF7318();
  sub_19EBF67D8();
  swift_bridgeObjectRelease();
  sub_19EBF67D8();
  uint64_t result = sub_19EBF71F8();
  __break(1u);
  return result;
}

void *sub_19E60BAE4(void *result, uint64_t a2, uint64_t a3)
{
  if (result) {
    uint64_t v3 = (a2 - (uint64_t)result) / 4;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return result;
  }
  if (v3 < v4)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (!result) {
    return result;
  }
  if (a3 + 32 < (unint64_t)result + 4 * v4 && a3 + 32 + 4 * v4 > (unint64_t)result)
  {
LABEL_16:
    uint64_t result = (void *)sub_19EBF7278();
    __break(1u);
    return result;
  }

  return memcpy(result, (const void *)(a3 + 32), 4 * v4);
}

void *sub_19E60BBB4(void *result, uint64_t a2, uint64_t a3)
{
  int64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return result;
  }
  int64_t v5 = a2 - (void)result;
  if (!result) {
    int64_t v5 = 0;
  }
  if (v5 < v4)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (!result) {
    return result;
  }
  if (a3 + 32 < (unint64_t)result + v4 && a3 + 32 + v4 > (unint64_t)result)
  {
LABEL_15:
    uint64_t result = (void *)sub_19EBF7278();
    __break(1u);
    return result;
  }

  return memcpy(result, (const void *)(a3 + 32), v4);
}

void *sub_19E60BC74(void *a1, uint64_t a2)
{
  return sub_19E60BAE4(a1, a2, **(void **)(v2 + 16));
}

uint64_t sub_19E60BC94(uint64_t a1, uint64_t a2)
{
  return sub_19E6C9BCC(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

void *sub_19E60BCB0(void *a1, uint64_t a2)
{
  return sub_19E60BBB4(a1, a2, **(void **)(v2 + 16));
}

uint64_t sub_19E60BCD0(uint64_t a1, uint64_t a2)
{
  return sub_19E60BC94(a1, a2);
}

uint64_t pointwiseMax(_:_:)@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  unint64_t v5 = *a1 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v7 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v7 = (void **)(v3 + 40);
      break;
  }
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  switch(v4 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v9 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v9 = (void **)(v4 + 40);
      break;
  }
  uint64_t v10 = *v9;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_19E6753E8(v8, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v5;
  if (!v11) {
    goto LABEL_30;
  }
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v13 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v13 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v14 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v13 = (unsigned __int8 *)(v3 + 48);
      uint64_t v14 = (unsigned __int8 *)(v3 + 49);
      break;
  }
  int v15 = *v14;
  unsigned int v16 = *v13;
  switch(v4 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v17 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v17 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v4 + 48);
      uint64_t v18 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v19 = *v18;
  __int16 v20 = *v17;
  if (v15) {
    int v21 = 256;
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = v21 | v16;
  if (v19) {
    __int16 v23 = 256;
  }
  else {
    __int16 v23 = 0;
  }
  unsigned int v24 = sub_19E636D20(v22, v23 | v20);
  char v25 = v24;
  int v26 = v24;
  unint64_t v49 = v3;
  int v27 = (v24 >> 8) & 1;
  __int16 v28 = v24 & 0x1FF;
  sub_19E6019D0(v24 & 0x1FF, v48);
  unint64_t v47 = v48[0];
  sub_19E602538(v11, &v49);
  swift_release();
  v48[0] = v4;
  sub_19E6019D0(v28, &v47);
  sub_19E602538(v11, v48);
  swift_release();
  unint64_t v29 = v49;
  unint64_t v30 = v48[0];
  LOBYTE(v49) = v25;
  BYTE1(v49) = v27;
  char v50 = &unk_1EF0C5BD8;
  char v51 = 1;
  char v54 = 9;
  if (!v26)
  {
    sub_19E5E2970((uint64_t)&v49, (uint64_t)v48);
    sub_19E5E1864();
    goto LABEL_36;
  }
  char v45 = v27;
  unint64_t v46 = v11;
  unint64_t v44 = a3;
  sub_19E607D84((uint64_t)&v49);
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v31 = (void *)v48[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v29;
  *(void *)(inited + 40) = v30;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)&v49);
  swift_bridgeObjectRelease();
  sub_19E601010(v31);
  uint64_t v33 = v52;
  uint64_t v34 = v53;
  __swift_project_boxed_opaque_existential_1(&v49, v52);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_19EC365B0;
  *(void *)(v35 + 32) = v29;
  *(void *)(v35 + 40) = v30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v36 = swift_initStackObject();
  *(void *)(v36 + 32) = v46;
  unint64_t v3 = v36 + 32;
  *(_OWORD *)(v36 + 16) = xmmword_19EC36240;
  *(unsigned char *)(v36 + 40) = v25;
  *(unsigned char *)(v36 + 41) = v45;
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 40);
  swift_retain();
  swift_retain();
  uint64_t v38 = v37(2, v35, v36, v33, v34);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v38 + 16))
  {
    __break(1u);
LABEL_30:
    switch(v12)
    {
      case 1:
      case 3:
        uint64_t v41 = (unint64_t *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2:
        uint64_t v41 = (unint64_t *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        uint64_t v41 = (unint64_t *)(v3 + 40);
        break;
    }
    unint64_t v42 = *v41;
    swift_bridgeObjectRetain();
    uint64_t v43 = swift_bridgeObjectRetain();
    unint64_t v49 = v42;
    char v50 = (void *)v43;
    char v54 = 1;
    sub_19E5E2970((uint64_t)&v49, (uint64_t)v48);
    sub_19E5E1864();
LABEL_36:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E60C270);
  }
  uint64_t v39 = *(void *)(v38 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *unint64_t v44 = v39;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v49);
}

uint64_t pointwiseMin(_:_:)@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  unint64_t v5 = *a1 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v7 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v7 = (void **)(v3 + 40);
      break;
  }
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  switch(v4 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v9 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v9 = (void **)(v4 + 40);
      break;
  }
  uint64_t v10 = *v9;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_19E6753E8(v8, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v5;
  if (!v11) {
    goto LABEL_30;
  }
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v13 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v13 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v14 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v13 = (unsigned __int8 *)(v3 + 48);
      uint64_t v14 = (unsigned __int8 *)(v3 + 49);
      break;
  }
  int v15 = *v14;
  unsigned int v16 = *v13;
  switch(v4 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v17 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v17 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v4 + 48);
      uint64_t v18 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v19 = *v18;
  __int16 v20 = *v17;
  if (v15) {
    int v21 = 256;
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = v21 | v16;
  if (v19) {
    __int16 v23 = 256;
  }
  else {
    __int16 v23 = 0;
  }
  unsigned int v24 = sub_19E636D20(v22, v23 | v20);
  char v25 = v24;
  int v26 = v24;
  unint64_t v49 = v3;
  int v27 = (v24 >> 8) & 1;
  __int16 v28 = v24 & 0x1FF;
  sub_19E6019D0(v24 & 0x1FF, v48);
  unint64_t v47 = v48[0];
  sub_19E602538(v11, &v49);
  swift_release();
  v48[0] = v4;
  sub_19E6019D0(v28, &v47);
  sub_19E602538(v11, v48);
  swift_release();
  unint64_t v29 = v49;
  unint64_t v30 = v48[0];
  LOBYTE(v49) = v25;
  BYTE1(v49) = v27;
  char v50 = &unk_1EF0C5C08;
  char v51 = 1;
  char v54 = 9;
  if (!v26)
  {
    sub_19E5E2970((uint64_t)&v49, (uint64_t)v48);
    sub_19E5E1864();
    goto LABEL_36;
  }
  char v45 = v27;
  unint64_t v46 = v11;
  unint64_t v44 = a3;
  sub_19E607D84((uint64_t)&v49);
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v31 = (void *)v48[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v29;
  *(void *)(inited + 40) = v30;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)&v49);
  swift_bridgeObjectRelease();
  sub_19E601010(v31);
  uint64_t v33 = v52;
  uint64_t v34 = v53;
  __swift_project_boxed_opaque_existential_1(&v49, v52);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_19EC365B0;
  *(void *)(v35 + 32) = v29;
  *(void *)(v35 + 40) = v30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v36 = swift_initStackObject();
  *(void *)(v36 + 32) = v46;
  unint64_t v3 = v36 + 32;
  *(_OWORD *)(v36 + 16) = xmmword_19EC36240;
  *(unsigned char *)(v36 + 40) = v25;
  *(unsigned char *)(v36 + 41) = v45;
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 40);
  swift_retain();
  swift_retain();
  uint64_t v38 = v37(3, v35, v36, v33, v34);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v38 + 16))
  {
    __break(1u);
LABEL_30:
    switch(v12)
    {
      case 1:
      case 3:
        uint64_t v41 = (unint64_t *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2:
        uint64_t v41 = (unint64_t *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        uint64_t v41 = (unint64_t *)(v3 + 40);
        break;
    }
    unint64_t v42 = *v41;
    swift_bridgeObjectRetain();
    uint64_t v43 = swift_bridgeObjectRetain();
    unint64_t v49 = v42;
    char v50 = (void *)v43;
    char v54 = 1;
    sub_19E5E2970((uint64_t)&v49, (uint64_t)v48);
    sub_19E5E1864();
LABEL_36:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E60C858);
  }
  uint64_t v39 = *(void *)(v38 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *unint64_t v44 = v39;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v49);
}

uint64_t static MLTensor.+ infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19E60E1E0(a1, a2, a3, a4, a5, (void (*)(uint64_t *))sub_19E60C8D0);
}

{
  return sub_19E60EAB8(a1, a2, a3, a4, a5, (void (*)(void *))sub_19E60C8D0);
}

uint64_t sub_19E60C8D0@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *v2;
  unint64_t v5 = *v2 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v7 = (void **)(v4 + 40);
      break;
  }
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v9 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v9 = (void **)(v3 + 40);
      break;
  }
  uint64_t v10 = *v9;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_19E6753E8(v8, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v5;
  if (!v11) {
    goto LABEL_30;
  }
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v13 = (unsigned __int8 *)(v4 + 48);
      uint64_t v14 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v15 = *v14;
  unsigned int v16 = *v13;
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v3 + 48);
      uint64_t v18 = (unsigned __int8 *)(v3 + 49);
      break;
  }
  int v19 = *v18;
  __int16 v20 = *v17;
  if (v15) {
    int v21 = 256;
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = v21 | v16;
  if (v19) {
    __int16 v23 = 256;
  }
  else {
    __int16 v23 = 0;
  }
  unsigned int v24 = sub_19E636D20(v22, v23 | v20);
  char v25 = v24;
  int v26 = v24;
  unint64_t v49 = v4;
  int v27 = (v24 >> 8) & 1;
  __int16 v28 = v24 & 0x1FF;
  sub_19E6019D0(v24 & 0x1FF, v48);
  unint64_t v47 = v48[0];
  sub_19E602538(v11, &v49);
  swift_release();
  v48[0] = v3;
  sub_19E6019D0(v28, &v47);
  sub_19E602538(v11, v48);
  swift_release();
  unint64_t v29 = v49;
  unint64_t v30 = v48[0];
  LOBYTE(v49) = v25;
  BYTE1(v49) = v27;
  char v50 = &unk_1EF0C9FF8;
  char v51 = 1;
  char v54 = 9;
  if (!v26)
  {
    sub_19E5E2970((uint64_t)&v49, (uint64_t)v48);
    sub_19E5E1864();
    goto LABEL_36;
  }
  char v45 = v27;
  unint64_t v46 = v11;
  unint64_t v44 = a2;
  sub_19E607D84((uint64_t)&v49);
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v31 = (void *)v48[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v29;
  *(void *)(inited + 40) = v30;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)&v49);
  swift_bridgeObjectRelease();
  sub_19E601010(v31);
  uint64_t v33 = v52;
  uint64_t v34 = v53;
  __swift_project_boxed_opaque_existential_1(&v49, v52);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_19EC365B0;
  *(void *)(v35 + 32) = v29;
  *(void *)(v35 + 40) = v30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v36 = swift_initStackObject();
  *(void *)(v36 + 32) = v46;
  unint64_t v4 = v36 + 32;
  *(_OWORD *)(v36 + 16) = xmmword_19EC36240;
  *(unsigned char *)(v36 + 40) = v25;
  *(unsigned char *)(v36 + 41) = v45;
  uint64_t v37 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 40);
  swift_retain();
  swift_retain();
  uint64_t v38 = v37(0, v35, v36, v33, v34);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v38 + 16))
  {
    __break(1u);
LABEL_30:
    switch(v12)
    {
      case 1:
      case 3:
        uint64_t v41 = (unint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2:
        uint64_t v41 = (unint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        uint64_t v41 = (unint64_t *)(v4 + 40);
        break;
    }
    unint64_t v42 = *v41;
    swift_bridgeObjectRetain();
    uint64_t v43 = swift_bridgeObjectRetain();
    unint64_t v49 = v42;
    char v50 = (void *)v43;
    char v54 = 1;
    sub_19E5E2970((uint64_t)&v49, (uint64_t)v48);
    sub_19E5E1864();
LABEL_36:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E60CE58);
  }
  uint64_t v39 = *(void *)(v38 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *unint64_t v44 = v39;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v49);
}

uint64_t static MLTensor.+ infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E60EDA4(a1, a2, (uint64_t (*)(void *))sub_19E60C8D0);
}

uint64_t static MLTensor.+= infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E60EDFC(a1, a2, (void (*)(uint64_t *__return_ptr, void *))sub_19E60C8D0);
}

uint64_t static MLTensor.- infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19E60E1E0(a1, a2, a3, a4, a5, (void (*)(uint64_t *))sub_19E60CF18);
}

{
  return sub_19E60EAB8(a1, a2, a3, a4, a5, (void (*)(void *))sub_19E60CF18);
}

uint64_t sub_19E60CF18@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *v2;
  unint64_t v5 = *v2 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v7 = (void **)(v4 + 40);
      break;
  }
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v9 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v9 = (void **)(v3 + 40);
      break;
  }
  uint64_t v10 = *v9;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_19E6753E8(v8, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v5;
  if (!v11) {
    goto LABEL_30;
  }
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v13 = (unsigned __int8 *)(v4 + 48);
      uint64_t v14 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v15 = *v14;
  unsigned int v16 = *v13;
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v3 + 48);
      uint64_t v18 = (unsigned __int8 *)(v3 + 49);
      break;
  }
  int v19 = *v18;
  __int16 v20 = *v17;
  if (v15) {
    int v21 = 256;
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = v21 | v16;
  if (v19) {
    __int16 v23 = 256;
  }
  else {
    __int16 v23 = 0;
  }
  unsigned int v24 = sub_19E636D20(v22, v23 | v20);
  char v25 = v24;
  int v26 = v24;
  unint64_t v48 = v4;
  int v27 = (v24 >> 8) & 1;
  __int16 v28 = v24 & 0x1FF;
  sub_19E6019D0(v24 & 0x1FF, v47);
  unint64_t v46 = v47[0];
  sub_19E602538(v11, &v48);
  swift_release();
  v47[0] = v3;
  sub_19E6019D0(v28, &v46);
  sub_19E602538(v11, v47);
  swift_release();
  unint64_t v29 = v48;
  unint64_t v30 = v47[0];
  LOBYTE(v4_Block_object_dispose(&STACK[0x278], 8) = v25;
  BYTE1(v4_Block_object_dispose(&STACK[0x278], 8) = v27;
  unint64_t v49 = &unk_1EF0C9AC0;
  char v50 = 1;
  char v53 = 9;
  if (!v26)
  {
    sub_19E5E2970((uint64_t)&v48, (uint64_t)v47);
    sub_19E5E1864();
    goto LABEL_36;
  }
  char v45 = v27;
  unint64_t v44 = a2;
  sub_19E607D84((uint64_t)&v48);
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v31 = (void *)v47[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v29;
  *(void *)(inited + 40) = v30;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)&v48);
  swift_bridgeObjectRelease();
  sub_19E601010(v31);
  uint64_t v33 = v51;
  uint64_t v34 = v52;
  __swift_project_boxed_opaque_existential_1(&v48, v51);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_19EC365B0;
  *(void *)(v35 + 32) = v29;
  *(void *)(v35 + 40) = v30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v36 = swift_initStackObject();
  *(void *)(v36 + 32) = v11;
  unint64_t v4 = v36 + 32;
  *(_OWORD *)(v36 + 16) = xmmword_19EC36240;
  *(unsigned char *)(v36 + 40) = v25;
  *(unsigned char *)(v36 + 41) = v45;
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 40);
  swift_retain();
  swift_retain();
  uint64_t v38 = v37(7, v35, v36, v33, v34);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v38 + 16))
  {
    __break(1u);
LABEL_30:
    switch(v12)
    {
      case 1:
      case 3:
        uint64_t v41 = (unint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2:
        uint64_t v41 = (unint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        uint64_t v41 = (unint64_t *)(v4 + 40);
        break;
    }
    unint64_t v42 = *v41;
    swift_bridgeObjectRetain();
    uint64_t v43 = swift_bridgeObjectRetain();
    unint64_t v48 = v42;
    unint64_t v49 = (void *)v43;
    char v53 = 1;
    sub_19E5E2970((uint64_t)&v48, (uint64_t)v47);
    sub_19E5E1864();
LABEL_36:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E60D498);
  }
  uint64_t v39 = *(void *)(v38 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *unint64_t v44 = v39;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v48);
}

uint64_t static MLTensor.- infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E60EDA4(a1, a2, (uint64_t (*)(void *))sub_19E60CF18);
}

uint64_t static MLTensor.-= infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E60EDFC(a1, a2, (void (*)(uint64_t *__return_ptr, void *))sub_19E60CF18);
}

uint64_t static MLTensor.* infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19E60E1E0(a1, a2, a3, a4, a5, (void (*)(uint64_t *))sub_19E60D558);
}

{
  return sub_19E60EAB8(a1, a2, a3, a4, a5, (void (*)(void *))sub_19E60D558);
}

uint64_t sub_19E60D558@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *v2;
  unint64_t v5 = *v2 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v7 = (void **)(v4 + 40);
      break;
  }
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v9 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v9 = (void **)(v3 + 40);
      break;
  }
  uint64_t v10 = *v9;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_19E6753E8(v8, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v5;
  if (!v11) {
    goto LABEL_30;
  }
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v13 = (unsigned __int8 *)(v4 + 48);
      uint64_t v14 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v15 = *v14;
  unsigned int v16 = *v13;
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v3 + 48);
      uint64_t v18 = (unsigned __int8 *)(v3 + 49);
      break;
  }
  int v19 = *v18;
  __int16 v20 = *v17;
  if (v15) {
    int v21 = 256;
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = v21 | v16;
  if (v19) {
    __int16 v23 = 256;
  }
  else {
    __int16 v23 = 0;
  }
  unsigned int v24 = sub_19E636D20(v22, v23 | v20);
  char v25 = v24;
  int v26 = v24;
  unint64_t v49 = v4;
  int v27 = (v24 >> 8) & 1;
  __int16 v28 = v24 & 0x1FF;
  sub_19E6019D0(v24 & 0x1FF, v48);
  unint64_t v47 = v48[0];
  sub_19E602538(v11, &v49);
  swift_release();
  v48[0] = v3;
  sub_19E6019D0(v28, &v47);
  sub_19E602538(v11, v48);
  swift_release();
  unint64_t v29 = v49;
  unint64_t v30 = v48[0];
  LOBYTE(v49) = v25;
  BYTE1(v49) = v27;
  char v50 = &unk_1EF0C9A90;
  char v51 = 1;
  char v54 = 9;
  if (!v26)
  {
    sub_19E5E2970((uint64_t)&v49, (uint64_t)v48);
    sub_19E5E1864();
    goto LABEL_36;
  }
  char v45 = v27;
  unint64_t v46 = v11;
  unint64_t v44 = a2;
  sub_19E607D84((uint64_t)&v49);
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v31 = (void *)v48[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v29;
  *(void *)(inited + 40) = v30;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)&v49);
  swift_bridgeObjectRelease();
  sub_19E601010(v31);
  uint64_t v33 = v52;
  uint64_t v34 = v53;
  __swift_project_boxed_opaque_existential_1(&v49, v52);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_19EC365B0;
  *(void *)(v35 + 32) = v29;
  *(void *)(v35 + 40) = v30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v36 = swift_initStackObject();
  *(void *)(v36 + 32) = v46;
  unint64_t v4 = v36 + 32;
  *(_OWORD *)(v36 + 16) = xmmword_19EC36240;
  *(unsigned char *)(v36 + 40) = v25;
  *(unsigned char *)(v36 + 41) = v45;
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 40);
  swift_retain();
  swift_retain();
  uint64_t v38 = v37(5, v35, v36, v33, v34);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v38 + 16))
  {
    __break(1u);
LABEL_30:
    switch(v12)
    {
      case 1:
      case 3:
        uint64_t v41 = (unint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2:
        uint64_t v41 = (unint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        uint64_t v41 = (unint64_t *)(v4 + 40);
        break;
    }
    unint64_t v42 = *v41;
    swift_bridgeObjectRetain();
    uint64_t v43 = swift_bridgeObjectRetain();
    unint64_t v49 = v42;
    char v50 = (void *)v43;
    char v54 = 1;
    sub_19E5E2970((uint64_t)&v49, (uint64_t)v48);
    sub_19E5E1864();
LABEL_36:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E60DAE0);
  }
  uint64_t v39 = *(void *)(v38 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *unint64_t v44 = v39;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v49);
}

uint64_t static MLTensor.* infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E60EDA4(a1, a2, (uint64_t (*)(void *))sub_19E60D558);
}

uint64_t static MLTensor.*= infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E60EDFC(a1, a2, (void (*)(uint64_t *__return_ptr, void *))sub_19E60D558);
}

uint64_t static MLTensor./ infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19E60E1E0(a1, a2, a3, a4, a5, (void (*)(uint64_t *))sub_19E60DBA0);
}

{
  return sub_19E60EAB8(a1, a2, a3, a4, a5, (void (*)(void *))sub_19E60DBA0);
}

uint64_t sub_19E60DBA0@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *v2;
  unint64_t v5 = *v2 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v7 = (void **)(v4 + 40);
      break;
  }
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v9 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v9 = (void **)(v3 + 40);
      break;
  }
  uint64_t v10 = *v9;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_19E6753E8(v8, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v5;
  if (!v11) {
    goto LABEL_30;
  }
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v13 = (unsigned __int8 *)(v4 + 48);
      uint64_t v14 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v15 = *v14;
  unsigned int v16 = *v13;
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v3 + 48);
      uint64_t v18 = (unsigned __int8 *)(v3 + 49);
      break;
  }
  int v19 = *v18;
  __int16 v20 = *v17;
  if (v15) {
    int v21 = 256;
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = v21 | v16;
  if (v19) {
    __int16 v23 = 256;
  }
  else {
    __int16 v23 = 0;
  }
  unsigned int v24 = sub_19E636D20(v22, v23 | v20);
  char v25 = v24;
  int v26 = v24;
  unint64_t v48 = v4;
  int v27 = (v24 >> 8) & 1;
  __int16 v28 = v24 & 0x1FF;
  sub_19E6019D0(v24 & 0x1FF, v47);
  unint64_t v46 = v47[0];
  sub_19E602538(v11, &v48);
  swift_release();
  v47[0] = v3;
  sub_19E6019D0(v28, &v46);
  sub_19E602538(v11, v47);
  swift_release();
  unint64_t v29 = v48;
  unint64_t v30 = v47[0];
  LOBYTE(v4_Block_object_dispose(&STACK[0x278], 8) = v25;
  BYTE1(v4_Block_object_dispose(&STACK[0x278], 8) = v27;
  unint64_t v49 = &unk_1EF0CA338;
  char v50 = 1;
  char v53 = 9;
  if (!v26)
  {
    sub_19E5E2970((uint64_t)&v48, (uint64_t)v47);
    sub_19E5E1864();
    goto LABEL_36;
  }
  char v45 = v27;
  unint64_t v44 = a2;
  sub_19E607D84((uint64_t)&v48);
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v31 = (void *)v47[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v29;
  *(void *)(inited + 40) = v30;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)&v48);
  swift_bridgeObjectRelease();
  sub_19E601010(v31);
  uint64_t v33 = v51;
  uint64_t v34 = v52;
  __swift_project_boxed_opaque_existential_1(&v48, v51);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_19EC365B0;
  *(void *)(v35 + 32) = v29;
  *(void *)(v35 + 40) = v30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v36 = swift_initStackObject();
  *(void *)(v36 + 32) = v11;
  unint64_t v4 = v36 + 32;
  *(_OWORD *)(v36 + 16) = xmmword_19EC36240;
  *(unsigned char *)(v36 + 40) = v25;
  *(unsigned char *)(v36 + 41) = v45;
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 40);
  swift_retain();
  swift_retain();
  uint64_t v38 = v37(1, v35, v36, v33, v34);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v38 + 16))
  {
    __break(1u);
LABEL_30:
    switch(v12)
    {
      case 1:
      case 3:
        uint64_t v41 = (unint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2:
        uint64_t v41 = (unint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        uint64_t v41 = (unint64_t *)(v4 + 40);
        break;
    }
    unint64_t v42 = *v41;
    swift_bridgeObjectRetain();
    uint64_t v43 = swift_bridgeObjectRetain();
    unint64_t v48 = v42;
    unint64_t v49 = (void *)v43;
    char v53 = 1;
    sub_19E5E2970((uint64_t)&v48, (uint64_t)v47);
    sub_19E5E1864();
LABEL_36:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E60E120);
  }
  uint64_t v39 = *(void *)(v38 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *unint64_t v44 = v39;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v48);
}

uint64_t static MLTensor./ infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E60EDA4(a1, a2, (uint64_t (*)(void *))sub_19E60DBA0);
}

uint64_t static MLTensor./= infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E60EDFC(a1, a2, (void (*)(uint64_t *__return_ptr, void *))sub_19E60DBA0);
}

uint64_t static MLTensor.% infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19E60E1E0(a1, a2, a3, a4, a5, (void (*)(uint64_t *))sub_19E60E4B8);
}

{
  return sub_19E60EAB8(a1, a2, a3, a4, a5, (void (*)(void *))sub_19E60E4B8);
}

uint64_t sub_19E60E1E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t *))
{
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = (unint64_t *)MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v30 = *v11;
  unint64_t v14 = v30;
  __int16 v16 = sub_19E6C1448(v15, 1);
  switch(v14 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v17 = (unsigned __int8 *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (unsigned char *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v17 = (unsigned __int8 *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (unsigned char *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v14 + 48);
      uint64_t v18 = (unsigned char *)(v14 + 49);
      break;
  }
  int v19 = *v17;
  if (v19 == v16)
  {
LABEL_10:
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, a3);
    nullsub_1(a3, a4, v25);
    MLTensor.init<A>(_:scalarType:)((uint64_t)v13, a3, &v29);
  }
  else
  {
    uint64_t v20 = v16 & 0x1FF;
    if (*v18) {
      __int16 v21 = 256;
    }
    else {
      __int16 v21 = 0;
    }
    char v22 = sub_19E636D20(v20, v21 | (unsigned __int16)v19);
    __int16 v23 = &protocol witness table for Bool;
    uint64_t v24 = MEMORY[0x1E4FBB390];
    switch(v22)
    {
      case 1:
        __int16 v23 = &protocol witness table for UInt8;
        uint64_t v24 = MEMORY[0x1E4FBC358];
        break;
      case 2:
        __int16 v23 = &protocol witness table for UInt16;
        uint64_t v24 = MEMORY[0x1E4FBC450];
        break;
      case 3:
        __int16 v23 = &protocol witness table for UInt32;
        uint64_t v24 = MEMORY[0x1E4FBC4C0];
        break;
      case 4:
      case 8:
      case 11:
        goto LABEL_10;
      case 5:
        __int16 v23 = &protocol witness table for Int8;
        uint64_t v24 = MEMORY[0x1E4FBC098];
        break;
      case 6:
        __int16 v23 = &protocol witness table for Int16;
        uint64_t v24 = MEMORY[0x1E4FBC0F8];
        break;
      case 7:
        __int16 v23 = &protocol witness table for Int32;
        uint64_t v24 = MEMORY[0x1E4FBC150];
        break;
      case 9:
        __int16 v23 = &protocol witness table for Float16;
        uint64_t v24 = MEMORY[0x1E4FBC5E0];
        break;
      case 10:
        __int16 v23 = &protocol witness table for Float;
        uint64_t v24 = MEMORY[0x1E4FBB470];
        break;
      default:
        break;
    }
    sub_19E636C40(v24, a3, v24, (uint64_t)v23, &v29);
  }
  uint64_t v28 = v29;
  a6(&v28);
  return swift_release();
}

uint64_t sub_19E60E4B8@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *v2;
  unint64_t v5 = *v2 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v7 = (void **)(v4 + 40);
      break;
  }
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v9 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v9 = (void **)(v3 + 40);
      break;
  }
  uint64_t v10 = *v9;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_19E6753E8(v8, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v5;
  if (!v11) {
    goto LABEL_30;
  }
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      unint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      unint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v13 = (unsigned __int8 *)(v4 + 48);
      unint64_t v14 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v15 = *v14;
  unsigned int v16 = *v13;
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v3 + 48);
      uint64_t v18 = (unsigned __int8 *)(v3 + 49);
      break;
  }
  int v19 = *v18;
  __int16 v20 = *v17;
  if (v15) {
    int v21 = 256;
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = v21 | v16;
  if (v19) {
    __int16 v23 = 256;
  }
  else {
    __int16 v23 = 0;
  }
  unsigned int v24 = sub_19E636D20(v22, v23 | v20);
  char v25 = v24;
  int v26 = v24;
  unint64_t v49 = v4;
  int v27 = (v24 >> 8) & 1;
  __int16 v28 = v24 & 0x1FF;
  sub_19E6019D0(v24 & 0x1FF, v48);
  unint64_t v47 = v48[0];
  sub_19E602538(v11, &v49);
  swift_release();
  v48[0] = v3;
  sub_19E6019D0(v28, &v47);
  sub_19E602538(v11, v48);
  swift_release();
  unint64_t v29 = v49;
  unint64_t v30 = v48[0];
  LOBYTE(v49) = v25;
  BYTE1(v49) = v27;
  char v50 = &unk_1EF0CA238;
  char v51 = 1;
  char v54 = 9;
  if (!v26)
  {
    sub_19E5E2970((uint64_t)&v49, (uint64_t)v48);
    sub_19E5E1864();
    goto LABEL_36;
  }
  char v45 = v27;
  unint64_t v46 = v11;
  unint64_t v44 = a2;
  sub_19E607D84((uint64_t)&v49);
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v31 = (void *)v48[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v29;
  *(void *)(inited + 40) = v30;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)&v49);
  swift_bridgeObjectRelease();
  sub_19E601010(v31);
  uint64_t v33 = v52;
  uint64_t v34 = v53;
  __swift_project_boxed_opaque_existential_1(&v49, v52);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_19EC365B0;
  *(void *)(v35 + 32) = v29;
  *(void *)(v35 + 40) = v30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v36 = swift_initStackObject();
  *(void *)(v36 + 32) = v46;
  unint64_t v4 = v36 + 32;
  *(_OWORD *)(v36 + 16) = xmmword_19EC36240;
  *(unsigned char *)(v36 + 40) = v25;
  *(unsigned char *)(v36 + 41) = v45;
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 40);
  swift_retain();
  swift_retain();
  uint64_t v38 = v37(4, v35, v36, v33, v34);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v38 + 16))
  {
    __break(1u);
LABEL_30:
    switch(v12)
    {
      case 1:
      case 3:
        uint64_t v41 = (unint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2:
        uint64_t v41 = (unint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        uint64_t v41 = (unint64_t *)(v4 + 40);
        break;
    }
    unint64_t v42 = *v41;
    swift_bridgeObjectRetain();
    uint64_t v43 = swift_bridgeObjectRetain();
    unint64_t v49 = v42;
    char v50 = (void *)v43;
    char v54 = 1;
    sub_19E5E2970((uint64_t)&v49, (uint64_t)v48);
    sub_19E5E1864();
LABEL_36:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E60EA40);
  }
  uint64_t v39 = *(void *)(v38 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *unint64_t v44 = v39;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v49);
}

uint64_t sub_19E60EAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *))
{
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v28[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = *v13;
  __int16 v16 = sub_19E6C1448(v15, 1);
  switch(v14 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v17 = (unsigned __int8 *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (unsigned char *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v17 = (unsigned __int8 *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (unsigned char *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v14 + 48);
      uint64_t v18 = (unsigned char *)(v14 + 49);
      break;
  }
  int v19 = *v17;
  if (v19 == v16)
  {
LABEL_10:
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
    nullsub_1(a3, a4, v25);
    MLTensor.init<A>(_:scalarType:)((uint64_t)v12, a3, &v29);
  }
  else
  {
    uint64_t v20 = v16 & 0x1FF;
    if (*v18) {
      __int16 v21 = 256;
    }
    else {
      __int16 v21 = 0;
    }
    char v22 = sub_19E636D20(v20, v21 | (unsigned __int16)v19);
    __int16 v23 = &protocol witness table for Bool;
    uint64_t v24 = MEMORY[0x1E4FBB390];
    switch(v22)
    {
      case 1:
        __int16 v23 = &protocol witness table for UInt8;
        uint64_t v24 = MEMORY[0x1E4FBC358];
        break;
      case 2:
        __int16 v23 = &protocol witness table for UInt16;
        uint64_t v24 = MEMORY[0x1E4FBC450];
        break;
      case 3:
        __int16 v23 = &protocol witness table for UInt32;
        uint64_t v24 = MEMORY[0x1E4FBC4C0];
        break;
      case 4:
      case 8:
      case 11:
        goto LABEL_10;
      case 5:
        __int16 v23 = &protocol witness table for Int8;
        uint64_t v24 = MEMORY[0x1E4FBC098];
        break;
      case 6:
        __int16 v23 = &protocol witness table for Int16;
        uint64_t v24 = MEMORY[0x1E4FBC0F8];
        break;
      case 7:
        __int16 v23 = &protocol witness table for Int32;
        uint64_t v24 = MEMORY[0x1E4FBC150];
        break;
      case 9:
        __int16 v23 = &protocol witness table for Float16;
        uint64_t v24 = MEMORY[0x1E4FBC5E0];
        break;
      case 10:
        __int16 v23 = &protocol witness table for Float;
        uint64_t v24 = MEMORY[0x1E4FBB470];
        break;
      default:
        break;
    }
    sub_19E636C40(v24, a3, v24, (uint64_t)v23, &v29);
  }
  v28[0] = v14;
  v28[1] = v29;
  a6(v28);
  return swift_release();
}

uint64_t static MLTensor.% infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E60EDA4(a1, a2, (uint64_t (*)(void *))sub_19E60E4B8);
}

uint64_t sub_19E60EDA4(uint64_t *a1, void *a2, uint64_t (*a3)(void *))
{
  uint64_t v3 = *a1;
  v5[0] = *a2;
  v5[1] = v3;
  return a3(v5);
}

uint64_t static MLTensor.%= infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E60EDFC(a1, a2, (void (*)(uint64_t *__return_ptr, void *))sub_19E60E4B8);
}

uint64_t sub_19E60EDFC(uint64_t *a1, void *a2, void (*a3)(uint64_t *__return_ptr, void *))
{
  uint64_t v4 = *a1;
  v6[0] = *a2;
  v6[1] = v4;
  a3(&v7, v6);
  uint64_t result = swift_release();
  *a1 = v7;
  return result;
}

uint64_t MLTensor.pow<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *v4;
  v27[1] = v12;
  __int16 v14 = sub_19E6C1448(v13, 1);
  switch(v12 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v15 = (unsigned __int8 *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      __int16 v16 = (unsigned char *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v15 = (unsigned __int8 *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      __int16 v16 = (unsigned char *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v15 = (unsigned __int8 *)(v12 + 48);
      __int16 v16 = (unsigned char *)(v12 + 49);
      break;
  }
  int v17 = *v15;
  if (v17 == v14)
  {
LABEL_10:
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
    nullsub_1(a2, a3, v23);
    MLTensor.init<A>(_:scalarType:)((uint64_t)v11, a2, v27);
  }
  else
  {
    uint64_t v18 = v14 & 0x1FF;
    if (*v16) {
      __int16 v19 = 256;
    }
    else {
      __int16 v19 = 0;
    }
    char v20 = sub_19E636D20(v18, v19 | (unsigned __int16)v17);
    __int16 v21 = &protocol witness table for Bool;
    uint64_t v22 = MEMORY[0x1E4FBB390];
    switch(v20)
    {
      case 1:
        __int16 v21 = &protocol witness table for UInt8;
        uint64_t v22 = MEMORY[0x1E4FBC358];
        break;
      case 2:
        __int16 v21 = &protocol witness table for UInt16;
        uint64_t v22 = MEMORY[0x1E4FBC450];
        break;
      case 3:
        __int16 v21 = &protocol witness table for UInt32;
        uint64_t v22 = MEMORY[0x1E4FBC4C0];
        break;
      case 4:
      case 8:
      case 11:
        goto LABEL_10;
      case 5:
        __int16 v21 = &protocol witness table for Int8;
        uint64_t v22 = MEMORY[0x1E4FBC098];
        break;
      case 6:
        __int16 v21 = &protocol witness table for Int16;
        uint64_t v22 = MEMORY[0x1E4FBC0F8];
        break;
      case 7:
        __int16 v21 = &protocol witness table for Int32;
        uint64_t v22 = MEMORY[0x1E4FBC150];
        break;
      case 9:
        __int16 v21 = &protocol witness table for Float16;
        uint64_t v22 = MEMORY[0x1E4FBC5E0];
        break;
      case 10:
        __int16 v21 = &protocol witness table for Float;
        uint64_t v22 = MEMORY[0x1E4FBB470];
        break;
      default:
        break;
    }
    sub_19E636C40(v22, a2, v22, (uint64_t)v21, v27);
  }
  unint64_t v26 = v27[0];
  MLTensor.pow(_:)(&v26, a4);
  return swift_release();
}

uint64_t MLTensor.pow(_:)@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *v2;
  unint64_t v5 = *v2 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v7 = (void **)(v4 + 40);
      break;
  }
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v9 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v9 = (void **)(v3 + 40);
      break;
  }
  uint64_t v10 = *v9;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_19E6753E8(v8, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v5;
  if (!v11) {
    goto LABEL_30;
  }
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      __int16 v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      __int16 v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v13 = (unsigned __int8 *)(v4 + 48);
      __int16 v14 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v15 = *v14;
  unsigned int v16 = *v13;
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      int v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      int v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      int v17 = (unsigned __int8 *)(v3 + 48);
      uint64_t v18 = (unsigned __int8 *)(v3 + 49);
      break;
  }
  int v19 = *v18;
  __int16 v20 = *v17;
  if (v15) {
    int v21 = 256;
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = v21 | v16;
  if (v19) {
    __int16 v23 = 256;
  }
  else {
    __int16 v23 = 0;
  }
  unsigned int v24 = sub_19E636D20(v22, v23 | v20);
  char v25 = v24;
  int v26 = v24;
  unint64_t v49 = v4;
  int v27 = (v24 >> 8) & 1;
  __int16 v28 = v24 & 0x1FF;
  sub_19E6019D0(v24 & 0x1FF, v48);
  unint64_t v47 = v48[0];
  sub_19E602538(v11, &v49);
  swift_release();
  v48[0] = v3;
  sub_19E6019D0(v28, &v47);
  sub_19E602538(v11, v48);
  swift_release();
  unint64_t v29 = v49;
  unint64_t v30 = v48[0];
  LOBYTE(v49) = v25;
  BYTE1(v49) = v27;
  char v50 = &unk_1EF0C9C70;
  char v51 = 1;
  char v54 = 9;
  if (!v26)
  {
    sub_19E5E2970((uint64_t)&v49, (uint64_t)v48);
    sub_19E5E1864();
    goto LABEL_36;
  }
  char v45 = v27;
  unint64_t v46 = v11;
  unint64_t v44 = a2;
  sub_19E607D84((uint64_t)&v49);
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v31 = (void *)v48[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v29;
  *(void *)(inited + 40) = v30;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)&v49);
  swift_bridgeObjectRelease();
  sub_19E601010(v31);
  uint64_t v33 = v52;
  uint64_t v34 = v53;
  __swift_project_boxed_opaque_existential_1(&v49, v52);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_19EC365B0;
  *(void *)(v35 + 32) = v29;
  *(void *)(v35 + 40) = v30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v36 = swift_initStackObject();
  *(void *)(v36 + 32) = v46;
  unint64_t v4 = v36 + 32;
  *(_OWORD *)(v36 + 16) = xmmword_19EC36240;
  *(unsigned char *)(v36 + 40) = v25;
  *(unsigned char *)(v36 + 41) = v45;
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 40);
  swift_retain();
  swift_retain();
  uint64_t v38 = v37(6, v35, v36, v33, v34);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v38 + 16))
  {
    __break(1u);
LABEL_30:
    switch(v12)
    {
      case 1:
      case 3:
        uint64_t v41 = (unint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2:
        uint64_t v41 = (unint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        uint64_t v41 = (unint64_t *)(v4 + 40);
        break;
    }
    unint64_t v42 = *v41;
    swift_bridgeObjectRetain();
    uint64_t v43 = swift_bridgeObjectRetain();
    unint64_t v49 = v42;
    char v50 = (void *)v43;
    char v54 = 1;
    sub_19E5E2970((uint64_t)&v49, (uint64_t)v48);
    sub_19E5E1864();
LABEL_36:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E60F6BCLL);
  }
  uint64_t v39 = *(void *)(v38 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *unint64_t v44 = v39;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v49);
}

uint64_t sub_19E60F71C(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_19EBF71E8();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t result = sub_19EBF6968();
  *(void *)(result + 16) = a2;
  unint64_t v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v7 = vdupq_n_s64(a1);
  uint64_t v8 = (int64x2_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    int64x2_t *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_19E60F808(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = sub_19EBF71E8();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE70);
      unint64_t v4 = (void *)sub_19EBF6968();
      unint64_t v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        uint64_t v6 = a2 - 2;
        if (v6)
        {
          int64x2_t v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x1E4FBC860];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_19E60F8FC(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if ((a3 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_19EBF71E8();
    __break(1u);
    return result;
  }
  if (!a3) {
    return MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2F0);
  uint64_t result = sub_19EBF6968();
  *(void *)(result + 16) = a3;
  int64x2_t v7 = (unint64_t *)(result + 32);
  if (a3 < 4)
  {
    unint64_t v8 = 0;
LABEL_9:
    unint64_t v14 = a3 - v8;
    do
    {
      *int64x2_t v7 = a1;
      v7[1] = a2;
      v7 += 2;
      --v14;
    }
    while (v14);
    return result;
  }
  unint64_t v8 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  v7 += 2 * (a3 & 0xFFFFFFFFFFFFFFFCLL);
  int64x2_t v9 = vdupq_n_s64(a1);
  int64x2_t v10 = vdupq_n_s64(a2);
  uint64_t v11 = (double *)(result + 64);
  unint64_t v12 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t v13 = v11 - 4;
    vst2q_f64(v13, *(float64x2x2_t *)v9.i8);
    vst2q_f64(v11, *(float64x2x2_t *)v9.i8);
    v11 += 8;
    v12 -= 4;
  }
  while (v12);
  if (v8 != a3) {
    goto LABEL_9;
  }
  return result;
}

uint64_t MLTensor.tiled(multiples:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v6 = a1;
  unint64_t v8 = *v2;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_8;
  }
  if (*(uint64_t *)(a1 + 32) < 1)
  {
LABEL_39:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E60FEC0);
  }
  if (v9 == 1)
  {
LABEL_8:
    switch(v8 >> 62)
    {
      case 1uLL:
      case 3uLL:
        uint64_t v12 = (v8 & 0x3FFFFFFFFFFFFFFFLL) + 24;
        break;
      case 2uLL:
        uint64_t v12 = (v8 & 0x3FFFFFFFFFFFFFFFLL) + 16;
        break;
      default:
        uint64_t v12 = v8 + 40;
        break;
    }
    uint64_t v13 = *(void *)(*(void *)v12 + 16);
    uint64_t v14 = v13 - v9;
    if (v13 - v9 < 1) {
      uint64_t v15 = MEMORY[0x1E4FBC860];
    }
    else {
      uint64_t v15 = sub_19E60F71C(1uLL, v13 - v9);
    }
    v37[0] = v15;
    uint64_t v16 = swift_bridgeObjectRetain();
    sub_19E612A98(v16);
    uint64_t v3 = v37[0];
    uint64_t v33 = a2;
    if (v14 < 0)
    {
      uint64_t v18 = swift_bridgeObjectRetain();
      uint64_t v19 = *(void *)(v18 + 16);
      if (__OFADD__(v19, -v14)) {
        goto LABEL_36;
      }
      v37[0] = v18;
      uint64_t v20 = -v14;
      if (__OFSUB__(v19 - v14, v19))
      {
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      if (v20 < 0)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      sub_19E6128F4(0, 0, v20, 1);
      int v17 = (void *)v37[0];
    }
    else
    {
      switch(v8 >> 62)
      {
        case 1uLL:
        case 3uLL:
          int v17 = *(void **)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          break;
        case 2uLL:
          int v17 = *(void **)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          break;
        default:
          int v17 = *(void **)(v8 + 40);
          break;
      }
      swift_bridgeObjectRetain();
    }
    v34[0] = v8;
    MLTensor.reshaped(to:)(v17, v37);
    unint64_t v4 = v37[0];
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_19E5EBFD0((uint64_t)v17, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    switch(v4 >> 62)
    {
      case 1uLL:
      case 3uLL:
        int v21 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        uint64_t v22 = (unsigned char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
        break;
      case 2uLL:
        int v21 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        uint64_t v22 = (unsigned char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
        break;
      default:
        int v21 = (char *)(v4 + 48);
        uint64_t v22 = (unsigned char *)(v4 + 49);
        break;
    }
    LOBYTE(a2) = *v22;
    char v6 = *v21;
    if (qword_1E945BB70 == -1) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v10 = 5;
    while (1)
    {
      uint64_t v11 = v10 - 3;
      if (__OFADD__(v10 - 4, 1)) {
        break;
      }
      if (*(uint64_t *)(a1 + 8 * v10) < 1) {
        goto LABEL_39;
      }
      ++v10;
      if (v11 == v9) {
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  swift_once();
LABEL_31:
  sub_19EBF75A8();
  __int16 v23 = (void *)v37[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v8;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v34);
  swift_bridgeObjectRelease();
  sub_19E601010(v23);
  uint64_t v25 = v35;
  uint64_t v26 = v36;
  __swift_project_boxed_opaque_existential_1(v34, v35);
  v37[0] = v3;
  v37[1] = 1701603700;
  v37[2] = 0xE400000000000000;
  v37[3] = 0xD000000000000010;
  v37[4] = 0x800000019EC09520;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_19EC36240;
  *(void *)(v27 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v28 = swift_initStackObject();
  *(_OWORD *)(v28 + 16) = xmmword_19EC36240;
  *(void *)(v28 + 32) = v5;
  *(unsigned char *)(v28 + 40) = v6;
  *(unsigned char *)(v28 + 41) = (_BYTE)a2;
  unint64_t v29 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 160);
  swift_retain();
  uint64_t v30 = v29(v37, v27, v28, v25, v26);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v30 + 16))
  {
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v31 = *(void *)(v30 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v33 = v31;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
}

uint64_t MLTensor.bandPart(lowerBandCount:upperBandCount:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *v3;
  unint64_t v5 = (unint64_t)*v3 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v6 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v6 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v6 = v4 + 40;
      break;
  }
  unint64_t v7 = *(void *)(*(void *)v6 + 16);
  if (v7 <= 1)
  {
LABEL_15:
    uint64_t v32 = (void *)v7;
    long long v33 = xmmword_19EC366E0;
    LOBYTE(v34) = 2;
    char v37 = 4;
    sub_19E5E2970((uint64_t)&v32, (uint64_t)v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E610244);
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v9 = v32;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v4;
  uint64_t v11 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v29);
  swift_bridgeObjectRelease();
  sub_19E601010(v9);
  uint64_t v12 = v30;
  uint64_t v13 = v31;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_19EC36240;
  *(void *)(v14 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_19EC36240;
  uint64_t v16 = v15;
  switch((int)v5)
  {
    case 1:
    case 3:
      int v17 = (uint64_t *)(v11 + 24);
      uint64_t v18 = (char *)(v11 + 32);
      uint64_t v19 = (char *)(v11 + 33);
      break;
    case 2:
      int v17 = (uint64_t *)(v11 + 16);
      uint64_t v18 = (char *)(v11 + 24);
      uint64_t v19 = (char *)(v11 + 25);
      break;
    default:
      int v17 = (uint64_t *)(v4 + 40);
      uint64_t v18 = (char *)(v4 + 48);
      uint64_t v19 = (char *)(v4 + 49);
      break;
  }
  char v20 = *v19;
  char v21 = *v18;
  uint64_t v22 = *v17;
  uint64_t v32 = a1;
  *(void *)&long long v33 = a2;
  *((void *)&v33 + 1) = 0x7261705F646E6162;
  unint64_t v34 = 0xE900000000000074;
  unint64_t v35 = 0xD000000000000010;
  unint64_t v36 = 0x800000019EC09520;
  *(void *)(v15 + 32) = v22;
  *(unsigned char *)(v15 + 40) = v21;
  *(unsigned char *)(v15 + 41) = v20;
  __int16 v23 = *(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 168);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v24 = v23(&v32, v14, v16, v12, v13);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v24 + 16))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  *a3 = v25;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
}

uint64_t MLTensor.cumulativeProduct(alongAxis:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  unint64_t v5 = (unint64_t)*v2 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v7 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v7 = v4 + 40;
      break;
  }
  if (*(void *)(*(void *)v7 + 16))
  {
    uint64_t v8 = v5;
    uint64_t v9 = v5;
    switch((int)v5)
    {
      case 0:
        uint64_t v10 = (unsigned char *)(v4 + 48);
        break;
      case 1:
      case 3:
        uint64_t v10 = (unsigned char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        break;
      case 2:
        uint64_t v10 = (unsigned char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      default:
LABEL_55:
        JUMPOUT(0);
    }
    if (*v10)
    {
      switch(v9)
      {
        case 0:
          uint64_t v12 = v4 + 40;
          goto LABEL_18;
        case 1:
        case 3:
          uint64_t v12 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
          goto LABEL_18;
        case 2:
          uint64_t v12 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
LABEL_18:
          uint64_t v13 = *(void *)(*(void *)v12 + 16);
          if (-v13 > a1 || v13 <= a1)
          {
            sub_19EBF6FE8();
            swift_bridgeObjectRelease();
            v40[0] = 0xD000000000000020;
            v40[1] = 0x800000019EC09540;
            switch(v8)
            {
              case 1:
              case 3:
                uint64_t v35 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
                break;
              case 2:
                uint64_t v35 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
                break;
              default:
                uint64_t v35 = v4 + 40;
                break;
            }
            uint64_t v39 = *(void **)(*(void *)v35 + 16);
            sub_19EBF7318();
            sub_19EBF67D8();
            swift_bridgeObjectRelease();
            sub_19EBF67D8();
            switch(v8)
            {
              case 0:
                uint64_t v36 = v4 + 40;
                goto LABEL_53;
              case 1:
              case 3:
                uint64_t v36 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
                goto LABEL_53;
              case 2:
                uint64_t v36 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
LABEL_53:
                uint64_t v39 = *(void **)(*(void *)v36 + 16);
                sub_19EBF7318();
                sub_19EBF67D8();
                swift_bridgeObjectRelease();
                sub_19EBF67D8();
                goto LABEL_54;
              default:
                goto LABEL_55;
            }
          }
          switch(v8)
          {
            case 1:
            case 3:
              uint64_t v15 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
              break;
            case 2:
              uint64_t v15 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
              break;
            default:
              uint64_t v15 = v4 + 40;
              break;
          }
          uint64_t v16 = *(void *)(*(void *)v15 + 16);
          v40[0] = a1;
          v40[1] = v16;
          char v43 = 6;
          if (-v16 > a1 || v16 <= a1)
          {
            sub_19E5E2970((uint64_t)v40, (uint64_t)&v39);
            sub_19E5E1864();
LABEL_54:
            sub_19EBF71F8();
            __break(1u);
            JUMPOUT(0x19E610918);
          }
          char v37 = a2;
          sub_19E607D84((uint64_t)v40);
          uint64_t v38 = (v16 & (a1 >> 63)) + a1;
          if (qword_1E945BB70 != -1) {
            swift_once();
          }
          sub_19EBF75A8();
          uint64_t v18 = v39;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_19EC36240;
          *(void *)(inited + 32) = v4;
          uint64_t v20 = v4 & 0x3FFFFFFFFFFFFFFFLL;
          swift_retain();
          sub_19E634690(inited, (uint64_t)v40);
          swift_bridgeObjectRelease();
          sub_19E601010(v18);
          uint64_t v21 = v41;
          uint64_t v22 = v42;
          __swift_project_boxed_opaque_existential_1(v40, v41);
          uint64_t v23 = swift_allocObject();
          *(_OWORD *)(v23 + 16) = xmmword_19EC36240;
          *(void *)(v23 + 32) = v4;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
          uint64_t v24 = swift_initStackObject();
          *(_OWORD *)(v24 + 16) = xmmword_19EC36240;
          uint64_t v25 = v24;
          switch(v8)
          {
            case 1:
            case 3:
              uint64_t v26 = (uint64_t *)(v20 + 24);
              uint64_t v27 = (char *)(v20 + 32);
              uint64_t v28 = (char *)(v20 + 33);
              break;
            case 2:
              uint64_t v26 = (uint64_t *)(v20 + 16);
              uint64_t v27 = (char *)(v20 + 24);
              uint64_t v28 = (char *)(v20 + 25);
              break;
            default:
              uint64_t v26 = (uint64_t *)(v4 + 40);
              uint64_t v27 = (char *)(v4 + 48);
              uint64_t v28 = (char *)(v4 + 49);
              break;
          }
          char v29 = *v28;
          char v30 = *v27;
          uint64_t v8 = *v26;
          *(void *)(v24 + 32) = *v26;
          *(unsigned char *)(v24 + 40) = v30;
          *(unsigned char *)(v24 + 41) = v29;
          uint64_t v4 = v22 + 176;
          uint64_t v31 = *(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 176);
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v32 = v31(0xD000000000000010, 0x800000019EC09520, 1, v38, v23, v25, v21, v22);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_bridgeObjectRelease();
          if (*(void *)(v32 + 16))
          {
            uint64_t v33 = *(void *)(v32 + 32);
            swift_retain();
            swift_bridgeObjectRelease();
            *char v37 = v33;
            return __swift_destroy_boxed_opaque_existential_0((uint64_t)v40);
          }
          __break(1u);
          break;
        default:
          goto LABEL_55;
      }
    }
    v40[0] = 0;
    v40[1] = 0xE000000000000000;
    sub_19EBF6FE8();
    swift_bridgeObjectRelease();
    HIWORD(v40[1]) = -4864;
    switch(v8)
    {
      case 0:
        unint64_t v34 = (char *)(v4 + 48);
        goto LABEL_46;
      case 1:
      case 3:
        unint64_t v34 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        goto LABEL_46;
      case 2:
        unint64_t v34 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
LABEL_46:
        sub_19E6C1A2C(*v34);
        sub_19EBF67D8();
        swift_bridgeObjectRelease();
        sub_19EBF67D8();
        goto LABEL_54;
      default:
        goto LABEL_55;
    }
  }
  *a2 = v4;

  return swift_retain();
}

uint64_t MLTensor.cumulativeSum(alongAxis:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  unint64_t v5 = (unint64_t)*v2 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v7 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v7 = v4 + 40;
      break;
  }
  if (*(void *)(*(void *)v7 + 16))
  {
    uint64_t v8 = v5;
    uint64_t v9 = v5;
    switch((int)v5)
    {
      case 0:
        uint64_t v10 = (unsigned char *)(v4 + 48);
        break;
      case 1:
      case 3:
        uint64_t v10 = (unsigned char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        break;
      case 2:
        uint64_t v10 = (unsigned char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      default:
LABEL_55:
        JUMPOUT(0);
    }
    if (*v10)
    {
      switch(v9)
      {
        case 0:
          uint64_t v12 = v4 + 40;
          goto LABEL_18;
        case 1:
        case 3:
          uint64_t v12 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
          goto LABEL_18;
        case 2:
          uint64_t v12 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
LABEL_18:
          uint64_t v13 = *(void *)(*(void *)v12 + 16);
          if (-v13 > a1 || v13 <= a1)
          {
            sub_19EBF6FE8();
            swift_bridgeObjectRelease();
            v40[0] = 0xD000000000000020;
            v40[1] = 0x800000019EC09540;
            switch(v8)
            {
              case 1:
              case 3:
                uint64_t v35 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
                break;
              case 2:
                uint64_t v35 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
                break;
              default:
                uint64_t v35 = v4 + 40;
                break;
            }
            uint64_t v39 = *(void **)(*(void *)v35 + 16);
            sub_19EBF7318();
            sub_19EBF67D8();
            swift_bridgeObjectRelease();
            sub_19EBF67D8();
            switch(v8)
            {
              case 0:
                uint64_t v36 = v4 + 40;
                goto LABEL_53;
              case 1:
              case 3:
                uint64_t v36 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
                goto LABEL_53;
              case 2:
                uint64_t v36 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
LABEL_53:
                uint64_t v39 = *(void **)(*(void *)v36 + 16);
                sub_19EBF7318();
                sub_19EBF67D8();
                swift_bridgeObjectRelease();
                sub_19EBF67D8();
                goto LABEL_54;
              default:
                goto LABEL_55;
            }
          }
          switch(v8)
          {
            case 1:
            case 3:
              uint64_t v15 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
              break;
            case 2:
              uint64_t v15 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
              break;
            default:
              uint64_t v15 = v4 + 40;
              break;
          }
          uint64_t v16 = *(void *)(*(void *)v15 + 16);
          v40[0] = a1;
          v40[1] = v16;
          char v43 = 6;
          if (-v16 > a1 || v16 <= a1)
          {
            sub_19E5E2970((uint64_t)v40, (uint64_t)&v39);
            sub_19E5E1864();
LABEL_54:
            sub_19EBF71F8();
            __break(1u);
            JUMPOUT(0x19E61104CLL);
          }
          char v37 = a2;
          sub_19E607D84((uint64_t)v40);
          uint64_t v38 = (v16 & (a1 >> 63)) + a1;
          if (qword_1E945BB70 != -1) {
            swift_once();
          }
          sub_19EBF75A8();
          uint64_t v18 = v39;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_19EC36240;
          *(void *)(inited + 32) = v4;
          uint64_t v20 = v4 & 0x3FFFFFFFFFFFFFFFLL;
          swift_retain();
          sub_19E634690(inited, (uint64_t)v40);
          swift_bridgeObjectRelease();
          sub_19E601010(v18);
          uint64_t v21 = v41;
          uint64_t v22 = v42;
          __swift_project_boxed_opaque_existential_1(v40, v41);
          uint64_t v23 = swift_allocObject();
          *(_OWORD *)(v23 + 16) = xmmword_19EC36240;
          *(void *)(v23 + 32) = v4;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
          uint64_t v24 = swift_initStackObject();
          *(_OWORD *)(v24 + 16) = xmmword_19EC36240;
          uint64_t v25 = v24;
          switch(v8)
          {
            case 1:
            case 3:
              uint64_t v26 = (uint64_t *)(v20 + 24);
              uint64_t v27 = (char *)(v20 + 32);
              uint64_t v28 = (char *)(v20 + 33);
              break;
            case 2:
              uint64_t v26 = (uint64_t *)(v20 + 16);
              uint64_t v27 = (char *)(v20 + 24);
              uint64_t v28 = (char *)(v20 + 25);
              break;
            default:
              uint64_t v26 = (uint64_t *)(v4 + 40);
              uint64_t v27 = (char *)(v4 + 48);
              uint64_t v28 = (char *)(v4 + 49);
              break;
          }
          char v29 = *v28;
          char v30 = *v27;
          uint64_t v8 = *v26;
          *(void *)(v24 + 32) = *v26;
          *(unsigned char *)(v24 + 40) = v30;
          *(unsigned char *)(v24 + 41) = v29;
          uint64_t v4 = v22 + 176;
          uint64_t v31 = *(uint64_t (**)(unint64_t, unint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 176);
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v32 = v31(0xD000000000000010, 0x800000019EC09520, 0, v38, v23, v25, v21, v22);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_bridgeObjectRelease();
          if (*(void *)(v32 + 16))
          {
            uint64_t v33 = *(void *)(v32 + 32);
            swift_retain();
            swift_bridgeObjectRelease();
            *char v37 = v33;
            return __swift_destroy_boxed_opaque_existential_0((uint64_t)v40);
          }
          __break(1u);
          break;
        default:
          goto LABEL_55;
      }
    }
    v40[0] = 0;
    v40[1] = 0xE000000000000000;
    sub_19EBF6FE8();
    swift_bridgeObjectRelease();
    HIWORD(v40[1]) = -4864;
    switch(v8)
    {
      case 0:
        unint64_t v34 = (char *)(v4 + 48);
        goto LABEL_46;
      case 1:
      case 3:
        unint64_t v34 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        goto LABEL_46;
      case 2:
        unint64_t v34 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
LABEL_46:
        sub_19E6C1A2C(*v34);
        sub_19EBF67D8();
        swift_bridgeObjectRelease();
        sub_19EBF67D8();
        goto LABEL_54;
      default:
        goto LABEL_55;
    }
  }
  *a2 = v4;

  return swift_retain();
}

uint64_t MLTensor.topK(_:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)v4;
  uint64_t v8 = *(void *)v4 >> 62;
  uint64_t v9 = a3;
  switch(v8)
  {
    case 1:
    case 3:
      uint64_t v12 = (uint64_t *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      uint64_t v12 = (uint64_t *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v12 = (uint64_t *)(v7 + 40);
      break;
  }
  uint64_t v13 = *v12;
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v3 = *(void *)(v13 + 8 * v14 + 24);
  if ((v3 & 0x8000000000000000) != 0)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    int v17 = sub_19E612754(v6);
    goto LABEL_19;
  }
  if (a3 < 0 || (uint64_t)v3 <= a3) {
    goto LABEL_35;
  }
  unint64_t v4 = v8;
  switch((int)v8)
  {
    case 1:
    case 3:
      uint64_t v15 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v15 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v15 = v7 + 40;
      break;
  }
  unint64_t v3 = *(void *)(*(void *)v15 + 16);
  unint64_t v37 = -1;
  unint64_t v38 = v3;
  char v44 = 6;
  if (!v3)
  {
    sub_19E5E2970((uint64_t)&v37, (uint64_t)v34);
    sub_19E5E1864();
    goto LABEL_37;
  }
  sub_19E607D84((uint64_t)&v37);
  unint64_t v5 = v3 - 1;
  switch(v4)
  {
    case 0uLL:
      uint64_t v16 = (void **)(v7 + 40);
      break;
    case 1uLL:
    case 3uLL:
      uint64_t v16 = (void **)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v16 = (void **)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      JUMPOUT(0);
  }
  uint64_t v6 = *v16;
  swift_bridgeObjectRetain_n();
  int v17 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_30;
  }
LABEL_19:
  if (v3 > v17[2])
  {
    __break(1u);
LABEL_32:
    swift_once();
    goto LABEL_25;
  }
  v17[v5 + 4] = v9;
  swift_bridgeObjectRelease();
  switch(v4)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v18 = (unsigned char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v19 = (char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v18 = (unsigned char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v19 = (char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v18 = (unsigned char *)(v7 + 48);
      uint64_t v19 = (char *)(v7 + 49);
      break;
  }
  uint64_t v31 = a2;
  uint64_t v32 = a1;
  char v33 = *v19;
  LOBYTE(v3) = *v18;
  uint64_t v20 = qword_1E945BB70;
  swift_bridgeObjectRetain();
  if (v20 != -1) {
    goto LABEL_32;
  }
LABEL_25:
  sub_19EBF75A8();
  uint64_t v21 = (void *)v37;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v7;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v34);
  swift_bridgeObjectRelease();
  sub_19E601010(v21);
  uint64_t v23 = v35;
  uint64_t v24 = v36;
  __swift_project_boxed_opaque_existential_1(v34, v35);
  unint64_t v37 = 0xD000000000000010;
  unint64_t v38 = 0x800000019EC09520;
  uint64_t v39 = 1802530676;
  unint64_t v40 = 0xE400000000000000;
  uint64_t v41 = v9;
  unint64_t v42 = v5;
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_19EC36240;
  *(void *)(v9 + 32) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v25 = swift_initStackObject();
  *(_OWORD *)(v25 + 16) = xmmword_19EC365B0;
  *(void *)(v25 + 32) = v17;
  *(unsigned char *)(v25 + 40) = v3;
  *(unsigned char *)(v25 + 41) = v33;
  *(void *)(v25 + 4_Block_object_dispose(&STACK[0x278], 8) = v17;
  *(_WORD *)(v25 + 56) = 7;
  unint64_t v3 = v24 + 184;
  uint64_t v26 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 184);
  swift_retain();
  uint64_t v27 = (void *)v26(&v37, v9, v25, v23, v24);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  uint64_t v28 = v27[2];
  if (!v28)
  {
    __break(1u);
    goto LABEL_34;
  }
  *uint64_t v32 = v27[4];
  if (v28 == 1)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    unint64_t v40 = MEMORY[0x1E4FBB550];
    unint64_t v37 = v9;
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E945CE60);
    uint64_t v41 = 0;
    unint64_t v42 = v3;
    char v44 = 10;
    sub_19E5E2970((uint64_t)&v37, (uint64_t)v34);
    sub_19E5E1864();
LABEL_37:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E611584);
  }
  uint64_t v29 = v27[5];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  *uint64_t v31 = v29;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
}

void sub_19E6115C4(char a1@<W0>, uint64_t a2@<X8>)
{
  int v4 = *v2;
  char v5 = *((unsigned char *)v2 + 4);
  if (a1 != 10 && (v2[1] & 1) == 0)
  {
    uint64_t v6 = MEMORY[0x1E4FBB390];
    switch(a1)
    {
      case 1:
        uint64_t v6 = MEMORY[0x1E4FBC358];
        goto LABEL_12;
      case 2:
        uint64_t v6 = MEMORY[0x1E4FBC450];
        goto LABEL_12;
      case 3:
        uint64_t v6 = MEMORY[0x1E4FBC4C0];
        goto LABEL_12;
      case 4:
      case 8:
      case 11:
        goto LABEL_23;
      case 5:
        uint64_t v6 = MEMORY[0x1E4FBC098];
        goto LABEL_12;
      case 6:
        uint64_t v6 = MEMORY[0x1E4FBC0F8];
        goto LABEL_12;
      case 7:
        uint64_t v6 = MEMORY[0x1E4FBC150];
        goto LABEL_12;
      case 9:
        uint64_t v6 = MEMORY[0x1E4FBC5E0];
        goto LABEL_12;
      case 10:
        uint64_t v6 = MEMORY[0x1E4FBB470];
        goto LABEL_12;
      default:
LABEL_12:
        if (swift_conformsToProtocol2()) {
          uint64_t v7 = v6;
        }
        else {
          uint64_t v7 = 0;
        }
        if (v7)
        {
          sub_19E611758(v7);
LABEL_22:
          char v5 = 0;
          *(float *)a2 = v8;
          goto LABEL_25;
        }
        if (swift_conformsToProtocol2()) {
          uint64_t v9 = v6;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          float v8 = sub_19E611884(v9, v9);
          goto LABEL_22;
        }
LABEL_23:
        char v5 = 0;
        break;
    }
  }
  *(_DWORD *)a2 = v4;
LABEL_25:
  *(unsigned char *)(a2 + 4) = v5;
}

uint64_t sub_19E611758(uint64_t a1)
{
  return sub_19EBF65F8();
}

float sub_19E611884(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  char v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _OWORD v10[3] = v6;
  sub_19E6133AC();
  sub_19EBF6F48();
  if (sub_19EBF6F28() < 65)
  {
    char v8 = sub_19EBF6F38();
    uint64_t v9 = sub_19EBF6F18();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a2);
    if (v8) {
      return (float)v9;
    }
    else {
      return (float)(unint64_t)v9;
    }
  }
  else
  {
    sub_19E613400();
    sub_19EBF6618();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a2);
    return *(float *)&v10[2];
  }
}

uint64_t MLTensor.PaddingMode.hash(into:)()
{
  if (*(unsigned char *)(v0 + 4) == 1) {
    return sub_19EBF7488();
  }
  sub_19EBF7488();
  return sub_19EBF74A8();
}

uint64_t static MLTensor.PaddingMode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)a1;
  float v3 = *(float *)a2;
  unsigned int v4 = *(unsigned __int8 *)(a2 + 4);
  if (*(unsigned char *)(a1 + 4) != 1) {
    return (v4 & 1) == 0 && v2 == v3;
  }
  BOOL v5 = LODWORD(v3) == 0;
  if (v3 == 0.0) {
    unsigned int v6 = *(unsigned __int8 *)(a2 + 4);
  }
  else {
    unsigned int v6 = 0;
  }
  if (v5) {
    unsigned int v4 = 0;
  }
  if (v2 == 0.0) {
    return v6;
  }
  else {
    return v4;
  }
}

uint64_t MLTensor.PaddingMode.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 4);
  sub_19EBF7478();
  sub_19EBF7488();
  if (v1 != 1) {
    sub_19EBF74A8();
  }
  return sub_19EBF74B8();
}

uint64_t sub_19E611B4C()
{
  int v1 = *(unsigned __int8 *)(v0 + 4);
  sub_19EBF7478();
  sub_19EBF7488();
  if (v1 != 1) {
    sub_19EBF74A8();
  }
  return sub_19EBF74B8();
}

uint64_t sub_19E611BC8(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)a1;
  float v3 = *(float *)a2;
  unsigned int v4 = *(unsigned __int8 *)(a2 + 4);
  if (*(unsigned char *)(a1 + 4) != 1) {
    return (v4 & 1) == 0 && v2 == v3;
  }
  BOOL v5 = LODWORD(v3) == 0;
  if (v3 == 0.0) {
    unsigned int v6 = *(unsigned __int8 *)(a2 + 4);
  }
  else {
    unsigned int v6 = 0;
  }
  if (v5) {
    unsigned int v4 = 0;
  }
  if (v2 == 0.0) {
    return v6;
  }
  else {
    return v4;
  }
}

uint64_t MLTensor.PaddingMode.description.getter()
{
  if (*(unsigned char *)(v0 + 4) != 1) {
    return 0x746E6174736E6F63;
  }
  if (*(_DWORD *)v0) {
    return 0x697274656D6D7973;
  }
  return 0x697463656C666572;
}

uint64_t sub_19E611C84()
{
  if (*(unsigned char *)(v0 + 4) != 1) {
    return 0x746E6174736E6F63;
  }
  if (*(_DWORD *)v0) {
    return 0x697274656D6D7973;
  }
  return 0x697463656C666572;
}

uint64_t MLTensor.padded(forSizes:with:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>, float a3@<S0>)
{
  uint64_t v7 = *v3;
  float v5 = a3;
  char v6 = 0;
  return MLTensor.padded(forSizes:mode:)(a1, (int *)&v5, a2);
}

uint64_t MLTensor.padded(forSizes:mode:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  int v5 = *a2;
  char v6 = *((unsigned char *)a2 + 4);
  uint64_t v7 = *v3;
  unint64_t v8 = (unint64_t)*v3 >> 62;
  uint64_t v9 = a1;
  switch(v8)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v10 = (unsigned char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2uLL:
      uint64_t v10 = (unsigned char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      uint64_t v10 = (unsigned char *)(v7 + 48);
      break;
  }
  if (!*v10) {
    goto LABEL_38;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = v8;
  switch((int)v8)
  {
    case 0:
      uint64_t v13 = v7 + 40;
      break;
    case 1:
    case 3:
      uint64_t v13 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v13 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
LABEL_39:
      JUMPOUT(0);
  }
  if (*(void *)(*(void *)v13 + 16) < v11)
  {
LABEL_38:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E612398);
  }
  switch(v12)
  {
    case 1:
    case 3:
      uint64_t v14 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v14 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v14 = v7 + 40;
      break;
  }
  if (v11 == *(void *)(*(void *)v14 + 16))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    switch(v12)
    {
      case 1:
      case 3:
        uint64_t v15 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 24;
        break;
      case 2:
        uint64_t v15 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 16;
        break;
      default:
        uint64_t v15 = v7 + 40;
        break;
    }
    uint64_t v16 = *(void *)(*(void *)v15 + 16);
    if (__OFSUB__(v16, v11)) {
      goto LABEL_33;
    }
    uint64_t v41 = sub_19E60F8FC(0, 0, v16 - v11);
    uint64_t v17 = swift_bridgeObjectRetain();
    sub_19E612D58(v17, (uint64_t (*)(void))sub_19E607240);
    uint64_t v9 = v41;
  }
  uint64_t v18 = (void *)swift_bridgeObjectRetain();
  uint64_t v19 = sub_19E6765B4(v18, v9);
  swift_bridgeObjectRelease();
  if (!v19)
  {
    uint64_t v41 = 0;
    unint64_t v42 = 0xE000000000000000;
    swift_retain();
    sub_19EBF6FE8();
    sub_19EBF67D8();
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2F0);
    MEMORY[0x19F3BF220](v9, v35);
    sub_19EBF67D8();
    swift_bridgeObjectRelease();
    sub_19EBF67D8();
    switch(v12)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        uint64_t v36 = swift_bridgeObjectRetain();
        MEMORY[0x19F3BF220](v36, MEMORY[0x1E4FBB550]);
        sub_19EBF67D8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_19EBF67D8();
        goto LABEL_38;
      default:
        goto LABEL_39;
    }
  }
  LODWORD(v48[0]) = v5;
  BYTE4(v48[0]) = v6;
  unint64_t v37 = a3;
  uint64_t v40 = v9;
  switch(v12)
  {
    case 0:
      uint64_t v21 = (char *)(v7 + 48);
      char v20 = *(unsigned char *)(v7 + 48);
      goto LABEL_28;
    case 1:
    case 3:
      uint64_t v21 = (char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      char v20 = *(unsigned char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
      goto LABEL_28;
    case 2:
      uint64_t v21 = (char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      char v20 = *(unsigned char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
LABEL_28:
      sub_19E6115C4(v20, (uint64_t)&v41);
      int v22 = v41;
      char v23 = BYTE4(v41);
      uint64_t v39 = v19;
      char v38 = v21[1];
      char v24 = *v21;
      if (qword_1E945BB70 != -1) {
        swift_once();
      }
      sub_19EBF75A8();
      uint64_t v25 = (void *)v41;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_19EC36240;
      *(void *)(inited + 32) = v7;
      swift_retain();
      sub_19E634690(inited, (uint64_t)v48);
      swift_bridgeObjectRelease();
      sub_19E601010(v25);
      uint64_t v27 = v49;
      uint64_t v28 = v50;
      __swift_project_boxed_opaque_existential_1(v48, v49);
      uint64_t v41 = 0xD000000000000010;
      unint64_t v42 = 0x800000019EC09520;
      uint64_t v43 = 6578544;
      unint64_t v44 = 0xE300000000000000;
      int v45 = v22;
      char v46 = v23;
      uint64_t v47 = v40;
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_19EC36240;
      *(void *)(v29 + 32) = v7;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
      uint64_t v30 = swift_initStackObject();
      *(void *)(v30 + 32) = v39;
      *(_OWORD *)(v30 + 16) = xmmword_19EC36240;
      *(unsigned char *)(v30 + 40) = v24;
      *(unsigned char *)(v30 + 41) = v38;
      uint64_t v31 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 192);
      swift_retain();
      uint64_t v32 = v31(&v41, v29, v30, v27, v28);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*(void *)(v32 + 16))
      {
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_38;
      }
      uint64_t v33 = *(void *)(v32 + 32);
      swift_retain();
      swift_bridgeObjectRelease();
      *unint64_t v37 = v33;
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v48);
    default:
      goto LABEL_39;
  }
}

uint64_t MLTensor.argsort(alongAxis:descendingOrder:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = *v3;
  unint64_t v5 = (unint64_t)*v3 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v9 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v9 = v4 + 40;
      break;
  }
  int64_t v10 = *(void *)(*(void *)v9 + 16);
  uint64_t v28 = a1;
  unint64_t v29 = v10;
  char v34 = 6;
  uint64_t v11 = &v28;
  if (-v10 > a1 || v10 <= a1)
  {
LABEL_18:
    sub_19E5E2970((uint64_t)v11, (uint64_t)v25);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E612734);
  }
  sub_19E607D84((uint64_t)&v28);
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v13 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      uint64_t v13 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v13 = (uint64_t *)(v4 + 40);
      break;
  }
  uint64_t v14 = *v13;
  swift_bridgeObjectRetain();
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v15 = (void *)v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v4;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v25);
  swift_bridgeObjectRelease();
  sub_19E601010(v15);
  uint64_t v17 = v26;
  uint64_t v18 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  uint64_t v28 = 0x74726F73677261;
  unint64_t v29 = 0xE700000000000000;
  unint64_t v30 = 0xD000000000000010;
  unint64_t v31 = 0x800000019EC09520;
  uint64_t v32 = (v10 & (a1 >> 63)) + a1;
  char v33 = a2 & 1;
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_19EC36240;
  *(void *)(v19 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_19EC36240;
  *(void *)(v20 + 32) = v14;
  *(_WORD *)(v20 + 40) = 7;
  uint64_t v21 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 200);
  swift_retain();
  uint64_t v22 = v21(&v28, v19, v20, v17, v18);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v11 = (uint64_t *)swift_bridgeObjectRelease();
  if (!*(void *)(v22 + 16))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v23 = *(void *)(v22 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  *a3 = v23;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
}

void *sub_19E612754(void *a1)
{
  return sub_19E606EE4(0, a1[2], 0, a1);
}

void *sub_19E612768(void *a1)
{
  return sub_19E607000(0, a1[2], 0, a1);
}

void *sub_19E61277C(void *a1)
{
  return sub_19E607684(0, a1[2], 0, a1);
}

void *sub_19E612790(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t result = sub_19E606EE4(result, v13, 1, v5);
    unint64_t v5 = result;
  }
  uint64_t v14 = &v5[a1 + 4];
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v15 = v5[2];
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    uint64_t result = v14 + 1;
    uint64_t v18 = &v5[a2 + 4];
    if (v14 + 1 != v18 || result >= &v18[v17]) {
      uint64_t result = memmove(result, v18, 8 * v17);
    }
    uint64_t v19 = v5[2];
    BOOL v16 = __OFADD__(v19, v9);
    uint64_t v20 = v19 + v9;
    if (!v16)
    {
      void v5[2] = v20;
LABEL_20:
      *uint64_t v14 = a3;
      *(void *)uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (void *)sub_19EBF7278();
  __break(1u);
  return result;
}

void *sub_19E6128F4(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v6 = *(void **)v4;
  int64_t v7 = *(void *)(*(void *)v4 + 16);
  if (v7 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v10 = a3;
  uint64_t v11 = a3 - v9;
  if (__OFSUB__(a3, v9))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int64_t v12 = v7 + v11;
  if (__OFADD__(v7, v11))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v12 > v6[3] >> 1)
  {
    if (v7 <= v12) {
      int64_t v15 = v7 + v11;
    }
    else {
      int64_t v15 = v7;
    }
    uint64_t result = sub_19E606EE4(result, v15, 1, v6);
    int64_t v6 = result;
  }
  BOOL v16 = &v6[a1 + 4];
  unint64_t v17 = (unint64_t)&v16[v10];
  if (!v11)
  {
LABEL_20:
    if (v10 < 1)
    {
LABEL_23:
      *(void *)uint64_t v4 = v6;
      return result;
    }
    while (v10)
    {
      *v16++ = a4;
      --v10;
      if ((unint64_t)v16 >= v17) {
        goto LABEL_23;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v18 = v6[2];
  BOOL v19 = __OFSUB__(v18, a2);
  uint64_t v20 = v18 - a2;
  if (v19)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = &v6[a2 + 4];
    if ((void *)v17 != v21 || v17 >= (unint64_t)&v21[v20]) {
      uint64_t result = memmove(&v16[v10], v21, 8 * v20);
    }
    uint64_t v22 = v6[2];
    BOOL v19 = __OFADD__(v22, v11);
    uint64_t v23 = v22 + v11;
    if (v19) {
      goto LABEL_31;
    }
    void v6[2] = v23;
    goto LABEL_20;
  }
LABEL_32:
  uint64_t result = (void *)sub_19EBF7278();
  __break(1u);
  return result;
}

uint64_t sub_19E612A80(uint64_t a1)
{
  return sub_19E612D58(a1, (uint64_t (*)(void))sub_19E607000);
}

uint64_t sub_19E612A98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_19E606EE4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    void v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_19EBF7278();
  __break(1u);
  return result;
}

uint64_t sub_19E612BE0(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_19E60700C(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2E0);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    void v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_19EBF7278();
  __break(1u);
  return result;
}

uint64_t sub_19E612D58(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v5 + v3 <= *(void *)(v4 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v4 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v3) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v4 + 16);
  if ((*(void *)(v4 + 24) >> 1) - v8 < v3)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = (void *)(v4 + 16 * v8 + 32);
  if (a1 + 32 < (unint64_t)v9 + 16 * v3 && (unint64_t)v9 < a1 + 32 + 16 * v3) {
    goto LABEL_21;
  }
  memcpy(v9, (const void *)(a1 + 32), 16 * v3);
  if (!v3)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v2 = v4;
    return result;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v11, v3);
  uint64_t v13 = v11 + v3;
  if (!v12)
  {
    *(void *)(v4 + 16) = v13;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = sub_19EBF7278();
  __break(1u);
  return result;
}

uint64_t sub_19E612EB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_19E607358(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[4 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 32 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    void v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_19EBF7278();
  __break(1u);
  return result;
}

uint64_t sub_19E612FF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_19E607130(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[v8 + 4];
  if (a1 + 32 < v9 + 8 * v2 && v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    void v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_19EBF7278();
  __break(1u);
  return result;
}

char *sub_19E61314C(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  int64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = (char *)sub_19E606EE4(result, v11, 1, v4);
    int64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[8 * a1 + 32];
    int64_t v15 = &v4[8 * a2 + 32];
    if (a1 != a2 || result >= &v15[8 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 8 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)sub_19EBF7278();
  __break(1u);
  return result;
}

unint64_t sub_19E6132AC()
{
  unint64_t result = qword_1E945C2F8;
  if (!qword_1E945C2F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C2F8);
  }
  return result;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t _s11PaddingModeOwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s11PaddingModeOwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

uint64_t sub_19E613360(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_19E61337C(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)unint64_t result = a2 - 1;
    *(unsigned char *)(result + 4) = 1;
  }
  else
  {
    *(unsigned char *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLTensor.PaddingMode()
{
  return &type metadata for MLTensor.PaddingMode;
}

unint64_t sub_19E6133AC()
{
  unint64_t result = qword_1E945C300;
  if (!qword_1E945C300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C300);
  }
  return result;
}

unint64_t sub_19E613400()
{
  unint64_t result = qword_1E945C308;
  if (!qword_1E945C308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C308);
  }
  return result;
}

uint64_t static MLTensor..== infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19E615500(a1, a2, a3, a4, a5, (void (*)(uint64_t *))sub_19E61346C);
}

uint64_t sub_19E61346C@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  uint64_t v4 = *v2;
  unint64_t v5 = (unint64_t)*v2 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v7 = (void **)(v4 + 40);
      break;
  }
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  unint64_t v9 = v3 >> 62;
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v10 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      unint64_t v10 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      unint64_t v10 = (void **)(v3 + 40);
      break;
  }
  int64_t v11 = *v10;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_19E6753E8(v8, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v5 = v5;
  if (!v12) {
    goto LABEL_43;
  }
  switch((int)v5)
  {
    case 1:
    case 3:
      BOOL v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      BOOL v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      BOOL v13 = (unsigned __int8 *)(v4 + 48);
      uint64_t v14 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v15 = *v14;
  int v16 = *v13;
  switch((int)v9)
  {
    case 1:
    case 3:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v3 + 48);
      uint64_t v18 = (char *)(v3 + 49);
      break;
  }
  char v19 = *v18;
  int v20 = *v17;
  if (v15)
  {
    if ((v19 & 1) == 0) {
      goto LABEL_24;
    }
  }
  else if (v19)
  {
    goto LABEL_24;
  }
  LOBYTE(v49[0]) = v16;
  BYTE1(v49[0]) = v15;
  BYTE2(v49[0]) = v20;
  BYTE3(v49[0]) = v19;
  char v52 = 8;
  if (v16 != v20)
  {
    sub_19E5E2970((uint64_t)v49, (uint64_t)v48);
    sub_19E5E1864();
    goto LABEL_49;
  }
  sub_19E607D84((uint64_t)v49);
LABEL_24:
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v21 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v22 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v21 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v22 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v21 = (unsigned __int8 *)(v4 + 48);
      uint64_t v22 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v23 = *v22;
  unsigned int v24 = *v21;
  switch((int)v9)
  {
    case 1:
    case 3:
      uint64_t v25 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v26 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v25 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v26 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v25 = (unsigned __int8 *)(v3 + 48);
      uint64_t v26 = (unsigned __int8 *)(v3 + 49);
      break;
  }
  uint64_t v47 = a2;
  int v27 = *v26;
  __int16 v28 = *v25;
  if (v23) {
    int v29 = 256;
  }
  else {
    int v29 = 0;
  }
  uint64_t v30 = v29 | v24;
  if (v27) {
    __int16 v31 = 256;
  }
  else {
    __int16 v31 = 0;
  }
  v48[0] = v4;
  __int16 v32 = sub_19E636D20(v30, v31 | v28) & 0x1FF;
  sub_19E6019D0(v32, v49);
  sub_19E6019D0(v32, v48);
  uint64_t v33 = v49[0];
  uint64_t v34 = v48[0];
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v35 = (void *)v48[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v33;
  *(void *)(inited + 40) = v34;
  unint64_t v5 = v33 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)v49);
  swift_bridgeObjectRelease();
  sub_19E601010(v35);
  uint64_t v37 = v50;
  uint64_t v4 = v51;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_19EC365B0;
  *(void *)(v38 + 32) = v33;
  *(void *)(v38 + 40) = v34;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v39 = swift_initStackObject();
  *(_OWORD *)(v39 + 16) = xmmword_19EC36240;
  *(void *)(v39 + 32) = v12;
  *(_WORD *)(v39 + 40) = 0;
  uint64_t v40 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 48);
  swift_retain();
  swift_retain();
  uint64_t v41 = v40(0, v38, v39, v37, v4);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v41 + 16))
  {
    __break(1u);
LABEL_43:
    switch(v5)
    {
      case 1uLL:
      case 3uLL:
        unint64_t v44 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2uLL:
        unint64_t v44 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        unint64_t v44 = (uint64_t *)(v4 + 40);
        break;
    }
    uint64_t v45 = *v44;
    swift_bridgeObjectRetain();
    uint64_t v46 = swift_bridgeObjectRetain();
    v49[0] = v45;
    v49[1] = v46;
    char v52 = 1;
    sub_19E5E2970((uint64_t)v49, (uint64_t)v48);
    sub_19E5E1864();
LABEL_49:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E613A40);
  }
  uint64_t v42 = *(void *)(v41 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *uint64_t v47 = v42;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v49);
}

uint64_t static MLTensor..== infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E615E44(a1, a2, (uint64_t (*)(void *))sub_19E61346C);
}

uint64_t static MLTensor..!= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19E615500(a1, a2, a3, a4, a5, (void (*)(uint64_t *))sub_19E613AF0);
}

uint64_t sub_19E613AF0@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  uint64_t v4 = *v2;
  unint64_t v5 = (unint64_t)*v2 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v7 = (void **)(v4 + 40);
      break;
  }
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  unint64_t v9 = v3 >> 62;
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v10 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      unint64_t v10 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      unint64_t v10 = (void **)(v3 + 40);
      break;
  }
  int64_t v11 = *v10;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_19E6753E8(v8, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v5 = v5;
  if (!v12) {
    goto LABEL_43;
  }
  switch((int)v5)
  {
    case 1:
    case 3:
      BOOL v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      BOOL v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      BOOL v13 = (unsigned __int8 *)(v4 + 48);
      uint64_t v14 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v15 = *v14;
  int v16 = *v13;
  switch((int)v9)
  {
    case 1:
    case 3:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v3 + 48);
      uint64_t v18 = (char *)(v3 + 49);
      break;
  }
  char v19 = *v18;
  int v20 = *v17;
  if (v15)
  {
    if ((v19 & 1) == 0) {
      goto LABEL_24;
    }
  }
  else if (v19)
  {
    goto LABEL_24;
  }
  LOBYTE(v49[0]) = v16;
  BYTE1(v49[0]) = v15;
  BYTE2(v49[0]) = v20;
  BYTE3(v49[0]) = v19;
  char v52 = 8;
  if (v16 != v20)
  {
    sub_19E5E2970((uint64_t)v49, (uint64_t)v48);
    sub_19E5E1864();
    goto LABEL_49;
  }
  sub_19E607D84((uint64_t)v49);
LABEL_24:
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v21 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v22 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v21 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v22 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v21 = (unsigned __int8 *)(v4 + 48);
      uint64_t v22 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v23 = *v22;
  unsigned int v24 = *v21;
  uint64_t v47 = a2;
  switch((int)v9)
  {
    case 1:
    case 3:
      uint64_t v25 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v26 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v25 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v26 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v25 = (unsigned __int8 *)(v3 + 48);
      uint64_t v26 = (unsigned __int8 *)(v3 + 49);
      break;
  }
  int v27 = *v26;
  __int16 v28 = *v25;
  if (v23) {
    int v29 = 256;
  }
  else {
    int v29 = 0;
  }
  uint64_t v30 = v29 | v24;
  if (v27) {
    __int16 v31 = 256;
  }
  else {
    __int16 v31 = 0;
  }
  v48[0] = v4;
  __int16 v32 = sub_19E636D20(v30, v31 | v28) & 0x1FF;
  sub_19E6019D0(v32, v49);
  sub_19E6019D0(v32, v48);
  uint64_t v33 = v49[0];
  uint64_t v34 = v48[0];
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v35 = (void *)v48[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v33;
  *(void *)(inited + 40) = v34;
  unint64_t v5 = v33 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)v49);
  swift_bridgeObjectRelease();
  sub_19E601010(v35);
  uint64_t v4 = v50;
  uint64_t v37 = v51;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_19EC365B0;
  *(void *)(v38 + 32) = v33;
  *(void *)(v38 + 40) = v34;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v39 = swift_initStackObject();
  *(_OWORD *)(v39 + 16) = xmmword_19EC36240;
  *(void *)(v39 + 32) = v12;
  *(_WORD *)(v39 + 40) = 0;
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 48);
  swift_retain();
  swift_retain();
  uint64_t v41 = v40(5, v38, v39, v4, v37);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v41 + 16))
  {
    __break(1u);
LABEL_43:
    switch(v5)
    {
      case 1uLL:
      case 3uLL:
        unint64_t v44 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2uLL:
        unint64_t v44 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        unint64_t v44 = (uint64_t *)(v4 + 40);
        break;
    }
    uint64_t v45 = *v44;
    swift_bridgeObjectRetain();
    uint64_t v46 = swift_bridgeObjectRetain();
    v49[0] = v45;
    v49[1] = v46;
    char v52 = 1;
    sub_19E5E2970((uint64_t)v49, (uint64_t)v48);
    sub_19E5E1864();
LABEL_49:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E6140C4);
  }
  uint64_t v42 = *(void *)(v41 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *uint64_t v47 = v42;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v49);
}

uint64_t static MLTensor..!= infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E615E44(a1, a2, (uint64_t (*)(void *))sub_19E613AF0);
}

uint64_t static MLTensor..> infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19E615500(a1, a2, a3, a4, a5, (void (*)(uint64_t *))sub_19E614174);
}

uint64_t sub_19E614174@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  uint64_t v4 = *v2;
  unint64_t v5 = (unint64_t)*v2 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v7 = (void **)(v4 + 40);
      break;
  }
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  unint64_t v9 = v3 >> 62;
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v10 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      unint64_t v10 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      unint64_t v10 = (void **)(v3 + 40);
      break;
  }
  int64_t v11 = *v10;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_19E6753E8(v8, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v5 = v5;
  if (!v12) {
    goto LABEL_43;
  }
  switch((int)v5)
  {
    case 1:
    case 3:
      BOOL v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      BOOL v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      BOOL v13 = (unsigned __int8 *)(v4 + 48);
      uint64_t v14 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v15 = *v14;
  int v16 = *v13;
  switch((int)v9)
  {
    case 1:
    case 3:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v3 + 48);
      uint64_t v18 = (char *)(v3 + 49);
      break;
  }
  char v19 = *v18;
  int v20 = *v17;
  if (v15)
  {
    if ((v19 & 1) == 0) {
      goto LABEL_24;
    }
  }
  else if (v19)
  {
    goto LABEL_24;
  }
  LOBYTE(v49[0]) = v16;
  BYTE1(v49[0]) = v15;
  BYTE2(v49[0]) = v20;
  BYTE3(v49[0]) = v19;
  char v52 = 8;
  if (v16 != v20)
  {
    sub_19E5E2970((uint64_t)v49, (uint64_t)v48);
    sub_19E5E1864();
    goto LABEL_49;
  }
  sub_19E607D84((uint64_t)v49);
LABEL_24:
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v21 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v22 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v21 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v22 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v21 = (unsigned __int8 *)(v4 + 48);
      uint64_t v22 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v23 = *v22;
  unsigned int v24 = *v21;
  switch((int)v9)
  {
    case 1:
    case 3:
      uint64_t v25 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v26 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v25 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v26 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v25 = (unsigned __int8 *)(v3 + 48);
      uint64_t v26 = (unsigned __int8 *)(v3 + 49);
      break;
  }
  uint64_t v47 = a2;
  int v27 = *v26;
  __int16 v28 = *v25;
  if (v23) {
    int v29 = 256;
  }
  else {
    int v29 = 0;
  }
  uint64_t v30 = v29 | v24;
  if (v27) {
    __int16 v31 = 256;
  }
  else {
    __int16 v31 = 0;
  }
  v48[0] = v4;
  __int16 v32 = sub_19E636D20(v30, v31 | v28) & 0x1FF;
  sub_19E6019D0(v32, v49);
  sub_19E6019D0(v32, v48);
  uint64_t v33 = v49[0];
  uint64_t v34 = v48[0];
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v35 = (void *)v48[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v33;
  *(void *)(inited + 40) = v34;
  unint64_t v5 = v33 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)v49);
  swift_bridgeObjectRelease();
  sub_19E601010(v35);
  uint64_t v37 = v50;
  uint64_t v4 = v51;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_19EC365B0;
  *(void *)(v38 + 32) = v33;
  *(void *)(v38 + 40) = v34;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v39 = swift_initStackObject();
  *(_OWORD *)(v39 + 16) = xmmword_19EC36240;
  *(void *)(v39 + 32) = v12;
  *(_WORD *)(v39 + 40) = 0;
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 48);
  swift_retain();
  swift_retain();
  uint64_t v41 = v40(1, v38, v39, v37, v4);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v41 + 16))
  {
    __break(1u);
LABEL_43:
    switch(v5)
    {
      case 1uLL:
      case 3uLL:
        unint64_t v44 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2uLL:
        unint64_t v44 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        unint64_t v44 = (uint64_t *)(v4 + 40);
        break;
    }
    uint64_t v45 = *v44;
    swift_bridgeObjectRetain();
    uint64_t v46 = swift_bridgeObjectRetain();
    v49[0] = v45;
    v49[1] = v46;
    char v52 = 1;
    sub_19E5E2970((uint64_t)v49, (uint64_t)v48);
    sub_19E5E1864();
LABEL_49:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E614748);
  }
  uint64_t v42 = *(void *)(v41 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *uint64_t v47 = v42;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v49);
}

uint64_t static MLTensor..> infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E615E44(a1, a2, (uint64_t (*)(void *))sub_19E614174);
}

uint64_t static MLTensor..>= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19E615500(a1, a2, a3, a4, a5, (void (*)(uint64_t *))sub_19E6147F8);
}

uint64_t sub_19E6147F8@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  uint64_t v4 = *v2;
  unint64_t v5 = (unint64_t)*v2 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v7 = (void **)(v4 + 40);
      break;
  }
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  unint64_t v9 = v3 >> 62;
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v10 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      unint64_t v10 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      unint64_t v10 = (void **)(v3 + 40);
      break;
  }
  int64_t v11 = *v10;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_19E6753E8(v8, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v5 = v5;
  if (!v12) {
    goto LABEL_43;
  }
  switch((int)v5)
  {
    case 1:
    case 3:
      BOOL v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      BOOL v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      BOOL v13 = (unsigned __int8 *)(v4 + 48);
      uint64_t v14 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v15 = *v14;
  int v16 = *v13;
  switch((int)v9)
  {
    case 1:
    case 3:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v3 + 48);
      uint64_t v18 = (char *)(v3 + 49);
      break;
  }
  char v19 = *v18;
  int v20 = *v17;
  if (v15)
  {
    if ((v19 & 1) == 0) {
      goto LABEL_24;
    }
  }
  else if (v19)
  {
    goto LABEL_24;
  }
  LOBYTE(v49[0]) = v16;
  BYTE1(v49[0]) = v15;
  BYTE2(v49[0]) = v20;
  BYTE3(v49[0]) = v19;
  char v52 = 8;
  if (v16 != v20)
  {
    sub_19E5E2970((uint64_t)v49, (uint64_t)v48);
    sub_19E5E1864();
    goto LABEL_49;
  }
  sub_19E607D84((uint64_t)v49);
LABEL_24:
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v21 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v22 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v21 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v22 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v21 = (unsigned __int8 *)(v4 + 48);
      uint64_t v22 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v23 = *v22;
  unsigned int v24 = *v21;
  uint64_t v47 = a2;
  switch((int)v9)
  {
    case 1:
    case 3:
      uint64_t v25 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v26 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v25 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v26 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v25 = (unsigned __int8 *)(v3 + 48);
      uint64_t v26 = (unsigned __int8 *)(v3 + 49);
      break;
  }
  int v27 = *v26;
  __int16 v28 = *v25;
  if (v23) {
    int v29 = 256;
  }
  else {
    int v29 = 0;
  }
  uint64_t v30 = v29 | v24;
  if (v27) {
    __int16 v31 = 256;
  }
  else {
    __int16 v31 = 0;
  }
  v48[0] = v4;
  __int16 v32 = sub_19E636D20(v30, v31 | v28) & 0x1FF;
  sub_19E6019D0(v32, v49);
  sub_19E6019D0(v32, v48);
  uint64_t v33 = v49[0];
  uint64_t v34 = v48[0];
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v35 = (void *)v48[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v33;
  *(void *)(inited + 40) = v34;
  unint64_t v5 = v33 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)v49);
  swift_bridgeObjectRelease();
  sub_19E601010(v35);
  uint64_t v4 = v50;
  uint64_t v37 = v51;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_19EC365B0;
  *(void *)(v38 + 32) = v33;
  *(void *)(v38 + 40) = v34;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v39 = swift_initStackObject();
  *(_OWORD *)(v39 + 16) = xmmword_19EC36240;
  *(void *)(v39 + 32) = v12;
  *(_WORD *)(v39 + 40) = 0;
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 48);
  swift_retain();
  swift_retain();
  uint64_t v41 = v40(2, v38, v39, v4, v37);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v41 + 16))
  {
    __break(1u);
LABEL_43:
    switch(v5)
    {
      case 1uLL:
      case 3uLL:
        unint64_t v44 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2uLL:
        unint64_t v44 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        unint64_t v44 = (uint64_t *)(v4 + 40);
        break;
    }
    uint64_t v45 = *v44;
    swift_bridgeObjectRetain();
    uint64_t v46 = swift_bridgeObjectRetain();
    v49[0] = v45;
    v49[1] = v46;
    char v52 = 1;
    sub_19E5E2970((uint64_t)v49, (uint64_t)v48);
    sub_19E5E1864();
LABEL_49:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E614DCCLL);
  }
  uint64_t v42 = *(void *)(v41 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *uint64_t v47 = v42;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v49);
}

uint64_t static MLTensor..>= infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E615E44(a1, a2, (uint64_t (*)(void *))sub_19E6147F8);
}

uint64_t static MLTensor..< infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19E615500(a1, a2, a3, a4, a5, (void (*)(uint64_t *))sub_19E614E7C);
}

uint64_t sub_19E614E7C@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  uint64_t v4 = *v2;
  unint64_t v5 = (unint64_t)*v2 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v7 = (void **)(v4 + 40);
      break;
  }
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  unint64_t v9 = v3 >> 62;
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v10 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      unint64_t v10 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      unint64_t v10 = (void **)(v3 + 40);
      break;
  }
  int64_t v11 = *v10;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_19E6753E8(v8, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v5 = v5;
  if (!v12) {
    goto LABEL_43;
  }
  switch((int)v5)
  {
    case 1:
    case 3:
      BOOL v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      BOOL v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      BOOL v13 = (unsigned __int8 *)(v4 + 48);
      uint64_t v14 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v15 = *v14;
  int v16 = *v13;
  switch((int)v9)
  {
    case 1:
    case 3:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v3 + 48);
      uint64_t v18 = (char *)(v3 + 49);
      break;
  }
  char v19 = *v18;
  int v20 = *v17;
  if (v15)
  {
    if ((v19 & 1) == 0) {
      goto LABEL_24;
    }
  }
  else if (v19)
  {
    goto LABEL_24;
  }
  LOBYTE(v49[0]) = v16;
  BYTE1(v49[0]) = v15;
  BYTE2(v49[0]) = v20;
  BYTE3(v49[0]) = v19;
  char v52 = 8;
  if (v16 != v20)
  {
    sub_19E5E2970((uint64_t)v49, (uint64_t)v48);
    sub_19E5E1864();
    goto LABEL_49;
  }
  sub_19E607D84((uint64_t)v49);
LABEL_24:
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v21 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v22 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v21 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v22 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v21 = (unsigned __int8 *)(v4 + 48);
      uint64_t v22 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v23 = *v22;
  unsigned int v24 = *v21;
  uint64_t v47 = a2;
  switch((int)v9)
  {
    case 1:
    case 3:
      uint64_t v25 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v26 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v25 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v26 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v25 = (unsigned __int8 *)(v3 + 48);
      uint64_t v26 = (unsigned __int8 *)(v3 + 49);
      break;
  }
  int v27 = *v26;
  __int16 v28 = *v25;
  if (v23) {
    int v29 = 256;
  }
  else {
    int v29 = 0;
  }
  uint64_t v30 = v29 | v24;
  if (v27) {
    __int16 v31 = 256;
  }
  else {
    __int16 v31 = 0;
  }
  v48[0] = v4;
  __int16 v32 = sub_19E636D20(v30, v31 | v28) & 0x1FF;
  sub_19E6019D0(v32, v49);
  sub_19E6019D0(v32, v48);
  uint64_t v33 = v49[0];
  uint64_t v34 = v48[0];
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v35 = (void *)v48[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v33;
  *(void *)(inited + 40) = v34;
  unint64_t v5 = v33 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)v49);
  swift_bridgeObjectRelease();
  sub_19E601010(v35);
  uint64_t v4 = v50;
  uint64_t v37 = v51;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_19EC365B0;
  *(void *)(v38 + 32) = v33;
  *(void *)(v38 + 40) = v34;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v39 = swift_initStackObject();
  *(_OWORD *)(v39 + 16) = xmmword_19EC36240;
  *(void *)(v39 + 32) = v12;
  *(_WORD *)(v39 + 40) = 0;
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 48);
  swift_retain();
  swift_retain();
  uint64_t v41 = v40(3, v38, v39, v4, v37);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v41 + 16))
  {
    __break(1u);
LABEL_43:
    switch(v5)
    {
      case 1uLL:
      case 3uLL:
        unint64_t v44 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2uLL:
        unint64_t v44 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        unint64_t v44 = (uint64_t *)(v4 + 40);
        break;
    }
    uint64_t v45 = *v44;
    swift_bridgeObjectRetain();
    uint64_t v46 = swift_bridgeObjectRetain();
    v49[0] = v45;
    v49[1] = v46;
    char v52 = 1;
    sub_19E5E2970((uint64_t)v49, (uint64_t)v48);
    sub_19E5E1864();
LABEL_49:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E615450);
  }
  uint64_t v42 = *(void *)(v41 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *uint64_t v47 = v42;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v49);
}

uint64_t static MLTensor..< infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E615E44(a1, a2, (uint64_t (*)(void *))sub_19E614E7C);
}

uint64_t static MLTensor..<= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19E615500(a1, a2, a3, a4, a5, (void (*)(uint64_t *))sub_19E6157D8);
}

uint64_t sub_19E615500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t *))
{
  uint64_t v10 = *(void *)(a3 - 8);
  int64_t v11 = (unint64_t *)MEMORY[0x1F4188790](a1);
  BOOL v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v30 = *v11;
  unint64_t v14 = v30;
  __int16 v16 = sub_19E6C1448(v15, 1);
  switch(v14 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v17 = (unsigned __int8 *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (unsigned char *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v17 = (unsigned __int8 *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (unsigned char *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v14 + 48);
      uint64_t v18 = (unsigned char *)(v14 + 49);
      break;
  }
  int v19 = *v17;
  if (v19 == v16)
  {
LABEL_10:
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, a3);
    nullsub_1(a3, a4, v25);
    MLTensor.init<A>(_:scalarType:)((uint64_t)v13, a3, &v29);
  }
  else
  {
    uint64_t v20 = v16 & 0x1FF;
    if (*v18) {
      __int16 v21 = 256;
    }
    else {
      __int16 v21 = 0;
    }
    char v22 = sub_19E636D20(v20, v21 | (unsigned __int16)v19);
    int v23 = &protocol witness table for Bool;
    uint64_t v24 = MEMORY[0x1E4FBB390];
    switch(v22)
    {
      case 1:
        int v23 = &protocol witness table for UInt8;
        uint64_t v24 = MEMORY[0x1E4FBC358];
        break;
      case 2:
        int v23 = &protocol witness table for UInt16;
        uint64_t v24 = MEMORY[0x1E4FBC450];
        break;
      case 3:
        int v23 = &protocol witness table for UInt32;
        uint64_t v24 = MEMORY[0x1E4FBC4C0];
        break;
      case 4:
      case 8:
      case 11:
        goto LABEL_10;
      case 5:
        int v23 = &protocol witness table for Int8;
        uint64_t v24 = MEMORY[0x1E4FBC098];
        break;
      case 6:
        int v23 = &protocol witness table for Int16;
        uint64_t v24 = MEMORY[0x1E4FBC0F8];
        break;
      case 7:
        int v23 = &protocol witness table for Int32;
        uint64_t v24 = MEMORY[0x1E4FBC150];
        break;
      case 9:
        int v23 = &protocol witness table for Float16;
        uint64_t v24 = MEMORY[0x1E4FBC5E0];
        break;
      case 10:
        int v23 = &protocol witness table for Float;
        uint64_t v24 = MEMORY[0x1E4FBB470];
        break;
      default:
        break;
    }
    sub_19E636C40(v24, a3, v24, (uint64_t)v23, &v29);
  }
  uint64_t v28 = v29;
  a6(&v28);
  return swift_release();
}

uint64_t sub_19E6157D8@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  uint64_t v4 = *v2;
  unint64_t v5 = (unint64_t)*v2 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v7 = (void **)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v7 = (void **)(v4 + 40);
      break;
  }
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  unint64_t v9 = v3 >> 62;
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v10 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v10 = (void **)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v10 = (void **)(v3 + 40);
      break;
  }
  int64_t v11 = *v10;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_19E6753E8(v8, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v5 = v5;
  if (!v12) {
    goto LABEL_43;
  }
  switch((int)v5)
  {
    case 1:
    case 3:
      BOOL v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      unint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      BOOL v13 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      unint64_t v14 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      BOOL v13 = (unsigned __int8 *)(v4 + 48);
      unint64_t v14 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v15 = *v14;
  int v16 = *v13;
  switch((int)v9)
  {
    case 1:
    case 3:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v17 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (char *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v3 + 48);
      uint64_t v18 = (char *)(v3 + 49);
      break;
  }
  char v19 = *v18;
  int v20 = *v17;
  if (v15)
  {
    if ((v19 & 1) == 0) {
      goto LABEL_24;
    }
  }
  else if (v19)
  {
    goto LABEL_24;
  }
  LOBYTE(v49[0]) = v16;
  BYTE1(v49[0]) = v15;
  BYTE2(v49[0]) = v20;
  BYTE3(v49[0]) = v19;
  char v52 = 8;
  if (v16 != v20)
  {
    sub_19E5E2970((uint64_t)v49, (uint64_t)v48);
    sub_19E5E1864();
    goto LABEL_49;
  }
  sub_19E607D84((uint64_t)v49);
LABEL_24:
  switch((int)v5)
  {
    case 1:
    case 3:
      __int16 v21 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      char v22 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      __int16 v21 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      char v22 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      __int16 v21 = (unsigned __int8 *)(v4 + 48);
      char v22 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v23 = *v22;
  unsigned int v24 = *v21;
  uint64_t v47 = a2;
  switch((int)v9)
  {
    case 1:
    case 3:
      uint64_t v25 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v26 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v25 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v26 = (unsigned __int8 *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v25 = (unsigned __int8 *)(v3 + 48);
      uint64_t v26 = (unsigned __int8 *)(v3 + 49);
      break;
  }
  int v27 = *v26;
  __int16 v28 = *v25;
  if (v23) {
    int v29 = 256;
  }
  else {
    int v29 = 0;
  }
  uint64_t v30 = v29 | v24;
  if (v27) {
    __int16 v31 = 256;
  }
  else {
    __int16 v31 = 0;
  }
  v48[0] = v4;
  __int16 v32 = sub_19E636D20(v30, v31 | v28) & 0x1FF;
  sub_19E6019D0(v32, v49);
  sub_19E6019D0(v32, v48);
  uint64_t v33 = v49[0];
  uint64_t v34 = v48[0];
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v35 = (void *)v48[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v33;
  *(void *)(inited + 40) = v34;
  unint64_t v5 = v33 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)v49);
  swift_bridgeObjectRelease();
  sub_19E601010(v35);
  uint64_t v4 = v50;
  uint64_t v37 = v51;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_19EC365B0;
  *(void *)(v38 + 32) = v33;
  *(void *)(v38 + 40) = v34;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v39 = swift_initStackObject();
  *(_OWORD *)(v39 + 16) = xmmword_19EC36240;
  *(void *)(v39 + 32) = v12;
  *(_WORD *)(v39 + 40) = 0;
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 48);
  swift_retain();
  swift_retain();
  uint64_t v41 = v40(4, v38, v39, v4, v37);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v41 + 16))
  {
    __break(1u);
LABEL_43:
    switch(v5)
    {
      case 1uLL:
      case 3uLL:
        unint64_t v44 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2uLL:
        unint64_t v44 = (uint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        unint64_t v44 = (uint64_t *)(v4 + 40);
        break;
    }
    uint64_t v45 = *v44;
    swift_bridgeObjectRetain();
    uint64_t v46 = swift_bridgeObjectRetain();
    v49[0] = v45;
    v49[1] = v46;
    char v52 = 1;
    sub_19E5E2970((uint64_t)v49, (uint64_t)v48);
    sub_19E5E1864();
LABEL_49:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E615DACLL);
  }
  uint64_t v42 = *(void *)(v41 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *uint64_t v47 = v42;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v49);
}

uint64_t static MLTensor..<= infix(_:_:)(uint64_t *a1, void *a2)
{
  return sub_19E615E44(a1, a2, (uint64_t (*)(void *))sub_19E6157D8);
}

uint64_t sub_19E615E44(uint64_t *a1, void *a2, uint64_t (*a3)(void *))
{
  uint64_t v3 = *a1;
  v5[0] = *a2;
  v5[1] = v3;
  return a3(v5);
}

uint64_t sub_19E615E84(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v4) {
    int64_t v6 = *(void *)(a1 + 16);
  }
  else {
    int64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v38 = MEMORY[0x1E4FBC860];
  sub_19E66F600(0, v6, 0);
  int64_t v7 = v6;
  int64_t v34 = v5;
  unint64_t v35 = v4;
  uint64_t v37 = a1;
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 32);
    unint64_t v9 = (uint64_t *)(a2 + 32);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v11 = a2;
    while (v4)
    {
      if (!v5) {
        goto LABEL_42;
      }
      uint64_t v12 = *v9;
      if (!*v9) {
        goto LABEL_43;
      }
      if (*v8 == 0x8000000000000000 && v12 == -1) {
        goto LABEL_44;
      }
      uint64_t v14 = *v8 / v12;
      if (v14 <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = v14;
      }
      unint64_t v17 = *(void *)(v38 + 16);
      unint64_t v16 = *(void *)(v38 + 24);
      if (v17 >= v16 >> 1)
      {
        uint64_t v32 = v11;
        uint64_t result = sub_19E66F600(v16 > 1, v17 + 1, 1);
        uint64_t v11 = v32;
      }
      --v5;
      *(void *)(v38 + 16) = v17 + 1;
      *(void *)(v38 + 8 * v17 + 32) = v15;
      --v4;
      ++v9;
      ++v8;
      if (!--v6) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v11 = a2;
LABEL_21:
    if (v35 <= v34)
    {
LABEL_40:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v38;
    }
    uint64_t v18 = 0;
    if (v7 <= v34) {
      int64_t v19 = v34;
    }
    else {
      int64_t v19 = v7;
    }
    int64_t v20 = v19 - v7;
    unint64_t v21 = v35 - v7;
    uint64_t v22 = 8 * v7 + 32;
    uint64_t v23 = v37 + v22;
    uint64_t v24 = v11 + v22;
    while (v21 != v18)
    {
      if (v34 - v7 == v18) {
        goto LABEL_40;
      }
      if (v20 == v18) {
        goto LABEL_46;
      }
      uint64_t v25 = *(void *)(v24 + 8 * v18);
      if (!v25) {
        goto LABEL_47;
      }
      uint64_t v26 = *(void *)(v23 + 8 * v18);
      if (v26 == 0x8000000000000000 && v25 == -1) {
        goto LABEL_48;
      }
      uint64_t v28 = v26 / v25;
      if (v28 <= 1) {
        uint64_t v29 = 1;
      }
      else {
        uint64_t v29 = v28;
      }
      unint64_t v31 = *(void *)(v38 + 16);
      unint64_t v30 = *(void *)(v38 + 24);
      if (v31 >= v30 >> 1)
      {
        uint64_t v33 = v11;
        uint64_t v36 = v20;
        uint64_t result = sub_19E66F600(v30 > 1, v31 + 1, 1);
        int64_t v20 = v36;
        uint64_t v11 = v33;
      }
      *(void *)(v38 + 16) = v31 + 1;
      *(void *)(v38 + 8 * v31 + 32) = v29;
      if (v21 == ++v18) {
        goto LABEL_40;
      }
    }
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t MLTensor.gathering(atIndices:alongAxis:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *v3;
  v6[0] = *a1;
  v6[1] = v4;
  return MLTensor.gathering(atIndices:alongAxis:batchDimensionCount:)(v6, a2, 0, a3);
}

uint64_t MLTensor.gathering(atIndices:alongAxis:batchDimensionCount:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int64_t v6 = (unsigned __int8 *)*a1;
  unint64_t v7 = *v4;
  uint64_t v8 = *a1 >> 62;
  switch(v8)
  {
    case 1:
    case 3:
      uint64_t v12 = (unsigned __int8 *)(((unint64_t)v6 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      BOOL v13 = (char *)(((unint64_t)v6 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v12 = (unsigned __int8 *)(((unint64_t)v6 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      BOOL v13 = (char *)(((unint64_t)v6 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v12 = v6 + 48;
      BOOL v13 = (char *)(v6 + 49);
      break;
  }
  char v14 = *v13;
  int v15 = *v12;
  LOBYTE(v60) = v15;
  BYTE1(v60) = v14;
  char v61 = &unk_1EF0CA458;
  LOBYTE(v62) = 1;
  char v65 = 9;
  if ((v15 - 1) > 7) {
    goto LABEL_66;
  }
  sub_19E607D84((uint64_t)&v60);
  unint64_t v16 = v7 >> 62;
  switch(v7 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v17 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v17 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v17 = v7 + 40;
      break;
  }
  uint64_t v18 = *(void *)(*(void *)v17 + 16);
  uint64_t v60 = a2;
  char v61 = (void *)v18;
  char v65 = 6;
  if (-v18 > a2 || v18 <= a2) {
    goto LABEL_66;
  }
  sub_19E607D84((uint64_t)&v60);
  uint64_t v20 = (v18 & (a2 >> 63)) + a2;
  uint64_t v21 = v16;
  switch((int)v16)
  {
    case 1:
    case 3:
      uint64_t v22 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v22 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v22 = v7 + 40;
      break;
  }
  uint64_t v23 = *(void *)(*(void *)v22 + 16);
  uint64_t v60 = v20;
  char v61 = (void *)v23;
  char v65 = 6;
  if (v20 < -v23 || v20 >= v23)
  {
LABEL_66:
    sub_19E5E2970((uint64_t)&v60, (uint64_t)&v59);
    sub_19E5E1864();
    goto LABEL_67;
  }
  sub_19E607D84((uint64_t)&v60);
  if (v20 < a3)
  {
LABEL_67:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E616884);
  }
  switch((int)v16)
  {
    case 1:
    case 3:
      uint64_t v25 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v25 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v25 = v7 + 40;
      break;
  }
  if (v20 < 0)
  {
    __break(1u);
    goto LABEL_58;
  }
  uint64_t v26 = *(void *)v25;
  if (*(void *)(*(void *)v25 + 16) < (unint64_t)v20)
  {
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  switch((int)v8)
  {
    case 1:
    case 3:
      uint64_t v27 = ((unint64_t)v6 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v27 = ((unint64_t)v6 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v27 = (uint64_t)(v6 + 40);
      break;
  }
  uint64_t v28 = *(void *)v27;
  uint64_t v29 = *(void *)(*(void *)v27 + 16);
  if (v29 < a3) {
    goto LABEL_59;
  }
  if (a3 < 0)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v60 = v26;
  char v61 = (void *)(v26 + 32);
  unint64_t v5 = (2 * v29) | 1;
  uint64_t v62 = 0;
  uint64_t v63 = (2 * v20) | 1;
  swift_bridgeObjectRetain();
  uint64_t v30 = swift_bridgeObjectRetain();
  sub_19E60A470(v30, v28 + 32, a3, v5);
  swift_bridgeObjectRelease();
  switch(v21)
  {
    case 1:
    case 3:
      uint64_t v31 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v31 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v31 = v7 + 40;
      break;
  }
  uint64_t v32 = *(void *)v31;
  unint64_t v33 = *(void *)(*(void *)v31 + 16);
  if (v33 <= v20) {
    goto LABEL_61;
  }
  char v54 = a4;
  unint64_t v34 = (2 * v33) | 1;
  uint64_t v35 = swift_bridgeObjectRetain();
  sub_19E60A470(v35, v32 + 32, v20 + 1, v34);
  swift_bridgeObjectRelease();
  uint64_t v37 = v61;
  uint64_t v36 = v60;
  unint64_t v39 = v63;
  uint64_t v38 = v62;
  if (v63)
  {
    uint64_t v58 = (uint64_t)v6;
    uint64_t v41 = v20;
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t))a3;
    sub_19EBF73A8();
    swift_unknownObjectRetain_n();
    uint64_t v43 = v36;
    uint64_t v44 = swift_dynamicCastClass();
    if (!v44)
    {
      swift_unknownObjectRelease();
      uint64_t v44 = MEMORY[0x1E4FBC860];
    }
    uint64_t v45 = *(void *)(v44 + 16);
    swift_release();
    if (!__OFSUB__(v39 >> 1, v38))
    {
      if (v45 == (v39 >> 1) - v38)
      {
        uint64_t v40 = swift_dynamicCastClass();
        a3 = (uint64_t)v42;
        uint64_t v20 = v41;
        int64_t v6 = (unsigned __int8 *)v58;
        if (!v40)
        {
          swift_unknownObjectRelease();
          uint64_t v40 = MEMORY[0x1E4FBC860];
        }
        goto LABEL_50;
      }
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    uint64_t v40 = sub_19E5DDDB0(v36, (uint64_t)v37, v38, v39);
LABEL_50:
    swift_unknownObjectRelease();
    uint64_t v56 = v40;
    switch(v21)
    {
      case 1:
      case 3:
        uint64_t v46 = (unsigned char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        uint64_t v47 = (char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 33);
        break;
      case 2:
        uint64_t v46 = (unsigned char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        uint64_t v47 = (char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 25);
        break;
      default:
        uint64_t v46 = (unsigned char *)(v7 + 48);
        uint64_t v47 = (char *)(v7 + 49);
        break;
    }
    uint64_t v57 = v20;
    uint64_t v58 = a3;
    char v55 = *v47;
    LOBYTE(v20) = *v46;
    uint64_t v59 = v6;
    sub_19E6019D0(7, &v60);
    unint64_t v5 = v60;
    if (qword_1E945BB70 != -1) {
LABEL_62:
    }
      swift_once();
    sub_19EBF75A8();
    unint64_t v48 = v59;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
    *(void *)(inited + 32) = v7;
    *(void *)(inited + 40) = v5;
    unint64_t v39 = v7 & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v21 = v5 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_retain();
    sub_19E634690(inited, (uint64_t)&v60);
    swift_bridgeObjectRelease();
    sub_19E601010(v48);
    uint64_t v50 = v63;
    uint64_t v41 = v64;
    uint64_t v37 = __swift_project_boxed_opaque_existential_1(&v60, v63);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_19EC365B0;
    *(void *)(v43 + 32) = v7;
    *(void *)(v43 + 40) = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
    unint64_t v7 = swift_initStackObject();
    *(void *)(v7 + 32) = v56;
    uint64_t v38 = v7 + 32;
    *(_OWORD *)(v7 + 16) = xmmword_19EC36240;
    *(unsigned char *)(v7 + 40) = v20;
    *(unsigned char *)(v7 + 41) = v55;
    uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t))(v41 + 208);
    swift_retain();
    swift_retain();
    uint64_t v51 = v42(v57, v58, 0, v43, v7, v50, v41);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_bridgeObjectRelease();
    if (*(void *)(v51 + 16)) {
      break;
    }
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    uint64_t v36 = v43;
    swift_unknownObjectRelease();
    a3 = (uint64_t)v42;
    uint64_t v20 = v41;
    int64_t v6 = (unsigned __int8 *)v58;
  }
  uint64_t v52 = *(void *)(v51 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  *char v54 = v52;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v60);
}

uint64_t MLTensor.gathering(atIndices:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *v2;
  v5[0] = *a1;
  v5[1] = v3;
  return sub_19E616934(v5, 0, a2);
}

uint64_t sub_19E616934@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  unint64_t v6 = *v3;
  unint64_t v7 = (unint64_t)*a1 >> 62;
  switch(v7)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v10 = (unsigned __int8 *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v11 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v10 = (unsigned __int8 *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v11 = (char *)((v5 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v10 = (unsigned __int8 *)(v5 + 48);
      uint64_t v11 = (char *)(v5 + 49);
      break;
  }
  char v12 = *v11;
  int v13 = *v10;
  LOBYTE(v64) = v13;
  BYTE1(v64) = v12;
  char v65 = &unk_1EF0CA428;
  LOBYTE(v66) = 1;
  char v69 = 9;
  char v14 = &v64;
  if ((v13 - 1) > 7)
  {
LABEL_78:
    sub_19E5E2970((uint64_t)v14, (uint64_t)v63);
    sub_19E5E1864();
    goto LABEL_87;
  }
  sub_19E607D84((uint64_t)&v64);
  switch((int)v7)
  {
    case 1:
    case 3:
      uint64_t v15 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v15 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v15 = v5 + 40;
      break;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v16 = *(void *)v15;
  if (*(void *)(*(void *)v15 + 16) < a2)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v17 = (void *)(v16 + 32);
  uint64_t v18 = (2 * a2) | 1;
  unint64_t v4 = v6 >> 62;
  switch(v6 >> 62)
  {
    case 1uLL:
    case 3uLL:
      int64_t v19 = (uint64_t *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      int64_t v19 = (uint64_t *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      int64_t v19 = (uint64_t *)(v6 + 40);
      break;
  }
  uint64_t v20 = *v19;
  if (*(void *)(v20 + 16) < a2) {
    goto LABEL_61;
  }
  unint64_t v62 = v6;
  if ((sub_19E6182E0(v20 + 32, 0, (2 * a2) | 1, v16 + 32, 0, (2 * a2) | 1) & 1) == 0)
  {
    uint64_t v64 = 0;
    char v65 = (void *)0xE000000000000000;
    swift_bridgeObjectRetain();
    sub_19EBF6FE8();
    sub_19EBF67D8();
    sub_19EBF6F68();
    sub_19EBF67D8();
    swift_bridgeObjectRelease();
    char v14 = (uint64_t *)sub_19EBF67D8();
    switch((int)v4)
    {
      case 1:
      case 3:
        uint64_t v54 = (v6 & 0x3FFFFFFFFFFFFFFFLL) + 24;
        break;
      case 2:
        uint64_t v54 = (v6 & 0x3FFFFFFFFFFFFFFFLL) + 16;
        break;
      default:
        uint64_t v54 = v6 + 40;
        break;
    }
    if (*(void *)(*(void *)v54 + 16) >= a2) {
      goto LABEL_88;
    }
    __break(1u);
    goto LABEL_78;
  }
  switch((int)v7)
  {
    case 1:
    case 3:
      uint64_t v21 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v21 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v21 = v5 + 40;
      break;
  }
  uint64_t v22 = *(void *)v21;
  unint64_t v6 = *(void *)(*(void *)v21 + 16);
  uint64_t v64 = -1;
  char v65 = (void *)v6;
  char v69 = 6;
  if (!v6)
  {
    sub_19E5E2970((uint64_t)&v64, (uint64_t)v63);
    swift_bridgeObjectRetain();
LABEL_81:
    swift_bridgeObjectRetain();
    sub_19E5E1864();
    goto LABEL_87;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E607D84((uint64_t)&v64);
  if (v6 <= a2) {
    goto LABEL_62;
  }
  unint64_t v23 = *(void *)(v22 + 16);
  if (v23 < a2 || v23 < v6 - 1) {
    goto LABEL_63;
  }
  unint64_t v58 = (2 * (v6 - 1)) | 1;
  uint64_t v59 = v22 + 32;
  unint64_t v6 = v62;
  uint64_t v61 = v22;
  switch((int)v7)
  {
    case 1:
    case 3:
      uint64_t v24 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v24 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v24 = v5 + 40;
      break;
  }
  uint64_t v25 = *(void *)v24;
  unint64_t v26 = *(void *)(*(void *)v24 + 16);
  uint64_t v64 = -1;
  char v65 = (void *)v26;
  char v69 = 6;
  if (!v26)
  {
    sub_19E5E2970((uint64_t)&v64, (uint64_t)v63);
    goto LABEL_81;
  }
  swift_bridgeObjectRetain();
  sub_19E607D84((uint64_t)&v64);
  if (v26 > *(void *)(v25 + 16))
  {
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  uint64_t v60 = v16;
  uint64_t v27 = *(void *)(v25 + 8 * v26 + 24);
  swift_bridgeObjectRelease();
  uint64_t v28 = v4;
  switch((int)v4)
  {
    case 1:
    case 3:
      uint64_t v29 = (v62 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v29 = (v62 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v29 = v62 + 40;
      break;
  }
  if (*(void *)(*(void *)v29 + 16) < v27)
  {
    uint64_t v64 = 0;
    char v65 = (void *)0xE000000000000000;
    sub_19EBF6FE8();
    sub_19EBF67D8();
    v63[0] = v27;
    sub_19EBF7318();
    sub_19EBF67D8();
    swift_bridgeObjectRelease();
    sub_19EBF67D8();
    switch((int)v4)
    {
      case 1:
      case 3:
        uint64_t v55 = (v62 & 0x3FFFFFFFFFFFFFFFLL) + 24;
        break;
      case 2:
        uint64_t v55 = (v62 & 0x3FFFFFFFFFFFFFFFLL) + 16;
        break;
      default:
        uint64_t v55 = v62 + 40;
        break;
    }
    v63[0] = *(void *)(*(void *)v55 + 16);
    sub_19EBF7318();
    sub_19EBF67D8();
    swift_bridgeObjectRelease();
    sub_19EBF67D8();
    while (1)
    {
LABEL_87:
      sub_19EBF71F8();
      __break(1u);
LABEL_88:
      swift_bridgeObjectRetain();
      sub_19EBF6F68();
      sub_19EBF67D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_19EBF67D8();
    }
  }
  uint64_t v57 = a3;
  switch((int)v4)
  {
    case 1:
    case 3:
      uint64_t v30 = (v62 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v30 = (v62 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v30 = v62 + 40;
      break;
  }
  uint64_t v31 = a2 + v27;
  if (__OFADD__(a2, v27)) {
    goto LABEL_65;
  }
  unint64_t v6 = *(void *)v30;
  uint64_t v32 = *(void *)(*(void *)v30 + 16);
  if (v32 < v31)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if (v31 < 0)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  uint64_t v64 = v60;
  char v65 = v17;
  uint64_t v33 = a2;
  unint64_t v34 = (2 * v32) | 1;
  uint64_t v66 = 0;
  uint64_t v67 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v35 = v59;
  uint64_t v59 = v33;
  sub_19E60A470(v61, v35, v33, v58);
  swift_bridgeObjectRelease();
  uint64_t v36 = swift_unknownObjectRetain();
  sub_19E60A470(v36, v6 + 32, v31, v34);
  swift_bridgeObjectRelease();
  uint64_t v37 = (void *)v64;
  uint64_t v38 = (uint64_t)v65;
  unint64_t v40 = v67;
  uint64_t v39 = v66;
  if (v67)
  {
    sub_19EBF73A8();
    swift_unknownObjectRetain_n();
    uint64_t v42 = swift_dynamicCastClass();
    if (!v42)
    {
      swift_unknownObjectRelease();
      uint64_t v42 = MEMORY[0x1E4FBC860];
    }
    uint64_t v43 = *(void *)(v42 + 16);
    swift_release();
    if (!__OFSUB__(v40 >> 1, v39))
    {
      if (v43 == (v40 >> 1) - v39)
      {
        uint64_t v41 = swift_dynamicCastClass();
        if (!v41)
        {
          swift_unknownObjectRelease();
          uint64_t v41 = MEMORY[0x1E4FBC860];
        }
        goto LABEL_52;
      }
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  while (1)
  {
    uint64_t v41 = sub_19E5DDDB0((uint64_t)v37, v38, v39, v40);
LABEL_52:
    swift_unknownObjectRelease();
    unint64_t v6 = v62;
    unint64_t v58 = v41;
    switch(v28)
    {
      case 1:
      case 3:
        uint64_t v44 = (unsigned char *)((v62 & 0x3FFFFFFFFFFFFFFFLL) + 32);
        uint64_t v45 = (char *)((v62 & 0x3FFFFFFFFFFFFFFFLL) + 33);
        break;
      case 2:
        uint64_t v44 = (unsigned char *)((v62 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        uint64_t v45 = (char *)((v62 & 0x3FFFFFFFFFFFFFFFLL) + 25);
        break;
      default:
        uint64_t v44 = (unsigned char *)(v62 + 48);
        uint64_t v45 = (char *)(v62 + 49);
        break;
    }
    char v56 = *v45;
    LOBYTE(v4) = *v44;
    v63[0] = v5;
    sub_19E6019D0(7, &v64);
    a2 = v64;
    if (qword_1E945BB70 != -1) {
LABEL_68:
    }
      swift_once();
    sub_19EBF75A8();
    uint64_t v46 = (void *)v63[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
    *(void *)(inited + 32) = v6;
    *(void *)(inited + 40) = a2;
    unint64_t v40 = v6 & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v48 = v6;
    uint64_t v38 = a2 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_retain();
    sub_19E634690(inited, (uint64_t)&v64);
    swift_bridgeObjectRelease();
    sub_19E601010(v46);
    uint64_t v28 = v67;
    uint64_t v49 = v68;
    uint64_t v37 = __swift_project_boxed_opaque_existential_1(&v64, v67);
    uint64_t v50 = swift_allocObject();
    *(_OWORD *)(v50 + 16) = xmmword_19EC365B0;
    *(void *)(v50 + 32) = v48;
    *(void *)(v50 + 40) = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
    uint64_t v39 = swift_initStackObject();
    *(void *)(v39 + 32) = v58;
    *(_OWORD *)(v39 + 16) = xmmword_19EC36240;
    *(unsigned char *)(v39 + 40) = v4;
    *(unsigned char *)(v39 + 41) = v56;
    uint64_t v51 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 208);
    swift_retain();
    swift_retain();
    uint64_t v5 = v51(v59, 0, 1, v50, v39, v28, v49);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_bridgeObjectRelease();
    if (*(void *)(v5 + 16)) {
      break;
    }
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    swift_unknownObjectRelease();
  }
  uint64_t v52 = *(void *)(v5 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v57 = v52;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v64);
}

uint64_t MLTensor.replacing<A>(atIndices:with:alongAxis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v12 = *(void *)(a4 - 8);
  int v13 = (unint64_t *)MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = *v13;
  unint64_t v17 = *v6;
  v32[1] = v17;
  __int16 v19 = sub_19E6C1448(v18, 1);
  switch(v17 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v20 = (unsigned __int8 *)((v17 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v21 = (unsigned char *)((v17 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v20 = (unsigned __int8 *)((v17 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v21 = (unsigned char *)((v17 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v20 = (unsigned __int8 *)(v17 + 48);
      uint64_t v21 = (unsigned char *)(v17 + 49);
      break;
  }
  int v22 = *v20;
  if (v22 == v19)
  {
LABEL_10:
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, a4);
    nullsub_1(a4, a5, v28);
    MLTensor.init<A>(_:scalarType:)((uint64_t)v15, a4, v32);
  }
  else
  {
    uint64_t v23 = v19 & 0x1FF;
    if (*v21) {
      __int16 v24 = 256;
    }
    else {
      __int16 v24 = 0;
    }
    char v25 = sub_19E636D20(v23, v24 | (unsigned __int16)v22);
    unint64_t v26 = &protocol witness table for Bool;
    uint64_t v27 = MEMORY[0x1E4FBB390];
    switch(v25)
    {
      case 1:
        unint64_t v26 = &protocol witness table for UInt8;
        uint64_t v27 = MEMORY[0x1E4FBC358];
        break;
      case 2:
        unint64_t v26 = &protocol witness table for UInt16;
        uint64_t v27 = MEMORY[0x1E4FBC450];
        break;
      case 3:
        unint64_t v26 = &protocol witness table for UInt32;
        uint64_t v27 = MEMORY[0x1E4FBC4C0];
        break;
      case 4:
      case 8:
      case 11:
        goto LABEL_10;
      case 5:
        unint64_t v26 = &protocol witness table for Int8;
        uint64_t v27 = MEMORY[0x1E4FBC098];
        break;
      case 6:
        unint64_t v26 = &protocol witness table for Int16;
        uint64_t v27 = MEMORY[0x1E4FBC0F8];
        break;
      case 7:
        unint64_t v26 = &protocol witness table for Int32;
        uint64_t v27 = MEMORY[0x1E4FBC150];
        break;
      case 9:
        unint64_t v26 = &protocol witness table for Float16;
        uint64_t v27 = MEMORY[0x1E4FBC5E0];
        break;
      case 10:
        unint64_t v26 = &protocol witness table for Float;
        uint64_t v27 = MEMORY[0x1E4FBB470];
        break;
      default:
        break;
    }
    sub_19E636C40(v27, a4, v27, (uint64_t)v26, v32);
  }
  unint64_t v30 = v16;
  unint64_t v31 = v32[0];
  sub_19E617748(&v31, &v30, a3, 5u, a6);
  return swift_release();
}

uint64_t sub_19E617748@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, void *a5@<X8>)
{
  unint64_t v6 = *a1;
  unint64_t v7 = *a2;
  unint64_t v8 = *v5;
  switch(*a1 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v11 = (v6 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v11 = (v6 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v11 = v6 + 40;
      break;
  }
  uint64_t v12 = *(void *)(*(void *)v11 + 16);
  unint64_t v13 = v7 >> 62;
  switch(v7 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v14 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v14 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v14 = v7 + 40;
      break;
  }
  if (v12 == *(void *)(*(void *)v14 + 16))
  {
    swift_retain();
  }
  else
  {
    v78[0] = *a1;
    switch((int)v13)
    {
      case 1:
      case 3:
        uint64_t v15 = (void **)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2:
        uint64_t v15 = (void **)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        uint64_t v15 = (void **)(v7 + 40);
        break;
    }
    unint64_t v16 = *v15;
    swift_bridgeObjectRetain();
    swift_retain_n();
    sub_19E602538(v16, &v79);
    swift_release_n();
    swift_bridgeObjectRelease();
    unint64_t v17 = v79;
    v78[0] = v79;
    switch((int)v13)
    {
      case 0:
        uint64_t v18 = (uint64_t *)(v7 + 40);
        break;
      case 1:
      case 3:
        uint64_t v18 = (uint64_t *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2:
        uint64_t v18 = (uint64_t *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
LABEL_88:
        JUMPOUT(0);
    }
    uint64_t v19 = *v18;
    swift_bridgeObjectRetain();
    switch(v17 >> 62)
    {
      case 1uLL:
      case 3uLL:
        uint64_t v20 = (uint64_t *)((v17 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2uLL:
        uint64_t v20 = (uint64_t *)((v17 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        uint64_t v20 = (uint64_t *)(v17 + 40);
        break;
    }
    uint64_t v21 = *v20;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v22 = sub_19E615E84(v19, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    MLTensor.tiled(multiples:)(v22, &v79);
    swift_release_n();
    swift_bridgeObjectRelease();
    unint64_t v6 = v79;
  }
  unint64_t v13 = v13;
  switch((int)v13)
  {
    case 1:
    case 3:
      uint64_t v23 = (unsigned __int8 *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v23 = (unsigned __int8 *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      uint64_t v23 = (unsigned __int8 *)(v7 + 48);
      break;
  }
  if (*v23 - 1 > 7) {
    goto LABEL_81;
  }
  switch((int)v13)
  {
    case 1:
    case 3:
      __int16 v24 = (void **)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      __int16 v24 = (void **)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      __int16 v24 = (void **)(v7 + 40);
      break;
  }
  char v25 = *v24;
  swift_bridgeObjectRetain();
  switch(v6 >> 62)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v26 = (void **)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      unint64_t v26 = (void **)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      unint64_t v26 = (void **)(v6 + 40);
      break;
  }
  uint64_t v27 = *v26;
  swift_bridgeObjectRetain();
  BOOL v28 = sub_19E5DDC7C(v25, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v28) {
    goto LABEL_80;
  }
  switch(v6 >> 62)
  {
    case 0uLL:
      uint64_t v29 = v6 + 40;
      goto LABEL_42;
    case 1uLL:
    case 3uLL:
      uint64_t v29 = (v6 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      goto LABEL_42;
    case 2uLL:
      uint64_t v29 = (v6 & 0x3FFFFFFFFFFFFFFFLL) + 16;
LABEL_42:
      unint64_t v30 = *(void *)(*(void *)v29 + 16);
      unint64_t v31 = v8 >> 62;
      switch(v8 >> 62)
      {
        case 1uLL:
        case 3uLL:
          uint64_t v32 = (v8 & 0x3FFFFFFFFFFFFFFFLL) + 24;
          break;
        case 2uLL:
          uint64_t v32 = (v8 & 0x3FFFFFFFFFFFFFFFLL) + 16;
          break;
        default:
          uint64_t v32 = v8 + 40;
          break;
      }
      unint64_t v33 = *(void *)(*(void *)v32 + 16);
      unint64_t v79 = v30;
      unint64_t v80 = v33;
      char v83 = 3;
      if (v30 != v33) {
        goto LABEL_84;
      }
      sub_19E607D84((uint64_t)&v79);
      uint64_t v34 = v31;
      switch((int)v31)
      {
        case 1:
        case 3:
          uint64_t v35 = (v8 & 0x3FFFFFFFFFFFFFFFLL) + 24;
          break;
        case 2:
          uint64_t v35 = (v8 & 0x3FFFFFFFFFFFFFFFLL) + 16;
          break;
        default:
          uint64_t v35 = v8 + 40;
          break;
      }
      int64_t v36 = *(void *)(*(void *)v35 + 16);
      unint64_t v79 = a3;
      unint64_t v80 = v36;
      char v83 = 6;
      if (-v36 > a3 || v36 <= a3)
      {
LABEL_84:
        sub_19E5E2970((uint64_t)&v79, (uint64_t)v78);
        sub_19E5E1864();
        while (1)
        {
LABEL_80:
          sub_19EBF71F8();
          __break(1u);
LABEL_81:
          unint64_t v79 = 0;
          unint64_t v80 = 0xE000000000000000;
          sub_19EBF6FE8();
          sub_19EBF67D8();
          switch(v13)
          {
            case 1uLL:
            case 3uLL:
              uint64_t v73 = (char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 32);
              break;
            case 2uLL:
              uint64_t v73 = (char *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 24);
              break;
            default:
              uint64_t v73 = (char *)(v7 + 48);
              break;
          }
          sub_19E6C1A2C(*v73);
          sub_19EBF67D8();
          swift_bridgeObjectRelease();
          sub_19EBF67D8();
        }
      }
      sub_19E607D84((uint64_t)&v79);
      uint64_t v77 = (v36 & (a3 >> 63)) + a3;
      switch((int)v13)
      {
        case 1:
        case 3:
          uint64_t v38 = (uint64_t *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 24);
          break;
        case 2:
          uint64_t v38 = (uint64_t *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 16);
          break;
        default:
          uint64_t v38 = (uint64_t *)(v7 + 40);
          break;
      }
      uint64_t v39 = *v38;
      switch(v34)
      {
        case 1:
        case 3:
          unint64_t v40 = (uint64_t *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 24);
          uint64_t v41 = *(void *)(v39 + 16);
          if (!v41) {
            goto LABEL_71;
          }
          goto LABEL_65;
        case 2:
          unint64_t v40 = (uint64_t *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 16);
          uint64_t v41 = *(void *)(v39 + 16);
          if (v41) {
            goto LABEL_65;
          }
          goto LABEL_71;
        default:
          unint64_t v40 = (uint64_t *)(v8 + 40);
          uint64_t v41 = *(void *)(v39 + 16);
          if (!v41) {
            goto LABEL_71;
          }
LABEL_65:
          uint64_t v42 = *v40;
          uint64_t v43 = *(void *)(v42 + 16);
          if (!v43) {
            goto LABEL_71;
          }
          uint64_t v44 = (uint64_t *)(v39 + 32);
          uint64_t v45 = (uint64_t *)(v42 + 32);
          uint64_t v46 = v43 - 1;
          uint64_t v47 = v41 - 1;
          uint64_t v48 = (v36 & (a3 >> 63)) + a3;
          break;
      }
      do
      {
        uint64_t v49 = v46;
        uint64_t v51 = *v44++;
        uint64_t v50 = v51;
        uint64_t v53 = *v45++;
        uint64_t v52 = v53;
        if (v48 && v50 != v52) {
          goto LABEL_80;
        }
        if (!v47) {
          break;
        }
        --v48;
        uint64_t v46 = v49 - 1;
        --v47;
      }
      while (v49);
LABEL_71:
      uint64_t v75 = v34;
      long long v74 = a5;
      v78[0] = v7;
      sub_19E6019D0(7, &v79);
      unint64_t v54 = v79;
      if (qword_1E945BB70 != -1) {
        swift_once();
      }
      sub_19EBF75A8();
      uint64_t v55 = (void *)v78[0];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_19EC365F0;
      *(void *)(inited + 32) = v8;
      *(void *)(inited + 40) = v6;
      *(void *)(inited + 4_Block_object_dispose(&STACK[0x278], 8) = v54;
      uint64_t v57 = v8 & 0x3FFFFFFFFFFFFFFFLL;
      unint64_t v13 = v54 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_19E634690(inited, (uint64_t)&v79);
      unint64_t v58 = v8;
      swift_bridgeObjectRelease();
      sub_19E601010(v55);
      uint64_t v59 = v81;
      uint64_t v60 = v82;
      __swift_project_boxed_opaque_existential_1(&v79, v81);
      uint64_t v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_19EC365F0;
      *(void *)(v61 + 32) = v58;
      *(void *)(v61 + 40) = v6;
      *(void *)(v61 + 4_Block_object_dispose(&STACK[0x278], 8) = v54;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
      uint64_t v62 = swift_initStackObject();
      *(_OWORD *)(v62 + 16) = xmmword_19EC36240;
      uint64_t v63 = v62;
      switch(v75)
      {
        case 1:
        case 3:
          uint64_t v64 = (void *)(v57 + 24);
          char v65 = (char *)(v57 + 32);
          uint64_t v66 = (char *)(v57 + 33);
          break;
        case 2:
          uint64_t v64 = (void *)(v57 + 16);
          char v65 = (char *)(v57 + 24);
          uint64_t v66 = (char *)(v57 + 25);
          break;
        default:
          uint64_t v64 = (void *)(v58 + 40);
          char v65 = (char *)(v58 + 48);
          uint64_t v66 = (char *)(v58 + 49);
          break;
      }
      char v67 = *v66;
      char v68 = *v65;
      *(void *)(v62 + 32) = *v64;
      *(unsigned char *)(v62 + 40) = v68;
      *(unsigned char *)(v62 + 41) = v67;
      char v69 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 216);
      swift_retain();
      unint64_t v7 = v6 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v70 = v69(v77, a4, v61, v63, v59, v60);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_bridgeObjectRelease();
      if (!*(void *)(v70 + 16))
      {
        __break(1u);
        goto LABEL_80;
      }
      uint64_t v71 = *(void *)(v70 + 32);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_release();
      *long long v74 = v71;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v79);
      return swift_release();
    default:
      goto LABEL_88;
  }
}

uint64_t MLTensor.replacing(with:atIndices:alongAxis:)@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *v4;
  v9[0] = *a1;
  v9[1] = v6;
  unint64_t v8 = v5;
  return sub_19E617748(v9, &v8, a3, 5u, a4);
}

BOOL sub_19E61826C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t sub_19E618280@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_19E618600(*a1);
  *a2 = result;
  return result;
}

void sub_19E6182AC(void *a1@<X8>)
{
  *a1 = *v1;
}

void sub_19E6182B8(void *a1@<X8>)
{
  *a1 = &unk_1EF0C5FF0;
}

uint64_t sub_19E6182C8()
{
  return qword_19EC368B8[*v0];
}

uint64_t sub_19E6182E0(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6 = a3 >> 1;
  uint64_t v7 = (a3 >> 1) - a2;
  if (!__OFSUB__(a3 >> 1, a2))
  {
    int64_t v8 = a6 >> 1;
    if (__OFSUB__(a6 >> 1, a5)) {
      goto LABEL_20;
    }
    if (v7 != (a6 >> 1) - a5) {
      return 0;
    }
    if (!v7) {
      return 1;
    }
    unint64_t v9 = (uint64_t *)(result + 8 * a2);
    if (v9 == (uint64_t *)(a4 + 8 * a5) || v6 == a2) {
      return 1;
    }
    if (v6 <= a2) {
      goto LABEL_22;
    }
    uint64_t v10 = a2 + 1;
    uint64_t v11 = *v9;
    if (v6 == a2) {
      return 1;
    }
    uint64_t v12 = a5;
    if (v8 == a5) {
      return 0;
    }
    while (v12 >= a5 && v12 < v8)
    {
      if (v11 != *(void *)(a4 + 8 * v12)) {
        return 0;
      }
      if (v6 == v10) {
        return 1;
      }
      if (v10 >= v6) {
        goto LABEL_21;
      }
      uint64_t v11 = *(void *)(result + 8 * v10++);
      if (v8 == ++v12) {
        return 0;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for ReductionKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ReductionKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19E618510);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReductionKind()
{
  return &type metadata for ReductionKind;
}

unint64_t sub_19E61854C()
{
  unint64_t result = qword_1E945C310;
  if (!qword_1E945C310)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E945C318);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C310);
  }
  return result;
}

unint64_t sub_19E6185AC()
{
  unint64_t result = qword_1E945C320;
  if (!qword_1E945C320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C320);
  }
  return result;
}

unint64_t sub_19E618600(unint64_t result)
{
  if (result >= 7) {
    return 7;
  }
  return result;
}

uint64_t sub_19E618610()
{
  return sub_19E618FC8();
}

uint64_t sub_19E61862C()
{
  return sub_19E61904C();
}

uint64_t sub_19E618648()
{
  return sub_19E6190A4();
}

unint64_t sub_19E618664@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_19E62178C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_19E618690()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_19E6186AC()
{
  uint64_t result = 7561825;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1818846563;
      break;
    case 2:
      uint64_t result = 0x726F6F6C66;
      break;
    case 3:
      uint64_t result = 0x65746167656ELL;
      break;
    case 4:
      uint64_t result = 0x646E756F72;
      break;
    case 5:
      uint64_t result = 1852270963;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_19E618750(char a1)
{
  uint64_t result = 1936679777;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x68736F6361;
      break;
    case 2:
      uint64_t result = 1852404577;
      break;
    case 3:
    case 14:
      uint64_t result = 1752066419;
      break;
    case 4:
      uint64_t result = 1851880545;
      break;
    case 5:
      uint64_t result = 0x686E617461;
      break;
    case 6:
      uint64_t result = 7565155;
      break;
    case 7:
      uint64_t result = 1752395619;
      break;
    case 8:
      uint64_t result = 7370853;
      break;
    case 9:
      uint64_t result = 846231653;
      break;
    case 10:
      uint64_t result = 6778732;
      break;
    case 11:
      uint64_t result = 0x636F727069636572;
      break;
    case 12:
      uint64_t result = 0x7472717372;
      break;
    case 13:
      uint64_t result = 7235955;
      break;
    case 15:
      uint64_t result = 1953657203;
      break;
    case 16:
      uint64_t result = 0x657261757173;
      break;
    case 17:
      uint64_t result = 7233908;
      break;
    case 18:
      uint64_t result = 1752064372;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_19E6188E8()
{
  return sub_19E618FC8();
}

uint64_t sub_19E618904()
{
  return sub_19E61904C();
}

uint64_t sub_19E618920()
{
  return sub_19E6190A4();
}

unint64_t sub_19E61893C@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_19E62179C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_19E618968()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_19E618984()
{
  return sub_19E618750(*v0);
}

uint64_t sub_19E61898C()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_19E6189BC()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E618A3C()
{
  return sub_19EBF7488();
}

uint64_t sub_19E618A90()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E618B0C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

BOOL sub_19E618B3C(uint64_t a1, uint64_t a2)
{
  return sub_19E61E730(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24), *(unsigned char *)(a2 + 32));
}

uint64_t sub_19E618B88()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E618BEC()
{
  return sub_19EBF7488();
}

uint64_t sub_19E618C30()
{
  return sub_19EBF74B8();
}

void sub_19E618C90(void *a1@<X8>)
{
  *a1 = 0;
}

unint64_t sub_19E618C98()
{
  return 0xD000000000000019;
}

uint64_t sub_19E618CB4()
{
  return 0x206C616369676F6CLL;
}

uint64_t sub_19E618CD4()
{
  return sub_19E618FC8();
}

uint64_t sub_19E618CF0()
{
  return sub_19E61904C();
}

uint64_t sub_19E618D0C()
{
  return sub_19E6190A4();
}

unint64_t sub_19E618D28@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_19E6217AC(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_19E618D54()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_19E618D70()
{
  uint64_t result = 6579297;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E6F7369766964;
      break;
    case 2:
      unsigned int v2 = 1769496941;
      goto LABEL_5;
    case 3:
      unsigned int v2 = 1768843629;
LABEL_5:
      uint64_t result = v2 | 0x6D756D00000000;
      break;
    case 4:
      uint64_t result = 0x6F6C75646F6DLL;
      break;
    case 5:
      uint64_t result = 0x696C7069746C756DLL;
      break;
    case 6:
      uint64_t result = 0x7265776F70;
      break;
    case 7:
      uint64_t result = 0x7463617274627573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_19E618E6C()
{
  return sub_19E618FC8();
}

uint64_t sub_19E618E88()
{
  return sub_19E61904C();
}

uint64_t sub_19E618EA4()
{
  return sub_19E6190A4();
}

unint64_t sub_19E618EC0()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_19E618EDC()
{
  uint64_t result = 0x6C61757165;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x72657461657267;
      break;
    case 2:
      uint64_t result = 0x5F72657461657267;
      break;
    case 3:
      uint64_t result = 1936942444;
      break;
    case 4:
      uint64_t result = 0x7571655F7373656CLL;
      break;
    case 5:
      uint64_t result = 0x617571655F746F6ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_19E618FAC()
{
  return sub_19E618FC8();
}

uint64_t sub_19E618FC8()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E619030()
{
  return sub_19E61904C();
}

uint64_t sub_19E61904C()
{
  return sub_19EBF7488();
}

uint64_t sub_19E619088()
{
  return sub_19E6190A4();
}

uint64_t sub_19E6190A4()
{
  return sub_19EBF74B8();
}

uint64_t *sub_19E619108@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

unint64_t sub_19E619120()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_19E61913C()
{
  return 0x206C616369676F6CLL;
}

uint64_t sub_19E619184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19EBF7478();
  sub_19EBF67C8();
  uint64_t v4 = *(void *)(a3 + 16);
  sub_19EBF7488();
  if (v4)
  {
    uint64_t v5 = a3 + 32;
    do
    {
      v5 += 8;
      sub_19EBF7488();
      --v4;
    }
    while (v4);
  }
  sub_19EBF7488();
  return sub_19EBF74B8();
}

uint64_t sub_19E61921C()
{
  return sub_19E619184(*v0, v0[1], v0[2]);
}

uint64_t sub_19E61922C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_19EBF67C8();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_19EBF7488();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19EBF7488();
      --v2;
    }
    while (v2);
  }
  return sub_19EBF7488();
}

uint64_t sub_19E619294()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_19EBF7478();
  sub_19EBF67C8();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_19EBF7488();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19EBF7488();
      --v2;
    }
    while (v2);
  }
  sub_19EBF7488();
  return sub_19EBF74B8();
}

uint64_t sub_19E61932C()
{
  uint64_t result = 0x6D756D6978616DLL;
  switch(*(unsigned char *)(v0 + 24))
  {
    case 1:
      uint64_t result = 0x6D756D696E696DLL;
      break;
    case 2:
      uint64_t result = 1851876717;
      break;
    case 3:
      uint64_t result = 0x746375646F7270;
      break;
    case 4:
      uint64_t result = 7173491;
      break;
    case 5:
      uint64_t result = 0x78616D677261;
      break;
    case 6:
      uint64_t result = 0x6E696D677261;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_19E6193F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v4 = *(void **)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 24);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return sub_19E5DDC7C(v2, v4) & (v3 == v5);
  }
  char v7 = sub_19EBF7388();
  uint64_t result = 0;
  if (v7) {
    return sub_19E5DDC7C(v2, v4) & (v3 == v5);
  }
  return result;
}

uint64_t sub_19E619474(uint64_t a1, uint64_t a2)
{
  sub_19EBF7478();
  sub_19EBF7488();
  uint64_t v3 = *(void *)(a2 + 16);
  sub_19EBF7488();
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    do
    {
      v4 += 8;
      sub_19EBF7488();
      --v3;
    }
    while (v3);
  }
  sub_19EBF67C8();
  return sub_19EBF74B8();
}

uint64_t sub_19E619514()
{
  return sub_19E619474(*v0, *((void *)v0 + 1));
}

uint64_t sub_19E619524()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_19EBF7488();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_19EBF7488();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19EBF7488();
      --v2;
    }
    while (v2);
  }

  return sub_19EBF67C8();
}

uint64_t sub_19E6195A8()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_19EBF7478();
  sub_19EBF7488();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_19EBF7488();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19EBF7488();
      --v2;
    }
    while (v2);
  }
  sub_19EBF67C8();
  return sub_19EBF74B8();
}

uint64_t sub_19E619640()
{
  if (*v0) {
    return 29295;
  }
  else {
    return 6581857;
  }
}

uint64_t sub_19E619668(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v3 = *((void *)a1 + 2);
  uint64_t v2 = *((void *)a1 + 3);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v4 = *((void *)a2 + 3);
  if (!sub_19E5DDC7C(*((void **)a1 + 1), *((void **)a2 + 1))) {
    return 0;
  }
  if (v3 == v5 && v2 == v4) {
    return 1;
  }

  return sub_19EBF7388();
}

uint64_t sub_19E619700()
{
  sub_19EBF7478();
  uint64_t v1 = *(void *)(v0 + 16);
  sub_19E619938();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_19EBF7488();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19EBF7488();
      --v2;
    }
    while (v2);
  }
  sub_19EBF7488();
  return sub_19EBF74B8();
}

uint64_t sub_19E619794()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_19E619938();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_19EBF7488();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19EBF7488();
      --v2;
    }
    while (v2);
  }
  return sub_19EBF7488();
}

uint64_t sub_19E619800()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_19EBF7478();
  sub_19E619938();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_19EBF7488();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19EBF7488();
      --v2;
    }
    while (v2);
  }
  sub_19EBF7488();
  return sub_19EBF74B8();
}

uint64_t sub_19E619894()
{
  if (*(unsigned char *)(v0 + 8)) {
    return 0x6D726F66696E75;
  }
  else {
    return 0x6E5F6D6F646E6172;
  }
}

uint64_t sub_19E6198DC(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return sub_19E61ED58((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_19E619938()
{
  return sub_19EBF74A8();
}

BOOL sub_19E6199C8(uint64_t a1, uint64_t a2)
{
  return sub_19E61ECCC(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t sub_19E6199E0()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E619A30()
{
  return sub_19E619938();
}

uint64_t sub_19E619A3C()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E619A88()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E619B38()
{
  sub_19EBF7498();
  sub_19EBF7498();
  swift_bridgeObjectRetain();
  sub_19EBF67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19EBF67C8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_19E619BDC()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E619C90(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_19E61EE94((unsigned __int8 *)v5, (unsigned __int8 *)v7) & 1;
}

uint64_t sub_19E619CDC()
{
  return sub_19E61A6C4();
}

uint64_t sub_19E619CFC()
{
  swift_bridgeObjectRetain();
  sub_19EBF67C8();
  swift_bridgeObjectRelease();
  sub_19EBF7498();
  swift_bridgeObjectRetain();
  sub_19EBF67C8();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0[5];
  uint64_t v2 = *(void *)(v1 + 16);
  sub_19EBF7488();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19EBF7488();
      --v2;
    }
    while (v2);
  }
  uint64_t v4 = v0[6];
  uint64_t v5 = *(void *)(v4 + 16);
  sub_19EBF7488();
  if (v5)
  {
    uint64_t v6 = v4 + 32;
    do
    {
      v6 += 8;
      sub_19EBF7488();
      --v5;
    }
    while (v5);
  }
  uint64_t v7 = v0[7];
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t result = sub_19EBF7488();
  if (v8)
  {
    uint64_t v10 = v7 + 32;
    do
    {
      v10 += 8;
      uint64_t result = sub_19EBF7488();
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_19E619DF4()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E619E38()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E619E74()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

BOOL sub_19E619EA4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = a1[3];
  _OWORD v7[2] = a1[2];
  _OWORD v7[3] = v3;
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  long long v5 = a2[3];
  v8[2] = a2[2];
  _OWORD v8[3] = v5;
  return sub_19E61E874((uint64_t)v7, (uint64_t)v8);
}

uint64_t sub_19E619EF0()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E619F58()
{
  sub_19EBF67C8();

  return sub_19EBF67C8();
}

uint64_t sub_19E619FA8()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E61A00C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (char v7 = sub_19EBF7388(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return sub_19EBF7388();
    }
  }
  return result;
}

uint64_t sub_19E61A0B0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    sub_19EBF7488();
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t result = sub_19EBF7488();
    if (v5)
    {
      uint64_t v6 = a2 + 32;
      do
      {
        v6 += 8;
        uint64_t result = sub_19EBF7488();
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    sub_19EBF7488();
    return sub_19EBF7488();
  }
  return result;
}

uint64_t sub_19E61A120(uint64_t a1, char a2)
{
  sub_19EBF7478();
  if (a2)
  {
    sub_19EBF7488();
    uint64_t v4 = *(void *)(a1 + 16);
    sub_19EBF7488();
    if (v4)
    {
      uint64_t v5 = a1 + 32;
      do
      {
        v5 += 8;
        sub_19EBF7488();
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    sub_19EBF7488();
    sub_19EBF7488();
  }
  return sub_19EBF74B8();
}

uint64_t sub_19E61A1C0()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E61A240()
{
  return sub_19EBF7488();
}

uint64_t sub_19E61A294()
{
  return sub_19EBF74B8();
}

BOOL sub_19E61A310(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_19E61EA58(v5, v7);
}

uint64_t sub_19E61A35C()
{
  return sub_19E61A120(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_19E61A368(uint64_t a1)
{
  return sub_19E61A0B0(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t sub_19E61A374()
{
  uint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 8);
  sub_19EBF7478();
  if (v2 == 1)
  {
    sub_19EBF7488();
    uint64_t v3 = *(void *)(v1 + 16);
    sub_19EBF7488();
    if (v3)
    {
      uint64_t v4 = v1 + 32;
      do
      {
        v4 += 8;
        sub_19EBF7488();
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    sub_19EBF7488();
    sub_19EBF7488();
  }
  return sub_19EBF74B8();
}

BOOL sub_19E61A414(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  int v6 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8) != 1) {
    return (v4 == v5) & ~v6;
  }
  if (v6) {
    return sub_19E5DDC7C(v4, v5);
  }
  return 0;
}

uint64_t sub_19E61A454()
{
  sub_19E61EE7C(v0, (uint64_t)v5);
  sub_19E61EE7C(v5, (uint64_t)&v6);
  if (v7)
  {
    uint64_t v1 = v6;
    sub_19EBF7488();
    uint64_t v2 = *(void *)(v1 + 16);
    sub_19EBF7488();
    if (v2)
    {
      uint64_t v3 = v1 + 32;
      do
      {
        v3 += 8;
        sub_19EBF7488();
        --v2;
      }
      while (v2);
    }
  }
  else
  {
    sub_19EBF7488();
    sub_19EBF7488();
  }
  sub_19EBF7488();
  swift_bridgeObjectRetain();
  sub_19EBF67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19EBF67C8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19E61A540()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_19E61A570()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E61A5CC()
{
  return sub_19E61A454();
}

uint64_t sub_19E61A610()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E61A668(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return sub_19E61E934((uint64_t *)v5, (uint64_t *)v7) & 1;
}

uint64_t sub_19E61A6C4()
{
  uint64_t v1 = *v0;
  sub_19EBF7478();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_19EBF7488();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19EBF7488();
      --v2;
    }
    while (v2);
  }
  sub_19EBF67C8();
  sub_19EBF67C8();
  return sub_19EBF74B8();
}

uint64_t sub_19E61A758()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  sub_19EBF7488();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19EBF7488();
      --v2;
    }
    while (v2);
  }
  sub_19EBF67C8();

  return sub_19EBF67C8();
}

uint64_t sub_19E61A7F0()
{
  uint64_t v1 = *v0;
  sub_19EBF7478();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_19EBF7488();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_19EBF7488();
      --v2;
    }
    while (v2);
  }
  sub_19EBF67C8();
  sub_19EBF67C8();
  return sub_19EBF74B8();
}

uint64_t sub_19E61A894()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_19E61A8C4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_19E61EB90((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_19E61A910()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_19E61A940()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E61A9F4()
{
  sub_19EBF7488();
  sub_19EBF7488();
  swift_bridgeObjectRetain();
  sub_19EBF67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19EBF67C8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_19E61AA94()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E61AB44(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  _OWORD v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_19E61EAE0(v7, v8) & 1;
}

void *sub_19E61AB8C@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_19E61ABAC()
{
  if (*v0) {
    return 0x646F72706D7563;
  }
  else {
    return 0x6D75736D7563;
  }
}

uint64_t sub_19E61ABE4()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E61AC60()
{
  return sub_19EBF7488();
}

uint64_t sub_19E61ACAC()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E61AD24()
{
  if (*(unsigned char *)(v0 + 16)) {
    return 0x646F72706D7563;
  }
  else {
    return 0x6D75736D7563;
  }
}

BOOL sub_19E61AD5C(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    if (v2 != v4) {
      return 0;
    }
    return v3 == v5;
  }
  char v7 = sub_19EBF7388();
  BOOL result = 0;
  if ((v7 & 1) != 0 && ((v2 ^ v4) & 1) == 0) {
    return v3 == v5;
  }
  return result;
}

uint64_t sub_19E61ADE8()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E61AE9C()
{
  return sub_19EBF7488();
}

uint64_t sub_19E61AF34()
{
  return sub_19EBF74B8();
}

BOOL sub_19E61AFE4(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  _OWORD v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_19E61E7D4(v7, v8);
}

uint64_t sub_19E61B02C(uint64_t a1)
{
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v8 = MEMORY[0x1E4FBC860];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    long long v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
      *(void *)(inited + 32) = v6;
      *(void *)(inited + 40) = v5;
      sub_19E612A98(inited);
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

void *sub_19E61B114()
{
  int v1 = *(unsigned __int8 *)(v0 + 36);
  uint64_t v2 = *(void *)(v0 + 40);
  sub_19EBF7478();
  if (v1 == 1)
  {
    sub_19EBF7488();
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
LABEL_3:
      uint64_t result = (void *)swift_bridgeObjectRetain();
      uint64_t v5 = (uint64_t *)(v2 + 40);
      uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
      while (1)
      {
        int64_t v7 = v6[2];
        int64_t v8 = v7 + 2;
        if (__OFADD__(v7, 2)) {
          break;
        }
        uint64_t v9 = *(v5 - 1);
        uint64_t v10 = *v5;
        uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
        if (!result || (unint64_t v11 = v6[3], v12 = v11 >> 1, (uint64_t)(v11 >> 1) < v8))
        {
          if (v7 <= v8) {
            int64_t v13 = v7 + 2;
          }
          else {
            int64_t v13 = v7;
          }
          uint64_t result = sub_19E606EE4(result, v13, 1, v6);
          uint64_t v6 = result;
          unint64_t v11 = result[3];
          unint64_t v12 = v11 >> 1;
        }
        unint64_t v14 = v6[2];
        unint64_t v15 = v14 + 1;
        if (v12 <= v14)
        {
          uint64_t result = sub_19E606EE4((void *)(v11 > 1), v14 + 1, 1, v6);
          uint64_t v6 = result;
          unint64_t v11 = result[3];
          unint64_t v12 = v11 >> 1;
        }
        void v6[2] = v15;
        v6[v14 + 4] = v9;
        if ((uint64_t)v12 < (uint64_t)(v14 + 2))
        {
          uint64_t result = sub_19E606EE4((void *)(v11 > 1), v14 + 2, 1, v6);
          uint64_t v6 = result;
        }
        v5 += 2;
        void v6[2] = v14 + 2;
        v6[v15 + 4] = v10;
        if (!--v3)
        {
          swift_bridgeObjectRelease();
          goto LABEL_19;
        }
      }
      __break(1u);
      return result;
    }
  }
  else
  {
    sub_19EBF7488();
    sub_19EBF74A8();
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
LABEL_19:
  sub_19EBF7488();
  uint64_t v16 = v6[2];
  if (v16)
  {
    unint64_t v17 = v6 + 4;
    do
    {
      ++v17;
      sub_19EBF7488();
      --v16;
    }
    while (v16);
  }
  swift_bridgeObjectRelease();
  return (void *)sub_19EBF74B8();
}

uint64_t sub_19E61B2F4()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (*(unsigned char *)(v0 + 36) == 1)
  {
    sub_19EBF7488();
  }
  else
  {
    sub_19EBF7488();
    sub_19EBF74A8();
  }
  uint64_t v2 = sub_19E61B02C(v1);
  uint64_t v3 = *(void *)(v2 + 16);
  sub_19EBF7488();
  if (v3)
  {
    uint64_t v4 = v2 + 32;
    do
    {
      v4 += 8;
      sub_19EBF7488();
      --v3;
    }
    while (v3);
  }

  return swift_bridgeObjectRelease();
}

void *sub_19E61B3B0()
{
  int v1 = *(unsigned __int8 *)(v0 + 36);
  uint64_t v2 = *(void *)(v0 + 40);
  sub_19EBF7478();
  if (v1 == 1)
  {
    sub_19EBF7488();
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
LABEL_3:
      uint64_t result = (void *)swift_bridgeObjectRetain();
      uint64_t v5 = (uint64_t *)(v2 + 40);
      uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
      while (1)
      {
        int64_t v7 = v6[2];
        int64_t v8 = v7 + 2;
        if (__OFADD__(v7, 2)) {
          break;
        }
        uint64_t v9 = *(v5 - 1);
        uint64_t v10 = *v5;
        uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
        if (!result || (unint64_t v11 = v6[3], v12 = v11 >> 1, (uint64_t)(v11 >> 1) < v8))
        {
          if (v7 <= v8) {
            int64_t v13 = v7 + 2;
          }
          else {
            int64_t v13 = v7;
          }
          uint64_t result = sub_19E606EE4(result, v13, 1, v6);
          uint64_t v6 = result;
          unint64_t v11 = result[3];
          unint64_t v12 = v11 >> 1;
        }
        unint64_t v14 = v6[2];
        unint64_t v15 = v14 + 1;
        if (v12 <= v14)
        {
          uint64_t result = sub_19E606EE4((void *)(v11 > 1), v14 + 1, 1, v6);
          uint64_t v6 = result;
          unint64_t v11 = result[3];
          unint64_t v12 = v11 >> 1;
        }
        void v6[2] = v15;
        v6[v14 + 4] = v9;
        if ((uint64_t)v12 < (uint64_t)(v14 + 2))
        {
          uint64_t result = sub_19E606EE4((void *)(v11 > 1), v14 + 2, 1, v6);
          uint64_t v6 = result;
        }
        v5 += 2;
        void v6[2] = v14 + 2;
        v6[v15 + 4] = v10;
        if (!--v3)
        {
          swift_bridgeObjectRelease();
          goto LABEL_19;
        }
      }
      __break(1u);
      return result;
    }
  }
  else
  {
    sub_19EBF7488();
    sub_19EBF74A8();
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
LABEL_19:
  sub_19EBF7488();
  uint64_t v16 = v6[2];
  if (v16)
  {
    unint64_t v17 = v6 + 4;
    do
    {
      ++v17;
      sub_19EBF7488();
      --v16;
    }
    while (v16);
  }
  swift_bridgeObjectRelease();
  return (void *)sub_19EBF74B8();
}

uint64_t sub_19E61B58C()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E61B644()
{
  return sub_19EBF7498();
}

uint64_t sub_19E61B6E0()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E61B794(long long *a1, long long *a2)
{
  long long v2 = a1[1];
  long long v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(long long *)((char *)a1 + 25);
  long long v3 = a2[1];
  long long v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(long long *)((char *)a2 + 25);
  return sub_19E61EC2C((uint64_t)&v5, (uint64_t)&v7) & 1;
}

uint64_t sub_19E61B7E0()
{
  return 0x726568746167;
}

uint64_t sub_19E61B7F4()
{
  char v1 = *(unsigned char *)(v0 + 16);
  sub_19EBF7478();
  if ((v1 & 1) == 0) {
    sub_19EBF7488();
  }
  sub_19EBF7488();
  sub_19EBF7488();
  return sub_19EBF74B8();
}

uint64_t sub_19E61B870()
{
  if ((*(unsigned char *)(v0 + 16) & 1) == 0) {
    sub_19EBF7488();
  }
  sub_19EBF7488();
  return sub_19EBF7488();
}

uint64_t sub_19E61B8D0()
{
  char v1 = *(unsigned char *)(v0 + 16);
  sub_19EBF7478();
  if ((v1 & 1) == 0) {
    sub_19EBF7488();
  }
  sub_19EBF7488();
  sub_19EBF7488();
  return sub_19EBF74B8();
}

uint64_t sub_19E61B948()
{
  if (*(unsigned char *)(v0 + 16)) {
    return 0x6E5F726568746167;
  }
  else {
    return 0x726568746167;
  }
}

uint64_t sub_19E61B984(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (a1[2])
  {
    if (v2 == v3) {
      return *((unsigned __int8 *)a2 + 16);
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v5 = (v2 == v3) & ~*((unsigned __int8 *)a2 + 16);
    if (a1[1] == a2[1]) {
      return v5;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_19E61B9C4()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E61BA18()
{
  return sub_19EBF7488();
}

uint64_t sub_19E61BA58()
{
  return sub_19EBF74B8();
}

BOOL sub_19E61BAA8(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_19E61BABC()
{
  return 0x72657474616373;
}

uint64_t sub_19E61BAD4()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E61BB40()
{
  return sub_19EBF7488();
}

uint64_t sub_19E61BB8C()
{
  return sub_19EBF74B8();
}

unint64_t sub_19E61BBF4()
{
  return 0xD000000000000012;
}

BOOL sub_19E61BC10(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && *(unsigned __int8 *)(a1 + 8) == (unint64_t)*(unsigned __int8 *)(a2 + 8);
}

uint64_t sub_19E61BC30()
{
  int v1 = *(unsigned __int8 *)(v0 + 40);
  sub_19EBF7478();
  sub_19EBF7488();
  if (v1 != 2) {
    sub_19EBF7498();
  }
  sub_19EBF7488();
  sub_19EBF7488();
  return sub_19EBF74B8();
}

uint64_t sub_19E61BCC8()
{
  if (*(unsigned char *)(v0 + 40) == 2)
  {
    sub_19EBF7488();
  }
  else
  {
    sub_19EBF7488();
    sub_19EBF7498();
  }
  sub_19EBF7488();
  return sub_19EBF7488();
}

uint64_t sub_19E61BD34()
{
  int v1 = *(unsigned __int8 *)(v0 + 40);
  sub_19EBF7478();
  sub_19EBF7488();
  if (v1 != 2) {
    sub_19EBF7498();
  }
  sub_19EBF7488();
  sub_19EBF7488();
  return sub_19EBF74B8();
}

uint64_t sub_19E61BDC4()
{
  int v1 = *(unsigned __int8 *)(v0 + 40);
  unint64_t v2 = 0xD000000000000018;
  if ((v1 & 1) == 0) {
    unint64_t v2 = 0x7261656E696C6962;
  }
  if (v1 == 2) {
    return 0x4E7473657261656ELL;
  }
  else {
    return v2;
  }
}

BOOL sub_19E61BE30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 24);
  int v6 = *(unsigned __int8 *)(a2 + 40);
  if (v4 == 2)
  {
    if (v6 != 2 || v3 != v5) {
      return 0;
    }
    return v2 == *(void *)(a2 + 32);
  }
  BOOL result = 0;
  BOOL v9 = (v4 & 1) == 0;
  if (v6 != 2 && ((v9 ^ v6) & 1) != 0 && v3 == v5) {
    return v2 == *(void *)(a2 + 32);
  }
  return result;
}

uint64_t sub_19E61BE8C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    sub_19EBF7488();
    return sub_19EBF7488();
  }
  else
  {
    sub_19EBF7488();
    sub_19EBF74A8();
    return sub_19EBF74A8();
  }
}

uint64_t sub_19E61BF04()
{
  return 0x6974617669746361;
}

uint64_t sub_19E61BF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61BF4C, (uint64_t (*)(void))sub_19E61BFA0);
}

unint64_t sub_19E61BF4C()
{
  unint64_t result = qword_1E945C328;
  if (!qword_1E945C328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C328);
  }
  return result;
}

unint64_t sub_19E61BFA0()
{
  unint64_t result = qword_1E945C330;
  if (!qword_1E945C330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C330);
  }
  return result;
}

unint64_t sub_19E61BFF8()
{
  unint64_t result = qword_1E945C338;
  if (!qword_1E945C338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C338);
  }
  return result;
}

uint64_t sub_19E61C04C()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  sub_19EBF7478();
  sub_19E61BE8C((uint64_t)v4, v1, v2);
  return sub_19EBF74B8();
}

uint64_t sub_19E61C09C(uint64_t a1)
{
  return sub_19E61BE8C(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t sub_19E61C0A8()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  sub_19EBF7478();
  sub_19E61BE8C((uint64_t)v4, v1, v2);
  return sub_19EBF74B8();
}

uint64_t sub_19E61C0F4()
{
  if (*(unsigned char *)(v0 + 8)) {
    return 0x78616D74666F73;
  }
  else {
    return 0x706D616C63;
  }
}

uint64_t sub_19E61C12C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (a1[1])
  {
    if (v2 == v3) {
      return *((unsigned __int8 *)a2 + 8);
    }
    else {
      return 0;
    }
  }
  else
  {
    return (a2[1] & 1) == 0 && *(float *)&v2 == *(float *)&v3 && *((float *)&v2 + 1) == *((float *)&v3 + 1);
  }
}

uint64_t sub_19E61C184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61C1B0, (uint64_t (*)(void))sub_19E61C204);
}

unint64_t sub_19E61C1B0()
{
  unint64_t result = qword_1E945C340;
  if (!qword_1E945C340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C340);
  }
  return result;
}

unint64_t sub_19E61C204()
{
  unint64_t result = qword_1E945C348;
  if (!qword_1E945C348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C348);
  }
  return result;
}

unint64_t sub_19E61C25C()
{
  unint64_t result = qword_1E945C350;
  if (!qword_1E945C350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C350);
  }
  return result;
}

uint64_t sub_19E61C2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61C2DC, (uint64_t (*)(void))sub_19E61C330);
}

unint64_t sub_19E61C2DC()
{
  unint64_t result = qword_1E945C358;
  if (!qword_1E945C358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C358);
  }
  return result;
}

unint64_t sub_19E61C330()
{
  unint64_t result = qword_1E945C360;
  if (!qword_1E945C360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C360);
  }
  return result;
}

unint64_t sub_19E61C388()
{
  unint64_t result = qword_1E945C368;
  if (!qword_1E945C368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C368);
  }
  return result;
}

uint64_t sub_19E61C3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61C408, (uint64_t (*)(void))sub_19E61C45C);
}

unint64_t sub_19E61C408()
{
  unint64_t result = qword_1E945C370;
  if (!qword_1E945C370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C370);
  }
  return result;
}

unint64_t sub_19E61C45C()
{
  unint64_t result = qword_1E945C378;
  if (!qword_1E945C378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C378);
  }
  return result;
}

unint64_t sub_19E61C4B4()
{
  unint64_t result = qword_1E945C380;
  if (!qword_1E945C380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C380);
  }
  return result;
}

uint64_t sub_19E61C508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61C534, (uint64_t (*)(void))sub_19E61C588);
}

unint64_t sub_19E61C534()
{
  unint64_t result = qword_1E945C388;
  if (!qword_1E945C388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C388);
  }
  return result;
}

unint64_t sub_19E61C588()
{
  unint64_t result = qword_1E945C390;
  if (!qword_1E945C390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C390);
  }
  return result;
}

unint64_t sub_19E61C5E0()
{
  unint64_t result = qword_1E945C398;
  if (!qword_1E945C398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C398);
  }
  return result;
}

uint64_t sub_19E61C634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61C660, (uint64_t (*)(void))sub_19E61C6B4);
}

unint64_t sub_19E61C660()
{
  unint64_t result = qword_1E945C3A0;
  if (!qword_1E945C3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C3A0);
  }
  return result;
}

unint64_t sub_19E61C6B4()
{
  unint64_t result = qword_1E945C3A8;
  if (!qword_1E945C3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C3A8);
  }
  return result;
}

unint64_t sub_19E61C70C()
{
  unint64_t result = qword_1E945C3B0;
  if (!qword_1E945C3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C3B0);
  }
  return result;
}

uint64_t sub_19E61C760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61C78C, (uint64_t (*)(void))sub_19E61C7E0);
}

unint64_t sub_19E61C78C()
{
  unint64_t result = qword_1E945C3B8;
  if (!qword_1E945C3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C3B8);
  }
  return result;
}

unint64_t sub_19E61C7E0()
{
  unint64_t result = qword_1E945C3C0;
  if (!qword_1E945C3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C3C0);
  }
  return result;
}

unint64_t sub_19E61C838()
{
  unint64_t result = qword_1E945C3C8;
  if (!qword_1E945C3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C3C8);
  }
  return result;
}

uint64_t sub_19E61C88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61C8B8, (uint64_t (*)(void))sub_19E61C90C);
}

unint64_t sub_19E61C8B8()
{
  unint64_t result = qword_1E945C3D0;
  if (!qword_1E945C3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C3D0);
  }
  return result;
}

unint64_t sub_19E61C90C()
{
  unint64_t result = qword_1E945C3D8;
  if (!qword_1E945C3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C3D8);
  }
  return result;
}

unint64_t sub_19E61C964()
{
  unint64_t result = qword_1E945C3E0;
  if (!qword_1E945C3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C3E0);
  }
  return result;
}

uint64_t sub_19E61C9B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61C9E4, (uint64_t (*)(void))sub_19E61CA38);
}

unint64_t sub_19E61C9E4()
{
  unint64_t result = qword_1E945C3E8;
  if (!qword_1E945C3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C3E8);
  }
  return result;
}

unint64_t sub_19E61CA38()
{
  unint64_t result = qword_1E945C3F0;
  if (!qword_1E945C3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C3F0);
  }
  return result;
}

unint64_t sub_19E61CA90()
{
  unint64_t result = qword_1E945C3F8;
  if (!qword_1E945C3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C3F8);
  }
  return result;
}

uint64_t sub_19E61CAE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61CB10, (uint64_t (*)(void))sub_19E61CB64);
}

unint64_t sub_19E61CB10()
{
  unint64_t result = qword_1E945C400;
  if (!qword_1E945C400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C400);
  }
  return result;
}

unint64_t sub_19E61CB64()
{
  unint64_t result = qword_1E945C408;
  if (!qword_1E945C408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C408);
  }
  return result;
}

unint64_t sub_19E61CBBC()
{
  unint64_t result = qword_1E945C410;
  if (!qword_1E945C410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C410);
  }
  return result;
}

uint64_t sub_19E61CC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61CC3C, (uint64_t (*)(void))sub_19E61CC90);
}

unint64_t sub_19E61CC3C()
{
  unint64_t result = qword_1E945C418;
  if (!qword_1E945C418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C418);
  }
  return result;
}

unint64_t sub_19E61CC90()
{
  unint64_t result = qword_1E945C420;
  if (!qword_1E945C420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C420);
  }
  return result;
}

unint64_t sub_19E61CCE8()
{
  unint64_t result = qword_1E945C428;
  if (!qword_1E945C428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C428);
  }
  return result;
}

uint64_t sub_19E61CD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61CD68, (uint64_t (*)(void))sub_19E61CDBC);
}

unint64_t sub_19E61CD68()
{
  unint64_t result = qword_1E945C430;
  if (!qword_1E945C430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C430);
  }
  return result;
}

unint64_t sub_19E61CDBC()
{
  unint64_t result = qword_1E945C438;
  if (!qword_1E945C438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C438);
  }
  return result;
}

unint64_t sub_19E61CE14()
{
  unint64_t result = qword_1E945C440;
  if (!qword_1E945C440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C440);
  }
  return result;
}

uint64_t sub_19E61CE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61CE94, (uint64_t (*)(void))sub_19E61CEE8);
}

unint64_t sub_19E61CE94()
{
  unint64_t result = qword_1E945C448;
  if (!qword_1E945C448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C448);
  }
  return result;
}

unint64_t sub_19E61CEE8()
{
  unint64_t result = qword_1E945C450;
  if (!qword_1E945C450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C450);
  }
  return result;
}

unint64_t sub_19E61CF40()
{
  unint64_t result = qword_1E945C458;
  if (!qword_1E945C458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C458);
  }
  return result;
}

uint64_t sub_19E61CF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61CFC0, (uint64_t (*)(void))sub_19E61D014);
}

unint64_t sub_19E61CFC0()
{
  unint64_t result = qword_1E945C460;
  if (!qword_1E945C460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C460);
  }
  return result;
}

unint64_t sub_19E61D014()
{
  unint64_t result = qword_1E945C468;
  if (!qword_1E945C468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C468);
  }
  return result;
}

unint64_t sub_19E61D06C()
{
  unint64_t result = qword_1E945C470;
  if (!qword_1E945C470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C470);
  }
  return result;
}

uint64_t sub_19E61D0C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61D0EC, (uint64_t (*)(void))sub_19E61D140);
}

unint64_t sub_19E61D0EC()
{
  unint64_t result = qword_1E945C478;
  if (!qword_1E945C478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C478);
  }
  return result;
}

unint64_t sub_19E61D140()
{
  unint64_t result = qword_1E945C480;
  if (!qword_1E945C480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C480);
  }
  return result;
}

unint64_t sub_19E61D198()
{
  unint64_t result = qword_1E945C488;
  if (!qword_1E945C488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C488);
  }
  return result;
}

uint64_t sub_19E61D1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61D218, (uint64_t (*)(void))sub_19E61D26C);
}

unint64_t sub_19E61D218()
{
  unint64_t result = qword_1E945C490;
  if (!qword_1E945C490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C490);
  }
  return result;
}

unint64_t sub_19E61D26C()
{
  unint64_t result = qword_1E945C498;
  if (!qword_1E945C498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C498);
  }
  return result;
}

unint64_t sub_19E61D2C4()
{
  unint64_t result = qword_1E945C4A0;
  if (!qword_1E945C4A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C4A0);
  }
  return result;
}

uint64_t sub_19E61D318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61D344, (uint64_t (*)(void))sub_19E61D398);
}

unint64_t sub_19E61D344()
{
  unint64_t result = qword_1E945C4A8;
  if (!qword_1E945C4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C4A8);
  }
  return result;
}

unint64_t sub_19E61D398()
{
  unint64_t result = qword_1E945C4B0;
  if (!qword_1E945C4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C4B0);
  }
  return result;
}

unint64_t sub_19E61D3F0()
{
  unint64_t result = qword_1E945C4B8;
  if (!qword_1E945C4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C4B8);
  }
  return result;
}

uint64_t sub_19E61D444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61D470, (uint64_t (*)(void))sub_19E61D4C4);
}

unint64_t sub_19E61D470()
{
  unint64_t result = qword_1E945C4C0;
  if (!qword_1E945C4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C4C0);
  }
  return result;
}

unint64_t sub_19E61D4C4()
{
  unint64_t result = qword_1E945C4C8;
  if (!qword_1E945C4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C4C8);
  }
  return result;
}

unint64_t sub_19E61D51C()
{
  unint64_t result = qword_1E945C4D0;
  if (!qword_1E945C4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C4D0);
  }
  return result;
}

uint64_t sub_19E61D570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61D59C, (uint64_t (*)(void))sub_19E61D5F0);
}

unint64_t sub_19E61D59C()
{
  unint64_t result = qword_1E945C4D8;
  if (!qword_1E945C4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C4D8);
  }
  return result;
}

unint64_t sub_19E61D5F0()
{
  unint64_t result = qword_1E945C4E0;
  if (!qword_1E945C4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C4E0);
  }
  return result;
}

unint64_t sub_19E61D648()
{
  unint64_t result = qword_1E945C4E8;
  if (!qword_1E945C4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C4E8);
  }
  return result;
}

uint64_t sub_19E61D69C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61D6C8, (uint64_t (*)(void))sub_19E61D71C);
}

unint64_t sub_19E61D6C8()
{
  unint64_t result = qword_1E945C4F0;
  if (!qword_1E945C4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C4F0);
  }
  return result;
}

unint64_t sub_19E61D71C()
{
  unint64_t result = qword_1E945C4F8;
  if (!qword_1E945C4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C4F8);
  }
  return result;
}

unint64_t sub_19E61D774()
{
  unint64_t result = qword_1E945C500;
  if (!qword_1E945C500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C500);
  }
  return result;
}

uint64_t sub_19E61D7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61D7F4, (uint64_t (*)(void))sub_19E61D848);
}

unint64_t sub_19E61D7F4()
{
  unint64_t result = qword_1E945C508;
  if (!qword_1E945C508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C508);
  }
  return result;
}

unint64_t sub_19E61D848()
{
  unint64_t result = qword_1E945C510;
  if (!qword_1E945C510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C510);
  }
  return result;
}

unint64_t sub_19E61D8A0()
{
  unint64_t result = qword_1E945C518;
  if (!qword_1E945C518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C518);
  }
  return result;
}

uint64_t sub_19E61D8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61D920, (uint64_t (*)(void))sub_19E61D974);
}

unint64_t sub_19E61D920()
{
  unint64_t result = qword_1E945C520;
  if (!qword_1E945C520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C520);
  }
  return result;
}

unint64_t sub_19E61D974()
{
  unint64_t result = qword_1E945C528;
  if (!qword_1E945C528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C528);
  }
  return result;
}

unint64_t sub_19E61D9CC()
{
  unint64_t result = qword_1E945C530;
  if (!qword_1E945C530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C530);
  }
  return result;
}

uint64_t sub_19E61DA20()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E61DA64()
{
  return sub_19EBF7488();
}

uint64_t sub_19E61DA8C()
{
  return sub_19EBF74B8();
}

void *sub_19E61DACC@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

uint64_t sub_19E61DAE0()
{
  return 0x74756C6F766E6F63;
}

uint64_t sub_19E61DB00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61DB2C, (uint64_t (*)(void))sub_19E61DB80);
}

unint64_t sub_19E61DB2C()
{
  unint64_t result = qword_1E945C538;
  if (!qword_1E945C538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C538);
  }
  return result;
}

unint64_t sub_19E61DB80()
{
  unint64_t result = qword_1E945C540;
  if (!qword_1E945C540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C540);
  }
  return result;
}

unint64_t sub_19E61DBD8()
{
  unint64_t result = qword_1E945C548;
  if (!qword_1E945C548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C548);
  }
  return result;
}

uint64_t sub_19E61DC2C()
{
  return sub_19EBF74B8();
}

uint64_t sub_19E61DCEC()
{
  return sub_19EBF7488();
}

uint64_t sub_19E61DD80()
{
  return sub_19EBF74B8();
}

BOOL sub_19E61DE3C(int64x2_t *a1, int64x2_t *a2)
{
  BOOL result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*a1, *a2), (int32x4_t)vceqq_s64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].i64[1] == a2[2].i64[1]&& a1[2].i64[0] == a2[2].i64[0])
  {
    return a1[3].i64[0] == a2[3].i64[0];
  }
  return result;
}

uint64_t sub_19E61DEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61DED4, (uint64_t (*)(void))sub_19E61DF28);
}

unint64_t sub_19E61DED4()
{
  unint64_t result = qword_1E945C550;
  if (!qword_1E945C550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C550);
  }
  return result;
}

unint64_t sub_19E61DF28()
{
  unint64_t result = qword_1E945C558;
  if (!qword_1E945C558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C558);
  }
  return result;
}

unint64_t sub_19E61DF80()
{
  unint64_t result = qword_1E945C560;
  if (!qword_1E945C560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C560);
  }
  return result;
}

uint64_t sub_19E61DFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61E000, (uint64_t (*)(void))sub_19E61E054);
}

unint64_t sub_19E61E000()
{
  unint64_t result = qword_1E945C568;
  if (!qword_1E945C568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C568);
  }
  return result;
}

unint64_t sub_19E61E054()
{
  unint64_t result = qword_1E945C570;
  if (!qword_1E945C570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C570);
  }
  return result;
}

unint64_t sub_19E61E0AC()
{
  unint64_t result = qword_1E945C578;
  if (!qword_1E945C578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C578);
  }
  return result;
}

uint64_t sub_19E61E100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61E12C, (uint64_t (*)(void))sub_19E61E180);
}

unint64_t sub_19E61E12C()
{
  unint64_t result = qword_1E945C580;
  if (!qword_1E945C580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C580);
  }
  return result;
}

unint64_t sub_19E61E180()
{
  unint64_t result = qword_1E945C588;
  if (!qword_1E945C588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C588);
  }
  return result;
}

unint64_t sub_19E61E1D8()
{
  unint64_t result = qword_1E945C590;
  if (!qword_1E945C590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C590);
  }
  return result;
}

uint64_t sub_19E61E22C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61E258, (uint64_t (*)(void))sub_19E61E2AC);
}

unint64_t sub_19E61E258()
{
  unint64_t result = qword_1E945C598;
  if (!qword_1E945C598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C598);
  }
  return result;
}

unint64_t sub_19E61E2AC()
{
  unint64_t result = qword_1E945C5A0;
  if (!qword_1E945C5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C5A0);
  }
  return result;
}

unint64_t sub_19E61E304()
{
  unint64_t result = qword_1E945C5A8;
  if (!qword_1E945C5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C5A8);
  }
  return result;
}

uint64_t sub_19E61E358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61E384, (uint64_t (*)(void))sub_19E61E3D8);
}

unint64_t sub_19E61E384()
{
  unint64_t result = qword_1E945C5B0;
  if (!qword_1E945C5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C5B0);
  }
  return result;
}

unint64_t sub_19E61E3D8()
{
  unint64_t result = qword_1E945C5B8;
  if (!qword_1E945C5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C5B8);
  }
  return result;
}

unint64_t sub_19E61E430()
{
  unint64_t result = qword_1E945C5C0;
  if (!qword_1E945C5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C5C0);
  }
  return result;
}

uint64_t sub_19E61E484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19E61E4B0(a1, a2, a3, (uint64_t (*)(void))sub_19E61E4EC, (uint64_t (*)(void))sub_19E61E540);
}

uint64_t sub_19E61E4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_19E61E4EC()
{
  unint64_t result = qword_1E945C5C8;
  if (!qword_1E945C5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C5C8);
  }
  return result;
}

unint64_t sub_19E61E540()
{
  unint64_t result = qword_1E945C5D0;
  if (!qword_1E945C5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C5D0);
  }
  return result;
}

unint64_t sub_19E61E598()
{
  unint64_t result = qword_1E945C5D8;
  if (!qword_1E945C5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C5D8);
  }
  return result;
}

unint64_t sub_19E61E5F0()
{
  unint64_t result = qword_1E945C5E0;
  if (!qword_1E945C5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C5E0);
  }
  return result;
}

uint64_t sub_19E61E644(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 32);
  uint64_t v3 = *(int64x2_t **)(a1 + 40);
  float v4 = *(float *)(a2 + 32);
  int v5 = *(unsigned __int8 *)(a2 + 36);
  int v6 = *(int64x2_t **)(a2 + 40);
  if (*(unsigned char *)(a1 + 36) == 1)
  {
    if (v2 == 0.0)
    {
      if (v4 != 0.0) {
        LOBYTE(v5) = 0;
      }
      if ((v5 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v4 == 0.0) {
        int v5 = 0;
      }
      if (v5 != 1) {
        return 0;
      }
    }
  }
  else
  {
    if (v2 != v4) {
      LOBYTE(v5) = 1;
    }
    if (v5) {
      return 0;
    }
  }
  uint64_t v7 = v3[1].i64[0];
  if (!v7) {
    return 1;
  }
  uint64_t v8 = v6[1].i64[0];
  if (!v8) {
    return 1;
  }
  if (v3[2].i64[0] != v6[2].i64[0] || v3[2].i64[1] != v6[2].i64[1]) {
    return 0;
  }
  if (v7 == 1 || v8 == 1) {
    return 1;
  }
  unint64_t v12 = v3 + 3;
  int64_t v13 = v6 + 3;
  uint64_t v14 = v8 - 2;
  uint64_t v15 = v7 - 2;
  do
  {
    uint64_t v16 = v14;
    int64x2_t v17 = *v12++;
    int64x2_t v18 = v17;
    int64x2_t v19 = *v13++;
    int32x2_t v20 = vmovn_s64(vceqq_s64(v18, v19));
    BOOL v22 = v15-- != 0;
    if ((v20.i8[0] & v20.i8[4] & 1) == 0) {
      break;
    }
    if (!v22) {
      break;
    }
    uint64_t v14 = v16 - 1;
  }
  while (v16);
  return v20.i8[0] & v20.i8[4] & 1;
}

BOOL sub_19E61E730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a1 == a6 && a2 == a7 || (v14 = sub_19EBF7388(), BOOL result = 0, (v14 & 1) != 0))
  {
    if (a3 == a8 && a4 == a9) {
      return a5 == a10;
    }
    char v16 = sub_19EBF7388();
    BOOL result = 0;
    if (v16) {
      return a5 == a10;
    }
  }
  return result;
}

BOOL sub_19E61E7D4(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = sub_19EBF7388(), result = 0, (v5 & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3]) {
      return a1[4] == a2[4] && a1[5] == a2[5];
    }
    char v8 = sub_19EBF7388();
    BOOL result = 0;
    if (v8) {
      return a1[4] == a2[4] && a1[5] == a2[5];
    }
  }
  return result;
}

BOOL sub_19E61E874(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (!v4 && (sub_19EBF7388() & 1) == 0) {
    return 0;
  }
  if ((*(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16))) {
    return 0;
  }
  BOOL v5 = *(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32);
  if (!v5 && (sub_19EBF7388() & 1) == 0
    || !sub_19E5DDC7C(*(void **)(a1 + 40), *(void **)(a2 + 40))
    || !sub_19E5DDC7C(*(void **)(a1 + 48), *(void **)(a2 + 48)))
  {
    return 0;
  }
  int v6 = *(void **)(a1 + 56);
  uint64_t v7 = *(void **)(a2 + 56);

  return sub_19E5DDC7C(v6, v7);
}

uint64_t sub_19E61E934(uint64_t *a1, uint64_t *a2)
{
  sub_19E61EE7C(a1, (uint64_t)v10);
  sub_19E61EE7C(a2, (uint64_t)v9);
  sub_19E61EE7C(v10, (uint64_t)&v11);
  if (v12)
  {
    BOOL v4 = v11;
    sub_19E61EE7C(v9, (uint64_t)&v13);
    if (v14 != 1 || !sub_19E5DDC7C(v4, v13)) {
      goto LABEL_14;
    }
  }
  else
  {
    BOOL v5 = v11;
    sub_19E61EE7C(v9, (uint64_t)&v13);
    char v6 = 0;
    if ((v14 & 1) != 0 || v5 != v13) {
      return v6 & 1;
    }
  }
  if (a1[2] != a2[2])
  {
LABEL_14:
    char v6 = 0;
    return v6 & 1;
  }
  if (a1[3] == a2[3] && a1[4] == a2[4] || (v7 = sub_19EBF7388(), char v6 = 0, (v7 & 1) != 0))
  {
    if (a1[5] == a2[5] && a1[6] == a2[6]) {
      char v6 = 1;
    }
    else {
      char v6 = sub_19EBF7388();
    }
  }
  return v6 & 1;
}

BOOL sub_19E61EA58(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = sub_19EBF7388(), result = 0, (v5 & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3]) {
      return a1[4] == a2[4];
    }
    char v8 = sub_19EBF7388();
    BOOL result = 0;
    if (v8) {
      return a1[4] == a2[4];
    }
  }
  return result;
}

uint64_t sub_19E61EAE0(void *a1, void *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1]) {
    return 0;
  }
  BOOL v4 = a1[2] == a2[2] && a1[3] == a2[3];
  if (v4 || (char v5 = sub_19EBF7388(), result = 0, (v5 & 1) != 0))
  {
    if (a1[4] == a2[4] && a1[5] == a2[5])
    {
      return 1;
    }
    else
    {
      return sub_19EBF7388();
    }
  }
  return result;
}

uint64_t sub_19E61EB90(uint64_t a1, uint64_t a2)
{
  if (!sub_19E5DDC7C(*(void **)a1, *(void **)a2)) {
    return 0;
  }
  BOOL v4 = *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  if (v4 || (char v5 = sub_19EBF7388(), result = 0, (v5 & 1) != 0))
  {
    if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32))
    {
      return 1;
    }
    else
    {
      return sub_19EBF7388();
    }
  }
  return result;
}

uint64_t sub_19E61EC2C(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (char v5 = sub_19EBF7388(), v6 = 0, (v5 & 1) != 0))
  {
    BOOL v7 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v7 || (v8 = sub_19EBF7388(), char v6 = 0, (v8 & 1) != 0))
    {
      if (*(void *)(a1 + 32) == *(void *)(a2 + 32)) {
        char v6 = ((*(unsigned char *)(a1 + 40) & 1) == 0) ^ *(unsigned char *)(a2 + 40);
      }
      else {
        char v6 = 0;
      }
    }
  }
  return v6 & 1;
}

BOOL sub_19E61ECCC(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    BOOL v4 = *((float *)&a1 + 1) == *((float *)&a3 + 1);
    if (*(float *)&a1 != *(float *)&a3) {
      BOOL v4 = 0;
    }
    if (a4 != 1) {
      BOOL v4 = 0;
    }
    BOOL v5 = HIDWORD(a1) == HIDWORD(a3);
    if (a1 != a3) {
      BOOL v5 = 0;
    }
    if (a4 != 2) {
      BOOL v5 = 0;
    }
    if (a2 == 1) {
      return v4;
    }
    else {
      return v5;
    }
  }
  else
  {
    BOOL v7 = *((float *)&a1 + 1) == *((float *)&a3 + 1);
    if (*(float *)&a1 != *(float *)&a3) {
      BOOL v7 = 0;
    }
    return !a4 && v7;
  }
}

uint64_t sub_19E61ED58(uint64_t a1, uint64_t a2)
{
  sub_19E61EE7C((uint64_t *)a1, (uint64_t)&v13);
  sub_19E61EE7C((uint64_t *)a2, (uint64_t)&v12);
  sub_19E61EE7C(&v13, (uint64_t)&v14);
  if (!v16)
  {
    float v5 = v14;
    float v4 = v15;
    sub_19E61EE7C(&v12, (uint64_t)&v17);
    int v6 = 0;
    if (v19) {
      goto LABEL_14;
    }
    goto LABEL_6;
  }
  if (v16 != 1)
  {
    float v9 = v14;
    float v8 = v15;
    sub_19E61EE7C(&v12, (uint64_t)&v17);
    int v6 = 0;
    if (v19 != 2 || LODWORD(v9) != LODWORD(v17)) {
      goto LABEL_14;
    }
    BOOL v7 = LODWORD(v8) == LODWORD(v18);
    goto LABEL_11;
  }
  float v5 = v14;
  float v4 = v15;
  sub_19E61EE7C(&v12, (uint64_t)&v17);
  int v6 = 0;
  if (v19 == 1)
  {
LABEL_6:
    if (v5 != v17) {
      goto LABEL_14;
    }
    BOOL v7 = v4 == v18;
LABEL_11:
    int v6 = v7;
  }
LABEL_14:
  unsigned int v10 = v6 & sub_19E5DDC7C(*(void **)(a1 + 16), *(void **)(a2 + 16));
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)) {
    return v10;
  }
  else {
    return 0;
  }
}

uint64_t sub_19E61EE7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x278], 8) = *((unsigned char *)a1 + 8);
  *(void *)a2 = v2;
  return a2;
}

uint64_t sub_19E61EE94(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if ((*a1 ^ *a2) & 1) != 0 || ((a1[1] ^ a2[1])) {
    return 0;
  }
  BOOL v5 = *((void *)a1 + 1) == *((void *)a2 + 1) && *((void *)a1 + 2) == *((void *)a2 + 2);
  if (v5 || (char v6 = sub_19EBF7388(), result = 0, (v6 & 1) != 0))
  {
    if (*((void *)a1 + 3) == *((void *)a2 + 3) && *((void *)a1 + 4) == *((void *)a2 + 4))
    {
      return 1;
    }
    else
    {
      return sub_19EBF7388();
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SplitOperator.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_19E61EF8C(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  return a1;
}

uint64_t sub_19E61EF8C(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for SplitOperator.Kind(uint64_t a1)
{
  return sub_19E61EFA8(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_19E61EFA8(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t assignWithCopy for SplitOperator.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_19E61EF8C(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  sub_19E61EFA8(v5, v6);
  return a1;
}

uint64_t assignWithTake for SplitOperator.Kind(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  sub_19E61EFA8(v5, v6);
  return a1;
}

uint64_t sub_19E61F050(uint64_t result, char a2)
{
  *(unsigned char *)(result + _Block_object_dispose(&STACK[0x278], 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SplitOperator.Kind()
{
  return &type metadata for SplitOperator.Kind;
}

uint64_t __swift_memcpy9_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + _Block_object_dispose(&STACK[0x278], 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for StatelessRandomOperator.DistributionKind()
{
  return &type metadata for StatelessRandomOperator.DistributionKind;
}

uint64_t destroy for StatelessRandomOperator()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StatelessRandomOperator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StatelessRandomOperator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = a2[3];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for StatelessRandomOperator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StatelessRandomOperator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StatelessRandomOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StatelessRandomOperator()
{
  return &type metadata for StatelessRandomOperator;
}

uint64_t sub_19E61F2F0()
{
  return 0;
}

ValueMetadata *type metadata accessor for UnaryLogicalOperator()
{
  return &type metadata for UnaryLogicalOperator;
}

uint64_t getEnumTagSinglePayload for BinaryLogicalOperator(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BinaryLogicalOperator(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19E61F464);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BinaryLogicalOperator()
{
  return &type metadata for BinaryLogicalOperator;
}

uint64_t initializeWithCopy for ReductionLogicalOperator(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ReductionLogicalOperator(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ReductionLogicalOperator(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ReductionLogicalOperator()
{
  return &type metadata for ReductionLogicalOperator;
}

uint64_t destroy for MatrixMultiplicationOperator()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MatrixMultiplicationOperator(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MatrixMultiplicationOperator(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MatrixMultiplicationOperator(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MatrixMultiplicationOperator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MatrixMultiplicationOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MatrixMultiplicationOperator()
{
  return &type metadata for MatrixMultiplicationOperator;
}

uint64_t getEnumTagSinglePayload for BinaryArithmeticOperator(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BinaryArithmeticOperator(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *__n128 result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19E61F92CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BinaryArithmeticOperator()
{
  return &type metadata for BinaryArithmeticOperator;
}

uint64_t getEnumTagSinglePayload for ConvolutionOperator(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ConvolutionOperator(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConvolutionOperator()
{
  return &type metadata for ConvolutionOperator;
}

ValueMetadata *type metadata accessor for UnaryArithmeticOperator()
{
  return &type metadata for UnaryArithmeticOperator;
}

uint64_t getEnumTagSinglePayload for UnaryFloatingPointArithmeticOperator(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for UnaryFloatingPointArithmeticOperator(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *__n128 result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19E61FB40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 18;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnaryFloatingPointArithmeticOperator()
{
  return &type metadata for UnaryFloatingPointArithmeticOperator;
}

uint64_t _s6CoreML23UnaryArithmeticOperatorOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s6CoreML23UnaryArithmeticOperatorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19E61FCD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BinaryComparisonOperator()
{
  return &type metadata for BinaryComparisonOperator;
}

uint64_t destroy for ReductionOperator()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ReductionOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ReductionOperator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ReductionOperator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReductionOperator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReductionOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReductionOperator()
{
  return &type metadata for ReductionOperator;
}

ValueMetadata *type metadata accessor for TileOperator()
{
  return &type metadata for TileOperator;
}

uint64_t destroy for BandPartOperator()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BandPartOperator(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for BandPartOperator(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BandPartOperator(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BandPartOperator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BandPartOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 4_Block_object_dispose(&STACK[0x278], 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BandPartOperator()
{
  return &type metadata for BandPartOperator;
}

uint64_t initializeWithCopy for CumulativeOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CumulativeOperator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for CumulativeOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for CumulativeOperator()
{
  return &type metadata for CumulativeOperator;
}

uint64_t initializeWithCopy for TopKOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TopKOperator(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for TopKOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for TopKOperator()
{
  return &type metadata for TopKOperator;
}

uint64_t destroy for PadOperator()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PadOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PadOperator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PadOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLModelStructure.Program.Operation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLModelStructure.Program.Operation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 4_Block_object_dispose(&STACK[0x278], 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PadOperator()
{
  return &type metadata for PadOperator;
}

uint64_t initializeWithCopy for ArgumentSortOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ArgumentSortOperator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ArgumentSortOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for ArgumentSortOperator()
{
  return &type metadata for ArgumentSortOperator;
}

uint64_t initializeWithCopy for CastOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CastOperator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  return a1;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CastOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for CastOperator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 34)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CastOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 34) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CastOperator()
{
  return &type metadata for CastOperator;
}

ValueMetadata *type metadata accessor for ReshapeOperator()
{
  return &type metadata for ReshapeOperator;
}

ValueMetadata *type metadata accessor for TransposeOperator()
{
  return &type metadata for TransposeOperator;
}

uint64_t destroy for SliceOperator()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SliceOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SliceOperator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SliceOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SliceOperator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SliceOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SliceOperator()
{
  return &type metadata for SliceOperator;
}

void *initializeWithCopy for SelectOperator(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SelectOperator(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for SelectOperator(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s6CoreML24ReductionLogicalOperatorVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_19E620CE4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SelectOperator()
{
  return &type metadata for SelectOperator;
}

uint64_t _s6CoreML24ReductionLogicalOperatorVwxx_0()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ConcatOperator(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ConcatOperator(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

void *assignWithTake for ConcatOperator(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for ConcatOperator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConcatOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConcatOperator()
{
  return &type metadata for ConcatOperator;
}

uint64_t destroy for SplitOperator(uint64_t a1)
{
  sub_19E61EFA8(*(void *)a1, *(unsigned char *)(a1 + 8));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SplitOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_19E61EF8C(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SplitOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_19E61EF8C(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v5;
  sub_19E61EFA8(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SplitOperator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v5;
  sub_19E61EFA8(v6, v7);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[6];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SplitOperator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SplitOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SplitOperator()
{
  return &type metadata for SplitOperator;
}

uint64_t _s6CoreML12TileOperatorVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s6CoreML12TileOperatorVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s6CoreML12TileOperatorVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s6CoreML12TileOperatorVwta_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s6CoreML12TileOperatorVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_19E62134C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReverseOperator()
{
  return &type metadata for ReverseOperator;
}

uint64_t getEnumTagSinglePayload for GatherOperator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GatherOperator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_19E621430(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GatherOperator()
{
  return &type metadata for GatherOperator;
}

uint64_t getEnumTagSinglePayload for ScatterOperator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 7;
  int v5 = v3 - 7;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScatterOperator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(unsigned char *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0;
    *(void *)__n128 result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + _Block_object_dispose(&STACK[0x278], 8) = a2 + 6;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScatterOperator()
{
  return &type metadata for ScatterOperator;
}

uint64_t destroy for ResizeOperator()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ResizeOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ResizeOperator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for ResizeOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t _s6CoreML20ArgumentSortOperatorVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_19E62163C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResizeOperator()
{
  return &type metadata for ResizeOperator;
}

uint64_t _s6CoreML13SplitOperatorV4KindOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s6CoreML13SplitOperatorV4KindOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + _Block_object_dispose(&STACK[0x278], 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivationOperator()
{
  return &type metadata for ActivationOperator;
}

unint64_t sub_19E621738()
{
  unint64_t result = qword_1E945C5E8;
  if (!qword_1E945C5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C5E8);
  }
  return result;
}

unint64_t sub_19E62178C(unint64_t result)
{
  if (result >= 6) {
    return 6;
  }
  return result;
}

unint64_t sub_19E62179C(unint64_t result)
{
  if (result >= 0x13) {
    return 19;
  }
  return result;
}

unint64_t sub_19E6217AC(unint64_t result)
{
  if (result >= 8) {
    return 8;
  }
  return result;
}

uint64_t _s6CoreML20UnaryLogicalOperatorOwet_0(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s6CoreML20UnaryLogicalOperatorOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x19E6218A8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConvolutionOperator.Kind()
{
  return &type metadata for ConvolutionOperator.Kind;
}

ValueMetadata *type metadata accessor for CumulativeOperator.Kind()
{
  return &type metadata for CumulativeOperator.Kind;
}

unsigned char *_s6CoreML24ReductionLogicalOperatorV4KindOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19E6219C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReductionLogicalOperator.Kind()
{
  return &type metadata for ReductionLogicalOperator.Kind;
}

unsigned char *storeEnumTagSinglePayload for ReductionOperator.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19E621AC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReductionOperator.Kind()
{
  return &type metadata for ReductionOperator.Kind;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ScatterOperator.Kind(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ScatterOperator.Kind(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + _Block_object_dispose(&STACK[0x278], 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ScatterOperator.Kind()
{
  return &type metadata for ScatterOperator.Kind;
}

unint64_t sub_19E621B68()
{
  unint64_t result = qword_1E945C5F0;
  if (!qword_1E945C5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C5F0);
  }
  return result;
}

unint64_t sub_19E621BC0()
{
  unint64_t result = qword_1E945C5F8;
  if (!qword_1E945C5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C5F8);
  }
  return result;
}

unint64_t sub_19E621C18()
{
  unint64_t result = qword_1E945C600;
  if (!qword_1E945C600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C600);
  }
  return result;
}

unint64_t sub_19E621C70()
{
  unint64_t result = qword_1E945C608;
  if (!qword_1E945C608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C608);
  }
  return result;
}

unint64_t sub_19E621CC8()
{
  unint64_t result = qword_1E945C610;
  if (!qword_1E945C610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C610);
  }
  return result;
}

uint64_t sub_19E621D6C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2 - result;
  if (__OFSUB__(a2, result)) {
    goto LABEL_22;
  }
  uint64_t v6 = result;
  unint64_t result = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v22 = MEMORY[0x1E4FBC860];
    unint64_t result = sub_19E66F7A8(0, v5 & ~(v5 >> 63), 0);
    if (a2 < v6 || v5 < 0) {
      goto LABEL_23;
    }
    unint64_t result = v22;
    uint64_t v8 = v6 + 4;
    uint64_t v10 = a4;
    uint64_t v9 = a5;
    uint64_t v11 = a3;
    while (v8 - a2 != 4)
    {
      if (v6 < 0) {
        goto LABEL_17;
      }
      unint64_t v12 = v8 - 4;
      if ((unint64_t)(v8 - 4) >= *(void *)(*(void *)v11 + 16)) {
        goto LABEL_18;
      }
      if (v12 >= *(void *)(*(void *)v10 + 16)) {
        goto LABEL_19;
      }
      uint64_t v13 = *(void *)(*(void *)v11 + 8 * v8);
      uint64_t v14 = *(void *)(*(void *)v10 + 8 * v8);
      if (v14 < v13) {
        goto LABEL_20;
      }
      if (v12 >= *(void *)(*(void *)v9 + 16)) {
        goto LABEL_21;
      }
      uint64_t v15 = *(void *)(*(void *)v9 + 8 * v8);
      uint64_t v23 = result;
      unint64_t v17 = *(void *)(result + 16);
      unint64_t v16 = *(void *)(result + 24);
      if (v17 >= v16 >> 1)
      {
        sub_19E66F7A8(v16 > 1, v17 + 1, 1);
        uint64_t v11 = a3;
        uint64_t v10 = a4;
        uint64_t v9 = a5;
        unint64_t result = v23;
      }
      *(void *)(result + 16) = v17 + 1;
      float v18 = (void *)(result + 24 * v17);
      v18[4] = v13;
      v18[5] = v14;
      v18[6] = v15;
      if (++v8 - a2 == 4) {
        return result;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  return result;
}

uint64_t sub_19E621EFC(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    sub_19E66F600(0, v2, 0);
    uint64_t result = v9;
    unsigned int v4 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v6 = *v4;
      v4 += 3;
      uint64_t v5 = v6;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_19E66F600(v7 > 1, v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(void *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_19E621FBC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v4) {
    int64_t v6 = *(void *)(a1 + 16);
  }
  else {
    int64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v34 = MEMORY[0x1E4FBC860];
  sub_19E66F600(0, v6, 0);
  int64_t v7 = v6;
  unint64_t v31 = v4;
  uint64_t v33 = a1;
  int64_t v30 = v5;
  if (v6)
  {
    unint64_t v8 = (void *)(a1 + 32);
    uint64_t v9 = (void *)(a2 + 32);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v11 = v7;
    uint64_t v12 = a2;
    while (v4)
    {
      if (!v5) {
        goto LABEL_28;
      }
      uint64_t v13 = *v8 - *v9;
      if (__OFSUB__(*v8, *v9)) {
        goto LABEL_29;
      }
      unint64_t v15 = *(void *)(v34 + 16);
      unint64_t v14 = *(void *)(v34 + 24);
      if (v15 >= v14 >> 1)
      {
        uint64_t v28 = v12;
        uint64_t result = sub_19E66F600(v14 > 1, v15 + 1, 1);
        uint64_t v12 = v28;
      }
      --v5;
      *(void *)(v34 + 16) = v15 + 1;
      *(void *)(v34 + 8 * v15 + 32) = v13;
      --v4;
      ++v9;
      ++v8;
      if (!--v11) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v12 = a2;
LABEL_14:
    if (v31 <= v30)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v34;
    }
    uint64_t v16 = 0;
    if (v7 <= v30) {
      int64_t v17 = v30;
    }
    else {
      int64_t v17 = v7;
    }
    int64_t v18 = v17 - v7;
    unint64_t v19 = v31 - v7;
    uint64_t v20 = 8 * v7 + 32;
    uint64_t v21 = v33 + v20;
    uint64_t v22 = v12 + v20;
    while (v19 != v16)
    {
      if (v30 - v7 == v16) {
        goto LABEL_26;
      }
      if (v18 == v16) {
        goto LABEL_31;
      }
      uint64_t v23 = *(void *)(v21 + 8 * v16);
      uint64_t v24 = *(void *)(v22 + 8 * v16);
      uint64_t v25 = v23 - v24;
      if (__OFSUB__(v23, v24)) {
        goto LABEL_32;
      }
      unint64_t v27 = *(void *)(v34 + 16);
      unint64_t v26 = *(void *)(v34 + 24);
      if (v27 >= v26 >> 1)
      {
        uint64_t v29 = v12;
        uint64_t v32 = v18;
        uint64_t result = sub_19E66F600(v26 > 1, v27 + 1, 1);
        int64_t v18 = v32;
        uint64_t v12 = v29;
      }
      *(void *)(v34 + 16) = v27 + 1;
      *(void *)(v34 + 8 * v27 + 32) = v25;
      if (v19 == ++v16) {
        goto LABEL_26;
      }
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_19E6221F0@<X0>(unint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v2 = a1 >> 62;
  switch(a1 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v5 = (a1 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v5 = (a1 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v5 = a1 + 40;
      break;
  }
  if (!*(void *)(*(void *)v5 + 16))
  {
LABEL_18:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E622620);
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  int64_t v6 = (void *)v29[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = a1;
  uint64_t v8 = a1 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v26);
  swift_bridgeObjectRelease();
  sub_19E601010(v6);
  uint64_t v9 = swift_bridgeObjectRetain();
  sub_19E624FBC(v9, (uint64_t)v29);
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_19E6766C0(v29[5], v29[6], v29[7]);
  if (!v10)
  {
    swift_retain();
    sub_19EBF6FE8();
    sub_19EBF67D8();
    uint64_t v24 = swift_bridgeObjectRetain();
    MEMORY[0x19F3BF220](v24, MEMORY[0x1E4FBB550]);
    sub_19EBF67D8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_19EBF67D8();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C620);
    sub_19EBF7188();
    sub_19EBF67D8();
    goto LABEL_18;
  }
  int64_t v11 = v10;
  uint64_t v25 = a2;
  switch((int)v2)
  {
    case 1:
    case 3:
      uint64_t v12 = (char *)(v8 + 32);
      uint64_t v13 = (char *)(v8 + 33);
      break;
    case 2:
      uint64_t v12 = (char *)(v8 + 24);
      uint64_t v13 = (char *)(v8 + 25);
      break;
    default:
      uint64_t v12 = (char *)(a1 + 48);
      uint64_t v13 = (char *)(a1 + 49);
      break;
  }
  char v14 = *v13;
  char v15 = *v12;
  uint64_t v16 = v27;
  uint64_t v17 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_19EC36240;
  *(void *)(v18 + 32) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v19 = swift_initStackObject();
  *(void *)(v19 + 32) = v11;
  *(_OWORD *)(v19 + 16) = xmmword_19EC36240;
  *(unsigned char *)(v19 + 40) = v15;
  *(unsigned char *)(v19 + 41) = v14;
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 120);
  swift_retain();
  uint64_t v21 = v20(v29, v18, v19, v16, v17);
  sub_19E625BAC((uint64_t)v29);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v21 + 16))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v22 = *(void *)(v21 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  *uint64_t v25 = v22;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v26);
}

__n128 _MLTensorRange._mlTensorRange.getter@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  unsigned __int8 v3 = v1[1].n128_u8[8];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  return result;
}

__n128 sub_19E62266C@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  unsigned __int8 v3 = v1[1].n128_u8[8];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  return result;
}

uint64_t sub_19E622688(uint64_t a1, uint64_t a2)
{
  return sub_19E624E74(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
}

uint64_t Int._mlTensorRange.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + _Block_object_dispose(&STACK[0x278], 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

void sub_19E6226BC(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 24) = 0;
}

uint64_t Range<>._mlTensorRange.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x278], 8) = a2;
  *(void *)(a3 + 16) = 1;
  *(unsigned char *)(a3 + 24) = 1;
  return result;
}

__n128 sub_19E6226E4@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 1;
  a1[1].n128_u8[8] = 1;
  return result;
}

uint64_t ClosedRange<>._mlTensorRange.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x278], 8) = a2;
  *(void *)(a3 + 16) = 1;
  *(unsigned char *)(a3 + 24) = 2;
  return result;
}

__n128 sub_19E622714@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 1;
  a1[1].n128_u8[8] = 2;
  return result;
}

double PartialRangeFrom<>._mlTensorRange.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)&double result = 1;
  *(_OWORD *)(a2 + _Block_object_dispose(&STACK[0x278], 8) = xmmword_19EC38480;
  *(unsigned char *)(a2 + 24) = 3;
  return result;
}

double sub_19E62274C@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = xmmword_19EC38480;
  *(unsigned char *)(a1 + 24) = 3;
  return result;
}

double PartialRangeUpTo<>._mlTensorRange.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)&double result = 1;
  *(_OWORD *)(a2 + _Block_object_dispose(&STACK[0x278], 8) = xmmword_19EC38480;
  *(unsigned char *)(a2 + 24) = 4;
  return result;
}

double sub_19E622788@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = xmmword_19EC38480;
  *(unsigned char *)(a1 + 24) = 4;
  return result;
}

double PartialRangeThrough<>._mlTensorRange.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)&double result = 1;
  *(_OWORD *)(a2 + _Block_object_dispose(&STACK[0x278], 8) = xmmword_19EC38480;
  *(unsigned char *)(a2 + 24) = 5;
  return result;
}

double sub_19E6227C4@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = xmmword_19EC38480;
  *(unsigned char *)(a1 + 24) = 5;
  return result;
}

uint64_t static MLTensorRangeExpression<>.fillAll.getter@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = (uint64_t)&type metadata for _MLTensorRange;
  a1[4] = (uint64_t)&protocol witness table for _MLTensorRange;
  uint64_t result = swift_allocObject();
  *a1 = result;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 40) = 6;
  return result;
}

uint64_t sub_19E622840()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t static MLTensorRangeExpression<>.newAxis.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_19E622860(1, a1);
}

uint64_t static MLTensorRangeExpression<>.squeezeAxis.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_19E622860(2, a1);
}

uint64_t sub_19E622860@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  a2[3] = (uint64_t)&type metadata for _MLTensorRange;
  a2[4] = (uint64_t)&protocol witness table for _MLTensorRange;
  uint64_t result = swift_allocObject();
  *a2 = result;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = a1;
  *(unsigned char *)(result + 40) = 6;
  return result;
}

uint64_t static MLTensorRangeExpression<>.index(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  a2[3] = (uint64_t)&type metadata for _MLTensorRange;
  a2[4] = (uint64_t)&protocol witness table for _MLTensorRange;
  uint64_t result = swift_allocObject();
  *a2 = result;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = a1;
  *(unsigned char *)(result + 40) = 0;
  return result;
}

uint64_t static MLTensorRangeExpression<>.range(_:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_19E62292C(a1, a2, a3, 1, a4);
}

uint64_t static MLTensorRangeExpression<>.closedRange(_:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_19E62292C(a1, a2, a3, 2, a4);
}

uint64_t sub_19E62292C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  a5[3] = (uint64_t)&type metadata for _MLTensorRange;
  a5[4] = (uint64_t)&protocol witness table for _MLTensorRange;
  uint64_t result = swift_allocObject();
  *a5 = result;
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = a3;
  *(unsigned char *)(result + 40) = a4;
  return result;
}

uint64_t static MLTensorRangeExpression<>.partialRangeFrom(_:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_19E6229BC(a1, a2, 3, a3);
}

uint64_t static MLTensorRangeExpression<>.partialRangeUpTo(_:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_19E6229BC(a1, a2, 4, a3);
}

{
  return sub_19E6229BC(a1, a2, 5, a3);
}

uint64_t sub_19E6229BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  a4[3] = (uint64_t)&type metadata for _MLTensorRange;
  a4[4] = (uint64_t)&protocol witness table for _MLTensorRange;
  uint64_t result = swift_allocObject();
  *a4 = result;
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = 0;
  *(unsigned char *)(result + 40) = a3;
  return result;
}

uint64_t MLTensor.IndexPath.start.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLTensor.IndexPath.end.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLTensor.IndexPath.strides.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLTensor.IndexPath.beginMask.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t MLTensor.IndexPath.endMask.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t MLTensor.IndexPath.ellipsisMask.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t MLTensor.IndexPath.newAxisMask.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t MLTensor.IndexPath.squeezeAxisMask.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t MLTensor.IndexPath.init(begin:end:strides:beginMask:endMask:ellipsisMask:newAxisMask:squeezeAxisMask:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

uint64_t MLTensor.subscript.getter@<X0>(uint64_t a1@<X2>, void *a2@<X8>)
{
  unsigned __int8 v3 = a2;
  uint64_t v4 = *v2;
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v29 = *v2;
    uint64_t v36 = MEMORY[0x1E4FBC860];
    sub_19E66F7C8(0, v5, 0);
    uint64_t v8 = a1 + 32;
    do
    {
      sub_19E624DAC(v8, (uint64_t)v37);
      sub_19E624DAC((uint64_t)v37, (uint64_t)v33);
      uint64_t v9 = v34;
      if (v34)
      {
        uint64_t v10 = v35;
        __swift_project_boxed_opaque_existential_1(v33, v34);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v31, v9, v10);
        uint64_t v11 = v31[0];
        uint64_t v12 = v31[1];
        uint64_t v13 = v31[2];
        char v14 = v32;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v33);
      }
      else
      {
        sub_19E624E14((uint64_t)v33);
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        char v14 = -1;
      }
      sub_19E624E14((uint64_t)v37);
      uint64_t v6 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19E66F7C8(0, *(void *)(v6 + 16) + 1, 1);
        uint64_t v6 = v36;
      }
      unint64_t v16 = *(void *)(v6 + 16);
      unint64_t v15 = *(void *)(v6 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_19E66F7C8(v15 > 1, v16 + 1, 1);
        uint64_t v6 = v36;
      }
      *(void *)(v6 + 16) = v16 + 1;
      uint64_t v17 = v6 + 32 * v16;
      *(void *)(v17 + 32) = v11;
      *(void *)(v17 + 40) = v12;
      *(void *)(v17 + 4_Block_object_dispose(&STACK[0x278], 8) = v13;
      *(unsigned char *)(v17 + 56) = v14;
      v8 += 40;
      --v5;
    }
    while (v5);
    uint64_t v4 = v29;
    unsigned __int8 v3 = a2;
  }
  v37[0] = &unk_1EF0CA530;
  sub_19E612EB0(v6);
  uint64_t v18 = v37[0];
  uint64_t v19 = *(void *)(v37[0] + 16);
  if (v19)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = (unsigned char *)(v18 + 56);
    uint64_t v21 = MEMORY[0x1E4FBC860];
    do
    {
      if (*v20 == 6 && !(*((void *)v20 - 2) | *((void *)v20 - 1) | *((void *)v20 - 3)))
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v37[0] = v21;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_19E66F7C8(0, *(void *)(v21 + 16) + 1, 1);
          uint64_t v21 = v37[0];
        }
        unint64_t v23 = *(void *)(v21 + 16);
        unint64_t v22 = *(void *)(v21 + 24);
        if (v23 >= v22 >> 1)
        {
          sub_19E66F7C8(v22 > 1, v23 + 1, 1);
          uint64_t v21 = v37[0];
        }
        *(void *)(v21 + 16) = v23 + 1;
        uint64_t v24 = v21 + 32 * v23;
        *(void *)(v24 + 40) = 0;
        *(void *)(v24 + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
        *(void *)(v24 + 32) = 0;
        *(unsigned char *)(v24 + 56) = 6;
      }
      v20 += 32;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = MEMORY[0x1E4FBC860];
  }
  unint64_t v26 = *(void *)(v21 + 16);
  swift_release();
  if (v26 <= 1
    && (sub_19E62516C(v18, v37),
        swift_bridgeObjectRelease(),
        uint64_t v27 = *(void *)(v37[0] + 16),
        v27 == *(void *)(v37[1] + 16))
    && v27 == *(void *)(v37[2] + 16))
  {
    v33[0] = v4;
    swift_retain();
    sub_19E624018(v37, v3);
    sub_19E625808((uint64_t)v37);
    return swift_release();
  }
  else
  {
    uint64_t result = sub_19EBF71F8();
    __break(1u);
  }
  return result;
}

uint64_t MLTensor.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, void *a3@<X8>)
{
  uint64_t v7 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF80);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  sub_19E624DAC(a1, (uint64_t)v46);
  uint64_t v9 = v47;
  if (v47)
  {
    uint64_t v10 = v48;
    __swift_project_boxed_opaque_existential_1(v46, v47);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 8))(&v41, v9, v10);
    uint64_t v11 = v42;
    char v12 = v43;
    *(_OWORD *)(inited + 32) = v41;
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x278], 8) = v11;
    *(unsigned char *)(inited + 56) = v12;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v46);
  }
  else
  {
    sub_19E624E14((uint64_t)v46);
    *(void *)(inited + 32) = 0;
    *(void *)(inited + 40) = 0;
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
    *(unsigned char *)(inited + 56) = -1;
  }
  *(void *)(inited + 64) = 0;
  *(void *)(inited + 72) = 0;
  *(void *)(inited + 80) = 0;
  *(unsigned char *)(inited + 8_Block_object_dispose(&STACK[0x278], 8) = 6;
  int64_t v13 = *(void *)(a2 + 16);
  uint64_t v14 = MEMORY[0x1E4FBC860];
  if (v13)
  {
    uint64_t v36 = inited;
    uint64_t v37 = v7;
    uint64_t v38 = a3;
    uint64_t v45 = MEMORY[0x1E4FBC860];
    sub_19E66F7C8(0, v13, 0);
    uint64_t v15 = a2 + 32;
    do
    {
      sub_19E624DAC(v15, (uint64_t)v46);
      sub_19E624DAC((uint64_t)v46, (uint64_t)&v41);
      uint64_t v16 = v43;
      if (v43)
      {
        uint64_t v17 = v44;
        __swift_project_boxed_opaque_existential_1(&v41, v43);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 8))(v39, v16, v17);
        uint64_t v18 = v39[0];
        uint64_t v19 = v39[1];
        uint64_t v20 = v39[2];
        char v21 = v40;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v41);
      }
      else
      {
        sub_19E624E14((uint64_t)&v41);
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        char v21 = -1;
      }
      sub_19E624E14((uint64_t)v46);
      uint64_t v14 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19E66F7C8(0, *(void *)(v14 + 16) + 1, 1);
        uint64_t v14 = v45;
      }
      unint64_t v23 = *(void *)(v14 + 16);
      unint64_t v22 = *(void *)(v14 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_19E66F7C8(v22 > 1, v23 + 1, 1);
        uint64_t v14 = v45;
      }
      *(void *)(v14 + 16) = v23 + 1;
      uint64_t v24 = v14 + 32 * v23;
      *(void *)(v24 + 32) = v18;
      *(void *)(v24 + 40) = v19;
      *(void *)(v24 + 4_Block_object_dispose(&STACK[0x278], 8) = v20;
      *(unsigned char *)(v24 + 56) = v21;
      v15 += 40;
      --v13;
    }
    while (v13);
    uint64_t v7 = v37;
    a3 = v38;
    uint64_t inited = v36;
  }
  v46[0] = inited;
  sub_19E612EB0(v14);
  uint64_t v25 = v46[0];
  uint64_t v26 = *(void *)(v46[0] + 16);
  if (v26)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = (unsigned char *)(v25 + 56);
    uint64_t v28 = MEMORY[0x1E4FBC860];
    do
    {
      if (*v27 == 6 && !(*((void *)v27 - 2) | *((void *)v27 - 1) | *((void *)v27 - 3)))
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v46[0] = v28;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_19E66F7C8(0, *(void *)(v28 + 16) + 1, 1);
          uint64_t v28 = v46[0];
        }
        unint64_t v30 = *(void *)(v28 + 16);
        unint64_t v29 = *(void *)(v28 + 24);
        if (v30 >= v29 >> 1)
        {
          sub_19E66F7C8(v29 > 1, v30 + 1, 1);
          uint64_t v28 = v46[0];
        }
        *(void *)(v28 + 16) = v30 + 1;
        uint64_t v31 = v28 + 32 * v30;
        *(void *)(v31 + 40) = 0;
        *(void *)(v31 + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
        *(void *)(v31 + 32) = 0;
        *(unsigned char *)(v31 + 56) = 6;
      }
      v27 += 32;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = MEMORY[0x1E4FBC860];
  }
  unint64_t v33 = *(void *)(v28 + 16);
  swift_release();
  if (v33 <= 1
    && (sub_19E62516C(v25, v46),
        swift_bridgeObjectRelease(),
        uint64_t v34 = *(void *)(v46[0] + 16),
        v34 == *(void *)(v46[1] + 16))
    && v34 == *(void *)(v46[2] + 16))
  {
    *(void *)&long long v41 = v7;
    swift_retain();
    sub_19E624018(v46, a3);
    sub_19E625808((uint64_t)v46);
    return swift_release();
  }
  else
  {
    uint64_t result = sub_19EBF71F8();
    __break(1u);
  }
  return result;
}

uint64_t MLTensor.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, void *a4@<X8>)
{
  uint64_t v9 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF80);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365F0;
  sub_19E624DAC(a1, (uint64_t)v52);
  uint64_t v11 = v53;
  if (v53)
  {
    uint64_t v12 = v54;
    __swift_project_boxed_opaque_existential_1(v52, v53);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v12 + 8))(&v47, v11, v12);
    uint64_t v13 = v48;
    char v14 = v49;
    *(_OWORD *)(inited + 32) = v47;
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x278], 8) = v13;
    *(unsigned char *)(inited + 56) = v14;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v52);
  }
  else
  {
    sub_19E624E14((uint64_t)v52);
    *(void *)(inited + 32) = 0;
    *(void *)(inited + 40) = 0;
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
    *(unsigned char *)(inited + 56) = -1;
  }
  sub_19E624DAC(a2, (uint64_t)v52);
  uint64_t v15 = v53;
  if (v53)
  {
    uint64_t v16 = v54;
    __swift_project_boxed_opaque_existential_1(v52, v53);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v16 + 8))(&v47, v15, v16);
    uint64_t v17 = v48;
    char v18 = v49;
    *(_OWORD *)(inited + 64) = v47;
    *(void *)(inited + 80) = v17;
    *(unsigned char *)(inited + 8_Block_object_dispose(&STACK[0x278], 8) = v18;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v52);
  }
  else
  {
    sub_19E624E14((uint64_t)v52);
    *(void *)(inited + 64) = 0;
    *(void *)(inited + 72) = 0;
    *(void *)(inited + 80) = 0;
    *(unsigned char *)(inited + 8_Block_object_dispose(&STACK[0x278], 8) = -1;
  }
  *(void *)(inited + 96) = 0;
  *(void *)(inited + 104) = 0;
  *(void *)(inited + 112) = 0;
  *(unsigned char *)(inited + 120) = 6;
  int64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = MEMORY[0x1E4FBC860];
  if (v19)
  {
    uint64_t v42 = inited;
    uint64_t v43 = v9;
    uint64_t v44 = a4;
    uint64_t v51 = MEMORY[0x1E4FBC860];
    sub_19E66F7C8(0, v19, 0);
    uint64_t v21 = a3 + 32;
    do
    {
      sub_19E624DAC(v21, (uint64_t)v52);
      sub_19E624DAC((uint64_t)v52, (uint64_t)&v47);
      uint64_t v22 = v49;
      if (v49)
      {
        uint64_t v23 = v50;
        __swift_project_boxed_opaque_existential_1(&v47, v49);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v23 + 8))(v45, v22, v23);
        uint64_t v24 = v45[0];
        uint64_t v25 = v45[1];
        uint64_t v26 = v45[2];
        char v27 = v46;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v47);
      }
      else
      {
        sub_19E624E14((uint64_t)&v47);
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        char v27 = -1;
      }
      sub_19E624E14((uint64_t)v52);
      uint64_t v20 = v51;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19E66F7C8(0, *(void *)(v20 + 16) + 1, 1);
        uint64_t v20 = v51;
      }
      unint64_t v29 = *(void *)(v20 + 16);
      unint64_t v28 = *(void *)(v20 + 24);
      if (v29 >= v28 >> 1)
      {
        sub_19E66F7C8(v28 > 1, v29 + 1, 1);
        uint64_t v20 = v51;
      }
      *(void *)(v20 + 16) = v29 + 1;
      uint64_t v30 = v20 + 32 * v29;
      *(void *)(v30 + 32) = v24;
      *(void *)(v30 + 40) = v25;
      *(void *)(v30 + 4_Block_object_dispose(&STACK[0x278], 8) = v26;
      *(unsigned char *)(v30 + 56) = v27;
      v21 += 40;
      --v19;
    }
    while (v19);
    uint64_t v9 = v43;
    a4 = v44;
    uint64_t inited = v42;
  }
  v52[0] = inited;
  sub_19E612EB0(v20);
  uint64_t v31 = v52[0];
  uint64_t v32 = *(void *)(v52[0] + 16);
  if (v32)
  {
    swift_bridgeObjectRetain();
    unint64_t v33 = (unsigned char *)(v31 + 56);
    uint64_t v34 = MEMORY[0x1E4FBC860];
    do
    {
      if (*v33 == 6 && !(*((void *)v33 - 2) | *((void *)v33 - 1) | *((void *)v33 - 3)))
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v52[0] = v34;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_19E66F7C8(0, *(void *)(v34 + 16) + 1, 1);
          uint64_t v34 = v52[0];
        }
        unint64_t v36 = *(void *)(v34 + 16);
        unint64_t v35 = *(void *)(v34 + 24);
        if (v36 >= v35 >> 1)
        {
          sub_19E66F7C8(v35 > 1, v36 + 1, 1);
          uint64_t v34 = v52[0];
        }
        *(void *)(v34 + 16) = v36 + 1;
        uint64_t v37 = v34 + 32 * v36;
        *(void *)(v37 + 40) = 0;
        *(void *)(v37 + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
        *(void *)(v37 + 32) = 0;
        *(unsigned char *)(v37 + 56) = 6;
      }
      v33 += 32;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = MEMORY[0x1E4FBC860];
  }
  unint64_t v39 = *(void *)(v34 + 16);
  swift_release();
  if (v39 <= 1
    && (sub_19E62516C(v31, v52),
        swift_bridgeObjectRelease(),
        uint64_t v40 = *(void *)(v52[0] + 16),
        v40 == *(void *)(v52[1] + 16))
    && v40 == *(void *)(v52[2] + 16))
  {
    *(void *)&long long v47 = v9;
    swift_retain();
    sub_19E624018(v52, a4);
    sub_19E625808((uint64_t)v52);
    return swift_release();
  }
  else
  {
    uint64_t result = sub_19EBF71F8();
    __break(1u);
  }
  return result;
}

uint64_t MLTensor.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, void *a5@<X8>)
{
  uint64_t v11 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CF80);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC38490;
  sub_19E624DAC(a1, (uint64_t)v58);
  uint64_t v13 = v59;
  if (v59)
  {
    uint64_t v14 = v60;
    __swift_project_boxed_opaque_existential_1(v58, v59);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v14 + 8))(&v53, v13, v14);
    uint64_t v15 = v54;
    char v16 = v55;
    *(_OWORD *)(inited + 32) = v53;
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x278], 8) = v15;
    *(unsigned char *)(inited + 56) = v16;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v58);
  }
  else
  {
    sub_19E624E14((uint64_t)v58);
    *(void *)(inited + 32) = 0;
    *(void *)(inited + 40) = 0;
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
    *(unsigned char *)(inited + 56) = -1;
  }
  sub_19E624DAC(a2, (uint64_t)v58);
  uint64_t v17 = v59;
  if (v59)
  {
    uint64_t v18 = v60;
    __swift_project_boxed_opaque_existential_1(v58, v59);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v18 + 8))(&v53, v17, v18);
    uint64_t v19 = v54;
    char v20 = v55;
    *(_OWORD *)(inited + 64) = v53;
    *(void *)(inited + 80) = v19;
    *(unsigned char *)(inited + 8_Block_object_dispose(&STACK[0x278], 8) = v20;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v58);
  }
  else
  {
    sub_19E624E14((uint64_t)v58);
    *(void *)(inited + 64) = 0;
    *(void *)(inited + 72) = 0;
    *(void *)(inited + 80) = 0;
    *(unsigned char *)(inited + 8_Block_object_dispose(&STACK[0x278], 8) = -1;
  }
  sub_19E624DAC(a3, (uint64_t)v58);
  uint64_t v21 = v59;
  if (v59)
  {
    uint64_t v22 = v60;
    __swift_project_boxed_opaque_existential_1(v58, v59);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v22 + 8))(&v53, v21, v22);
    uint64_t v23 = v54;
    char v24 = v55;
    *(_OWORD *)(inited + 96) = v53;
    *(void *)(inited + 112) = v23;
    *(unsigned char *)(inited + 120) = v24;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v58);
  }
  else
  {
    sub_19E624E14((uint64_t)v58);
    *(void *)(inited + 96) = 0;
    *(void *)(inited + 104) = 0;
    *(void *)(inited + 112) = 0;
    *(unsigned char *)(inited + 120) = -1;
  }
  *(void *)(inited + 12_Block_object_dispose(&STACK[0x278], 8) = 0;
  *(void *)(inited + 136) = 0;
  *(void *)(inited + 144) = 0;
  *(unsigned char *)(inited + 152) = 6;
  int64_t v25 = *(void *)(a4 + 16);
  uint64_t v26 = MEMORY[0x1E4FBC860];
  if (v25)
  {
    uint64_t v48 = inited;
    uint64_t v49 = v11;
    uint64_t v50 = a5;
    uint64_t v57 = MEMORY[0x1E4FBC860];
    sub_19E66F7C8(0, v25, 0);
    uint64_t v27 = a4 + 32;
    do
    {
      sub_19E624DAC(v27, (uint64_t)v58);
      sub_19E624DAC((uint64_t)v58, (uint64_t)&v53);
      uint64_t v28 = v55;
      if (v55)
      {
        uint64_t v29 = v56;
        __swift_project_boxed_opaque_existential_1(&v53, v55);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v29 + 8))(v51, v28, v29);
        uint64_t v30 = v51[0];
        uint64_t v31 = v51[1];
        uint64_t v32 = v51[2];
        char v33 = v52;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v53);
      }
      else
      {
        sub_19E624E14((uint64_t)&v53);
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = -1;
      }
      sub_19E624E14((uint64_t)v58);
      uint64_t v26 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19E66F7C8(0, *(void *)(v26 + 16) + 1, 1);
        uint64_t v26 = v57;
      }
      unint64_t v35 = *(void *)(v26 + 16);
      unint64_t v34 = *(void *)(v26 + 24);
      if (v35 >= v34 >> 1)
      {
        sub_19E66F7C8(v34 > 1, v35 + 1, 1);
        uint64_t v26 = v57;
      }
      *(void *)(v26 + 16) = v35 + 1;
      uint64_t v36 = v26 + 32 * v35;
      *(void *)(v36 + 32) = v30;
      *(void *)(v36 + 40) = v31;
      *(void *)(v36 + 4_Block_object_dispose(&STACK[0x278], 8) = v32;
      *(unsigned char *)(v36 + 56) = v33;
      v27 += 40;
      --v25;
    }
    while (v25);
    uint64_t v11 = v49;
    a5 = v50;
    uint64_t inited = v48;
  }
  v58[0] = inited;
  sub_19E612EB0(v26);
  uint64_t v37 = v58[0];
  uint64_t v38 = *(void *)(v58[0] + 16);
  if (v38)
  {
    swift_bridgeObjectRetain();
    unint64_t v39 = (unsigned char *)(v37 + 56);
    uint64_t v40 = MEMORY[0x1E4FBC860];
    do
    {
      if (*v39 == 6 && !(*((void *)v39 - 2) | *((void *)v39 - 1) | *((void *)v39 - 3)))
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v58[0] = v40;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_19E66F7C8(0, *(void *)(v40 + 16) + 1, 1);
          uint64_t v40 = v58[0];
        }
        unint64_t v42 = *(void *)(v40 + 16);
        unint64_t v41 = *(void *)(v40 + 24);
        if (v42 >= v41 >> 1)
        {
          sub_19E66F7C8(v41 > 1, v42 + 1, 1);
          uint64_t v40 = v58[0];
        }
        *(void *)(v40 + 16) = v42 + 1;
        uint64_t v43 = v40 + 32 * v42;
        *(void *)(v43 + 40) = 0;
        *(void *)(v43 + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
        *(void *)(v43 + 32) = 0;
        *(unsigned char *)(v43 + 56) = 6;
      }
      v39 += 32;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v40 = MEMORY[0x1E4FBC860];
  }
  unint64_t v45 = *(void *)(v40 + 16);
  swift_release();
  if (v45 <= 1
    && (sub_19E62516C(v37, v58),
        swift_bridgeObjectRelease(),
        uint64_t v46 = *(void *)(v58[0] + 16),
        v46 == *(void *)(v58[1] + 16))
    && v46 == *(void *)(v58[2] + 16))
  {
    *(void *)&long long v53 = v11;
    swift_retain();
    sub_19E624018(v58, a5);
    sub_19E625808((uint64_t)v58);
    return swift_release();
  }
  else
  {
    uint64_t result = sub_19EBF71F8();
    __break(1u);
  }
  return result;
}

uint64_t MLTensor.subscript.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned __int8 v3 = a2;
  uint64_t v4 = *v2;
  int64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v28 = *v2;
    uint64_t v35 = MEMORY[0x1E4FBC860];
    sub_19E66F7C8(0, v5, 0);
    uint64_t v7 = a1 + 32;
    do
    {
      sub_19E624DAC(v7, (uint64_t)v36);
      sub_19E624DAC((uint64_t)v36, (uint64_t)v32);
      uint64_t v8 = v33;
      if (v33)
      {
        uint64_t v9 = v34;
        __swift_project_boxed_opaque_existential_1(v32, v33);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 8))(v30, v8, v9);
        uint64_t v10 = v30[0];
        uint64_t v11 = v30[1];
        uint64_t v12 = v30[2];
        char v13 = v31;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
      }
      else
      {
        sub_19E624E14((uint64_t)v32);
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        char v13 = -1;
      }
      sub_19E624E14((uint64_t)v36);
      uint64_t v14 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19E66F7C8(0, *(void *)(v14 + 16) + 1, 1);
        uint64_t v14 = v35;
      }
      unint64_t v16 = *(void *)(v14 + 16);
      unint64_t v15 = *(void *)(v14 + 24);
      unint64_t v17 = v16 + 1;
      if (v16 >= v15 >> 1)
      {
        sub_19E66F7C8(v15 > 1, v16 + 1, 1);
        uint64_t v14 = v35;
      }
      *(void *)(v14 + 16) = v17;
      uint64_t v18 = v14 + 32 * v16;
      *(void *)(v18 + 32) = v10;
      *(void *)(v18 + 40) = v11;
      *(void *)(v18 + 4_Block_object_dispose(&STACK[0x278], 8) = v12;
      *(unsigned char *)(v18 + 56) = v13;
      v7 += 40;
      --v5;
    }
    while (v5);
    uint64_t v4 = v28;
    unsigned __int8 v3 = a2;
  }
  else
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    unint64_t v17 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    uint64_t v19 = MEMORY[0x1E4FBC860];
    if (!v17) {
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRetain();
  char v20 = (unsigned char *)(v14 + 56);
  uint64_t v19 = MEMORY[0x1E4FBC860];
  do
  {
    if (*v20 == 6 && !(*((void *)v20 - 2) | *((void *)v20 - 1) | *((void *)v20 - 3)))
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v36[0] = v19;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_19E66F7C8(0, *(void *)(v19 + 16) + 1, 1);
        uint64_t v19 = v36[0];
      }
      unint64_t v22 = *(void *)(v19 + 16);
      unint64_t v21 = *(void *)(v19 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_19E66F7C8(v21 > 1, v22 + 1, 1);
        uint64_t v19 = v36[0];
      }
      *(void *)(v19 + 16) = v22 + 1;
      uint64_t v23 = v19 + 32 * v22;
      *(void *)(v23 + 40) = 0;
      *(void *)(v23 + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
      *(void *)(v23 + 32) = 0;
      *(unsigned char *)(v23 + 56) = 6;
    }
    v20 += 32;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease();
LABEL_23:
  unint64_t v25 = *(void *)(v19 + 16);
  swift_release();
  if (v25 <= 1
    && (sub_19E62516C(v14, v36),
        swift_bridgeObjectRelease(),
        uint64_t v26 = *(void *)(v36[0] + 16),
        v26 == *(void *)(v36[1] + 16))
    && v26 == *(void *)(v36[2] + 16))
  {
    v32[0] = v4;
    swift_retain();
    sub_19E624018(v36, v3);
    sub_19E625808((uint64_t)v36);
    return swift_release();
  }
  else
  {
    uint64_t result = sub_19EBF71F8();
    __break(1u);
  }
  return result;
}

uint64_t sub_19E624018@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *v2;
  uint64_t v109 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v110 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v108 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v4 = *(void *)(*a1 + 16);
  unint64_t v97 = v3 >> 62;
  unint64_t v93 = v3;
  if (!v4)
  {
    uint64_t v66 = v3 & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v94 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v96 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_108;
  }
  int64_t v5 = a1;
  unint64_t v6 = 0;
  uint64_t v99 = a1[5];
  uint64_t v100 = 0;
  uint64_t v90 = v3 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v103 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 16;
  uint64_t v104 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 24;
  uint64_t v7 = (uint64_t *)(v3 + 40);
  uint64_t v92 = *a1 + 32;
  uint64_t v8 = -v4;
  uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v94 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v95 = *(void *)(*a1 + 16);
  uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v96 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v101 = v8;
    unint64_t v102 = v6;
    if (v6 > 0x40)
    {
      if (v99 < 0) {
        goto LABEL_12;
      }
      if ((v5[6] & 0x8000000000000000) != 0)
      {
LABEL_16:
        uint64_t v16 = v10[2];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v96 = sub_19E606EE4(0, v96[2] + 1, 1, v96);
        }
        unint64_t v18 = v96[2];
        unint64_t v17 = v96[3];
        if (v18 >= v17 >> 1) {
          uint64_t v96 = sub_19E606EE4((void *)(v17 > 1), v18 + 1, 1, v96);
        }
        v96[2] = v18 + 1;
        v96[v18 + 4] = v16;
        goto LABEL_4;
      }
      goto LABEL_8;
    }
    uint64_t v13 = 0x8000000000000000;
    if (v6 != 64) {
      uint64_t v13 = 1 << v6;
    }
    if ((v99 & v13) != 0)
    {
LABEL_12:
      uint64_t v14 = (uint64_t)v7;
      switch((int)v97)
      {
        case 1:
        case 3:
          uint64_t v14 = v104;
          break;
        case 2:
          uint64_t v14 = v103;
          break;
        default:
          break;
      }
      uint64_t v23 = *(void *)(*(void *)v14 + 16);
      uint64_t v24 = v10[2];
      uint64_t v25 = v4 - v6;
      uint64_t v26 = v23 - v24 - v25;
      if (__OFSUB__(v23 - v24, v25)) {
        goto LABEL_155;
      }
      BOOL v27 = __OFADD__(v100, v26);
      v100 += v26;
      if (v27)
      {
LABEL_156:
        __break(1u);
      }
      else if ((v26 & 0x8000000000000000) == 0)
      {
        uint64_t v28 = 0;
        uint64_t v29 = v23 + v8 - v24;
        while (1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v10 = sub_19E606EE4(0, v10[2] + 1, 1, v10);
          }
          unint64_t v31 = v10[2];
          unint64_t v30 = v10[3];
          if (v31 >= v30 >> 1) {
            uint64_t v10 = sub_19E606EE4((void *)(v30 > 1), v31 + 1, 1, v10);
          }
          uint64_t v10[2] = v31 + 1;
          v10[v31 + 4] = 0;
          uint64_t v32 = v7;
          switch((int)v97)
          {
            case 1:
            case 3:
              uint64_t v32 = (uint64_t *)v104;
              break;
            case 2:
              uint64_t v32 = (uint64_t *)v103;
              break;
            default:
              break;
          }
          uint64_t v33 = *v32;
          unint64_t v34 = v11[2];
          if (v34 >= *(void *)(v33 + 16)) {
            break;
          }
          uint64_t v35 = *(void *)(v33 + 8 * v34 + 32);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v11 = sub_19E606EE4(0, v34 + 1, 1, v11);
          }
          unint64_t v37 = v11[2];
          unint64_t v36 = v11[3];
          if (v37 >= v36 >> 1) {
            uint64_t v11 = sub_19E606EE4((void *)(v36 > 1), v37 + 1, 1, v11);
          }
          void v11[2] = v37 + 1;
          v11[v37 + 4] = v35;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v9 = sub_19E606EE4(0, v9[2] + 1, 1, v9);
          }
          unint64_t v39 = v9[2];
          unint64_t v38 = v9[3];
          if (v39 >= v38 >> 1) {
            uint64_t v9 = sub_19E606EE4((void *)(v38 > 1), v39 + 1, 1, v9);
          }
          uint64_t v9[2] = v39 + 1;
          v9[v39 + 4] = 1;
          if (v29 == v28)
          {
            uint64_t v108 = v9;
            uint64_t v109 = v11;
            uint64_t v110 = v10;
            uint64_t v4 = v95;
            goto LABEL_4;
          }
          BOOL v27 = __OFADD__(v28++, 1);
          if (v27) {
            goto LABEL_152;
          }
        }
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
        goto LABEL_156;
      }
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
      while (1)
      {
LABEL_170:
        sub_19EBF71F8();
        __break(1u);
LABEL_171:
        sub_19E5E2970((uint64_t)v106, (uint64_t)v105);
        sub_19E5E1864();
      }
    }
    uint64_t v15 = v5[6];
    if (v6 == 64)
    {
      if (v15 < 0) {
        goto LABEL_16;
      }
LABEL_8:
      char v12 = 63;
      goto LABEL_21;
    }
    char v12 = v6;
    if ((v15 & (1 << v6)) != 0) {
      goto LABEL_16;
    }
LABEL_21:
    if ((v5[7] >> v12))
    {
      uint64_t v19 = v10[2];
      char v20 = v94;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v20 = sub_19E606EE4(0, v94[2] + 1, 1, v94);
      }
      unint64_t v22 = v20[2];
      unint64_t v21 = v20[3];
      if (v22 >= v21 >> 1) {
        char v20 = sub_19E606EE4((void *)(v21 > 1), v22 + 1, 1, v20);
      }
      void v20[2] = v22 + 1;
      v20[v22 + 4] = v19;
      unint64_t v6 = v102;
    }
    else
    {
      char v20 = v94;
    }
    if (v6 > 0x40 || (char v40 = v6, v6 == 64)) {
      char v40 = 63;
    }
    if ((v5[3] >> v40))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = sub_19E606EE4(0, v10[2] + 1, 1, v10);
      }
      unint64_t v42 = v10[2];
      unint64_t v41 = v10[3];
      unint64_t v43 = v42 + 1;
      if (v42 >= v41 >> 1) {
        uint64_t v10 = sub_19E606EE4((void *)(v41 > 1), v42 + 1, 1, v10);
      }
      uint64_t v44 = 0;
    }
    else
    {
      uint64_t v44 = *(void *)(v92 + 8 * v6);
      unint64_t v45 = v7;
      switch((int)v97)
      {
        case 1:
        case 3:
          unint64_t v45 = (uint64_t *)v104;
          break;
        case 2:
          unint64_t v45 = (uint64_t *)v103;
          break;
        default:
          break;
      }
      unint64_t v46 = v102 + v100;
      if (__OFADD__(v102, v100)) {
        goto LABEL_162;
      }
      if ((v46 & 0x8000000000000000) != 0) {
        goto LABEL_163;
      }
      uint64_t v47 = *v45;
      if (v46 >= *(void *)(v47 + 16)) {
        goto LABEL_164;
      }
      uint64_t v48 = *(void *)(v47 + 8 * v46 + 32);
      v106[0] = *(void *)(v92 + 8 * v6);
      v106[1] = v48;
      char v107 = 6;
      uint64_t v49 = -v48;
      if (__OFSUB__(0, v48)) {
        goto LABEL_166;
      }
      if (v48 < v49) {
        goto LABEL_168;
      }
      if (v44 >= v48 || v44 < v49) {
        goto LABEL_171;
      }
      sub_19E607D84((uint64_t)v106);
      if (v44 < 0)
      {
        BOOL v27 = __OFADD__(v48, v44);
        v44 += v48;
        if (v27) {
          goto LABEL_169;
        }
      }
      uint64_t v10 = v110;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = sub_19E606EE4(0, v10[2] + 1, 1, v10);
      }
      unint64_t v42 = v10[2];
      unint64_t v50 = v10[3];
      unint64_t v43 = v42 + 1;
      if (v42 >= v50 >> 1) {
        uint64_t v10 = sub_19E606EE4((void *)(v50 > 1), v42 + 1, 1, v10);
      }
    }
    uint64_t v10[2] = v43;
    v10[v42 + 4] = v44;
    uint64_t v110 = v10;
    if (v102 > 0x40 || (char v51 = v102, v102 == 64)) {
      char v51 = 63;
    }
    uint64_t v94 = v20;
    if ((v5[4] >> v51))
    {
      char v52 = v7;
      switch((int)v97)
      {
        case 1:
        case 3:
          char v52 = (uint64_t *)v104;
          break;
        case 2:
          char v52 = (uint64_t *)v103;
          break;
        default:
          break;
      }
      unint64_t v58 = v102 + v100;
      if (__OFADD__(v102, v100)) {
        goto LABEL_159;
      }
      if ((v58 & 0x8000000000000000) != 0) {
        goto LABEL_160;
      }
      uint64_t v59 = *v52;
      if (v58 >= *(void *)(v59 + 16)) {
        goto LABEL_161;
      }
      uint64_t v57 = *(void *)(v59 + 8 * v58 + 32);
    }
    else
    {
      uint64_t v53 = v5[1];
      if (v102 >= *(void *)(v53 + 16)) {
        goto LABEL_165;
      }
      uint64_t v54 = v10[v42 + 4];
      BOOL v27 = __OFADD__(v54, 1);
      uint64_t v55 = v54 + 1;
      if (v27) {
        goto LABEL_167;
      }
      uint64_t v56 = *(void *)(v53 + 8 * v102 + 32);
      if (v55 <= v56) {
        uint64_t v57 = v56;
      }
      else {
        uint64_t v57 = v55;
      }
    }
    uint64_t v11 = v109;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_19E606EE4(0, v11[2] + 1, 1, v11);
    }
    unint64_t v61 = v11[2];
    unint64_t v60 = v11[3];
    if (v61 >= v60 >> 1) {
      uint64_t v11 = sub_19E606EE4((void *)(v60 > 1), v61 + 1, 1, v11);
    }
    void v11[2] = v61 + 1;
    v11[v61 + 4] = v57;
    uint64_t v109 = v11;
    uint64_t v62 = v5[2];
    if (v102 >= *(void *)(v62 + 16)) {
      goto LABEL_158;
    }
    uint64_t v63 = *(void *)(v62 + 8 * v102 + 32);
    uint64_t v9 = v108;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = sub_19E606EE4(0, v9[2] + 1, 1, v9);
    }
    uint64_t v4 = v95;
    unint64_t v65 = v9[2];
    unint64_t v64 = v9[3];
    if (v65 >= v64 >> 1) {
      uint64_t v9 = sub_19E606EE4((void *)(v64 > 1), v65 + 1, 1, v9);
    }
    uint64_t v9[2] = v65 + 1;
    v9[v65 + 4] = v63;
    uint64_t v108 = v9;
LABEL_4:
    unint64_t v6 = v102 + 1;
    uint64_t v8 = v101 + 1;
    int64_t v5 = a1;
  }
  while (v102 + 1 != v4);
  unint64_t v3 = v93;
  uint64_t v66 = v90;
LABEL_108:
  char v67 = (void *)(v66 + 24);
  char v68 = (void *)(v66 + 16);
  char v69 = (void *)(v3 + 40);
  while (1)
  {
    uint64_t v70 = v10[2];
    uint64_t v71 = v69;
    switch((int)v97)
    {
      case 1:
      case 3:
        uint64_t v71 = v67;
        break;
      case 2:
        uint64_t v71 = v68;
        break;
      default:
        break;
    }
    if (v70 >= *(void *)(*v71 + 16)) {
      break;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_19E606EE4(0, v70 + 1, 1, v10);
    }
    unint64_t v73 = v10[2];
    unint64_t v72 = v10[3];
    if (v73 >= v72 >> 1) {
      uint64_t v10 = sub_19E606EE4((void *)(v72 > 1), v73 + 1, 1, v10);
    }
    uint64_t v10[2] = v73 + 1;
    v10[v73 + 4] = 0;
    uint64_t v110 = v10;
    long long v74 = v69;
    switch((int)v97)
    {
      case 1:
      case 3:
        long long v74 = v67;
        break;
      case 2:
        long long v74 = v68;
        break;
      default:
        break;
    }
    uint64_t v75 = *v74;
    unint64_t v76 = v11[2];
    if (v76 >= *(void *)(v75 + 16)) {
      goto LABEL_153;
    }
    uint64_t v77 = *(void *)(v75 + 8 * v76 + 32);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_19E606EE4(0, v76 + 1, 1, v11);
    }
    unint64_t v79 = v11[2];
    unint64_t v78 = v11[3];
    if (v79 >= v78 >> 1) {
      uint64_t v11 = sub_19E606EE4((void *)(v78 > 1), v79 + 1, 1, v11);
    }
    void v11[2] = v79 + 1;
    v11[v79 + 4] = v77;
    uint64_t v109 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = sub_19E606EE4(0, v9[2] + 1, 1, v9);
    }
    unint64_t v81 = v9[2];
    unint64_t v80 = v9[3];
    if (v81 >= v80 >> 1) {
      uint64_t v9 = sub_19E606EE4((void *)(v80 > 1), v81 + 1, 1, v9);
    }
    uint64_t v9[2] = v81 + 1;
    v9[v81 + 4] = 1;
    uint64_t v108 = v9;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v82 = sub_19E621FBC((uint64_t)v11, (uint64_t)v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v83 = *(void *)(v82 + 16);
  if (v83)
  {
    unint64_t v84 = 0;
    do
    {
      unint64_t v85 = v84 + 1;
      uint64_t v86 = v69;
      switch((int)v97)
      {
        case 1:
        case 3:
          uint64_t v86 = v67;
          break;
        case 2:
          uint64_t v86 = v68;
          break;
        default:
          break;
      }
      uint64_t v87 = *v86;
      if (v84 >= *(void *)(v87 + 16)) {
        goto LABEL_154;
      }
      if (*(void *)(v87 + 8 * v84 + 32) < *(void *)(v82 + 32 + 8 * v84)) {
        goto LABEL_170;
      }
      ++v84;
    }
    while (v83 != v85);
  }
  swift_bridgeObjectRelease();
  sub_19E621D6C(0, v10[2], (uint64_t)&v110, (uint64_t)&v109, (uint64_t)&v108);
  sub_19E6221F0(v93, v106);
  swift_bridgeObjectRelease();
  if (v96[2])
  {
    swift_retain();
    MLTensor.expandingShape(at:)((uint64_t)v96, v105);
    swift_release_n();
    swift_bridgeObjectRelease();
    v106[0] = v105[0];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (!v94[2]) {
    goto LABEL_149;
  }
  switch(v106[0] >> 62)
  {
    case 1:
    case 3:
      uint64_t v88 = (v106[0] & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v88 = (v106[0] & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v88 = v106[0] + 40;
      break;
  }
  if (*(void *)(*(void *)v88 + 16) > 1uLL)
  {
    swift_retain();
    MLTensor.squeezingShape(at:)((uint64_t)v94, v105);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    uint64_t result = swift_bridgeObjectRelease();
    v106[0] = v105[0];
  }
  else
  {
LABEL_149:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  *a2 = v106[0];
  return result;
}

uint64_t sub_19E624DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C618);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_19E624E14(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C618);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19E624E74(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  switch(a4)
  {
    case 1:
      if (a8 == 1) {
        return a1 == a5 && a2 == a6 && a3 == a7;
      }
      return 0;
    case 2:
      if (a8 != 2) {
        return 0;
      }
      return a1 == a5 && a2 == a6 && a3 == a7;
    case 3:
      if (a8 != 3) {
        return 0;
      }
      return a1 == a5 && a2 == a6;
    case 4:
      if (a8 != 4) {
        return 0;
      }
      return a1 == a5 && a2 == a6;
    case 5:
      if (a8 != 5) {
        return 0;
      }
      return a1 == a5 && a2 == a6;
    case 6:
      if (a3 | a2 | a1)
      {
        if (a1 != 1 || a3 | a2)
        {
          if (a8 == 6 && a5 == 2 && !(a7 | a6)) {
            return 1;
          }
        }
        else if (a8 == 6 && a5 == 1 && !(a7 | a6))
        {
          return 1;
        }
      }
      else if (a8 == 6 && !(a7 | a6 | a5))
      {
        return 1;
      }
      return 0;
    default:
      if (a8) {
        return 0;
      }
      return a1 == a5;
  }
}

uint64_t sub_19E624FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v20 = MEMORY[0x1E4FBC860];
    sub_19E66F600(0, v4, 0);
    uint64_t v6 = v20;
    uint64_t v19 = v2;
    uint64_t v7 = (uint64_t *)(v2 + 32);
    unint64_t v8 = *(void *)(v20 + 16);
    int64_t v9 = v4;
    do
    {
      uint64_t v11 = *v7;
      v7 += 3;
      uint64_t v10 = v11;
      unint64_t v12 = *(void *)(v20 + 24);
      if (v8 >= v12 >> 1) {
        sub_19E66F600(v12 > 1, v8 + 1, 1);
      }
      *(void *)(v20 + 16) = v8 + 1;
      *(void *)(v20 + 8 * v8++ + 32) = v10;
      --v9;
    }
    while (v9);
    sub_19E66F600(0, v4, 0);
    unint64_t v13 = *(void *)(v5 + 16);
    uint64_t v2 = v19;
    uint64_t v14 = (uint64_t *)(v19 + 40);
    do
    {
      uint64_t v16 = *v14;
      v14 += 3;
      uint64_t v15 = v16;
      unint64_t v17 = *(void *)(v5 + 24);
      if (v13 >= v17 >> 1) {
        sub_19E66F600(v17 > 1, v13 + 1, 1);
      }
      *(void *)(v5 + 16) = v13 + 1;
      *(void *)(v5 + 8 * v13++ + 32) = v15;
      --v4;
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4FBC860];
  }
  uint64_t result = sub_19E621EFC(v2);
  strcpy((char *)a2, "transformation");
  *(unsigned char *)(a2 + 15) = -18;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0x6563696C73;
  *(void *)(a2 + 32) = 0xE500000000000000;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 4_Block_object_dispose(&STACK[0x278], 8) = v5;
  *(void *)(a2 + 56) = result;
  return result;
}

uint64_t sub_19E62516C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    goto LABEL_121;
  }
  uint64_t v5 = (unsigned char *)(a1 + 56);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  uint64_t v7 = *(void *)(a1 + 16);
  do
  {
    if (*v5 == 6 && !(*((void *)v5 - 2) | *((void *)v5 - 1) | *((void *)v5 - 3)))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_19E66F7C8(0, *(void *)(v6 + 16) + 1, 1);
      }
      unint64_t v9 = *(void *)(v6 + 16);
      unint64_t v8 = *(void *)(v6 + 24);
      if (v9 >= v8 >> 1) {
        sub_19E66F7C8(v8 > 1, v9 + 1, 1);
      }
      *(void *)(v6 + 16) = v9 + 1;
      uint64_t v10 = v6 + 32 * v9;
      *(void *)(v10 + 40) = 0;
      *(void *)(v10 + 4_Block_object_dispose(&STACK[0x278], 8) = 0;
      *(void *)(v10 + 32) = 0;
      *(unsigned char *)(v10 + 56) = 6;
    }
    v5 += 32;
    --v7;
  }
  while (v7);
  char v40 = a2;
  unint64_t v11 = *(void *)(v6 + 16);
  swift_release();
  if (v11 >= 2) {
    goto LABEL_121;
  }
  unint64_t v12 = (void *)sub_19E60F71C(0, v2);
  unint64_t v13 = (void *)sub_19E60F71C(0, v2);
  uint64_t result = sub_19E60F71C(1uLL, v2);
  uint64_t v15 = (void *)result;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  unint64_t v16 = 0;
  unint64_t v17 = (unsigned char *)(a1 + 56);
  while (2)
  {
    uint64_t v30 = *((void *)v17 - 3);
    uint64_t v31 = *((void *)v17 - 2);
    uint64_t v32 = *((void *)v17 - 1);
    switch(*v17)
    {
      case 0:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v12 = sub_19E612754(v12);
        }
        if (v16 >= v12[2]) {
          goto LABEL_107;
        }
        v12[v16 + 4] = v30;
        BOOL v33 = __OFADD__(v30, 1);
        uint64_t v34 = v30 + 1;
        if (v33) {
          goto LABEL_111;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_19E612754(v13);
          unint64_t v13 = (void *)result;
        }
        if (v16 >= v13[2]) {
          goto LABEL_115;
        }
        v13[v16 + 4] = v34;
        uint64_t v35 = 1 << v16;
        if (v16 >= 0x40) {
          uint64_t v35 = 0;
        }
        v44 |= v35;
        goto LABEL_33;
      case 1:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v12 = sub_19E612754(v12);
        }
        if (v16 >= v12[2]) {
          goto LABEL_109;
        }
        v12[v16 + 4] = v30;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v13 = sub_19E612754(v13);
        }
        if (v16 >= v13[2]) {
          goto LABEL_113;
        }
        v13[v16 + 4] = v31;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_19E612754(v15);
          uint64_t v15 = (void *)result;
        }
        if (v16 >= v15[2]) {
          goto LABEL_117;
        }
        goto LABEL_101;
      case 2:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v12 = sub_19E612754(v12);
        }
        if (v16 >= v12[2]) {
          goto LABEL_104;
        }
        v12[v16 + 4] = v30;
        if (v31 == -1)
        {
          uint64_t v39 = 1 << v16;
          if (v16 >= 0x40) {
            uint64_t v39 = 0;
          }
          v45 |= v39;
        }
        else
        {
          if (__OFADD__(v31, 1)) {
            goto LABEL_119;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v13 = sub_19E612754(v13);
          }
          if (v16 >= v13[2]) {
            goto LABEL_120;
          }
          v13[v16 + 4] = v31 + 1;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_19E612754(v15);
          uint64_t v15 = (void *)result;
        }
        if (v16 >= v15[2]) {
          goto LABEL_118;
        }
LABEL_101:
        v15[v16 + 4] = v32;
        goto LABEL_33;
      case 3:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v12 = sub_19E612754(v12);
        }
        if (v16 >= v12[2]) {
          goto LABEL_105;
        }
        v12[v16 + 4] = v30;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_19E612754(v15);
          uint64_t v15 = (void *)result;
        }
        if (v16 >= v15[2]) {
          goto LABEL_112;
        }
        v15[v16 + 4] = v31;
LABEL_72:
        uint64_t v36 = 1 << v16;
        if (v16 >= 0x40) {
          uint64_t v36 = 0;
        }
        v45 |= v36;
        goto LABEL_33;
      case 4:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v13 = sub_19E612754(v13);
        }
        if (v16 >= v13[2])
        {
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          sub_19EBF71F8();
          __break(1u);
          JUMPOUT(0x19E6257ECLL);
        }
        v13[v16 + 4] = v30;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_19E612754(v15);
          uint64_t v15 = (void *)result;
        }
        if (v16 >= v15[2]) {
          goto LABEL_110;
        }
LABEL_92:
        v15[v16 + 4] = v31;
        uint64_t v38 = 1 << v16;
        if (v16 >= 0x40) {
          uint64_t v38 = 0;
        }
        v43 |= v38;
LABEL_33:
        ++v16;
        v17 += 32;
        if (v2 != v16) {
          continue;
        }
        *char v40 = v12;
        v40[1] = v13;
        v40[2] = v15;
        void v40[3] = v43;
        v40[4] = v45;
        v40[5] = v41;
        v40[6] = v42;
        v40[7] = v44;
        return result;
      case 5:
        BOOL v33 = __OFADD__(v30, 1);
        uint64_t v37 = v30 + 1;
        if (v33) {
          goto LABEL_106;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v13 = sub_19E612754(v13);
        }
        if (v16 >= v13[2]) {
          goto LABEL_114;
        }
        v13[v16 + 4] = v37;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_19E612754(v15);
          uint64_t v15 = (void *)result;
        }
        if (v16 < v15[2]) {
          goto LABEL_92;
        }
        goto LABEL_116;
      case 6:
        uint64_t v18 = v32 | v31 | v30;
        uint64_t v19 = 1 << v16;
        if (v16 >= 0x40) {
          uint64_t v19 = 0;
        }
        uint64_t v21 = v41;
        uint64_t v20 = v42;
        uint64_t v22 = v19 | v41;
        uint64_t v23 = 1 << v16;
        if (v16 >= 0x40) {
          uint64_t v23 = 0;
        }
        uint64_t v24 = v23 | v42;
        uint64_t v25 = 1 << v16;
        if (v16 >= 0x40) {
          uint64_t v25 = 0;
        }
        uint64_t v26 = v44;
        uint64_t v27 = v25 | v44;
        BOOL v28 = v30 == 1 && (v32 | v31) == 0;
        if (v28) {
          uint64_t v29 = v44;
        }
        else {
          uint64_t v29 = v27;
        }
        if (!v28) {
          uint64_t v24 = v42;
        }
        if (v18) {
          uint64_t v26 = v29;
        }
        uint64_t v44 = v26;
        if (v18) {
          uint64_t v20 = v24;
        }
        else {
          uint64_t v21 = v22;
        }
        uint64_t v41 = v21;
        uint64_t v42 = v20;
        goto LABEL_33;
      default:
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_19E612754(v12);
          unint64_t v12 = (void *)result;
        }
        if (v16 >= v12[2]) {
          goto LABEL_108;
        }
        v12[v16 + 4] = 0;
        goto LABEL_72;
    }
  }
}

uint64_t sub_19E625808(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for _MLTensorRange()
{
  return &type metadata for _MLTensorRange;
}

uint64_t dispatch thunk of MLTensorRangeExpression._mlTensorRange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t _s9IndexPathVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s9IndexPathVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x278], 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s9IndexPathVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t _s9IndexPathVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t _s9IndexPathVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s9IndexPathVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MLTensor.IndexPath()
{
  return &type metadata for MLTensor.IndexPath;
}

uint64_t _s6CoreML14_MLTensorRangeV4KindOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s6CoreML14_MLTensorRangeV4KindOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_19E625B68(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 5u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t sub_19E625B80(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 6;
  if (a2 >= 6)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 6;
    *(void *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _MLTensorRange.Kind()
{
  return &type metadata for _MLTensorRange.Kind;
}

uint64_t sub_19E625BAC(uint64_t a1)
{
  return a1;
}

uint64_t MLTensor.sum(keepRank:)(char a1)
{
  return sub_19E6271E8(a1, (void (*)(int64_t *, void))MLTensor.sum(alongAxes:keepRank:));
}

uint64_t MLTensor.sum(alongAxes:keepRank:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = *v3;
  uint64_t v5 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((unint64_t)*v3 >> 62);
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_19E675588(v9, a1, 1);
  swift_bridgeObjectRelease();
  if (!v10)
  {
LABEL_16:
    switch((int)v5)
    {
      case 0:
        uint64_t v28 = v4 + 40;
        break;
      case 1:
      case 3:
        uint64_t v28 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
        break;
      case 2:
        uint64_t v28 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
        break;
      default:
LABEL_27:
        JUMPOUT(0);
    }
    uint64_t v30 = *(void *)(*(void *)v28 + 16);
    uint64_t v41 = (void *)a1;
    uint64_t v42 = v30;
    char v43 = 7;
    sub_19E5E2970((uint64_t)&v41, (uint64_t)v40);
    swift_bridgeObjectRetain();
    sub_19E5E1864();
LABEL_26:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E6260C8);
  }
  char v33 = a2;
  uint64_t v34 = a3;
  uint64_t v35 = a1;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  unint64_t v11 = v41;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v4;
  uint64_t v13 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v37);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v38;
  uint64_t v15 = v39;
  __swift_project_boxed_opaque_existential_1(v37, v38);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  a1 = v17 + 32;
  uint64_t v18 = v17;
  uint64_t v36 = v5;
  uint64_t v32 = v4;
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v19 = (char *)(v13 + 32);
      uint64_t v20 = (char *)(v13 + 33);
      break;
    case 2:
      uint64_t v19 = (char *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (char *)(v4 + 48);
      uint64_t v20 = (char *)(v4 + 49);
      break;
  }
  char v21 = *v20;
  char v22 = *v19;
  *(void *)(v17 + 32) = v10;
  *(unsigned char *)(v17 + 40) = v22;
  *(unsigned char *)(v17 + 41) = v21;
  uint64_t v5 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 72);
  swift_retain();
  uint64_t v4 = v35;
  swift_bridgeObjectRetain();
  uint64_t v23 = v5(0x6F69746375646572, 0xE90000000000006ELL, v35, 4, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v23 + 16))
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v24 = *(void *)(v23 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
  {
    switch(v36)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        uint64_t v25 = swift_bridgeObjectRetain();
        uint64_t v26 = (void *)sub_19E675588(v25, v35, 0);
        swift_bridgeObjectRelease();
        if (!v26)
        {
          switch(v36)
          {
            case 0:
              uint64_t v29 = v32 + 40;
              goto LABEL_25;
            case 1:
            case 3:
              uint64_t v29 = v13 + 24;
              goto LABEL_25;
            case 2:
              uint64_t v29 = v13 + 16;
LABEL_25:
              uint64_t v31 = *(void *)(*(void *)v29 + 16);
              uint64_t v41 = (void *)v35;
              uint64_t v42 = v31;
              char v43 = 7;
              sub_19E5E2970((uint64_t)&v41, (uint64_t)v40);
              swift_bridgeObjectRetain();
              sub_19E5E1864();
              goto LABEL_26;
            default:
              goto LABEL_27;
          }
        }
        uint64_t v41 = (void *)v24;
        MLTensor.reshaped(to:)(v26, v34);
        swift_release();
        swift_bridgeObjectRelease();
        return __swift_destroy_boxed_opaque_existential_0((uint64_t)v37);
      default:
        goto LABEL_27;
    }
  }
  *uint64_t v34 = v24;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v37);
}

{
  return MLTensor.sum(alongAxes:keepRank:)(a1, a2, a3);
}

uint64_t MLTensor.mean(keepRank:)(char a1)
{
  return sub_19E6271E8(a1, (void (*)(int64_t *, void))MLTensor.mean(alongAxes:keepRank:));
}

uint64_t MLTensor.mean(alongAxes:keepRank:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = *v3;
  unint64_t v5 = (unint64_t)*v3 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v10 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v9 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v10 = (char *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v9 = (unsigned __int8 *)(v4 + 48);
      uint64_t v10 = (char *)(v4 + 49);
      break;
  }
  char v11 = *v10;
  unsigned int v12 = *v9;
  LOBYTE(v46) = v12;
  BYTE1(v46) = v11;
  uint64_t v47 = &unk_1EF0C9E20;
  char v48 = 1;
  char v49 = 9;
  uint64_t v13 = &v46;
  if (v12 < 9) {
    goto LABEL_21;
  }
  sub_19E607D84((uint64_t)&v46);
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = sub_19E675588(v14, a1, 1);
  swift_bridgeObjectRelease();
  if (!v15)
  {
    switch((int)v5)
    {
      case 0:
        uint64_t v34 = v4 + 40;
        break;
      case 1:
      case 3:
        uint64_t v34 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
        break;
      case 2:
        uint64_t v34 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
        break;
      default:
LABEL_33:
        JUMPOUT(0);
    }
    uint64_t v36 = *(void **)(*(void *)v34 + 16);
    unint64_t v46 = (void *)a1;
    uint64_t v47 = v36;
    char v49 = 7;
    sub_19E5E2970((uint64_t)&v46, (uint64_t)v45);
    swift_bridgeObjectRetain();
    sub_19E5E1864();
LABEL_32:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E6266C4);
  }
  char v40 = a3;
  uint64_t v41 = v5;
  char v39 = a2;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v16 = v46;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v4;
  uint64_t v18 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v42);
  swift_bridgeObjectRelease();
  sub_19E601010(v16);
  uint64_t v19 = v43;
  uint64_t v20 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_19EC36240;
  *(void *)(v21 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v22 = swift_initStackObject();
  *(_OWORD *)(v22 + 16) = xmmword_19EC36240;
  uint64_t v23 = v22;
  uint64_t v38 = v4;
  switch((int)v5)
  {
    case 1:
    case 3:
      unint64_t v24 = (char *)(v18 + 32);
      uint64_t v25 = (char *)(v18 + 33);
      break;
    case 2:
      unint64_t v24 = (char *)(v18 + 24);
      uint64_t v25 = (char *)(v18 + 25);
      break;
    default:
      unint64_t v24 = (char *)(v4 + 48);
      uint64_t v25 = (char *)(v4 + 49);
      break;
  }
  char v26 = *v25;
  char v27 = *v24;
  *(void *)(v22 + 32) = v15;
  *(unsigned char *)(v22 + 40) = v27;
  *(unsigned char *)(v22 + 41) = v26;
  uint64_t v28 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 72);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v29 = v28(0x6F69746375646572, 0xE90000000000006ELL, a1, 2, v21, v23, v19, v20);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  uint64_t v13 = (void **)swift_bridgeObjectRelease();
  if (!*(void *)(v29 + 16))
  {
    __break(1u);
LABEL_21:
    sub_19E5E2970((uint64_t)v13, (uint64_t)v45);
    sub_19E5E1864();
    goto LABEL_32;
  }
  unint64_t v30 = *(void *)(v29 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  if ((v39 & 1) == 0)
  {
    switch(v41)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        uint64_t v31 = swift_bridgeObjectRetain();
        uint64_t v32 = (void *)sub_19E675588(v31, a1, 0);
        swift_bridgeObjectRelease();
        if (!v32)
        {
          switch(v41)
          {
            case 0:
              uint64_t v35 = v38 + 40;
              goto LABEL_31;
            case 1:
            case 3:
              uint64_t v35 = v18 + 24;
              goto LABEL_31;
            case 2:
              uint64_t v35 = v18 + 16;
LABEL_31:
              uint64_t v37 = *(void **)(*(void *)v35 + 16);
              unint64_t v46 = (void *)a1;
              uint64_t v47 = v37;
              char v49 = 7;
              sub_19E5E2970((uint64_t)&v46, (uint64_t)v45);
              swift_bridgeObjectRetain();
              sub_19E5E1864();
              goto LABEL_32;
            default:
              goto LABEL_33;
          }
        }
        unint64_t v46 = (void *)v30;
        MLTensor.reshaped(to:)(v32, v40);
        swift_release();
        swift_bridgeObjectRelease();
        return __swift_destroy_boxed_opaque_existential_0((uint64_t)v42);
      default:
        goto LABEL_33;
    }
  }
  *char v40 = v30;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v42);
}

{
  return MLTensor.mean(alongAxes:keepRank:)(a1, a2, a3);
}

uint64_t MLTensor.min(keepRank:)(char a1)
{
  return sub_19E6271E8(a1, (void (*)(int64_t *, void))MLTensor.min(alongAxes:keepRank:));
}

uint64_t MLTensor.min(alongAxes:keepRank:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = *v3;
  unint64_t v5 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((unint64_t)*v3 >> 62);
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_19E675588(v9, a1, 1);
  swift_bridgeObjectRelease();
  if (!v10)
  {
LABEL_16:
    switch((int)v5)
    {
      case 0:
        uint64_t v28 = v4 + 40;
        break;
      case 1:
      case 3:
        uint64_t v28 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
        break;
      case 2:
        uint64_t v28 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
        break;
      default:
LABEL_27:
        JUMPOUT(0);
    }
    uint64_t v30 = *(void *)(*(void *)v28 + 16);
    uint64_t v41 = (void *)a1;
    uint64_t v42 = v30;
    char v43 = 7;
    sub_19E5E2970((uint64_t)&v41, (uint64_t)v40);
    swift_bridgeObjectRetain();
    sub_19E5E1864();
LABEL_26:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E626C10);
  }
  char v33 = a2;
  uint64_t v34 = a3;
  uint64_t v35 = a1;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v41;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v4;
  uint64_t v13 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v37);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v38;
  uint64_t v15 = v39;
  __swift_project_boxed_opaque_existential_1(v37, v38);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  a1 = v17 + 32;
  uint64_t v18 = v17;
  uint64_t v36 = v5;
  uint64_t v32 = v4;
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v19 = (char *)(v13 + 32);
      uint64_t v20 = (char *)(v13 + 33);
      break;
    case 2:
      uint64_t v19 = (char *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (char *)(v4 + 48);
      uint64_t v20 = (char *)(v4 + 49);
      break;
  }
  char v21 = *v20;
  char v22 = *v19;
  *(void *)(v17 + 32) = v10;
  *(unsigned char *)(v17 + 40) = v22;
  *(unsigned char *)(v17 + 41) = v21;
  unint64_t v5 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 72);
  swift_retain();
  uint64_t v4 = v35;
  swift_bridgeObjectRetain();
  uint64_t v23 = v5(0x6F69746375646572, 0xE90000000000006ELL, v35, 1, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v23 + 16))
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v24 = *(void *)(v23 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
  {
    switch(v36)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        uint64_t v25 = swift_bridgeObjectRetain();
        char v26 = (void *)sub_19E675588(v25, v35, 0);
        swift_bridgeObjectRelease();
        if (!v26)
        {
          switch(v36)
          {
            case 0:
              uint64_t v29 = v32 + 40;
              goto LABEL_25;
            case 1:
            case 3:
              uint64_t v29 = v13 + 24;
              goto LABEL_25;
            case 2:
              uint64_t v29 = v13 + 16;
LABEL_25:
              uint64_t v31 = *(void *)(*(void *)v29 + 16);
              uint64_t v41 = (void *)v35;
              uint64_t v42 = v31;
              char v43 = 7;
              sub_19E5E2970((uint64_t)&v41, (uint64_t)v40);
              swift_bridgeObjectRetain();
              sub_19E5E1864();
              goto LABEL_26;
            default:
              goto LABEL_27;
          }
        }
        uint64_t v41 = (void *)v24;
        MLTensor.reshaped(to:)(v26, v34);
        swift_release();
        swift_bridgeObjectRelease();
        return __swift_destroy_boxed_opaque_existential_0((uint64_t)v37);
      default:
        goto LABEL_27;
    }
  }
  *uint64_t v34 = v24;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v37);
}

{
  return MLTensor.min(alongAxes:keepRank:)(a1, a2, a3);
}

uint64_t MLTensor.max(keepRank:)(char a1)
{
  return sub_19E6271E8(a1, (void (*)(int64_t *, void))MLTensor.max(alongAxes:keepRank:));
}

uint64_t MLTensor.max(alongAxes:keepRank:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = *v3;
  unint64_t v5 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))((unint64_t)*v3 >> 62);
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_19E675588(v9, a1, 1);
  swift_bridgeObjectRelease();
  if (!v10)
  {
LABEL_16:
    switch((int)v5)
    {
      case 0:
        uint64_t v28 = v4 + 40;
        break;
      case 1:
      case 3:
        uint64_t v28 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
        break;
      case 2:
        uint64_t v28 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
        break;
      default:
LABEL_27:
        JUMPOUT(0);
    }
    uint64_t v30 = *(void *)(*(void *)v28 + 16);
    uint64_t v41 = (void *)a1;
    uint64_t v42 = v30;
    char v43 = 7;
    sub_19E5E2970((uint64_t)&v41, (uint64_t)v40);
    swift_bridgeObjectRetain();
    sub_19E5E1864();
LABEL_26:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62714CLL);
  }
  char v33 = a2;
  uint64_t v34 = a3;
  uint64_t v35 = a1;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v41;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v4;
  uint64_t v13 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v37);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v38;
  uint64_t v15 = v39;
  __swift_project_boxed_opaque_existential_1(v37, v38);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  a1 = v17 + 32;
  uint64_t v18 = v17;
  uint64_t v36 = v5;
  uint64_t v32 = v4;
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v19 = (char *)(v13 + 32);
      uint64_t v20 = (char *)(v13 + 33);
      break;
    case 2:
      uint64_t v19 = (char *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (char *)(v4 + 48);
      uint64_t v20 = (char *)(v4 + 49);
      break;
  }
  char v21 = *v20;
  char v22 = *v19;
  *(void *)(v17 + 32) = v10;
  *(unsigned char *)(v17 + 40) = v22;
  *(unsigned char *)(v17 + 41) = v21;
  unint64_t v5 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 72);
  swift_retain();
  uint64_t v4 = v35;
  swift_bridgeObjectRetain();
  uint64_t v23 = v5(0x6F69746375646572, 0xE90000000000006ELL, v35, 0, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v23 + 16))
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v24 = *(void *)(v23 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
  {
    switch(v36)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        uint64_t v25 = swift_bridgeObjectRetain();
        char v26 = (void *)sub_19E675588(v25, v35, 0);
        swift_bridgeObjectRelease();
        if (!v26)
        {
          switch(v36)
          {
            case 0:
              uint64_t v29 = v32 + 40;
              goto LABEL_25;
            case 1:
            case 3:
              uint64_t v29 = v13 + 24;
              goto LABEL_25;
            case 2:
              uint64_t v29 = v13 + 16;
LABEL_25:
              uint64_t v31 = *(void *)(*(void *)v29 + 16);
              uint64_t v41 = (void *)v35;
              uint64_t v42 = v31;
              char v43 = 7;
              sub_19E5E2970((uint64_t)&v41, (uint64_t)v40);
              swift_bridgeObjectRetain();
              sub_19E5E1864();
              goto LABEL_26;
            default:
              goto LABEL_27;
          }
        }
        uint64_t v41 = (void *)v24;
        MLTensor.reshaped(to:)(v26, v34);
        swift_release();
        swift_bridgeObjectRelease();
        return __swift_destroy_boxed_opaque_existential_0((uint64_t)v37);
      default:
        goto LABEL_27;
    }
  }
  *uint64_t v34 = v24;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v37);
}

{
  return MLTensor.max(alongAxes:keepRank:)(a1, a2, a3);
}

uint64_t MLTensor.product(keepRank:)(char a1)
{
  return sub_19E6271E8(a1, (void (*)(int64_t *, void))MLTensor.product(alongAxes:keepRank:));
}

uint64_t sub_19E6271E8(char a1, void (*a2)(int64_t *, void))
{
  uint64_t v3 = *v2;
  switch((unint64_t)*v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v6 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v6 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v6 = v3 + 40;
      break;
  }
  uint64_t v7 = sub_19E5DE170(0, *(void *)(*(void *)v6 + 16));
  a2(v7, a1 & 1);

  return swift_release();
}

uint64_t MLTensor.product(alongAxes:keepRank:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = *v3;
  unint64_t v5 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((unint64_t)*v3 >> 62);
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_19E675588(v9, a1, 1);
  swift_bridgeObjectRelease();
  if (!v10)
  {
LABEL_16:
    switch((int)v5)
    {
      case 0:
        uint64_t v28 = v4 + 40;
        break;
      case 1:
      case 3:
        uint64_t v28 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
        break;
      case 2:
        uint64_t v28 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
        break;
      default:
LABEL_27:
        JUMPOUT(0);
    }
    uint64_t v30 = *(void *)(*(void *)v28 + 16);
    uint64_t v41 = (void *)a1;
    uint64_t v42 = v30;
    char v43 = 7;
    sub_19E5E2970((uint64_t)&v41, (uint64_t)v40);
    swift_bridgeObjectRetain();
    sub_19E5E1864();
LABEL_26:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62775CLL);
  }
  char v33 = a2;
  uint64_t v34 = a3;
  uint64_t v35 = a1;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v41;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v4;
  uint64_t v13 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v37);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v38;
  uint64_t v15 = v39;
  __swift_project_boxed_opaque_existential_1(v37, v38);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  a1 = v17 + 32;
  uint64_t v18 = v17;
  uint64_t v36 = v5;
  uint64_t v32 = v4;
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v19 = (char *)(v13 + 32);
      uint64_t v20 = (char *)(v13 + 33);
      break;
    case 2:
      uint64_t v19 = (char *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (char *)(v4 + 48);
      uint64_t v20 = (char *)(v4 + 49);
      break;
  }
  char v21 = *v20;
  char v22 = *v19;
  *(void *)(v17 + 32) = v10;
  *(unsigned char *)(v17 + 40) = v22;
  *(unsigned char *)(v17 + 41) = v21;
  unint64_t v5 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 72);
  swift_retain();
  uint64_t v4 = v35;
  swift_bridgeObjectRetain();
  uint64_t v23 = v5(0x6F69746375646572, 0xE90000000000006ELL, v35, 3, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v23 + 16))
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v24 = *(void *)(v23 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
  {
    switch(v36)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        uint64_t v25 = swift_bridgeObjectRetain();
        char v26 = (void *)sub_19E675588(v25, v35, 0);
        swift_bridgeObjectRelease();
        if (!v26)
        {
          switch(v36)
          {
            case 0:
              uint64_t v29 = v32 + 40;
              goto LABEL_25;
            case 1:
            case 3:
              uint64_t v29 = v13 + 24;
              goto LABEL_25;
            case 2:
              uint64_t v29 = v13 + 16;
LABEL_25:
              uint64_t v31 = *(void *)(*(void *)v29 + 16);
              uint64_t v41 = (void *)v35;
              uint64_t v42 = v31;
              char v43 = 7;
              sub_19E5E2970((uint64_t)&v41, (uint64_t)v40);
              swift_bridgeObjectRetain();
              sub_19E5E1864();
              goto LABEL_26;
            default:
              goto LABEL_27;
          }
        }
        uint64_t v41 = (void *)v24;
        MLTensor.reshaped(to:)(v26, v34);
        swift_release();
        swift_bridgeObjectRelease();
        return __swift_destroy_boxed_opaque_existential_0((uint64_t)v37);
      default:
        goto LABEL_27;
    }
  }
  *uint64_t v34 = v24;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v37);
}

{
  return MLTensor.product(alongAxes:keepRank:)(a1, a2, a3);
}

uint64_t MLTensor.argmax()()
{
  return sub_19E627DF8(qword_1EF0CA028, (void (*)(void, void))MLTensor.argmax(alongAxis:keepRank:));
}

uint64_t MLTensor.argmax(alongAxis:keepRank:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = *v3;
  unint64_t v5 = (unint64_t)*v3 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v9 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v9 = v4 + 40;
      break;
  }
  uint64_t v10 = *(void *)(*(void *)v9 + 16);
  unint64_t v46 = (void *)a1;
  uint64_t v47 = v10;
  char v48 = 6;
  char v11 = &v46;
  if (-v10 > a1 || v10 <= a1) {
    goto LABEL_23;
  }
  sub_19E607D84((uint64_t)&v46);
  uint64_t v13 = (v10 & (a1 >> 63)) + a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_19EC36240;
  *(void *)(v14 + 32) = v13;
  uint64_t v15 = v14;
  uint64_t v39 = v13;
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = sub_19E675588(v16, v15, 1);
  swift_bridgeObjectRelease();
  if (!v17)
  {
    switch((int)v5)
    {
      case 0:
        uint64_t v32 = v4 + 40;
        break;
      case 1:
      case 3:
        uint64_t v32 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
        break;
      case 2:
        uint64_t v32 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
        break;
      default:
        JUMPOUT(0);
    }
    uint64_t v35 = *(void *)(*(void *)v32 + 16);
    unint64_t v46 = (void *)v13;
    uint64_t v47 = v35;
    char v48 = 6;
    sub_19E5E2970((uint64_t)&v46, (uint64_t)v45);
    sub_19E5E1864();
    goto LABEL_34;
  }
  char v40 = a2;
  uint64_t v38 = v5;
  uint64_t v41 = a3;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v18 = v46;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v4;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v42);
  swift_bridgeObjectRelease();
  sub_19E601010(v18);
  uint64_t v20 = v43;
  uint64_t v21 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_19EC36240;
  *(void *)(v22 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v23 = swift_initStackObject();
  *(_OWORD *)(v23 + 16) = xmmword_19EC36240;
  *(void *)(v23 + 32) = v17;
  *(_WORD *)(v23 + 40) = 7;
  unint64_t v24 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 72);
  uint64_t v37 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  uint64_t v25 = v24(0x6F69746375646572, 0xE90000000000006ELL, v15, 5, v22, v23, v20, v21);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  char v11 = (void **)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
LABEL_23:
    sub_19E5E2970((uint64_t)v11, (uint64_t)v45);
    sub_19E5E1864();
    goto LABEL_34;
  }
  unint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  if ((v40 & 1) == 0)
  {
    switch(v38)
    {
      case 1:
      case 3:
        char v27 = (uint64_t *)(v37 + 24);
        break;
      case 2:
        char v27 = (uint64_t *)(v37 + 16);
        break;
      default:
        char v27 = (uint64_t *)(v4 + 40);
        break;
    }
    uint64_t v28 = *v27;
    swift_bridgeObjectRetain();
    uint64_t v29 = swift_initStackObject();
    *(_OWORD *)(v29 + 16) = xmmword_19EC36240;
    *(void *)(v29 + 32) = v39;
    uint64_t v30 = (void *)sub_19E675588(v28, v29, 0);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    if (v30)
    {
      unint64_t v46 = (void *)v26;
      MLTensor.reshaped(to:)(v30, v41);
      swift_release();
      swift_bridgeObjectRelease();
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v42);
    }
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_19EC36240;
    *(void *)(v33 + 32) = v39;
    switch(v38)
    {
      case 1:
      case 3:
        uint64_t v34 = v37 + 24;
        break;
      case 2:
        uint64_t v34 = v37 + 16;
        break;
      default:
        uint64_t v34 = v4 + 40;
        break;
    }
    uint64_t v36 = *(void *)(*(void *)v34 + 16);
    unint64_t v46 = (void *)v33;
    uint64_t v47 = v36;
    char v48 = 7;
    sub_19E5E2970((uint64_t)&v46, (uint64_t)v45);
    sub_19E5E1864();
LABEL_34:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E627D88);
  }
  *uint64_t v41 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v42);
}

uint64_t MLTensor.argmin()()
{
  return sub_19E627DF8(qword_1EF0CA050, (void (*)(void, void))MLTensor.argmin(alongAxis:keepRank:));
}

uint64_t sub_19E627DF8(void *a1, void (*a2)(void, void))
{
  MLTensor.reshaped(to:)(a1, &v4);
  a2(0, 0);

  return swift_release();
}

uint64_t MLTensor.argmin(alongAxis:keepRank:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = *v3;
  unint64_t v5 = (unint64_t)*v3 >> 62;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v9 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v9 = v4 + 40;
      break;
  }
  uint64_t v10 = *(void *)(*(void *)v9 + 16);
  unint64_t v46 = (void *)a1;
  uint64_t v47 = v10;
  char v48 = 6;
  char v11 = &v46;
  if (-v10 > a1 || v10 <= a1) {
    goto LABEL_23;
  }
  sub_19E607D84((uint64_t)&v46);
  uint64_t v13 = (v10 & (a1 >> 63)) + a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_19EC36240;
  *(void *)(v14 + 32) = v13;
  uint64_t v15 = v14;
  uint64_t v39 = v13;
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = sub_19E675588(v16, v15, 1);
  swift_bridgeObjectRelease();
  if (!v17)
  {
    switch((int)v5)
    {
      case 0:
        uint64_t v32 = v4 + 40;
        break;
      case 1:
      case 3:
        uint64_t v32 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
        break;
      case 2:
        uint64_t v32 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
        break;
      default:
        JUMPOUT(0);
    }
    uint64_t v35 = *(void *)(*(void *)v32 + 16);
    unint64_t v46 = (void *)v13;
    uint64_t v47 = v35;
    char v48 = 6;
    sub_19E5E2970((uint64_t)&v46, (uint64_t)v45);
    sub_19E5E1864();
    goto LABEL_34;
  }
  char v40 = a2;
  uint64_t v38 = v5;
  uint64_t v41 = a3;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v18 = v46;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v4;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v42);
  swift_bridgeObjectRelease();
  sub_19E601010(v18);
  uint64_t v20 = v43;
  uint64_t v21 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_19EC36240;
  *(void *)(v22 + 32) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v23 = swift_initStackObject();
  *(_OWORD *)(v23 + 16) = xmmword_19EC36240;
  *(void *)(v23 + 32) = v17;
  *(_WORD *)(v23 + 40) = 7;
  unint64_t v24 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 72);
  uint64_t v37 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  uint64_t v25 = v24(0x6F69746375646572, 0xE90000000000006ELL, v15, 6, v22, v23, v20, v21);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  char v11 = (void **)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
LABEL_23:
    sub_19E5E2970((uint64_t)v11, (uint64_t)v45);
    sub_19E5E1864();
    goto LABEL_34;
  }
  unint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  if ((v40 & 1) == 0)
  {
    switch(v38)
    {
      case 1:
      case 3:
        char v27 = (uint64_t *)(v37 + 24);
        break;
      case 2:
        char v27 = (uint64_t *)(v37 + 16);
        break;
      default:
        char v27 = (uint64_t *)(v4 + 40);
        break;
    }
    uint64_t v28 = *v27;
    swift_bridgeObjectRetain();
    uint64_t v29 = swift_initStackObject();
    *(_OWORD *)(v29 + 16) = xmmword_19EC36240;
    *(void *)(v29 + 32) = v39;
    uint64_t v30 = (void *)sub_19E675588(v28, v29, 0);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    if (v30)
    {
      unint64_t v46 = (void *)v26;
      MLTensor.reshaped(to:)(v30, v41);
      swift_release();
      swift_bridgeObjectRelease();
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v42);
    }
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_19EC36240;
    *(void *)(v33 + 32) = v39;
    switch(v38)
    {
      case 1:
      case 3:
        uint64_t v34 = v37 + 24;
        break;
      case 2:
        uint64_t v34 = v37 + 16;
        break;
      default:
        uint64_t v34 = v4 + 40;
        break;
    }
    uint64_t v36 = *(void *)(*(void *)v34 + 16);
    unint64_t v46 = (void *)v33;
    uint64_t v47 = v36;
    char v48 = 7;
    sub_19E5E2970((uint64_t)&v46, (uint64_t)v45);
    sub_19E5E1864();
LABEL_34:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E6283FCLL);
  }
  *uint64_t v41 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v42);
}

uint64_t static MLTensor.- prefix(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (unint64_t)*a1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v29[0]) = v8;
  BYTE1(v29[0]) = v7;
  v29[1] = &unk_1EF0C9B80;
  char v30 = 1;
  char v33 = 9;
  uint64_t v9 = v29;
  if (!v8)
  {
LABEL_15:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v28);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E628760);
  }
  sub_19E607D84((uint64_t)v29);
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v10 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v12 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v29);
  swift_bridgeObjectRelease();
  sub_19E601010(v10);
  uint64_t v13 = v31;
  uint64_t v14 = v32;
  __swift_project_boxed_opaque_existential_1(v29, v31);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_19EC36240;
  *(void *)(v15 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  uint64_t v17 = v16;
  char v27 = a2;
  switch((int)v3)
  {
    case 1:
    case 3:
      uint64_t v18 = (void *)(v12 + 24);
      uint64_t v19 = (char *)(v12 + 32);
      uint64_t v20 = (char *)(v12 + 33);
      break;
    case 2:
      uint64_t v18 = (void *)(v12 + 16);
      uint64_t v19 = (char *)(v12 + 24);
      uint64_t v20 = (char *)(v12 + 25);
      break;
    default:
      uint64_t v18 = (void *)(v2 + 40);
      uint64_t v19 = (char *)(v2 + 48);
      uint64_t v20 = (char *)(v2 + 49);
      break;
  }
  char v21 = *v20;
  char v22 = *v19;
  *(void *)(v16 + 32) = *v18;
  *(unsigned char *)(v16 + 40) = v22;
  *(unsigned char *)(v16 + 41) = v21;
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v24 = v23(3, v15, v17, v13, v14);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v24 + 16))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  void *v27 = v25;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
}

uint64_t MLTensor.abs()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = (unint64_t)*v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v29[0]) = v8;
  BYTE1(v29[0]) = v7;
  v29[1] = &unk_1EF0C9BB0;
  char v30 = 1;
  char v33 = 9;
  uint64_t v9 = v29;
  if (!v8)
  {
LABEL_15:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v28);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E628A94);
  }
  sub_19E607D84((uint64_t)v29);
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v10 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v12 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v29);
  swift_bridgeObjectRelease();
  sub_19E601010(v10);
  uint64_t v13 = v31;
  uint64_t v14 = v32;
  __swift_project_boxed_opaque_existential_1(v29, v31);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_19EC36240;
  *(void *)(v15 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  uint64_t v17 = v16;
  char v27 = a1;
  switch((int)v3)
  {
    case 1:
    case 3:
      uint64_t v18 = (void *)(v12 + 24);
      uint64_t v19 = (char *)(v12 + 32);
      uint64_t v20 = (char *)(v12 + 33);
      break;
    case 2:
      uint64_t v18 = (void *)(v12 + 16);
      uint64_t v19 = (char *)(v12 + 24);
      uint64_t v20 = (char *)(v12 + 25);
      break;
    default:
      uint64_t v18 = (void *)(v2 + 40);
      uint64_t v19 = (char *)(v2 + 48);
      uint64_t v20 = (char *)(v2 + 49);
      break;
  }
  char v21 = *v20;
  char v22 = *v19;
  *(void *)(v16 + 32) = *v18;
  *(unsigned char *)(v16 + 40) = v22;
  *(unsigned char *)(v16 + 41) = v21;
  uint64_t v23 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v24 = v23(0, v15, v17, v13, v14);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v24 + 16))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  void *v27 = v25;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
}

uint64_t MLTensor.acos()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9D00;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E628E40);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(0, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.acosh()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9ED8;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E6291FCLL);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(1, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.asin()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9D30;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E6295B8);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(2, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.asinh()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9F08;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E629974);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(3, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.atan()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9D60;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E629D30);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(4, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.atanh()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9F38;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62A0ECLL);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(5, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.ceil()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = (unint64_t)*v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v29[0]) = v8;
  BYTE1(v29[0]) = v7;
  v29[1] = &unk_1EF0C9D90;
  char v30 = 1;
  char v33 = 9;
  uint64_t v9 = v29;
  if (!v8)
  {
LABEL_15:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v28);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62A430);
  }
  sub_19E607D84((uint64_t)v29);
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v10 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v12 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v29);
  swift_bridgeObjectRelease();
  sub_19E601010(v10);
  uint64_t v13 = v31;
  uint64_t v14 = v32;
  __swift_project_boxed_opaque_existential_1(v29, v31);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_19EC36240;
  *(void *)(v15 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  uint64_t v17 = v16;
  char v27 = a1;
  switch((int)v3)
  {
    case 1:
    case 3:
      uint64_t v18 = (void *)(v12 + 24);
      uint64_t v19 = (char *)(v12 + 32);
      uint64_t v20 = (char *)(v12 + 33);
      break;
    case 2:
      uint64_t v18 = (void *)(v12 + 16);
      uint64_t v19 = (char *)(v12 + 24);
      uint64_t v20 = (char *)(v12 + 25);
      break;
    default:
      uint64_t v18 = (void *)(v2 + 40);
      uint64_t v19 = (char *)(v2 + 48);
      uint64_t v20 = (char *)(v2 + 49);
      break;
  }
  char v21 = *v20;
  char v22 = *v19;
  *(void *)(v16 + 32) = *v18;
  *(unsigned char *)(v16 + 40) = v22;
  *(unsigned char *)(v16 + 41) = v21;
  char v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v24 = v23(1, v15, v17, v13, v14);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v24 + 16))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  void *v27 = v25;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
}

uint64_t MLTensor.cos()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (unsigned __int8 *)*v1;
  uint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1:
    case 3:
      unint64_t v5 = (unsigned __int8 *)(((unint64_t)v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)(((unint64_t)v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      unint64_t v5 = (unsigned __int8 *)(((unint64_t)v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)(((unint64_t)v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = v2 + 48;
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9BE0;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62A7E8);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = v2 + 48;
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)(((unint64_t)v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)(((unint64_t)v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
    char v11 = v2;
  }
  else
  {
    uint64_t v29 = v2;
    sub_19E6019D0(10, v30);
    char v11 = (unsigned __int8 *)v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v12 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v12);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch((unint64_t)v11 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(((unint64_t)v11 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v20 = (char *)(((unint64_t)v11 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      char v21 = (char *)(((unint64_t)v11 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(((unint64_t)v11 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      uint64_t v20 = (char *)(((unint64_t)v11 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      char v21 = (char *)(((unint64_t)v11 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v19 = v11 + 40;
      uint64_t v20 = (char *)(v11 + 48);
      char v21 = (char *)(v11 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(6, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.cosh()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9DC0;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62ABA4);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(7, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.exp()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9C10;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62AF60);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(8, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.exp2()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9DF0;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62B31CLL);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(9, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.floor()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = (unint64_t)*v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v29[0]) = v8;
  BYTE1(v29[0]) = v7;
  v29[1] = &unk_1EF0C9F68;
  char v30 = 1;
  char v33 = 9;
  uint64_t v9 = v29;
  if (!v8)
  {
LABEL_15:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v28);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62B660);
  }
  sub_19E607D84((uint64_t)v29);
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v10 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v12 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v29);
  swift_bridgeObjectRelease();
  sub_19E601010(v10);
  uint64_t v13 = v31;
  uint64_t v14 = v32;
  __swift_project_boxed_opaque_existential_1(v29, v31);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_19EC36240;
  *(void *)(v15 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  uint64_t v17 = v16;
  char v27 = a1;
  switch((int)v3)
  {
    case 1:
    case 3:
      uint64_t v18 = (void *)(v12 + 24);
      uint64_t v19 = (char *)(v12 + 32);
      uint64_t v20 = (char *)(v12 + 33);
      break;
    case 2:
      uint64_t v18 = (void *)(v12 + 16);
      uint64_t v19 = (char *)(v12 + 24);
      uint64_t v20 = (char *)(v12 + 25);
      break;
    default:
      uint64_t v18 = (void *)(v2 + 40);
      uint64_t v19 = (char *)(v2 + 48);
      uint64_t v20 = (char *)(v2 + 49);
      break;
  }
  char v21 = *v20;
  char v22 = *v19;
  *(void *)(v16 + 32) = *v18;
  *(unsigned char *)(v16 + 40) = v22;
  *(unsigned char *)(v16 + 41) = v21;
  char v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v24 = v23(2, v15, v17, v13, v14);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v24 + 16))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  void *v27 = v25;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
}

uint64_t MLTensor.log()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (unsigned __int8 *)*v1;
  uint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1:
    case 3:
      unint64_t v5 = (unsigned __int8 *)(((unint64_t)v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)(((unint64_t)v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      unint64_t v5 = (unsigned __int8 *)(((unint64_t)v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)(((unint64_t)v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = v2 + 48;
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9C40;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62BA18);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = v2 + 48;
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)(((unint64_t)v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)(((unint64_t)v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
    char v11 = v2;
  }
  else
  {
    uint64_t v29 = v2;
    sub_19E6019D0(10, v30);
    char v11 = (unsigned __int8 *)v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v12 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v12);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch((unint64_t)v11 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(((unint64_t)v11 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v20 = (char *)(((unint64_t)v11 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      char v21 = (char *)(((unint64_t)v11 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(((unint64_t)v11 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      uint64_t v20 = (char *)(((unint64_t)v11 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      char v21 = (char *)(((unint64_t)v11 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v19 = v11 + 40;
      uint64_t v20 = (char *)(v11 + 48);
      char v21 = (char *)(v11 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(10, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.reciprocal()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C99A0;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62BDD4);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(11, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.round()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = (unint64_t)*v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v29[0]) = v8;
  BYTE1(v29[0]) = v7;
  v29[1] = &unk_1EF0C9F98;
  char v30 = 1;
  char v33 = 9;
  uint64_t v9 = v29;
  if (!v8)
  {
LABEL_15:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v28);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62C118);
  }
  sub_19E607D84((uint64_t)v29);
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v10 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v12 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v29);
  swift_bridgeObjectRelease();
  sub_19E601010(v10);
  uint64_t v13 = v31;
  uint64_t v14 = v32;
  __swift_project_boxed_opaque_existential_1(v29, v31);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_19EC36240;
  *(void *)(v15 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  uint64_t v17 = v16;
  char v27 = a1;
  switch((int)v3)
  {
    case 1:
    case 3:
      uint64_t v18 = (void *)(v12 + 24);
      uint64_t v19 = (char *)(v12 + 32);
      uint64_t v20 = (char *)(v12 + 33);
      break;
    case 2:
      uint64_t v18 = (void *)(v12 + 16);
      uint64_t v19 = (char *)(v12 + 24);
      uint64_t v20 = (char *)(v12 + 25);
      break;
    default:
      uint64_t v18 = (void *)(v2 + 40);
      uint64_t v19 = (char *)(v2 + 48);
      uint64_t v20 = (char *)(v2 + 49);
      break;
  }
  char v21 = *v20;
  char v22 = *v19;
  *(void *)(v16 + 32) = *v18;
  *(unsigned char *)(v16 + 40) = v22;
  *(unsigned char *)(v16 + 41) = v21;
  char v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v24 = v23(4, v15, v17, v13, v14);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v24 + 16))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  void *v27 = v25;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
}

uint64_t MLTensor.rsqrt()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9FC8;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62C4C4);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(12, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.sign()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = (unint64_t)*v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v29[0]) = v8;
  BYTE1(v29[0]) = v7;
  v29[1] = &unk_1EF0C9E48;
  char v30 = 1;
  char v33 = 9;
  uint64_t v9 = v29;
  if (!v8)
  {
LABEL_15:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v28);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62C808);
  }
  sub_19E607D84((uint64_t)v29);
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v10 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v12 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v29);
  swift_bridgeObjectRelease();
  sub_19E601010(v10);
  uint64_t v13 = v31;
  uint64_t v14 = v32;
  __swift_project_boxed_opaque_existential_1(v29, v31);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_19EC36240;
  *(void *)(v15 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  uint64_t v17 = v16;
  char v27 = a1;
  switch((int)v3)
  {
    case 1:
    case 3:
      uint64_t v18 = (void *)(v12 + 24);
      uint64_t v19 = (char *)(v12 + 32);
      uint64_t v20 = (char *)(v12 + 33);
      break;
    case 2:
      uint64_t v18 = (void *)(v12 + 16);
      uint64_t v19 = (char *)(v12 + 24);
      uint64_t v20 = (char *)(v12 + 25);
      break;
    default:
      uint64_t v18 = (void *)(v2 + 40);
      uint64_t v19 = (char *)(v2 + 48);
      uint64_t v20 = (char *)(v2 + 49);
      break;
  }
  char v21 = *v20;
  char v22 = *v19;
  *(void *)(v16 + 32) = *v18;
  *(unsigned char *)(v16 + 40) = v22;
  *(unsigned char *)(v16 + 41) = v21;
  char v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v24 = v23(5, v15, v17, v13, v14);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v24 + 16))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  void *v27 = v25;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
}

uint64_t MLTensor.sin()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9CA0;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62CBB4);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(13, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.sinh()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9E78;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62CF70);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(14, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.squareRoot()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C99D0;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62D32CLL);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(15, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.squared()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0CA308;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62D6E8);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(16, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.tan()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9CD0;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62DAA4);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(17, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t MLTensor.tanh()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = *v1 >> 62;
  switch(v3)
  {
    case 1uLL:
    case 3uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      unint64_t v5 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v6 = (char *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      unint64_t v5 = (unsigned __int8 *)(v2 + 48);
      uint64_t v6 = (char *)(v2 + 49);
      break;
  }
  char v7 = *v6;
  int v8 = *v5;
  LOBYTE(v30[0]) = v8;
  BYTE1(v30[0]) = v7;
  v30[1] = &unk_1EF0C9EA8;
  char v31 = 1;
  char v34 = 9;
  uint64_t v9 = v30;
  if (!v8)
  {
LABEL_22:
    sub_19E5E2970((uint64_t)v9, (uint64_t)&v29);
    sub_19E5E1864();
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E62DE60);
  }
  sub_19E607D84((uint64_t)v30);
  switch((int)v3)
  {
    case 0:
      uint64_t v10 = (unsigned __int8 *)(v2 + 48);
      break;
    case 1:
    case 3:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      break;
    case 2:
      uint64_t v10 = (unsigned __int8 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    default:
      JUMPOUT(0);
  }
  if (*v10 >= 9u)
  {
    swift_retain();
  }
  else
  {
    uint64_t v29 = (void *)v2;
    sub_19E6019D0(10, v30);
    unint64_t v2 = v30[0];
  }
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  char v11 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC36240;
  *(void *)(inited + 32) = v2;
  uint64_t v13 = v2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  sub_19E634690(inited, (uint64_t)v30);
  swift_bridgeObjectRelease();
  sub_19E601010(v11);
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  __swift_project_boxed_opaque_existential_1(v30, v32);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_19EC36240;
  *(void *)(v16 + 32) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_19EC36240;
  uint64_t v18 = v17;
  uint64_t v28 = a1;
  switch(v2 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v19 = (void *)(v13 + 24);
      uint64_t v20 = (char *)(v13 + 32);
      char v21 = (char *)(v13 + 33);
      break;
    case 2uLL:
      uint64_t v19 = (void *)(v13 + 16);
      uint64_t v20 = (char *)(v13 + 24);
      char v21 = (char *)(v13 + 25);
      break;
    default:
      uint64_t v19 = (void *)(v2 + 40);
      uint64_t v20 = (char *)(v2 + 48);
      char v21 = (char *)(v2 + 49);
      break;
  }
  char v22 = *v21;
  char v23 = *v20;
  *(void *)(v17 + 32) = *v19;
  *(unsigned char *)(v17 + 40) = v23;
  *(unsigned char *)(v17 + 41) = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v24(18, v16, v18, v14, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = (void *)swift_bridgeObjectRelease();
  if (!*(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(v25 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v28 = v26;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
}

uint64_t destroy for OperationDescriptor(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OperationDescriptor(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = v5;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OperationDescriptor(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *unint64_t v3 = v12;
      }
      else
      {
        char v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for OperationDescriptor(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x278], 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for OperationDescriptor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OperationDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x278], 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OperationDescriptor()
{
  return &type metadata for OperationDescriptor;
}

uint64_t sub_19E62E30C()
{
  __swift_project_boxed_opaque_existential_1((void *)v0, *(void *)(v0 + 24));
  uint64_t result = sub_19EBF6698();
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    char v5 = *(unsigned char *)(v0 + 56);
    uint64_t v6 = v2 + 32;
    do
    {
      if ((v5 & 1) == 0)
      {
        uint64_t v7 = *(void *)(v6 + 16 * v4);
        sub_19EBF7488();
        uint64_t v8 = *(void *)(v7 + 16);
        if (v8)
        {
          uint64_t v9 = v7 + 32;
          do
          {
            v9 += 8;
            sub_19EBF7488();
            --v8;
          }
          while (v8);
        }
      }
      ++v4;
      uint64_t result = sub_19EBF7488();
    }
    while (v4 != v3);
  }
  uint64_t v10 = *(void *)(v0 + 48);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = 0;
    char v13 = *(unsigned char *)(v0 + 56);
    uint64_t v14 = v10 + 32;
    do
    {
      if ((v13 & 1) == 0)
      {
        uint64_t v15 = *(void *)(v14 + 16 * v12);
        sub_19EBF7488();
        uint64_t v16 = *(void *)(v15 + 16);
        if (v16)
        {
          uint64_t v17 = v15 + 32;
          do
          {
            v17 += 8;
            sub_19EBF7488();
            --v16;
          }
          while (v16);
        }
      }
      ++v12;
      uint64_t result = sub_19EBF7488();
    }
    while (v12 != v11);
  }
  return result;
}

BOOL sub_19E62E45C(void *a1, char a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  int v10 = *(unsigned __int8 *)(a5 + 56);
  sub_19E62E830(a6, (uint64_t)v13);
  if (v10 == 1)
  {
    char v11 = v13[56];
    sub_19E62E868((uint64_t)v13);
    if (v11) {
      return a4 == a2;
    }
  }
  else
  {
    sub_19E62E868((uint64_t)v13);
  }
  return sub_19E5DDC7C(a1, a3) && a4 == a2;
}

uint64_t sub_19E62E500()
{
  sub_19EBF7478();
  __swift_project_boxed_opaque_existential_1((void *)v0, *(void *)(v0 + 24));
  sub_19EBF6698();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    char v4 = *(unsigned char *)(v0 + 56);
    uint64_t v5 = v1 + 32;
    do
    {
      if ((v4 & 1) == 0)
      {
        uint64_t v6 = *(void *)(v5 + 16 * v3);
        sub_19EBF7488();
        uint64_t v7 = *(void *)(v6 + 16);
        if (v7)
        {
          uint64_t v8 = v6 + 32;
          do
          {
            v8 += 8;
            sub_19EBF7488();
            --v7;
          }
          while (v7);
        }
      }
      ++v3;
      sub_19EBF7488();
    }
    while (v3 != v2);
  }
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v11 = 0;
    char v12 = *(unsigned char *)(v0 + 56);
    uint64_t v13 = v9 + 32;
    do
    {
      if ((v12 & 1) == 0)
      {
        uint64_t v14 = *(void *)(v13 + 16 * v11);
        sub_19EBF7488();
        uint64_t v15 = *(void *)(v14 + 16);
        if (v15)
        {
          uint64_t v16 = v14 + 32;
          do
          {
            v16 += 8;
            sub_19EBF7488();
            --v15;
          }
          while (v15);
        }
      }
      ++v11;
      sub_19EBF7488();
    }
    while (v11 != v10);
  }
  return sub_19EBF74B8();
}

uint64_t sub_19E62E670()
{
  sub_19EBF7478();
  __swift_project_boxed_opaque_existential_1((void *)v0, *(void *)(v0 + 24));
  sub_19EBF6698();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    char v4 = *(unsigned char *)(v0 + 56);
    uint64_t v5 = v1 + 32;
    do
    {
      if ((v4 & 1) == 0)
      {
        uint64_t v6 = *(void *)(v5 + 16 * v3);
        sub_19EBF7488();
        uint64_t v7 = *(void *)(v6 + 16);
        if (v7)
        {
          uint64_t v8 = v6 + 32;
          do
          {
            v8 += 8;
            sub_19EBF7488();
            --v7;
          }
          while (v7);
        }
      }
      ++v3;
      sub_19EBF7488();
    }
    while (v3 != v2);
  }
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v11 = 0;
    char v12 = *(unsigned char *)(v0 + 56);
    uint64_t v13 = v9 + 32;
    do
    {
      if ((v12 & 1) == 0)
      {
        uint64_t v14 = *(void *)(v13 + 16 * v11);
        sub_19EBF7488();
        uint64_t v15 = *(void *)(v14 + 16);
        if (v15)
        {
          uint64_t v16 = v14 + 32;
          do
          {
            v16 += 8;
            sub_19EBF7488();
            --v15;
          }
          while (v15);
        }
      }
      ++v11;
      sub_19EBF7488();
    }
    while (v11 != v10);
  }
  return sub_19EBF74B8();
}

unint64_t sub_19E62E7DC()
{
  unint64_t result = qword_1E945C628;
  if (!qword_1E945C628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C628);
  }
  return result;
}

uint64_t sub_19E62E830(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_19E62E868(uint64_t a1)
{
  return a1;
}

uint64_t sub_19E62E898(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && (uint64_t v5 = *(void *)(a2 + 16)) != 0)
  {
    char v7 = *(unsigned char *)(a1 + 41);
    unsigned int v8 = *(unsigned __int8 *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; ; i += 16)
    {
      --v5;
      --v3;
      swift_bridgeObjectRetain();
      uint64_t v11 = *(void *)(a2 + i + 32);
      int v12 = (v7 & 1) != 0 ? 256 : 0;
      uint64_t v13 = v12 | v8;
      int v14 = *(unsigned char *)(a2 + i + 41) ? 256 : 0;
      uint64_t v15 = v14 | *(unsigned __int8 *)(a2 + i + 40);
      swift_bridgeObjectRetain();
      char v16 = a3(v9, v13, v11, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v16 & 1) == 0 || !v3 || !v5) {
        break;
      }
      char v7 = *(unsigned char *)(a1 + i + 57);
      unsigned int v8 = *(unsigned __int8 *)(a1 + i + 56);
      uint64_t v9 = *(void *)(a1 + i + 48);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v16 = 1;
  }
  return v16 & 1;
}

uint64_t sub_19E62E9D0(void *a1, void *a2)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a2[5];
  if (*(void *)(v2 + 16) != *(void *)(v3 + 16)) {
    goto LABEL_6;
  }
  if (*(void *)(a1[6] + 16) != *(void *)(a2[6] + 16)) {
    goto LABEL_6;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v6 = sub_19EBF66A8();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v7 = sub_19EBF66A8();
  if (v6 != v7) {
    goto LABEL_6;
  }
  MEMORY[0x1F4188790](v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v8 = sub_19E62E898(v2, v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_19E62EBBC);
  swift_bridgeObjectRelease();
  uint64_t v9 = swift_bridgeObjectRelease();
  if (v8)
  {
    uint64_t v10 = a1[6];
    uint64_t v11 = a2[6];
    MEMORY[0x1F4188790](v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v12 = sub_19E62E898(v10, v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_19E62EB94);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_6:
    char v12 = 0;
  }
  return v12 & 1;
}

BOOL sub_19E62EB94(void *a1, char a2, void *a3, char a4)
{
  return sub_19E62E45C(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t MLTensor.init<A>(randomNormal:mean:standardDeviation:seed:scalarType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t *a7@<X8>)
{
  uint64_t v14 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v18 & 1) != 0 && (time_t v15 = time(0), v15 < 0))
  {
    uint64_t result = sub_19EBF71E8();
    __break(1u);
  }
  else
  {
    uint64_t v32 = a4;
    time_t v33 = v15;
    uint64_t v34 = a6;
    uint64_t v35 = a1;
    uint64_t v19 = a3;
    uint64_t v36 = a7;
    if (qword_1E945BB70 != -1) {
      swift_once();
    }
    sub_19EBF75A8();
    uint64_t v20 = v42;
    sub_19E634690(MEMORY[0x1E4FBC860], (uint64_t)v39);
    sub_19E601010(v20);
    uint64_t v30 = v40;
    uint64_t v29 = v41;
    uint64_t v28 = __swift_project_boxed_opaque_existential_1(v39, v40);
    char v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v21(v17, a2, a5);
    sub_19E6133AC();
    uint64_t v31 = a2;
    sub_19EBF65F8();
    uint64_t v22 = v38;
    v21(v17, a3, a5);
    sub_19EBF65F8();
    uint64_t v23 = v37;
    __int16 v24 = sub_19E6C1448(v32, 0);
    uint64_t v42 = (void *)(v22 | (v23 << 32));
    char v43 = 0;
    uint64_t v44 = v35;
    time_t v45 = v33;
    __int16 v46 = v24 & 0x1FF;
    uint64_t v47 = 0x6D6F646E6172;
    unint64_t v48 = 0xE600000000000000;
    uint64_t v25 = (*(uint64_t (**)(void **, uint64_t))(v29 + 16))(&v42, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v26(v19, a5);
    v26(v31, a5);
    uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v39);
    *uint64_t v36 = v25;
  }
  return result;
}

uint64_t MLTensor.init<A>(randomUniform:in:seed:scalarType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t *a6@<X8>)
{
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  time_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v16 & 1) == 0 || (time_t v13 = time(0), (v13 & 0x8000000000000000) == 0))
  {
    uint64_t v28 = a3;
    uint64_t v29 = a5;
    time_t v30 = v13;
    uint64_t v31 = a1;
    uint64_t v32 = a6;
    if (qword_1E945BB70 != -1) {
      swift_once();
    }
    sub_19EBF75A8();
    uint64_t v17 = (void *)v37;
    sub_19E634690(MEMORY[0x1E4FBC860], (uint64_t)v34);
    sub_19E601010(v17);
    uint64_t v18 = v35;
    uint64_t v27 = v36;
    v26[1] = __swift_project_boxed_opaque_existential_1(v34, v35);
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v19(v15, a2, a4);
    sub_19E6133AC();
    sub_19EBF65F8();
    float v20 = *(float *)&v37;
    uint64_t v21 = sub_19EBF6C78();
    v19(v15, a2 + *(int *)(v21 + 36), a4);
    sub_19EBF65F8();
    float v22 = v33;
    if (v20 <= v33)
    {
      __int16 v23 = sub_19E6C1448(v28, 0);
      unint64_t v37 = LODWORD(v20) | ((unint64_t)LODWORD(v22) << 32);
      char v38 = 1;
      uint64_t v39 = v31;
      time_t v40 = v30;
      __int16 v41 = v23 & 0x1FF;
      uint64_t v42 = 0x6D6F646E6172;
      unint64_t v43 = 0xE600000000000000;
      uint64_t v24 = (*(uint64_t (**)(unint64_t *, uint64_t))(v27 + 16))(&v37, v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a2, v21);
      uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
      *uint64_t v32 = v24;
      return result;
    }
    __break(1u);
  }
  uint64_t result = sub_19EBF71E8();
  __break(1u);
  return result;
}

uint64_t MLTensor.init<A>(randomUniform:in:seed:scalarType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, time_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v117 = a5;
  uint64_t v127 = a2;
  uint64_t v109 = *(void *)(*(void *)(a8 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v108 = &v103[-v17];
  uint64_t v126 = *(void *)(a6 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  unint64_t v105 = &v103[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v123 = &v103[-v21];
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  long long v122 = &v103[-v23];
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v110 = &v103[-v25];
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v106 = &v103[-v27];
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  unint64_t v111 = &v103[-v29];
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  id v124 = &v103[-v31];
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  long long v128 = &v103[-v33];
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v125 = &v103[-v35];
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  char v38 = &v103[-v37];
  uint64_t v39 = MEMORY[0x1F4188790](v36);
  long long v113 = &v103[-v40];
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  id v112 = &v103[-v42];
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  time_t v45 = &v103[-v44];
  MEMORY[0x1F4188790](v43);
  uint64_t v47 = &v103[-v46];
  if (a4)
  {
    a3 = time(0);
    if (a3 < 0) {
      goto LABEL_73;
    }
  }
  time_t v118 = a3;
  uint64_t v119 = a7;
  uint64_t v120 = a1;
  long long v121 = a9;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  unint64_t v48 = (void *)v133;
  sub_19E634690(MEMORY[0x1E4FBC860], (uint64_t)v130);
  sub_19E601010(v48);
  uint64_t v115 = v132;
  uint64_t v116 = v131;
  id v114 = __swift_project_boxed_opaque_existential_1(v130, v131);
  char v49 = (unsigned char *)v126;
  unint64_t v50 = *(unsigned char **)(v126 + 16);
  ((void (*)(unsigned char *, uint64_t, uint64_t))v50)(v47, v127, a6);
  char v51 = sub_19EBF6F38();
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v50)(v45, v47, a6);
  if ((v51 & 1) == 0)
  {
    uint64_t v53 = (void (*)(unsigned char *, uint64_t))*((void *)v49 + 1);
    v53(v45, a6);
    goto LABEL_24;
  }
  uint64_t v52 = sub_19EBF6F28();
  uint64_t v53 = (void (*)(unsigned char *, uint64_t))*((void *)v49 + 1);
  v53(v45, a6);
  if (v52 <= 32) {
    goto LABEL_23;
  }
  uint64_t v54 = v112;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v50)(v112, v47, a6);
  LODWORD(v133) = 0x80000000;
  if (sub_19EBF6F38())
  {
    if (sub_19EBF6F28() < 32)
    {
LABEL_18:
      uint64_t v58 = sub_19EBF6F18();
      v53(v54, a6);
      char v49 = (unsigned char *)v126;
      if ((int)v133 > (int)v58) {
        goto LABEL_71;
      }
      goto LABEL_24;
    }
    goto LABEL_13;
  }
  char v55 = sub_19EBF6F38();
  uint64_t v56 = sub_19EBF6F28();
  if ((v55 & 1) == 0)
  {
    if (v56 < 32)
    {
      uint64_t v54 = v112;
      goto LABEL_18;
    }
    v53(v112, a6);
LABEL_23:
    char v49 = (unsigned char *)v126;
    goto LABEL_24;
  }
  if (v56 > 32)
  {
LABEL_13:
    sub_19E630220();
    uint64_t v57 = v113;
    sub_19EBF6F08();
    uint64_t v58 = sub_19EBF66C8();
    v53(v57, a6);
    v53(v112, a6);
    char v49 = (unsigned char *)v126;
    if (v58) {
      goto LABEL_71;
    }
    goto LABEL_24;
  }
  swift_getAssociatedConformanceWitness();
  sub_19EBF73D8();
  uint64_t v59 = v113;
  sub_19EBF7378();
  int v104 = sub_19EBF66C8();
  v53(v59, a6);
  uint64_t v58 = (uint64_t)v106;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v126 + 32))(v106, v112, a6);
  if (v104)
  {
LABEL_70:
    v53((unsigned char *)v58, a6);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  LODWORD(v112) = v133;
  int v60 = sub_19EBF6F18();
  v53((unsigned char *)v58, a6);
  char v49 = (unsigned char *)v126;
  if ((int)v112 > v60) {
    goto LABEL_71;
  }
LABEL_24:
  uint64_t v61 = sub_19EBF6F28();
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v50)(v38, v47, a6);
  if (v61 < 33)
  {
    uint64_t v69 = sub_19EBF6F28();
    v53(v38, a6);
    if (v69 != 32 || (sub_19EBF6F38() & 1) != 0) {
      goto LABEL_37;
    }
  }
  else
  {
    v53(v38, a6);
  }
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v50)(v125, v47, a6);
  LODWORD(v133) = 0x7FFFFFFF;
  char v62 = sub_19EBF6F38();
  uint64_t v63 = sub_19EBF6F28();
  if ((v62 & 1) == 0)
  {
    if (v63 > 31) {
      goto LABEL_35;
    }
LABEL_33:
    uint64_t v70 = v125;
    int v71 = sub_19EBF6F18();
    v53(v70, a6);
    if ((int)v133 < v71) {
      goto LABEL_34;
    }
    goto LABEL_37;
  }
  if (v63 <= 32) {
    goto LABEL_33;
  }
  sub_19E630220();
  unint64_t v64 = v113;
  sub_19EBF6F08();
  id v112 = v50;
  unint64_t v65 = v53;
  uint64_t v66 = v125;
  char v67 = sub_19EBF66C8();
  v65(v64, a6);
  char v68 = v66;
  uint64_t v53 = v65;
  unint64_t v50 = v112;
  v53(v68, a6);
  while ((v67 & 1) != 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    int v129 = 0x7FFFFFFF;
    unint64_t v72 = (void (*)(unsigned char *, unsigned char *, uint64_t))*((void *)v49 + 4);
    char v49 = v113;
    v72(v113, v125, a6);
    sub_19E630220();
    unint64_t v73 = v111;
    sub_19EBF6F08();
    char v67 = sub_19EBF66C8();
    v53(v73, a6);
    v53(v49, a6);
  }
LABEL_37:
  unsigned int v74 = sub_19EBF6F18();
  v53(v47, a6);
  id v112 = *(unsigned char **)(*(void *)(a8 + 32) + 8);
  uint64_t v125 = (unsigned char *)sub_19EBF6728();
  uint64_t v75 = v128;
  ((void (*)(unsigned char *, uint64_t, uint64_t))v50)(v128, v127 + *((int *)v125 + 9), a6);
  char v76 = sub_19EBF6F38();
  uint64_t v77 = (uint64_t)v124;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v50)(v124, v75, a6);
  if ((v76 & 1) == 0) {
    goto LABEL_49;
  }
  uint64_t v78 = sub_19EBF6F28();
  v53((unsigned char *)v77, a6);
  if (v78 <= 32) {
    goto LABEL_50;
  }
  uint64_t v77 = (uint64_t)v110;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v50)(v110, v128, a6);
  LODWORD(v133) = 0x80000000;
  if (sub_19EBF6F38())
  {
    if (sub_19EBF6F28() < 32)
    {
LABEL_47:
      int v83 = sub_19EBF6F18();
      v53((unsigned char *)v77, a6);
      if ((int)v133 <= v83) {
        goto LABEL_50;
      }
      goto LABEL_48;
    }
LABEL_44:
    sub_19E630220();
    unint64_t v81 = v113;
    sub_19EBF6F08();
    char v82 = sub_19EBF66C8();
    v53(v81, a6);
    v53((unsigned char *)v77, a6);
    if ((v82 & 1) == 0) {
      goto LABEL_50;
    }
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  char v79 = sub_19EBF6F38();
  uint64_t v80 = sub_19EBF6F28();
  if ((v79 & 1) == 0)
  {
    if (v80 < 32) {
      goto LABEL_47;
    }
LABEL_49:
    v53((unsigned char *)v77, a6);
    goto LABEL_50;
  }
  if (v80 > 32) {
    goto LABEL_44;
  }
  swift_getAssociatedConformanceWitness();
  sub_19EBF73D8();
  uint64_t v101 = v113;
  sub_19EBF7378();
  LODWORD(v124) = sub_19EBF66C8();
  v53(v101, a6);
  uint64_t v58 = (uint64_t)v105;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v126 + 32))(v105, v77, a6);
  if ((v124 & 1) == 0)
  {
    int v102 = v133;
    uint64_t v77 = sub_19EBF6F18();
    v53((unsigned char *)v58, a6);
    if (v102 <= (int)v77)
    {
LABEL_50:
      unint64_t v84 = v128;
      uint64_t v85 = sub_19EBF6F28();
      uint64_t v86 = v122;
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v50)(v122, v84, a6);
      if (v85 < 33)
      {
        uint64_t v93 = sub_19EBF6F28();
        v53(v86, a6);
        BOOL v94 = v93 == 32;
        uint64_t v87 = v123;
        if (!v94 || (sub_19EBF6F38() & 1) != 0) {
          goto LABEL_63;
        }
      }
      else
      {
        v53(v86, a6);
        uint64_t v87 = v123;
      }
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v50)(v87, v128, a6);
      LODWORD(v133) = 0x7FFFFFFF;
      char v88 = sub_19EBF6F38();
      uint64_t v89 = sub_19EBF6F28();
      if (v88)
      {
        if (v89 > 32)
        {
          sub_19E630220();
          uint64_t v90 = v113;
          sub_19EBF6F08();
          uint64_t v58 = (uint64_t)v87;
          char v91 = sub_19EBF66C8();
          v53(v90, a6);
          uint64_t v92 = v58;
          goto LABEL_62;
        }
      }
      else if (v89 > 31)
      {
        int v129 = 0x7FFFFFFF;
        uint64_t v95 = v113;
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v126 + 32))(v113, v87, a6);
        sub_19E630220();
        uint64_t v96 = v111;
        uint64_t v58 = a6;
        sub_19EBF6F08();
        char v91 = sub_19EBF66C8();
        v53(v96, a6);
        uint64_t v92 = (uint64_t)v95;
LABEL_62:
        v53((unsigned char *)v92, a6);
        if (v91)
        {
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
LABEL_63:
        uint64_t v58 = (uint64_t)v128;
        unsigned int v97 = sub_19EBF6F18();
        v53((unsigned char *)v58, a6);
        if ((int)v97 >= (int)v74)
        {
          __int16 v98 = sub_19E6C1448(v117, 0);
          unint64_t v133 = v74 | ((unint64_t)v97 << 32);
          char v134 = 2;
          uint64_t v135 = v120;
          time_t v136 = v118;
          __int16 v137 = v98 & 0x1FF;
          uint64_t v138 = 0x6D6F646E6172;
          unint64_t v139 = 0xE600000000000000;
          uint64_t v99 = (*(uint64_t (**)(unint64_t *, uint64_t))(v115 + 16))(&v133, v116);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t))(*((void *)v125 - 1) + 8))(v127);
          uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v130);
          uint64_t *v121 = v99;
          return result;
        }
        __break(1u);
        goto LABEL_69;
      }
      sub_19EBF6F18();
      v53(v87, a6);
      goto LABEL_63;
    }
    goto LABEL_48;
  }
LABEL_72:
  v53((unsigned char *)v58, a6);
  __break(1u);
LABEL_73:
  uint64_t result = sub_19EBF71E8();
  __break(1u);
  return result;
}

unint64_t sub_19E630220()
{
  unint64_t result = qword_1E945C630;
  if (!qword_1E945C630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E945C630);
  }
  return result;
}

uint64_t MLTensor.matmul(_:)@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *v2;
  unint64_t v5 = *v2 >> 62;
  unint64_t v7 = *a1;
  unint64_t v8 = *v2;
  switch(v5)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v9 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v9 = (v4 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v9 = v4 + 40;
      break;
  }
  uint64_t v10 = *(void *)(*(void *)v9 + 16);
  unint64_t v11 = v3 >> 62;
  switch(v3 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v12 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v12 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v12 = v3 + 40;
      break;
  }
  uint64_t v13 = *(void *)(*(void *)v12 + 16);
  uint64_t v69 = a2;
  if (v10 == 1)
  {
    if (v13 == 2)
    {
      v73[0] = *v2;
      swift_retain();
      swift_retain();
      MLTensor.expandingShape(at:)((uint64_t)&unk_1EF0CA0D0, (unint64_t *)&v76);
      swift_release();
      unint64_t v15 = (unint64_t)v76;
      uint64_t v16 = &unk_1EF0CA0F8;
    }
    else if (v13 == 1)
    {
      swift_retain();
      swift_retain_n();
      MLTensor.expandingShape(at:)((uint64_t)&unk_1EF0CA1E8, (unint64_t *)&v76);
      swift_release();
      unint64_t v14 = (unint64_t)v76;
      v73[0] = v7;
      MLTensor.expandingShape(at:)((uint64_t)&unk_1EF0CA078, (unint64_t *)&v76);
      unint64_t v15 = v14;
      swift_release_n();
      unint64_t v7 = (unint64_t)v76;
      uint64_t v16 = &unk_1EF0CA0A0;
    }
    else
    {
      v73[0] = *v2;
      uint64_t v22 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      swift_retain_n();
      MLTensor.expandingShape(at:)((uint64_t)&unk_1EF0CA170, (unint64_t *)&v76);
      swift_release();
      unint64_t v15 = (unint64_t)v76;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_19EC36240;
      uint64_t v24 = (void *)v23;
      switch((int)v11)
      {
        case 1:
        case 3:
          uint64_t v25 = v22 + 24;
          break;
        case 2:
          uint64_t v25 = v22 + 16;
          break;
        default:
          uint64_t v25 = v3 + 40;
          break;
      }
      uint64_t v26 = *(void *)(*(void *)v25 + 16);
      swift_release();
      uint64_t v16 = v24;
      v24[4] = v26 - 2;
    }
    goto LABEL_32;
  }
  if (v10 == 2 && v13 == 1)
  {
    v73[0] = *a1;
    swift_retain();
    swift_retain();
    MLTensor.expandingShape(at:)((uint64_t)&unk_1EF0CA120, (unint64_t *)&v76);
    swift_release();
    unint64_t v7 = (unint64_t)v76;
    uint64_t v16 = &unk_1EF0CA148;
LABEL_25:
    unint64_t v15 = v8;
    goto LABEL_32;
  }
  if (v13 != 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_25;
  }
  v73[0] = *a1;
  uint64_t v18 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  swift_retain_n();
  MLTensor.expandingShape(at:)((uint64_t)&unk_1EF0CA198, (unint64_t *)&v76);
  swift_release();
  unint64_t v7 = (unint64_t)v76;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945BB18);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_19EC36240;
  uint64_t v20 = (void *)v19;
  switch((int)v5)
  {
    case 1:
    case 3:
      uint64_t v21 = v18 + 24;
      break;
    case 2:
      uint64_t v21 = v18 + 16;
      break;
    default:
      uint64_t v21 = v4 + 40;
      break;
  }
  unint64_t v15 = v8;
  uint64_t v27 = *(void *)(*(void *)v21 + 16);
  swift_release();
  uint64_t v16 = v20;
  v20[4] = v27 - 1;
LABEL_32:
  switch(v15 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v28 = (v15 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v28 = (v15 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v28 = v15 + 40;
      break;
  }
  unint64_t v29 = *(void *)(*(void *)v28 + 16);
  if (v29 > 8) {
    goto LABEL_74;
  }
  switch(v7 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v30 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2uLL:
      uint64_t v30 = (v7 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v30 = v7 + 40;
      break;
  }
  unint64_t v31 = *(void *)(*(void *)v30 + 16);
  if (v31 - 9 < 0xFFFFFFFFFFFFFFF9)
  {
    char v76 = (void *)v31;
    long long v77 = xmmword_19EC38670;
    char v64 = 1;
    goto LABEL_76;
  }
  unint64_t v70 = v3;
  switch(v15 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v32 = (uint64_t)v16;
      uint64_t v33 = (uint64_t *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v32 = (uint64_t)v16;
      uint64_t v33 = (uint64_t *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v32 = (uint64_t)v16;
      uint64_t v33 = (uint64_t *)(v15 + 40);
      break;
  }
  uint64_t v34 = *v33;
  swift_bridgeObjectRetain();
  switch(v7 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v35 = (uint64_t *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2uLL:
      uint64_t v35 = (uint64_t *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v35 = (uint64_t *)(v7 + 40);
      break;
  }
  uint64_t v36 = *v35;
  swift_bridgeObjectRetain();
  uint64_t v37 = sub_19E676824(v34, 0, v36, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v71 = v37;
  if (!v37)
  {
    switch((int)v5)
    {
      case 1:
      case 3:
        unint64_t v65 = (unint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
        break;
      case 2:
        unint64_t v65 = (unint64_t *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 16);
        break;
      default:
        unint64_t v65 = (unint64_t *)(v4 + 40);
        break;
    }
    unint64_t v66 = *v65;
    swift_bridgeObjectRetain();
    uint64_t v67 = swift_bridgeObjectRetain();
    char v76 = (void *)v66;
    *(void *)&long long v77 = v67;
    char v80 = 2;
    sub_19E5E2970((uint64_t)&v76, (uint64_t)v73);
    sub_19E5E1864();
LABEL_83:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E630D24);
  }
  switch((int)v5)
  {
    case 1:
    case 3:
      char v38 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v39 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      char v38 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v39 = (unsigned __int8 *)((v4 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      char v38 = (unsigned __int8 *)(v4 + 48);
      uint64_t v39 = (unsigned __int8 *)(v4 + 49);
      break;
  }
  int v40 = *v39;
  unsigned int v41 = *v38;
  uint64_t v68 = v32;
  switch((int)v11)
  {
    case 1:
    case 3:
      uint64_t v42 = (unsigned __int8 *)((v70 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v43 = (unsigned __int8 *)((v70 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v42 = (unsigned __int8 *)((v70 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v43 = (unsigned __int8 *)((v70 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v42 = (unsigned __int8 *)(v70 + 48);
      uint64_t v43 = (unsigned __int8 *)(v70 + 49);
      break;
  }
  int v44 = *v43;
  __int16 v45 = *v42;
  if (v40) {
    int v46 = 256;
  }
  else {
    int v46 = 0;
  }
  uint64_t v47 = v46 | v41;
  if (v44) {
    __int16 v48 = 256;
  }
  else {
    __int16 v48 = 0;
  }
  unsigned int v49 = sub_19E636D20(v47, v48 | v45);
  LOWORD(v76) = v49 & 0x1FF;
  int v50 = (v49 >> 8) & 1;
  *(void *)&long long v77 = &unk_1EF0CA1C0;
  BYTE8(v77) = 1;
  char v80 = 9;
  if (v49 < 9u)
  {
    sub_19E5E2970((uint64_t)&v76, (uint64_t)v73);
    sub_19E5E1864();
    goto LABEL_83;
  }
  __int16 v51 = v49;
  sub_19E607D84((uint64_t)&v76);
  sub_19E6019D0(v51 & 0x1FF, &v76);
  unint64_t v52 = (unint64_t)v76;
  v73[0] = v7;
  sub_19E6019D0(v51 & 0x1FF, &v76);
  unint64_t v53 = (unint64_t)v76;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  uint64_t v54 = v76;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v52;
  *(void *)(inited + 40) = v53;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)v73);
  swift_bridgeObjectRelease();
  sub_19E601010(v54);
  uint64_t v56 = v74;
  uint64_t v57 = v75;
  __swift_project_boxed_opaque_existential_1(v73, v74);
  LOWORD(v76) = 0;
  *(void *)&long long v77 = 0x676C616E696CLL;
  *((void *)&v77 + 1) = 0xE600000000000000;
  uint64_t v78 = 0x6C756D74616DLL;
  unint64_t v79 = 0xE600000000000000;
  uint64_t v58 = swift_allocObject();
  *(_OWORD *)(v58 + 16) = xmmword_19EC365B0;
  *(void *)(v58 + 32) = v52;
  *(void *)(v58 + 40) = v53;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v59 = swift_initStackObject();
  *(void *)(v59 + 32) = v71;
  *(_OWORD *)(v59 + 16) = xmmword_19EC36240;
  *(unsigned char *)(v59 + 40) = v51;
  *(unsigned char *)(v59 + 41) = v50;
  int v60 = *(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56);
  swift_retain();
  swift_retain();
  uint64_t v61 = v60(&v76, v58, v59, v56, v57);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v61 + 16))
  {
    __break(1u);
LABEL_74:
    char v76 = (void *)v29;
    long long v77 = xmmword_19EC38680;
    char v64 = 3;
LABEL_76:
    LOBYTE(v7_Block_object_dispose(&STACK[0x278], 8) = v64;
    char v80 = 4;
    sub_19E5E2970((uint64_t)&v76, (uint64_t)v73);
    sub_19E5E1864();
    goto LABEL_83;
  }
  unint64_t v62 = *(void *)(v61 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  if (*(void *)(v68 + 16))
  {
    MLTensor.squeezingShape(at:)(v68, &v72);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    unint64_t v62 = v72;
  }
  else
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  *uint64_t v69 = v62;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v73);
}

uint64_t conv2D(_:weight:stride:padding:dilation:groupCount:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  *(void *)&long long v67 = a4;
  *((void *)&v67 + 1) = a5;
  uint64_t v11 = *a1;
  unint64_t v12 = *a2;
  unint64_t v13 = (unint64_t)*a1 >> 62;
  switch(v13)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v17 = (unsigned __int8 *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = (char *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v17 = (unsigned __int8 *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v18 = (char *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v17 = (unsigned __int8 *)(v11 + 48);
      uint64_t v18 = (char *)(v11 + 49);
      break;
  }
  char v19 = *v18;
  unsigned int v20 = *v17;
  LOBYTE(v71) = v20;
  BYTE1(v71) = v19;
  *(void *)&long long v72 = &unk_1EF0C9870;
  BYTE8(v72) = 1;
  char v77 = 9;
  if (v20 < 9) {
    goto LABEL_48;
  }
  sub_19E607D84((uint64_t)&v71);
  unint64_t v21 = v12 >> 62;
  switch(v12 >> 62)
  {
    case 1uLL:
    case 3uLL:
      uint64_t v22 = (unsigned __int8 *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v23 = (char *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2uLL:
      uint64_t v22 = (unsigned __int8 *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v23 = (char *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v22 = (unsigned __int8 *)(v12 + 48);
      uint64_t v23 = (char *)(v12 + 49);
      break;
  }
  char v24 = *v23;
  unsigned int v25 = *v22;
  LOBYTE(v71) = v25;
  BYTE1(v71) = v24;
  *(void *)&long long v72 = &unk_1EF0C9848;
  BYTE8(v72) = 1;
  char v77 = 9;
  if (v25 < 9) {
    goto LABEL_48;
  }
  sub_19E607D84((uint64_t)&v71);
  uint64_t v26 = v13;
  switch((int)v13)
  {
    case 1:
    case 3:
      uint64_t v27 = (v11 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v27 = (v11 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v27 = v11 + 40;
      break;
  }
  uint64_t v28 = *(void **)(*(void *)v27 + 16);
  if (v28 != (void *)4) {
    goto LABEL_49;
  }
  switch((int)v21)
  {
    case 1:
    case 3:
      uint64_t v29 = (v12 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      break;
    case 2:
      uint64_t v29 = (v12 & 0x3FFFFFFFFFFFFFFFLL) + 16;
      break;
    default:
      uint64_t v29 = v12 + 40;
      break;
  }
  uint64_t v28 = *(void **)(*(void *)v29 + 16);
  if (v28 != (void *)4)
  {
LABEL_49:
    int v71 = v28;
    long long v72 = xmmword_19EC38690;
    LOBYTE(v73) = 0;
    char v77 = 4;
    sub_19E5E2970((uint64_t)&v71, (uint64_t)v68);
    sub_19E5E1864();
    goto LABEL_50;
  }
  switch((int)v13)
  {
    case 1:
    case 3:
      uint64_t v30 = (void **)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      uint64_t v30 = (void **)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v30 = (void **)(v11 + 40);
      break;
  }
  unint64_t v31 = *v30;
  swift_bridgeObjectRetain();
  switch((int)v21)
  {
    case 1:
    case 3:
      uint64_t v32 = (void **)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      break;
    case 2:
      uint64_t v32 = (void **)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 16);
      break;
    default:
      uint64_t v32 = (void **)(v12 + 40);
      break;
  }
  uint64_t v33 = *v32;
  swift_bridgeObjectRetain();
  unint64_t v62 = sub_19E6769FC(v31, v33, a3, v67, *((uint64_t *)&v67 + 1), a6, a7, a8, a10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  switch(v26)
  {
    case 1:
    case 3:
      uint64_t v34 = (unsigned __int8 *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v35 = (unsigned __int8 *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      uint64_t v34 = (unsigned __int8 *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v35 = (unsigned __int8 *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      uint64_t v34 = (unsigned __int8 *)(v11 + 48);
      uint64_t v35 = (unsigned __int8 *)(v11 + 49);
      break;
  }
  int v36 = *v35;
  unsigned int v37 = *v34;
  uint64_t v61 = a9;
  uint64_t v64 = a7;
  uint64_t v65 = a8;
  uint64_t v63 = a6;
  switch((int)v21)
  {
    case 1:
    case 3:
      char v38 = (unsigned __int8 *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      uint64_t v39 = (unsigned __int8 *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 33);
      break;
    case 2:
      char v38 = (unsigned __int8 *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 24);
      uint64_t v39 = (unsigned __int8 *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 25);
      break;
    default:
      char v38 = (unsigned __int8 *)(v12 + 48);
      uint64_t v39 = (unsigned __int8 *)(v12 + 49);
      break;
  }
  int v40 = *v39;
  __int16 v41 = *v38;
  if (v36) {
    int v42 = 256;
  }
  else {
    int v42 = 0;
  }
  uint64_t v43 = v42 | v37;
  if (v40) {
    __int16 v44 = 256;
  }
  else {
    __int16 v44 = 0;
  }
  unsigned int v45 = sub_19E636D20(v43, v44 | v41);
  char v46 = v45;
  int v47 = (v45 >> 8) & 1;
  __int16 v48 = v45 & 0x1FF;
  sub_19E6019D0(v45 & 0x1FF, &v71);
  unsigned int v49 = v71;
  v68[0] = v12;
  sub_19E6019D0(v48, &v71);
  int v50 = v71;
  if (qword_1E945BB70 != -1) {
    swift_once();
  }
  sub_19EBF75A8();
  __int16 v51 = v71;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945CEB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19EC365B0;
  *(void *)(inited + 32) = v49;
  *(void *)(inited + 40) = v50;
  swift_retain();
  swift_retain();
  sub_19E634690(inited, (uint64_t)v68);
  swift_bridgeObjectRelease();
  sub_19E601010(v51);
  uint64_t v53 = v69;
  uint64_t v54 = v70;
  __swift_project_boxed_opaque_existential_1(v68, v69);
  int v71 = (void *)a3;
  long long v72 = v67;
  uint64_t v73 = v63;
  uint64_t v74 = v64;
  uint64_t v75 = v65;
  uint64_t v76 = a10;
  uint64_t v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_19EC365B0;
  *(void *)(v55 + 32) = v49;
  *(void *)(v55 + 40) = v50;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C2B0);
  uint64_t v56 = swift_initStackObject();
  *(void *)(v56 + 32) = v62;
  *(_OWORD *)(v56 + 16) = xmmword_19EC36240;
  *(unsigned char *)(v56 + 40) = v46;
  *(unsigned char *)(v56 + 41) = v47;
  uint64_t v57 = *(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 240);
  swift_retain();
  swift_retain();
  uint64_t v58 = v57(&v71, v55, v56, v53, v54);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (!*(void *)(v58 + 16))
  {
    __break(1u);
LABEL_48:
    sub_19E5E2970((uint64_t)&v71, (uint64_t)v68);
    sub_19E5E1864();
LABEL_50:
    sub_19EBF71F8();
    __break(1u);
    JUMPOUT(0x19E63146CLL);
  }
  uint64_t v59 = *(void *)(v58 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  void *v61 = v59;
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v68);
}

void *sub_19E6314EC(void *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = result[3] >> 1;
  if (v1 != v2)
  {
    if (v1 < v2)
    {
      uint64_t v3 = result[6];
      uint64_t v4 = result[7] >> 1;
      if (v3 == v4) {
        goto LABEL_4;
      }
      uint64_t v6 = result[2];
      while (v3 < v4)
      {
        uint64_t v7 = *(void *)(result[1] + 8 * v6);
        uint64_t v8 = *(void *)(result[5] + 8 * v3);
        BOOL v5 = v8 < v7;
        if (v8 >= v7 || v2 - 1 == v6) {
          goto LABEL_5;
        }
        if (v6 + 1 < v1 || v6 + 1 >= v2) {
          goto LABEL_17;
        }
        ++v3;
        ++v6;
        if (v4 == v3) {
          goto LABEL_5;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_4:
  BOOL v5 = 1;
LABEL_5:
  sub_19E632EB0((uint64_t)result);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return (void *)v5;
}

uint64_t sub_19E6315C8(unint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v11 = a1;
  unint64_t v12 = *(void *)(a3 + 16);
  if (v12)
  {
    unint64_t v13 = (uint64_t *)(a3 + 32);
    uint64_t v14 = 1;
    do
    {
      uint64_t v15 = *v13++;
      uint64_t v16 = v14 * v15;
      if ((unsigned __int128)(v14 * (__int128)v15) >> 64 != (v14 * v15) >> 63)
      {
        __break(1u);
        goto LABEL_60;
      }
      uint64_t v14 = v16;
      --v12;
    }
    while (v12);
    int64_t v5 = *(void *)(a1 + 16);
    if (!v5) {
      goto LABEL_16;
    }
    goto LABEL_6;
  }
  uint64_t v16 = 1;
  int64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
LABEL_6:
    unint64_t v12 = a1 + 32;
    uint64_t v17 = 1;
    int64_t v18 = v5;
    while (1)
    {
      uint64_t v19 = *(void *)v12;
      v12 += 8;
      uint64_t v20 = v17 * v19;
      if ((unsigned __int128)(v17 * (__int128)v19) >> 64 != (v17 * v19) >> 63) {
        break;
      }
      uint64_t v17 = v20;
      if (!--v18)
      {
        if (v16 != v20) {
          goto LABEL_17;
        }
        goto LABEL_10;
      }
    }
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
LABEL_16:
  if (v16 != 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_10:
  uint64_t v4 = (void *)sub_19E60F71C(0, v5);
  if (v16 <= 1)
  {
    swift_bridgeObjectRetain();
    if (v5)
    {
      uint64_t v6 = (void *)sub_19EBF6968();
      _OWORD v6[2] = v5;
LABEL_19:
      v41[1] = v5;
      int64_t v42 = 0;
      v41[0] = v6 + 4;
      sub_19E6B5844(v41, &v42, v11);
      unint64_t v12 = v42;
      if (v5 < v42)
      {
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      _OWORD v6[2] = v42;
      swift_bridgeObjectRelease();
      unint64_t v12 = v4[2];
      if (v5 != v12)
      {
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      if (v5 != v6[2])
      {
        __break(1u);
LABEL_23:
        uint64_t v24 = v35;
        uint64_t v25 = v36;
        uint64_t v26 = v34;
        goto LABEL_24;
      }
      goto LABEL_56;
    }
LABEL_18:
    uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  uint64_t v6 = (void *)sub_19E60F71C(1uLL, v5);
  uint64_t v21 = sub_19E631C8C((void *)a2, a3, a4);
  uint64_t v24 = v21;
  uint64_t v25 = v22;
  uint64_t v7 = v23;
  uint64_t v26 = *(void **)(v22 + 16);
  if (v26)
  {
    uint64_t v37 = v21 + 32;
    uint64_t v38 = v22 + 32;
    uint64_t v39 = v23 + 32;
    unint64_t v40 = v11 + 32;
    swift_bridgeObjectRetain();
    unint64_t v11 = 0;
    a2 = 0;
    uint64_t v35 = v24;
    uint64_t v36 = v25;
    uint64_t v34 = v26;
    while (1)
    {
      unint64_t v12 = *(void *)(v25 + 16);
      if (a2 >= v12) {
        break;
      }
      unint64_t v12 = *(void *)(v24 + 16);
      if (a2 >= v12) {
        goto LABEL_71;
      }
      unint64_t v12 = *(void *)(v38 + 8 * a2);
      if (v12 != 1)
      {
        if (v11 == v5)
        {
LABEL_50:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_52:
          swift_bridgeObjectRelease();
          return 0;
        }
        uint64_t v27 = *(void *)(v37 + 8 * a2);
        if (v11 <= v5) {
          unint64_t v28 = v5;
        }
        else {
          unint64_t v28 = v11;
        }
        while (v28 != v11)
        {
          uint64_t v29 = *(void *)(v40 + 8 * v11);
          if (!v29) {
            goto LABEL_62;
          }
          if (v12 == 0x8000000000000000 && v29 == -1) {
            goto LABEL_68;
          }
          uint64_t v30 = (uint64_t)v12 / v29;
          if ((uint64_t)v12 % v29)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            goto LABEL_52;
          }
          unint64_t v12 = *(void *)(v7 + 16);
          if (a2 >= v12) {
            goto LABEL_63;
          }
          uint64_t v31 = *(void *)(v39 + 8 * a2);
          uint64_t v32 = v30 * v31;
          unint64_t v12 = (unsigned __int128)(v30 * (__int128)v31) >> 64;
          if (v12 != v32 >> 63) {
            goto LABEL_64;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v6 = sub_19E612754(v6);
          }
          unint64_t v12 = v6[2];
          if (v11 >= v12) {
            goto LABEL_65;
          }
          unint64_t v12 = (unint64_t)&v6[v11];
          *(void *)(v12 + 32) = v32;
          if (!v30) {
            goto LABEL_66;
          }
          unint64_t v12 = 0x8000000000000000;
          if (v27 == 0x8000000000000000 && v30 == -1) {
            goto LABEL_69;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v4 = sub_19E612754(v4);
          }
          unint64_t v12 = v4[2];
          if (v11 >= v12) {
            goto LABEL_67;
          }
          v4[v11++ + 4] = v27 / v30;
          if (v30 == 1) {
            goto LABEL_23;
          }
          v27 %= v30;
          unint64_t v12 = v30;
          if (v5 == v11) {
            goto LABEL_50;
          }
        }
        goto LABEL_61;
      }
LABEL_24:
      if ((void *)++a2 == v26)
      {
        swift_bridgeObjectRelease();
        goto LABEL_54;
      }
    }
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
LABEL_54:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v12 = v4[2];
  if (v5 != v12)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  unint64_t v12 = v6[2];
  if (v5 != v12)
  {
LABEL_75:
    __break(1u);
    if (v5 < (uint64_t)v12) {
      __break(1u);
    }
    _OWORD v6[2] = v12;
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
LABEL_56:
  swift_bridgeObjectRetain();
  return (uint64_t)v4;
}

uint64_t sub_19E631A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  sub_19EBF73A8();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
  uint64_t v8 = *(void *)(v7 + 16);
  swift_release();
  if (v8 == v6 - (v6 != 0))
  {
    uint64_t v9 = swift_dynamicCastClass();
    if (!v9)
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_19E5DDDB0(a1, a1 + 32, v6 != 0, (2 * v6) | 1);
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = *(void *)(v11 + 16);
  swift_release();
  if (v12 == v10 - (v10 != 0))
  {
    uint64_t v13 = swift_dynamicCastClass();
    if (!v13)
    {
      swift_bridgeObjectRelease();
      uint64_t v13 = MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_19E5DDDB0(a2, a2 + 32, v10 != 0, (2 * v10) | 1);
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a3 + 16);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v15 = swift_dynamicCastClass();
  if (!v15)
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x1E4FBC860];
  }
  uint64_t v16 = *(void *)(v15 + 16);
  swift_release();
  if (v16 == v14 - (v14 != 0))
  {
    uint64_t v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = sub_19E5DDDB0(a3, a3 + 32, v14 != 0, (2 * v14) | 1);
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v13 + 16);
  if (v19 == *(void *)(v9 + 16))
  {
    if (v19 == *(void *)(v17 + 16)) {
      return v9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19E631C8C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  unint64_t v10 = *(void *)(a2 + 16);
  if (!v10) {
    goto LABEL_40;
  }
  if (v10 > a3[2])
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    uint64_t v4 = sub_19E606EE4(0, v4[2] + 1, 1, v4);
    goto LABEL_27;
  }
  if (v10 > a1[2]) {
    goto LABEL_47;
  }
  uint64_t v11 = a1 + 4;
  uint64_t v41 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  uint64_t v12 = v9 + 4;
  uint64_t v13 = v7 + 4;
  uint64_t v14 = v41;
  uint64_t v15 = 0;
  uint64_t v5 = 0;
  uint64_t v16 = 0;
  uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v6 = 1;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v43 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v38 = v8;
  uint64_t v39 = v11;
  unint64_t v40 = v13;
  do
  {
    uint64_t v17 = *(void *)(v8 + 8 * v16 + 32);
    uint64_t v3 = v13[v16];
    uint64_t v18 = v12[v16];
    if (!v15) {
      goto LABEL_10;
    }
    if ((unsigned __int128)(v17 * (__int128)v3) >> 64 != (v17 * v3) >> 63) {
      goto LABEL_45;
    }
    if (v15 != v17 * v3)
    {
      int64_t v42 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_19E606EE4(0, v4[2] + 1, 1, v4);
      }
      unint64_t v21 = v4[2];
      unint64_t v20 = v4[3];
      if (v21 >= v20 >> 1) {
        uint64_t v4 = sub_19E606EE4((void *)(v20 > 1), v21 + 1, 1, v4);
      }
      v4[2] = v21 + 1;
      v4[v21 + 4] = v6;
      uint64_t v22 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v22 = sub_19E606EE4(0, v43[2] + 1, 1, v43);
      }
      unint64_t v24 = v22[2];
      unint64_t v23 = v22[3];
      if (v24 >= v23 >> 1) {
        uint64_t v22 = sub_19E606EE4((void *)(v23 > 1), v24 + 1, 1, v22);
      }
      v22[2] = v24 + 1;
      v22[v24 + 4] = v15;
      uint64_t v7 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = sub_19E606EE4(0, v42[2] + 1, 1, v42);
      }
      unint64_t v26 = v7[2];
      unint64_t v25 = v7[3];
      uint64_t v13 = v40;
      uint64_t v14 = v41;
      uint64_t v12 = v39;
      uint64_t v43 = v22;
      if (v26 >= v25 >> 1)
      {
        uint64_t v27 = sub_19E606EE4((void *)(v25 > 1), v26 + 1, 1, v7);
        uint64_t v12 = v39;
        uint64_t v13 = v40;
        uint64_t v14 = v41;
        uint64_t v7 = v27;
      }
      _OWORD v7[2] = v26 + 1;
      v7[v26 + 4] = v5;
      uint64_t v5 = v18;
      uint64_t v6 = v17;
      uint64_t v8 = v38;
    }
    else
    {
LABEL_10:
      if ((unsigned __int128)(v6 * (__int128)v17) >> 64 != (v6 * v17) >> 63)
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      uint64_t v19 = v5 * v17;
      if ((unsigned __int128)(v5 * (__int128)v17) >> 64 != (v5 * v17) >> 63) {
        goto LABEL_43;
      }
      uint64_t v5 = v19 + v18;
      if (__OFADD__(v19, v18)) {
        goto LABEL_44;
      }
      v6 *= v17;
    }
    ++v16;
    uint64_t v15 = v3;
  }
  while (v14 != v16);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_48;
  }
LABEL_27:
  unint64_t v29 = v4[2];
  unint64_t v28 = v4[3];
  uint64_t v9 = v7;
  if (v29 >= v28 >> 1) {
    uint64_t v4 = sub_19E606EE4((void *)(v28 > 1), v29 + 1, 1, v4);
  }
  v4[2] = v29 + 1;
  v4[v29 + 4] = v6;
  uint64_t v30 = v43;
  uint64_t v31 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v30 = sub_19E606EE4(0, v43[2] + 1, 1, v43);
  }
  unint64_t v33 = v30[2];
  unint64_t v32 = v30[3];
  if (v33 >= v32 >> 1) {
    uint64_t v30 = sub_19E606EE4((void *)(v32 > 1), v33 + 1, 1, v30);
  }
  void v30[2] = v33 + 1;
  v30[v33 + 4] = v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_19E606EE4(0, v9[2] + 1, 1, v9);
    uint64_t v9 = (void *)result;
  }
  unint64_t v36 = v9[2];
  unint64_t v35 = v9[3];
  unint64_t v37 = v36 + 1;
  if (v36 >= v35 >> 1)
  {
    uint64_t result = (uint64_t)sub_19E606EE4((void *)(v35 > 1), v36 + 1, 1, v9);
    uint64_t v9 = (void *)result;
  }
  uint64_t v9[2] = v37;
  v9[v36 + 4] = v5;
  if (v31[2] == v37)
  {
    if (v37 == v30[2]) {
      return (uint64_t)v9;
    }
    __break(1u);
LABEL_40:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (uint64_t)v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E6320CC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_19E6439F8(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_19E632138(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_19E632138(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_19EBF7308();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v83 = 0;
      uint64_t v84 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v86 = *(void *)(v84 + 16 * i + 8);
        uint64_t v87 = v83;
        do
        {
          uint64_t v88 = v84 + v87;
          if (v86 >= *(void *)(v84 + v87 + 8)) {
            break;
          }
          if (!v84) {
            goto LABEL_140;
          }
          uint64_t v89 = *(void *)(v88 + 16);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)v88;
          *(void *)uint64_t v88 = v89;
          *(void *)(v88 + _Block_object_dispose(&STACK[0x278], 8) = v86;
          v87 -= 16;
        }
        while (v87 != -16);
        v83 += 16;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  uint64_t v6 = result;
  uint64_t v99 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    __dst = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
LABEL_102:
      uint64_t v90 = v12;
      uint64_t v101 = v9;
      if (v13 >= 2)
      {
        uint64_t v91 = *v99;
        do
        {
          unint64_t v92 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v91) {
            goto LABEL_144;
          }
          uint64_t v93 = v90;
          uint64_t v94 = *(void *)&v90[16 * v92 + 32];
          uint64_t v95 = *(void *)&v90[16 * v13 + 24];
          sub_19E632808((char *)(v91 + 16 * v94), (char *)(v91 + 16 * *(void *)&v90[16 * v13 + 16]), v91 + 16 * v95, __dst);
          if (v1) {
            break;
          }
          if (v95 < v94) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v93 = sub_19E632D08((uint64_t)v93);
          }
          if (v92 >= *((void *)v93 + 2)) {
            goto LABEL_133;
          }
          uint64_t v96 = &v93[16 * v92 + 32];
          *(void *)uint64_t v96 = v94;
          *((void *)v96 + 1) = v95;
          unint64_t v97 = *((void *)v93 + 2);
          if (v13 > v97) {
            goto LABEL_134;
          }
          memmove(&v93[16 * v13 + 16], &v93[16 * v13 + 32], 16 * (v97 - v13));
          uint64_t v90 = v93;
          *((void *)v93 + 2) = v97 - 1;
          unint64_t v13 = v97 - 1;
        }
        while (v97 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v101 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v101 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E945C638);
    uint64_t v8 = sub_19EBF6968();
    *(void *)(v8 + 16) = v7;
    uint64_t v101 = v8;
    __dst = (char *)(v8 + 32);
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v100 = *a1 + 40;
  uint64_t v98 = *a1 - 16;
  uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v102 = v6;
  uint64_t v103 = v3;
  uint64_t v104 = v11;
  while (1)
  {
    uint64_t v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = *(void *)(v11 + 16 * v10 + 8);
      uint64_t v16 = *(void *)(v11 + 16 * v14 + 8);
      uint64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = (uint64_t *)(v100 + 16 * v14);
        uint64_t v18 = v15;
        while (1)
        {
          uint64_t v20 = *v17;
          v17 += 2;
          uint64_t v19 = v20;
          if (v15 < v16 == v20 >= v18) {
            break;
          }
          ++v10;
          uint64_t v18 = v19;
          if (v3 == v10)
          {
            uint64_t v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          unint64_t v21 = (long long *)(v98 + 16 * v10);
          uint64_t v22 = v10;
          uint64_t v23 = v14;
          unint64_t v24 = (long long *)(v11 + 16 * v14);
          do
          {
            if (v23 != --v22)
            {
              if (!v11) {
                goto LABEL_143;
              }
              long long v25 = *v24;
              *unint64_t v24 = *v21;
              *unint64_t v21 = v25;
            }
            ++v23;
            --v21;
            ++v24;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v26 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v26 >= v3) {
      uint64_t v26 = v3;
    }
    if (v26 < v14) {
      break;
    }
    if (v10 != v26)
    {
      uint64_t v27 = (void *)(v11 + 16 * v10);
      do
      {
        uint64_t v28 = *(void *)(v11 + 16 * v10 + 8);
        uint64_t v29 = v14;
        uint64_t v30 = v27;
        do
        {
          if (v28 >= *(v30 - 1)) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          uint64_t v31 = *v30;
          *(_OWORD *)uint64_t v30 = *((_OWORD *)v30 - 1);
          *(v30 - 1) = v28;
          *(v30 - 2) = v31;
          v30 -= 2;
          ++v29;
        }
        while (v10 != v29);
        ++v10;
        v27 += 2;
      }
      while (v10 != v26);
      uint64_t v10 = v26;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = sub_19E632A94(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v33 = *((void *)v12 + 2);
    unint64_t v32 = *((void *)v12 + 3);
    unint64_t v13 = v33 + 1;
    uint64_t v11 = v104;
    if (v33 >= v32 >> 1)
    {
      char v82 = sub_19E632A94((char *)(v32 > 1), v33 + 1, 1, v12);
      uint64_t v11 = v104;
      uint64_t v12 = v82;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v34 = v12 + 32;
    unint64_t v35 = &v12[16 * v33 + 32];
    *(void *)unint64_t v35 = v14;
    *((void *)v35 + 1) = v10;
    if (v33)
    {
      while (1)
      {
        unint64_t v36 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v41 = &v34[16 * v13];
          uint64_t v42 = *((void *)v41 - 8);
          uint64_t v43 = *((void *)v41 - 7);
          BOOL v47 = __OFSUB__(v43, v42);
          uint64_t v44 = v43 - v42;
          if (v47) {
            goto LABEL_119;
          }
          uint64_t v46 = *((void *)v41 - 6);
          uint64_t v45 = *((void *)v41 - 5);
          BOOL v47 = __OFSUB__(v45, v46);
          uint64_t v39 = v45 - v46;
          char v40 = v47;
          if (v47) {
            goto LABEL_120;
          }
          unint64_t v48 = v13 - 2;
          unsigned int v49 = &v34[16 * v13 - 32];
          uint64_t v51 = *(void *)v49;
          uint64_t v50 = *((void *)v49 + 1);
          BOOL v47 = __OFSUB__(v50, v51);
          uint64_t v52 = v50 - v51;
          if (v47) {
            goto LABEL_122;
          }
          BOOL v47 = __OFADD__(v39, v52);
          uint64_t v53 = v39 + v52;
          if (v47) {
            goto LABEL_125;
          }
          if (v53 >= v44)
          {
            int v71 = &v34[16 * v36];
            uint64_t v73 = *(void *)v71;
            uint64_t v72 = *((void *)v71 + 1);
            BOOL v47 = __OFSUB__(v72, v73);
            uint64_t v74 = v72 - v73;
            if (v47) {
              goto LABEL_129;
            }
            BOOL v64 = v39 < v74;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v65 = *((void *)v12 + 4);
            uint64_t v66 = *((void *)v12 + 5);
            BOOL v47 = __OFSUB__(v66, v65);
            uint64_t v58 = v66 - v65;
            char v59 = v47;
            goto LABEL_77;
          }
          uint64_t v38 = *((void *)v12 + 4);
          uint64_t v37 = *((void *)v12 + 5);
          BOOL v47 = __OFSUB__(v37, v38);
          uint64_t v39 = v37 - v38;
          char v40 = v47;
        }
        if (v40) {
          goto LABEL_121;
        }
        unint64_t v48 = v13 - 2;
        uint64_t v54 = &v34[16 * v13 - 32];
        uint64_t v56 = *(void *)v54;
        uint64_t v55 = *((void *)v54 + 1);
        BOOL v57 = __OFSUB__(v55, v56);
        uint64_t v58 = v55 - v56;
        char v59 = v57;
        if (v57) {
          goto LABEL_124;
        }
        int v60 = &v34[16 * v36];
        uint64_t v62 = *(void *)v60;
        uint64_t v61 = *((void *)v60 + 1);
        BOOL v47 = __OFSUB__(v61, v62);
        uint64_t v63 = v61 - v62;
        if (v47) {
          goto LABEL_127;
        }
        if (__OFADD__(v58, v63)) {
          goto LABEL_128;
        }
        if (v58 + v63 >= v39)
        {
          BOOL v64 = v39 < v63;
LABEL_83:
          if (v64) {
            unint64_t v36 = v48;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v59) {
          goto LABEL_123;
        }
        long long v67 = &v34[16 * v36];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        BOOL v47 = __OFSUB__(v68, v69);
        uint64_t v70 = v68 - v69;
        if (v47) {
          goto LABEL_126;
        }
        if (v70 < v58) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v75 = v36 - 1;
        if (v36 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        uint64_t v76 = v12;
        char v77 = &v34[16 * v75];
        uint64_t v78 = *(void *)v77;
        unint64_t v79 = &v34[16 * v36];
        uint64_t v80 = *((void *)v79 + 1);
        sub_19E632808((char *)(v11 + 16 * *(void *)v77), (char *)(v11 + 16 * *(void *)v79), v11 + 16 * v80, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v80 < v78) {
          goto LABEL_116;
        }
        if (v36 > *((void *)v76 + 2)) {
          goto LABEL_117;
        }
        *(void *)char v77 = v78;
        *(void *)&v34[16 * v75 + 8] = v80;
        unint64_t v81 = *((void *)v76 + 2);
        if (v36 >= v81) {
          goto LABEL_118;
        }
        uint64_t v12 = v76;
        unint64_t v13 = v81 - 1;
        memmove(&v34[16 * v36], v79 + 16, 16 * (v81 - 1 - v36));
        *((void *)v76 + 2) = v81 - 1;
        uint64_t v11 = v104;
        if (v81 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    uint64_t v6 = v102;
    uint64_t v3 = v103;
    if (v10 >= v103)
    {
      uint64_t v9 = v101;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  uint64_t result = sub_19EBF71E8();
  __break(1u);
  return result;
}