void svm_cross_validation(int *a1, _DWORD *a2, int a3, double *a4)
{
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  BOOL v12;
  uint64_t j;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int *v19;
  _DWORD *v20;
  _DWORD *v21;
  int *v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  int v41;
  int *v42;
  uint64_t v43;
  int v44;
  int v45;
  _DWORD *v46;
  uint64_t v47;
  int *v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  _DWORD *v64;
  int *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  double *v86;
  void *v87;
  int v88;
  int *v89;
  double v90;
  uint64_t v91;
  int v92;
  int *v93;
  double v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  _DWORD *v100;
  void *v101;
  double *v102;
  void *v103;
  uint64_t i;
  uint64_t v105;
  void *v106[3];
  void *v107;
  void *v108;
  unsigned int v109;
  uint64_t vars8;

  v8 = *a1;
  v9 = (int *)malloc_type_malloc(4 * (int)v8, 0x100004052888210uLL);
  if ((int)v8 < a3)
  {
    fwrite("WARNING: # folds > # data. Will use # folds = # data instead (i.e., leave-one-out cross validation)\n", 0x64uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    a3 = v8;
  }
  v10 = (a3 + 1);
  v11 = (int *)malloc_type_malloc(4 * (int)v10, 0x100004052888210uLL);
  v12 = a3 >= (int)v8 || *a2 >= 2u;
  v100 = a2;
  v96 = v8;
  if (!v12)
  {
    v102 = a4;
    v109 = 0;
    v106[0] = 0;
    v107 = 0;
    v108 = 0;
    svm_group_classes(a1, (int *)&v109, &v108, v106, (int32x2_t **)&v107, (uint64_t)v9);
    v98 = (int *)malloc_type_malloc(4 * a3, 0x100004052888210uLL);
    v20 = malloc_type_malloc(4 * (int)v8, 0x100004052888210uLL);
    v21 = v20;
    if ((int)v8 >= 1)
    {
      v22 = v9;
      v23 = v20;
      v24 = v8;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    v26 = v109;
    if ((int)v109 >= 1)
    {
      v27 = 0;
      v28 = v107;
      v29 = v106[0];
      for (i = v109; i != v27; v26 = i)
      {
        if ((int)v28[v27] >= 1)
        {
          v30 = 0;
          v31 = 0;
          do
          {
            v32 = rand();
            v33 = v31 + v29[v27];
            v34 = v33 + v32 % (v30 + v28[v27]);
            v35 = v21[v34];
            v21[v34] = v21[v33];
            v21[v33] = v35;
            ++v31;
            --v30;
          }
          while (v31 < v28[v27]);
        }
        ++v27;
      }
    }
    if (a3 <= 0)
    {
      *v11 = 0;
      v38 = (a3 + 1);
      v39 = v98;
    }
    else
    {
      v36 = 0;
      v37 = (int *)v107;
      v38 = (a3 + 1);
      v39 = v98;
      do
      {
        v98[v36] = 0;
        v40 = v36 + 1;
        if ((int)v26 >= 1)
        {
          v41 = 0;
          v42 = v37;
          v43 = v26;
          do
          {
            v44 = *v42++;
            v41 += v44 * (int)v40 / a3 - v44 * (int)v36 / a3;
            v98[v36] = v41;
            --v43;
          }
          while (v43);
        }
        ++v36;
      }
      while (v40 != a3);
      v45 = 0;
      *v11 = 0;
      v46 = v11 + 1;
      v47 = (a3 + 1) - 1;
      v48 = v98;
      do
      {
        v49 = *v48++;
        v45 += v49;
        *v46++ = v45;
        --v47;
      }
      while (v47);
    }
    a4 = v102;
    v17 = v96;
    if ((int)v26 >= 1)
    {
      v50 = 0;
      v51 = v106[0];
      v52 = v107;
      do
      {
        if (a3 >= 1)
        {
          v53 = 0;
          do
          {
            v54 = v52[v50];
            v55 = v54 * (int)v53 / a3;
            v56 = v53 + 1;
            v57 = v54 * ((int)v53 + 1) / a3;
            if (v55 < v57)
            {
              v58 = v51[v50];
              v59 = v55 + v58;
              v60 = v57 + v58;
              v61 = v11[v53];
              do
              {
                v9[v61] = v21[v59];
                v61 = v11[v53] + 1;
                v11[v53] = v61;
                ++v59;
              }
              while (v59 < v60);
            }
            ++v53;
          }
          while (v56 != a3);
        }
        ++v50;
      }
      while (v50 != v26);
    }
    *v11 = 0;
    if (a3 >= 1)
    {
      v62 = 0;
      v63 = v38 - 1;
      v64 = v11 + 1;
      v65 = v39;
      do
      {
        v66 = *v65++;
        v62 += v66;
        *v64++ = v62;
        --v63;
      }
      while (v63);
    }
    free(v106[0]);
    free(v108);
    free(v107);
    free(v21);
    free(v39);
    goto LABEL_49;
  }
  if ((int)v8 >= 1)
  {
    for (j = 0; j != v8; ++j)
      v9[j] = j;
    v14 = 0;
    do
    {
      v15 = v14 + rand() % (int)v8;
      v16 = v9[v14];
      v9[v14] = v9[v15];
      v9[v15] = v16;
      ++v14;
      --v8;
    }
    while (v8);
  }
  v17 = v96;
  if ((a3 & 0x80000000) == 0)
  {
    v18 = 0;
    v19 = v11;
    do
    {
      *v19++ = v18 / a3;
      v18 += v96;
      --v10;
    }
    while (v10);
LABEL_49:
    if (a3 >= 1)
    {
      v67 = 0;
      v97 = v17;
      v99 = a3;
      do
      {
        v68 = v11[v67];
        v69 = v67 + 1;
        v70 = v11[v69];
        LODWORD(v106[0]) = v68 - v70 + v17;
        v71 = (char *)malloc_type_malloc(8 * SLODWORD(v106[0]), 0x2004093837F09uLL);
        v106[2] = v71;
        v72 = (char *)malloc_type_malloc(8 * ((int)v68 - (int)v70 + v17), 0x100004000313F17uLL);
        v106[1] = v72;
        v105 = v69;
        if ((int)v68 < 1)
        {
          v78 = 0;
        }
        else
        {
          v73 = v9;
          v74 = v71;
          v75 = v72;
          v76 = v68;
          do
          {
            v77 = *v73++;
            *v74++ = *(void *)(*((void *)a1 + 2) + 8 * v77);
            *v75++ = *(void *)(*((void *)a1 + 1) + 8 * v77);
            --v76;
          }
          while (v76);
          v78 = v68;
        }
        if ((int)v70 < v17)
        {
          v79 = v97 - v70;
          v80 = &v9[v70];
          v81 = &v72[8 * v78];
          v82 = &v71[8 * v78];
          do
          {
            v83 = *v80++;
            *(void *)v82 = *(void *)(*((void *)a1 + 2) + 8 * v83);
            v82 += 8;
            *(void *)v81 = *(void *)(*((void *)a1 + 1) + 8 * v83);
            v81 += 8;
            --v79;
          }
          while (v79);
        }
        v101 = v72;
        v103 = v71;
        v84 = svm_train(v106, v100);
        v85 = (void *)v84;
        if (v100[25] && *v100 <= 1u)
        {
          v86 = a4;
          v87 = malloc_type_malloc(8 * *(int *)(v84 + 104), 0x100004000313F17uLL);
          if ((int)v68 < (int)v70)
          {
            v88 = v70 - v68;
            v89 = &v9[(int)v68];
            do
            {
              v90 = svm_predict_probability((uint64_t)v85, *(Kernel **)(*((void *)a1 + 2) + 8 * *v89), v87);
              v91 = *v89++;
              v86[v91] = v90;
              --v88;
            }
            while (v88);
          }
          free(v87);
          a4 = v86;
          v17 = v96;
        }
        else if ((int)v68 < (int)v70)
        {
          v92 = v70 - v68;
          v93 = &v9[(int)v68];
          do
          {
            v94 = svm_predict((uint64_t)v85, *(Kernel **)(*((void *)a1 + 2) + 8 * *v93));
            v95 = *v93++;
            a4[v95] = v94;
            --v92;
          }
          while (v92);
        }
        if (v85)
        {
          svm_free_model_content((uint64_t)v85);
          free(v85);
        }
        free(v103);
        free(v101);
        v67 = v105;
      }
      while (v105 != v99);
    }
  }
  free(v11);

  free(v9);
}

char *svm_train_one(int *a1, _DWORD *a2)
{
  v4 = (char *)malloc_type_malloc(8 * *a1, 0x100004000313F17uLL);
  switch(*a2)
  {
    case 0:
      operator new[]();
    case 1:
      operator new[]();
    case 2:
      operator new[]();
    case 3:
      operator new[]();
    case 4:
      operator new[]();
    default:
      info("obj = %f, rho = %f\n", v13, v14);
      uint64_t v5 = *a1;
      if ((int)v5 >= 1)
      {
        uint64_t v6 = 0;
        int v7 = 0;
        int v8 = 0;
        uint64_t v9 = 8 * v5;
        while (1)
        {
          double v10 = *(double *)&v4[v6];
          if (v10 != 0.0)
          {
            double v11 = fabs(v10);
            ++v8;
            if (*(double *)(*((void *)a1 + 1) + v6) > 0.0)
            {
              if (v11 < v15) {
                goto LABEL_15;
              }
LABEL_14:
              ++v7;
              goto LABEL_15;
            }
            if (v11 >= v16) {
              goto LABEL_14;
            }
          }
LABEL_15:
          v6 += 8;
          if (v9 == v6) {
            goto LABEL_18;
          }
        }
      }
      int v8 = 0;
      int v7 = 0;
LABEL_18:
      info("nSV = %d, nBSV = %d\n", v8, v7);
      return v4;
  }
}

void sub_19E8F6120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void svm_group_classes(int *a1, int *a2, void *a3, void *a4, int32x2_t **a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  uint64_t v11 = *a1;
  v12 = malloc_type_malloc(0x40uLL, 0x100004052888210uLL);
  double v13 = (int32x2_t *)malloc_type_malloc(0x40uLL, 0x100004052888210uLL);
  double v14 = (int *)malloc_type_malloc(4 * v10, 0x100004052888210uLL);
  if ((int)v10 < 1)
  {
    int v16 = 0;
  }
  else
  {
    v34 = a3;
    v35 = a4;
    v36 = a5;
    uint64_t v15 = 0;
    int v16 = 0;
    int v17 = 16;
    do
    {
      int v18 = (int)*(double *)(*((void *)a1 + 1) + 8 * v15);
      if (v16 < 1)
      {
        LODWORD(v19) = 0;
      }
      else
      {
        uint64_t v19 = 0;
        while (v12[v19] != v18)
        {
          if (v16 == ++v19)
          {
            v14[v15] = v16;
            goto LABEL_11;
          }
        }
        ++v13->i32[v19];
      }
      v14[v15] = v19;
      if (v19 == v16)
      {
LABEL_11:
        if (v16 == v17)
        {
          int v17 = 2 * v16;
          v12 = malloc_type_realloc(v12, 8 * v16, 0x100004052888210uLL);
          double v13 = (int32x2_t *)malloc_type_realloc(v13, 8 * v16, 0x100004052888210uLL);
        }
        v12[v16] = v18;
        v13->i32[v16++] = 1;
      }
      ++v15;
    }
    while (v15 != v11);
    if (v16 == 2)
    {
      if (*v12 == -1 && v12[1] == 1)
      {
        *(void *)v12 = 0xFFFFFFFF00000001;
        *double v13 = vrev64_s32(*v13);
        v20 = v14;
        uint64_t v21 = v11;
        do
        {
          _DWORD *v20 = *v20 == 0;
          ++v20;
          --v21;
        }
        while (v21);
      }
      int v16 = 2;
    }
    a4 = v35;
    a5 = v36;
    a3 = v34;
  }
  v22 = malloc_type_malloc(4 * v16, 0x100004052888210uLL);
  _DWORD *v22 = 0;
  if (v16 > 1)
  {
    int v23 = 0;
    uint64_t v24 = v16 - 1;
    v25 = v22 + 1;
    v26 = v13;
    do
    {
      __int32 v27 = v26->i32[0];
      v26 = (int32x2_t *)((char *)v26 + 4);
      v23 += v27;
      *v25++ = v23;
      --v24;
    }
    while (v24);
  }
  if ((int)v11 >= 1)
  {
    for (uint64_t i = 0; i != v11; ++i)
      *(_DWORD *)(a6 + 4 * (int)v22[v14[i]]++) = i;
  }
  _DWORD *v22 = 0;
  if (v16 > 1)
  {
    int v29 = 0;
    uint64_t v30 = v16 - 1;
    v31 = v22 + 1;
    v32 = v13;
    do
    {
      __int32 v33 = v32->i32[0];
      v32 = (int32x2_t *)((char *)v32 + 4);
      v29 += v33;
      *v31++ = v29;
      --v30;
    }
    while (v30);
  }
  *a2 = v16;
  *a3 = v12;
  *a4 = v22;
  *a5 = v13;

  free(v14);
}

void svm_predict_values(svm_node *a1, Kernel *this, double *a3, const svm_parameter *a4)
{
  if ((a1->var0 - 2) > 2)
  {
    uint64_t var1_low = SLODWORD(a1[6].var1);
    uint64_t var1_high = SHIDWORD(a1[6].var1);
    uint64_t v16 = LODWORD(a1[6].var1);
    int v17 = (long double *)malloc_type_malloc(8 * var1_high, 0x100004000313F17uLL);
    uint64_t v19 = v17;
    if ((int)var1_high >= 1)
    {
      uint64_t var1_high = var1_high;
      v20 = *(const svm_node ***)&a1[7].var0;
      uint64_t v21 = v17;
      do
      {
        v22 = *v20++;
        *v21++ = Kernel::k_function(this, v22, a1, v18);
        --var1_high;
      }
      while (var1_high);
    }
    int v23 = (int *)malloc_type_malloc(4 * var1_low, 0x100004052888210uLL);
    uint64_t v24 = v23;
    *int v23 = 0;
    if ((int)var1_low > 1)
    {
      int v25 = 0;
      double var1 = a1[10].var1;
      uint64_t v27 = v16 - 1;
      v28 = v23 + 1;
      do
      {
        int v29 = **(_DWORD **)&var1;
        *(void *)&var1 += 4;
        v25 += v29;
        *v28++ = v25;
        --v27;
      }
      while (v27);
    }
    uint64_t v30 = malloc_type_malloc(4 * var1_low, 0x100004052888210uLL);
    v31 = v30;
    if ((int)v16 >= 1)
    {
      bzero(v30, 4 * var1_low);
      uint64_t v32 = 0;
      LODWORD(v33) = 0;
      uint64_t v34 = 1;
      do
      {
        uint64_t v35 = v32 + 1;
        if (v32 + 1 < var1_low)
        {
          double v36 = a1[10].var1;
          double v37 = a1[7].var1;
          uint64_t v38 = *(void *)&a1[8].var0;
          uint64_t v39 = *(void *)(*(void *)&v37 + 8 * v32);
          uint64_t v33 = (int)v33;
          uint64_t v40 = v34;
          do
          {
            uint64_t v41 = *(unsigned int *)(*(void *)&v36 + 4 * v32);
            if ((int)v41 < 1)
            {
              double v45 = 0.0;
            }
            else
            {
              uint64_t v42 = v24[v32];
              v43 = &v19[v42];
              v44 = (double *)(*(void *)(*(void *)&v37 + 8 * v40 - 8) + 8 * v42);
              double v45 = 0.0;
              do
              {
                double v46 = *v44++;
                double v47 = v46;
                double v48 = *v43++;
                double v45 = v45 + v47 * v48;
                --v41;
              }
              while (v41);
            }
            uint64_t v49 = *(unsigned int *)(*(void *)&v36 + 4 * v40);
            if ((int)v49 >= 1)
            {
              uint64_t v50 = v24[v40];
              v51 = &v19[v50];
              v52 = (double *)(v39 + 8 * v50);
              do
              {
                double v53 = *v52++;
                double v54 = v53;
                double v55 = *v51++;
                double v45 = v45 + v54 * v55;
                --v49;
              }
              while (v49);
            }
            double v56 = v45 - *(double *)(v38 + 8 * v33);
            a3[v33] = v56;
            if (v56 <= 0.0) {
              uint64_t v57 = v40;
            }
            else {
              uint64_t v57 = v32;
            }
            ++v31[v57];
            ++v33;
            ++v40;
          }
          while (v40 != var1_low);
        }
        ++v34;
        ++v32;
      }
      while (v35 != var1_low);
      if ((int)v16 >= 2)
      {
        int v58 = 0;
        uint64_t v59 = 1;
        do
        {
          if (v31[v59] > v31[v58]) {
            int v58 = v59;
          }
          ++v59;
        }
        while (var1_low != v59);
      }
    }
    free(v19);
    free(v24);
    free(v31);
  }
  else
  {
    uint64_t v7 = HIDWORD(a1[6].var1);
    if ((int)v7 < 1)
    {
      double v10 = 0.0;
    }
    else
    {
      int v8 = *(const svm_node ***)&a1[7].var0;
      uint64_t v9 = **(double ***)&a1[7].var1;
      double v10 = 0.0;
      do
      {
        double v11 = *v9++;
        double v12 = v11;
        double v13 = *v8++;
        double v10 = v10 + v12 * Kernel::k_function(this, v13, a1, a4);
        --v7;
      }
      while (v7);
    }
    *a3 = v10 - **(double **)&a1[8].var0;
  }
}

void svm_free_model_content(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 176))
  {
    if (*(int *)(a1 + 108) >= 1)
    {
      v2 = *(void ***)(a1 + 112);
      if (v2) {
        free(*v2);
      }
    }
  }
  if (*(void *)(a1 + 120) && *(int *)(a1 + 104) >= 2)
  {
    uint64_t v3 = 0;
    do
      free(*(void **)(*(void *)(a1 + 120) + 8 * v3++));
    while (v3 < *(int *)(a1 + 104) - 1);
  }
  free(*(void **)(a1 + 112));
  *(void *)(a1 + 112) = 0;
  free(*(void **)(a1 + 120));
  *(void *)(a1 + 120) = 0;
  free(*(void **)(a1 + 128));
  *(void *)(a1 + 128) = 0;
  free(*(void **)(a1 + 160));
  *(void *)(a1 + 160) = 0;
  free(*(void **)(a1 + 136));
  *(void *)(a1 + 136) = 0;
  free(*(void **)(a1 + 144));
  *(void *)(a1 + 144) = 0;
  free(*(void **)(a1 + 152));
  *(void *)(a1 + 152) = 0;
  free(*(void **)(a1 + 168));
  *(void *)(a1 + 168) = 0;
}

void SVC_Q::SVC_Q(Kernel *a1, uint64_t a2, uint64_t a3, const svm_parameter *a4)
{
}

void sub_19E8F69AC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v2, 0x10A0C408A4F435CLL);
  Kernel::~Kernel(v1);
  _Unwind_Resume(a1);
}

void SVC_Q::~SVC_Q(SVC_Q *this)
{
  *(void *)this = &unk_1EF0CE088;
  uint64_t v2 = *((void *)this + 8);
  if (v2) {
    MEMORY[0x19F3C1900](v2, 0x1000C8077774924);
  }
  uint64_t v3 = (Cache *)*((void *)this + 9);
  if (v3)
  {
    Cache::~Cache(v3);
    MEMORY[0x19F3C1920]();
  }
  uint64_t v4 = *((void *)this + 10);
  if (v4) {
    MEMORY[0x19F3C1900](v4, 0x1000C8000313F17);
  }

  Kernel::~Kernel(this);
}

{
  uint64_t vars8;

  SVC_Q::~SVC_Q(this);

  JUMPOUT(0x19F3C1920);
}

void ONE_CLASS_Q::~ONE_CLASS_Q(ONE_CLASS_Q *this)
{
  *(void *)this = &unk_1EF0CE028;
  uint64_t v2 = (Cache *)*((void *)this + 8);
  if (v2)
  {
    Cache::~Cache(v2);
    MEMORY[0x19F3C1920]();
  }
  uint64_t v3 = *((void *)this + 9);
  if (v3) {
    MEMORY[0x19F3C1900](v3, 0x1000C8000313F17);
  }

  Kernel::~Kernel(this);
}

{
  uint64_t vars8;

  ONE_CLASS_Q::~ONE_CLASS_Q(this);

  JUMPOUT(0x19F3C1920);
}

void SVR_Q::SVR_Q(Kernel *a1, uint64_t a2, uint64_t a3, const svm_parameter *a4)
{
}

void sub_19E8F6D28(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v2, 0x10A0C408A4F435CLL);
  Kernel::~Kernel(v1);
  _Unwind_Resume(a1);
}

void SVR_Q::~SVR_Q(SVR_Q *this)
{
  *(void *)this = &unk_1EF0CE0C0;
  uint64_t v2 = (Cache *)*((void *)this + 9);
  if (v2)
  {
    Cache::~Cache(v2);
    MEMORY[0x19F3C1920]();
  }
  uint64_t v3 = *((void *)this + 10);
  if (v3) {
    MEMORY[0x19F3C1900](v3, 0x1000C8077774924);
  }
  uint64_t v4 = *((void *)this + 11);
  if (v4) {
    MEMORY[0x19F3C1900](v4, 0x1000C8052888210);
  }
  uint64_t v5 = *((void *)this + 13);
  if (v5) {
    MEMORY[0x19F3C1900](v5, 0x1000C8052888210);
  }
  uint64_t v6 = *((void *)this + 14);
  if (v6) {
    MEMORY[0x19F3C1900](v6, 0x1000C8052888210);
  }
  uint64_t v7 = *((void *)this + 15);
  if (v7) {
    MEMORY[0x19F3C1900](v7, 0x1000C8000313F17);
  }

  Kernel::~Kernel(this);
}

{
  uint64_t vars8;

  SVR_Q::~SVR_Q(this);

  JUMPOUT(0x19F3C1920);
}

double SVR_Q::swap_index(SVR_Q *this, int a2, int a3)
{
  uint64_t v3 = *((void *)this + 10);
  char v4 = *(unsigned char *)(v3 + a2);
  *(unsigned char *)(v3 + a2) = *(unsigned char *)(v3 + a3);
  *(unsigned char *)(v3 + a3) = v4;
  uint64_t v5 = *((void *)this + 11);
  int v6 = *(_DWORD *)(v5 + 4 * a2);
  *(_DWORD *)(v5 + 4 * a2) = *(_DWORD *)(v5 + 4 * a3);
  *(_DWORD *)(v5 + 4 * a3) = v6;
  uint64_t v7 = *((void *)this + 15);
  double result = *(double *)(v7 + 8 * a2);
  *(void *)(v7 + 8 * a2) = *(void *)(v7 + 8 * a3);
  *(double *)(v7 + 8 * a3) = result;
  return result;
}

uint64_t SVR_Q::get_QD(SVR_Q *this)
{
  return *((void *)this + 15);
}

float *SVR_Q::get_Q(SVR_Q *this, int a2, int a3)
{
  v28 = 0;
  uint64_t v6 = *((void *)this + 11);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * a2);
  int data = Cache::get_data(*((Cache **)this + 9), *(_DWORD *)(v6 + 4 * a2), &v28, *((unsigned int *)this + 16));
  int v9 = *((_DWORD *)this + 16);
  if (data < v9 && v9 >= 1)
  {
    uint64_t v11 = 0;
    double v12 = v28;
    do
    {
      double v13 = (double (*)(void *, uint64_t, uint64_t))*((void *)this + 1);
      uint64_t v14 = *((void *)this + 2);
      uint64_t v15 = (void *)((char *)this + (v14 >> 1));
      if (v14) {
        double v13 = *(double (**)(void *, uint64_t, uint64_t))(*v15 + v13);
      }
      float v16 = v13(v15, v7, v11);
      v12[v11++] = v16;
    }
    while (v11 < *((int *)this + 16));
  }
  uint64_t v17 = *((int *)this + 24);
  double result = (float *)*((void *)this + v17 + 13);
  *((_DWORD *)this + 24) = 1 - v17;
  if (a3 >= 1)
  {
    uint64_t v19 = (char *)*((void *)this + 10);
    v20 = (int *)*((void *)this + 11);
    float v21 = (float)v19[a2];
    v22 = v28;
    uint64_t v23 = a3;
    uint64_t v24 = result;
    do
    {
      int v25 = *v19++;
      float v26 = v21 * (float)v25;
      uint64_t v27 = *v20++;
      *v24++ = v26 * v22[v27];
      --v23;
    }
    while (v23);
  }
  return result;
}

double ONE_CLASS_Q::swap_index(Cache **this, int a2, int a3)
{
  Cache::swap_index(this[8], a2, a3);
  uint64_t v6 = this[3];
  uint64_t v7 = *((void *)v6 + a2);
  *((void *)v6 + a2) = *((void *)v6 + a3);
  *((void *)v6 + a3) = v7;
  int v8 = this[4];
  if (v8)
  {
    uint64_t v9 = *((void *)v8 + a2);
    *((void *)v8 + a2) = *((void *)v8 + a3);
    *((void *)v8 + a3) = v9;
  }
  double v10 = this[9];
  double result = *((double *)v10 + a2);
  *((void *)v10 + a2) = *((void *)v10 + a3);
  *((double *)v10 + a3) = result;
  return result;
}

uint64_t ONE_CLASS_Q::get_QD(ONE_CLASS_Q *this)
{
  return *((void *)this + 9);
}

float *ONE_CLASS_Q::get_Q(Cache **this, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  uint64_t v15 = 0;
  uint64_t data = Cache::get_data(this[8], a2, &v15, a3);
  uint64_t v7 = v15;
  if ((int)data < v3)
  {
    uint64_t v8 = data;
    uint64_t v9 = &v15[(int)data];
    do
    {
      double v10 = this[1];
      uint64_t v11 = (uint64_t)this[2];
      double v12 = (Cache **)((char *)this + (v11 >> 1));
      if (v11) {
        double v10 = *(Cache **)(*v12 + v10);
      }
      float v13 = ((double (*)(void *, uint64_t, uint64_t))v10)(v12, a2, v8);
      *v9++ = v13;
      uint64_t v8 = (v8 + 1);
    }
    while (v3 != v8);
  }
  return v7;
}

double SVC_Q::swap_index(Cache **this, int a2, int a3)
{
  Cache::swap_index(this[9], a2, a3);
  uint64_t v6 = this[3];
  uint64_t v7 = *((void *)v6 + a2);
  *((void *)v6 + a2) = *((void *)v6 + a3);
  *((void *)v6 + a3) = v7;
  uint64_t v8 = this[4];
  if (v8)
  {
    uint64_t v9 = *((void *)v8 + a2);
    *((void *)v8 + a2) = *((void *)v8 + a3);
    *((void *)v8 + a3) = v9;
  }
  double v10 = this[8];
  char v11 = *((unsigned char *)v10 + a2);
  *((unsigned char *)v10 + a2) = *((unsigned char *)v10 + a3);
  *((unsigned char *)v10 + a3) = v11;
  double v12 = this[10];
  double result = *((double *)v12 + a2);
  *((void *)v12 + a2) = *((void *)v12 + a3);
  *((double *)v12 + a3) = result;
  return result;
}

uint64_t SVC_Q::get_QD(SVC_Q *this)
{
  return *((void *)this + 10);
}

float *SVC_Q::get_Q(Cache **this, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  uint64_t v17 = 0;
  int data = Cache::get_data(this[9], a2, &v17, a3);
  uint64_t v7 = v17;
  if (data < v3)
  {
    uint64_t v8 = data;
    do
    {
      uint64_t v9 = this[8];
      int v10 = *((char *)v9 + (int)a2);
      int v11 = *((char *)v9 + v8);
      double v12 = this[1];
      uint64_t v13 = (uint64_t)this[2];
      uint64_t v14 = (Cache **)((char *)this + (v13 >> 1));
      if (v13) {
        double v12 = *(Cache **)(*v14 + v12);
      }
      float v15 = ((double (*)(void *, uint64_t, uint64_t))v12)(v14, a2, v8) * (double)(v11 * v10);
      v7[v8++] = v15;
    }
    while (v3 != v8);
  }
  return v7;
}

double svm_predict_probability(uint64_t a1, Kernel *a2, void *a3)
{
  uint64_t v4 = a1;
  if (*(_DWORD *)a1 <= 1u && *(void *)(a1 + 136) && *(void *)(a1 + 144))
  {
    uint64_t v6 = *(int *)(a1 + 104);
    v78 = (double *)malloc_type_malloc(8 * (((int)v6 - 1) * (int)v6 / 2), 0x100004000313F17uLL);
    svm_predict_values((svm_node *)v4, a2, v78, v7);
    size_t v8 = 8 * v6;
    uint64_t v9 = (void **)malloc_type_malloc(8 * v6, 0x80040B8603338uLL);
    uint64_t v10 = v6;
    uint64_t v83 = v6;
    uint64_t size = 8 * v6;
    if ((int)v6 < 1) {
      goto LABEL_21;
    }
    uint64_t v11 = 0;
    do
      v9[v11++] = malloc_type_malloc(v8, 0x100004000313F17uLL);
    while (v10 != v11);
    uint64_t v12 = 0;
    int v13 = 0;
    uint64_t v14 = v10 - 1;
    float v15 = v9 + 1;
    uint64_t v16 = 8;
    v76 = v9;
    uint64_t v77 = v4;
    do
    {
      uint64_t v17 = v12 + 1;
      if (v12 + 1 < v83)
      {
        uint64_t v81 = v16;
        uint64_t v18 = 0;
        uint64_t v19 = v9[v12];
        int v80 = v13;
        uint64_t v20 = *(void *)(v4 + 136);
        uint64_t v21 = *(void *)(v4 + 144) + 8 * v13;
        uint64_t v22 = v20 + 8 * v13;
        uint64_t v23 = &v78[v13];
        uint64_t v24 = (uint64_t)v19 + v16;
        do
        {
          double v25 = *(double *)(v21 + 8 * v18) + v23[v18] * *(double *)(v22 + 8 * v18);
          if (v25 >= 0.0)
          {
            double v26 = exp(-v25);
            double v27 = v26;
          }
          else
          {
            double v26 = exp(v25);
            double v27 = 1.0;
          }
          double v28 = fmin(fmax(v27 / (v26 + 1.0), 0.0000001), 0.9999999);
          *(double *)(v24 + 8 * v18) = v28;
          *(double *)(v15[v18++] + 8 * v12) = 1.0 - v28;
        }
        while (v14 != v18);
        uint64_t v17 = v12 + 1;
        int v13 = v80 + v18;
        uint64_t v9 = v76;
        uint64_t v4 = v77;
        uint64_t v16 = v81;
      }
      --v14;
      ++v15;
      v16 += 8;
      uint64_t v12 = v17;
    }
    while (v17 != v10);
    size_t v8 = size;
    if (v10 == 2)
    {
      int v29 = v9[1];
      *a3 = *((void *)*v9 + 1);
      a3[1] = *v29;
      uint64_t v30 = v10;
    }
    else
    {
LABEL_21:
      if ((int)v10 <= 100) {
        int v32 = 100;
      }
      else {
        int v32 = v10;
      }
      int v82 = v32;
      uint64_t v33 = (void **)malloc_type_malloc(v8, 0x80040B8603338uLL);
      uint64_t v34 = malloc_type_malloc(v8, 0x100004000313F17uLL);
      double v35 = (double)(int)v10;
      if ((int)v10 > 0)
      {
        uint64_t v36 = 0;
        double v37 = (uint64_t *)(v9 + 1);
        uint64_t v38 = 1;
        uint64_t v39 = 1;
        do
        {
          *(double *)&a3[v36] = 1.0 / v35;
          uint64_t v40 = malloc_type_malloc(size, 0x100004000313F17uLL);
          v33[v36] = v40;
          v40[v36] = 0;
          if (v36)
          {
            for (uint64_t i = 0; i != v36; ++i)
            {
              double v42 = *((double *)v9[i] + v36);
              *(double *)&v40[v36] = *(double *)&v40[v36] + v42 * v42;
              v40[i] = *((void *)v33[i] + v36);
            }
          }
          uint64_t v43 = v36 + 1;
          if (v36 + 1 < v83)
          {
            v44 = (double *)&v40[v39];
            double v45 = (double *)((char *)v9[v36] + v39 * 8);
            double v46 = v37;
            uint64_t v47 = v10;
            do
            {
              uint64_t v48 = *v46++;
              *(double *)&v40[v36] = *(double *)&v40[v36] + *(double *)(v48 + 8 * v36) * *(double *)(v48 + 8 * v36);
              double v49 = *(double *)(v48 + 8 * v36);
              double v50 = *v45++;
              *v44++ = -(v49 * v50);
              --v47;
            }
            while (v38 != v47);
          }
          ++v38;
          ++v39;
          ++v37;
          ++v36;
        }
        while (v43 != v10);
      }
      int v51 = 0;
      double v52 = 0.005 / v35;
      do
      {
        if ((int)v10 < 1)
        {
          if (v52 > 0.0) {
            goto LABEL_55;
          }
        }
        else
        {
          uint64_t v53 = 0;
          double v54 = 0.0;
          do
          {
            uint64_t v55 = 0;
            v34[v53] = 0;
            double v56 = (double *)v33[v53];
            double v57 = 0.0;
            do
            {
              double v57 = v57 + v56[v55] * *(double *)&a3[v55];
              *(double *)&v34[v53] = v57;
              ++v55;
            }
            while (v10 != v55);
            double v54 = v54 + *(double *)&a3[v53++] * v57;
          }
          while (v53 != v10);
          uint64_t v58 = 0;
          double v59 = 0.0;
          do
          {
            double v60 = vabdd_f64(*(double *)&v34[v58], v54);
            if (v60 > v59) {
              double v59 = v60;
            }
            ++v58;
          }
          while (v10 != v58);
          if (v59 < v52) {
            goto LABEL_52;
          }
          for (uint64_t j = 0; j != v10; ++j)
          {
            uint64_t v62 = 0;
            v63 = (double *)v33[j];
            double v64 = (v54 - *(double *)&v34[j]) / v63[j];
            *(double *)&a3[j] = *(double *)&a3[j] + v64;
            double v65 = v63[j];
            double v66 = *(double *)&v34[j] + *(double *)&v34[j];
            double v67 = v64 + 1.0;
            do
            {
              *(double *)&v34[v62] = (*(double *)&v34[v62] + v64 * v63[v62]) / v67;
              *(double *)&a3[v62] = *(double *)&a3[v62] / v67;
              ++v62;
            }
            while (v10 != v62);
            double v54 = (v54 + v64 * (v66 + v64 * v65)) / v67 / v67;
          }
        }
        ++v51;
      }
      while (v51 != v82);
      info("Exceeds max_iter in multiclass_prob\n", 1.0);
LABEL_52:
      if ((int)v10 >= 1)
      {
        v68 = v33;
        uint64_t v69 = v10;
        do
        {
          v70 = *v68++;
          free(v70);
          --v69;
        }
        while (v69);
      }
LABEL_55:
      free(v33);
      free(v34);
      if ((int)v10 <= 1)
      {
        uint64_t v73 = 0;
LABEL_63:
        if ((int)v10 >= 1)
        {
          v74 = v9;
          do
          {
            v75 = *v74++;
            free(v75);
            --v10;
          }
          while (v10);
        }
        free(v78);
        free(v9);
        return (double)*(int *)(*(void *)(v4 + 160) + 4 * v73);
      }
      uint64_t v30 = v83;
    }
    int v71 = 0;
    uint64_t v72 = 1;
    do
    {
      if (*(double *)&a3[v72] > *(double *)&a3[v71]) {
        int v71 = v72;
      }
      ++v72;
    }
    while (v30 != v72);
    uint64_t v73 = v71;
    goto LABEL_63;
  }

  return svm_predict(a1, a2);
}

double svm_predict(uint64_t a1, Kernel *a2)
{
  if ((*(_DWORD *)a1 - 2) > 2) {
    size_t v4 = 8 * ((*(_DWORD *)(a1 + 104) - 1) * *(_DWORD *)(a1 + 104) / 2);
  }
  else {
    size_t v4 = 8;
  }
  uint64_t v5 = (double *)malloc_type_malloc(v4, 0x100004000313F17uLL);
  svm_predict_values((svm_node *)a1, a2, v5, v6);
  double v8 = v7;
  free(v5);
  return v8;
}

uint64_t svm_get_nr_class(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

void svm_free_and_destroy_model(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      svm_free_model_content((uint64_t)v2);
      free(*a1);
      *a1 = 0;
    }
  }
}

uint64_t svm_get_svm_type(unsigned int *a1)
{
  return *a1;
}

uint64_t svm_get_labels(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 160);
  if (v2 && *(int *)(result + 104) >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      *(_DWORD *)(a2 + 4 * v3) = *(_DWORD *)(v2 + 4 * v3);
      ++v3;
    }
    while (v3 < *(int *)(result + 104));
  }
  return result;
}

uint64_t svm_get_sv_indices(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 152);
  if (v2 && *(int *)(result + 108) >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      *(_DWORD *)(a2 + 4 * v3) = *(_DWORD *)(v2 + 4 * v3);
      ++v3;
    }
    while (v3 < *(int *)(result + 108));
  }
  return result;
}

uint64_t svm_get_nr_sv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

double svm_get_svr_probability(uint64_t a1)
{
  if ((*(_DWORD *)a1 - 3) <= 1)
  {
    uint64_t v1 = *(void *)(a1 + 136);
    if (v1) {
      return *(double *)v1;
    }
  }
  fwrite("Model doesn't contain information for SVR probability inference\n", 0x40uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  return 0.0;
}

uint64_t svm_save_model(const char *a1, double *a2)
{
  uint64_t v3 = fopen(a1, "w");
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  size_t v4 = v3;
  uint64_t v5 = setlocale(0, 0);
  if (v5) {
    double v28 = strdup(v5);
  }
  else {
    double v28 = 0;
  }
  setlocale(0, "C");
  fprintf(v4, "svm_type %s\n", svm_type_table[*(int *)a2]);
  fprintf(v4, "kernel_type %s\n", kernel_type_table[*((int *)a2 + 1)]);
  int v6 = *((_DWORD *)a2 + 1);
  if (v6 == 1)
  {
    fprintf(v4, "degree %d\n", *((_DWORD *)a2 + 2));
    int v6 = *((_DWORD *)a2 + 1);
  }
  if ((v6 - 1) <= 2)
  {
    fprintf(v4, "gamma %g\n", a2[2]);
    int v6 = *((_DWORD *)a2 + 1);
  }
  if ((v6 | 2) == 3) {
    fprintf(v4, "coef0 %g\n", a2[3]);
  }
  uint64_t v8 = *((unsigned int *)a2 + 26);
  uint64_t v7 = *((unsigned int *)a2 + 27);
  fprintf(v4, "nr_class %d\n", *((_DWORD *)a2 + 26));
  uint64_t v29 = v7;
  fprintf(v4, "total_sv %d\n", v7);
  fwrite("rho", 3uLL, 1uLL, v4);
  int v9 = (v8 - 1) * v8;
  if (v9 >= 0) {
    int v10 = (v8 - 1) * v8;
  }
  else {
    int v10 = v9 + 1;
  }
  uint64_t v11 = (v10 >> 1);
  if (v9 >= 2)
  {
    uint64_t v12 = 0;
    do
      fprintf(v4, " %g", *(double *)(*((void *)a2 + 16) + 8 * v12++));
    while (v11 != v12);
  }
  fputc(10, v4);
  if (*((void *)a2 + 20))
  {
    fwrite("label", 5uLL, 1uLL, v4);
    if ((int)v8 >= 1)
    {
      uint64_t v13 = 0;
      do
      {
        fprintf(v4, " %d", *(_DWORD *)(*((void *)a2 + 20) + v13));
        v13 += 4;
      }
      while (4 * v8 != v13);
    }
    fputc(10, v4);
  }
  if (*((void *)a2 + 17))
  {
    fwrite("probA", 5uLL, 1uLL, v4);
    if (v9 >= 2)
    {
      uint64_t v14 = 0;
      do
        fprintf(v4, " %g", *(double *)(*((void *)a2 + 17) + 8 * v14++));
      while (v11 != v14);
    }
    fputc(10, v4);
  }
  if (*((void *)a2 + 18))
  {
    fwrite("probB", 5uLL, 1uLL, v4);
    if (v9 >= 2)
    {
      uint64_t v15 = 0;
      do
        fprintf(v4, " %g", *(double *)(*((void *)a2 + 18) + 8 * v15++));
      while (v11 != v15);
    }
    fputc(10, v4);
  }
  if (*((void *)a2 + 21))
  {
    fwrite("nr_sv", 5uLL, 1uLL, v4);
    if ((int)v8 >= 1)
    {
      uint64_t v16 = 0;
      do
      {
        fprintf(v4, " %d", *(_DWORD *)(*((void *)a2 + 21) + v16));
        v16 += 4;
      }
      while (4 * v8 != v16);
    }
    fputc(10, v4);
  }
  fwrite("SV\n", 3uLL, 1uLL, v4);
  if ((int)v29 >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v19 = *((void *)a2 + 14);
    uint64_t v18 = (uint64_t *)*((void *)a2 + 15);
    do
    {
      uint64_t v20 = v18;
      uint64_t v21 = (v8 - 1);
      if ((int)v8 >= 2)
      {
        do
        {
          uint64_t v22 = *v20++;
          fprintf(v4, "%.16g ", *(double *)(v22 + 8 * v17));
          --v21;
        }
        while (v21);
      }
      uint64_t v23 = *(double **)(v19 + 8 * v17);
      if (*((_DWORD *)a2 + 1) == 4)
      {
        fprintf(v4, "0:%d ", (int)v23[1]);
      }
      else
      {
        int v24 = *(_DWORD *)v23;
        if (*(_DWORD *)v23 != -1)
        {
          double v25 = v23 + 2;
          do
          {
            fprintf(v4, "%d:%.8g ", v24, *(v25 - 1));
            int v26 = *(_DWORD *)v25;
            v25 += 2;
            int v24 = v26;
          }
          while (v26 != -1);
        }
      }
      fputc(10, v4);
      ++v17;
    }
    while (v17 != v29);
  }
  setlocale(0, v28);
  free(v28);
  if (ferror(v4)) {
    return 0xFFFFFFFFLL;
  }
  if (fclose(v4)) {
    return 0xFFFFFFFFLL;
  }
  return 0;
}

char *svm_load_model(const char *a1)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = fopen(a1, "rb");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = setlocale(0, 0);
  if (v3) {
    double v64 = strdup(v3);
  }
  else {
    double v64 = 0;
  }
  setlocale(0, "C");
  size_t v4 = (char *)malloc_type_malloc(0xB8uLL, 0x109004003BC950CuLL);
  *((_OWORD *)v4 + 8) = 0u;
  uint64_t v5 = (void **)(v4 + 128);
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_DWORD *)v4 + 14) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 9) = 0;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
LABEL_6:
                if (fscanf(v2, "%80s", __s2) != 1) {
                  goto LABEL_97;
                }
                if (!(*(void *)__s2 ^ 0x657079745F6D7673 | v66))
                {
                  if (fscanf(v2, "%80s", __s2) == 1)
                  {
                    for (uint64_t i = 0; i != 5; ++i)
                    {
                      if (!strcmp(svm_type_table[i], __s2))
                      {
                        *(_DWORD *)size_t v4 = i;
                        goto LABEL_6;
                      }
                    }
                    double v35 = (FILE *)*MEMORY[0x1E4F143C8];
                    uint64_t v36 = "unknown svm type.\n";
                    size_t v37 = 18;
LABEL_96:
                    fwrite(v36, v37, 1uLL, v35);
                  }
                  goto LABEL_97;
                }
                if (*(void *)__s2 != 0x745F6C656E72656BLL || v66 != 6647929) {
                  break;
                }
                if (fscanf(v2, "%80s", __s2) != 1) {
                  goto LABEL_97;
                }
                uint64_t v18 = 0;
                while (strcmp(kernel_type_table[v18], __s2))
                {
                  if (++v18 == 5)
                  {
                    double v35 = (FILE *)*MEMORY[0x1E4F143C8];
                    uint64_t v36 = "unknown kernel function.\n";
                    size_t v37 = 25;
                    goto LABEL_96;
                  }
                }
                *((_DWORD *)v4 + 1) = v18;
              }
              if (*(_DWORD *)__s2 != 1919378788 || *(_DWORD *)&__s2[3] != 6645106)
              {
                BOOL v8 = *(_DWORD *)__s2 == 1835884903 && *(unsigned __int16 *)&__s2[4] == 97;
                if (v8 || (*(_DWORD *)__s2 == 1717923683 ? (BOOL v9 = *(unsigned __int16 *)&__s2[4] == 48) : (BOOL v9 = 0), v9))
                {
                  int v19 = fscanf(v2, "%lf");
                  goto LABEL_63;
                }
                if (*(void *)__s2 ^ 0x7373616C635F726ELL | v66
                  && *(void *)__s2 ^ 0x76735F6C61746F74 | v66)
                {
                  break;
                }
              }
              int v19 = fscanf(v2, "%d");
LABEL_63:
              if (v19 != 1) {
                goto LABEL_97;
              }
            }
            if (*(_DWORD *)__s2 != 7301234) {
              break;
            }
            double v60 = v4 + 104;
            int v20 = (*v60 - 1) * *v60;
            if (v20 >= 0) {
              int v21 = (*v60 - 1) * *v60;
            }
            else {
              int v21 = v20 + 1;
            }
            uint64_t v22 = (v21 >> 1);
            *uint64_t v5 = malloc_type_malloc(8 * (int)v22, 0x100004000313F17uLL);
            if (v20 >= 2)
            {
              uint64_t v23 = 0;
              while (fscanf(v2, "%lf", (char *)*v5 + v23) == 1)
              {
                v23 += 8;
                if (!--v22) {
                  goto LABEL_6;
                }
              }
              goto LABEL_97;
            }
          }
          if (*(_DWORD *)__s2 != 1700946284 || *(unsigned __int16 *)&__s2[4] != 108) {
            break;
          }
          uint64_t v24 = *((int *)v4 + 26);
          *((void *)v4 + 20) = malloc_type_malloc(4 * v24, 0x100004052888210uLL);
          if ((int)v24 >= 1)
          {
            uint64_t v25 = 0;
            uint64_t v26 = 4 * v24;
            while (fscanf(v2, "%d", *((void *)v4 + 20) + v25) == 1)
            {
              v25 += 4;
              if (v26 == v25) {
                goto LABEL_6;
              }
            }
            goto LABEL_97;
          }
        }
        if (*(_DWORD *)__s2 != 1651470960 || *(unsigned __int16 *)&__s2[4] != 65) {
          break;
        }
        int v27 = (*((_DWORD *)v4 + 26) - 1) * *((_DWORD *)v4 + 26);
        if (v27 >= 0) {
          int v28 = (*((_DWORD *)v4 + 26) - 1) * *((_DWORD *)v4 + 26);
        }
        else {
          int v28 = v27 + 1;
        }
        uint64_t v29 = (v28 >> 1);
        *((void *)v4 + 17) = malloc_type_malloc(8 * (int)v29, 0x100004000313F17uLL);
        if (v27 >= 2)
        {
          uint64_t v30 = 0;
          while (fscanf(v2, "%lf", *((void *)v4 + 17) + v30) == 1)
          {
            v30 += 8;
            if (!--v29) {
              goto LABEL_6;
            }
          }
          goto LABEL_97;
        }
      }
      if (*(_DWORD *)__s2 != 1651470960 || *(unsigned __int16 *)&__s2[4] != 66) {
        break;
      }
      int v31 = (*((_DWORD *)v4 + 26) - 1) * *((_DWORD *)v4 + 26);
      if (v31 >= 0) {
        int v32 = (*((_DWORD *)v4 + 26) - 1) * *((_DWORD *)v4 + 26);
      }
      else {
        int v32 = v31 + 1;
      }
      uint64_t v33 = (v32 >> 1);
      *((void *)v4 + 18) = malloc_type_malloc(8 * (int)v33, 0x100004000313F17uLL);
      if (v31 >= 2)
      {
        uint64_t v34 = 0;
        while (fscanf(v2, "%lf", *((void *)v4 + 18) + v34) == 1)
        {
          v34 += 8;
          if (!--v33) {
            goto LABEL_6;
          }
        }
        goto LABEL_97;
      }
    }
    if (*(_DWORD *)__s2 != 1935635054 || *(unsigned __int16 *)&__s2[4] != 118) {
      break;
    }
    uint64_t v14 = *((int *)v4 + 26);
    *((void *)v4 + 21) = malloc_type_malloc(4 * v14, 0x100004052888210uLL);
    if ((int)v14 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 4 * v14;
      while (fscanf(v2, "%d", *((void *)v4 + 21) + v15) == 1)
      {
        v15 += 4;
        if (v16 == v15) {
          goto LABEL_6;
        }
      }
      goto LABEL_97;
    }
  }
  if (*(unsigned __int16 *)__s2 ^ 0x5653 | __s2[2])
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "unknown text in model file: [%s]\n", __s2);
LABEL_97:
    fwrite("ERROR: fscanf failed to read model\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    setlocale(0, v64);
    free(v64);
    free(*((void **)v4 + 16));
    free(*((void **)v4 + 20));
    free(*((void **)v4 + 21));
    free(v4);
    return 0;
  }
  do
    int v39 = getc(v2);
  while (v39 != -1 && v39 != 10);
  uint64_t v40 = MEMORY[0x19F3C2770](v2);
  max_line_len = 1024;
  int v41 = 0;
  line = (uint64_t)malloc_type_malloc(0x400uLL, 0x100004077774924uLL);
  *(void *)__s2 = 0;
  while (readline(v2))
  {
    strtok((char *)line, ":");
    --v41;
    do
      ++v41;
    while (strtok(0, ":"));
  }
  int v42 = *((_DWORD *)v4 + 27);
  fseek(v2, v40, 0);
  int v43 = *((_DWORD *)v4 + 26);
  uint64_t v44 = *((int *)v4 + 27);
  unsigned int v45 = v43 - 1;
  uint64_t v63 = *((unsigned int *)v4 + 27);
  *((void *)v4 + 15) = malloc_type_malloc(8 * (v43 - 1), 0x80040B8603338uLL);
  size_t v46 = 8 * v44;
  int v62 = v43;
  if (v43 > 1)
  {
    uint64_t v47 = 0;
    do
    {
      *(void *)(*((void *)v4 + 15) + v47) = malloc_type_malloc(v46, 0x100004000313F17uLL);
      v47 += 8;
    }
    while (8 * (v43 - 1) != v47);
  }
  *((void *)v4 + 14) = malloc_type_malloc(v46, 0x2004093837F09uLL);
  if ((int)v63 >= 1)
  {
    uint64_t v48 = (char *)malloc_type_malloc(16 * (v42 + v41), 0x1000040F7F8B94BuLL);
    uint64_t v49 = 0;
    int v50 = 0;
    v61 = v48 + 8;
    do
    {
      readline(v2);
      int v51 = v48;
      *(void *)(*((void *)v4 + 14) + 8 * v49) = &v48[16 * v50];
      double v52 = strtok((char *)line, " \t");
      *(double *)(**((void **)v4 + 15) + 8 * v49) = strtod(v52, (char **)__s2);
      if (v62 >= 3)
      {
        uint64_t v53 = 8;
        do
        {
          double v54 = strtok(0, " \t");
          *(double *)(*(void *)(*((void *)v4 + 15) + v53) + 8 * v49) = strtod(v54, (char **)__s2);
          v53 += 8;
        }
        while (8 * v45 != v53);
      }
      int v55 = v50;
      double v56 = (double *)&v61[16 * v50];
      uint64_t v48 = v51;
      while (1)
      {
        double v57 = strtok(0, ":");
        uint64_t v58 = strtok(0, " \t");
        if (!v58) {
          break;
        }
        double v59 = v58;
        *((_DWORD *)v56 - 2) = strtol(v57, (char **)__s2, 10);
        *double v56 = strtod(v59, (char **)__s2);
        v56 += 2;
        ++v55;
      }
      int v50 = v55 + 1;
      *(_DWORD *)&v48[16 * v55] = -1;
      ++v49;
    }
    while (v49 != v63);
  }
  free((void *)line);
  setlocale(0, v64);
  free(v64);
  if (!ferror(v2) && !fclose(v2))
  {
    *((_DWORD *)v4 + 44) = 1;
    return v4;
  }
  return 0;
}

void *readline(__sFILE *a1)
{
  if (!fgets((char *)line, max_line_len, a1)) {
    return 0;
  }
  while (1)
  {
    uint64_t v2 = (void *)line;
    if (strrchr((char *)line, 10)) {
      break;
    }
    size_t v3 = 2 * max_line_len;
    max_line_len *= 2;
    line = (uint64_t)malloc_type_realloc(v2, v3, 0x2BFDA227uLL);
    int v4 = strlen((const char *)line);
    if (!fgets((char *)(line + v4), max_line_len - v4, a1)) {
      return (void *)line;
    }
  }
  return v2;
}

void svm_destroy_param(uint64_t a1)
{
  free(*(void **)(a1 + 64));
  uint64_t v2 = *(void **)(a1 + 72);

  free(v2);
}

const char *svm_check_parameter(unsigned int *a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 > 4u) {
    return "unknown svm type";
  }
  if (*(_DWORD *)(a2 + 4) > 4u) {
    return "unknown kernel type";
  }
  if (*(double *)(a2 + 16) < 0.0) {
    return "gamma < 0";
  }
  if ((*(_DWORD *)(a2 + 8) & 0x80000000) != 0) {
    return "degree of polynomial kernel < 0";
  }
  if (*(double *)(a2 + 32) <= 0.0) {
    return "cache_size <= 0";
  }
  if (*(double *)(a2 + 40) <= 0.0) {
    return "eps <= 0";
  }
  if (v2 <= 4 && ((1 << v2) & 0x19) != 0 && *(double *)(a2 + 48) <= 0.0) {
    return "C <= 0";
  }
  if (v2 - 1 < 2) {
    goto LABEL_16;
  }
  if (v2 == 3)
  {
LABEL_19:
    if (*(double *)(a2 + 88) < 0.0) {
      return "p < 0";
    }
    goto LABEL_25;
  }
  if (v2 == 4)
  {
LABEL_16:
    double v6 = *(double *)(a2 + 80);
    double result = "nu <= 0 or nu > 1";
    if (v6 <= 0.0 || v6 > 1.0) {
      return result;
    }
    if (v2 == 3) {
      goto LABEL_19;
    }
  }
LABEL_25:
  if (*(_DWORD *)(a2 + 96) > 1u) {
    return "shrinking != 0 and shrinking != 1";
  }
  unsigned int v7 = *(_DWORD *)(a2 + 100);
  if (v7 > 1) {
    return "probability != 0 and probability != 1";
  }
  if (v7 == 1 && v2 == 2) {
    double result = "one-class SVM probability output not supported yet";
  }
  else {
    double result = 0;
  }
  if (v2 == 1)
  {
    uint64_t v9 = *a1;
    int v10 = malloc_type_malloc(0x40uLL, 0x100004052888210uLL);
    uint64_t v11 = (int *)malloc_type_malloc(0x40uLL, 0x100004052888210uLL);
    if ((int)v9 < 1) {
      goto LABEL_57;
    }
    uint64_t v12 = 0;
    int v13 = 0;
    int v14 = 16;
    do
    {
      int v15 = (int)*(double *)(*((void *)a1 + 1) + 8 * v12);
      if (v13 < 1)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        uint64_t v16 = 0;
        while (v10[v16] != v15)
        {
          if (v13 == ++v16) {
            goto LABEL_44;
          }
        }
        ++v11[v16];
      }
      if (v16 == v13)
      {
LABEL_44:
        if (v13 == v14)
        {
          int v14 = 2 * v13;
          int v10 = malloc_type_realloc(v10, 8 * v13, 0x100004052888210uLL);
          uint64_t v11 = (int *)malloc_type_realloc(v11, 8 * v13, 0x100004052888210uLL);
        }
        v10[v13] = v15;
        v11[v13++] = 1;
      }
      ++v12;
    }
    while (v12 != v9);
    if (v13 < 1)
    {
LABEL_57:
      free(v10);
      free(v11);
      return 0;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = v11 + 1;
      uint64_t v19 = 1;
      while (1)
      {
        uint64_t v20 = v17 + 1;
        if (v17 + 1 < (unint64_t)v13) {
          break;
        }
LABEL_56:
        ++v19;
        ++v18;
        uint64_t v17 = v20;
        if (v20 == v13) {
          goto LABEL_57;
        }
      }
      int v21 = v11[v17];
      uint64_t v22 = v13;
      uint64_t v23 = v18;
      while (1)
      {
        int v25 = *v23++;
        int v24 = v25;
        double v26 = *(double *)(a2 + 80) * (double)(v25 + v21) * 0.5;
        if (v21 < v25) {
          int v24 = v21;
        }
        if (v26 > (double)v24) {
          break;
        }
        if (v19 == --v22) {
          goto LABEL_56;
        }
      }
      free(v10);
      free(v11);
      return "specified nu is infeasible";
    }
  }
  return result;
}

BOOL svm_check_probability_model(uint64_t a1)
{
  if (*(_DWORD *)a1 > 1u)
  {
    if ((*(_DWORD *)a1 - 3) <= 1) {
      return *(void *)(a1 + 136) != 0;
    }
  }
  else if (*(void *)(a1 + 136) && *(void *)(a1 + 144))
  {
    return 1;
  }
  return 0;
}

uint64_t (*svm_set_print_string_function(uint64_t (*result)(const char *)))(const char *)
{
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = print_string_stdout;
  }
  svm_print_string = v1;
  return result;
}

void std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor(v4 - 32);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1EF0E5E50[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__init_with_size[abi:ne180100]<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>*,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 59) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    double v6 = (void *)result;
    double result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(a4);
    uint64_t v7 = result;
    *double v6 = result;
    v6[1] = result;
    v6[2] = result + 32 * v8;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        double result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::__copy_constructor(v7 + v9, a2 + v9);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      v7 += v9;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_19E8F8FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EF0E5EE0[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 24) = v3;
  }
  return a1;
}

void sub_19E8F906C(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS11_EEEDcST_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS11_EEEDcST_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS11_EEEDcST_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS11_EEEDcST_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

void sub_19E8F91FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8F928C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_19E8F9374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F0] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA340], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

id std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>(uint64_t a1, uint64_t *a2)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  long long v3 = [NSString stringWithUTF8String:"Type"];
  v10[0] = v3;
  char v4 = [NSString stringWithUTF8String:"SubModel"];
  v11[0] = v4;
  char v5 = [NSString stringWithUTF8String:"Name"];
  v10[1] = v5;
  if (*((char *)a2 + 23) >= 0) {
    double v6 = a2;
  }
  else {
    double v6 = (uint64_t *)*a2;
  }
  uint64_t v7 = [NSString stringWithUTF8String:v6];
  v11[1] = v7;
  uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:2];

  return v8;
}

void sub_19E8F9504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>()
{
  v5[1] = *MEMORY[0x1E4F143B8];
  v0 = [NSString stringWithUTF8String:"Type"];
  char v4 = v0;
  uint64_t v1 = [NSString stringWithUTF8String:"Pipeline"];
  v5[0] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:&v4 count:1];

  return v2;
}

void sub_19E8F9610(_Unwind_Exception *a1)
{
  long long v3 = v2;

  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>(uint64_t a1, uint64_t *a2)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  long long v3 = [NSString stringWithUTF8String:"Type"];
  v10[0] = v3;
  char v4 = [NSString stringWithUTF8String:"Layer"];
  v11[0] = v4;
  char v5 = [NSString stringWithUTF8String:"Name"];
  v10[1] = v5;
  if (*((char *)a2 + 23) >= 0) {
    double v6 = a2;
  }
  else {
    double v6 = (uint64_t *)*a2;
  }
  uint64_t v7 = [NSString stringWithUTF8String:v6];
  v11[1] = v7;
  uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:2];

  return v8;
}

void sub_19E8F975C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>()
{
  v5[1] = *MEMORY[0x1E4F143B8];
  v0 = [NSString stringWithUTF8String:"Type"];
  char v4 = v0;
  uint64_t v1 = [NSString stringWithUTF8String:"NeuralNetwork"];
  v5[0] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:&v4 count:1];

  return v2;
}

void sub_19E8F9868(_Unwind_Exception *a1)
{
  long long v3 = v2;

  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>(uint64_t a1, uint64_t *a2)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  long long v3 = [NSString stringWithUTF8String:"Type"];
  v10[0] = v3;
  char v4 = [NSString stringWithUTF8String:"Operation"];
  v11[0] = v4;
  char v5 = [NSString stringWithUTF8String:"Output"];
  v10[1] = v5;
  if (*((char *)a2 + 23) >= 0) {
    double v6 = a2;
  }
  else {
    double v6 = (uint64_t *)*a2;
  }
  uint64_t v7 = [NSString stringWithUTF8String:v6];
  v11[1] = v7;
  uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:2];

  return v8;
}

void sub_19E8F99B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>(uint64_t a1, void *a2)
{
  void v10[2] = *MEMORY[0x1E4F143B8];
  long long v3 = [NSString stringWithUTF8String:"Type"];
  v9[0] = v3;
  char v4 = [NSString stringWithUTF8String:"Block"];
  v10[0] = v4;
  char v5 = [NSString stringWithUTF8String:"Index"];
  v9[1] = v5;
  double v6 = [NSNumber numberWithLongLong:*a2];
  v10[1] = v6;
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:v9 count:2];

  return v7;
}

void sub_19E8F9B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>(uint64_t a1, uint64_t *a2)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  long long v3 = [NSString stringWithUTF8String:"Type"];
  v10[0] = v3;
  char v4 = [NSString stringWithUTF8String:"Function"];
  v11[0] = v4;
  char v5 = [NSString stringWithUTF8String:"Name"];
  v10[1] = v5;
  if (*((char *)a2 + 23) >= 0) {
    double v6 = a2;
  }
  else {
    double v6 = (uint64_t *)*a2;
  }
  uint64_t v7 = [NSString stringWithUTF8String:v6];
  v11[1] = v7;
  uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:2];

  return v8;
}

void sub_19E8F9C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>()
{
  v5[1] = *MEMORY[0x1E4F143B8];
  v0 = [NSString stringWithUTF8String:"Type"];
  char v4 = v0;
  uint64_t v1 = [NSString stringWithUTF8String:"Program"];
  v5[0] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:&v4 count:1];

  return v2;
}

void sub_19E8F9D78(_Unwind_Exception *a1)
{
  long long v3 = v2;

  _Unwind_Resume(a1);
}

id std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<anonymous namespace'::toArray(CoreML::ModelStructure::Path const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&>()
{
  v5[1] = *MEMORY[0x1E4F143B8];
  v0 = [NSString stringWithUTF8String:"Type"];
  char v4 = v0;
  uint64_t v1 = [NSString stringWithUTF8String:"Root"];
  v5[0] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:&v4 count:1];

  return v2;
}

void sub_19E8F9E70(_Unwind_Exception *a1)
{
  long long v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19E8F9FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__string_hash<char>::operator()[abi:ne180100](a2);
}

const char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_()
{
  double result = "N6CoreML14ModelStructure4Path8PipelineE";
  if (((unint64_t)"N6CoreML14ModelStructure4Path8PipelineE" & 0x8000000000000000) != 0)
  {
    uint64_t v1 = (unsigned __int8 *)((unint64_t)"N6CoreML14ModelStructure4Path8PipelineE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v2 = 5381;
    do
    {
      double result = (const char *)v2;
      unsigned int v3 = *v1++;
      uint64_t v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__string_hash<char>::operator()[abi:ne180100](a2);
}

const char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_()
{
  double result = "N6CoreML14ModelStructure4Path13NeuralNetworkE";
  if (((unint64_t)"N6CoreML14ModelStructure4Path13NeuralNetworkE" & 0x8000000000000000) != 0)
  {
    uint64_t v1 = (unsigned __int8 *)((unint64_t)"N6CoreML14ModelStructure4Path13NeuralNetworkE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v2 = 5381;
    do
    {
      double result = (const char *)v2;
      unsigned int v3 = *v1++;
      uint64_t v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__string_hash<char>::operator()[abi:ne180100](a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__string_hash<char>::operator()[abi:ne180100](a2);
}

const char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_()
{
  double result = "N6CoreML14ModelStructure4Path7ProgramE";
  if (((unint64_t)"N6CoreML14ModelStructure4Path7ProgramE" & 0x8000000000000000) != 0)
  {
    uint64_t v1 = (unsigned __int8 *)((unint64_t)"N6CoreML14ModelStructure4Path7ProgramE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v2 = 5381;
    do
    {
      double result = (const char *)v2;
      unsigned int v3 = *v1++;
      uint64_t v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

const char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNKS_4hashINS_7variantIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEEclB8ne180100ERKSK_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSO_DpT0_()
{
  double result = "N6CoreML14ModelStructure4Path4RootE";
  if (((unint64_t)"N6CoreML14ModelStructure4Path4RootE" & 0x8000000000000000) != 0)
  {
    uint64_t v1 = (unsigned __int8 *)((unint64_t)"N6CoreML14ModelStructure4Path4RootE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v2 = 5381;
    do
    {
      double result = (const char *)v2;
      unsigned int v3 = *v1++;
      uint64_t v2 = (33 * v2) ^ v3;
    }
    while (v3);
  }
  return result;
}

void sub_19E8FA1E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::operator==[abi:ne180100]<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  int v5 = *(_DWORD *)(a2 + 24);
  BOOL v6 = v5 == v4;
  BOOL v9 = v5 == -1;
  BOOL v7 = v5 == -1;
  if (v9) {
    BOOL v6 = 0;
  }
  if (v4 == -1) {
    uint64_t result = v7;
  }
  else {
    uint64_t result = v6;
  }
  BOOL v9 = v4 == -1 || !v6;
  if (!v9)
  {
    uint64_t v11 = &v10;
    return ((uint64_t (*)(char **, uint64_t))off_1EF0E5F28[v4])(&v11, a1);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul,8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unsigned int v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul,7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul,6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unsigned int v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul,5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unsigned int v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>(uint64_t a1, void *a2, void *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unsigned int v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Program,CoreML::ModelStructure::Path::Root::Function,CoreML::ModelStructure::Path::Root::Block,CoreML::ModelStructure::Path::Root::Operation,CoreML::ModelStructure::NeuralNetwork,CoreML::ModelStructure::Path::Root::Operation::Layer,CoreML::ModelStructure::Pipeline,CoreML::ModelStructure::Path::Root::Operation::Layer::SubModel> const>()
{
  return 1;
}

void sub_19E8FB090(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  __p = &a23;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a32;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  if (a2 == 1)
  {
    v61 = __cxa_begin_catch(a1);
    int v62 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      uint64_t v67 = (*(uint64_t (**)(void *))(*(void *)v61 + 16))(v61);
      *(_DWORD *)(v58 - 128) = 136315138;
      *(void *)(v58 - 124) = v67;
      _os_log_error_impl(&dword_19E58B000, v62, OS_LOG_TYPE_ERROR, "Failed to construct MLModelStructurePath with error: %s.", (uint8_t *)(v58 - 128), 0xCu);
    }

    if (a11)
    {
      uint64_t v63 = (void *)MEMORY[0x1E4F28C58];
      a57 = *MEMORY[0x1E4F28568];
      double v64 = NSString;
      (*(void (**)(void *))(*(void *)v61 + 16))(v61);
      double v65 = [v64 stringWithFormat:@"Failed to construct MLModelStructurePath with error: %s."];
      a58 = (uint64_t)v65;
      int v66 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&a58 forKeys:&a57 count:1];
      *a11 = [v63 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v66];
    }
    __cxa_end_catch();
    JUMPOUT(0x19E8FACFCLL);
  }
  if (a30)
  {
    *(void *)(v58 - 128) = &a27;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 128));
  }

  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::missingOrInvalidValueErrorMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Failed to append ", 17);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(void *)a2;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", missing or invalid value for ", 31);
  int v11 = *(char *)(a3 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = *(void *)a3;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a3 + 8);
  }
  BOOL v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)".", 1);
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E4FBA408];
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v18[0] = v15;
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19F3C1850](&v20);
}

void sub_19E8FBA9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::toPath(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v25 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v29, (uint64_t)v24);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  double v26 = a1;
  char v27 = 0;
  uint64_t v4 = (char *)operator new(0x20uLL);
  *a1 = v4;
  a1[1] = v4;
  a1[2] = v4 + 32;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> const*,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> const*,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>*>((uint64_t)v29, (uint64_t)&v30, (uint64_t)v4);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v29);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v24);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v21;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v21 != v7) {
          objc_enumerationMutation(v5);
        }
        int v9 = *(void **)(*((void *)&v20 + 1) + 8 * v8);
        int v19 = 7;
        CoreML::ModelStructure::Path::appendComponent((uint64_t)a1, (uint64_t)v18);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v18);
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v9 UTF8String]);
        int v10 = __p;
        *(void *)uint64_t v15 = v13;
        *(void *)&v15[7] = *(void *)((char *)&v13 + 7);
        char v11 = HIBYTE(v13);
        __p = 0;
        long long v13 = 0uLL;
        BOOL v14 = v10;
        char v16 = v11;
        int v17 = 8;
        CoreML::ModelStructure::Path::appendComponent((uint64_t)a1, (uint64_t)&v14);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v14);
        if (SHIBYTE(v13) < 0) {
          operator delete(__p);
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [v5 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v6);
  }
}

void sub_19E8FBCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  *(void *)(v38 - 128) = v36;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 128));

  _Unwind_Resume(a1);
}

void std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        uint64_t v3 = std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor(v3 - 32);
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EF0E5E98[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 24) = v3;
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> const*,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> const*,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::__copy_constructor(a3 + v6, a1 + v6);
      v6 += 32;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void ___ZN12_GLOBAL__N_114componentTypesEv_block_invoke()
{
  v12[9] = *MEMORY[0x1E4F143B8];
  v0 = [NSString stringWithUTF8String:"Root"];
  v11[0] = v0;
  v12[0] = &unk_1EF119F20;
  uint64_t v1 = [NSString stringWithUTF8String:"Program"];
  v11[1] = v1;
  v12[1] = &unk_1EF119F38;
  uint64_t v2 = [NSString stringWithUTF8String:"Function"];
  v11[2] = v2;
  v12[2] = &unk_1EF119F50;
  uint64_t v3 = [NSString stringWithUTF8String:"Block"];
  void v11[3] = v3;
  v12[3] = &unk_1EF119F68;
  uint64_t v4 = [NSString stringWithUTF8String:"Operation"];
  v11[4] = v4;
  v12[4] = &unk_1EF119F80;
  char v5 = [NSString stringWithUTF8String:"NeuralNetwork"];
  v11[5] = v5;
  v12[5] = &unk_1EF119F98;
  uint64_t v6 = [NSString stringWithUTF8String:"Layer"];
  v11[6] = v6;
  v12[6] = &unk_1EF119FB0;
  uint64_t v7 = [NSString stringWithUTF8String:"Pipeline"];
  v11[7] = v7;
  v12[7] = &unk_1EF119FC8;
  uint64_t v8 = [NSString stringWithUTF8String:"SubModel"];
  v11[8] = v8;
  v12[8] = &unk_1EF119FE0;
  uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:v11 count:9];
}

void sub_19E8FC148(_Unwind_Exception *a1)
{
  int v10 = v7;

  _Unwind_Resume(a1);
}

void sub_19E8FC2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  *(void *)(v25 - 72) = v24;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 72));
  *(void *)(v25 - 72) = &a13;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 72));

  _Unwind_Resume(a1);
}

void sub_19E8FC6BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8FD7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  int v32 = *(void **)(v30 - 136);
  if (v32)
  {
    *(void *)(v30 - 128) = v32;
    operator delete(v32);
  }
  uint64_t v33 = *(void **)(v30 - 112);
  if (v33)
  {
    *(void *)(v30 - 104) = v33;
    operator delete(v33);
  }
  if (a11) {
    operator delete(a11);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_19E8FD98C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E8FDB54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8FDD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_19E8FE4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

void sub_19E8FE7D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8FEC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_19E8FEDDC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E8FF0F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8FF2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8FF608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8FF90C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8FF98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  int v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)MLE5InputPortBinder;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19E8FFA3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E8FFB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CoreML::NNCompiler::MLShapeInfo::getShape(CoreML::NNCompiler::MLShapeInfo *this)
{
  if (this)
  {
    int v1 = *((_DWORD *)this + 18);
    if (!v1) {
      return (uint64_t)this + 8;
    }
  }
  else
  {
    int v1 = MEMORY[0x48];
  }
  if (v1 != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  return (uint64_t)this + 8;
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<_KDInterval>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E9003A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::NNCompiler::MLImageShapeInfo::MLImageShapeInfo(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 10 || a4 == 40) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = 3;
  }
  int v10 = operator new(0x20uLL);
  *int v10 = 1;
  v10[1] = v9;
  void v10[2] = a3;
  void v10[3] = a2;
  uint64_t v13 = 0;
  long long v12 = 0uLL;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v12, v10, (uint64_t)(v10 + 4), 4uLL);
  *(_OWORD *)a1 = v12;
  *(void *)(a1 + 16) = v13;
  *(_DWORD *)(a1 + 48) = 0;
  operator delete(v10);
  *(_DWORD *)(a1 + 56) = a4;
  return a1;
}

void sub_19E900470(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<long long>>::reserve(void *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<long long>>>(a2);
    v5[1] = v5[0] + v3;
    void v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    std::vector<std::vector<long long>>::__swap_out_circular_buffer(v2, v5);
    return (void *)std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void *CoreML::NNCompiler::MLEnumeratedShape::MLEnumeratedShape(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::vector<long long>>::__init_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>((uint64_t)(a1 + 3), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  return a1;
}

void sub_19E900594(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<long long>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<long long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      char v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t std::vector<std::vector<long long>>::__init_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (void *)result;
    uint64_t v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<long long>>>(a4);
    size_t v8 = v7;
    *uint64_t v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[3 * v9];
    uint64_t v13 = v7;
    long long v12 = v7;
    v10[0] = v6 + 2;
    v10[1] = &v12;
    void v10[2] = &v13;
    char v11 = 0;
    if (a2 != a3)
    {
      do
      {
        *uint64_t v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v7, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
        uint64_t v7 = v13 + 3;
        v13 += 3;
        a2 += 24;
      }
      while (a2 != a3);
      size_t v8 = v7;
    }
    char v11 = 1;
    __n128 result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::vector<long long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v6[1] = v8;
  }
  return result;
}

void sub_19E90074C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::vector<long long>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 24);
        v4 -= 24;
        char v5 = v6;
        if (v6)
        {
          *(void *)(v2 - 16) = v5;
          operator delete(v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<long long>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

void *std::vector<std::vector<long long>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 24) = 0;
    *(void *)(v4 - 16) = 0;
    v4 -= 24;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = v2[2];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  *__n128 result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<long long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t CoreML::NNCompiler::MLImageShapeInfo::MLImageShapeInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, int a5)
{
  uint64_t v36 = 0;
  size_t v37 = 0;
  unint64_t v38 = 0;
  std::vector<std::vector<long long>>::reserve(&v36, ((char *)a4[1] - (char *)*a4) >> 4);
  int v26 = a5;
  if (a5 == 10 || a5 == 40) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = 3;
  }
  uint64_t v9 = *a4;
  int v10 = a4[1];
  if (*a4 != v10)
  {
    do
    {
      uint64_t v11 = *v9;
      uint64_t v12 = v9[1];
      uint64_t v13 = operator new(0x20uLL);
      BOOL v14 = v13 + 4;
      *uint64_t v13 = 1;
      v13[1] = v8;
      v13[2] = v12;
      v13[3] = v11;
      *(void *)&long long v15 = v13;
      *((void *)&v15 + 1) = v13 + 4;
      char v16 = v37;
      if ((unint64_t)v37 >= v38)
      {
        long long v30 = v15;
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v37 - (char *)v36) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v38 - (void)v36) >> 3) > v19) {
          unint64_t v19 = 0x5555555555555556 * ((uint64_t)(v38 - (void)v36) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (void)v36) >> 3) >= 0x555555555555555) {
          unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v20 = v19;
        }
        *((void *)&v33 + 1) = &v38;
        long long v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<long long>>>(v20);
        long long v22 = &v21[24 * v18];
        __p[0] = v21;
        __p[1] = v22;
        *(void *)&long long v33 = &v21[24 * v23];
        *(_OWORD *)long long v22 = v30;
        *((void *)v22 + 2) = v14;
        int v32 = v22 + 24;
        std::vector<std::vector<long long>>::__swap_out_circular_buffer(&v36, __p);
        int v17 = v37;
        std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        *(_OWORD *)size_t v37 = v15;
        *((void *)v16 + 2) = v14;
        int v17 = v16 + 24;
      }
      size_t v37 = v17;
      v9 += 2;
    }
    while (v9 != v10);
  }
  uint64_t v24 = (char *)operator new(0x20uLL);
  v35[1] = (void **)(v24 + 32);
  v35[2] = (void **)(v24 + 32);
  *(void *)uint64_t v24 = 1;
  *((void *)v24 + 1) = v8;
  *((void *)v24 + 2) = a3;
  *((void *)v24 + 3) = a2;
  v35[0] = (void **)v24;
  CoreML::NNCompiler::MLEnumeratedShape::MLEnumeratedShape(__p, (uint64_t)v35, (uint64_t *)&v36);
  operator delete(v24);
  v35[0] = (void **)&v36;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](v35);
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(void *)(a1 + 16) = v32;
  __p[0] = 0;
  __p[1] = 0;
  *(_OWORD *)(a1 + 24) = v33;
  *(void *)(a1 + 40) = v34;
  int v32 = 0;
  long long v33 = 0uLL;
  uint64_t v34 = 0;
  *(_DWORD *)(a1 + 48) = 2;
  uint64_t v36 = (void **)&v33;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&v36);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 56) = v26;
  return a1;
}

void sub_19E900B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  operator delete(v24);
  a24 = v25 - 112;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

void std::vector<CoreML::NNCompiler::MLRangeShape::Range>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(a2);
    long long v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v7 = &v4[16 * v6];
    uint64_t v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    int v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
        v10 -= 16;
        v8 -= 16;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

void *CoreML::NNCompiler::MLRangeShape::MLRangeShape(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__init_with_size[abi:ne180100]<CoreML::NNCompiler::MLRangeShape::Range*,CoreML::NNCompiler::MLRangeShape::Range*>(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
  return a1;
}

void sub_19E900CDC(_Unwind_Exception *exception_object)
{
  int64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__init_with_size[abi:ne180100]<CoreML::NNCompiler::MLRangeShape::Range*,CoreML::NNCompiler::MLRangeShape::Range*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E900D58(_Unwind_Exception *exception_object)
{
  int64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

double CoreML::NNCompiler::MLImageShapeInfo::MLImageShapeInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  uint64_t v11 = a4[2];
  uint64_t v10 = a4[3];
  if (a5 == 10 || a5 == 40) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = 3;
  }
  BOOL v14 = operator new(0x20uLL);
  *BOOL v14 = 1;
  v14[1] = v13;
  v14[2] = v11;
  v14[3] = v8;
  long long v15 = operator new(0x20uLL);
  uint64_t v35 = a2;
  uint64_t v33 = a1;
  int v34 = a5;
  *long long v15 = 1;
  v15[1] = v13;
  v15[2] = v10;
  v15[3] = v9;
  uint64_t v40 = 0;
  int v41 = 0;
  unint64_t v42 = 0;
  std::vector<CoreML::NNCompiler::MLRangeShape::Range>::reserve((void **)&v40, 4uLL);
  uint64_t v16 = 0;
  unint64_t v18 = v41;
  unint64_t v17 = v42;
  unint64_t v19 = v40;
  do
  {
    uint64_t v20 = v14[v16];
    uint64_t v21 = v15[v16];
    if ((unint64_t)v18 >= v17)
    {
      uint64_t v22 = v13;
      uint64_t v23 = (v18 - v19) >> 4;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60)
      {
        int v41 = v18;
        unint64_t v42 = v17;
        uint64_t v40 = v19;
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v17 - (void)v19) >> 3 > v24) {
        unint64_t v24 = (uint64_t)(v17 - (void)v19) >> 3;
      }
      if (v17 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25) {
        unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v25);
      }
      else {
        uint64_t v26 = 0;
      }
      char v27 = (void *)(v25 + 16 * v23);
      *char v27 = v20;
      v27[1] = v21;
      if (v18 == v19)
      {
        uint64_t v29 = (char *)(v25 + 16 * v23);
        uint64_t v13 = v22;
      }
      else
      {
        unint64_t v28 = v25 + 16 * v23;
        uint64_t v13 = v22;
        do
        {
          uint64_t v29 = (char *)(v28 - 16);
          *(_OWORD *)(v28 - 16) = *((_OWORD *)v18 - 1);
          v18 -= 16;
          v28 -= 16;
        }
        while (v18 != v19);
      }
      unint64_t v17 = v25 + 16 * v26;
      unint64_t v18 = (char *)(v27 + 2);
      if (v19) {
        operator delete(v19);
      }
      unint64_t v19 = v29;
    }
    else
    {
      *(void *)unint64_t v18 = v20;
      *((void *)v18 + 1) = v21;
      v18 += 16;
    }
    ++v16;
  }
  while (v16 != 4);
  int v41 = v18;
  unint64_t v42 = v17;
  uint64_t v40 = v19;
  long long v30 = operator new(0x20uLL);
  v39[1] = v30 + 4;
  v39[2] = v30 + 4;
  *long long v30 = 1;
  v30[1] = v13;
  v30[2] = a3;
  v30[3] = v35;
  v39[0] = v30;
  CoreML::NNCompiler::MLRangeShape::MLRangeShape(v37, (uint64_t)v39, (uint64_t)&v40);
  operator delete(v30);
  if (v19)
  {
    int v41 = v19;
    operator delete(v19);
  }
  operator delete(v15);
  operator delete(v14);
  long long v31 = v37[1];
  *(_OWORD *)uint64_t v33 = v37[0];
  *(_OWORD *)(v33 + 16) = v31;
  double result = *(double *)&v38;
  *(_OWORD *)(v33 + 32) = v38;
  *(_DWORD *)(v33 + 48) = 1;
  *(_DWORD *)(v33 + 56) = v34;
  return result;
}

void sub_19E900FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  operator delete(v27);
  if (v26) {
    operator delete(v26);
  }
  operator delete(v25);
  operator delete(v24);
  _Unwind_Resume(a1);
}

uint64_t ModelKeyServerAPIFetchKeyResultReadFrom(uint64_t a1, uint64_t a2)
{
  int64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 0u:
        unsigned int v17 = 0;
        do
        {
          uint64_t v18 = *v3;
          unint64_t v19 = *(void *)(a2 + v18);
          if (v19 == -1 || v19 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
            goto LABEL_39;
          }
          unint64_t v20 = v19 + 1;
          int v21 = *(char *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v20;
          if ((v21 & 0x80000000) == 0) {
            break;
          }
        }
        while (v17++ <= 8);
        goto LABEL_39;
      case 1u:
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 16;
        goto LABEL_31;
      case 2u:
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 24;
        goto LABEL_31;
      case 3u:
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 48;
LABEL_31:
        uint64_t v26 = *(void **)(a1 + v25);
        *(void *)(a1 + v25) = v24;

        goto LABEL_39;
      case 4u:
        [(id)a1 clearOneofValuesForKey];
        *(unsigned char *)(a1 + 56) |= 1u;
        *(_DWORD *)(a1 + 8) = 1;
        char v27 = objc_alloc_init(ModelKeyServerAPISignedKey);
        objc_storeStrong((id *)(a1 + 40), v27);
        if (!PBReaderPlaceMark() || (ModelKeyServerAPISignedKeyReadFrom((uint64_t)v27, a2) & 1) == 0) {
          goto LABEL_41;
        }
        goto LABEL_37;
      case 5u:
        [(id)a1 clearOneofValuesForKey];
        *(unsigned char *)(a1 + 56) |= 1u;
        *(_DWORD *)(a1 + 8) = 2;
        char v27 = objc_alloc_init(ModelKeyServerAPIRawKey);
        objc_storeStrong((id *)(a1 + 32), v27);
        if (PBReaderPlaceMark() && ModelKeyServerAPIRawKeyReadFrom((uint64_t)v27, a2))
        {
LABEL_37:
          PBReaderRecallMark();

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_41:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_39;
    }
  }
}

void sub_19E90246C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id obj)
{
}

void sub_19E902AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19E902E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E903584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getTRIFactorClass_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TRIFactor");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTRIFactorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    TrialProtoLibrary();
  }
}

void TrialProtoLibrary()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  if (!TrialProtoLibraryCore_frameworkLibrary)
  {
    v1[1] = MEMORY[0x1E4F143A8];
    v1[2] = 3221225472;
    v1[3] = __TrialProtoLibraryCore_block_invoke;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_1E59A3A68;
    uint64_t v3 = 0;
    TrialProtoLibraryCore_frameworkLibrary = _sl_dlopen();
    v0 = (void *)v1[0];
    if (TrialProtoLibraryCore_frameworkLibrary)
    {
      if (!v1[0]) {
        return;
      }
    }
    else
    {
      v0 = (void *)abort_report_np();
    }
    free(v0);
  }
}

uint64_t __TrialProtoLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  TrialProtoLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_19E903858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getTRIFileClass_block_invoke(uint64_t a1)
{
  TrialProtoLibrary();
  Class result = objc_getClass("TRIFile");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTRIFileClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = (void *)abort_report_np();
    return +[MLModelCollection getTrialLevelClass];
  }
  return result;
}

void sub_19E9039AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getTRILevelClass_block_invoke(uint64_t a1)
{
  TrialProtoLibrary();
  Class result = objc_getClass("TRILevel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTRILevelClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = (void *)abort_report_np();
    return +[MLModelCollection getTrialFactorLevelClass];
  }
  return result;
}

void sub_19E903B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getTRIFactorLevelClass_block_invoke(uint64_t a1)
{
  TrialProtoLibrary();
  Class result = objc_getClass("TRIFactorLevel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTRIFactorLevelClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = (void *)abort_report_np();
    return +[MLModelCollection getTrialDownloadOptionsClass];
  }
  return result;
}

void sub_19E903C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getTRIDownloadOptionsClass_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TRIDownloadOptions");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTRIDownloadOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    TrialLibrary();
  }
}

void TrialLibrary()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  if (!TrialLibraryCore_frameworkLibrary)
  {
    v1[1] = MEMORY[0x1E4F143A8];
    v1[2] = 3221225472;
    v1[3] = __TrialLibraryCore_block_invoke;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_1E59A3A50;
    uint64_t v3 = 0;
    TrialLibraryCore_frameworkLibrary = _sl_dlopen();
    v0 = (void *)v1[0];
    if (TrialLibraryCore_frameworkLibrary)
    {
      if (!v1[0]) {
        return;
      }
    }
    else
    {
      v0 = (void *)abort_report_np();
    }
    free(v0);
  }
}

uint64_t __TrialLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  TrialLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_19E903F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getTRIExperimentIdentifiersClass_block_invoke(uint64_t a1)
{
  TrialLibrary();
  Class result = objc_getClass("TRIExperimentIdentifiers");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTRIExperimentIdentifiersClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = (void *)abort_report_np();
    return +[MLModelCollection getTrialClientClass];
  }
  return result;
}

void sub_19E90407C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getTRIClientClass_block_invoke(uint64_t a1)
{
  TrialLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TRIClient");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTRIClientClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    long long v2 = (void *)abort_report_np();
    +[MLModelCollection endAccessingModelCollectionWithIdentifier:v4 completionHandler:v5];
  }
}

void sub_19E9044C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1049(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1050(uint64_t a1)
{
}

void sub_19E904D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

void *std::vector<std::vector<unsigned long>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    SEL v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19E904F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = (char *)**a1;
  if (v2)
  {
    SEL v4 = (char *)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (char *)v1[1];
      do
      {
        char v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        SEL v4 = v6;
      }
      while (v6 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<float *>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  Class result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

char *std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = 3 * a2;
  Class result = (char *)operator new(24 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

void sub_19E9052E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9057A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char *a17, char *a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17)
  {
    a18 = a17;
    operator delete(a17);
  }
  a17 = &a20;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);

  _Unwind_Resume(a1);
}

void sub_19E905FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DASActivityClass()
{
  uint64_t v4 = 0;
  size_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)get_DASActivityClass_softClass;
  uint64_t v7 = get_DASActivityClass_softClass;
  if (!get_DASActivityClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DASActivityClass_block_invoke;
    v3[3] = &unk_1E59A51A0;
    v3[4] = &v4;
    __get_DASActivityClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_19E9060E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t DuetActivitySchedulerLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!DuetActivitySchedulerLibraryCore_frameworkLibrary)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    v3[2] = 3221225472;
    v3[3] = __DuetActivitySchedulerLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E59A3A80;
    uint64_t v5 = 0;
    DuetActivitySchedulerLibraryCore_frameworkLibrary = _sl_dlopen();
    id v1 = (void *)v3[0];
    uint64_t v0 = DuetActivitySchedulerLibraryCore_frameworkLibrary;
    if (DuetActivitySchedulerLibraryCore_frameworkLibrary)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      id v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return DuetActivitySchedulerLibraryCore_frameworkLibrary;
}

uint64_t __DuetActivitySchedulerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  DuetActivitySchedulerLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_19E9066F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id get_DASSchedulerClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)get_DASSchedulerClass_softClass;
  uint64_t v7 = get_DASSchedulerClass_softClass;
  if (!get_DASSchedulerClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DASSchedulerClass_block_invoke;
    v3[3] = &unk_1E59A51A0;
    v3[4] = &v4;
    __get_DASSchedulerClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_19E9067DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E906E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_19E9070CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E90728C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_19E9074C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E907558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9075D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E907650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9076B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E907728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E907784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E90780C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E90787C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLE5InputPort;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19E907974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E907AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E907D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  v11[2](v11);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void ElapsedTimeRecorder::ElapsedTimeRecorder(ElapsedTimeRecorder *this, MLPredictionEvent *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a2;
  *(void *)this = mach_absolute_time();
  unint64_t v12 = v11;
  *((void *)this + 1) = v12;
  *((void *)this + 2) = a3;
  *((void *)this + 3) = a4;
  *((void *)this + 4) = a5;
  *((void *)this + 5) = a6;
  *((unsigned char *)this + 4_Block_object_dispose(&a9, 8) = 1;
  kdebug_trace();
}

void sub_19E907F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E908194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E908418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }

  _Unwind_Resume(a1);
}

void sub_19E9084C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E908540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E908744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E908874(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E9088F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E908E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_19E909000(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E9091A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  *(void *)(v27 - 72) = v26;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 72));
  *(void *)(v27 - 72) = &a13;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 72));
  _MLModelInputArchiver::~_MLModelInputArchiver((_MLModelInputArchiver *)&a16);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void _MLModelInputArchiver::~_MLModelInputArchiver(_MLModelInputArchiver *this)
{
  std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*((char **)this + 3));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::__shared_ptr_emplace<Archiver::_IArchiveDiskImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD8F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<Archiver::_IArchiveDiskImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD8F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19E909354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E909808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char *a21,char *a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  __cxa_free_exception(v28);
  *(void *)(v29 - 96) = &a15;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 96));
  if (__p) {
    operator delete(__p);
  }
  if (a21)
  {
    a22 = a21;
    operator delete(a21);
  }
  a21 = &a24;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }

  _Unwind_Resume(a1);
}

void *std::vector<float const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_19E90997C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<float const*>::__init_with_size[abi:ne180100]<float const**,float const**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E9099F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)v6[1];
    uint64_t v11 = v7;
    unint64_t v12 = v7;
    v9[0] = v6 + 2;
    v9[1] = &v11;
    void v9[2] = &v12;
    char v10 = 0;
    if (a2 == a3)
    {
      size_t v8 = v7;
    }
    else
    {
      size_t v8 = v7;
      do
      {
        *size_t v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v8, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
        size_t v8 = v12 + 3;
        v12 += 3;
        a2 += 24;
      }
      while (a2 != a3);
    }
    char v10 = 1;
    uint64_t result = (void *)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::vector<long long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
    v6[1] = v8;
  }
  return result;
}

void sub_19E909AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_19E909CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E909F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a12 = &a15;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E90A6E4(_Unwind_Exception *a1)
{
  e5rt_tensor_desc_release();
  _Unwind_Resume(a1);
}

void MIL::ParseError::~ParseError(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4F733D8] + 16);
  MEMORY[0x19F3C0570](&this[1]);

  std::runtime_error::~runtime_error(this);
}

void MIL::ValidationError::~ValidationError(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4F733E0] + 16);
  MEMORY[0x19F3C0600](&this[1]);

  std::runtime_error::~runtime_error(this);
}

void CoreML::NNCompiler::Backend::MIL::WriteProgram(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v13, a3);
  std::__fs::filesystem::path::path[abi:ne180100]<char [10],void>(&__p, "model.mil");
  uint64_t v5 = std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v13, &v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  MIL::Text::SerializerOptions::Make((uint64_t *)&v13, (MIL::Text::SerializerOptions *)v5);
  (*(void (**)(std::string::size_type, uint64_t))(*(void *)v13.__r_.__value_.__l.__data_ + 88))(v13.__r_.__value_.__r.__words[0], 1);
  std::string::size_type v6 = v13.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v14.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, v14.__pn_.__r_.__value_.__l.__data_, v14.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = v14.__pn_;
  }
  (*(void (**)(std::string::size_type, std::string *))(*(void *)v6 + 24))(v6, &pn);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  (*(void (**)(void))(*(void *)v13.__r_.__value_.__l.__data_ + 112))();
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::size_type v8 = *(void *)(a4 + 8);
    if (!v8) {
      goto LABEL_17;
    }
    std::string::size_type v7 = v13.__r_.__value_.__r.__words[0];
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a4, v8);
  }
  else
  {
    if (!*(unsigned char *)(a4 + 23)) {
      goto LABEL_17;
    }
    std::string::size_type v7 = v13.__r_.__value_.__r.__words[0];
    std::string v10 = *(std::string *)a4;
  }
  (*(void (**)(std::string::size_type, std::string *))(*(void *)v7 + 56))(v7, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
LABEL_17:
  MIL::Text::SerializeToFile();
  std::string::size_type v9 = v13.__r_.__value_.__r.__words[0];
  v13.__r_.__value_.__r.__words[0] = 0;
  if (v9) {
    (*(void (**)(std::string::size_type))(*(void *)v9 + 8))(v9);
  }
  if (SHIBYTE(v14.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_19E90AD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a28) {
    (*(void (**)(uint64_t))(*(void *)a28 + 8))(a28);
  }
  if (*(char *)(v33 - 33) < 0) {
    operator delete(*(void **)(v33 - 56));
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [10],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_19E90AE6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NNCompiler::Backend::MIL::WriteProgram(uint64_t *a1, uint64_t a2, objc_object *a3, uint64_t a4)
{
  if ((*(unsigned int (**)(Class))(*(void *)a3[1].isa + 48))(a3[1].isa) == 1)
  {
    uint64_t v8 = *a1;
    *a1 = 0;
    uint64_t v14 = v8;
    std::string::size_type v9 = +[MLCompilerNeuralNetworkOutput outputWithMILProgram:&v14];
    setCompiledObject(&__p, a3, v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }

    uint64_t v10 = v14;
    uint64_t v14 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  else
  {
    uint64_t v11 = *a1;
    Class isa = a3[1].isa;
    if (*((char *)isa + 55) < 0) {
      std::string::__init_copy_ctor_external(&v13, *((const std::string::value_type **)isa + 4), *((void *)isa + 5));
    }
    else {
      std::string v13 = *(std::string *)((char *)isa + 32);
    }
    CoreML::NNCompiler::Backend::MIL::WriteProgram(v11, a2, (char *)&v13, a4);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
}

void sub_19E90AFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(a1);
}

void setCompiledObject(std::string *a1, objc_object *a2, void *a3)
{
  id v5 = a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "CompiledObject");
  (*(void (**)(Class, std::string *, id))(*(void *)a2[1].isa + 32))(a2[1].isa, &__p, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  Class isa = a2[1].isa;
  if (*((char *)isa + 55) < 0) {
    std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)isa + 4), *((void *)isa + 5));
  }
  else {
    std::string v15 = *(std::string *)((char *)isa + 32);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "CompiledObject");
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v9 = &v15;
    }
    else {
      std::string::size_type v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    memmove(p_p, v9, size);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + size) = 47;
  if ((v14 & 0x80u) == 0) {
    uint64_t v10 = v13;
  }
  else {
    uint64_t v10 = (void **)v13[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v11 = v14;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)v13[1];
  }
  unint64_t v12 = std::string::append(&__p, (const std::string::value_type *)v10, v11);
  *a1 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v14 < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_19E90B1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Unwind_Resume(a1);
}

uint64_t CoreML::NNCompiler::Backend::MIL::OptimizeProgram(CoreML::NNCompiler::Backend::MIL *this, const IRProgram *a2)
{
  uint64_t v3 = (MIL::Passes::FlattenBlockNamespace *)MIL::PassManager::Make(&v10, this);
  uint64_t v4 = v10;
  MIL::Passes::FlattenBlockNamespace::Make(&v11, v3);
  uint64_t v5 = v11;
  uint64_t v11 = 0;
  uint64_t v12 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 16))(v4, &v12);
  uint64_t v6 = v12;
  uint64_t v12 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = v11;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v8 = MEMORY[0x19F3C08A0]();
    MEMORY[0x19F3C1920](v8, 0x81C40B8603338);
  }
  (*(void (**)(uint64_t, const IRProgram *))(*(void *)v10 + 24))(v10, a2);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_19E90B35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  std::unique_ptr<MIL::Passes::FlattenBlockNamespace>::reset[abi:ne180100](&a11);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::CopyWeights(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  v68[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((unsigned __int8 *)a1 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = a1[1];
  }
  if (v3 && *a2 != a2[1])
  {
    if (v4 >= 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = (uint64_t *)*a1;
    }
    uint64_t v8 = [MEMORY[0x1E4F1CB10] fileURLWithFileSystemRepresentation:v7 isDirectory:1 relativeToURL:0];
    std::string::size_type v9 = [v8 URLByAppendingPathComponent:@"weights"];

    int v55 = v9;
    uint64_t v10 = [v9 URLByStandardizingPath];
    uint64_t v11 = [v10 path];
    double v60 = [v11 stringByAppendingString:@"/"];

    uint64_t v12 = *(void *)(a3 + 8);
    if (*(char *)(v12 + 55) < 0) {
      std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(v12 + 32), *(void *)(v12 + 40));
    }
    else {
      std::string v67 = *(std::string *)(v12 + 32);
    }
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &v67;
    }
    else {
      uint64_t v13 = (std::string *)v67.__r_.__value_.__r.__words[0];
    }
    unsigned __int8 v14 = [MEMORY[0x1E4F1CB10] fileURLWithFileSystemRepresentation:v13 isDirectory:1 relativeToURL:0];
    double v59 = [v14 URLByAppendingPathComponent:@"weights"];

    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    int v62 = [MEMORY[0x1E4F28CB8] defaultManager];
    std::string v15 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v16 = [v59 URLByDeletingLastPathComponent];
    unsigned int v17 = [v16 path];
    id v66 = 0;
    double v57 = [v15 attributesOfItemAtPath:v17 error:&v66];
    id v18 = v66;

    if (!v57)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "Failed to obtain attributes of .mlmodelc directory.");
      uint64_t v48 = [v18 localizedDescription];
      BOOL v49 = v48 == 0;

      if (!v49)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v65.__r_.__value_.__l.__data_, (const void **)&v67.__r_.__value_.__l.__data_, " Error description: ");
        id v51 = [v18 localizedDescription];
        double v52 = std::string::append(&v65, (const std::string::value_type *)[v51 UTF8String]);
        std::string::size_type v53 = v52->__r_.__value_.__r.__words[0];
        v68[0] = v52->__r_.__value_.__l.__size_;
        *(void *)((char *)v68 + 7) = *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1] + 7);
        char v54 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v67.__r_.__value_.__l.__data_);
        }
        v67.__r_.__value_.__r.__words[0] = v53;
        v67.__r_.__value_.__l.__size_ = v68[0];
        *(std::string::size_type *)((char *)&v67.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v68 + 7);
        *((unsigned char *)&v67.__r_.__value_.__s + 23) = v54;

        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v65.__r_.__value_.__l.__data_);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &v67);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v19 = *MEMORY[0x1E4F28318];
    uint64_t v58 = [v57 objectForKeyedSubscript:*MEMORY[0x1E4F28318]];
    uint64_t v20 = *MEMORY[0x1E4F282D8];
    double v56 = [v57 objectForKeyedSubscript:*MEMORY[0x1E4F282D8]];
    v61 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v58, v19, v56, v20, 0);
    [v62 removeItemAtURL:v59 error:0];
    [v62 createDirectoryAtURL:v59 withIntermediateDirectories:1 attributes:v61 error:0];
    int v21 = *a2;
    uint64_t v22 = a2[1];
    while (v21 != v22)
    {
      uint64_t v23 = v21;
      if (*((char *)v21 + 23) < 0) {
        uint64_t v23 = (uint64_t *)*v21;
      }
      uint64_t v24 = [MEMORY[0x1E4F1CB10] fileURLWithFileSystemRepresentation:v23 isDirectory:0 relativeToURL:0];
      uint64_t v25 = [v24 URLByStandardizingPath];
      uint64_t v26 = [v25 path];

      if (![v26 hasPrefix:v60])
      {
        uint64_t v36 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v36, "Compilation error: model references file outside of weights folder");
        __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v27 = objc_msgSend(v26, "substringFromIndex:", objc_msgSend(v60, "length"));
      unint64_t v28 = [v59 URLByAppendingPathComponent:v27];
      uint64_t v29 = [v28 URLByDeletingLastPathComponent];
      [v62 createDirectoryAtURL:v29 withIntermediateDirectories:1 attributes:v61 error:0];

      id v64 = v18;
      LOBYTE(v29) = [v62 copyItemAtURL:v24 toURL:v28 error:&v64];
      id v30 = v64;

      if ((v29 & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v67, "Failed to copy weights during compilation.");
        size_t v37 = [v30 localizedDescription];
        BOOL v38 = v37 == 0;

        if (!v38)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v65.__r_.__value_.__l.__data_, (const void **)&v67.__r_.__value_.__l.__data_, " Error description: ");
          id v44 = [v30 localizedDescription];
          unsigned int v45 = std::string::append(&v65, (const std::string::value_type *)[v44 UTF8String]);
          std::string::size_type v46 = v45->__r_.__value_.__r.__words[0];
          v68[0] = v45->__r_.__value_.__l.__size_;
          *(void *)((char *)v68 + 7) = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
          char v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v67.__r_.__value_.__l.__data_);
          }
          v67.__r_.__value_.__r.__words[0] = v46;
          v67.__r_.__value_.__l.__size_ = v68[0];
          *(std::string::size_type *)((char *)&v67.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v68 + 7);
          *((unsigned char *)&v67.__r_.__value_.__s + 23) = v47;

          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v65.__r_.__value_.__l.__data_);
          }
        }
        int v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v39, &v67);
        __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      long long v31 = [v28 path];
      id v63 = v30;
      char v32 = [v62 setAttributes:v61 ofItemAtPath:v31 error:&v63];
      id v18 = v63;

      if ((v32 & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v67, "Failed to set owner and group on copied weights during compilation.");
        uint64_t v33 = [v18 localizedDescription];
        BOOL v34 = v33 == 0;

        if (!v34)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v65.__r_.__value_.__l.__data_, (const void **)&v67.__r_.__value_.__l.__data_, " Error description: ");
          id v40 = [v18 localizedDescription];
          int v41 = std::string::append(&v65, (const std::string::value_type *)[v40 UTF8String]);
          std::string::size_type v42 = v41->__r_.__value_.__r.__words[0];
          v68[0] = v41->__r_.__value_.__l.__size_;
          *(void *)((char *)v68 + 7) = *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7);
          char v43 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v67.__r_.__value_.__l.__data_);
          }
          v67.__r_.__value_.__r.__words[0] = v42;
          v67.__r_.__value_.__l.__size_ = v68[0];
          *(std::string::size_type *)((char *)&v67.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v68 + 7);
          *((unsigned char *)&v67.__r_.__value_.__s + 23) = v43;

          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v65.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v35, &v67);
        __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }

      v21 += 3;
    }
  }
}

void sub_19E90BB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }

  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void **a1, const void **a2, char *__s)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = strlen(__s);
  uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a1, v6 + v7);
  if (*((char *)a1 + 23) < 0) {
    a1 = (void **)*a1;
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      std::string::size_type v9 = a2;
    }
    else {
      std::string::size_type v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a1, v9, v6);
  }
  uint64_t v10 = (char *)a1 + v6;
  if (v7) {
    uint64_t result = (uint64_t)memmove(v10, __s, v7);
  }
  v10[v7] = 0;
  return result;
}

void sub_19E90C4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  char v32 = *(void **)(v30 - 136);
  if (v32)
  {
    *(void *)(v30 - 12_Block_object_dispose(&a9, 8) = v32;
    operator delete(v32);
  }
  uint64_t v33 = *(void **)(v30 - 112);
  if (v33)
  {
    *(void *)(v30 - 104) = v33;
    operator delete(v33);
  }
  if (a11) {
    operator delete(a11);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

void sub_19E90C7F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E90C9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_19E90CB60(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19E90D250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E90D7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }

  _Unwind_Resume(a1);
}

void sub_19E90DAAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E90DD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19E90E150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  v11[2](v11);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19E90E2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLAppleGazetteer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19E90E4F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E90F1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }

  _Unwind_Resume(a1);
}

__n128 google::protobuf::internal::ArenaStringPtr::SetNoArena(long long **a1, __n128 *a2)
{
  uint64_t v3 = *a1;
  if (*a1 == &google::protobuf::internal::fixed_address_empty_string) {
    operator new();
  }
  if (*((char *)v3 + 23) < 0) {
    operator delete(*(void **)v3);
  }
  __n128 result = *a2;
  *((void *)v3 + 2) = a2[1].n128_u64[0];
  *uint64_t v3 = (__int128)result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    size_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    size_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void CoreML::Specification::StringVector::add_vector(CoreML::Specification::StringVector *this, const char *a2)
{
  uint64_t v3 = (google::protobuf::Arena **)((char *)this + 16);
  int v4 = (int *)*((void *)this + 4);
  if (v4)
  {
    int v5 = *((_DWORD *)this + 6);
    int v6 = *v4;
    if (v5 < *v4)
    {
      *((_DWORD *)this + 6) = v5 + 1;
      goto LABEL_14;
    }
    if (v6 != *((_DWORD *)this + 7))
    {
LABEL_9:
      int *v4 = v6 + 1;
      size_t v7 = *v3;
      if (!*v3) {
        operator new();
      }
      Aligned[1] = 0;
      Aligned[2] = 0;
      *Aligned = 0;
      std::string::size_type v9 = google::protobuf::Arena::AllocateAligned(v7, 0, 24);
      *std::string::size_type v9 = (google::protobuf::Arena *)Aligned;
      v9[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
      uint64_t v10 = (unint64_t *)((char *)v7 + 32);
      do
        unint64_t v11 = __ldxr(v10);
      while (__stxr((unint64_t)v9, v10));
      void v9[2] = (google::protobuf::Arena *)v11;
      uint64_t v12 = *((void *)this + 4);
      uint64_t v13 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v13 + 1;
      *(void *)(v12 + 8 * v13 + _Block_object_dispose(&a9, 8) = Aligned;
LABEL_14:
      JUMPOUT(0x19F3C1430);
    }
  }
  else
  {
    int v5 = *((_DWORD *)this + 6);
    int v6 = *((_DWORD *)this + 7);
  }
  if (v5 <= v6)
  {
    google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::StringVector *)((char *)this + 16), v6 - v5 + 1);
    int v4 = (int *)*((void *)this + 4);
  }
  int v6 = *v4;
  goto LABEL_9;
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<std::string>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    __n128 result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *__n128 result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<std::string>;
    int v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

void google::protobuf::internal::arena_destruct_object<std::string>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t *google::protobuf::Map<std::string,std::string>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  int v4 = *(google::protobuf::Arena **)(a1 + 40);
  if (v4) {
    Aligned = google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x1E4FBA3A0], 32);
  }
  else {
    Aligned = operator new(0x20uLL);
  }
  uint64_t v6 = (uint64_t)Aligned;
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v7 = v11;
  uint64_t v12 = 0;
  std::string::size_type v9 = &v10;
  uint64_t v10 = 0;
  Aligned[1] = 0;
  Aligned[2] = v7;
  Aligned[3] = 0;
  void *Aligned = Aligned + 1;
  std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy((uint64_t)&v9, 0);
  google::protobuf::Map<std::string,std::string>::InnerMap::CopyListToTree(*(uint64_t **)(a1 + 32), a2, v6);
  __n128 result = google::protobuf::Map<std::string,std::string>::InnerMap::CopyListToTree(*(uint64_t **)(a1 + 32), a2 ^ 1, v6);
  *(void *)(*(void *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(void *)(*(void *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__find_equal<std::string *>(a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)google::protobuf::Map<std::string,std::string>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(*(google::protobuf::Arena **)(a1 + 16));
    v6[4] = *a3;
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, v9, v7, v6);
  }
  return v6;
}

void *std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__find_equal<std::string *>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        size_t v8 = (void *)v4[4];
        if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, v8)) {
          break;
        }
        int v4 = (void *)*v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v8, a3)) {
        break;
      }
      unint64_t v5 = v7 + 1;
      int v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

google::protobuf::Arena **google::protobuf::Map<std::string,std::string>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(google::protobuf::Arena *a1)
{
  if (a1) {
    return google::protobuf::Arena::AllocateAligned(a1, MEMORY[0x1E4FBA3A0], 40);
  }
  else {
    return (google::protobuf::Arena **)operator new(0x28uLL);
  }
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[3] = (uint64_t *)((char *)a1[3] + 1);
  return result;
}

void std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy(a1, *a2);
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy(a1, a2[1]);
    if (!*(void *)(a1 + 16))
    {
      operator delete(a2);
    }
  }
}

uint64_t *google::protobuf::Map<std::string,std::string>::InnerMap::CopyListToTree(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)result[a2];
  if (v3)
  {
    do
    {
      uint64_t v6 = v3;
      __n128 result = std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(a3, v3, (uint64_t *)&v6);
      unint64_t v5 = (void *)v3[4];
      v3[4] = 0;
      uint64_t v3 = v5;
    }
    while (v5);
  }
  return result;
}

void google::protobuf::Map<std::string,std::string>::InnerMap::Resize(uint64_t a1, uint64_t a2, size_t a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = a2;
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = google::protobuf::Map<std::string,std::string>::MapAllocator<void *>::allocate(*(google::protobuf::Arena **)(a1 + 40), a2, a3);
  bzero(v7, 8 * a2);
  unint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v7;
  while (v8 < v5)
  {
    uint64_t v9 = v6[v8];
    if (v9)
    {
      if (v9 == v6[v8 ^ 1])
      {
        uint64_t v12 = *(void **)v9;
        do
        {
          uint64_t v13 = (unsigned char *)v12[4];
          uint64_t v14 = google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(a1, v13);
          google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v18, a1, v14, v13);
          std::string v15 = (void *)v12[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              std::string v15 = (void *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (void *)v12[2];
              BOOL v17 = *v16 == (void)v12;
              uint64_t v12 = v16;
            }
            while (!v17);
          }
          uint64_t v12 = v16;
        }
        while (v16 != (void *)(v9 + 8));
        ++v8;
        google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(*(void *)(a1 + 40), (void **)v9);
      }
      else
      {
        do
        {
          uint64_t v10 = *(void *)(v9 + 32);
          uint64_t v11 = google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(a1, (unsigned char *)v9);
          google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v18, a1, v11, (void *)v9);
          uint64_t v9 = v10;
        }
        while (v10);
      }
    }
    ++v8;
  }
  if (!*(void *)(a1 + 40))
  {
    operator delete(v6);
  }
}

void google::protobuf::Map<std::string,std::string>::InnerMap::DestroyTree(uint64_t a1, void **a2)
{
  std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::destroy((uint64_t)a2, a2[1]);
  if (!a1)
  {
    operator delete(a2);
  }
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(uint64_t a1, void *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    BOOL v6 = google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(*(void **)(v3 + 32), a2);
    int v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      int v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2
    || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, *(void **)(v5 + 32)))
  {
    return v2;
  }
  return v5;
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureDescription>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void sub_19E9103C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  CoreML::Specification::CoreMLModels::Gazetteer::~Gazetteer((CoreML::Specification::CoreMLModels::Gazetteer *)&a17);
  _Unwind_Resume(a1);
}

std::string *anonymous namespace'::tensorInputOutputRename(std::string *this, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    *this = *(std::string *)a2;
  }
  return std::string::append(this, "_4D454D5F4F5054", 0xFuLL);
}

void sub_19E910538(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void anonymous namespace'::replaceTensorInputWithTensorBuffer(MIL::Builder::FunctionBuilder **a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 name];
  std::string::basic_string[abi:ne180100]<0>(&v35, (char *)[v4 UTF8String]);
  Input = (MIL::Builder::Variable *)MIL::Builder::FunctionBuilder::TryGetInput();
  uint64_t Type = MIL::Builder::Variable::TryGetType(Input);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 24))(Type);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }

  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Converting tensor input -> tensor buffer requires input to be a tensor");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  if (v8[1] != *v8)
  {
    uint64_t v9 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7) + 8) - 8);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9) {
      || (*(unsigned int (**)(uint64_t))(*(void *)v7 + 88))(v7) == 4
    }
      || (uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9),
          unint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(v10),
          int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 88))(v7),
    {
      id v13 = [v3 name];
      std::string::basic_string[abi:ne180100]<0>(&v35, (char *)[v13 UTF8String]);

      MIL::Builder::FunctionBuilder::RemoveInput();
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v34, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
      }
      else {
        std::string v34 = v35;
      }
      MIL::Builder::FunctionBuilder::AddInput();
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      MIL::Builder::FunctionBuilder::SelectedSpecialization(*a1);
      MIL::Builder::FunctionBuilder::GetBlock();
      MIL::Builder::BlockBuilder::GetOperation(v32);
      std::string::basic_string[abi:ne180100]<0>(&v27, "tensor_buffer_to_tensor");
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      uint64_t v25 = v28;
      uint64_t v26 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = v30;
      uint64_t v24 = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::BlockBuilder::AddOperation();
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "input");
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v19, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
      }
      else {
        std::string v19 = v35;
      }
      MIL::Builder::OperationBuilder::AddInput();
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      if (v21 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v17, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
      }
      else {
        std::string v17 = v27;
      }
      MIL::Builder::OperationBuilder::AddOutput();
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v16, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
      }
      else {
        std::string v16 = v27;
      }
      std::string v15 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_19E910AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  uint64_t v48 = *(std::__shared_weak_count **)(v46 - 152);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  BOOL v49 = *(std::__shared_weak_count **)(v46 - 136);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  int v50 = *(std::__shared_weak_count **)(v46 - 120);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  if (*(char *)(v46 - 65) < 0) {
    operator delete(*(void **)(v46 - 88));
  }

  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::confirmImageTensorAssumptions(uint64_t a1, int a2, int a3)
{
  if (*(void *)(a1 + 8) - *(void *)a1 != 32)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v45, (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
    std::string v15 = std::string::insert(&v45, 0, "Converting tensor to pixel buffer requires rank 4 (NCHW) tensor, but got tensor of rank ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v46);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v6 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
  if (v7 != 1)
  {
    unint64_t v17 = v7;
    id v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v45, v17);
    std::string v19 = std::string::insert(&v45, 0, "Expected 1 for batch dimension of tensor corresponding to image, but got ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v18, &v46);
    __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v8 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*(void *)a1 + 8));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
  BOOL v10 = a3 == 1111970369 || a3 == 32;
  int v11 = v10;
  uint64_t v12 = 3;
  if (!v10) {
    uint64_t v12 = 1;
  }
  if (result != v12)
  {
    unint64_t v21 = result;
    if (v11) {
      uint64_t v22 = "color";
    }
    else {
      uint64_t v22 = "grayscale";
    }
    unint64_t v23 = v12;
    std::string::basic_string[abi:ne180100]<0>(&v46, v22);
    uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v40, v23);
    uint64_t v25 = std::string::insert(&v40, 0, "Expected ");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::string v27 = std::string::append(&v41, " for channel dimension of tensor corresponding to ");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v29 = &v46;
    }
    else {
      uint64_t v29 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v46.__r_.__value_.__l.__size_;
    }
    long long v31 = std::string::append(&v42, (const std::string::value_type *)v29, size);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    uint64_t v33 = std::string::append(&v43, " image, but got ");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, v21);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v35 = &v39;
    }
    else {
      std::string v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
    }
    size_t v37 = std::string::append(&v44, (const std::string::value_type *)v35, v36);
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v24, &v45);
    __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a3 == 1278226488)
  {
    if (a2 == 5 || a2 == 14) {
      return result;
    }
    id v13 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v13, "Expected tensor corresponding to Grayscale image to be FP32 or U8 dtype.");
LABEL_40:
    __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a3 != 1278226536)
  {
    if (a2 == 5) {
      return result;
    }
    id v13 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v13, "Expected tensor corresponding to non-Grayscale16 image type to be FP32 dtype.");
    goto LABEL_40;
  }
  if (a2 != 4)
  {
    id v13 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](v13, "Expected tensor corresponding to Grayscale16 image to be FP16 dtype.");
    goto LABEL_40;
  }
  return result;
}

void sub_19E911060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v42 - 73) < 0) {
    operator delete(*(void **)(v42 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v42 - 105) < 0) {
    operator delete(*(void **)(v42 - 128));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v41 & 1) == 0)
    {
LABEL_18:
      if (*(char *)(v42 - 41) < 0) {
        operator delete(*(void **)(v42 - 64));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_18;
  }
  __cxa_free_exception(v40);
  goto LABEL_18;
}

uint64_t anonymous namespace'::getOperatorType(std::string *a1, unsigned __int8 *a2, MIL::IROpset *this)
{
  MIL::IROpset::GetReversedOperatorNamesMap(&v16, this);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v6 = v17;
  if (!*(void *)&v17) {
    goto LABEL_17;
  }
  unint64_t v7 = v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v17);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v5;
    if (v5 >= *(void *)&v17) {
      unint64_t v10 = v5 % *(void *)&v17;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v17 - 1) & v5;
  }
  int v11 = *(uint64_t ***)(v16 + 8 * v10);
  if (!v11 || (uint64_t v12 = *v11) == 0) {
LABEL_17:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  while (1)
  {
    unint64_t v13 = v12[1];
    if (v13 == v7) {
      break;
    }
    if (v9 > 1)
    {
      if (v13 >= *(void *)&v6) {
        v13 %= *(void *)&v6;
      }
    }
    else
    {
      v13 &= *(void *)&v6 - 1;
    }
    if (v13 != v10) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v12 = (uint64_t *)*v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  if (!std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v12 + 16, a2)) {
    goto LABEL_16;
  }
  if (*((char *)v12 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v12[5], v12[6]);
  }
  else
  {
    long long v14 = *(_OWORD *)(v12 + 5);
    a1->__r_.__value_.__r.__words[2] = v12[7];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v14;
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v16);
}

void sub_19E911318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    id v4 = result;
    if (a4 >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(a4);
    unint64_t v7 = result;
    void *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_19E9113A8(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::replaceTensorOutputWithTensorBuffer(MIL::Builder::FunctionBuilder **a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 name];
  std::string::basic_string[abi:ne180100]<0>(&v66, (char *)[v4 UTF8String]);

  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v65, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  }
  else {
    std::string v65 = v66;
  }
  MIL::Builder::FunctionBuilder::SelectedSpecialization(*a1);
  MIL::Builder::FunctionBuilder::GetBlock();
  Variable = (MIL::Builder::Variable *)MIL::Builder::BlockBuilder::GetVariable();
  uint64_t Type = MIL::Builder::Variable::TryGetType(Variable);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 24))(Type);
  uint64_t v8 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v63);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  size_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  if (v9[1] != *v9)
  {
    id v34 = v3;
    uint64_t v10 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 96))(v8) + 8) - 8);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10) {
      || (*(unsigned int (**)(uint64_t))(*(void *)v8 + 88))(v8) == 4
    }
      || (uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10),
          unint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11),
          int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(v8),
    {
      MIL::Builder::BlockBuilder::GetOperation();
      if (v62) {
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      std::string v66 = v63;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v59, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
      }
      else {
        std::string v59 = v66;
      }
      MIL::Builder::OperationBuilder::RenameOutput();
      if (v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v60);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v58, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
      }
      else {
        std::string v58 = v66;
      }
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v63, "tensor_to_tensor_buffer");
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      uint64_t v52 = v54;
      std::string::size_type v53 = v55;
      if (v55) {
        atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      MIL::Builder::BlockBuilder::AddOperation();
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "input");
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v46, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
      }
      else {
        std::string v46 = v66;
      }
      MIL::Builder::OperationBuilder::AddInput();
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (v48 < 0) {
        operator delete(__p);
      }
      std::string::basic_string[abi:ne180100]<0>(&v43, "interleave_factors");
      long long v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 96))(v8);
      size_t v15 = (uint64_t)(v14[1] - *v14) >> 3;
      LOBYTE(v37) = 1;
      std::vector<unsigned char>::vector(&v63, v15, &v37);
      MIL::Builder::OperationBuilder::AddInputUInt8();
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      if (v63.__r_.__value_.__r.__words[0])
      {
        v63.__r_.__value_.__l.__size_ = v63.__r_.__value_.__r.__words[0];
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if (v44 < 0) {
        operator delete(v43);
      }
      std::string::basic_string[abi:ne180100]<0>(&v40, "strides");
      uint64_t v16 = (const void *)v63.__r_.__value_.__r.__words[0];
      int64_t v17 = v63.__r_.__value_.__l.__size_ - v63.__r_.__value_.__r.__words[0];
      if (v63.__r_.__value_.__l.__size_ == v63.__r_.__value_.__r.__words[0])
      {
        id v18 = 0;
      }
      else
      {
        if (v17 < 0) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        id v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v17 >> 3);
        memmove(v18, v16, v17);
        int64_t v17 = (int64_t)v18 + 8 * (v17 >> 3);
      }
      size_t v37 = 0;
      long long v38 = 0;
      unint64_t v39 = 0;
      std::vector<long long>::reserve(&v37, (v17 - (uint64_t)v18) >> 3);
      if (v18 != (void *)v17)
      {
        std::string v19 = (MIL::IRProperty **)v18;
        do
        {
          long long v20 = *v19;
          if (MIL::IRProperty::TryAsConstant(*v19))
          {
            unint64_t v21 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(v20);
            uint64_t Int64ScalarValue = MIL::IRConstantProperty::GetInt64ScalarValue(v21);
          }
          else
          {
            uint64_t Int64ScalarValue = -1;
          }
          unint64_t v23 = v38;
          if ((unint64_t)v38 >= v39)
          {
            uint64_t v25 = (char *)v37;
            uint64_t v26 = (v38 - (unsigned char *)v37) >> 3;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61) {
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v28 = v39 - (void)v37;
            if ((uint64_t)(v39 - (void)v37) >> 2 > v27) {
              unint64_t v27 = v28 >> 2;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v29);
              uint64_t v25 = (char *)v37;
              unint64_t v23 = v38;
            }
            else
            {
              uint64_t v30 = 0;
            }
            long long v31 = (uint64_t *)(v29 + 8 * v26);
            uint64_t *v31 = Int64ScalarValue;
            uint64_t v24 = (char *)(v31 + 1);
            while (v23 != v25)
            {
              uint64_t v32 = *((void *)v23 - 1);
              v23 -= 8;
              *--long long v31 = v32;
            }
            size_t v37 = v31;
            long long v38 = v24;
            unint64_t v39 = v29 + 8 * v30;
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *(void *)long long v38 = Int64ScalarValue;
            uint64_t v24 = v23 + 8;
          }
          long long v38 = v24;
          ++v19;
        }
        while (v19 != (MIL::IRProperty **)v17);
      }
      MIL::Builder::OperationBuilder::AddInputInt64();
      if (v42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      }
      if (v37)
      {
        long long v38 = (char *)v37;
        operator delete(v37);
      }
      if (v18) {
        operator delete(v18);
      }
      if (v41 < 0) {
        operator delete(v40);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = v65;
      }
      MIL::Builder::OperationBuilder::AddOutput();
      id v3 = v34;
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      if (v63.__r_.__value_.__r.__words[0])
      {
        v63.__r_.__value_.__l.__size_ = v63.__r_.__value_.__r.__words[0];
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
      if (v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
      }
    }
  }
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
}

void sub_19E911B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  char v47 = *(std::__shared_weak_count **)(v45 - 192);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  char v48 = *(std::__shared_weak_count **)(v45 - 152);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (*(char *)(v45 - 121) < 0) {
    operator delete(*(void **)(v45 - 144));
  }
  if (*(char *)(v45 - 89) < 0) {
    operator delete(*(void **)(v45 - 112));
  }

  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::getIndexOfOutputForOutputName(unsigned __int8 *a1, MIL::Builder::OperationBuilder *this)
{
  MIL::Builder::OperationBuilder::GetOutputs((uint64_t *)&__p, this);
  id v3 = (MIL::Builder::Variable **)__p;
  id v4 = v15;
  if (__p != v15)
  {
    do
    {
      Name = (unsigned __int8 *)MIL::Builder::Variable::GetName(*v3);
      uint64_t v6 = Name[23];
      if ((v6 & 0x80u) == 0) {
        uint64_t v7 = Name[23];
      }
      else {
        uint64_t v7 = *((void *)Name + 1);
      }
      uint64_t v8 = a1[23];
      int v9 = (char)v8;
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = *((void *)a1 + 1);
      }
      if (v7 == v8)
      {
        if (v9 >= 0) {
          uint64_t v10 = a1;
        }
        else {
          uint64_t v10 = *(unsigned __int8 **)a1;
        }
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)Name, v10, *((void *)Name + 1))) {
            goto LABEL_19;
          }
        }
        else
        {
          if (!Name[23]) {
            goto LABEL_19;
          }
          while (*Name == *v10)
          {
            ++Name;
            ++v10;
            if (!--v6) {
              goto LABEL_19;
            }
          }
        }
      }
      ++v3;
    }
    while (v3 != v4);
    id v3 = v4;
  }
LABEL_19:
  if (v3 == v15)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Op output could not be found.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v11 = __p;
  if (__p)
  {
    size_t v15 = (MIL::Builder::Variable **)__p;
    operator delete(__p);
  }
  return ((char *)v3 - v11) >> 3;
}

void sub_19E911EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      id v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t *std::pair<std::unique_ptr<MIL::IRProgram>,MIL::ValidationResult>::~pair(uint64_t *a1)
{
  MEMORY[0x19F3C0600](a1 + 1);
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

MIL::Attributes::FlexibleShapeInfo *std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::reset[abi:ne180100](MIL::Attributes::FlexibleShapeInfo **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    id v3 = (std::__shared_weak_count *)__p[3];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

unint64_t anonymous namespace'::overheadBytesFromRowAlignmentIsTolerable(unint64_t a1, int a2)
{
  if (a2 > 10)
  {
    if (a2 == 11)
    {
LABEL_8:
      unint64_t v2 = 4;
      goto LABEL_10;
    }
    if (a2 != 14) {
      goto LABEL_13;
    }
    unint64_t v2 = 1;
  }
  else
  {
    if (a2 != 4)
    {
      if (a2 != 5)
      {
LABEL_13:
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](exception, "Unexpected data type for IO tensor");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      goto LABEL_8;
    }
    unint64_t v2 = 2;
  }
LABEL_10:
  unint64_t result = CoreML::SafeMultiplies<unsigned long>::operator()(a1, v2);
  if (result) {
    return result >= (unint64_t)(float)(((result - 1) & 0xFFFFFFFFFFFFFFC0) - result + 64);
  }
  return result;
}

void sub_19E912154(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::makeiOS17SpecializedOp()
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ios17");
  MIL::MILContext::GetOpset();
  MIL::IROpset::TryGetOperatorSharedPtr();
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v0 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::Make();
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ios17");
  MIL::Builder::OperationBuilder::SetSpecificationOpsetName();
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_19E912244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  unint64_t v21 = *(std::__shared_weak_count **)(v19 + 8);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (unsigned char *)a1[1];
    uint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_19E91230C(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::alignedTensorStrides(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  std::string::size_type v36 = 0;
  uint64_t v37 = 0;
  std::string v35 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v35, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3);
  uint64_t v6 = v35;
  size_t v5 = v36;
  if (v35 != v36)
  {
    uint64_t v7 = v35;
    while (!(*(uint64_t (**)(void))(**(void **)v7 + 24))())
    {
      v7 += 8;
      if (v7 == v5) {
        goto LABEL_7;
      }
    }
    uint64_t v13 = MIL::IRUnknownProperty::Make();
    unint64_t v14 = (v5 - v6) >> 3;
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    std::vector<_KDInterval>::__vallocate[abi:ne180100](a1, v14);
    size_t v15 = (uint64_t *)a1[1];
    uint64_t v16 = &v15[v14];
    uint64_t v17 = 8 * v14;
    do
    {
      *v15++ = v13;
      v17 -= 8;
    }
    while (v17);
    a1[1] = v16;
    if (!v6) {
      return;
    }
LABEL_39:
    std::string::size_type v36 = v6;
    operator delete(v6);
    return;
  }
  size_t v5 = v35;
LABEL_7:
  char v29 = 1;
  std::vector<unsigned char>::vector(&v30, (v5 - v6) >> 3, &v29);
  std::string __p = 0;
  uint64_t v33 = 0;
  id v34 = 0;
  int v9 = v30;
  uint64_t v8 = v31;
  unint64_t v10 = v31 - v30;
  if (v31 == v30)
  {
    uint64_t v11 = 0;
  }
  else
  {
    if (v10 >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v10);
    std::string __p = v11;
    uint64_t v33 = v11;
    id v34 = &v11[8 * v12];
    int v9 = v30;
    uint64_t v8 = v31;
  }
  if (v9 != v8)
  {
    do
    {
      uint64_t UInt8Scalar = MIL::IRConstantProperty::MakeUInt8Scalar();
      uint64_t v19 = UInt8Scalar;
      if (v11 >= v34)
      {
        unint64_t v21 = (char *)__p;
        uint64_t v22 = (v11 - (unsigned char *)__p) >> 3;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v34 - (unsigned char *)__p;
        if ((v34 - (unsigned char *)__p) >> 2 > v23) {
          unint64_t v23 = v24 >> 2;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25) {
          unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v25);
        }
        else {
          uint64_t v26 = 0;
        }
        unint64_t v27 = (uint64_t *)(v25 + 8 * v22);
        *unint64_t v27 = v19;
        long long v20 = v27 + 1;
        if (v11 != v21)
        {
          do
          {
            uint64_t v28 = *((void *)v11 - 1);
            v11 -= 8;
            *--unint64_t v27 = v28;
          }
          while (v11 != v21);
          uint64_t v11 = (char *)__p;
        }
        std::string __p = v27;
        uint64_t v33 = v20;
        id v34 = (char *)(v25 + 8 * v26);
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *(void *)uint64_t v11 = UInt8Scalar;
        long long v20 = v11 + 8;
      }
      uint64_t v33 = v20;
      ++v9;
      uint64_t v11 = (char *)v20;
    }
    while (v9 != v8);
    uint64_t v8 = v30;
  }
  if (v8)
  {
    long long v31 = v8;
    operator delete(v8);
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 88))(a2);
  MIL::Util::GetRowAlignedStrides();
  if (__p)
  {
    uint64_t v33 = __p;
    operator delete(__p);
  }
  uint64_t v6 = v35;
  if (v35) {
    goto LABEL_39;
  }
}

void sub_19E912614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v22 = *(void **)v20;
  if (*(void *)v20)
  {
    *(void *)(v20 + _Block_object_dispose(&a9, 8) = v22;
    operator delete(v22);
  }
  if (v19) {
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<long long>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(a2);
    size_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v7 = &v4[8 * v6];
    uint64_t v8 = (char *)*a1;
    int v9 = (char *)a1[1];
    unint64_t v10 = v5;
    if (v9 != *a1)
    {
      unint64_t v10 = v5;
      do
      {
        uint64_t v11 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t anonymous namespace'::makeTensorBufferFromTensor(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v6, *(const void **)v2, *(void *)(v2 + 8), (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 3);
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v3 = MIL::IRTensorBufferValueType::MakeWithShape();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  return v3;
}

void sub_19E912830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

MIL::IRDictionaryValue *std::unique_ptr<MIL::IRDictionaryValue const>::reset[abi:ne180100](MIL::IRDictionaryValue **a1)
{
  unint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    MIL::IRDictionaryValue::~IRDictionaryValue(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t std::__shared_ptr_pointer<MIL::IRDictionaryValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7EDC3)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<MIL::IRDictionaryValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t std::__shared_ptr_pointer<MIL::IRTensorValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7ED2ALL)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<MIL::IRTensorValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void sub_19E912CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E912E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E912F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9132D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9134F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<CoreML::MultiArrayBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD7A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<CoreML::MultiArrayBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD7A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19E913628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9136F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E913958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v20) {
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2458(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2459(uint64_t a1)
{
}

void sub_19E913D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v28 - 136), 8);

  _Unwind_Resume(a1);
}

void sub_19E913EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E913FE8(_Unwind_Exception *a1)
{
  size_t v5 = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  MEMORY[0x19F3C1920](v4, 0x10A0C4077B4ED97);

  _Unwind_Resume(a1);
}

void sub_19E914094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E914314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long buf, int a20,__int16 a21,__int16 a22,void *a23,long long a24)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  MEMORY[0x19F3C1920](v29, 0x10A0C4077B4ED97);
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  if (a2 == 1)
  {
    uint64_t v32 = __cxa_begin_catch(a1);
    uint64_t v33 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      id v39 = [v24 componentsJoinedByString:@","];
      std::string v40 = +[MLMultiArrayUtils stringForDataType:v27];
      char v41 = [v25 componentsJoinedByString:@","];
      uint64_t v42 = (*(uint64_t (**)(void *))(*(void *)v32 + 16))(v32);
      LODWORD(buf) = 138413058;
      *(void *)((char *)&buf + 4) = v39;
      WORD6(buf) = 2112;
      *(void *)((char *)&buf + 14) = v40;
      a22 = 2112;
      a23 = v41;
      LOWORD(a24) = 2080;
      *(void *)((char *)&a24 + 2) = v42;
      _os_log_error_impl(&dword_19E58B000, v33, OS_LOG_TYPE_ERROR, "Failed to allocate MLMultiArray with shape [%@], dataType %@, and strides [%@] due to an error: %s.", (uint8_t *)&buf, 0x2Au);
    }
    id v34 = (void *)MEMORY[0x1E4F1CA00];
    std::string v35 = [v24 componentsJoinedByString:@","];
    std::string::size_type v36 = +[MLMultiArrayUtils stringForDataType:v27];
    uint64_t v37 = [v25 componentsJoinedByString:@","];
    uint64_t v38 = *MEMORY[0x1E4F1C3C8];
    (*(void (**)(void *))(*(void *)v32 + 16))(v32);
    [v34 raise:v38, @"Failed to allocate MLMultiArray with shape [%@], dataType %@, and strides [%@] due to an error: %s." format];

    __cxa_end_catch();
    JUMPOUT(0x19E9142CCLL);
  }

  _Unwind_Resume(a1);
}

void sub_19E914698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9147BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E914B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9150EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E91578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E9159E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E915B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E915C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E915D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E915E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9162F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  _Unwind_Resume(a1);
}

void CoreML::numericVectorFromObjC<unsigned long>(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  std::vector<unsigned long>::reserve((void **)a1, [v3 count]);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(id *)(*((void *)&v22 + 1) + 8 * i);
        uint64_t v9 = [v8 unsignedLongValue];
        uint64_t v10 = v9;
        uint64_t v12 = *(uint64_t **)(a1 + 8);
        unint64_t v11 = *(void *)(a1 + 16);
        if ((unint64_t)v12 >= v11)
        {
          unint64_t v14 = *(uint64_t **)a1;
          uint64_t v15 = ((uint64_t)v12 - *(void *)a1) >> 3;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v11 - (void)v14;
          if (v17 >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 16, v18);
            unint64_t v14 = *(uint64_t **)a1;
            uint64_t v12 = *(uint64_t **)(a1 + 8);
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v20 = (uint64_t *)&v19[8 * v15];
          uint64_t *v20 = v10;
          uint64_t v13 = v20 + 1;
          while (v12 != v14)
          {
            uint64_t v21 = *--v12;
            *--uint64_t v20 = v21;
          }
          *(void *)a1 = v20;
          *(void *)(a1 + _Block_object_dispose(&a9, 8) = v13;
          *(void *)(a1 + 16) = &v19[8 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          uint64_t *v12 = v9;
          uint64_t v13 = v12 + 1;
        }
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v13;
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v5);
  }
}

void sub_19E9165E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v13 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + _Block_object_dispose(&a9, 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

void sub_19E9169EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<CoreML::MultiArrayBuffer,std::allocator<CoreML::MultiArrayBuffer>,std::vector<unsigned long> &,CoreML::ScalarType &,CoreML::StorageOrder &,int,void>(uint64_t *a1, unint64_t **a2, int a3, int a4, int a5)
{
  uint64_t v10 = operator new(0x88uLL);
  v10[1] = 0;
  void v10[2] = 0;
  *uint64_t v10 = &unk_1EF0DD7A0;
  uint64_t result = CoreML::MultiArrayBuffer::MultiArrayBuffer((uint64_t)(v10 + 3), a2, a3, a4, a5);
  *a1 = result;
  a1[1] = (uint64_t)v10;
  return result;
}

void sub_19E916B50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_19E916C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_48c53_ZTSNSt3__110shared_ptrIN6CoreML16MultiArrayBufferEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_48c53_ZTSNSt3__110shared_ptrIN6CoreML16MultiArrayBufferEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 4_Block_object_dispose(&a9, 8) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

id CoreML::numericArrayToObjC<std::vector<unsigned long>,unsigned long>(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:(uint64_t)(a1[1] - *a1) >> 3];
  id v3 = (void *)*a1;
  id v4 = (void *)a1[1];
  if ((void *)*a1 != v4)
  {
    do
    {
      uint64_t v5 = [NSNumber numberWithUnsignedLong:*v3];
      [v2 addObject:v5];

      ++v3;
    }
    while (v3 != v4);
  }

  return v2;
}

void sub_19E916CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::flattenNestedArrayIntoBuffer(_anonymous_namespace_ *this, NSArray *a2, void *a3, void *a4, MLMultiArrayBufferLayout *a5, MLMultiArrayDataType a6)
{
  uint64_t v10 = this;
  id v11 = a4;
  uint64_t v12 = v11;
  uint64_t v13 = 0;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2020000000;
  v20[3] = 0;
  if ((uint64_t)a5 > 65599)
  {
    if (a5 == (MLMultiArrayBufferLayout *)131104)
    {
      unint64_t v14 = v16;
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      uint64_t v15 = ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke_4;
      goto LABEL_10;
    }
    if (a5 == (MLMultiArrayBufferLayout *)65600)
    {
      unint64_t v14 = v19;
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      uint64_t v15 = ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke;
      goto LABEL_10;
    }
  }
  else
  {
    if (a5 == (MLMultiArrayBufferLayout *)65552)
    {
      unint64_t v14 = v17;
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      uint64_t v15 = ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke_3;
      goto LABEL_10;
    }
    if (a5 == (MLMultiArrayBufferLayout *)65568)
    {
      unint64_t v14 = v18;
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      uint64_t v15 = ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke_2;
LABEL_10:
      v14[2] = v15;
      v14[3] = &unk_1E59A3CB8;
      v14[6] = a2;
      v14[7] = a3;
      v14[4] = v11;
      v14[5] = v20;
      uint64_t v13 = _Block_copy(v14);
    }
  }
  _Block_object_dispose(v20, 8);
}

void sub_19E916F14(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v4 - 96), 8);

  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = *(void *)(a1[5] + 8);
  id v8 = v3;
  id v9 = v6;
  long long v22 = v8;
  uint64_t v10 = [v8 firstObject];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    uint64_t v12 = *(void *)(v7 + 24);
    uint64_t v27 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v13 = v8;
    uint64_t v14 = [v13 countByEnumeratingWithState:&v23 objects:v28 count:16];
    uint64_t v21 = v7;
    if (v14)
    {
      uint64_t v15 = 0;
      uint64_t v16 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v24 != v16) {
            objc_enumerationMutation(v13);
          }
          id v18 = *(id *)(*((void *)&v23 + 1) + 8 * i);
          if (!v27)
          {
            uint64_t v15 = [v9 offsetOfScalarAtIndex:v12 + i contiguousScalars:&v27];
            if (v5 < 8 * (v27 + v15))
            {
              id v20 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"Out of bound buffer write in copying NSArray<NSNumber> to MLMultiArray." userInfo:0];
              objc_exception_throw(v20);
            }
          }
          objc_msgSend(v18, "doubleValue", v21);
          *(void *)(v4 + 8 * v15) = v19;
          --v27;

          ++v15;
        }
        uint64_t v14 = [v13 countByEnumeratingWithState:&v23 objects:v28 count:16];
        v12 += i;
      }
      while (v14);
    }

    *(void *)(v21 + 24) = v12;
  }
}

void sub_19E917144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke_2(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = *(void *)(a1[5] + 8);
  id v8 = v3;
  id v9 = v6;
  long long v22 = v8;
  uint64_t v10 = [v8 firstObject];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    uint64_t v12 = *(void *)(v7 + 24);
    uint64_t v27 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v13 = v8;
    uint64_t v14 = [v13 countByEnumeratingWithState:&v23 objects:v28 count:16];
    uint64_t v21 = v7;
    if (v14)
    {
      uint64_t v15 = 0;
      uint64_t v16 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v24 != v16) {
            objc_enumerationMutation(v13);
          }
          id v18 = *(id *)(*((void *)&v23 + 1) + 8 * i);
          if (!v27)
          {
            uint64_t v15 = [v9 offsetOfScalarAtIndex:v12 + i contiguousScalars:&v27];
            if (v5 < 4 * (v27 + v15))
            {
              id v20 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"Out of bound buffer write in copying NSArray<NSNumber> to MLMultiArray." userInfo:0];
              objc_exception_throw(v20);
            }
          }
          objc_msgSend(v18, "floatValue", v21);
          *(_DWORD *)(v4 + 4 * v15) = v19;
          --v27;

          ++v15;
        }
        uint64_t v14 = [v13 countByEnumeratingWithState:&v23 objects:v28 count:16];
        v12 += i;
      }
      while (v14);
    }

    *(void *)(v21 + 24) = v12;
  }
}

void sub_19E9173A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke_3(void *a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = *(void *)(a1[5] + 8);
  id v8 = v3;
  id v9 = v6;
  long long v26 = v8;
  uint64_t v10 = [v8 firstObject];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    uint64_t v12 = *(void *)(v7 + 24);
    uint64_t v31 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v13 = v8;
    uint64_t v14 = [v13 countByEnumeratingWithState:&v27 objects:v32 count:16];
    uint64_t v25 = v7;
    if (v14)
    {
      uint64_t v15 = 0;
      uint64_t v16 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v28 != v16) {
            objc_enumerationMutation(v13);
          }
          id v18 = *(id *)(*((void *)&v27 + 1) + 8 * i);
          if (!v31)
          {
            uint64_t v15 = [v9 offsetOfScalarAtIndex:v12 + i contiguousScalars:&v31];
            if (v5 < 2 * (v31 + v15))
            {
              id v24 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"Out of bound buffer write in copying NSArray<NSNumber> to MLMultiArray." userInfo:0];
              objc_exception_throw(v24);
            }
          }
          objc_msgSend(v18, "floatValue", v25);
          __asm { FCVT            H0, S0 }
          *(_WORD *)(v4 + 2 * v15) = _S0;
          --v31;

          ++v15;
        }
        uint64_t v14 = [v13 countByEnumeratingWithState:&v27 objects:v32 count:16];
        v12 += i;
      }
      while (v14);
    }

    *(void *)(v25 + 24) = v12;
  }
}

void sub_19E917610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_128flattenNestedArrayIntoBufferEP7NSArrayPvmP24MLMultiArrayBufferLayout20MLMultiArrayDataType_block_invoke_4(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = *(void *)(a1[5] + 8);
  id v8 = v3;
  id v9 = v6;
  uint64_t v21 = v8;
  uint64_t v10 = [v8 firstObject];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    uint64_t v12 = *(void *)(v7 + 24);
    uint64_t v26 = 0;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v13 = v8;
    uint64_t v14 = [v13 countByEnumeratingWithState:&v22 objects:v27 count:16];
    uint64_t v20 = v7;
    if (v14)
    {
      uint64_t v15 = 0;
      uint64_t v16 = *(void *)v23;
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v23 != v16) {
            objc_enumerationMutation(v13);
          }
          id v18 = *(id *)(*((void *)&v22 + 1) + 8 * i);
          if (!v26)
          {
            uint64_t v15 = [v9 offsetOfScalarAtIndex:v12 + i contiguousScalars:&v26];
            if (v5 < 4 * (v26 + v15))
            {
              id v19 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"Out of bound buffer write in copying NSArray<NSNumber> to MLMultiArray." userInfo:0];
              objc_exception_throw(v19);
            }
          }
          *(_DWORD *)(v4 + 4 * v15) = objc_msgSend(v18, "integerValue", v20);
          --v26;

          ++v15;
        }
        uint64_t v14 = [v13 countByEnumeratingWithState:&v22 objects:v27 count:16];
        v12 += i;
      }
      while (v14);
    }

    *(void *)(v20 + 24) = v12;
  }
}

void sub_19E917874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::traverseNestedArrayInPreOrder(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  id v5 = v3;
  id v18 = v5;
  uint64_t v19 = 0;
  std::deque<std::pair<NSArray * {__strong},unsigned long>>::push_back(&v20, (uint64_t *)&v18);

  uint64_t v6 = *((void *)&v22 + 1);
  if (*((void *)&v22 + 1))
  {
    while (1)
    {
      uint64_t v7 = v6 - 1;
      uint64_t v8 = *(void *)(*((void *)&v20 + 1) + (((unint64_t)(v6 - 1 + v22) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (v6 - 1 + v22);
      id v9 = *(id *)v8;
      unint64_t v12 = *(void *)(v8 + 8);
      id v11 = (void *)(v8 + 8);
      unint64_t v10 = v12;
      if (!v12)
      {
        LOBYTE(v1_Block_object_dispose(&a9, 8) = 0;
        v4[2](v4, v9, v7, &v18);
        if ((_BYTE)v18) {
          break;
        }
      }
      unint64_t v13 = [v9 count];
      unint64_t v14 = v13;
      if (v10 == v13)
      {
        objc_release(*(id *)(*(void *)(*((void *)&v20 + 1)
                                       + (((unint64_t)(*((void *)&v22 + 1) + v22 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (BYTE8(v22) + v22 - 1)));
        if ((void)v21 == *((void *)&v20 + 1)) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = 32 * (v21 - *((void *)&v20 + 1)) - 1;
        }
        if ((unint64_t)(v15 - (--*((void *)&v22 + 1) + v22)) >= 0x200)
        {
          operator delete(*(void **)(v21 - 8));
          *(void *)&long long v21 = v21 - 8;
        }
      }
      else if (v10 < v13)
      {
        while (1)
        {
          ++*v11;
          uint64_t v16 = [v9 objectAtIndexedSubscript:v10];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();

          if (isKindOfClass) {
            break;
          }
          if (v14 == ++v10) {
            goto LABEL_15;
          }
        }
        id v18 = [v9 objectAtIndexedSubscript:v10];
        uint64_t v19 = 0;
        std::deque<std::pair<NSArray * {__strong},unsigned long>>::push_back(&v20, (uint64_t *)&v18);
      }
LABEL_15:

      uint64_t v6 = *((void *)&v22 + 1);
      if (!*((void *)&v22 + 1)) {
        goto LABEL_18;
      }
    }
  }
LABEL_18:
  std::deque<std::pair<NSArray * {__strong},unsigned long>>::~deque[abi:ne180100]((uint64_t)&v20);
}

void sub_19E917AE4(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);

  std::deque<std::pair<NSArray * {__strong},unsigned long>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<NSArray * {__strong},unsigned long>>::push_back(void *a1, uint64_t *a2)
{
  uint64_t v4 = (char *)a1[2];
  id v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 32 * (v4 - v5) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x100)
    {
      a1[4] = v8 - 256;
      uint64_t v12 = *(void *)v5;
      unint64_t v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v41);
          char v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          uint64_t v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            uint64_t v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            char v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)char v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          uint64_t v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          long long v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            long long v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            long long v22 = (char *)a1[1];
          }
          uint64_t v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(void *)uint64_t v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      id v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    uint64_t v23 = v6 >> 3;
    long long v24 = (char *)a1[3];
    long long v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      long long v27 = operator new(0x1000uLL);
      uint64_t v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          std::string::size_type v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v51);
          id v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          int v55 = (uint64_t *)a1[1];
          uint64_t v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            uint64_t v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            std::string v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)std::string v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            id v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v28;
        int v62 = (char *)a1[1];
        std::string v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v99 = 1;
            }
            else {
              unint64_t v99 = (uint64_t)&v63[-*a1] >> 2;
            }
            v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v99);
            v102 = &v100[8 * (v99 >> 2)];
            v103 = (uint64_t *)a1[1];
            std::string v63 = v102;
            uint64_t v104 = a1[2] - (void)v103;
            if (v104)
            {
              std::string v63 = &v102[v104 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v105 = 8 * (v104 >> 3);
              v106 = &v100[8 * (v99 >> 2)];
              do
              {
                uint64_t v107 = *v103++;
                *(void *)v106 = v107;
                v106 += 8;
                v105 -= 8;
              }
              while (v105);
            }
            v108 = (char *)*a1;
            *a1 = v100;
            a1[1] = v102;
            a1[2] = v63;
            a1[3] = &v100[8 * v101];
            if (v108)
            {
              operator delete(v108);
              std::string v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            int v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              int v62 = (char *)a1[1];
            }
            std::string v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)std::string v63 = v64;
      }
      else
      {
        *(void *)uint64_t v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v29);
    uint64_t v32 = v31;
    uint64_t v33 = &v30[8 * v23];
    *(void *)&long long v34 = v30;
    *((void *)&v34 + 1) = v33;
    long long v112 = v34;
    std::string v35 = operator new(0x1000uLL);
    *(void *)&long long v36 = v33;
    *((void *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      uint64_t v37 = 8 * v23;
      *(void *)&long long v38 = v112;
      if (v6 >= 1)
      {
        uint64_t v39 = v37 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v33 -= 8 * (v40 >> 1);
        *(void *)&long long v36 = v33;
        *((void *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      uint64_t v73 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1;
      }
      else {
        unint64_t v74 = v73;
      }
      v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v74);
      uint64_t v33 = &v75[8 * (v74 >> 2)];
      *(void *)&long long v38 = v75;
      *((void *)&v38 + 1) = v33;
      *(void *)&long long v36 = v33;
      *((void *)&v36 + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      long long v109 = v36;
      long long v112 = v38;
      operator delete(v30);
      long long v36 = v109;
    }
    long long v38 = v112;
LABEL_56:
    *(void *)uint64_t v33 = v35;
    *(void *)&long long v36 = v36 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      v78 = (void *)*((void *)&v38 + 1);
      if (*((void *)&v38 + 1) == (void)v38)
      {
        int v80 = (unsigned char *)v36;
        if ((unint64_t)v36 >= *((void *)&v36 + 1))
        {
          if (*((void *)&v36 + 1) == *((void *)&v38 + 1)) {
            unint64_t v85 = 1;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v36 + 1) - *((void *)&v38 + 1)) >> 2;
          }
          v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v85);
          v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          uint64_t v89 = v80 - (unsigned char *)v78;
          if (v80 != (unsigned char *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v90 = 8 * (v89 >> 3);
            v91 = v79;
            v92 = v78;
            do
            {
              uint64_t v93 = *v92++;
              *(void *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(void *)&long long v38 = v86;
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = v88;
          *((void *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            long long v110 = v36;
            long long v114 = v38;
            operator delete(v78);
            long long v36 = v110;
            long long v38 = v114;
          }
        }
        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v36 + 8 * (v82 >> 1);
          v79 = (char *)(v84 - (v36 - *((void *)&v38 + 1)));
          if ((void)v36 == *((void *)&v38 + 1))
          {
            int v80 = (unsigned char *)*((void *)&v38 + 1);
          }
          else
          {
            uint64_t v111 = *((void *)&v36 + 1);
            uint64_t v113 = v38;
            memmove((void *)(v84 - (v36 - *((void *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((void *)&v38 + 1));
            *((void *)&v36 + 1) = v111;
            *(void *)&long long v38 = v113;
          }
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = &v80[8 * v83];
        }
      }
      else
      {
        v79 = (char *)*((void *)&v38 + 1);
      }
      uint64_t v94 = *(void *)(i - 8);
      *((void *)v79 - 1) = v94;
      *((void *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95) {
      operator delete(v95);
    }
    goto LABEL_83;
  }
LABEL_84:
  v96 = (void *)(*(void *)&v5[(v9 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v9);
  uint64_t v97 = *a2;
  uint64_t v98 = a2[1];
  *a2 = 0;
  void *v96 = v97;
  v96[1] = v98;
  ++a1[5];
}

void sub_19E918098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<NSArray * {__strong},unsigned long>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  id v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    id v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (void **)((char *)*v6 + 16 * v5);
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v5);
    if (v7 != (void **)v8)
    {
      do
      {
        unint64_t v9 = *v7;
        v7 += 2;

        if ((char *)v7 - (unsigned char *)*v6 == 4096)
        {
          unint64_t v10 = (void **)v6[1];
          ++v6;
          uint64_t v7 = v10;
        }
      }
      while (v7 != (void **)v8);
      uint64_t v2 = *(void ***)(a1 + 8);
      id v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      id v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 128;
    goto LABEL_14;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 256;
LABEL_14:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_19E918488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  _Unwind_Resume(a1);
}

void sub_19E9185D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9187B4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  MEMORY[0x19F3C1920](v18, 0x10A0C4077B4ED97);
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  if (a2 == 1)
  {
    int64_t v21 = __cxa_begin_catch(a1);
    long long v22 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v21 + 16))(v21);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v23;
      _os_log_error_impl(&dword_19E58B000, v22, OS_LOG_TYPE_ERROR, "Failed to allocate MLMultiArray. error: %s", (uint8_t *)&buf, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x19E918770);
  }

  _Unwind_Resume(a1);
}

void sub_19E918DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)va);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }

  _Unwind_Resume(a1);
}

void sub_19E918F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E919180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_19E9193FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  kdebug_trace();

  _Unwind_Resume(a1);
}

void sub_19E9194FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E91956C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E919CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  unint64_t v40 = *(void **)(v38 - 96);
  if (v40)
  {
    *(void *)(v38 - 8_Block_object_dispose(&a9, 8) = v40;
    operator delete(v40);
  }
  unint64_t v41 = *(void **)(v38 - 72);
  if (v41)
  {
    *(void *)(v38 - 64) = v41;
    operator delete(v41);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }

  _Unwind_Resume(a1);
}

void sub_19E919E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E919EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E919FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E91A010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E91A19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_19E91A848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E91A974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E91AA30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E91ACC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E91AFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E91B1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  id v18 = va_arg(va1, id);
  _Block_object_dispose(va, 8);

  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_19E91B3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E91B704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E91B84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E91B9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E91BAB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E91BB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E91BBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E91C4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void **a14, std::__shared_weak_count *a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49)
{
  if (*(char *)(v52 - 105) < 0)
  {
    operator delete(*(void **)(v52 - 128));
    int v55 = a13;
    uint64_t v56 = a17;
    if ((v49 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a48);
      if (v51) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      }
      if (__p)
      {
        a37 = (uint64_t)__p;
        operator delete(__p);
      }
      if (a39)
      {
        a40 = (uint64_t)a39;
        operator delete(a39);
      }
      uint64_t v57 = *v56;
      if (*v56)
      {
        a15[3].__shared_owners_ = (uint64_t)v57;
        operator delete(v57);
      }
      uint64_t v58 = *a14;
      if (*a14)
      {
        a15[2].__shared_owners_ = (uint64_t)v58;
        operator delete(v58);
      }
      shared_weak_owners = (std::__shared_weak_count *)a15[1].__shared_weak_owners_;
      if (shared_weak_owners) {
        std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
      }
      std::__shared_weak_count::~__shared_weak_count(a15);
      operator delete(v60);
      *(void *)(v52 - 12_Block_object_dispose(&a9, 8) = &a30;
      std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 128));
      if (a2 == 2)
      {
        v61 = __cxa_begin_catch(a1);
        int v62 = (void *)MEMORY[0x1E4F1CA00];
        std::string v63 = [NSString stringWithUTF8String:(*(uint64_t (**)(void *))(*(void *)v61 + 16))(v61)];
        id v64 = [v62 exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:v63 userInfo:0];

        objc_exception_throw(v64);
      }
      if (a2 == 1)
      {
        uint64_t v65 = __cxa_begin_catch(a1);
        uint64_t v66 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
        {
          uint64_t v67 = (*(uint64_t (**)(void *))(*(void *)v65 + 16))(v65);
          *(_DWORD *)(v52 - 12_Block_object_dispose(&a9, 8) = 136315138;
          *(void *)(v52 - 124) = v67;
          _os_log_error_impl(&dword_19E58B000, v66, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)(v52 - 128), 0xCu);
        }

        __cxa_rethrow();
      }

      _Unwind_Resume(a1);
    }
  }
  else
  {
    int v55 = a13;
    uint64_t v56 = a17;
    if (!v49) {
      goto LABEL_6;
    }
  }
  __cxa_free_exception(v50);
  goto LABEL_6;
}

void sub_19E91C8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  JUMPOUT(0x19E91C948);
}

void sub_19E91C90C()
{
  __cxa_end_catch();
  JUMPOUT(0x19E91C924);
}

void std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer<std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>>(std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>,std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>,unsigned long,CoreML::ScalarType,CoreML::StorageOrder)::{lambda(unsigned char *)#1},std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6CoreML16MultiArrayBufferC1INSt3__111__wrap_iterIPNS2_10shared_ptrIKS0_EEEEEET_S9_mNS_10ScalarTypeENS_12StorageOrderEEUlPhE_"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer<std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>>(std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>,std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>,unsigned long,CoreML::ScalarType,CoreML::StorageOrder)::{lambda(unsigned char *)#1},std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x19F3C1900);
  }
  return result;
}

void std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer<std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>>(std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>,std::__wrap_iter<std::shared_ptr<CoreML::MultiArrayBuffer const> *>,unsigned long,CoreML::ScalarType,CoreML::StorageOrder)::{lambda(unsigned char *)#1},std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t CoreML::shapeToString(uint64_t a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  char v12 = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v12, 1);
  if (*a2 != a2[1])
  {
    std::ostream::operator<<();
    uint64_t v3 = *a2;
    uint64_t v4 = a2[1];
    if (*a2 != v4)
    {
      char v5 = 1;
      do
      {
        if ((v5 & 1) == 0)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
          std::ostream::operator<<();
        }
        char v5 = 0;
        v3 += 8;
      }
      while (v3 != v4);
    }
  }
  char v12 = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v12, 1);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v9[0] = v6;
  v9[1] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19F3C1850](&v11);
}

void sub_19E91CC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19E91CD10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E91D074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_19E91D3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_19E91D66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E91D6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend::WriteMetadata(CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend *this, OArchive *a2)
{
  uint64_t v3 = (*(uint64_t (**)(CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend *))(*(void *)this + 24))(this);
  uint64_t v4 = std::map<std::string,std::string>::at(v3 + 80, (void *)(v3 + 32));
  uint64_t v5 = *(unsigned __int8 *)(v4 + 313);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 312);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 316);
  std::string::basic_string[abi:ne180100]<0>(__p, "neural_network_optionals");
  uint64_t v8 = OArchive::nestedArchive((char *)a2, (uint64_t)__p);
  LOBYTE(v21[0]) = *v8;
  unint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 2);
  v21[1] = *((void **)v8 + 1);
  long long v22 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::map<std::string,OArchive>::map[abi:ne180100]((uint64_t)v23, (void *)v8 + 3);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  operator<<((uint64_t)v21, v5);
  operator<<<std::string>((uint64_t)v21, (uint64_t *)(v4 + 184));
  operator<<((uint64_t)v21, v6);
  operator<<((uint64_t)v21, v7);
  operator<<<std::string,float>((uint64_t)v21, (void *)(v4 + 248));
  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(v23[1]);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  char v10 = *(void **)(v4 + 232);
  std::string::basic_string[abi:ne180100]<0>(v21, "model");
  uint64_t v11 = OArchive::nestedArchive((char *)a2, (uint64_t)v21);
  uint64_t v12 = operator<<<std::string,float>((uint64_t)v11, v10);
  uint64_t v13 = operator<<<std::string,float>(v12, v10 + 3);
  uint64_t v14 = operator<<<std::string,float>(v13, v10 + 6);
  uint64_t v15 = operator<<<std::string,float>(v14, v10 + 9);
  uint64_t v16 = operator<<<std::string,float>(v15, v10 + 12);
  uint64_t v17 = operator<<<std::string,float>(v16, v10 + 15);
  uint64_t v18 = operator<<<std::string,float>(v17, v10 + 18);
  operator<<<std::string,float>(v18, v10 + 21);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
}

void sub_19E91D8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v17, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x88uLL);
    uint64_t v8 = (std::string *)(v6 + 32);
    unint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *((_DWORD *)v6 + 14) = 1065353216;
    *(void *)(v6 + 76) = 0;
    *(void *)(v6 + 6_Block_object_dispose(&a9, 8) = 0;
    *((_DWORD *)v6 + 21) = 0;
    *(void *)(v6 + 60) = 0x100000000;
    *((_DWORD *)v6 + 32) = 0;
    *((void *)v6 + 14) = 0;
    *((void *)v6 + 15) = 0;
    *((void *)v6 + 11) = 0;
    *((void *)v6 + 12) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *((void *)v6 + 13) = _D0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v17, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_19E91D9F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::auto_optimize_options::~auto_optimize_options(void **this)
{
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  uint64_t v2 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_19E91DAF8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v6 = (long long *)__str;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  long long v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < a4)
  {
    if (v10)
    {
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a1);
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v13);
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(v9, v6, a3, *(std::string **)(a1 + 8));
LABEL_17:
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = v14;
    return;
  }
  uint64_t v15 = *(std::string **)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v10) >> 3) < a4)
  {
    uint64_t v16 = (long long *)(&__str->__r_.__value_.__l.__data_ + (((char *)v15 - (char *)v10) >> 3));
    if (v15 != v10)
    {
      uint64_t v17 = 8 * (((char *)v15 - (char *)v10) >> 3);
      do
      {
        std::string::operator=(v10, (const std::string *)v6);
        uint64_t v6 = (long long *)((char *)v6 + 24);
        ++v10;
        v17 -= 24;
      }
      while (v17);
      long long v10 = *(std::string **)(a1 + 8);
    }
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(v9, v16, a3, v10);
    goto LABEL_17;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(v10, (const std::string *)v6);
      uint64_t v6 = (long long *)((char *)v6 + 24);
      ++v10;
    }
    while (v6 != a3);
    uint64_t v15 = *(std::string **)(a1 + 8);
  }
  while (v15 != v10)
  {
    if (SHIBYTE(v15[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15[-1].__r_.__value_.__l.__data_);
    }
    --v15;
  }
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v10;
}

void sub_19E91DCB8(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&a9, 8) = v2;
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(uint64_t **)a1;
    uint64_t v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v6[1]) {
      uint64_t v9 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v9 = v6;
    }
    long long v24 = (uint64_t *)a1;
    long long v25 = v9;
    uint64_t v26 = v9;
    if (v9)
    {
      long long v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        long long v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 4));
          long long v11 = *(_OWORD *)(v10 + 7);
          long long v12 = *(_OWORD *)(v10 + 9);
          void v9[11] = v10[11];
          *(_OWORD *)(v9 + 9) = v12;
          *(_OWORD *)(v9 + 7) = v11;
          if (v9 != v10) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v9 + 96, (char *)v10[12], v10[13], (v10[13] - v10[12]) >> 2);
          }
          unint64_t v13 = *v8;
          uint64_t v14 = (uint64_t **)(a1 + 8);
          uint64_t v15 = (uint64_t **)(a1 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                uint64_t v14 = (uint64_t **)v13;
                if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v26 + 4, v13 + 4)) {
                  break;
                }
                unint64_t v13 = *v14;
                uint64_t v15 = v14;
                if (!*v14) {
                  goto LABEL_16;
                }
              }
              unint64_t v13 = v14[1];
            }
            while (v13);
            uint64_t v15 = v14 + 1;
          }
LABEL_16:
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v14, v15, v26);
          uint64_t v9 = v25;
          uint64_t v26 = v25;
          if (v25) {
            long long v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v25);
          }
          uint64_t v16 = (uint64_t *)v10[1];
          if (v16)
          {
            do
            {
              a2 = v16;
              uint64_t v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v10[2];
              BOOL v17 = *a2 == (void)v10;
              long long v10 = a2;
            }
            while (!v17);
          }
          if (!v9) {
            break;
          }
          long long v10 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v24);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__construct_node<std::pair<std::string const,Espresso::layer_shape> const&>((uint64_t)&v24, a1, (uint64_t)(a2 + 4));
      uint64_t v18 = v24;
      uint64_t v19 = *(uint64_t **)(a1 + 8);
      char v20 = (uint64_t **)(a1 + 8);
      int64_t v21 = (uint64_t **)(a1 + 8);
      if (v19)
      {
        do
        {
          while (1)
          {
            char v20 = (uint64_t **)v19;
            if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v18 + 4, v19 + 4)) {
              break;
            }
            uint64_t v19 = *v20;
            int64_t v21 = v20;
            if (!*v20) {
              goto LABEL_33;
            }
          }
          uint64_t v19 = v20[1];
        }
        while (v19);
        int64_t v21 = v20 + 1;
      }
LABEL_33:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v20, v21, v18);
      long long v24 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)&v24);
      long long v22 = (uint64_t *)a2[1];
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          long long v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = (uint64_t *)a2[2];
          BOOL v17 = *v23 == (void)a2;
          a2 = v23;
        }
        while (!v17);
      }
      a2 = v23;
    }
    while (v23 != a3);
  }
}

void sub_19E91DF0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v2);
  }
  return a1;
}

void *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__construct_node<std::pair<std::string const,Espresso::layer_shape> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x78uLL);
  uint64_t v7 = v6;
  *(void *)a1 = v6;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 32), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  *((void *)v7 + 12) = 0;
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v7 + 72) = *(_OWORD *)(a3 + 40);
  uint64_t v8 = *(const void **)(a3 + 64);
  *((void *)v7 + 11) = *(void *)(a3 + 56);
  *((void *)v7 + 13) = 0;
  *((void *)v7 + 14) = 0;
  uint64_t result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)v7 + 12, v8, *(void *)(a3 + 72), (uint64_t)(*(void *)(a3 + 72) - (void)v8) >> 2);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_19E91E01C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E91E158(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

char *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::net_configuration>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::net_configuration>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(void **)(a1 + 56));
  uint64_t v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t std::map<std::string,Espresso::layer_shape>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = (void *)v3;
      if (*(void *)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void **)(a1 + 8);
      uint64_t v9 = (void *)v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          uint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          uint64_t v16 = (void *)v3;
          unint64_t v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__construct_node<std::pair<std::string const,Espresso::layer_shape> const&>((uint64_t)v15, a1, (uint64_t)(v5 + 4));
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15[0]);
          v15[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
          goto LABEL_15;
        }
        uint64_t v16 = v7;
        unint64_t v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        unint64_t v11 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v16, v5 + 4);
      }
      if (!*v11) {
        goto LABEL_14;
      }
LABEL_15:
      long long v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          unint64_t v13 = v12;
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unint64_t v13 = (void *)v5[2];
          BOOL v10 = *v13 == (void)v5;
          uint64_t v5 = v13;
        }
        while (!v10);
      }
      uint64_t v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_19E91E520(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::net_configuration>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend::WriteModelOutputs(uint64_t *a1, void *a2)
{
  unint64_t v46 = 0;
  uint64_t v3 = *a1;
  if (*(void *)(*a1 + 40) != *(void *)(*a1 + 32))
  {
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = -1;
      do
      {
        uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v3 + 96), v6, &v46);
        if (++v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[4] - v9[3]) >> 3)) {
          goto LABEL_80;
        }
        BOOL v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(*a1 + 96), v6, &v46);
        unint64_t v11 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2, (unsigned __int8 *)(v10[3] + v7));
        uint64_t v3 = *a1;
        v7 += 24;
      }
      while (!v11);
      uint64_t v12 = *(void *)(*(void *)(*(void *)(v3 + 32) + 16 * v6) + 64);
      std::string::basic_string[abi:ne180100]<0>(__p, "is_output");
      unint64_t v13 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
      unint64_t v14 = v13;
      unint64_t v15 = *(void *)(v12 + 248);
      if (v15)
      {
        uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
        v16.i16[0] = vaddlv_u8(v16);
        unint64_t v17 = v16.u32[0];
        if (v16.u32[0] > 1uLL)
        {
          unint64_t v2 = v13;
          if (v13 >= v15) {
            unint64_t v2 = v13 % v15;
          }
        }
        else
        {
          unint64_t v2 = (v15 - 1) & v13;
        }
        uint64_t v18 = *(void ***)(*(void *)(v12 + 240) + 8 * v2);
        if (v18)
        {
          for (uint64_t i = *v18; i; uint64_t i = *(void **)i)
          {
            unint64_t v20 = *((void *)i + 1);
            if (v20 == v14)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)__p))
              {
                goto LABEL_78;
              }
            }
            else
            {
              if (v17 > 1)
              {
                if (v20 >= v15) {
                  v20 %= v15;
                }
              }
              else
              {
                v20 &= v15 - 1;
              }
              if (v20 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t i = operator new(0x30uLL);
      int64_t v21 = (void *)(v12 + 256);
      *(void *)uint64_t i = 0;
      *((void *)i + 1) = v14;
      *((void *)i + 4) = v45;
      *((_OWORD *)i + 1) = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v45 = 0;
      *((_DWORD *)i + 10) = 0;
      float v22 = (float)(unint64_t)(*(void *)(v12 + 264) + 1);
      float v23 = *(float *)(v12 + 272);
      if (!v15 || (float)(v23 * (float)v15) < v22) {
        break;
      }
LABEL_68:
      uint64_t v40 = *(void *)(v12 + 240);
      unint64_t v41 = *(void **)(v40 + 8 * v2);
      if (v41)
      {
        *(void *)uint64_t i = *v41;
LABEL_76:
        *unint64_t v41 = i;
        goto LABEL_77;
      }
      *(void *)uint64_t i = *v21;
      *int64_t v21 = i;
      *(void *)(v40 + 8 * v2) = v21;
      if (*(void *)i)
      {
        unint64_t v42 = *(void *)(*(void *)i + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v42 >= v15) {
            v42 %= v15;
          }
        }
        else
        {
          v42 &= v15 - 1;
        }
        unint64_t v41 = (void *)(*(void *)(v12 + 240) + 8 * v42);
        goto LABEL_76;
      }
LABEL_77:
      ++*(void *)(v12 + 264);
LABEL_78:
      *((_DWORD *)i + 10) = 1;
      if (SHIBYTE(v45) < 0) {
        operator delete(__p[0]);
      }
LABEL_80:
      unint64_t v46 = ++v6;
      uint64_t v3 = *a1;
      if (v6 >= (uint64_t)(*(void *)(*a1 + 40) - *(void *)(*a1 + 32)) >> 4) {
        return;
      }
    }
    BOOL v24 = (v15 & (v15 - 1)) != 0;
    if (v15 < 3) {
      BOOL v24 = 1;
    }
    unint64_t v25 = v24 | (2 * v15);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    else {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v15 = *(void *)(v12 + 248);
    if (*(void *)&prime > v15) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v15)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(v12 + 264) / *(float *)(v12 + 272));
      if (v15 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (*(void *)&prime <= v34) {
        int8x8_t prime = (int8x8_t)v34;
      }
      if (*(void *)&prime >= v15)
      {
        unint64_t v15 = *(void *)(v12 + 248);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v28 = operator new(8 * *(void *)&prime);
          unint64_t v29 = *(void **)(v12 + 240);
          *(void *)(v12 + 240) = v28;
          if (v29) {
            operator delete(v29);
          }
          uint64_t v30 = 0;
          *(int8x8_t *)(v12 + 24_Block_object_dispose(&a9, 8) = prime;
          do
            *(void *)(*(void *)(v12 + 240) + 8 * v30++) = 0;
          while (*(void *)&prime != v30);
          uint64_t v31 = (void *)*v21;
          if (*v21)
          {
            unint64_t v32 = v31[1];
            uint8x8_t v33 = (uint8x8_t)vcnt_s8(prime);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] > 1uLL)
            {
              if (v32 >= *(void *)&prime) {
                v32 %= *(void *)&prime;
              }
            }
            else
            {
              v32 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(v12 + 240) + 8 * v32) = v21;
            uint64_t v37 = (void *)*v31;
            if (*v31)
            {
              do
              {
                unint64_t v38 = v37[1];
                if (v33.u32[0] > 1uLL)
                {
                  if (v38 >= *(void *)&prime) {
                    v38 %= *(void *)&prime;
                  }
                }
                else
                {
                  v38 &= *(void *)&prime - 1;
                }
                if (v38 != v32)
                {
                  uint64_t v39 = *(void *)(v12 + 240);
                  if (!*(void *)(v39 + 8 * v38))
                  {
                    *(void *)(v39 + 8 * v3_Block_object_dispose(&a9, 8) = v31;
                    goto LABEL_59;
                  }
                  void *v31 = *v37;
                  *uint64_t v37 = **(void **)(*(void *)(v12 + 240) + 8 * v38);
                  **(void **)(*(void *)(v12 + 240) + 8 * v3_Block_object_dispose(&a9, 8) = v37;
                  uint64_t v37 = v31;
                }
                unint64_t v38 = v32;
LABEL_59:
                uint64_t v31 = v37;
                uint64_t v37 = (void *)*v37;
                unint64_t v32 = v38;
              }
              while (v37);
            }
          }
          unint64_t v15 = (unint64_t)prime;
          goto LABEL_63;
        }
        uint64_t v43 = *(void **)(v12 + 240);
        *(void *)(v12 + 240) = 0;
        if (v43) {
          operator delete(v43);
        }
        unint64_t v15 = 0;
        *(void *)(v12 + 24_Block_object_dispose(&a9, 8) = 0;
      }
    }
LABEL_63:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        unint64_t v2 = v14 % v15;
      }
      else {
        unint64_t v2 = v14;
      }
    }
    else
    {
      unint64_t v2 = (v15 - 1) & v14;
    }
    goto LABEL_68;
  }
}

void sub_19E91EA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:ne180100](1, v16);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = a1 + 2;
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      unint64_t v34 = (void *)*a1;
      *a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v19 = operator new(8 * *(void *)&prime);
  unint64_t v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  float v22 = (void *)*v12;
  if (*v12)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v23) = v12;
    uint64_t v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*a1 + 8 * v29))
          {
            *(void *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          void *v22 = *v28;
          void *v28 = **(void **)(*a1 + 8 * v29);
          **(void **)(*a1 + 8 * v29) = v28;
          uint64_t v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        float v22 = v28;
        uint64_t v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v30 = *a1;
  uint64_t v31 = *(void **)(*a1 + 8 * v5);
  if (v31)
  {
    *uint64_t i = *v31;
LABEL_72:
    void *v31 = i;
    goto LABEL_73;
  }
  *uint64_t i = *v12;
  void *v12 = i;
  *(void *)(v30 + 8 * v5) = v12;
  if (*i)
  {
    unint64_t v32 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    uint64_t v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_19E91EE88(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  BOOL v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    unint64_t v3 = __p + 3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

void CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend::WriteNetwork(uint64_t a1, void *a2, uint64_t a3)
{
  if ((*(unsigned int (**)(void))(**(void **)(a3 + 8) + 48))(*(void *)(a3 + 8)) == 1)
  {
    unint64_t v6 = (uint64_t **)(*a2 + 472);
    std::string::basic_string[abi:ne180100]<0>(&v25, "in_memory_model");
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
    uint8x8_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, &v25, &v22);
    MEMORY[0x19F3C1430]((char *)v7 + 56, "1");
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    unint64_t v8 = (std::__shared_weak_count *)a2[1];
    uint64_t v23 = *a2;
    uint8x8_t v24 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = +[MLCompilerNeuralNetworkOutput outputWithEspressoNetwork:&v23];
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    setCompiledObject((std::string *)a1, (objc_object *)a3, v9);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "model.espresso.net");
    OArchive::blob(&v22, *(void *)(a3 + 8), (uint64_t)&v25);
    if (*(char *)(v22.__r_.__value_.__r.__words[0] + 623) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a1, *(const std::string::value_type **)(v22.__r_.__value_.__r.__words[0] + 600), *(void *)(v22.__r_.__value_.__r.__words[0] + 608));
    }
    else
    {
      long long v10 = *(_OWORD *)(v22.__r_.__value_.__r.__words[0] + 600);
      *(void *)(a1 + 16) = *(void *)(v22.__r_.__value_.__r.__words[0] + 616);
      *(_OWORD *)a1 = v10;
    }
    if (v22.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v22.__r_.__value_.__l.__size_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v22, "model.espresso.shape");
    OArchive::blob(&__p, *(void *)(a3 + 8), (uint64_t)&v22);
    if (*((char *)__p + 623) < 0) {
      std::string::__init_copy_ctor_external(&v25, *((const std::string::value_type **)__p + 75), *((void *)__p + 76));
    }
    else {
      std::string v25 = *(std::string *)((unsigned char *)__p + 25);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "model.espresso.weights");
    OArchive::blob(&v20, *(void *)(a3 + 8), (uint64_t)&__p);
    if (*(char *)(v20 + 623) < 0) {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v20 + 600), *(void *)(v20 + 608));
    }
    else {
      std::string v22 = *(std::string *)(v20 + 600);
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (v19 < 0) {
      operator delete(__p);
    }
    unint64_t v11 = (std::__shared_weak_count *)a2[1];
    uint64_t v15 = *a2;
    unint64_t v16 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string v14 = *(std::string *)a1;
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v13, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    }
    else {
      std::string v13 = v25;
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v12, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    }
    else {
      std::string v12 = v22;
    }
    Espresso::dump_network();
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
}

void sub_19E91F3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (*(char *)(v39 - 105) < 0) {
    operator delete(*(void **)(v39 - 128));
  }
  if (*(char *)(v39 - 57) < 0) {
    operator delete(*(void **)(v39 - 80));
  }
  if (*(char *)(v38 + 23) < 0) {
    operator delete(*(void **)v38);
  }
  _Unwind_Resume(exception_object);
}

void OArchive::blob(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 16))(&v5, a2, a3);
  unint64_t v4 = v6;
  *a1 = v5;
  a1[1] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_19E9206C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  CoreML::Specification::Kernel::~Kernel((CoreML::Specification::Kernel *)va);

  _Unwind_Resume(a1);
}

void sub_19E920928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_19E920C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E921224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E92147C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getGrayImageDimensionsFromMultiArrayShape(void *a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  id v7 = a1;
  unint64_t v8 = [v7 count];
  uint64_t v9 = 0;
  while (v9 + 2 < (unint64_t)[v7 count])
  {
    long long v10 = [v7 objectAtIndexedSubscript:v9];
    int v11 = [v10 intValue];

    ++v9;
    if (v11 != 1) {
      goto LABEL_6;
    }
  }
  if (v8 <= 1)
  {
LABEL_6:
    if (a4)
    {
      std::string v12 = [v7 componentsJoinedByString:@", "];
      *a4 = +[MLModelErrorUtils genericErrorWithFormat:the first dimensions should have a size of 1."" CFSTR(Invalid array shape [%@]];
    }
    uint64_t v13 = 0;
    goto LABEL_14;
  }
  std::string v14 = objc_msgSend(v7, "objectAtIndexedSubscript:", objc_msgSend(v7, "count") - 1);
  uint64_t v15 = [v14 unsignedIntegerValue];

  unint64_t v16 = objc_msgSend(v7, "objectAtIndexedSubscript:", objc_msgSend(v7, "count") - 2);
  uint64_t v17 = [v16 unsignedIntegerValue];

  if (a2) {
    *a2 = v15;
  }
  if (a3) {
    *a3 = v17;
  }
  uint64_t v13 = 1;
LABEL_14:

  return v13;
}

void sub_19E921618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E921878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E921B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_19E921E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E921FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9220FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E922804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E925454(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_objecta, uint64_t a14, uint64_t a15, void *a16, std::__shared_weak_count *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,char **a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (a2)
  {
    __cxa_free_exception(v57);

    std::unique_ptr<CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters>::reset[abi:ne180100](&a49);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x230]);
    std::unique_ptr<CoreML::NNCompiler::MLClassifierInfo>::reset[abi:ne180100]((CoreML::NNCompiler::MLClassifierInfo **)&a50);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a51);
    if (a56) {
      (*(void (**)(uint64_t))(*(void *)a56 + 8))(a56);
    }

    if (a38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a38);
    }

    if (a17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a17);
    }

    if (a2 == 3)
    {
      std::string v59 = (id *)__cxa_begin_catch(a1);
      if (a20) {
        *a20 = v59[1];
      }
    }
    else
    {
      uint64_t v60 = __cxa_begin_catch(a1);
      if (a2 != 2)
      {
        if (a20)
        {
          *a20 = +[MLModelErrorUtils genericErrorWithFormat:@"Encountered an unexpected error while compiling a neural network model."];
        }
        __cxa_end_catch();
        JUMPOUT(0x19E924F14);
      }
      if (a20)
      {
        v61 = [NSString stringWithUTF8String:(*(uint64_t (**)(void *))(*(void *)v60 + 16))(v60)];
        *a20 = +[MLModelErrorUtils genericErrorWithFormat:@"Encountered an error while compiling a neural network model: %@"];
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x19E924F10);
  }
  _Unwind_Resume(a1);
}

const char *MLModelType_Name(int a1)
{
  if (a1 > 559)
  {
    if (a1 > 899)
    {
      switch(a1)
      {
        case 2000:
          uint64_t result = "MLModelType_textClassifier";
          break;
        case 2001:
          uint64_t result = "MLModelType_wordTagger";
          break;
        case 2002:
          uint64_t result = "MLModelType_visionFeaturePrint";
          break;
        case 2003:
          uint64_t result = "MLModelType_soundAnalysisPreprocessing";
          break;
        case 2004:
          uint64_t result = "MLModelType_gazetteer";
          break;
        case 2005:
          uint64_t result = "MLModelType_wordEmbedding";
          break;
        case 2006:
          uint64_t result = "MLModelType_audioFeaturePrint";
          break;
        default:
          if (a1 == 900)
          {
            uint64_t result = "MLModelType_identity";
          }
          else
          {
            if (a1 != 3000) {
              return "INVALID";
            }
            uint64_t result = "MLModelType_serializedModel";
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 600:
          uint64_t result = "MLModelType_oneHotEncoder";
          break;
        case 601:
          uint64_t result = "MLModelType_imputer";
          break;
        case 602:
          uint64_t result = "MLModelType_featureVectorizer";
          break;
        case 603:
          uint64_t result = "MLModelType_dictVectorizer";
          break;
        case 604:
          uint64_t result = "MLModelType_scaler";
          break;
        case 605:
        case 608:
          return "INVALID";
        case 606:
          uint64_t result = "MLModelType_categoricalMapping";
          break;
        case 607:
          uint64_t result = "MLModelType_normalizer";
          break;
        case 609:
          uint64_t result = "MLModelType_arrayFeatureExtractor";
          break;
        case 610:
          uint64_t result = "MLModelType_nonMaximumSuppression";
          break;
        default:
          if (a1 != 560) {
            return "INVALID";
          }
          uint64_t result = "MLModelType_classConfidenceThresholding";
          break;
      }
    }
  }
  else
  {
    if (a1 > 399)
    {
      if (a1 <= 499)
      {
        switch(a1)
        {
          case 400:
            uint64_t result = "MLModelType_glmClassifier";
            break;
          case 401:
            uint64_t result = "MLModelType_supportVectorClassifier";
            break;
          case 402:
            uint64_t result = "MLModelType_treeEnsembleClassifier";
            break;
          case 403:
            uint64_t result = "MLModelType_neuralNetworkClassifier";
            break;
          case 404:
            uint64_t result = "MLModelType_kNearestNeighborsClassifier";
            break;
          default:
            return "INVALID";
        }
        return result;
      }
      if (a1 <= 501)
      {
        if (a1 == 500) {
          return "MLModelType_neuralNetwork";
        }
        else {
          return "MLModelType_itemSimilarityRecommender";
        }
      }
      switch(a1)
      {
        case 502:
          return "MLModelType_mlProgram";
        case 555:
          return "MLModelType_customModel";
        case 556:
          return "MLModelType_linkedModel";
      }
      return "INVALID";
    }
    if (a1 <= 201)
    {
      if (a1)
      {
        if (a1 == 200) {
          return "MLModelType_pipelineClassifier";
        }
        if (a1 == 201) {
          return "MLModelType_pipelineRegressor";
        }
      }
      return "INVALID";
    }
    switch(a1)
    {
      case 300:
        uint64_t result = "MLModelType_glmRegressor";
        break;
      case 301:
        uint64_t result = "MLModelType_supportVectorRegressor";
        break;
      case 302:
        uint64_t result = "MLModelType_treeEnsembleRegressor";
        break;
      case 303:
        uint64_t result = "MLModelType_neuralNetworkRegressor";
        break;
      case 304:
        uint64_t result = "MLModelType_bayesianProbitRegressor";
        break;
      default:
        if (a1 != 202) {
          return "INVALID";
        }
        uint64_t result = "MLModelType_pipeline";
        break;
    }
  }
  return result;
}

{
  const char *result;

  if (a1 > 559)
  {
    if (a1 > 899)
    {
      switch(a1)
      {
        case 2000:
          uint64_t result = "MLModelType_textClassifier";
          break;
        case 2001:
          uint64_t result = "MLModelType_wordTagger";
          break;
        case 2002:
          uint64_t result = "MLModelType_visionFeaturePrint";
          break;
        case 2003:
          uint64_t result = "MLModelType_soundAnalysisPreprocessing";
          break;
        case 2004:
          uint64_t result = "MLModelType_gazetteer";
          break;
        case 2005:
          uint64_t result = "MLModelType_wordEmbedding";
          break;
        case 2006:
          uint64_t result = "MLModelType_audioFeaturePrint";
          break;
        default:
          if (a1 == 900)
          {
            uint64_t result = "MLModelType_identity";
          }
          else
          {
            if (a1 != 3000) {
              return "INVALID";
            }
            uint64_t result = "MLModelType_serializedModel";
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 600:
          uint64_t result = "MLModelType_oneHotEncoder";
          break;
        case 601:
          uint64_t result = "MLModelType_imputer";
          break;
        case 602:
          uint64_t result = "MLModelType_featureVectorizer";
          break;
        case 603:
          uint64_t result = "MLModelType_dictVectorizer";
          break;
        case 604:
          uint64_t result = "MLModelType_scaler";
          break;
        case 605:
        case 608:
          return "INVALID";
        case 606:
          uint64_t result = "MLModelType_categoricalMapping";
          break;
        case 607:
          uint64_t result = "MLModelType_normalizer";
          break;
        case 609:
          uint64_t result = "MLModelType_arrayFeatureExtractor";
          break;
        case 610:
          uint64_t result = "MLModelType_nonMaximumSuppression";
          break;
        default:
          if (a1 != 560) {
            return "INVALID";
          }
          uint64_t result = "MLModelType_classConfidenceThresholding";
          break;
      }
    }
  }
  else
  {
    if (a1 > 399)
    {
      if (a1 <= 499)
      {
        switch(a1)
        {
          case 400:
            uint64_t result = "MLModelType_glmClassifier";
            break;
          case 401:
            uint64_t result = "MLModelType_supportVectorClassifier";
            break;
          case 402:
            uint64_t result = "MLModelType_treeEnsembleClassifier";
            break;
          case 403:
            uint64_t result = "MLModelType_neuralNetworkClassifier";
            break;
          case 404:
            uint64_t result = "MLModelType_kNearestNeighborsClassifier";
            break;
          default:
            return "INVALID";
        }
        return result;
      }
      if (a1 <= 501)
      {
        if (a1 == 500) {
          return "MLModelType_neuralNetwork";
        }
        else {
          return "MLModelType_itemSimilarityRecommender";
        }
      }
      switch(a1)
      {
        case 502:
          return "MLModelType_mlProgram";
        case 555:
          return "MLModelType_customModel";
        case 556:
          return "MLModelType_linkedModel";
      }
      return "INVALID";
    }
    if (a1 <= 201)
    {
      if (a1)
      {
        if (a1 == 200) {
          return "MLModelType_pipelineClassifier";
        }
        if (a1 == 201) {
          return "MLModelType_pipelineRegressor";
        }
      }
      return "INVALID";
    }
    switch(a1)
    {
      case 300:
        uint64_t result = "MLModelType_glmRegressor";
        break;
      case 301:
        uint64_t result = "MLModelType_supportVectorRegressor";
        break;
      case 302:
        uint64_t result = "MLModelType_treeEnsembleRegressor";
        break;
      case 303:
        uint64_t result = "MLModelType_neuralNetworkRegressor";
        break;
      case 304:
        uint64_t result = "MLModelType_bayesianProbitRegressor";
        break;
      default:
        if (a1 != 202) {
          return "INVALID";
        }
        uint64_t result = "MLModelType_pipeline";
        break;
    }
  }
  return result;
}

{
  const char *result;

  if (a1 > 559)
  {
    if (a1 > 899)
    {
      switch(a1)
      {
        case 2000:
          uint64_t result = "MLModelType_textClassifier";
          break;
        case 2001:
          uint64_t result = "MLModelType_wordTagger";
          break;
        case 2002:
          uint64_t result = "MLModelType_visionFeaturePrint";
          break;
        case 2003:
          uint64_t result = "MLModelType_soundAnalysisPreprocessing";
          break;
        case 2004:
          uint64_t result = "MLModelType_gazetteer";
          break;
        case 2005:
          uint64_t result = "MLModelType_wordEmbedding";
          break;
        case 2006:
          uint64_t result = "MLModelType_audioFeaturePrint";
          break;
        default:
          if (a1 == 900)
          {
            uint64_t result = "MLModelType_identity";
          }
          else
          {
            if (a1 != 3000) {
              return "INVALID";
            }
            uint64_t result = "MLModelType_serializedModel";
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 600:
          uint64_t result = "MLModelType_oneHotEncoder";
          break;
        case 601:
          uint64_t result = "MLModelType_imputer";
          break;
        case 602:
          uint64_t result = "MLModelType_featureVectorizer";
          break;
        case 603:
          uint64_t result = "MLModelType_dictVectorizer";
          break;
        case 604:
          uint64_t result = "MLModelType_scaler";
          break;
        case 605:
        case 608:
          return "INVALID";
        case 606:
          uint64_t result = "MLModelType_categoricalMapping";
          break;
        case 607:
          uint64_t result = "MLModelType_normalizer";
          break;
        case 609:
          uint64_t result = "MLModelType_arrayFeatureExtractor";
          break;
        case 610:
          uint64_t result = "MLModelType_nonMaximumSuppression";
          break;
        default:
          if (a1 != 560) {
            return "INVALID";
          }
          uint64_t result = "MLModelType_classConfidenceThresholding";
          break;
      }
    }
  }
  else
  {
    if (a1 > 399)
    {
      if (a1 <= 499)
      {
        switch(a1)
        {
          case 400:
            uint64_t result = "MLModelType_glmClassifier";
            break;
          case 401:
            uint64_t result = "MLModelType_supportVectorClassifier";
            break;
          case 402:
            uint64_t result = "MLModelType_treeEnsembleClassifier";
            break;
          case 403:
            uint64_t result = "MLModelType_neuralNetworkClassifier";
            break;
          case 404:
            uint64_t result = "MLModelType_kNearestNeighborsClassifier";
            break;
          default:
            return "INVALID";
        }
        return result;
      }
      if (a1 <= 501)
      {
        if (a1 == 500) {
          return "MLModelType_neuralNetwork";
        }
        else {
          return "MLModelType_itemSimilarityRecommender";
        }
      }
      switch(a1)
      {
        case 502:
          return "MLModelType_mlProgram";
        case 555:
          return "MLModelType_customModel";
        case 556:
          return "MLModelType_linkedModel";
      }
      return "INVALID";
    }
    if (a1 <= 201)
    {
      if (a1)
      {
        if (a1 == 200) {
          return "MLModelType_pipelineClassifier";
        }
        if (a1 == 201) {
          return "MLModelType_pipelineRegressor";
        }
      }
      return "INVALID";
    }
    switch(a1)
    {
      case 300:
        uint64_t result = "MLModelType_glmRegressor";
        break;
      case 301:
        uint64_t result = "MLModelType_supportVectorRegressor";
        break;
      case 302:
        uint64_t result = "MLModelType_treeEnsembleRegressor";
        break;
      case 303:
        uint64_t result = "MLModelType_neuralNetworkRegressor";
        break;
      case 304:
        uint64_t result = "MLModelType_bayesianProbitRegressor";
        break;
      default:
        if (a1 != 202) {
          return "INVALID";
        }
        uint64_t result = "MLModelType_pipeline";
        break;
    }
  }
  return result;
}

uint64_t std::default_delete<CoreML::NNCompiler::MLModelInfo const>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(result + 136));

    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>>>::destroy(*(void **)(v1 + 88));
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    unint64_t v2 = (void **)(v1 + 8);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    return MEMORY[0x19F3C1920](v1, 0x10F2C40548D0382);
  }
  return result;
}

void *std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F8] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA348], MEMORY[0x1E4FBA1F0]);
}

uint64_t std::pair<std::string,std::optional<std::string>>::~pair(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

MIL::Attributes::BuildInfo *std::unique_ptr<MIL::Attributes::BuildInfo>::reset[abi:ne180100](MIL::Attributes::BuildInfo **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    MIL::Attributes::BuildInfo::~BuildInfo(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(void *a1, void *a2)
{
  if (a1)
  {
    unint64_t v3 = a1;
    uint64_t v4 = 1;
    do
    {
      if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, v3 + 4))
      {
        if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v3 + 4, a2)) {
          return v4;
        }
        ++v3;
      }
      unint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  return 0;
}

void std::make_unique[abi:ne180100]<CoreML::NNCompiler::Backend::MIL::Ios15::Ios15Backend,std::unique_ptr<MIL::IRProgram const>,std::unique_ptr<CoreML::NNCompiler::MLModelInfo const>>()
{
}

void sub_19E92699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x19F3C1920](v12, 0xE1C40C9F98117);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<CoreML::NNCompiler::Backend::MIL::Ios16::Ios16Backend,std::unique_ptr<MIL::IRProgram const>,std::unique_ptr<CoreML::NNCompiler::MLModelInfo const>>()
{
}

void sub_19E926A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x19F3C1920](v12, 0xE1C40C9F98117);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<CoreML::NNCompiler::Backend::MIL::Ios16Train::Ios16TrainBackend,std::unique_ptr<MIL::IRProgram const>,std::unique_ptr<CoreML::NNCompiler::MLModelInfo const>>()
{
}

void sub_19E926B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x19F3C1920](v12, 0xE1C40C9F98117);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<CoreML::NNCompiler::Backend::MIL::Ios17::Ios17Backend,std::unique_ptr<MIL::IRProgram const>,std::unique_ptr<CoreML::NNCompiler::MLModelInfo const>>()
{
}

void sub_19E926C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x19F3C1920](v12, 0xE1C40C9F98117);
  _Unwind_Resume(a1);
}

uint64_t *std::tuple<std::unique_ptr<MIL::IRProgram const>,std::unique_ptr<CoreML::NNCompiler::MLModelInfo const>>::~tuple(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    std::default_delete<CoreML::NNCompiler::MLModelInfo const>::operator()[abi:ne180100](v2);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t *std::shared_ptr<MIL::IRProgram const>::shared_ptr[abi:ne180100]<MIL::IRProgram const,std::default_delete<MIL::IRProgram const>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

uint64_t *std::shared_ptr<CoreML::NNCompiler::MLModelInfo const>::shared_ptr[abi:ne180100]<CoreML::NNCompiler::MLModelInfo const,std::default_delete<CoreML::NNCompiler::MLModelInfo const>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7C180)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<MIL::IRProgram const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t std::__shared_ptr_pointer<MIL::Blob::StorageData const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7C0EDLL)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<MIL::Blob::StorageData const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<MIL::Blob::StorageData const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void *std::__function::__func<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::target_type()
{
}

uint64_t std::__function::__func<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN12_GLOBAL__N_125milStorageDataByFilePathsEP12NSDictionaryIP5NSURLP6NSDataEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
}

void std::__function::__func<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::destroy(uint64_t a1)
{
}

id std::__function::__func<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF0DD230;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void *std::__function::__func<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = &unk_1EF0DD230;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

void std::__function::__func<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::~__func(uint64_t a1)
{
  JUMPOUT(0x19F3C1920);
}

uint64_t std::__function::__func<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0,std::allocator<anonymous namespace'::milStorageDataByFilePaths(NSDictionary<NSURL *,NSData *> *)::$_0>,void ()(void const*)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLFunctionInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLFunctionInfo>,0>(uint64_t a1)
{
  CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo(CoreML::NNCompiler::MLFunctionInfo *this)
{
  if (*((char *)this + 311) < 0) {
    operator delete(*((void **)this + 36));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*((char **)this + 32));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v5 = (void **)((char *)this + 208);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)((char *)this + 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*((void **)this + 19));
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*((void **)this + 16));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*((void **)this + 13));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*((void **)this + 10));
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*((void **)this + 7));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*((void **)this + 4));
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLRangeShape>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLShapeInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLShapeInfo>,0>(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 32);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 64);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1EF0E6060[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML10NNCompiler21MLMultiArrayShapeInfoENS9_16MLImageShapeInfoEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor(a2);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 48);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1EF0E6070[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  char v4 = (void **)(a2 + 24);
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  char v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + _Block_object_dispose(&a9, 8) = v4;
    operator delete(v4);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + _Block_object_dispose(&a9, 8) = v2;
    operator delete(v2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6CoreML10NNCompiler21MLMultiArrayShapeInfoENS9_16MLImageShapeInfoEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor(a2);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLRangeShape>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    char v4 = *(void **)a1;
    operator delete(v4);
  }
}

uint64_t std::__shared_ptr_pointer<CoreML::NNCompiler::MLModelInfo const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIKN6CoreML10NNCompiler11MLModelInfoEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<CoreML::NNCompiler::MLModelInfo const *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<CoreML::NNCompiler::MLModelInfo const>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<CoreML::NNCompiler::MLModelInfo const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void sub_19E92783C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17)
{
}

void sub_19E927C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E927F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E927FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::map<std::string,espresso_buffer_t *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char **)**a1;
  if (v2)
  {
    char v4 = (char **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 3;
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(v4 - 2));
        char v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19E9288C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19E929018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _Unwind_Resume(a1);
}

void sub_19E9295A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9297A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9298B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E929E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3093(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3094(uint64_t a1)
{
}

void sub_19E92A224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);

  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19E92A6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E92ABF4(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19E92AFB4(_Unwind_Exception *a1)
{
}

uint64_t std::map<std::string,_BlobShape>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  char v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      id v7 = (void *)v3;
      if (*(void *)a1 == v3) {
        goto LABEL_8;
      }
      unint64_t v8 = *(void **)(a1 + 8);
      uint64_t v9 = (void *)v3;
      if (v6)
      {
        do
        {
          id v7 = v8;
          unint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          id v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          unint64_t v16 = (void *)v3;
          int v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::__construct_node<std::pair<std::string const,_BlobShape> const&>((uint64_t)&v15, a1, (uint64_t)(v5 + 4));
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15);
          goto LABEL_15;
        }
        unint64_t v16 = v7;
        int v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        int v11 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v16, v5 + 4);
      }
      if (!*v11) {
        goto LABEL_14;
      }
LABEL_15:
      uint64_t v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v5[2];
          BOOL v10 = *v13 == (void)v5;
          uint64_t v5 = v13;
        }
        while (!v10);
      }
      uint64_t v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_19E92B17C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,_BlobShape>,std::__tree_node<std::__value_type<std::string,_BlobShape>,void *> *,long>>(void *result, void *a2, void *a3)
{
  uint64_t v5 = (uint64_t)result;
  if (result[2])
  {
    uint64_t v6 = *result;
    unint64_t v8 = (uint64_t **)(result + 1);
    uint64_t v7 = result[1];
    *id result = result + 1;
    *(void *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(void *)(v6 + 8)) {
      uint64_t v9 = *(uint64_t **)(v6 + 8);
    }
    else {
      uint64_t v9 = (uint64_t *)v6;
    }
    uint64_t v23 = result;
    uint8x8_t v24 = v9;
    std::string v25 = v9;
    if (v9)
    {
      uint8x8_t v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        BOOL v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 4));
          long long v11 = *(_OWORD *)(v10 + 7);
          v9[9] = v10[9];
          *(_OWORD *)(v9 + 7) = v11;
          uint64_t v12 = *v8;
          uint64_t v13 = (uint64_t **)(v5 + 8);
          std::string v14 = (uint64_t **)(v5 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                uint64_t v13 = (uint64_t **)v12;
                if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v25 + 4, v12 + 4)) {
                  break;
                }
                uint64_t v12 = *v13;
                std::string v14 = v13;
                if (!*v13) {
                  goto LABEL_14;
                }
              }
              uint64_t v12 = v13[1];
            }
            while (v12);
            std::string v14 = v13 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v13, v14, v25);
          uint64_t v9 = v24;
          std::string v25 = v24;
          if (v24) {
            uint8x8_t v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::__detach_next((uint64_t)v24);
          }
          uint64_t v15 = (void *)v10[1];
          if (v15)
          {
            do
            {
              a2 = v15;
              uint64_t v15 = (void *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              a2 = (void *)v10[2];
              BOOL v16 = *a2 == (void)v10;
              BOOL v10 = a2;
            }
            while (!v16);
          }
          if (!v9) {
            break;
          }
          BOOL v10 = a2;
        }
        while (a2 != a3);
      }
    }
    id result = (void *)std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v23);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::__construct_node<std::pair<std::string const,_BlobShape> const&>((uint64_t)&v23, v5, (uint64_t)(a2 + 4));
      uint64_t v17 = v23;
      uint64_t v18 = *(uint64_t **)(v5 + 8);
      char v19 = (uint64_t **)(v5 + 8);
      uint64_t v20 = (uint64_t **)(v5 + 8);
      if (v18)
      {
        do
        {
          while (1)
          {
            char v19 = (uint64_t **)v18;
            if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v17 + 4, v18 + 4)) {
              break;
            }
            uint64_t v18 = *v19;
            uint64_t v20 = v19;
            if (!*v19) {
              goto LABEL_31;
            }
          }
          uint64_t v18 = v19[1];
        }
        while (v18);
        uint64_t v20 = v19 + 1;
      }
LABEL_31:
      id result = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v19, v20, v17);
      uint64_t v21 = (void *)a2[1];
      if (v21)
      {
        do
        {
          std::string v22 = v21;
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          std::string v22 = (void *)a2[2];
          BOOL v16 = *v22 == (void)a2;
          a2 = v22;
        }
        while (!v16);
      }
      a2 = v22;
    }
    while (v22 != a3);
  }
  return result;
}

void sub_19E92B3A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::__tree<std::__value_type<std::string,_BlobShape>,std::__map_value_compare<std::string,std::__value_type<std::string,_BlobShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_BlobShape>>>::__construct_node<std::pair<std::string const,_BlobShape> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v6 + 56) = result;
  *((void *)v6 + 9) = *(void *)(a3 + 40);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_19E92B440(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_19E92B6D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E92BD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E92C57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19E92C9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLNeuralNetworkEngine;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19E92CF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19E92D4E4(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19E92D7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E92DBFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E92DDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  uint64_t v12 = v10;

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);

  _Unwind_Resume(a1);
}

void sub_19E92DED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E92DFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_19E92E064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E92E3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E92E7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E92EFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }

  _Unwind_Resume(a1);
}

void sub_19E92F514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (v16) {
    MEMORY[0x19F3C1920](v16, 0x1000C40C46099A0);
  }

  _Unwind_Resume(a1);
}

void sub_19E92F820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E92FC84(_Unwind_Exception *a1)
{
  v1[2](v1);

  _Unwind_Resume(a1);
}

void sub_19E92FEF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E93001C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E93038C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E930518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E930604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, void *a2, uint64_t a3)
{
  __n128 result = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  if (!*result)
  {
    uint64_t v6 = (uint64_t **)result;
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)&v7, (uint64_t)a1, a3);
    return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v8, v6, v7);
  }
  return result;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v7->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a1 + 16) = 1;
}

void sub_19E93070C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

void sub_19E9309D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E930AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, _OWORD **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x40uLL);
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *uint64_t v8 = 0;
    v8[1] = 0;
    void v8[2] = 0;
    *((unsigned char *)v6 + 56) = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

_OWORD *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, _OWORD **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x40uLL);
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *uint64_t v8 = 0;
    v8[1] = 0;
    void v8[2] = 0;
    *((_DWORD *)v6 + 14) = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    uint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void sub_19E930CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E930F00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9310FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E931378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E931430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9314B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9315A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19E931810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E931BAC(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19E931D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9328FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLNeuralNetworkEngine convertPredictionToClassifierResult:withOptions:error:]::$_0 &,std::__wrap_iter<unsigned long *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  double v6 = *(double *)(a4 + (*a2 << 32 >> 29));
  double v7 = *(double *)(a4 + (*a1 << 32 >> 29));
  uint64_t v8 = *a3;
  double v9 = *(double *)(a4 + (*a3 << 32 >> 29));
  if (v6 > v7)
  {
    if (v9 > v6)
    {
      *a1 = v8;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    if (*(double *)(a4 + (*a3 << 32 >> 29)) <= v7) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  if (v9 > v6)
  {
    *a2 = v8;
    *a3 = v4;
    uint64_t v10 = *a1;
    if (*(double *)(a4 + (*a2 << 32 >> 29)) <= *(double *)(a4 + (*a1 << 32 >> 29))) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v10;
    return 2;
  }
  return 0;
}

void sub_19E932C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E932D04(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19E932E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E932EBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E932F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9336F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E933848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19E933910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E933BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }

  _Unwind_Resume(a1);
}

void sub_19E933EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E93431C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~MapPair((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::MapPair<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::~MapPair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t anonymous namespace'::FindBlobFileReference(_anonymous_namespace_ *this, const MIL::IRValue *a2)
{
  if ((*(uint64_t (**)(_anonymous_namespace_ *, const MIL::IRValue *))(*(void *)this + 48))(this, a2))
  {
    uint64_t v3 = (MIL::IRListValue *)MIL::IRValue::AsList(this);
    uint64_t Values = MIL::IRListValue::GetValues(v3);
    if (v5)
    {
      double v6 = (_anonymous_namespace_ **)Values;
      uint64_t v7 = 16 * (void)v5;
      while (1)
      {
        if (result) {
          break;
        }
        v6 += 2;
        v7 -= 16;
        if (!v7) {
          return 0;
        }
      }
      return result;
    }
    return 0;
  }
  if (!(*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)this + 56))(this))
  {
    if ((*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)this + 64))(this))
    {
      std::string v14 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(this);
      uint64_t v15 = MIL::IRDictionaryValue::begin(v14);
      uint64_t v16 = MIL::IRDictionaryValue::end(v14);
      if (v15 != v16)
      {
        uint64_t v18 = v16;
        do
        {
          if (result) {
            break;
          }
          uint64_t v15 = *(void *)v15;
        }
        while (v15 != v18);
        return result;
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)this + 40))(this);
      if (!result) {
        return result;
      }
      uint64_t v19 = MIL::IRValue::AsTensor(this);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 80))(v19))
      {
        uint64_t v20 = *(uint64_t (**)(_anonymous_namespace_ *))(*(void *)this + 40);
        return v20(this);
      }
    }
    return 0;
  }
  double v9 = (MIL::IRTupleValue *)MIL::IRValue::AsTuple(this);
  uint64_t v10 = MIL::IRTupleValue::GetValues(v9);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = (_anonymous_namespace_ **)v10;
  uint64_t v13 = 16 * (void)v11;
  while (1)
  {
    if (result) {
      break;
    }
    v12 += 2;
    v13 -= 16;
    if (!v13) {
      return 0;
    }
  }
  return result;
}

uint64_t anonymous namespace'::IRValueHasBlobFileReference(_anonymous_namespace_ *this, const MIL::IRValue *a2)
{
  if ((*(uint64_t (**)(_anonymous_namespace_ *, const MIL::IRValue *))(*(void *)this + 48))(this, a2))
  {
    uint64_t v3 = (MIL::IRListValue *)MIL::IRValue::AsList(this);
    uint64_t Values = MIL::IRListValue::GetValues(v3);
    if (v5)
    {
      double v6 = (_anonymous_namespace_ **)Values;
      uint64_t v7 = 16 * (void)v5 - 16;
      do
      {
        uint64_t v8 = *v6;
        v6 += 2;
        if (result) {
          break;
        }
        uint64_t v10 = v7;
        v7 -= 16;
      }
      while (v10);
      return result;
    }
    return 0;
  }
  if ((*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)this + 56))(this))
  {
    uint64_t v11 = (MIL::IRTupleValue *)MIL::IRValue::AsTuple(this);
    uint64_t v12 = MIL::IRTupleValue::GetValues(v11);
    if (!v13) {
      return 0;
    }
    std::string v14 = (_anonymous_namespace_ **)v12;
    uint64_t v15 = 16 * (void)v13 - 16;
    do
    {
      uint64_t v16 = *v14;
      v14 += 2;
      if (result) {
        break;
      }
      uint64_t v17 = v15;
      v15 -= 16;
    }
    while (v17);
  }
  else if ((*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)this + 64))(this))
  {
    uint64_t v18 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(this);
    uint64_t v19 = MIL::IRDictionaryValue::begin(v18);
    uint64_t v20 = MIL::IRDictionaryValue::end(v18);
    if (v19 == v20) {
      return 0;
    }
    uint64_t v22 = v20;
    do
    {
      if (result) {
        break;
      }
      uint64_t v19 = *(void *)v19;
    }
    while (v19 != v22);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)this + 40))(this);
    if (result)
    {
      uint64_t v23 = *(uint64_t (**)(void))(*(void *)MIL::IRValue::AsTensor(this) + 80);
      return v23();
    }
  }
  return result;
}

void anonymous namespace'::GetIRValueByResolvingBlobFileReference(char **a1, MIL::IRValue *a2, void *a3, uint64_t a4)
{
  if ((*(uint64_t (**)(MIL::IRValue *))(*(void *)a2 + 48))(a2))
  {
    double v9 = (MIL::IRListValue *)MIL::IRValue::AsList(a2);
    v103 = 0;
    uint64_t v104 = 0;
    unint64_t v105 = 0;
    uint64_t Values = MIL::IRListValue::GetValues(v9);
    if (v11)
    {
      uint64_t v12 = (void *)Values;
      uint64_t v13 = 16 * (void)v11;
      {
        std::string v14 = v104;
        if ((unint64_t)v104 >= v105)
        {
          uint64_t v27 = ((char *)v104 - v103) >> 4;
          if ((unint64_t)(v27 + 1) >> 60) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v28 = (uint64_t)(v105 - (void)v103) >> 3;
          if (v28 <= v27 + 1) {
            unint64_t v28 = v27 + 1;
          }
          if (v105 - (unint64_t)v103 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v28;
          }
          v102 = &v105;
          uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v29);
          uint64_t v31 = &v30[16 * v27];
          *(void *)&long long v100 = v30;
          *((void *)&v100 + 1) = v31;
          *((void *)&v101 + 1) = &v30[16 * v32];
          *(_OWORD *)uint64_t v31 = v99;
          uint8x8_t v26 = v31 + 16;
LABEL_27:
          *(void *)&long long v101 = v26;
          std::vector<std::shared_ptr<MIL::IRValue const>>::__swap_out_circular_buffer(&v103, &v100);
          uint64_t v15 = v104;
          std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer((uint64_t)&v100);
          goto LABEL_28;
        }
        *uint64_t v104 = v99;
        uint64_t v15 = v14 + 1;
LABEL_28:
        uint64_t v104 = v15;
        v12 += 2;
        v13 -= 16;
        if (!v13) {
          goto LABEL_29;
        }
      }
      uint64_t v16 = v104;
      if ((unint64_t)v104 < v105)
      {
        *(void *)uint64_t v104 = *v12;
        uint64_t v17 = v12[1];
        *((void *)v16 + 1) = v17;
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = v16 + 1;
        goto LABEL_28;
      }
      uint64_t v18 = ((char *)v104 - v103) >> 4;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = v105 - (void)v103;
      if ((uint64_t)(v105 - (void)v103) >> 3 > v19) {
        unint64_t v19 = v20 >> 3;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      v102 = &v105;
      uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v21);
      uint64_t v23 = &v22[16 * v18];
      *(void *)&long long v100 = v22;
      *((void *)&v100 + 1) = v23;
      *((void *)&v101 + 1) = &v22[16 * v24];
      long long v25 = *(_OWORD *)v12;
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v12;
      if (*((void *)&v25 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint8x8_t v26 = v23 + 16;
      goto LABEL_27;
    }
LABEL_29:
    MIL::IRListValue::GetType(v9);
    MIL::IRListValueType::MakeValue();
    uint8x8_t v33 = (char *)v100;
    unint64_t v34 = a1;
    if ((void)v100) {
      operator new();
    }
LABEL_61:
    *(void *)&long long v100 = &v103;
    std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
    goto LABEL_62;
  }
  if ((*(uint64_t (**)(MIL::IRValue *))(*(void *)a2 + 56))(a2))
  {
    uint8x8_t v35 = (MIL::IRTupleValue *)MIL::IRValue::AsTuple(a2);
    v103 = 0;
    uint64_t v104 = 0;
    unint64_t v105 = 0;
    uint64_t v36 = MIL::IRTupleValue::GetValues(v35);
    if (!v37)
    {
LABEL_59:
      MIL::IRTupleValue::GetType(v35);
      MIL::IRTupleValueType::MakeValue();
      uint8x8_t v33 = (char *)v100;
      unint64_t v34 = a1;
      if ((void)v100) {
        operator new();
      }
      goto LABEL_61;
    }
    uint64_t v38 = (void *)v36;
    uint64_t v39 = 16 * (void)v37;
    {
      uint64_t v40 = v104;
      if ((unint64_t)v104 >= v105)
      {
        uint64_t v53 = ((char *)v104 - v103) >> 4;
        if ((unint64_t)(v53 + 1) >> 60) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v54 = (uint64_t)(v105 - (void)v103) >> 3;
        if (v54 <= v53 + 1) {
          unint64_t v54 = v53 + 1;
        }
        if (v105 - (unint64_t)v103 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v55 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v54;
        }
        v102 = &v105;
        uint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v55);
        uint64_t v57 = &v56[16 * v53];
        *(void *)&long long v100 = v56;
        *((void *)&v100 + 1) = v57;
        *((void *)&v101 + 1) = &v56[16 * v58];
        *(_OWORD *)uint64_t v57 = v99;
        uint64_t v52 = v57 + 16;
LABEL_57:
        *(void *)&long long v101 = v52;
        std::vector<std::shared_ptr<MIL::IRValue const>>::__swap_out_circular_buffer(&v103, &v100);
        unint64_t v41 = v104;
        std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer((uint64_t)&v100);
        goto LABEL_58;
      }
      *uint64_t v104 = v99;
      unint64_t v41 = v40 + 1;
LABEL_58:
      uint64_t v104 = v41;
      v38 += 2;
      v39 -= 16;
      if (!v39) {
        goto LABEL_59;
      }
    }
    unint64_t v42 = v104;
    if ((unint64_t)v104 < v105)
    {
      *(void *)uint64_t v104 = *v38;
      uint64_t v43 = v38[1];
      *((void *)v42 + 1) = v43;
      if (v43) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v41 = v42 + 1;
      goto LABEL_58;
    }
    uint64_t v44 = ((char *)v104 - v103) >> 4;
    unint64_t v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 60) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v46 = v105 - (void)v103;
    if ((uint64_t)(v105 - (void)v103) >> 3 > v45) {
      unint64_t v45 = v46 >> 3;
    }
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v47 = v45;
    }
    v102 = &v105;
    char v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v47);
    int v49 = &v48[16 * v44];
    *(void *)&long long v100 = v48;
    *((void *)&v100 + 1) = v49;
    *((void *)&v101 + 1) = &v48[16 * v50];
    long long v51 = *(_OWORD *)v38;
    *(_OWORD *)int v49 = *(_OWORD *)v38;
    if (*((void *)&v51 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v52 = v49 + 16;
    goto LABEL_57;
  }
  if (!(*(uint64_t (**)(MIL::IRValue *))(*(void *)a2 + 64))(a2))
  {
    if ((*(uint64_t (**)(MIL::IRValue *))(*(void *)a2 + 40))(a2))
    {
      uint64_t v95 = MIL::IRValue::AsTensor(a2);
      *(_OWORD *)a1 = v100;
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
    return;
  }
  std::string v59 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(a2);
  long long v100 = 0u;
  long long v101 = 0u;
  LODWORD(v102) = 1065353216;
  uint64_t v60 = MIL::IRDictionaryValue::begin(v59);
  uint64_t v61 = MIL::IRDictionaryValue::end(v59);
  if (v60 == v61) {
    goto LABEL_138;
  }
  uint64_t v97 = v59;
  uint64_t v96 = v61;
  do
  {
    {
      unint64_t v68 = MIL::IRValueMapHasher::operator()();
      unint64_t v64 = v68;
      unint64_t v65 = *((void *)&v100 + 1);
      if (*((void *)&v100 + 1))
      {
        uint8x8_t v69 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v100 + 8));
        v69.i16[0] = vaddlv_u8(v69);
        unint64_t v70 = v69.u32[0];
        if (v69.u32[0] > 1uLL)
        {
          unint64_t v4 = v68;
          if (v68 >= *((void *)&v100 + 1)) {
            unint64_t v4 = v68 % *((void *)&v100 + 1);
          }
        }
        else
        {
          unint64_t v4 = (*((void *)&v100 + 1) - 1) & v68;
        }
        int v71 = *(void **)(v100 + 8 * v4);
        if (v71)
        {
          int64_t v72 = (void *)*v71;
          if (*v71)
          {
            do
            {
              unint64_t v73 = v72[1];
              if (v73 == v64)
              {
                if (MIL::IRValueMapEq::operator()()) {
                  goto LABEL_134;
                }
              }
              else
              {
                if (v70 > 1)
                {
                  if (v73 >= v65) {
                    v73 %= v65;
                  }
                }
                else
                {
                  v73 &= v65 - 1;
                }
                if (v73 != v4) {
                  break;
                }
              }
              int64_t v72 = (void *)*v72;
            }
            while (v72);
          }
        }
      }
      unint64_t v74 = operator new(0x30uLL);
      v75 = v74;
      v103 = (char *)v74;
      uint64_t v104 = &v101;
      *unint64_t v74 = 0;
      v74[1] = v64;
      v74[2] = *(void *)(v60 + 16);
      uint64_t v76 = *(void *)(v60 + 24);
      v74[3] = v76;
      if (v76) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v76 + 8), 1uLL, memory_order_relaxed);
      }
      v74[4] = *(void *)(v60 + 32);
      uint64_t v77 = *(void *)(v60 + 40);
      v74[5] = v77;
      if (v77) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v77 + 8), 1uLL, memory_order_relaxed);
      }
      LOBYTE(v105) = 1;
      float v78 = (float)(unint64_t)(*((void *)&v101 + 1) + 1);
      if (!v65 || (float)(*(float *)&v102 * (float)v65) < v78)
      {
        BOOL v79 = (v65 & (v65 - 1)) != 0;
        if (v65 < 3) {
          BOOL v79 = 1;
        }
        unint64_t v80 = v79 | (2 * v65);
        unint64_t v81 = vcvtps_u32_f32(v78 / *(float *)&v102);
        if (v80 <= v81) {
          size_t v82 = v81;
        }
        else {
          size_t v82 = v80;
        }
        goto LABEL_119;
      }
LABEL_124:
      uint64_t v92 = v100;
      uint64_t v93 = *(void **)(v100 + 8 * v4);
      if (v93)
      {
        void *v75 = *v93;
      }
      else
      {
        void *v75 = v101;
        *(void *)&long long v101 = v75;
        *(void *)(v92 + 8 * v4) = &v101;
        if (!*v75)
        {
LABEL_133:
          v103 = 0;
          ++*((void *)&v101 + 1);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v103);
          goto LABEL_134;
        }
        unint64_t v94 = *(void *)(*v75 + 8);
        if ((v65 & (v65 - 1)) != 0)
        {
          if (v94 >= v65) {
            v94 %= v65;
          }
        }
        else
        {
          v94 &= v65 - 1;
        }
        uint64_t v93 = (void *)(v100 + 8 * v94);
      }
      *uint64_t v93 = v75;
      goto LABEL_133;
    }
    unint64_t v63 = MIL::IRValueMapHasher::operator()();
    unint64_t v64 = v63;
    unint64_t v65 = *((void *)&v100 + 1);
    if (!*((void *)&v100 + 1)) {
      goto LABEL_110;
    }
    uint8x8_t v66 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v100 + 8));
    v66.i16[0] = vaddlv_u8(v66);
    unint64_t v67 = v66.u32[0];
    if (v66.u32[0] > 1uLL)
    {
      unint64_t v4 = v63;
      if (v63 >= *((void *)&v100 + 1)) {
        unint64_t v4 = v63 % *((void *)&v100 + 1);
      }
    }
    else
    {
      unint64_t v4 = (*((void *)&v100 + 1) - 1) & v63;
    }
    uint64_t v83 = *(void **)(v100 + 8 * v4);
    if (!v83 || (uint64_t v84 = (void *)*v83) == 0)
    {
LABEL_110:
      v86 = operator new(0x30uLL);
      v75 = v86;
      v103 = (char *)v86;
      uint64_t v104 = &v101;
      void *v86 = 0;
      v86[1] = v64;
      v86[2] = *(void *)(v60 + 16);
      uint64_t v87 = *(void *)(v60 + 24);
      v86[3] = v87;
      if (v87) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v87 + 8), 1uLL, memory_order_relaxed);
      }
      *((_OWORD *)v86 + 2) = v99;
      LOBYTE(v105) = 1;
      float v88 = (float)(unint64_t)(*((void *)&v101 + 1) + 1);
      if (!v65 || (float)(*(float *)&v102 * (float)v65) < v88)
      {
        BOOL v89 = (v65 & (v65 - 1)) != 0;
        if (v65 < 3) {
          BOOL v89 = 1;
        }
        unint64_t v90 = v89 | (2 * v65);
        unint64_t v91 = vcvtps_u32_f32(v88 / *(float *)&v102);
        if (v90 <= v91) {
          size_t v82 = v91;
        }
        else {
          size_t v82 = v90;
        }
LABEL_119:
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)&v100, v82);
        unint64_t v65 = *((void *)&v100 + 1);
        if ((*((void *)&v100 + 1) & (*((void *)&v100 + 1) - 1)) != 0)
        {
          if (v64 >= *((void *)&v100 + 1)) {
            unint64_t v4 = v64 % *((void *)&v100 + 1);
          }
          else {
            unint64_t v4 = v64;
          }
        }
        else
        {
          unint64_t v4 = (*((void *)&v100 + 1) - 1) & v64;
        }
        goto LABEL_124;
      }
      goto LABEL_124;
    }
    while (1)
    {
      unint64_t v85 = v84[1];
      if (v85 == v64) {
        break;
      }
      if (v67 > 1)
      {
        if (v85 >= v65) {
          v85 %= v65;
        }
      }
      else
      {
        v85 &= v65 - 1;
      }
      if (v85 != v4) {
        goto LABEL_110;
      }
LABEL_109:
      uint64_t v84 = (void *)*v84;
      if (!v84) {
        goto LABEL_110;
      }
    }
    if (!MIL::IRValueMapEq::operator()()) {
      goto LABEL_109;
    }
    if (*((void *)&v99 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v99 + 1));
    }
LABEL_134:
    uint64_t v60 = *(void *)v60;
    std::string v59 = v97;
  }
  while (v60 != v96);
LABEL_138:
  MIL::IRDictionaryValue::GetType(v59);
  MIL::IRDictionaryValueType::MakeValue();
  uint8x8_t v33 = v103;
  unint64_t v34 = a1;
  if (v103) {
    operator new();
  }
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v100);
LABEL_62:
  void *v34 = v33;
  v34[1] = 0;
}

void sub_19E935148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  std::unique_ptr<MIL::IRDictionaryValue const>::reset[abi:ne180100]((MIL::IRDictionaryValue **)va1);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::ResolveBlobFileReferences(MIL::Builder::BlockBuilder *a1, void *a2, uint64_t a3)
{
  for (uint64_t i = *(uint64_t **)(MIL::Builder::BlockBuilder::GetAttributes(a1) + 16); i; uint64_t i = (uint64_t *)*i)
  {
    {
      double v6 = __p[0];
      if (__p[0])
      {
        if (*((char *)i + 39) < 0) {
          std::string::__init_copy_ctor_external(&v68, (const std::string::value_type *)i[2], i[3]);
        }
        else {
          std::string v68 = *(std::string *)(i + 2);
        }
        v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
        v63.__r_.__value_.__l.__size_ = (std::string::size_type)__p[1];
        MIL::Builder::BlockBuilder::SetAttribute();
        if (v63.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v63.__r_.__value_.__l.__size_);
        }
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v68.__r_.__value_.__l.__data_);
        }
      }
      else if (__p[1])
      {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
    }
  }
  MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v56, a1);
  uint64_t v8 = v56;
  uint64_t v7 = v57;
  uint64_t v52 = v57;
  while (v8 != v7)
  {
    double v9 = *v8;
    for (uint64_t j = *(uint64_t **)(MIL::Builder::OperationBuilder::GetAttributes(*v8) + 16); j; uint64_t j = (uint64_t *)*j)
    {
      {
        uint64_t v12 = __p[0];
        if (__p[0])
        {
          if (*((char *)j + 39) < 0) {
            std::string::__init_copy_ctor_external(&v68, (const std::string::value_type *)j[2], j[3]);
          }
          else {
            std::string v68 = *(std::string *)(j + 2);
          }
          v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
          v61.__r_.__value_.__l.__size_ = (std::string::size_type)__p[1];
          MIL::Builder::OperationBuilder::SetAttribute();
          if (v63.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v63.__r_.__value_.__l.__size_);
          }
          if (v61.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v61.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v68.__r_.__value_.__l.__data_);
          }
        }
        else if (__p[1])
        {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
      }
    }
    MIL::Builder::OperationBuilder::GetParameterNames((uint64_t *)&v68, v9);
    uint64_t v53 = v8;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)uint8x8_t v66 = 0u;
    float v67 = 1.0;
    uint64_t v13 = (uint64_t *)v68.__r_.__value_.__r.__words[2];
    if (v68.__r_.__value_.__r.__words[2])
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = v13 + 2;
        unint64_t NumArguments = MIL::Builder::OperationBuilder::GetNumArguments();
        if (v66[1])
        {
          std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>>>::__deallocate_node((void *)v66[0]);
          v66[0] = 0;
          uint64_t v18 = (char *)__p[1];
          if (__p[1])
          {
            unint64_t v19 = 0;
            do
              *((void *)__p[0] + (void)v19++) = 0;
            while (v18 != v19);
          }
          v66[1] = 0;
        }
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)__p, vcvtps_u32_f32((float)NumArguments / v67));
        if (NumArguments > v15 - v14) {
          break;
        }
        LODWORD(v69[0]) = 0;
        uint64_t v23 = v14;
        if (NumArguments) {
          goto LABEL_44;
        }
LABEL_71:
        if (v66[1])
        {
          MIL::Builder::OperationBuilder::RemoveInputs();
          LODWORD(v5_Block_object_dispose(&a9, 8) = 0;
          if (v23 != v14)
          {
            LODWORD(v40) = 0;
            do
            {
              unsigned int v41 = v40;
              if (__p[1])
              {
                uint8x8_t v42 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
                v42.i16[0] = vaddlv_u8(v42);
                if (v42.u32[0] > 1uLL)
                {
                  unint64_t v43 = v40;
                  if (__p[1] <= (void *)v40) {
                    unint64_t v43 = v40 % (unint64_t)__p[1];
                  }
                }
                else
                {
                  unint64_t v43 = (LODWORD(__p[1]) - 1) & v40;
                }
                uint64_t v44 = (uint64_t **)*((void *)__p[0] + v43);
                if (v44)
                {
                  for (k = *v44; k; k = (uint64_t *)*k)
                  {
                    unint64_t v46 = k[1];
                    if (v46 == v40)
                    {
                      if (*((_DWORD *)k + 4) == v40)
                      {
                        if (*((char *)v13 + 39) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)v13[2], v13[3]);
                        }
                        else
                        {
                          *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *v16;
                          v61.__r_.__value_.__r.__words[2] = v13[4];
                        }
                        char v48 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)__p, v41, &v58);
                        long long v60 = *(_OWORD *)(v48 + 3);
                        v48[3] = 0;
                        v48[4] = 0;
                        MIL::Builder::OperationBuilder::AddInput();
                        if (v62) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v62);
                        }
                        if (*((void *)&v60 + 1)) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60
                        }
                                                                                   + 1));
                        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
                        {
                          unint64_t v47 = &v61;
LABEL_97:
                          operator delete(v47->__r_.__value_.__l.__data_);
                        }
                        goto LABEL_98;
                      }
                    }
                    else
                    {
                      if (v42.u32[0] > 1uLL)
                      {
                        if ((void *)v46 >= __p[1]) {
                          v46 %= (unint64_t)__p[1];
                        }
                      }
                      else
                      {
                        v46 &= (unint64_t)__p[1] - 1;
                      }
                      if (v46 != v43) {
                        break;
                      }
                    }
                  }
                }
              }
              if (*((char *)v13 + 39) < 0)
              {
                std::string::__init_copy_ctor_external(&v63, (const std::string::value_type *)v13[2], v13[3]);
              }
              else
              {
                *(_OWORD *)&v63.__r_.__value_.__l.__data_ = *v16;
                v63.__r_.__value_.__r.__words[2] = v13[4];
              }
              MIL::Builder::OperationBuilder::AddInput();
              if (v64) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v64);
              }
              if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
              {
                unint64_t v47 = &v63;
                goto LABEL_97;
              }
LABEL_98:
              unint64_t v40 = v41 + 1;
              LODWORD(v5_Block_object_dispose(&a9, 8) = v41 + 1;
            }
            while (v23 - v14 > v40);
          }
        }
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          goto LABEL_112;
        }
      }
      if (NumArguments >> 61) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(NumArguments);
      uint64_t v22 = v21;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = &v20[v22];
      LODWORD(v69[0]) = 0;
      uint64_t v14 = v20;
LABEL_44:
      uint64_t v23 = v14;
      while (2)
      {
        uint64_t ArgumentForParameter = MIL::Builder::OperationBuilder::GetArgumentForParameter();
        long long v25 = (MIL::Builder::Variable *)ArgumentForParameter;
        if (v23 >= v15)
        {
          uint64_t v26 = v23 - v14;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 61) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v15 - (char *)v14) >> 2 > v27) {
            unint64_t v27 = ((char *)v15 - (char *)v14) >> 2;
          }
          if ((unint64_t)((char *)v15 - (char *)v14) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v27;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          uint64_t v30 = (MIL::Builder::Variable **)(v28 + 8 * v26);
          *uint64_t v30 = v25;
          uint64_t v31 = (uint64_t *)(v30 + 1);
          while (v23 != v14)
          {
            uint64_t v32 = (MIL::Builder::Variable *)*--v23;
            *--uint64_t v30 = v32;
          }
          uint64_t v15 = (uint64_t *)(v28 + 8 * v29);
          if (v14) {
            operator delete(v14);
          }
          uint64_t v14 = (uint64_t *)v30;
          uint64_t v23 = v31;
        }
        else
        {
          *v23++ = ArgumentForParameter;
        }
        Value = (_anonymous_namespace_ *)MIL::Builder::Variable::TryGetValue(v25);
        uint8x8_t v35 = Value;
        {
          uint64_t v36 = v58;
          if (v58)
          {
            uint64_t v37 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)__p, v69[0], v69);
            uint64_t v38 = v59;
            uint64_t v39 = (std::__shared_weak_count *)v37[4];
            v37[3] = v36;
            v37[4] = v38;
            if (v39) {
              goto LABEL_66;
            }
          }
          else
          {
            uint64_t v39 = v59;
            if (v59) {
LABEL_66:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }
        }
        ++LODWORD(v69[0]);
        if (NumArguments <= LODWORD(v69[0])) {
          goto LABEL_71;
        }
        continue;
      }
    }
    uint64_t v14 = 0;
LABEL_112:
    MIL::Builder::OperationBuilder::GetBlocks((uint64_t *)&v58, v9);
    int v49 = v58;
    uint64_t v50 = (char *)v59;
    while (v49 != v50)
    {
      v49 += 16;
    }
    v69[0] = (void **)&v58;
    std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100](v69);
    if (v14) {
      operator delete(v14);
    }
    std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>>>::__deallocate_node((void *)v66[0]);
    long long v51 = __p[0];
    __p[0] = 0;
    if (v51) {
      operator delete(v51);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v68);
    uint64_t v7 = v52;
    uint64_t v8 = v53 + 2;
  }
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
}

void sub_19E935858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,std::__shared_weak_count *a40,void *a41)
{
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    double v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x28uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  void v10[3] = 0;
  v10[4] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    *unint64_t v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_19E935BA8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      unint64_t v2 = (void *)*v1;
      unint64_t v3 = (std::__shared_weak_count *)v1[4];
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<MIL::IRValue const>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::vector<std::shared_ptr<MIL::IRValue const>>::__swap_out_circular_buffer(void *result, void *a2)
{
  unint64_t v3 = (void *)*result;
  unint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *((_OWORD *)v2 - 1);
    v2 -= 2;
    *(_OWORD *)(v4 - 16) = v5;
    v4 -= 16;
    *unint64_t v2 = 0;
    v2[1] = 0;
  }
  a2[1] = v4;
  unint64_t v6 = (void *)*result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

MIL::IRListValue *std::unique_ptr<MIL::IRListValue const>::reset[abi:ne180100](MIL::IRListValue **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    MIL::IRListValue::~IRListValue(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

MIL::IRTupleValue *std::unique_ptr<MIL::IRTupleValue const>::reset[abi:ne180100](MIL::IRTupleValue **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    MIL::IRTupleValue::~IRTupleValue(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void anonymous namespace'::GetIRTensorValueByResolvingBlobFileReference(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "path");
  uint64_t v57 = v8;
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v8, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found"); {
  MIL::IRValue::GetScalar<std::string>();
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(__p, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  }
  else {
    __p[0] = v61;
  }
  std::string::basic_string[abi:ne180100]<0>(&v58, "@model_path");
  int64_t v9 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  char v11 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v12 = &v58;
  }
  else {
    float v12 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = v58.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    std::string::size_type v21 = 0;
    goto LABEL_28;
  }
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int64_t v9 = __p[0].__r_.__value_.__l.__size_;
  }
  if (v9 >= size)
  {
    uint64_t v56 = a3;
    BOOL v14 = a1;
    unint64_t v15 = (char *)v10 + v9;
    int v16 = v12->__r_.__value_.__s.__data_[0];
    size_t v17 = v10;
    do
    {
      int64_t v18 = v9 - size;
      if (v18 == -1) {
        break;
      }
      unint64_t v19 = (char *)memchr(v17, v16, v18 + 1);
      if (!v19) {
        break;
      }
      unint64_t v20 = v19;
      if (!memcmp(v19, v12, size))
      {
        a1 = v14;
        if (v20 != v15)
        {
          std::string::size_type v21 = v20 - (char *)v10;
          a3 = v56;
          if (v20 - (char *)v10 == -1) {
            goto LABEL_35;
          }
LABEL_28:
          int v22 = *(char *)(a4 + 23);
          if (v22 >= 0) {
            uint64_t v23 = (const std::string::value_type *)a4;
          }
          else {
            uint64_t v23 = *(const std::string::value_type **)a4;
          }
          if (v22 >= 0) {
            std::string::size_type v24 = *(unsigned __int8 *)(a4 + 23);
          }
          else {
            std::string::size_type v24 = *(void *)(a4 + 8);
          }
          std::string::replace(__p, v21, size, v23, v24);
          char v11 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
          goto LABEL_35;
        }
LABEL_26:
        a3 = v56;
        goto LABEL_35;
      }
      size_t v17 = (std::string *)(v20 + 1);
      int64_t v9 = v15 - (v20 + 1);
    }
    while (v9 >= size);
    a1 = v14;
    goto LABEL_26;
  }
LABEL_35:
  std::__fs::filesystem::path v62 = (std::__fs::filesystem::path)__p[0];
  memset(__p, 0, 24);
  if (v11 < 0)
  {
    operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v62.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(__p, v62.__pn_.__r_.__value_.__l.__data_, v62.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    __p[0] = v62.__pn_;
  }
  long long v25 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3, (unsigned __int8 *)__p);
  uint64_t v26 = v25;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v26) {
      goto LABEL_56;
    }
  }
  else if (v25)
  {
    goto LABEL_56;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v58, (char *)a4);
  std::__fs::filesystem::relative[abi:ne180100]((std::__fs::filesystem::path *)__p, &v62, (const std::__fs::filesystem::path *)&v58);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p[0].__r_.__value_.__l.__size_)
    {
      uint64_t v26 = 0;
      goto LABEL_62;
    }
    std::string::__init_copy_ctor_external(&v58, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
  }
  else
  {
    if (!*((unsigned char *)&__p[0].__r_.__value_.__s + 23)) {
      goto LABEL_63;
    }
    std::string v58 = __p[0];
  }
  uint64_t v26 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3, (unsigned __int8 *)&v58);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v26) {
      goto LABEL_56;
    }
LABEL_63:
    uint64_t v28 = 0;
    unint64_t v27 = 0;
    goto LABEL_64;
  }
LABEL_62:
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (!v26) {
    goto LABEL_63;
  }
LABEL_56:
  uint64_t v28 = *((void *)v26 + 5);
  unint64_t v27 = (std::__shared_weak_count *)*((void *)v26 + 6);
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_64:
  if (SHIBYTE(v62.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v62.__pn_.__r_.__value_.__l.__data_);
    if (v28) {
      goto LABEL_66;
    }
  }
  else if (v28)
  {
LABEL_66:
    std::string::basic_string[abi:ne180100]<0>(__p, "offset");
    if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v57, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found"); {
    MIL::IRValue::GetScalar<unsigned long long>();
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t v59 = v28;
    long long v60 = v27;
    MIL::Blob::StorageReader::StorageReader();
    if (v60) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v60);
    }
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
    MIL::Blob::StorageReader::GetRawDataView((MIL::Blob::StorageReader *)&v62);
    uint64_t v31 = v30;
    switch((*(unsigned int (**)(uint64_t))(*(void *)v29 + 88))(v29))
    {
      case 2u:
        MIL::IRTensorValueType::MakeBoolValueWithUnownedMemory();
        std::string::size_type v32 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v32) {
          operator new();
        }
        break;
      case 4u:
        MIL::IRTensorValueType::MakeFloat16ValueWithUnownedMemory();
        std::string::size_type v48 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v48) {
          operator new();
        }
        break;
      case 5u:
        MIL::IRTensorValueType::MakeFloat32ValueWithUnownedMemory();
        std::string::size_type v45 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v45) {
          operator new();
        }
        break;
      case 6u:
        MIL::IRTensorValueType::MakeFloat64ValueWithUnownedMemory();
        std::string::size_type v47 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v47) {
          operator new();
        }
        break;
      case 7u:
        MIL::IRTensorValueType::MakeBFloat16ValueWithUnownedMemory();
        std::string::size_type v42 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v42) {
          operator new();
        }
        break;
      case 9u:
        MIL::IRTensorValueType::MakeInt8ValueWithUnownedMemory();
        std::string::size_type v44 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v44) {
          operator new();
        }
        break;
      case 0xAu:
        MIL::IRTensorValueType::MakeInt16ValueWithUnownedMemory();
        std::string::size_type v49 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v49) {
          operator new();
        }
        break;
      case 0xBu:
        MIL::IRTensorValueType::MakeInt32ValueWithUnownedMemory();
        std::string::size_type v46 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v46) {
          operator new();
        }
        break;
      case 0xCu:
        MIL::IRTensorValueType::MakeInt64ValueWithUnownedMemory();
        std::string::size_type v37 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v37) {
          operator new();
        }
        break;
      case 0xDu:
        if (v31 != 2) {
          goto LABEL_122;
        }
        MIL::IRTensorValueType::MakeInt4ValueWithUnownedMemory();
        std::string::size_type v34 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v34) {
          operator new();
        }
        return;
      case 0xEu:
        MIL::IRTensorValueType::MakeUInt8ValueWithUnownedMemory();
        std::string::size_type v36 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v36) {
          operator new();
        }
        break;
      case 0xFu:
        MIL::IRTensorValueType::MakeUInt16ValueWithUnownedMemory();
        std::string::size_type v33 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v33) {
          operator new();
        }
        break;
      case 0x10u:
        MIL::IRTensorValueType::MakeUInt32ValueWithUnownedMemory();
        std::string::size_type v35 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v35) {
          operator new();
        }
        break;
      case 0x11u:
        MIL::IRTensorValueType::MakeUInt64ValueWithUnownedMemory();
        std::string::size_type v38 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v38) {
          operator new();
        }
        break;
      case 0x13u:
        if (v31 != 1) {
          goto LABEL_122;
        }
        MIL::IRTensorValueType::MakeUInt2ValueWithUnownedMemory();
        std::string::size_type v40 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v40) {
          operator new();
        }
        return;
      case 0x14u:
        if (v31 != 2) {
          goto LABEL_122;
        }
        MIL::IRTensorValueType::MakeUInt4ValueWithUnownedMemory();
        std::string::size_type v43 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v43) {
          operator new();
        }
        return;
      case 0x16u:
        if (v31 != 2) {
          goto LABEL_122;
        }
        MIL::IRTensorValueType::MakeUInt3ValueWithUnownedMemory();
        std::string::size_type v41 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v41) {
          operator new();
        }
        return;
      case 0x17u:
        if (v31 != 5)
        {
LABEL_122:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "BitSpanCast to sub-byte type span has invalid number of elements. Sub-byte span with NumElements requires exactly Span<uint8_t>.Size() bytes.");
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(exception, (struct type_info *)off_1E59A3028, MEMORY[0x1E4FBA1E8]);
        }
        MIL::IRTensorValueType::MakeUInt6ValueWithUnownedMemory();
        std::string::size_type v39 = __p[0].__r_.__value_.__r.__words[0];
        *a1 = __p[0].__r_.__value_.__r.__words[0];
        if (v39) {
          operator new();
        }
        return;
      default:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        long long v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__r.__words[2], (uint64_t)"Failed to create an in-memory value with DataType=", 50);
        (*(void (**)(uint64_t))(*(void *)v29 + 88))(v29);
        MIL::IRDataTypeToString();
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v52 = &v58;
        }
        else {
          uint64_t v52 = (std::string *)v58.__r_.__value_.__r.__words[0];
        }
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v53 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v53 = v58.__r_.__value_.__l.__size_;
        }
        unint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)".", 1);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        unint64_t v55 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::logic_error::logic_error(v55, &v58);
        __cxa_throw(v55, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
    }
    a1[1] = 0;
    MIL::Blob::StorageReader::~StorageReader((MIL::Blob::StorageReader *)&v62);
    goto LABEL_117;
  }
  *a1 = 0;
  a1[1] = 0;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
LABEL_117:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
}

void sub_19E9368C0(void *a1, int a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, uint64_t a9, uint64_t a10, void *__pa, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,std::string *a49,uint64_t a50,void **a51,uint64_t a52,int a53,__int16 a54,char a55,unsigned __int8 a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  if (SHIBYTE(a13) < 0)
  {
    operator delete(__pa);
    if ((v62 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a61);
      MIL::Blob::StorageReader::~StorageReader((MIL::Blob::StorageReader *)&a57);
      unint64_t v65 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        uint8x8_t v66 = v65;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__pa);
        float v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a13, (uint64_t)"Failed to read data from blob file: path= ", 42);
        if ((a56 & 0x80u) == 0) {
          std::string v68 = (void **)&a51;
        }
        else {
          std::string v68 = a51;
        }
        if ((a56 & 0x80u) == 0) {
          uint64_t v69 = a56;
        }
        else {
          uint64_t v69 = a52;
        }
        unint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, v69);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)", offset= ", 10);
        int v71 = (void *)std::ostream::operator<<();
        int64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)", error= ", 9);
        unint64_t v73 = (const char *)(*(uint64_t (**)(void *))(*(void *)v66 + 16))(v66);
        size_t v74 = strlen(v73);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, (const std::string *)&a57);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__pa);
      uint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a13, (uint64_t)"Failed to read blob data from file: path= ", 42);
      if ((a56 & 0x80u) == 0) {
        uint64_t v77 = (void **)&a51;
      }
      else {
        uint64_t v77 = a51;
      }
      if ((a56 & 0x80u) == 0) {
        uint64_t v78 = a56;
      }
      else {
        uint64_t v78 = a52;
      }
      BOOL v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v77, v78);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)", offset= ", 10);
      unint64_t v80 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)".", 1);
      unint64_t v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v81, (const std::string *)&a57);
      __cxa_throw(v81, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else if (!v62)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v61);
  goto LABEL_6;
}

void sub_19E936C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
  {
    operator delete(__p);
    if ((v57 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a11);
      __cxa_end_catch();
      if (SHIBYTE(a50) < 0) {
        operator delete(a48);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v57)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v56);
  goto LABEL_6;
}

void std::__fs::filesystem::relative[abi:ne180100](std::__fs::filesystem::path *a1, std::__fs::filesystem::path *__p, const std::__fs::filesystem::path *a3)
{
  std::__fs::filesystem::__weakly_canonical(&v6, __p, 0);
  std::__fs::filesystem::__weakly_canonical(&__pa, a3, 0);
  std::__fs::filesystem::path::lexically_relative(a1, &v6, &__pa);
  if (SHIBYTE(__pa.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__pa.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_19E936E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRTupleValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7C2A0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

MIL::IRTupleValue *std::__shared_ptr_pointer<MIL::IRTupleValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(MIL::IRTupleValue **)(a1 + 24);
  if (result)
  {
    MIL::IRTupleValue::~IRTupleValue(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void std::__shared_ptr_pointer<MIL::IRTupleValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t std::__shared_ptr_pointer<MIL::IRListValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7C20ELL)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

MIL::IRListValue *std::__shared_ptr_pointer<MIL::IRListValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(MIL::IRListValue **)(a1 + 24);
  if (result)
  {
    MIL::IRListValue::~IRListValue(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void std::__shared_ptr_pointer<MIL::IRListValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void sub_19E938864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9388F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E938A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E938AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E938BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3705(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3706(uint64_t a1)
{
}

void sub_19E938D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E938E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CoreML::NNCompiler::Backend::MIL::Ios16::Ios16Backend::Compile(CoreML::NNCompiler::Backend::MIL::Ios16::Ios16Backend *this, objc_object *a2)
{
  v27[4] = *MEMORY[0x1E4F143B8];
  CoreML::NNCompiler::Backend::MIL::OptimizeProgram((CoreML::NNCompiler::Backend::MIL *)&v19, *((const IRProgram **)this + 1));
  std::string::basic_string[abi:ne180100]<0>(v25, "classify");
  v27[0] = &unk_1EF0DD078;
  v27[1] = CoreML::NNCompiler::Backend::MIL::Ios15::Translations::TranslateClassify;
  v27[3] = v27;
  uint64_t v4 = (MIL::Opsets::Common::ios16::ios16Opset *)std::unordered_map<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>::unordered_map((uint64_t)v24, (uint64_t)v25, 1);
  char v23 = 7;
  strcpy((char *)__p, "CoreML6");
  uint64_t OpsetName = MIL::Opsets::Common::ios16::ios16Opset::GetOpsetName(v4);
  size_t v7 = v6;
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (const void *)OpsetName;
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (__n128 *)operator new(v10 + 1);
    __dst.n128_u64[1] = v7;
    unint64_t v21 = v11 | 0x8000000000000000;
    __dst.n128_u64[0] = (unint64_t)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_8:
  }
    memmove(p_dst, v8, v7);
  p_dst->n128_u8[v7] = 0;
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::ProgramLayerTranslator((uint64_t)v17, v24, (long long *)__p, &__dst);
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__dst.n128_u64[0]);
  }
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)v24);
  std::__function::__value_func<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::~__value_func[abi:ne180100](v27);
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  v17[0] = &unk_1EF0CE550;
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::Translate(&v18, (const IRProgram *)v17, v19);
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(v17);
  CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetAttributesForFunctions((uint64_t)v18, *((void *)this + 3));
  MIL::Util::FindBlobFilePaths((uint64_t *)v17, v18, v12);
  float v13 = v18;
  int64_t v18 = 0;
  int v16 = v13;
  CoreML::NNCompiler::Backend::MIL::WriteProgram((uint64_t *)&v16, *(unsigned int *)(*((void *)this + 3) + 120), a2, *((void *)this + 3) + 56);
  if (v16) {
    (*(void (**)(MIL::Util *))(*(void *)v16 + 8))(v16);
  }
  CoreML::NNCompiler::Backend::MetadataUtils::WriteMetadataIos15(*((void *)this + 3), (uint64_t)a2);
  CoreML::NNCompiler::Backend::MIL::CopyWeights((uint64_t *)(*((void *)this + 3) + 56), (uint64_t **)v17, (uint64_t)a2);
  v25[0] = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v25);
  BOOL v14 = v18;
  int64_t v18 = 0;
  if (v14) {
    (*(void (**)(MIL::Util *))(*(void *)v14 + 8))(v14);
  }
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_19E939130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  *(void *)(v23 - 12_Block_object_dispose(&a9, 8) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 128));
  uint64_t v25 = a22;
  a22 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = a23;
  a23 = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios16::Ios16Backend::~Ios16Backend(CoreML::NNCompiler::Backend::MIL::Ios16::Ios16Backend *this)
{
  CoreML::NNCompiler::Backend::MIL::Ios16::Ios16Backend::~Ios16Backend(this);

  JUMPOUT(0x19F3C1920);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF0CE528;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

BOOL ModelKeyServerAPIRawKeyReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    size_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 16;
LABEL_22:
        uint64_t v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&a9, 8) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadData();
    uint64_t v18 = 8;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_19E939A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E939BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E939DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E939F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Archiver::_IDataBlobMemoryImpl::asData(id *this)
{
  return this[8];
}

void Archiver::_IDataBlobMemoryImpl::asMMappedFile(Archiver::_IDataBlobMemoryImpl *this)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Error: asMMappedFile is not supported by _IDataBlobMemoryImpl");
  __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
}

void sub_19E939FEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Archiver::_IDataBlobMemoryImpl::~_IDataBlobMemoryImpl(id *this)
{
  Archiver::_IDataBlobImpl::~_IDataBlobImpl((Archiver::_IDataBlobImpl *)this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t vars8;

  Archiver::_IDataBlobImpl::~_IDataBlobImpl((Archiver::_IDataBlobImpl *)this);
}

void sub_19E93AE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E93B07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E93B188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E93B438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19)
{
  _MLModelOutputArchiver::~_MLModelOutputArchiver(&a19);
  _Unwind_Resume(a1);
}

uint64_t OArchive::OArchive(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6 = (std::__shared_weak_count *)operator new(0x340uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD928;
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  Archiver::_OArchiveDiskImpl::_OArchiveDiskImpl((uint64_t)&v6[1], (long long *)__p, a2, a3);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = a3;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v6 + 1;
  *(void *)(a1 + 16) = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return a1;
}

void sub_19E93B594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(*((void *)a1 + 1));
    std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(*((void *)a1 + 11));
    uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 9);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void _MLModelOutputArchiver::~_MLModelOutputArchiver(char **this)
{
  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(this[4]);
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::__shared_ptr_emplace<Archiver::_OArchiveDiskImpl>::__on_zero_shared(uint64_t a1)
{
}

void Archiver::_OArchiveDiskImpl::~_OArchiveDiskImpl(Archiver::_OArchiveDiskImpl *this)
{
  uint64_t v2 = MEMORY[0x1E4FBA400];
  uint64_t v3 = *MEMORY[0x1E4FBA400];
  *((void *)this + 30) = *MEMORY[0x1E4FBA400];
  *(void *)((char *)this + *(void *)(v3 - 24) + 240) = *(void *)(v2 + 24);
  MEMORY[0x19F3C1500]((char *)this + 248);
  std::ostream::~ostream();
  MEMORY[0x19F3C1850]((char *)this + 656);

  Archiver::_OArchiveImpl::~_OArchiveImpl(this);
}

{
  uint64_t vars8;

  Archiver::_OArchiveDiskImpl::~_OArchiveDiskImpl(this);

  JUMPOUT(0x19F3C1920);
}

void Archiver::_OArchiveImpl::~_OArchiveImpl(Archiver::_OArchiveImpl *this)
{
  *(void *)this = &unk_1EF0DCA88;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 192);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 152);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 112);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t Archiver::_OArchiveImpl::rawOutputStream(Archiver::_OArchiveImpl *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (*(unsigned char *)v1) {
    return v1 + 8;
  }
  uint64_t result = *(void *)(v1 + 624);
  if (!result)
  {
    Archiver::_ODataBlobImpl::_openAsStream(v1);
    return *(void *)(v1 + 624);
  }
  return result;
}

void std::__shared_ptr_emplace<Archiver::_OArchiveDiskImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD928;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<Archiver::_OArchiveDiskImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19E93C120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2);
    long long v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    size_t v7 = &v4[4 * v6];
    char v8 = (char *)*a1;
    char v9 = (char *)a1[1];
    unint64_t v10 = v5;
    if (v9 != *a1)
    {
      unint64_t v10 = v5;
      do
      {
        int v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<float>::resize(char **a1, unint64_t a2)
{
  int64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v19 = &v3[4 * a2];
    goto LABEL_15;
  }
  unint64_t v6 = a2 - v5;
  size_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    uint64_t v19 = &v4[4 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 1;
  if (v8 >> 1 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  int v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v10);
  unint64_t v12 = *a1;
  char v13 = a1[1];
  BOOL v14 = &v11[4 * v5];
  int v16 = &v11[4 * v15];
  bzero(v14, 4 * v6);
  uint64_t v17 = &v14[4 * v6];
  while (v13 != v12)
  {
    int v18 = *((_DWORD *)v13 - 1);
    v13 -= 4;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

void sub_19E93C62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E93CC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  v27[2](v27);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)(v32 - 184));

  _Unwind_Resume(a1);
}

void sub_19E93CFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19E93D008()
{
}

void sub_19E93D398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E93D654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E93D9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (v13) {
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

void sub_19E93DCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E93E198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
  _Unwind_Resume(a1);
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E93E2AC(_Unwind_Exception *exception_object)
{
  int64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E93EE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  MEMORY[0x19F3C1920](v47, 0x1081C40622C3295);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v46);

  _Unwind_Resume(a1);
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E93F094(_Unwind_Exception *exception_object)
{
  int64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,OArchive>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  unint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = (void *)v3;
      if (*(void *)a1 == v3) {
        goto LABEL_8;
      }
      size_t v8 = *(void **)(a1 + 8);
      uint64_t v9 = (void *)v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          size_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          uint64_t v19 = (void *)v3;
          int v11 = (uint64_t **)v3;
LABEL_14:
          unint64_t v12 = (char *)operator new(0x68uLL);
          char v13 = v12;
          if (*((char *)v5 + 55) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v12 + 32), (const std::string::value_type *)v5[4], v5[5]);
          }
          else
          {
            long long v14 = *((_OWORD *)v5 + 2);
            *((void *)v12 + 6) = v5[6];
            *((_OWORD *)v12 + 2) = v14;
          }
          v13[56] = *((unsigned char *)v5 + 56);
          uint64_t v15 = v5[9];
          *((void *)v13 + _Block_object_dispose(&a9, 8) = v5[8];
          *((void *)v13 + 9) = v15;
          if (v15) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
          }
          std::map<std::string,OArchive>::map[abi:ne180100](v13 + 80, v5 + 10);
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v19, v11, (uint64_t *)v13);
          goto LABEL_20;
        }
        uint64_t v19 = v7;
        int v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        int v11 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v19, v5 + 4);
      }
      if (!*v11) {
        goto LABEL_14;
      }
LABEL_20:
      int v16 = (void *)v5[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          int v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v5[2];
          BOOL v10 = *v17 == (void)v5;
          unint64_t v5 = v17;
        }
        while (!v10);
      }
      unint64_t v5 = v17;
    }
    while (v17 != v4);
  }
  return a1;
}

void sub_19E93F258(_Unwind_Exception *a1)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,OArchive>,void *>>>::operator()[abi:ne180100](0, v1);
  std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,OArchive>,void *>>>::operator()[abi:ne180100](char a1, uint64_t a2)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,OArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,OArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,OArchive>>>::destroy(*(char **)(a2 + 88));
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 72);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    if (*(char *)(a2 + 55) < 0) {
      operator delete(*(void **)(a2 + 32));
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete((void *)a2);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    size_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + _Block_object_dispose(&a9, 8) = v7;
  BOOL v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  char v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + _Block_object_dispose(&a9, 8) = v13;
  long long v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_19E93FB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  CoreML::Specification::Int64Parameter::~Int64Parameter((CoreML::Specification::Int64Parameter *)&a24);

  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }

  _Unwind_Resume(a1);
}

void sub_19E940380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v32 = *(void **)(v30 - 136);
  if (v32)
  {
    *(void *)(v30 - 12_Block_object_dispose(&a9, 8) = v32;
    operator delete(v32);
  }
  std::string::size_type v33 = *(void **)(v30 - 112);
  if (v33)
  {
    *(void *)(v30 - 104) = v33;
    operator delete(v33);
  }
  if (a11) {
    operator delete(a11);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

void sub_19E94069C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E940888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

uint64_t ___ZL28AppleNeuralEngineLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AppleNeuralEngineLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IROperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7C42ELL)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<MIL::IROperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<MIL::IROperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t std::__shared_ptr_pointer<MIL::IRBlock  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7C3A4)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<MIL::IRBlock  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<MIL::IRBlock  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void sub_19E940D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E940DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E940E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E940FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19E94100C()
{
}

void sub_19E941014()
{
}

void sub_19E9414F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_19E94182C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9418FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E941998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9420EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19E942558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29)
{
  uint64_t v32 = *(void **)(v31 - 120);

  _Unwind_Resume(a1);
}

void sub_19E942620()
{
}

void sub_19E942630()
{
}

void sub_19E942640()
{
}

void sub_19E942650()
{
}

void sub_19E942660()
{
}

void sub_19E94266C()
{
}

void sub_19E942674()
{
}

void sub_19E94267C()
{
}

void sub_19E942684()
{
}

void sub_19E94268C()
{
}

void sub_19E942694()
{
}

void sub_19E94269C()
{
}

void sub_19E942770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E94289C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

void sub_19E942974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E942EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,uint64_t a29,uint64_t a30,void *a31,void *a32)
{
  _Unwind_Resume(a1);
}

void sub_19E943114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E943194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E943570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E943994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E943C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E943E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E943FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E94404C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9440E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E944140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E94418C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9443C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  std::unique_ptr<ElapsedTimeRecorder>::reset[abi:ne180100]((id **)(v16 + 48));

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4966(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 4_Block_object_dispose(&a9, 8) = 0;
  *(void *)(result + 4_Block_object_dispose(&a9, 8) = v2;
  return result;
}

id *__Block_byref_object_dispose__4967(uint64_t a1)
{
  return std::unique_ptr<ElapsedTimeRecorder>::reset[abi:ne180100]((id **)(a1 + 48));
}

void sub_19E944538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *std::unique_ptr<ElapsedTimeRecorder>::reset[abi:ne180100](id **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    ElapsedTimeRecorder::~ElapsedTimeRecorder(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void sub_19E9446C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

void sub_19E944818(_Unwind_Exception *a1)
{
  size_t v8 = v6;

  _Unwind_Resume(a1);
}

uint64_t **CoreML::MLNeuralNetworkUtilities::getInputShapeInfosFromSpec(uint64_t **this, const CoreML::Specification::ModelDescription *a2, uint64_t a3)
{
  v20[9] = *MEMORY[0x1E4F143B8];
  this[1] = 0;
  this[2] = 0;
  *this = (uint64_t *)(this + 1);
  if (a3) {
    uint64_t v3 = (uint64_t *)(a3 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  if (a2)
  {
    uint64_t v4 = this;
    uint64_t v5 = 8 * (int)a2;
    while (1)
    {
      uint64_t v6 = *v3;
      uint64_t v7 = *(uint64_t **)(*v3 + 32);
      if (!v7) {
        uint64_t v7 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      int v8 = *((_DWORD *)v7 + 9);
      if (v8 == 4) {
        break;
      }
      if (v8 == 8)
      {
        uint64_t v11 = v7[3];
        if (*(_DWORD *)(v11 + 28) == 1)
        {
          int64_t v12 = *(const CoreML::Specification::ArrayFeatureType **)(v11 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)this);
          int64_t v12 = (const CoreML::Specification::ArrayFeatureType *)&CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v17, (uint64_t)v14);
        int v18 = v15;
        int v19 = 0;
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v20, (uint64_t)v17);
        uint64_t v16 = *(long long **)(v6 + 16);
        char v13 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v16, &v16);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v13 + 8), (uint64_t)v20);
        goto LABEL_17;
      }
      if (v8 == 5)
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v17, (uint64_t)v14);
        int v18 = v15;
        int v19 = 0;
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v20, (uint64_t)v17);
        uint64_t v16 = *(long long **)(v6 + 16);
        int v9 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v16, &v16);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v9 + 8), (uint64_t)v20);
LABEL_17:
        std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v17);
        this = (uint64_t **)std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v14);
      }
      ++v3;
      v5 -= 8;
      if (!v5) {
        return this;
      }
    }
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v17, (uint64_t)v14);
    int v18 = v15;
    int v19 = 1;
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v20, (uint64_t)v17);
    uint64_t v16 = *(long long **)(v6 + 16);
    BOOL v10 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v16, &v16);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v10 + 8), (uint64_t)v20);
    goto LABEL_17;
  }
  return this;
}

void sub_19E944A94(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::MultiArrayShapeInfoFromSpec(_anonymous_namespace_ *this, const CoreML::Specification::ArrayFeatureType *a2)
{
  uint64_t v2 = a2;
  memset(v53, 0, 24);
  int v54 = 0;
  int v4 = *((_DWORD *)v2 + 15);
  if (v4 != 31)
  {
    if (v4 == 21)
    {
      uint64_t v5 = *((void *)v2 + 5);
      std::string::size_type v48 = 0;
      std::string::size_type v49 = 0;
      unint64_t v50 = 0;
      uint64_t v6 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)std::vector<std::vector<long long>>::reserve(&v48, *(int *)(v5 + 24));
      if (*((_DWORD *)v2 + 15) == 21)
      {
        uint64_t v7 = (uint64_t *)*((void *)v2 + 5);
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v6);
        uint64_t v7 = &CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_;
      }
      uint64_t v26 = v7[4];
      if (v26) {
        uint64_t v27 = v26 + 8;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = *((int *)v7 + 6);
      if (v28)
      {
        uint64_t v29 = 8 * v28;
        do
        {
          uint64_t v30 = v49;
          if ((unint64_t)v49 >= v50)
          {
            unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v48) >> 3);
            unint64_t v33 = v32 + 1;
            if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)(v50 - (void)v48) >> 3) > v33) {
              unint64_t v33 = 0x5555555555555556 * ((uint64_t)(v50 - (void)v48) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (void)v48) >> 3) >= 0x555555555555555) {
              unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v34 = v33;
            }
            std::string::size_type v45 = &v50;
            std::string::size_type v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<long long>>>(v34);
            unint64_t v36 = (unint64_t)&v35[24 * v32];
            v42.n128_u64[0] = (unint64_t)v35;
            v42.n128_u64[1] = v36;
            std::string __p = &v35[24 * v37];
            *(_OWORD *)unint64_t v36 = v46;
            *(void *)(v36 + 16) = v47;
            unint64_t v43 = v36 + 24;
            std::vector<std::vector<long long>>::__swap_out_circular_buffer(&v48, &v42);
            uint64_t v31 = v49;
            std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)&v42);
          }
          else
          {
            *(_OWORD *)std::string::size_type v49 = v46;
            *((void *)v30 + 2) = v47;
            uint64_t v31 = v30 + 24;
          }
          std::string::size_type v49 = v31;
          v27 += 8;
          v29 -= 8;
        }
        while (v29);
      }
      CoreML::NNCompiler::MLEnumeratedShape::MLEnumeratedShape(&v42, (uint64_t)&v51, (uint64_t *)&v48);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<2ul,CoreML::NNCompiler::MLEnumeratedShape,CoreML::NNCompiler::MLEnumeratedShape>((uint64_t)v53, (uint64_t)v53, (uint64_t)&v42);
      *(void *)&long long v46 = &__p;
      std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
      if (v42.n128_u64[0])
      {
        v42.n128_u64[1] = v42.n128_u64[0];
        operator delete((void *)v42.n128_u64[0]);
      }
      v42.n128_u64[0] = (unint64_t)&v48;
      std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
      goto LABEL_58;
    }
    __n128 v42 = 0uLL;
    unint64_t v43 = 0;
    std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v42, v51, v52, (v52 - (uint64_t)v51) >> 3);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<0ul,CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLFixedShape>((uint64_t)v53, (uint64_t)v53, &v42);
    uint64_t v25 = (char *)v42.n128_u64[0];
    if (!v42.n128_u64[0]) {
      goto LABEL_58;
    }
LABEL_38:
    operator delete(v25);
    goto LABEL_58;
  }
  uint64_t v8 = *((void *)v2 + 5);
  std::string::size_type v48 = 0;
  std::string::size_type v49 = 0;
  unint64_t v50 = 0;
  std::vector<CoreML::NNCompiler::MLRangeShape::Range>::reserve((void **)&v48, *(int *)(v8 + 24));
  uint64_t v9 = *(void *)(v8 + 32);
  if (v9) {
    uint64_t v10 = v9 + 8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(int *)(v8 + 24);
  if (v11)
  {
    std::string::size_type v40 = v2;
    std::string::size_type v41 = this;
    uint64_t v12 = v10 + 8 * v11;
    char v13 = v49;
    unint64_t v14 = v50;
    int v15 = v48;
    do
    {
      uint64_t v16 = *(void *)(*(void *)v10 + 16);
      uint64_t v17 = *(void *)(*(void *)v10 + 24);
      if ((unint64_t)v13 >= v14)
      {
        uint64_t v18 = (v13 - v15) >> 4;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60)
        {
          std::string::size_type v48 = v15;
          std::string::size_type v49 = v13;
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v14 - (void)v15) >> 3 > v19) {
          unint64_t v19 = (uint64_t)(v14 - (void)v15) >> 3;
        }
        if (v14 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v20);
        }
        else {
          uint64_t v21 = 0;
        }
        int v22 = (void *)(v20 + 16 * v18);
        void *v22 = v16;
        v22[1] = v17;
        if (v13 == v15)
        {
          std::string::size_type v24 = (char *)(v20 + 16 * v18);
        }
        else
        {
          unint64_t v23 = v20 + 16 * v18;
          do
          {
            std::string::size_type v24 = (char *)(v23 - 16);
            *(_OWORD *)(v23 - 16) = *((_OWORD *)v13 - 1);
            v13 -= 16;
            v23 -= 16;
          }
          while (v13 != v15);
        }
        unint64_t v14 = v20 + 16 * v21;
        char v13 = (char *)(v22 + 2);
        if (v15) {
          operator delete(v15);
        }
        int v15 = v24;
      }
      else
      {
        *(void *)char v13 = v16;
        *((void *)v13 + 1) = v17;
        v13 += 16;
      }
      v10 += 8;
    }
    while (v10 != v12);
    std::string::size_type v49 = v13;
    unint64_t v50 = v14;
    std::string::size_type v48 = v15;
    uint64_t v2 = v40;
    this = v41;
  }
  CoreML::NNCompiler::MLRangeShape::MLRangeShape(&v42, (uint64_t)&v51, (uint64_t)&v48);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<1ul,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLRangeShape>((uint64_t)v53, (uint64_t)v53, (uint64_t)&v42);
  if (__p)
  {
    std::string::size_type v45 = __p;
    operator delete(__p);
  }
  if (v42.n128_u64[0])
  {
    v42.n128_u64[1] = v42.n128_u64[0];
    operator delete((void *)v42.n128_u64[0]);
  }
  uint64_t v25 = v48;
  if (v48) {
    goto LABEL_38;
  }
LABEL_58:
  int v38 = *((_DWORD *)v2 + 9);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)this, (uint64_t)v53);
  *((_DWORD *)this + 14) = v38;
  if (v51) {
    operator delete(v51);
  }
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v53);
}

void sub_19E944EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27)
{
  a17 = &a21;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (__p) {
    operator delete(__p);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 48);
  if (v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EF0E60D8[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = v3;
  }
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 64) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 64);
  if (v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EF0E6100[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 64) = v3;
  }
  return a1;
}

void sub_19E94504C(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  char v5 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x88uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    uint64_t v8 = (std::string *)(v6 + 4);
    uint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    CoreML::NNCompiler::MLShapeInfo::MLShapeInfo((CoreML::NNCompiler::MLShapeInfo *)(v6 + 7));
    char v13 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_19E94512C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 64);
  uint64_t v4 = *(unsigned int *)(a2 + 64);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EF0E60F0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 64) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EF0E6128[v4])(&v5, result, a2);
}

void anonymous namespace'::ImageShapeInfoFromSpec(_anonymous_namespace_ *this, const CoreML::Specification::ImageFeatureType *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 14) = 0;
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = *((void *)a2 + 3);
  int v6 = *((_DWORD *)a2 + 13);
  if (v6 == 31)
  {
    int v22 = (uint64_t *)*((void *)a2 + 5);
    if (v22 == &CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_) {
      goto LABEL_34;
    }
    unint64_t v23 = (int64x2_t *)v22[2];
    if (v23)
    {
      int64x2_t v24 = v23[1];
      uint64_t v25 = (int64x2_t *)v22[3];
      if (!v25)
      {
        int64x2_t v26 = vdupq_n_s64(v5);
LABEL_33:
        v30[0] = v24;
        v30[1] = v26;
        CoreML::NNCompiler::MLImageShapeInfo::MLImageShapeInfo((uint64_t)v31, v4, v5, (uint64_t *)v30, *((_DWORD *)a2 + 8));
        std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>>((uint64_t)this, (uint64_t)v31);
LABEL_35:
        *((_DWORD *)this + 14) = v32;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v31);
        return;
      }
    }
    else
    {
      uint64_t v25 = (int64x2_t *)v22[3];
      if (!v25) {
        goto LABEL_34;
      }
      int64x2_t v24 = vdupq_n_s64(v4);
    }
    int64x2_t v26 = v25[1];
    goto LABEL_33;
  }
  if (v6 != 21)
  {
LABEL_34:
    CoreML::NNCompiler::MLImageShapeInfo::MLImageShapeInfo((uint64_t)v31, *((void *)a2 + 2), v5, *((_DWORD *)a2 + 8));
    std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>>((uint64_t)this, (uint64_t)v31);
    goto LABEL_35;
  }
  uint64_t v7 = *((void *)a2 + 5);
  unint64_t v33 = 0;
  unint64_t v34 = 0;
  std::string::size_type v35 = 0;
  std::vector<std::pair<unsigned long,unsigned long>>::reserve((void **)&v33, *(int *)(v7 + 24));
  uint64_t v8 = *(void *)(v7 + 32);
  if (v8) {
    uint64_t v9 = v8 + 8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(int *)(v7 + 24);
  if (v10)
  {
    unint64_t v27 = v5;
    unint64_t v28 = v4;
    uint64_t v11 = v9 + 8 * v10;
    char v13 = v34;
    uint64_t v12 = v35;
    uint64_t v14 = v33;
    do
    {
      if (v13 >= v12)
      {
        long long v29 = *(_OWORD *)(*(void *)v9 + 16);
        uint64_t v15 = (v13 - v14) >> 4;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60)
        {
          unint64_t v33 = v14;
          unint64_t v34 = v13;
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if ((v12 - v14) >> 3 > v16) {
          unint64_t v16 = (v12 - v14) >> 3;
        }
        if ((unint64_t)(v12 - v14) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v17);
        unint64_t v20 = &v18[16 * v15];
        *(_OWORD *)unint64_t v20 = v29;
        uint64_t v21 = v20 + 16;
        if (v13 != v14)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v13 - 1);
            v20 -= 16;
            v13 -= 16;
          }
          while (v13 != v14);
          char v13 = v14;
        }
        uint64_t v14 = v20;
        uint64_t v12 = &v18[16 * v19];
        if (v13) {
          operator delete(v13);
        }
        char v13 = v21;
      }
      else
      {
        *(_OWORD *)char v13 = *(_OWORD *)(*(void *)v9 + 16);
        v13 += 16;
      }
      v9 += 8;
    }
    while (v9 != v11);
    unint64_t v33 = v14;
    unint64_t v34 = v13;
    std::string::size_type v35 = v12;
    unint64_t v5 = v27;
    unint64_t v4 = v28;
  }
  CoreML::NNCompiler::MLImageShapeInfo::MLImageShapeInfo((uint64_t)v31, v4, v5, (uint64_t **)&v33, *((_DWORD *)a2 + 8));
  std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>>((uint64_t)this, (uint64_t)v31);
  *((_DWORD *)this + 14) = v32;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v31);
  if (v33) {
    operator delete(v33);
  }
}

void sub_19E945430(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned long,unsigned long>>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(a2);
    unint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v7 = &v4[16 * v6];
    uint64_t v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
        v10 -= 16;
        v8 -= 16;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 48);
  uint64_t v4 = *(unsigned int *)(a2 + 48);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EF0E60A8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 4_Block_object_dispose(&a9, 8) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EF0E60C0[v4])(&v5, result, a2);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<2ul,CoreML::NNCompiler::MLEnumeratedShape,CoreML::NNCompiler::MLEnumeratedShape>(*a1, a2, a3).n128_u64[0];
  return result;
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<2ul,CoreML::NNCompiler::MLEnumeratedShape,CoreML::NNCompiler::MLEnumeratedShape>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 48);
  if (v5 == -1) {
    goto LABEL_9;
  }
  if (v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_1EF0E60A8[v5])(&v10, a1);
LABEL_9:
    *(void *)a1 = 0;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(void *)(a1 + 16) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    __n128 result = *(__n128 *)(a3 + 24);
    *(__n128 *)(a1 + 24) = result;
    *(void *)(a1 + 40) = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(_DWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = 2;
    return result;
  }
  uint64_t v7 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + _Block_object_dispose(&a9, 8) = v7;
    operator delete(v7);
    *(void *)a2 = 0;
    *(void *)(a2 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v8 = (void **)(a2 + 24);
  if (*(void *)(a2 + 24))
  {
    std::vector<std::vector<long long>>::__clear[abi:ne180100]((uint64_t *)(a2 + 24));
    operator delete(*v8);
    *uint64_t v8 = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
  }
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<1ul,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLRangeShape>(*a1, a2, a3).n128_u64[0];
  return result;
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<1ul,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLRangeShape>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 48);
  if (v5 == -1) {
    goto LABEL_9;
  }
  if (v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_1EF0E60A8[v5])(&v10, a1);
LABEL_9:
    *(void *)a1 = 0;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(void *)(a1 + 16) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    __n128 result = *(__n128 *)(a3 + 24);
    *(__n128 *)(a1 + 24) = result;
    *(void *)(a1 + 40) = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(_DWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = 1;
    return result;
  }
  uint64_t v7 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + _Block_object_dispose(&a9, 8) = v7;
    operator delete(v7);
    *(void *)a2 = 0;
    *(void *)(a2 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v8 = *(void **)(a2 + 24);
  if (v8)
  {
    *(void *)(a2 + 32) = v8;
    operator delete(v8);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
  }
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  *(void *)&double result = std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<0ul,CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLFixedShape>(*a1, a2, a3).n128_u64[0];
  return result;
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__assign_alt[abi:ne180100]<0ul,CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLFixedShape>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 48);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    ((void (*)(char *, uint64_t))off_1EF0E60A8[v5])(&v9, a1);
LABEL_7:
    *(void *)a1 = 0;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a3;
    *(__n128 *)a1 = *a3;
    *(void *)(a1 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(_DWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    return result;
  }
  uint64_t v7 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + _Block_object_dispose(&a9, 8) = v7;
    operator delete(v7);
    *(void *)a2 = 0;
    *(void *)(a2 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  __n128 result = *a3;
  *(__n128 *)a2 = *a3;
  *(void *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML10NNCompiler21MLMultiArrayShapeInfoENS9_16MLImageShapeInfoEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSQ_EEEDcSI_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 64);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>>(a2, a3);
      *(_DWORD *)(a2 + 56) = *(_DWORD *)(a3 + 56);
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EF0E60F0[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 64) = -1;
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor(v4, a3);
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a3 + 56);
  *(_DWORD *)(v4 + 64) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML10NNCompiler21MLMultiArrayShapeInfoENS9_16MLImageShapeInfoEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEEOSQ_EEEDcSI_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 64);
  if (v5 != -1)
  {
    if (!v5)
    {
      uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>>(a2, a3);
      *(_DWORD *)(a2 + 56) = *(_DWORD *)(a3 + 56);
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EF0E60F0[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 64) = -1;
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor(v4, a3);
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a3 + 56);
  *(_DWORD *)(v4 + 64) = 0;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLShapeInfo>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

CoreML::NNCompiler::MLShapeInfo *CoreML::NNCompiler::MLShapeInfo::MLShapeInfo(CoreML::NNCompiler::MLShapeInfo *this)
{
  memset(v3, 0, 24);
  int v4 = 0;
  int v5 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)this + 8, (uint64_t)v3);
  *((_DWORD *)this + 16) = v5;
  *((_DWORD *)this + 1_Block_object_dispose(&a9, 8) = 0;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v3);
  return this;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler21MLMultiArrayShapeInfoENS9_16MLImageShapeInfoEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__copy_constructor(a2, a3);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a3 + 56);
  return result;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 48);
  if (v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EF0E6110[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = v3;
  }
  return a1;
}

void sub_19E945B6C(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<std::vector<long long>>::__init_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>((uint64_t)(a2 + 3), *(void *)(a3 + 24), *(void *)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3));
}

void sub_19E945BE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__init_with_size[abi:ne180100]<CoreML::NNCompiler::MLRangeShape::Range*,CoreML::NNCompiler::MLRangeShape::Range*>(a2 + 3, *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 4);
}

void sub_19E945C60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler21MLMultiArrayShapeInfoENS9_16MLImageShapeInfoEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__copy_constructor(a2, a3);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a3 + 56);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a3 + 16) = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(a2 + 3) = result;
  a2[5] = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a3 + 16) = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(a2 + 3) = result;
  a2[5] = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6CoreML10NNCompiler12MLFixedShapeENS9_12MLRangeShapeENS9_17MLEnumeratedShapeEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  __n128 result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void anonymous namespace'::ShapeFromRepeatedField(uint64_t a1, int *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<long long>::reserve((void **)a1, *a2);
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    char v5 = (uint64_t *)(v4 + 8);
  }
  else {
    char v5 = 0;
  }
  if (v4) {
    uint64_t v6 = v4 + 8 + 8 * *a2;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v5 != (uint64_t *)v6)
  {
    uint64_t v7 = *(void **)(a1 + 8);
    unint64_t v8 = *(void *)(a1 + 16);
    do
    {
      uint64_t v9 = *v5;
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v11 = *(void **)a1;
        uint64_t v12 = ((uint64_t)v7 - *(void *)a1) >> 3;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v8 - (void)v11) >> 2 > v13) {
          unint64_t v13 = (uint64_t)(v8 - (void)v11) >> 2;
        }
        if (v8 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        unint64_t v16 = (void *)(v14 + 8 * v12);
        *unint64_t v16 = v9;
        char v10 = v16 + 1;
        while (v7 != v11)
        {
          uint64_t v17 = *--v7;
          *--unint64_t v16 = v17;
        }
        unint64_t v8 = v14 + 8 * v15;
        *(void *)a1 = v16;
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v10;
        *(void *)(a1 + 16) = v8;
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *uint64_t v7 = v9;
        char v10 = v7 + 1;
      }
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v10;
      ++v5;
      uint64_t v7 = v10;
    }
    while (v5 != (uint64_t *)v6);
  }
}

void sub_19E945EA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **CoreML::MLNeuralNetworkUtilities::getStateShapeInfosFromSpec(uint64_t **this, const CoreML::Specification::ModelDescription *a2, uint64_t a3)
{
  v15[9] = *MEMORY[0x1E4F143B8];
  this[1] = 0;
  this[2] = 0;
  *this = (uint64_t *)(this + 1);
  if (a3) {
    uint64_t v3 = (uint64_t *)(a3 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  if (a2)
  {
    uint64_t v4 = this;
    uint64_t v5 = 8 * (int)a2;
    do
    {
      uint64_t v6 = *v3;
      uint64_t v7 = *(uint64_t **)(*v3 + 32);
      if (!v7) {
        uint64_t v7 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((_DWORD *)v7 + 9) == 8)
      {
        unint64_t v8 = (uint64_t *)v7[3];
      }
      else
      {
        this = (uint64_t **)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)this);
        unint64_t v8 = &CoreML::Specification::_StateFeatureType_default_instance_;
      }
      if (*((_DWORD *)v8 + 7) == 1)
      {
        uint64_t v9 = (const CoreML::Specification::ArrayFeatureType *)v8[2];
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)this);
        uint64_t v9 = (const CoreML::Specification::ArrayFeatureType *)&CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v14, (uint64_t)v11);
      v14[14] = v12;
      v14[16] = 0;
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v15, (uint64_t)v14);
      unint64_t v13 = *(long long **)(v6 + 16);
      char v10 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v13, &v13);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v10 + 8), (uint64_t)v15);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v15);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v14);
      this = (uint64_t **)std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v11);
      ++v3;
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

void sub_19E946050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::MLNeuralNetworkUtilities::getOutputNamesFromSpec(CoreML::MLNeuralNetworkUtilities *this, const CoreML::Specification::ModelDescription *a2, uint64_t a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a3) {
    uint64_t v3 = a3 + 8;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a2)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 8 * (int)a2;
    do
    {
      uint64_t v7 = *(long long **)(*(void *)v3 + 16);
      if (v5 >= *((void *)this + 2))
      {
        unint64_t v5 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)this, v7);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)this, v7);
        v5 += 24;
      }
      *((void *)this + 1) = v5;
      v3 += 8;
      v6 -= 8;
    }
    while (v6);
  }
}

void sub_19E946134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    char v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    char v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_19E94625C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void CoreML::MLNeuralNetworkUtilities::getEspressoConfigurationsFromShapeInfos(uint64_t a1, void *a2, void *a3, uint64_t a4, int a5, int a6, void *a7)
{
  uint64_t v201 = *MEMORY[0x1E4F143B8];
  id v11 = a7;
  std::map<std::string,CoreML::NNCompiler::MLShapeInfo>::map[abi:ne180100]((uint64_t)&v184, a2);
  unint64_t v14 = (void *)*a3;
  uint64_t v13 = a3 + 1;
  long long v12 = v14;
  if (v14 != v13)
  {
    uint64_t v15 = (uint64_t *)v185;
    do
    {
      unint64_t v16 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,CoreML::NNCompiler::MLShapeInfo> const&>(&v184, v15, v12 + 4, (uint64_t)(v12 + 4));
      uint64_t v17 = (uint64_t *)v16[1];
      if (v17)
      {
        do
        {
          uint64_t v15 = v17;
          uint64_t v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v15 = (uint64_t *)v16[2];
          BOOL v48 = *v15 == (void)v16;
          unint64_t v16 = v15;
        }
        while (!v48);
      }
      uint64_t v18 = (void *)v12[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v12[2];
          BOOL v48 = *v19 == (void)v12;
          long long v12 = v19;
        }
        while (!v48);
      }
      long long v12 = v19;
    }
    while (v19 != v13);
  }
  if (!v185[1])
  {
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)a1 = a1 + 8;
    goto LABEL_235;
  }
  int v177 = a5;
  id v173 = v11;
  id v175 = v11;
  unint64_t v20 = (char *)&v196 + 8;
  *((void *)&v196 + 1) = 0;
  v197[0] = 0;
  *(void *)&long long v196 = (char *)&v196 + 8;
  uint64_t v21 = v184;
  if (v184 == (uint64_t *)v185)
  {
    *(_OWORD *)&v191.__r_.__value_.__r.__words[1] = 0uLL;
    v191.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191.__r_.__value_.__l.__size_;
  }
  else
  {
    do
    {
      uint64_t Shape = CoreML::NNCompiler::MLShapeInfo::getShape((CoreML::NNCompiler::MLShapeInfo *)(v21 + 7));
      int v23 = *(_DWORD *)(Shape + 48);
      if (v23 == 2) {
        uint64_t v24 = Shape;
      }
      else {
        uint64_t v24 = 0;
      }
      if (v23 == 2)
      {
        uint64_t v25 = (uint64_t **)&v196 + 1;
        int64x2_t v26 = (uint64_t **)&v196 + 1;
        if (*((void *)&v196 + 1))
        {
          unint64_t v27 = (uint64_t *)*((void *)&v196 + 1);
          while (1)
          {
            while (1)
            {
              uint64_t v25 = (uint64_t **)v27;
              unint64_t v28 = v27 + 4;
              if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v21 + 4, v27 + 4)) {
                break;
              }
              unint64_t v27 = *v25;
              int64x2_t v26 = v25;
              if (!*v25) {
                goto LABEL_27;
              }
            }
            if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v28, v21 + 4)) {
              break;
            }
            int64x2_t v26 = v25 + 1;
            unint64_t v27 = v25[1];
            if (!v27) {
              goto LABEL_27;
            }
          }
        }
        else
        {
LABEL_27:
          long long v29 = (uint64_t *)operator new(0x40uLL);
          uint64_t v30 = (std::string *)(v29 + 4);
          if (*((char *)v21 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v30, (const std::string::value_type *)v21[4], v21[5]);
          }
          else
          {
            long long v31 = *((_OWORD *)v21 + 2);
            v29[6] = v21[6];
            *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
          }
          v29[7] = v24;
          *long long v29 = 0;
          v29[1] = 0;
          v29[2] = (uint64_t)v25;
          void *v26 = v29;
          if (*(void *)v196)
          {
            *(void *)&long long v196 = *(void *)v196;
            long long v29 = *v26;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v196 + 1), v29);
          ++v197[0];
        }
      }
      int v32 = (uint64_t *)v21[1];
      if (v32)
      {
        do
        {
          unint64_t v33 = v32;
          int v32 = (uint64_t *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          unint64_t v33 = (uint64_t *)v21[2];
          BOOL v48 = *v33 == (void)v21;
          uint64_t v21 = v33;
        }
        while (!v48);
      }
      uint64_t v21 = v33;
    }
    while (v33 != (uint64_t *)v185);
    unint64_t v34 = v184;
    *(_OWORD *)&v191.__r_.__value_.__r.__words[1] = 0uLL;
    v191.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191.__r_.__value_.__l.__size_;
    if (v184 != (uint64_t *)v185)
    {
      do
      {
        uint64_t v35 = CoreML::NNCompiler::MLShapeInfo::getShape((CoreML::NNCompiler::MLShapeInfo *)(v34 + 7));
        int v36 = *(_DWORD *)(v35 + 48);
        if (v36 == 1) {
          uint64_t v37 = v35;
        }
        else {
          uint64_t v37 = 0;
        }
        if (v36 == 1)
        {
          p_std::string::size_type size = &v191.__r_.__value_.__l.__size_;
          std::string::size_type v39 = &v191.__r_.__value_.__l.__size_;
          if (v191.__r_.__value_.__l.__size_)
          {
            std::string::size_type size = v191.__r_.__value_.__l.__size_;
            while (1)
            {
              while (1)
              {
                p_std::string::size_type size = (std::string::size_type *)size;
                std::string::size_type v41 = (void *)(size + 32);
                if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v34 + 4, (void *)(size + 32)))break; {
                std::string::size_type size = *p_size;
                }
                std::string::size_type v39 = p_size;
                if (!*p_size) {
                  goto LABEL_51;
                }
              }
              if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v41, v34 + 4)) {
                break;
              }
              std::string::size_type v39 = p_size + 1;
              std::string::size_type size = p_size[1];
              if (!size) {
                goto LABEL_51;
              }
            }
          }
          else
          {
LABEL_51:
            __n128 v42 = (uint64_t *)operator new(0x40uLL);
            unint64_t v43 = (std::string *)(v42 + 4);
            if (*((char *)v34 + 55) < 0)
            {
              std::string::__init_copy_ctor_external(v43, (const std::string::value_type *)v34[4], v34[5]);
            }
            else
            {
              long long v44 = *((_OWORD *)v34 + 2);
              v42[6] = v34[6];
              *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v44;
            }
            v42[7] = v37;
            *__n128 v42 = 0;
            v42[1] = 0;
            v42[2] = (uint64_t)p_size;
            *std::string::size_type v39 = (std::string::size_type)v42;
            if (*(void *)v191.__r_.__value_.__l.__data_)
            {
              v191.__r_.__value_.__r.__words[0] = *(void *)v191.__r_.__value_.__l.__data_;
              __n128 v42 = (uint64_t *)*v39;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v191.__r_.__value_.__l.__size_, v42);
            ++v191.__r_.__value_.__r.__words[2];
          }
        }
        std::string::size_type v45 = (uint64_t *)v34[1];
        if (v45)
        {
          do
          {
            long long v46 = v45;
            std::string::size_type v45 = (uint64_t *)*v45;
          }
          while (v45);
        }
        else
        {
          do
          {
            long long v46 = (uint64_t *)v34[2];
            BOOL v48 = *v46 == (void)v34;
            unint64_t v34 = v46;
          }
          while (!v48);
        }
        unint64_t v34 = v46;
      }
      while (v46 != (uint64_t *)v185);
      uint64_t v47 = v197[0];
      if (v197[0]) {
        BOOL v48 = v191.__r_.__value_.__r.__words[2] == 0;
      }
      else {
        BOOL v48 = 1;
      }
      if (!v48)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v186);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)"A model doesn't allow a mixture of enumerated and range shape flexibility, but feature ", 87);
        std::operator+<char>();
        if ((SBYTE7(v199) & 0x80u) == 0) {
          std::string::size_type v49 = &v198;
        }
        else {
          std::string::size_type v49 = (long long *)v198;
        }
        if ((SBYTE7(v199) & 0x80u) == 0) {
          uint64_t v50 = BYTE7(v199);
        }
        else {
          uint64_t v50 = *((void *)&v198 + 1);
        }
        long long v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)v49, v50);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)")", 1);
        if (SBYTE7(v199) < 0) {
          operator delete((void *)v198);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)" uses the enumerated shape and feature ", 39);
        std::operator+<char>();
        if ((SBYTE7(v199) & 0x80u) == 0) {
          uint64_t v52 = &v198;
        }
        else {
          uint64_t v52 = (long long *)v198;
        }
        if ((SBYTE7(v199) & 0x80u) == 0) {
          uint64_t v53 = BYTE7(v199);
        }
        else {
          uint64_t v53 = *((void *)&v198 + 1);
        }
        int v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)v52, v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)")", 1);
        if (SBYTE7(v199) < 0) {
          operator delete((void *)v198);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)" uses the range shape.", 22);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, (const std::string *)&v198);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DB110;
      }
      goto LABEL_87;
    }
  }
  uint64_t v47 = v197[0];
LABEL_87:
  id v56 = v175;
  int v57 = v177;
  if (v47)
  {
    std::string v58 = (char *)v196;
    if ((long long *)v196 != (long long *)((char *)&v196 + 8))
    {
      unint64_t v20 = (char *)v196;
      while (1)
      {
        uint64_t v59 = (char *)*((void *)v58 + 1);
        long long v60 = v58;
        if (v59)
        {
          do
          {
            std::string v58 = v59;
            uint64_t v59 = *(char **)v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            std::string v58 = (char *)*((void *)v60 + 2);
            BOOL v48 = *(void *)v58 == (void)v60;
            long long v60 = v58;
          }
          while (!v48);
        }
        if (v58 == (char *)&v196 + 8) {
          break;
        }
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(*(void *)(*((void *)v20 + 7) + 32) - *(void *)(*((void *)v20 + 7) + 24)) >> 3) < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*((void *)v58 + 7) + 32) - *(void *)(*((void *)v58 + 7) + 24)) >> 3))
          unint64_t v20 = v58;
      }
    }
    if (0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(void *)(*((void *)v20 + 7) + 32) - *(void *)(*((void *)v20 + 7) + 24)) >> 3) >= 0x81)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v186);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)"A model supports up to ", 23);
      std::ostream::operator<<();
      v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)" enumerated shapes, but it configures the input feature ", 56);
      int v168 = v20[55];
      if (v168 >= 0) {
        uint64_t v169 = (uint64_t)(v20 + 32);
      }
      else {
        uint64_t v169 = *((void *)v20 + 4);
      }
      if (v168 >= 0) {
        uint64_t v170 = v20[55];
      }
      else {
        uint64_t v170 = *((void *)v20 + 5);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, v169, v170);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)" with ", 6);
      v171 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)" enumerated shapes.", 19);
      v172 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v172, (const std::string *)&v198);
      v172->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DB0C0;
    }
    std::string v61 = +[MLNeuralNetworkCompiler iOS18CompilerVersionInfo];
    if ([v175 olderThan:v61])
    {
      if (v197[0] >= 2uLL)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v186);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)"A model supports up to one input feature with enumerated shapes, ", 65);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)"but it configures these input features to use the enumerated shape flexibility: ", 80);
        writeNames(&v196, &v186);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)".", 1);
        int v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v62, (const std::string *)&v198);
        v62->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DB0E8;
      }
    }
    else
    {
      uint64_t v63 = v196;
      unint64_t v64 = *(void **)(v196 + 8);
      if (v64)
      {
        do
        {
          unint64_t v65 = v64;
          unint64_t v64 = (void *)*v64;
        }
        while (v64);
      }
      else
      {
        uint8x8_t v66 = (void *)v196;
        do
        {
          unint64_t v65 = (void *)v66[2];
          BOOL v48 = *v65 == (void)v66;
          uint8x8_t v66 = v65;
        }
        while (!v48);
      }
      if (v65 != (void *)((char *)&v196 + 8))
      {
        do
        {
          if (*(void *)(v65[7] + 32) - *(void *)(v65[7] + 24) != *(void *)(*(void *)(v196 + 56) + 32)
                                                                        - *(void *)(*(void *)(v196 + 56) + 24))
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v186);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, (uint64_t)"A model doesn't allow input features with enumerated flexibility to have unequal number of enumerated shapes, but input feature ", 128);
            int v156 = *(char *)(v63 + 55);
            if (v156 >= 0) {
              uint64_t v157 = v63 + 32;
            }
            else {
              uint64_t v157 = *(void *)(v63 + 32);
            }
            if (v156 >= 0) {
              uint64_t v158 = *(unsigned __int8 *)(v63 + 55);
            }
            else {
              uint64_t v158 = *(void *)(v63 + 40);
            }
            v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, v157, v158);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)" has ", 5);
            v160 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)" enumerated shapes and input feature ", 37);
            int v161 = *((char *)v65 + 55);
            if (v161 >= 0) {
              uint64_t v162 = (uint64_t)(v65 + 4);
            }
            else {
              uint64_t v162 = v65[4];
            }
            if (v161 >= 0) {
              uint64_t v163 = *((unsigned __int8 *)v65 + 55);
            }
            else {
              uint64_t v163 = v65[5];
            }
            v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v186, v162, v163);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)" has ", 5);
            v165 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)" enumerated shapes.", 19);
            v166 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::stringbuf::str();
            std::runtime_error::runtime_error(v166, (const std::string *)&v198);
            v166->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DB138;
          }
          float v67 = (void *)v65[1];
          if (v67)
          {
            do
            {
              std::string v68 = v67;
              float v67 = (void *)*v67;
            }
            while (v67);
          }
          else
          {
            do
            {
              std::string v68 = (_OWORD *)v65[2];
              BOOL v48 = *(void *)v68 == (void)v65;
              unint64_t v65 = v68;
            }
            while (!v48);
          }
          unint64_t v65 = v68;
        }
        while (v68 != (long long *)((char *)&v196 + 8));
      }
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v191.__r_.__value_.__l.__size_);
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*((char **)&v196 + 1));

  v182 = 0;
  uint64_t v183 = 0;
  v181 = &v182;
  uint64_t v69 = v184;
  if (v184 == (uint64_t *)v185)
  {
    v129 = &v182;
    goto LABEL_206;
  }
  if (a6) {
    int v70 = 5;
  }
  else {
    int v70 = 4;
  }
  v71.i32[0] = 1;
  v71.i32[1] = v70;
  if (v177) {
    unsigned int v72 = -1;
  }
  else {
    unsigned int v72 = 0;
  }
  int8x8_t v73 = vbsl_s8((int8x8_t)vdup_n_s32(v72), v71, (int8x8_t)0xFFFFFFFF00000001);
  do
  {
    long long v196 = 0uLL;
    v197[0] = 0;
    uint64_t v74 = CoreML::NNCompiler::MLShapeInfo::getShape((CoreML::NNCompiler::MLShapeInfo *)(v69 + 7));
    int v75 = *(_DWORD *)(v74 + 48);
    if (v75) {
      uint64_t v76 = 0;
    }
    else {
      uint64_t v76 = v74;
    }
    uint64_t v77 = CoreML::NNCompiler::MLShapeInfo::getShape((CoreML::NNCompiler::MLShapeInfo *)(v69 + 7));
    int v78 = *(_DWORD *)(v77 + 48);
    if (v75) {
      BOOL v79 = v78 == 2;
    }
    else {
      BOOL v79 = 1;
    }
    if (!v79)
    {
      long long v179 = 0uLL;
      uint64_t v180 = 0;
      goto LABEL_164;
    }
    if (v78 == 2)
    {
      memset(&v191, 0, sizeof(v191));
      std::vector<std::vector<long long>>::__init_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>((uint64_t)&v191, *(void *)(v77 + 24), *(void *)(v77 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v77 + 32) - *(void *)(v77 + 24)) >> 3));
    }
    else
    {
      long long v198 = 0uLL;
      *(void *)&long long v199 = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v198, *(const void **)v76, *(void *)(v76 + 8), (uint64_t)(*(void *)(v76 + 8) - *(void *)v76) >> 3);
      memset(&v191, 0, sizeof(v191));
      v192 = &v191;
      char v193 = 0;
      unint64_t v80 = operator new(0x18uLL);
      v191.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
      v191.__r_.__value_.__l.__size_ = (std::string::size_type)v80;
      v191.__r_.__value_.__r.__words[2] = (std::string::size_type)(v80 + 3);
      v194 = v80;
      v195 = v80;
      *(void *)&long long v186 = (char *)&v191.__r_.__value_.__l + 16;
      *((void *)&v186 + 1) = &v194;
      *(void *)&long long v187 = &v195;
      BYTE8(v187) = 0;
      v80[1] = 0;
      v80[2] = 0;
      long long v81 = v198;
      unint64_t v82 = (uint64_t)(*((void *)&v198 + 1) - v198) >> 3;
      *unint64_t v80 = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v80, (const void *)v81, *((uint64_t *)&v81 + 1), v82);
      v195 += 3;
      std::string::size_type v83 = (std::string::size_type)v195;
      BYTE8(v187) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::vector<long long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v186);
      v191.__r_.__value_.__l.__size_ = v83;
      if ((void)v198)
      {
        *((void *)&v198 + 1) = v198;
        operator delete((void *)v198);
      }
    }
    std::string::size_type v85 = v191.__r_.__value_.__l.__size_;
    uint64_t v84 = (int32x4_t **)v191.__r_.__value_.__r.__words[0];
    unint64_t v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v191.__r_.__value_.__l.__size_ - v191.__r_.__value_.__r.__words[0]) >> 3);
    uint64_t v87 = v196;
    if (v86 > (uint64_t)(v197[0] - v196) >> 6)
    {
      if (v86 >> 58) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v88 = *((void *)&v196 + 1);
      v188 = v197;
      *(void *)&long long v186 = std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v86);
      *((void *)&v186 + 1) = v186 + v88 - v87;
      *(void *)&long long v187 = *((void *)&v186 + 1);
      *((void *)&v187 + 1) = v186 + (v89 << 6);
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v196, &v186);
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v186);
      std::string::size_type v85 = v191.__r_.__value_.__l.__size_;
      uint64_t v84 = (int32x4_t **)v191.__r_.__value_.__r.__words[0];
    }
    while (v84 != (int32x4_t **)v85)
    {
      if (*((_DWORD *)v69 + 32))
      {
        int8x16_t v90 = (int8x16_t)vrev64q_s32(vuzp1q_s32(**v84, (*v84)[1]));
        int8x16_t v91 = vextq_s8(v90, v90, 8uLL);
        uint64_t v92 = *((void *)&v196 + 1);
        if (*((void *)&v196 + 1) < v197[0])
        {
          **((_OWORD **)&v196 + 1) = v91;
          *(int8x8_t *)(v92 + 16) = v73;
          uint64_t v93 = v92 + 64;
          *(_OWORD *)(v92 + 24) = 0u;
          *(_OWORD *)(v92 + 40) = 0u;
          *(void *)(v92 + 56) = 0;
          goto LABEL_161;
        }
        int8x16_t v178 = v91;
        uint64_t v95 = (uint64_t)(*((void *)&v196 + 1) - v196) >> 6;
        unint64_t v96 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 58) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v97 = v197[0] - v196;
        if ((uint64_t)(v197[0] - v196) >> 5 > v96) {
          unint64_t v96 = v97 >> 5;
        }
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v98 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v98 = v96;
        }
        v188 = v197;
        long long v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v98);
        long long v100 = &v99[64 * v95];
        *(void *)&long long v186 = v99;
        *((void *)&v186 + 1) = v100;
        *((void *)&v187 + 1) = &v99[64 * v101];
        *(int8x16_t *)long long v100 = v178;
        *((int8x8_t *)v100 + 2) = v73;
        *(_OWORD *)(v100 + 24) = 0u;
        *(_OWORD *)(v100 + 40) = 0u;
        *((void *)v100 + 7) = 0;
        *(void *)&long long v187 = v100 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v196, &v186);
        uint64_t v93 = *((void *)&v196 + 1);
        v102 = &v186;
      }
      else
      {
        uint64_t v94 = *((void *)&v196 + 1);
        if (*((void *)&v196 + 1) < v197[0])
        {
          **((_OWORD **)&v196 + 1) = v186;
          *(_OWORD *)(v94 + 16) = v187;
          *(void *)(v94 + 32) = v188;
          *(_OWORD *)(v94 + 40) = v189;
          *(void *)(v94 + 56) = v190;
          uint64_t v93 = v94 + 64;
          goto LABEL_161;
        }
        uint64_t v103 = (uint64_t)(*((void *)&v196 + 1) - v196) >> 6;
        unint64_t v104 = v103 + 1;
        if ((unint64_t)(v103 + 1) >> 58) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v105 = v197[0] - v196;
        if ((uint64_t)(v197[0] - v196) >> 5 > v104) {
          unint64_t v104 = v105 >> 5;
        }
        if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v106 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v106 = v104;
        }
        v200 = v197;
        uint64_t v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v106);
        v108 = &v107[64 * v103];
        *(void *)&long long v198 = v107;
        *((void *)&v198 + 1) = v108;
        *((void *)&v199 + 1) = &v107[64 * v109];
        *(_OWORD *)v108 = v186;
        *((_OWORD *)v108 + 1) = v187;
        *((void *)v108 + 4) = v188;
        *(_OWORD *)(v108 + 40) = v189;
        *((void *)v108 + 7) = v190;
        *(void *)&long long v199 = v108 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)&v196, &v198);
        uint64_t v93 = *((void *)&v196 + 1);
        v102 = &v198;
      }
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v102);
LABEL_161:
      *((void *)&v196 + 1) = v93;
      v84 += 3;
    }
    long long v179 = v196;
    uint64_t v180 = v197[0];
    v197[0] = 0;
    long long v196 = 0uLL;
    *(void *)&long long v186 = &v191;
    std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
LABEL_164:
    *(void *)&long long v186 = &v196;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
    int v110 = *((_DWORD *)v69 + 32);
    if (v110)
    {
      if (v110 != 1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      int v111 = *((_DWORD *)v69 + 30);
      id v112 = v175;
      uint64_t v113 = +[MLNeuralNetworkCompiler iOS17CompilerVersionInfo];
      int v114 = [v112 olderThan:v113] ^ 1;
      if (v111 != 40) {
        LOBYTE(v114) = 1;
      }
      if ((v114 & 1) == 0)
      {
        uint64_t v116 = *((void *)&v179 + 1);
        for (uint64_t i = v179; i != v116; i += 64)
          *(_DWORD *)(i + _Block_object_dispose(&a9, 8) = 3;
      }
    }
    v117 = v182;
    v118 = &v182;
    v119 = &v182;
    if (v182)
    {
      while (1)
      {
        while (1)
        {
          v118 = (uint64_t **)v117;
          v120 = v117 + 4;
          if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v69 + 4, v117 + 4)) {
            break;
          }
          v117 = *v118;
          v119 = v118;
          if (!*v118) {
            goto LABEL_179;
          }
        }
        if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v120, v69 + 4)) {
          break;
        }
        v119 = v118 + 1;
        v117 = v118[1];
        if (!v117) {
          goto LABEL_179;
        }
      }
      v121 = v118;
    }
    else
    {
LABEL_179:
      v121 = operator new(0x50uLL);
      *(void *)&long long v186 = v121;
      *((void *)&v186 + 1) = &v182;
      LOBYTE(v187) = 0;
      v122 = (std::string *)(v121 + 4);
      if (*((char *)v69 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v122, (const std::string::value_type *)v69[4], v69[5]);
      }
      else
      {
        long long v123 = *((_OWORD *)v69 + 2);
        v121[6] = v69[6];
        *(_OWORD *)&v122->__r_.__value_.__l.__data_ = v123;
      }
      v121[8] = 0;
      v121[9] = 0;
      v121[7] = 0;
      LOBYTE(v187) = 1;
      void *v121 = 0;
      v121[1] = 0;
      v121[2] = v118;
      *v119 = v121;
      v124 = v121;
      if (*v181)
      {
        v181 = (uint64_t **)*v181;
        v124 = *v119;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v182, v124);
      ++v183;
      *(void *)&long long v186 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v186);
    }
    int v57 = v177;
    v125 = (void **)(v121 + 7);
    if (v121[7])
    {
      std::vector<Espresso::layer_shape>::__clear[abi:ne180100](v121 + 7);
      operator delete(*v125);
      *v125 = 0;
      v121[8] = 0;
      v121[9] = 0;
    }
    *(_OWORD *)(v121 + 7) = v179;
    v121[9] = v180;
    uint64_t v180 = 0;
    long long v179 = 0uLL;
    *(void *)&long long v186 = &v179;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
    v126 = (uint64_t *)v69[1];
    if (v126)
    {
      do
      {
        v127 = v126;
        v126 = (uint64_t *)*v126;
      }
      while (v126);
    }
    else
    {
      do
      {
        v127 = (uint64_t *)v69[2];
        BOOL v48 = *v127 == (void)v69;
        uint64_t v69 = v127;
      }
      while (!v48);
    }
    uint64_t v69 = v127;
  }
  while (v127 != (uint64_t *)v185);
  v128 = v181;
  v129 = &v182;
  if (v181 != &v182)
  {
    v129 = v181;
    while (1)
    {
      v130 = v128[1];
      v131 = v128;
      if (v130)
      {
        do
        {
          v128 = (uint64_t **)v130;
          v130 = (uint64_t *)*v130;
        }
        while (v130);
      }
      else
      {
        do
        {
          v128 = (uint64_t **)v131[2];
          BOOL v48 = *v128 == (uint64_t *)v131;
          v131 = v128;
        }
        while (!v48);
      }
      if (v128 == &v182) {
        break;
      }
      if ((char *)v129[8] - (char *)v129[7] < (unint64_t)((char *)v128[8] - (char *)v128[7])) {
        v129 = v128;
      }
    }
  }
LABEL_206:
  v133 = v129[7];
  v132 = v129[8];
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if ((char *)v132 - (char *)v133 != 64)
  {
    long long v198 = 0u;
    long long v199 = 0u;
    LODWORD(v200) = 1065353216;
    if (v132 != v133)
    {
      uint64_t v134 = 0;
      if ((unint64_t)(((char *)v132 - (char *)v133) >> 6) <= 1) {
        uint64_t v135 = 1;
      }
      else {
        uint64_t v135 = ((char *)v132 - (char *)v133) >> 6;
      }
      do
      {
        long long v186 = 0uLL;
        v188 = 0;
        *(void *)&long long v189 = 0;
        *(void *)&long long v187 = 0;
        *((void *)&v187 + 1) = &v188;
        v136 = v181;
        if (v181 != &v182)
        {
          do
          {
            if (v136[7] != v136[8])
            {
              *(void *)&long long v196 = v136 + 4;
              uint64_t v137 = *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v198, (unsigned __int8 *)v136 + 32, (long long **)&v196)+ 5);
              v139 = v136[7];
              v138 = v136[8];
              *(void *)&long long v196 = v136 + 4;
              v140 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v198, (unsigned __int8 *)v136 + 32, (long long **)&v196);
              unint64_t v141 = (((char *)v138 - (char *)v139) >> 6) - 1;
              if (v141 >= v137 + 1) {
                unint64_t v141 = v137 + 1;
              }
              *((void *)v140 + 5) = v141;
              v142 = v136[7];
              *(void *)&long long v196 = v136 + 4;
              v143 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v187 + 1, v136 + 4, (long long **)&v196);
              v144 = &v142[8 * v137];
              long long v145 = *(_OWORD *)v144;
              long long v146 = *((_OWORD *)v144 + 1);
              *((void *)v143 + 11) = v144[4];
              *(_OWORD *)(v143 + 72) = v146;
              *(_OWORD *)(v143 + 56) = v145;
              if (v143 + 56 != (char *)v144) {
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v143 + 96, (char *)v144[5], v144[6], (v144[6] - v144[5]) >> 2);
              }
            }
            v147 = v136[1];
            if (v147)
            {
              do
              {
                v148 = (uint64_t **)v147;
                v147 = (uint64_t *)*v147;
              }
              while (v147);
            }
            else
            {
              do
              {
                v148 = (uint64_t **)v136[2];
                BOOL v48 = *v148 == (uint64_t *)v136;
                v136 = v148;
              }
              while (!v48);
            }
            v136 = v148;
          }
          while (v148 != &v182);
        }
        if (&v186 != (long long *)a4) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v186, *(std::string **)a4, *(long long **)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3));
        }
        CoreML::MLNeuralNetworkUtilities::hashConfigShapesToConfigurationName(&v191, (const Espresso::net_configuration *)&v186);
        v149 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>(a1, &v179, &v191);
        if (!*v149)
        {
          v150 = v149;
          v151 = (char *)operator new(0x68uLL);
          *((void *)&v196 + 1) = a1 + 8;
          *(std::string *)(v151 + 32) = v191;
          memset(&v191, 0, sizeof(v191));
          *(_OWORD *)(v151 + 56) = v186;
          long long v186 = 0uLL;
          long long v152 = v187;
          *(void *)&long long v187 = 0;
          *(_OWORD *)(v151 + 72) = v152;
          v153 = v188;
          uint64_t v154 = v189;
          *((void *)v151 + 11) = v188;
          *((void *)v151 + 12) = v154;
          v155 = v151 + 88;
          if (v154)
          {
            v153[2] = v155;
            *((void *)&v187 + 1) = &v188;
            v188 = 0;
            *(void *)&long long v189 = 0;
          }
          else
          {
            *((void *)v151 + 10) = v155;
          }
          LOBYTE(v197[0]) = 1;
          std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, v179, v150, (uint64_t *)v151);
          *(void *)&long long v196 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100]((uint64_t)&v196);
        }
        if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v191.__r_.__value_.__l.__data_);
        }
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v188);
        *(void *)&long long v196 = &v186;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
        ++v134;
      }
      while (v134 != v135);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v198);
  }
  std::__tree<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::layer_shape>>>>::destroy(v182);
  id v11 = v173;
LABEL_235:
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(v185[0]);
}

void sub_19E947594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p)
{
  if (*(char *)(v36 - 137) < 0)
  {
    operator delete(*(void **)(v36 - 160));
    if ((v34 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a29);
      std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(v36 - 240));
      std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(v36 - 184));

      std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v35);
  goto LABEL_6;
}

uint64_t std::map<std::string,CoreML::NNCompiler::MLShapeInfo>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  unint64_t v4 = a2 + 1;
  unint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,CoreML::NNCompiler::MLShapeInfo> const&>((uint64_t **)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          unint64_t v5 = v7;
        }
        while (!v8);
      }
      unint64_t v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_19E94790C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  unint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_19E947A90(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x19F3C1850](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19F3C1850](a1 + 112);
  return a1;
}

void *writeNames(void *a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
  uint64_t v6 = (void *)*a1;
  uint64_t v4 = a1 + 1;
  unint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      int v7 = *((char *)v5 + 55);
      if (v7 >= 0) {
        uint64_t v8 = (uint64_t)(v5 + 4);
      }
      else {
        uint64_t v8 = v5[4];
      }
      if (v7 >= 0) {
        uint64_t v9 = *((unsigned __int8 *)v5 + 55);
      }
      else {
        uint64_t v9 = v5[5];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v8, v9);
      char v10 = (void *)v5[1];
      id v11 = v10;
      long long v12 = v5;
      if (v10)
      {
        do
        {
          uint64_t v13 = v11;
          id v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v12[2];
          BOOL v14 = *v13 == (void)v12;
          long long v12 = v13;
        }
        while (!v14);
      }
      if (v13 != v4)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ", 2);
        char v10 = (void *)v5[1];
      }
      if (v10)
      {
        do
        {
          uint64_t v15 = v10;
          char v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v5[2];
          BOOL v14 = *v15 == (void)v5;
          unint64_t v5 = v15;
        }
        while (!v14);
      }
      unint64_t v5 = v15;
    }
    while (v15 != v4);
  }

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
}

uint64_t anonymous namespace'::CreateLayerShapeFromMultiArrayShape(uint64_t result, int32x4_t **a2, int a3, int a4)
{
  *(void *)(result + 56) = 0;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)__n128 result = xmmword_19EC7B870;
  *(void *)(result + 16) = 0xFFFFFFFF00000001;
  if (a3)
  {
    unint64_t v5 = *a2;
    unint64_t v6 = (char *)a2[1] - (char *)*a2;
    unint64_t v7 = v6 >> 3;
    if ((int)(v6 >> 3) <= 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v40, "Input rank is less than 1");
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &v40);
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DB098;
    }
    uint64_t v8 = 0;
    int v9 = 1;
    *(void *)&long long v10 = 0x100000001;
    *((void *)&v10 + 1) = 0x100000001;
    *(_OWORD *)__n128 result = v10;
    *(_DWORD *)(result + 16) = 1;
    *(_DWORD *)(result + 20) = v7;
    uint64_t v11 = (v7 - 1);
    uint64_t v12 = (v7 - 2);
    uint64_t v13 = (v7 - 3);
    uint64_t v14 = (v7 - 4);
    uint64_t v15 = (uint64_t)((v6 << 29) - 0x500000000) >> 32;
    do
    {
      if (!v8) {
        *(_DWORD *)__n128 result = v5->i64[v11];
      }
      if (!(v11 - v12 + v8)) {
        *(_DWORD *)(result + 4) = v5->i64[v12];
      }
      if (!(v11 - v13 + v8)) {
        *(_DWORD *)(result + _Block_object_dispose(&a9, 8) = v5->i64[v13];
      }
      if (!(v11 - v14 + v8)) {
        *(_DWORD *)(result + 12) = v5->i64[v14];
      }
      if (v11 + v8 <= v15)
      {
        v9 *= v5->i64[v11 + v8];
        *(_DWORD *)(result + 16) = v9;
      }
      --v8;
    }
    while (v11 + v8 + 1 > 0);
  }
  else
  {
    *(void *)(result + 12) = 0x100000001;
    unint64_t v16 = *a2;
    uint64_t v17 = (char *)a2[1] - (char *)*a2;
    if (v17 >> 3 == 3)
    {
      uint64_t v20 = v16->i64[0];
      *(_DWORD *)(result + 4) = v16->i64[1];
      *(_DWORD *)(result + _Block_object_dispose(&a9, 8) = v20;
      int v19 = v16[1].i32[0];
    }
    else if (v17 >> 3 == 1)
    {
      uint64_t v18 = v16->i64[0];
      int v19 = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_DWORD *)(result + _Block_object_dispose(&a9, 8) = v18;
    }
    else
    {
      if (v17 != 40 || a4 == 0)
      {
        if (a4) {
          uint64_t v24 = ", 5";
        }
        else {
          uint64_t v24 = (char *)&unk_19EC86ACE;
        }
        std::string::basic_string[abi:ne180100]<0>(&v38, v24);
        uint64_t v25 = std::string::insert(&v38, 0, "(1, 3");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        unint64_t v27 = std::string::append(&v39, ")");
        long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v40.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
        std::operator+<char>();
        long long v29 = std::string::append(&v37, " but got: ");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&__p, ((char *)a2[1] - (char *)*a2) >> 3);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        unint64_t v33 = std::string::append(&v38, (const std::string::value_type *)p_p, size);
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
        uint64_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v35, &v39);
        v35->__vftable = (std::runtime_error_vtbl *)&unk_1EF0DB098;
      }
      int8x16_t v22 = (int8x16_t)vrev64q_s32(vuzp1q_s32(*v16, v16[1]));
      *(int8x16_t *)(result + 4) = vextq_s8(v22, v22, 8uLL);
      int v19 = v16[2].i32[0];
    }
    *(_DWORD *)__n128 result = v19;
  }
  return result;
}

void sub_19E948070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  _Unwind_Resume(exception_object);
}

void std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Espresso::layer_shape>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

char *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  uint64_t v15 = (std::string *)(v13 + 16);
  unint64_t v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  *((void *)v13 + 5) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)uint64_t v13 = *v25;
LABEL_41:
    void *v25 = v13;
    goto LABEL_42;
  }
  *(void *)uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v26 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_19E9483D8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  unint64_t v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  unint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = (char *)operator new(0x78uLL);
    v9[0] = v6;
    v9[1] = a1 + 1;
    char v10 = 0;
    std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a3);
    char v10 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  }
  return v6;
}

void sub_19E9484A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CoreML::MLNeuralNetworkUtilities::hashConfigShapesToConfigurationName(std::string *this, const Espresso::net_configuration *a2)
{
  v18[0] = 0;
  v18[1] = 0;
  long long v17 = (uint64_t *)v18;
  unint64_t v3 = (void *)*((void *)a2 + 3);
  uint64_t v4 = (char *)a2 + 32;
  if (v3 != (void *)((char *)a2 + 32))
  {
    unint64_t v5 = (char *)v18;
    do
    {
      if (*((char *)v3 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v19, (const std::string::value_type *)v3[4], v3[5]);
      }
      else {
        std::string v19 = *(std::string *)(v3 + 4);
      }
      unint64_t v6 = (int *)v24.__r_.__value_.__r.__words[2];
      __p[0] = v19;
      memset(&v19, 0, sizeof(v19));
      long long v16 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
      __p[1] = v24;
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      BOOL v20 = 0;
      unint64_t v7 = (void **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_equal<std::string>(&v17, v5, &v26, &v25, __p);
      unint64_t v8 = (char *)*v7;
      if (*v7)
      {
        unint64_t v9 = (void *)v16;
      }
      else
      {
        char v10 = (uint64_t **)v7;
        unint64_t v8 = (char *)operator new(0x50uLL);
        v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
        v24.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
        v24.__r_.__value_.__s.__data_[16] = 0;
        uint64_t v11 = (std::string *)(v8 + 32);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v11, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
          *((void *)v8 + 6) = *((void *)&__p[0].__r_.__value_.__l + 2);
        }
        *(_OWORD *)(v8 + 56) = v16;
        *((void *)v8 + 9) = v6;
        memset(&__p[1], 0, sizeof(std::string));
        v24.__r_.__value_.__s.__data_[16] = 1;
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(&v17, v26, v10, (uint64_t *)v8);
        v24.__r_.__value_.__r.__words[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v24);
        unint64_t v9 = 0;
      }
      uint64_t v12 = (char *)*((void *)v8 + 1);
      if (v12)
      {
        do
        {
          unint64_t v5 = v12;
          uint64_t v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unint64_t v5 = (char *)*((void *)v8 + 2);
          BOOL v13 = *(void *)v5 == (void)v8;
          unint64_t v8 = v5;
        }
        while (!v13);
      }
      if (v9) {
        operator delete(v9);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (v20)
      {
        unint64_t v21 = v20;
        operator delete(v20);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      unint64_t v14 = (char *)v3[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          unint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (char *)v3[2];
          BOOL v13 = *(void *)v15 == (void)v3;
          unint64_t v3 = v15;
        }
        while (!v13);
      }
      unint64_t v3 = v15;
    }
    while (v15 != v4);
  }
  CoreML::MLNeuralNetworkUtilities::hashVectorShapesToConfigurationName(this, &v17);
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(v18[0]);
}

void sub_19E9486F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void Espresso::net_configuration::~net_configuration(Espresso::net_configuration *this)
{
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*((void **)this + 4));
  uint64_t v2 = (void **)this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__tree<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::layer_shape>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::layer_shape>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::layer_shape>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::layer_shape>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::layer_shape>>,0>(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 24);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void anonymous namespace'::ToVector<int,int>(std::vector<int> *a1, int *a2)
{
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  std::vector<int>::reserve(a1, 5uLL);
  int v4 = a2[4];
  std::vector<int>::pointer end = a1->__end_;
  value = a1->__end_cap_.__value_;
  if (end >= value)
  {
    std::vector<int>::pointer begin = a1->__begin_;
    uint64_t v9 = end - a1->__begin_;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)value - (char *)begin) >> 1 > v10) {
      unint64_t v10 = ((char *)value - (char *)begin) >> 1;
    }
    if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    BOOL v13 = (int *)(v11 + 4 * v9);
    value = (int *)(v11 + 4 * v12);
    *BOOL v13 = v4;
    std::vector<int>::pointer v7 = v13 + 1;
    while (end != begin)
    {
      int v14 = *--end;
      *--BOOL v13 = v14;
    }
    a1->__begin_ = v13;
    a1->__end_ = v7;
    a1->__end_cap_.__value_ = value;
    if (begin) {
      operator delete(begin);
    }
  }
  else
  {
    *std::vector<int>::pointer end = v4;
    std::vector<int>::pointer v7 = end + 1;
  }
  a1->__end_ = v7;
  int v15 = a2[3];
  if (v7 >= value)
  {
    std::vector<int>::pointer v17 = a1->__begin_;
    uint64_t v18 = v7 - a1->__begin_;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)value - (char *)v17) >> 1 > v19) {
      unint64_t v19 = ((char *)value - (char *)v17) >> 1;
    }
    if ((unint64_t)((char *)value - (char *)v17) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20) {
      unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v20);
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = (int *)(v20 + 4 * v18);
    value = (int *)(v20 + 4 * v21);
    int *v22 = v15;
    std::vector<int>::pointer v16 = v22 + 1;
    while (v7 != v17)
    {
      int v23 = *--v7;
      *--uint64_t v22 = v23;
    }
    a1->__begin_ = v22;
    a1->__end_ = v16;
    a1->__end_cap_.__value_ = value;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *std::vector<int>::pointer v7 = v15;
    std::vector<int>::pointer v16 = v7 + 1;
  }
  a1->__end_ = v16;
  int v24 = a2[2];
  if (v16 >= value)
  {
    std::vector<int>::pointer v26 = a1->__begin_;
    uint64_t v27 = v16 - a1->__begin_;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)value - (char *)v26) >> 1 > v28) {
      unint64_t v28 = ((char *)value - (char *)v26) >> 1;
    }
    if ((unint64_t)((char *)value - (char *)v26) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v28;
    }
    if (v29) {
      unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v29);
    }
    else {
      uint64_t v30 = 0;
    }
    long long v31 = (int *)(v29 + 4 * v27);
    value = (int *)(v29 + 4 * v30);
    int *v31 = v24;
    std::vector<int>::pointer v25 = v31 + 1;
    while (v16 != v26)
    {
      int v32 = *--v16;
      *--long long v31 = v32;
    }
    a1->__begin_ = v31;
    a1->__end_ = v25;
    a1->__end_cap_.__value_ = value;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *std::vector<int>::pointer v16 = v24;
    std::vector<int>::pointer v25 = v16 + 1;
  }
  a1->__end_ = v25;
  int v33 = a2[1];
  if (v25 >= value)
  {
    std::vector<int>::pointer v35 = a1->__begin_;
    uint64_t v36 = v25 - a1->__begin_;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)value - (char *)v35) >> 1 > v37) {
      unint64_t v37 = ((char *)value - (char *)v35) >> 1;
    }
    if ((unint64_t)((char *)value - (char *)v35) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v38 = v37;
    }
    if (v38) {
      unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v38);
    }
    else {
      uint64_t v39 = 0;
    }
    std::string v40 = (int *)(v38 + 4 * v36);
    value = (int *)(v38 + 4 * v39);
    *std::string v40 = v33;
    long long v34 = v40 + 1;
    while (v25 != v35)
    {
      int v41 = *--v25;
      *--std::string v40 = v41;
    }
    a1->__begin_ = v40;
    a1->__end_ = v34;
    a1->__end_cap_.__value_ = value;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    void *v25 = v33;
    long long v34 = v25 + 1;
  }
  a1->__end_ = v34;
  int v42 = *a2;
  if (v34 >= value)
  {
    std::vector<int>::pointer v44 = a1->__begin_;
    uint64_t v45 = v34 - a1->__begin_;
    unint64_t v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)value - (char *)v44) >> 1 > v46) {
      unint64_t v46 = ((char *)value - (char *)v44) >> 1;
    }
    if ((unint64_t)((char *)value - (char *)v44) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v47 = v46;
    }
    if (v47) {
      unint64_t v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v47);
    }
    else {
      uint64_t v48 = 0;
    }
    std::string::size_type v49 = (int *)(v47 + 4 * v45);
    *std::string::size_type v49 = v42;
    unint64_t v43 = v49 + 1;
    while (v34 != v44)
    {
      int v50 = *--v34;
      *--std::string::size_type v49 = v50;
    }
    a1->__begin_ = v49;
    a1->__end_ = v43;
    a1->__end_cap_.__value_ = (int *)(v47 + 4 * v48);
    if (v44) {
      operator delete(v44);
    }
  }
  else
  {
    int *v34 = v42;
    unint64_t v43 = v34 + 1;
  }
  a1->__end_ = v43;
}

void sub_19E948BC8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E948BF4()
{
  if (!*v0) {
    JUMPOUT(0x19E948BECLL);
  }
  JUMPOUT(0x19E948BE0);
}

uint64_t std::pair<std::string const,std::vector<int>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void CoreML::MLNeuralNetworkUtilities::hashVectorShapesToConfigurationName(std::string *a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_19EC86ACE);
  unint64_t v6 = (void *)*a2;
  int v4 = a2 + 1;
  unint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      if (*((char *)v5 + 55) >= 0) {
        size_t v7 = *((unsigned __int8 *)v5 + 55);
      }
      else {
        size_t v7 = v5[5];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v7 + 1);
      if (v23 >= 0) {
        unint64_t v8 = __p;
      }
      else {
        unint64_t v8 = (void **)__p[0];
      }
      if (v7)
      {
        if (*((char *)v5 + 55) >= 0) {
          uint64_t v9 = v5 + 4;
        }
        else {
          uint64_t v9 = (const void *)v5[4];
        }
        memmove(v8, v9, v7);
      }
      *(_WORD *)((char *)v8 + v7) = 95;
      if (v23 >= 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if (v23 >= 0) {
        std::string::size_type v11 = HIBYTE(v23);
      }
      else {
        std::string::size_type v11 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v10, v11);
      if (SHIBYTE(v23) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v12 = (int *)v5[7];
      BOOL v13 = (int *)v5[8];
      while (v12 != v13)
      {
        std::to_string(&v21, *v12);
        int v14 = std::string::append(&v21, "_");
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        int64_t v23 = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        if (v23 >= 0) {
          std::vector<int>::pointer v16 = __p;
        }
        else {
          std::vector<int>::pointer v16 = (void **)__p[0];
        }
        if (v23 >= 0) {
          std::string::size_type v17 = HIBYTE(v23);
        }
        else {
          std::string::size_type v17 = (std::string::size_type)__p[1];
        }
        std::string::append(a1, (const std::string::value_type *)v16, v17);
        if (SHIBYTE(v23) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v21.__r_.__value_.__l.__data_);
        }
        ++v12;
      }
      uint64_t v18 = (void *)v5[1];
      if (v18)
      {
        do
        {
          unint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unint64_t v19 = (void *)v5[2];
          BOOL v20 = *v19 == (void)v5;
          unint64_t v5 = v19;
        }
        while (!v20);
      }
      unint64_t v5 = v19;
    }
    while (v19 != v4);
  }
}

void sub_19E948DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[3].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = xmmword_19EC7B870;
  this[1].__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
  return this;
}

void std::vector<Espresso::layer_shape>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    int v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::layer_shape>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::layer_shape>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(unint64_t a1)
{
  if (a1 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a1 << 6);
}

uint64_t *std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 64;
      long long v6 = *(_OWORD *)(v3 - 48);
      uint64_t v7 = *(void *)(v3 - 32);
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(_OWORD *)(v4 - 4_Block_object_dispose(&a9, 8) = v6;
      *(void *)(v4 - 32) = v7;
      *(void *)(v4 - 24) = 0;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - _Block_object_dispose(&a9, 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - _Block_object_dispose(&a9, 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - _Block_object_dispose(&a9, 8) = 0;
      v4 -= 64;
      v3 -= 64;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  *__n128 result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<Espresso::layer_shape>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 64;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void CoreML::MLNeuralNetworkUtilities::InvalidInputShapeException::~InvalidInputShapeException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x19F3C1920);
}

void CoreML::MLNeuralNetworkUtilities::AsymmetricalEnumeratedShapesException::~AsymmetricalEnumeratedShapesException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x19F3C1920);
}

void CoreML::MLNeuralNetworkUtilities::MultipleEnumeratedInputsException::~MultipleEnumeratedInputsException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x19F3C1920);
}

void CoreML::MLNeuralNetworkUtilities::MaximumEnumeratedShapesException::~MaximumEnumeratedShapesException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x19F3C1920);
}

void CoreML::MLNeuralNetworkUtilities::EnumeratedWithRangeInputsException::~EnumeratedWithRangeInputsException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x19F3C1920);
}

uint64_t *std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,CoreML::NNCompiler::MLShapeInfo> const&>(uint64_t **a1, uint64_t *a2, void *a3, uint64_t a4)
{
  long long v6 = a2;
  uint64_t v8 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2
    && !google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, a2 + 4))
  {
    if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6 + 4, a3))
    {
      uint64_t v22 = v6;
      int64_t v23 = v6;
      int v14 = &v22;
      if (v6) {
        return v6;
      }
      goto LABEL_31;
    }
    uint64_t v12 = v6[1];
    if (v12)
    {
      BOOL v13 = (uint64_t *)v6[1];
      do
      {
        int v14 = (uint64_t **)v13;
        BOOL v13 = (uint64_t *)*v13;
      }
      while (v13);
    }
    else
    {
      std::string::size_type v17 = v6;
      do
      {
        int v14 = (uint64_t **)v17[2];
        BOOL v16 = *v14 == v17;
        std::string::size_type v17 = (uint64_t *)v14;
      }
      while (!v16);
    }
    if (v14 == v8 || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, v14 + 4))
    {
      if (v12)
      {
        int64_t v23 = (uint64_t *)v14;
      }
      else
      {
        int64_t v23 = v6;
        int v14 = (uint64_t **)(v6 + 1);
      }
LABEL_30:
      long long v6 = *v14;
      if (*v14) {
        return v6;
      }
      goto LABEL_31;
    }
LABEL_29:
    int v14 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v23, a3);
    goto LABEL_30;
  }
  uint64_t v9 = *v6;
  if (*a1 == v6)
  {
    std::string::size_type v11 = v6;
    goto LABEL_17;
  }
  if (v9)
  {
    uint64_t v10 = (uint64_t *)*v6;
    do
    {
      std::string::size_type v11 = v10;
      uint64_t v10 = (uint64_t *)v10[1];
    }
    while (v10);
  }
  else
  {
    long long v15 = v6;
    do
    {
      std::string::size_type v11 = (uint64_t *)v15[2];
      BOOL v16 = *v11 == (void)v15;
      long long v15 = v11;
    }
    while (v16);
  }
  if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v11 + 4, a3)) {
    goto LABEL_29;
  }
LABEL_17:
  if (v9)
  {
    int64_t v23 = v11;
    int v14 = (uint64_t **)(v11 + 1);
    goto LABEL_30;
  }
  int64_t v23 = v6;
  int v14 = (uint64_t **)v6;
LABEL_31:
  uint64_t v18 = (char *)operator new(0x88uLL);
  long long v6 = (uint64_t *)v18;
  v20[0] = v18;
  v20[1] = v8;
  char v21 = 0;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v18 + 32), *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *((_OWORD *)v18 + 2) = *(_OWORD *)a4;
    *((void *)v18 + 6) = *(void *)(a4 + 16);
  }
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v6 + 8), a4 + 32);
  char v21 = 1;
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v23, v14, v6);
  v20[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v20);
  return v6;
}

void sub_19E9493D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, _OWORD **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    long long v6 = operator new(0x88uLL);
    v11[1] = a1 + 1;
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *uint64_t v8 = 0;
    v8[1] = 0;
    void v8[2] = 0;
    CoreML::NNCompiler::MLShapeInfo::MLShapeInfo((CoreML::NNCompiler::MLShapeInfo *)((char *)v6 + 56));
    char v12 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void CoreML::numericVectorFromObjC<long long>(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  std::vector<long long>::reserve((void **)a1, [v3 count]);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(id *)(*((void *)&v22 + 1) + 8 * i);
        uint64_t v9 = [v8 longLongValue];
        uint64_t v10 = v9;
        char v12 = *(uint64_t **)(a1 + 8);
        unint64_t v11 = *(void *)(a1 + 16);
        if ((unint64_t)v12 >= v11)
        {
          int v14 = *(uint64_t **)a1;
          uint64_t v15 = ((uint64_t)v12 - *(void *)a1) >> 3;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v11 - (void)v14;
          if (v17 >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18) {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v18);
          }
          else {
            uint64_t v19 = 0;
          }
          BOOL v20 = (uint64_t *)(v18 + 8 * v15);
          uint64_t *v20 = v10;
          uint64_t v13 = v20 + 1;
          while (v12 != v14)
          {
            uint64_t v21 = *--v12;
            *--BOOL v20 = v21;
          }
          *(void *)a1 = v20;
          *(void *)(a1 + _Block_object_dispose(&a9, 8) = v13;
          *(void *)(a1 + 16) = v18 + 8 * v19;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          uint64_t *v12 = v9;
          uint64_t v13 = v12 + 1;
        }
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v13;
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v5);
  }
}

void sub_19E949690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v13 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + _Block_object_dispose(&a9, 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

void anonymous namespace'::MultiArrayShapeInfoFromStateConstraint(_anonymous_namespace_ *this, MLStateConstraint *a2)
{
  id v3 = a2;
  id v4 = [(MLStateConstraint *)v3 bufferShape];
  CoreML::numericVectorFromObjC<long long>((uint64_t)&v9, v4);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v5 = v9;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v13, v9, v10, (v10 - (uint64_t)v9) >> 3);
  if (v5) {
    operator delete(v5);
  }

  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v6 = v13;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v9, v13, v14, (v14 - (uint64_t)v13) >> 3);
  int v12 = 0;
  uint64_t v7 = [(MLStateConstraint *)v3 dataType];
  int v8 = 65552;
  if (v7 != 65552)
  {
    if (v7 == 131104)
    {
      int v8 = 131104;
    }
    else if (v7 == 65568)
    {
      int v8 = 65568;
    }
    else
    {
      int v8 = 65600;
    }
  }
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)this, (uint64_t)&v9);
  *((_DWORD *)this + 14) = v8;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v9);
  if (v6) {
    operator delete(v6);
  }
}

void sub_19E9497FC(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__5112(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 64);
  uint64_t v3 = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  *(void *)(a1 + 80) = v3;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  __n128 result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 8_Block_object_dispose(&a9, 8) = result;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  return result;
}

void __Block_byref_object_dispose__5113(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
}

void ___ZN6CoreML24MLNeuralNetworkUtilities28extractFeatureProviderShapesEPU28objcproto17MLFeatureProvider11objc_objectbP13MLVersionInfo_block_invoke(uint64_t a1, void *a2)
{
  id v6 = [a2 shape];
  CoreML::numericVectorFromObjC<long long>((uint64_t)__p, v6);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  long long v4 = v8[1];
  *(_OWORD *)(v3 + 4_Block_object_dispose(&a9, 8) = v8[0];
  *(_OWORD *)(v3 + 64) = v4;
  *(void *)(v3 + 80) = v9;
  uint64_t v5 = *(void **)(v3 + 88);
  if (v5)
  {
    *(void *)(v3 + 96) = v5;
    operator delete(v5);
    *(void *)(v3 + 8_Block_object_dispose(&a9, 8) = 0;
    *(void *)(v3 + 96) = 0;
    *(void *)(v3 + 104) = 0;
  }
  *(_OWORD *)(v3 + 8_Block_object_dispose(&a9, 8) = v10;
  *(void *)(v3 + 104) = v11;
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_19E949954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, _OWORD **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  id v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    id v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    int v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *int v8 = 0;
    v8[1] = 0;
    _OWORD v8[2] = 0;
    *((void *)v6 + _Block_object_dispose(&a9, 8) = 0;
    *((void *)v6 + 9) = 0;
    *((void *)v6 + 7) = 0;
    char v12 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void CoreML::MLNeuralNetworkUtilities::hashFeatureProviderToConfigurationName(std::string *a1, void *a2, int a3, void *a4)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v39 = a4;
  v44[0] = 0;
  v44[1] = 0;
  unint64_t v43 = (uint64_t *)v44;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  id v6 = [v5 featureNames];
  obuint64_t j = v6;
  uint64_t v40 = [v6 countByEnumeratingWithState:&v64 objects:v69 count:16];
  if (v40)
  {
    uint64_t v42 = *(void *)v65;
    if (a3) {
      int v7 = 4;
    }
    else {
      int v7 = -1;
    }
    int v37 = v7;
    do
    {
      uint64_t v8 = 0;
      uint64_t v9 = v40;
      do
      {
        if (*(void *)v65 != v42) {
          objc_enumerationMutation(obj);
        }
        long long v10 = *(void **)(*((void *)&v64 + 1) + 8 * v8);
        uint64_t v11 = [v5 featureValueForName:v10];
        uint64_t v53 = 0;
        int v54 = (int8x16_t *)&v53;
        uint64_t v55 = 0x7012000000;
        id v56 = __Block_byref_object_copy__5112;
        int v57 = __Block_byref_object_dispose__5113;
        std::string v58 = "";
        long long v61 = 0u;
        long long v62 = 0u;
        uint64_t v63 = 0;
        long long v59 = xmmword_19EC7B870;
        unint64_t v60 = 0xFFFFFFFF00000001;
        uint64_t v12 = [v11 type];
        switch(v12)
        {
          case 4:
            uint64_t v19 = (__CVBuffer *)[v11 imageBufferValue];
            PixelFormatuint64_t Type = CVPixelBufferGetPixelFormatType(v19);
            size_t Width = CVPixelBufferGetWidth(v19);
            size_t Height = CVPixelBufferGetHeight(v19);
            id v23 = v39;
            long long v24 = +[MLNeuralNetworkCompiler iOS17CompilerVersionInfo];
            id v25 = v5;
            if (PixelFormatType == 1278226536 || PixelFormatType == 1278226488) {
              uint64_t v27 = 1;
            }
            else {
              uint64_t v27 = 3;
            }
            if (PixelFormatType == 1278226536)
            {
              if ([v23 olderThan:v24]) {
                uint64_t v27 = 3;
              }
              else {
                uint64_t v27 = 1;
              }
            }
            unint64_t v28 = (int32x4_t *)operator new(0x20uLL);
            v28->i64[0] = 1;
            v28->i64[1] = v27;
            v28[1].i64[0] = Height;
            v28[1].i64[1] = Width;

            id v5 = v25;
            uint64_t v9 = v40;

            unint64_t v29 = v54;
            int8x16_t v30 = (int8x16_t)vrev64q_s32(vuzp1q_s32(*v28, v28[1]));
            v54[3] = vextq_s8(v30, v30, 8uLL);
            v29[4].i32[0] = 1;
            v29[4].i32[1] = v37;
            v29[4].i64[1] = 0;
            v29[5].i64[0] = 0;
            int v32 = &v29[5].i64[1];
            long long v31 = (void *)v29[5].i64[1];
            if (v31)
            {
              v29[6].i64[0] = (uint64_t)v31;
              operator delete(v31);
            }
            uint64_t *v32 = 0;
            v32[1] = 0;
            v32[2] = 0;
            operator delete(v28);
            break;
          case 5:
            uint64_t v14 = [v11 multiArrayValue];
            uint64_t v15 = [v14 shape];
            CoreML::numericVectorFromObjC<long long>((uint64_t)__p, v15);
            unint64_t v16 = v54;
            int8x16_t v17 = v49;
            v54[3] = v48;
            v16[4] = v17;
            v16[5].i64[0] = v50;
            unint64_t v18 = (void *)v16[5].i64[1];
            if (v18)
            {
              v16[6].i64[0] = (uint64_t)v18;
              operator delete(v18);
              v16[5].i64[1] = 0;
              v16[6].i64[0] = 0;
              v16[6].i64[1] = 0;
            }
            *(int8x16_t *)((char *)v16 + 8_Block_object_dispose(&a9, 8) = v51;
            v16[6].i64[1] = v52;
            if (__p[0]) {
              operator delete(__p[0]);
            }

            break;
          case 8:
            uint64_t v13 = [v11 internalStateValue];
            v45[0] = MEMORY[0x1E4F143A8];
            v45[1] = 3221225472;
            v45[2] = ___ZN6CoreML24MLNeuralNetworkUtilities28extractFeatureProviderShapesEPU28objcproto17MLFeatureProvider11objc_objectbP13MLVersionInfo_block_invoke;
            v45[3] = &unk_1E59A3EF0;
            v45[4] = &v53;
            [v13 internalGetMultiArrayWithHandler:v45];

            break;
          default:
            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x19F3C1380](exception, "Attempting to extract shape from non-image or multi-array feature");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v10 UTF8String]);
        std::string v68 = __p;
        int v33 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v43, __p, (_OWORD **)&v68);
        long long v34 = (void *)v33[7];
        if (v34)
        {
          v33[8] = v34;
          operator delete(v34);
          v33[7] = 0;
          v33[8] = 0;
          v33[9] = 0;
        }
        *(int8x16_t *)(v33 + 7) = v48;
        v33[9] = v49.i64[0];
        if (v47 < 0) {
          operator delete(__p[0]);
        }
        _Block_object_dispose(&v53, 8);
        if ((void)v62)
        {
          *((void *)&v62 + 1) = v62;
          operator delete((void *)v62);
        }

        ++v8;
      }
      while (v9 != v8);
      id v6 = obj;
      uint64_t v40 = [obj countByEnumeratingWithState:&v64 objects:v69 count:16];
    }
    while (v40);
  }

  CoreML::MLNeuralNetworkUtilities::hashVectorShapesToConfigurationName(a1, &v43);
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(v44[0]);
}

void sub_19E949F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58)
{
}

void CoreML::MLNeuralNetworkUtilities::hashE5ModelDefaultShapesToConfigurationName(std::string *this, MLModelDescription *a2, MLVersionInfo *a3)
{
  uint64_t v40 = this;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  long long v4 = a2;
  uint64_t v42 = a3;
  v67[0] = 0;
  v67[1] = 0;
  long long v66 = (uint64_t *)v67;
  int v41 = v4;
  [(MLModelDescription *)v4 inputDescriptionsByName];
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v5 = [obj countByEnumeratingWithState:&v62 objects:v70 count:16];
  if (v5)
  {
    uint64_t v45 = *(void *)v63;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v63 != v45) {
          objc_enumerationMutation(obj);
        }
        int v7 = *(void **)(*((void *)&v62 + 1) + 8 * v6);
        uint64_t v8 = objc_msgSend(obj, "objectForKeyedSubscript:", v7, v40);
        v58.i32[0] = 0;
        *(_OWORD *)&v59[8] = 0u;
        long long v60 = 0u;
        uint64_t v61 = 0;
        uint64_t v9 = [v8 type];
        if (v9 == 4)
        {
          uint64_t v13 = [v8 imageConstraint];
          uint64_t v14 = [v13 pixelsWide];

          uint64_t v15 = [v8 imageConstraint];
          uint64_t v16 = [v15 pixelsHigh];

          int8x16_t v17 = [v8 imageConstraint];
          int v18 = [v17 pixelFormatType];
          uint64_t v19 = v42;
          BOOL v20 = +[MLNeuralNetworkCompiler iOS17CompilerVersionInfo];
          std::vector<int>::pointer v44 = v8;
          uint64_t v21 = v5;
          if (v18 == 1278226536 || v18 == 1278226488) {
            uint64_t v23 = 1;
          }
          else {
            uint64_t v23 = 3;
          }
          if (v18 == 1278226536)
          {
            if ([(MLVersionInfo *)v19 olderThan:v20]) {
              uint64_t v23 = 3;
            }
            else {
              uint64_t v23 = 1;
            }
          }
          long long v24 = (int32x4_t *)operator new(0x20uLL);
          v24->i64[0] = 1;
          v24->i64[1] = v23;
          v24[1].i64[0] = v16;
          v24[1].i64[1] = v14;

          uint64_t v5 = v21;
          uint64_t v8 = v44;

          *(void *)&v59[16] = 0;
          int8x16_t v25 = (int8x16_t)vrev64q_s32(vuzp1q_s32(*v24, v24[1]));
          int8x16_t v58 = vextq_s8(v25, v25, 8uLL);
          *(_OWORD *)long long v59 = 0x400000001uLL;
          uint64_t v61 = 0;
          long long v60 = 0uLL;
          operator delete(v24);
          uint64_t v12 = 0;
        }
        else
        {
          if (v9 != 5)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x19F3C1380](exception, "Attempting to extract shape from non-image or multi-array feature");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          long long v10 = [v8 multiArrayConstraint];
          uint64_t v11 = [v10 shape];

          CoreML::numericVectorFromObjC<long long>((uint64_t)__p, v11);
          int8x16_t v58 = *(int8x16_t *)v53;
          *(_OWORD *)long long v59 = v54;
          unint64_t v43 = (void *)v56;
          long long v60 = v56;
          *(void *)&v59[16] = v55;
          uint64_t v61 = v57;
          if (__p[0]) {
            operator delete(__p[0]);
          }

          uint64_t v12 = v43;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v7 UTF8String]);
        std::string v68 = __p;
        std::vector<int>::pointer v26 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v66, __p, (_OWORD **)&v68);
        uint64_t v27 = (void *)v26[7];
        if (v27)
        {
          v26[8] = v27;
          operator delete(v27);
          v26[7] = 0;
          v26[8] = 0;
          v26[9] = 0;
        }
        *(_OWORD *)(v26 + 7) = *(_OWORD *)v53;
        v26[9] = v54;
        if ((v52 & 0x80000000) == 0)
        {
          if (!v12) {
            goto LABEL_27;
          }
LABEL_26:
          operator delete(v12);
          goto LABEL_27;
        }
        operator delete(__p[0]);
        if (v12) {
          goto LABEL_26;
        }
LABEL_27:

        ++v6;
      }
      while (v5 != v6);
      uint64_t v28 = [obj countByEnumeratingWithState:&v62 objects:v70 count:16];
      uint64_t v5 = v28;
    }
    while (v28);
  }

  [(MLModelDescription *)v41 stateDescriptionsByName];
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id v29 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v30 = [v29 countByEnumeratingWithState:&v47 objects:v69 count:16];
  if (v30)
  {
    uint64_t v31 = *(void *)v48;
    do
    {
      for (uint64_t i = 0; i != v30; ++i)
      {
        if (*(void *)v48 != v31) {
          objc_enumerationMutation(v29);
        }
        int v33 = *(void **)(*((void *)&v47 + 1) + 8 * i);
        long long v34 = objc_msgSend(v29, "objectForKeyedSubscript:", v33, v40);
        std::vector<int>::pointer v35 = [v34 stateConstraint];
        uint64_t v36 = [v35 bufferShape];
        CoreML::numericVectorFromObjC<long long>((uint64_t)v53, v36);
        if (v53[0]) {
          operator delete(v53[0]);
        }

        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v33 UTF8String]);
        std::string v68 = __p;
        int v37 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v66, __p, (_OWORD **)&v68);
        unint64_t v38 = (void *)v37[7];
        if (v38)
        {
          v37[8] = v38;
          operator delete(v38);
          v37[7] = 0;
          v37[8] = 0;
          v37[9] = 0;
        }
        *(_OWORD *)(v37 + 7) = *(_OWORD *)v53;
        v37[9] = v54;
        if (v52 < 0) {
          operator delete(__p[0]);
        }
        if ((void)v60) {
          operator delete((void *)v60);
        }
      }
      uint64_t v30 = [v29 countByEnumeratingWithState:&v47 objects:v69 count:16];
    }
    while (v30);
  }

  CoreML::MLNeuralNetworkUtilities::hashVectorShapesToConfigurationName(v40, &v66);
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(v67[0]);
}

void sub_19E94A640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(a60);
  _Unwind_Resume(a1);
}

unsigned __int8 *CoreML::MLNeuralNetworkUtilities::encodeConfigurationName(char *a1, const void **a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v3 = *((char *)a2 + 23);
  if (v3 >= 0) {
    long long v4 = a2;
  }
  else {
    long long v4 = *a2;
  }
  if (v3 >= 0) {
    CC_LONG v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    CC_LONG v5 = *((_DWORD *)a2 + 2);
  }
  __n128 result = CC_SHA256(v4, v5, md);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  a1[23] = 8;
  strcpy(a1, "        ");
  do
  {
    if (a1[23] >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *(char **)a1;
    }
    v9[v7] = CoreML::MLNeuralNetworkUtilities::encodeConfigurationName(std::string const&)::hexSymbols[(unint64_t)md[v8] >> 4];
    if (a1[23] >= 0) {
      long long v10 = a1;
    }
    else {
      long long v10 = *(char **)a1;
    }
    v10[v7 + 1] = CoreML::MLNeuralNetworkUtilities::encodeConfigurationName(std::string const&)::hexSymbols[md[v8++] & 0xF];
    v7 += 2;
  }
  while (v8 != 4);
  return result;
}

void CoreML::MLNeuralNetworkUtilities::encodeConfigurationNameIfNeeded(std::string *a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  CC_LONG v5 = +[MLNeuralNetworkCompiler iOS18CompilerVersionInfo];
  if ([v6 olderThan:v5])
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a1->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
  }
  else
  {
    CoreML::MLNeuralNetworkUtilities::encodeConfigurationName((char *)a1, (const void **)a2);
  }
}

void sub_19E94A9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E94AC08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E94ADC4(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19E94AEE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E94B098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E94B424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5195(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5196(uint64_t a1)
{
}

id anonymous namespace'::computeE5ProgramFunctionName(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  if ([v8 containsObject:v10])
  {
    id v10 = v10;
    uint64_t v11 = v10;
    goto LABEL_25;
  }
  CoreML::MLNeuralNetworkUtilities::encodeConfigurationNameIfNeeded(&__s1, a3, v9);
  uint64_t v12 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a3 + 8);
  }
  if (size != v14) {
    goto LABEL_19;
  }
  if (v15 >= 0) {
    uint64_t v16 = (unsigned __int8 *)a3;
  }
  else {
    uint64_t v16 = *(unsigned __int8 **)a3;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      while (p_s1->__r_.__value_.__s.__data_[0] == *v16)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v16;
        if (!--v12) {
          goto LABEL_22;
        }
      }
      goto LABEL_19;
    }
LABEL_22:
    uint64_t v11 = 0;
    goto LABEL_23;
  }
  if (!memcmp(__s1.__r_.__value_.__l.__data_, v16, __s1.__r_.__value_.__l.__size_)) {
    goto LABEL_22;
  }
  int v18 = LABEL_19:;

  if ([v8 containsObject:v18])
  {
    id v10 = v18;
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v11 = 0;
    id v10 = v18;
  }
LABEL_23:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
LABEL_25:

  return v11;
}

void sub_19E94B668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::computeE5ProgramFunctionName(void *a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    long long v2 = a2;
  }
  else {
    long long v2 = (uint64_t *)*a2;
  }
  int v3 = objc_msgSend(a1, "stringByAppendingFormat:", @"_%s", v2);

  return v3;
}

void sub_19E94BA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  id v19 = va_arg(va1, id);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_19E94BB8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E94BD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *MLE5MultiArrayShapeForTensor()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t shape = e5rt_tensor_desc_get_shape();
  if (shape)
  {
    uint64_t v1 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v5 = 1024;
      int v6 = shape;
      _os_log_error_impl(&dword_19E58B000, v1, OS_LOG_TYPE_ERROR, "Failed to get shape from the tensor description. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get shape from the tensor description. E5RT: %s (%d)", e5rt_get_last_error_message(), shape);
  }

  return &unk_1EF11A8E0;
}

void sub_19E94BF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *MLE5MultiArrayStridesForTensor()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t strides = e5rt_tensor_desc_get_strides();
  uint64_t v1 = (void *)MEMORY[0x1E4F1C3A8];
  if (strides)
  {
    long long v2 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v6 = 1024;
      int v7 = strides;
      _os_log_error_impl(&dword_19E58B000, v2, OS_LOG_TYPE_ERROR, "Failed to get strides from the tensor description. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *v1, @"Failed to get strides from the tensor description. E5RT: %s (%d)", e5rt_get_last_error_message(), strides);
  }

  return &unk_1EF11A8F8;
}

void sub_19E94C25C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5MultiArrayDataTypeForTensor()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = e5rt_tensor_desc_retain_dtype();
  uint64_t v1 = (void *)MEMORY[0x1E4F1C3A8];
  if (v0)
  {
    long long v2 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)uint64_t v12 = e5rt_get_last_error_message();
      *(_WORD *)&v12[8] = 1024;
      int v13 = v0;
      _os_log_error_impl(&dword_19E58B000, v2, OS_LOG_TYPE_ERROR, "Failed to get data type of the tensor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *v1, @"Failed to get data type of the tensor. E5RT: %s (%d)", e5rt_get_last_error_message(), v0);
  }
  component_std::string::size_type size = e5rt_tensor_desc_dtype_get_component_size();
  if (component_size)
  {
    long long v4 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      *(void *)uint64_t v12 = last_error_message;
      *(_WORD *)&v12[8] = 1024;
      int v13 = component_size;
      _os_log_error_impl(&dword_19E58B000, v4, OS_LOG_TYPE_ERROR, "Failed to get component size. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *v1, @"Failed to get component size. E5RT: %s (%d)", e5rt_get_last_error_message(), component_size);
  }
  uint64_t component_dtype = e5rt_tensor_desc_dtype_get_component_dtype();
  if (component_dtype)
  {
    __int16 v6 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      *(void *)uint64_t v12 = v10;
      *(_WORD *)&v12[8] = 1024;
      int v13 = component_dtype;
      _os_log_error_impl(&dword_19E58B000, v6, OS_LOG_TYPE_ERROR, "Failed to get component data type. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *v1, @"Failed to get component data type. E5RT: %s (%d)", e5rt_get_last_error_message(), component_dtype);
  }
  e5rt_tensor_desc_dtype_release();
  int v7 = +[MLLogging coreChannel];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)uint64_t v12 = 0;
    *(_WORD *)&v12[4] = 1024;
    *(_DWORD *)&v12[6] = 0;
    _os_log_error_impl(&dword_19E58B000, v7, OS_LOG_TYPE_ERROR, "E5 tensor with componentSize = %d and componentDatauint64_t Type = %d is not supported.", buf, 0xEu);
  }

  objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *v1, @"E5 tensor with componentSize = %d and componentDatauint64_t Type = %d is not supported.", 0, 0);
  return 65568;
}

void sub_19E94C5DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5CreateTensorDescriptor(void *a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v34 = a1;
  [v34 count];
  std::string __p = 0;
  int v41 = 0;
  uint64_t v42 = 0;
  std::vector<unsigned long>::reserve(&__p, [v34 count]);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v3 = v34;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v36 objects:v44 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v37;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v37 != v5) {
          objc_enumerationMutation(v3);
        }
        int v7 = [*(id *)(*((void *)&v36 + 1) + 8 * i) intValue];
        uint64_t v8 = v7;
        id v9 = v41;
        if (v41 >= v42)
        {
          uint64_t v11 = (char *)__p;
          uint64_t v12 = (v41 - (unsigned char *)__p) >> 3;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v42 - (unsigned char *)__p;
          if ((v42 - (unsigned char *)__p) >> 2 > v13) {
            unint64_t v13 = v14 >> 2;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v42, v15);
            uint64_t v11 = (char *)__p;
            id v9 = v41;
          }
          else
          {
            uint64_t v16 = 0;
          }
          uint64_t v17 = &v16[8 * v12];
          *(void *)uint64_t v17 = v8;
          uint64_t v10 = v17 + 8;
          while (v9 != v11)
          {
            uint64_t v18 = *((void *)v9 - 1);
            v9 -= 8;
            *((void *)v17 - 1) = v18;
            v17 -= 8;
          }
          std::string __p = v17;
          int v41 = v10;
          uint64_t v42 = &v16[8 * v15];
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *(void *)int v41 = v7;
          uint64_t v10 = v9 + 8;
        }
        int v41 = v10;
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v36 objects:v44 count:16];
    }
    while (v4);
  }

  uint64_t v43 = 0;
  id v19 = (void *)MEMORY[0x1E4F1C3A8];
  if (a2 <= 65599)
  {
    if (a2 != 65552 && a2 != 65568) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  if (a2 == 131104)
  {
LABEL_33:
    uint64_t v21 = e5rt_tensor_desc_dtype_create();
    if (v21)
    {
      long long v22 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t last_error_message = e5rt_get_last_error_message();
        *(_DWORD *)buf = 136315394;
        uint64_t v46 = last_error_message;
        __int16 v47 = 1024;
        int v48 = v21;
        _os_log_error_impl(&dword_19E58B000, v22, OS_LOG_TYPE_ERROR, "Failed to create tensor descriptor dtype. E5RT: %s (%d)", buf, 0x12u);
      }

      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *v19, @"Failed to create tensor descriptor dtype. E5RT: %s (%d)", e5rt_get_last_error_message(), v21);
    }
    goto LABEL_37;
  }
  if (a2 == 65600)
  {
    BOOL v20 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19E58B000, v20, OS_LOG_TYPE_ERROR, "MLPrograms do not support double type inputs.", buf, 2u);
    }

    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"MLPrograms do not support double type inputs."];
  }
LABEL_37:
  uint64_t v35 = v43;
  uint64_t v43 = 0;
  uint64_t v23 = e5rt_tensor_desc_create();
  if (v23)
  {
    long long v24 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      uint64_t v46 = v30;
      __int16 v47 = 1024;
      int v48 = v23;
      _os_log_error_impl(&dword_19E58B000, v24, OS_LOG_TYPE_ERROR, "Failed to create e5 tensor descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *v19, @"Failed to create e5 tensor descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), v23);
  }
  uint64_t v25 = e5rt_operand_desc_retain_from_tensor_desc();
  if (v25)
  {
    std::vector<int>::pointer v26 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      uint64_t v46 = v31;
      __int16 v47 = 1024;
      int v48 = v25;
      _os_log_error_impl(&dword_19E58B000, v26, OS_LOG_TYPE_ERROR, "Failed to transfer tensor descriptor to operand descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *v19, @"Failed to transfer tensor descriptor to operand descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), v25);
  }
  uint64_t v27 = e5rt_tensor_desc_release();
  if (v27)
  {
    uint64_t v28 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      uint64_t v46 = v32;
      __int16 v47 = 1024;
      int v48 = v27;
      _os_log_error_impl(&dword_19E58B000, v28, OS_LOG_TYPE_ERROR, "Failed to release tensor descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *v19, @"Failed to release tensor descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), v27);
  }
  std::unique_ptr<e5rt_tensor_desc_dtype,MLE5ObjectDeleter<e5rt_tensor_desc_dtype>>::reset[abi:ne180100](&v35);
  if (__p)
  {
    int v41 = (char *)__p;
    operator delete(__p);
  }

  return 0;
}

void sub_19E94CBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_tensor_desc_dtype,MLE5ObjectDeleter<e5rt_tensor_desc_dtype>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1) {
    return (uint64_t *)e5rt_tensor_desc_dtype_release();
  }
  return result;
}

uint64_t __Block_byref_object_copy__5409(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5410(uint64_t a1)
{
}

void sub_19E94D14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E94D2A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E94EC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  ElapsedTimeRecorder::~ElapsedTimeRecorder(&a34);
  _Unwind_Resume(a1);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    int v7 = &v4[8 * v6];
    uint64_t v8 = (char *)*a1;
    id v9 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v9 != *a1)
    {
      uint64_t v10 = v5;
      do
      {
        uint64_t v11 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<double>::resize(char **a1, unint64_t a2)
{
  int64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    id v19 = &v3[8 * a2];
    goto LABEL_15;
  }
  unint64_t v6 = a2 - v5;
  int v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    id v19 = &v4[8 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v10);
  uint64_t v12 = *a1;
  unint64_t v13 = a1[1];
  uint64_t v14 = &v11[8 * v5];
  uint64_t v16 = &v11[8 * v15];
  bzero(v14, 8 * v6);
  uint64_t v17 = &v14[8 * v6];
  while (v13 != v12)
  {
    uint64_t v18 = *((void *)v13 - 1);
    v13 -= 8;
    *((void *)v14 - 1) = v18;
    v14 -= 8;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::__wrap_iter<std::pair<unsigned long long,double> *>>(double *a1, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = a1[1];
  double v5 = a3[1];
  if (v3 > v4)
  {
    double v6 = *a1;
    if (v5 > v3)
    {
      *a1 = *a3;
      *a3 = v6;
      a1[1] = v5;
      a3[1] = v4;
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    a1[1] = v3;
    a2[1] = v4;
    double v11 = a3[1];
    if (v11 <= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v6;
    a2[1] = v11;
    a3[1] = v4;
    return 2;
  }
  if (v5 > v3)
  {
    double v7 = *a2;
    *a2 = *a3;
    *a3 = v7;
    a2[1] = v5;
    a3[1] = v3;
    double v8 = a2[1];
    double v9 = a1[1];
    if (v8 <= v9) {
      return 1;
    }
    double v10 = *a1;
    *a1 = *a2;
    *a2 = v10;
    a1[1] = v8;
    a2[1] = v9;
    return 2;
  }
  return 0;
}

double *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(double *result, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = result[1];
  double v5 = a3[1];
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      double v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v5;
      a3[1] = v3;
      double v8 = a2[1];
      double v9 = result[1];
      if (v8 > v9)
      {
        double v10 = *result;
        *__n128 result = *a2;
        *a2 = v10;
        result[1] = v8;
        a2[1] = v9;
      }
    }
  }
  else
  {
    double v6 = *result;
    if (v5 <= v3)
    {
      *__n128 result = *a2;
      *a2 = v6;
      result[1] = v3;
      a2[1] = v4;
      double v11 = a3[1];
      if (v11 <= v4) {
        return result;
      }
      *a2 = *a3;
      *a3 = v6;
      a2[1] = v11;
    }
    else
    {
      *__n128 result = *a3;
      *a3 = v6;
      result[1] = v5;
    }
    a3[1] = v4;
  }
  return result;
}

double *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(double *a1, double *a2, double *a3, double *a4)
{
  __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(a1, a2, a3);
  double v9 = a4[1];
  double v10 = a3[1];
  if (v9 > v10)
  {
    double v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    a3[1] = v9;
    a4[1] = v10;
    double v12 = a3[1];
    double v13 = a2[1];
    if (v12 > v13)
    {
      double v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      double v15 = a2[1];
      double v16 = a1[1];
      if (v15 > v16)
      {
        double v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(double *a1, double *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(a2 - 1);
      double v7 = a1[1];
      if (v6 > v7)
      {
        double v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      double v18 = *(a2 - 1);
      double v19 = a1[7];
      if (v18 > v19)
      {
        uint64_t v20 = *((void *)a1 + 6);
        a1[6] = *(a2 - 2);
        *((void *)a2 - 2) = v20;
        a1[7] = v18;
        *(a2 - 1) = v19;
        double v21 = a1[7];
        double v22 = a1[5];
        if (v21 > v22)
        {
          uint64_t v23 = *((void *)a1 + 4);
          uint64_t v24 = *((void *)a1 + 6);
          *((void *)a1 + 4) = v24;
          *((void *)a1 + 6) = v23;
          a1[5] = v21;
          a1[7] = v22;
          double v25 = a1[3];
          if (v21 > v25)
          {
            uint64_t v26 = *((void *)a1 + 2);
            *((void *)a1 + 2) = v24;
            *((void *)a1 + 4) = v26;
            a1[3] = v21;
            a1[5] = v25;
            double v27 = a1[1];
            if (v21 > v27)
            {
              double v28 = *a1;
              *(void *)a1 = v24;
              a1[2] = v28;
              a1[1] = v21;
              a1[3] = v27;
            }
          }
        }
      }
      return 1;
    default:
      double v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLItemSimilarityRecommender predictionFromFeatures:options:error:]::$_0 &,std::pair<unsigned long long,double> *>(a1, a1 + 2, a1 + 4);
      double v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = v10[1];
    if (v13 > v9[1])
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        double v16 = (double *)((char *)a1 + v15);
        v16[6] = *(double *)((char *)a1 + v15 + 32);
        v16[7] = *(double *)((char *)a1 + v15 + 40);
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (v13 <= v16[3])
        {
          uint64_t v17 = (uint64_t)a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v17 = (uint64_t)a1;
LABEL_13:
      *(void *)uint64_t v17 = v14;
      *(double *)(v17 + _Block_object_dispose(&a9, 8) = v13;
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    double v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

void sub_19E9501A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9508EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,std::__shared_weak_count *a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a30 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t operator>><unsigned char>(uint64_t a1, void *a2)
{
  if (a2[1] != *a2) {
    a2[1] = *a2;
  }
  return a1;
}

void sub_19E950C3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t operator>><long long>(uint64_t a1, char **a2)
{
  return a1;
}

void std::vector<long long>::resize(char **a1, unint64_t a2)
{
  double v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    double v19 = &v3[8 * a2];
    goto LABEL_15;
  }
  unint64_t v6 = a2 - v5;
  double v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    double v19 = &v4[8 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v10);
  int v12 = *a1;
  double v13 = a1[1];
  uint64_t v14 = &v11[8 * v5];
  double v16 = &v11[8 * v15];
  bzero(v14, 8 * v6);
  uint64_t v17 = &v14[8 * v6];
  while (v13 != v12)
  {
    uint64_t v18 = *((void *)v13 - 1);
    v13 -= 8;
    *((void *)v14 - 1) = v18;
    v14 -= 8;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

void sub_19E951558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6, __int16 a7, char a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30,uint64_t a31,std::__split_buffer<std::string> **__pa,uint64_t a33,uint64_t a34,std::__split_buffer<std::string> *a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  if (__pa) {
    operator delete(__pa);
  }
  std::__fs::filesystem::path __pa = &a35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }

  _Unwind_Resume(a1);
}

uint64_t operator<<<unsigned char>(uint64_t a1, uint64_t *a2)
{
  operator<<(a1, a2[1] - *a2);
  uint64_t v4 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v5 = 0;
    do
    {
      char v10 = *(unsigned char *)(v4 + v5);
      (*(void (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      std::ostream::write();
      if (!*(unsigned char *)a1)
      {
        unint64_t v6 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
        if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0)
        {
          exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
          *(void *)&__ec.__val_ = 1;
          __ec.__cat_ = std::iostream_category();
          std::ios_base::failure::failure(exception, "Error writing to archive.", &__ec);
          __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
        }
      }
      ++v5;
      uint64_t v4 = *a2;
    }
    while (v5 < a2[1] - *a2);
  }
  return a1;
}

void sub_19E9517DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void OArchive::uniqueBlob(void *a1, void *a2, const void **a3)
{
  __p[0] = a3;
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a2 + 19), (unsigned __int8 *)a3, (long long **)__p);
  do
  {
    while (1)
    {
      if (*((char *)a3 + 23) >= 0) {
        size_t v6 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v6 = (size_t)a3[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v23, v6 + 2);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v7 = &v23;
      }
      else {
        double v7 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      if (v6)
      {
        if (*((char *)a3 + 23) >= 0) {
          uint64_t v8 = a3;
        }
        else {
          uint64_t v8 = *a3;
        }
        memmove(v7, v8, v6);
      }
      strcpy((char *)v7 + v6, "_B");
      std::to_string(&v22, *((void *)v5 + 5));
      unsigned int v9 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = v22.__r_.__value_.__l.__size_;
        if (v22.__r_.__value_.__l.__size_ >= 4) {
          goto LABEL_18;
        }
      }
      else
      {
        if (HIBYTE(v22.__r_.__value_.__r.__words[2]) > 3u) {
          goto LABEL_18;
        }
        std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      }
      std::string::insert(&v22, 0, 4 - size, 48);
      unsigned int v9 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
LABEL_18:
      if ((v9 & 0x80u) == 0) {
        uint64_t v11 = &v22;
      }
      else {
        uint64_t v11 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      if ((v9 & 0x80u) == 0) {
        std::string::size_type v12 = v9;
      }
      else {
        std::string::size_type v12 = v22.__r_.__value_.__l.__size_;
      }
      double v13 = std::string::append(&v23, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      uint64_t v15 = std::string::append(&v24, ".DAT");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      std::string::size_type v26 = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      uint64_t v17 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2 + 14, (unsigned __int8 *)__p);
      if (v17) {
        ++*((void *)v5 + 5);
      }
      else {
        (*(void (**)(uint64_t *__return_ptr, void *, void **))(*a2 + 16))(&v20, a2, __p);
      }
      if (SHIBYTE(v26) < 0) {
        break;
      }
      if (!v17) {
        goto LABEL_37;
      }
    }
    operator delete(__p[0]);
  }
  while (v17);
LABEL_37:
  uint64_t v18 = v21;
  *a1 = v20;
  a1[1] = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
  }
}

void sub_19E951A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operator<<<long long>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = operator<<(a1, (a2[1] - *a2) >> 3);
  uint64_t v4 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t result = operator<<(result, *(void *)(v4 + 8 * v5++));
      uint64_t v4 = *a2;
    }
    while (v5 < (a2[1] - *a2) >> 3);
  }
  return result;
}

uint64_t operator<<<std::string>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = operator<<(a1, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t result = operator<<(result, (uint64_t *)(v4 + v5));
      ++v6;
      uint64_t v4 = *a2;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return result;
}

void sub_19E952854(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,long long buf)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a36);
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  if (a2 == 1)
  {
    long long v62 = __cxa_begin_catch(a1);
    long long v63 = v62;
    if (a15)
    {
      (*(void (**)(void *))(*(void *)v62 + 16))(v62);
      *a15 = +[MLModelErrorUtils genericErrorWithFormat:@"Could not construct item similarity recommender: %s"];
    }
    long long v64 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      uint64_t v65 = (*(uint64_t (**)(void *))(*(void *)v63 + 16))(v63);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v65;
      _os_log_error_impl(&dword_19E58B000, v64, OS_LOG_TYPE_ERROR, "%s thrown on construction", (uint8_t *)&buf, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x19E9527ECLL);
  }

  _Unwind_Resume(a1);
}

void sub_19E952D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E953114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9533C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E953510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E953614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E953C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_19E953ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E954570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,std::__shared_weak_count *a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  _MLModelOutputArchiver::~_MLModelOutputArchiver((char **)(v43 - 144));
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)&a18);
  _MLModelInputArchiver::~_MLModelInputArchiver((_MLModelInputArchiver *)&a24);

  _Unwind_Resume(a1);
}

void sub_19E95486C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E954974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CoreML::Specification::LossLayer::~LossLayer((CoreML::Specification::LossLayer *)va);
  _Unwind_Resume(a1);
}

void sub_19E954EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id a42)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5959(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5960(uint64_t a1)
{
}

void sub_19E955298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E955B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a61, 8);

  _Unwind_Resume(a1);
}

void sub_19E955DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E955E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::string::size_type v12 = v11;

  _Unwind_Resume(a1);
}

void sub_19E955F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E956050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9565F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_19E9569C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E956BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E956C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E956E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9572C8(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  CoreML::Specification::NetworkUpdateParameters::~NetworkUpdateParameters((CoreML::Specification::NetworkUpdateParameters *)va);
  _Unwind_Resume(a1);
}

void sub_19E95746C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E95751C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E957D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35)
{
  _Unwind_Resume(a1);
}

void sub_19E957FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Archiver::_OArchiveDiskImpl::rawOutputStream(Archiver::_OArchiveDiskImpl *this)
{
  if (*((unsigned char *)this + 232)) {
    return (uint64_t)this + 240;
  }
  uint64_t v2 = *((void *)this + 7);
  if (*(unsigned char *)v2) {
    return v2 + 8;
  }
  uint64_t result = *(void *)(v2 + 624);
  if (!result)
  {
    Archiver::_ODataBlobImpl::_openAsStream(v2);
    return *(void *)(v2 + 624);
  }
  return result;
}

uint64_t Archiver::_ODataBlobImpl::_openAsStream(uint64_t this)
{
  if (!*(void *)(this + 624) && !*(unsigned char *)this) {
    operator new();
  }
  return this;
}

void sub_19E958110(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10F1C4067547207);
  _Unwind_Resume(a1);
}

uint64_t Archiver::_OArchiveDiskImpl::storageType(Archiver::_OArchiveDiskImpl *this)
{
  return 0;
}

void Archiver::_OArchiveDiskImpl::listFilesWritten(uint64_t a1, uint64_t a2)
{
  v29[2] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "coremldata.bin");
  if (*(char *)(a1 + 55) >= 0) {
    size_t v4 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    size_t v4 = *(void *)(a1 + 40);
  }
  first = (char *)&v28;
  std::string::basic_string[abi:ne180100]((uint64_t)&v28, v4 + 1);
  if (SHIBYTE(v28.__end_) < 0) {
    first = (char *)v28.__first_;
  }
  if (v4)
  {
    if (*(char *)(a1 + 55) >= 0) {
      unint64_t v6 = (const void *)(a1 + 32);
    }
    else {
      unint64_t v6 = *(const void **)(a1 + 32);
    }
    memmove(first, v6, v4);
  }
  *(_WORD *)&first[v4] = 47;
  if ((v27 & 0x80u) == 0) {
    double v7 = __p;
  }
  else {
    double v7 = (void **)__p[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v8 = v27;
  }
  else {
    std::string::size_type v8 = (std::string::size_type)__p[1];
  }
  unsigned int v9 = std::string::append((std::string *)&v28, (const std::string::value_type *)v7, v8);
  std::string::size_type v10 = v9->__r_.__value_.__r.__words[0];
  v29[0] = v9->__r_.__value_.__l.__size_;
  *(void *)((char *)v29 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
  char v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__end_) < 0) {
    operator delete(v28.__first_);
  }
  unint64_t v12 = *(void *)(a2 + 16);
  unint64_t v13 = *(void *)(a2 + 8);
  if (v13 >= v12)
  {
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(void *)a2) >> 3);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(void *)a2) >> 3);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x555555555555555) {
      unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v19 = v17;
    }
    v28.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v19) {
      uint64_t v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v19);
    }
    else {
      uint64_t v20 = 0;
    }
    double v21 = v20 + v16;
    v28.__first_ = v20;
    v28.__begin_ = v21;
    v28.__end_cap_.__value_ = &v20[v19];
    std::string::size_type v22 = v29[0];
    v21->__r_.__value_.__r.__words[0] = v10;
    v21->__r_.__value_.__l.__size_ = v22;
    *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v29 + 7);
    *((unsigned char *)&v21->__r_.__value_.__s + 23) = v11;
    v28.__end_ = v21 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &v28);
    unint64_t v15 = *(void *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&v28);
  }
  else
  {
    uint64_t v14 = v29[0];
    *(void *)unint64_t v13 = v10;
    *(void *)(v13 + _Block_object_dispose(&a9, 8) = v14;
    *(void *)(v13 + 15) = *(void *)((char *)v29 + 7);
    *(unsigned char *)(v13 + 23) = v11;
    unint64_t v15 = v13 + 24;
    *(void *)(a2 + _Block_object_dispose(&a9, 8) = v13 + 24;
  }
  *(void *)(a2 + _Block_object_dispose(&a9, 8) = v15;
  if ((char)v27 < 0) {
    operator delete(__p[0]);
  }
  std::string v23 = *(void **)(a1 + 88);
  if (v23)
  {
    unint64_t v24 = *(void *)(a2 + 8);
    do
    {
      double v25 = (long long *)(v23 + 2);
      if (v24 >= *(void *)(a2 + 16))
      {
        unint64_t v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, v25);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a2, v25);
        v24 += 24;
      }
      *(void *)(a2 + _Block_object_dispose(&a9, 8) = v24;
      std::string v23 = (void *)*v23;
    }
    while (v23);
  }
}

void sub_19E9583B0(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, std::__split_buffer<std::string> *a8, uint64_t a9, void *__pa, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

void Archiver::_OArchiveDiskImpl::setObject(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Error: setObject is not supported by _OArchiveDiskImpl");
  __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
}

void sub_19E958464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Archiver::_OArchiveDiskImpl::getNestedArchive(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 112, (unsigned __int8 *)a2, a2);
  if (*(char *)(a1 + 55) >= 0) {
    size_t v6 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    size_t v6 = *(void *)(a1 + 40);
  }
  double v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    double v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*(char *)(a1 + 55) >= 0) {
      std::string::size_type v8 = (const void *)(a1 + 32);
    }
    else {
      std::string::size_type v8 = *(const void **)(a1 + 32);
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    std::string::size_type v10 = (const std::string::value_type *)a2;
  }
  else {
    std::string::size_type v10 = *(const std::string::value_type **)a2;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a2 + 8);
  }
  unint64_t v12 = std::string::append(&v16, v10, v11);
  std::string __p = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  unint64_t v13 = operator new(0x340uLL);
  v13[1] = 0;
  v13[2] = 0;
  *unint64_t v13 = &unk_1EF0DD928;
  *(void *)&long long v14 = Archiver::_OArchiveDiskImpl::_OArchiveDiskImpl((uint64_t)(v13 + 3), (long long *)a2, (uint64_t)&__p, *(unsigned char *)(a1 + 232));
  *((void *)&v14 + 1) = v13;
  *a3 = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19E9585D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Archiver::_OArchiveDiskImpl::_OArchiveDiskImpl(uint64_t a1, long long *a2, uint64_t a3, char a4)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v29 = *(std::string *)a3;
  }
  Archiver::_OArchiveImpl::_OArchiveImpl(a1, a2, (long long *)&v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1EF0DCD08;
  *(unsigned char *)(a1 + 232) = a4;
  uint64_t v7 = MEMORY[0x1E4FBA468] + 64;
  *(void *)(a1 + 656) = MEMORY[0x1E4FBA468] + 64;
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *(void *)(a1 + 240) = v9;
  *(void *)(a1 + 240 + *(void *)(v9 - 24)) = v8;
  std::string::size_type v10 = (std::ios_base *)(a1 + 240 + *(void *)(*(void *)(a1 + 240) - 24));
  std::ios_base::init(v10, (void *)(a1 + 248));
  uint64_t v11 = MEMORY[0x1E4FBA468] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *(void *)(a1 + 240) = v11;
  *(void *)(a1 + 656) = v7;
  MEMORY[0x19F3C14F0](a1 + 248);
  if (!*(unsigned char *)(a1 + 232))
  {
    if (*(char *)(a1 + 55) >= 0) {
      uint64_t v12 = a1 + 32;
    }
    else {
      uint64_t v12 = *(void *)(a1 + 32);
    }
    unint64_t v13 = [NSString stringWithUTF8String:v12];
    long long v14 = [MEMORY[0x1E4F28CB8] defaultManager];
    LOBYTE(__p[0]) = 0;
    int v15 = [v14 fileExistsAtPath:v13 isDirectory:__p];
    char v16 = [v14 isWritableFileAtPath:v13];
    if (v15)
    {
      if (!LOBYTE(__p[0]))
      {
        NSLog(&cfstr_NonDirectoryFi.isa);
        exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
        std::string v23 = std::iostream_category();
        v29.__r_.__value_.__r.__words[0] = 1;
        v29.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
        std::ios_base::failure::failure(exception, "non-directory file already exists at archive path", (const std::error_code *)&v29);
        __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
      }
      if ((v16 & 1) == 0)
      {
        NSLog(&cfstr_ExistingArchiv.isa);
        unint64_t v17 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
        unint64_t v18 = std::iostream_category();
        v29.__r_.__value_.__r.__words[0] = 1;
        v29.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
        std::ios_base::failure::failure(v17, "existing archive path is not a writable directory", (const std::error_code *)&v29);
        __cxa_throw(v17, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
      }
    }
    else
    {
      unint64_t v19 = [MEMORY[0x1E4F28CB8] defaultManager];
      std::__split_buffer<std::string> v28 = 0;
      [v19 createDirectoryAtPath:v13 withIntermediateDirectories:1 attributes:0 error:&v28];
      uint64_t v20 = v28;

      if (v20)
      {
        NSLog(&cfstr_ErrorCreatingD_0.isa, v20);
        unint64_t v24 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
        double v25 = [v20 localizedDescription];
        std::string::size_type v26 = std::iostream_category();
        v29.__r_.__value_.__r.__words[0] = 1;
        v29.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
        std::ios_base::failure::failure(v24, v25, (const std::error_code *)&v29);
        __cxa_throw(v24, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
      }
    }

    operator new();
  }
  return a1;
}

void sub_19E958B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::ofstream::~ofstream(v34);
  Archiver::_OArchiveImpl::~_OArchiveImpl(v33);
  _Unwind_Resume(a1);
}

void sub_19E958CB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x19E958CA8);
}

uint64_t Archiver::_OArchiveImpl::_OArchiveImpl(uint64_t a1, long long *a2, long long *a3)
{
  *(void *)a1 = &unk_1EF0DCA88;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + _Block_object_dispose(&a9, 8) = v5;
  }
  size_t v6 = (std::string *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_OWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&a9, 8) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(&a9, 8) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&a9, 8) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  return a1;
}

void sub_19E958DA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *Archiver::_ODataBlobImpl::_ODataBlobImpl(std::string *a1, long long *a2, long long *a3, std::string::value_type a4)
{
  a1->__r_.__value_.__s.__data_[0] = a4;
  p_std::string::size_type size = &a1->__r_.__value_.__l.__size_;
  uint64_t v8 = (uint64_t *)&a1[17].__r_.__value_.__r.__words[2];
  uint64_t v9 = MEMORY[0x1E4FBA468] + 64;
  a1[17].__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA468] + 64;
  std::string::size_type v10 = &a1->__r_.__value_.__s.__data_[16];
  uint64_t v11 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  std::string::size_type v12 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  a1->__r_.__value_.__l.__size_ = v12;
  *(void *)((char *)p_size + *(void *)(v12 - 24)) = v11;
  unint64_t v13 = (std::ios_base *)((char *)&a1->__r_.__value_.__r.__words[1] + *(void *)(a1->__r_.__value_.__l.__size_ - 24));
  std::ios_base::init(v13, &a1->__r_.__value_.__r.__words[2]);
  uint64_t v14 = MEMORY[0x1E4FBA468] + 24;
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  *p_std::string::size_type size = v14;
  *uint64_t v8 = v9;
  MEMORY[0x19F3C14F0](v10);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 24, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v15 = *a2;
    a1[24].__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&a1[24].__r_.__value_.__l.__data_ = v15;
  }
  char v16 = a1 + 25;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v17 = *a3;
    a1[25].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  a1[26].__r_.__value_.__r.__words[0] = 0;
  return a1;
}

void sub_19E958F74(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 599) < 0) {
    operator delete(*v3);
  }
  std::ofstream::~ofstream(v1);
  _Unwind_Resume(a1);
}

void *std::ofstream::~ofstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA400];
  uint64_t v3 = *MEMORY[0x1E4FBA400];
  *a1 = *MEMORY[0x1E4FBA400];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x19F3C1500](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x19F3C1850](a1 + 52);
  return a1;
}

uint64_t std::default_delete<Archiver::_ODataBlobImpl>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 624);
    *(void *)(v1 + 624) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    if (*(char *)(v1 + 623) < 0) {
      operator delete(*(void **)(v1 + 600));
    }
    if (*(char *)(v1 + 599) < 0) {
      operator delete(*(void **)(v1 + 576));
    }
    uint64_t v3 = MEMORY[0x1E4FBA400];
    uint64_t v4 = *MEMORY[0x1E4FBA400];
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = *MEMORY[0x1E4FBA400];
    *(void *)(v1 + 8 + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
    MEMORY[0x19F3C1500](v1 + 16);
    std::ostream::~ostream();
    MEMORY[0x19F3C1850](v1 + 424);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<Archiver::_ODataBlobImpl *,std::shared_ptr<Archiver::_ODataBlobImpl>::__shared_ptr_default_delete<Archiver::_ODataBlobImpl,Archiver::_ODataBlobImpl>,std::allocator<Archiver::_ODataBlobImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN8Archiver14_ODataBlobImplEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<Archiver::_ODataBlobImpl *,std::shared_ptr<Archiver::_ODataBlobImpl>::__shared_ptr_default_delete<Archiver::_ODataBlobImpl,Archiver::_ODataBlobImpl>,std::allocator<Archiver::_ODataBlobImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<Archiver::_ODataBlobImpl>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<Archiver::_ODataBlobImpl *,std::shared_ptr<Archiver::_ODataBlobImpl>::__shared_ptr_default_delete<Archiver::_ODataBlobImpl,Archiver::_ODataBlobImpl>,std::allocator<Archiver::_ODataBlobImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void Archiver::_OArchiveDiskImpl::getBlob(uint64_t a1@<X0>, long long *a2@<X1>, std::string **a3@<X8>)
{
  Archiver::_OArchiveImpl::insertBlobName((unsigned __int8 *)__p, a1, (uint64_t)a2);
  size_t v6 = (std::string *)operator new(0x290uLL);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF0DD8B8;
  *a3 = Archiver::_ODataBlobImpl::_ODataBlobImpl(v6 + 1, a2, (long long *)__p, *(unsigned char *)(a1 + 232));
  a3[1] = v6;
  if (v9 < 0)
  {
    long long v7 = __p[0];
    operator delete(v7);
  }
}

void sub_19E95931C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Archiver::_OArchiveImpl::insertBlobName(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + 112;
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(a2 + 112), (unsigned __int8 *)a3))
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    *(void *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, &__msg, &__ec);
    __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v6, (unsigned __int8 *)a3, a3);
  if (*(char *)(a2 + 55) >= 0) {
    size_t v7 = *(unsigned __int8 *)(a2 + 55);
  }
  else {
    size_t v7 = *(void *)(a2 + 40);
  }
  p_msg = &__msg;
  std::string::basic_string[abi:ne180100]((uint64_t)&__msg, v7 + 1);
  if ((__msg.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_msg = (std::string *)__msg.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if (*(char *)(a2 + 55) >= 0) {
      char v9 = (const void *)(a2 + 32);
    }
    else {
      char v9 = *(const void **)(a2 + 32);
    }
    memmove(p_msg, v9, v7);
  }
  *(_WORD *)((char *)&p_msg->__r_.__value_.__l.__data_ + v7) = 47;
  int v10 = *(char *)(a3 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v11 = *(const std::string::value_type **)a3;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a3 + 8);
  }
  unint64_t v13 = std::string::append(&__msg, v11, v12);
  *(std::string *)a1 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__msg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__msg.__r_.__value_.__l.__data_);
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 72, a1, (uint64_t)a1);
}

void sub_19E9594CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void std::__shared_ptr_emplace<Archiver::_ODataBlobImpl>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 648);
  *(void *)(a1 + 64_Block_object_dispose(&a9, 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 647) < 0) {
    operator delete(*(void **)(a1 + 624));
  }
  if (*(char *)(a1 + 623) < 0) {
    operator delete(*(void **)(a1 + 600));
  }
  uint64_t v3 = MEMORY[0x1E4FBA400];
  uint64_t v4 = *MEMORY[0x1E4FBA400];
  *(void *)(a1 + 32) = *MEMORY[0x1E4FBA400];
  *(void *)(a1 + 32 + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  MEMORY[0x19F3C1500](a1 + 40);
  std::ostream::~ostream();

  JUMPOUT(0x19F3C1850);
}

void std::__shared_ptr_emplace<Archiver::_ODataBlobImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD8B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<Archiver::_ODataBlobImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD8B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Archiver::_OArchiveMemoryImpl::storageType(Archiver::_OArchiveMemoryImpl *this)
{
  return 1;
}

void Archiver::_OArchiveMemoryImpl::setObject(uint64_t a1, uint64_t *a2, void *a3)
{
  id v12 = a3;
  uint64_t v5 = a1 + 32;
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v5 = *(void *)(a1 + 32);
  }
  uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", v5, v12);
  size_t v7 = [v6 pathComponents];

  uint64_t v8 = Archiver::createArchive(v7, *(void **)(a1 + 232));
  if (!v8)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    *(void *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, &__msg, &__ec);
    __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
  }
  if (*((char *)a2 + 23) >= 0) {
    char v9 = a2;
  }
  else {
    char v9 = (uint64_t *)*a2;
  }
  int v10 = [NSString stringWithUTF8String:v9];
  [v8 setObject:v13 forKeyedSubscript:v10];
}

void sub_19E959868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:

      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

id Archiver::createArchive(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if ([v3 count])
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v5 = v3;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v15;
      while (2)
      {
        uint64_t v8 = 0;
        char v9 = v4;
        do
        {
          if (*(void *)v15 != v7) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v14 + 1) + 8 * v8);
          uint64_t v11 = objc_msgSend(v9, "objectForKeyedSubscript:", v10, (void)v14);
          if (v11)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {

              id v12 = 0;
              id v4 = v9;
              goto LABEL_16;
            }
            id v4 = v11;
          }
          else
          {
            id v4 = (id)objc_opt_new();
            [v9 setObject:v4 forKeyedSubscript:v10];
          }

          ++v8;
          char v9 = v4;
        }
        while (v6 != v8);
        uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }

    id v4 = v4;
    id v12 = v4;
  }
  else
  {
    id v12 = 0;
  }
LABEL_16:

  return v12;
}

void sub_19E959AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Archiver::_OArchiveMemoryImpl::getNestedArchive(uint64_t a1, uint64_t a2)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 112, (unsigned __int8 *)a2, a2);
  if (*(char *)(a1 + 55) >= 0) {
    size_t v4 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    size_t v4 = *(void *)(a1 + 40);
  }
  id v5 = &v13;
  std::string::basic_string[abi:ne180100]((uint64_t)&v13, v4 + 1);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    id v5 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if (*(char *)(a1 + 55) >= 0) {
      uint64_t v6 = (const void *)(a1 + 32);
    }
    else {
      uint64_t v6 = *(const void **)(a1 + 32);
    }
    memmove(v5, v6, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 47;
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v8 = *(const std::string::value_type **)a2;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(a2 + 8);
  }
  uint64_t v10 = std::string::append(&v13, v8, v9);
  std::string __p = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = operator new(0x108uLL);
  v11[1] = 0;
  void v11[2] = 0;
  *uint64_t v11 = &unk_1EF0DD9D0;
  Archiver::_OArchiveMemoryImpl::_OArchiveMemoryImpl(v11 + 3, (long long *)a2, (uint64_t)&__p, *(void **)(a1 + 232));
}

void sub_19E959C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Archiver::_OArchiveMemoryImpl::_OArchiveMemoryImpl(void *a1, long long *a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  Archiver::_OArchiveImpl::_OArchiveImpl((uint64_t)a1, a2, (long long *)a3);
  *a1 = &unk_1EF0DCDE8;
  a1[29] = v7;
  std::string::basic_string[abi:ne180100]<0>(v19, "coremldata.bin");
  std::string::basic_string[abi:ne180100]<0>(v15, "coremldata.bin");
  if (*(char *)(a3 + 23) >= 0) {
    size_t v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v8 = *(void *)(a3 + 8);
  }
  std::string::size_type v9 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v8 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v10 = (const void *)a3;
    }
    else {
      uint64_t v10 = *(const void **)a3;
    }
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v_Block_object_dispose(&a9, 8) = 47;
  if ((v16 & 0x80u) == 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v12 = v16;
  }
  else {
    std::string::size_type v12 = (std::string::size_type)v15[1];
  }
  std::string v13 = std::string::append(&v21, (const std::string::value_type *)v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v18 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  Archiver::_OArchiveMemoryImpl::createBlob((uint64_t)&v20, (uint64_t)a1, (uint64_t)v19, (uint64_t *)__p);
}

void sub_19E959E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }

  Archiver::_OArchiveImpl::~_OArchiveImpl((Archiver::_OArchiveImpl *)v27);
  _Unwind_Resume(a1);
}

void sub_19E959EB8()
{
}

void Archiver::_OArchiveMemoryImpl::createBlob(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*((char *)a4 + 23) >= 0) {
    id v5 = a4;
  }
  else {
    id v5 = (uint64_t *)*a4;
  }
  uint64_t v6 = [NSString stringWithUTF8String:v5];
  id v13 = [v6 pathComponents];

  if ((unint64_t)[v13 count] > 1)
  {
    std::string::size_type v12 = objc_msgSend(v13, "subarrayWithRange:", 0, objc_msgSend(v13, "count") - 1);
    id v7 = Archiver::createArchive(v12, *(void **)(a2 + 232));
    if (v7)
    {
      uint64_t v8 = [v13 lastObject];
      [v7 objectForKeyedSubscript:v8];
      if (objc_claimAutoreleasedReturnValue())
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
          std::operator+<char>();
          *(void *)&__ec.__val_ = 1;
          __ec.__cat_ = std::iostream_category();
          std::ios_base::failure::failure(exception, &__msg, &__ec);
          __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
        }
      }
      else
      {
        [MEMORY[0x1E4F1CA58] data];
        [v7 setObject:objc_claimAutoreleasedReturnValue() forKeyedSubscript:v8];
      }
      operator new();
    }
    uint64_t v11 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    *(void *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(v11, &__msg, &__ec);
    __cxa_throw(v11, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
  }
  uint64_t v10 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
  std::operator+<char>();
  *(void *)&__ec.__val_ = 1;
  __ec.__cat_ = std::iostream_category();
  std::ios_base::failure::failure(v10, &__msg, &__ec);
  __cxa_throw(v10, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
}

void sub_19E95A430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, id a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:

      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void std::default_delete<Archiver::_MemoryOStream>::operator()[abi:ne180100](id *a1)
{
  Archiver::_MemoryOStream::~_MemoryOStream(a1);
  MEMORY[0x19F3C1850](v1 + 88);

  JUMPOUT(0x19F3C1920);
}

void Archiver::_MemoryOStream::~_MemoryOStream(id *this)
{
  std::streambuf::~streambuf();

  std::ostream::~ostream();
}

{
  uint64_t v1;
  uint64_t vars8;

  Archiver::_MemoryOStream::~_MemoryOStream(this);
  MEMORY[0x19F3C1850](v1 + 88);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v1;

  Archiver::_MemoryOStream::~_MemoryOStream(this);
  MEMORY[0x19F3C1850](v1 + 88);
}

void virtual thunk to'Archiver::_MemoryOStream::~_MemoryOStream(Archiver::_MemoryOStream *this)
{
}

{
  uint64_t vars8;

  Archiver::_MemoryOStream::~_MemoryOStream((id *)((char *)this + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x19F3C1850);
}

void std::__shared_ptr_emplace<Archiver::_OArchiveMemoryImpl>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (Archiver::_OArchiveImpl *)(a1 + 24);

  Archiver::_OArchiveImpl::~_OArchiveImpl(v1);
}

void std::__shared_ptr_emplace<Archiver::_OArchiveMemoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD9D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<Archiver::_OArchiveMemoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD9D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Archiver::_OArchiveMemoryImpl::getBlob(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Archiver::_OArchiveImpl::insertBlobName((unsigned __int8 *)__p, a1, a2);
  Archiver::_OArchiveMemoryImpl::createBlob(a3, a1, a2, (uint64_t *)__p);
}

void sub_19E95A8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Archiver::_OArchiveMemoryImpl::~_OArchiveMemoryImpl(id *this)
{
  Archiver::_OArchiveImpl::~_OArchiveImpl((Archiver::_OArchiveImpl *)this);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t vars8;

  Archiver::_OArchiveImpl::~_OArchiveImpl((Archiver::_OArchiveImpl *)this);
}

void sub_19E95AE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

void sub_19E95AF18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__6410(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__6411(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__shared_ptr_pointer<Archiver::MMappedFile *,std::shared_ptr<Archiver::MMappedFile>::__shared_ptr_default_delete<Archiver::MMappedFile,Archiver::MMappedFile>,std::allocator<Archiver::MMappedFile>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN8Archiver11MMappedFileEE27__shared_ptr_default_deleteIS2_S2_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<Archiver::MMappedFile *,std::shared_ptr<Archiver::MMappedFile>::__shared_ptr_default_delete<Archiver::MMappedFile,Archiver::MMappedFile>,std::allocator<Archiver::MMappedFile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void *Archiver::_IDataBlobImpl::_IDataBlobImpl(void *a1, long long *a2, void *a3)
{
  *a1 = &unk_1EF0DCAD8;
  id v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = a3[1];
  a1[4] = *a3;
  a1[5] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

uint64_t std::__shared_ptr_pointer<std::ifstream *,std::shared_ptr<std::istream>::__shared_ptr_default_delete<std::istream,std::ifstream>,std::allocator<std::ifstream>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7C814)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<std::ifstream *,std::shared_ptr<std::istream>::__shared_ptr_default_delete<std::istream,std::ifstream>,std::allocator<std::ifstream>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void CoreML::TreeEnsembles::Internal::buildTreeEnsembleModelFromSpec(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v862 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v838, "profile_number");
  if (!std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*(void **)(a3 + 8), v838))
  {
    int v8 = 0;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "profile_number");
  uint64_t v6 = std::map<std::string,std::string>::at(a3, __p);
  int v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(void *)(v6 + 8) != 13)
    {
LABEL_14:
      int v8 = 0;
      goto LABEL_15;
    }
    uint64_t v6 = *(void *)v6;
  }
  else if (v7 != 13)
  {
    goto LABEL_14;
  }
  BOOL v9 = *(void *)v6 == 0x61665F6775626564 && *(void *)(v6 + 5) == 0x6B6361707461665FLL;
  int v8 = v9;
LABEL_15:
  if (SBYTE7(v819) < 0) {
    operator delete(__p[0]);
  }
LABEL_17:
  if ((v838[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v838);
    if (v8) {
      goto LABEL_19;
    }
  }
  else if (v8)
  {
LABEL_19:
    uint64_t v11 = *a2;
    uint64_t v10 = (std::__shared_weak_count *)a2[1];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::map<std::string,std::string>::map[abi:ne180100](v838, (void *)a3);
    *(void *)a1 = 0;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(a1 + 16) = 0;
    __src = 0;
    uint64_t v832 = 99999;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, 0, (char *)&__src, (char *)&v833, 16);
    __p[0] = *(void **)(v11 + 16);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)__p, (char *)&__p[1], 8);
    __p[0] = 0;
    uint64_t v13 = *(void *)a1;
    std::string::size_type v12 = *(char **)(a1 + 8);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, v12, (char *)__p, (char *)&__p[1], 8);
    v800 = &v12[-v13];
    for (unint64_t i = 2; i != 19; ++i)
    {
      __p[0] = (void *)i;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)__p, (char *)&__p[1], 8);
      __p[0] = 0;
      uint64_t v16 = *(void *)a1;
      long long v15 = *(char **)(a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, v15, (char *)__p, (char *)&__p[1], 8);
      long long v17 = &v15[-v16];
      std::to_string((std::string *)__p, i);
      std::string::basic_string[abi:ne180100]<0>(&v858, "profile_number");
      v834 = &v858;
      std::string::size_type v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v838, &v858, (_OWORD **)&v834);
      uint64_t v19 = (char *)v18 + 56;
      if (*((char *)v18 + 79) < 0) {
        operator delete(*(void **)v19);
      }
      *(_OWORD *)uint64_t v19 = *(_OWORD *)__p;
      *((void *)v19 + 2) = v819;
      BYTE7(v819) = 0;
      LOBYTE(__p[0]) = 0;
      if (SHIBYTE(v858.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v858.__r_.__value_.__l.__data_);
        if (SBYTE7(v819) < 0) {
          operator delete(__p[0]);
        }
      }
      unint64_t v836 = v11;
      v837 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CoreML::TreeEnsembles::Internal::buildTreeEnsembleModelFromSpec(__p, &v836, v838);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(a1, *(char **)(a1 + 8), (char *)__p[0], (char *)__p[1], (char *)__p[1] - (char *)__p[0]);
      long long v20 = *(char **)(a1 + 8);
      unint64_t v21 = (*(_DWORD *)a1 - (int)v20) & 7;
      v858.__r_.__value_.__s.__data_[0] = 0;
      std::vector<unsigned char>::insert((char **)a1, v20, v21, (char *)&v858);
      *(void *)&v17[*(void *)a1] = *(void *)(a1 + 8) - *(void *)a1;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    *(void *)&v800[*(void *)a1] = *(void *)(a1 + 8) - *(void *)a1;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)&v838[8]);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    return;
  }
  uint64_t v801 = a3;
  v823 = 0;
  uint64_t v824 = 0;
  long long v819 = 0u;
  long long v820 = 0u;
  *(_OWORD *)std::string __p = 0u;
  unint64_t v821 = 0;
  v822 = &v823;
  v828[0] = 0;
  v828[1] = 0;
  unint64_t v825 = 0;
  unint64_t v826 = 0;
  __p[1] = *(void **)(*a2 + 16);
  long long v819 = 0uLL;
  v827 = v828;
  __int16 v830 = 1;
  char v829 = 1;
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(0);
  v823 = 0;
  uint64_t v824 = 0;
  v822 = &v823;
  long long v820 = 0uLL;
  HIBYTE(v830) = 1;
  __src = __p;
  v785 = a2;
  uint64_t v22 = *(void *)(*a2 + 48);
  uint64_t v23 = *(void *)(*a2 + 56);
  if (v22 == v23)
  {
    unint64_t v29 = 0;
    unint64_t v825 = 0;
    unint64_t v826 = 0;
LABEL_59:
    uint64_t v30 = v801;
    goto LABEL_60;
  }
  do
  {
    unint64_t v836 = 0;
    v834 = 0;
    v859 = 0;
    int v24 = operator new(0x38uLL);
    *int v24 = &unk_1EF0DD338;
    v24[1] = &v834;
    v24[2] = __p;
    v24[3] = &__src;
    v24[4] = &v836;
    uint64_t v24[5] = &v835;
    v24[6] = &v858;
    *(void *)&v838[24] = 0;
    v859 = v24;
    std::__function::__value_func<void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::~__value_func[abi:ne180100](v838);
    if (!v859) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void *, uint64_t))(*v859 + 48))(v859, v22);
    unint64_t v25 = v819;
    if ((unint64_t)v819 <= v836) {
      unint64_t v25 = v836;
    }
    *(void *)&long long v819 = v25;
    *((void *)&v819 + 1) += v836;
    std::string::size_type v26 = (std::string *)v820;
    if ((unint64_t)v820 <= (unint64_t)v834) {
      std::string::size_type v26 = v834;
    }
    *(void *)&long long v820 = v26;
    *((void *)&v820 + 1) += v834;
    std::__function::__value_func<void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::~__value_func[abi:ne180100](&v858);
    v22 += 16;
  }
  while (v22 != v23);
  unsigned __int8 v27 = v822;
  unint64_t v825 = 0;
  unint64_t v826 = 0;
  if (v822 == &v823)
  {
    unint64_t v29 = 0;
    goto LABEL_59;
  }
  unint64_t v28 = 0;
  unint64_t v29 = 0;
  uint64_t v30 = v801;
  do
  {
    uint64_t v31 = v27[5];
    if (v31)
    {
      if (v27[4] > v28) {
        unint64_t v28 = v27[4];
      }
      unint64_t v826 = v28;
    }
    v29 += v27[4] * v31;
    unint64_t v825 = v29;
    uint64_t v32 = (void *)v27[1];
    if (v32)
    {
      do
      {
        int v33 = (void **)v32;
        uint64_t v32 = (void *)*v32;
      }
      while (v32);
    }
    else
    {
      do
      {
        int v33 = (void **)v27[2];
        BOOL v9 = *v33 == v27;
        unsigned __int8 v27 = v33;
      }
      while (!v9);
    }
    unsigned __int8 v27 = v33;
  }
  while (v33 != &v823);
LABEL_60:
  unint64_t v34 = 8 * (*((void *)&v820 + 1) + 6 * *((void *)&v819 + 1) + (unint64_t)__p[1] * v29);
  unint64_t v821 = v34;
  int v35 = HIBYTE(v830);
  std::string::basic_string[abi:ne180100]<0>(v838, "engine_version");
  if (std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*(void **)(v30 + 8), v838))
  {
    std::string::basic_string[abi:ne180100]<0>(&v858, "engine_version");
    long long v36 = (unsigned __int8 *)std::map<std::string,std::string>::at(v30, &v858);
    int v37 = (char)v36[23];
    if (v37 < 0)
    {
      if (*((void *)v36 + 1) != 1)
      {
LABEL_68:
        BOOL v38 = 0;
LABEL_69:
        if (SHIBYTE(v858.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v858.__r_.__value_.__l.__data_);
        }
        goto LABEL_71;
      }
      long long v36 = *(unsigned __int8 **)v36;
    }
    else if (v37 != 1)
    {
      goto LABEL_68;
    }
    BOOL v38 = *v36 == 49;
    goto LABEL_69;
  }
  BOOL v38 = 0;
LABEL_71:
  if ((v838[23] & 0x80000000) != 0) {
    operator delete(*(void **)v838);
  }
  std::string::basic_string[abi:ne180100]<0>(v838, "profile_number");
  uint64_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*(void **)(v30 + 8), v838);
  if ((v838[23] & 0x80000000) != 0) {
    operator delete(*(void **)v838);
  }
  if (v39)
  {
    std::string::basic_string[abi:ne180100]<0>(v838, "profile_number");
    uint64_t v40 = (const std::string *)std::map<std::string,std::string>::at(v30, v838);
    unsigned int v41 = std::stoul(v40, 0, 10);
    uint64_t v42 = (uint64_t **)v785;
    if ((v838[23] & 0x80000000) != 0) {
      operator delete(*(void **)v838);
    }
    switch(v41)
    {
      case 1u:
        goto LABEL_81;
      case 2u:
        goto LABEL_100;
      case 3u:
        goto LABEL_125;
      case 4u:
        goto LABEL_160;
      case 5u:
        goto LABEL_168;
      case 6u:
        goto LABEL_192;
      case 7u:
        goto LABEL_144;
      case 8u:
        goto LABEL_176;
      case 9u:
        goto LABEL_152;
      case 0xAu:
        goto LABEL_184;
      case 0xBu:
        goto LABEL_135;
      case 0xCu:
        goto LABEL_208;
      case 0xDu:
        goto LABEL_200;
      case 0xEu:
        goto LABEL_216;
      case 0xFu:
        goto LABEL_225;
      case 0x10u:
        goto LABEL_241;
      case 0x11u:
        goto LABEL_249;
      case 0x12u:
        goto LABEL_233;
      default:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v858, v41);
        v757 = std::string::insert(&v858, 0, "Unrecognized profile number ");
        long long v758 = *(_OWORD *)&v757->__r_.__value_.__l.__data_;
        *(void *)&v838[16] = *((void *)&v757->__r_.__value_.__l + 2);
        *(_OWORD *)v838 = v758;
        v757->__r_.__value_.__l.__size_ = 0;
        v757->__r_.__value_.__r.__words[2] = 0;
        v757->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)v838);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  if (v38)
  {
    uint64_t v42 = (uint64_t **)v785;
    if (__p[1] == (void *)1)
    {
LABEL_81:
      uint64_t v43 = *v42;
      std::vector<int>::pointer v44 = (std::__shared_weak_count *)v42[1];
      if (v44) {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(v838, 0, 80);
      *(_DWORD *)&v838[8] = 1;
      *(_OWORD *)&v858.__r_.__value_.__r.__words[1] = 0uLL;
      v858.__r_.__value_.__r.__words[0] = (std::string::size_type)&v858.__r_.__value_.__l.__size_;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&v858, (uint64_t *)&v838[16], (void **)&v838[24], v43[2]);
      uint64_t v45 = (unsigned char *)v43[3];
      uint64_t v46 = (unsigned char *)v43[4];
      if (v46 != v45) {
        memmove(*(void **)&v838[24], v45, v46 - v45);
      }
      if (v44) {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v48 = (uint64_t *)v43[6];
      for (uint64_t j = (uint64_t *)v43[7]; v48 != j; v48 += 2)
      {
        uint64_t v49 = *v48;
        if (*(unsigned char *)*v48)
        {
          uint64_t v50 = *(void *)(v49 + 80);
          uint64_t v51 = *(void *)(v49 + 88);
          if (v50 != v51)
          {
            uint64_t v52 = *(void *)&v838[24];
            do
            {
              *(double *)(v52 + 8 * *(void *)v50) = *(double *)(v50 + 8) + *(double *)(v52 + 8 * *(void *)v50);
              v50 += 16;
            }
            while (v50 != v51);
          }
        }
        else
        {
          uint64_t v53 = CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultSingleDimensionProfile,0>((uint64_t)&v858, (uint64_t *)&v838[32], v48);
          uint64_t v54 = CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&v858, (uint64_t *)&v838[48], (void **)&v838[56], 1);
          *(void *)(*(void *)&v838[56] + 8 * v54) = v53;
        }
      }
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
    }
    else
    {
LABEL_100:
      uint64_t v43 = *v42;
      std::vector<int>::pointer v44 = (std::__shared_weak_count *)v42[1];
      if (v44) {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(v838, 0, 80);
      *(_DWORD *)&v838[8] = 2;
      *(_OWORD *)&v858.__r_.__value_.__r.__words[1] = 0uLL;
      v858.__r_.__value_.__r.__words[0] = (std::string::size_type)&v858.__r_.__value_.__l.__size_;
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&v858, (uint64_t *)&v838[16], (void **)&v838[24], v43[2]);
      long long v56 = (unsigned char *)v43[3];
      uint64_t v57 = (unsigned char *)v43[4];
      if (v57 != v56) {
        memmove(*(void **)&v838[24], v56, v57 - v56);
      }
      if (v44) {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v59 = (uint64_t *)v43[6];
      for (k = (uint64_t *)v43[7]; v59 != k; v59 += 2)
      {
        uint64_t v60 = *v59;
        if (*(unsigned char *)*v59)
        {
          uint64_t v61 = *(void *)(v60 + 80);
          uint64_t v62 = *(void *)(v60 + 88);
          if (v61 != v62)
          {
            uint64_t v63 = *(void *)&v838[24];
            do
            {
              *(double *)(v63 + 8 * *(void *)v61) = *(double *)(v61 + 8) + *(double *)(v63 + 8 * *(void *)v61);
              v61 += 16;
            }
            while (v61 != v62);
          }
        }
        else
        {
          uint64_t v64 = CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultMultiDimensionProfile,0>((uint64_t)&v858, (uint64_t *)&v838[32], v59);
          uint64_t v65 = CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&v858, (uint64_t *)&v838[48], (void **)&v838[56], 1);
          *(void *)(*(void *)&v838[56] + 8 * v65) = v64;
        }
      }
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
    }
    *(_DWORD *)&v838[80] = *((_DWORD *)v43 + 32);
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, 0, v838, &v838[16], 16);
    long long v66 = *(char **)&v838[24];
    __src = *(void ***)&v838[16];
    std::vector<unsigned char>::reserve((unint64_t *)a1, *(void *)&v838[16] + *(void *)(a1 + 8) - *(void *)a1 + 8);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&__src, (char *)&v832, 8);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v66, &v66[8 * (void)__src], 8 * (void)__src);
    long long v67 = *(char **)&v838[40];
    __src = *(void ***)&v838[32];
    std::vector<unsigned char>::reserve((unint64_t *)a1, *(void *)&v838[32] + *(void *)(a1 + 8) - *(void *)a1 + 8);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&__src, (char *)&v832, 8);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v67, &v67[40 * (void)__src], 40 * (void)__src);
    std::string v68 = *(char **)&v838[56];
    __src = *(void ***)&v838[48];
    std::vector<unsigned char>::reserve((unint64_t *)a1, *(void *)&v838[48] + *(void *)(a1 + 8) - *(void *)a1 + 8);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&__src, (char *)&v832, 8);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v68, &v68[8 * (void)__src], 8 * (void)__src);
    uint64_t v69 = *(char **)&v838[72];
    __src = *(void ***)&v838[64];
    std::vector<unsigned char>::reserve((unint64_t *)a1, *(void *)&v838[64] + *(void *)(a1 + 8) - *(void *)a1 + 8);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&__src, (char *)&v832, 8);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v69, &v69[8 * (void)__src], 8 * (void)__src);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), &v838[80], &v838[84], 4);
    uint64_t v70 = (CoreML::Archiver::MMappedContentManager **)&v858;
  }
  else
  {
    uint64_t v42 = (uint64_t **)v785;
    if (__p[1] == (void *)1)
    {
      char v55 = 0;
    }
    else if (v826 == 1)
    {
      char v55 = 1;
    }
    else if (v825 < (unint64_t)(3 * (uint64_t)__p[1] * *((void *)&v820 + 1)) >> 2)
    {
      char v55 = 2;
    }
    else
    {
      char v55 = 3;
    }
    unint64_t v71 = HIDWORD(v34);
    if (v35)
    {
      if (v71)
      {
        switch(v55)
        {
          case 1:
LABEL_176:
            uint64_t v103 = *v42;
            v102 = (std::__shared_weak_count *)v42[1];
            if (v102) {
              atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 8;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v808 = v102;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v103[2]);
            unint64_t v104 = (unsigned char *)v103[3];
            uint64_t v105 = (unsigned char *)v103[4];
            if (v105 != v104) {
              memmove(*(void **)&v838[24], v104, v105 - v104);
            }
            if (v102)
            {
              atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v106) = 0;
            }
            else {
              unint64_t v106 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v211 = v827;
            if (v827 == v828) {
              goto LABEL_417;
            }
            while (!v211[5])
            {
LABEL_411:
              v215 = v211[1];
              if (v215)
              {
                do
                {
                  v216 = (void **)v215;
                  v215 = (void *)*v215;
                }
                while (v215);
              }
              else
              {
                do
                {
                  v216 = (void **)v211[2];
                  BOOL v9 = *v216 == v211;
                  v211 = v216;
                }
                while (!v9);
              }
              v211 = v216;
              if (v216 == v828)
              {
LABEL_417:
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
                int v217 = 4;
                char v767 = v830;
                uint64_t v218 = 4;
                goto LABEL_683;
              }
            }
            if (v858.__r_.__value_.__l.__size_)
            {
              int v212 = *((_DWORD *)v211 + 8);
              std::string::size_type size = v858.__r_.__value_.__l.__size_;
              do
              {
                int v214 = *(_DWORD *)(size + 28);
                if (v212 >= v214)
                {
                  if (v214 >= v212) {
                    goto LABEL_411;
                  }
                  size += 8;
                }
                std::string::size_type size = *(void *)size;
              }
              while (size);
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            }
            unint64_t v836 = 0x200000001;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v219 = v827;
            if (v827 == v828)
            {
LABEL_433:
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              if ((_BYTE)v830) {
                char v225 = 3;
              }
              else {
                char v225 = 2;
              }
              char v767 = v225;
              uint64_t v218 = 4;
            }
            else
            {
              while (!v219[5])
              {
LABEL_427:
                v223 = v219[1];
                if (v223)
                {
                  do
                  {
                    v224 = (void **)v223;
                    v223 = (void *)*v223;
                  }
                  while (v223);
                }
                else
                {
                  do
                  {
                    v224 = (void **)v219[2];
                    BOOL v9 = *v224 == v219;
                    v219 = v224;
                  }
                  while (!v9);
                }
                v219 = v224;
                if (v224 == v828) {
                  goto LABEL_433;
                }
              }
              if (v858.__r_.__value_.__l.__size_)
              {
                int v220 = *((_DWORD *)v219 + 8);
                std::string::size_type v221 = v858.__r_.__value_.__l.__size_;
                do
                {
                  int v222 = *(_DWORD *)(v221 + 28);
                  if (v220 >= v222)
                  {
                    if (v222 >= v220) {
                      goto LABEL_427;
                    }
                    v221 += 8;
                  }
                  std::string::size_type v221 = *(void *)v221;
                }
                while (v221);
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              }
              uint64_t v218 = 6;
              char v767 = 4;
            }
            int v217 = v218;
LABEL_683:
            unint64_t v365 = v819 - 1;
            if ((uint64_t)v819 - 1 <= (unint64_t)v820) {
              unint64_t v365 = v820;
            }
            v791 = v103;
            if (v365) {
              int v366 = vcvtpd_u64_f64(log2((double)v365)) + 1;
            }
            else {
              LOBYTE(v366) = 0;
            }
            unsigned __int8 v777 = v106;
            char v367 = v106;
            unint64_t v368 = (v106 + (unint64_t)v366 + v218 + 7) >> 3;
            unsigned __int16 v369 = v368 + 4;
            if (*((void *)&v819 + 1)) {
              int v370 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
            }
            else {
              int v370 = 0;
            }
            char v371 = v366;
            unsigned __int8 v372 = __p[1];
            v373 = (char *)__p[1] - 1;
            if (__p[1] != (void *)1)
            {
              double v374 = log2((double)(unint64_t)v373);
              char v371 = v366;
              LODWORD(v373) = vcvtpd_u64_f64(v374) + 1;
            }
            *(_DWORD *)&v838[32] = 0;
            *(_WORD *)&v838[36] = v368 + 4;
            v838[38] = v777;
            v838[39] = v217;
            *(_WORD *)&v838[40] = v366;
            v838[42] = v370;
            *(_WORD *)&v838[43] = v373;
            v838[45] = v767;
            *(_DWORD *)&v838[46] = 0;
            *(void *)&v838[56] = v372;
            v858.__r_.__value_.__r.__words[0] = ~(-1 << v367);
            LODWORD(v858.__r_.__value_.__r.__words[1]) = v777 >> 3;
            HIDWORD(v858.__r_.__value_.__r.__words[1]) = v777 & 7;
            unsigned int v375 = ((-(char)v366 - ((_BYTE)v217 + v777)) & 7) + v217 + v777;
            LODWORD(v858.__r_.__value_.__r.__words[2]) = ~(-1 << v217);
            HIDWORD(v858.__r_.__value_.__r.__words[2]) = v375 >> 3;
            LODWORD(v859) = v375 & 7;
            uint64_t v860 = ~(-1 << v371);
            int v861 = v368;
            if (v370 - 25 >= 0x27) {
              int v376 = 0;
            }
            else {
              int v376 = -v370 & 7;
            }
            int v377 = v376 + v370;
            if (v373 - 25 >= 0x27) {
              int v378 = 0;
            }
            else {
              int v378 = -(int)v373 & 7;
            }
            *(_DWORD *)&v838[84] = v377;
            DWORD1(v844) = v378 + v373;
            DWORD1(v849) = 0;
            v313 = v791;
            v380 = (uint64_t *)v791[6];
            v379 = (uint64_t *)v791[7];
            if (v380 != v379)
            {
              uint64_t v381 = 0;
              do
              {
                uint64_t v382 = *v380;
                if (*(unsigned char *)*v380)
                {
                  uint64_t v383 = *(void *)(v382 + 80);
                  uint64_t v384 = *(void *)(v382 + 88);
                  if (v383 != v384)
                  {
                    uint64_t v385 = *(void *)&v838[24];
                    do
                    {
                      *(double *)(v385 + 8 * *(void *)v383) = *(double *)(v383 + 8)
                                                                + *(double *)(v385 + 8 * *(void *)v383);
                      v383 += 16;
                    }
                    while (v383 != v384);
                  }
                }
                else
                {
                  CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>((uint64_t)&__src, (uint64_t)&v838[32], (uint64_t)&v858, v381++, v380);
                }
                v380 += 2;
              }
              while (v380 != v379);
              unsigned __int16 v369 = *(_WORD *)&v838[36];
            }
            uint64_t v386 = v369;
            unint64_t v836 = *(void *)&v838[64] * v369;
            std::vector<int>::pointer v44 = v808;
            CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v386);
            ++*(void *)&v838[64];
            if (v808)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v808);
              std::__shared_weak_count::__release_shared[abi:ne180100](v808);
            }
            goto LABEL_742;
          case 2:
LABEL_152:
            uint64_t v88 = *v42;
            uint64_t v87 = (std::__shared_weak_count *)v42[1];
            if (v87) {
              atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 9;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v805 = v87;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v88[2]);
            uint64_t v89 = (unsigned char *)v88[3];
            int8x16_t v90 = (unsigned char *)v88[4];
            if (v90 != v89) {
              memmove(*(void **)&v838[24], v89, v90 - v89);
            }
            if (v87)
            {
              atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v91) = 0;
            }
            else {
              unint64_t v91 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            long long v152 = v827;
            if (v827 == v828) {
              goto LABEL_273;
            }
            while (!v152[5])
            {
LABEL_267:
              int v156 = v152[1];
              if (v156)
              {
                do
                {
                  uint64_t v157 = (void **)v156;
                  int v156 = (void *)*v156;
                }
                while (v156);
              }
              else
              {
                do
                {
                  uint64_t v157 = (void **)v152[2];
                  BOOL v9 = *v157 == v152;
                  long long v152 = v157;
                }
                while (!v9);
              }
              long long v152 = v157;
              if (v157 == v828)
              {
LABEL_273:
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
                int v765 = 4;
                char v763 = v830;
                uint64_t v158 = 4;
                goto LABEL_547;
              }
            }
            if (v858.__r_.__value_.__l.__size_)
            {
              int v153 = *((_DWORD *)v152 + 8);
              std::string::size_type v154 = v858.__r_.__value_.__l.__size_;
              do
              {
                int v155 = *(_DWORD *)(v154 + 28);
                if (v153 >= v155)
                {
                  if (v155 >= v153) {
                    goto LABEL_267;
                  }
                  v154 += 8;
                }
                std::string::size_type v154 = *(void *)v154;
              }
              while (v154);
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            }
            unint64_t v836 = 0x200000001;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v159 = v827;
            if (v827 == v828)
            {
LABEL_289:
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              if ((_BYTE)v830) {
                char v165 = 3;
              }
              else {
                char v165 = 2;
              }
              char v763 = v165;
              uint64_t v158 = 4;
            }
            else
            {
              while (!v159[5])
              {
LABEL_283:
                uint64_t v163 = v159[1];
                if (v163)
                {
                  do
                  {
                    v164 = (void **)v163;
                    uint64_t v163 = (void *)*v163;
                  }
                  while (v163);
                }
                else
                {
                  do
                  {
                    v164 = (void **)v159[2];
                    BOOL v9 = *v164 == v159;
                    v159 = v164;
                  }
                  while (!v9);
                }
                v159 = v164;
                if (v164 == v828) {
                  goto LABEL_289;
                }
              }
              if (v858.__r_.__value_.__l.__size_)
              {
                int v160 = *((_DWORD *)v159 + 8);
                std::string::size_type v161 = v858.__r_.__value_.__l.__size_;
                do
                {
                  int v162 = *(_DWORD *)(v161 + 28);
                  if (v160 >= v162)
                  {
                    if (v162 >= v160) {
                      goto LABEL_283;
                    }
                    v161 += 8;
                  }
                  std::string::size_type v161 = *(void *)v161;
                }
                while (v161);
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              }
              uint64_t v158 = 6;
              char v763 = 4;
            }
            int v765 = v158;
LABEL_547:
            unint64_t v271 = (unint64_t)__p[1];
            uint64_t v272 = v819 - 1;
            if ((unint64_t)(v819 - 1) <= (uint64_t)__p[1] * (uint64_t)v820) {
              uint64_t v272 = (uint64_t)__p[1] * v820;
            }
            if (v272) {
              int v273 = vcvtpd_u64_f64(log2((double)(unint64_t)v272)) + 1;
            }
            else {
              LOBYTE(v273) = 0;
            }
            char v274 = v91;
            unint64_t v275 = (v91 + (unint64_t)v273 + v158 + 7) >> 3;
            if (*((void *)&v819 + 1)) {
              int v276 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
            }
            else {
              int v276 = 0;
            }
            v787 = v88;
            unsigned __int16 v277 = v275 + 4;
            int v759 = v275;
            unsigned __int8 v278 = v91;
            if (v271 == 1) {
              int v279 = 1;
            }
            else {
              int v279 = vcvtpd_u64_f64(log2((double)(v271 - 1))) + 2;
            }
            char v280 = v273;
            unint64_t v281 = *((void *)&v820 + 1) * v271;
            if (*((void *)&v820 + 1) * v271)
            {
              double v282 = log2((double)v281);
              char v280 = v273;
              LODWORD(v281) = vcvtpd_u64_f64(v282) + 1;
            }
            *(_DWORD *)&v838[32] = 0;
            unsigned __int16 v283 = v277;
            *(_WORD *)&v838[36] = v277;
            v838[38] = v278;
            v838[39] = v765;
            *(_WORD *)&v838[40] = v273;
            v838[42] = v276;
            v838[43] = v279;
            v838[44] = v281;
            v838[45] = v763;
            *(_DWORD *)&v838[46] = 0;
            *(void *)&v838[56] = v271;
            v858.__r_.__value_.__r.__words[0] = ~(-1 << v274);
            LODWORD(v858.__r_.__value_.__r.__words[1]) = v278 >> 3;
            HIDWORD(v858.__r_.__value_.__r.__words[1]) = v278 & 7;
            unsigned int v284 = ((-(char)v273 - ((_BYTE)v765 + v278)) & 7) + v765 + v278;
            LODWORD(v858.__r_.__value_.__r.__words[2]) = ~(-1 << v765);
            HIDWORD(v858.__r_.__value_.__r.__words[2]) = v284 >> 3;
            LODWORD(v859) = v284 & 7;
            uint64_t v860 = ~(-1 << v280);
            int v861 = v759;
            if (v276 - 25 >= 0x27) {
              int v285 = 0;
            }
            else {
              int v285 = -v276 & 7;
            }
            int v286 = v285 + v276;
            if (v279 - 25 >= 0x27) {
              int v287 = 0;
            }
            else {
              int v287 = -v279 & 7;
            }
            *(_DWORD *)&v838[84] = v286;
            DWORD1(v844) = v287 + v279;
            if (v281 - 25 >= 0x27) {
              int v288 = 0;
            }
            else {
              int v288 = -(int)v281 & 7;
            }
            DWORD1(v849) = v288 + v281;
            std::vector<int>::pointer v44 = v805;
            v290 = (uint64_t *)v88[6];
            v289 = (uint64_t *)v88[7];
            if (v290 != v289)
            {
              uint64_t v291 = 0;
              do
              {
                uint64_t v292 = *v290;
                if (*(unsigned char *)*v290)
                {
                  uint64_t v293 = *(void *)(v292 + 80);
                  uint64_t v294 = *(void *)(v292 + 88);
                  if (v293 != v294)
                  {
                    uint64_t v295 = *(void *)&v838[24];
                    do
                    {
                      *(double *)(v295 + 8 * *(void *)v293) = *(double *)(v293 + 8)
                                                                + *(double *)(v295 + 8 * *(void *)v293);
                      v293 += 16;
                    }
                    while (v293 != v294);
                  }
                }
                else
                {
                  CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
                  CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v849, v854);
                  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>((uint64_t)&__src, (uint64_t)&v838[32], (uint64_t)&v858, v291++, v290);
                }
                v290 += 2;
              }
              while (v290 != v289);
              unsigned __int16 v283 = *(_WORD *)&v838[36];
            }
            unint64_t v836 = *(void *)&v838[64] * v283;
            CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v283);
            ++*(void *)&v838[64];
            if (v805)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v805);
              std::__shared_weak_count::__release_shared[abi:ne180100](v805);
            }
LABEL_581:
            int v856 = *((_DWORD *)v787 + 32);
            *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(a1 + 16) = 0;
            *(void *)a1 = 0;
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, 0, v838, &v838[16], 16);
            v296 = *(char **)&v838[24];
            v858.__r_.__value_.__r.__words[0] = *(void *)&v838[16];
            std::vector<unsigned char>::reserve((unint64_t *)a1, *(void *)&v838[16] + *(void *)(a1 + 8) - *(void *)a1 + 8);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v858, &v858.__r_.__value_.__s.__data_[8], 8);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v296, &v296[8 * v858.__r_.__value_.__r.__words[0]], 8 * v858.__r_.__value_.__r.__words[0]);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), &v838[32], &v838[64], 32);
            v297 = *(char **)&v838[72];
            v858.__r_.__value_.__r.__words[0] = *(void *)&v838[64] * *(unsigned __int16 *)&v838[36];
            std::vector<unsigned char>::reserve((unint64_t *)a1, v858.__r_.__value_.__r.__words[0] + *(void *)(a1 + 8) - *(void *)a1 + 8);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v858, &v858.__r_.__value_.__s.__data_[8], 8);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v297, &v297[v858.__r_.__value_.__r.__words[0]], (int64_t)v858.__r_.__value_.__l.__data_);
            CoreML::Archiver::PackedIntegerVector::export_to_image(&v838[80], (char **)a1, 1);
            CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v844, (char **)a1, 1);
            v298 = v855;
            v858.__r_.__value_.__r.__words[0] = v854;
            std::vector<unsigned char>::reserve((unint64_t *)a1, v854 + *(void *)(a1 + 8) - *(void *)a1 + 8);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v858, &v858.__r_.__value_.__s.__data_[8], 8);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v298, &v298[4 * v858.__r_.__value_.__r.__words[0]], 4 * v858.__r_.__value_.__r.__words[0]);
            CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v849, (char **)a1, 1);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v856, v857, 4);
            goto LABEL_1353;
          case 3:
LABEL_184:
            v108 = *v42;
            uint64_t v107 = (std::__shared_weak_count *)v42[1];
            if (v107) {
              atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 10;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v809 = v107;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v108[2]);
            uint64_t v109 = (unsigned char *)v108[3];
            int v110 = (unsigned char *)v108[4];
            if (v110 != v109) {
              memmove(*(void **)&v838[24], v109, v110 - v109);
            }
            if (v107)
            {
              atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v111) = 0;
            }
            else {
              unint64_t v111 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v226 = v827;
            if (v827 == v828) {
              goto LABEL_453;
            }
            while (!v226[5])
            {
LABEL_447:
              v230 = v226[1];
              if (v230)
              {
                do
                {
                  v231 = (void **)v230;
                  v230 = (void *)*v230;
                }
                while (v230);
              }
              else
              {
                do
                {
                  v231 = (void **)v226[2];
                  BOOL v9 = *v231 == v226;
                  v226 = v231;
                }
                while (!v9);
              }
              v226 = v231;
              if (v231 == v828)
              {
LABEL_453:
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
                int v232 = 4;
                char v768 = v830;
                uint64_t v233 = 4;
                goto LABEL_714;
              }
            }
            if (v858.__r_.__value_.__l.__size_)
            {
              int v227 = *((_DWORD *)v226 + 8);
              std::string::size_type v228 = v858.__r_.__value_.__l.__size_;
              do
              {
                int v229 = *(_DWORD *)(v228 + 28);
                if (v227 >= v229)
                {
                  if (v229 >= v227) {
                    goto LABEL_447;
                  }
                  v228 += 8;
                }
                std::string::size_type v228 = *(void *)v228;
              }
              while (v228);
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            }
            unint64_t v836 = 0x200000001;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v234 = v827;
            if (v827 == v828)
            {
LABEL_469:
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              if ((_BYTE)v830) {
                char v240 = 3;
              }
              else {
                char v240 = 2;
              }
              char v768 = v240;
              uint64_t v233 = 4;
            }
            else
            {
              while (!v234[5])
              {
LABEL_463:
                v238 = v234[1];
                if (v238)
                {
                  do
                  {
                    v239 = (void **)v238;
                    v238 = (void *)*v238;
                  }
                  while (v238);
                }
                else
                {
                  do
                  {
                    v239 = (void **)v234[2];
                    BOOL v9 = *v239 == v234;
                    v234 = v239;
                  }
                  while (!v9);
                }
                v234 = v239;
                if (v239 == v828) {
                  goto LABEL_469;
                }
              }
              if (v858.__r_.__value_.__l.__size_)
              {
                int v235 = *((_DWORD *)v234 + 8);
                std::string::size_type v236 = v858.__r_.__value_.__l.__size_;
                do
                {
                  int v237 = *(_DWORD *)(v236 + 28);
                  if (v235 >= v237)
                  {
                    if (v237 >= v235) {
                      goto LABEL_463;
                    }
                    v236 += 8;
                  }
                  std::string::size_type v236 = *(void *)v236;
                }
                while (v236);
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              }
              uint64_t v233 = 6;
              char v768 = 4;
            }
            int v232 = v233;
LABEL_714:
            unint64_t v387 = v819 - 1;
            if ((uint64_t)v819 - 1 <= (unint64_t)v820) {
              unint64_t v387 = v820;
            }
            v792 = v108;
            if (v387) {
              int v388 = vcvtpd_u64_f64(log2((double)v387)) + 1;
            }
            else {
              LOBYTE(v38_Block_object_dispose(&a9, 8) = 0;
            }
            unsigned __int8 v778 = v111;
            char v389 = v111;
            unint64_t v390 = (v111 + (unint64_t)v388 + v233 + 7) >> 3;
            unsigned __int16 v391 = v390 + 4;
            if (*((void *)&v819 + 1)) {
              int v392 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
            }
            else {
              int v392 = 0;
            }
            char v393 = v388;
            unsigned __int8 v394 = __p[1];
            v395 = (char *)__p[1] - 1;
            if (__p[1] != (void *)1)
            {
              double v396 = log2((double)(unint64_t)v395);
              char v393 = v388;
              LODWORD(v395) = vcvtpd_u64_f64(v396) + 1;
            }
            *(_DWORD *)&v838[32] = 0;
            *(_WORD *)&v838[36] = v390 + 4;
            v838[38] = v778;
            v838[39] = v232;
            *(_WORD *)&v838[40] = v388;
            v838[42] = v392;
            *(_WORD *)&v838[43] = v395;
            v838[45] = v768;
            *(_DWORD *)&v838[46] = 0;
            *(void *)&v838[56] = v394;
            v858.__r_.__value_.__r.__words[0] = ~(-1 << v389);
            LODWORD(v858.__r_.__value_.__r.__words[1]) = v778 >> 3;
            HIDWORD(v858.__r_.__value_.__r.__words[1]) = v778 & 7;
            unsigned int v397 = ((-(char)v388 - ((_BYTE)v232 + v778)) & 7) + v232 + v778;
            LODWORD(v858.__r_.__value_.__r.__words[2]) = ~(-1 << v232);
            HIDWORD(v858.__r_.__value_.__r.__words[2]) = v397 >> 3;
            LODWORD(v859) = v397 & 7;
            uint64_t v860 = ~(-1 << v393);
            int v861 = v390;
            if (v392 - 25 >= 0x27) {
              int v398 = 0;
            }
            else {
              int v398 = -v392 & 7;
            }
            int v399 = v398 + v392;
            if (v395 - 25 >= 0x27) {
              int v400 = 0;
            }
            else {
              int v400 = -(int)v395 & 7;
            }
            *(_DWORD *)&v838[84] = v399;
            DWORD1(v844) = v400 + v395;
            DWORD1(v849) = 0;
            v313 = v792;
            v402 = (uint64_t *)v792[6];
            v401 = (uint64_t *)v792[7];
            if (v402 != v401)
            {
              uint64_t v403 = 0;
              do
              {
                uint64_t v404 = *v402;
                if (*(unsigned char *)*v402)
                {
                  uint64_t v405 = *(void *)(v404 + 80);
                  uint64_t v406 = *(void *)(v404 + 88);
                  if (v405 != v406)
                  {
                    uint64_t v407 = *(void *)&v838[24];
                    do
                    {
                      *(double *)(v407 + 8 * *(void *)v405) = *(double *)(v405 + 8)
                                                                + *(double *)(v407 + 8 * *(void *)v405);
                      v405 += 16;
                    }
                    while (v405 != v406);
                  }
                }
                else
                {
                  CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>((uint64_t)&__src, (uint64_t)&v838[32], (uint64_t)&v858, v403++, v402);
                }
                v402 += 2;
              }
              while (v402 != v401);
              unsigned __int16 v391 = *(_WORD *)&v838[36];
            }
            uint64_t v408 = v391;
            unint64_t v836 = *(void *)&v838[64] * v391;
            std::vector<int>::pointer v44 = v809;
            CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v408);
            ++*(void *)&v838[64];
            if (v809)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v809);
              std::__shared_weak_count::__release_shared[abi:ne180100](v809);
            }
            goto LABEL_742;
          default:
LABEL_144:
            std::string::size_type v83 = *v42;
            unint64_t v82 = (std::__shared_weak_count *)v42[1];
            if (v82) {
              atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 7;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v804 = v82;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v83[2]);
            uint64_t v84 = (unsigned char *)v83[3];
            std::string::size_type v85 = (unsigned char *)v83[4];
            if (v85 != v84) {
              memmove(*(void **)&v838[24], v84, v85 - v84);
            }
            if (v82)
            {
              atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v86) = 0;
            }
            else {
              unint64_t v86 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v166 = v827;
            if (v827 == v828) {
              goto LABEL_309;
            }
            break;
        }
        while (!v166[5])
        {
LABEL_303:
          uint64_t v170 = v166[1];
          if (v170)
          {
            do
            {
              v171 = (void **)v170;
              uint64_t v170 = (void *)*v170;
            }
            while (v170);
          }
          else
          {
            do
            {
              v171 = (void **)v166[2];
              BOOL v9 = *v171 == v166;
              v166 = v171;
            }
            while (!v9);
          }
          v166 = v171;
          if (v171 == v828)
          {
LABEL_309:
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            int v172 = 4;
            char v766 = v830;
            uint64_t v173 = 4;
            goto LABEL_584;
          }
        }
        if (v858.__r_.__value_.__l.__size_)
        {
          int v167 = *((_DWORD *)v166 + 8);
          std::string::size_type v168 = v858.__r_.__value_.__l.__size_;
          do
          {
            int v169 = *(_DWORD *)(v168 + 28);
            if (v167 >= v169)
            {
              if (v169 >= v167) {
                goto LABEL_303;
              }
              v168 += 8;
            }
            std::string::size_type v168 = *(void *)v168;
          }
          while (v168);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
        }
        unint64_t v836 = 0x200000001;
        std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
        v174 = v827;
        if (v827 == v828)
        {
LABEL_325:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
          if ((_BYTE)v830) {
            char v180 = 3;
          }
          else {
            char v180 = 2;
          }
          char v766 = v180;
          uint64_t v173 = 4;
        }
        else
        {
          while (!v174[5])
          {
LABEL_319:
            int8x16_t v178 = v174[1];
            if (v178)
            {
              do
              {
                long long v179 = (void **)v178;
                int8x16_t v178 = (void *)*v178;
              }
              while (v178);
            }
            else
            {
              do
              {
                long long v179 = (void **)v174[2];
                BOOL v9 = *v179 == v174;
                v174 = v179;
              }
              while (!v9);
            }
            v174 = v179;
            if (v179 == v828) {
              goto LABEL_325;
            }
          }
          if (v858.__r_.__value_.__l.__size_)
          {
            int v175 = *((_DWORD *)v174 + 8);
            std::string::size_type v176 = v858.__r_.__value_.__l.__size_;
            do
            {
              int v177 = *(_DWORD *)(v176 + 28);
              if (v175 >= v177)
              {
                if (v177 >= v175) {
                  goto LABEL_319;
                }
                v176 += 8;
              }
              std::string::size_type v176 = *(void *)v176;
            }
            while (v176);
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
          }
          uint64_t v173 = 6;
          char v766 = 4;
        }
        int v172 = v173;
LABEL_584:
        unint64_t v299 = v819 - 1;
        if ((uint64_t)v819 - 1 <= (unint64_t)v820) {
          unint64_t v299 = v820;
        }
        v790 = v83;
        if (v299) {
          int v300 = vcvtpd_u64_f64(log2((double)v299)) + 1;
        }
        else {
          LOBYTE(v300) = 0;
        }
        unsigned __int8 v776 = v86;
        char v301 = v86;
        unint64_t v302 = (v86 + (unint64_t)v300 + v173 + 7) >> 3;
        unsigned __int16 v303 = v302 + 4;
        if (*((void *)&v819 + 1)) {
          int v304 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
        }
        else {
          int v304 = 0;
        }
        char v305 = v300;
        unsigned __int8 v306 = __p[1];
        v307 = (char *)__p[1] - 1;
        if (__p[1] != (void *)1)
        {
          double v308 = log2((double)(unint64_t)v307);
          char v305 = v300;
          LODWORD(v307) = vcvtpd_u64_f64(v308) + 1;
        }
        *(_DWORD *)&v838[32] = 0;
        *(_WORD *)&v838[36] = v302 + 4;
        v838[38] = v776;
        v838[39] = v172;
        *(_WORD *)&v838[40] = v300;
        v838[42] = v304;
        *(_WORD *)&v838[43] = v307;
        v838[45] = v766;
        *(_DWORD *)&v838[46] = 0;
        *(void *)&v838[56] = v306;
        v858.__r_.__value_.__r.__words[0] = ~(-1 << v301);
        LODWORD(v858.__r_.__value_.__r.__words[1]) = v776 >> 3;
        HIDWORD(v858.__r_.__value_.__r.__words[1]) = v776 & 7;
        unsigned int v309 = ((-(char)v300 - ((_BYTE)v172 + v776)) & 7) + v172 + v776;
        LODWORD(v858.__r_.__value_.__r.__words[2]) = ~(-1 << v172);
        HIDWORD(v858.__r_.__value_.__r.__words[2]) = v309 >> 3;
        LODWORD(v859) = v309 & 7;
        uint64_t v860 = ~(-1 << v305);
        int v861 = v302;
        if (v304 - 25 >= 0x27) {
          int v310 = 0;
        }
        else {
          int v310 = -v304 & 7;
        }
        int v311 = v310 + v304;
        if (v307 - 25 >= 0x27) {
          int v312 = 0;
        }
        else {
          int v312 = -(int)v307 & 7;
        }
        *(_DWORD *)&v838[84] = v311;
        DWORD1(v844) = v312 + v307;
        DWORD1(v849) = 0;
        v313 = v790;
        v315 = (uint64_t *)v790[6];
        v314 = (uint64_t *)v790[7];
        if (v315 != v314)
        {
          uint64_t v316 = 0;
          do
          {
            uint64_t v317 = *v315;
            if (*(unsigned char *)*v315)
            {
              uint64_t v318 = *(void *)(v317 + 80);
              uint64_t v319 = *(void *)(v317 + 88);
              if (v318 != v319)
              {
                uint64_t v320 = *(void *)&v838[24];
                do
                {
                  *(double *)(v320 + 8 * *(void *)v31_Block_object_dispose(&a9, 8) = *(double *)(v318 + 8)
                                                            + *(double *)(v320 + 8 * *(void *)v318);
                  v318 += 16;
                }
                while (v318 != v319);
              }
            }
            else
            {
              CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
              CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>((uint64_t)&__src, (uint64_t)&v838[32], (uint64_t)&v858, v316++, v315);
            }
            v315 += 2;
          }
          while (v315 != v314);
          unsigned __int16 v303 = *(_WORD *)&v838[36];
        }
        uint64_t v321 = v303;
        unint64_t v836 = *(void *)&v838[64] * v303;
        std::vector<int>::pointer v44 = v804;
        CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v321);
        ++*(void *)&v838[64];
        if (v804)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v804);
          std::__shared_weak_count::__release_shared[abi:ne180100](v804);
        }
      }
      else
      {
        switch(v55)
        {
          case 1:
LABEL_160:
            uint64_t v93 = *v42;
            uint64_t v92 = (std::__shared_weak_count *)v42[1];
            if (v92) {
              atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 4;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v806 = v92;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v93[2]);
            uint64_t v94 = (unsigned char *)v93[3];
            uint64_t v95 = (unsigned char *)v93[4];
            if (v95 != v94) {
              memmove(*(void **)&v838[24], v94, v95 - v94);
            }
            if (v92)
            {
              atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v96) = 0;
            }
            else {
              unint64_t v96 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v181 = v827;
            v786 = v93;
            if (v827 == v828) {
              goto LABEL_345;
            }
            while (!v181[5])
            {
LABEL_339:
              v185 = v181[1];
              if (v185)
              {
                do
                {
                  long long v186 = (void **)v185;
                  v185 = (void *)*v185;
                }
                while (v185);
              }
              else
              {
                do
                {
                  long long v186 = (void **)v181[2];
                  BOOL v9 = *v186 == v181;
                  v181 = v186;
                }
                while (!v9);
              }
              v181 = v186;
              if (v186 == v828)
              {
LABEL_345:
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
                int v187 = 4;
                char v773 = v830;
                uint64_t v188 = 4;
                goto LABEL_615;
              }
            }
            if (v858.__r_.__value_.__l.__size_)
            {
              int v182 = *((_DWORD *)v181 + 8);
              std::string::size_type v183 = v858.__r_.__value_.__l.__size_;
              do
              {
                int v184 = *(_DWORD *)(v183 + 28);
                if (v182 >= v184)
                {
                  if (v184 >= v182) {
                    goto LABEL_339;
                  }
                  v183 += 8;
                }
                std::string::size_type v183 = *(void *)v183;
              }
              while (v183);
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            }
            unint64_t v836 = 0x200000001;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            long long v189 = v827;
            if (v827 == v828)
            {
LABEL_361:
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              if ((_BYTE)v830) {
                char v195 = 3;
              }
              else {
                char v195 = 2;
              }
              char v773 = v195;
              uint64_t v188 = 4;
            }
            else
            {
              while (!v189[5])
              {
LABEL_355:
                char v193 = v189[1];
                if (v193)
                {
                  do
                  {
                    v194 = (void **)v193;
                    char v193 = (void *)*v193;
                  }
                  while (v193);
                }
                else
                {
                  do
                  {
                    v194 = (void **)v189[2];
                    BOOL v9 = *v194 == v189;
                    long long v189 = v194;
                  }
                  while (!v9);
                }
                long long v189 = v194;
                if (v194 == v828) {
                  goto LABEL_361;
                }
              }
              if (v858.__r_.__value_.__l.__size_)
              {
                int v190 = *((_DWORD *)v189 + 8);
                std::string::size_type v191 = v858.__r_.__value_.__l.__size_;
                do
                {
                  int v192 = *(_DWORD *)(v191 + 28);
                  if (v190 >= v192)
                  {
                    if (v192 >= v190) {
                      goto LABEL_355;
                    }
                    v191 += 8;
                  }
                  std::string::size_type v191 = *(void *)v191;
                }
                while (v191);
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              }
              uint64_t v188 = 6;
              char v773 = 4;
            }
            int v187 = v188;
LABEL_615:
            unint64_t v322 = v819 - 1;
            if ((uint64_t)v819 - 1 <= (unint64_t)v820) {
              unint64_t v322 = v820;
            }
            if (v322) {
              int v323 = vcvtpd_u64_f64(log2((double)v322)) + 1;
            }
            else {
              LOBYTE(v323) = 0;
            }
            unint64_t v324 = (v96 + (unint64_t)v323 + v188 + 7) >> 3;
            unsigned __int16 v325 = v324 + 4;
            if (*((void *)&v819 + 1)) {
              int v326 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
            }
            else {
              int v326 = 0;
            }
            unsigned __int8 v327 = __p[1];
            v328 = (char *)__p[1] - 1;
            if (__p[1] != (void *)1) {
              LODWORD(v32_Block_object_dispose(&a9, 8) = vcvtpd_u64_f64(log2((double)(unint64_t)v328)) + 1;
            }
            *(_DWORD *)&v838[32] = 0;
            *(_WORD *)&v838[36] = v324 + 4;
            v838[38] = v96;
            v838[39] = v187;
            *(_WORD *)&v838[40] = v323;
            v838[42] = v326;
            *(_WORD *)&v838[43] = v328;
            v838[45] = v773;
            *(_DWORD *)&v838[46] = 0;
            *(void *)&v838[56] = v327;
            LODWORD(v858.__r_.__value_.__l.__data_) = ~(-1 << v96);
            HIDWORD(v858.__r_.__value_.__r.__words[0]) = v96 >> 3;
            LODWORD(v858.__r_.__value_.__r.__words[1]) = v96 & 7;
            HIDWORD(v858.__r_.__value_.__r.__words[1]) = ~(-1 << v187);
            unsigned int v329 = ((-(char)v323 - ((_BYTE)v187 + (_BYTE)v96)) & 7) + v187 + v96;
            LODWORD(v858.__r_.__value_.__r.__words[2]) = v329 >> 3;
            HIDWORD(v858.__r_.__value_.__r.__words[2]) = v329 & 7;
            LODWORD(v859) = ~(-1 << v323);
            HIDWORD(v859) = (v96 + (unint64_t)v323 + v188 + 7) >> 3;
            if (v326 - 25 >= 0x27) {
              int v330 = 0;
            }
            else {
              int v330 = -v326 & 7;
            }
            int v331 = v330 + v326;
            if (v328 - 25 >= 0x27) {
              int v332 = 0;
            }
            else {
              int v332 = -(int)v328 & 7;
            }
            *(_DWORD *)&v838[84] = v331;
            DWORD1(v844) = v332 + v328;
            DWORD1(v849) = 0;
            v313 = v786;
            v334 = (uint64_t *)v786[6];
            v333 = (uint64_t *)v786[7];
            if (v334 != v333)
            {
              unint64_t v335 = 0;
              do
              {
                uint64_t v336 = *v334;
                if (*(unsigned char *)*v334)
                {
                  uint64_t v337 = *(void *)(v336 + 80);
                  uint64_t v338 = *(void *)(v336 + 88);
                  if (v337 != v338)
                  {
                    uint64_t v339 = *(void *)&v838[24];
                    do
                    {
                      *(double *)(v339 + 8 * *(void *)v337) = *(double *)(v337 + 8)
                                                                + *(double *)(v339 + 8 * *(void *)v337);
                      v337 += 16;
                    }
                    while (v337 != v338);
                  }
                }
                else
                {
                  unint64_t v340 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v340);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v335);
                  unsigned int v341 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v335);
                  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>((uint64_t)&__src, (uint64_t)&v838[32], &v858, v341, v334);
                  ++v335;
                }
                v334 += 2;
              }
              while (v334 != v333);
              unsigned __int16 v325 = *(_WORD *)&v838[36];
            }
            uint64_t v342 = v325;
            unint64_t v836 = *(void *)&v838[64] * v325;
            std::vector<int>::pointer v44 = v806;
            CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v342);
            ++*(void *)&v838[64];
            if (v806)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v806);
              std::__shared_weak_count::__release_shared[abi:ne180100](v806);
            }
            goto LABEL_742;
          case 2:
LABEL_168:
            unint64_t v98 = *v42;
            uint64_t v97 = (std::__shared_weak_count *)v42[1];
            if (v97) {
              atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 5;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v807 = v97;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v98[2]);
            long long v99 = (unsigned char *)v98[3];
            long long v100 = (unsigned char *)v98[4];
            if (v100 != v99) {
              memmove(*(void **)&v838[24], v99, v100 - v99);
            }
            if (v97)
            {
              atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v101) = 0;
            }
            else {
              unint64_t v101 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            long long v196 = v827;
            v787 = v98;
            if (v827 == v828) {
              goto LABEL_381;
            }
            while (!v196[5])
            {
LABEL_375:
              v200 = v196[1];
              if (v200)
              {
                do
                {
                  uint64_t v201 = (void **)v200;
                  v200 = (void *)*v200;
                }
                while (v200);
              }
              else
              {
                do
                {
                  uint64_t v201 = (void **)v196[2];
                  BOOL v9 = *v201 == v196;
                  long long v196 = v201;
                }
                while (!v9);
              }
              long long v196 = v201;
              if (v201 == v828)
              {
LABEL_381:
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
                int v202 = 4;
                char v761 = v830;
                uint64_t v203 = 4;
                goto LABEL_646;
              }
            }
            if (v858.__r_.__value_.__l.__size_)
            {
              int v197 = *((_DWORD *)v196 + 8);
              std::string::size_type v198 = v858.__r_.__value_.__l.__size_;
              do
              {
                int v199 = *(_DWORD *)(v198 + 28);
                if (v197 >= v199)
                {
                  if (v199 >= v197) {
                    goto LABEL_375;
                  }
                  v198 += 8;
                }
                std::string::size_type v198 = *(void *)v198;
              }
              while (v198);
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            }
            unint64_t v836 = 0x200000001;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v204 = v827;
            if (v827 == v828)
            {
LABEL_397:
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              if ((_BYTE)v830) {
                char v210 = 3;
              }
              else {
                char v210 = 2;
              }
              char v761 = v210;
              uint64_t v203 = 4;
            }
            else
            {
              while (!v204[5])
              {
LABEL_391:
                v208 = v204[1];
                if (v208)
                {
                  do
                  {
                    v209 = (void **)v208;
                    v208 = (void *)*v208;
                  }
                  while (v208);
                }
                else
                {
                  do
                  {
                    v209 = (void **)v204[2];
                    BOOL v9 = *v209 == v204;
                    v204 = v209;
                  }
                  while (!v9);
                }
                v204 = v209;
                if (v209 == v828) {
                  goto LABEL_397;
                }
              }
              if (v858.__r_.__value_.__l.__size_)
              {
                int v205 = *((_DWORD *)v204 + 8);
                std::string::size_type v206 = v858.__r_.__value_.__l.__size_;
                do
                {
                  int v207 = *(_DWORD *)(v206 + 28);
                  if (v205 >= v207)
                  {
                    if (v207 >= v205) {
                      goto LABEL_391;
                    }
                    v206 += 8;
                  }
                  std::string::size_type v206 = *(void *)v206;
                }
                while (v206);
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              }
              uint64_t v203 = 6;
              char v761 = 4;
            }
            int v202 = v203;
LABEL_646:
            unint64_t v343 = (unint64_t)__p[1];
            uint64_t v344 = v819 - 1;
            if ((unint64_t)(v819 - 1) <= (uint64_t)__p[1] * (uint64_t)v820) {
              uint64_t v344 = (uint64_t)__p[1] * v820;
            }
            if (v344) {
              int v345 = vcvtpd_u64_f64(log2((double)(unint64_t)v344)) + 1;
            }
            else {
              LOBYTE(v345) = 0;
            }
            unint64_t v346 = (v101 + (unint64_t)v345 + v203 + 7) >> 3;
            if (*((void *)&v819 + 1)) {
              int v347 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
            }
            else {
              int v347 = 0;
            }
            unsigned __int16 v348 = v346 + 4;
            if (v343 == 1) {
              int v349 = 1;
            }
            else {
              int v349 = vcvtpd_u64_f64(log2((double)(v343 - 1))) + 2;
            }
            unint64_t v350 = *((void *)&v820 + 1) * v343;
            if (*((void *)&v820 + 1) * v343) {
              LODWORD(v350) = vcvtpd_u64_f64(log2((double)v350)) + 1;
            }
            *(_DWORD *)&v838[32] = 0;
            *(_WORD *)&v838[36] = v346 + 4;
            v838[38] = v101;
            v838[39] = v202;
            *(_WORD *)&v838[40] = v345;
            v838[42] = v347;
            v838[43] = v349;
            v838[44] = v350;
            v838[45] = v761;
            *(_DWORD *)&v838[46] = 0;
            *(void *)&v838[56] = v343;
            LODWORD(v858.__r_.__value_.__l.__data_) = ~(-1 << v101);
            HIDWORD(v858.__r_.__value_.__r.__words[0]) = v101 >> 3;
            LODWORD(v858.__r_.__value_.__r.__words[1]) = v101 & 7;
            HIDWORD(v858.__r_.__value_.__r.__words[1]) = ~(-1 << v202);
            unsigned int v351 = ((-(char)v345 - ((_BYTE)v202 + (_BYTE)v101)) & 7) + v202 + v101;
            LODWORD(v858.__r_.__value_.__r.__words[2]) = v351 >> 3;
            HIDWORD(v858.__r_.__value_.__r.__words[2]) = v351 & 7;
            LODWORD(v859) = ~(-1 << v345);
            HIDWORD(v859) = v346;
            if (v347 - 25 >= 0x27) {
              int v352 = 0;
            }
            else {
              int v352 = -v347 & 7;
            }
            int v353 = v352 + v347;
            if (v349 - 25 >= 0x27) {
              int v354 = 0;
            }
            else {
              int v354 = -v349 & 7;
            }
            *(_DWORD *)&v838[84] = v353;
            DWORD1(v844) = v354 + v349;
            if (v350 - 25 >= 0x27) {
              int v355 = 0;
            }
            else {
              int v355 = -(int)v350 & 7;
            }
            DWORD1(v849) = v355 + v350;
            v357 = (uint64_t *)v787[6];
            v356 = (uint64_t *)v787[7];
            std::vector<int>::pointer v44 = v807;
            if (v357 != v356)
            {
              unint64_t v358 = 0;
              do
              {
                uint64_t v359 = *v357;
                if (*(unsigned char *)*v357)
                {
                  uint64_t v360 = *(void *)(v359 + 80);
                  uint64_t v361 = *(void *)(v359 + 88);
                  if (v360 != v361)
                  {
                    uint64_t v362 = *(void *)&v838[24];
                    do
                    {
                      *(double *)(v362 + 8 * *(void *)v360) = *(double *)(v360 + 8)
                                                                + *(double *)(v362 + 8 * *(void *)v360);
                      v360 += 16;
                    }
                    while (v360 != v361);
                  }
                }
                else
                {
                  unint64_t v363 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v363);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v358);
                  CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v849, v854);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v854);
                  unsigned int v364 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v358);
                  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>((uint64_t)&__src, (uint64_t)&v838[32], &v858, v364, v357);
                  ++v358;
                }
                v357 += 2;
              }
              while (v357 != v356);
              unsigned __int16 v348 = *(_WORD *)&v838[36];
            }
            unint64_t v836 = *(void *)&v838[64] * v348;
            CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v348);
            ++*(void *)&v838[64];
            if (v807)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v807);
              std::__shared_weak_count::__release_shared[abi:ne180100](v807);
            }
            goto LABEL_581;
          case 3:
LABEL_192:
            uint64_t v113 = *v42;
            id v112 = (std::__shared_weak_count *)v42[1];
            if (v112) {
              atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 6;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v810 = v112;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v113[2]);
            int v114 = (unsigned char *)v113[3];
            v115 = (unsigned char *)v113[4];
            if (v115 != v114) {
              memmove(*(void **)&v838[24], v114, v115 - v114);
            }
            if (v112)
            {
              atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v116) = 0;
            }
            else {
              unint64_t v116 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v241 = v827;
            v788 = v113;
            if (v827 == v828) {
              goto LABEL_489;
            }
            while (!v241[5])
            {
LABEL_483:
              v245 = v241[1];
              if (v245)
              {
                do
                {
                  v246 = (void **)v245;
                  v245 = (void *)*v245;
                }
                while (v245);
              }
              else
              {
                do
                {
                  v246 = (void **)v241[2];
                  BOOL v9 = *v246 == v241;
                  v241 = v246;
                }
                while (!v9);
              }
              v241 = v246;
              if (v246 == v828)
              {
LABEL_489:
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
                int v247 = 4;
                char v774 = v830;
                uint64_t v248 = 4;
                goto LABEL_745;
              }
            }
            if (v858.__r_.__value_.__l.__size_)
            {
              int v242 = *((_DWORD *)v241 + 8);
              std::string::size_type v243 = v858.__r_.__value_.__l.__size_;
              do
              {
                int v244 = *(_DWORD *)(v243 + 28);
                if (v242 >= v244)
                {
                  if (v244 >= v242) {
                    goto LABEL_483;
                  }
                  v243 += 8;
                }
                std::string::size_type v243 = *(void *)v243;
              }
              while (v243);
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            }
            unint64_t v836 = 0x200000001;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v249 = v827;
            if (v827 == v828)
            {
LABEL_505:
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              if ((_BYTE)v830) {
                char v255 = 3;
              }
              else {
                char v255 = 2;
              }
              char v774 = v255;
              uint64_t v248 = 4;
            }
            else
            {
              while (!v249[5])
              {
LABEL_499:
                v253 = v249[1];
                if (v253)
                {
                  do
                  {
                    v254 = (void **)v253;
                    v253 = (void *)*v253;
                  }
                  while (v253);
                }
                else
                {
                  do
                  {
                    v254 = (void **)v249[2];
                    BOOL v9 = *v254 == v249;
                    v249 = v254;
                  }
                  while (!v9);
                }
                v249 = v254;
                if (v254 == v828) {
                  goto LABEL_505;
                }
              }
              if (v858.__r_.__value_.__l.__size_)
              {
                int v250 = *((_DWORD *)v249 + 8);
                std::string::size_type v251 = v858.__r_.__value_.__l.__size_;
                do
                {
                  int v252 = *(_DWORD *)(v251 + 28);
                  if (v250 >= v252)
                  {
                    if (v252 >= v250) {
                      goto LABEL_499;
                    }
                    v251 += 8;
                  }
                  std::string::size_type v251 = *(void *)v251;
                }
                while (v251);
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              }
              uint64_t v248 = 6;
              char v774 = 4;
            }
            int v247 = v248;
LABEL_745:
            unint64_t v412 = v819 - 1;
            if ((uint64_t)v819 - 1 <= (unint64_t)v820) {
              unint64_t v412 = v820;
            }
            if (v412) {
              int v413 = vcvtpd_u64_f64(log2((double)v412)) + 1;
            }
            else {
              LOBYTE(v413) = 0;
            }
            unint64_t v414 = (v116 + (unint64_t)v413 + v248 + 7) >> 3;
            unsigned __int16 v415 = v414 + 4;
            if (*((void *)&v819 + 1)) {
              int v416 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
            }
            else {
              int v416 = 0;
            }
            unsigned __int8 v417 = __p[1];
            v418 = (char *)__p[1] - 1;
            if (__p[1] != (void *)1) {
              LODWORD(v41_Block_object_dispose(&a9, 8) = vcvtpd_u64_f64(log2((double)(unint64_t)v418)) + 1;
            }
            *(_DWORD *)&v838[32] = 0;
            *(_WORD *)&v838[36] = v414 + 4;
            v838[38] = v116;
            v838[39] = v247;
            *(_WORD *)&v838[40] = v413;
            v838[42] = v416;
            *(_WORD *)&v838[43] = v418;
            v838[45] = v774;
            *(_DWORD *)&v838[46] = 0;
            *(void *)&v838[56] = v417;
            LODWORD(v858.__r_.__value_.__l.__data_) = ~(-1 << v116);
            HIDWORD(v858.__r_.__value_.__r.__words[0]) = v116 >> 3;
            LODWORD(v858.__r_.__value_.__r.__words[1]) = v116 & 7;
            HIDWORD(v858.__r_.__value_.__r.__words[1]) = ~(-1 << v247);
            unsigned int v419 = ((-(char)v413 - ((_BYTE)v247 + (_BYTE)v116)) & 7) + v247 + v116;
            LODWORD(v858.__r_.__value_.__r.__words[2]) = v419 >> 3;
            HIDWORD(v858.__r_.__value_.__r.__words[2]) = v419 & 7;
            LODWORD(v859) = ~(-1 << v413);
            HIDWORD(v859) = (v116 + (unint64_t)v413 + v248 + 7) >> 3;
            if (v416 - 25 >= 0x27) {
              int v420 = 0;
            }
            else {
              int v420 = -v416 & 7;
            }
            int v421 = v420 + v416;
            if (v418 - 25 >= 0x27) {
              int v422 = 0;
            }
            else {
              int v422 = -(int)v418 & 7;
            }
            *(_DWORD *)&v838[84] = v421;
            DWORD1(v844) = v422 + v418;
            DWORD1(v849) = 0;
            v313 = v788;
            v424 = (uint64_t *)v788[6];
            v423 = (uint64_t *)v788[7];
            if (v424 != v423)
            {
              unint64_t v425 = 0;
              do
              {
                uint64_t v426 = *v424;
                if (*(unsigned char *)*v424)
                {
                  uint64_t v427 = *(void *)(v426 + 80);
                  uint64_t v428 = *(void *)(v426 + 88);
                  if (v427 != v428)
                  {
                    uint64_t v429 = *(void *)&v838[24];
                    do
                    {
                      *(double *)(v429 + 8 * *(void *)v427) = *(double *)(v427 + 8)
                                                                + *(double *)(v429 + 8 * *(void *)v427);
                      v427 += 16;
                    }
                    while (v427 != v428);
                  }
                }
                else
                {
                  unint64_t v430 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v430);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v425);
                  unsigned int v431 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v425);
                  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>((uint64_t)&__src, (uint64_t)&v838[32], &v858, v431, v424);
                  ++v425;
                }
                v424 += 2;
              }
              while (v424 != v423);
              unsigned __int16 v415 = *(_WORD *)&v838[36];
            }
            uint64_t v432 = v415;
            unint64_t v836 = *(void *)&v838[64] * v415;
            std::vector<int>::pointer v44 = v810;
            CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v432);
            ++*(void *)&v838[64];
            if (v810)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v810);
              std::__shared_weak_count::__release_shared[abi:ne180100](v810);
            }
            goto LABEL_742;
          default:
LABEL_125:
            int8x8_t v73 = *v42;
            unsigned int v72 = (std::__shared_weak_count *)v42[1];
            if (v72) {
              atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 3;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v802 = v72;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v73[2]);
            uint64_t v74 = (unsigned char *)v73[3];
            int v75 = (unsigned char *)v73[4];
            if (v75 != v74) {
              memmove(*(void **)&v838[24], v74, v75 - v74);
            }
            if (v72)
            {
              atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v76) = 0;
            }
            else {
              unint64_t v76 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v256 = v827;
            v789 = v73;
            if (v827 == v828) {
              goto LABEL_525;
            }
            break;
        }
        while (!v256[5])
        {
LABEL_519:
          v260 = v256[1];
          if (v260)
          {
            do
            {
              v261 = (void **)v260;
              v260 = (void *)*v260;
            }
            while (v260);
          }
          else
          {
            do
            {
              v261 = (void **)v256[2];
              BOOL v9 = *v261 == v256;
              v256 = v261;
            }
            while (!v9);
          }
          v256 = v261;
          if (v261 == v828)
          {
LABEL_525:
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            int v262 = 4;
            char v775 = v830;
            uint64_t v263 = 4;
            goto LABEL_776;
          }
        }
        if (v858.__r_.__value_.__l.__size_)
        {
          int v257 = *((_DWORD *)v256 + 8);
          std::string::size_type v258 = v858.__r_.__value_.__l.__size_;
          do
          {
            int v259 = *(_DWORD *)(v258 + 28);
            if (v257 >= v259)
            {
              if (v259 >= v257) {
                goto LABEL_519;
              }
              v258 += 8;
            }
            std::string::size_type v258 = *(void *)v258;
          }
          while (v258);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
        }
        unint64_t v836 = 0x200000001;
        std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
        v264 = v827;
        if (v827 == v828)
        {
LABEL_541:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
          if ((_BYTE)v830) {
            char v270 = 3;
          }
          else {
            char v270 = 2;
          }
          char v775 = v270;
          uint64_t v263 = 4;
        }
        else
        {
          while (!v264[5])
          {
LABEL_535:
            v268 = v264[1];
            if (v268)
            {
              do
              {
                v269 = (void **)v268;
                v268 = (void *)*v268;
              }
              while (v268);
            }
            else
            {
              do
              {
                v269 = (void **)v264[2];
                BOOL v9 = *v269 == v264;
                v264 = v269;
              }
              while (!v9);
            }
            v264 = v269;
            if (v269 == v828) {
              goto LABEL_541;
            }
          }
          if (v858.__r_.__value_.__l.__size_)
          {
            int v265 = *((_DWORD *)v264 + 8);
            std::string::size_type v266 = v858.__r_.__value_.__l.__size_;
            do
            {
              int v267 = *(_DWORD *)(v266 + 28);
              if (v265 >= v267)
              {
                if (v267 >= v265) {
                  goto LABEL_535;
                }
                v266 += 8;
              }
              std::string::size_type v266 = *(void *)v266;
            }
            while (v266);
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
          }
          uint64_t v263 = 6;
          char v775 = 4;
        }
        int v262 = v263;
LABEL_776:
        unint64_t v433 = v819 - 1;
        if ((uint64_t)v819 - 1 <= (unint64_t)v820) {
          unint64_t v433 = v820;
        }
        if (v433) {
          int v434 = vcvtpd_u64_f64(log2((double)v433)) + 1;
        }
        else {
          LOBYTE(v434) = 0;
        }
        unint64_t v435 = (v76 + (unint64_t)v434 + v263 + 7) >> 3;
        unsigned __int16 v436 = v435 + 4;
        if (*((void *)&v819 + 1)) {
          int v437 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
        }
        else {
          int v437 = 0;
        }
        unsigned __int8 v438 = __p[1];
        v439 = (char *)__p[1] - 1;
        if (__p[1] != (void *)1) {
          LODWORD(v439) = vcvtpd_u64_f64(log2((double)(unint64_t)v439)) + 1;
        }
        *(_DWORD *)&v838[32] = 0;
        *(_WORD *)&v838[36] = v435 + 4;
        v838[38] = v76;
        v838[39] = v262;
        *(_WORD *)&v838[40] = v434;
        v838[42] = v437;
        *(_WORD *)&v838[43] = v439;
        v838[45] = v775;
        *(_DWORD *)&v838[46] = 0;
        *(void *)&v838[56] = v438;
        LODWORD(v858.__r_.__value_.__l.__data_) = ~(-1 << v76);
        HIDWORD(v858.__r_.__value_.__r.__words[0]) = v76 >> 3;
        LODWORD(v858.__r_.__value_.__r.__words[1]) = v76 & 7;
        HIDWORD(v858.__r_.__value_.__r.__words[1]) = ~(-1 << v262);
        unsigned int v440 = ((-(char)v434 - ((_BYTE)v262 + (_BYTE)v76)) & 7) + v262 + v76;
        LODWORD(v858.__r_.__value_.__r.__words[2]) = v440 >> 3;
        HIDWORD(v858.__r_.__value_.__r.__words[2]) = v440 & 7;
        LODWORD(v859) = ~(-1 << v434);
        HIDWORD(v859) = (v76 + (unint64_t)v434 + v263 + 7) >> 3;
        if (v437 - 25 >= 0x27) {
          int v441 = 0;
        }
        else {
          int v441 = -v437 & 7;
        }
        int v442 = v441 + v437;
        if (v439 - 25 >= 0x27) {
          int v443 = 0;
        }
        else {
          int v443 = -(int)v439 & 7;
        }
        *(_DWORD *)&v838[84] = v442;
        DWORD1(v844) = v443 + v439;
        DWORD1(v849) = 0;
        v313 = v789;
        v445 = (uint64_t *)v789[6];
        v444 = (uint64_t *)v789[7];
        if (v445 != v444)
        {
          unint64_t v446 = 0;
          do
          {
            uint64_t v447 = *v445;
            if (*(unsigned char *)*v445)
            {
              uint64_t v448 = *(void *)(v447 + 80);
              uint64_t v449 = *(void *)(v447 + 88);
              if (v448 != v449)
              {
                uint64_t v450 = *(void *)&v838[24];
                do
                {
                  *(double *)(v450 + 8 * *(void *)v44_Block_object_dispose(&a9, 8) = *(double *)(v448 + 8)
                                                            + *(double *)(v450 + 8 * *(void *)v448);
                  v448 += 16;
                }
                while (v448 != v449);
              }
            }
            else
            {
              unint64_t v451 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
              CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v451);
              CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v838[64]);
              CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v446);
              unsigned int v452 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v446);
              CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>((uint64_t)&__src, (uint64_t)&v838[32], &v858, v452, v445);
              ++v446;
            }
            v445 += 2;
          }
          while (v445 != v444);
          unsigned __int16 v436 = *(_WORD *)&v838[36];
        }
        uint64_t v453 = v436;
        unint64_t v836 = *(void *)&v838[64] * v436;
        std::vector<int>::pointer v44 = v802;
        CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v453);
        ++*(void *)&v838[64];
        if (v802)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v802);
          std::__shared_weak_count::__release_shared[abi:ne180100](v802);
        }
      }
LABEL_742:
      int v856 = *((_DWORD *)v313 + 32);
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, 0, v838, &v838[16], 16);
      v409 = *(char **)&v838[24];
      v858.__r_.__value_.__r.__words[0] = *(void *)&v838[16];
      std::vector<unsigned char>::reserve((unint64_t *)a1, *(void *)&v838[16] + *(void *)(a1 + 8) - *(void *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v858, &v858.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v409, &v409[8 * v858.__r_.__value_.__r.__words[0]], 8 * v858.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), &v838[32], &v838[64], 32);
      v410 = *(char **)&v838[72];
      v858.__r_.__value_.__r.__words[0] = *(void *)&v838[64] * *(unsigned __int16 *)&v838[36];
      std::vector<unsigned char>::reserve((unint64_t *)a1, v858.__r_.__value_.__r.__words[0] + *(void *)(a1 + 8) - *(void *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v858, &v858.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v410, &v410[v858.__r_.__value_.__r.__words[0]], (int64_t)v858.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v838[80], (char **)a1, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v844, (char **)a1, 1);
      v411 = v855;
      v858.__r_.__value_.__r.__words[0] = v854;
      std::vector<unsigned char>::reserve((unint64_t *)a1, v854 + *(void *)(a1 + 8) - *(void *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v858, &v858.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v411, &v411[4 * v858.__r_.__value_.__r.__words[0]], 4 * v858.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v849, (char **)a1, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v856, v857, 4);
    }
    else
    {
      if (v71)
      {
        switch(v55)
        {
          case 1:
LABEL_241:
            v143 = *v42;
            v142 = (std::__shared_weak_count *)v42[1];
            if (v142) {
              atomic_fetch_add_explicit(&v142->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 16;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v816 = v142;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v143[2]);
            v144 = (unsigned char *)v143[3];
            long long v145 = (unsigned char *)v143[4];
            if (v145 != v144) {
              memmove(*(void **)&v838[24], v144, v145 - v144);
            }
            if (v142)
            {
              atomic_fetch_add_explicit(&v142->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v142->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v146) = 0;
            }
            else {
              unint64_t v146 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v514 = v827;
            if (v827 == v828) {
              goto LABEL_965;
            }
            while (!v514[5])
            {
LABEL_959:
              v518 = v514[1];
              if (v518)
              {
                do
                {
                  v519 = (void **)v518;
                  v518 = (void *)*v518;
                }
                while (v518);
              }
              else
              {
                do
                {
                  v519 = (void **)v514[2];
                  BOOL v9 = *v519 == v514;
                  v514 = v519;
                }
                while (!v9);
              }
              v514 = v519;
              if (v519 == v828)
              {
LABEL_965:
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
                int v520 = 4;
                char v770 = v830;
                uint64_t v521 = 4;
                goto LABEL_1225;
              }
            }
            if (v858.__r_.__value_.__l.__size_)
            {
              int v515 = *((_DWORD *)v514 + 8);
              std::string::size_type v516 = v858.__r_.__value_.__l.__size_;
              do
              {
                int v517 = *(_DWORD *)(v516 + 28);
                if (v515 >= v517)
                {
                  if (v517 >= v515) {
                    goto LABEL_959;
                  }
                  v516 += 8;
                }
                std::string::size_type v516 = *(void *)v516;
              }
              while (v516);
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            }
            unint64_t v836 = 0x200000001;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v522 = v827;
            if (v827 == v828)
            {
LABEL_981:
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              if ((_BYTE)v830) {
                char v528 = 3;
              }
              else {
                char v528 = 2;
              }
              char v770 = v528;
              uint64_t v521 = 4;
            }
            else
            {
              while (!v522[5])
              {
LABEL_975:
                v526 = v522[1];
                if (v526)
                {
                  do
                  {
                    v527 = (void **)v526;
                    v526 = (void *)*v526;
                  }
                  while (v526);
                }
                else
                {
                  do
                  {
                    v527 = (void **)v522[2];
                    BOOL v9 = *v527 == v522;
                    v522 = v527;
                  }
                  while (!v9);
                }
                v522 = v527;
                if (v527 == v828) {
                  goto LABEL_981;
                }
              }
              if (v858.__r_.__value_.__l.__size_)
              {
                int v523 = *((_DWORD *)v522 + 8);
                std::string::size_type v524 = v858.__r_.__value_.__l.__size_;
                do
                {
                  int v525 = *(_DWORD *)(v524 + 28);
                  if (v523 >= v525)
                  {
                    if (v525 >= v523) {
                      goto LABEL_975;
                    }
                    v524 += 8;
                  }
                  std::string::size_type v524 = *(void *)v524;
                }
                while (v524);
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              }
              uint64_t v521 = 6;
              char v770 = 4;
            }
            int v520 = v521;
LABEL_1225:
            unint64_t v660 = v819 - 1;
            if ((uint64_t)v819 - 1 <= (unint64_t)v820) {
              unint64_t v660 = v820;
            }
            v798 = v143;
            if (v660) {
              int v661 = vcvtpd_u64_f64(log2((double)v660)) + 1;
            }
            else {
              LOBYTE(v661) = 0;
            }
            unsigned __int8 v783 = v146;
            char v662 = v146;
            unint64_t v663 = (v146 + (unint64_t)v661 + v521 + 7) >> 3;
            unsigned __int16 v664 = v663 + 8;
            if (*((void *)&v819 + 1)) {
              int v665 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
            }
            else {
              int v665 = 0;
            }
            char v666 = v661;
            unsigned __int8 v667 = __p[1];
            v668 = (char *)__p[1] - 1;
            if (__p[1] != (void *)1)
            {
              double v669 = log2((double)(unint64_t)v668);
              char v666 = v661;
              LODWORD(v66_Block_object_dispose(&a9, 8) = vcvtpd_u64_f64(v669) + 1;
            }
            *(_DWORD *)&v838[32] = 0;
            *(_WORD *)&v838[36] = v663 + 8;
            v838[38] = v783;
            v838[39] = v520;
            *(_WORD *)&v838[40] = v661;
            v838[42] = v665;
            *(_WORD *)&v838[43] = v668;
            v838[45] = v770;
            *(_DWORD *)&v838[46] = 0;
            *(void *)&v838[56] = v667;
            v858.__r_.__value_.__r.__words[0] = ~(-1 << v662);
            LODWORD(v858.__r_.__value_.__r.__words[1]) = v783 >> 3;
            HIDWORD(v858.__r_.__value_.__r.__words[1]) = v783 & 7;
            unsigned int v670 = ((-(char)v661 - ((_BYTE)v520 + v783)) & 7) + v520 + v783;
            LODWORD(v858.__r_.__value_.__r.__words[2]) = ~(-1 << v520);
            HIDWORD(v858.__r_.__value_.__r.__words[2]) = v670 >> 3;
            LODWORD(v859) = v670 & 7;
            uint64_t v860 = ~(-1 << v666);
            int v861 = v663;
            if (v665 - 25 >= 0x27) {
              int v671 = 0;
            }
            else {
              int v671 = -v665 & 7;
            }
            int v672 = v671 + v665;
            if (v668 - 25 >= 0x27) {
              int v673 = 0;
            }
            else {
              int v673 = -(int)v668 & 7;
            }
            *(_DWORD *)&v838[84] = v672;
            DWORD1(v844) = v673 + v668;
            DWORD1(v849) = 0;
            v609 = v798;
            v675 = (uint64_t *)v798[6];
            v674 = (uint64_t *)v798[7];
            if (v675 != v674)
            {
              uint64_t v676 = 0;
              do
              {
                uint64_t v677 = *v675;
                if (*(unsigned char *)*v675)
                {
                  uint64_t v678 = *(void *)(v677 + 80);
                  uint64_t v679 = *(void *)(v677 + 88);
                  if (v678 != v679)
                  {
                    uint64_t v680 = *(void *)&v838[24];
                    do
                    {
                      *(double *)(v680 + 8 * *(void *)v67_Block_object_dispose(&a9, 8) = *(double *)(v678 + 8)
                                                                + *(double *)(v680 + 8 * *(void *)v678);
                      v678 += 16;
                    }
                    while (v678 != v679);
                  }
                }
                else
                {
                  CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>((uint64_t)&__src, (uint64_t)&v838[32], (uint64_t)&v858, v676++, v675);
                }
                v675 += 2;
              }
              while (v675 != v674);
              unsigned __int16 v664 = *(_WORD *)&v838[36];
            }
            uint64_t v681 = v664;
            unint64_t v836 = *(void *)&v838[64] * v664;
            std::vector<int>::pointer v44 = v816;
            CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v681);
            ++*(void *)&v838[64];
            if (v816)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v816);
              std::__shared_weak_count::__release_shared[abi:ne180100](v816);
            }
            goto LABEL_1352;
          case 2:
LABEL_249:
            v148 = *v42;
            v147 = (std::__shared_weak_count *)v42[1];
            if (v147) {
              atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 17;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v817 = v147;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v148[2]);
            v149 = (unsigned char *)v148[3];
            v150 = (unsigned char *)v148[4];
            if (v150 != v149) {
              memmove(*(void **)&v838[24], v149, v150 - v149);
            }
            if (v147)
            {
              atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v151) = 0;
            }
            else {
              unint64_t v151 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v544 = v827;
            if (v827 == v828) {
              goto LABEL_1037;
            }
            while (!v544[5])
            {
LABEL_1031:
              v548 = v544[1];
              if (v548)
              {
                do
                {
                  v549 = (void **)v548;
                  v548 = (void *)*v548;
                }
                while (v548);
              }
              else
              {
                do
                {
                  v549 = (void **)v544[2];
                  BOOL v9 = *v549 == v544;
                  v544 = v549;
                }
                while (!v9);
              }
              v544 = v549;
              if (v549 == v828)
              {
LABEL_1037:
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
                int v771 = 4;
                char v764 = v830;
                uint64_t v550 = 4;
                goto LABEL_1287;
              }
            }
            if (v858.__r_.__value_.__l.__size_)
            {
              int v545 = *((_DWORD *)v544 + 8);
              std::string::size_type v546 = v858.__r_.__value_.__l.__size_;
              do
              {
                int v547 = *(_DWORD *)(v546 + 28);
                if (v545 >= v547)
                {
                  if (v547 >= v545) {
                    goto LABEL_1031;
                  }
                  v546 += 8;
                }
                std::string::size_type v546 = *(void *)v546;
              }
              while (v546);
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            }
            unint64_t v836 = 0x200000001;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v551 = v827;
            if (v827 == v828)
            {
LABEL_1053:
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              if ((_BYTE)v830) {
                char v557 = 3;
              }
              else {
                char v557 = 2;
              }
              char v764 = v557;
              uint64_t v550 = 4;
            }
            else
            {
              while (!v551[5])
              {
LABEL_1047:
                v555 = v551[1];
                if (v555)
                {
                  do
                  {
                    v556 = (void **)v555;
                    v555 = (void *)*v555;
                  }
                  while (v555);
                }
                else
                {
                  do
                  {
                    v556 = (void **)v551[2];
                    BOOL v9 = *v556 == v551;
                    v551 = v556;
                  }
                  while (!v9);
                }
                v551 = v556;
                if (v556 == v828) {
                  goto LABEL_1053;
                }
              }
              if (v858.__r_.__value_.__l.__size_)
              {
                int v552 = *((_DWORD *)v551 + 8);
                std::string::size_type v553 = v858.__r_.__value_.__l.__size_;
                do
                {
                  int v554 = *(_DWORD *)(v553 + 28);
                  if (v552 >= v554)
                  {
                    if (v554 >= v552) {
                      goto LABEL_1047;
                    }
                    v553 += 8;
                  }
                  std::string::size_type v553 = *(void *)v553;
                }
                while (v553);
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              }
              uint64_t v550 = 6;
              char v764 = 4;
            }
            int v771 = v550;
LABEL_1287:
            unint64_t v703 = (unint64_t)__p[1];
            uint64_t v704 = v819 - 1;
            if ((unint64_t)(v819 - 1) <= (uint64_t)__p[1] * (uint64_t)v820) {
              uint64_t v704 = (uint64_t)__p[1] * v820;
            }
            if (v704) {
              int v705 = vcvtpd_u64_f64(log2((double)(unint64_t)v704)) + 1;
            }
            else {
              LOBYTE(v705) = 0;
            }
            char v706 = v151;
            unint64_t v707 = (v151 + (unint64_t)v705 + v550 + 7) >> 3;
            if (*((void *)&v819 + 1)) {
              int v708 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
            }
            else {
              int v708 = 0;
            }
            unsigned __int8 v709 = v151;
            v793 = v148;
            int v760 = v707;
            unsigned __int16 v710 = v707 + 8;
            if (v703 == 1) {
              int v711 = 1;
            }
            else {
              int v711 = vcvtpd_u64_f64(log2((double)(v703 - 1))) + 2;
            }
            char v712 = v705;
            unint64_t v713 = *((void *)&v820 + 1) * v703;
            if (*((void *)&v820 + 1) * v703)
            {
              double v714 = log2((double)v713);
              char v712 = v705;
              LODWORD(v713) = vcvtpd_u64_f64(v714) + 1;
            }
            *(_DWORD *)&v838[32] = 0;
            unsigned __int16 v715 = v710;
            *(_WORD *)&v838[36] = v710;
            v838[38] = v709;
            v838[39] = v771;
            *(_WORD *)&v838[40] = v705;
            v838[42] = v708;
            v838[43] = v711;
            v838[44] = v713;
            v838[45] = v764;
            *(_DWORD *)&v838[46] = 0;
            *(void *)&v838[56] = v703;
            v858.__r_.__value_.__r.__words[0] = ~(-1 << v706);
            LODWORD(v858.__r_.__value_.__r.__words[1]) = v709 >> 3;
            HIDWORD(v858.__r_.__value_.__r.__words[1]) = v709 & 7;
            unsigned int v716 = ((-(char)v705 - ((_BYTE)v771 + v709)) & 7) + v771 + v709;
            LODWORD(v858.__r_.__value_.__r.__words[2]) = ~(-1 << v771);
            HIDWORD(v858.__r_.__value_.__r.__words[2]) = v716 >> 3;
            LODWORD(v859) = v716 & 7;
            uint64_t v860 = ~(-1 << v712);
            int v861 = v760;
            if (v708 - 25 >= 0x27) {
              int v717 = 0;
            }
            else {
              int v717 = -v708 & 7;
            }
            int v718 = v717 + v708;
            if (v711 - 25 >= 0x27) {
              int v719 = 0;
            }
            else {
              int v719 = -v711 & 7;
            }
            *(_DWORD *)&v838[84] = v718;
            DWORD1(v844) = v719 + v711;
            if (v713 - 25 >= 0x27) {
              int v720 = 0;
            }
            else {
              int v720 = -(int)v713 & 7;
            }
            DWORD1(v849) = v720 + v713;
            std::vector<int>::pointer v44 = v817;
            v722 = (uint64_t *)v148[6];
            v721 = (uint64_t *)v148[7];
            if (v722 != v721)
            {
              uint64_t v723 = 0;
              do
              {
                uint64_t v724 = *v722;
                if (*(unsigned char *)*v722)
                {
                  uint64_t v725 = *(void *)(v724 + 80);
                  uint64_t v726 = *(void *)(v724 + 88);
                  if (v725 != v726)
                  {
                    uint64_t v727 = *(void *)&v838[24];
                    do
                    {
                      *(double *)(v727 + 8 * *(void *)v725) = *(double *)(v725 + 8)
                                                                + *(double *)(v727 + 8 * *(void *)v725);
                      v725 += 16;
                    }
                    while (v725 != v726);
                  }
                }
                else
                {
                  CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
                  CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v849, v854);
                  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>((uint64_t)&__src, (uint64_t)&v838[32], (uint64_t)&v858, v723++, v722);
                }
                v722 += 2;
              }
              while (v722 != v721);
              unsigned __int16 v715 = *(_WORD *)&v838[36];
            }
            unint64_t v836 = *(void *)&v838[64] * v715;
            CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v715);
            ++*(void *)&v838[64];
            if (v817)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v817);
              std::__shared_weak_count::__release_shared[abi:ne180100](v817);
            }
LABEL_1321:
            int v856 = *((_DWORD *)v793 + 32);
            *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(a1 + 16) = 0;
            *(void *)a1 = 0;
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, 0, v838, &v838[16], 16);
            v728 = *(char **)&v838[24];
            v858.__r_.__value_.__r.__words[0] = *(void *)&v838[16];
            std::vector<unsigned char>::reserve((unint64_t *)a1, *(void *)&v838[16] + *(void *)(a1 + 8) - *(void *)a1 + 8);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v858, &v858.__r_.__value_.__s.__data_[8], 8);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v728, &v728[8 * v858.__r_.__value_.__r.__words[0]], 8 * v858.__r_.__value_.__r.__words[0]);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), &v838[32], &v838[64], 32);
            v729 = *(char **)&v838[72];
            v858.__r_.__value_.__r.__words[0] = *(void *)&v838[64] * *(unsigned __int16 *)&v838[36];
            std::vector<unsigned char>::reserve((unint64_t *)a1, v858.__r_.__value_.__r.__words[0] + *(void *)(a1 + 8) - *(void *)a1 + 8);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v858, &v858.__r_.__value_.__s.__data_[8], 8);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v729, &v729[v858.__r_.__value_.__r.__words[0]], (int64_t)v858.__r_.__value_.__l.__data_);
            CoreML::Archiver::PackedIntegerVector::export_to_image(&v838[80], (char **)a1, 1);
            CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v844, (char **)a1, 1);
            v730 = v855;
            v858.__r_.__value_.__r.__words[0] = v854;
            std::vector<unsigned char>::reserve((unint64_t *)a1, v854 + *(void *)(a1 + 8) - *(void *)a1 + 8);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v858, &v858.__r_.__value_.__s.__data_[8], 8);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v730, &v730[8 * v858.__r_.__value_.__r.__words[0]], 8 * v858.__r_.__value_.__r.__words[0]);
            CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v849, (char **)a1, 1);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v856, v857, 4);
            goto LABEL_1353;
          case 3:
LABEL_233:
            v138 = *v42;
            uint64_t v137 = (std::__shared_weak_count *)v42[1];
            if (v137) {
              atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 18;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v815 = v137;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v138[2]);
            v139 = (unsigned char *)v138[3];
            v140 = (unsigned char *)v138[4];
            if (v140 != v139) {
              memmove(*(void **)&v838[24], v139, v140 - v139);
            }
            if (v137)
            {
              atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v141) = 0;
            }
            else {
              unint64_t v141 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v469 = v827;
            if (v827 == v828) {
              goto LABEL_857;
            }
            while (!v469[5])
            {
LABEL_851:
              v473 = v469[1];
              if (v473)
              {
                do
                {
                  v474 = (void **)v473;
                  v473 = (void *)*v473;
                }
                while (v473);
              }
              else
              {
                do
                {
                  v474 = (void **)v469[2];
                  BOOL v9 = *v474 == v469;
                  v469 = v474;
                }
                while (!v9);
              }
              v469 = v474;
              if (v474 == v828)
              {
LABEL_857:
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
                int v475 = 4;
                char v769 = v830;
                uint64_t v476 = 4;
                goto LABEL_1132;
              }
            }
            if (v858.__r_.__value_.__l.__size_)
            {
              int v470 = *((_DWORD *)v469 + 8);
              std::string::size_type v471 = v858.__r_.__value_.__l.__size_;
              do
              {
                int v472 = *(_DWORD *)(v471 + 28);
                if (v470 >= v472)
                {
                  if (v472 >= v470) {
                    goto LABEL_851;
                  }
                  v471 += 8;
                }
                std::string::size_type v471 = *(void *)v471;
              }
              while (v471);
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            }
            unint64_t v836 = 0x200000001;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v477 = v827;
            if (v827 == v828)
            {
LABEL_873:
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              if ((_BYTE)v830) {
                char v483 = 3;
              }
              else {
                char v483 = 2;
              }
              char v769 = v483;
              uint64_t v476 = 4;
            }
            else
            {
              while (!v477[5])
              {
LABEL_867:
                v481 = v477[1];
                if (v481)
                {
                  do
                  {
                    v482 = (void **)v481;
                    v481 = (void *)*v481;
                  }
                  while (v481);
                }
                else
                {
                  do
                  {
                    v482 = (void **)v477[2];
                    BOOL v9 = *v482 == v477;
                    v477 = v482;
                  }
                  while (!v9);
                }
                v477 = v482;
                if (v482 == v828) {
                  goto LABEL_873;
                }
              }
              if (v858.__r_.__value_.__l.__size_)
              {
                int v478 = *((_DWORD *)v477 + 8);
                std::string::size_type v479 = v858.__r_.__value_.__l.__size_;
                do
                {
                  int v480 = *(_DWORD *)(v479 + 28);
                  if (v478 >= v480)
                  {
                    if (v480 >= v478) {
                      goto LABEL_867;
                    }
                    v479 += 8;
                  }
                  std::string::size_type v479 = *(void *)v479;
                }
                while (v479);
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              }
              uint64_t v476 = 6;
              char v769 = 4;
            }
            int v475 = v476;
LABEL_1132:
            unint64_t v595 = v819 - 1;
            if ((uint64_t)v819 - 1 <= (unint64_t)v820) {
              unint64_t v595 = v820;
            }
            v797 = v138;
            if (v595) {
              int v596 = vcvtpd_u64_f64(log2((double)v595)) + 1;
            }
            else {
              LOBYTE(v596) = 0;
            }
            unsigned __int8 v782 = v141;
            char v597 = v141;
            unint64_t v598 = (v141 + (unint64_t)v596 + v476 + 7) >> 3;
            unsigned __int16 v599 = v598 + 8;
            if (*((void *)&v819 + 1)) {
              int v600 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
            }
            else {
              int v600 = 0;
            }
            char v601 = v596;
            unsigned __int8 v602 = __p[1];
            v603 = (char *)__p[1] - 1;
            if (__p[1] != (void *)1)
            {
              double v604 = log2((double)(unint64_t)v603);
              char v601 = v596;
              LODWORD(v603) = vcvtpd_u64_f64(v604) + 1;
            }
            *(_DWORD *)&v838[32] = 0;
            *(_WORD *)&v838[36] = v598 + 8;
            v838[38] = v782;
            v838[39] = v475;
            *(_WORD *)&v838[40] = v596;
            v838[42] = v600;
            *(_WORD *)&v838[43] = v603;
            v838[45] = v769;
            *(_DWORD *)&v838[46] = 0;
            *(void *)&v838[56] = v602;
            v858.__r_.__value_.__r.__words[0] = ~(-1 << v597);
            LODWORD(v858.__r_.__value_.__r.__words[1]) = v782 >> 3;
            HIDWORD(v858.__r_.__value_.__r.__words[1]) = v782 & 7;
            unsigned int v605 = ((-(char)v596 - ((_BYTE)v475 + v782)) & 7) + v475 + v782;
            LODWORD(v858.__r_.__value_.__r.__words[2]) = ~(-1 << v475);
            HIDWORD(v858.__r_.__value_.__r.__words[2]) = v605 >> 3;
            LODWORD(v859) = v605 & 7;
            uint64_t v860 = ~(-1 << v601);
            int v861 = v598;
            if (v600 - 25 >= 0x27) {
              int v606 = 0;
            }
            else {
              int v606 = -v600 & 7;
            }
            int v607 = v606 + v600;
            if (v603 - 25 >= 0x27) {
              int v608 = 0;
            }
            else {
              int v608 = -(int)v603 & 7;
            }
            *(_DWORD *)&v838[84] = v607;
            DWORD1(v844) = v608 + v603;
            DWORD1(v849) = 0;
            v609 = v797;
            v611 = (uint64_t *)v797[6];
            v610 = (uint64_t *)v797[7];
            if (v611 != v610)
            {
              uint64_t v612 = 0;
              do
              {
                uint64_t v613 = *v611;
                if (*(unsigned char *)*v611)
                {
                  uint64_t v614 = *(void *)(v613 + 80);
                  uint64_t v615 = *(void *)(v613 + 88);
                  if (v614 != v615)
                  {
                    uint64_t v616 = *(void *)&v838[24];
                    do
                    {
                      *(double *)(v616 + 8 * *(void *)v614) = *(double *)(v614 + 8)
                                                                + *(double *)(v616 + 8 * *(void *)v614);
                      v614 += 16;
                    }
                    while (v614 != v615);
                  }
                }
                else
                {
                  CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>((uint64_t)&__src, (uint64_t)&v838[32], (uint64_t)&v858, v612++, v611);
                }
                v611 += 2;
              }
              while (v611 != v610);
              unsigned __int16 v599 = *(_WORD *)&v838[36];
            }
            uint64_t v617 = v599;
            unint64_t v836 = *(void *)&v838[64] * v599;
            std::vector<int>::pointer v44 = v815;
            CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v617);
            ++*(void *)&v838[64];
            if (v815)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v815);
              std::__shared_weak_count::__release_shared[abi:ne180100](v815);
            }
            goto LABEL_1352;
          default:
LABEL_225:
            v133 = *v42;
            v132 = (std::__shared_weak_count *)v42[1];
            if (v132) {
              atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 15;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v814 = v132;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v133[2]);
            uint64_t v134 = (unsigned char *)v133[3];
            uint64_t v135 = (unsigned char *)v133[4];
            if (v135 != v134) {
              memmove(*(void **)&v838[24], v134, v135 - v134);
            }
            if (v132)
            {
              atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v136) = 0;
            }
            else {
              unint64_t v136 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v558 = v827;
            if (v827 == v828) {
              goto LABEL_1073;
            }
            break;
        }
        while (!v558[5])
        {
LABEL_1067:
          v562 = v558[1];
          if (v562)
          {
            do
            {
              v563 = (void **)v562;
              v562 = (void *)*v562;
            }
            while (v562);
          }
          else
          {
            do
            {
              v563 = (void **)v558[2];
              BOOL v9 = *v563 == v558;
              v558 = v563;
            }
            while (!v9);
          }
          v558 = v563;
          if (v563 == v828)
          {
LABEL_1073:
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            int v564 = 4;
            char v772 = v830;
            uint64_t v565 = 4;
            goto LABEL_1324;
          }
        }
        if (v858.__r_.__value_.__l.__size_)
        {
          int v559 = *((_DWORD *)v558 + 8);
          std::string::size_type v560 = v858.__r_.__value_.__l.__size_;
          do
          {
            int v561 = *(_DWORD *)(v560 + 28);
            if (v559 >= v561)
            {
              if (v561 >= v559) {
                goto LABEL_1067;
              }
              v560 += 8;
            }
            std::string::size_type v560 = *(void *)v560;
          }
          while (v560);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
        }
        unint64_t v836 = 0x200000001;
        std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
        v566 = v827;
        if (v827 == v828)
        {
LABEL_1089:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
          if ((_BYTE)v830) {
            char v572 = 3;
          }
          else {
            char v572 = 2;
          }
          char v772 = v572;
          uint64_t v565 = 4;
        }
        else
        {
          while (!v566[5])
          {
LABEL_1083:
            v570 = v566[1];
            if (v570)
            {
              do
              {
                v571 = (void **)v570;
                v570 = (void *)*v570;
              }
              while (v570);
            }
            else
            {
              do
              {
                v571 = (void **)v566[2];
                BOOL v9 = *v571 == v566;
                v566 = v571;
              }
              while (!v9);
            }
            v566 = v571;
            if (v571 == v828) {
              goto LABEL_1089;
            }
          }
          if (v858.__r_.__value_.__l.__size_)
          {
            int v567 = *((_DWORD *)v566 + 8);
            std::string::size_type v568 = v858.__r_.__value_.__l.__size_;
            do
            {
              int v569 = *(_DWORD *)(v568 + 28);
              if (v567 >= v569)
              {
                if (v569 >= v567) {
                  goto LABEL_1083;
                }
                v568 += 8;
              }
              std::string::size_type v568 = *(void *)v568;
            }
            while (v568);
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
          }
          uint64_t v565 = 6;
          char v772 = 4;
        }
        int v564 = v565;
LABEL_1324:
        unint64_t v731 = v819 - 1;
        if ((uint64_t)v819 - 1 <= (unint64_t)v820) {
          unint64_t v731 = v820;
        }
        v799 = v133;
        if (v731) {
          int v732 = vcvtpd_u64_f64(log2((double)v731)) + 1;
        }
        else {
          LOBYTE(v732) = 0;
        }
        unsigned __int8 v784 = v136;
        char v733 = v136;
        unint64_t v734 = (v136 + (unint64_t)v732 + v565 + 7) >> 3;
        unsigned __int16 v735 = v734 + 8;
        if (*((void *)&v819 + 1)) {
          int v736 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
        }
        else {
          int v736 = 0;
        }
        char v737 = v732;
        unsigned __int8 v738 = __p[1];
        v739 = (char *)__p[1] - 1;
        if (__p[1] != (void *)1)
        {
          double v740 = log2((double)(unint64_t)v739);
          char v737 = v732;
          LODWORD(v739) = vcvtpd_u64_f64(v740) + 1;
        }
        *(_DWORD *)&v838[32] = 0;
        *(_WORD *)&v838[36] = v734 + 8;
        v838[38] = v784;
        v838[39] = v564;
        *(_WORD *)&v838[40] = v732;
        v838[42] = v736;
        *(_WORD *)&v838[43] = v739;
        v838[45] = v772;
        *(_DWORD *)&v838[46] = 0;
        *(void *)&v838[56] = v738;
        v858.__r_.__value_.__r.__words[0] = ~(-1 << v733);
        LODWORD(v858.__r_.__value_.__r.__words[1]) = v784 >> 3;
        HIDWORD(v858.__r_.__value_.__r.__words[1]) = v784 & 7;
        unsigned int v741 = ((-(char)v732 - ((_BYTE)v564 + v784)) & 7) + v564 + v784;
        LODWORD(v858.__r_.__value_.__r.__words[2]) = ~(-1 << v564);
        HIDWORD(v858.__r_.__value_.__r.__words[2]) = v741 >> 3;
        LODWORD(v859) = v741 & 7;
        uint64_t v860 = ~(-1 << v737);
        int v861 = v734;
        if (v736 - 25 >= 0x27) {
          int v742 = 0;
        }
        else {
          int v742 = -v736 & 7;
        }
        int v743 = v742 + v736;
        if (v739 - 25 >= 0x27) {
          int v744 = 0;
        }
        else {
          int v744 = -(int)v739 & 7;
        }
        *(_DWORD *)&v838[84] = v743;
        DWORD1(v844) = v744 + v739;
        DWORD1(v849) = 0;
        v609 = v799;
        v746 = (uint64_t *)v799[6];
        v745 = (uint64_t *)v799[7];
        if (v746 != v745)
        {
          uint64_t v747 = 0;
          do
          {
            uint64_t v748 = *v746;
            if (*(unsigned char *)*v746)
            {
              uint64_t v749 = *(void *)(v748 + 80);
              uint64_t v750 = *(void *)(v748 + 88);
              if (v749 != v750)
              {
                uint64_t v751 = *(void *)&v838[24];
                do
                {
                  *(double *)(v751 + 8 * *(void *)v749) = *(double *)(v749 + 8)
                                                            + *(double *)(v751 + 8 * *(void *)v749);
                  v749 += 16;
                }
                while (v749 != v750);
              }
            }
            else
            {
              CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
              CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>((uint64_t)&__src, (uint64_t)&v838[32], (uint64_t)&v858, v747++, v746);
            }
            v746 += 2;
          }
          while (v746 != v745);
          unsigned __int16 v735 = *(_WORD *)&v838[36];
        }
        uint64_t v752 = v735;
        unint64_t v836 = *(void *)&v838[64] * v735;
        std::vector<int>::pointer v44 = v814;
        CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v752);
        ++*(void *)&v838[64];
        if (v814)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v814);
          std::__shared_weak_count::__release_shared[abi:ne180100](v814);
        }
      }
      else
      {
        switch(v55)
        {
          case 1:
LABEL_208:
            long long v123 = *v42;
            v122 = (std::__shared_weak_count *)v42[1];
            if (v122) {
              atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 12;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v812 = v122;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v123[2]);
            v124 = (unsigned char *)v123[3];
            v125 = (unsigned char *)v123[4];
            if (v125 != v124) {
              memmove(*(void **)&v838[24], v124, v125 - v124);
            }
            if (v122)
            {
              atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v126) = 0;
            }
            else {
              unint64_t v126 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v499 = v827;
            v795 = v123;
            if (v827 == v828) {
              goto LABEL_929;
            }
            while (!v499[5])
            {
LABEL_923:
              v503 = v499[1];
              if (v503)
              {
                do
                {
                  v504 = (void **)v503;
                  v503 = (void *)*v503;
                }
                while (v503);
              }
              else
              {
                do
                {
                  v504 = (void **)v499[2];
                  BOOL v9 = *v504 == v499;
                  v499 = v504;
                }
                while (!v9);
              }
              v499 = v504;
              if (v504 == v828)
              {
LABEL_929:
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
                int v505 = 4;
                char v780 = v830;
                uint64_t v506 = 4;
                goto LABEL_1194;
              }
            }
            if (v858.__r_.__value_.__l.__size_)
            {
              int v500 = *((_DWORD *)v499 + 8);
              std::string::size_type v501 = v858.__r_.__value_.__l.__size_;
              do
              {
                int v502 = *(_DWORD *)(v501 + 28);
                if (v500 >= v502)
                {
                  if (v502 >= v500) {
                    goto LABEL_923;
                  }
                  v501 += 8;
                }
                std::string::size_type v501 = *(void *)v501;
              }
              while (v501);
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            }
            unint64_t v836 = 0x200000001;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v507 = v827;
            if (v827 == v828)
            {
LABEL_945:
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              if ((_BYTE)v830) {
                char v513 = 3;
              }
              else {
                char v513 = 2;
              }
              char v780 = v513;
              uint64_t v506 = 4;
            }
            else
            {
              while (!v507[5])
              {
LABEL_939:
                v511 = v507[1];
                if (v511)
                {
                  do
                  {
                    v512 = (void **)v511;
                    v511 = (void *)*v511;
                  }
                  while (v511);
                }
                else
                {
                  do
                  {
                    v512 = (void **)v507[2];
                    BOOL v9 = *v512 == v507;
                    v507 = v512;
                  }
                  while (!v9);
                }
                v507 = v512;
                if (v512 == v828) {
                  goto LABEL_945;
                }
              }
              if (v858.__r_.__value_.__l.__size_)
              {
                int v508 = *((_DWORD *)v507 + 8);
                std::string::size_type v509 = v858.__r_.__value_.__l.__size_;
                do
                {
                  int v510 = *(_DWORD *)(v509 + 28);
                  if (v508 >= v510)
                  {
                    if (v510 >= v508) {
                      goto LABEL_939;
                    }
                    v509 += 8;
                  }
                  std::string::size_type v509 = *(void *)v509;
                }
                while (v509);
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              }
              uint64_t v506 = 6;
              char v780 = 4;
            }
            int v505 = v506;
LABEL_1194:
            unint64_t v639 = v819 - 1;
            if ((uint64_t)v819 - 1 <= (unint64_t)v820) {
              unint64_t v639 = v820;
            }
            if (v639) {
              int v640 = vcvtpd_u64_f64(log2((double)v639)) + 1;
            }
            else {
              LOBYTE(v640) = 0;
            }
            unint64_t v641 = (v126 + (unint64_t)v640 + v506 + 7) >> 3;
            unsigned __int16 v642 = v641 + 8;
            if (*((void *)&v819 + 1)) {
              int v643 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
            }
            else {
              int v643 = 0;
            }
            unsigned __int8 v644 = __p[1];
            v645 = (char *)__p[1] - 1;
            if (__p[1] != (void *)1) {
              LODWORD(v645) = vcvtpd_u64_f64(log2((double)(unint64_t)v645)) + 1;
            }
            *(_DWORD *)&v838[32] = 0;
            *(_WORD *)&v838[36] = v641 + 8;
            v838[38] = v126;
            v838[39] = v505;
            *(_WORD *)&v838[40] = v640;
            v838[42] = v643;
            *(_WORD *)&v838[43] = v645;
            v838[45] = v780;
            *(_DWORD *)&v838[46] = 0;
            *(void *)&v838[56] = v644;
            LODWORD(v858.__r_.__value_.__l.__data_) = ~(-1 << v126);
            HIDWORD(v858.__r_.__value_.__r.__words[0]) = v126 >> 3;
            LODWORD(v858.__r_.__value_.__r.__words[1]) = v126 & 7;
            HIDWORD(v858.__r_.__value_.__r.__words[1]) = ~(-1 << v505);
            unsigned int v646 = ((-(char)v640 - ((_BYTE)v505 + (_BYTE)v126)) & 7) + v505 + v126;
            LODWORD(v858.__r_.__value_.__r.__words[2]) = v646 >> 3;
            HIDWORD(v858.__r_.__value_.__r.__words[2]) = v646 & 7;
            LODWORD(v859) = ~(-1 << v640);
            HIDWORD(v859) = (v126 + (unint64_t)v640 + v506 + 7) >> 3;
            if (v643 - 25 >= 0x27) {
              int v647 = 0;
            }
            else {
              int v647 = -v643 & 7;
            }
            int v648 = v647 + v643;
            if (v645 - 25 >= 0x27) {
              int v649 = 0;
            }
            else {
              int v649 = -(int)v645 & 7;
            }
            *(_DWORD *)&v838[84] = v648;
            DWORD1(v844) = v649 + v645;
            DWORD1(v849) = 0;
            v609 = v795;
            v651 = (uint64_t *)v795[6];
            v650 = (uint64_t *)v795[7];
            if (v651 != v650)
            {
              unint64_t v652 = 0;
              do
              {
                uint64_t v653 = *v651;
                if (*(unsigned char *)*v651)
                {
                  uint64_t v654 = *(void *)(v653 + 80);
                  uint64_t v655 = *(void *)(v653 + 88);
                  if (v654 != v655)
                  {
                    uint64_t v656 = *(void *)&v838[24];
                    do
                    {
                      *(double *)(v656 + 8 * *(void *)v654) = *(double *)(v654 + 8)
                                                                + *(double *)(v656 + 8 * *(void *)v654);
                      v654 += 16;
                    }
                    while (v654 != v655);
                  }
                }
                else
                {
                  unint64_t v657 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v657);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v652);
                  unsigned int v658 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v652);
                  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>((uint64_t)&__src, (uint64_t)&v838[32], &v858, v658, v651);
                  ++v652;
                }
                v651 += 2;
              }
              while (v651 != v650);
              unsigned __int16 v642 = *(_WORD *)&v838[36];
            }
            uint64_t v659 = v642;
            unint64_t v836 = *(void *)&v838[64] * v642;
            std::vector<int>::pointer v44 = v812;
            CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v659);
            ++*(void *)&v838[64];
            if (v812)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v812);
              std::__shared_weak_count::__release_shared[abi:ne180100](v812);
            }
            goto LABEL_1352;
          case 2:
LABEL_200:
            v118 = *v42;
            v117 = (std::__shared_weak_count *)v42[1];
            if (v117) {
              atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 13;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v811 = v117;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v118[2]);
            v119 = (unsigned char *)v118[3];
            v120 = (unsigned char *)v118[4];
            if (v120 != v119) {
              memmove(*(void **)&v838[24], v119, v120 - v119);
            }
            if (v117)
            {
              atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v121) = 0;
            }
            else {
              unint64_t v121 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v454 = v827;
            v793 = v118;
            if (v827 == v828) {
              goto LABEL_821;
            }
            while (!v454[5])
            {
LABEL_815:
              v458 = v454[1];
              if (v458)
              {
                do
                {
                  v459 = (void **)v458;
                  v458 = (void *)*v458;
                }
                while (v458);
              }
              else
              {
                do
                {
                  v459 = (void **)v454[2];
                  BOOL v9 = *v459 == v454;
                  v454 = v459;
                }
                while (!v9);
              }
              v454 = v459;
              if (v459 == v828)
              {
LABEL_821:
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
                int v460 = 4;
                char v762 = v830;
                uint64_t v461 = 4;
                goto LABEL_1095;
              }
            }
            if (v858.__r_.__value_.__l.__size_)
            {
              int v455 = *((_DWORD *)v454 + 8);
              std::string::size_type v456 = v858.__r_.__value_.__l.__size_;
              do
              {
                int v457 = *(_DWORD *)(v456 + 28);
                if (v455 >= v457)
                {
                  if (v457 >= v455) {
                    goto LABEL_815;
                  }
                  v456 += 8;
                }
                std::string::size_type v456 = *(void *)v456;
              }
              while (v456);
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            }
            unint64_t v836 = 0x200000001;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v462 = v827;
            if (v827 == v828)
            {
LABEL_837:
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              if ((_BYTE)v830) {
                char v468 = 3;
              }
              else {
                char v468 = 2;
              }
              char v762 = v468;
              uint64_t v461 = 4;
            }
            else
            {
              while (!v462[5])
              {
LABEL_831:
                v466 = v462[1];
                if (v466)
                {
                  do
                  {
                    v467 = (void **)v466;
                    v466 = (void *)*v466;
                  }
                  while (v466);
                }
                else
                {
                  do
                  {
                    v467 = (void **)v462[2];
                    BOOL v9 = *v467 == v462;
                    v462 = v467;
                  }
                  while (!v9);
                }
                v462 = v467;
                if (v467 == v828) {
                  goto LABEL_837;
                }
              }
              if (v858.__r_.__value_.__l.__size_)
              {
                int v463 = *((_DWORD *)v462 + 8);
                std::string::size_type v464 = v858.__r_.__value_.__l.__size_;
                do
                {
                  int v465 = *(_DWORD *)(v464 + 28);
                  if (v463 >= v465)
                  {
                    if (v465 >= v463) {
                      goto LABEL_831;
                    }
                    v464 += 8;
                  }
                  std::string::size_type v464 = *(void *)v464;
                }
                while (v464);
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              }
              uint64_t v461 = 6;
              char v762 = 4;
            }
            int v460 = v461;
LABEL_1095:
            unint64_t v573 = (unint64_t)__p[1];
            uint64_t v574 = v819 - 1;
            if ((unint64_t)(v819 - 1) <= (uint64_t)__p[1] * (uint64_t)v820) {
              uint64_t v574 = (uint64_t)__p[1] * v820;
            }
            if (v574) {
              int v575 = vcvtpd_u64_f64(log2((double)(unint64_t)v574)) + 1;
            }
            else {
              LOBYTE(v575) = 0;
            }
            unint64_t v576 = (v121 + (unint64_t)v575 + v461 + 7) >> 3;
            if (*((void *)&v819 + 1)) {
              int v577 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
            }
            else {
              int v577 = 0;
            }
            unsigned __int16 v578 = v576 + 8;
            if (v573 == 1) {
              int v579 = 1;
            }
            else {
              int v579 = vcvtpd_u64_f64(log2((double)(v573 - 1))) + 2;
            }
            unint64_t v580 = *((void *)&v820 + 1) * v573;
            if (*((void *)&v820 + 1) * v573) {
              LODWORD(v580) = vcvtpd_u64_f64(log2((double)v580)) + 1;
            }
            *(_DWORD *)&v838[32] = 0;
            *(_WORD *)&v838[36] = v576 + 8;
            v838[38] = v121;
            v838[39] = v460;
            *(_WORD *)&v838[40] = v575;
            v838[42] = v577;
            v838[43] = v579;
            v838[44] = v580;
            v838[45] = v762;
            *(_DWORD *)&v838[46] = 0;
            *(void *)&v838[56] = v573;
            LODWORD(v858.__r_.__value_.__l.__data_) = ~(-1 << v121);
            HIDWORD(v858.__r_.__value_.__r.__words[0]) = v121 >> 3;
            LODWORD(v858.__r_.__value_.__r.__words[1]) = v121 & 7;
            HIDWORD(v858.__r_.__value_.__r.__words[1]) = ~(-1 << v460);
            unsigned int v581 = ((-(char)v575 - ((_BYTE)v460 + (_BYTE)v121)) & 7) + v460 + v121;
            LODWORD(v858.__r_.__value_.__r.__words[2]) = v581 >> 3;
            HIDWORD(v858.__r_.__value_.__r.__words[2]) = v581 & 7;
            LODWORD(v859) = ~(-1 << v575);
            HIDWORD(v859) = v576;
            if (v577 - 25 >= 0x27) {
              int v582 = 0;
            }
            else {
              int v582 = -v577 & 7;
            }
            int v583 = v582 + v577;
            if (v579 - 25 >= 0x27) {
              int v584 = 0;
            }
            else {
              int v584 = -v579 & 7;
            }
            *(_DWORD *)&v838[84] = v583;
            DWORD1(v844) = v584 + v579;
            if (v580 - 25 >= 0x27) {
              int v585 = 0;
            }
            else {
              int v585 = -(int)v580 & 7;
            }
            DWORD1(v849) = v585 + v580;
            v587 = (uint64_t *)v793[6];
            v586 = (uint64_t *)v793[7];
            std::vector<int>::pointer v44 = v811;
            if (v587 != v586)
            {
              unint64_t v588 = 0;
              do
              {
                uint64_t v589 = *v587;
                if (*(unsigned char *)*v587)
                {
                  uint64_t v590 = *(void *)(v589 + 80);
                  uint64_t v591 = *(void *)(v589 + 88);
                  if (v590 != v591)
                  {
                    uint64_t v592 = *(void *)&v838[24];
                    do
                    {
                      *(double *)(v592 + 8 * *(void *)v590) = *(double *)(v590 + 8)
                                                                + *(double *)(v592 + 8 * *(void *)v590);
                      v590 += 16;
                    }
                    while (v590 != v591);
                  }
                }
                else
                {
                  unint64_t v593 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v593);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v588);
                  CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v849, v854);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v854);
                  unsigned int v594 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v588);
                  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>((uint64_t)&__src, (uint64_t)&v838[32], &v858, v594, v587);
                  ++v588;
                }
                v587 += 2;
              }
              while (v587 != v586);
              unsigned __int16 v578 = *(_WORD *)&v838[36];
            }
            unint64_t v836 = *(void *)&v838[64] * v578;
            CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v578);
            ++*(void *)&v838[64];
            if (v811)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v811);
              std::__shared_weak_count::__release_shared[abi:ne180100](v811);
            }
            goto LABEL_1321;
          case 3:
LABEL_216:
            v128 = *v42;
            v127 = (std::__shared_weak_count *)v42[1];
            if (v127) {
              atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 14;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v813 = v127;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v128[2]);
            v129 = (unsigned char *)v128[3];
            v130 = (unsigned char *)v128[4];
            if (v130 != v129) {
              memmove(*(void **)&v838[24], v129, v130 - v129);
            }
            if (v127)
            {
              atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v131) = 0;
            }
            else {
              unint64_t v131 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v529 = v827;
            v796 = v128;
            if (v827 == v828) {
              goto LABEL_1001;
            }
            while (!v529[5])
            {
LABEL_995:
              v533 = v529[1];
              if (v533)
              {
                do
                {
                  v534 = (void **)v533;
                  v533 = (void *)*v533;
                }
                while (v533);
              }
              else
              {
                do
                {
                  v534 = (void **)v529[2];
                  BOOL v9 = *v534 == v529;
                  v529 = v534;
                }
                while (!v9);
              }
              v529 = v534;
              if (v534 == v828)
              {
LABEL_1001:
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
                int v535 = 4;
                char v781 = v830;
                uint64_t v536 = 4;
                goto LABEL_1256;
              }
            }
            if (v858.__r_.__value_.__l.__size_)
            {
              int v530 = *((_DWORD *)v529 + 8);
              std::string::size_type v531 = v858.__r_.__value_.__l.__size_;
              do
              {
                int v532 = *(_DWORD *)(v531 + 28);
                if (v530 >= v532)
                {
                  if (v532 >= v530) {
                    goto LABEL_995;
                  }
                  v531 += 8;
                }
                std::string::size_type v531 = *(void *)v531;
              }
              while (v531);
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            }
            unint64_t v836 = 0x200000001;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v537 = v827;
            if (v827 == v828)
            {
LABEL_1017:
              std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              if ((_BYTE)v830) {
                char v543 = 3;
              }
              else {
                char v543 = 2;
              }
              char v781 = v543;
              uint64_t v536 = 4;
            }
            else
            {
              while (!v537[5])
              {
LABEL_1011:
                v541 = v537[1];
                if (v541)
                {
                  do
                  {
                    v542 = (void **)v541;
                    v541 = (void *)*v541;
                  }
                  while (v541);
                }
                else
                {
                  do
                  {
                    v542 = (void **)v537[2];
                    BOOL v9 = *v542 == v537;
                    v537 = v542;
                  }
                  while (!v9);
                }
                v537 = v542;
                if (v542 == v828) {
                  goto LABEL_1017;
                }
              }
              if (v858.__r_.__value_.__l.__size_)
              {
                int v538 = *((_DWORD *)v537 + 8);
                std::string::size_type v539 = v858.__r_.__value_.__l.__size_;
                do
                {
                  int v540 = *(_DWORD *)(v539 + 28);
                  if (v538 >= v540)
                  {
                    if (v540 >= v538) {
                      goto LABEL_1011;
                    }
                    v539 += 8;
                  }
                  std::string::size_type v539 = *(void *)v539;
                }
                while (v539);
                std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
              }
              uint64_t v536 = 6;
              char v781 = 4;
            }
            int v535 = v536;
LABEL_1256:
            unint64_t v682 = v819 - 1;
            if ((uint64_t)v819 - 1 <= (unint64_t)v820) {
              unint64_t v682 = v820;
            }
            if (v682) {
              int v683 = vcvtpd_u64_f64(log2((double)v682)) + 1;
            }
            else {
              LOBYTE(v683) = 0;
            }
            unint64_t v684 = (v131 + (unint64_t)v683 + v536 + 7) >> 3;
            unsigned __int16 v685 = v684 + 8;
            if (*((void *)&v819 + 1)) {
              int v686 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
            }
            else {
              int v686 = 0;
            }
            unsigned __int8 v687 = __p[1];
            v688 = (char *)__p[1] - 1;
            if (__p[1] != (void *)1) {
              LODWORD(v68_Block_object_dispose(&a9, 8) = vcvtpd_u64_f64(log2((double)(unint64_t)v688)) + 1;
            }
            *(_DWORD *)&v838[32] = 0;
            *(_WORD *)&v838[36] = v684 + 8;
            v838[38] = v131;
            v838[39] = v535;
            *(_WORD *)&v838[40] = v683;
            v838[42] = v686;
            *(_WORD *)&v838[43] = v688;
            v838[45] = v781;
            *(_DWORD *)&v838[46] = 0;
            *(void *)&v838[56] = v687;
            LODWORD(v858.__r_.__value_.__l.__data_) = ~(-1 << v131);
            HIDWORD(v858.__r_.__value_.__r.__words[0]) = v131 >> 3;
            LODWORD(v858.__r_.__value_.__r.__words[1]) = v131 & 7;
            HIDWORD(v858.__r_.__value_.__r.__words[1]) = ~(-1 << v535);
            unsigned int v689 = ((-(char)v683 - ((_BYTE)v535 + (_BYTE)v131)) & 7) + v535 + v131;
            LODWORD(v858.__r_.__value_.__r.__words[2]) = v689 >> 3;
            HIDWORD(v858.__r_.__value_.__r.__words[2]) = v689 & 7;
            LODWORD(v859) = ~(-1 << v683);
            HIDWORD(v859) = (v131 + (unint64_t)v683 + v536 + 7) >> 3;
            if (v686 - 25 >= 0x27) {
              int v690 = 0;
            }
            else {
              int v690 = -v686 & 7;
            }
            int v691 = v690 + v686;
            if (v688 - 25 >= 0x27) {
              int v692 = 0;
            }
            else {
              int v692 = -(int)v688 & 7;
            }
            *(_DWORD *)&v838[84] = v691;
            DWORD1(v844) = v692 + v688;
            DWORD1(v849) = 0;
            v609 = v796;
            v694 = (uint64_t *)v796[6];
            v693 = (uint64_t *)v796[7];
            if (v694 != v693)
            {
              unint64_t v695 = 0;
              do
              {
                uint64_t v696 = *v694;
                if (*(unsigned char *)*v694)
                {
                  uint64_t v697 = *(void *)(v696 + 80);
                  uint64_t v698 = *(void *)(v696 + 88);
                  if (v697 != v698)
                  {
                    uint64_t v699 = *(void *)&v838[24];
                    do
                    {
                      *(double *)(v699 + 8 * *(void *)v697) = *(double *)(v697 + 8)
                                                                + *(double *)(v699 + 8 * *(void *)v697);
                      v697 += 16;
                    }
                    while (v697 != v698);
                  }
                }
                else
                {
                  unint64_t v700 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v700);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v838[64]);
                  CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v695);
                  unsigned int v701 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v695);
                  CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>((uint64_t)&__src, (uint64_t)&v838[32], &v858, v701, v694);
                  ++v695;
                }
                v694 += 2;
              }
              while (v694 != v693);
              unsigned __int16 v685 = *(_WORD *)&v838[36];
            }
            uint64_t v702 = v685;
            unint64_t v836 = *(void *)&v838[64] * v685;
            std::vector<int>::pointer v44 = v813;
            CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v702);
            ++*(void *)&v838[64];
            if (v813)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v813);
              std::__shared_weak_count::__release_shared[abi:ne180100](v813);
            }
            goto LABEL_1352;
          default:
LABEL_135:
            int v78 = *v42;
            uint64_t v77 = (std::__shared_weak_count *)v42[1];
            if (v77) {
              atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)&v838[46] = 0;
            memset(&v838[8], 0, 37);
            uint64_t v842 = 0;
            uint64_t v843 = 0;
            memset(&v838[56], 0, 32);
            long long v839 = 0u;
            uint64_t v840 = 0;
            v841 = &v842;
            uint64_t v847 = 0;
            uint64_t v848 = 0;
            long long v844 = 0u;
            long long v845 = 0u;
            v846 = (CoreML::Archiver::MMappedContentManager *)&v847;
            DWORD1(v844) = 64;
            long long v849 = 0u;
            long long v850 = 0u;
            v851 = (CoreML::Archiver::MMappedContentManager *)&v852;
            uint64_t v852 = 0;
            DWORD1(v849) = 64;
            unint64_t v854 = 0;
            v855 = 0;
            uint64_t v853 = 0;
            *(void *)v838 = 0;
            *(_DWORD *)&v838[84] = 64;
            *(_DWORD *)&v838[8] = 11;
            uint64_t v832 = 0;
            uint64_t v833 = 0;
            __src = (void **)&v832;
            v803 = v77;
            CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)&__src, (uint64_t *)&v838[16], (void **)&v838[24], v78[2]);
            BOOL v79 = (unsigned char *)v78[3];
            unint64_t v80 = (unsigned char *)v78[4];
            if (v80 != v79) {
              memmove(*(void **)&v838[24], v79, v80 - v79);
            }
            if (v77)
            {
              atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[0] == (void *)1) {
              LOBYTE(v81) = 0;
            }
            else {
              unint64_t v81 = vcvtpd_u64_f64(log2((double)((unint64_t)__p[0] - 1))) + 1;
            }
            unint64_t v836 = 0x300000000;
            std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
            v484 = v827;
            v794 = v78;
            if (v827 == v828) {
              goto LABEL_893;
            }
            break;
        }
        while (!v484[5])
        {
LABEL_887:
          v488 = v484[1];
          if (v488)
          {
            do
            {
              v489 = (void **)v488;
              v488 = (void *)*v488;
            }
            while (v488);
          }
          else
          {
            do
            {
              v489 = (void **)v484[2];
              BOOL v9 = *v489 == v484;
              v484 = v489;
            }
            while (!v9);
          }
          v484 = v489;
          if (v489 == v828)
          {
LABEL_893:
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
            int v490 = 4;
            char v779 = v830;
            uint64_t v491 = 4;
            goto LABEL_1163;
          }
        }
        if (v858.__r_.__value_.__l.__size_)
        {
          int v485 = *((_DWORD *)v484 + 8);
          std::string::size_type v486 = v858.__r_.__value_.__l.__size_;
          do
          {
            int v487 = *(_DWORD *)(v486 + 28);
            if (v485 >= v487)
            {
              if (v487 >= v485) {
                goto LABEL_887;
              }
              v486 += 8;
            }
            std::string::size_type v486 = *(void *)v486;
          }
          while (v486);
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
        }
        unint64_t v836 = 0x200000001;
        std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>((uint64_t **)&v858, (int *)&v836, (int *)&v837);
        v492 = v827;
        if (v827 == v828)
        {
LABEL_909:
          std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
          if ((_BYTE)v830) {
            char v498 = 3;
          }
          else {
            char v498 = 2;
          }
          char v779 = v498;
          uint64_t v491 = 4;
        }
        else
        {
          while (!v492[5])
          {
LABEL_903:
            v496 = v492[1];
            if (v496)
            {
              do
              {
                v497 = (void **)v496;
                v496 = (void *)*v496;
              }
              while (v496);
            }
            else
            {
              do
              {
                v497 = (void **)v492[2];
                BOOL v9 = *v497 == v492;
                v492 = v497;
              }
              while (!v9);
            }
            v492 = v497;
            if (v497 == v828) {
              goto LABEL_909;
            }
          }
          if (v858.__r_.__value_.__l.__size_)
          {
            int v493 = *((_DWORD *)v492 + 8);
            std::string::size_type v494 = v858.__r_.__value_.__l.__size_;
            do
            {
              int v495 = *(_DWORD *)(v494 + 28);
              if (v493 >= v495)
              {
                if (v495 >= v493) {
                  goto LABEL_903;
                }
                v494 += 8;
              }
              std::string::size_type v494 = *(void *)v494;
            }
            while (v494);
            std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy((void *)v858.__r_.__value_.__l.__size_);
          }
          uint64_t v491 = 6;
          char v779 = 4;
        }
        int v490 = v491;
LABEL_1163:
        unint64_t v618 = v819 - 1;
        if ((uint64_t)v819 - 1 <= (unint64_t)v820) {
          unint64_t v618 = v820;
        }
        if (v618) {
          int v619 = vcvtpd_u64_f64(log2((double)v618)) + 1;
        }
        else {
          LOBYTE(v619) = 0;
        }
        unint64_t v620 = (v81 + (unint64_t)v619 + v491 + 7) >> 3;
        unsigned __int16 v621 = v620 + 8;
        if (*((void *)&v819 + 1)) {
          int v622 = vcvtpd_u64_f64(log2((double)*((unint64_t *)&v819 + 1))) + 1;
        }
        else {
          int v622 = 0;
        }
        unsigned __int8 v623 = __p[1];
        v624 = (char *)__p[1] - 1;
        if (__p[1] != (void *)1) {
          LODWORD(v624) = vcvtpd_u64_f64(log2((double)(unint64_t)v624)) + 1;
        }
        *(_DWORD *)&v838[32] = 0;
        *(_WORD *)&v838[36] = v620 + 8;
        v838[38] = v81;
        v838[39] = v490;
        *(_WORD *)&v838[40] = v619;
        v838[42] = v622;
        *(_WORD *)&v838[43] = v624;
        v838[45] = v779;
        *(_DWORD *)&v838[46] = 0;
        *(void *)&v838[56] = v623;
        LODWORD(v858.__r_.__value_.__l.__data_) = ~(-1 << v81);
        HIDWORD(v858.__r_.__value_.__r.__words[0]) = v81 >> 3;
        LODWORD(v858.__r_.__value_.__r.__words[1]) = v81 & 7;
        HIDWORD(v858.__r_.__value_.__r.__words[1]) = ~(-1 << v490);
        unsigned int v625 = ((-(char)v619 - ((_BYTE)v490 + (_BYTE)v81)) & 7) + v490 + v81;
        LODWORD(v858.__r_.__value_.__r.__words[2]) = v625 >> 3;
        HIDWORD(v858.__r_.__value_.__r.__words[2]) = v625 & 7;
        LODWORD(v859) = ~(-1 << v619);
        HIDWORD(v859) = (v81 + (unint64_t)v619 + v491 + 7) >> 3;
        if (v622 - 25 >= 0x27) {
          int v626 = 0;
        }
        else {
          int v626 = -v622 & 7;
        }
        int v627 = v626 + v622;
        if (v624 - 25 >= 0x27) {
          int v628 = 0;
        }
        else {
          int v628 = -(int)v624 & 7;
        }
        *(_DWORD *)&v838[84] = v627;
        DWORD1(v844) = v628 + v624;
        DWORD1(v849) = 0;
        v609 = v794;
        v630 = (uint64_t *)v794[6];
        v629 = (uint64_t *)v794[7];
        if (v630 != v629)
        {
          unint64_t v631 = 0;
          do
          {
            uint64_t v632 = *v630;
            if (*(unsigned char *)*v630)
            {
              uint64_t v633 = *(void *)(v632 + 80);
              uint64_t v634 = *(void *)(v632 + 88);
              if (v633 != v634)
              {
                uint64_t v635 = *(void *)&v838[24];
                do
                {
                  *(double *)(v635 + 8 * *(void *)v633) = *(double *)(v633 + 8)
                                                            + *(double *)(v635 + 8 * *(void *)v633);
                  v633 += 16;
                }
                while (v633 != v634);
              }
            }
            else
            {
              unint64_t v636 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)&v838[80], *(uint64_t *)&v838[64]);
              CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v636);
              CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(unint64_t *)&v838[64]);
              CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v631);
              unsigned int v637 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v631);
              CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>((uint64_t)&__src, (uint64_t)&v838[32], &v858, v637, v630);
              ++v631;
            }
            v630 += 2;
          }
          while (v630 != v629);
          unsigned __int16 v621 = *(_WORD *)&v838[36];
        }
        uint64_t v638 = v621;
        unint64_t v836 = *(void *)&v838[64] * v621;
        std::vector<int>::pointer v44 = v803;
        CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>((uint64_t)&__src, (uint64_t *)&v836, (void **)&v838[72], v638);
        ++*(void *)&v838[64];
        if (v803)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v803);
          std::__shared_weak_count::__release_shared[abi:ne180100](v803);
        }
      }
LABEL_1352:
      int v856 = *((_DWORD *)v609 + 32);
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, 0, v838, &v838[16], 16);
      v753 = *(char **)&v838[24];
      v858.__r_.__value_.__r.__words[0] = *(void *)&v838[16];
      std::vector<unsigned char>::reserve((unint64_t *)a1, *(void *)&v838[16] + *(void *)(a1 + 8) - *(void *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v858, &v858.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v753, &v753[8 * v858.__r_.__value_.__r.__words[0]], 8 * v858.__r_.__value_.__r.__words[0]);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), &v838[32], &v838[64], 32);
      v754 = *(char **)&v838[72];
      v858.__r_.__value_.__r.__words[0] = *(void *)&v838[64] * *(unsigned __int16 *)&v838[36];
      std::vector<unsigned char>::reserve((unint64_t *)a1, v858.__r_.__value_.__r.__words[0] + *(void *)(a1 + 8) - *(void *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v858, &v858.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v754, &v754[v858.__r_.__value_.__r.__words[0]], (int64_t)v858.__r_.__value_.__l.__data_);
      CoreML::Archiver::PackedIntegerVector::export_to_image(&v838[80], (char **)a1, 1);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v844, (char **)a1, 1);
      v755 = v855;
      v858.__r_.__value_.__r.__words[0] = v854;
      std::vector<unsigned char>::reserve((unint64_t *)a1, v854 + *(void *)(a1 + 8) - *(void *)a1 + 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v858, &v858.__r_.__value_.__s.__data_[8], 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), v755, &v755[8 * v858.__r_.__value_.__r.__words[0]], 8 * v858.__r_.__value_.__r.__words[0]);
      CoreML::Archiver::PackedIntegerVector::export_to_image((char *)&v849, (char **)a1, 1);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&v856, v857, 4);
    }
LABEL_1353:
    CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)&__src);
    CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v851);
    CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v846);
    uint64_t v70 = (CoreML::Archiver::MMappedContentManager **)&v841;
  }
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(v70);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v828[0]);
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(v823);
}

void sub_19E965314(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
}

void *std::map<std::string,std::string>::map[abi:ne180100](void *a1, void *a2)
{
  a1[1] = 0;
  id v3 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  size_t v4 = a2 + 1;
  id v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_equal<std::string>(a1, v3, &v20, &v19, v5 + 4);
      if (!*v6)
      {
        int v7 = v6;
        int v8 = (char *)operator new(0x50uLL);
        BOOL v9 = (uint64_t *)v8;
        v17[0] = v8;
        v17[1] = v3;
        char v18 = 0;
        if (*((char *)v5 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v8 + 32), (const std::string::value_type *)v5[4], v5[5]);
        }
        else
        {
          long long v10 = *((_OWORD *)v5 + 2);
          *((void *)v8 + 6) = v5[6];
          *((_OWORD *)v8 + 2) = v10;
        }
        uint64_t v11 = (std::string *)(v9 + 7);
        if (*((char *)v5 + 79) < 0)
        {
          std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v5[7], v5[8]);
        }
        else
        {
          long long v12 = *(_OWORD *)(v5 + 7);
          v9[9] = v5[9];
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
        }
        char v18 = 1;
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)a1, v20, v7, v9);
        v17[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v17);
      }
      uint64_t v13 = (void *)v5[1];
      if (v13)
      {
        do
        {
          long long v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (void *)v5[2];
          BOOL v15 = *v14 == (void)v5;
          id v5 = v14;
        }
        while (!v15);
      }
      id v5 = v14;
    }
    while (v14 != v4);
  }
  return a1;
}

void sub_19E965C48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v3 + 55) < 0) {
    operator delete(*v4);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  if (a5 < 1) {
    return;
  }
  long long v10 = *(unsigned char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      uint64_t v16 = (char *)operator new(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    std::string::size_type v26 = &v13[(void)v16];
    memcpy(&v13[(void)v16], __src, a5);
    if (v11 == __dst)
    {
      unsigned __int8 v27 = &v13[(void)v16];
    }
    else
    {
      do
      {
        v13[(void)v16 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      long long v10 = *(unsigned char **)(a1 + 8);
      unsigned __int8 v27 = v16;
    }
    unint64_t v28 = &v26[a5];
    unint64_t v29 = &v16[v15];
    if (v10 != __dst) {
      memmove(v28, __dst, v10 - __dst);
    }
    uint64_t v30 = *(char **)a1;
    *(void *)a1 = v27;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = &v28[v10 - __dst];
    *(void *)(a1 + 16) = v29;
    if (v30)
    {
      operator delete(v30);
    }
    return;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    char v18 = &__src[a5];
    uint64_t v20 = *(unsigned char **)(a1 + 8);
LABEL_17:
    unint64_t v21 = &__dst[a5];
    uint64_t v22 = &v20[-a5];
    uint64_t v23 = v20;
    if (&v20[-a5] < v10)
    {
      int v24 = (char *)(&v10[a5] - v20);
      uint64_t v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = v23;
    if (v20 != v21) {
      memmove(&__dst[a5], __dst, v20 - v21);
    }
    if (v18 != __src)
    {
      memmove(__dst, __src, v18 - __src);
    }
    return;
  }
  char v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  uint64_t v20 = &v10[v19];
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
}

void std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v5 = a5;
  uint64_t v6 = __src;
  long long v10 = *(unsigned char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      uint64_t v16 = operator new(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    std::string::size_type v26 = &v13[(void)v16];
    unsigned __int8 v27 = &v13[(void)v16 + v5];
    unint64_t v28 = v26;
    do
    {
      char v29 = *v6++;
      *v28++ = v29;
      --v5;
    }
    while (v5);
    uint64_t v30 = *(char **)a1;
    if (*(char **)a1 != __dst)
    {
      uint64_t v31 = __dst;
      do
      {
        char v32 = *--v31;
        *--std::string::size_type v26 = v32;
      }
      while (v31 != v30);
      long long v10 = *(unsigned char **)(a1 + 8);
    }
    int v33 = (char *)v16 + v15;
    if (v10 != __dst) {
      memmove(v27, __dst, v10 - __dst);
    }
    unint64_t v34 = *(char **)a1;
    *(void *)a1 = v26;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = &v27[v10 - __dst];
    *(void *)(a1 + 16) = v33;
    if (v34)
    {
      operator delete(v34);
    }
    return;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    char v18 = &__src[a5];
    uint64_t v20 = *(unsigned char **)(a1 + 8);
LABEL_17:
    unint64_t v21 = &__dst[v5];
    uint64_t v22 = &v20[-v5];
    uint64_t v23 = v20;
    if (&v20[-v5] < v10)
    {
      int v24 = (char *)(&v10[v5] - v20);
      uint64_t v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = v23;
    if (v20 != v21) {
      memmove(&__dst[v5], __dst, v20 - v21);
    }
    if (v18 != v6)
    {
      memmove(__dst, v6, v18 - v6);
    }
    return;
  }
  char v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  uint64_t v20 = &v10[v19];
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
}

void std::vector<unsigned char>::insert(char **a1, char *__src, unint64_t a3, char *a4)
{
  if (a3)
  {
    size_t v4 = a4;
    unint64_t v5 = a3;
    uint64_t v6 = __src;
    uint64_t v9 = a1[1];
    int v8 = a1[2];
    if (v8 - v9 >= a3)
    {
      unint64_t v16 = v9 - __src;
      unint64_t v17 = a3 - (v9 - __src);
      if (a3 <= v9 - __src)
      {
        char v18 = a1[1];
        unint64_t v20 = a3;
      }
      else
      {
        char v18 = &__src[a3];
        int64_t v19 = a1[1];
        do
        {
          *v19++ = *a4;
          --v17;
        }
        while (v17);
        a1[1] = v18;
        if (!v16) {
          return;
        }
        unint64_t v20 = v9 - __src;
      }
      unint64_t v21 = &__src[a3];
      uint64_t v22 = v18;
      if (&v18[-a3] < v9)
      {
        if (a3 <= v16) {
          unint64_t v23 = v9 - __src;
        }
        else {
          unint64_t v23 = a3;
        }
        int v24 = &__src[-a3];
        char v25 = __src;
        std::string::size_type v26 = __src;
        do
        {
          v25[v23] = v24[v23];
          ++v26;
          ++v24;
          ++v25;
        }
        while (&v26[v23 - (void)v9 - a3]);
        if (a3 > v16) {
          unint64_t v16 = a3;
        }
        uint64_t v22 = &v25[v16];
      }
      a1[1] = v22;
      if (v18 != v21) {
        memmove(&__src[a3], __src, v18 - v21);
      }
      if (v6 <= v4)
      {
        if (a1[1] <= v4) {
          unint64_t v27 = 0;
        }
        else {
          unint64_t v27 = v5;
        }
        v4 += v27;
      }
      do
      {
        *v6++ = *v4;
        --v20;
      }
      while (v20);
    }
    else
    {
      long long v10 = *a1;
      uint64_t v11 = v9 - *a1 + a3;
      if (v11 < 0) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = (char *)(__src - v10);
      unint64_t v13 = v8 - v10;
      if (2 * v13 > v11) {
        uint64_t v11 = 2 * v13;
      }
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v11;
      }
      if (v14) {
        size_t v15 = operator new(v14);
      }
      else {
        size_t v15 = 0;
      }
      unint64_t v28 = &v12[(void)v15];
      char v29 = &v12[(void)v15 + v5];
      uint64_t v30 = v28;
      do
      {
        *v30++ = *v4;
        --v5;
      }
      while (v5);
      uint64_t v31 = *a1;
      if (*a1 != v6)
      {
        char v32 = v6;
        do
        {
          char v33 = *--v32;
          *--unint64_t v28 = v33;
        }
        while (v32 != v31);
        uint64_t v9 = a1[1];
      }
      unint64_t v34 = (char *)v15 + v14;
      if (v9 != v6) {
        memmove(v29, v6, v9 - v6);
      }
      int v35 = *a1;
      *a1 = v28;
      a1[1] = &v29[v9 - v6];
      a1[2] = v34;
      if (v35)
      {
        operator delete(v35);
      }
    }
  }
}

uint64_t CoreML::Archiver::MMappedContentManager::extend_data_block<double>(uint64_t a1, uint64_t *a2, void **a3, uint64_t a4)
{
  uint64_t v4 = a4;
  int v8 = *a3;
  if (*a3)
  {
    uint64_t v9 = *(void **)(a1 + 8);
    if (!v9) {
      goto LABEL_13;
    }
    long long v10 = (uint64_t *)(a1 + 8);
    do
    {
      unint64_t v11 = v9[4];
      BOOL v12 = v11 >= (unint64_t)v8;
      if (v11 >= (unint64_t)v8) {
        unint64_t v13 = v9;
      }
      else {
        unint64_t v13 = v9 + 1;
      }
      if (v12) {
        long long v10 = v9;
      }
      uint64_t v9 = (void *)*v13;
    }
    while (*v13);
    if (v10 == (uint64_t *)(a1 + 8) || (unint64_t)v8 < v10[4]) {
LABEL_13:
    }
      long long v10 = (uint64_t *)(a1 + 8);
    unint64_t v14 = v10[5];
    if (*a2 + a4 <= v14) {
      goto LABEL_21;
    }
    unint64_t v15 = (3 * (v14 + a4)) >> 1;
    unint64_t v16 = (char *)malloc_type_realloc(v8, 8 * v15, 0x100004000313F17uLL);
    if (v16)
    {
      unint64_t v17 = v16;
      bzero(&v16[8 * v10[5]], 8 * (v15 - v10[5]));
      if (v17 == *a3)
      {
        v10[5] = v15;
      }
      else
      {
        *a3 = v17;
        std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__remove_node_pointer((uint64_t **)a1, v10);
        operator delete(v10);
        *(void *)&long long v23 = *a3;
        *((void *)&v23 + 1) = v15;
        std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::pair<void * const,unsigned long>>((uint64_t *)a1, v23, &v23);
      }
LABEL_21:
      uint64_t result = *a2;
      v4 += *a2;
      goto LABEL_22;
    }
LABEL_23:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v22 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v22, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
  }
  char v18 = malloc_type_calloc(16 * a4, 8uLL, 0x100004000313F17uLL);
  *a3 = v18;
  if (!v18) {
    goto LABEL_23;
  }
  *(void *)&long long v23 = v18;
  int64_t v19 = std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)a1, (unint64_t)v18, (uint64_t *)&v23);
  uint64_t result = 0;
  v19[5] = 16 * v4;
LABEL_22:
  *a2 = v4;
  return result;
}

void CoreML::Archiver::MMappedContentManager::~MMappedContentManager(CoreML::Archiver::MMappedContentManager **this)
{
  uint64_t v2 = this + 1;
  uint64_t v3 = *this;
  if (*this != (CoreML::Archiver::MMappedContentManager *)(this + 1))
  {
    do
    {
      free(*((void **)v3 + 4));
      uint64_t v4 = (CoreML::Archiver::MMappedContentManager *)*((void *)v3 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = (CoreML::Archiver::MMappedContentManager **)v4;
          uint64_t v4 = *(CoreML::Archiver::MMappedContentManager **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (CoreML::Archiver::MMappedContentManager **)*((void *)v3 + 2);
          BOOL v6 = *v5 == v3;
          uint64_t v3 = (CoreML::Archiver::MMappedContentManager *)v5;
        }
        while (!v6);
      }
      uint64_t v3 = (CoreML::Archiver::MMappedContentManager *)v5;
    }
    while (v5 != v2);
  }
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(this[1]);
}

CoreML::Archiver::MMappedContentManager **CoreML::TreeEnsembles::Internal::CTEnsemble<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>>::~CTEnsemble(CoreML::Archiver::MMappedContentManager **a1)
{
  return a1;
}

void std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(*a1);
    std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v5 = (char *)a1[1];
    BOOL v6 = operator new(__sz);
    int v7 = &v5[(void)v6 - v2];
    int v8 = v7;
    if (v5 != (char *)v2)
    {
      uint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      int v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

uint64_t CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(uint64_t a1, uint64_t *a2, void **a3, uint64_t a4)
{
  uint64_t v4 = a4;
  int v8 = *a3;
  if (*a3)
  {
    uint64_t v9 = *(void **)(a1 + 8);
    if (!v9) {
      goto LABEL_13;
    }
    char v10 = (uint64_t *)(a1 + 8);
    do
    {
      unint64_t v11 = v9[4];
      BOOL v12 = v11 >= (unint64_t)v8;
      if (v11 >= (unint64_t)v8) {
        unint64_t v13 = v9;
      }
      else {
        unint64_t v13 = v9 + 1;
      }
      if (v12) {
        char v10 = v9;
      }
      uint64_t v9 = (void *)*v13;
    }
    while (*v13);
    if (v10 == (uint64_t *)(a1 + 8) || (unint64_t)v8 < v10[4]) {
LABEL_13:
    }
      char v10 = (uint64_t *)(a1 + 8);
    unint64_t v14 = v10[5];
    if (*a2 + a4 <= v14) {
      goto LABEL_21;
    }
    size_t v15 = (3 * (v14 + a4)) >> 1;
    unint64_t v16 = (char *)malloc_type_realloc(v8, v15, 0x100004077774924uLL);
    if (v16)
    {
      unint64_t v17 = v16;
      bzero(&v16[v10[5]], v15 - v10[5]);
      if (v17 == *a3)
      {
        v10[5] = v15;
      }
      else
      {
        *a3 = v17;
        std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__remove_node_pointer((uint64_t **)a1, v10);
        operator delete(v10);
        *(void *)&long long v23 = *a3;
        *((void *)&v23 + 1) = v15;
        std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::pair<void * const,unsigned long>>((uint64_t *)a1, v23, &v23);
      }
LABEL_21:
      uint64_t result = *a2;
      v4 += *a2;
      goto LABEL_22;
    }
LABEL_23:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v22 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v22, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
  }
  char v18 = malloc_type_calloc(16 * a4, 1uLL, 0x100004077774924uLL);
  *a3 = v18;
  if (!v18) {
    goto LABEL_23;
  }
  *(void *)&long long v23 = v18;
  int64_t v19 = std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)a1, (unint64_t)v18, (uint64_t *)&v23);
  uint64_t result = 0;
  v19[5] = 16 * v4;
LABEL_22:
  *a2 = v4;
  return result;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v60 = *(void *)(a2 + 32) * v10;
  unint64_t v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v60, (void **)(a2 + 40), v10);
  ++*(void *)(a2 + 32);
  uint64_t v12 = *(unsigned int *)(a2 + 52);
  unint64_t v13 = *(void *)(*(void *)(a2 + 72) + ((unint64_t)(v12 * a4) >> 3));
  BOOL v25 = v12 == 64;
  uint64_t v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (!v25) {
    unint64_t v13 = v14;
  }
  uint64_t v15 = *a5;
  unint64_t v16 = *(double **)(*a5 + 120);
  unint64_t v17 = *(std::__shared_weak_count **)(*a5 + 128);
  int v18 = *(unsigned __int8 *)v16;
  int64_t v19 = *(double **)(*a5 + 136);
  int v20 = *(unsigned __int8 *)v19;
  int v21 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v22 = *(unsigned char *)(*a5 + 64) == 0;
  int v23 = *(_DWORD *)(*a5 + 4);
  unint64_t v60 = (unint64_t)v16;
  uint64_t v61 = v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a5;
    int64_t v19 = *(double **)(*a5 + 136);
  }
  int v24 = *(std::__shared_weak_count **)(v15 + 144);
  int8x16_t v58 = v19;
  long long v59 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18) {
    BOOL v25 = v20 == 0;
  }
  else {
    BOOL v25 = 0;
  }
  int v26 = v25;
  if ((v20 | v18 || v16[3] >= v19[3]) && (BOOL v27 = v21 != 0, !v26))
  {
    char v29 = v17;
    unint64_t v17 = v24;
    uint64_t v30 = (long long **)v19;
    int64_t v19 = v16;
    int v31 = v18;
    int v18 = v20;
    BOOL v22 = v27;
  }
  else
  {
    unsigned int v28 = v23 - 1;
    if (v28 > 4) {
      int v23 = 3;
    }
    else {
      int v23 = dword_19EC7C9B0[v28];
    }
    unint64_t v60 = (unint64_t)v19;
    uint64_t v61 = v24;
    char v29 = v24;
    uint64_t v30 = (long long **)v16;
    int v31 = v20;
    int8x16_t v58 = v16;
    long long v59 = v17;
  }
  unsigned int v32 = *(unsigned __int8 *)(a2 + 13);
  unint64_t v33 = v11 / v10;
  if (v32 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1) {
        goto LABEL_33;
      }
      goto LABEL_28;
    }
LABEL_29:
    int v34 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v37 = *(_DWORD *)(a3 + 16);
    unsigned int v38 = (*v35 >> v34) & v37 | 8;
    goto LABEL_30;
  }
  if (v32 > 1)
  {
    int v41 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v42 = *(_DWORD *)(a3 + 16);
    unsigned int v39 = (v42 & (*v35 >> v41) & 0xFFFFFFC7 | (8 * v23)) << v41;
    int v40 = v42 << v41;
    goto LABEL_32;
  }
  if (v23 == 3) {
    goto LABEL_29;
  }
  if (!v23)
  {
LABEL_28:
    int v34 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v37 = *(_DWORD *)(a3 + 16);
    unsigned int v38 = (*v35 >> v34) & v37 & 0xFFFFFFF7;
LABEL_30:
    unsigned int v39 = v38 << v34;
    int v40 = v37 << v34;
LABEL_32:
    unsigned int *v35 = v39 | v36 & ~v40;
  }
LABEL_33:
  uint64_t v43 = v13 + a4;
  if (v22) {
    int v45 = 4;
  }
  else {
    int v45 = 0;
  }
  unint64_t v44 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v44 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v44 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v45) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v44 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v46 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v46 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v46 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v31) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v46 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v47 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v18 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v31 && v18)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, *((long long **)v19 + 10), *((long long **)v19 + 11), (uint64_t)(*((void *)v19 + 11) - *((void *)v19 + 10)) >> 4);
    unint64_t v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, __p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v56, 0, sizeof(v56));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v56, v30[10], v30[11], v30[11] - v30[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, v56);
    if (v56[0]) {
      operator delete(v56[0]);
    }
    unint64_t v49 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v49 + *(unsigned int *)(a3 + 20)) = *(void *)(v49 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v48 - v43) << *(_DWORD *)(a3 + 24));
  }
  else if (v31 || !v18)
  {
    if (!(v18 | v31))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, a4, &v60);
      uint64_t v52 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, a4, &v58);
      unint64_t v53 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
      *(void *)(v53 + *(unsigned int *)(a3 + 20)) = *(void *)(v53 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v52 - v33) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    memset(v55, 0, sizeof(v55));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v55, v30[10], v30[11], v30[11] - v30[10]);
    unint64_t v50 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, v55);
    if (v55[0]) {
      operator delete(v55[0]);
    }
    unint64_t v51 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v51 + *(unsigned int *)(a3 + 20)) = *(void *)(v51 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v50 - v43) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, a4, &v60);
  }
  *(void *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4)) = *(void *)(*(void *)(a2 + 40)
                                                                                      + v33
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(void *)a3 | *(void *)(*a5 + 8);
  *(void *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 40)) = *(void *)(*a5 + 16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  return v33;
}

void sub_19E966D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    uint64_t result = std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__vallocate[abi:ne180100](result, a4);
    int v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_19E966E14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, void *a3)
{
  *((void *)&v22 + 1) = *MEMORY[0x1E4F143B8];
  if (*a3 == a3[1])
  {
    long long v21 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v21, &v22);
  }
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t v20 = 0;
  std::vector<double>::vector(&v21, v6, &v20);
  int v7 = (uint64_t *)v21;
  uint64_t v8 = a3[1] - *a3;
  if (v8)
  {
    unint64_t v9 = v8 >> 4;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    unint64_t v10 = (uint64_t *)(*a3 + 8);
    do
    {
      uint64_t v11 = *(v10 - 1);
      uint64_t v12 = *v10;
      v10 += 2;
      v7[v11] = v12;
      --v9;
    }
    while (v9);
  }
  uint64_t v13 = *v7;
  unint64_t v14 = CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1);
  *(void *)(*(void *)(a1 + 224) + 8 * v14) = v13;
  uint64_t v15 = (void *)v21;
  if (*((void *)&v21 + 1) - (void)v21 >= 9uLL)
  {
    unint64_t v16 = 1;
    do
    {
      uint64_t v17 = v15[v16];
      *(void *)(*(void *)(a1 + 224)
                + 8
                * CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1)) = v17;
      ++v16;
      uint64_t v15 = (void *)v21;
    }
    while (v16 < (uint64_t)(*((void *)&v21 + 1) - v21) >> 3);
  }
  unint64_t v18 = *(void *)(a1 + 24);
  if (v15)
  {
    *((void *)&v21 + 1) = v15;
    operator delete(v15);
  }
  return v14 / v18;
}

void sub_19E966F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(void *a1, long long *a2, long long *a3)
{
  uint64_t v4 = a2;
  uint64_t result = (char *)a1[2];
  int v7 = (char *)*a1;
  if (result == (char *)*a1)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    uint64_t result = std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__vallocate[abi:ne180100](a1, 1uLL);
    uint64_t v12 = (char *)a1[1];
    unint64_t v9 = a1 + 1;
    int v7 = v12;
    uint64_t v11 = v12;
    if (v4 != a3)
    {
      uint64_t v11 = v7;
      do
      {
        long long v13 = *v4++;
        *(_OWORD *)uint64_t v11 = v13;
        v11 += 16;
      }
      while (v4 != a3);
    }
    goto LABEL_11;
  }
  unint64_t v10 = (char *)a1[1];
  unint64_t v9 = a1 + 1;
  uint64_t v8 = v10;
  if (v10 != v7)
  {
    uint64_t v11 = v7;
    while (v4 != a3)
    {
      *(void *)uint64_t v11 = *(void *)v4;
      *((void *)v11 + 1) = *((void *)v4 + 1);
      v11 += 16;
      ++v4;
    }
LABEL_11:
    unint64_t v14 = (char *)(v11 - v7);
    goto LABEL_18;
  }
  if (a2 == a3)
  {
    uint64_t v15 = v8;
  }
  else
  {
    uint64_t v15 = v7;
    do
    {
      long long v16 = *v4++;
      *(_OWORD *)uint64_t v15 = v16;
      v15 += 16;
    }
    while (v4 != a3);
  }
  unint64_t v14 = (char *)(v15 - v8);
LABEL_18:
  *unint64_t v9 = &v14[(void)v7];
  return result;
}

void *std::vector<double>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<_KDInterval>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    int v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_19E967118(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)operator new(0x30uLL);
    v9[4] = *a3;
    v9[5] = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

uint64_t *std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  unint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      unint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  unint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
}

uint64_t *std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::pair<void * const,unsigned long>>(uint64_t *result, unint64_t a2, _OWORD *a3)
{
  uint64_t v4 = (uint64_t **)result;
  unint64_t v6 = (uint64_t **)(result + 1);
  BOOL v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        BOOL v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      BOOL v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = (uint64_t **)(result + 1);
LABEL_9:
    unint64_t v9 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v9 + 2) = *a3;
    return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t **std::set<CoreML::TreeEnsembleBase::BranchMode>::set[abi:ne180100]<CoreML::TreeEnsembleBase::BranchMode const*>(uint64_t **a1, int *a2, int *a3)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    int v7 = 0;
    unint64_t v8 = a1 + 1;
    while (1)
    {
      unint64_t v9 = v4;
      if (v8 == (uint64_t **)v4) {
        goto LABEL_9;
      }
      unint64_t v10 = v7;
      uint64_t v11 = v4;
      if (v7)
      {
        do
        {
          unint64_t v9 = v10;
          unint64_t v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      int v13 = *v6;
      if (*((_DWORD *)v9 + 7) < *v6)
      {
LABEL_9:
        unint64_t v14 = v7 ? v9 : v4;
        uint64_t v15 = v7 ? v9 + 1 : v4;
      }
      else
      {
        unint64_t v14 = v4;
        uint64_t v15 = v4;
        if (v7)
        {
          uint64_t v15 = v4;
          while (1)
          {
            while (1)
            {
              unint64_t v14 = v7;
              int v18 = *((_DWORD *)v7 + 7);
              if (v13 >= v18) {
                break;
              }
              int v7 = (uint64_t *)*v14;
              uint64_t v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v18 >= v13) {
              break;
            }
            uint64_t v15 = v14 + 1;
            int v7 = (uint64_t *)v14[1];
            if (!v7) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        long long v16 = operator new(0x20uLL);
        v16[7] = *v6;
        *(void *)long long v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v14;
        *uint64_t v15 = (uint64_t)v16;
        uint64_t v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          long long v16 = (_DWORD *)*v15;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      if (++v6 == a3) {
        break;
      }
      unint64_t v8 = (uint64_t **)*a1;
      int v7 = a1[1];
    }
  }
  return a1;
}

void sub_19E967444(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v60 = *(void *)(a2 + 32) * v10;
  unint64_t v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v60, (void **)(a2 + 40), v10);
  ++*(void *)(a2 + 32);
  uint64_t v12 = *(unsigned int *)(a2 + 164);
  unint64_t v13 = *(void *)(*(void *)(a2 + 184) + ((unint64_t)(v12 * a4) >> 3));
  BOOL v26 = v12 == 64;
  uint64_t v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (v26) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = *a5;
  uint64_t v17 = *(double **)(*a5 + 120);
  int v18 = *(std::__shared_weak_count **)(*a5 + 128);
  int v19 = *(unsigned __int8 *)v17;
  uint64_t v20 = *(double **)(*a5 + 136);
  int v21 = *(unsigned __int8 *)v20;
  int v22 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v23 = *(unsigned char *)(*a5 + 64) == 0;
  int v24 = *(_DWORD *)(*a5 + 4);
  unint64_t v60 = (unint64_t)v17;
  uint64_t v61 = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = *a5;
    uint64_t v20 = *(double **)(*a5 + 136);
  }
  BOOL v25 = *(std::__shared_weak_count **)(v16 + 144);
  int8x16_t v58 = v20;
  long long v59 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v19) {
    BOOL v26 = v21 == 0;
  }
  else {
    BOOL v26 = 0;
  }
  int v27 = v26;
  if ((v21 | v19 || v17[3] >= v20[3]) && (BOOL v28 = v22 != 0, !v27))
  {
    uint64_t v30 = v18;
    int v18 = v25;
    int v31 = (long long **)v20;
    uint64_t v20 = v17;
    int v32 = v19;
    int v19 = v21;
    BOOL v23 = v28;
  }
  else
  {
    unsigned int v29 = v24 - 1;
    if (v29 > 4) {
      int v24 = 3;
    }
    else {
      int v24 = dword_19EC7C9B0[v29];
    }
    unint64_t v60 = (unint64_t)v20;
    uint64_t v61 = v25;
    uint64_t v30 = v25;
    int v31 = (long long **)v17;
    int v32 = v21;
    int8x16_t v58 = v17;
    long long v59 = v18;
  }
  unsigned int v33 = *(unsigned __int8 *)(a2 + 13);
  unint64_t v34 = v11 / v10;
  if (v33 - 2 < 2)
  {
    if (v24 != 2)
    {
      if (v24 != 1) {
        goto LABEL_34;
      }
      goto LABEL_29;
    }
LABEL_30:
    int v35 = *(_DWORD *)(a3 + 12);
    unsigned int v36 = (unsigned int *)(*(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v37 = *v36;
    int v38 = *(_DWORD *)(a3 + 16);
    unsigned int v39 = (*v36 >> v35) & v38 | 8;
    goto LABEL_31;
  }
  if (v33 > 1)
  {
    int v42 = *(_DWORD *)(a3 + 12);
    unsigned int v36 = (unsigned int *)(*(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v37 = *v36;
    int v43 = *(_DWORD *)(a3 + 16);
    unsigned int v40 = (v43 & (*v36 >> v42) & 0xFFFFFFC7 | (8 * v24)) << v42;
    int v41 = v43 << v42;
    goto LABEL_33;
  }
  if (v24 == 3) {
    goto LABEL_30;
  }
  if (!v24)
  {
LABEL_29:
    int v35 = *(_DWORD *)(a3 + 12);
    unsigned int v36 = (unsigned int *)(*(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v37 = *v36;
    int v38 = *(_DWORD *)(a3 + 16);
    unsigned int v39 = (*v36 >> v35) & v38 & 0xFFFFFFF7;
LABEL_31:
    unsigned int v40 = v39 << v35;
    int v41 = v38 << v35;
LABEL_33:
    *unsigned int v36 = v40 | v37 & ~v41;
  }
LABEL_34:
  if (v23) {
    int v45 = 4;
  }
  else {
    int v45 = 0;
  }
  unint64_t v44 = *(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v44 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v44 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v45) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v44 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v46 = *(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v46 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v46 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v32) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v46 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v47 = *(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v19 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v32 && v19)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, *((long long **)v20 + 10), *((long long **)v20 + 11), (uint64_t)(*((void *)v20 + 11) - *((void *)v20 + 10)) >> 4);
    uint64_t v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)__p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v56, 0, sizeof(v56));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v56, v31[10], v31[11], v31[11] - v31[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)v56);
    if (v56[0]) {
      operator delete(v56[0]);
    }
    unint64_t v49 = *(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v49 + *(unsigned int *)(a3 + 20)) = *(void *)(v49 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v48 - v15) << *(_DWORD *)(a3 + 24));
  }
  else if (v32 || !v19)
  {
    if (!(v19 | v32))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, a4, &v60);
      uint64_t v52 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, a4, &v58);
      unint64_t v53 = *(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4);
      *(void *)(v53 + *(unsigned int *)(a3 + 20)) = *(void *)(v53 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v52 - v34) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    memset(v55, 0, sizeof(v55));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v55, v31[10], v31[11], v31[11] - v31[10]);
    uint64_t v50 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)v55);
    if (v55[0]) {
      operator delete(v55[0]);
    }
    unint64_t v51 = *(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v51 + *(unsigned int *)(a3 + 20)) = *(void *)(v51 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v50 - v15) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, a4, &v60);
  }
  *(void *)(*(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4)) = *(void *)(*(void *)(a2 + 40)
                                                                                      + v34
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(void *)a3 | *(void *)(*a5 + 8);
  *(void *)(*(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 40)) = *(void *)(*a5 + 16);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  return v34;
}

void sub_19E9679A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)&long long v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 == v7)
  {
    long long v17 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v17, &v18);
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
  }
  uint64_t v8 = v7 - v6;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = v8 >> 4;
  do
  {
    uint64_t v13 = *(void *)(v6 + v9);
    if (v10 == v12 - 1) {
      v13 |= 1 << (*(unsigned char *)(a1 + 11) - 1);
    }
    uint64_t v14 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), v13);
    uint64_t v15 = *(void *)(*a3 + v9 + 8);
    *(void *)(*(void *)(a1 + 224)
              + 8
              * CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1)) = v15;
    if (!v10) {
      uint64_t v11 = v14;
    }
    ++v10;
    uint64_t v6 = *a3;
    unint64_t v12 = (a3[1] - *a3) >> 4;
    v9 += 16;
  }
  while (v10 < v12);
  return v11;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v60 = *(void *)(a2 + 32) * v10;
  unint64_t v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v60, (void **)(a2 + 40), v10);
  ++*(void *)(a2 + 32);
  uint64_t v12 = *(unsigned int *)(a2 + 52);
  unint64_t v13 = *(void *)(*(void *)(a2 + 72) + ((unint64_t)(v12 * a4) >> 3));
  BOOL v25 = v12 == 64;
  uint64_t v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (!v25) {
    unint64_t v13 = v14;
  }
  uint64_t v15 = *a5;
  uint64_t v16 = *(double **)(*a5 + 120);
  long long v17 = *(std::__shared_weak_count **)(*a5 + 128);
  int v18 = *(unsigned __int8 *)v16;
  int v19 = *(double **)(*a5 + 136);
  int v20 = *(unsigned __int8 *)v19;
  int v21 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v22 = *(unsigned char *)(*a5 + 64) == 0;
  int v23 = *(_DWORD *)(*a5 + 4);
  unint64_t v60 = (unint64_t)v16;
  uint64_t v61 = v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a5;
    int v19 = *(double **)(*a5 + 136);
  }
  int v24 = *(std::__shared_weak_count **)(v15 + 144);
  int8x16_t v58 = v19;
  long long v59 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18) {
    BOOL v25 = v20 == 0;
  }
  else {
    BOOL v25 = 0;
  }
  int v26 = v25;
  if ((v20 | v18 || v16[3] >= v19[3]) && (BOOL v27 = v21 != 0, !v26))
  {
    unsigned int v29 = v17;
    long long v17 = v24;
    uint64_t v30 = (long long **)v19;
    int v19 = v16;
    int v31 = v18;
    int v18 = v20;
    BOOL v22 = v27;
  }
  else
  {
    unsigned int v28 = v23 - 1;
    if (v28 > 4) {
      int v23 = 3;
    }
    else {
      int v23 = dword_19EC7C9B0[v28];
    }
    unint64_t v60 = (unint64_t)v19;
    uint64_t v61 = v24;
    unsigned int v29 = v24;
    uint64_t v30 = (long long **)v16;
    int v31 = v20;
    int8x16_t v58 = v16;
    long long v59 = v17;
  }
  unsigned int v32 = *(unsigned __int8 *)(a2 + 13);
  unint64_t v33 = v11 / v10;
  if (v32 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1) {
        goto LABEL_33;
      }
      goto LABEL_28;
    }
LABEL_29:
    int v34 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v37 = *(_DWORD *)(a3 + 16);
    unsigned int v38 = (*v35 >> v34) & v37 | 8;
    goto LABEL_30;
  }
  if (v32 > 1)
  {
    int v41 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v42 = *(_DWORD *)(a3 + 16);
    unsigned int v39 = (v42 & (*v35 >> v41) & 0xFFFFFFC7 | (8 * v23)) << v41;
    int v40 = v42 << v41;
    goto LABEL_32;
  }
  if (v23 == 3) {
    goto LABEL_29;
  }
  if (!v23)
  {
LABEL_28:
    int v34 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v37 = *(_DWORD *)(a3 + 16);
    unsigned int v38 = (*v35 >> v34) & v37 & 0xFFFFFFF7;
LABEL_30:
    unsigned int v39 = v38 << v34;
    int v40 = v37 << v34;
LABEL_32:
    unsigned int *v35 = v39 | v36 & ~v40;
  }
LABEL_33:
  uint64_t v43 = v13 + a4;
  if (v22) {
    int v45 = 4;
  }
  else {
    int v45 = 0;
  }
  unint64_t v44 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v44 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v44 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v45) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v44 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v46 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v46 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v46 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v31) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v46 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v47 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v18 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v31 && v18)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, *((long long **)v19 + 10), *((long long **)v19 + 11), (uint64_t)(*((void *)v19 + 11) - *((void *)v19 + 10)) >> 4);
    uint64_t v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)__p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v56, 0, sizeof(v56));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v56, v30[10], v30[11], v30[11] - v30[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)v56);
    if (v56[0]) {
      operator delete(v56[0]);
    }
    unint64_t v49 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v49 + *(unsigned int *)(a3 + 20)) = *(void *)(v49 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v48 - v43) << *(_DWORD *)(a3 + 24));
  }
  else if (v31 || !v18)
  {
    if (!(v18 | v31))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, a4, &v60);
      uint64_t v52 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, a4, &v58);
      unint64_t v53 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
      *(void *)(v53 + *(unsigned int *)(a3 + 20)) = *(void *)(v53 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v52 - v33) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    memset(v55, 0, sizeof(v55));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v55, v30[10], v30[11], v30[11] - v30[10]);
    uint64_t v50 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)v55);
    if (v55[0]) {
      operator delete(v55[0]);
    }
    unint64_t v51 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v51 + *(unsigned int *)(a3 + 20)) = *(void *)(v51 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v50 - v43) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, a4, &v60);
  }
  *(void *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4)) = *(void *)(*(void *)(a2 + 40)
                                                                                      + v33
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(void *)a3 | *(void *)(*a5 + 8);
  *(void *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 40)) = *(void *)(*a5 + 16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  return v33;
}

void sub_19E9680C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  *(void *)&long long v13 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 == v7)
  {
    long long v12 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v12, &v13);
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
  }
  if ((char *)v7 - (char *)v6 != 16)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  uint64_t v8 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), *v6);
  uint64_t v9 = (*a3)[1];
  *(void *)(*(void *)(a1 + 224)
            + 8
            * CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1)) = v9;
  return v8;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v60 = *(void *)(a2 + 32) * v10;
  unint64_t v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v60, (void **)(a2 + 40), v10);
  ++*(void *)(a2 + 32);
  uint64_t v12 = *(unsigned int *)(a2 + 52);
  unint64_t v13 = *(void *)(*(void *)(a2 + 72) + ((unint64_t)(v12 * a4) >> 3));
  BOOL v25 = v12 == 64;
  uint64_t v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (!v25) {
    unint64_t v13 = v14;
  }
  uint64_t v15 = *a5;
  uint64_t v16 = *(double **)(*a5 + 120);
  long long v17 = *(std::__shared_weak_count **)(*a5 + 128);
  int v18 = *(unsigned __int8 *)v16;
  int v19 = *(double **)(*a5 + 136);
  int v20 = *(unsigned __int8 *)v19;
  int v21 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v22 = *(unsigned char *)(*a5 + 64) == 0;
  int v23 = *(_DWORD *)(*a5 + 4);
  unint64_t v60 = (unint64_t)v16;
  uint64_t v61 = v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a5;
    int v19 = *(double **)(*a5 + 136);
  }
  int v24 = *(std::__shared_weak_count **)(v15 + 144);
  int8x16_t v58 = v19;
  long long v59 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18) {
    BOOL v25 = v20 == 0;
  }
  else {
    BOOL v25 = 0;
  }
  int v26 = v25;
  if ((v20 | v18 || v16[3] >= v19[3]) && (BOOL v27 = v21 != 0, !v26))
  {
    unsigned int v29 = v17;
    long long v17 = v24;
    uint64_t v30 = (long long **)v19;
    int v19 = v16;
    int v31 = v18;
    int v18 = v20;
    BOOL v22 = v27;
  }
  else
  {
    unsigned int v28 = v23 - 1;
    if (v28 > 4) {
      int v23 = 3;
    }
    else {
      int v23 = dword_19EC7C9B0[v28];
    }
    unint64_t v60 = (unint64_t)v19;
    uint64_t v61 = v24;
    unsigned int v29 = v24;
    uint64_t v30 = (long long **)v16;
    int v31 = v20;
    int8x16_t v58 = v16;
    long long v59 = v17;
  }
  unsigned int v32 = *(unsigned __int8 *)(a2 + 13);
  unint64_t v33 = v11 / v10;
  if (v32 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1) {
        goto LABEL_33;
      }
      goto LABEL_28;
    }
LABEL_29:
    int v34 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v37 = *(_DWORD *)(a3 + 16);
    unsigned int v38 = (*v35 >> v34) & v37 | 8;
    goto LABEL_30;
  }
  if (v32 > 1)
  {
    int v41 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v42 = *(_DWORD *)(a3 + 16);
    unsigned int v39 = (v42 & (*v35 >> v41) & 0xFFFFFFC7 | (8 * v23)) << v41;
    int v40 = v42 << v41;
    goto LABEL_32;
  }
  if (v23 == 3) {
    goto LABEL_29;
  }
  if (!v23)
  {
LABEL_28:
    int v34 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v37 = *(_DWORD *)(a3 + 16);
    unsigned int v38 = (*v35 >> v34) & v37 & 0xFFFFFFF7;
LABEL_30:
    unsigned int v39 = v38 << v34;
    int v40 = v37 << v34;
LABEL_32:
    unsigned int *v35 = v39 | v36 & ~v40;
  }
LABEL_33:
  uint64_t v43 = v13 + a4;
  if (v22) {
    int v45 = 4;
  }
  else {
    int v45 = 0;
  }
  unint64_t v44 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v44 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v44 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v45) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v44 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v46 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v46 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v46 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v31) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v46 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v47 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v18 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v31 && v18)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, *((long long **)v19 + 10), *((long long **)v19 + 11), (uint64_t)(*((void *)v19 + 11) - *((void *)v19 + 10)) >> 4);
    uint64_t v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, __p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v56, 0, sizeof(v56));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v56, v30[10], v30[11], v30[11] - v30[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, v56);
    if (v56[0]) {
      operator delete(v56[0]);
    }
    unint64_t v49 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v49 + *(unsigned int *)(a3 + 20)) = *(void *)(v49 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v48 - v43) << *(_DWORD *)(a3 + 24));
  }
  else if (v31 || !v18)
  {
    if (!(v18 | v31))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, a4, &v60);
      uint64_t v52 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, a4, &v58);
      unint64_t v53 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
      *(void *)(v53 + *(unsigned int *)(a3 + 20)) = *(void *)(v53 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v52 - v33) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    memset(v55, 0, sizeof(v55));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v55, v30[10], v30[11], v30[11] - v30[10]);
    uint64_t v50 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, v55);
    if (v55[0]) {
      operator delete(v55[0]);
    }
    unint64_t v51 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v51 + *(unsigned int *)(a3 + 20)) = *(void *)(v51 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v50 - v43) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, a4, &v60);
  }
  *(void *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4)) = *(void *)(*(void *)(a2 + 40)
                                                                                      + v33
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(void *)a3 | *(void *)(*a5 + 8);
  *(void *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 40)) = *(void *)(*a5 + 16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  return v33;
}

void sub_19E968770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&long long v12 = *MEMORY[0x1E4F143B8];
  BOOL v5 = (void *)*a3;
  uint64_t v6 = a3[1];
  if (*a3 == v6)
  {
    long long v11 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v11, &v12);
    BOOL v5 = (void *)*a3;
    uint64_t v6 = a3[1];
  }
  if (v6 - (void)v5 != 16 || *v5)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  uint64_t v8 = v5[1];
  uint64_t result = CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1);
  *(void *)(*(void *)(a1 + 224) + 8 * result) = v8;
  return result;
}

unint64_t CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(unint64_t result)
{
  if (HIDWORD(result))
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  return result;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v74 = *(void *)(a2 + 32) * v9;
  unint64_t v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v74, (void **)(a2 + 40), v9);
  ++*(void *)(a2 + 32);
  unint64_t v63 = a4;
  unsigned int v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  unsigned int v12 = *(_DWORD *)(a2 + 52);
  unint64_t v13 = v12 * (unint64_t)v11;
  BOOL v24 = v12 == 64;
  uint64_t v14 = (*(void *)(*(void *)(a2 + 72) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v24) {
    uint64_t v14 = *(void *)(*(void *)(a2 + 72) + (v13 >> 3));
  }
  int v64 = v14;
  uint64_t v15 = *a5;
  long long v17 = *(long long ***)(*a5 + 120);
  uint64_t v16 = *(std::__shared_weak_count **)(*a5 + 128);
  int v18 = *(unsigned __int8 *)v17;
  int v19 = *(double **)(*a5 + 136);
  int v20 = *(unsigned __int8 *)v19;
  int v21 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v67 = *(unsigned char *)(*a5 + 64) == 0;
  int v22 = *(_DWORD *)(*a5 + 4);
  unint64_t v74 = (unint64_t)v17;
  int v75 = v16;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a5;
    int v19 = *(double **)(*a5 + 136);
  }
  int v23 = *(std::__shared_weak_count **)(v15 + 144);
  unsigned int v72 = v19;
  int8x8_t v73 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18) {
    BOOL v24 = v20 == 0;
  }
  else {
    BOOL v24 = 0;
  }
  int v25 = v24;
  unint64_t v26 = v10 / v9;
  std::string v68 = a5;
  if ((v20 | v18 || *((double *)v17 + 3) >= v19[3]) && (BOOL v27 = v21 != 0, !v25))
  {
    uint64_t v65 = v16;
    uint64_t v16 = v23;
    unsigned int v28 = v17;
    long long v17 = (long long **)v19;
    int v29 = v18;
    int v18 = v20;
    BOOL v67 = v27;
  }
  else
  {
    if ((v22 - 1) > 4) {
      int v22 = 3;
    }
    else {
      int v22 = dword_19EC7C9B0[v22 - 1];
    }
    unint64_t v74 = (unint64_t)v19;
    int v75 = v23;
    uint64_t v65 = v23;
    unsigned int v28 = (long long **)v19;
    int v29 = v20;
    unsigned int v72 = (double *)v17;
    int8x8_t v73 = v16;
  }
  unsigned int v30 = *(unsigned __int8 *)(a2 + 13);
  if (v30 - 2 < 2)
  {
    if (v22 != 2)
    {
      if (v22 != 1) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
LABEL_30:
    int v38 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    int v32 = a3[2];
    unint64_t v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v38 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v34 = *v33;
    int v35 = a3[3];
    unsigned int v36 = (*v33 >> v32) & v35 | 8;
    goto LABEL_31;
  }
  if (v30 > 1)
  {
    int v37 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    int v32 = a3[2];
    unint64_t v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v37 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v34 = *v33;
    int v35 = a3[3];
    unsigned int v36 = v35 & (*v33 >> v32) & 0xFFFFFFC7 | (8 * v22);
    goto LABEL_31;
  }
  if (v22 == 3) {
    goto LABEL_30;
  }
  if (v22) {
    goto LABEL_32;
  }
LABEL_28:
  int v31 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
  int v32 = a3[2];
  unint64_t v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v31 * *(unsigned __int16 *)(a2 + 4));
  unsigned int v34 = *v33;
  int v35 = a3[3];
  unsigned int v36 = (*v33 >> v32) & v35 & 0xFFFFFFF7;
LABEL_31:
  *unint64_t v33 = (v36 << v32) | v34 & ~(v35 << v32);
LABEL_32:
  uint64_t v39 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  if (v67) {
    int v40 = 4;
  }
  else {
    int v40 = 0;
  }
  *(_DWORD *)(v39 + (int)a3[1]) = (((*(_DWORD *)(v39 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v40) << a3[2]) | *(_DWORD *)(v39 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v41 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v41 + (int)a3[1]) = (((*(_DWORD *)(v41 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v29) << a3[2]) | *(_DWORD *)(v41 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v42 = v11 + v64;
  uint64_t v43 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v43 + (int)a3[1]) = (((*(_DWORD *)(v43 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v43 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v29 && v18)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, v28[10], v28[11], v28[11] - v28[10]);
    unsigned int v44 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, __p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v70, 0, sizeof(v70));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v70, v17[10], v17[11], v17[11] - v17[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, v70);
    if (v70[0]) {
      operator delete(v70[0]);
    }
    int v45 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    uint64_t v46 = *(void *)(a2 + 40);
    int v47 = *(unsigned __int16 *)(a2 + 4);
    int v48 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v44 - v42);
    uint64_t v49 = v46 + (v45 * v47);
    goto LABEL_42;
  }
  if (v29 || !v18)
  {
    if (!(v18 | v29))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, v63, &v74);
      uint64_t v58 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, v63, &v72);
      int v59 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
      uint64_t v60 = *(void *)(a2 + 40);
      int v61 = *(unsigned __int16 *)(a2 + 4);
      unsigned int v62 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v58 - v26);
      int v48 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v62);
      uint64_t v49 = v60 + (v59 * v61);
LABEL_42:
      *(_DWORD *)(v49 + a3[4]) = *(_DWORD *)(v49 + a3[4]) & ~(a3[6] << a3[5]) | (v48 << a3[5]);
    }
  }
  else
  {
    memset(v69, 0, sizeof(v69));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v69, v17[10], v17[11], v17[11] - v17[10]);
    unsigned int v50 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, v69);
    if (v69[0]) {
      operator delete(v69[0]);
    }
    int v51 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    uint64_t v52 = *(void *)(a2 + 40);
    int v53 = *(unsigned __int16 *)(a2 + 4);
    *(_DWORD *)(v52 + (v51 * v53) + a3[4]) = *(_DWORD *)(v52
                                                                                   + (v51 * v53)
                                                                                   + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v50 - v42) << a3[5]);
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, v63, &v74);
  }
  int v54 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
  uint64_t v55 = *(void *)(a2 + 40);
  int v56 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v55 + (v54 * v56)) = *(_DWORD *)(v55 + (v54 * v56)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(void *)(*v68 + 8));
  *(void *)(*(void *)(a2 + 40)
            + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
            * *(unsigned __int16 *)(a2 + 4)
            + (int)a3[7]) = *(void *)(*v68 + 16);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  return v26;
}

void sub_19E968F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, void *a3)
{
  *((void *)&v22 + 1) = *MEMORY[0x1E4F143B8];
  if (*a3 == a3[1])
  {
    long long v21 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v21, &v22);
  }
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t v20 = 0;
  std::vector<double>::vector(&v21, v6, &v20);
  uint64_t v7 = (uint64_t *)v21;
  uint64_t v8 = a3[1] - *a3;
  if (v8)
  {
    unint64_t v9 = v8 >> 4;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    unint64_t v10 = (uint64_t *)(*a3 + 8);
    do
    {
      uint64_t v11 = *(v10 - 1);
      uint64_t v12 = *v10;
      v10 += 2;
      v7[v11] = v12;
      --v9;
    }
    while (v9);
  }
  uint64_t v13 = *v7;
  unint64_t v14 = CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1);
  *(void *)(*(void *)(a1 + 224) + 8 * v14) = v13;
  uint64_t v15 = (void *)v21;
  if (*((void *)&v21 + 1) - (void)v21 >= 9uLL)
  {
    unint64_t v16 = 1;
    do
    {
      uint64_t v17 = v15[v16];
      *(void *)(*(void *)(a1 + 224)
                + 8
                * CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1)) = v17;
      ++v16;
      uint64_t v15 = (void *)v21;
    }
    while (v16 < (uint64_t)(*((void *)&v21 + 1) - v21) >> 3);
  }
  unint64_t v18 = *(void *)(a1 + 24);
  if (v15)
  {
    *((void *)&v21 + 1) = v15;
    operator delete(v15);
  }
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v14 / v18);
}

void sub_19E969104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v73 = *(void *)(a2 + 32) * v9;
  unint64_t v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v73, (void **)(a2 + 40), v9);
  ++*(void *)(a2 + 32);
  unint64_t v63 = a4;
  unsigned int v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  unsigned int v12 = *(_DWORD *)(a2 + 164);
  unint64_t v13 = v12 * (unint64_t)v11;
  BOOL v25 = v12 == 64;
  uint64_t v14 = (*(void *)(*(void *)(a2 + 184) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v25) {
    uint64_t v14 = *(void *)(*(void *)(a2 + 184) + (v13 >> 3));
  }
  unsigned int v64 = v14;
  uint64_t v15 = *a5;
  uint64_t v17 = *(long long ***)(*a5 + 120);
  unint64_t v16 = *(std::__shared_weak_count **)(*a5 + 128);
  int v18 = *(unsigned __int8 *)v17;
  int v19 = *(double **)(*a5 + 136);
  int v20 = *(unsigned __int8 *)v19;
  int v21 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v22 = *(unsigned char *)(*a5 + 64) == 0;
  int v23 = *(_DWORD *)(*a5 + 4);
  unint64_t v73 = (unint64_t)v17;
  unint64_t v74 = v16;
  BOOL v67 = a5;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a5;
    int v19 = *(double **)(*a5 + 136);
  }
  BOOL v24 = *(std::__shared_weak_count **)(v15 + 144);
  unint64_t v71 = v19;
  unsigned int v72 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18) {
    BOOL v25 = v20 == 0;
  }
  else {
    BOOL v25 = 0;
  }
  int v26 = v25;
  unint64_t v27 = v10 / v9;
  if ((v20 | v18 || *((double *)v17 + 3) >= v19[3]) && (BOOL v28 = v21 != 0, !v26))
  {
    int v29 = v16;
    unint64_t v16 = v24;
    unsigned int v30 = v17;
    uint64_t v17 = (long long **)v19;
    int v31 = v18;
    int v18 = v20;
    BOOL v22 = v28;
  }
  else
  {
    if ((v23 - 1) > 4) {
      int v23 = 3;
    }
    else {
      int v23 = dword_19EC7C9B0[v23 - 1];
    }
    unint64_t v73 = (unint64_t)v19;
    unint64_t v74 = v24;
    int v29 = v24;
    unsigned int v30 = (long long **)v19;
    int v31 = v20;
    unint64_t v71 = (double *)v17;
    unsigned int v72 = v16;
  }
  unsigned int v32 = *(unsigned __int8 *)(a2 + 13);
  uint64_t v65 = v29;
  if (v32 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
LABEL_30:
    int v40 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27);
    int v34 = a3[2];
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v40 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v36 = *v35;
    int v37 = a3[3];
    unsigned int v38 = (*v35 >> v34) & v37 | 8;
    goto LABEL_31;
  }
  if (v32 > 1)
  {
    int v39 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27);
    int v34 = a3[2];
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v39 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v36 = *v35;
    int v37 = a3[3];
    unsigned int v38 = v37 & (*v35 >> v34) & 0xFFFFFFC7 | (8 * v23);
    goto LABEL_31;
  }
  if (v23 == 3) {
    goto LABEL_30;
  }
  if (v23) {
    goto LABEL_32;
  }
LABEL_28:
  int v33 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27);
  int v34 = a3[2];
  int v35 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v33 * *(unsigned __int16 *)(a2 + 4));
  unsigned int v36 = *v35;
  int v37 = a3[3];
  unsigned int v38 = (*v35 >> v34) & v37 & 0xFFFFFFF7;
LABEL_31:
  unsigned int *v35 = (v38 << v34) | v36 & ~(v37 << v34);
LABEL_32:
  uint64_t v41 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27)
      * *(unsigned __int16 *)(a2 + 4);
  if (v22) {
    int v42 = 4;
  }
  else {
    int v42 = 0;
  }
  *(_DWORD *)(v41 + (int)a3[1]) = (((*(_DWORD *)(v41 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v42) << a3[2]) | *(_DWORD *)(v41 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v43 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v43 + (int)a3[1]) = (((*(_DWORD *)(v43 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v31) << a3[2]) | *(_DWORD *)(v43 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v44 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v44 + (int)a3[1]) = (((*(_DWORD *)(v44 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v44 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v31 && v18)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, v30[10], v30[11], v30[11] - v30[10]);
    unsigned int v45 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)__p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v69, 0, sizeof(v69));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v69, v17[10], v17[11], v17[11] - v17[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)v69);
    if (v69[0]) {
      operator delete(v69[0]);
    }
    int v46 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27);
    uint64_t v47 = *(void *)(a2 + 40);
    int v48 = *(unsigned __int16 *)(a2 + 4);
    int v49 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v45 - (unint64_t)v64);
    uint64_t v50 = (v46 * v48);
    goto LABEL_42;
  }
  if (v31 || !v18)
  {
    if (!(v18 | v31))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, v63, &v73);
      uint64_t v59 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, v63, &v71);
      int v60 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27);
      uint64_t v47 = *(void *)(a2 + 40);
      int v61 = *(unsigned __int16 *)(a2 + 4);
      unsigned int v62 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v59 - v27);
      int v49 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v62);
      uint64_t v50 = (v60 * v61);
LABEL_42:
      *(_DWORD *)(v47 + v50 + a3[4]) = *(_DWORD *)(v47 + v50 + a3[4]) & ~(a3[6] << a3[5]) | (v49 << a3[5]);
    }
  }
  else
  {
    memset(v68, 0, sizeof(v68));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v68, v17[10], v17[11], v17[11] - v17[10]);
    unsigned int v51 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)v68);
    if (v68[0]) {
      operator delete(v68[0]);
    }
    int v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27);
    uint64_t v53 = *(void *)(a2 + 40);
    int v54 = *(unsigned __int16 *)(a2 + 4);
    *(_DWORD *)(v53 + (v52 * v54) + a3[4]) = *(_DWORD *)(v53
                                                                                   + (v52 * v54)
                                                                                   + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v51 - (unint64_t)v64) << a3[5]);
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, v63, &v73);
  }
  int v55 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27);
  uint64_t v56 = *(void *)(a2 + 40);
  int v57 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v56 + (v55 * v57)) = *(_DWORD *)(v56 + (v55 * v57)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(void *)(*v67 + 8));
  *(void *)(*(void *)(a2 + 40)
            + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27)
            * *(unsigned __int16 *)(a2 + 4)
            + (int)a3[7]) = *(void *)(*v67 + 16);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  return v27;
}

void sub_19E969758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)&long long v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 == v7)
  {
    long long v17 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v17, &v18);
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
  }
  uint64_t v8 = v7 - v6;
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = v8 >> 4;
    do
    {
      uint64_t v13 = *(void *)(v6 + v9);
      if (v10 == v12 - 1) {
        v13 |= 1 << (*(unsigned char *)(a1 + 11) - 1);
      }
      uint64_t v14 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), v13);
      uint64_t v15 = *(void *)(*a3 + v9 + 8);
      *(void *)(*(void *)(a1 + 224)
                + 8
                * CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1)) = v15;
      if (!v10) {
        unint64_t v11 = v14;
      }
      ++v10;
      uint64_t v6 = *a3;
      unint64_t v12 = (a3[1] - *a3) >> 4;
      v9 += 16;
    }
    while (v10 < v12);
  }
  else
  {
    unint64_t v11 = 0;
  }
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v11);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v74 = *(void *)(a2 + 32) * v9;
  unint64_t v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v74, (void **)(a2 + 40), v9);
  ++*(void *)(a2 + 32);
  unint64_t v63 = a4;
  unsigned int v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  unsigned int v12 = *(_DWORD *)(a2 + 52);
  unint64_t v13 = v12 * (unint64_t)v11;
  BOOL v24 = v12 == 64;
  uint64_t v14 = (*(void *)(*(void *)(a2 + 72) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v24) {
    uint64_t v14 = *(void *)(*(void *)(a2 + 72) + (v13 >> 3));
  }
  int v64 = v14;
  uint64_t v15 = *a5;
  long long v17 = *(long long ***)(*a5 + 120);
  unint64_t v16 = *(std::__shared_weak_count **)(*a5 + 128);
  int v18 = *(unsigned __int8 *)v17;
  int v19 = *(double **)(*a5 + 136);
  int v20 = *(unsigned __int8 *)v19;
  int v21 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v67 = *(unsigned char *)(*a5 + 64) == 0;
  int v22 = *(_DWORD *)(*a5 + 4);
  unint64_t v74 = (unint64_t)v17;
  int v75 = v16;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a5;
    int v19 = *(double **)(*a5 + 136);
  }
  int v23 = *(std::__shared_weak_count **)(v15 + 144);
  unsigned int v72 = v19;
  unint64_t v73 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18) {
    BOOL v24 = v20 == 0;
  }
  else {
    BOOL v24 = 0;
  }
  int v25 = v24;
  unint64_t v26 = v10 / v9;
  std::string v68 = a5;
  if ((v20 | v18 || *((double *)v17 + 3) >= v19[3]) && (BOOL v27 = v21 != 0, !v25))
  {
    uint64_t v65 = v16;
    unint64_t v16 = v23;
    BOOL v28 = v17;
    long long v17 = (long long **)v19;
    int v29 = v18;
    int v18 = v20;
    BOOL v67 = v27;
  }
  else
  {
    if ((v22 - 1) > 4) {
      int v22 = 3;
    }
    else {
      int v22 = dword_19EC7C9B0[v22 - 1];
    }
    unint64_t v74 = (unint64_t)v19;
    int v75 = v23;
    uint64_t v65 = v23;
    BOOL v28 = (long long **)v19;
    int v29 = v20;
    unsigned int v72 = (double *)v17;
    unint64_t v73 = v16;
  }
  unsigned int v30 = *(unsigned __int8 *)(a2 + 13);
  if (v30 - 2 < 2)
  {
    if (v22 != 2)
    {
      if (v22 != 1) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
LABEL_30:
    int v38 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    int v32 = a3[2];
    int v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v38 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v34 = *v33;
    int v35 = a3[3];
    unsigned int v36 = (*v33 >> v32) & v35 | 8;
    goto LABEL_31;
  }
  if (v30 > 1)
  {
    int v37 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    int v32 = a3[2];
    int v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v37 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v34 = *v33;
    int v35 = a3[3];
    unsigned int v36 = v35 & (*v33 >> v32) & 0xFFFFFFC7 | (8 * v22);
    goto LABEL_31;
  }
  if (v22 == 3) {
    goto LABEL_30;
  }
  if (v22) {
    goto LABEL_32;
  }
LABEL_28:
  int v31 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
  int v32 = a3[2];
  int v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v31 * *(unsigned __int16 *)(a2 + 4));
  unsigned int v34 = *v33;
  int v35 = a3[3];
  unsigned int v36 = (*v33 >> v32) & v35 & 0xFFFFFFF7;
LABEL_31:
  *int v33 = (v36 << v32) | v34 & ~(v35 << v32);
LABEL_32:
  uint64_t v39 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  if (v67) {
    int v40 = 4;
  }
  else {
    int v40 = 0;
  }
  *(_DWORD *)(v39 + (int)a3[1]) = (((*(_DWORD *)(v39 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v40) << a3[2]) | *(_DWORD *)(v39 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v41 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v41 + (int)a3[1]) = (((*(_DWORD *)(v41 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v29) << a3[2]) | *(_DWORD *)(v41 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v42 = v11 + v64;
  uint64_t v43 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v43 + (int)a3[1]) = (((*(_DWORD *)(v43 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v43 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v29 && v18)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, v28[10], v28[11], v28[11] - v28[10]);
    unsigned int v44 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)__p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v70, 0, sizeof(v70));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v70, v17[10], v17[11], v17[11] - v17[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)v70);
    if (v70[0]) {
      operator delete(v70[0]);
    }
    int v45 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    uint64_t v46 = *(void *)(a2 + 40);
    int v47 = *(unsigned __int16 *)(a2 + 4);
    int v48 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v44 - v42);
    uint64_t v49 = v46 + (v45 * v47);
    goto LABEL_42;
  }
  if (v29 || !v18)
  {
    if (!(v18 | v29))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, v63, &v74);
      uint64_t v58 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, v63, &v72);
      int v59 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
      uint64_t v60 = *(void *)(a2 + 40);
      int v61 = *(unsigned __int16 *)(a2 + 4);
      unsigned int v62 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v58 - v26);
      int v48 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v62);
      uint64_t v49 = v60 + (v59 * v61);
LABEL_42:
      *(_DWORD *)(v49 + a3[4]) = *(_DWORD *)(v49 + a3[4]) & ~(a3[6] << a3[5]) | (v48 << a3[5]);
    }
  }
  else
  {
    memset(v69, 0, sizeof(v69));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v69, v17[10], v17[11], v17[11] - v17[10]);
    unsigned int v50 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)v69);
    if (v69[0]) {
      operator delete(v69[0]);
    }
    int v51 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    uint64_t v52 = *(void *)(a2 + 40);
    int v53 = *(unsigned __int16 *)(a2 + 4);
    *(_DWORD *)(v52 + (v51 * v53) + a3[4]) = *(_DWORD *)(v52
                                                                                   + (v51 * v53)
                                                                                   + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v50 - v42) << a3[5]);
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, v63, &v74);
  }
  int v54 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
  uint64_t v55 = *(void *)(a2 + 40);
  int v56 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v55 + (v54 * v56)) = *(_DWORD *)(v55 + (v54 * v56)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(void *)(*v68 + 8));
  *(void *)(*(void *)(a2 + 40)
            + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
            * *(unsigned __int16 *)(a2 + 4)
            + (int)a3[7]) = *(void *)(*v68 + 16);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  return v26;
}

void sub_19E969F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  *(void *)&long long v13 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 == v7)
  {
    long long v12 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v12, &v13);
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
  }
  if ((char *)v7 - (char *)v6 != 16)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  unint64_t v8 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), *v6);
  uint64_t v9 = (*a3)[1];
  *(void *)(*(void *)(a1 + 224)
            + 8
            * CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1)) = v9;
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v8);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v74 = *(void *)(a2 + 32) * v9;
  unint64_t v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v74, (void **)(a2 + 40), v9);
  ++*(void *)(a2 + 32);
  unint64_t v63 = a4;
  unsigned int v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  unsigned int v12 = *(_DWORD *)(a2 + 52);
  unint64_t v13 = v12 * (unint64_t)v11;
  BOOL v24 = v12 == 64;
  uint64_t v14 = (*(void *)(*(void *)(a2 + 72) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v24) {
    uint64_t v14 = *(void *)(*(void *)(a2 + 72) + (v13 >> 3));
  }
  int v64 = v14;
  uint64_t v15 = *a5;
  long long v17 = *(long long ***)(*a5 + 120);
  unint64_t v16 = *(std::__shared_weak_count **)(*a5 + 128);
  int v18 = *(unsigned __int8 *)v17;
  int v19 = *(double **)(*a5 + 136);
  int v20 = *(unsigned __int8 *)v19;
  int v21 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v67 = *(unsigned char *)(*a5 + 64) == 0;
  int v22 = *(_DWORD *)(*a5 + 4);
  unint64_t v74 = (unint64_t)v17;
  int v75 = v16;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a5;
    int v19 = *(double **)(*a5 + 136);
  }
  int v23 = *(std::__shared_weak_count **)(v15 + 144);
  unsigned int v72 = v19;
  unint64_t v73 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18) {
    BOOL v24 = v20 == 0;
  }
  else {
    BOOL v24 = 0;
  }
  int v25 = v24;
  unint64_t v26 = v10 / v9;
  std::string v68 = a5;
  if ((v20 | v18 || *((double *)v17 + 3) >= v19[3]) && (BOOL v27 = v21 != 0, !v25))
  {
    uint64_t v65 = v16;
    unint64_t v16 = v23;
    BOOL v28 = v17;
    long long v17 = (long long **)v19;
    int v29 = v18;
    int v18 = v20;
    BOOL v67 = v27;
  }
  else
  {
    if ((v22 - 1) > 4) {
      int v22 = 3;
    }
    else {
      int v22 = dword_19EC7C9B0[v22 - 1];
    }
    unint64_t v74 = (unint64_t)v19;
    int v75 = v23;
    uint64_t v65 = v23;
    BOOL v28 = (long long **)v19;
    int v29 = v20;
    unsigned int v72 = (double *)v17;
    unint64_t v73 = v16;
  }
  unsigned int v30 = *(unsigned __int8 *)(a2 + 13);
  if (v30 - 2 < 2)
  {
    if (v22 != 2)
    {
      if (v22 != 1) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
LABEL_30:
    int v38 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    int v32 = a3[2];
    int v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v38 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v34 = *v33;
    int v35 = a3[3];
    unsigned int v36 = (*v33 >> v32) & v35 | 8;
    goto LABEL_31;
  }
  if (v30 > 1)
  {
    int v37 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    int v32 = a3[2];
    int v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v37 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v34 = *v33;
    int v35 = a3[3];
    unsigned int v36 = v35 & (*v33 >> v32) & 0xFFFFFFC7 | (8 * v22);
    goto LABEL_31;
  }
  if (v22 == 3) {
    goto LABEL_30;
  }
  if (v22) {
    goto LABEL_32;
  }
LABEL_28:
  int v31 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
  int v32 = a3[2];
  int v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v31 * *(unsigned __int16 *)(a2 + 4));
  unsigned int v34 = *v33;
  int v35 = a3[3];
  unsigned int v36 = (*v33 >> v32) & v35 & 0xFFFFFFF7;
LABEL_31:
  *int v33 = (v36 << v32) | v34 & ~(v35 << v32);
LABEL_32:
  uint64_t v39 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  if (v67) {
    int v40 = 4;
  }
  else {
    int v40 = 0;
  }
  *(_DWORD *)(v39 + (int)a3[1]) = (((*(_DWORD *)(v39 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v40) << a3[2]) | *(_DWORD *)(v39 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v41 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v41 + (int)a3[1]) = (((*(_DWORD *)(v41 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v29) << a3[2]) | *(_DWORD *)(v41 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v42 = v11 + v64;
  uint64_t v43 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v43 + (int)a3[1]) = (((*(_DWORD *)(v43 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v43 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v29 && v18)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, v28[10], v28[11], v28[11] - v28[10]);
    unsigned int v44 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, __p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v70, 0, sizeof(v70));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v70, v17[10], v17[11], v17[11] - v17[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, v70);
    if (v70[0]) {
      operator delete(v70[0]);
    }
    int v45 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    uint64_t v46 = *(void *)(a2 + 40);
    int v47 = *(unsigned __int16 *)(a2 + 4);
    int v48 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v44 - v42);
    uint64_t v49 = v46 + (v45 * v47);
    goto LABEL_42;
  }
  if (v29 || !v18)
  {
    if (!(v18 | v29))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, v63, &v74);
      uint64_t v58 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, v63, &v72);
      int v59 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
      uint64_t v60 = *(void *)(a2 + 40);
      int v61 = *(unsigned __int16 *)(a2 + 4);
      unsigned int v62 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v58 - v26);
      int v48 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v62);
      uint64_t v49 = v60 + (v59 * v61);
LABEL_42:
      *(_DWORD *)(v49 + a3[4]) = *(_DWORD *)(v49 + a3[4]) & ~(a3[6] << a3[5]) | (v48 << a3[5]);
    }
  }
  else
  {
    memset(v69, 0, sizeof(v69));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v69, v17[10], v17[11], v17[11] - v17[10]);
    unsigned int v50 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, v69);
    if (v69[0]) {
      operator delete(v69[0]);
    }
    int v51 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    uint64_t v52 = *(void *)(a2 + 40);
    int v53 = *(unsigned __int16 *)(a2 + 4);
    *(_DWORD *)(v52 + (v51 * v53) + a3[4]) = *(_DWORD *)(v52
                                                                                   + (v51 * v53)
                                                                                   + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v50 - v42) << a3[5]);
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, v63, &v74);
  }
  int v54 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
  uint64_t v55 = *(void *)(a2 + 40);
  int v56 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v55 + (v54 * v56)) = *(_DWORD *)(v55 + (v54 * v56)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(void *)(*v68 + 8));
  *(void *)(*(void *)(a2 + 40)
            + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
            * *(unsigned __int16 *)(a2 + 4)
            + (int)a3[7]) = *(void *)(*v68 + 16);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  return v26;
}

void sub_19E96A700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<double,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&long long v13 = *MEMORY[0x1E4F143B8];
  BOOL v5 = (void *)*a3;
  uint64_t v6 = a3[1];
  if (*a3 == v6)
  {
    long long v12 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v12, &v13);
    BOOL v5 = (void *)*a3;
    uint64_t v6 = a3[1];
  }
  if (v6 - (void)v5 != 16 || *v5)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  uint64_t v8 = v5[1];
  unint64_t v9 = CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224), 1);
  *(void *)(*(void *)(a1 + 224) + 8 * v9) = v8;
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v9);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v62 = *(void *)(a2 + 32) * v10;
  unint64_t v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v62, (void **)(a2 + 40), v10);
  ++*(void *)(a2 + 32);
  uint64_t v12 = *(unsigned int *)(a2 + 52);
  unint64_t v13 = *(void *)(*(void *)(a2 + 72) + ((unint64_t)(v12 * a4) >> 3));
  BOOL v25 = v12 == 64;
  uint64_t v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (!v25) {
    unint64_t v13 = v14;
  }
  uint64_t v15 = *a5;
  unint64_t v16 = *(double **)(*a5 + 120);
  long long v17 = *(std::__shared_weak_count **)(*a5 + 128);
  int v18 = *(unsigned __int8 *)v16;
  int v19 = *(double **)(*a5 + 136);
  int v20 = *(unsigned __int8 *)v19;
  int v21 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v22 = *(unsigned char *)(*a5 + 64) == 0;
  int v23 = *(_DWORD *)(*a5 + 4);
  unint64_t v62 = (unint64_t)v16;
  unint64_t v63 = v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a5;
    int v19 = *(double **)(*a5 + 136);
  }
  BOOL v24 = *(std::__shared_weak_count **)(v15 + 144);
  uint64_t v60 = v19;
  int v61 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18) {
    BOOL v25 = v20 == 0;
  }
  else {
    BOOL v25 = 0;
  }
  int v26 = v25;
  if ((v20 | v18 || v16[3] >= v19[3]) && (BOOL v27 = v21 != 0, !v26))
  {
    int v29 = v17;
    long long v17 = v24;
    unsigned int v30 = (long long **)v19;
    int v19 = v16;
    int v31 = v18;
    int v18 = v20;
    BOOL v22 = v27;
  }
  else
  {
    unsigned int v28 = v23 - 1;
    if (v28 > 4) {
      int v23 = 3;
    }
    else {
      int v23 = dword_19EC7C9B0[v28];
    }
    unint64_t v62 = (unint64_t)v19;
    unint64_t v63 = v24;
    int v29 = v24;
    unsigned int v30 = (long long **)v16;
    int v31 = v20;
    uint64_t v60 = v16;
    int v61 = v17;
  }
  unsigned int v32 = *(unsigned __int8 *)(a2 + 13);
  unint64_t v33 = v11 / v10;
  if (v32 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1) {
        goto LABEL_33;
      }
      goto LABEL_28;
    }
LABEL_29:
    int v34 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v37 = *(_DWORD *)(a3 + 16);
    unsigned int v38 = (*v35 >> v34) & v37 | 8;
    goto LABEL_30;
  }
  if (v32 > 1)
  {
    int v41 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v42 = *(_DWORD *)(a3 + 16);
    unsigned int v39 = (v42 & (*v35 >> v41) & 0xFFFFFFC7 | (8 * v23)) << v41;
    int v40 = v42 << v41;
    goto LABEL_32;
  }
  if (v23 == 3) {
    goto LABEL_29;
  }
  if (!v23)
  {
LABEL_28:
    int v34 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v37 = *(_DWORD *)(a3 + 16);
    unsigned int v38 = (*v35 >> v34) & v37 & 0xFFFFFFF7;
LABEL_30:
    unsigned int v39 = v38 << v34;
    int v40 = v37 << v34;
LABEL_32:
    unsigned int *v35 = v39 | v36 & ~v40;
  }
LABEL_33:
  uint64_t v43 = v13 + a4;
  if (v22) {
    int v45 = 4;
  }
  else {
    int v45 = 0;
  }
  unint64_t v44 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v44 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v44 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v45) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v44 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v46 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v46 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v46 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v31) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v46 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v47 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v18 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v31 && v18)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, *((long long **)v19 + 10), *((long long **)v19 + 11), (uint64_t)(*((void *)v19 + 11) - *((void *)v19 + 10)) >> 4);
    unint64_t v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, __p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v58, 0, sizeof(v58));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v58, v30[10], v30[11], v30[11] - v30[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, v58);
    if (v58[0]) {
      operator delete(v58[0]);
    }
    unint64_t v49 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v49 + *(unsigned int *)(a3 + 20)) = *(void *)(v49 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v48 - v43) << *(_DWORD *)(a3 + 24));
  }
  else if (v31 || !v18)
  {
    if (!(v18 | v31))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, a4, &v62);
      uint64_t v52 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, a4, &v60);
      unint64_t v53 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
      *(void *)(v53 + *(unsigned int *)(a3 + 20)) = *(void *)(v53 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v52 - v33) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    memset(v57, 0, sizeof(v57));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v57, v30[10], v30[11], v30[11] - v30[10]);
    unint64_t v50 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, v57);
    if (v57[0]) {
      operator delete(v57[0]);
    }
    unint64_t v51 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v51 + *(unsigned int *)(a3 + 20)) = *(void *)(v51 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v50 - v43) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, a4, &v62);
  }
  *(void *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4)) = *(void *)(*(void *)(a2 + 40)
                                                                                      + v33
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(void *)a3 | *(void *)(*a5 + 8);
  uint64_t v54 = *(void *)(a2 + 40);
  uint64_t v55 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v54 + v33 * v55 + *(int *)(a3 + 40)) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*a5 + 16));
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  return v33;
}

void sub_19E96ADB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, void *a3)
{
  *((void *)&v23 + 1) = *MEMORY[0x1E4F143B8];
  if (*a3 == a3[1])
  {
    long long v22 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v22, &v23);
  }
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t v21 = 0;
  std::vector<double>::vector(&v22, v6, &v21);
  uint64_t v7 = (double *)v22;
  uint64_t v8 = a3[1] - *a3;
  if (v8)
  {
    unint64_t v9 = v8 >> 4;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    unint64_t v10 = (double *)(*a3 + 8);
    do
    {
      uint64_t v11 = *((void *)v10 - 1);
      double v12 = *v10;
      v10 += 2;
      v7[v11] = v12;
      --v9;
    }
    while (v9);
  }
  double v13 = *v7;
  unint64_t v14 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
  *(float *)(*(void *)(a1 + 224) + 4 * v14) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v13);
  uint64_t v15 = (double *)v22;
  if (*((void *)&v22 + 1) - (void)v22 >= 9uLL)
  {
    unint64_t v16 = 1;
    do
    {
      double v17 = v15[v16];
      uint64_t v18 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
      *(float *)(*(void *)(a1 + 224) + 4 * v1_Block_object_dispose(&a9, 8) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v17);
      ++v16;
      uint64_t v15 = (double *)v22;
    }
    while (v16 < (uint64_t)(*((void *)&v22 + 1) - v22) >> 3);
  }
  unint64_t v19 = *(void *)(a1 + 24);
  if (v15)
  {
    *((void *)&v22 + 1) = v15;
    operator delete(v15);
  }
  return v14 / v19;
}

void sub_19E96AFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
}

float CoreML::TreeEnsembles::Internal::check_cast<float,double>(double a1)
{
  float result = a1;
  if (result != a1)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  return result;
}

uint64_t CoreML::Archiver::MMappedContentManager::extend_data_block<float>(uint64_t a1, uint64_t *a2, void **a3)
{
  unint64_t v6 = *a3;
  if (*a3)
  {
    uint64_t v7 = *(void **)(a1 + 8);
    if (!v7) {
      goto LABEL_13;
    }
    uint64_t v8 = (uint64_t *)(a1 + 8);
    do
    {
      unint64_t v9 = v7[4];
      BOOL v10 = v9 >= (unint64_t)v6;
      if (v9 >= (unint64_t)v6) {
        uint64_t v11 = v7;
      }
      else {
        uint64_t v11 = v7 + 1;
      }
      if (v10) {
        uint64_t v8 = v7;
      }
      uint64_t v7 = (void *)*v11;
    }
    while (*v11);
    if (v8 == (uint64_t *)(a1 + 8) || (unint64_t)v6 < v8[4]) {
LABEL_13:
    }
      uint64_t v8 = (uint64_t *)(a1 + 8);
    unint64_t v12 = v8[5];
    if (*a2 + 1 <= v12) {
      goto LABEL_21;
    }
    unint64_t v13 = (3 * v12 + 3) >> 1;
    unint64_t v14 = (char *)malloc_type_realloc(v6, 4 * v13, 0x100004052888210uLL);
    if (v14)
    {
      uint64_t v15 = v14;
      bzero(&v14[4 * v8[5]], 4 * (v13 - v8[5]));
      if (v15 == *a3)
      {
        v8[5] = v13;
      }
      else
      {
        *a3 = v15;
        std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__remove_node_pointer((uint64_t **)a1, v8);
        operator delete(v8);
        *(void *)&long long v22 = *a3;
        *((void *)&v22 + 1) = v13;
        std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::pair<void * const,unsigned long>>((uint64_t *)a1, v22, &v22);
      }
LABEL_21:
      uint64_t result = *a2;
      uint64_t v19 = *a2 + 1;
      goto LABEL_22;
    }
LABEL_23:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v21 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v21, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
  }
  unint64_t v16 = malloc_type_calloc(0x10uLL, 4uLL, 0x100004052888210uLL);
  *a3 = v16;
  if (!v16) {
    goto LABEL_23;
  }
  *(void *)&long long v22 = v16;
  double v17 = std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)a1, (unint64_t)v16, (uint64_t *)&v22);
  uint64_t result = 0;
  v17[5] = 16;
  uint64_t v19 = 1;
LABEL_22:
  *a2 = v19;
  return result;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v62 = *(void *)(a2 + 32) * v10;
  unint64_t v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v62, (void **)(a2 + 40), v10);
  ++*(void *)(a2 + 32);
  uint64_t v12 = *(unsigned int *)(a2 + 164);
  unint64_t v13 = *(void *)(*(void *)(a2 + 184) + ((unint64_t)(v12 * a4) >> 3));
  BOOL v26 = v12 == 64;
  uint64_t v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (v26) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = *a5;
  double v17 = *(double **)(*a5 + 120);
  uint64_t v18 = *(std::__shared_weak_count **)(*a5 + 128);
  int v19 = *(unsigned __int8 *)v17;
  int v20 = *(double **)(*a5 + 136);
  int v21 = *(unsigned __int8 *)v20;
  int v22 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v23 = *(unsigned char *)(*a5 + 64) == 0;
  int v24 = *(_DWORD *)(*a5 + 4);
  unint64_t v62 = (unint64_t)v17;
  unint64_t v63 = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = *a5;
    int v20 = *(double **)(*a5 + 136);
  }
  BOOL v25 = *(std::__shared_weak_count **)(v16 + 144);
  uint64_t v60 = v20;
  int v61 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v19) {
    BOOL v26 = v21 == 0;
  }
  else {
    BOOL v26 = 0;
  }
  int v27 = v26;
  if ((v21 | v19 || v17[3] >= v20[3]) && (BOOL v28 = v22 != 0, !v27))
  {
    unsigned int v30 = v18;
    uint64_t v18 = v25;
    int v31 = (long long **)v20;
    int v20 = v17;
    int v32 = v19;
    int v19 = v21;
    BOOL v23 = v28;
  }
  else
  {
    unsigned int v29 = v24 - 1;
    if (v29 > 4) {
      int v24 = 3;
    }
    else {
      int v24 = dword_19EC7C9B0[v29];
    }
    unint64_t v62 = (unint64_t)v20;
    unint64_t v63 = v25;
    unsigned int v30 = v25;
    int v31 = (long long **)v17;
    int v32 = v21;
    uint64_t v60 = v17;
    int v61 = v18;
  }
  unsigned int v33 = *(unsigned __int8 *)(a2 + 13);
  unint64_t v34 = v11 / v10;
  if (v33 - 2 < 2)
  {
    if (v24 != 2)
    {
      if (v24 != 1) {
        goto LABEL_34;
      }
      goto LABEL_29;
    }
LABEL_30:
    int v35 = *(_DWORD *)(a3 + 12);
    unsigned int v36 = (unsigned int *)(*(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v37 = *v36;
    int v38 = *(_DWORD *)(a3 + 16);
    unsigned int v39 = (*v36 >> v35) & v38 | 8;
    goto LABEL_31;
  }
  if (v33 > 1)
  {
    int v42 = *(_DWORD *)(a3 + 12);
    unsigned int v36 = (unsigned int *)(*(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v37 = *v36;
    int v43 = *(_DWORD *)(a3 + 16);
    unsigned int v40 = (v43 & (*v36 >> v42) & 0xFFFFFFC7 | (8 * v24)) << v42;
    int v41 = v43 << v42;
    goto LABEL_33;
  }
  if (v24 == 3) {
    goto LABEL_30;
  }
  if (!v24)
  {
LABEL_29:
    int v35 = *(_DWORD *)(a3 + 12);
    unsigned int v36 = (unsigned int *)(*(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v37 = *v36;
    int v38 = *(_DWORD *)(a3 + 16);
    unsigned int v39 = (*v36 >> v35) & v38 & 0xFFFFFFF7;
LABEL_31:
    unsigned int v40 = v39 << v35;
    int v41 = v38 << v35;
LABEL_33:
    *unsigned int v36 = v40 | v37 & ~v41;
  }
LABEL_34:
  if (v23) {
    int v45 = 4;
  }
  else {
    int v45 = 0;
  }
  unint64_t v44 = *(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v44 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v44 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v45) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v44 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v46 = *(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v46 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v46 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v32) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v46 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v47 = *(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v19 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v32 && v19)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, *((long long **)v20 + 10), *((long long **)v20 + 11), (uint64_t)(*((void *)v20 + 11) - *((void *)v20 + 10)) >> 4);
    uint64_t v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)__p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v58, 0, sizeof(v58));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v58, v31[10], v31[11], v31[11] - v31[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)v58);
    if (v58[0]) {
      operator delete(v58[0]);
    }
    unint64_t v49 = *(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v49 + *(unsigned int *)(a3 + 20)) = *(void *)(v49 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v48 - v15) << *(_DWORD *)(a3 + 24));
  }
  else if (v32 || !v19)
  {
    if (!(v19 | v32))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, a4, &v62);
      uint64_t v52 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, a4, &v60);
      unint64_t v53 = *(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4);
      *(void *)(v53 + *(unsigned int *)(a3 + 20)) = *(void *)(v53 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v52 - v34) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    memset(v57, 0, sizeof(v57));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v57, v31[10], v31[11], v31[11] - v31[10]);
    uint64_t v50 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)v57);
    if (v57[0]) {
      operator delete(v57[0]);
    }
    unint64_t v51 = *(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v51 + *(unsigned int *)(a3 + 20)) = *(void *)(v51 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v50 - v15) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, a4, &v62);
  }
  *(void *)(*(void *)(a2 + 40) + v34 * *(unsigned __int16 *)(a2 + 4)) = *(void *)(*(void *)(a2 + 40)
                                                                                      + v34
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(void *)a3 | *(void *)(*a5 + 8);
  uint64_t v54 = *(void *)(a2 + 40);
  uint64_t v55 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v54 + v34 * v55 + *(int *)(a3 + 40)) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*a5 + 16));
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  return v34;
}

void sub_19E96B6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)&long long v20 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 == v6)
  {
    long long v19 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v19, &v20);
    uint64_t v5 = *a3;
    uint64_t v6 = a3[1];
  }
  uint64_t v7 = v6 - v5;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = v7 >> 4;
  uint64_t v12 = (void **)(a1 + 224);
  do
  {
    uint64_t v13 = *(void *)(v5 + v8);
    if (v9 == v11 - 1) {
      v13 |= 1 << (*(unsigned char *)(a1 + 11) - 1);
    }
    uint64_t v14 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), v13);
    double v15 = *(double *)(*a3 + v8 + 8);
    uint64_t v16 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), v12);
    *((float *)*v12 + v16) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v15);
    if (!v9) {
      uint64_t v10 = v14;
    }
    ++v9;
    uint64_t v5 = *a3;
    unint64_t v11 = (a3[1] - *a3) >> 4;
    v8 += 16;
  }
  while (v9 < v11);
  return v10;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v62 = *(void *)(a2 + 32) * v10;
  unint64_t v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v62, (void **)(a2 + 40), v10);
  ++*(void *)(a2 + 32);
  uint64_t v12 = *(unsigned int *)(a2 + 52);
  unint64_t v13 = *(void *)(*(void *)(a2 + 72) + ((unint64_t)(v12 * a4) >> 3));
  BOOL v25 = v12 == 64;
  uint64_t v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (!v25) {
    unint64_t v13 = v14;
  }
  uint64_t v15 = *a5;
  uint64_t v16 = *(double **)(*a5 + 120);
  double v17 = *(std::__shared_weak_count **)(*a5 + 128);
  int v18 = *(unsigned __int8 *)v16;
  long long v19 = *(double **)(*a5 + 136);
  int v20 = *(unsigned __int8 *)v19;
  int v21 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v22 = *(unsigned char *)(*a5 + 64) == 0;
  int v23 = *(_DWORD *)(*a5 + 4);
  unint64_t v62 = (unint64_t)v16;
  unint64_t v63 = v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a5;
    long long v19 = *(double **)(*a5 + 136);
  }
  int v24 = *(std::__shared_weak_count **)(v15 + 144);
  uint64_t v60 = v19;
  int v61 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18) {
    BOOL v25 = v20 == 0;
  }
  else {
    BOOL v25 = 0;
  }
  int v26 = v25;
  if ((v20 | v18 || v16[3] >= v19[3]) && (BOOL v27 = v21 != 0, !v26))
  {
    unsigned int v29 = v17;
    double v17 = v24;
    unsigned int v30 = (long long **)v19;
    long long v19 = v16;
    int v31 = v18;
    int v18 = v20;
    BOOL v22 = v27;
  }
  else
  {
    unsigned int v28 = v23 - 1;
    if (v28 > 4) {
      int v23 = 3;
    }
    else {
      int v23 = dword_19EC7C9B0[v28];
    }
    unint64_t v62 = (unint64_t)v19;
    unint64_t v63 = v24;
    unsigned int v29 = v24;
    unsigned int v30 = (long long **)v16;
    int v31 = v20;
    uint64_t v60 = v16;
    int v61 = v17;
  }
  unsigned int v32 = *(unsigned __int8 *)(a2 + 13);
  unint64_t v33 = v11 / v10;
  if (v32 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1) {
        goto LABEL_33;
      }
      goto LABEL_28;
    }
LABEL_29:
    int v34 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v37 = *(_DWORD *)(a3 + 16);
    unsigned int v38 = (*v35 >> v34) & v37 | 8;
    goto LABEL_30;
  }
  if (v32 > 1)
  {
    int v41 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v42 = *(_DWORD *)(a3 + 16);
    unsigned int v39 = (v42 & (*v35 >> v41) & 0xFFFFFFC7 | (8 * v23)) << v41;
    int v40 = v42 << v41;
    goto LABEL_32;
  }
  if (v23 == 3) {
    goto LABEL_29;
  }
  if (!v23)
  {
LABEL_28:
    int v34 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v37 = *(_DWORD *)(a3 + 16);
    unsigned int v38 = (*v35 >> v34) & v37 & 0xFFFFFFF7;
LABEL_30:
    unsigned int v39 = v38 << v34;
    int v40 = v37 << v34;
LABEL_32:
    unsigned int *v35 = v39 | v36 & ~v40;
  }
LABEL_33:
  uint64_t v43 = v13 + a4;
  if (v22) {
    int v45 = 4;
  }
  else {
    int v45 = 0;
  }
  unint64_t v44 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v44 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v44 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v45) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v44 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v46 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v46 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v46 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v31) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v46 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v47 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v18 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v31 && v18)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, *((long long **)v19 + 10), *((long long **)v19 + 11), (uint64_t)(*((void *)v19 + 11) - *((void *)v19 + 10)) >> 4);
    uint64_t v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)__p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v58, 0, sizeof(v58));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v58, v30[10], v30[11], v30[11] - v30[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)v58);
    if (v58[0]) {
      operator delete(v58[0]);
    }
    unint64_t v49 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v49 + *(unsigned int *)(a3 + 20)) = *(void *)(v49 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v48 - v43) << *(_DWORD *)(a3 + 24));
  }
  else if (v31 || !v18)
  {
    if (!(v18 | v31))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, a4, &v62);
      uint64_t v52 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, a4, &v60);
      unint64_t v53 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
      *(void *)(v53 + *(unsigned int *)(a3 + 20)) = *(void *)(v53 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v52 - v33) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    memset(v57, 0, sizeof(v57));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v57, v30[10], v30[11], v30[11] - v30[10]);
    uint64_t v50 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)v57);
    if (v57[0]) {
      operator delete(v57[0]);
    }
    unint64_t v51 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v51 + *(unsigned int *)(a3 + 20)) = *(void *)(v51 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v50 - v43) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, a4, &v62);
  }
  *(void *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4)) = *(void *)(*(void *)(a2 + 40)
                                                                                      + v33
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(void *)a3 | *(void *)(*a5 + 8);
  uint64_t v54 = *(void *)(a2 + 40);
  uint64_t v55 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v54 + v33 * v55 + *(int *)(a3 + 40)) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*a5 + 16));
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  return v33;
}

void sub_19E96BE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  *(void *)&long long v14 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 == v7)
  {
    long long v13 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v13, &v14);
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
  }
  if ((char *)v7 - (char *)v6 != 16)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  uint64_t v8 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), *v6);
  double v9 = *((double *)*a3 + 1);
  uint64_t v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
  *(float *)(*(void *)(a1 + 224) + 4 * v10) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v9);
  return v8;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v62 = *(void *)(a2 + 32) * v10;
  unint64_t v11 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v62, (void **)(a2 + 40), v10);
  ++*(void *)(a2 + 32);
  uint64_t v12 = *(unsigned int *)(a2 + 52);
  unint64_t v13 = *(void *)(*(void *)(a2 + 72) + ((unint64_t)(v12 * a4) >> 3));
  BOOL v25 = v12 == 64;
  uint64_t v14 = (v13 >> ((v12 * a4) & 7)) & ~(-1 << v12);
  if (!v25) {
    unint64_t v13 = v14;
  }
  uint64_t v15 = *a5;
  uint64_t v16 = *(double **)(*a5 + 120);
  double v17 = *(std::__shared_weak_count **)(*a5 + 128);
  int v18 = *(unsigned __int8 *)v16;
  long long v19 = *(double **)(*a5 + 136);
  int v20 = *(unsigned __int8 *)v19;
  int v21 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v22 = *(unsigned char *)(*a5 + 64) == 0;
  int v23 = *(_DWORD *)(*a5 + 4);
  unint64_t v62 = (unint64_t)v16;
  unint64_t v63 = v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a5;
    long long v19 = *(double **)(*a5 + 136);
  }
  int v24 = *(std::__shared_weak_count **)(v15 + 144);
  uint64_t v60 = v19;
  int v61 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18) {
    BOOL v25 = v20 == 0;
  }
  else {
    BOOL v25 = 0;
  }
  int v26 = v25;
  if ((v20 | v18 || v16[3] >= v19[3]) && (BOOL v27 = v21 != 0, !v26))
  {
    unsigned int v29 = v17;
    double v17 = v24;
    unsigned int v30 = (long long **)v19;
    long long v19 = v16;
    int v31 = v18;
    int v18 = v20;
    BOOL v22 = v27;
  }
  else
  {
    unsigned int v28 = v23 - 1;
    if (v28 > 4) {
      int v23 = 3;
    }
    else {
      int v23 = dword_19EC7C9B0[v28];
    }
    unint64_t v62 = (unint64_t)v19;
    unint64_t v63 = v24;
    unsigned int v29 = v24;
    unsigned int v30 = (long long **)v16;
    int v31 = v20;
    uint64_t v60 = v16;
    int v61 = v17;
  }
  unsigned int v32 = *(unsigned __int8 *)(a2 + 13);
  unint64_t v33 = v11 / v10;
  if (v32 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1) {
        goto LABEL_33;
      }
      goto LABEL_28;
    }
LABEL_29:
    int v34 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v37 = *(_DWORD *)(a3 + 16);
    unsigned int v38 = (*v35 >> v34) & v37 | 8;
    goto LABEL_30;
  }
  if (v32 > 1)
  {
    int v41 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v42 = *(_DWORD *)(a3 + 16);
    unsigned int v39 = (v42 & (*v35 >> v41) & 0xFFFFFFC7 | (8 * v23)) << v41;
    int v40 = v42 << v41;
    goto LABEL_32;
  }
  if (v23 == 3) {
    goto LABEL_29;
  }
  if (!v23)
  {
LABEL_28:
    int v34 = *(_DWORD *)(a3 + 12);
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4) + *(int *)(a3 + 8));
    unsigned int v36 = *v35;
    int v37 = *(_DWORD *)(a3 + 16);
    unsigned int v38 = (*v35 >> v34) & v37 & 0xFFFFFFF7;
LABEL_30:
    unsigned int v39 = v38 << v34;
    int v40 = v37 << v34;
LABEL_32:
    unsigned int *v35 = v39 | v36 & ~v40;
  }
LABEL_33:
  uint64_t v43 = v13 + a4;
  if (v22) {
    int v45 = 4;
  }
  else {
    int v45 = 0;
  }
  unint64_t v44 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v44 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v44 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFB | v45) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v44 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v46 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v46 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v46 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFE | v31) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v46 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  unint64_t v47 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v47 + *(int *)(a3 + 8)) = (((*(_DWORD *)(v47 + *(int *)(a3 + 8)) >> *(_DWORD *)(a3 + 12)) & *(_DWORD *)(a3 + 16) & 0xFFFFFFFD | (2 * (v18 != 0))) << *(_DWORD *)(a3 + 12)) | *(_DWORD *)(v47 + *(int *)(a3 + 8)) & ~(*(_DWORD *)(a3 + 16) << *(_DWORD *)(a3 + 12));
  if (v31 && v18)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, *((long long **)v19 + 10), *((long long **)v19 + 11), (uint64_t)(*((void *)v19 + 11) - *((void *)v19 + 10)) >> 4);
    uint64_t v48 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, (double **)__p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v58, 0, sizeof(v58));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v58, v30[10], v30[11], v30[11] - v30[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, (double **)v58);
    if (v58[0]) {
      operator delete(v58[0]);
    }
    unint64_t v49 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v49 + *(unsigned int *)(a3 + 20)) = *(void *)(v49 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v48 - v43) << *(_DWORD *)(a3 + 24));
  }
  else if (v31 || !v18)
  {
    if (!(v18 | v31))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, a4, &v62);
      uint64_t v52 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, a4, &v60);
      unint64_t v53 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
      *(void *)(v53 + *(unsigned int *)(a3 + 20)) = *(void *)(v53 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v52 - v33) << *(_DWORD *)(a3 + 24));
    }
  }
  else
  {
    memset(v57, 0, sizeof(v57));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v57, v30[10], v30[11], v30[11] - v30[10]);
    uint64_t v50 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, (double **)v57);
    if (v57[0]) {
      operator delete(v57[0]);
    }
    unint64_t v51 = *(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4);
    *(void *)(v51 + *(unsigned int *)(a3 + 20)) = *(void *)(v51 + *(unsigned int *)(a3 + 20)) & ~(*(void *)(a3 + 32) << *(_DWORD *)(a3 + 24)) | ((v50 - v43) << *(_DWORD *)(a3 + 24));
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, a4, &v62);
  }
  *(void *)(*(void *)(a2 + 40) + v33 * *(unsigned __int16 *)(a2 + 4)) = *(void *)(*(void *)(a2 + 40)
                                                                                      + v33
                                                                                      * *(unsigned __int16 *)(a2 + 4)) & ~*(void *)a3 | *(void *)(*a5 + 8);
  uint64_t v54 = *(void *)(a2 + 40);
  uint64_t v55 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v54 + v33 * v55 + *(int *)(a3 + 40)) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*a5 + 16));
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  return v33;
}

void sub_19E96C4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned long long,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, double **a3)
{
  *(void *)&long long v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 == v6)
  {
    long long v12 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v12, &v13);
    uint64_t v5 = *a3;
    uint64_t v6 = a3[1];
  }
  if ((char *)v6 - (char *)v5 != 16 || *(void *)v5)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  double v8 = v5[1];
  uint64_t v9 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
  *(float *)(*(void *)(a1 + 224) + 4 * v9) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v8);
  return v9;
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v76 = *(void *)(a2 + 32) * v9;
  unint64_t v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v76, (void **)(a2 + 40), v9);
  ++*(void *)(a2 + 32);
  unint64_t v65 = a4;
  unsigned int v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  unsigned int v12 = *(_DWORD *)(a2 + 52);
  unint64_t v13 = v12 * (unint64_t)v11;
  BOOL v24 = v12 == 64;
  uint64_t v14 = (*(void *)(*(void *)(a2 + 72) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v24) {
    uint64_t v14 = *(void *)(*(void *)(a2 + 72) + (v13 >> 3));
  }
  int v66 = v14;
  uint64_t v15 = *a5;
  double v17 = *(long long ***)(*a5 + 120);
  uint64_t v16 = *(std::__shared_weak_count **)(*a5 + 128);
  int v18 = *(unsigned __int8 *)v17;
  long long v19 = *(double **)(*a5 + 136);
  int v20 = *(unsigned __int8 *)v19;
  int v21 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v69 = *(unsigned char *)(*a5 + 64) == 0;
  int v22 = *(_DWORD *)(*a5 + 4);
  unint64_t v76 = (unint64_t)v17;
  uint64_t v77 = v16;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a5;
    long long v19 = *(double **)(*a5 + 136);
  }
  int v23 = *(std::__shared_weak_count **)(v15 + 144);
  unint64_t v74 = v19;
  int v75 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18) {
    BOOL v24 = v20 == 0;
  }
  else {
    BOOL v24 = 0;
  }
  int v25 = v24;
  unint64_t v26 = v10 / v9;
  uint64_t v70 = a5;
  if ((v20 | v18 || *((double *)v17 + 3) >= v19[3]) && (BOOL v27 = v21 != 0, !v25))
  {
    BOOL v67 = v16;
    uint64_t v16 = v23;
    unsigned int v28 = v17;
    double v17 = (long long **)v19;
    int v29 = v18;
    int v18 = v20;
    BOOL v69 = v27;
  }
  else
  {
    if ((v22 - 1) > 4) {
      int v22 = 3;
    }
    else {
      int v22 = dword_19EC7C9B0[v22 - 1];
    }
    unint64_t v76 = (unint64_t)v19;
    uint64_t v77 = v23;
    BOOL v67 = v23;
    unsigned int v28 = (long long **)v19;
    int v29 = v20;
    unint64_t v74 = (double *)v17;
    int v75 = v16;
  }
  unsigned int v30 = *(unsigned __int8 *)(a2 + 13);
  if (v30 - 2 < 2)
  {
    if (v22 != 2)
    {
      if (v22 != 1) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
LABEL_30:
    int v38 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    int v32 = a3[2];
    unint64_t v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v38 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v34 = *v33;
    int v35 = a3[3];
    unsigned int v36 = (*v33 >> v32) & v35 | 8;
    goto LABEL_31;
  }
  if (v30 > 1)
  {
    int v37 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    int v32 = a3[2];
    unint64_t v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v37 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v34 = *v33;
    int v35 = a3[3];
    unsigned int v36 = v35 & (*v33 >> v32) & 0xFFFFFFC7 | (8 * v22);
    goto LABEL_31;
  }
  if (v22 == 3) {
    goto LABEL_30;
  }
  if (v22) {
    goto LABEL_32;
  }
LABEL_28:
  int v31 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
  int v32 = a3[2];
  unint64_t v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v31 * *(unsigned __int16 *)(a2 + 4));
  unsigned int v34 = *v33;
  int v35 = a3[3];
  unsigned int v36 = (*v33 >> v32) & v35 & 0xFFFFFFF7;
LABEL_31:
  *unint64_t v33 = (v36 << v32) | v34 & ~(v35 << v32);
LABEL_32:
  uint64_t v39 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  if (v69) {
    int v40 = 4;
  }
  else {
    int v40 = 0;
  }
  *(_DWORD *)(v39 + (int)a3[1]) = (((*(_DWORD *)(v39 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v40) << a3[2]) | *(_DWORD *)(v39 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v41 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v41 + (int)a3[1]) = (((*(_DWORD *)(v41 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v29) << a3[2]) | *(_DWORD *)(v41 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v42 = v11 + v66;
  uint64_t v43 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v43 + (int)a3[1]) = (((*(_DWORD *)(v43 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v43 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v29 && v18)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, v28[10], v28[11], v28[11] - v28[10]);
    unsigned int v44 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, __p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v72, 0, sizeof(v72));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v72, v17[10], v17[11], v17[11] - v17[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, v72);
    if (v72[0]) {
      operator delete(v72[0]);
    }
    int v45 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    uint64_t v46 = *(void *)(a2 + 40);
    int v47 = *(unsigned __int16 *)(a2 + 4);
    int v48 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v44 - v42);
    uint64_t v49 = (v45 * v47);
    goto LABEL_42;
  }
  if (v29 || !v18)
  {
    if (!(v18 | v29))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, v65, &v76);
      uint64_t v61 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, v65, &v74);
      int v62 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
      uint64_t v46 = *(void *)(a2 + 40);
      int v63 = *(unsigned __int16 *)(a2 + 4);
      unsigned int v64 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v61 - v26);
      int v48 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v64);
      uint64_t v49 = (v62 * v63);
LABEL_42:
      *(_DWORD *)(v46 + v49 + a3[4]) = *(_DWORD *)(v46 + v49 + a3[4]) & ~(a3[6] << a3[5]) | (v48 << a3[5]);
    }
  }
  else
  {
    memset(v71, 0, sizeof(v71));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v71, v17[10], v17[11], v17[11] - v17[10]);
    unsigned int v50 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(a2, a1, v71);
    if (v71[0]) {
      operator delete(v71[0]);
    }
    int v51 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    uint64_t v52 = *(void *)(a2 + 40);
    int v53 = *(unsigned __int16 *)(a2 + 4);
    *(_DWORD *)(v52 + (v51 * v53) + a3[4]) = *(_DWORD *)(v52
                                                                                   + (v51 * v53)
                                                                                   + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v50 - v42) << a3[5]);
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,0>(a1, a2, a3, v65, &v76);
  }
  int v54 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
  uint64_t v55 = *(void *)(a2 + 40);
  int v56 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v55 + (v54 * v56)) = *(_DWORD *)(v55 + (v54 * v56)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(void *)(*v70 + 8));
  int v57 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
  uint64_t v58 = *(void *)(a2 + 40);
  int v59 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v58 + (v57 * v59) + (int)a3[7]) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*v70 + 16));
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  return v26;
}

void sub_19E96CC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)3>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, void *a3)
{
  *((void *)&v23 + 1) = *MEMORY[0x1E4F143B8];
  if (*a3 == a3[1])
  {
    long long v22 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v22, &v23);
  }
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t v21 = 0;
  std::vector<double>::vector(&v22, v6, &v21);
  uint64_t v7 = (double *)v22;
  uint64_t v8 = a3[1] - *a3;
  if (v8)
  {
    unint64_t v9 = v8 >> 4;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    unint64_t v10 = (double *)(*a3 + 8);
    do
    {
      uint64_t v11 = *((void *)v10 - 1);
      double v12 = *v10;
      v10 += 2;
      v7[v11] = v12;
      --v9;
    }
    while (v9);
  }
  double v13 = *v7;
  unint64_t v14 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
  *(float *)(*(void *)(a1 + 224) + 4 * v14) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v13);
  uint64_t v15 = (double *)v22;
  if (*((void *)&v22 + 1) - (void)v22 >= 9uLL)
  {
    unint64_t v16 = 1;
    do
    {
      double v17 = v15[v16];
      uint64_t v18 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
      *(float *)(*(void *)(a1 + 224) + 4 * v1_Block_object_dispose(&a9, 8) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v17);
      ++v16;
      uint64_t v15 = (double *)v22;
    }
    while (v16 < (uint64_t)(*((void *)&v22 + 1) - v22) >> 3);
  }
  unint64_t v19 = *(void *)(a1 + 24);
  if (v15)
  {
    *((void *)&v22 + 1) = v15;
    operator delete(v15);
  }
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v14 / v19);
}

void sub_19E96CE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v77 = *(void *)(a2 + 32) * v9;
  unint64_t v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v77, (void **)(a2 + 40), v9);
  ++*(void *)(a2 + 32);
  unint64_t v67 = a4;
  unsigned int v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  unsigned int v12 = *(_DWORD *)(a2 + 164);
  unint64_t v13 = v12 * (unint64_t)v11;
  BOOL v25 = v12 == 64;
  uint64_t v14 = (*(void *)(*(void *)(a2 + 184) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v25) {
    uint64_t v14 = *(void *)(*(void *)(a2 + 184) + (v13 >> 3));
  }
  unsigned int v68 = v14;
  uint64_t v15 = *a5;
  double v17 = *(long long ***)(*a5 + 120);
  unint64_t v16 = *(std::__shared_weak_count **)(*a5 + 128);
  int v18 = *(unsigned __int8 *)v17;
  unint64_t v19 = *(double **)(*a5 + 136);
  int v20 = *(unsigned __int8 *)v19;
  int v21 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v22 = *(unsigned char *)(*a5 + 64) == 0;
  int v23 = *(_DWORD *)(*a5 + 4);
  unint64_t v77 = (unint64_t)v17;
  int v78 = v16;
  unint64_t v71 = a5;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a5;
    unint64_t v19 = *(double **)(*a5 + 136);
  }
  BOOL v24 = *(std::__shared_weak_count **)(v15 + 144);
  int v75 = v19;
  unint64_t v76 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18) {
    BOOL v25 = v20 == 0;
  }
  else {
    BOOL v25 = 0;
  }
  int v26 = v25;
  unint64_t v27 = v10 / v9;
  if ((v20 | v18 || *((double *)v17 + 3) >= v19[3]) && (BOOL v28 = v21 != 0, !v26))
  {
    int v29 = v16;
    unint64_t v16 = v24;
    unsigned int v30 = v17;
    double v17 = (long long **)v19;
    int v31 = v18;
    int v18 = v20;
    BOOL v22 = v28;
  }
  else
  {
    if ((v23 - 1) > 4) {
      int v23 = 3;
    }
    else {
      int v23 = dword_19EC7C9B0[v23 - 1];
    }
    unint64_t v77 = (unint64_t)v19;
    int v78 = v24;
    int v29 = v24;
    unsigned int v30 = (long long **)v19;
    int v31 = v20;
    int v75 = (double *)v17;
    unint64_t v76 = v16;
  }
  unsigned int v32 = *(unsigned __int8 *)(a2 + 13);
  BOOL v69 = v29;
  if (v32 - 2 < 2)
  {
    if (v23 != 2)
    {
      if (v23 != 1) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
LABEL_30:
    int v40 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27);
    int v34 = a3[2];
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v40 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v36 = *v35;
    int v37 = a3[3];
    unsigned int v38 = (*v35 >> v34) & v37 | 8;
    goto LABEL_31;
  }
  if (v32 > 1)
  {
    int v39 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27);
    int v34 = a3[2];
    int v35 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v39 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v36 = *v35;
    int v37 = a3[3];
    unsigned int v38 = v37 & (*v35 >> v34) & 0xFFFFFFC7 | (8 * v23);
    goto LABEL_31;
  }
  if (v23 == 3) {
    goto LABEL_30;
  }
  if (v23) {
    goto LABEL_32;
  }
LABEL_28:
  int v33 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27);
  int v34 = a3[2];
  int v35 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v33 * *(unsigned __int16 *)(a2 + 4));
  unsigned int v36 = *v35;
  int v37 = a3[3];
  unsigned int v38 = (*v35 >> v34) & v37 & 0xFFFFFFF7;
LABEL_31:
  unsigned int *v35 = (v38 << v34) | v36 & ~(v37 << v34);
LABEL_32:
  uint64_t v41 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27)
      * *(unsigned __int16 *)(a2 + 4);
  if (v22) {
    int v42 = 4;
  }
  else {
    int v42 = 0;
  }
  *(_DWORD *)(v41 + (int)a3[1]) = (((*(_DWORD *)(v41 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v42) << a3[2]) | *(_DWORD *)(v41 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v43 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v43 + (int)a3[1]) = (((*(_DWORD *)(v43 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v31) << a3[2]) | *(_DWORD *)(v43 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v44 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v44 + (int)a3[1]) = (((*(_DWORD *)(v44 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v44 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v31 && v18)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, v30[10], v30[11], v30[11] - v30[10]);
    unsigned int v45 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)__p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v73, 0, sizeof(v73));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v73, v17[10], v17[11], v17[11] - v17[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)v73);
    if (v73[0]) {
      operator delete(v73[0]);
    }
    int v46 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27);
    uint64_t v47 = *(void *)(a2 + 40);
    int v48 = *(unsigned __int16 *)(a2 + 4);
    int v49 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v45 - (unint64_t)v68);
    uint64_t v50 = v47 + (v46 * v48);
    goto LABEL_42;
  }
  if (v31 || !v18)
  {
    if (!(v18 | v31))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, v67, &v77);
      uint64_t v62 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, v67, &v75);
      int v63 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27);
      uint64_t v64 = *(void *)(a2 + 40);
      int v65 = *(unsigned __int16 *)(a2 + 4);
      unsigned int v66 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v62 - v27);
      int v49 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v66);
      uint64_t v50 = v64 + (v63 * v65);
LABEL_42:
      *(_DWORD *)(v50 + a3[4]) = *(_DWORD *)(v50 + a3[4]) & ~(a3[6] << a3[5]) | (v49 << a3[5]);
    }
  }
  else
  {
    memset(v72, 0, sizeof(v72));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v72, v17[10], v17[11], v17[11] - v17[10]);
    unsigned int v51 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(a2, a1, (uint64_t *)v72);
    if (v72[0]) {
      operator delete(v72[0]);
    }
    int v52 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27);
    uint64_t v53 = *(void *)(a2 + 40);
    int v54 = *(unsigned __int16 *)(a2 + 4);
    *(_DWORD *)(v53 + (v52 * v54) + a3[4]) = *(_DWORD *)(v53
                                                                                   + (v52 * v54)
                                                                                   + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v51 - (unint64_t)v68) << a3[5]);
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,0>(a1, a2, a3, v67, &v77);
  }
  int v55 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27);
  uint64_t v56 = *(void *)(a2 + 40);
  int v57 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v56 + (v55 * v57)) = *(_DWORD *)(v56 + (v55 * v57)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(void *)(*v71 + 8));
  int v58 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v27);
  uint64_t v59 = *(void *)(a2 + 40);
  int v60 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v59 + (v58 * v60) + (int)a3[7]) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*v71 + 16));
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  return v27;
}

void sub_19E96D4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)2>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)&long long v20 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 == v6)
  {
    long long v19 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v19, &v20);
    uint64_t v5 = *a3;
    uint64_t v6 = a3[1];
  }
  uint64_t v7 = v6 - v5;
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = v7 >> 4;
    unsigned int v12 = (void **)(a1 + 224);
    do
    {
      uint64_t v13 = *(void *)(v5 + v8);
      if (v9 == v11 - 1) {
        v13 |= 1 << (*(unsigned char *)(a1 + 11) - 1);
      }
      uint64_t v14 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), v13);
      double v15 = *(double *)(*a3 + v8 + 8);
      uint64_t v16 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), v12);
      *((float *)*v12 + v16) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v15);
      if (!v9) {
        unint64_t v10 = v14;
      }
      ++v9;
      uint64_t v5 = *a3;
      unint64_t v11 = (a3[1] - *a3) >> 4;
      v8 += 16;
    }
    while (v9 < v11);
  }
  else
  {
    unint64_t v10 = 0;
  }
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v10);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v76 = *(void *)(a2 + 32) * v9;
  unint64_t v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v76, (void **)(a2 + 40), v9);
  ++*(void *)(a2 + 32);
  unint64_t v65 = a4;
  unsigned int v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  unsigned int v12 = *(_DWORD *)(a2 + 52);
  unint64_t v13 = v12 * (unint64_t)v11;
  BOOL v24 = v12 == 64;
  uint64_t v14 = (*(void *)(*(void *)(a2 + 72) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v24) {
    uint64_t v14 = *(void *)(*(void *)(a2 + 72) + (v13 >> 3));
  }
  int v66 = v14;
  uint64_t v15 = *a5;
  double v17 = *(long long ***)(*a5 + 120);
  uint64_t v16 = *(std::__shared_weak_count **)(*a5 + 128);
  int v18 = *(unsigned __int8 *)v17;
  long long v19 = *(double **)(*a5 + 136);
  int v20 = *(unsigned __int8 *)v19;
  int v21 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v69 = *(unsigned char *)(*a5 + 64) == 0;
  int v22 = *(_DWORD *)(*a5 + 4);
  unint64_t v76 = (unint64_t)v17;
  unint64_t v77 = v16;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a5;
    long long v19 = *(double **)(*a5 + 136);
  }
  int v23 = *(std::__shared_weak_count **)(v15 + 144);
  unint64_t v74 = v19;
  int v75 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18) {
    BOOL v24 = v20 == 0;
  }
  else {
    BOOL v24 = 0;
  }
  int v25 = v24;
  unint64_t v26 = v10 / v9;
  uint64_t v70 = a5;
  if ((v20 | v18 || *((double *)v17 + 3) >= v19[3]) && (BOOL v27 = v21 != 0, !v25))
  {
    unint64_t v67 = v16;
    uint64_t v16 = v23;
    BOOL v28 = v17;
    double v17 = (long long **)v19;
    int v29 = v18;
    int v18 = v20;
    BOOL v69 = v27;
  }
  else
  {
    if ((v22 - 1) > 4) {
      int v22 = 3;
    }
    else {
      int v22 = dword_19EC7C9B0[v22 - 1];
    }
    unint64_t v76 = (unint64_t)v19;
    unint64_t v77 = v23;
    unint64_t v67 = v23;
    BOOL v28 = (long long **)v19;
    int v29 = v20;
    unint64_t v74 = (double *)v17;
    int v75 = v16;
  }
  unsigned int v30 = *(unsigned __int8 *)(a2 + 13);
  if (v30 - 2 < 2)
  {
    if (v22 != 2)
    {
      if (v22 != 1) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
LABEL_30:
    int v38 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    int v32 = a3[2];
    int v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v38 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v34 = *v33;
    int v35 = a3[3];
    unsigned int v36 = (*v33 >> v32) & v35 | 8;
    goto LABEL_31;
  }
  if (v30 > 1)
  {
    int v37 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    int v32 = a3[2];
    int v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v37 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v34 = *v33;
    int v35 = a3[3];
    unsigned int v36 = v35 & (*v33 >> v32) & 0xFFFFFFC7 | (8 * v22);
    goto LABEL_31;
  }
  if (v22 == 3) {
    goto LABEL_30;
  }
  if (v22) {
    goto LABEL_32;
  }
LABEL_28:
  int v31 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
  int v32 = a3[2];
  int v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v31 * *(unsigned __int16 *)(a2 + 4));
  unsigned int v34 = *v33;
  int v35 = a3[3];
  unsigned int v36 = (*v33 >> v32) & v35 & 0xFFFFFFF7;
LABEL_31:
  *int v33 = (v36 << v32) | v34 & ~(v35 << v32);
LABEL_32:
  uint64_t v39 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  if (v69) {
    int v40 = 4;
  }
  else {
    int v40 = 0;
  }
  *(_DWORD *)(v39 + (int)a3[1]) = (((*(_DWORD *)(v39 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v40) << a3[2]) | *(_DWORD *)(v39 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v41 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v41 + (int)a3[1]) = (((*(_DWORD *)(v41 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v29) << a3[2]) | *(_DWORD *)(v41 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v42 = v11 + v66;
  uint64_t v43 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v43 + (int)a3[1]) = (((*(_DWORD *)(v43 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v43 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v29 && v18)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, v28[10], v28[11], v28[11] - v28[10]);
    unsigned int v44 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)__p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v72, 0, sizeof(v72));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v72, v17[10], v17[11], v17[11] - v17[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)v72);
    if (v72[0]) {
      operator delete(v72[0]);
    }
    int v45 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    uint64_t v46 = *(void *)(a2 + 40);
    int v47 = *(unsigned __int16 *)(a2 + 4);
    int v48 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v44 - v42);
    uint64_t v49 = (v45 * v47);
    goto LABEL_42;
  }
  if (v29 || !v18)
  {
    if (!(v18 | v29))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, v65, &v76);
      uint64_t v61 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, v65, &v74);
      int v62 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
      uint64_t v46 = *(void *)(a2 + 40);
      int v63 = *(unsigned __int16 *)(a2 + 4);
      unsigned int v64 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v61 - v26);
      int v48 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v64);
      uint64_t v49 = (v62 * v63);
LABEL_42:
      *(_DWORD *)(v46 + v49 + a3[4]) = *(_DWORD *)(v46 + v49 + a3[4]) & ~(a3[6] << a3[5]) | (v48 << a3[5]);
    }
  }
  else
  {
    memset(v71, 0, sizeof(v71));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v71, v17[10], v17[11], v17[11] - v17[10]);
    unsigned int v50 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(a2, a1, (uint64_t **)v71);
    if (v71[0]) {
      operator delete(v71[0]);
    }
    int v51 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    uint64_t v52 = *(void *)(a2 + 40);
    int v53 = *(unsigned __int16 *)(a2 + 4);
    *(_DWORD *)(v52 + (v51 * v53) + a3[4]) = *(_DWORD *)(v52
                                                                                   + (v51 * v53)
                                                                                   + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v50 - v42) << a3[5]);
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,0>(a1, a2, a3, v65, &v76);
  }
  int v54 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
  uint64_t v55 = *(void *)(a2 + 40);
  int v56 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v55 + (v54 * v56)) = *(_DWORD *)(v55 + (v54 * v56)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(void *)(*v70 + 8));
  int v57 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
  uint64_t v58 = *(void *)(a2 + 40);
  int v59 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v58 + (v57 * v59) + (int)a3[7]) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*v70 + 16));
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  return v26;
}

void sub_19E96DCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)1>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  *(void *)&long long v14 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 == v7)
  {
    long long v13 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v13, &v14);
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1];
  }
  if ((char *)v7 - (char *)v6 != 16)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  unint64_t v8 = CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)(a1 + 104), *v6);
  double v9 = *((double *)*a3 + 1);
  uint64_t v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
  *(float *)(*(void *)(a1 + 224) + 4 * v10) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v9);
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v8);
}

unint64_t CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9 = *(unsigned __int16 *)(a2 + 4);
  unint64_t v76 = *(void *)(a2 + 32) * v9;
  unint64_t v10 = CoreML::Archiver::MMappedContentManager::extend_data_block<unsigned char>(a1, (uint64_t *)&v76, (void **)(a2 + 40), v9);
  ++*(void *)(a2 + 32);
  unint64_t v65 = a4;
  unsigned int v11 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(a4);
  unsigned int v12 = *(_DWORD *)(a2 + 52);
  unint64_t v13 = v12 * (unint64_t)v11;
  BOOL v24 = v12 == 64;
  uint64_t v14 = (*(void *)(*(void *)(a2 + 72) + (v13 >> 3)) >> (v13 & 7)) & ~(-1 << v12);
  if (v24) {
    uint64_t v14 = *(void *)(*(void *)(a2 + 72) + (v13 >> 3));
  }
  int v66 = v14;
  uint64_t v15 = *a5;
  double v17 = *(long long ***)(*a5 + 120);
  uint64_t v16 = *(std::__shared_weak_count **)(*a5 + 128);
  int v18 = *(unsigned __int8 *)v17;
  long long v19 = *(double **)(*a5 + 136);
  int v20 = *(unsigned __int8 *)v19;
  int v21 = *(unsigned __int8 *)(*a5 + 64);
  BOOL v69 = *(unsigned char *)(*a5 + 64) == 0;
  int v22 = *(_DWORD *)(*a5 + 4);
  unint64_t v76 = (unint64_t)v17;
  unint64_t v77 = v16;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a5;
    long long v19 = *(double **)(*a5 + 136);
  }
  int v23 = *(std::__shared_weak_count **)(v15 + 144);
  unint64_t v74 = v19;
  int v75 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18) {
    BOOL v24 = v20 == 0;
  }
  else {
    BOOL v24 = 0;
  }
  int v25 = v24;
  unint64_t v26 = v10 / v9;
  uint64_t v70 = a5;
  if ((v20 | v18 || *((double *)v17 + 3) >= v19[3]) && (BOOL v27 = v21 != 0, !v25))
  {
    unint64_t v67 = v16;
    uint64_t v16 = v23;
    BOOL v28 = v17;
    double v17 = (long long **)v19;
    int v29 = v18;
    int v18 = v20;
    BOOL v69 = v27;
  }
  else
  {
    if ((v22 - 1) > 4) {
      int v22 = 3;
    }
    else {
      int v22 = dword_19EC7C9B0[v22 - 1];
    }
    unint64_t v76 = (unint64_t)v19;
    unint64_t v77 = v23;
    unint64_t v67 = v23;
    BOOL v28 = (long long **)v19;
    int v29 = v20;
    unint64_t v74 = (double *)v17;
    int v75 = v16;
  }
  unsigned int v30 = *(unsigned __int8 *)(a2 + 13);
  if (v30 - 2 < 2)
  {
    if (v22 != 2)
    {
      if (v22 != 1) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
LABEL_30:
    int v38 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    int v32 = a3[2];
    int v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v38 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v34 = *v33;
    int v35 = a3[3];
    unsigned int v36 = (*v33 >> v32) & v35 | 8;
    goto LABEL_31;
  }
  if (v30 > 1)
  {
    int v37 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    int v32 = a3[2];
    int v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v37 * *(unsigned __int16 *)(a2 + 4));
    unsigned int v34 = *v33;
    int v35 = a3[3];
    unsigned int v36 = v35 & (*v33 >> v32) & 0xFFFFFFC7 | (8 * v22);
    goto LABEL_31;
  }
  if (v22 == 3) {
    goto LABEL_30;
  }
  if (v22) {
    goto LABEL_32;
  }
LABEL_28:
  int v31 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
  int v32 = a3[2];
  int v33 = (unsigned int *)(*(void *)(a2 + 40) + (int)a3[1] + v31 * *(unsigned __int16 *)(a2 + 4));
  unsigned int v34 = *v33;
  int v35 = a3[3];
  unsigned int v36 = (*v33 >> v32) & v35 & 0xFFFFFFF7;
LABEL_31:
  *int v33 = (v36 << v32) | v34 & ~(v35 << v32);
LABEL_32:
  uint64_t v39 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  if (v69) {
    int v40 = 4;
  }
  else {
    int v40 = 0;
  }
  *(_DWORD *)(v39 + (int)a3[1]) = (((*(_DWORD *)(v39 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFB | v40) << a3[2]) | *(_DWORD *)(v39 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v41 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v41 + (int)a3[1]) = (((*(_DWORD *)(v41 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFE | v29) << a3[2]) | *(_DWORD *)(v41 + (int)a3[1]) & ~(a3[3] << a3[2]);
  uint64_t v42 = v11 + v66;
  uint64_t v43 = *(void *)(a2 + 40)
      + CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26)
      * *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v43 + (int)a3[1]) = (((*(_DWORD *)(v43 + (int)a3[1]) >> a3[2]) & a3[3] & 0xFFFFFFFD | (2 * (v18 != 0))) << a3[2]) | *(_DWORD *)(v43 + (int)a3[1]) & ~(a3[3] << a3[2]);
  if (v29 && v18)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)__p, v28[10], v28[11], v28[11] - v28[10]);
    unsigned int v44 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, (double **)__p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    memset(v72, 0, sizeof(v72));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v72, v17[10], v17[11], v17[11] - v17[10]);
    CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, (double **)v72);
    if (v72[0]) {
      operator delete(v72[0]);
    }
    int v45 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    uint64_t v46 = *(void *)(a2 + 40);
    int v47 = *(unsigned __int16 *)(a2 + 4);
    int v48 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v44 - v42);
    uint64_t v49 = (v45 * v47);
    goto LABEL_42;
  }
  if (v29 || !v18)
  {
    if (!(v18 | v29))
    {
      CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, v65, &v76);
      uint64_t v61 = CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, v65, &v74);
      int v62 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
      uint64_t v46 = *(void *)(a2 + 40);
      int v63 = *(unsigned __int16 *)(a2 + 4);
      unsigned int v64 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v61 - v26);
      int v48 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v64);
      uint64_t v49 = (v62 * v63);
LABEL_42:
      *(_DWORD *)(v46 + v49 + a3[4]) = *(_DWORD *)(v46 + v49 + a3[4]) & ~(a3[6] << a3[5]) | (v48 << a3[5]);
    }
  }
  else
  {
    memset(v71, 0, sizeof(v71));
    std::vector<std::pair<unsigned long,double>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,double>*,std::pair<unsigned long,double>*>((char *)v71, v17[10], v17[11], v17[11] - v17[10]);
    unsigned int v50 = CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(a2, a1, (double **)v71);
    if (v71[0]) {
      operator delete(v71[0]);
    }
    int v51 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
    uint64_t v52 = *(void *)(a2 + 40);
    int v53 = *(unsigned __int16 *)(a2 + 4);
    *(_DWORD *)(v52 + (v51 * v53) + a3[4]) = *(_DWORD *)(v52
                                                                                   + (v51 * v53)
                                                                                   + a3[4]) & ~(a3[6] << a3[5]) | (CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v50 - v42) << a3[5]);
    CoreML::TreeEnsembles::Internal::V2::add_node_to_image<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,0>(a1, a2, a3, v65, &v76);
  }
  int v54 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
  uint64_t v55 = *(void *)(a2 + 40);
  int v56 = *(unsigned __int16 *)(a2 + 4);
  *(_DWORD *)(v55 + (v54 * v56)) = *(_DWORD *)(v55 + (v54 * v56)) & ~*a3 | CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(*(void *)(*v70 + 8));
  int v57 = CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v26);
  uint64_t v58 = *(void *)(a2 + 40);
  int v59 = *(unsigned __int16 *)(a2 + 4);
  *(float *)(v58 + (v57 * v59) + (int)a3[7]) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(*(double *)(*v70 + 16));
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  return v26;
}

void sub_19E96E4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

unint64_t CoreML::TreeEnsembles::Internal::CTTreeData<CoreML::TreeEnsembles::Internal::V2_Profile<float,unsigned int,(CoreML::TreeEnsembles::Internal::EvaluationValueMode)0>,2u>::add_evaluation_value(uint64_t a1, uint64_t a2, double **a3)
{
  *(void *)&long long v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 == v6)
  {
    long long v12 = 0uLL;
    std::vector<std::pair<unsigned long,double>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,double> const*,std::pair<unsigned long,double> const*>(a3, &v12, &v13);
    uint64_t v5 = *a3;
    uint64_t v6 = a3[1];
  }
  if ((char *)v6 - (char *)v5 != 16 || *(void *)v5)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  double v8 = v5[1];
  unint64_t v9 = CoreML::Archiver::MMappedContentManager::extend_data_block<float>(a2, (uint64_t *)(a1 + 216), (void **)(a1 + 224));
  *(float *)(*(void *)(a1 + 224) + 4 * v9) = CoreML::TreeEnsembles::Internal::check_cast<float,double>(v8);
  return CoreML::TreeEnsembles::Internal::check_cast<unsigned int,unsigned long long>(v9);
}

uint64_t CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultMultiDimensionProfile,0>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = (void *)a2[1];
  if (!v6)
  {
    uint64_t v16 = malloc_type_calloc(0x10uLL, 0x28uLL, 0x1000040FA189D19uLL);
    a2[1] = (uint64_t)v16;
    if (v16)
    {
      *(void *)&long long v52 = v16;
      uint64_t v17 = 0;
      std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)a1, (unint64_t)v16, (uint64_t *)&v52)[5] = 16;
      uint64_t v18 = 1;
      goto LABEL_22;
    }
    goto LABEL_39;
  }
  uint64_t v7 = *(void **)(a1 + 8);
  if (!v7) {
    goto LABEL_13;
  }
  double v8 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v9 = v7[4];
    BOOL v10 = v9 >= (unint64_t)v6;
    if (v9 >= (unint64_t)v6) {
      unsigned int v11 = v7;
    }
    else {
      unsigned int v11 = v7 + 1;
    }
    if (v10) {
      double v8 = v7;
    }
    uint64_t v7 = (void *)*v11;
  }
  while (*v11);
  if (v8 == (uint64_t *)(a1 + 8) || (unint64_t)v6 < v8[4]) {
LABEL_13:
  }
    double v8 = (uint64_t *)(a1 + 8);
  unint64_t v12 = v8[5];
  if (*a2 + 1 <= v12) {
    goto LABEL_21;
  }
  unint64_t v13 = (3 * v12 + 3) >> 1;
  uint64_t v14 = (char *)malloc_type_realloc(v6, 40 * v13, 0x1000040FA189D19uLL);
  if (!v14)
  {
LABEL_39:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v51 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v51, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
  }
  uint64_t v15 = v14;
  bzero(&v14[40 * v8[5]], 40 * (v13 - v8[5]));
  if (v15 == (char *)a2[1])
  {
    v8[5] = v13;
  }
  else
  {
    a2[1] = (uint64_t)v15;
    std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__remove_node_pointer((uint64_t **)a1, v8);
    operator delete(v8);
    *(void *)&long long v52 = a2[1];
    *((void *)&v52 + 1) = v13;
    std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::pair<void * const,unsigned long>>((uint64_t *)a1, v52, &v52);
  }
LABEL_21:
  uint64_t v17 = *a2;
  uint64_t v18 = *a2 + 1;
LABEL_22:
  *a2 = v18;
  uint64_t v20 = *a3 + 120;
  uint64_t v19 = *(void *)v20;
  uint64_t v21 = a2[1];
  uint64_t v22 = v21 + 40 * v17;
  *(_DWORD *)uint64_t v22 = *(_DWORD *)(*a3 + 4);
  *(void *)(v22 + _Block_object_dispose(&a9, 8) = *(void *)(v20 - 112);
  *(void *)(v22 + 16) = *(void *)(v20 - 104);
  *(unsigned char *)(v22 + 6) = *(unsigned char *)(v20 - 56);
  if (*(unsigned char *)v19)
  {
    uint64_t v23 = v21 + 40 * v17;
    *(unsigned char *)(v23 + 4) = 1;
    uint64_t v25 = *(void *)(v19 + 80);
    uint64_t v24 = *(void *)(v19 + 88);
    uint64_t v26 = CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a1, a2 + 4, (void **)a2 + 5, ((unint64_t)(v24 - v25) >> 3) | 1);
    unint64_t v27 = (v24 - v25) >> 4;
    *(void *)(v23 + 24) = v26;
    uint64_t v28 = a2[5];
    *(void *)(v28 + 8 * v26) = v27;
    if (v24 != v25)
    {
      if (v27 <= 1) {
        unint64_t v27 = 1;
      }
      int v29 = (void *)(v28 + 8 * v26 + 16);
      unsigned int v30 = (uint64_t *)(*(void *)(*(void *)v20 + 80) + 8);
      do
      {
        *(v29 - 1) = *(v30 - 1);
        uint64_t v31 = *v30;
        v30 += 2;
        *int v29 = v31;
        v29 += 2;
        --v27;
      }
      while (v27);
    }
  }
  else
  {
    uint64_t v32 = CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultMultiDimensionProfile,0>(a1, a2, v20);
    uint64_t v33 = a2[1] + 40 * v17;
    *(unsigned char *)(v33 + 4) = 0;
    *(void *)(v33 + 24) = v32 - v17;
  }
  uint64_t v34 = *a3;
  int v37 = *(unsigned char **)(v34 + 136);
  uint64_t v36 = v34 + 136;
  int v35 = v37;
  if (*v37)
  {
    uint64_t v38 = a2[1] + 40 * v17;
    *(unsigned char *)(v38 + 5) = 1;
    uint64_t v40 = *((void *)v35 + 10);
    uint64_t v39 = *((void *)v35 + 11);
    uint64_t v41 = CoreML::Archiver::MMappedContentManager::extend_data_block<double>(a1, a2 + 4, (void **)a2 + 5, ((unint64_t)(v39 - v40) >> 3) | 1);
    unint64_t v42 = (v39 - v40) >> 4;
    *(void *)(v38 + 32) = v41;
    uint64_t v43 = a2[5];
    *(void *)(v43 + 8 * v41) = v42;
    if (v39 != v40)
    {
      if (v42 <= 1) {
        unint64_t v42 = 1;
      }
      unsigned int v44 = (void *)(v43 + 8 * v41 + 16);
      int v45 = (uint64_t *)(*(void *)(*(void *)v36 + 80) + 8);
      do
      {
        *(v44 - 1) = *(v45 - 1);
        uint64_t v46 = *v45;
        v45 += 2;
        void *v44 = v46;
        v44 += 2;
        --v42;
      }
      while (v42);
    }
  }
  else
  {
    uint64_t v47 = CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultMultiDimensionProfile,0>(a1, a2, v36);
    uint64_t v48 = a2[1] + 40 * v17;
    *(unsigned char *)(v48 + 5) = 0;
    *(void *)(v48 + 32) = v47 - v17;
  }
  return v17;
}

uint64_t CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultSingleDimensionProfile,0>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = (void *)a2[1];
  if (!v6)
  {
    uint64_t v16 = malloc_type_calloc(0x10uLL, 0x28uLL, 0x1000040FA189D19uLL);
    a2[1] = (uint64_t)v16;
    if (v16)
    {
      *(void *)&long long v35 = v16;
      uint64_t v17 = 0;
      std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)a1, (unint64_t)v16, (uint64_t *)&v35)[5] = 16;
      uint64_t v18 = 1;
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  uint64_t v7 = *(void **)(a1 + 8);
  if (!v7) {
    goto LABEL_13;
  }
  double v8 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v9 = v7[4];
    BOOL v10 = v9 >= (unint64_t)v6;
    if (v9 >= (unint64_t)v6) {
      unsigned int v11 = v7;
    }
    else {
      unsigned int v11 = v7 + 1;
    }
    if (v10) {
      double v8 = v7;
    }
    uint64_t v7 = (void *)*v11;
  }
  while (*v11);
  if (v8 == (uint64_t *)(a1 + 8) || (unint64_t)v6 < v8[4]) {
LABEL_13:
  }
    double v8 = (uint64_t *)(a1 + 8);
  unint64_t v12 = v8[5];
  if (*a2 + 1 <= v12) {
    goto LABEL_21;
  }
  unint64_t v13 = (3 * v12 + 3) >> 1;
  uint64_t v14 = (char *)malloc_type_realloc(v6, 40 * v13, 0x1000040FA189D19uLL);
  if (!v14)
  {
LABEL_29:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v34 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v34, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
  }
  uint64_t v15 = v14;
  bzero(&v14[40 * v8[5]], 40 * (v13 - v8[5]));
  if (v15 == (char *)a2[1])
  {
    v8[5] = v13;
  }
  else
  {
    a2[1] = (uint64_t)v15;
    std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__remove_node_pointer((uint64_t **)a1, v8);
    operator delete(v8);
    *(void *)&long long v35 = a2[1];
    *((void *)&v35 + 1) = v13;
    std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::pair<void * const,unsigned long>>((uint64_t *)a1, v35, &v35);
  }
LABEL_21:
  uint64_t v17 = *a2;
  uint64_t v18 = *a2 + 1;
LABEL_22:
  *a2 = v18;
  uint64_t v19 = *a3;
  uint64_t v20 = a2[1];
  uint64_t v21 = v20 + 40 * v17;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)(*a3 + 4);
  *(void *)(v21 + _Block_object_dispose(&a9, 8) = *(void *)(v19 + 8);
  *(void *)(v21 + 16) = *(void *)(v19 + 16);
  *(unsigned char *)(v21 + 6) = *(unsigned char *)(v19 + 64);
  uint64_t v22 = *(void *)(v19 + 120);
  if (*(unsigned char *)v22)
  {
    uint64_t v23 = v20 + 40 * v17;
    *(unsigned char *)(v23 + 4) = 1;
    *(void *)(v23 + 24) = *(void *)(*(void *)(v22 + 80) + 8);
  }
  else
  {
    uint64_t v24 = CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultSingleDimensionProfile,0>(a1, a2, v19 + 120);
    uint64_t v25 = a2[1] + 40 * v17;
    *(unsigned char *)(v25 + 4) = 0;
    *(void *)(v25 + 24) = v24 - v17;
    uint64_t v19 = *a3;
  }
  uint64_t v28 = *(unsigned char **)(v19 + 136);
  uint64_t v26 = v19 + 136;
  unint64_t v27 = v28;
  if (*v28)
  {
    uint64_t v29 = a2[1] + 40 * v17;
    *(unsigned char *)(v29 + 5) = 1;
    *(void *)(v29 + 32) = *(void *)(*((void *)v27 + 10) + 8);
  }
  else
  {
    uint64_t v30 = CoreML::TreeEnsembles::Internal::add_node_to_image<CoreML::TreeEnsembles::Internal::DefaultSingleDimensionProfile,0>(a1, a2, v26);
    uint64_t v31 = a2[1] + 40 * v17;
    *(unsigned char *)(v31 + 5) = 0;
    *(void *)(v31 + 32) = v30 - v17;
  }
  return v17;
}

void sub_19E96EE30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E96F068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E96F138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E96F1C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E96F2C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E96FF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p)
{
  CoreML::Specification::Kernel::~Kernel((CoreML::Specification::Kernel *)&a16);
  CoreML::Specification::SupportVectorClassifier::~SupportVectorClassifier((CoreML::Specification::SupportVectorClassifier *)&a20);

  _Unwind_Resume(a1);
}

void sub_19E970190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9703EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_19E970648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E970744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5PixelBufferAndTensorStrategyKey::componentDataTypeOf()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t component_dtype = e5rt_tensor_desc_dtype_get_component_dtype();
  if (component_dtype)
  {
    uint64_t v1 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v5 = 1024;
      int v6 = component_dtype;
      _os_log_error_impl(&dword_19E58B000, v1, OS_LOG_TYPE_ERROR, "Failed to get the component data type for the tensor descriptor dtype. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get the component data type for the tensor descriptor dtype. E5RT: %s (%d)", e5rt_get_last_error_message(), component_dtype);
  }
  return 0;
}

void sub_19E970864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5PixelBufferAndTensorStrategyKey::componentPackOf()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t component_pack = e5rt_tensor_desc_dtype_get_component_pack();
  if (component_pack)
  {
    uint64_t v1 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v5 = 1024;
      int v6 = component_pack;
      _os_log_error_impl(&dword_19E58B000, v1, OS_LOG_TYPE_ERROR, "Failed to get the component pack for the tensor descriptor dtype. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get the component pack for the tensor descriptor dtype. E5RT: %s (%d)", e5rt_get_last_error_message(), component_pack);
  }
  return 0;
}

void sub_19E97097C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5PixelBufferAndTensorStrategyKey::MLE5PixelBufferAndTensorStrategyKey(uint64_t a1, int a2, uint64_t a3)
{
  MLE5TensorDataTypeOf(&v9);
  char v6 = MLE5PixelBufferAndTensorStrategyKey::componentDataTypeOf();
  char v7 = MLE5PixelBufferAndTensorStrategyKey::componentPackOf();
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = a3;
  *(_DWORD *)a1 = v6 & 7 | (8 * (v7 & 0xF));
  std::unique_ptr<e5rt_tensor_desc_dtype,MLE5ObjectDeleter<e5rt_tensor_desc_dtype>>::reset[abi:ne180100](&v9);
  return a1;
}

void sub_19E970A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<e5rt_tensor_desc_dtype,MLE5ObjectDeleter<e5rt_tensor_desc_dtype>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MLE5PixelBufferAndTensorStrategyKey::MLE5PixelBufferAndTensorStrategyKey(uint64_t a1, int a2)
{
  MLE5TensorDataTypeOf(&v7);
  char v4 = MLE5PixelBufferAndTensorStrategyKey::componentDataTypeOf();
  char v5 = MLE5PixelBufferAndTensorStrategyKey::componentPackOf();
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  *(_DWORD *)a1 = v4 & 7 | (8 * (v5 & 0xF));
  std::unique_ptr<e5rt_tensor_desc_dtype,MLE5ObjectDeleter<e5rt_tensor_desc_dtype>>::reset[abi:ne180100](&v7);
  return a1;
}

void sub_19E970AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<e5rt_tensor_desc_dtype,MLE5ObjectDeleter<e5rt_tensor_desc_dtype>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MLE5PixelBufferAndTensorStrategyKey::str(MLE5PixelBufferAndTensorStrategyKey *this, unsigned int *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  unsigned int v3 = a2[4];
  char v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"pixel_format_type: ", 19);
  char v19 = HIBYTE(v3);
  char v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v19, 1);
  char v19 = BYTE2(v3);
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v19, 1);
  char v19 = BYTE1(v3);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v19, 1);
  char v19 = v3;
  double v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v19, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"image_pixel_type: ", 18);
  id v9 = +[MLImageConstraint stringForImagePixelType:*((void *)a2 + 1)];
  BOOL v10 = (const char *)[v9 UTF8String];
  size_t v11 = strlen(v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, v11);

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"component_dtype: ", 17);
  if ((*a2 & 7) >= 5) {
    std::ostream::operator<<();
  }
  else {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)off_1E59A3FF0[*a2 & 7], qword_19EC7C9C8[*a2 & 7]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"component_pack: ", 16);
  unint64_t v12 = ((unint64_t)*a2 >> 3) & 0xF;
  if (v12 > 8) {
    std::ostream::operator<<();
  }
  else {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)off_1E59A4018[v12], qword_19EC7C9F0[v12]);
  }
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E4FBA408];
  uint64_t v13 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v16[0] = v13;
  v16[1] = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19F3C1850](&v18);
}

void sub_19E970DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19E9710C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  _Unwind_Resume(a1);
}

void *MLCustomLayerException::MLCustomLayerException(void *a1, long long *a2)
{
  *a1 = &unk_1EF0CE060;
  a1[1] = 0;
  unsigned int v3 = (std::string *)(a1 + 2);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    char v4 = (void *)a1[1];
  }
  else
  {
    char v4 = 0;
    long long v5 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v5;
  }
  a1[1] = 0;

  return a1;
}

void sub_19E971200(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void MLCustomLayerException::MLCustomLayerException(MLCustomLayerException *this, id *a2)
{
  *(void *)this = &unk_1EF0CE060;
  *((void *)this + 1) = a2[1];
  char v4 = (char *)(*((uint64_t (**)(id *))*a2 + 2))(a2);
  std::string::basic_string[abi:ne180100]<0>((void *)this + 2, v4);
}

void sub_19E9712AC(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void MLCustomLayerException::~MLCustomLayerException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1EF0CE060;
  if (SHIBYTE(this[4].__vftable) < 0) {
    operator delete(this[2].__vftable);
  }

  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_1EF0CE060;
  if (SHIBYTE(this[4].__vftable) < 0) {
    operator delete(this[2].__vftable);
  }

  std::exception::~exception(this);

  JUMPOUT(0x19F3C1920);
}

uint64_t MLCustomLayerException::what(MLCustomLayerException *this)
{
  uint64_t result = (uint64_t)this + 16;
  if (*((char *)this + 39) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_19E9716C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,char a34)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19E971C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  _Unwind_Resume(a1);
}

void sub_19E972114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  _Unwind_Resume(a1);
}

void sub_19E9727E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  _Unwind_Resume(a1);
}

void sub_19E972B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E972C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E972D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E972F2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E97305C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E973370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9734B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E973960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E973C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7132(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7133(uint64_t a1)
{
}

void sub_19E974004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v29 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_19E97431C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E97449C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E97469C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E97482C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E974B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E974D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E974EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E975150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E975230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9752BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E975370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9753F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9755B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9757F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E975B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  v16[2](v16);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19E975F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E9761B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E9766CC()
{
  __cxa_end_catch();

  JUMPOUT(0x19E976530);
}

void sub_19E9766DC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t CoreML::NNCompiler::Backend::MIL::Ios15::Ios15Backend::Compile(CoreML::NNCompiler::Backend::MIL::Ios15::Ios15Backend *this, objc_object *a2)
{
  v27[4] = *MEMORY[0x1E4F143B8];
  CoreML::NNCompiler::Backend::MIL::OptimizeProgram((CoreML::NNCompiler::Backend::MIL *)&v19, *((const IRProgram **)this + 1));
  std::string::basic_string[abi:ne180100]<0>(v25, "classify");
  v27[0] = &unk_1EF0DD078;
  v27[1] = CoreML::NNCompiler::Backend::MIL::Ios15::Translations::TranslateClassify;
  v27[3] = v27;
  char v4 = (MIL::Opsets::Common::ios15::ios15Opset *)std::unordered_map<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>::unordered_map((uint64_t)v24, (uint64_t)v25, 1);
  char v23 = 7;
  strcpy((char *)__p, "CoreML5");
  uint64_t OpsetName = MIL::Opsets::Common::ios15::ios15Opset::GetOpsetName(v4);
  size_t v7 = v6;
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  double v8 = (const void *)OpsetName;
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (__n128 *)operator new(v10 + 1);
    __dst.n128_u64[1] = v7;
    unint64_t v21 = v11 | 0x8000000000000000;
    __dst.n128_u64[0] = (unint64_t)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_8:
  }
    memmove(p_dst, v8, v7);
  p_dst->n128_u8[v7] = 0;
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::ProgramLayerTranslator((uint64_t)v17, v24, (long long *)__p, &__dst);
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__dst.n128_u64[0]);
  }
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)v24);
  std::__function::__value_func<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::~__value_func[abi:ne180100](v27);
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  v17[0] = &unk_1EF0CE508;
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::Translate(&v18, (const IRProgram *)v17, v19);
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(v17);
  CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetAttributesForFunctions((uint64_t)v18, *((void *)this + 3));
  MIL::Util::FindBlobFilePaths((uint64_t *)v17, v18, v12);
  uint64_t v13 = v18;
  uint64_t v18 = 0;
  uint64_t v16 = v13;
  CoreML::NNCompiler::Backend::MIL::WriteProgram((uint64_t *)&v16, *(unsigned int *)(*((void *)this + 3) + 120), a2, *((void *)this + 3) + 56);
  if (v16) {
    (*(void (**)(MIL::Util *))(*(void *)v16 + 8))(v16);
  }
  CoreML::NNCompiler::Backend::MetadataUtils::WriteMetadataIos15(*((void *)this + 3), (uint64_t)a2);
  CoreML::NNCompiler::Backend::MIL::CopyWeights((uint64_t *)(*((void *)this + 3) + 56), (uint64_t **)v17, (uint64_t)a2);
  v25[0] = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v25);
  uint64_t v14 = v18;
  uint64_t v18 = 0;
  if (v14) {
    (*(void (**)(MIL::Util *))(*(void *)v14 + 8))(v14);
  }
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_19E976A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  *(void *)(v23 - 12_Block_object_dispose(&a9, 8) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 128));
  uint64_t v25 = a22;
  a22 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = a23;
  a23 = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios15::Ios15Backend::~Ios15Backend(CoreML::NNCompiler::Backend::MIL::Ios15::Ios15Backend *this)
{
  CoreML::NNCompiler::Backend::MIL::Ios15::Ios15Backend::~Ios15Backend(this);

  JUMPOUT(0x19F3C1920);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF0CE4E0;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unsigned int v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_19E976BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2,std::allocator<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2>,void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::target_type()
{
}

uint64_t std::__function::__func<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2,std::allocator<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2>,void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6CoreML13TreeEnsembles8Internal16gatherPropertiesERKNSt3__110shared_ptrINS0_13_TreeEnsembleEEEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::__function::__func<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2,std::allocator<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2>,void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::operator()(uint64_t *result, uint64_t *a2)
{
  unsigned int v3 = result;
  uint64_t v4 = *a2;
  if (*(unsigned char *)*a2)
  {
    uint64_t v5 = result[2];
    ++*(void *)result[1];
    uint64_t v6 = *(void *)(v4 + 80);
    uint64_t v7 = *(void *)(v4 + 88);
    unint64_t v8 = (v7 - v6) >> 4;
    uint64_t v10 = (uint64_t **)(v5 + 64);
    id v9 = *(uint64_t **)(v5 + 64);
    if (v9)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = (uint64_t **)v9;
          unint64_t v12 = v9[4];
          if (v8 >= v12) {
            break;
          }
          id v9 = *v11;
          uint64_t v10 = v11;
          if (!*v11) {
            goto LABEL_18;
          }
        }
        if (v12 >= v8) {
          break;
        }
        id v9 = v11[1];
        if (!v9)
        {
          uint64_t v10 = v11 + 1;
          goto LABEL_18;
        }
      }
    }
    else
    {
      uint64_t v11 = (uint64_t **)(v5 + 64);
LABEL_18:
      uint64_t v19 = (uint64_t *)v11;
      uint64_t v11 = (uint64_t **)operator new(0x30uLL);
      v11[4] = (uint64_t *)v8;
      v11[5] = 0;
      *uint64_t v11 = 0;
      v11[1] = 0;
      void v11[2] = v19;
      *uint64_t v10 = (uint64_t *)v11;
      uint64_t v20 = **(void **)(v5 + 56);
      unint64_t v21 = (uint64_t *)v11;
      if (v20)
      {
        *(void *)(v5 + 56) = v20;
        unint64_t v21 = *v10;
      }
      uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 64), v21);
      ++*(void *)(v5 + 72);
      uint64_t v6 = *(void *)(*a2 + 80);
      uint64_t v7 = *(void *)(*a2 + 88);
    }
    v11[5] = (uint64_t *)((char *)v11[5] + 1);
    if (v6 != v7)
    {
      uint64_t v22 = v3[3];
      do
      {
        double v23 = *(double *)(v6 + 8);
        float v24 = v23;
        if (v23 != v24) {
          *(unsigned char *)(*(void *)v22 + 122) = 0;
        }
        v6 += 16;
      }
      while (v6 != v7);
    }
  }
  else
  {
    uint64_t v13 = result[2];
    uint64_t v15 = (uint64_t **)(v13 + 104);
    uint64_t v14 = *(uint64_t **)(v13 + 104);
    if (v14)
    {
      int v16 = *(_DWORD *)(v4 + 4);
      while (1)
      {
        while (1)
        {
          char v17 = (uint64_t **)v14;
          int v18 = *((_DWORD *)v14 + 8);
          if (v16 >= v18) {
            break;
          }
          uint64_t v14 = *v17;
          uint64_t v15 = v17;
          if (!*v17) {
            goto LABEL_28;
          }
        }
        if (v18 >= v16) {
          break;
        }
        uint64_t v14 = v17[1];
        if (!v14)
        {
          uint64_t v15 = v17 + 1;
          goto LABEL_28;
        }
      }
    }
    else
    {
      char v17 = (uint64_t **)(v13 + 104);
LABEL_28:
      uint64_t v25 = (uint64_t *)v17;
      char v17 = (uint64_t **)operator new(0x30uLL);
      *((_DWORD *)v17 + _Block_object_dispose(&a9, 8) = *(_DWORD *)(v4 + 4);
      v17[5] = 0;
      *char v17 = 0;
      v17[1] = 0;
      void v17[2] = v25;
      *uint64_t v15 = (uint64_t *)v17;
      uint64_t v26 = **(void **)(v13 + 96);
      unint64_t v27 = (uint64_t *)v17;
      if (v26)
      {
        *(void *)(v13 + 96) = v26;
        unint64_t v27 = *v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v13 + 104), v27);
      ++*(void *)(v13 + 112);
      uint64_t v4 = *a2;
      uint64_t v13 = v3[2];
    }
    v17[5] = (uint64_t *)((char *)v17[5] + 1);
    ++*(void *)v3[4];
    if (*(unsigned char *)(v4 + 64)) {
      *(unsigned char *)(v13 + 120) = 0;
    }
    else {
      *(unsigned char *)(v13 + 121) = 0;
    }
    uint64_t v28 = *(void *)(v4 + 8);
    if (*(void *)v13 <= (unint64_t)(v28 + 1)) {
      uint64_t v29 = v28 + 1;
    }
    else {
      uint64_t v29 = *(void *)v13;
    }
    *(void *)uint64_t v13 = v29;
    double v30 = *(double *)(v4 + 16);
    float v31 = v30;
    if (v30 != v31) {
      *(unsigned char *)(*(void *)v3[3] + 122) = 0;
    }
    uint64_t v32 = *(void *)(v3[6] + 24);
    if (!v32
      || ((*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 48))(v32, v4 + 120),
          (uint64_t v33 = *(void *)(v3[6] + 24)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v34 = *(uint64_t (**)(void))(*(void *)v33 + 48);
    return (uint64_t *)v34();
  }
  return result;
}

__n128 std::__function::__func<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2,std::allocator<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2>,void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0DD338;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

__n128 std::__function::__func<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2,std::allocator<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2>,void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v2 = &unk_1EF0DD338;
  *(_OWORD *)(v2 + _Block_object_dispose(&a9, 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

void std::__function::__func<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2,std::allocator<CoreML::TreeEnsembles::Internal::gatherProperties(std::shared_ptr<CoreML::TreeEnsembles::_TreeEnsemble> const&)::$_2>,void ()(std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode> const&)>::~__func()
{
}

void sub_19E977144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v13 = v11;

  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_19E977210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E977CF8(_Unwind_Exception *a1)
{
  long long v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19E977D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E977F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9780D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E97817C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E97820C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E978288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E978324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9783A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E978428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9784B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E97852C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E978598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E978E50()
{
  __cxa_end_catch();
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 232);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x19E978EE8);
}

void sub_19E978E5C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19E978E70()
{
}

void sub_19E978EE0()
{
}

void Archiver::_MemoryIStream::~_MemoryIStream(id *this)
{
  std::streambuf::~streambuf();

  std::istream::~istream();
}

{
  uint64_t v1;
  uint64_t vars8;

  Archiver::_MemoryIStream::~_MemoryIStream(this);
  MEMORY[0x19F3C1850](v1 + 96);

  JUMPOUT(0x19F3C1920);
}

{
  uint64_t v1;

  Archiver::_MemoryIStream::~_MemoryIStream(this);
  MEMORY[0x19F3C1850](v1 + 96);
}

uint64_t _MLModelOutputArchiver::_MLModelOutputArchiver(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  std::map<std::string,OArchive>::map[abi:ne180100](a1 + 24, (void *)(a2 + 24));
  return a1;
}

void sub_19E978FA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'Archiver::_MemoryIStream::~_MemoryIStream(Archiver::_MemoryIStream *this)
{
}

{
  uint64_t vars8;

  Archiver::_MemoryIStream::~_MemoryIStream((id *)((char *)this + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x19F3C1850);
}

void sub_19E9792E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9795F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E979A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7737(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7738(uint64_t a1)
{
}

void sub_19E979C04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E979C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E979E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }

  _Unwind_Resume(a1);
}

void sub_19E979F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E97A018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CoreML::NNCompiler::Backend::MIL::Ios18::Ios18Backend::Compile(CoreML::NNCompiler::Backend::MIL::Ios18::Ios18Backend *this, objc_object *a2)
{
  v27[4] = *MEMORY[0x1E4F143B8];
  CoreML::NNCompiler::Backend::MIL::OptimizeProgram((CoreML::NNCompiler::Backend::MIL *)&v19, *((const IRProgram **)this + 1));
  std::string::basic_string[abi:ne180100]<0>(v25, "classify");
  v27[0] = &unk_1EF0DD078;
  v27[1] = CoreML::NNCompiler::Backend::MIL::Ios15::Translations::TranslateClassify;
  v27[3] = v27;
  uint64_t v4 = (MIL::Opsets::Common::ios18::ios18Opset *)std::unordered_map<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>::unordered_map((uint64_t)v24, (uint64_t)v25, 1);
  char v23 = 7;
  strcpy((char *)__p, "CoreML8");
  uint64_t OpsetName = MIL::Opsets::Common::ios18::ios18Opset::GetOpsetName(v4);
  size_t v7 = v6;
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v8 = (const void *)OpsetName;
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (__n128 *)operator new(v10 + 1);
    __dst.n128_u64[1] = v7;
    unint64_t v21 = v11 | 0x8000000000000000;
    __dst.n128_u64[0] = (unint64_t)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_8:
  }
    memmove(p_dst, v8, v7);
  p_dst->n128_u8[v7] = 0;
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::ProgramLayerTranslator((uint64_t)v17, v24, (long long *)__p, &__dst);
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__dst.n128_u64[0]);
  }
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)v24);
  std::__function::__value_func<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::~__value_func[abi:ne180100](v27);
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  v17[0] = &unk_1EF0CE5E0;
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::Translate(&v18, (const IRProgram *)v17, v19);
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(v17);
  CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetAttributesForFunctions((uint64_t)v18, *((void *)this + 3));
  MIL::Util::FindBlobFilePaths((uint64_t *)v17, v18, v12);
  uint64_t v13 = v18;
  int v18 = 0;
  int v16 = v13;
  CoreML::NNCompiler::Backend::MIL::WriteProgram((uint64_t *)&v16, *(unsigned int *)(*((void *)this + 3) + 120), a2, *((void *)this + 3) + 56);
  if (v16) {
    (*(void (**)(MIL::Util *))(*(void *)v16 + 8))(v16);
  }
  CoreML::NNCompiler::Backend::MetadataUtils::WriteMetadataIos15(*((void *)this + 3), (uint64_t)a2);
  CoreML::NNCompiler::Backend::MIL::CopyWeights((uint64_t *)(*((void *)this + 3) + 56), (uint64_t **)v17, (uint64_t)a2);
  v25[0] = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v25);
  uint64_t v14 = v18;
  int v18 = 0;
  if (v14) {
    (*(void (**)(MIL::Util *))(*(void *)v14 + 8))(v14);
  }
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_19E97A328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  *(void *)(v23 - 12_Block_object_dispose(&a9, 8) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 128));
  uint64_t v25 = a22;
  a22 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = a23;
  a23 = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios18::Ios18Backend::~Ios18Backend(CoreML::NNCompiler::Backend::MIL::Ios18::Ios18Backend *this)
{
  CoreML::NNCompiler::Backend::MIL::Ios18::Ios18Backend::~Ios18Backend(this);

  JUMPOUT(0x19F3C1920);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF0CE5B8;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_19E97A654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E97A7B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E97A908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void deallocator(int a1, void *a2)
{
}

void sub_19E97C9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50)
{
  if (__p) {
    operator delete(__p);
  }
  if (a37) {
    operator delete(a37);
  }
  if (a40) {
    operator delete(a40);
  }

  _Unwind_Resume(a1);
}

void sub_19E97CDAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E97D00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  uint64_t v26 = *(void **)(v24 - 72);
  if (v26)
  {
    *(void *)(v24 - 64) = v26;
    operator delete(v26);
  }

  _Unwind_Resume(a1);
}

void sub_19E97D270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::executionScheduleForOperation(void *a1, void *a2, uint64_t a3, void *a4)
{
  v81[1] = *MEMORY[0x1E4F143B8];
  id v66 = a1;
  id v64 = a2;
  id v65 = a4;
  if (![v64 hasRangeShapeInputs]) {
    goto LABEL_41;
  }
  id v7 = [v66 path];
  unint64_t v8 = v7;
  if (v7)
  {
    [v7 cppPath];
    std::string::size_type size = v76.__r_.__value_.__l.__size_;
    std::string::size_type v9 = v76.__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type v9 = 0;
    std::string::size_type size = 0;
    memset(&v76, 0, sizeof(v76));
  }
  while (size != v9)
  {
    std::string::size_type v11 = size - 32;
    int v12 = *(_DWORD *)(size - 8);
    size -= 32;
    if (v12 == 2)
    {
      if (*(char *)(v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
      }
      else
      {
        long long v13 = *(_OWORD *)v11;
        v79.__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v13;
      }
      int v15 = 1;
      LOBYTE(v80) = 1;
      goto LABEL_15;
    }
  }
  v79.__r_.__value_.__s.__data_[0] = 0;
  LOBYTE(v80) = 0;
  uint64_t v14 = +[MLLogging coreChannel];
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v77.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_error_impl(&dword_19E58B000, v14, OS_LOG_TYPE_ERROR, "Encountered an unexpected internal state, missing function component in operation path = %@.", (uint8_t *)&v77, 0xCu);
  }

  [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Encountered an unexpected internal state, missing function component in operation path = %@.", v8 format];
  int v15 = v80;
  if (!(_BYTE)v80) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
LABEL_15:
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v75, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
    int v15 = v80;
  }
  else
  {
    std::string v75 = v79;
  }
  long long v16 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
  LODWORD(v74) = v75.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)&v74 + 3) = *(_DWORD *)((char *)&v75.__r_.__value_.__r.__words[2] + 3);
  int v17 = SHIBYTE(v75.__r_.__value_.__r.__words[2]);
  memset(&v75, 0, sizeof(v75));
  if (!v15) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v18 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v18 = v79.__r_.__value_.__l.__size_;
  }
  uint64_t v19 = &v72;
  std::string::basic_string[abi:ne180100]((uint64_t)&v72, v18 + 17);
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v19 = (std::string *)v72.__r_.__value_.__r.__words[0];
  }
  if (v18)
  {
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v20 = &v79;
    }
    else {
      uint64_t v20 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, "_default_function");
  long long v21 = *(_OWORD *)&v72.__r_.__value_.__l.__data_;
  v73[0] = v72.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v73 + 3) = *(_DWORD *)((char *)&v72.__r_.__value_.__r.__words[2] + 3);
  int v22 = SHIBYTE(v72.__r_.__value_.__r.__words[2]);
  memset(&v72, 0, sizeof(v72));
  if (v17 < 0)
  {
    std::string::__init_copy_ctor_external(&v77, (const std::string::value_type *)v16, *((std::string::size_type *)&v16 + 1));
  }
  else
  {
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v16;
    LODWORD(v77.__r_.__value_.__r.__words[2]) = v74;
    *(_DWORD *)((char *)&v77.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v74 + 3);
    *((unsigned char *)&v77.__r_.__value_.__s + 23) = v17;
  }
  int v78 = 2;
  if (v22 < 0)
  {
    std::string::__init_copy_ctor_external(&v67, (const std::string::value_type *)v21, *((std::string::size_type *)&v21 + 1));
  }
  else
  {
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v21;
    LODWORD(v67.__r_.__value_.__r.__words[2]) = v73[0];
    *(_DWORD *)((char *)&v67.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v73 + 3);
    *((unsigned char *)&v67.__r_.__value_.__s + 23) = v22;
  }
  int v68 = 2;
  CoreML::ModelStructure::Path::replace((uint64_t)v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_, (uint64_t)&v77, (uint64_t)&v67);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v67);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v77);
  uint64_t v23 = [MLModelStructurePath alloc];
  std::string v70 = v76;
  memset(&v76, 0, sizeof(v76));
  uint64_t v24 = [(MLModelStructurePath *)v23 initWithCppPath:&v70];
  v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  if (v22 < 0)
  {
    operator delete((void *)v21);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_37;
    }
LABEL_51:
    operator delete((void *)v16);
    goto LABEL_37;
  }
  if (v17 < 0) {
    goto LABEL_51;
  }
LABEL_37:
  if ((_BYTE)v80 && SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);

  uint64_t v25 = [v65 objectForKeyedSubscript:v24];

  if (v25)
  {
LABEL_42:
    id v27 = v66;
    id v28 = v25;
    id v63 = v65;
    uint64_t v29 = [v27 outputs];
    BOOL v30 = [v29 count] == 0;

    if (v30)
    {
      id v34 = v28;
    }
    else
    {
      float v31 = [v27 operatorName];
      uint64_t v32 = [v28 layerTypeName];
      char v33 = [v31 isEqualToString:v32];

      id v34 = v28;
      if ((v33 & 1) == 0)
      {
        long long v35 = [v27 outputs];
        uint64_t v36 = [v35 objectAtIndexedSubscript:0];
        id v37 = [v36 name];
        std::string::basic_string[abi:ne180100]<0>(&v67, (char *)[v37 UTF8String]);

        uint64_t v38 = [v27 path];
        uint64_t v39 = v38;
        if (v38) {
          [v38 cppPath];
        }
        else {
          memset(&v75, 0, sizeof(v75));
        }

        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v72, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
        }
        else {
          std::string v72 = v67;
        }
        long long v44 = *(_OWORD *)&v72.__r_.__value_.__l.__data_;
        v73[0] = v72.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v73 + 3) = *(_DWORD *)((char *)&v72.__r_.__value_.__r.__words[2] + 3);
        int v45 = SHIBYTE(v72.__r_.__value_.__r.__words[2]);
        memset(&v72, 0, sizeof(v72));
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v70, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
        }
        else {
          std::string v70 = v76;
        }
        long long v46 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
        v71[0] = v70.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v71 + 3) = *(_DWORD *)((char *)&v70.__r_.__value_.__r.__words[2] + 3);
        int v47 = SHIBYTE(v70.__r_.__value_.__r.__words[2]);
        memset(&v70, 0, sizeof(v70));
        if (v45 < 0)
        {
          std::string::__init_copy_ctor_external(&v79, (const std::string::value_type *)v44, *((std::string::size_type *)&v44 + 1));
        }
        else
        {
          *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v44;
          LODWORD(v79.__r_.__value_.__r.__words[2]) = v73[0];
          *(_DWORD *)((char *)&v79.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v73 + 3);
          *((unsigned char *)&v79.__r_.__value_.__s + 23) = v45;
        }
        int v80 = 4;
        if (v47 < 0)
        {
          std::string::__init_copy_ctor_external(&v77, (const std::string::value_type *)v46, *((std::string::size_type *)&v46 + 1));
        }
        else
        {
          *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v46;
          LODWORD(v77.__r_.__value_.__r.__words[2]) = v71[0];
          *(_DWORD *)((char *)&v77.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v71 + 3);
          *((unsigned char *)&v77.__r_.__value_.__s + 23) = v47;
        }
        int v78 = 4;
        CoreML::ModelStructure::Path::replace((uint64_t)v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_, (uint64_t)&v79, (uint64_t)&v77);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v77);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v79);
        uint64_t v48 = [MLModelStructurePath alloc];
        std::string v69 = v75;
        memset(&v75, 0, sizeof(v75));
        uint64_t v49 = [(MLModelStructurePath *)v48 initWithCppPath:&v69];
        unint64_t v74 = &v69;
        std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
        unsigned int v50 = [v63 objectForKeyedSubscript:v49];
        int v51 = v50;
        if (v50)
        {
          id v52 = v50;

          id v34 = v52;
        }

        if (v47 < 0)
        {
          operator delete((void *)v46);
          if ((v45 & 0x80000000) == 0) {
            goto LABEL_69;
          }
        }
        else if ((v45 & 0x80000000) == 0)
        {
LABEL_69:
          unint64_t v74 = &v75;
          std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v76.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v67.__r_.__value_.__l.__data_);
          }
          goto LABEL_73;
        }
        operator delete((void *)v44);
        goto LABEL_69;
      }
    }
LABEL_73:

    goto LABEL_91;
  }
LABEL_41:
  uint64_t v26 = [v66 path];
  uint64_t v25 = [v65 objectForKeyedSubscript:v26];

  if (v25) {
    goto LABEL_42;
  }
  id v40 = v66;
  uint64_t v41 = v40;
  if (a3)
  {
    if (a3 != 1)
    {

      goto LABEL_81;
    }
    unint64_t v42 = [v40 milId];
    uint64_t v43 = [v42 stringValue];
  }
  else
  {
    uint64_t v43 = [v40 milTextLocation];
  }

  if (v43)
  {
    int v53 = [v41 path];
    int v54 = v53;
    if (v53) {
      [v53 cppPath];
    }
    else {
      memset(&v67, 0, sizeof(v67));
    }

    for (std::string::size_type i = v67.__r_.__value_.__l.__size_;
          i != v67.__r_.__value_.__r.__words[0] && (*(_DWORD *)(i - 8) - 1) <= 3;
          v67.__r_.__value_.__l.__size_ = i)
    {
      std::string::size_type i = std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor(i - 32);
    }
    int v80 = 5;
    CoreML::ModelStructure::Path::appendComponent((uint64_t)&v67, (uint64_t)&v79);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v79);
    id v58 = v43;
    std::string::basic_string[abi:ne180100]<0>(&v76, (char *)[v58 UTF8String]);
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
    *(std::string::size_type *)((char *)&v77.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 7);
    char v59 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
    memset(&v76, 0, sizeof(v76));
    *((unsigned char *)&v77.__r_.__value_.__s + 23) = v59;
    int v78 = 6;
    CoreML::ModelStructure::Path::appendComponent((uint64_t)&v67, (uint64_t)&v77);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v77);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    int v60 = [MLModelStructurePath alloc];
    std::string v75 = v67;
    memset(&v67, 0, sizeof(v67));
    int v56 = [(MLModelStructurePath *)v60 initWithCppPath:&v75];
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);

    goto LABEL_90;
  }
LABEL_81:
  uint64_t v55 = [MLModelStructurePath alloc];
  int v78 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v79, (uint64_t)&v77);
  memset(&v67, 0, sizeof(v67));
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
  v76.__r_.__value_.__s.__data_[8] = 0;
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  v67.__r_.__value_.__l.__size_ = v67.__r_.__value_.__r.__words[0];
  v67.__r_.__value_.__r.__words[2] = v67.__r_.__value_.__r.__words[0] + 32;
  v67.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> const*,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> const*,std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>*>((uint64_t)&v79, (uint64_t)v81, (uint64_t)v67.__r_.__value_.__l.__data_);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v79);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v77);
  int v56 = [(MLModelStructurePath *)v55 initWithCppPath:&v67];
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
  std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
LABEL_90:

  uint64_t v61 = [v65 objectForKeyedSubscript:v56];

  id v34 = v61;
  id v28 = v34;
LABEL_91:

  return v34;
}

void sub_19E97DC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Unwind_Resume(a1);
}

MLComputePlanDeviceUsage *anonymous namespace'::toComputeDeviceUsage(void *a1, void *a2, void *a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v38 = a2;
  id v40 = a3;
  unint64_t v42 = v5;
  unint64_t v6 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v5, "supportedComputeUnits"));
  id v7 = [v40 objectForKeyedSubscript:v6];

  uint64_t v39 = v7;
  if (![v7 count]) {
    goto LABEL_35;
  }
  uint64_t v8 = [v42 preferredComputeUnit];
  if (v8 == 1)
  {
    std::string::size_type v9 = [v40 objectForKeyedSubscript:&unk_1EF11A1D8];
    id v37 = [v9 firstObject];
LABEL_7:

    goto LABEL_14;
  }
  if (v8 != 2)
  {
    if (v8 != 4)
    {
LABEL_35:
      long long v35 = 0;
      goto LABEL_36;
    }
    std::string::size_type v9 = [v40 objectForKeyedSubscript:&unk_1EF11A208];
    id v37 = [v9 firstObject];
    goto LABEL_7;
  }
  uint64_t v10 = [v38 preferredMetalDevice];
  if (!v10) {
    uint64_t v10 = MTLCreateSystemDefaultDevice();
  }
  id v11 = [v40 objectForKeyedSubscript:&unk_1EF11A1F0];
  id v12 = v10;
  v51[0] = MEMORY[0x1E4F143A8];
  v51[1] = 3221225472;
  v51[2] = ___ZN12_GLOBAL__N_125preferredGPUComputeDeviceEP7NSArrayIPU34objcproto23MLComputeDeviceProtocol11objc_objectEPU19objcproto9MTLDevice11objc_object_block_invoke;
  v51[3] = &unk_1E59A40B8;
  id v13 = v12;
  id v52 = v13;
  uint64_t v14 = [v11 indexOfObjectPassingTest:v51];
  if (v14 == 0x7FFFFFFFFFFFFFFFLL)
  {
    id v37 = 0;
  }
  else
  {
    id v37 = [v11 objectAtIndexedSubscript:v14];
  }

LABEL_14:
  if (!v37) {
    goto LABEL_35;
  }
  int v15 = [MEMORY[0x1E4F1CA48] array];
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  obuint64_t j = v7;
  uint64_t v16 = [obj countByEnumeratingWithState:&v47 objects:v54 count:16];
  if (v16)
  {
    uint64_t v17 = *(void *)v48;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v48 != v17) {
          objc_enumerationMutation(obj);
        }
        uint64_t v19 = [[MLComputePlanDeviceUsageSupportInfo alloc] initWithComputeDevice:*(void *)(*((void *)&v47 + 1) + 8 * i) supportState:0];
        [v15 addObject:v19];
      }
      uint64_t v16 = [obj countByEnumeratingWithState:&v47 objects:v54 count:16];
    }
    while (v16);
  }

  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  uint64_t v20 = [v42 supportMessagesPerComputeUnit];
  uint64_t v21 = [v20 countByEnumeratingWithState:&v43 objects:v53 count:16];
  if (v21)
  {
    uint64_t v22 = *(void *)v44;
    do
    {
      for (uint64_t j = 0; j != v21; ++j)
      {
        if (*(void *)v44 != v22) {
          objc_enumerationMutation(v20);
        }
        uint64_t v24 = *(void **)(*((void *)&v43 + 1) + 8 * j);
        int v25 = objc_msgSend(v42, "supportedComputeUnits", v37);
        if ((v25 & [v24 unsignedIntValue]) == 0)
        {
          uint64_t v26 = [v40 objectForKeyedSubscript:v24];
          id v27 = [v26 firstObject];

          id v28 = [v42 supportMessagesPerComputeUnit];
          uint64_t v29 = [v28 objectForKeyedSubscript:v24];

          BOOL v30 = +[MLComputePlanDeviceUsageSupportStateMatcher sharedInstance];
          uint64_t v31 = [v30 matchingSupportStateForValidationMessage:v29];

          uint64_t v32 = [MLComputePlanDeviceUsageSupportInfo alloc];
          if (v31 == -1) {
            uint64_t v33 = 1;
          }
          else {
            uint64_t v33 = v31;
          }
          id v34 = [(MLComputePlanDeviceUsageSupportInfo *)v32 initWithComputeDevice:v27 supportState:v33];
          [v15 addObject:v34];
        }
      }
      uint64_t v21 = [v20 countByEnumeratingWithState:&v43 objects:v53 count:16];
    }
    while (v21);
  }

  long long v35 = [[MLComputePlanDeviceUsage alloc] initWithSupportedComputeDevices:obj preferredComputeDevice:v37 deviceSupportInfoArray:v15];
LABEL_36:

  return v35;
}

void sub_19E97E434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  _Unwind_Resume(a1);
}

BOOL ___ZN12_GLOBAL__N_125preferredGPUComputeDeviceEP7NSArrayIPU34objcproto23MLComputeDeviceProtocol11objc_objectEPU19objcproto9MTLDevice11objc_object_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 metalDevice];
  uint64_t v4 = [v3 registryID];
  BOOL v5 = v4 == [*(id *)(a1 + 32) registryID];

  return v5;
}

void sub_19E97E5CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E97E6C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E97E8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E97EC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::computeDevicesOfClass(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___ZN12_GLOBAL__N_121computeDevicesOfClassEP10objc_classP7NSArrayIPU34objcproto23MLComputeDeviceProtocol11objc_objectE_block_invoke;
  v7[3] = &__block_descriptor_40_e42_B32__0___MLComputeDeviceProtocol__8Q16_B24lu32l8;
  v7[4] = a1;
  uint64_t v4 = [v3 indexesOfObjectsPassingTest:v7];
  BOOL v5 = [v3 objectsAtIndexes:v4];

  return v5;
}

void sub_19E97ED78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN12_GLOBAL__N_121computeDevicesOfClassEP10objc_classP7NSArrayIPU34objcproto23MLComputeDeviceProtocol11objc_objectE_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

void sub_19E97EE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_19E97EF94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E97F07C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E97F3D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::modelStructureContainsNeuralNetworkOrMLProgram(_anonymous_namespace_ *this, MLModelStructure *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = this;
  id v3 = [(_anonymous_namespace_ *)v2 neuralNetwork];
  if (v3)
  {

LABEL_4:
    uint64_t v5 = 1;
    goto LABEL_5;
  }
  uint64_t v4 = [(_anonymous_namespace_ *)v2 program];

  if (v4) {
    goto LABEL_4;
  }
  uint64_t v5 = [(_anonymous_namespace_ *)v2 pipeline];

  if (v5)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v7 = [(_anonymous_namespace_ *)v2 pipeline];
    uint64_t v8 = [v7 subModels];

    uint64_t v10 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v14;
      while (2)
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v14 != v11) {
            objc_enumerationMutation(v8);
          }
          {

            goto LABEL_4;
          }
          ++v12;
        }
        while (v10 != v12);
        uint64_t v10 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }

    uint64_t v5 = 0;
  }
LABEL_5:

  return v5;
}

void sub_19E97F5D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(void **this)
{
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(this);

  JUMPOUT(0x19F3C1920);
}

{
  *this = &unk_1EF0CE4C0;
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)(this + 1));
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,0>(uint64_t a1)
{
  std::__function::__value_func<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::__function::__value_func<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

__n128 CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::ProgramLayerTranslator(uint64_t a1, uint64_t *a2, long long *a3, __n128 *a4)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = &unk_1EF0CE4C0;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  *(void *)(a1 + 16) = a2[1];
  a2[1] = 0;
  uint64_t v7 = a2[2];
  uint64_t v5 = a2 + 2;
  uint64_t v6 = v7;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = v5[1];
  *(void *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = *((_DWORD *)v5 + 4);
  if (v8)
  {
    unint64_t v9 = *(void *)(v6 + 8);
    unint64_t v10 = *(void *)(a1 + 16);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        v9 %= v10;
      }
    }
    else
    {
      v9 &= v10 - 1;
    }
    *(void *)(v4 + 8 * v9) = a1 + 24;
    *uint64_t v5 = 0;
    v5[1] = 0;
  }
  long long v11 = *a3;
  *(void *)(a1 + 64) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = v11;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  __n128 result = *a4;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a4[1].n128_u64[0];
  *(__n128 *)(a1 + 72) = result;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  a4->n128_u64[0] = 0;
  return result;
}

uint64_t CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::Translate(MIL::IRProgramValidator **this, const IRProgram *a2, uint64_t a3)
{
  long long v93 = 0u;
  long long v94 = 0u;
  float v95 = 1.0;
  uint64_t v4 = *(uint64_t **)((*(uint64_t (**)(uint64_t))(*(void *)a3 + 72))(a3) + 16);
  if (!v4) {
    goto LABEL_132;
  }
  std::string::size_type v85 = (unsigned __int8 *)a2 + 48;
  uint64_t v84 = (std::string *)((char *)a2 + 72);
  unint64_t v81 = a2;
  do
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 40))(a3);
    uint64_t v6 = (MIL::IRObject *)v4[5];
    if (*(void *)((*(uint64_t (**)(MIL::IRObject *))(*(void *)v6 + 112))(v6) + 16) > 1uLL) {
      goto LABEL_134;
    }
    uint64_t v7 = (unsigned __int8 *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)v6 + 32))(v6);
    uint64_t v8 = v7[23];
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = v7[23];
    }
    else {
      uint64_t v9 = *((void *)v7 + 1);
    }
    uint64_t v10 = *((unsigned __int8 *)a2 + 71);
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *((void *)a2 + 7);
    }
    if (v9 != v10) {
      goto LABEL_134;
    }
    if (v11 >= 0) {
      uint64_t v12 = v85;
    }
    else {
      uint64_t v12 = *(unsigned __int8 **)v85;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v7, v12, *((void *)v7 + 1))) {
        goto LABEL_134;
      }
    }
    else if (v7[23])
    {
      while (*v7 == *v12)
      {
        ++v7;
        ++v12;
        if (!--v8) {
          goto LABEL_19;
        }
      }
LABEL_134:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      unint64_t v74 = std::string::append(&v98, ">.");
      long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v99);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
LABEL_19:
    memset(v104, 0, sizeof(v104));
    int v105 = 1065353216;
    long long v13 = (void *)(*(uint64_t (**)(MIL::IRObject *, unsigned __int8 *))(*(void *)v6 + 128))(v6, v12);
    unint64_t v15 = (unint64_t)(v13 + 1);
    long long v14 = (void *)*v13;
    if ((void *)*v13 != v13 + 1)
    {
      do
      {
        if (*((char *)v14 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v103, (const std::string::value_type *)v14[4], v14[5]);
        }
        else {
          std::string v103 = *(std::string *)(v14 + 4);
        }
        CoreML::NNCompiler::Backend::MIL::NameStore::AddVarNameUsed((uint64_t)v104, (uint64_t)&v103);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
        long long v16 = (void *)v14[1];
        if (v16)
        {
          do
          {
            uint64_t v17 = v16;
            long long v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            uint64_t v17 = (void *)v14[2];
            BOOL v18 = *v17 == (void)v14;
            long long v14 = v17;
          }
          while (!v18);
        }
        long long v14 = v17;
      }
      while (v17 != (void *)v15);
    }
    uint64_t v19 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)v6 + 40))(v6);
    unint64_t v86 = v4;
    uint64_t v20 = (void *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)v6 + 128))(v6);
    *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = 0uLL;
    v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98.__r_.__value_.__l.__size_;
    uint64_t v22 = v20 + 1;
    uint64_t v21 = (void *)*v20;
    if ((void *)*v20 == v20 + 1)
    {
      id v37 = 0;
      v99.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = (unint64_t)&v98.__r_.__value_.__l.__size_;
      goto LABEL_65;
    }
    uint64_t v83 = v5;
    std::string::size_type v23 = 0;
    do
    {
      unint64_t v15 = (unint64_t)(v21 + 4);
      std::string::size_type size = v98.__r_.__value_.__l.__size_;
      p_std::string::size_type size = &v98.__r_.__value_.__l.__size_;
      if ((std::string::size_type *)v98.__r_.__value_.__l.__data_ == &v98.__r_.__value_.__r.__words[1]) {
        goto LABEL_39;
      }
      std::string::size_type v26 = v98.__r_.__value_.__l.__size_;
      id v27 = &v98.__r_.__value_.__l.__size_;
      if (v98.__r_.__value_.__l.__size_)
      {
        do
        {
          p_std::string::size_type size = (std::string::size_type *)v26;
          std::string::size_type v26 = *(void *)(v26 + 8);
        }
        while (v26);
      }
      else
      {
        do
        {
          p_std::string::size_type size = (std::string::size_type *)v27[2];
          BOOL v18 = *p_size == (void)v27;
          id v27 = p_size;
        }
        while (v18);
      }
      if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(p_size + 4, v21 + 4))
      {
LABEL_39:
        id v28 = &v98.__r_.__value_.__l.__size_;
        uint64_t v29 = &v98.__r_.__value_.__l.__size_;
        if (size)
        {
          uint64_t v29 = p_size + 1;
          if (p_size[1]) {
            goto LABEL_55;
          }
          id v28 = p_size;
        }
LABEL_49:
        uint64_t v32 = (uint64_t *)operator new(0x40uLL);
        uint64_t v33 = (std::string *)(v32 + 4);
        if (*((char *)v21 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v33, (const std::string::value_type *)v21[4], v21[5]);
        }
        else
        {
          long long v34 = *(_OWORD *)v15;
          v32[6] = v21[6];
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
        }
        v32[7] = v21[7];
        uint64_t *v32 = 0;
        v32[1] = 0;
        v32[2] = (uint64_t)v28;
        *uint64_t v29 = (std::string::size_type)v32;
        if (*(void *)v98.__r_.__value_.__l.__data_)
        {
          v98.__r_.__value_.__r.__words[0] = *(void *)v98.__r_.__value_.__l.__data_;
          uint64_t v32 = (uint64_t *)*v29;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v98.__r_.__value_.__l.__size_, v32);
        std::string::size_type v23 = ++v98.__r_.__value_.__r.__words[2];
        goto LABEL_55;
      }
      id v28 = &v98.__r_.__value_.__l.__size_;
      uint64_t v29 = &v98.__r_.__value_.__l.__size_;
      if (!size) {
        goto LABEL_49;
      }
      BOOL v30 = (std::string::size_type *)size;
      while (1)
      {
        while (1)
        {
          id v28 = v30;
          uint64_t v31 = v30 + 4;
          if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v21 + 4, v30 + 4)) {
            break;
          }
          BOOL v30 = (std::string::size_type *)*v28;
          uint64_t v29 = v28;
          if (!*v28) {
            goto LABEL_49;
          }
        }
        if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v31, v21 + 4)) {
          break;
        }
        uint64_t v29 = v28 + 1;
        BOOL v30 = (std::string::size_type *)v28[1];
        if (!v30) {
          goto LABEL_49;
        }
      }
LABEL_55:
      long long v35 = (void *)v21[1];
      if (v35)
      {
        do
        {
          uint64_t v36 = v35;
          long long v35 = (void *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          uint64_t v36 = (void *)v21[2];
          BOOL v18 = *v36 == (void)v21;
          uint64_t v21 = v36;
        }
        while (!v18);
      }
      uint64_t v21 = v36;
    }
    while (v36 != v22);
    id v37 = (char *)v98.__r_.__value_.__l.__size_;
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v23;
    if (v23)
    {
      *(void *)(v98.__r_.__value_.__l.__size_ + 16) = &v99.__r_.__value_.__l.__size_;
      v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98.__r_.__value_.__l.__size_;
      *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = 0uLL;
      id v37 = 0;
      a2 = v81;
      uint64_t v5 = v83;
      goto LABEL_66;
    }
    a2 = v81;
    uint64_t v5 = v83;
LABEL_65:
    v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99.__r_.__value_.__l.__size_;
LABEL_66:
    *((void *)&v100 + 1) = 0;
    uint64_t v101 = 0;
    *(void *)&long long v100 = (char *)&v100 + 8;
    memset(&__p, 0, sizeof(__p));
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v37);
    v98.__r_.__value_.__r.__words[0] = v5;
    v98.__r_.__value_.__l.__size_ = (std::string::size_type)v104;
    Opset = (MIL::IROpset *)MIL::MILContext::GetOpset();
    MIL::IROpset::GetReversedOperatorNamesMap((uint64_t *)&v98.__r_.__value_.__r.__words[2], Opset);
    uint64_t v39 = (MIL::IRObject *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)v6 + 40))(v6);
    CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::TranslateBlock((uint64_t)&v97, (uint64_t)a2, (int8x8_t *)&v98, v39);
    if (*((char *)a2 + 95) < 0) {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
    }
    else {
      std::string v96 = *v84;
    }
    uint64_t v40 = v97;
    uint64_t v97 = 0;
    uint64_t v41 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)&v100, &v107, &v96);
    if (*v41)
    {
      std::string v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::string v77 = std::string::append(&v106, " already exists.");
      long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v76, &v107);
      __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v42 = v41;
    long long v43 = operator new(0x40uLL);
    v43[2] = *(_OWORD *)&v96.__r_.__value_.__l.__data_;
    std::string::size_type v44 = v96.__r_.__value_.__r.__words[2];
    memset(&v96, 0, sizeof(v96));
    *((void *)v43 + 6) = v44;
    *((void *)v43 + 7) = v40;
    std::string::size_type v45 = v107.__r_.__value_.__r.__words[0];
    *(void *)long long v43 = 0;
    *((void *)v43 + 1) = 0;
    *((void *)v43 + 2) = v45;
    *unint64_t v42 = v43;
    if (*(void *)v100)
    {
      *(void *)&long long v100 = *(void *)v100;
      long long v43 = (_OWORD *)*v42;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v100 + 1), (uint64_t *)v43);
    ++v101;
    long long v46 = (uint64_t **)v86;
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v96.__r_.__value_.__l.__data_);
    }
    if (*((char *)a2 + 95) < 0) {
      std::string::__init_copy_ctor_external(&v106, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
    }
    else {
      std::string v106 = *v84;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v106;
    *((unsigned char *)&v106.__r_.__value_.__s + 23) = 0;
    v106.__r_.__value_.__s.__data_[0] = 0;
    uint64_t LocationPtr = MIL::IRObject::GetLocationPtr(v6);
    long long v48 = *(_OWORD *)LocationPtr;
    uint64_t v49 = *(void *)(LocationPtr + 8);
    if (v49) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
    }
    long long v108 = v48;
    std::string v107 = __p;
    memset(&__p, 0, sizeof(__p));
    MIL::IRFunction::Make();
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v107.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v108 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v108 + 1));
    }
    uint64_t v50 = v97;
    uint64_t v97 = 0;
    if (v50) {
      (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
    }
    int v51 = (unsigned __int8 *)(v86 + 2);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v98.__r_.__value_.__r.__words[2]);
    CoreML::NNCompiler::Backend::MIL::MILFunctionBuilder::~MILFunctionBuilder((CoreML::NNCompiler::Backend::MIL::MILFunctionBuilder *)&v99);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v104);
    unint64_t v52 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v86 + 2));
    unint64_t v53 = v52;
    unint64_t v54 = *((void *)&v93 + 1);
    if (*((void *)&v93 + 1))
    {
      uint8x8_t v55 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v93 + 8));
      v55.i16[0] = vaddlv_u8(v55);
      unint64_t v56 = v55.u32[0];
      if (v55.u32[0] > 1uLL)
      {
        unint64_t v15 = v52;
        if (v52 >= *((void *)&v93 + 1)) {
          unint64_t v15 = v52 % *((void *)&v93 + 1);
        }
      }
      else
      {
        unint64_t v15 = (*((void *)&v93 + 1) - 1) & v52;
      }
      int v57 = *(void ***)(v93 + 8 * v15);
      if (v57)
      {
        id v58 = (char *)*v57;
        if (*v57)
        {
          do
          {
            unint64_t v59 = *((void *)v58 + 1);
            if (v59 == v53)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v58 + 16, v51))
              {
                long long v46 = (uint64_t **)v86;
                goto LABEL_129;
              }
            }
            else
            {
              if (v56 > 1)
              {
                if (v59 >= v54) {
                  v59 %= v54;
                }
              }
              else
              {
                v59 &= v54 - 1;
              }
              if (v59 != v15) {
                break;
              }
            }
            id v58 = *(char **)v58;
          }
          while (v58);
        }
      }
      long long v46 = (uint64_t **)v86;
    }
    id v58 = (char *)operator new(0x38uLL);
    v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    v99.__r_.__value_.__l.__size_ = (std::string::size_type)&v94;
    v99.__r_.__value_.__s.__data_[16] = 0;
    *(void *)id v58 = 0;
    *((void *)v58 + 1) = v53;
    int v60 = (std::string *)(v58 + 16);
    if (*((char *)v46 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(v60, (const std::string::value_type *)v46[2], (std::string::size_type)v46[3]);
    }
    else
    {
      long long v61 = *(_OWORD *)v51;
      *((void *)v58 + 4) = v86[4];
      *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v61;
    }
    *((void *)v58 + 5) = 0;
    *((void *)v58 + 6) = 0;
    v99.__r_.__value_.__s.__data_[16] = 1;
    float v62 = (float)(unint64_t)(*((void *)&v94 + 1) + 1);
    if (!v54 || (float)(v95 * (float)v54) < v62)
    {
      BOOL v63 = (v54 & (v54 - 1)) != 0;
      if (v54 < 3) {
        BOOL v63 = 1;
      }
      unint64_t v64 = v63 | (2 * v54);
      unint64_t v65 = vcvtps_u32_f32(v62 / v95);
      if (v64 <= v65) {
        size_t v66 = v65;
      }
      else {
        size_t v66 = v64;
      }
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)&v93, v66);
      unint64_t v54 = *((void *)&v93 + 1);
      if ((*((void *)&v93 + 1) & (*((void *)&v93 + 1) - 1)) != 0)
      {
        if (v53 >= *((void *)&v93 + 1)) {
          unint64_t v15 = v53 % *((void *)&v93 + 1);
        }
        else {
          unint64_t v15 = v53;
        }
      }
      else
      {
        unint64_t v15 = (*((void *)&v93 + 1) - 1) & v53;
      }
    }
    uint64_t v67 = v93;
    int v68 = *(void **)(v93 + 8 * v15);
    if (v68)
    {
      *(void *)id v58 = *v68;
      goto LABEL_127;
    }
    *(void *)id v58 = v94;
    *(void *)&long long v94 = v58;
    *(void *)(v67 + 8 * v15) = &v94;
    if (*(void *)v58)
    {
      unint64_t v69 = *(void *)(*(void *)v58 + 8);
      if ((v54 & (v54 - 1)) != 0)
      {
        if (v69 >= v54) {
          v69 %= v54;
        }
      }
      else
      {
        v69 &= v54 - 1;
      }
      int v68 = (void *)(v93 + 8 * v69);
LABEL_127:
      *int v68 = v58;
    }
    v99.__r_.__value_.__r.__words[0] = 0;
    ++*((void *)&v94 + 1);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v99);
LABEL_129:
    std::shared_ptr<MIL::IRFunction>::operator=[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>((uint64_t)(v58 + 40), &v92);
    uint64_t v70 = v92;
    uint64_t v92 = 0;
    if (v70) {
      (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
    }
    uint64_t v4 = *v46;
  }
  while (v4);
LABEL_132:
  (*(void (**)(uint64_t, long long *))(*(void *)a3 + 88))(a3, &v93);
  MIL::IRProgramValidator::Validate((uint64_t *)&v99, *this, v71);
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v99) & 1) == 0)
  {
    std::string v79 = __cxa_allocate_exception(0x48uLL);
    long long v88 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v99.__r_.__value_.__r.__words[1] = 0uLL;
    long long v89 = v100;
    uint64_t v90 = v101;
    long long v100 = 0uLL;
    uint64_t v101 = 0;
    uint64_t v87 = MEMORY[0x1E4F733F0] + 16;
    int data = (int)__p.__r_.__value_.__l.__data_;
    MEMORY[0x19F3C05C0](v79, &v87);
    __cxa_throw(v79, MEMORY[0x1E4F733A0], (void (*)(void *))MIL::ValidationError::~ValidationError);
  }
  MEMORY[0x19F3C0600](&v99);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageData const>>>>::~__hash_table((uint64_t)&v93);
}

uint64_t std::shared_ptr<MIL::IRFunction>::operator=[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>(uint64_t a1, void *a2)
{
  if (*a2) {
    operator new();
  }
  *a2 = 0;
  id v3 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = 0u;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<MIL::IRFunction  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x800000019EC7DD56)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<MIL::IRFunction  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<MIL::IRFunction  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t ***anonymous namespace'::RegisterVarNames(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v5 = *(MIL::IRNamedValueType ***)v4;
  uint64_t v6 = *(MIL::IRNamedValueType ***)(v4 + 8);
  while (v5 != v6)
  {
    uint64_t Name = MIL::IRNamedValueType::GetName(*v5);
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)Name, *(void *)(Name + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)Name;
      v22.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
    }
    CoreML::NNCompiler::Backend::MIL::NameStore::AddVarNameUsed(a2, (uint64_t)&v22);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    v5 += 2;
  }
  uint64_t result = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v10 = **result;
  int v11 = (*result)[1];
  while (v10 != v11)
  {
    uint64_t v12 = *v10;
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)*v10 + 176))(*v10);
    long long v14 = *(MIL::IRNamedValueType ***)v13;
    unint64_t v15 = *(MIL::IRNamedValueType ***)(v13 + 8);
    while (v14 != v15)
    {
      uint64_t v16 = MIL::IRNamedValueType::GetName(*v14);
      if (*(char *)(v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v16, *(void *)(v16 + 8));
      }
      else
      {
        long long v17 = *(_OWORD *)v16;
        __p.__r_.__value_.__r.__words[2] = *(void *)(v16 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
      }
      CoreML::NNCompiler::Backend::MIL::NameStore::AddVarNameUsed(a2, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v14 += 2;
    }
    uint64_t result = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 208))(v12);
    BOOL v18 = **result;
    uint64_t v19 = (*result)[1];
    while (v18 != v19)
    {
      uint64_t v20 = *v18;
      v18 += 2;
    }
    v10 += 2;
  }
  return result;
}

void sub_19E982888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::TranslateBlock(uint64_t a1, uint64_t a2, int8x8_t *a3, MIL::IRObject *a4)
{
  uint64_t v7 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a4 + 40))(a4);
  memset(&v102, 0, sizeof(v102));
  long long v8 = *(char **)v7;
  uint64_t v9 = *(char **)(v7 + 8);
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
  v101.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v10 = v9 - v8;
  if (v9 != v8)
  {
    if (v10 < 0) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    int v11 = operator new(v9 - v8);
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    v102.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    v102.__r_.__value_.__r.__words[2] = (std::string::size_type)&v11[2 * (v10 >> 4)];
    do
    {
      *int v11 = *(void *)v8;
      uint64_t v12 = *((void *)v8 + 1);
      v11[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      v11 += 2;
      v8 += 16;
    }
    while (v8 != v9);
    v102.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
  }
  uint64_t v13 = (long long **)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a4 + 88))(a4);
  memset(&v101, 0, sizeof(v101));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v101, *v13, v13[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v13[1] - (char *)*v13) >> 3));
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  std::string v96 = v102;
  memset(&v102, 0, sizeof(v102));
  std::string v97 = v101;
  memset(&v101, 0, sizeof(v101));
  v100.__r_.__value_.__r.__words[0] = (std::string::size_type)&v101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
  std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  long long v89 = a4;
  long long v14 = (void ***)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a4 + 56))(a4);
  unint64_t v15 = **v14;
  uint64_t v90 = (*v14)[1];
  if (v15 != v90)
  {
    do
    {
      uint64_t v92 = v15;
      uint64_t v16 = *v15;
      long long v17 = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)*v15 + 56))(*v15);
      unint64_t v18 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v17);
      int8x8_t v19 = *(int8x8_t *)(a2 + 16);
      if (!*(void *)&v19) {
        goto LABEL_25;
      }
      unint64_t v20 = v18;
      uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19);
      v21.i16[0] = vaddlv_u8(v21);
      unint64_t v22 = v21.u32[0];
      if (v21.u32[0] > 1uLL)
      {
        unint64_t v23 = v18;
        if (v18 >= *(void *)&v19) {
          unint64_t v23 = v18 % *(void *)&v19;
        }
      }
      else
      {
        unint64_t v23 = (*(void *)&v19 - 1) & v18;
      }
      uint64_t v24 = *(unsigned __int8 ***)(*(void *)(a2 + 8) + 8 * v23);
      if (!v24 || (int v25 = *v24) == 0)
      {
LABEL_25:
        uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 208))(v16);
        if (**(void **)v27 == *(void *)(*(void *)v27 + 8))
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v16 + 32))(&v102, v16);
          std::string::size_type v46 = v102.__r_.__value_.__r.__words[0];
        }
        else
        {
          memset(&v101, 0, sizeof(v101));
          uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 208))(v16);
          uint64_t v29 = *(void *)(*(void *)v28 + 8) - **(void **)v28;
          std::string::size_type v30 = v101.__r_.__value_.__r.__words[0];
          if (v29 >> 4 > (unint64_t)((uint64_t)(v101.__r_.__value_.__r.__words[2]
                                                     - v101.__r_.__value_.__r.__words[0]) >> 4))
          {
            if (v29 < 0) {
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            std::string::size_type size = v101.__r_.__value_.__l.__size_;
            unint64_t v104 = &v101.__r_.__value_.__s.__data_[16];
            v102.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v29 >> 4);
            v102.__r_.__value_.__l.__size_ = v102.__r_.__value_.__r.__words[0] + size - v30;
            v102.__r_.__value_.__r.__words[2] = v102.__r_.__value_.__l.__size_;
            std::string::size_type v103 = v102.__r_.__value_.__r.__words[0] + 16 * v32;
            std::vector<std::shared_ptr<MIL::IRValue const>>::__swap_out_circular_buffer(&v101, &v102);
            std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer((uint64_t)&v102);
          }
          uint64_t v33 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 208))(v16);
          long long v34 = (void *)**v33;
          long long v35 = (void *)(*v33)[1];
          while (v34 != v35)
          {
            CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::TranslateBlock(&v100, a2, a3, *v34);
            if (v100.__r_.__value_.__r.__words[0]) {
              operator new();
            }
            v100.__r_.__value_.__r.__words[0] = 0;
            std::string::size_type v36 = v101.__r_.__value_.__l.__size_;
            if (v101.__r_.__value_.__l.__size_ >= v101.__r_.__value_.__r.__words[2])
            {
              uint64_t v38 = (uint64_t)(v101.__r_.__value_.__l.__size_ - v101.__r_.__value_.__r.__words[0]) >> 4;
              unint64_t v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 60) {
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              }
              int64_t v40 = v101.__r_.__value_.__r.__words[2] - v101.__r_.__value_.__r.__words[0];
              if ((uint64_t)(v101.__r_.__value_.__r.__words[2] - v101.__r_.__value_.__r.__words[0]) >> 3 > v39) {
                unint64_t v39 = v40 >> 3;
              }
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v39;
              }
              unint64_t v104 = &v101.__r_.__value_.__s.__data_[16];
              unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v41);
              long long v43 = &v42[16 * v38];
              v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
              v102.__r_.__value_.__l.__size_ = (std::string::size_type)v43;
              std::string::size_type v103 = (std::string::size_type)&v42[16 * v44];
              *(void *)long long v43 = 0;
              *((void *)v43 + 1) = 0;
              v102.__r_.__value_.__r.__words[2] = (std::string::size_type)(v43 + 16);
              std::vector<std::shared_ptr<MIL::IRValue const>>::__swap_out_circular_buffer(&v101, &v102);
              std::string::size_type v37 = v101.__r_.__value_.__l.__size_;
              std::__split_buffer<std::shared_ptr<MIL::IRValue const>>::~__split_buffer((uint64_t)&v102);
            }
            else
            {
              *(void *)v101.__r_.__value_.__l.__size_ = 0;
              *(void *)(v36 + _Block_object_dispose(&a9, 8) = 0;
              std::string::size_type v37 = v36 + 16;
            }
            v101.__r_.__value_.__l.__size_ = v37;
            std::string::size_type v45 = v100.__r_.__value_.__r.__words[0];
            v100.__r_.__value_.__r.__words[0] = 0;
            if (v45) {
              (*(void (**)(std::string::size_type))(*(void *)v45 + 8))(v45);
            }
            v34 += 2;
          }
          (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(void *)v16 + 40))(&v102, v16, &v101);
          std::string::size_type v46 = v102.__r_.__value_.__r.__words[0];
          v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v101;
          std::vector<std::shared_ptr<CoreML::MultiArrayBuffer const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
        }
        uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 64))(v16);
        long long v48 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v47 + 16))(v47);
        std::string::size_type v91 = v46;
        unint64_t v49 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v48);
        int8x8_t v50 = a3[3];
        if (v50)
        {
          unint64_t v51 = v49;
          uint8x8_t v52 = (uint8x8_t)vcnt_s8(v50);
          v52.i16[0] = vaddlv_u8(v52);
          unint64_t v53 = v52.u32[0];
          if (v52.u32[0] > 1uLL)
          {
            unint64_t v54 = v49;
            if (v49 >= *(void *)&v50) {
              unint64_t v54 = v49 % *(void *)&v50;
            }
          }
          else
          {
            unint64_t v54 = (*(void *)&v50 - 1) & v49;
          }
          uint8x8_t v55 = *(unsigned __int8 ***)(*(void *)&a3[2] + 8 * v54);
          if (v55)
          {
            for (uint64_t i = *v55; i; uint64_t i = *(unsigned __int8 **)i)
            {
              unint64_t v57 = *((void *)i + 1);
              if (v51 == v57)
              {
                if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v48))
                {
                  MIL::MILContext::GetOpset();
                  MIL::IROpset::TryGetOperatorSharedPtr();
                  if (v98)
                  {
                    (*(void (**)(std::string::size_type, uint64_t *))(*(void *)v91 + 88))(v91, &v98);
                    if (v99) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v99);
                    }
                    operator new();
                  }
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  unint64_t v82 = std::string::append(&v100, "\" in destination opset ");
                  long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
                  v101.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v83;
                  v82->__r_.__value_.__l.__size_ = 0;
                  v82->__r_.__value_.__r.__words[2] = 0;
                  v82->__r_.__value_.__r.__words[0] = 0;
                  char v84 = *(unsigned char *)(a2 + 95);
                  if (v84 >= 0) {
                    std::string::size_type v85 = (const std::string::value_type *)(a2 + 72);
                  }
                  else {
                    std::string::size_type v85 = *(const std::string::value_type **)(a2 + 72);
                  }
                  if (v84 >= 0) {
                    std::string::size_type v86 = *(unsigned __int8 *)(a2 + 95);
                  }
                  else {
                    std::string::size_type v86 = *(void *)(a2 + 80);
                  }
                  uint64_t v87 = std::string::append(&v101, v85, v86);
                  long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
                  v102.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v88;
                  v87->__r_.__value_.__l.__size_ = 0;
                  v87->__r_.__value_.__r.__words[2] = 0;
                  v87->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(exception, &v102);
                  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
              }
              else
              {
                if (v53 > 1)
                {
                  if (v57 >= *(void *)&v50) {
                    v57 %= *(void *)&v50;
                  }
                }
                else
                {
                  v57 &= *(void *)&v50 - 1;
                }
                if (v57 != v54) {
                  break;
                }
              }
            }
          }
        }
        uint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        (*(void (**)(uint64_t))(*(void *)v47 + 16))(v47);
        std::operator+<char>();
        unint64_t v71 = std::string::append(&v100, " in source opset ");
        long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        long long v75 = *(const std::string::value_type **)(a2 + 48);
        uint64_t v74 = a2 + 48;
        unint64_t v73 = v75;
        int v76 = *(char *)(v74 + 23);
        if (v76 >= 0) {
          std::string v77 = (const std::string::value_type *)v74;
        }
        else {
          std::string v77 = v73;
        }
        if (v76 >= 0) {
          std::string::size_type v78 = *(unsigned __int8 *)(v74 + 23);
        }
        else {
          std::string::size_type v78 = *(void *)(v74 + 8);
        }
        std::string v79 = std::string::append(&v101, v77, v78);
        long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v102.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v70, &v102);
        __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      while (1)
      {
        unint64_t v26 = *((void *)v25 + 1);
        if (v20 == v26) {
          break;
        }
        if (v22 > 1)
        {
          if (v26 >= *(void *)&v19) {
            v26 %= *(void *)&v19;
          }
        }
        else
        {
          v26 &= *(void *)&v19 - 1;
        }
        if (v26 != v23) {
          goto LABEL_25;
        }
LABEL_24:
        int v25 = *(unsigned __int8 **)v25;
        if (!v25) {
          goto LABEL_25;
        }
      }
      if (!std::equal_to<std::string>::operator()[abi:ne180100](v25 + 16, v17)) {
        goto LABEL_24;
      }
      uint64_t v58 = *((void *)v25 + 8);
      if (!v58) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, uint64_t, int8x8_t *, uint64_t, uint64_t *))(*(void *)v58 + 48))(v58, a2, a3, v16, &v93);
      unint64_t v15 = v92 + 2;
    }
    while (v92 + 2 != v90);
  }
  uint64_t LocationPtr = MIL::IRObject::GetLocationPtr(v89);
  long long v60 = *(_OWORD *)LocationPtr;
  uint64_t v61 = *(void *)(LocationPtr + 8);
  if (v61) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v60;
  MIL::IRBlock::Make();
  if (v102.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v102.__r_.__value_.__l.__size_);
  }
  std::string::size_type v63 = v96.__r_.__value_.__l.__size_;
  std::string::size_type v62 = v96.__r_.__value_.__r.__words[0];
  while (v63 != v62)
  {
    unint64_t v64 = *(std::__shared_weak_count **)(v63 - 8);
    if (v64) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
    }
    v63 -= 16;
  }
  v96.__r_.__value_.__l.__size_ = v62;
  std::string::size_type v66 = v97.__r_.__value_.__l.__size_;
  std::string::size_type v65 = v97.__r_.__value_.__r.__words[0];
  while (v66 != v65)
  {
    if (*(char *)(v66 - 1) < 0) {
      operator delete(*(void **)(v66 - 24));
    }
    v66 -= 24;
  }
  v97.__r_.__value_.__l.__size_ = v65;
  uint64_t v67 = v93;
  for (uint64_t j = v94; j != v67; j -= 16)
  {
    unint64_t v69 = *(std::__shared_weak_count **)(j - 8);
    if (v69) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v69);
    }
  }
  uint64_t v94 = v67;
  CoreML::NNCompiler::Backend::MIL::MILBlockBuilder::~MILBlockBuilder((CoreML::NNCompiler::Backend::MIL::MILBlockBuilder *)&v93);
}

void sub_19E9833B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::string::size_type v37 = *(std::__shared_weak_count **)(v35 - 120);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  CoreML::NNCompiler::Backend::MIL::MILBlockBuilder::~MILBlockBuilder((CoreML::NNCompiler::Backend::MIL::MILBlockBuilder *)&a19);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__clear[abi:ne180100]((uint64_t *)v2);
    id v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void sub_19E983D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v32 = *(void **)(v30 - 136);
  if (v32)
  {
    *(void *)(v30 - 12_Block_object_dispose(&a9, 8) = v32;
    operator delete(v32);
  }
  uint64_t v33 = *(void **)(v30 - 112);
  if (v33)
  {
    *(void *)(v30 - 104) = v33;
    operator delete(v33);
  }
  if (a11) {
    operator delete(a11);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

void sub_19E98404C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E984238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_19E984A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8894(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8895(uint64_t a1)
{
}

void sub_19E985578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v33 = *(void **)(v31 - 144);
  if (v33)
  {
    *(void *)(v31 - 136) = v33;
    operator delete(v33);
  }
  long long v34 = *(void **)(v31 - 120);
  if (v34)
  {
    *(void *)(v31 - 112) = v34;
    operator delete(v34);
  }
  if (a10) {
    operator delete(a10);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_19E98589C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E985A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::MILBlockBuilder::~MILBlockBuilder(CoreML::NNCompiler::Backend::MIL::MILBlockBuilder *this)
{
  uint64_t v2 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 24);
  std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(void *)this)
  {
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(*(void **)this);
  }
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

BOOL CoreML::NNCompiler::Backend::MIL::MILBlockBuilder::RemoveOutput(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(void *)(a1 + 48), v3, a2);
  uint64_t v5 = v4;
  if (v4 != v3)
  {
    uint64_t v6 = v4;
    if (v4 + 24 == v3)
    {
      uint64_t v8 = v3;
    }
    else
    {
      do
      {
        if (*(char *)(v6 + 23) < 0) {
          operator delete(*(void **)v6);
        }
        *(_OWORD *)uint64_t v6 = *(_OWORD *)(v6 + 24);
        *(void *)(v6 + 16) = *(void *)(v6 + 40);
        *(unsigned char *)(v6 + 47) = 0;
        uint64_t v7 = v6 + 48;
        *(unsigned char *)(v6 + 24) = 0;
        v6 += 24;
      }
      while (v7 != v3);
      uint64_t v8 = *(void *)(a1 + 56);
    }
    while (v8 != v6)
    {
      if (*(char *)(v8 - 1) < 0) {
        operator delete(*(void **)(v8 - 24));
      }
      v8 -= 24;
    }
    *(void *)(a1 + 56) = v6;
  }
  return v5 != v3;
}

void sub_19E985E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

uint64_t Archiver::_IDataBlobENMLImpl::asMMappedFile@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 72);
  *a2 = *(void *)(this + 64);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

char *Archiver::_IDataBlobENMLImpl::asStream(Archiver::_IDataBlobENMLImpl *this)
{
  uint64_t v1 = (char *)*((void *)this + 4);
  if (!v1)
  {
    uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 8) + 16))(*((void *)this + 8));
    uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 8) + 24))(*((void *)this + 8));
    uint64_t v5 = operator new(0x58uLL);
    v5[1] = 0;
    void v5[2] = 0;
    *uint64_t v5 = &unk_1EF0DDA78;
    uint64_t v6 = v5 + 3;
    std::streambuf::basic_streambuf();
    v5[3] = &unk_1EF0DCEA0;
    void v5[5] = v3;
    v5[6] = v3;
    v5[7] = v3 + v4;
    *(void *)&long long v7 = v5 + 3;
    *((void *)&v7 + 1) = v5;
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 11);
    *((_OWORD *)this + 5) = v7;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      uint64_t v6 = (void *)*((void *)this + 10);
    }
    uint64_t v9 = (char *)operator new(0xC0uLL);
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *(void *)uint64_t v9 = &unk_1EF0DDB90;
    uint64_t v1 = v9 + 24;
    *((void *)v9 + 3) = MEMORY[0x1E4FBA450] + 24;
    *((void *)v9 + 4) = 0;
    *((void *)v9 + 5) = MEMORY[0x1E4FBA450] + 64;
    std::ios_base::init((std::ios_base *)(v9 + 40), v6);
    *((void *)v9 + 22) = 0;
    *((_DWORD *)v9 + 46) = -1;
    *(void *)&long long v10 = v9 + 24;
    *((void *)&v10 + 1) = v9;
    int v11 = (std::__shared_weak_count *)*((void *)this + 5);
    *((_OWORD *)this + 2) = v10;
    if (v11)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      return (char *)*((void *)this + 4);
    }
  }
  return v1;
}

uint64_t std::__shared_ptr_emplace<std::istream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<std::istream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDB90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<std::istream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDB90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Archiver::mmapbuf::seekpos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)a1 + 32))(a1, *(void *)(a2 + 128), 0, a3);
}

double Archiver::mmapbuf::seekoff@<D0>(Archiver::mmapbuf *this@<X0>, int a2@<W2>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v5 = *((void *)this + 2);
  uint64_t v6 = *((void *)this + 3);
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v7 = v6 - v5;
    }
    else
    {
      uint64_t v7 = *((void *)this + 4) - v5;
      if (a2 != 2)
      {
        exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v28, a2);
        uint64_t v9 = std::string::insert(&v28, 0, "unknown direction=");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        __msg.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        __ec.__r_.__value_.__r.__words[0] = 1;
        __ec.__r_.__value_.__l.__size_ = (std::string::size_type)std::iostream_category();
        std::ios_base::failure::failure(exception, &__msg, (const std::error_code *)&__ec);
        __cxa_throw(exception, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (*((void *)this + 4) - v5 - v7 <= a3 || -v7 > a3)
  {
    unint64_t v15 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::to_string(&v26, a3);
    uint64_t v16 = std::string::insert(&v26, 0, "invalid offset=");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __ec.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ec.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    unint64_t v18 = std::string::append(&__ec, ", dir=");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, a2);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v20 = &v25;
    }
    else {
      unint64_t v20 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v25.__r_.__value_.__l.__size_;
    }
    unint64_t v22 = std::string::append(&v28, (const std::string::value_type *)v20, size);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    *(void *)&v24.__val_ = 1;
    v24.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(v15, &__msg, &v24);
    __cxa_throw(v15, MEMORY[0x1E4FBA300], MEMORY[0x1E4FBA298]);
  }
  uint64_t v12 = v6 + (int)a3 - ((int)v6 - (int)v5) + (int)v7;
  *((void *)this + 3) = v12;
  double result = 0.0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 4_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(void *)(a4 + 12_Block_object_dispose(&a9, 8) = v12 - v5;
  return result;
}

void sub_19E9872CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v37 - 41) < 0) {
    operator delete(*(void **)(v37 - 64));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (v36) {
    __cxa_free_exception(v35);
  }
  _Unwind_Resume(exception_object);
}

void Archiver::mmapbuf::~mmapbuf(Archiver::mmapbuf *this)
{
  std::streambuf::~streambuf();

  JUMPOUT(0x19F3C1920);
}

uint64_t std::__shared_ptr_emplace<Archiver::mmapbuf>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Archiver::mmapbuf>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDA78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<Archiver::mmapbuf>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDA78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Archiver::_IDataBlobENMLImpl::~_IDataBlobENMLImpl(Archiver::_IDataBlobENMLImpl *this)
{
  Archiver::_IDataBlobENMLImpl::~_IDataBlobENMLImpl(this);

  JUMPOUT(0x19F3C1920);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF0DCD58;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  Archiver::_IDataBlobImpl::~_IDataBlobImpl(this);
}

void sub_19E987AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E987D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E988060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9883B4(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_19E9886D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9888A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E98895C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E988EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E989294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E989538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E989618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E989894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_19E989B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E989C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E989D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E989DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E989EF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E98A3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  CoreML::Specification::NetworkUpdateParameters::~NetworkUpdateParameters((CoreML::Specification::NetworkUpdateParameters *)&a28);
  _Unwind_Resume(a1);
}

void sub_19E98A644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_19E98A820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,IArchive>,void *>>>::operator()[abi:ne180100](char a1, uint64_t a2)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,IArchive>,std::__map_value_compare<std::string,std::__value_type<std::string,IArchive>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IArchive>>>::destroy(*(char **)(a2 + 80));
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 64);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    if (*(char *)(a2 + 55) < 0) {
      operator delete(*(void **)(a2 + 32));
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete((void *)a2);
}

void sub_19E98AF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_19E98B1DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E98B2E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E98C11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E98C358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E98C5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_19E98C684(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E98CA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9809(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9810(uint64_t a1)
{
}

void sub_19E98D00C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_19E98D6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_19E98DDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_19E98EE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  v21[2](v21);

  ElapsedTimeRecorder::~ElapsedTimeRecorder(&a18);
  _Unwind_Resume(a1);
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<_KDInterval>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_19E98EF3C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E98F13C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E98FC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[MLTreeEnsembleClassifier _buildClassificationClasses:topk:error:]::$_1 &,std::__wrap_iter<unsigned long *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  double v6 = *(double *)(a4 + 8 * *a2);
  double v7 = *(double *)(a4 + 8 * *a1);
  uint64_t v8 = *a3;
  double v9 = *(double *)(a4 + 8 * *a3);
  if (v6 > v7)
  {
    if (v9 > v6)
    {
      *a1 = v8;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    if (*(double *)(a4 + 8 * *a3) <= v7) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  if (v9 > v6)
  {
    *a2 = v8;
    *a3 = v4;
    uint64_t v10 = *a1;
    if (*(double *)(a4 + 8 * *a2) <= *(double *)(a4 + 8 * *a1)) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v10;
    return 2;
  }
  return 0;
}

void std::vector<unsigned long>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v5 = (uint64_t)&v4[-*a1] >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    unint64_t v20 = &v3[8 * a2];
    goto LABEL_15;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 3)
  {
    bzero(v4, 8 * v6);
    unint64_t v20 = &v4[8 * v6];
LABEL_15:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = v8 - (void)v3;
  uint64_t v10 = v9 >> 2;
  if (v9 >> 2 <= a2) {
    uint64_t v10 = a2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v7, v11);
  uint64_t v13 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  unint64_t v15 = &v12[8 * v5];
  long long v17 = &v12[8 * v16];
  bzero(v15, 8 * v6);
  unint64_t v18 = &v15[8 * v6];
  while (v14 != v13)
  {
    uint64_t v19 = *((void *)v14 - 1);
    v14 -= 8;
    *((void *)v15 - 1) = v19;
    v15 -= 8;
  }
  *a1 = v15;
  a1[1] = v18;
  a1[2] = v17;
  if (v13)
  {
    operator delete(v13);
  }
}

void sub_19E990084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E990644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _Unwind_Resume(a1);
}

void sub_19E9909E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E990E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _Unwind_Resume(a1);
}

char *std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = std::vector<_KDInterval>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  char *v12 = &v9[v17];
  return result;
}

void sub_19E9913FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E99152C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19E991600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E991C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E991EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E991FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E992064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E992194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E992884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_19E992AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9930DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E993644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9936F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E993B98()
{
  __cxa_end_catch();
  JUMPOUT(0x19E993BF4);
}

void sub_19E993BC8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19E993FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9942A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_19E994668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E99498C()
{
  __cxa_end_catch();
  JUMPOUT(0x19E9949D8);
}

void sub_19E9949B0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19E9949C0()
{
}

void sub_19E9949D0()
{
}

void sub_19E994A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E994F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33)
{
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void Espresso::layer_data::shapes(Espresso::layer_data *this, uint64_t *a2, uint64_t *a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v6 = (char *)this + 16;
    do
    {
      uint64_t v7 = *v4;
      uint64_t v8 = (std::__shared_weak_count *)v4[1];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::abstract_blob_container::shape((char *)&v24, v7);
      unint64_t v9 = *((void *)this + 1);
      unint64_t v10 = *((void *)this + 2);
      if (v9 >= v10)
      {
        uint64_t v13 = (uint64_t)(v9 - *(void *)this) >> 6;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 58) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v10 - *(void *)this;
        if (v15 >> 5 > v14) {
          unint64_t v14 = v15 >> 5;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        v29[4] = v6;
        size_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v16);
        unint64_t v18 = &v17[64 * v13];
        v29[0] = v17;
        v29[1] = v18;
        void v29[3] = &v17[64 * v19];
        long long v20 = v25;
        uint64_t v21 = v26;
        *(_OWORD *)unint64_t v18 = v24;
        *((_OWORD *)v18 + 1) = v20;
        *((void *)v18 + 4) = v21;
        *((void *)v18 + 5) = 0;
        *((void *)v18 + 6) = 0;
        *((void *)v18 + 7) = 0;
        *(_OWORD *)(v18 + 40) = *(_OWORD *)__p;
        *((void *)v18 + 7) = v28;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v28 = 0;
        v29[2] = v18 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)this, v29);
        uint64_t v22 = *((void *)this + 1);
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v29);
        long long v23 = __p[0];
        *((void *)this + 1) = v22;
        if (v23)
        {
          __p[1] = v23;
          operator delete(v23);
        }
      }
      else
      {
        long long v11 = v25;
        uint64_t v12 = v26;
        *(_OWORD *)unint64_t v9 = v24;
        *(_OWORD *)(v9 + 16) = v11;
        *(void *)(v9 + 32) = v12;
        *(void *)(v9 + 40) = 0;
        *(void *)(v9 + 4_Block_object_dispose(&a9, 8) = 0;
        *(void *)(v9 + 56) = 0;
        *(_OWORD *)(v9 + 40) = *(_OWORD *)__p;
        *(void *)(v9 + 56) = v28;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v28 = 0;
        *((void *)this + 1) = v9 + 64;
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
}

void sub_19E995184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  unint64_t v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  double result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  unint64_t v16 = (char *)operator new(0x68uLL);
  v38[0] = v16;
  v38[1] = a1 + 16;
  char v39 = 0;
  *(void *)unint64_t v16 = 0;
  *((void *)v16 + 1) = v8;
  std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<std::string const&>((std::string *)(v16 + 16), *a3);
  char v39 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v23 = operator new(8 * *(void *)&prime);
          long long v24 = *(void **)a1;
          *(void *)a1 = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          *(int8x8_t *)(a1 + _Block_object_dispose(&a9, 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          uint64_t v26 = (void *)*v15;
          if (*v15)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v27) = v15;
            uint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v33))
                  {
                    *(void *)(*(void *)a1 + 8 * v33) = v26;
                    goto LABEL_55;
                  }
                  void *v26 = *v32;
                  void *v32 = **(void **)(*(void *)a1 + 8 * v33);
                  **(void **)(*(void *)a1 + 8 * v33) = v32;
                  uint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_55:
                uint64_t v26 = v32;
                uint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v37 = *(void **)a1;
        *(void *)a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  long long v34 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v38[0];
  if (v34)
  {
    *(void *)v38[0] = *v34;
LABEL_72:
    void *v34 = i;
    goto LABEL_73;
  }
  *(void *)v38[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v35 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9) {
        v35 %= v9;
      }
    }
    else
    {
      v35 &= v9 - 1;
    }
    long long v34 = (unsigned __int8 **)(*(void *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  v38[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v38);
  return i;
}

void sub_19E995690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

char *Espresso::abstract_blob_container::shape(char *this, uint64_t a2)
{
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  long long v2 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)this = *(_OWORD *)(a2 + 8);
  *((_OWORD *)this + 1) = v2;
  *((void *)this + 4) = *(void *)(a2 + 40);
  if (this + 40 != (char *)(a2 + 48)) {
    return std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(this + 40, *(char **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2);
  }
  return this;
}

void sub_19E99576C(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 4_Block_object_dispose(&a9, 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E995AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_19E995C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios17::Ios17LayerTranslator::~Ios17LayerTranslator(void **this)
{
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(this);

  JUMPOUT(0x19F3C1920);
}

uint64_t std::unordered_map<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>::unordered_map(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = a2 + 56 * a3;
    unint64_t v7 = (void *)(a1 + 16);
    do
    {
      unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](v5);
      unint64_t v9 = v8;
      unint64_t v10 = *(void *)(a1 + 8);
      if (v10)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v11.i16[0] = vaddlv_u8(v11);
        unint64_t v12 = v11.u32[0];
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v3 = v8;
          if (v8 >= v10) {
            unint64_t v3 = v8 % v10;
          }
        }
        else
        {
          unint64_t v3 = (v10 - 1) & v8;
        }
        uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
        if (v13)
        {
          for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v15 = *((void *)i + 1);
            if (v15 == v9)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)v5)) {
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 > 1)
              {
                if (v15 >= v10) {
                  v15 %= v10;
                }
              }
              else
              {
                v15 &= v10 - 1;
              }
              if (v15 != v3) {
                break;
              }
            }
          }
        }
      }
      unint64_t v16 = (char *)operator new(0x48uLL);
      float v17 = v16;
      v42[0] = v16;
      v42[1] = a1 + 16;
      char v43 = 0;
      *(void *)unint64_t v16 = 0;
      *((void *)v16 + 1) = v9;
      if (*(char *)(v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v16 + 16), *(const std::string::value_type **)v5, *(void *)(v5 + 8));
      }
      else
      {
        long long v18 = *(_OWORD *)v5;
        *((void *)v16 + 4) = *(void *)(v5 + 16);
        *((_OWORD *)v16 + 1) = v18;
      }
      uint64_t v19 = *(void *)(v5 + 48);
      if (v19)
      {
        if (v19 == v5 + 24)
        {
          *((void *)v17 + _Block_object_dispose(&a9, 8) = v17 + 40;
          (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
          goto LABEL_27;
        }
        uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
      }
      *((void *)v17 + _Block_object_dispose(&a9, 8) = v19;
LABEL_27:
      char v43 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (!v10 || (float)(v21 * (float)v10) < v20)
      {
        BOOL v22 = (v10 & (v10 - 1)) != 0;
        if (v10 < 3) {
          BOOL v22 = 1;
        }
        unint64_t v23 = v22 | (2 * v10);
        unint64_t v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24) {
          int8x8_t prime = (int8x8_t)v24;
        }
        else {
          int8x8_t prime = (int8x8_t)v23;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        }
        unint64_t v10 = *(void *)(a1 + 8);
        if (*(void *)&prime <= v10)
        {
          if (*(void *)&prime < v10)
          {
            unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
            if (v10 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
            {
              unint64_t v32 = std::__next_prime(v32);
            }
            else
            {
              uint64_t v34 = 1 << -(char)__clz(v32 - 1);
              if (v32 >= 2) {
                unint64_t v32 = v34;
              }
            }
            if (*(void *)&prime <= v32) {
              int8x8_t prime = (int8x8_t)v32;
            }
            if (*(void *)&prime >= v10)
            {
              unint64_t v10 = *(void *)(a1 + 8);
            }
            else
            {
              if (prime) {
                goto LABEL_39;
              }
              int64_t v40 = *(void **)a1;
              *(void *)a1 = 0;
              if (v40) {
                operator delete(v40);
              }
              unint64_t v10 = 0;
              *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
            }
          }
        }
        else
        {
LABEL_39:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v26 = operator new(8 * *(void *)&prime);
          unint64_t v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + _Block_object_dispose(&a9, 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          unint64_t v29 = (void *)*v7;
          if (*v7)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v7;
            unint64_t v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_64;
                  }
                  *unint64_t v29 = *v35;
                  void *v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  unint64_t v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_64:
                unint64_t v29 = v35;
                unint64_t v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v10 = (unint64_t)prime;
        }
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10) {
            unint64_t v3 = v9 % v10;
          }
          else {
            unint64_t v3 = v9;
          }
        }
        else
        {
          unint64_t v3 = (v10 - 1) & v9;
        }
      }
      uint64_t v37 = *(void **)(*(void *)a1 + 8 * v3);
      uint64_t v38 = v42[0];
      if (v37)
      {
        *(void *)v42[0] = *v37;
      }
      else
      {
        *(void *)v42[0] = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v38;
        *(void *)(*(void *)a1 + 8 * v3) = v7;
        if (!*(void *)v38) {
          goto LABEL_82;
        }
        unint64_t v39 = *(void *)(*(void *)v38 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v39 >= v10) {
            v39 %= v10;
          }
        }
        else
        {
          v39 &= v10 - 1;
        }
        uint64_t v37 = (void *)(*(void *)a1 + 8 * v39);
      }
      *uint64_t v37 = v38;
LABEL_82:
      v42[0] = 0;
      ++*(void *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
LABEL_83:
      v5 += 56;
    }
    while (v5 != v6);
  }
  return a1;
}

void sub_19E996168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void *std::__function::__func<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIPFvRKN6CoreML10NNCompiler7Backend3MIL22ProgramLayerTranslatorERKNS4_20LayerTranslationInfoERKN3MIL11IROperationERNS4_15MILBlockBuilderEEJRKNS_12placeholders4__phILi1EEERKNSK_ILi2EEERKNSK_ILi3EEERKNSK_ILi4EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5);
}

__n128 std::__function::__func<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0DD078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF0DD078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

void std::__function::__func<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (*)(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::~__func()
{
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,InputNameToShapes>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 152));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 128));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 104));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 80));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 56));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void InputNameToShapes::~InputNameToShapes(char **this)
{
}

void sub_19E9964F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E996594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9966A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E996B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_19E996D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19E996E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v14 = v12;

  _Unwind_Resume(a1);
}

void sub_19E997548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19E997838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E997928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E997A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E997ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E997BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E997C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E997CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E997DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E997ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters::~ImagePreprocessingParameters(char **this)
{
}

char *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x40uLL);
    unint64_t v8 = (std::string *)(v6 + 32);
    unint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *((_DWORD *)v6 + 14) = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_19E998004(_Unwind_Exception *a1)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,_BlobShape>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

char *CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters::SetScaleBiasParams(uint64_t a1, long long *a2, float a3, float a4, float a5, float a6, float a7)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 16))
  {
    BOOL v22 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v2_Block_object_dispose(&a9, 8) = 0;
      _os_log_error_impl(&dword_19E58B000, v22, OS_LOG_TYPE_ERROR, "There are no inputs that are of type image, but still 'scale_image' op for preprocessing has been provided.", (uint8_t *)&v28, 2u);
    }

    unint64_t v23 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v31 = *MEMORY[0x1E4F28568];
    unint64_t v24 = [NSString stringWithFormat:@"There are no inputs that are of type image, but still 'scale_image' op for preprocessing has been provided."];
    v32[0] = v24;
    uint64_t v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:&v31 count:1];
    uint64_t v26 = [v23 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v25];

    exception = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    CoreML::MLModelException::MLModelException(exception, v26);
  }
  unint64_t v8 = *(void **)(a1 + 8);
  if (!v8)
  {
LABEL_7:
    unint64_t v15 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v2_Block_object_dispose(&a9, 8) = 0;
      _os_log_error_impl(&dword_19E58B000, v15, OS_LOG_TYPE_ERROR, "Unable to map image preprocessing feature name to any given image input name.", (uint8_t *)&v28, 2u);
    }

    unint64_t v16 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v29 = *MEMORY[0x1E4F28568];
    float v17 = [NSString stringWithFormat:@"Unable to map image preprocessing feature name to any given image input name."];
    unint64_t v30 = v17;
    long long v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
    uint64_t v19 = [v16 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v18];

    float v20 = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    CoreML::MLModelException::MLModelException(v20, v19);
  }
  while (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a2, v8 + 4))
  {
LABEL_6:
    unint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_7;
    }
  }
  if (google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v8 + 4, a2))
  {
    ++v8;
    goto LABEL_6;
  }
  uint64_t v28 = a2;
  *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 168), a2, &v28)+ 14) = a3;
  uint64_t v28 = a2;
  *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 72), a2, &v28)+ 14) = a4;
  uint64_t v28 = a2;
  *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 96), a2, &v28)+ 14) = a5;
  uint64_t v28 = a2;
  *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 120), a2, &v28)+ 14) = a6;
  uint64_t v28 = a2;
  __n128 result = std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 144), a2, &v28);
  *((float *)result + 14) = a7;
  return result;
}

void sub_19E998370(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);

  _Unwind_Resume(a1);
}

uint64_t operator<<<std::string,float>(uint64_t a1, void *a2)
{
  uint64_t result = operator<<(a1, a2[2]);
  uint64_t v6 = (void *)*a2;
  unint64_t v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      uint64_t v7 = operator<<(result, v5 + 4);
      uint64_t result = operator<<(v7, *((float *)v5 + 14));
      unint64_t v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          unint64_t v9 = v8;
          unint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          uint64_t v5 = v9;
        }
        while (!v10);
      }
      uint64_t v5 = v9;
    }
    while (v9 != v4);
  }
  return result;
}

void sub_19E9984F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9986E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void sub_19E998918(_Unwind_Exception *a1)
{
  __cxa_free_exception(v4);

  _Unwind_Resume(a1);
}

void sub_19E998A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E998C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E998D9C(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19E999ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E999C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  uint8x8_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        unint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_19E999D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLFunctionInfo>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

std::string *CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo(std::string *this, const CoreML::NNCompiler::MLFunctionInfo *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<std::string,CoreML::NNCompiler::MLShapeInfo>::map[abi:ne180100]((uint64_t)&this[1], (void *)a2 + 3);
  std::map<std::string,std::vector<int>>::map[abi:ne180100]((uint64_t)&this[2], (void *)a2 + 6);
  std::map<std::string,CoreML::NNCompiler::MLRangeShape>::map[abi:ne180100]((uint64_t)&this[3], (void *)a2 + 9);
  std::map<std::string,CoreML::NNCompiler::MLShapeInfo>::map[abi:ne180100]((uint64_t)&this[4], (void *)a2 + 12);
  std::map<std::string,std::vector<int>>::map[abi:ne180100]((uint64_t)&this[5], (void *)a2 + 15);
  std::map<std::string,CoreML::NNCompiler::MLRangeShape>::map[abi:ne180100]((uint64_t)&this[6], (void *)a2 + 18);
  this[7].__r_.__value_.__r.__words[0] = *((void *)a2 + 21);
  std::string::size_type v5 = *((void *)a2 + 22);
  this[7].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  this[7].__r_.__value_.__r.__words[2] = 0;
  this[8].__r_.__value_.__r.__words[0] = 0;
  this[8].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 184), *((long long **)a2 + 23), *((long long **)a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 3));
  this[8].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__r.__words[0] = 0;
  this[9].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 208), *((long long **)a2 + 26), *((long long **)a2 + 27), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 3));
  this[9].__r_.__value_.__r.__words[2] = *((void *)a2 + 29);
  std::string::size_type v6 = *((void *)a2 + 30);
  this[10].__r_.__value_.__r.__words[0] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  this[10].__r_.__value_.__l.__size_ = (std::string::size_type)&this[10].__r_.__value_.__r.__words[2];
  this[10].__r_.__value_.__r.__words[2] = 0;
  this[11].__r_.__value_.__r.__words[0] = 0;
  long long v7 = (const CoreML::NNCompiler::MLFunctionInfo *)*((void *)a2 + 31);
  if (v7 != (const CoreML::NNCompiler::MLFunctionInfo *)((char *)a2 + 256))
  {
    do
    {
      unint64_t v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_equal<std::string>(&this[10].__r_.__value_.__l.__size_, &this[10].__r_.__value_.__r.__words[2], &v22, &v21, (void *)v7 + 4);
      if (!*v8)
      {
        unint64_t v9 = v8;
        char v10 = (char *)operator new(0x40uLL);
        uint8x8_t v11 = (std::string *)(v10 + 32);
        if (*((char *)v7 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v11, *((const std::string::value_type **)v7 + 4), *((void *)v7 + 5));
        }
        else
        {
          long long v12 = *((_OWORD *)v7 + 2);
          *((void *)v10 + 6) = *((void *)v7 + 6);
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
        }
        *((_DWORD *)v10 + 14) = *((_DWORD *)v7 + 14);
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)&this[10].__r_.__value_.__l.__size_, v22, v9, (uint64_t *)v10);
      }
      uint64_t v13 = (const CoreML::NNCompiler::MLFunctionInfo *)*((void *)v7 + 1);
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          uint64_t v13 = *(const CoreML::NNCompiler::MLFunctionInfo **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v14 = (const CoreML::NNCompiler::MLFunctionInfo *)*((void *)v7 + 2);
          BOOL v15 = *(void *)v14 == (void)v7;
          long long v7 = v14;
        }
        while (!v15);
      }
      long long v7 = v14;
    }
    while (v14 != (const CoreML::NNCompiler::MLFunctionInfo *)((char *)a2 + 256));
  }
  this[11].__r_.__value_.__l.__size_ = *((void *)a2 + 34);
  std::string::size_type v16 = *((void *)a2 + 35);
  this[11].__r_.__value_.__r.__words[2] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  float v17 = this + 12;
  if (*((char *)a2 + 311) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *((const std::string::value_type **)a2 + 36), *((void *)a2 + 37));
  }
  else
  {
    long long v18 = *((_OWORD *)a2 + 18);
    this[12].__r_.__value_.__r.__words[2] = *((void *)a2 + 38);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
  }
  int v19 = *((_DWORD *)a2 + 78);
  WORD2(this[13].__r_.__value_.__r.__words[0]) = *((_WORD *)a2 + 158);
  LODWORD(this[13].__r_.__value_.__l.__data_) = v19;
  return this;
}

void sub_19E99A018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  uint64_t v13 = *(std::__shared_weak_count **)(v10 + 280);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*v11);
  unint64_t v14 = *(std::__shared_weak_count **)(v10 + 240);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  BOOL v15 = *(std::__shared_weak_count **)(v10 + 176);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*(void **)(v10 + 152));
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(void **)(v10 + 128));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*(void **)(v10 + 104));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*(void **)(v10 + 80));
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(void **)(v10 + 56));
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy(*(void **)(v10 + 32));
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,std::vector<int>>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  unint64_t v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  long long v4 = a2 + 1;
  std::string::size_type v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<int>> const&>((uint64_t **)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      std::string::size_type v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          long long v7 = v6;
          std::string::size_type v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          std::string::size_type v5 = v7;
        }
        while (!v8);
      }
      std::string::size_type v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_19E99A1A0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,CoreML::NNCompiler::MLRangeShape>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  unint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  long long v4 = a2 + 1;
  std::string::size_type v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,CoreML::NNCompiler::MLRangeShape> const&>((uint64_t **)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      std::string::size_type v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          long long v7 = v6;
          std::string::size_type v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          std::string::size_type v5 = v7;
        }
        while (!v8);
      }
      std::string::size_type v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_19E99A24C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,CoreML::NNCompiler::MLRangeShape> const&>(uint64_t **a1, uint64_t *a2, void *a3, uint64_t a4)
{
  std::string::size_type v6 = a2;
  BOOL v8 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2
    && !google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, a2 + 4))
  {
    if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v6 + 4, a3))
    {
      uint64_t v22 = v6;
      unint64_t v23 = v6;
      unint64_t v14 = &v22;
      if (v6) {
        return v6;
      }
      goto LABEL_31;
    }
    uint64_t v12 = v6[1];
    if (v12)
    {
      uint64_t v13 = (uint64_t *)v6[1];
      do
      {
        unint64_t v14 = (uint64_t **)v13;
        uint64_t v13 = (uint64_t *)*v13;
      }
      while (v13);
    }
    else
    {
      float v17 = v6;
      do
      {
        unint64_t v14 = (uint64_t **)v17[2];
        BOOL v16 = *v14 == v17;
        float v17 = (uint64_t *)v14;
      }
      while (!v16);
    }
    if (v14 == v8 || google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(a3, v14 + 4))
    {
      if (v12)
      {
        unint64_t v23 = (uint64_t *)v14;
      }
      else
      {
        unint64_t v23 = v6;
        unint64_t v14 = (uint64_t **)(v6 + 1);
      }
LABEL_30:
      std::string::size_type v6 = *v14;
      if (*v14) {
        return v6;
      }
      goto LABEL_31;
    }
LABEL_29:
    unint64_t v14 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)a1, &v23, a3);
    goto LABEL_30;
  }
  uint64_t v9 = *v6;
  if (*a1 == v6)
  {
    uint8x8_t v11 = v6;
    goto LABEL_17;
  }
  if (v9)
  {
    uint64_t v10 = (uint64_t *)*v6;
    do
    {
      uint8x8_t v11 = v10;
      uint64_t v10 = (uint64_t *)v10[1];
    }
    while (v10);
  }
  else
  {
    BOOL v15 = v6;
    do
    {
      uint8x8_t v11 = (uint64_t *)v15[2];
      BOOL v16 = *v11 == (void)v15;
      BOOL v15 = v11;
    }
    while (v16);
  }
  if (!google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare::operator()(v11 + 4, a3)) {
    goto LABEL_29;
  }
LABEL_17:
  if (v9)
  {
    unint64_t v23 = v11;
    unint64_t v14 = (uint64_t **)(v11 + 1);
    goto LABEL_30;
  }
  unint64_t v23 = v6;
  unint64_t v14 = (uint64_t **)v6;
LABEL_31:
  long long v18 = (char *)operator new(0x68uLL);
  std::string::size_type v6 = (uint64_t *)v18;
  v20[0] = v18;
  v20[1] = v8;
  char v21 = 0;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v18 + 32), *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *((_OWORD *)v18 + 2) = *(_OWORD *)a4;
    *((void *)v18 + 6) = *(void *)(a4 + 16);
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v6 + 7, *(const void **)(a4 + 24), *(void *)(a4 + 32), (uint64_t)(*(void *)(a4 + 32) - *(void *)(a4 + 24)) >> 3);
  v6[10] = 0;
  v6[11] = 0;
  v6[12] = 0;
  std::vector<CoreML::NNCompiler::MLRangeShape::Range>::__init_with_size[abi:ne180100]<CoreML::NNCompiler::MLRangeShape::Range*,CoreML::NNCompiler::MLRangeShape::Range*>(v6 + 10, *(const void **)(a4 + 48), *(void *)(a4 + 56), (uint64_t)(*(void *)(a4 + 56) - *(void *)(a4 + 48)) >> 4);
  char v21 = 1;
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v23, v14, v6);
  v20[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>>>>::reset[abi:ne180100]((uint64_t)v20);
  return v6;
}

void sub_19E99A48C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLRangeShape>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::NNCompiler::MLRangeShape>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<int>> const&>(uint64_t **a1, void *a2, void *a3, uint64_t a4)
{
  std::string::size_type v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_equal<std::string>(a1, a2, &v14, &v13, a3);
  long long v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    uint64_t v9 = (char *)operator new(0x50uLL);
    long long v7 = (uint64_t *)v9;
    v11[0] = v9;
    v11[1] = a1 + 1;
    char v12 = 0;
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v9 + 32), *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *((_OWORD *)v9 + 2) = *(_OWORD *)a4;
      *((void *)v9 + 6) = *(void *)(a4 + 16);
    }
    v7[7] = 0;
    v7[8] = 0;
    v7[9] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v7 + 7, *(const void **)(a4 + 24), *(void *)(a4 + 32), (uint64_t)(*(void *)(a4 + 32) - *(void *)(a4 + 24)) >> 2);
    char v12 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v14, v8, v7);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v7;
}

void sub_19E99A60C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E99A698(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  unint64_t v3 = a2 + 2;
  uint64_t v4 = *((void *)a2 + 4);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = a1 + 32;
  uint64_t v6 = *((void *)a2 + 5);
  *(void *)(a1 + 40) = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *((void *)a2 + 3) = v3;
    *unint64_t v3 = 0;
    *((void *)a2 + 5) = 0;
  }
  else
  {
    *(void *)(a1 + 24) = v5;
  }
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *((void *)a2 + 6);
  uint64_t v7 = (void *)a2 + 7;
  uint64_t v8 = *((void *)a2 + 7);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = a1 + 56;
  uint64_t v10 = *((void *)a2 + 8);
  *(void *)(a1 + 64) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *((void *)a2 + 6) = v7;
    *uint64_t v7 = 0;
    *((void *)a2 + _Block_object_dispose(&a9, 8) = 0;
  }
  else
  {
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v9;
  }
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  uint8x8_t v11 = a2 + 5;
  uint64_t v12 = *((void *)a2 + 10);
  *(void *)(a1 + 80) = v12;
  uint64_t v13 = a1 + 80;
  uint64_t v14 = *((void *)a2 + 11);
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v14;
  if (v14)
  {
    *(void *)(v12 + 16) = v13;
    *((void *)a2 + 9) = v11;
    *uint8x8_t v11 = 0;
    *((void *)a2 + 11) = 0;
  }
  else
  {
    *(void *)(a1 + 72) = v13;
  }
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  BOOL v15 = (void *)a2 + 13;
  uint64_t v16 = *((void *)a2 + 13);
  *(void *)(a1 + 104) = v16;
  uint64_t v17 = a1 + 104;
  uint64_t v18 = *((void *)a2 + 14);
  *(void *)(a1 + 112) = v18;
  if (v18)
  {
    *(void *)(v16 + 16) = v17;
    *((void *)a2 + 12) = v15;
    *BOOL v15 = 0;
    *((void *)a2 + 14) = 0;
  }
  else
  {
    *(void *)(a1 + 96) = v17;
  }
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  int v19 = a2 + 8;
  uint64_t v20 = *((void *)a2 + 16);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = v20;
  uint64_t v21 = a1 + 128;
  uint64_t v22 = *((void *)a2 + 17);
  *(void *)(a1 + 136) = v22;
  if (v22)
  {
    *(void *)(v20 + 16) = v21;
    *((void *)a2 + 15) = v19;
    *int v19 = 0;
    *((void *)a2 + 17) = 0;
  }
  else
  {
    *(void *)(a1 + 120) = v21;
  }
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  unint64_t v23 = (void *)a2 + 19;
  uint64_t v24 = *((void *)a2 + 19);
  *(void *)(a1 + 152) = v24;
  uint64_t v25 = a1 + 152;
  uint64_t v26 = *((void *)a2 + 20);
  *(void *)(a1 + 160) = v26;
  if (v26)
  {
    *(void *)(v24 + 16) = v25;
    *((void *)a2 + 1_Block_object_dispose(&a9, 8) = v23;
    *unint64_t v23 = 0;
    *((void *)a2 + 20) = 0;
  }
  else
  {
    *(void *)(a1 + 144) = v25;
  }
  *(_OWORD *)(a1 + 16_Block_object_dispose(&a9, 8) = *(long long *)((char *)a2 + 168);
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = *(long long *)((char *)a2 + 184);
  *(void *)(a1 + 200) = *((void *)a2 + 25);
  *((void *)a2 + 23) = 0;
  *((void *)a2 + 24) = 0;
  *((void *)a2 + 25) = 0;
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&a9, 8) = a2[13];
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  *((void *)a2 + 2_Block_object_dispose(&a9, 8) = 0;
  *(_OWORD *)(a1 + 232) = *(long long *)((char *)a2 + 232);
  *((void *)a2 + 29) = 0;
  *((void *)a2 + 30) = 0;
  *(void *)(a1 + 24_Block_object_dispose(&a9, 8) = *((void *)a2 + 31);
  uint64_t v27 = a1 + 256;
  uint64_t v28 = *((void *)a2 + 32);
  *(void *)(a1 + 256) = v28;
  uint64_t v29 = *((void *)a2 + 33);
  *(void *)(a1 + 264) = v29;
  if (v29)
  {
    *(void *)(v28 + 16) = v27;
    *((void *)a2 + 31) = a2 + 16;
    *((void *)a2 + 32) = 0;
    *((void *)a2 + 33) = 0;
  }
  else
  {
    *(void *)(a1 + 24_Block_object_dispose(&a9, 8) = v27;
  }
  *(_OWORD *)(a1 + 272) = a2[17];
  *((void *)a2 + 34) = 0;
  *((void *)a2 + 35) = 0;
  __n128 result = (__n128)a2[18];
  *(void *)(a1 + 304) = *((void *)a2 + 38);
  *(__n128 *)(a1 + 28_Block_object_dispose(&a9, 8) = result;
  *((void *)a2 + 37) = 0;
  *((void *)a2 + 3_Block_object_dispose(&a9, 8) = 0;
  *((void *)a2 + 36) = 0;
  int v31 = *((_DWORD *)a2 + 78);
  *(_WORD *)(a1 + 316) = *((_WORD *)a2 + 158);
  *(_DWORD *)(a1 + 312) = v31;
  return result;
}

uint64_t CoreML::NNCompiler::MLModelInfo::MLModelInfo(uint64_t a1, int a2, long long *a3, uint64_t a4, void *a5, int a6, void *a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v13 = a5;
  *(_DWORD *)a1 = a2;
  id v24 = v13;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v29 = *(std::string *)a4;
  }
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v25 = (uint64_t *)(a1 + 8);
  LOBYTE(v26) = 0;
  uint64_t v14 = (std::string *)operator new(0x18uLL);
  *(void *)(a1 + 24) = v14 + 1;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v14;
  *(void *)(a1 + 16) = v14;
  *(void *)(a1 + 16) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(a1 + 24, (long long *)&v29, v30, v14);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  BOOL v15 = *(long long **)(a1 + 8);
  if (*((char *)v15 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)v15, *((void *)v15 + 1));
  }
  else
  {
    long long v16 = *v15;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *((void *)v15 + 2);
    *(_OWORD *)(a1 + 32) = v16;
  }
  long long v17 = *a3;
  *(void *)(a1 + 72) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 56) = v17;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  uint64_t v18 = *(long long **)(a1 + 8);
  if (*((char *)v18 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    v29.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v19;
  }
  CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo((uint64_t)v30, (long long *)a4);
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  uint64_t v28 = a1 + 88;
  uint64_t v20 = (char *)operator new(0x178uLL);
  uint64_t v21 = v20;
  uint64_t v25 = (uint64_t *)v20;
  uint64_t v26 = a1 + 88;
  char v27 = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v20 + 32), v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v20 + 32) = v29;
  }
  CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo((std::string *)(v21 + 56), (const CoreML::NNCompiler::MLFunctionInfo *)v30);
  char v27 = 1;
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)(a1 + 80), v28, (uint64_t **)(a1 + 88), v25);
  uint64_t v25 = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&v25);
  CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)v30);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(a1 + 104) = 0;
  id v22 = v24;
  *(void *)(a1 + 112) = v22;
  *(_DWORD *)(a1 + 120) = a6;
  std::map<std::string,std::string>::map[abi:ne180100]((void *)(a1 + 128), a7);

  return a1;
}

void sub_19E99AB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&a11);
  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>>>::destroy(*v22);
  CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo(v23);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 79) < 0) {
    operator delete(*(void **)(v20 + 56));
  }
  if (*(char *)(v20 + 55) < 0) {
    operator delete(*v21);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_19E99BA5C(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  if (v5) {
    operator delete(v5);
  }
  if (v3) {
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

void sub_19E99BB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(void **a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = __src;
  uint64_t v9 = a1 + 2;
  uint64_t v10 = a1[2];
  unint64_t v11 = (unint64_t)a1[1];
  if (a5 > (uint64_t)&v10[-v11] >> 2)
  {
    uint64_t v12 = *a1;
    unint64_t v13 = a5 + ((uint64_t)(v11 - (void)*a1) >> 2);
    if (v13 >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = (__dst - v12) >> 2;
    uint64_t v15 = v10 - v12;
    if (v15 >> 1 > v13) {
      unint64_t v13 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v13;
    }
    __p[4] = v9;
    if (v16) {
      unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    char v27 = (_DWORD *)(v16 + 4 * v14);
    __p[0] = (void *)v16;
    __p[1] = v27;
    __p[3] = (void *)(v16 + 4 * v17);
    uint64_t v28 = 4 * a5;
    std::string v29 = &v27[a5];
    do
    {
      int v30 = *(_DWORD *)v6;
      v6 += 4;
      *v27++ = v30;
      v28 -= 4;
    }
    while (v28);
    std::string __p[2] = v29;
    std::vector<float>::__swap_out_circular_buffer(a1, (uint64_t)__p, __dst);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v18 = v11 - (void)__dst;
  uint64_t v19 = (uint64_t)(v11 - (void)__dst) >> 2;
  if (v19 >= a5)
  {
    uint64_t v20 = &__src[4 * a5];
    id v22 = (char *)a1[1];
LABEL_17:
    unint64_t v23 = &__dst[4 * a5];
    id v24 = &v22[-4 * a5];
    uint64_t v25 = v22;
    if ((unint64_t)v24 < v11)
    {
      uint64_t v25 = v22;
      do
      {
        int v26 = *(_DWORD *)v24;
        v24 += 4;
        *(_DWORD *)uint64_t v25 = v26;
        v25 += 4;
      }
      while ((unint64_t)v24 < v11);
    }
    a1[1] = v25;
    if (v22 != v23) {
      memmove(&v22[-4 * ((v22 - v23) >> 2)], __dst, v22 - v23);
    }
    if (v20 != v6)
    {
      memmove(__dst, v6, v20 - v6);
    }
    return;
  }
  uint64_t v20 = &__src[4 * v19];
  int64_t v21 = a4 - v20;
  if (a4 != v20) {
    memmove(a1[1], &__src[4 * v19], a4 - v20);
  }
  id v22 = (char *)(v11 + v21);
  a1[1] = (void *)(v11 + v21);
  if (v18 >= 1) {
    goto LABEL_17;
  }
}

void sub_19E99C128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E99C210(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ***std::back_insert_iterator<std::vector<std::pair<unsigned long,float>>>::operator=[abi:ne180100](void ***a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = ((char *)v6 - (unsigned char *)*v4) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)*v4;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreML::NNCompiler::MLRangeShape::Range>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v13 = (_OWORD *)(v11 + 16 * v8);
    unint64_t v14 = v11 + 16 * v12;
    *unint64_t v13 = *a2;
    uint64_t v7 = v13 + 1;
    unint64_t v16 = (char *)*v4;
    uint64_t v15 = (char *)v4[1];
    if (v15 != *v4)
    {
      do
      {
        *--unint64_t v13 = *((_OWORD *)v15 - 1);
        v15 -= 16;
      }
      while (v15 != v16);
      uint64_t v15 = (char *)*v4;
    }
    void *v4 = v13;
    v4[1] = v7;
    v4[2] = (void *)v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  v4[1] = v7;
  return a1;
}

void sub_19E99C894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,CoreML::CompareIndexDistancePairs &,std::__wrap_iter<std::pair<unsigned long,float> *>>(uint64_t result, uint64_t a2, float *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 4)
    {
      uint64_t v5 = v3 >> 3;
      uint64_t v6 = (v3 >> 3) | 1;
      uint64_t v7 = (float *)(result + 16 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 < a2 && v7[2] < v7[6])
      {
        v7 += 4;
        uint64_t v6 = v8;
      }
      float v9 = a3[2];
      if (v7[2] >= v9)
      {
        uint64_t v10 = *(void *)a3;
        do
        {
          unint64_t v11 = a3;
          a3 = v7;
          *(void *)unint64_t v11 = *(void *)v7;
          void v11[2] = v7[2];
          if (v4 < v6) {
            break;
          }
          uint64_t v12 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (float *)(result + 16 * v6);
          uint64_t v13 = v12 + 2;
          if (v13 < a2 && v7[2] < v7[6])
          {
            v7 += 4;
            uint64_t v6 = v13;
          }
        }
        while (v7[2] >= v9);
        *(void *)a3 = v10;
        a3[2] = v9;
      }
    }
  }
  return result;
}

void sub_19E99CADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios15::Translations::TranslateClassify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 176))(a3);
  uint64_t Name = (unsigned __int8 **)MIL::IRNamedValueType::GetName(**(MIL::IRNamedValueType ***)v5);
  if (CoreML::NNCompiler::Backend::MIL::MILBlockBuilder::RemoveOutput(a4, Name)
    && *(void *)(v5 + 8) - *(void *)v5 == 32)
  {
    uint64_t v7 = (unsigned __int8 **)MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)(*(void *)v5 + 16));
    CoreML::NNCompiler::Backend::MIL::MILBlockBuilder::RemoveOutput(a4, v7);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "probabilities");
  Argumentuint64_t Name = MIL::IROperation::GetArgumentName();
  if (*(char *)(ArgumentName + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)ArgumentName, *(void *)(ArgumentName + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)ArgumentName;
    v24.__r_.__value_.__r.__words[2] = *(void *)(ArgumentName + 16);
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v9;
  }
  uint64_t v10 = *(void *)(a4 + 48);
  unint64_t v11 = *(void *)(a4 + 56);
  if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v10, v11, (unsigned __int8 **)&v24) == v11)
  {
    unint64_t v12 = *(void *)(a4 + 64);
    if (v11 >= v12)
    {
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
      unint64_t v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v10) >> 3);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v16;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 64);
      if (v18) {
        uint64_t v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4 + 64, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = v19 + v15;
      __v.__first_ = v19;
      __v.__begin_ = v20;
      __v.__end_cap_.__value_ = &v19[v18];
      long long v21 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
      v20->__r_.__value_.__r.__words[2] = v24.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
      memset(&v24, 0, sizeof(v24));
      __v.__end_ = v20 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a4 + 48), &__v);
      unint64_t v14 = *(void *)(a4 + 56);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      long long v13 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
      *(void *)(v11 + 16) = *((void *)&v24.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v11 = v13;
      memset(&v24, 0, sizeof(v24));
      unint64_t v14 = v11 + 24;
      *(void *)(a4 + 56) = v11 + 24;
    }
    *(void *)(a4 + 56) = v14;
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(__p);
  }
}

void sub_19E99CD1C(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *__p, uint64_t a9, void *a10, std::__split_buffer<std::string> *a11, int a12, __int16 a13, char a14, char a15, void *__pa, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a21 < 0) {
    operator delete(__pa);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t CoreML::ModelStructure::Path::appendComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v2 = *(unsigned int *)(a2 + 24);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **))off_1EF0E6220[v2])(&v5);
}

void std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***a1, uint64_t a2)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  v26[0] = __p.__r_.__value_.__l.__size_;
  std::string::size_type v3 = __p.__r_.__value_.__r.__words[0];
  *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  char v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  unint64_t v5 = v2[1];
  uint64_t v6 = v5 - *v2;
  if (v5 != *v2 && *(_DWORD *)(v5 - 8) != 7)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
    unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Failed to append ", 17);
    unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"SubModel", 8);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" component, last component is not a ", 36);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Pipeline", 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)".", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v7 = v2[2];
  if (v5 >= v7)
  {
    uint64_t v10 = v6 >> 5;
    unint64_t v11 = (v6 >> 5) + 1;
    if (v11 >> 59) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v7 - *v2;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v25[2] = v2 + 2;
    if (v13) {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v13 + 32 * v10;
    v24[0] = v13;
    v24[1] = v15;
    v25[1] = v13 + 32 * v14;
    uint64_t v16 = v26[0];
    *(void *)unint64_t v15 = v3;
    *(void *)(v15 + _Block_object_dispose(&a9, 8) = v16;
    *(void *)(v15 + 15) = *(void *)((char *)v26 + 7);
    *(unsigned char *)(v15 + 23) = v4;
    *(_DWORD *)(v15 + 24) = 8;
    v25[0] = v15 + 32;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v2, v24);
    uint64_t v9 = v2[1];
    std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)v24);
  }
  else
  {
    uint64_t v8 = v26[0];
    *(void *)unint64_t v5 = v3;
    *(void *)(v5 + _Block_object_dispose(&a9, 8) = v8;
    *(void *)(v5 + 15) = *(void *)((char *)v26 + 7);
    *(unsigned char *)(v5 + 23) = v4;
    *(_DWORD *)(v5 + 24) = 8;
    uint64_t v9 = v5 + 32;
    v2[1] = v5 + 32;
  }
  v2[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19E99D504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v43 & 1) == 0)
    {
LABEL_6:
      a21 = *MEMORY[0x1E4FBA408];
      uint64_t v45 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(uint64_t *)((char *)&a21 + *(void *)(a21 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      a23 = v45;
      a24 = MEMORY[0x1E4FBA470] + 16;
      if (a37 < 0) {
        operator delete(a32);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x19F3C1850](&a40);
      if (v41 < 0) {
        operator delete(v40);
      }
      if (a14 < 0) {
        operator delete(a9);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v42);
  goto LABEL_6;
}

uint64_t std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::__move_constructor(result - 32, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>,(std::__variant_detail::_Trait)1>::~__dtor(i - 32);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ***std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***result)
{
  uint64_t v1 = **result;
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v4 = v3 - *v1;
  if (v4 != 32 || *(_DWORD *)(v3 - 8))
  {
    if (v3 != v2 && *(_DWORD *)(v3 - 8) != 8)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v25);
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Failed to append ", 17);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Pipeline", 8);
      long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" component, last component is not a ", 36);
      id v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"SubModel", 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)".", 1);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v24);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v5 = v1[2];
    if (v3 < v5) {
      goto LABEL_6;
    }
    uint64_t v7 = v4 >> 5;
    unint64_t v8 = (v4 >> 5) + 1;
    if (v8 >> 59) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v5 - v2;
    if (v9 >> 4 > v8) {
      unint64_t v8 = v9 >> 4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    std::string v29 = v1 + 2;
    if (v10) {
      unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v18 = v10 + 32 * v7;
    uint64_t v25 = (_DWORD *)v10;
    int v26 = (char *)v18;
    uint64_t v28 = (char *)(v10 + 32 * v11);
    *(_DWORD *)(v18 + 24) = 7;
    char v27 = (char *)(v18 + 32);
LABEL_24:
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v1, &v25);
    uint64_t v6 = v1[1];
    uint64_t result = (uint64_t ***)std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)&v25);
    goto LABEL_25;
  }
  unint64_t v12 = v1[2];
  if (v3 >= v12)
  {
    uint64_t v13 = v12 - v2;
    uint64_t v14 = v13 >> 4;
    if ((unint64_t)(v13 >> 4) <= 2) {
      uint64_t v14 = 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    std::string v29 = v1 + 2;
    uint64_t v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v15);
    uint64_t v25 = v16;
    int v26 = (char *)(v16 + 8);
    v16[14] = 7;
    char v27 = (char *)(v16 + 16);
    uint64_t v28 = (char *)&v16[8 * v17];
    goto LABEL_24;
  }
LABEL_6:
  *(_DWORD *)(v3 + 24) = 7;
  uint64_t v6 = v3 + 32;
  v1[1] = v3 + 32;
LABEL_25:
  v1[1] = v6;
  return result;
}

void sub_19E99D978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      a15 = *MEMORY[0x1E4FBA408];
      uint64_t v37 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      a17 = v37;
      a18 = MEMORY[0x1E4FBA470] + 16;
      if (a31 < 0) {
        operator delete(a26);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x19F3C1850](&a34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***a1, uint64_t a2)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  v26[0] = __p.__r_.__value_.__l.__size_;
  std::string::size_type v3 = __p.__r_.__value_.__r.__words[0];
  *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  char v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  unint64_t v5 = v2[1];
  uint64_t v6 = v5 - *v2;
  if (v5 != *v2 && *(_DWORD *)(v5 - 8) != 5)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Failed to append ", 17);
    unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Layer", 5);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" component, last component is not a ", 36);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"NeuralNetwork", 13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)".", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v7 = v2[2];
  if (v5 >= v7)
  {
    uint64_t v10 = v6 >> 5;
    unint64_t v11 = (v6 >> 5) + 1;
    if (v11 >> 59) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v7 - *v2;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v25[2] = v2 + 2;
    if (v13) {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v13 + 32 * v10;
    v24[0] = v13;
    v24[1] = v15;
    v25[1] = v13 + 32 * v14;
    uint64_t v16 = v26[0];
    *(void *)unint64_t v15 = v3;
    *(void *)(v15 + _Block_object_dispose(&a9, 8) = v16;
    *(void *)(v15 + 15) = *(void *)((char *)v26 + 7);
    *(unsigned char *)(v15 + 23) = v4;
    *(_DWORD *)(v15 + 24) = 6;
    v25[0] = v15 + 32;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v2, v24);
    uint64_t v9 = v2[1];
    std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)v24);
  }
  else
  {
    uint64_t v8 = v26[0];
    *(void *)unint64_t v5 = v3;
    *(void *)(v5 + _Block_object_dispose(&a9, 8) = v8;
    *(void *)(v5 + 15) = *(void *)((char *)v26 + 7);
    *(unsigned char *)(v5 + 23) = v4;
    *(_DWORD *)(v5 + 24) = 6;
    uint64_t v9 = v5 + 32;
    v2[1] = v5 + 32;
  }
  v2[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19E99DD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v43 & 1) == 0)
    {
LABEL_6:
      a21 = *MEMORY[0x1E4FBA408];
      uint64_t v45 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(uint64_t *)((char *)&a21 + *(void *)(a21 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      a23 = v45;
      a24 = MEMORY[0x1E4FBA470] + 16;
      if (a37 < 0) {
        operator delete(a32);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x19F3C1850](&a40);
      if (v41 < 0) {
        operator delete(v40);
      }
      if (a14 < 0) {
        operator delete(a9);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v42);
  goto LABEL_6;
}

uint64_t ***std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***result)
{
  uint64_t v1 = **result;
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v4 = v3 - *v1;
  if (v4 != 32 || *(_DWORD *)(v3 - 8))
  {
    if (v3 != v2 && *(_DWORD *)(v3 - 8) != 8)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v25);
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Failed to append ", 17);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"NeuralNetwork", 13);
      long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" component, last component is not a ", 36);
      id v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"SubModel", 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)".", 1);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v24);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v5 = v1[2];
    if (v3 < v5) {
      goto LABEL_6;
    }
    uint64_t v7 = v4 >> 5;
    unint64_t v8 = (v4 >> 5) + 1;
    if (v8 >> 59) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v5 - v2;
    if (v9 >> 4 > v8) {
      unint64_t v8 = v9 >> 4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    std::string v29 = v1 + 2;
    if (v10) {
      unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v18 = v10 + 32 * v7;
    uint64_t v25 = (_DWORD *)v10;
    int v26 = (char *)v18;
    uint64_t v28 = (char *)(v10 + 32 * v11);
    *(_DWORD *)(v18 + 24) = 5;
    char v27 = (char *)(v18 + 32);
LABEL_24:
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v1, &v25);
    uint64_t v6 = v1[1];
    uint64_t result = (uint64_t ***)std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)&v25);
    goto LABEL_25;
  }
  unint64_t v12 = v1[2];
  if (v3 >= v12)
  {
    uint64_t v13 = v12 - v2;
    uint64_t v14 = v13 >> 4;
    if ((unint64_t)(v13 >> 4) <= 2) {
      uint64_t v14 = 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    std::string v29 = v1 + 2;
    uint64_t v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v15);
    uint64_t v25 = v16;
    int v26 = (char *)(v16 + 8);
    v16[14] = 5;
    char v27 = (char *)(v16 + 16);
    uint64_t v28 = (char *)&v16[8 * v17];
    goto LABEL_24;
  }
LABEL_6:
  *(_DWORD *)(v3 + 24) = 5;
  uint64_t v6 = v3 + 32;
  v1[1] = v3 + 32;
LABEL_25:
  v1[1] = v6;
  return result;
}

void sub_19E99E0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      a15 = *MEMORY[0x1E4FBA408];
      uint64_t v37 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      a17 = v37;
      a18 = MEMORY[0x1E4FBA470] + 16;
      if (a31 < 0) {
        operator delete(a26);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x19F3C1850](&a34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***a1, uint64_t a2)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  v26[0] = __p.__r_.__value_.__l.__size_;
  std::string::size_type v3 = __p.__r_.__value_.__r.__words[0];
  *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  char v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  unint64_t v5 = v2[1];
  uint64_t v6 = v5 - *v2;
  if (v5 != *v2 && *(_DWORD *)(v5 - 8) != 3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Failed to append ", 17);
    unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Operation", 9);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" component, last component is not a ", 36);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Block", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)".", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v7 = v2[2];
  if (v5 >= v7)
  {
    uint64_t v10 = v6 >> 5;
    unint64_t v11 = (v6 >> 5) + 1;
    if (v11 >> 59) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v7 - *v2;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v25[2] = v2 + 2;
    if (v13) {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v13 + 32 * v10;
    v24[0] = v13;
    v24[1] = v15;
    v25[1] = v13 + 32 * v14;
    uint64_t v16 = v26[0];
    *(void *)unint64_t v15 = v3;
    *(void *)(v15 + _Block_object_dispose(&a9, 8) = v16;
    *(void *)(v15 + 15) = *(void *)((char *)v26 + 7);
    *(unsigned char *)(v15 + 23) = v4;
    *(_DWORD *)(v15 + 24) = 4;
    v25[0] = v15 + 32;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v2, v24);
    uint64_t v9 = v2[1];
    std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)v24);
  }
  else
  {
    uint64_t v8 = v26[0];
    *(void *)unint64_t v5 = v3;
    *(void *)(v5 + _Block_object_dispose(&a9, 8) = v8;
    *(void *)(v5 + 15) = *(void *)((char *)v26 + 7);
    *(unsigned char *)(v5 + 23) = v4;
    *(_DWORD *)(v5 + 24) = 4;
    uint64_t v9 = v5 + 32;
    v2[1] = v5 + 32;
  }
  v2[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19E99E48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v43 & 1) == 0)
    {
LABEL_6:
      a21 = *MEMORY[0x1E4FBA408];
      uint64_t v45 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(uint64_t *)((char *)&a21 + *(void *)(a21 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      a23 = v45;
      a24 = MEMORY[0x1E4FBA470] + 16;
      if (a37 < 0) {
        operator delete(a32);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x19F3C1850](&a40);
      if (v41 < 0) {
        operator delete(v40);
      }
      if (a14 < 0) {
        operator delete(a9);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v42);
  goto LABEL_6;
}

uint64_t ***std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***result, uint64_t *a2)
{
  uint64_t v2 = **result;
  uint64_t v3 = *a2;
  unint64_t v4 = v2[1];
  uint64_t v5 = (uint64_t)(v4 - *v2) >> 5;
  if (*a2 < 0)
  {
    if (v4 != *v2 && *(_DWORD *)(v4 - 8) != 2)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
      unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Failed to append ", 17);
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Block", 5);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" component, last component is not a ", 36);
      long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Function", 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)".", 1);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v23);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else if (v4 != *v2 && *(_DWORD *)(v4 - 8) != 4)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Failed to append ", 17);
    unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Block", 5);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" component, last component is not a ", 36);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Operation", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)".", 1);
    uint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v10, &v23);
    __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v11 = v2[2];
  if (v4 >= v11)
  {
    unint64_t v13 = v5 + 1;
    if ((unint64_t)(v5 + 1) >> 59) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v11 - *v2;
    if (v14 >> 4 > v13) {
      unint64_t v13 = v14 >> 4;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    v25[2] = v2 + 2;
    if (v15) {
      unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v17 = v15 + 32 * v5;
    v24[0] = v15;
    v24[1] = v17;
    v25[1] = v15 + 32 * v16;
    *(void *)unint64_t v17 = v3;
    *(_DWORD *)(v17 + 24) = 3;
    v25[0] = v17 + 32;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v2, v24);
    uint64_t v12 = v2[1];
    uint64_t result = (uint64_t ***)std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)v24);
  }
  else
  {
    *(void *)unint64_t v4 = v3;
    *(_DWORD *)(v4 + 24) = 3;
    uint64_t v12 = v4 + 32;
    v2[1] = v4 + 32;
  }
  v2[1] = v12;
  return result;
}

void sub_19E99E890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      a15 = *MEMORY[0x1E4FBA408];
      uint64_t v37 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      a17 = v37;
      a18 = MEMORY[0x1E4FBA470] + 16;
      if (a31 < 0) {
        operator delete(a26);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x19F3C1850](&a34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***a1, uint64_t a2)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  v26[0] = __p.__r_.__value_.__l.__size_;
  std::string::size_type v3 = __p.__r_.__value_.__r.__words[0];
  *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  char v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  unint64_t v5 = v2[1];
  uint64_t v6 = v5 - *v2;
  if (v5 != *v2 && *(_DWORD *)(v5 - 8) != 1)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
    unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Failed to append ", 17);
    unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Function", 8);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" component, last component is not a ", 36);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Program", 7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)".", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v7 = v2[2];
  if (v5 >= v7)
  {
    uint64_t v10 = v6 >> 5;
    unint64_t v11 = (v6 >> 5) + 1;
    if (v11 >> 59) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v7 - *v2;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v25[2] = v2 + 2;
    if (v13) {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v13 + 32 * v10;
    v24[0] = v13;
    v24[1] = v15;
    v25[1] = v13 + 32 * v14;
    uint64_t v16 = v26[0];
    *(void *)unint64_t v15 = v3;
    *(void *)(v15 + _Block_object_dispose(&a9, 8) = v16;
    *(void *)(v15 + 15) = *(void *)((char *)v26 + 7);
    *(unsigned char *)(v15 + 23) = v4;
    *(_DWORD *)(v15 + 24) = 2;
    v25[0] = v15 + 32;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v2, v24);
    uint64_t v9 = v2[1];
    std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)v24);
  }
  else
  {
    uint64_t v8 = v26[0];
    *(void *)unint64_t v5 = v3;
    *(void *)(v5 + _Block_object_dispose(&a9, 8) = v8;
    *(void *)(v5 + 15) = *(void *)((char *)v26 + 7);
    *(unsigned char *)(v5 + 23) = v4;
    *(_DWORD *)(v5 + 24) = 2;
    uint64_t v9 = v5 + 32;
    v2[1] = v5 + 32;
  }
  v2[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19E99EC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v43 & 1) == 0)
    {
LABEL_6:
      a21 = *MEMORY[0x1E4FBA408];
      uint64_t v45 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(uint64_t *)((char *)&a21 + *(void *)(a21 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      a23 = v45;
      a24 = MEMORY[0x1E4FBA470] + 16;
      if (a37 < 0) {
        operator delete(a32);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x19F3C1850](&a40);
      if (v41 < 0) {
        operator delete(v40);
      }
      if (a14 < 0) {
        operator delete(a9);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v42);
  goto LABEL_6;
}

uint64_t ***std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***result)
{
  uint64_t v1 = **result;
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v4 = v3 - *v1;
  if (v4 != 32 || *(_DWORD *)(v3 - 8))
  {
    if (v3 != v2 && *(_DWORD *)(v3 - 8) != 8)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v25);
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Failed to append ", 17);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Program", 7);
      long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" component, last component is not a ", 36);
      id v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"SubModel", 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)".", 1);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(exception, &v24);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v5 = v1[2];
    if (v3 < v5) {
      goto LABEL_6;
    }
    uint64_t v7 = v4 >> 5;
    unint64_t v8 = (v4 >> 5) + 1;
    if (v8 >> 59) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v5 - v2;
    if (v9 >> 4 > v8) {
      unint64_t v8 = v9 >> 4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    std::string v29 = v1 + 2;
    if (v10) {
      unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v18 = v10 + 32 * v7;
    uint64_t v25 = (_DWORD *)v10;
    int v26 = (char *)v18;
    uint64_t v28 = (char *)(v10 + 32 * v11);
    *(_DWORD *)(v18 + 24) = 1;
    char v27 = (char *)(v18 + 32);
LABEL_24:
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v1, &v25);
    uint64_t v6 = v1[1];
    uint64_t result = (uint64_t ***)std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)&v25);
    goto LABEL_25;
  }
  unint64_t v12 = v1[2];
  if (v3 >= v12)
  {
    uint64_t v13 = v12 - v2;
    uint64_t v14 = v13 >> 4;
    if ((unint64_t)(v13 >> 4) <= 2) {
      uint64_t v14 = 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    std::string v29 = v1 + 2;
    uint64_t v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v15);
    uint64_t v25 = v16;
    int v26 = (char *)(v16 + 8);
    v16[14] = 1;
    char v27 = (char *)(v16 + 16);
    uint64_t v28 = (char *)&v16[8 * v17];
    goto LABEL_24;
  }
LABEL_6:
  *(_DWORD *)(v3 + 24) = 1;
  uint64_t v6 = v3 + 32;
  v1[1] = v3 + 32;
LABEL_25:
  v1[1] = v6;
  return result;
}

void sub_19E99EFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      a15 = *MEMORY[0x1E4FBA408];
      uint64_t v37 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      a17 = v37;
      a18 = MEMORY[0x1E4FBA470] + 16;
      if (a31 < 0) {
        operator delete(a26);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x19F3C1850](&a34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

uint64_t ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CoreML::ModelStructure::Path::appendComponent(std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel> &>(uint64_t ***result)
{
  uint64_t v1 = **result;
  unint64_t v2 = *v1;
  if (*v1 != v1[1])
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Failed to append ", 17);
    unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Root", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", components must be empty.", 27);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v12);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v3 = v1[2];
  if (v2 >= v3)
  {
    v14[2] = v1 + 2;
    uint64_t v5 = v3 - v2;
    uint64_t v6 = v5 >> 4;
    if ((unint64_t)(v5 >> 4) <= 1) {
      uint64_t v6 = 1;
    }
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v7 = v6;
    }
    v13[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>>(v7);
    v13[1] = v13[0];
    v14[0] = v13[0] + 32;
    v14[1] = v13[0] + 32 * v8;
    *(_DWORD *)(v13[0] + 24) = 0;
    std::vector<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::__swap_out_circular_buffer(v1, v13);
    unint64_t v4 = v1[1];
    uint64_t result = (uint64_t ***)std::__split_buffer<std::variant<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>>::~__split_buffer((uint64_t)v13);
  }
  else
  {
    *(_DWORD *)(v2 + 24) = 0;
    unint64_t v4 = v2 + 32;
    v1[1] = v2 + 32;
  }
  v1[1] = v4;
  return result;
}

void sub_19E99F298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      a15 = *MEMORY[0x1E4FBA408];
      uint64_t v37 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      a17 = v37;
      a18 = MEMORY[0x1E4FBA470] + 16;
      if (a31 < 0) {
        operator delete(a26);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x19F3C1850](&a34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

uint64_t CoreML::ModelStructure::Path::replace(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a3 + 24);
  int v5 = *(_DWORD *)(a4 + 24);
  BOOL v6 = v5 == v4;
  BOOL v7 = v5 == -1;
  BOOL v8 = v5 == -1;
  if (v7) {
    BOOL v6 = 0;
  }
  if (v4 == -1) {
    BOOL v9 = v8;
  }
  else {
    BOOL v9 = v6;
  }
  if (!v9)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "The old value and the new value must be of the same type.");
    __cxa_throw(exception, (struct type_info *)off_1E59A3028, MEMORY[0x1E4FBA1E8]);
  }
  for (uint64_t i = result; i != a2; i += 32)
  {
    uint64_t result = std::operator==[abi:ne180100]<CoreML::ModelStructure::Path::Root,CoreML::ModelStructure::Path::Program,CoreML::ModelStructure::Path::Program::Function,CoreML::ModelStructure::Path::Program::Block,CoreML::ModelStructure::Path::Program::Operation,CoreML::ModelStructure::Path::NeuralNetwork,CoreML::ModelStructure::Path::NeuralNetwork::Layer,CoreML::ModelStructure::Path::Pipeline,CoreML::ModelStructure::Path::Pipeline::SubModel>(i, a3);
    if (result)
    {
      uint64_t v14 = *(unsigned int *)(i + 24);
      uint64_t v15 = *(unsigned int *)(a4 + 24);
      if (v14 == -1)
      {
        if (v15 != -1)
        {
LABEL_13:
          uint64_t v17 = i;
          uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EF0E6268[v15])(&v17, i, a4);
        }
      }
      else
      {
        if (v15 != -1) {
          goto LABEL_13;
        }
        uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EF0E61D8[v14])(&v18, i);
        *(_DWORD *)(i + 24) = -1;
      }
    }
  }
  return result;
}

void sub_19E99F518(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(__n128 **a1, std::string *this, std::string *__str)
{
  unint64_t v3 = *a1;
  unsigned __int32 v4 = (*a1)[1].n128_u32[2];
  if (v4 == 8)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v6, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      unsigned __int32 v4 = v3[1].n128_u32[2];
    }
    else
    {
      std::string v6 = *__str;
    }
    if (v4 != -1) {
      ((void (*)(char *, __n128 *))off_1EF0E61D8[v4])(&v7, v3);
    }
    __n128 result = *(__n128 *)&v6.__r_.__value_.__l.__data_;
    v3[1].n128_u64[0] = v6.__r_.__value_.__r.__words[2];
    *unint64_t v3 = result;
    v3[1].n128_u32[2] = 8;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 24);
  if (v2 != -1)
  {
    if (v2 == 7) {
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0E61D8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 7;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(__n128 **a1, std::string *this, std::string *__str)
{
  char v3 = *a1;
  unsigned __int32 v4 = (*a1)[1].n128_u32[2];
  if (v4 == 6)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v6, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      unsigned __int32 v4 = v3[1].n128_u32[2];
    }
    else
    {
      std::string v6 = *__str;
    }
    if (v4 != -1) {
      ((void (*)(char *, __n128 *))off_1EF0E61D8[v4])(&v7, v3);
    }
    __n128 result = *(__n128 *)&v6.__r_.__value_.__l.__data_;
    v3[1].n128_u64[0] = v6.__r_.__value_.__r.__words[2];
    *char v3 = result;
    v3[1].n128_u32[2] = 6;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 24);
  if (v2 != -1)
  {
    if (v2 == 5) {
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0E61D8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 5;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(__n128 **a1, std::string *this, std::string *__str)
{
  char v3 = *a1;
  unsigned __int32 v4 = (*a1)[1].n128_u32[2];
  if (v4 == 4)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v6, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      unsigned __int32 v4 = v3[1].n128_u32[2];
    }
    else
    {
      std::string v6 = *__str;
    }
    if (v4 != -1) {
      ((void (*)(char *, __n128 *))off_1EF0E61D8[v4])(&v7, v3);
    }
    __n128 result = *(__n128 *)&v6.__r_.__value_.__l.__data_;
    v3[1].n128_u64[0] = v6.__r_.__value_.__r.__words[2];
    *char v3 = result;
    v3[1].n128_u32[2] = 4;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0E61D8[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 24) = 3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(__n128 **a1, std::string *this, std::string *__str)
{
  char v3 = *a1;
  unsigned __int32 v4 = (*a1)[1].n128_u32[2];
  if (v4 == 2)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v6, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      unsigned __int32 v4 = v3[1].n128_u32[2];
    }
    else
    {
      std::string v6 = *__str;
    }
    if (v4 != -1) {
      ((void (*)(char *, __n128 *))off_1EF0E61D8[v4])(&v7, v3);
    }
    __n128 result = *(__n128 *)&v6.__r_.__value_.__l.__data_;
    v3[1].n128_u64[0] = v6.__r_.__value_.__r.__words[2];
    *char v3 = result;
    v3[1].n128_u32[2] = 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 24);
  if (v2 != -1)
  {
    if (v2 == 1) {
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0E61D8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN6CoreML14ModelStructure4Path4RootENSA_7ProgramENSC_8FunctionENSC_5BlockENSC_9OperationENSA_13NeuralNetworkENSG_5LayerENSA_8PipelineENSI_8SubModelEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJSB_SC_SD_SE_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 24);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EF0E61D8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

void sub_19E99FD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9A000C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9A0174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9A0238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9A0394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_19E9A057C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9A06AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9A0908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_19E9A0C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9A0EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9A1284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

void _MLModelInputArchiver::_MLModelInputArchiver(_MLModelInputArchiver *this, const IArchive *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  std::map<std::string,IArchive>::map[abi:ne180100]((uint64_t)this + 16, (void *)a2 + 2);
}

void sub_19E9A13CC(_Unwind_Exception *exception_object)
{
  char v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E9A1654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19E9A189C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9A1B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_19E9A1F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_19E9A22B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  _MLModelInputArchiver::~_MLModelInputArchiver((_MLModelInputArchiver *)&__p);
  _MLModelInputArchiver::~_MLModelInputArchiver((_MLModelInputArchiver *)&a25);
  a25 = (void *)(v30 - 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  _Unwind_Resume(a1);
}

void sub_19E9A2688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26)
{
  _Unwind_Resume(a1);
}

void sub_19E9A29D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  MEMORY[0x19F3C1920](v16, 0x10A1C40759568C3);

  _Unwind_Resume(a1);
}

void sub_19E9A2D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }

  _Unwind_Resume(a1);
}

void sub_19E9A364C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::~__hash_table((uint64_t)&a35);
  _Unwind_Resume(a1);
}

id anonymous namespace'::modelTypeNames(_anonymous_namespace_ *this, const CoreML::Specification::Pipeline *a2)
{
  char v3 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:*((int *)this + 6)];
  if (*((int *)this + 6) >= 1)
  {
    for (uint64_t i = 0; i < *((int *)this + 6); ++i)
    {
      int v5 = *(_DWORD *)(*(void *)(*((void *)this + 4) + 8 * i + 8) + 44);
      if (v5 > 559)
      {
        if (v5 > 899)
        {
          switch(v5)
          {
            case 2000:
              std::string v6 = "MLModelType_textClassifier";
              break;
            case 2001:
              std::string v6 = "MLModelType_wordTagger";
              break;
            case 2002:
              std::string v6 = "MLModelType_visionFeaturePrint";
              break;
            case 2003:
              std::string v6 = "MLModelType_soundAnalysisPreprocessing";
              break;
            case 2004:
              std::string v6 = "MLModelType_gazetteer";
              break;
            case 2005:
              std::string v6 = "MLModelType_wordEmbedding";
              break;
            case 2006:
              std::string v6 = "MLModelType_audioFeaturePrint";
              break;
            default:
              if (v5 == 900)
              {
                std::string v6 = "MLModelType_identity";
              }
              else
              {
                if (v5 != 3000) {
                  goto LABEL_56;
                }
                std::string v6 = "MLModelType_serializedModel";
              }
              break;
          }
        }
        else
        {
          switch(v5)
          {
            case 600:
              std::string v6 = "MLModelType_oneHotEncoder";
              break;
            case 601:
              std::string v6 = "MLModelType_imputer";
              break;
            case 602:
              std::string v6 = "MLModelType_featureVectorizer";
              break;
            case 603:
              std::string v6 = "MLModelType_dictVectorizer";
              break;
            case 604:
              std::string v6 = "MLModelType_scaler";
              break;
            case 605:
            case 608:
              goto LABEL_56;
            case 606:
              std::string v6 = "MLModelType_categoricalMapping";
              break;
            case 607:
              std::string v6 = "MLModelType_normalizer";
              break;
            case 609:
              std::string v6 = "MLModelType_arrayFeatureExtractor";
              break;
            case 610:
              std::string v6 = "MLModelType_nonMaximumSuppression";
              break;
            default:
              if (v5 != 560) {
                goto LABEL_56;
              }
              std::string v6 = "MLModelType_classConfidenceThresholding";
              break;
          }
        }
        goto LABEL_61;
      }
      if (v5 <= 399)
      {
        if (v5 > 201)
        {
          switch(v5)
          {
            case 300:
              std::string v6 = "MLModelType_glmRegressor";
              break;
            case 301:
              std::string v6 = "MLModelType_supportVectorRegressor";
              break;
            case 302:
              std::string v6 = "MLModelType_treeEnsembleRegressor";
              break;
            case 303:
              std::string v6 = "MLModelType_neuralNetworkRegressor";
              break;
            case 304:
              std::string v6 = "MLModelType_bayesianProbitRegressor";
              break;
            default:
              if (v5 != 202) {
                goto LABEL_56;
              }
              std::string v6 = "MLModelType_pipeline";
              break;
          }
          goto LABEL_61;
        }
        if (!v5)
        {
LABEL_56:
          std::string v6 = "INVALID";
          goto LABEL_61;
        }
        std::string v6 = "MLModelType_pipelineClassifier";
        if (v5 != 200)
        {
          if (v5 != 201) {
            goto LABEL_56;
          }
          std::string v6 = "MLModelType_pipelineRegressor";
        }
      }
      else
      {
        if (v5 <= 499)
        {
          switch(v5)
          {
            case 400:
              std::string v6 = "MLModelType_glmClassifier";
              break;
            case 401:
              std::string v6 = "MLModelType_supportVectorClassifier";
              break;
            case 402:
              std::string v6 = "MLModelType_treeEnsembleClassifier";
              break;
            case 403:
              std::string v6 = "MLModelType_neuralNetworkClassifier";
              break;
            case 404:
              std::string v6 = "MLModelType_kNearestNeighborsClassifier";
              break;
            default:
              goto LABEL_56;
          }
          goto LABEL_61;
        }
        if (v5 <= 501)
        {
          if (v5 == 500) {
            std::string v6 = "MLModelType_neuralNetwork";
          }
          else {
            std::string v6 = "MLModelType_itemSimilarityRecommender";
          }
          goto LABEL_61;
        }
        switch(v5)
        {
          case 502:
            std::string v6 = "MLModelType_mlProgram";
            break;
          case 555:
            std::string v6 = "MLModelType_customModel";
            break;
          case 556:
            std::string v6 = "MLModelType_linkedModel";
            break;
          default:
            goto LABEL_56;
        }
      }
LABEL_61:
      char v7 = [NSString stringWithUTF8String:v6];
      [v3 addObject:v7];
    }
  }

  return v3;
}

void sub_19E9A3B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9A3E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(v22 - 72));
  _Unwind_Resume(a1);
}

void sub_19E9A3F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20)
{
}

void sub_19E9A4148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void CoreML::NNCompiler::Frontend::MIL::Parse(uint64_t a1, std::string::size_type *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v212 = *MEMORY[0x1E4F143B8];
  CoreML::Model::validate((CoreML::Model *)&__p, (const CoreML::Specification::Model *)a3);
  if (((uint64_t)__p.__r_.__value_.__l.__data_ & 0xFFFFFFEF) != 0)
  {
    exception = (char *)__cxa_allocate_exception(0x30uLL);
    *(_OWORD *)&v180.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
    std::string::size_type v179 = __p.__r_.__value_.__r.__words[0];
    v180.__r_.__value_.__r.__words[2] = *(void *)&v207[0];
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    *(void *)&v207[0] = 0;
    std::runtime_error::runtime_error((std::runtime_error *)exception, &v180);
    *(void *)exception = &unk_1EF0DB040;
    *((void *)exception + 2) = v179;
    std::string::size_type v149 = v180.__r_.__value_.__r.__words[2];
    *(_OWORD *)(exception + 24) = *(_OWORD *)&v180.__r_.__value_.__l.__data_;
    *((void *)exception + 5) = v149;
    memset(&v180, 0, sizeof(v180));
  }
  if (SBYTE7(v207[0]) < 0) {
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  if (*(_DWORD *)(a3 + 44) != 502)
  {
    v150 = (char *)__cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Model specification does not contain an ML Program.");
    uint64_t v177 = 5;
    std::operator+<char>();
    std::runtime_error::runtime_error((std::runtime_error *)v150, &v178);
    *(void *)v150 = &unk_1EF0DB040;
    *((void *)v150 + 2) = v177;
    std::string::size_type v151 = v178.__r_.__value_.__r.__words[2];
    *(_OWORD *)(v150 + 24) = *(_OWORD *)&v178.__r_.__value_.__l.__data_;
    *((void *)v150 + 5) = v151;
    memset(&v178, 0, sizeof(v178));
  }
  uint64_t v166 = a3;
  uint64_t v9 = *(void *)(a3 + 32);
  memset(&v176, 0, sizeof(v176));
  std::string::size_type v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  if (v10 >> 31)
  {
    LODWORD(v181.__r_.__value_.__l.__data_) = 2;
    v181.__r_.__value_.__l.__size_ = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/CoreML/coremltools-in"
                                                             "ternal/deps/protobuf/src/google/protobuf/message_lite.cc";
    LODWORD(v181.__r_.__value_.__r.__words[2]) = 302;
    memset(v182, 0, 24);
    std::string::append(v182, "Exceeded maximum protobuf size of 2GB: ");
    snprintf((char *)&__p, 0x80uLL, "%lu", v10);
    char v208 = 0;
    std::string::append(v182, (const std::string::value_type *)&__p);
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v181);
    if (SHIBYTE(v182[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v182[0].__r_.__value_.__l.__data_);
    }
    v176.__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&v176.__r_.__value_.__s + 23) = 0;
  }
  else
  {
    std::string::resize(&v176, v10, 0);
    if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v176;
    }
    else {
      uint64_t v11 = (std::string *)v176.__r_.__value_.__r.__words[0];
    }
    std::string v12 = (google::protobuf::_anonymous_namespace_ *)((*(uint64_t (**)(uint64_t, std::string *))(*(void *)v9 + 112))(v9, v11)- (void)v11);
    if (v12 != (google::protobuf::_anonymous_namespace_ *)v10)
    {
      uint64_t v13 = (google::protobuf::_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
    }
  }
  std::istringstream::basic_istringstream[abi:ne180100](&v175, &v176, 8);
  if (a4[3])
  {
    std::string::size_type v15 = *a2;
    std::string::size_type v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    if (*(char *)(a5 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
    }
    else {
      std::string v209 = *(std::string *)a5;
    }
    CoreML::MIL::CoreMLUtil::MakeProtoParserOptions((uint64_t *)&v197, (uint64_t)&v209);
    if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v209.__r_.__value_.__l.__data_);
    }
    (*(void (**)(std::string::size_type, void))(*(void *)v197.__r_.__value_.__l.__data_ + 64))(v197.__r_.__value_.__r.__words[0], 0);
    (*(void (**)(std::string::size_type, uint64_t))(*(void *)v197.__r_.__value_.__l.__data_ + 112))(v197.__r_.__value_.__r.__words[0], 1);
    uint64_t v19 = *(unsigned __int8 *)(a5 + 23);
    if ((v19 & 0x80u) != 0) {
      uint64_t v19 = *(void *)(a5 + 8);
    }
    if (!v19)
    {
      std::string::size_type v20 = v197.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&v204, "mem://");
      (*(void (**)(std::string::size_type, std::string *))(*(void *)v20 + 48))(v20, &v204);
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v204.__r_.__value_.__l.__data_);
      }
    }
    v200.__r_.__value_.__r.__words[0] = v15;
    v200.__r_.__value_.__l.__size_ = v16;
    MIL::Proto::ParseProgram();
    if (v200.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v200.__r_.__value_.__l.__size_);
    }
    long long v21 = v190;
    int v190 = 0;
    uint64_t v22 = (*(uint64_t (**)(std::string::size_type))(*(void *)v197.__r_.__value_.__l.__data_ + 40))(v197.__r_.__value_.__r.__words[0]);
    if (a4[3])
    {
      uint64_t v24 = v22;
      MEMORY[0x19F3C0AC0](&v199, v21);
      MIL::Transform::ProgramTransformer::GetProgramBuilder((uint64_t *)&v201, (MIL::Transform::ProgramTransformer *)&v199);
      for (uint64_t i = *(void **)(MIL::Builder::ProgramBuilder::GetFunctions(v201) + 16); i; uint64_t i = (void *)*i)
      {
        int v26 = (MIL::Builder::FunctionBuilder *)i[5];
        for (uint64_t j = *(uint64_t **)(MIL::Builder::FunctionBuilder::GetAttributes(v26) + 16); j; uint64_t j = (uint64_t *)*j)
        {
          {
            std::string::size_type v29 = v181.__r_.__value_.__r.__words[0];
            if (v181.__r_.__value_.__r.__words[0])
            {
              if (*((char *)j + 39) < 0) {
                std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)j[2], j[3]);
              }
              else {
                std::string __p = *(std::string *)(j + 2);
              }
              __s.__r_.__value_.__r.__words[0] = v29;
              __s.__r_.__value_.__l.__size_ = v181.__r_.__value_.__l.__size_;
              MIL::Builder::FunctionBuilder::SetAttribute();
              if (__s.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__s.__r_.__value_.__l.__size_);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            else if (v181.__r_.__value_.__l.__size_)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v181.__r_.__value_.__l.__size_);
            }
          }
        }
        MIL::Builder::FunctionBuilder::SelectedSpecialization(v26);
        MIL::Builder::FunctionBuilder::GetBlock();
        if (__p.__r_.__value_.__r.__words[0]) {
        if (__p.__r_.__value_.__l.__size_)
        }
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      MIL::Transform::ProgramTransformer::GetProgram((uint64_t *)&v196, (MIL::Transform::ProgramTransformer *)&v199);
      if (v202[0]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v202[0]);
      }
      MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&v199);
      uint64_t v30 = (MIL::IRProgramValidator *)v196.__r_.__value_.__r.__words[0];
    }
    else
    {
      uint64_t v30 = v21;
      long long v21 = 0;
    }
    v196.__r_.__value_.__r.__words[0] = 0;
    uint64_t v31 = v190;
    int v190 = v30;
    if (v31)
    {
      (*(void (**)(MIL::IRProgramValidator *))(*(void *)v31 + 8))(v31);
      std::string::size_type v32 = v196.__r_.__value_.__r.__words[0];
      v196.__r_.__value_.__r.__words[0] = 0;
      if (v32) {
        (*(void (**)(std::string::size_type))(*(void *)v32 + 8))(v32);
      }
    }
    if (v21) {
      (*(void (**)(MIL::IRProgramValidator *))(*(void *)v21 + 8))(v21);
    }
    MIL::IRProgramValidator::Validate((uint64_t *)&v181, v190, v23);
    uint64_t v33 = v166;
    if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v181) & 1) == 0)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      long long v152 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"Program failed validation when resolving blob file reference: ", 62);
      uint64_t Message = MIL::MILResult::GetMessage((MIL::MILResult *)&v181);
      int v154 = *(char *)(Message + 23);
      if (v154 >= 0) {
        uint64_t v155 = Message;
      }
      else {
        uint64_t v155 = *(void *)Message;
      }
      if (v154 >= 0) {
        uint64_t v156 = *(unsigned __int8 *)(Message + 23);
      }
      else {
        uint64_t v156 = *(void *)(Message + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, v155, v156);
      uint64_t v157 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)" location", 9);
      uint64_t Location = MIL::MILResult::GetLocation((MIL::MILResult *)&v181);
      (*(void (**)(std::string *__return_ptr))(*(void *)Location + 24))(&__s);
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_s = &__s;
      }
      else {
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __s.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)p_s, size);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
      std::string::size_type v161 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v161, &__s);
      __cxa_throw(v161, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    MEMORY[0x19F3C0600](&v181);
    std::string::size_type v34 = v197.__r_.__value_.__r.__words[0];
    v197.__r_.__value_.__r.__words[0] = 0;
    if (v34) {
      (*(void (**)(std::string::size_type))(*(void *)v34 + 8))(v34);
    }
    int v35 = v190;
  }
  else
  {
    std::string::size_type v18 = *a2;
    std::string::size_type v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    if (*(char *)(a5 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
    }
    else {
      std::string __p = *(std::string *)a5;
    }
    uint64_t v33 = v166;
    CoreML::MIL::CoreMLUtil::MakeProtoParserOptions((uint64_t *)&v209, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v181.__r_.__value_.__r.__words[0] = v18;
    v181.__r_.__value_.__l.__size_ = v17;
    MIL::Proto::ParseProgram();
    if (v181.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v181.__r_.__value_.__l.__size_);
    }
    std::string::size_type v36 = v209.__r_.__value_.__r.__words[0];
    v209.__r_.__value_.__r.__words[0] = 0;
    if (v36) {
      (*(void (**)(std::string::size_type))(*(void *)v36 + 8))(v36);
    }
    int v35 = (MIL::IRProgramValidator *)v204.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v168 = v35;
  int v37 = *(char *)(a5 + 23);
  if (v37 < 0)
  {
    if (*(void *)(a5 + 8))
    {
LABEL_72:
      if ((v37 & 0x80) == 0)
      {
LABEL_73:
        std::string v172 = *(std::string *)a5;
LABEL_106:
        std::allocate_shared[abi:ne180100]<CoreML::Specification::Model,std::allocator<CoreML::Specification::Model>,CoreML::Specification::Model const&,void>(&v192, (const CoreML::Specification::Model *)v33);
        std::string::size_type v62 = +[MLCompilerOptions defaultOptions];
        id v191 = 0;
        int v167 = +[MLNeuralNetworkCompiler compiledVersionForSpecification:&v192 options:v62 error:&v191];
        id v164 = v191;

        if (!v167)
        {
          std::string::size_type v63 = +[MLLogging coreChannel];
          if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
          {
            int v145 = *(_DWORD *)(v33 + 24);
            LODWORD(__p.__r_.__value_.__l.__data_) = 67109378;
            HIDWORD(__p.__r_.__value_.__r.__words[0]) = v145;
            LOWORD(__p.__r_.__value_.__r.__words[1]) = 2112;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v164;
            _os_log_error_impl(&dword_19E58B000, v63, OS_LOG_TYPE_ERROR, "Compiler version info is nil for specification version: %d, error: %@", (uint8_t *)&__p, 0x12u);
          }

          [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Compiler version info is nil for specification version: %d, error: %@", *(unsigned int *)(v33 + 24), v164 format];
        }
        unint64_t v64 = *(uint64_t **)(v33 + 16);
        if (!v64) {
          unint64_t v64 = &CoreML::Specification::_ModelDescription_default_instance_;
        }
        CoreML::NNCompiler::Frontend::ParseModelOSSizeTrackingInfo((CoreML::NNCompiler::Frontend *)&v190, (const CoreML::Specification::ModelDescription *)v64[20]);
        v188[1] = 0;
        v188[0] = 0;
        long long v189 = 0;
        memset(&v187, 0, sizeof(v187));
        uint64_t v186 = 0;
        v185 = 0;
        int v184 = &v185;
        if (*(void *)(v33 + 16)) {
          std::string::size_type v65 = *(uint64_t **)(v33 + 16);
        }
        else {
          std::string::size_type v65 = &CoreML::Specification::_ModelDescription_default_instance_;
        }
        if (!*((_DWORD *)v65 + 24))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "main");
          uint64_t v131 = (*(uint64_t (**)(MIL::IRProgramValidator *, std::string *))(*(void *)v168 + 56))(v168, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v131)
          {
            std::string::basic_string[abi:ne180100]<0>(&v183, "main");
            if (*(void *)(v33 + 16)) {
              v132 = *(uint64_t **)(v33 + 16);
            }
            else {
              v132 = &CoreML::Specification::_ModelDescription_default_instance_;
            }
            id v133 = v167;
            uint64_t v134 = (*(uint64_t (**)(uint64_t))(*(void *)v131 + 112))(v131);
            uint64_t v135 = *(void *)std::map<std::string,std::string>::at(v134, &v181);
            CoreML::NNCompiler::Frontend::ParseOptionalInputDefaults((uint64_t **)&v209, (const CoreML::Specification::ModelDescription *)*((unsigned int *)v132 + 6), v132[4]);
            CoreML::MLNeuralNetworkUtilities::getInputShapeInfosFromSpec((uint64_t **)&v204, (const CoreML::Specification::ModelDescription *)*((unsigned int *)v132 + 6), v132[4]);
            CoreML::MLNeuralNetworkUtilities::getStateShapeInfosFromSpec((uint64_t **)&__s, (const CoreML::Specification::ModelDescription *)*((unsigned int *)v132 + 18), v132[10]);
            CoreML::MLNeuralNetworkUtilities::getOutputNamesFromSpec((CoreML::MLNeuralNetworkUtilities *)&v201, (const CoreML::Specification::ModelDescription *)*((unsigned int *)v132 + 12), v132[7]);
            if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v200, v183.__r_.__value_.__l.__data_, v183.__r_.__value_.__l.__size_);
            }
            else {
              std::string v200 = v183;
            }
            *(void *)&long long v195 = v194;
            if (v194) {
              operator new();
            }
            long long v195 = 0uLL;
            uint64_t v194 = 0;
            std::string v199 = v204;
            if (v204.__r_.__value_.__r.__words[2])
            {
              *(void *)(v204.__r_.__value_.__l.__size_ + 16) = &v199.__r_.__value_.__l.__size_;
              v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v204.__r_.__value_.__l.__size_;
              *(_OWORD *)&v204.__r_.__value_.__r.__words[1] = 0uLL;
            }
            else
            {
              v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__l.__size_;
            }
            std::string v197 = __s;
            if (__s.__r_.__value_.__r.__words[2])
            {
              *(void *)(__s.__r_.__value_.__l.__size_ + 16) = &v197.__r_.__value_.__l.__size_;
              __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s.__r_.__value_.__l.__size_;
              *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = 0uLL;
            }
            else
            {
              v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197.__r_.__value_.__l.__size_;
            }
            uint64_t v137 = (std::__shared_weak_count *)*((void *)&v198 + 1);
            long long v193 = v198;
            if (*((void *)&v198 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v198 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v196, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
            }
            else {
              std::string v196 = v181;
            }
            CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo((uint64_t)&__p, (long long *)&v200, (uint64_t)&v195, &v209, &v199, &v197, (uint64_t)&v193, (long long *)&v196, HasControlFlow);
            if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v196.__r_.__value_.__l.__data_);
            }
            if (*((void *)&v193 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v193 + 1));
            }
            std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((void *)v197.__r_.__value_.__l.__size_);
            std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((void *)v199.__r_.__value_.__l.__size_);
            if (*((void *)&v195 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v195 + 1));
            }
            if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v200.__r_.__value_.__l.__data_);
            }
            if (v137) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v137);
            }
            *(void *)&long long v198 = &v201;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v198);
            std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((void *)__s.__r_.__value_.__l.__size_);
            std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((void *)v204.__r_.__value_.__l.__size_);
            std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy((char *)v209.__r_.__value_.__l.__size_);
            if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v181.__r_.__value_.__l.__data_);
            }

            if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v183.__r_.__value_.__l.__data_);
            }
            operator new();
          }
          int v162 = (char *)__cxa_allocate_exception(0x30uLL);
          std::string::basic_string[abi:ne180100]<0>(&v181, "ML Program does not contain a main function.");
          __p.__r_.__value_.__r.__words[0] = 0x130000000CLL;
          std::operator+<char>();
          std::runtime_error::runtime_error((std::runtime_error *)v162, (const std::string *)&__p.__r_.__value_.__r.__words[1]);
          *(void *)int v162 = &unk_1EF0DB040;
          *((void *)v162 + 2) = __p.__r_.__value_.__r.__words[0];
          uint64_t v163 = *(void *)&v207[0];
          *(_OWORD *)(v162 + 24) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
          *((void *)v162 + 5) = v163;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
          *(void *)&v207[0] = 0;
        }
        std::string::operator=(&v187, (const std::string *)v65[19]);
        uint64_t v66 = v65[13];
        if (v66) {
          uint64_t v67 = v66 + 8;
        }
        else {
          uint64_t v67 = 0;
        }
        uint64_t v68 = *((int *)v65 + 24);
        if (!v68) {
LABEL_255:
        }
          operator new();
        uint64_t v165 = v67 + 8 * v68;
        while (1)
        {
          uint64_t v69 = *(void *)v67;
          uint64_t v70 = *(long long **)(*(void *)v67 + 88);
          uint64_t v71 = (*(uint64_t (**)(MIL::IRProgramValidator *, long long *))(*(void *)v168 + 56))(v168, v70);
          if (!v71)
          {
            unint64_t v146 = (char *)__cxa_allocate_exception(0x30uLL);
            std::operator+<char>();
            __p.__r_.__value_.__r.__words[0] = 0x130000000CLL;
            std::operator+<char>();
            std::runtime_error::runtime_error((std::runtime_error *)v146, (const std::string *)&__p.__r_.__value_.__r.__words[1]);
            *(void *)unint64_t v146 = &unk_1EF0DB040;
            *((void *)v146 + 2) = __p.__r_.__value_.__r.__words[0];
            uint64_t v147 = *(void *)&v207[0];
            *(_OWORD *)(v146 + 24) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
            *((void *)v146 + 5) = v147;
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
            *(void *)&v207[0] = 0;
          }
          id v171 = v167;
          uint64_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 112))(v71);
          uint64_t v170 = *(void *)std::map<std::string,std::string>::at(v72, &__s);
          uint64_t v169 = v67;
          v202[0] = 0;
          v202[1] = 0;
          uint64_t v201 = (MIL::Builder::ProgramBuilder *)v202;
          uint64_t v74 = *(void *)(v69 + 32);
          if (v74) {
            long long v75 = (uint64_t *)(v74 + 8);
          }
          else {
            long long v75 = 0;
          }
          uint64_t v76 = *(int *)(v69 + 24);
          if (!v76)
          {
            *(_OWORD *)&v200.__r_.__value_.__r.__words[1] = 0uLL;
            v200.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200.__r_.__value_.__l.__size_;
            goto LABEL_184;
          }
          uint64_t v77 = 8 * v76;
          do
          {
            uint64_t v78 = *v75;
            std::string v79 = *(uint64_t **)(*v75 + 32);
            if (!v79) {
              std::string v79 = &CoreML::Specification::_FeatureType_default_instance_;
            }
            if (*((unsigned char *)v79 + 16))
            {
              if (*((_DWORD *)v79 + 9) == 5)
              {
                long long v80 = (uint64_t *)v79[3];
              }
              else
              {
                inited = (float *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                long long v80 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              int v81 = *((_DWORD *)v80 + 16);
              if (v81 == 41)
              {
                std::string::size_type v86 = *(uint64_t **)(v78 + 32);
                if (!v86) {
                  std::string::size_type v86 = &CoreML::Specification::_FeatureType_default_instance_;
                }
                if (*((_DWORD *)v86 + 9) == 5)
                {
                  uint64_t v87 = (uint64_t *)v86[3];
                }
                else
                {
                  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                  uint64_t v87 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                }
                if (*((_DWORD *)v87 + 16) == 41) {
                  int v89 = *((_DWORD *)v87 + 12);
                }
                else {
                  int v89 = 0;
                }
                __p.__r_.__value_.__r.__words[0] = *(void *)(v78 + 16);
                inited = (float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v201, __p.__r_.__value_.__l.__data_, (long long **)&__p);
                float v91 = (float)v89;
LABEL_162:
                inited[14] = v91;
                goto LABEL_163;
              }
              if (v81 != 51)
              {
                if (v81 != 61)
                {
                  __p.__r_.__value_.__r.__words[0] = *(void *)(v78 + 16);
                  inited = (float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v201, __p.__r_.__value_.__l.__data_, (long long **)&__p);
                  inited[14] = 0.0;
                  goto LABEL_163;
                }
                unint64_t v82 = *(uint64_t **)(v78 + 32);
                if (!v82) {
                  unint64_t v82 = &CoreML::Specification::_FeatureType_default_instance_;
                }
                if (*((_DWORD *)v82 + 9) == 5)
                {
                  long long v83 = (uint64_t *)v82[3];
                }
                else
                {
                  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                  long long v83 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
                }
                double v90 = 0.0;
                if (*((_DWORD *)v83 + 16) == 61) {
                  double v90 = *((double *)v83 + 6);
                }
                __p.__r_.__value_.__r.__words[0] = *(void *)(v78 + 16);
                inited = (float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v201, __p.__r_.__value_.__l.__data_, (long long **)&__p);
                float v91 = v90;
                goto LABEL_162;
              }
              char v84 = *(uint64_t **)(v78 + 32);
              if (!v84) {
                char v84 = &CoreML::Specification::_FeatureType_default_instance_;
              }
              if (*((_DWORD *)v84 + 9) == 5)
              {
                std::string::size_type v85 = (uint64_t *)v84[3];
              }
              else
              {
                CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                std::string::size_type v85 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              int v88 = 0;
              if (*((_DWORD *)v85 + 16) == 51) {
                int v88 = *((_DWORD *)v85 + 12);
              }
              __p.__r_.__value_.__r.__words[0] = *(void *)(v78 + 16);
              inited = (float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v201, __p.__r_.__value_.__l.__data_, (long long **)&__p);
              *((_DWORD *)inited + 14) = v88;
            }
LABEL_163:
            ++v75;
            v77 -= 8;
          }
          while (v77);
          uint64_t v92 = *(void *)(v69 + 32);
          uint64_t v93 = *(int *)(v69 + 24);
          *(_OWORD *)&v200.__r_.__value_.__r.__words[1] = 0uLL;
          v200.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200.__r_.__value_.__l.__size_;
          if (v92) {
            uint64_t v94 = (uint64_t *)(v92 + 8);
          }
          else {
            uint64_t v94 = 0;
          }
          if (v93)
          {
            uint64_t v95 = 8 * v93;
            while (1)
            {
              uint64_t v96 = *v94;
              std::string v97 = *(uint64_t **)(*v94 + 32);
              if (!v97) {
                std::string v97 = &CoreML::Specification::_FeatureType_default_instance_;
              }
              int v98 = *((_DWORD *)v97 + 9);
              if (v98 == 4) {
                break;
              }
              if (v98 == 8)
              {
                uint64_t v100 = v97[3];
                if (*(_DWORD *)(v100 + 28) == 1)
                {
                  std::string v101 = *(const CoreML::Specification::ArrayFeatureType **)(v100 + 16);
                }
                else
                {
                  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                  std::string v101 = (const CoreML::Specification::ArrayFeatureType *)&CoreML::Specification::_ArrayFeatureType_default_instance_;
                }
                std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v209.__r_.__value_.__l.__size_, (uint64_t)&v204);
                int v210 = v205;
                int v211 = 0;
                std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v209.__r_.__value_.__l.__size_);
                v199.__r_.__value_.__r.__words[0] = *(void *)(v96 + 16);
                std::string::size_type v103 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v200, v199.__r_.__value_.__l.__data_, (long long **)&v199);
                std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v103 + 8), (uint64_t)&__p.__r_.__value_.__l.__size_);
                goto LABEL_180;
              }
              if (v98 == 5)
              {
                std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v209.__r_.__value_.__l.__size_, (uint64_t)&v204);
                int v210 = v205;
                int v211 = 0;
                std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v209.__r_.__value_.__l.__size_);
                v199.__r_.__value_.__r.__words[0] = *(void *)(v96 + 16);
                std::string v99 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v200, v199.__r_.__value_.__l.__data_, (long long **)&v199);
                std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v99 + 8), (uint64_t)&__p.__r_.__value_.__l.__size_);
LABEL_180:
                std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&__p.__r_.__value_.__l.__size_);
                std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v209.__r_.__value_.__l.__size_);
                inited = (float *)std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v204);
              }
              ++v94;
              v95 -= 8;
              if (!v95) {
                goto LABEL_184;
              }
            }
            std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v209.__r_.__value_.__l.__size_, (uint64_t)&v204);
            int v210 = v205;
            int v211 = 1;
            std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v209.__r_.__value_.__l.__size_);
            v199.__r_.__value_.__r.__words[0] = *(void *)(v96 + 16);
            std::string v102 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v200, v199.__r_.__value_.__l.__data_, (long long **)&v199);
            std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v102 + 8), (uint64_t)&__p.__r_.__value_.__l.__size_);
            goto LABEL_180;
          }
LABEL_184:
          *(_OWORD *)&v199.__r_.__value_.__r.__words[1] = 0uLL;
          v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__l.__size_;
          uint64_t v104 = *(void *)(v69 + 80);
          if (v104) {
            int v105 = (uint64_t *)(v104 + 8);
          }
          else {
            int v105 = 0;
          }
          uint64_t v106 = *(int *)(v69 + 72);
          if (v106)
          {
            uint64_t v107 = 8 * v106;
            do
            {
              uint64_t v108 = *v105;
              uint64_t v109 = *(uint64_t **)(*v105 + 32);
              if (!v109) {
                uint64_t v109 = &CoreML::Specification::_FeatureType_default_instance_;
              }
              if (*((_DWORD *)v109 + 9) == 8)
              {
                int v110 = (uint64_t *)v109[3];
              }
              else
              {
                inited = (float *)CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                int v110 = &CoreML::Specification::_StateFeatureType_default_instance_;
              }
              if (*((_DWORD *)v110 + 7) == 1)
              {
                unint64_t v111 = (const CoreML::Specification::ArrayFeatureType *)v110[2];
              }
              else
              {
                CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults((CoreML::Specification::protobuf_FeatureTypes_2eproto *)inited);
                unint64_t v111 = (const CoreML::Specification::ArrayFeatureType *)&CoreML::Specification::_ArrayFeatureType_default_instance_;
              }
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v209.__r_.__value_.__l.__size_, (uint64_t)&v204);
              int v210 = v205;
              int v211 = 0;
              std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v209.__r_.__value_.__l.__size_);
              v183.__r_.__value_.__r.__words[0] = *(void *)(v108 + 16);
              id v112 = std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v199, v183.__r_.__value_.__l.__data_, (long long **)&v183);
              std::__variant_detail::__assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v112 + 8), (uint64_t)&__p.__r_.__value_.__l.__size_);
              std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&__p.__r_.__value_.__l.__size_);
              std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLMultiArrayShapeInfo,CoreML::NNCompiler::MLImageShapeInfo>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v209.__r_.__value_.__l.__size_);
              inited = (float *)std::__variant_detail::__dtor<std::__variant_detail::__traits<CoreML::NNCompiler::MLFixedShape,CoreML::NNCompiler::MLRangeShape,CoreML::NNCompiler::MLEnumeratedShape>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v204);
              ++v105;
              v107 -= 8;
            }
            while (v107);
          }
          memset(&__p, 0, sizeof(__p));
          uint64_t v113 = *(void *)(v69 + 56);
          if (v113) {
            uint64_t v114 = v113 + 8;
          }
          else {
            uint64_t v114 = 0;
          }
          uint64_t v115 = *(int *)(v69 + 48);
          if (v115)
          {
            unint64_t v116 = 0;
            uint64_t v117 = 8 * v115;
            do
            {
              uint64_t v118 = *(void *)(*(void *)v114 + 16);
              if ((unint64_t)v116 >= __p.__r_.__value_.__r.__words[2])
              {
                unint64_t v116 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&__p, (long long *)v118);
              }
              else
              {
                if (*(char *)(v118 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v116, *(const std::string::value_type **)v118, *(void *)(v118 + 8));
                }
                else
                {
                  long long v119 = *(_OWORD *)v118;
                  v116->__r_.__value_.__r.__words[2] = *(void *)(v118 + 16);
                  *(_OWORD *)&v116->__r_.__value_.__l.__data_ = v119;
                }
                ++v116;
              }
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v116;
              v114 += 8;
              v117 -= 8;
            }
            while (v117);
          }
          if (*((char *)v70 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)v70, *((void *)v70 + 1));
          }
          else
          {
            long long v121 = *v70;
            v209.__r_.__value_.__r.__words[2] = *((void *)v70 + 2);
            *(_OWORD *)&v209.__r_.__value_.__l.__data_ = v121;
          }
          *(void *)&long long v198 = v193;
          if ((void)v193) {
            operator new();
          }
          long long v198 = 0uLL;
          *(void *)&long long v193 = 0;
          std::string v197 = v200;
          if (v200.__r_.__value_.__r.__words[2])
          {
            *(void *)(v200.__r_.__value_.__l.__size_ + 16) = &v197.__r_.__value_.__l.__size_;
            v200.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200.__r_.__value_.__l.__size_;
            *(_OWORD *)&v200.__r_.__value_.__r.__words[1] = 0uLL;
          }
          else
          {
            v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197.__r_.__value_.__l.__size_;
          }
          std::string v196 = v199;
          if (v199.__r_.__value_.__r.__words[2])
          {
            *(void *)(v199.__r_.__value_.__l.__size_ + 16) = &v196.__r_.__value_.__l.__size_;
            v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__l.__size_;
            *(_OWORD *)&v199.__r_.__value_.__r.__words[1] = 0uLL;
          }
          else
          {
            v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v196.__r_.__value_.__l.__size_;
          }
          v122 = (std::__shared_weak_count *)v183.__r_.__value_.__l.__size_;
          long long v195 = *(_OWORD *)&v183.__r_.__value_.__l.__data_;
          if (v183.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v204, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            std::string v204 = __s;
          }
          CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo((uint64_t)&v181, (long long *)&v209, (uint64_t)&v198, &v201, &v197, &v196, (uint64_t)&v195, (long long *)&v204, v120);
          if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v204.__r_.__value_.__l.__data_);
          }
          if (*((void *)&v195 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v195 + 1));
          }
          std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((void *)v196.__r_.__value_.__l.__size_);
          std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((void *)v197.__r_.__value_.__l.__size_);
          if (*((void *)&v198 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v198 + 1));
          }
          if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v209.__r_.__value_.__l.__data_);
            if (v122) {
LABEL_234:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v122);
          }
          else if (v122)
          {
            goto LABEL_234;
          }
          v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
          std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((void *)v199.__r_.__value_.__l.__size_);
          std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLShapeInfo>>>::destroy((void *)v200.__r_.__value_.__l.__size_);
          std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(v202[0]);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }

          if (*((char *)v70 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v70, *((void *)v70 + 1));
          }
          else
          {
            long long v123 = *v70;
            __p.__r_.__value_.__r.__words[2] = *((void *)v70 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v123;
          }
          CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo((uint64_t)v207, (long long *)&v181);
          v124 = (char **)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__find_equal<std::string>((uint64_t)&v184, &v204, &__p);
          if (!*v124)
          {
            v125 = v124;
            unint64_t v126 = (char *)operator new(0x178uLL);
            v209.__r_.__value_.__l.__size_ = (std::string::size_type)&v185;
            *(std::string *)(v126 + 32) = __p;
            memset(&__p, 0, sizeof(__p));
            CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo((uint64_t)(v126 + 56), v207);
            v209.__r_.__value_.__s.__data_[16] = 1;
            std::string::size_type v127 = v204.__r_.__value_.__r.__words[0];
            *(void *)unint64_t v126 = 0;
            *((void *)v126 + 1) = 0;
            *((void *)v126 + 2) = v127;
            unsigned char *v125 = v126;
            if (*v184)
            {
              int v184 = (uint64_t **)*v184;
              unint64_t v126 = *v125;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v185, (uint64_t *)v126);
            ++v186;
            v209.__r_.__value_.__r.__words[0] = 0;
            std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&v209);
          }
          CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)v207);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          v128 = v188[1];
          if (v188[1] >= v189)
          {
            v130 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v188, v70);
          }
          else
          {
            if (*((char *)v70 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v188[1], *(const std::string::value_type **)v70, *((void *)v70 + 1));
            }
            else
            {
              long long v129 = *v70;
              v188[1]->__r_.__value_.__r.__words[2] = *((void *)v70 + 2);
              *(_OWORD *)&v128->__r_.__value_.__l.__data_ = v129;
            }
            v130 = v128 + 1;
          }
          v188[1] = v130;
          CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)&v181);
          uint64_t v67 = v169 + 8;
          if (v169 + 8 == v165) {
            goto LABEL_255;
          }
        }
      }
LABEL_105:
      std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      goto LABEL_106;
    }
  }
  else if (*(unsigned char *)(a5 + 23))
  {
    goto LABEL_72;
  }
  for (k = *(void **)((*(uint64_t (**)(MIL::IRProgramValidator *))(*(void *)v168 + 72))(v168) + 16);
        k;
        k = (void *)*k)
  {
    unint64_t v39 = (MIL::IRObject *)k[5];
    uint64_t v41 = MIL::IRObject::GetAttributes(v39) + 16;
    while (1)
    {
      uint64_t v41 = *(void *)v41;
      if (!v41) {
        break;
      }
      if (BlobFileReference)
      {
LABEL_293:
        v138 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)BlobFileReference + 88))(BlobFileReference);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::at(v138, (unsigned __int8 *)&__p);
        MIL::IRValue::GetScalar<std::string>();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
        v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"The in-memory ML Program must not have a blob file reference but found a reference to ", 86);
        if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v140 = &v181;
        }
        else {
          v140 = (std::string *)v181.__r_.__value_.__r.__words[0];
        }
        if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v141 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v141 = v181.__r_.__value_.__l.__size_;
        }
        v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)v140, v141);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)".", 1);
        v143 = (char *)__cxa_allocate_exception(0x30uLL);
        std::stringbuf::str();
        uint64_t v173 = 12;
        std::operator+<char>();
        std::runtime_error::runtime_error((std::runtime_error *)v143, &v174);
        *(void *)v143 = &unk_1EF0DB040;
        *((void *)v143 + 2) = v173;
        std::string::size_type v144 = v174.__r_.__value_.__r.__words[2];
        *(_OWORD *)(v143 + 24) = *(_OWORD *)&v174.__r_.__value_.__l.__data_;
        *((void *)v143 + 5) = v144;
        memset(&v174, 0, sizeof(v174));
      }
    }
    int v43 = (MIL::IRObject *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)v39 + 40))(v39);
    uint64_t v45 = MIL::IRObject::GetAttributes(v43) + 16;
    while (1)
    {
      uint64_t v45 = *(void *)v45;
      if (!v45) {
        break;
      }
      if (BlobFileReference) {
        goto LABEL_293;
      }
    }
    std::string::size_type v46 = (MIL::IRObject ****)(*(uint64_t (**)(MIL::IRObject *))(*(void *)v43 + 56))(v43);
    uint64_t v47 = **v46;
    long long v48 = (*v46)[1];
    while (v47 != v48)
    {
      unint64_t v49 = *v47;
      uint64_t v51 = MIL::IRObject::GetAttributes(*v47) + 16;
      while (1)
      {
        uint64_t v51 = *(void *)v51;
        if (!v51) {
          break;
        }
        if (BlobFileReference) {
          goto LABEL_293;
        }
      }
      uint8x8_t v52 = (void *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)v49 + 160))(v49);
      unint64_t v53 = v52 + 1;
      unint64_t v54 = (void *)*v52;
      if ((void *)*v52 != v52 + 1)
      {
        do
        {
          uint8x8_t v55 = (MIL::IRArgument **)v54[7];
          unint64_t v56 = (MIL::IRArgument **)v54[8];
          while (v55 != v56)
          {
            if ((*(uint64_t (**)(void))(*(void *)*v55 + 40))())
            {
              Value = (_anonymous_namespace_ *)MIL::IRArgument::GetValue(*v55);
              if (BlobFileReference) {
                goto LABEL_293;
              }
            }
            v55 += 2;
          }
          unint64_t v59 = (void *)v54[1];
          if (v59)
          {
            do
            {
              long long v60 = v59;
              unint64_t v59 = (void *)*v59;
            }
            while (v59);
          }
          else
          {
            do
            {
              long long v60 = (void *)v54[2];
              BOOL v61 = *v60 == (void)v54;
              unint64_t v54 = v60;
            }
            while (!v61);
          }
          unint64_t v54 = v60;
        }
        while (v60 != v53);
      }
      v47 += 2;
    }
  }
  uint64_t v33 = v166;
  if ((*(unsigned char *)(a5 + 23) & 0x80) == 0) {
    goto LABEL_73;
  }
  goto LABEL_105;
}

void sub_19E9A6154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41)
{
  if (SLOBYTE(STACK[0x50F]) < 0)
  {
    operator delete((void *)STACK[0x4F8]);
    if ((v42 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x550]);
      MEMORY[0x19F3C0600](&STACK[0x268]);
      unint64_t v44 = STACK[0x408];
      STACK[0x408] = 0;
      if (v44) {
        (*(void (**)(unint64_t))(*(void *)v44 + 8))(v44);
      }
      unint64_t v45 = STACK[0x480];
      STACK[0x480] = 0;
      if (v45) {
        (*(void (**)(unint64_t))(*(void *)v45 + 8))(v45);
      }
      std::istringstream::~istringstream((uint64_t)&a41);
      if (SLOBYTE(STACK[0x227]) < 0) {
        operator delete((void *)STACK[0x210]);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v42)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v41);
  goto LABEL_6;
}

unsigned __int8 *std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::at(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2 + 40;
}

void anonymous namespace'::GetInterpretedSpecialization(std::string *a1, uint64_t a2)
{
  char v18 = 7;
  strcpy((char *)v17, "CoreML5");
  char v16 = 7;
  strcpy((char *)v15, "CoreML6");
  char v14 = 13;
  strcpy((char *)v13, "CoreML6_train");
  char v12 = 7;
  strcpy((char *)__p, "CoreML7");
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__str, "CoreML8");
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  if ((*(uint64_t (**)(uint64_t, void **))(*(void *)a2 + 200))(a2, v17))
  {
    p_str = (const std::string *)v17;
  }
  else if ((*(uint64_t (**)(uint64_t, void **))(*(void *)a2 + 200))(a2, v15))
  {
    p_str = (const std::string *)v15;
  }
  else if ((*(uint64_t (**)(uint64_t, void **))(*(void *)a2 + 200))(a2, v13))
  {
    p_str = (const std::string *)v13;
  }
  else if ((*(uint64_t (**)(uint64_t, void **))(*(void *)a2 + 200))(a2, __p))
  {
    p_str = (const std::string *)__p;
  }
  else
  {
    if (!(*(unsigned int (**)(uint64_t, std::string *))(*(void *)a2 + 200))(a2, &__str))
    {
      exception = (char *)__cxa_allocate_exception(0x30uLL);
      std::string::basic_string[abi:ne180100]<0>(v7, "ML Program default function is not written in an opset that is supported by CoreML compiler.");
      uint64_t v8 = 0x120000000CLL;
      std::operator+<char>();
      std::runtime_error::runtime_error((std::runtime_error *)exception, &v9);
      *(void *)exception = &unk_1EF0DB040;
      *((void *)exception + 2) = v8;
      std::string::size_type v6 = v9.__r_.__value_.__r.__words[2];
      *(_OWORD *)(exception + 24) = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
      *((void *)exception + 5) = v6;
      memset(&v9, 0, sizeof(v9));
    }
    p_str = &__str;
  }
  std::string::operator=(a1, p_str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
}

void sub_19E9A6D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v40 & 1) == 0)
    {
LABEL_8:
      if (a27 < 0) {
        operator delete(a22);
      }
      if (a33 < 0) {
        operator delete(a28);
      }
      if (a39 < 0) {
        operator delete(a34);
      }
      if (*(char *)(v41 - 57) < 0) {
        operator delete(*(void **)(v41 - 80));
      }
      if (*(char *)(v41 - 33) < 0) {
        operator delete(*(void **)(v41 - 56));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v39);
  goto LABEL_8;
}

void *anonymous namespace'::ParseClassifierInfo(void *a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v52 = 0;
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&unk_1EF0DD1D8;
  __p.__begin_ = (std::__split_buffer<std::string>::pointer)&v52;
  __p.__end_cap_.__value_ = (std::string *)&__p;
  MIL::Util::Walk();
  __n128 result = std::__function::__value_func<BOOL ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](&__p);
  if (v52)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "probabilities");
    MIL::IROperation::GetArgumentName();
    if (SHIBYTE(__p.__end_) < 0) {
      operator delete(__p.__first_);
    }
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 176))(v52);
    if (*(void *)(v3 + 8) != *(void *)v3)
    {
      MIL::IRNamedValueType::GetName(**(MIL::IRNamedValueType ***)v3);
      unsigned __int32 v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v52 + 176))(v52);
      if (v4[1] - *v4 < 0x11uLL)
      {
        memset(&v51, 0, sizeof(v51));
      }
      else
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 176))(v52);
        uint64_t Name = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)(*(void *)v5 + 16));
        if (*(char *)(Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)Name, *(void *)(Name + 8));
        }
        else
        {
          long long v7 = *(_OWORD *)Name;
          v51.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
          *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v7;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "classes");
      ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      if (SHIBYTE(__p.__end_) < 0) {
        operator delete(__p.__first_);
      }
      std::string v9 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(void *)ParameterValue + 32))(ParameterValue);
      uint64_t v10 = MIL::IRValueType::AsListType(v9);
      uint64_t v11 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 64))(v10);
      uint64_t v12 = MIL::IRValueType::AsTensorType(v11);
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12);
      if (v13 != 12)
      {
        if (v13 == 3)
        {
          memset(&v50, 0, sizeof(v50));
          char v14 = (MIL::IRListValue *)MIL::IRValue::AsList(ParameterValue);
          MIL::IRListValue::GetValues(v14);
          std::vector<std::string>::reserve(&v50, v15);
          char v16 = (MIL::IRListValue *)MIL::IRValue::AsList(ParameterValue);
          uint64_t Values = MIL::IRListValue::GetValues(v16);
          if (v18)
          {
            uint64_t v19 = Values;
            uint64_t v20 = 16 * v18;
            do
            {
              MIL::IRValue::GetScalar<std::string>();
              std::vector<std::string>::pointer end = v50.__end_;
              if (v50.__end_ >= v50.__end_cap_.__value_)
              {
                unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v50.__end_ - (char *)v50.__begin_) >> 3);
                unint64_t v23 = v22 + 1;
                if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * (((char *)v50.__end_cap_.__value_ - (char *)v50.__begin_) >> 3) > v23) {
                  unint64_t v23 = 0x5555555555555556 * (((char *)v50.__end_cap_.__value_ - (char *)v50.__begin_) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v50.__end_cap_.__value_ - (char *)v50.__begin_) >> 3) >= 0x555555555555555) {
                  unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v24 = v23;
                }
                __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v50.__end_cap_;
                if (v24) {
                  uint64_t v25 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v50.__end_cap_, v24);
                }
                else {
                  uint64_t v25 = 0;
                }
                int v26 = v25 + v22;
                __p.__first_ = v25;
                __p.__begin_ = v26;
                __p.__end_cap_.__value_ = &v25[v24];
                v26->__r_.__value_.__r.__words[2] = v49;
                *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)v48;
                std::string::size_type v49 = 0;
                *(_OWORD *)long long v48 = 0uLL;
                __p.__end_ = v26 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(&v50, &__p);
                char v27 = v50.__end_;
                std::__split_buffer<std::string>::~__split_buffer(&__p);
                v50.__end_ = v27;
              }
              else
              {
                v50.__end_->__r_.__value_.__r.__words[2] = v49;
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = *(_OWORD *)v48;
                v50.__end_ = end + 1;
              }
              v19 += 16;
              v20 -= 16;
            }
            while (v20);
          }
          std::make_unique[abi:ne180100]<CoreML::NNCompiler::MLClassifierInfo,std::string const&,std::string const&,std::string const&,std::vector<std::string>>();
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Unknown class type.");
        __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
      }
      memset(&__p, 0, 24);
      uint64_t v28 = (MIL::IRListValue *)MIL::IRValue::AsList(ParameterValue);
      MIL::IRListValue::GetValues(v28);
      std::vector<long long>::reserve((void **)&__p.__first_, v29);
      uint64_t v30 = (MIL::IRListValue *)MIL::IRValue::AsList(ParameterValue);
      uint64_t v31 = MIL::IRListValue::GetValues(v30);
      if (v32)
      {
        uint64_t v33 = v31;
        uint64_t v34 = v31 + 16 * v32;
        int v35 = __p.__end_;
        first = __p.__first_;
        do
        {
          int v37 = (char *)MIL::IRValue::GetScalar<long long>();
          uint64_t v38 = v37;
          std::__split_buffer<std::string>::pointer begin = __p.__begin_;
          if (__p.__begin_ >= v35)
          {
            uint64_t v41 = ((char *)__p.__begin_ - (char *)first) >> 3;
            unint64_t v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 61)
            {
              __p.__first_ = first;
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            if (((char *)v35 - (char *)first) >> 2 > v42) {
              unint64_t v42 = ((char *)v35 - (char *)first) >> 2;
            }
            if ((unint64_t)((char *)v35 - (char *)first) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v42;
            }
            if (v43) {
              unint64_t v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v43);
            }
            else {
              uint64_t v44 = 0;
            }
            unint64_t v45 = (char **)(v43 + 8 * v41);
            *unint64_t v45 = v38;
            int v40 = (std::string *)(v45 + 1);
            while (begin != first)
            {
              std::string::size_type v46 = (char *)begin[-1].__r_.__value_.__r.__words[2];
              std::__split_buffer<std::string>::pointer begin = (std::__split_buffer<std::string>::pointer)((char *)begin - 8);
              *--unint64_t v45 = v46;
            }
            int v35 = (std::string *)(v43 + 8 * v44);
            __p.__begin_ = v40;
            if (first) {
              operator delete(first);
            }
            first = (std::string *)v45;
          }
          else
          {
            __p.__begin_->__r_.__value_.__l.__data_ = v37;
            int v40 = (std::string *)&begin->__r_.__value_.__r.__words[1];
          }
          __p.__begin_ = v40;
          v33 += 16;
        }
        while (v33 != v34);
        __p.__end_ = v35;
        __p.__first_ = first;
      }
      std::make_unique[abi:ne180100]<CoreML::NNCompiler::MLClassifierInfo,std::string const&,std::string const&,std::string const&,std::vector<long long>>();
    }
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]();
  }
  *a1 = 0;
  return result;
}

void sub_19E9A73C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,std::__split_buffer<std::string> *a30)
{
  __cxa_free_exception(v30);
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL anonymous namespace'::ParseHasControlFlow(uint64_t a1)
{
  uint64_t v1 = (void ***)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v2 = **v1;
  uint64_t v3 = (*v1)[1];
  if (v2 != v3)
  {
    while (1)
    {
      uint64_t v4 = *v2;
      uint64_t v5 = (void **)(*(uint64_t (**)(void))(*(void *)*v2 + 208))(*v2);
      std::string::size_type v6 = (void *)**v5;
      long long v7 = (void *)(*v5)[1];
      while (v6 != v7)
      {
          return v2 != (*v1)[1];
        v6 += 2;
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
      int v9 = *(char *)(v8 + 23);
      if (v9 < 0)
      {
        if (*(void *)(v8 + 8) == 10)
        {
          uint64_t v8 = *(void *)v8;
LABEL_11:
          if (*(void *)v8 == 0x6F6C5F656C696877 && *(_WORD *)(v8 + 8) == 28783) {
            return v2 != (*v1)[1];
          }
        }
      }
      else if (v9 == 10)
      {
        goto LABEL_11;
      }
      v2 += 2;
      if (v2 == v3)
      {
        uint64_t v2 = v3;
        return v2 != (*v1)[1];
      }
    }
  }
  return v2 != (*v1)[1];
}

__n128 anonymous namespace'::GetEspressoConfigurationsFromInputShapeInfos(_OWORD *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  CoreML::MLNeuralNetworkUtilities::getEspressoConfigurationsFromShapeInfos((uint64_t)&v12, a2, a3, a4, 1, 0, a5);
  std::string::size_type v6 = operator new(0x30uLL);
  v6[1] = 0;
  v6[2] = 0;
  long long v7 = v13;
  v6[3] = v12;
  *std::string::size_type v6 = &unk_1EF0DDC00;
  v6[4] = v7;
  uint64_t v8 = v6 + 4;
  uint64_t v9 = v14;
  v6[5] = v14;
  if (v9)
  {
    v7[2] = v8;
    uint64_t v12 = &v13;
    int v13 = 0;
    uint64_t v14 = 0;
    long long v7 = 0;
  }
  else
  {
    v6[3] = v8;
  }
  *(void *)&long long v10 = v6 + 3;
  *((void *)&v10 + 1) = v6;
  *a1 = v10;
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(v7);
  return result;
}

void sub_19E9A76C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

CoreML::NNCompiler::MLClassifierInfo *std::unique_ptr<CoreML::NNCompiler::MLClassifierInfo>::reset[abi:ne180100](CoreML::NNCompiler::MLClassifierInfo **a1)
{
  __n128 result = *a1;
  *a1 = 0;
  if (result)
  {
    CoreML::NNCompiler::MLClassifierInfo::~MLClassifierInfo(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

uint64_t std::pair<std::string,CoreML::NNCompiler::MLFunctionInfo>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::default_delete<CoreML::NNCompiler::MLModelInfo>::operator()[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)(a1 + 136));

  std::__tree<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::NNCompiler::MLFunctionInfo>>>::destroy(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x19F3C1920](a1, 0x10F2C40548D0382);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA410];
  uint64_t v3 = *MEMORY[0x1E4FBA410];
  *(void *)a1 = *MEMORY[0x1E4FBA410];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x19F3C1850](a1 + 120);
  return a1;
}

uint64_t std::__shared_ptr_pointer<CoreML::NNCompiler::MLClassifierInfo  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN6CoreML10NNCompiler16MLClassifierInfoEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

CoreML::NNCompiler::MLClassifierInfo *std::__shared_ptr_pointer<CoreML::NNCompiler::MLClassifierInfo  *>::__on_zero_shared(uint64_t a1)
{
  __n128 result = *(CoreML::NNCompiler::MLClassifierInfo **)(a1 + 24);
  if (result)
  {
    CoreML::NNCompiler::MLClassifierInfo::~MLClassifierInfo(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void std::__shared_ptr_pointer<CoreML::NNCompiler::MLClassifierInfo  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<std::map<std::string,Espresso::net_configuration>>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<std::map<std::string,Espresso::net_configuration>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDC00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<std::map<std::string,Espresso::net_configuration>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDC00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__value_func<BOOL ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]()
{
}

void std::make_unique[abi:ne180100]<CoreML::NNCompiler::MLClassifierInfo,std::string const&,std::string const&,std::string const&,std::vector<std::string>>()
{
}

void sub_19E9A7C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  MEMORY[0x19F3C1920](v25, 0x1032C40416AD52CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<CoreML::NNCompiler::MLClassifierInfo,std::string const&,std::string const&,std::string const&,std::vector<long long>>()
{
}

void sub_19E9A7E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  MEMORY[0x19F3C1920](v25, 0x1032C40416AD52CLL);
  _Unwind_Resume(a1);
}

void *std::__function::__func<anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0,std::allocator<anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t std::__function::__func<anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0,std::allocator<anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN12_GLOBAL__N_119ParseClassifierInfoERKN3MIL7IRBlockEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0,std::allocator<anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, MIL::IRObject *a2)
{
  uint64_t v4 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 56))(a2);
  int v5 = *(char *)(v4 + 23);
  if (v5 < 0)
  {
    if (*(void *)(v4 + 8) != 8) {
      return 1;
    }
    uint64_t v4 = *(void *)v4;
  }
  else if (v5 != 8)
  {
    return 1;
  }
  if (*(void *)v4 == 0x7966697373616C63)
  {
    if (**(void **)(a1 + 8))
    {
      exception = __cxa_allocate_exception(0x48uLL);
      uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      uint64_t v14 = LocationPtr[1];
      uint64_t v16 = *LocationPtr;
      uint64_t v17 = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v15, "Op \"classify\" can only be defined once per ML program.");
      MIL::ValidationError::ValidationError();
      __cxa_throw(exception, MEMORY[0x1E4F733A0], (void (*)(void *))MIL::ValidationError::~ValidationError);
    }
    uint64_t v6 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 96))(a2);
    long long v7 = (const void *)(*(uint64_t (**)(void))(*(void *)(v6 + 64) + 72))();
    if (!v7 || !__dynamic_cast(v7, MEMORY[0x1E4F733B8], MEMORY[0x1E4F73388], 64))
    {
      uint64_t v9 = __cxa_allocate_exception(0x48uLL);
      long long v10 = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      uint64_t v11 = v10[1];
      uint64_t v16 = *v10;
      uint64_t v17 = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v15, "Op \"classify\" is only valid when defined inside a function level block.");
      MIL::ValidationError::ValidationError();
      __cxa_throw(v9, MEMORY[0x1E4F733A0], (void (*)(void *))MIL::ValidationError::~ValidationError);
    }
    **(void **)(a1 + _Block_object_dispose(&a9, 8) = a2;
  }
  return 1;
}

void sub_19E9A8118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v18) {
    __cxa_free_exception(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0,std::allocator<anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0DD1D8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0,std::allocator<anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF0DD1D8;
  result[1] = v3;
  return result;
}

void std::__function::__func<anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0,std::allocator<anonymous namespace'::ParseClassifierInfo(MIL::IRBlock const&)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func()
{
}

void BrickLayers::BatchedMatMulShapeComputation(char **a1, int a2, char **a3, int a4, void *a5)
{
  uint64_t v6 = *a1;
  int64_t v7 = a1[1] - *a1;
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Invalid shape of first argument.");
    goto LABEL_62;
  }
  uint64_t v9 = *a3;
  long long v10 = a3[1];
  if (v10 == *a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Invalid shape of second argument.");
    goto LABEL_62;
  }
  if (a5[1] - *a5 <= 0xFuLL)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Invalid rank of output.");
    goto LABEL_62;
  }
  if (v7 == 8)
  {
    uint64_t v50 = 1;
    std::vector<unsigned long>::insert((uint64_t)a1, v6, &v50);
    uint64_t v9 = *a3;
    long long v10 = a3[1];
  }
  unint64_t v14 = (v10 - v9) >> 3;
  if (v10 - v9 == 8)
  {
    unint64_t v15 = (unint64_t)a3[2];
    if ((unint64_t)v10 >= v15)
    {
      uint64_t v17 = v15 - (void)v9;
      uint64_t v18 = v17 >> 2;
      if (v17 >> 2 <= v14 + 1) {
        uint64_t v18 = v14 + 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v19);
      long long v21 = *a3;
      unint64_t v22 = a3[1];
      unint64_t v23 = &v20[8 * v14];
      uint64_t v25 = &v20[8 * v24];
      *(void *)unint64_t v23 = 1;
      uint64_t v16 = v23 + 8;
      while (v22 != v21)
      {
        uint64_t v26 = *((void *)v22 - 1);
        v22 -= 8;
        *((void *)v23 - 1) = v26;
        v23 -= 8;
      }
      *a3 = v23;
      a3[1] = v16;
      a3[2] = v25;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(void *)long long v10 = 1;
      uint64_t v16 = v10 + 8;
    }
    a3[1] = v16;
    uint64_t v9 = *a3;
    unint64_t v14 = (v16 - *a3) >> 3;
  }
  char v27 = *a1;
  uint64_t v28 = a1[1] - *a1;
  uint64_t v29 = a5[1] - *a5;
  unint64_t v30 = v29 >> 3;
  if (v29 >> 3 != v28 >> 3 && v30 != v14)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Invalid rank of output");
    goto LABEL_62;
  }
  unint64_t v32 = v28 >> 3;
  uint64_t v33 = -2;
  if (a2) {
    uint64_t v34 = -2;
  }
  else {
    uint64_t v34 = -1;
  }
  uint64_t v35 = *(void *)&v27[8 * v32 + 8 * v34];
  if (a4) {
    uint64_t v36 = -1;
  }
  else {
    uint64_t v36 = -2;
  }
  if (v35 != *(void *)&v9[8 * v14 + 8 * v36])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Incompatible shapes for matrix multiplication.");
LABEL_62:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a4) {
    uint64_t v37 = -2;
  }
  else {
    uint64_t v37 = -1;
  }
  unint64_t v38 = v14 + v37;
  if (a2) {
    uint64_t v33 = -1;
  }
  uint64_t v39 = *(void *)&v9[8 * v38];
  uint64_t v40 = *a5 + 8 * v30;
  *(void *)(v40 - 16) = *(void *)&v27[8 * v32 + 8 * v33];
  *(void *)(v40 - _Block_object_dispose(&a9, 8) = v39;
  if ((unint64_t)v29 >= 0x11)
  {
    if (v30 <= 3) {
      unint64_t v30 = 3;
    }
    uint64_t v41 = (unint64_t *)(v40 - 24);
    unint64_t v42 = &v9[8 * v14 - 24];
    unint64_t v43 = &v27[8 * v32 - 24];
    unint64_t v44 = 2;
    do
    {
      if (v32 > v44 && v14 > v44)
      {
        unint64_t v45 = *(void *)v43;
        unint64_t v46 = *(void *)v42;
        if (*(void *)v42 != 1 && v45 != 1 && v45 != v46)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x19F3C1380](exception, "Invalid shapes for broadcasting");
          goto LABEL_62;
        }
        if (v45 <= v46) {
          unint64_t v45 = *(void *)v42;
        }
        *uint64_t v41 = v45;
      }
      if (v32 > v44 && v14 <= v44) {
        *uint64_t v41 = *(void *)v43;
      }
      if (v32 <= v44 && v14 > v44) {
        *uint64_t v41 = *(void *)v42;
      }
      ++v44;
      --v41;
      v42 -= 8;
      v43 -= 8;
    }
    while (v30 != v44);
  }
}

void sub_19E9A8520(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::insert(uint64_t a1, char *__src, void *a3)
{
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    if (v18) {
      unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 16, v18);
    }
    else {
      unint64_t v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    long long v21 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == __src) {
          unint64_t v23 = 1;
        }
        else {
          unint64_t v23 = v15 >> 2;
        }
        uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v8, v23);
        uint64_t v20 = &v24[8 * (v23 >> 2)];
        long long v21 = &v24[8 * v25];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v22 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v22 = v16 + 1;
        }
        v20 -= 8 * (v22 >> 1);
      }
    }
    *(void *)uint64_t v20 = *a3;
    uint64_t v26 = v20 + 8;
    char v27 = *(char **)a1;
    if (*(char **)a1 != __src)
    {
      uint64_t v28 = __src;
      do
      {
        uint64_t v29 = *((void *)v28 - 1);
        v28 -= 8;
        *((void *)v20 - 1) = v29;
        v20 -= 8;
      }
      while (v28 != v27);
    }
    unint64_t v30 = *(unsigned char **)(a1 + 8);
    uint64_t v31 = v30 - __src;
    if (v30 != __src) {
      memmove(v26, __src, v30 - __src);
    }
    unint64_t v32 = *(char **)a1;
    *(void *)a1 = v20;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = &v26[v31];
    *(void *)(a1 + 16) = v21;
    if (v32)
    {
      operator delete(v32);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *a3;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    long long v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    *(void *)__src = *a3;
  }
}

void sub_19E9A874C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BrickLayers::ConcatNDShapeComputation(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a3 - (uint64_t)a2) >> 3);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = (v7 - *a2) >> 3;
  if (v5 >= 2)
  {
    uint64_t v9 = a2 + 4;
    unint64_t v10 = v5 - 1;
    while (v8 == (uint64_t)(*v9 - *(v9 - 1)) >> 3)
    {
      v9 += 3;
      if (!--v10) {
        goto LABEL_5;
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Invalid ranks of input tensors.");
LABEL_19:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_5:
  if (v8 != (a5 - a4) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Mismatch between ranks of input and output tensors.");
    goto LABEL_19;
  }
  uint64_t v11 = (v8 & (result >> 63)) + result;
  if (v11 < 0 || v11 >= v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Invalid value of the argument 'axis'.");
    goto LABEL_19;
  }
  if (v7 != v6)
  {
    uint64_t v12 = 0;
    if ((unint64_t)v8 <= 1) {
      uint64_t v8 = 1;
    }
    do
    {
      uint64_t v13 = *(void *)(v6 + 8 * v12);
      *(void *)(a4 + 8 * v12) = v13;
      unint64_t v14 = a2 + 3;
      unint64_t v15 = v5 - 1;
      if (v5 >= 2)
      {
        do
        {
          uint64_t v16 = *v14;
          if (v12 == v11)
          {
            __n128 result = *(void *)(v16 + 8 * v11);
            v13 += result;
            *(void *)(a4 + 8 * v12) = v13;
          }
          else
          {
            __n128 result = *(void *)(v16 + 8 * v12);
            if (v13 != result)
            {
              exception = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x19F3C1380](exception, "Invalid shape of input tensors.");
              goto LABEL_19;
            }
          }
          v14 += 3;
          --v15;
        }
        while (v15);
      }
      ++v12;
    }
    while (v12 != v8);
  }
  return result;
}

void sub_19E9A88EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BrickLayers::BroadcastTo(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a3;
  uint64_t v4 = (uint64_t *)a3[1];
  uint64_t v6 = (uint64_t)v4 - *a3;
  uint64_t v7 = (uint64_t *)*a1;
  unint64_t v8 = (a1[1] - *a1) >> 3;
  if (v8 < v6 >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "BroadcastTo layer: Invalid target shape.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v11 = v6 >> 3;
  if (v7 == &v7[v8 - (v6 >> 3)])
  {
    uint64_t v13 = 1;
  }
  else
  {
    uint64_t v12 = 8 * v8 - 8 * v11;
    uint64_t v13 = 1;
    do
    {
      uint64_t v14 = *v7++;
      v13 *= v14;
      v12 -= 8;
    }
    while (v12);
  }
  uint64_t v15 = 1;
  if ((uint64_t *)v5 != v4)
  {
    uint64_t v16 = (uint64_t *)*a3;
    do
    {
      uint64_t v17 = *v16++;
      v15 *= v17;
    }
    while (v16 != v4);
  }
  std::vector<unsigned long>::vector(&v55, v11);
  std::vector<unsigned long>::vector(&v53, v8);
  TensorAlgebraUtils::computeStrides(*a1, a1[1], (uint64_t)v53, (uint64_t)v54);
  TensorAlgebraUtils::computeStrides(*a3, a3[1], (uint64_t)v55, (uint64_t)v56);
  if ((uint64_t *)v5 != v4)
  {
    unint64_t v18 = v8 - 1;
    unint64_t v19 = (uint64_t *)(*a3 + 8 * v11 - 8);
    unint64_t v20 = 1;
    while (1)
    {
      uint64_t v22 = *v19--;
      uint64_t v21 = v22;
      unint64_t v23 = *(void *)(*a1 + 8 * v18);
      if (v22 != v23) {
        break;
      }
      ++v20;
      --v18;
      if (v20 > v11) {
        goto LABEL_21;
      }
    }
    if (v21 != 1 || v23 <= 1)
    {
      uint64_t v39 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](v39, "BroadcastTo layer: Invalid shapes for broadcasting.");
      __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v15 = *((void *)v53 + v18);
    uint64_t v13 = *(void *)(*a1 + 8 * v18);
  }
LABEL_21:
  uint64_t v52 = 0;
  std::vector<unsigned long>::vector(&v50, v8);
  std::vector<unsigned long>::vector(&__dst, v11);
  uint64_t v43 = v5;
  unint64_t v44 = v4;
  uint64_t v25 = (uint64_t *)*a1;
  uint64_t v26 = (uint64_t *)a1[1];
  unint64_t v27 = 1;
  if ((uint64_t *)*a1 == v26) {
    goto LABEL_24;
  }
  do
  {
    uint64_t v28 = *v25++;
    v27 *= v28;
  }
  while (v25 != v26);
  if (v27)
  {
LABEL_24:
    unint64_t v29 = 0;
    unint64_t v42 = v8 - v11;
    if (v11 <= 1) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = v11;
    }
    uint64_t v40 = v30;
    do
    {
      if (v13)
      {
        uint64_t v31 = a4 + 4 * v29;
        uint64_t v32 = v13;
        do
        {
          cblas_scopy_NEWLAPACK();
          v29 += v15;
          v31 += 4 * v15;
          --v32;
        }
        while (v32);
      }
      TensorAlgebraUtils::unravel_index(v29, *a1, a1[1], (unint64_t *)v50, (uint64_t)v51);
      uint64_t v33 = (char *)v50 + 8 * v42;
      if (v51 != v33) {
        memmove(__dst, v33, v51 - v33);
      }
      if ((uint64_t *)v43 != v44)
      {
        uint64_t v34 = (uint64_t *)*a3;
        uint64_t v35 = __dst;
        uint64_t v36 = v40;
        do
        {
          uint64_t v37 = *v34++;
          if (v37 == 1) {
            void *v35 = 0;
          }
          ++v35;
          --v36;
        }
        while (v36);
      }
      std::__split_buffer<std::string> __p = 0;
      unint64_t v46 = 0;
      uint64_t v47 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v55, (uint64_t)v56, (v56 - (unsigned char *)v55) >> 3);
      TensorAlgebraUtils::ravel_multi_index((uint64_t *)__dst, (uint64_t)v49, *a3, a3[1], (uint64_t *)__p, &v52);
      if (__p)
      {
        unint64_t v46 = __p;
        operator delete(__p);
      }
    }
    while (v29 < v27);
  }
  if (__dst)
  {
    std::string::size_type v49 = __dst;
    operator delete(__dst);
  }
  if (v50)
  {
    std::string v51 = v50;
    operator delete(v50);
  }
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
  if (v55)
  {
    unint64_t v56 = v55;
    operator delete(v55);
  }
}

void sub_19E9A8C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void *BrickLayers::GatherShapeComputation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(const void **)a2;
  uint64_t v7 = *(void *)(a2 + 8) - *(void *)a2;
  unint64_t v8 = *(unsigned char **)a3;
  uint64_t v9 = *(unsigned char **)(a3 + 8);
  __n128 result = *(void **)a4;
  if ((v7 >> 3) + ((uint64_t)&v9[-*(void *)a3] >> 3) - 1 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Gather layer: Invalid rank of Output.");
    goto LABEL_15;
  }
  uint64_t v11 = ((a1 >> 63) & (v7 >> 3)) + a1;
  if (v11 < 0 || v11 >= v7 >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Gather layer: Invalid value of the argument 'axis'.");
LABEL_15:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v11 << 32)
  {
    __n128 result = memmove(result, v6, 8 * (int)v11);
    unint64_t v8 = *(unsigned char **)a3;
    uint64_t v9 = *(unsigned char **)(a3 + 8);
  }
  if (v9 != v8) {
    __n128 result = memmove((void *)(*(void *)a4 + 8 * (int)v11), v8, v9 - v8);
  }
  uint64_t v14 = *(unsigned char **)(a2 + 8);
  uint64_t v15 = (unsigned char *)(*(void *)a2 + 8 * (int)v11 + 8);
  if (v14 != v15)
  {
    uint64_t v16 = (void *)(*(void *)a4 + 8 * (int)v11 + ((uint64_t)((*(void *)(a3 + 8) - *(void *)a3) << 29) >> 29));
    return memmove(v16, v15, v14 - v15);
  }
  return result;
}

void sub_19E9A8E4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *BrickLayers::StackNDShapeComputation(uint64_t a1, char ***a2, char **a3)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  uint64_t v7 = **a2;
  unint64_t v8 = (*a2)[1];
  uint64_t v9 = v8 - v7;
  if (v6 >= 2)
  {
    unint64_t v10 = *a2 + 4;
    unint64_t v11 = v6 - 1;
    while (1)
    {
      uint64_t v12 = (const void *)*(v10 - 1);
      if (v9 != *v10 - (void)v12 || memcmp(v7, v12, v8 - v7)) {
        break;
      }
      v10 += 3;
      if (!--v11) {
        goto LABEL_6;
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "StackND layer: Invalid shapes of input tensors.");
LABEL_17:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_6:
  uint64_t v13 = (v9 >> 3) + 1;
  __n128 result = *a3;
  if (v13 != (a3[1] - *a3) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "StackND layer: Invalid rank of output tensor.");
    goto LABEL_17;
  }
  uint64_t v15 = (v13 & (a1 >> 63)) + a1;
  if (v15 < 0 || v15 > v9 >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "StackND layer: Invalid value of the argument 'axis'.");
    goto LABEL_17;
  }
  uint64_t v16 = (int)v15;
  if (v15 << 32)
  {
    memmove(result, v7, 8 * (int)v15);
    __n128 result = *a3;
    uint64_t v7 = **a2;
    unint64_t v8 = (*a2)[1];
  }
  uint64_t v17 = (unint64_t *)&result[8 * v16];
  *uint64_t v17 = v6;
  unint64_t v18 = &v7[8 * v16];
  if (v8 != v18)
  {
    return (char *)memmove(v17 + 1, v18, v8 - v18);
  }
  return result;
}

void sub_19E9A900C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *BrickLayers::SplitNDShapeComputation(char *result, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a2;
  unint64_t v5 = (a2[1] - *a2) >> 3;
  uint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  if (v5 != 0xAAAAAAAAAAAAAAABLL * ((v7 - *a4) >> 3))
  {
LABEL_23:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Split layer: Invalid number or size of splits.");
    goto LABEL_22;
  }
  uint64_t v9 = *(char **)a3;
  uint64_t v10 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3;
  if (v7 == v6)
  {
    uint64_t v16 = (uint64_t)&result[v10 & ((uint64_t)result >> 63)];
    if (v16 >= 0 && v16 < v10)
    {
      uint64_t v19 = 0;
      goto LABEL_19;
    }
LABEL_24:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Invalid value of the argument 'axis'.");
LABEL_22:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v5 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = (a2[1] - *a2) >> 3;
  }
  uint64_t v14 = (void *)(v6 + 8);
  uint64_t v15 = v13;
  do
  {
    if (v10 != (uint64_t)(*v14 - *(v14 - 1)) >> 3)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](exception, "Mismatch between ranks of input and output tensors.");
      goto LABEL_22;
    }
    v14 += 3;
    --v15;
  }
  while (v15);
  uint64_t v16 = (uint64_t)&result[v10 & ((uint64_t)result >> 63)];
  if (v16 < 0 || v16 >= v10) {
    goto LABEL_24;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  do
  {
    __n128 result = (char *)(v6 + v17);
    if (v6 + v17 != a3)
    {
      __n128 result = std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(result, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
      uint64_t v4 = *a2;
      uint64_t v6 = *a4;
    }
    *(void *)(*(void *)(v6 + v17) + 8 * v16) = *(void *)(v4 + 8 * v18);
    v19 += *(void *)(v4 + 8 * v18++);
    v17 += 24;
  }
  while (v13 != v18);
  uint64_t v9 = *(char **)a3;
LABEL_19:
  if (v19 != *(void *)&v9[8 * v16]) {
    goto LABEL_23;
  }
  return result;
}

void sub_19E9A91F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BrickLayers::SliceNDShapeComputation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void **a7)
{
  uint64_t v15 = *a6;
  uint64_t v14 = a6[1];
  unint64_t v16 = (v14 - *a6) >> 3;
  std::vector<long long>::vector(__p, v16);
  uint64_t v17 = *(void **)a1;
  if (v16 != (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "SliceND layer: Mismatch between the input rank and the number of elements in begin_ids.");
    goto LABEL_52;
  }
  uint64_t v18 = *(void **)a2;
  if (v16 != (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "SliceND layer: Mismatch between the input rank and the number of elements in end_ids.");
    goto LABEL_52;
  }
  if (a4[1] != v16)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "SliceND layer: Mismatch between the input rank and the number of elements in begin_masks.");
    goto LABEL_52;
  }
  if (a5[1] != v16)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "SliceND layer: Mismatch between the input rank and the number of elements in end_masks.");
    goto LABEL_52;
  }
  uint64_t v19 = *(uint64_t **)a3;
  if (v16 != (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "SliceND layer: Mismatch between the input rank and the number of elements in strides.");
LABEL_52:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v14 == v15) {
    goto LABEL_39;
  }
  unint64_t v20 = 0;
  uint64_t v21 = *a4;
  uint64_t v22 = *a6;
  if (v16 <= 1) {
    uint64_t v23 = 1;
  }
  else {
    uint64_t v23 = v16;
  }
  do
  {
    if ((*(void *)(v21 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20))
    {
      if (v19[v20] <= 0) {
        uint64_t v24 = *(void *)(v22 + 8 * v20) - 1;
      }
      else {
        LODWORD(v24) = 0;
      }
      uint64_t v24 = (int)v24;
    }
    else
    {
      uint64_t v24 = v17[v20];
      if ((v24 & 0x8000000000000000) == 0) {
        goto LABEL_18;
      }
      v24 += *(int *)(v22 + 8 * v20);
    }
    v17[v20] = v24;
    if (v24 < 0) {
      goto LABEL_42;
    }
LABEL_18:
    if (v24 >= *(int *)(v22 + 8 * v20))
    {
LABEL_42:
      uint64_t v35 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](v35, "SliceND layer: Invalid values in begin_ids.");
      __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    ++v20;
  }
  while (v23 != v20);
  unint64_t v25 = 0;
  uint64_t v26 = *a5;
  uint64_t v27 = *a6;
  do
  {
    if ((*(void *)(v26 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v25))
    {
      if (v19[v25] < 1) {
        LODWORD(v2_Block_object_dispose(&a9, 8) = -1;
      }
      else {
        uint64_t v28 = *(void *)(v27 + 8 * v25);
      }
      uint64_t v28 = (int)v28;
      v18[v25] = (int)v28;
    }
    else
    {
      uint64_t v28 = v18[v25];
      if (v28 < 0)
      {
        v28 += *(int *)(v27 + 8 * v25);
        v18[v25] = v28;
        if (v28 < 0)
        {
LABEL_43:
          uint64_t v36 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x19F3C1380](v36, "SliceND layer: Invalid values in end_ids.");
          __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
    }
    if (v28 > *(int *)(v27 + 8 * v25)) {
      goto LABEL_43;
    }
    ++v25;
  }
  while (v23 != v25);
  unint64_t v29 = (uint64_t *)__p[0];
  uint64_t v30 = v23;
  do
  {
    if (!*v19)
    {
      uint64_t v37 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](v37, "SliceND layer: Invalid values in strides.");
      goto LABEL_46;
    }
    uint64_t v31 = (*v18 - *v17) / *v19;
    *unint64_t v29 = v31;
    if ((*v18 - *v17) % *v19) {
      *unint64_t v29 = ++v31;
    }
    if (v31 <= 0)
    {
      uint64_t v37 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](v37, "SliceND layer: Invalid values in arguments (begin_ids, end_ids, strides)");
LABEL_46:
      __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    ++v29;
    ++v17;
    ++v18;
    ++v19;
    --v30;
  }
  while (v30);
  uint64_t v32 = (uint64_t *)__p[0];
  uint64_t v33 = *a7;
  do
  {
    uint64_t v34 = *v32++;
    *v33++ = v34;
    --v23;
  }
  while (v23);
LABEL_39:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19E9A95FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  __cxa_free_exception(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::vector<long long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<_KDInterval>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_19E9A96B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *BrickLayers::TileShapeComputation(uint64_t *result, uint64_t a2, uint64_t *a3, void *a4, void *a5)
{
  unint64_t v5 = a4 - a3;
  if (v5 != (a2 - (uint64_t)result) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Tile layer: Mismatch between input rank and the number of elements in multiples.");
    goto LABEL_9;
  }
  if (a4 != a3)
  {
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    while (1)
    {
      uint64_t v7 = *result++;
      uint64_t v6 = v7;
      if (!v7) {
        break;
      }
      uint64_t v8 = *a3++;
      *a5++ = v8 * v6;
      if (!--v5) {
        return result;
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Tile layer: Invalid values in multiples.");
LABEL_9:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_19E9A9780(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void BrickLayers::Tile(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t *a5)
{
  BrickLayers::TileShapeComputation(*(uint64_t **)a1, *(void *)(a1 + 8), *a3, a3[1], (void *)*a5);
  uint64_t v39 = 0;
  uint64_t v28 = *a3;
  unint64_t v29 = a3[1];
  unint64_t v8 = v29 - *a3;
  std::vector<unsigned long>::vector(&v37, v8);
  std::vector<unsigned long>::vector(&v35, v8);
  std::vector<unsigned long>::vector(&v33, v8);
  uint64_t v9 = (uint64_t *)*a5;
  unint64_t v10 = 1;
  while (v9 != (uint64_t *)a5[1])
  {
    uint64_t v11 = *v9++;
    v10 *= v11;
  }
  TensorAlgebraUtils::computeStrides((uint64_t)*a3, (uint64_t)a3[1], (uint64_t)v37, (uint64_t)v38);
  if (v10)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 8 * v8 - 8;
    uint64_t v14 = *(uint64_t *)((char *)*a3 + v13);
    uint64_t v15 = *(void *)(*(void *)a1 + v13);
    if (v8 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v8;
    }
    uint64_t v26 = v16;
    do
    {
      TensorAlgebraUtils::unravel_index(v12, *a5, a5[1], (unint64_t *)v33, (uint64_t)v34);
      if (v29 != v28)
      {
        uint64_t v17 = (uint64_t *)v33;
        uint64_t v18 = *a3;
        uint64_t v19 = v26;
        unint64_t v20 = (unint64_t *)v35;
        do
        {
          unint64_t v22 = *v17++;
          unint64_t v21 = v22;
          unint64_t v23 = *v18++;
          *v20++ = v21 % v23;
          --v19;
        }
        while (v19);
      }
      std::__split_buffer<std::string> __p = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v37, (uint64_t)v38, (v38 - (unsigned char *)v37) >> 3);
      TensorAlgebraUtils::ravel_multi_index((uint64_t *)v35, (uint64_t)v36, (uint64_t)*a3, (uint64_t)a3[1], (uint64_t *)__p, &v39);
      if (__p)
      {
        uint64_t v31 = __p;
        operator delete(__p);
      }
      if (v15)
      {
        uint64_t v24 = a4 + 4 * v12;
        uint64_t v25 = v15;
        do
        {
          cblas_scopy_NEWLAPACK();
          v12 += v14;
          v24 += 4 * v14;
          --v25;
        }
        while (v25);
      }
    }
    while (v12 < v10);
  }
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  if (v35)
  {
    uint64_t v36 = v35;
    operator delete(v35);
  }
  if (v37)
  {
    unint64_t v38 = v37;
    operator delete(v37);
  }
}

void sub_19E9A9998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BrickLayers::SlidingWindowsShapeComputation(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = (a5 - a4) >> 3;
  unint64_t v8 = (a7 - a6) >> 3;
  if (v7 != v8 - 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Sliding Windows Layer: Mismatch between ranks of input and output tensors.");
    goto LABEL_23;
  }
  if (a2 <= 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Sliding Windows Layer: Window size can't be less than 1");
    goto LABEL_23;
  }
  if (a3 <= 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Sliding Windows Layer: Step can't be less than 1");
    goto LABEL_23;
  }
  uint64_t v9 = (v7 & (result >> 63)) + result;
  if (v9 < 0 || v9 >= v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Sliding Windows Layer: Invalid value of the argument 'axis'.");
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8 * v9);
  BOOL v11 = v10 < a2;
  uint64_t v12 = v10 - a2;
  if (v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Sliding Windows Layer: Window Size can't be larger than the dimension length.");
    goto LABEL_23;
  }
  uint64_t v13 = v12 / a3;
  if (v13 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Sliding Windows Layer: Invalid values in arguments (axis, window_size, step)");
LABEL_23:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)(a6 + 8 * v9) = v13 + 1;
  *(void *)(a6 + 8 * (v9 + 1)) = a2;
  if (a7 != a6)
  {
    unint64_t v14 = 0;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    while (1)
    {
      unint64_t v15 = v14;
      if (v14 < v9) {
        goto LABEL_14;
      }
      if (v14 > v9 + 1) {
        break;
      }
LABEL_15:
      if (v8 == ++v14) {
        return result;
      }
    }
    unint64_t v15 = v14 - 1;
LABEL_14:
    *(void *)(a6 + 8 * v14) = *(void *)(a4 + 8 * v15);
    goto LABEL_15;
  }
  return result;
}

void sub_19E9A9B88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E9A9EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  v12[2](v12);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19E9AA010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9AA4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  v14[2]();
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19E9AA980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CoreML::Specification::Model *std::allocate_shared[abi:ne180100]<CoreML::Specification::Model,std::allocator<CoreML::Specification::Model>,CoreML::Specification::Model&,void>(CoreML::Specification::Model **a1, const CoreML::Specification::Model *a2)
{
  uint64_t v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1EF0DD6C0;
  __n128 result = CoreML::Specification::Model::Model((CoreML::Specification::Model *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (CoreML::Specification::Model *)v4;
  return result;
}

void sub_19E9AAA50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<double>>::__construct_one_at_end[abi:ne180100]<std::vector<double> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  __n128 result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v3 + 3;
  return result;
}

void sub_19E9AAAB4(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&a9, 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  unint64_t v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = &v7[24 * v2];
  uint64_t v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  uint64_t v19 = &v7[24 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)unint64_t v8 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v8, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v9 = v18.i64[0];
  uint64_t v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  uint64_t v12 = (void *)*a1;
  BOOL v11 = (void *)a1[1];
  if (v11 == (void *)*a1)
  {
    int64x2_t v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      v9 -= 24;
      *(void *)(v9 + 16) = 0;
      long long v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)uint64_t v9 = v13;
      *(void *)(v9 + 16) = v11[2];
      *BOOL v11 = 0;
      v11[1] = 0;
      void v11[2] = 0;
    }
    while (v11 != v12);
    int64x2_t v14 = *(int64x2_t *)a1;
    uint64_t v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  int64x2_t v18 = v14;
  unint64_t v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  uint64_t v19 = v15;
  uint64_t v17 = (char *)v14.i64[0];
  std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)&v17);
  return v10;
}

void sub_19E9AAC20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = std::vector<_KDInterval>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E9AAC94(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<CoreML::Specification::Model>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<CoreML::Specification::Model>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD6C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<CoreML::Specification::Model>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DD6C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19E9AADBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9AAFF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9AB05C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType,unsigned long)::$_1,std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6CoreML16MultiArrayBufferC1ERKNSt3__16vectorImNS1_9allocatorImEEEES7_NS_10ScalarTypeEmE3$_1"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType,unsigned long)::$_1,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType,unsigned long)::$_0,std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6CoreML16MultiArrayBufferC1ERKNSt3__16vectorImNS1_9allocatorImEEEES7_NS_10ScalarTypeEmE3$_0"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType,unsigned long)::$_0,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType,unsigned long)::$_0,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(unsigned char *,std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType)::$_0,std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN6CoreML16MultiArrayBufferC1EPhRKNSt3__16vectorImNS2_9allocatorImEEEES8_NS_10ScalarTypeEE3$_0"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::MultiArrayBuffer(unsigned char *,std::vector<unsigned long> const&,std::vector<unsigned long> const&,CoreML::ScalarType)::$_0,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void CoreML::MultiArrayBuffer::MultiArrayBuffer(void *a1, uint64_t a2)
{
  *a1 = &unk_1EF0DAF70;
  a1[1] = a2;
  operator new();
}

void sub_19E9AB348(_Unwind_Exception *exception_object)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    v1[7] = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    v1[4] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v1[2];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::MultiArrayBuffer::MultiArrayBuffer(uint64_t a1, __CVBuffer *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1EF0DAF70;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + _Block_object_dispose(&a9, 8) = 0u;
  *(void *)(a1 + 40) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 48), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  *(_DWORD *)(a1 + 72) = 65552;
  size_t v8 = *(unint64_t **)(a1 + 24);
  unint64_t v9 = 1;
  while (v8 != *(unint64_t **)(a1 + 32))
  {
    unint64_t v10 = *v8++;
    unint64_t v11 = v9 * v10;
    if (is_mul_ok(v9, v10)) {
      unint64_t v9 = v11;
    }
    else {
      unint64_t v9 = -1;
    }
  }
  *(void *)(a1 + 80) = v9;
  *(_WORD *)(a1 + 8_Block_object_dispose(&a9, 8) = CoreML::MultiArrayBuffer::computeAttributes((uint64_t **)a3, *(uint64_t **)a4, *(void *)(a4 + 8), 1);
  *(void *)(a1 + 96) = CVPixelBufferRetain(a2);
  *(unsigned char *)(a1 + 104) = 0;
  return a1;
}

void sub_19E9AB4AC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::lockAndGetBaseAddressOfPixelBuffer(__CVBuffer *)::$_0,std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK6CoreML16MultiArrayBuffer34lockAndGetBaseAddressOfPixelBufferEP10__CVBufferE3$_0"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::lockAndGetBaseAddressOfPixelBuffer(__CVBuffer *)::$_0,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_pointer<unsigned char *,CoreML::MultiArrayBuffer::lockAndGetBaseAddressOfPixelBuffer(__CVBuffer *)::$_0,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void CoreML::MultiArrayBuffer::squeeze(CoreML::MultiArrayBuffer *this, uint64_t a2)
{
  __p[0] = 0;
  __p[1] = 0;
  v58[0] = 0;
  v55[0] = 0;
  v55[1] = 0;
  v56[0] = 0;
  std::vector<unsigned long>::reserve(__p, (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  std::vector<unsigned long>::reserve(v55, (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4 == v5)
  {
    uint64_t v5 = *(void *)(a2 + 32);
  }
  else
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7 != 1)
      {
        size_t v8 = (char *)__p[1];
        if (__p[1] >= (void *)v58[0])
        {
          unint64_t v10 = (char *)__p[0];
          int64_t v11 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            goto LABEL_85;
          }
          int64_t v13 = v58[0] - (unint64_t)__p[0];
          if ((uint64_t)(v58[0] - (unint64_t)__p[0]) >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v58, v14);
            unint64_t v10 = (char *)__p[0];
            size_t v8 = (char *)__p[1];
            uint64_t v7 = *(void *)(v5 + 8 * v6);
          }
          else
          {
            unint64_t v15 = 0;
          }
          uint64_t v16 = &v15[8 * v11];
          *(void *)uint64_t v16 = v7;
          unint64_t v9 = v16 + 8;
          while (v8 != v10)
          {
            uint64_t v17 = *((void *)v8 - 1);
            v8 -= 8;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
          }
          __p[0] = v16;
          __p[1] = v9;
          v58[0] = &v15[8 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)__p[1] = v7;
          unint64_t v9 = v8 + 8;
        }
        __p[1] = v9;
        uint64_t v18 = *(void *)(a2 + 48);
        uint64_t v19 = (char *)v55[1];
        if (v55[1] >= (void *)v56[0])
        {
          unint64_t v21 = (char *)v55[0];
          int64_t v22 = ((char *)v55[1] - (char *)v55[0]) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
LABEL_85:
          }
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          int64_t v24 = v56[0] - (unint64_t)v55[0];
          if ((uint64_t)(v56[0] - (unint64_t)v55[0]) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v56, v25);
            unint64_t v21 = (char *)v55[0];
            uint64_t v19 = (char *)v55[1];
          }
          else
          {
            uint64_t v26 = 0;
          }
          uint64_t v27 = &v26[8 * v22];
          *(void *)uint64_t v27 = *(void *)(v18 + 8 * v6);
          unint64_t v20 = v27 + 8;
          while (v19 != v21)
          {
            uint64_t v28 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v27 - 1) = v28;
            v27 -= 8;
          }
          v55[0] = v27;
          v55[1] = v20;
          v56[0] = &v26[8 * v25];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)v55[1] = *(void *)(v18 + 8 * v6);
          unint64_t v20 = v19 + 8;
        }
        v55[1] = v20;
        uint64_t v5 = *(void *)(a2 + 24);
        uint64_t v4 = *(void *)(a2 + 32);
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 3);
  }
  if (v4 != v5)
  {
    unint64_t v29 = (char *)__p[1];
    if (__p[1] == __p[0])
    {
      if (__p[1] >= (void *)v58[0])
      {
        int64_t v31 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        unint64_t v32 = (uint64_t)(v58[0] - (unint64_t)__p[0]) >> 2;
        if (v32 <= v31 + 1) {
          unint64_t v32 = v31 + 1;
        }
        if (v58[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v58, v33);
        uint64_t v35 = (char *)__p[0];
        uint64_t v36 = (char *)__p[1];
        uint64_t v37 = &v34[8 * v31];
        uint64_t v39 = &v34[8 * v38];
        *(void *)uint64_t v37 = 1;
        uint64_t v30 = v37 + 8;
        while (v36 != v35)
        {
          uint64_t v40 = *((void *)v36 - 1);
          v36 -= 8;
          *((void *)v37 - 1) = v40;
          v37 -= 8;
        }
        __p[0] = v37;
        __p[1] = v30;
        v58[0] = v39;
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *(void *)__p[1] = 1;
        uint64_t v30 = v29 + 8;
      }
      __p[1] = v30;
      uint64_t v41 = (char *)v55[1];
      if (v55[1] >= (void *)v56[0])
      {
        uint64_t v43 = (char *)v55[0];
        int64_t v44 = ((char *)v55[1] - (char *)v55[0]) >> 3;
        unint64_t v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        int64_t v46 = v56[0] - (unint64_t)v55[0];
        if ((uint64_t)(v56[0] - (unint64_t)v55[0]) >> 2 > v45) {
          unint64_t v45 = v46 >> 2;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v45;
        }
        if (v47)
        {
          long long v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v56, v47);
          uint64_t v43 = (char *)v55[0];
          uint64_t v41 = (char *)v55[1];
        }
        else
        {
          long long v48 = 0;
        }
        std::string::size_type v49 = &v48[8 * v44];
        uint64_t v50 = &v48[8 * v47];
        *(void *)std::string::size_type v49 = 1;
        unint64_t v42 = v49 + 8;
        while (v41 != v43)
        {
          uint64_t v51 = *((void *)v41 - 1);
          v41 -= 8;
          *((void *)v49 - 1) = v51;
          v49 -= 8;
        }
        v55[0] = v49;
        v55[1] = v42;
        v56[0] = v50;
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        *(void *)v55[1] = 1;
        unint64_t v42 = v41 + 8;
      }
      v55[1] = v42;
    }
  }
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EF0DAF70;
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)__p;
  *((void *)this + 5) = v58[0];
  __p[0] = 0;
  __p[1] = 0;
  v58[0] = 0;
  *((_OWORD *)this + 3) = *(_OWORD *)v55;
  *((void *)this + _Block_object_dispose(&a9, 8) = v56[0];
  v55[0] = 0;
  v55[1] = 0;
  v56[0] = 0;
  *((_DWORD *)this + 1_Block_object_dispose(&a9, 8) = *(_DWORD *)(a2 + 72);
  *((void *)this + 10) = *(void *)(a2 + 80);
  *((_WORD *)this + 44) = *(_WORD *)(a2 + 88);
  *((void *)this + 12) = CVPixelBufferRetain(*(CVPixelBufferRef *)(a2 + 96));
  *((unsigned char *)this + 104) = 0;
  std::atomic_load[abi:ne180100]<CoreML::MultiArrayBuffer>(&v59, (void *)(a2 + 8));
  uint64_t v52 = v59;
  if (v59 && *(void *)(a2 + 96)) {
    *((unsigned char *)this + 104) = 1;
  }
  unint64_t v53 = v60;
  if (v60) {
    atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v54 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v52;
  *((void *)this + 2) = v53;
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19E9ABA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::vectorizeMultiArray<double,double>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65600 && *(_DWORD *)(a3 + 72) == 65600;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  if (((unsigned __int16)v7 & *(_WORD *)(a1 + 88)) != 0)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v15, a3);
    size_t v8 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v15, a1);
    unint64_t v9 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    memcpy(v8, v9, 8 * *(void *)(a1 + 80));
  }
  else
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v15, a3);
    int64_t v11 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v15, a1, a2, 1);
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)v12, a1, 1, 0);
    while (v17 != (void *)v12[14])
    {
      *v11++ = *v17;
      CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v15);
    }
    if (__p)
    {
      unint64_t v14 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v12);
    if (v18)
    {
      uint64_t v19 = v18;
      operator delete(v18);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v15);
  }
  return 1;
}

void sub_19E9ABBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

__n128 __Block_byref_object_copy__12603(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t CoreML::initVIBuffer(CoreML *this, const CoreML::MultiArrayBuffer *a2, vImage_Buffer *a3)
{
  if (!*((void *)this + 10)) {
    return 0;
  }
  uint64_t v5 = (unint64_t *)*((void *)this + 3);
  uint64_t v4 = *((void *)this + 4);
  uint64_t v6 = v4 - (void)v5;
  if ((unint64_t)(v4 - (void)v5) < 0x10) {
    return 0;
  }
  size_t v8 = (unint64_t *)*((void *)this + 6);
  unint64_t v9 = (unint64_t *)*((void *)this + 7);
  if (v8 != v9)
  {
    for (uint64_t i = v8 + 1; i != v9; ++i)
    {
      unint64_t v12 = *(i - 1);
      unint64_t v11 = *i;
      if (v11 > v12) {
        return 0;
      }
    }
  }
  uint64_t v13 = v6 >> 3;
  uint64_t v14 = (v6 >> 3) - 1;
  if (v8[v14] != 1) {
    return 0;
  }
  unint64_t v15 = (unint64_t *)(v4 - 8);
  unint64_t v16 = 1;
  if (v5 != (unint64_t *)(v4 - 8))
  {
    do
    {
      unint64_t v17 = *v5++;
      unint64_t v16 = CoreML::SafeMultiplies<unsigned long>::operator()(v16, v17);
    }
    while (v5 != v15);
    size_t v8 = (unint64_t *)*((void *)this + 6);
    uint64_t v5 = (unint64_t *)*((void *)this + 3);
  }
  unint64_t v18 = v8[v13 - 2];
  if (v18 * v16 != *v5 * *v8) {
    return 0;
  }
  unint64_t v19 = v5[v14];
  uint64_t v20 = v18 * ((unsigned __int16)*((_DWORD *)this + 18) >> 3);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = v16;
  *((void *)a2 + 2) = v19;
  *((void *)a2 + 3) = v20;
  return 1;
}

void ___ZN6CoreMLL16copyMultiArrayVIIddEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL16copyMultiArrayVIIddEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E59A4260;
  uint64_t v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606;
  v6[3] = &unk_1E59A42B0;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

__n128 __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 40) = v2;
  long long v4 = *(_OWORD *)(a2 + 88);
  long long v5 = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = v4;
  __n128 result = *(__n128 *)(a2 + 152);
  long long v8 = *(_OWORD *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 16_Block_object_dispose(&a9, 8) = v8;
  *(__n128 *)(a1 + 152) = result;
  return result;
}

uint64_t CoreML::MultiArrayIterator<double>::MultiArrayIterator(uint64_t a1, uint64_t a2, int a3, char a4)
{
  CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)a1, a2);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v21, a1);
  uint64_t v7 = v21;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = v7;
  long long v8 = *(uint64_t **)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32) - (void)v8;
  unint64_t v11 = v10 >> 3;
  if (v10)
  {
    if (v11 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v10 >> 3;
    }
    uint64_t v13 = *(uint64_t **)(a1 + 48);
    do
    {
      uint64_t v14 = *v8++;
      uint64_t v15 = v14 - 1;
      uint64_t v16 = *v13++;
      v7 += 8 * v16 * v15;
      --v12;
    }
    while (v12);
    *(void *)(a1 + 120) = v7;
  }
  *(void *)(a1 + 120) = v7 + 8;
  unint64_t v17 = v11 - 1;
  if (a3) {
    int v18 = 1;
  }
  else {
    int v18 = -1;
  }
  if (a3) {
    unint64_t v19 = v11 - 1;
  }
  else {
    unint64_t v19 = 0;
  }
  if (a3) {
    unint64_t v17 = 0;
  }
  *(_DWORD *)(a1 + 176) = v18;
  *(void *)(a1 + 160) = v19;
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = v17;
  *(void *)(a1 + 152) = *(void *)(v9 + 8 * v17);
  uint64_t v21 = 0;
  std::vector<unsigned long>::resize((char **)(a1 + 128), v11, &v21);
  if ((a4 & 1) == 0)
  {
    *(void *)(*(void *)(a1 + 128) + 8 * *(void *)(a1 + 168)) = *(void *)(*(void *)(a1 + 24)
                                                                                 + 8 * *(void *)(a1 + 168));
    *(void *)(a1 + 112) = *(void *)(a1 + 120);
  }
  return a1;
}

void sub_19E9ABF3C(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *((void *)v1 + 17) = v4;
    operator delete(v4);
  }
  CoreML::MultiArrayBuffer::~MultiArrayBuffer(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::MultiArrayIterator<double>::operator++(uint64_t result)
{
  unint64_t v2 = *(void *)(result + 112);
  unint64_t v1 = *(void *)(result + 120);
  if (v2 < v1)
  {
    uint64_t v3 = *(void *)(result + 168);
    uint64_t v4 = *(void *)(result + 128);
    long long v5 = (unint64_t *)(v4 + 8 * v3);
    unint64_t v6 = *v5;
    unint64_t v7 = *v5 + 1;
    *long long v5 = v7;
    unint64_t v8 = v2 + 8 * *(void *)(result + 152);
    uint64_t v9 = *(void *)(result + 24);
    if (v7 >= *(void *)(v9 + 8 * v3))
    {
      while (v3 != *(void *)(result + 160))
      {
        uint64_t v10 = *(void *)(result + 48);
        unint64_t v11 = v8 + 8 * *(void *)(v10 + 8 * v3) * ~v6;
        *long long v5 = 0;
        v3 += *(int *)(result + 176);
        long long v5 = (unint64_t *)(v4 + 8 * v3);
        unint64_t v6 = *v5;
        unint64_t v12 = *v5 + 1;
        *long long v5 = v12;
        unint64_t v8 = v11 + 8 * *(void *)(v10 + 8 * v3);
        if (v12 < *(void *)(v9 + 8 * v3)) {
          goto LABEL_7;
        }
      }
      unint64_t v8 = v1;
    }
LABEL_7:
    *(void *)(result + 112) = v8;
  }
  return result;
}

uint64_t CoreML::vectorizeMultiArray<double,float>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65600 && *(_DWORD *)(a3 + 72) == 65568;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  int v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v18, a3);
  uint64_t v9 = v18;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v18, a1);
    uint64_t v10 = (const double *)v18;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    vDSP_Length v11 = *(void *)(a1 + 80);
    uint64_t v12 = 1;
    vDSP_vdpsp(v10, 1, v9, 1, v11);
  }
  else
  {
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v18, a1, a2, 1);
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)v15, a1, 1, 0);
    while (v20 != (double *)v15[14])
    {
      float v14 = *v20;
      *v9++ = v14;
      CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v18);
    }
    if (__p)
    {
      unint64_t v17 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v15);
    if (v21)
    {
      int64_t v22 = v21;
      operator delete(v21);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v18);
    return 1;
  }
  return v12;
}

void sub_19E9AC164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

BOOL CoreML::initBNNSDArrayDescriptor<float>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  int BNNSDataLayout = CoreML::getBNNSDataLayout(__src, a3, (char *)(a4 + 72));
  if (BNNSDataLayout != -1)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != *(void *)a1) {
      memmove((void *)(a4 + 8), *(const void **)a1, v7 - *(void *)a1);
    }
    *(_DWORD *)(a4 + 144) = 65568;
    *(_DWORD *)(a4 + 4) = BNNSDataLayout;
    *(void *)(a4 + 164) = 1065353216;
  }
  return BNNSDataLayout != -1;
}

uint64_t CoreML::MultiArrayIterator<float>::MultiArrayIterator(uint64_t a1, uint64_t a2, int a3, char a4)
{
  CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)a1, a2);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v21, a1);
  uint64_t v7 = v21;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = v7;
  int v8 = *(uint64_t **)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32) - (void)v8;
  unint64_t v11 = v10 >> 3;
  if (v10)
  {
    if (v11 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v10 >> 3;
    }
    uint64_t v13 = *(uint64_t **)(a1 + 48);
    do
    {
      uint64_t v14 = *v8++;
      uint64_t v15 = v14 - 1;
      uint64_t v16 = *v13++;
      v7 += 4 * v16 * v15;
      --v12;
    }
    while (v12);
    *(void *)(a1 + 120) = v7;
  }
  *(void *)(a1 + 120) = v7 + 4;
  unint64_t v17 = v11 - 1;
  if (a3) {
    int v18 = 1;
  }
  else {
    int v18 = -1;
  }
  if (a3) {
    unint64_t v19 = v11 - 1;
  }
  else {
    unint64_t v19 = 0;
  }
  if (a3) {
    unint64_t v17 = 0;
  }
  *(_DWORD *)(a1 + 176) = v18;
  *(void *)(a1 + 160) = v19;
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = v17;
  *(void *)(a1 + 152) = *(void *)(v9 + 8 * v17);
  uint64_t v21 = 0;
  std::vector<unsigned long>::resize((char **)(a1 + 128), v11, &v21);
  if ((a4 & 1) == 0)
  {
    *(void *)(*(void *)(a1 + 128) + 8 * *(void *)(a1 + 168)) = *(void *)(*(void *)(a1 + 24)
                                                                                 + 8 * *(void *)(a1 + 168));
    *(void *)(a1 + 112) = *(void *)(a1 + 120);
  }
  return a1;
}

void sub_19E9AC30C(_Unwind_Exception *a1)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    *((void *)v1 + 17) = v4;
    operator delete(v4);
  }
  CoreML::MultiArrayBuffer::~MultiArrayBuffer(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::MultiArrayIterator<float>::operator++(uint64_t result)
{
  unint64_t v2 = *(void *)(result + 112);
  unint64_t v1 = *(void *)(result + 120);
  if (v2 < v1)
  {
    uint64_t v3 = *(void *)(result + 168);
    uint64_t v4 = *(void *)(result + 128);
    long long v5 = (unint64_t *)(v4 + 8 * v3);
    unint64_t v6 = *v5;
    unint64_t v7 = *v5 + 1;
    *long long v5 = v7;
    unint64_t v8 = v2 + 4 * *(void *)(result + 152);
    uint64_t v9 = *(void *)(result + 24);
    if (v7 >= *(void *)(v9 + 8 * v3))
    {
      while (v3 != *(void *)(result + 160))
      {
        uint64_t v10 = *(void *)(result + 48);
        unint64_t v11 = v8 + 4 * *(void *)(v10 + 8 * v3) * ~v6;
        *long long v5 = 0;
        v3 += *(int *)(result + 176);
        long long v5 = (unint64_t *)(v4 + 8 * v3);
        unint64_t v6 = *v5;
        unint64_t v12 = *v5 + 1;
        *long long v5 = v12;
        unint64_t v8 = v11 + 4 * *(void *)(v10 + 8 * v3);
        if (v12 < *(void *)(v9 + 8 * v3)) {
          goto LABEL_7;
        }
      }
      unint64_t v8 = v1;
    }
LABEL_7:
    *(void *)(result + 112) = v8;
  }
  return result;
}

uint64_t CoreML::vectorizeMultiArray<double,int>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65600 && *(_DWORD *)(a3 + 72) == 131104;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  int v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v17, a3);
  uint64_t v9 = v17;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v17, a1);
    uint64_t v10 = (const double *)v17;
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    vDSP_Length v11 = *(void *)(a1 + 80);
    uint64_t v12 = 1;
    vDSP_vfix32D(v10, 1, v9, 1, v11);
  }
  else
  {
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v17, a1, a2, 1);
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)v14, a1, 1, 0);
    while (v19 != (double *)v14[14])
    {
      *v9++ = (int)*v19;
      CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v17);
    }
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v14);
    if (v20)
    {
      uint64_t v21 = v20;
      operator delete(v20);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v17);
    return 1;
  }
  return v12;
}

void sub_19E9AC538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

BOOL CoreML::initBNNSDArrayDescriptor<int>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  int BNNSDataLayout = CoreML::getBNNSDataLayout(__src, a3, (char *)(a4 + 72));
  if (BNNSDataLayout != -1)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != *(void *)a1) {
      memmove((void *)(a4 + 8), *(const void **)a1, v7 - *(void *)a1);
    }
    *(_DWORD *)(a4 + 144) = 131104;
    *(_DWORD *)(a4 + 4) = BNNSDataLayout;
    *(void *)(a4 + 164) = 1065353216;
  }
  return BNNSDataLayout != -1;
}

uint64_t CoreML::MultiArrayIterator<int>::MultiArrayIterator(uint64_t a1, uint64_t a2, int a3, char a4)
{
  CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)a1, a2);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v21, a1);
  uint64_t v7 = v21;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = v7;
  int v8 = *(uint64_t **)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32) - (void)v8;
  unint64_t v11 = v10 >> 3;
  if (v10)
  {
    if (v11 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v10 >> 3;
    }
    uint64_t v13 = *(uint64_t **)(a1 + 48);
    do
    {
      uint64_t v14 = *v8++;
      uint64_t v15 = v14 - 1;
      uint64_t v16 = *v13++;
      v7 += 4 * v16 * v15;
      --v12;
    }
    while (v12);
    *(void *)(a1 + 120) = v7;
  }
  *(void *)(a1 + 120) = v7 + 4;
  unint64_t v17 = v11 - 1;
  if (a3) {
    int v18 = 1;
  }
  else {
    int v18 = -1;
  }
  if (a3) {
    unint64_t v19 = v11 - 1;
  }
  else {
    unint64_t v19 = 0;
  }
  if (a3) {
    unint64_t v17 = 0;
  }
  *(_DWORD *)(a1 + 176) = v18;
  *(void *)(a1 + 160) = v19;
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = v17;
  *(void *)(a1 + 152) = *(void *)(v9 + 8 * v17);
  uint64_t v21 = 0;
  std::vector<unsigned long>::resize((char **)(a1 + 128), v11, &v21);
  if ((a4 & 1) == 0)
  {
    *(void *)(*(void *)(a1 + 128) + 8 * *(void *)(a1 + 168)) = *(void *)(*(void *)(a1 + 24)
                                                                                 + 8 * *(void *)(a1 + 168));
    *(void *)(a1 + 112) = *(void *)(a1 + 120);
  }
  return a1;
}

void sub_19E9AC6E0(_Unwind_Exception *a1)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    *((void *)v1 + 17) = v4;
    operator delete(v4);
  }
  CoreML::MultiArrayBuffer::~MultiArrayBuffer(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN6CoreMLL19vectorizeMultiArrayIdDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65600 && *(_DWORD *)(a3 + 72) == 65552;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  int v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v23, a3);
  uint64_t v9 = v23;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v23, a1);
    uint64_t v10 = (uint64_t *)v23;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    uint64_t v11 = *(void *)(a1 + 80);
    if (v11)
    {
      uint64_t v12 = 8 * v11;
      do
      {
        uint64_t v13 = *v10++;
        _D0 = v13;
        __asm { FCVT            H0, D0 }
        *v9++ = _D0;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)&v23, a1, a2, 1);
    CoreML::MultiArrayIterator<double>::MultiArrayIterator((uint64_t)v20, a1, 1, 0);
    while (v25 != (uint64_t *)v20[14])
    {
      _D0 = *v25;
      __asm { FCVT            H0, D0 }
      *v9++ = _D0;
      CoreML::MultiArrayIterator<double>::operator++((uint64_t)&v23);
    }
    if (__p)
    {
      int64_t v22 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v20);
    if (v26)
    {
      uint64_t v27 = v26;
      operator delete(v26);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v23);
  }
  return 1;
}

void sub_19E9AC86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

BOOL _ZN6CoreMLL24initBNNSDArrayDescriptorIDF16_EEbRKNSt3__16vectorImNS1_9allocatorImEEEES7_P21BNNSNDArrayDescriptor(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  int BNNSDataLayout = CoreML::getBNNSDataLayout(__src, a3, (char *)(a4 + 72));
  if (BNNSDataLayout != -1)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != *(void *)a1) {
      memmove((void *)(a4 + 8), *(const void **)a1, v7 - *(void *)a1);
    }
    *(_DWORD *)(a4 + 144) = 65552;
    *(_DWORD *)(a4 + 4) = BNNSDataLayout;
    *(void *)(a4 + 164) = 1065353216;
  }
  return BNNSDataLayout != -1;
}

uint64_t _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb(uint64_t a1, uint64_t a2, int a3, char a4)
{
  CoreML::MultiArrayBuffer::squeeze((CoreML::MultiArrayBuffer *)a1, a2);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v21, a1);
  uint64_t v7 = v21;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = v7;
  int v8 = *(uint64_t **)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32) - (void)v8;
  unint64_t v11 = v10 >> 3;
  if (v10)
  {
    if (v11 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v10 >> 3;
    }
    uint64_t v13 = *(uint64_t **)(a1 + 48);
    do
    {
      uint64_t v14 = *v8++;
      uint64_t v15 = v14 - 1;
      uint64_t v16 = *v13++;
      v7 += 2 * v16 * v15;
      --v12;
    }
    while (v12);
    *(void *)(a1 + 120) = v7;
  }
  *(void *)(a1 + 120) = v7 + 2;
  unint64_t v17 = v11 - 1;
  if (a3) {
    int v18 = 1;
  }
  else {
    int v18 = -1;
  }
  if (a3) {
    unint64_t v19 = v11 - 1;
  }
  else {
    unint64_t v19 = 0;
  }
  if (a3) {
    unint64_t v17 = 0;
  }
  *(_DWORD *)(a1 + 176) = v18;
  *(void *)(a1 + 160) = v19;
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = v17;
  *(void *)(a1 + 152) = *(void *)(v9 + 8 * v17);
  uint64_t v21 = 0;
  std::vector<unsigned long>::resize((char **)(a1 + 128), v11, &v21);
  if ((a4 & 1) == 0)
  {
    *(void *)(*(void *)(a1 + 128) + 8 * *(void *)(a1 + 168)) = *(void *)(*(void *)(a1 + 24)
                                                                                 + 8 * *(void *)(a1 + 168));
    *(void *)(a1 + 112) = *(void *)(a1 + 120);
  }
  return a1;
}

void sub_19E9ACA14(_Unwind_Exception *a1)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    *((void *)v1 + 17) = v4;
    operator delete(v4);
  }
  CoreML::MultiArrayBuffer::~MultiArrayBuffer(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN6CoreML18MultiArrayIteratorIDF16_EppEv(uint64_t result)
{
  unint64_t v2 = *(void *)(result + 112);
  unint64_t v1 = *(void *)(result + 120);
  if (v2 < v1)
  {
    uint64_t v3 = *(void *)(result + 168);
    uint64_t v4 = *(void *)(result + 128);
    long long v5 = (unint64_t *)(v4 + 8 * v3);
    unint64_t v6 = *v5;
    unint64_t v7 = *v5 + 1;
    *long long v5 = v7;
    unint64_t v8 = v2 + 2 * *(void *)(result + 152);
    uint64_t v9 = *(void *)(result + 24);
    if (v7 >= *(void *)(v9 + 8 * v3))
    {
      while (v3 != *(void *)(result + 160))
      {
        uint64_t v10 = *(void *)(result + 48);
        unint64_t v11 = v8 + 2 * *(void *)(v10 + 8 * v3) * ~v6;
        *long long v5 = 0;
        v3 += *(int *)(result + 176);
        long long v5 = (unint64_t *)(v4 + 8 * v3);
        unint64_t v6 = *v5;
        unint64_t v12 = *v5 + 1;
        *long long v5 = v12;
        unint64_t v8 = v11 + 2 * *(void *)(v10 + 8 * v3);
        if (v12 < *(void *)(v9 + 8 * v3)) {
          goto LABEL_7;
        }
      }
      unint64_t v8 = v1;
    }
LABEL_7:
    *(void *)(result + 112) = v8;
  }
  return result;
}

uint64_t CoreML::vectorizeMultiArray<float,double>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65568 && *(_DWORD *)(a3 + 72) == 65600;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  int v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v17, a3);
  uint64_t v9 = v17;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v17, a1);
    uint64_t v10 = (const float *)v17;
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    vDSP_Length v11 = *(void *)(a1 + 80);
    uint64_t v12 = 1;
    vDSP_vspdp(v10, 1, v9, 1, v11);
  }
  else
  {
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v17, a1, a2, 1);
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)v14, a1, 1, 0);
    while (v19 != (float *)v14[14])
    {
      *v9++ = *v19;
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v17);
    }
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v14);
    if (v20)
    {
      uint64_t v21 = v20;
      operator delete(v20);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v17);
    return 1;
  }
  return v12;
}

void sub_19E9ACC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void ___ZN6CoreMLL16copyMultiArrayVIIffEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL16copyMultiArrayVIIffEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E59A42D8;
  uint64_t v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606;
  v6[3] = &unk_1E59A42B0;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIffEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIffEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E59A4328;
  uint64_t v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606;
  v6[3] = &unk_1E59A42B0;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t CoreML::vectorizeMultiArray<float,int>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65568 && *(_DWORD *)(a3 + 72) == 131104;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  int v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v17, a3);
  uint64_t v9 = v17;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v17, a1);
    uint64_t v10 = (const float *)v17;
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    vDSP_Length v11 = *(void *)(a1 + 80);
    uint64_t v12 = 1;
    vDSP_vfix32(v10, 1, v9, 1, v11);
  }
  else
  {
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v17, a1, a2, 1);
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)v14, a1, 1, 0);
    while (v19 != (float *)v14[14])
    {
      *v9++ = (int)*v19;
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v17);
    }
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v14);
    if (v20)
    {
      uint64_t v21 = v20;
      operator delete(v20);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v17);
    return 1;
  }
  return v12;
}

void sub_19E9ACF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIfiEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIfiEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E59A4378;
  uint64_t v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606;
  v6[3] = &unk_1E59A42B0;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t _ZN6CoreMLL19vectorizeMultiArrayIfDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65568 && *(_DWORD *)(a3 + 72) == 65552;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  int v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v23, a3);
  uint64_t v9 = v23;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v23, a1);
    uint64_t v10 = (int *)v23;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    uint64_t v11 = *(void *)(a1 + 80);
    if (v11)
    {
      uint64_t v12 = 4 * v11;
      do
      {
        int v13 = *v10++;
        _S0 = v13;
        __asm { FCVT            H0, S0 }
        *v9++ = _S0;
        v12 -= 4;
      }
      while (v12);
    }
  }
  else
  {
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)&v23, a1, a2, 1);
    CoreML::MultiArrayIterator<float>::MultiArrayIterator((uint64_t)v20, a1, 1, 0);
    while (v25 != (int *)v20[14])
    {
      _S0 = *v25;
      __asm { FCVT            H0, S0 }
      *v9++ = _S0;
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v23);
    }
    if (__p)
    {
      int64_t v22 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v20);
    if (v26)
    {
      uint64_t v27 = v26;
      operator delete(v26);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v23);
  }
  return 1;
}

void sub_19E9AD160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void ___ZN6CoreMLL16copyMultiArrayVIIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL16copyMultiArrayVIIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E59A43C8;
  uint64_t v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606;
  v6[3] = &unk_1E59A42B0;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E59A4418;
  uint64_t v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606;
  v6[3] = &unk_1E59A42B0;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t CoreML::vectorizeMultiArray<int,double>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 131104 && *(_DWORD *)(a3 + 72) == 65600;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  int v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v17, a3);
  uint64_t v9 = v17;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v17, a1);
    uint64_t v10 = (const int *)v17;
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    vDSP_Length v11 = *(void *)(a1 + 80);
    uint64_t v12 = 1;
    vDSP_vflt32D(v10, 1, v9, 1, v11);
  }
  else
  {
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v17, a1, a2, 1);
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)v14, a1, 1, 0);
    while (v19 != (int *)v14[14])
    {
      *v9++ = (double)*v19;
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v17);
    }
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v14);
    if (v20)
    {
      uint64_t v21 = v20;
      operator delete(v20);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v17);
    return 1;
  }
  return v12;
}

void sub_19E9AD454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

uint64_t CoreML::vectorizeMultiArray<int,float>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 131104 && *(_DWORD *)(a3 + 72) == 65568;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  int v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v17, a3);
  uint64_t v9 = v17;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v17, a1);
    uint64_t v10 = (const int *)v17;
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    vDSP_Length v11 = *(void *)(a1 + 80);
    uint64_t v12 = 1;
    vDSP_vflt32(v10, 1, v9, 1, v11);
  }
  else
  {
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v17, a1, a2, 1);
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)v14, a1, 1, 0);
    while (v19 != (int *)v14[14])
    {
      *v9++ = (float)*v19;
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v17);
    }
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v14);
    if (v20)
    {
      uint64_t v21 = v20;
      operator delete(v20);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v17);
    return 1;
  }
  return v12;
}

void sub_19E9AD5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIifEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIifEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E59A4468;
  uint64_t v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606;
  v6[3] = &unk_1E59A42B0;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t CoreML::vectorizeMultiArray<int,int>(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 131104 && *(_DWORD *)(a3 + 72) == 131104;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  if (((unsigned __int16)v7 & *(_WORD *)(a1 + 88)) != 0)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v15, a3);
    int v8 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v15, a1);
    uint64_t v9 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    memcpy(v8, v9, 4 * *(void *)(a1 + 80));
  }
  else
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v15, a3);
    vDSP_Length v11 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v15, a1, a2, 1);
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)v12, a1, 1, 0);
    while (v17 != (_DWORD *)v12[14])
    {
      *v11++ = *v17;
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v15);
    }
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v12);
    if (v18)
    {
      unint64_t v19 = v18;
      operator delete(v18);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v15);
  }
  return 1;
}

void sub_19E9AD7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void ___ZN6CoreMLL16copyMultiArrayVIIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL16copyMultiArrayVIIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E59A44B8;
  uint64_t v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606;
  v6[3] = &unk_1E59A42B0;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E59A4508;
  uint64_t v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606;
  v6[3] = &unk_1E59A42B0;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t _ZN6CoreMLL19vectorizeMultiArrayIiDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 131104 && *(_DWORD *)(a3 + 72) == 65552;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  int v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v18, a3);
  uint64_t v9 = v18;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v18, a1);
    uint64_t v10 = (int *)v18;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    uint64_t v11 = *(void *)(a1 + 80);
    if (v11)
    {
      uint64_t v12 = 4 * v11;
      do
      {
        int v13 = *v10++;
        *v9++ = (short float)v13;
        v12 -= 4;
      }
      while (v12);
    }
  }
  else
  {
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)&v18, a1, a2, 1);
    CoreML::MultiArrayIterator<int>::MultiArrayIterator((uint64_t)v15, a1, 1, 0);
    while (v20 != (int *)v15[14])
    {
      *v9++ = (short float)*v20;
      CoreML::MultiArrayIterator<float>::operator++((uint64_t)&v18);
    }
    if (__p)
    {
      unint64_t v17 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v15);
    if (v21)
    {
      int64_t v22 = v21;
      operator delete(v21);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v18);
  }
  return 1;
}

void sub_19E9ADAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIiDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIiDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E59A4558;
  uint64_t v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606;
  v6[3] = &unk_1E59A42B0;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t _ZN6CoreMLL19vectorizeMultiArrayIDF16_dEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65552 && *(_DWORD *)(a3 + 72) == 65600;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  int v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v25, a3);
  uint64_t v9 = v25;
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v25, a1);
    uint64_t v10 = (__int16 *)v25;
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    uint64_t v11 = *(void *)(a1 + 80);
    if (v11)
    {
      uint64_t v12 = 2 * v11;
      do
      {
        __int16 v13 = *v10++;
        _H0 = v13;
        __asm { FCVT            D0, H0 }
        *v9++ = _D0;
        v12 -= 2;
      }
      while (v12);
    }
  }
  else
  {
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v25, a1, a2, 1);
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)v22, a1, 1, 0);
    while (v27 != (__int16 *)v22[14])
    {
      _H0 = *v27;
      __asm { FCVT            D0, H0 }
      *v9++ = _D0;
      _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v25);
    }
    if (__p)
    {
      int64_t v24 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v22);
    if (v28)
    {
      unint64_t v29 = v28;
      operator delete(v28);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v25);
  }
  return 1;
}

void sub_19E9ADD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

uint64_t _ZN6CoreMLL19vectorizeMultiArrayIDF16_fEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65552 && *(_DWORD *)(a3 + 72) == 65568;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  int v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v25, a3);
  uint64_t v9 = v25;
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v25, a1);
    uint64_t v10 = (__int16 *)v25;
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    uint64_t v11 = *(void *)(a1 + 80);
    if (v11)
    {
      uint64_t v12 = 2 * v11;
      do
      {
        __int16 v13 = *v10++;
        _H0 = v13;
        __asm { FCVT            S0, H0 }
        *v9++ = _S0;
        v12 -= 2;
      }
      while (v12);
    }
  }
  else
  {
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v25, a1, a2, 1);
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)v22, a1, 1, 0);
    while (v27 != (__int16 *)v22[14])
    {
      _H0 = *v27;
      __asm { FCVT            S0, H0 }
      *v9++ = _S0;
      _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v25);
    }
    if (__p)
    {
      int64_t v24 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v22);
    if (v28)
    {
      unint64_t v29 = v28;
      operator delete(v28);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v25);
  }
  return 1;
}

void sub_19E9ADE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void ___ZN6CoreMLL16copyMultiArrayVIIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL16copyMultiArrayVIIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E59A45A8;
  uint64_t v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606;
  v6[3] = &unk_1E59A42B0;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E59A45F8;
  uint64_t v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606;
  v6[3] = &unk_1E59A42B0;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t _ZN6CoreMLL19vectorizeMultiArrayIDF16_iEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65552 && *(_DWORD *)(a3 + 72) == 131104;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  int v8 = (unsigned __int16)(v7 & *(_WORD *)(a1 + 88));
  CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v18, a3);
  uint64_t v9 = v18;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v8)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v18, a1);
    uint64_t v10 = (short float *)v18;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    uint64_t v11 = *(void *)(a1 + 80);
    if (v11)
    {
      uint64_t v12 = 2 * v11;
      do
      {
        short float v13 = *v10++;
        *v9++ = (int)v13;
        v12 -= 2;
      }
      while (v12);
    }
  }
  else
  {
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v18, a1, a2, 1);
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)v15, a1, 1, 0);
    while (v20 != (short float *)v15[14])
    {
      *v9++ = (int)*v20;
      _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v18);
    }
    if (__p)
    {
      unint64_t v17 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v15);
    if (v21)
    {
      int64_t v22 = v21;
      operator delete(v21);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v18);
  }
  return 1;
}

void sub_19E9AE190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_iEEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_iEEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E59A4648;
  uint64_t v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606;
  v6[3] = &unk_1E59A42B0;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t _ZN6CoreMLL19vectorizeMultiArrayIDF16_DF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a1 + 80) == *(void *)(a3 + 80) && *(_DWORD *)(a1 + 72) == 65552 && *(_DWORD *)(a3 + 72) == 65552;
  if (!v4 || (*(_WORD *)(a3 + 88) & 3) == 0) {
    return 0;
  }
  if (a2) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = 1;
  }
  if (((unsigned __int16)v7 & *(_WORD *)(a1 + 88)) != 0)
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v15, a3);
    int v8 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v15, a1);
    uint64_t v9 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    memcpy(v8, v9, 2 * *(void *)(a1 + 80));
  }
  else
  {
    CoreML::MultiArrayBuffer::loadBuffer((CoreML::MultiArrayBuffer *)&v15, a3);
    uint64_t v11 = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)&v15, a1, a2, 1);
    _ZN6CoreML18MultiArrayIteratorIDF16_EC2ERKNS_16MultiArrayBufferENS_12StorageOrderEb((uint64_t)v12, a1, 1, 0);
    while (v17 != (_WORD *)v12[14])
    {
      *v11++ = *v17;
      _ZN6CoreML18MultiArrayIteratorIDF16_EppEv((uint64_t)&v15);
    }
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)v12);
    if (v18)
    {
      unint64_t v19 = v18;
      operator delete(v18);
    }
    CoreML::MultiArrayBuffer::~MultiArrayBuffer((CoreML::MultiArrayBuffer *)&v15);
  }
  return 1;
}

void sub_19E9AE3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void ___ZN6CoreMLL16copyMultiArrayVIIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL16copyMultiArrayVIIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E59A4698;
  uint64_t v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606;
  v6[3] = &unk_1E59A42B0;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

void ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2;
  v3[3] = &unk_1E59A46E8;
  uint64_t v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606;
  v6[3] = &unk_1E59A42B0;
  v6[4] = v3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v2, v6);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 176) = a1[6];
  *(void *)(*(void *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(void *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(void *)(a1[4] + 8) + 40), 0);
}

uint64_t ___ZN6CoreML16MultiArrayBuffer26getMutableBytesWithHandlerEU13block_pointerFvPvmE_block_invoke_12606(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

vImage_Error ___ZN6CoreMLL16copyMultiArrayVIIDF16_DF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 40) = a1[6];
  *(void *)(*(void *)(a1[5] + 8) + 40) = a2;
  return vImageCopyBuffer((const vImage_Buffer *)(*(void *)(a1[4] + 8) + 40), (const vImage_Buffer *)(*(void *)(a1[5] + 8) + 40), 2uLL, 0x10u);
}

void _ZN6CoreML18MultiArrayIteratorIDF16_ED1Ev(CoreML::MultiArrayBuffer *this)
{
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }

  CoreML::MultiArrayBuffer::~MultiArrayBuffer(this);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_iEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 176) = a1[6];
  *(void *)(*(void *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(void *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(void *)(a1[4] + 8) + 40), 0);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 176) = a1[6];
  *(void *)(*(void *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(void *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(void *)(a1[4] + 8) + 40), 0);
}

vImage_Error ___ZN6CoreMLL16copyMultiArrayVIIDF16_fEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 40) = a1[6];
  *(void *)(*(void *)(a1[5] + 8) + 40) = a2;
  return vImageConvert_Planar16FtoPlanarF((const vImage_Buffer *)(*(void *)(a1[4] + 8) + 40), (const vImage_Buffer *)(*(void *)(a1[5] + 8) + 40), 0x10u);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIiDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 176) = a1[6];
  *(void *)(*(void *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(void *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(void *)(a1[4] + 8) + 40), 0);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 176) = a1[6];
  *(void *)(*(void *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(void *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(void *)(a1[4] + 8) + 40), 0);
}

vImage_Error ___ZN6CoreMLL16copyMultiArrayVIIiiEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 40) = a1[6];
  *(void *)(*(void *)(a1[5] + 8) + 40) = a2;
  return vImageCopyBuffer((const vImage_Buffer *)(*(void *)(a1[4] + 8) + 40), (const vImage_Buffer *)(*(void *)(a1[5] + 8) + 40), 4uLL, 0x10u);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIifEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 176) = a1[6];
  *(void *)(*(void *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(void *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(void *)(a1[4] + 8) + 40), 0);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 176) = a1[6];
  *(void *)(*(void *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(void *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(void *)(a1[4] + 8) + 40), 0);
}

vImage_Error ___ZN6CoreMLL16copyMultiArrayVIIfDF16_EEbRKNS_16MultiArrayBufferERS1__block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 40) = a1[6];
  *(void *)(*(void *)(a1[5] + 8) + 40) = a2;
  return vImageConvert_PlanarFtoPlanar16F((const vImage_Buffer *)(*(void *)(a1[4] + 8) + 40), (const vImage_Buffer *)(*(void *)(a1[5] + 8) + 40), 0x10u);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIfiEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 176) = a1[6];
  *(void *)(*(void *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(void *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(void *)(a1[4] + 8) + 40), 0);
}

uint64_t ___ZN6CoreMLL18copyMultiArrayBNNSIffEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 176) = a1[6];
  *(void *)(*(void *)(a1[5] + 8) + 176) = a2;
  return BNNSCopy((BNNSNDArrayDescriptor *)(*(void *)(a1[5] + 8) + 40), (const BNNSNDArrayDescriptor *)(*(void *)(a1[4] + 8) + 40), 0);
}

vImage_Error ___ZN6CoreMLL16copyMultiArrayVIIffEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 40) = a1[6];
  *(void *)(*(void *)(a1[5] + 8) + 40) = a2;
  return vImageCopyBuffer((const vImage_Buffer *)(*(void *)(a1[4] + 8) + 40), (const vImage_Buffer *)(*(void *)(a1[5] + 8) + 40), 4uLL, 0x10u);
}

void std::vector<unsigned long>::resize(char **a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (v5 - *a1) >> 3;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[8 * a2];
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = a1[2];
    if (a2 - v7 <= (v10 - v5) >> 3)
    {
      int64_t v24 = &v5[8 * (a2 - v7)];
      uint64_t v25 = 8 * a2 - 8 * v7;
      do
      {
        *(void *)uint64_t v5 = *a3;
        v5 += 8;
        v25 -= 8;
      }
      while (v25);
      a1[1] = v24;
    }
    else
    {
      if (a2 >> 61) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v10 - v6;
      unint64_t v12 = (v10 - v6) >> 2;
      if (v12 <= a2) {
        unint64_t v12 = a2;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9, v13);
      uint64_t v16 = &v14[8 * v7];
      unint64_t v17 = &v14[8 * a2];
      uint64_t v18 = 8 * a2 - 8 * v7;
      unint64_t v19 = v16;
      do
      {
        *(void *)unint64_t v19 = *a3;
        v19 += 8;
        v18 -= 8;
      }
      while (v18);
      uint64_t v20 = &v14[8 * v15];
      uint64_t v21 = *a1;
      for (uint64_t i = a1[1]; i != v21; i -= 8)
      {
        uint64_t v23 = *((void *)i - 1);
        *((void *)v16 - 1) = v23;
        v16 -= 8;
      }
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v20;
      if (v21)
      {
        operator delete(v21);
      }
    }
  }
}

uint64_t CoreML::getBNNSDataLayout(char *__src, char *a2, char *__dst)
{
  unint64_t v3 = (unint64_t)(a2 - __src) >> 3;
  if (v3 > 8) {
    return 0xFFFFFFFFLL;
  }
  if (__src == a2)
  {
LABEL_14:
    int v12 = 0;
  }
  else
  {
    uint64_t v5 = __src + 8;
    do
    {
      if (v5 == a2)
      {
        memmove(__dst, __src, a2 - __src);
        goto LABEL_14;
      }
      unint64_t v7 = *((void *)v5 - 1);
      unint64_t v6 = *(void *)v5;
      v5 += 8;
    }
    while (v6 >= v7);
    for (uint64_t i = __src + 8; i != a2; i += 8)
    {
      unint64_t v10 = *((void *)i - 1);
      unint64_t v9 = *(void *)i;
      if (v9 > v10) {
        return 0xFFFFFFFFLL;
      }
    }
    do
    {
      uint64_t v11 = *((void *)a2 - 1);
      a2 -= 8;
      *(void *)__n128 __dst = v11;
      __dst += 8;
    }
    while (a2 != __src);
    int v12 = 1;
  }
  return v12 | (v3 << 16) | 0x8000u;
}

vImage_Error ___ZN6CoreMLL16copyMultiArrayVIIddEEbRKNS_16MultiArrayBufferERS1__block_invoke_2(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 40) = a1[6];
  *(void *)(*(void *)(a1[5] + 8) + 40) = a2;
  return vImageCopyBuffer((const vImage_Buffer *)(*(void *)(a1[4] + 8) + 40), (const vImage_Buffer *)(*(void *)(a1[5] + 8) + 40), 8uLL, 0x10u);
}

uint64_t CoreML::MultiArrayBuffer::vectorizeInto(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 72);
  if (v3 > 65599)
  {
    if (v3 == 131104)
    {
      int v8 = *(_DWORD *)(a2 + 72);
      if (v8 > 65599)
      {
        if (v8 != 131104)
        {
          if (v8 == 65600) {
            return CoreML::vectorizeMultiArray<int,double>(a1, a3, a2);
          }
          return 0;
        }
        return CoreML::vectorizeMultiArray<int,int>(a1, a3, a2);
      }
      else
      {
        if (v8 != 65552)
        {
          if (v8 == 65568) {
            return CoreML::vectorizeMultiArray<int,float>(a1, a3, a2);
          }
          return 0;
        }
        return _ZN6CoreMLL19vectorizeMultiArrayIiDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(a1, a3, a2);
      }
    }
    if (v3 == 65600)
    {
      int v6 = *(_DWORD *)(a2 + 72);
      if (v6 > 65599)
      {
        if (v6 != 131104)
        {
          if (v6 == 65600) {
            return CoreML::vectorizeMultiArray<double,double>(a1, a3, a2);
          }
          return 0;
        }
        return CoreML::vectorizeMultiArray<double,int>(a1, a3, a2);
      }
      else
      {
        if (v6 != 65552)
        {
          if (v6 == 65568) {
            return CoreML::vectorizeMultiArray<double,float>(a1, a3, a2);
          }
          return 0;
        }
        return _ZN6CoreMLL19vectorizeMultiArrayIdDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(a1, a3, a2);
      }
    }
    return 0;
  }
  if (v3 == 65552)
  {
    int v7 = *(_DWORD *)(a2 + 72);
    if (v7 > 65599)
    {
      if (v7 != 131104)
      {
        if (v7 == 65600) {
          return _ZN6CoreMLL19vectorizeMultiArrayIDF16_dEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(a1, a3, a2);
        }
        return 0;
      }
      return _ZN6CoreMLL19vectorizeMultiArrayIDF16_iEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(a1, a3, a2);
    }
    else
    {
      if (v7 != 65552)
      {
        if (v7 == 65568) {
          return _ZN6CoreMLL19vectorizeMultiArrayIDF16_fEEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(a1, a3, a2);
        }
        return 0;
      }
      return _ZN6CoreMLL19vectorizeMultiArrayIDF16_DF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(a1, a3, a2);
    }
  }
  if (v3 != 65568) {
    return 0;
  }
  int v4 = *(_DWORD *)(a2 + 72);
  if (v4 > 65599)
  {
    if (v4 != 131104)
    {
      if (v4 == 65600) {
        return CoreML::vectorizeMultiArray<float,double>(a1, a3, a2);
      }
      return 0;
    }
    return CoreML::vectorizeMultiArray<float,int>(a1, a3, a2);
  }
  else
  {
    if (v4 != 65552)
    {
      if (v4 == 65568) {
        return CoreML::vectorizeMultiArray<float,float>(a1, a3, a2);
      }
      return 0;
    }
    return _ZN6CoreMLL19vectorizeMultiArrayIfDF16_EEbRKNS_16MultiArrayBufferENS_12StorageOrderERS1_(a1, a3, a2);
  }
}

void ___ZN6CoreMLL14equalalityTestIdEEbRKNS_16MultiArrayBufferES3__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZN6CoreMLL14equalalityTestIdEEbRKNS_16MultiArrayBufferES3__block_invoke_2;
  v4[3] = &unk_1E59A4738;
  uint64_t v3 = *(void *)(a1 + 40);
  v4[4] = *(void *)(a1 + 32);
  v4[5] = a2;
  v4[6] = a3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v3, v4);
}

void ___ZN6CoreMLL14equalalityTestIfEEbRKNS_16MultiArrayBufferES3__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZN6CoreMLL14equalalityTestIfEEbRKNS_16MultiArrayBufferES3__block_invoke_2;
  v4[3] = &unk_1E59A4788;
  uint64_t v3 = *(void *)(a1 + 40);
  v4[4] = *(void *)(a1 + 32);
  v4[5] = a2;
  v4[6] = a3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v3, v4);
}

void ___ZN6CoreMLL14equalalityTestIiEEbRKNS_16MultiArrayBufferES3__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZN6CoreMLL14equalalityTestIiEEbRKNS_16MultiArrayBufferES3__block_invoke_2;
  v4[3] = &unk_1E59A47D8;
  uint64_t v3 = *(void *)(a1 + 40);
  v4[4] = *(void *)(a1 + 32);
  v4[5] = a2;
  v4[6] = a3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v3, v4);
}

void ___ZN6CoreMLL14equalalityTestIDF16_EEbRKNS_16MultiArrayBufferES3__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZN6CoreMLL14equalalityTestIDF16_EEbRKNS_16MultiArrayBufferES3__block_invoke_2;
  v4[3] = &unk_1E59A4828;
  uint64_t v3 = *(void *)(a1 + 40);
  v4[4] = *(void *)(a1 + 32);
  v4[5] = a2;
  v4[6] = a3;
  CoreML::MultiArrayBuffer::getBytesWithHandler(v3, v4);
}

uint64_t ___ZN6CoreMLL14equalalityTestIDF16_EEbRKNS_16MultiArrayBufferES3__block_invoke_2(uint64_t a1, const void *a2)
{
  uint64_t result = memcmp(*(const void **)(a1 + 40), a2, *(void *)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result == 0;
  return result;
}

uint64_t ___ZN6CoreMLL14equalalityTestIiEEbRKNS_16MultiArrayBufferES3__block_invoke_2(uint64_t a1, const void *a2)
{
  uint64_t result = memcmp(*(const void **)(a1 + 40), a2, *(void *)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result == 0;
  return result;
}

uint64_t ___ZN6CoreMLL14equalalityTestIfEEbRKNS_16MultiArrayBufferES3__block_invoke_2(uint64_t a1, const void *a2)
{
  uint64_t result = memcmp(*(const void **)(a1 + 40), a2, *(void *)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result == 0;
  return result;
}

uint64_t ___ZN6CoreMLL14equalalityTestIdEEbRKNS_16MultiArrayBufferES3__block_invoke_2(uint64_t a1, const void *a2)
{
  uint64_t result = memcmp(*(const void **)(a1 + 40), a2, *(void *)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result == 0;
  return result;
}

void sub_19E9AF618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,__CVBuffer *a27)
{
  std::unique_ptr<__CVBuffer,MLE5ObjectDeleter<__CVBuffer>>::reset[abi:ne180100](&a27);
  std::unique_ptr<__IOSurface,MLE5ObjectDeleter<__IOSurface>>::reset[abi:ne180100](&a13);

  _Unwind_Resume(a1);
}

void std::unique_ptr<__CVBuffer,MLE5ObjectDeleter<__CVBuffer>>::reset[abi:ne180100](__CVBuffer **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    CVPixelBufferRelease(v2);
  }
}

void std::unique_ptr<__IOSurface,MLE5ObjectDeleter<__IOSurface>>::reset[abi:ne180100](const void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void CoreML::NNCompiler::Backend::MIL::Ios16::Ios16LayerTranslator::~Ios16LayerTranslator(void **this)
{
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(this);

  JUMPOUT(0x19F3C1920);
}

uint64_t MLE5FindDirectInputModeFunction(unsigned int a1, unsigned int a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  {
    directInputModeFunctionTable(void)::table = 0u;
    *(_OWORD *)&qword_1EB4DCCF0 = 0u;
    dword_1EB4DCD00 = 1065353216;
  }
  if (directInputModeFunctionTable(void)::onceToken != -1) {
    dispatch_once(&directInputModeFunctionTable(void)::onceToken, &__block_literal_global_12714);
  }
  uint64_t v6 = a2;
  if (*((void *)&directInputModeFunctionTable(void)::table + 1))
  {
    unint64_t v7 = ((unint64_t)a1 << 24) | ((unint64_t)a2 << 16);
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&directInputModeFunctionTable(void)::table + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = ((unint64_t)a1 << 24) | ((unint64_t)a2 << 16);
      if (v7 >= *((void *)&directInputModeFunctionTable(void)::table + 1)) {
        unint64_t v9 = v7 % *((void *)&directInputModeFunctionTable(void)::table + 1);
      }
    }
    else
    {
      unint64_t v9 = v7 & (*((void *)&directInputModeFunctionTable(void)::table + 1) - 1);
    }
    unint64_t v10 = *(uint64_t ***)(directInputModeFunctionTable(void)::table + 8 * v9);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v7 == v12)
        {
          if (*((unsigned __int8 *)i + 16) == a1 && *((unsigned __int8 *)i + 17) == a2 && !*((unsigned char *)i + 18) && !i[3]) {
            return i[4];
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v12 >= *((void *)&directInputModeFunctionTable(void)::table + 1)) {
              v12 %= *((void *)&directInputModeFunctionTable(void)::table + 1);
            }
          }
          else
          {
            v12 &= *((void *)&directInputModeFunctionTable(void)::table + 1) - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  unint64_t v13 = +[MLLogging coreChannel];
  uint64_t v14 = a1;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = off_1E59A4930[a1];
    int64_t v22 = off_1E59A4948[v6];
    *(_DWORD *)buf = 138412546;
    uint64_t v27 = v21;
    __int16 v28 = 2112;
    unint64_t v29 = v22;
    _os_log_error_impl(&dword_19E58B000, v13, OS_LOG_TYPE_ERROR, "The input feature is invalid or unsupported. (port trait %@, feature trait %@.)", buf, 0x16u);
  }
  if (a3)
  {
    uint64_t v15 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v24 = *MEMORY[0x1E4F28568];
    uint64_t v16 = NSString;
    unint64_t v17 = off_1E59A4930[v14];
    uint64_t v18 = off_1E59A4948[v6];
    unint64_t v19 = [v16 stringWithFormat:@"The input feature is invalid or unsupported. (port trait %@, feature trait %@.)", v17, v18, v24];
    uint64_t v25 = v19;
    uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v25 forKeys:&v24 count:1];
    *a3 = [v15 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v20];
  }
  return 0;
}

void sub_19E9AFDA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *___ZL28directInputModeFunctionTablev_block_invoke()
{
  LOWORD(v1) = 513;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5DirectModeFromMultiArrayMemoryToTensor;
  LOWORD(v1) = 257;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5DirectModeFromMultiArraySurfaceToTensor;
  LOWORD(v1) = 769;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5DirectModeFromPixelBufferSurfaceToTensor;
  LOWORD(v1) = 1025;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5NoDirectBinding;
  LOWORD(v1) = 1026;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5NoDirectBinding;
  LOWORD(v1) = 770;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  uint64_t result = std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1);
  result[4] = MLE5DirectModeFromPixelBufferSurfaceToSurface;
  return result;
}

void *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(MLFeatureValue *,e5rt_io_port *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *((void *)a1 + 1);
  unint64_t v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  unint64_t v8 = *((void *)&directInputModeFunctionTable(void)::table + 1);
  if (*((void *)&directInputModeFunctionTable(void)::table + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&directInputModeFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((void *)&directInputModeFunctionTable(void)::table + 1)) {
        unint64_t v2 = v7 % *((void *)&directInputModeFunctionTable(void)::table + 1);
      }
    }
    else
    {
      unint64_t v2 = v7 & (*((void *)&directInputModeFunctionTable(void)::table + 1) - 1);
    }
    unint64_t v10 = *(void ***)(directInputModeFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((void *)&directInputModeFunctionTable(void)::table + 1)) {
                v12 %= *((void *)&directInputModeFunctionTable(void)::table + 1);
              }
            }
            else
            {
              v12 &= *((void *)&directInputModeFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  float v13 = (float)(unint64_t)(qword_1EB4DCCF8 + 1);
  if (!v8 || (float)(*(float *)&dword_1EB4DCD00 * (float)v8) < v13)
  {
    BOOL v14 = 1;
    if (v8 >= 3) {
      BOOL v14 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v8);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1EB4DCD00);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)&directInputModeFunctionTable(void)::table + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)(unint64_t)qword_1EB4DCCF8 / *(float *)&dword_1EB4DCD00);
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)&directInputModeFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v18 = operator new(8 * *(void *)&prime);
          unint64_t v19 = (void *)directInputModeFunctionTable(void)::table;
          *(void *)&directInputModeFunctionTable(void)::table = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)&directInputModeFunctionTable(void)::table + 1) = prime;
          do
            *(void *)(directInputModeFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void **)qword_1EB4DCCF0;
          if (qword_1EB4DCCF0)
          {
            unint64_t v22 = *(void *)(qword_1EB4DCCF0 + 8);
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(directInputModeFunctionTable(void)::table + 8 * v22) = &qword_1EB4DCCF0;
            for (uint64_t i = *v21; i; v22 = v28)
            {
              unint64_t v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(void *)(directInputModeFunctionTable(void)::table + 8 * v28))
                {
                  *(void *)(directInputModeFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = v21;
                  goto LABEL_57;
                }
                *uint64_t v21 = (void *)*i;
                *uint64_t i = **(void **)(directInputModeFunctionTable(void)::table + 8 * v28);
                **(void **)(directInputModeFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = i;
                uint64_t i = v21;
              }
              unint64_t v28 = v22;
LABEL_57:
              uint64_t v21 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        unint64_t v33 = (void *)directInputModeFunctionTable(void)::table;
        *(void *)&directInputModeFunctionTable(void)::table = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v8 = 0;
        *((void *)&directInputModeFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v29 = directInputModeFunctionTable(void)::table;
  uint64_t v30 = *(void **)(directInputModeFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *uint64_t v11 = *v30;
LABEL_74:
    *uint64_t v30 = v11;
    goto LABEL_75;
  }
  *uint64_t v11 = qword_1EB4DCCF0;
  qword_1EB4DCCF0 = (uint64_t)v11;
  *(void *)(v29 + 8 * v2) = &qword_1EB4DCCF0;
  if (*v11)
  {
    unint64_t v31 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8) {
        v31 %= v8;
      }
    }
    else
    {
      v31 &= v8 - 1;
    }
    uint64_t v30 = (void *)(directInputModeFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1EB4DCCF8;
  return v11;
}

void sub_19E9B0338(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MLE5DirectModeFromPixelBufferSurfaceToSurface(void *a1, uint64_t a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  MLE5SurfaceDescriptorOf((e5rt_io_port *)&v20);
  uint64_t WidthFromSurfaceDescriptor = MLE5GetWidthFromSurfaceDescriptor();
  uint64_t HeightFromSurfaceDescriptor = MLE5GetHeightFromSurfaceDescriptor();
  unint64_t v7 = (__CVBuffer *)[v4 imageBufferValue];
  size_t Width = CVPixelBufferGetWidth(v7);
  size_t Height = CVPixelBufferGetHeight(v7);
  size_t v10 = Height;
  if (Width == WidthFromSurfaceDescriptor && Height == HeightFromSurfaceDescriptor)
  {
    PixelFormatuint64_t Type = CVPixelBufferGetPixelFormatType(v7);
    int SurfaceFormatFromSurfaceDescriptor = MLE5GetSurfaceFormatFromSurfaceDescriptor();
    if (PixelFormatType == 1278226536 && SurfaceFormatFromSurfaceDescriptor == 7)
    {
      unsigned __int8 v13 = 1;
    }
    else
    {
      unsigned __int8 v13 = 1;
      if (PixelFormatType != 1111970369 || SurfaceFormatFromSurfaceDescriptor != 2)
      {
        if (SurfaceFormatFromSurfaceDescriptor == 8 && PixelFormatType == 32) {
          unsigned __int8 v13 = 1;
        }
        else {
          unsigned __int8 v13 = 2;
        }
      }
    }
  }
  else
  {
    BOOL v14 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218752;
      size_t v24 = Width;
      __int16 v25 = 2048;
      size_t v26 = v10;
      __int16 v27 = 2048;
      uint64_t v28 = WidthFromSurfaceDescriptor;
      __int16 v29 = 2048;
      uint64_t v30 = HeightFromSurfaceDescriptor;
      _os_log_error_impl(&dword_19E58B000, v14, OS_LOG_TYPE_ERROR, "The specified image size %zu x %zu doesn't match the expected image size: %zu x %zu.", buf, 0x2Au);
    }

    if (a3)
    {
      unint64_t v15 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v21 = *MEMORY[0x1E4F28568];
      unint64_t v16 = objc_msgSend(NSString, "stringWithFormat:", @"The specified image size %zu x %zu doesn't match the expected image size: %zu x %zu.", Width, v10, WidthFromSurfaceDescriptor, HeightFromSurfaceDescriptor);
      unint64_t v22 = v16;
      unint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v22 forKeys:&v21 count:1];
      *a3 = [v15 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v17];
    }
    unsigned __int8 v13 = 0;
  }
  std::unique_ptr<e5rt_surface_desc,MLE5ObjectDeleter<e5rt_surface_desc>>::reset[abi:ne180100](&v20);

  return v13;
}

void sub_19E9B059C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);

  std::unique_ptr<e5rt_surface_desc,MLE5ObjectDeleter<e5rt_surface_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_surface_desc,MLE5ObjectDeleter<e5rt_surface_desc>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1) {
    return (uint64_t *)e5rt_surface_desc_release();
  }
  return result;
}

uint64_t MLE5NoDirectBinding()
{
  return 2;
}

uint64_t MLE5DirectModeFromPixelBufferSurfaceToTensor(void *a1, uint64_t a2, void *a3)
{
  id v4 = (__CVBuffer *)[a1 imageBufferValue];
  MLE5TensorDescriptorOf((e5rt_io_port *)&v7);
  uint64_t v5 = MLE5CompareTensorAndPixelBufferMemoryLayout(v7, v4, a3);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v7);
  return v5;
}

void sub_19E9B06A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1) {
    return (uint64_t *)e5rt_tensor_desc_release();
  }
  return result;
}

uint64_t MLE5DirectModeFromMultiArraySurfaceToTensor(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v8);
  uint64_t v5 = [v4 multiArrayValue];
  uint64_t v6 = MLE5CompareTensorAndMultiArrayMemoryLayout(v8, v5, a3);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v8);
  return v6;
}

void sub_19E9B076C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MLE5DirectModeFromMultiArrayMemoryToTensor(void *a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v13);
  uint64_t v5 = [v4 multiArrayValue];
  BOOL v14 = 0;
  unint64_t v15 = 0;
  uint64_t supported_buffer_types = e5rt_io_port_get_supported_buffer_types();
  if (supported_buffer_types)
  {
    uint64_t v7 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      uint64_t v17 = last_error_message;
      __int16 v18 = 1024;
      int v19 = supported_buffer_types;
      _os_log_error_impl(&dword_19E58B000, v7, OS_LOG_TYPE_ERROR, "Failed to get supported buffer types for the port E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get supported buffer types for the port E5RT: %s (%d)", e5rt_get_last_error_message(), supported_buffer_types);
  }
  if (!v15)
  {
LABEL_12:
    uint64_t v8 = 2;
    goto LABEL_13;
  }
  if (*v14 != 1)
  {
    unint64_t v9 = 0;
    while (v15 - 1 != v9)
    {
      int v10 = v14[++v9];
      if (v10 == 1)
      {
        if (v9 < v15) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    goto LABEL_12;
  }
LABEL_7:
  uint64_t v8 = MLE5CompareTensorAndMultiArrayMemoryLayout(v13, v5, a3);
LABEL_13:

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v13);
  return v8;
}

void sub_19E9B094C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *___ZL29inputReusabilityFunctionTablev_block_invoke()
{
  LOWORD(v1) = 257;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5InputReusabilityTensorPortHasSameMultiArraySurface;
  LOWORD(v1) = 513;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5InputReusabilityTensorPortHasSameMultiArrayMemory;
  LOWORD(v1) = 769;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  uint64_t result = std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1);
  result[4] = MLE5InputReusabilityTensorPortHasSamePixelBufferSurface;
  return result;
}

void *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,MLFeatureValue *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *((void *)a1 + 1);
  unint64_t v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  unint64_t v8 = *((void *)&inputReusabilityFunctionTable(void)::table + 1);
  if (*((void *)&inputReusabilityFunctionTable(void)::table + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&inputReusabilityFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((void *)&inputReusabilityFunctionTable(void)::table + 1)) {
        unint64_t v2 = v7 % *((void *)&inputReusabilityFunctionTable(void)::table + 1);
      }
    }
    else
    {
      unint64_t v2 = v7 & (*((void *)&inputReusabilityFunctionTable(void)::table + 1) - 1);
    }
    int v10 = *(void ***)(inputReusabilityFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((void *)&inputReusabilityFunctionTable(void)::table + 1)) {
                v12 %= *((void *)&inputReusabilityFunctionTable(void)::table + 1);
              }
            }
            else
            {
              v12 &= *((void *)&inputReusabilityFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  float v13 = (float)(unint64_t)(qword_1E9460158 + 1);
  if (!v8 || (float)(*(float *)&dword_1E9460160 * (float)v8) < v13)
  {
    BOOL v14 = 1;
    if (v8 >= 3) {
      BOOL v14 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v8);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1E9460160);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)&inputReusabilityFunctionTable(void)::table + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)(unint64_t)qword_1E9460158 / *(float *)&dword_1E9460160);
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)&inputReusabilityFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          __int16 v18 = operator new(8 * *(void *)&prime);
          int v19 = (void *)inputReusabilityFunctionTable(void)::table;
          *(void *)&inputReusabilityFunctionTable(void)::table = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)&inputReusabilityFunctionTable(void)::table + 1) = prime;
          do
            *(void *)(inputReusabilityFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void **)qword_1E9460150;
          if (qword_1E9460150)
          {
            unint64_t v22 = *(void *)(qword_1E9460150 + 8);
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(inputReusabilityFunctionTable(void)::table + 8 * v22) = &qword_1E9460150;
            for (uint64_t i = *v21; i; v22 = v28)
            {
              unint64_t v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(void *)(inputReusabilityFunctionTable(void)::table + 8 * v28))
                {
                  *(void *)(inputReusabilityFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = v21;
                  goto LABEL_57;
                }
                *uint64_t v21 = (void *)*i;
                *uint64_t i = **(void **)(inputReusabilityFunctionTable(void)::table + 8 * v28);
                **(void **)(inputReusabilityFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = i;
                uint64_t i = v21;
              }
              unint64_t v28 = v22;
LABEL_57:
              uint64_t v21 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        unint64_t v33 = (void *)inputReusabilityFunctionTable(void)::table;
        *(void *)&inputReusabilityFunctionTable(void)::table = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v8 = 0;
        *((void *)&inputReusabilityFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v29 = inputReusabilityFunctionTable(void)::table;
  uint64_t v30 = *(void **)(inputReusabilityFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *uint64_t v11 = *v30;
LABEL_74:
    *uint64_t v30 = v11;
    goto LABEL_75;
  }
  *uint64_t v11 = qword_1E9460150;
  qword_1E9460150 = (uint64_t)v11;
  *(void *)(v29 + 8 * v2) = &qword_1E9460150;
  if (*v11)
  {
    unint64_t v31 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8) {
        v31 %= v8;
      }
    }
    else
    {
      v31 &= v8 - 1;
    }
    uint64_t v30 = (void *)(inputReusabilityFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1E9460158;
  return v11;
}

void sub_19E9B0E6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MLE5InputReusabilityTensorPortHasSamePixelBufferSurface(void *a1)
{
  id v1 = a1;
  MLE5BufferObjectBoundTo((e5rt_io_port *)&v4);
  uint64_t v2 = v4;
  if (v4)
  {
    if (MLE5TypeOfBufferObject())
    {
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v2 = MLE5IOSurfaceOfBufferObject();
      if (v2) {
        uint64_t v2 = v2 == (void)CVPixelBufferGetIOSurface((CVPixelBufferRef)[v1 imageBufferValue]);
      }
    }
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v4, 0);

  return v2;
}

void sub_19E9B0F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);

  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2) {
    return (uint64_t *)e5rt_buffer_object_release();
  }
  return result;
}

BOOL MLE5InputReusabilityTensorPortHasSameMultiArrayMemory(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [a1 multiArrayValue];
  uint64_t v5 = [v3 multiArrayValue];
  BOOL v6 = v4 == v5;

  return v6;
}

void sub_19E9B0FDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5InputReusabilityTensorPortHasSameMultiArraySurface(void *a1)
{
  id v1 = a1;
  MLE5BufferObjectBoundTo((e5rt_io_port *)&v5);
  uint64_t v2 = v5;
  if (v5)
  {
    if (MLE5TypeOfBufferObject())
    {
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v2 = MLE5IOSurfaceOfBufferObject();
      if (v2)
      {
        id v3 = [v1 multiArrayValue];
        uint64_t v2 = v2 == (void)CVPixelBufferGetIOSurface((CVPixelBufferRef)[v3 pixelBuffer]);
      }
    }
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v5, 0);

  return v2;
}

void sub_19E9B10A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *MLE5FindInputBindFunction(unsigned int a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  {
    inputBindFunctionTable(void)::table = 0u;
    *(_OWORD *)&qword_1EB4DCCC0 = 0u;
    dword_1EB4DCCD0 = 1065353216;
  }
  if (inputBindFunctionTable(void)::onceToken != -1) {
    dispatch_once(&inputBindFunctionTable(void)::onceToken, &__block_literal_global_59);
  }
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  if (*((void *)&inputBindFunctionTable(void)::table + 1))
  {
    unint64_t v10 = ((unint64_t)a1 << 24) | ((unint64_t)a2 << 16) | ((unint64_t)a3 << 8);
    uint8x8_t v11 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&inputBindFunctionTable(void)::table + 8));
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = ((unint64_t)a1 << 24) | ((unint64_t)a2 << 16) | ((unint64_t)a3 << 8);
      if (v10 >= *((void *)&inputBindFunctionTable(void)::table + 1)) {
        unint64_t v12 = v10 % *((void *)&inputBindFunctionTable(void)::table + 1);
      }
    }
    else
    {
      unint64_t v12 = v10 & (*((void *)&inputBindFunctionTable(void)::table + 1) - 1);
    }
    float v13 = *(uint64_t ****)(inputBindFunctionTable(void)::table + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v15 = (unint64_t)i[1];
        if (v10 == v15)
        {
          if (*((unsigned __int8 *)i + 16) == a1
            && *((unsigned __int8 *)i + 17) == a2
            && *((unsigned __int8 *)i + 18) == a3
            && !i[3])
          {
            return i[4];
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= *((void *)&inputBindFunctionTable(void)::table + 1)) {
              v15 %= *((void *)&inputBindFunctionTable(void)::table + 1);
            }
          }
          else
          {
            v15 &= *((void *)&inputBindFunctionTable(void)::table + 1) - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  unint64_t v16 = +[MLLogging coreChannel];
  uint64_t v17 = a1;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    uint8x8_t v25 = off_1E59A4930[a1];
    uint64_t v26 = off_1E59A4948[a2];
    __int16 v27 = off_1E59A4918[v9];
    *(_DWORD *)buf = 138412802;
    unint64_t v32 = v25;
    __int16 v33 = 2112;
    uint64_t v34 = v26;
    __int16 v35 = 2112;
    uint64_t v36 = v27;
    _os_log_error_impl(&dword_19E58B000, v16, OS_LOG_TYPE_ERROR, "The input feature value is invalid or unsupported. (Port trait %@, feature trait %@, and direct bind mode %@.)", buf, 0x20u);
  }
  if (a4)
  {
    __int16 v18 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v29 = *MEMORY[0x1E4F28568];
    int v19 = NSString;
    uint64_t v20 = off_1E59A4930[v17];
    uint64_t v21 = off_1E59A4948[v8];
    unint64_t v22 = off_1E59A4918[v9];
    uint8x8_t v23 = [v19 stringWithFormat:@"The input feature value is invalid or unsupported. (Port trait %@, feature trait %@, and direct bind mode %@.)", v20, v21, v22];
    uint64_t v30 = v23;
    unint64_t v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
    *a4 = [v18 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v24];
  }
  return 0;
}

void sub_19E9B1458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *___ZL22inputBindFunctionTablev_block_invoke()
{
  LOWORD(v1) = 257;
  BYTE2(v1) = 2;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5BindInputBufferObjectByCopyingMultiArray;
  LOWORD(v1) = 257;
  BYTE2(v1) = 1;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5BindInputBufferObjectByRetainingMultiArraySurface;
  LOWORD(v1) = 513;
  BYTE2(v1) = 2;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5BindInputBufferObjectByCopyingMultiArray;
  LOWORD(v1) = 513;
  BYTE2(v1) = 1;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5BindInputBufferObjectByRetainingMultiArrayMemory;
  LOWORD(v1) = 769;
  BYTE2(v1) = 1;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5BindInputBufferObjectByRetainingPixelBuffer;
  LOWORD(v1) = 769;
  BYTE2(v1) = 2;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5BindInputBufferObjectByCopyingPixelBuffer;
  LOWORD(v1) = 1025;
  BYTE2(v1) = 2;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5BindInputBufferObjectByCopyingPixelBuffer;
  LOWORD(v1) = 770;
  BYTE2(v1) = 2;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5BindInputSurfaceObjectByCopyingPixelBuffer;
  LOWORD(v1) = 1026;
  BYTE2(v1) = 2;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5BindInputSurfaceObjectByCopyingPixelBuffer;
  LOWORD(v1) = 770;
  BYTE2(v1) = 1;
  *((void *)&v1 + 1) = 0;
  uint64_t result = std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1);
  result[4] = MLE5BindInputSurfaceObjectByRetainingPixelBuffer;
  return result;
}

void *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *((void *)a1 + 1);
  unint64_t v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  unint64_t v8 = *((void *)&inputBindFunctionTable(void)::table + 1);
  if (*((void *)&inputBindFunctionTable(void)::table + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&inputBindFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((void *)&inputBindFunctionTable(void)::table + 1)) {
        unint64_t v2 = v7 % *((void *)&inputBindFunctionTable(void)::table + 1);
      }
    }
    else
    {
      unint64_t v2 = v7 & (*((void *)&inputBindFunctionTable(void)::table + 1) - 1);
    }
    unint64_t v10 = *(void ***)(inputBindFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      uint8x8_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((void *)&inputBindFunctionTable(void)::table + 1)) {
                v12 %= *((void *)&inputBindFunctionTable(void)::table + 1);
              }
            }
            else
            {
              v12 &= *((void *)&inputBindFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          uint8x8_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint8x8_t v11 = operator new(0x28uLL);
  *uint8x8_t v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  float v13 = (float)(unint64_t)(qword_1EB4DCCC8 + 1);
  if (!v8 || (float)(*(float *)&dword_1EB4DCCD0 * (float)v8) < v13)
  {
    BOOL v14 = 1;
    if (v8 >= 3) {
      BOOL v14 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v8);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1EB4DCCD0);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)&inputBindFunctionTable(void)::table + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)(unint64_t)qword_1EB4DCCC8 / *(float *)&dword_1EB4DCCD0);
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)&inputBindFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          __int16 v18 = operator new(8 * *(void *)&prime);
          int v19 = (void *)inputBindFunctionTable(void)::table;
          *(void *)&inputBindFunctionTable(void)::table = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)&inputBindFunctionTable(void)::table + 1) = prime;
          do
            *(void *)(inputBindFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void **)qword_1EB4DCCC0;
          if (qword_1EB4DCCC0)
          {
            unint64_t v22 = *(void *)(qword_1EB4DCCC0 + 8);
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(inputBindFunctionTable(void)::table + 8 * v22) = &qword_1EB4DCCC0;
            for (uint64_t i = *v21; i; v22 = v28)
            {
              unint64_t v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(void *)(inputBindFunctionTable(void)::table + 8 * v28))
                {
                  *(void *)(inputBindFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = v21;
                  goto LABEL_57;
                }
                *uint64_t v21 = (void *)*i;
                *uint64_t i = **(void **)(inputBindFunctionTable(void)::table + 8 * v28);
                **(void **)(inputBindFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = i;
                uint64_t i = v21;
              }
              unint64_t v28 = v22;
LABEL_57:
              uint64_t v21 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        __int16 v33 = (void *)inputBindFunctionTable(void)::table;
        *(void *)&inputBindFunctionTable(void)::table = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v8 = 0;
        *((void *)&inputBindFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v29 = inputBindFunctionTable(void)::table;
  uint64_t v30 = *(void **)(inputBindFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *uint8x8_t v11 = *v30;
LABEL_74:
    *uint64_t v30 = v11;
    goto LABEL_75;
  }
  *uint8x8_t v11 = qword_1EB4DCCC0;
  qword_1EB4DCCC0 = (uint64_t)v11;
  *(void *)(v29 + 8 * v2) = &qword_1EB4DCCC0;
  if (*v11)
  {
    unint64_t v31 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8) {
        v31 %= v8;
      }
    }
    else
    {
      v31 &= v8 - 1;
    }
    uint64_t v30 = (void *)(inputBindFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1EB4DCCC8;
  return v11;
}

void sub_19E9B1A94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL MLE5BindInputSurfaceObjectByRetainingPixelBuffer(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  CVPixelBufferGetIOSurface((CVPixelBufferRef)[a1 imageBufferValue]);
  MLE5NewSurfaceObjectUsing((__IOSurface *)&v13);
  uint64_t v7 = e5rt_io_port_bind_surface_object();
  if (v7)
  {
    unint64_t v8 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      uint64_t v15 = last_error_message;
      __int16 v16 = 1024;
      int v17 = v7;
      _os_log_error_impl(&dword_19E58B000, v8, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a4)
    {
      uint8x8_t v9 = +[MLModelErrorUtils genericErrorWithFormat:@"E5RT: %s (%d)", e5rt_get_last_error_message(), v7];
      unint64_t v10 = [v6 name];
      *a4 = +[MLModelErrorUtils errorWithCode:1, v9, @"Failed to bind the input image for feature named: %@.", v10 underlyingError format];
    }
  }
  std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100](&v13, 0);

  return v7 == 0;
}

void sub_19E9B1C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2) {
    return (uint64_t *)e5rt_surface_object_release();
  }
  return result;
}

uint64_t MLE5BindInputSurfaceObjectByCopyingPixelBuffer(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a3;
  uint8x8_t v9 = (__CVBuffer *)[v7 imageBufferValue];
  unint64_t v10 = (__CVBuffer *)MLE5CopyPixelBufferOwningSurfaceOfPort(a2, (void *)a4);
  __int16 v27 = v10;
  if (!v10) {
    goto LABEL_13;
  }
  VTPixelTransferSessionRef pixelTransferSessionOut = 0;
  uint64_t v11 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &pixelTransferSessionOut);
  if (v11)
  {
    unint64_t v12 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      unint64_t v24 = [v8 name];
      *(_DWORD *)buf = 138412546;
      __int16 v33 = v24;
      __int16 v34 = 1024;
      int v35 = v11;
      _os_log_error_impl(&dword_19E58B000, v12, OS_LOG_TYPE_ERROR, "Failed to copy the input image for the feature named %@ to the internal surface buffer due to the underlying image transfer engine's creation error. (Error Code %d)", buf, 0x12u);
    }
    if (a4)
    {
      uint64_t v13 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v30 = *MEMORY[0x1E4F28568];
      BOOL v14 = NSString;
      uint64_t v15 = [v8 name];
      __int16 v16 = [v14 stringWithFormat:@"Failed to copy the input image for the feature named %@ to the internal surface buffer due to the underlying image transfer engine's creation error. (Error Code %d)", v15, v11];
      unint64_t v31 = v16;
      int v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v31 forKeys:&v30 count:1];
      uint64_t v18 = [v13 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v17];
LABEL_12:
      *(void *)a4 = v18;

LABEL_13:
      a4 = 0;
    }
  }
  else
  {
    uint64_t v19 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v9, v10);
    if (!v19)
    {
      CFRelease(pixelTransferSessionOut);
      a4 = 1;
      goto LABEL_14;
    }
    CFRelease(pixelTransferSessionOut);
    uint64_t v20 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint8x8_t v25 = [v8 name];
      *(_DWORD *)buf = 138412546;
      __int16 v33 = v25;
      __int16 v34 = 1024;
      int v35 = v19;
      _os_log_error_impl(&dword_19E58B000, v20, OS_LOG_TYPE_ERROR, "Failed to copy the input image for the feature named %@ to the internal surface buffer due to the underlying image transfer engine's error. (Error Code %d)", buf, 0x12u);
    }
    if (a4)
    {
      uint64_t v21 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v28 = *MEMORY[0x1E4F28568];
      unint64_t v22 = NSString;
      uint64_t v15 = [v8 name];
      __int16 v16 = [v22 stringWithFormat:@"Failed to copy the input image for the feature named %@ to the internal surface buffer due to the underlying image transfer engine's error. (Error Code %d)", v15, v19];
      uint64_t v29 = v16;
      int v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v29 forKeys:&v28 count:1];
      uint64_t v18 = [v21 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v17];
      goto LABEL_12;
    }
  }
LABEL_14:
  std::unique_ptr<__CVBuffer,MLE5ObjectDeleter<__CVBuffer>>::reset[abi:ne180100](&v27);

  return a4;
}

void sub_19E9B200C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::unique_ptr<__CVBuffer,MLE5ObjectDeleter<__CVBuffer>>::reset[abi:ne180100]((__CVBuffer **)va);
  _Unwind_Resume(a1);
}

BOOL MLE5BindInputBufferObjectByCopyingPixelBuffer(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a3;
  id v8 = (__CVBuffer *)[v6 imageBufferValue];
  PixelFormatuint64_t Type = CVPixelBufferGetPixelFormatType(v8);
  MLE5TensorDescriptorOf((e5rt_io_port *)&v48);
  unint64_t v10 = [v7 imageConstraint];
  uint64_t v11 = [v10 pixelType];

  MLE5PixelBufferAndTensorStrategyKey::MLE5PixelBufferAndTensorStrategyKey((uint64_t)&v45, PixelFormatType, v11);
  {
    copyPixelBufferToTensorFunctionTable(void)::table = 0u;
    *(_OWORD *)&qword_1E946A350 = 0u;
    dword_1E946A360 = 1065353216;
  }
  if (copyPixelBufferToTensorFunctionTable(void)::onceToken != -1) {
    dispatch_once(&copyPixelBufferToTensorFunctionTable(void)::onceToken, &__block_literal_global_61);
  }
  if (!*((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1)) {
    goto LABEL_22;
  }
  unint64_t v12 = v46 ^ v45 ^ v47;
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&copyPixelBufferToTensorFunctionTable(void)::table + 8));
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v14 = v46 ^ v45 ^ v47;
    if (v12 >= *((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1)) {
      unint64_t v14 = v12 % *((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1);
    }
  }
  else
  {
    unint64_t v14 = v12 & (*((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1) - 1);
  }
  uint64_t v15 = *(uint64_t ***)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v14);
  if (!v15) {
    goto LABEL_22;
  }
  __int16 v16 = *v15;
  if (!v16) {
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v17 = v16[1];
    if (v12 == v17) {
      break;
    }
    if (v13.u32[0] > 1uLL)
    {
      if (v17 >= *((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1)) {
        v17 %= *((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1);
      }
    }
    else
    {
      v17 &= *((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1) - 1;
    }
    if (v17 != v14) {
      goto LABEL_22;
    }
LABEL_21:
    __int16 v16 = (uint64_t *)*v16;
    if (!v16) {
      goto LABEL_22;
    }
  }
  if (*((_DWORD *)v16 + 8) != v47 || v16[3] != v46 || *((_DWORD *)v16 + 4) != v45) {
    goto LABEL_21;
  }
  uint64_t v29 = (void (*)(void *, size_t, size_t, size_t, uint64_t, uint64_t, uint64_t))v16[5];
  if (v29)
  {
    MLE5BufferObjectBoundTo((e5rt_io_port *)__p);
    uint64_t StridesFromTensorDescriptor = MLE5GetStridesFromTensorDescriptor();
    uint64_t RankFromTensorDescriptor = MLE5GetRankFromTensorDescriptor();
    uint64_t v32 = MLE5DataPointerOfBufferObject();
    uint64_t v33 = CVPixelBufferLockBaseAddress(v8, 1uLL);
    BOOL v25 = v33 == 0;
    if (v33)
    {
      __int16 v34 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v54) = v33;
        _os_log_error_impl(&dword_19E58B000, v34, OS_LOG_TYPE_ERROR, "Failed to lock the source pixel buffer with CVReturn: %d", buf, 8u);
      }

      if (a4)
      {
        int v35 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v49 = *MEMORY[0x1E4F28568];
        uint64_t v36 = objc_msgSend(NSString, "stringWithFormat:", @"Failed to lock the source pixel buffer with CVReturn: %d", v33);
        uint64_t v50 = v36;
        uint64_t v37 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v50 forKeys:&v49 count:1];
        *a4 = [v35 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v37];
      }
    }
    else
    {
      uint64_t v42 = StridesFromTensorDescriptor;
      BaseAddress = CVPixelBufferGetBaseAddress(v8);
      size_t Width = CVPixelBufferGetWidth(v8);
      size_t Height = CVPixelBufferGetHeight(v8);
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v8);
      v29(BaseAddress, Width, Height, BytesPerRow, v32, v42, RankFromTensorDescriptor);
      CVPixelBufferUnlockBaseAddress(v8, 1uLL);
    }
    std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)__p, 0);
    goto LABEL_31;
  }
LABEL_22:
  uint64_t v18 = +[MLLogging coreChannel];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    __int16 v27 = [v7 name];
    MLE5PixelBufferAndTensorStrategyKey::str((MLE5PixelBufferAndTensorStrategyKey *)__p, &v45);
    if (v44 >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    *(_DWORD *)buf = 138412546;
    uint64_t v54 = v27;
    __int16 v55 = 2080;
    unint64_t v56 = v28;
    _os_log_error_impl(&dword_19E58B000, v18, OS_LOG_TYPE_ERROR, "Unable to copy the specified input image for the feature named %@ to the internal tensor (%s).", buf, 0x16u);
    if (v44 < 0) {
      operator delete(__p[0]);
    }
  }
  if (a4)
  {
    uint64_t v19 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v51 = *MEMORY[0x1E4F28568];
    uint64_t v20 = NSString;
    uint64_t v21 = [v7 name];
    MLE5PixelBufferAndTensorStrategyKey::str((MLE5PixelBufferAndTensorStrategyKey *)__p, &v45);
    if (v44 >= 0) {
      unint64_t v22 = __p;
    }
    else {
      unint64_t v22 = (void **)__p[0];
    }
    uint8x8_t v23 = [v20 stringWithFormat:@"Unable to copy the specified input image for the feature named %@ to the internal tensor (%s).", v21, v22];
    uint64_t v52 = v23;
    unint64_t v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v52 forKeys:&v51 count:1];
    *a4 = [v19 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v24];

    if (v44 < 0) {
      operator delete(__p[0]);
    }
  }
  BOOL v25 = 0;
LABEL_31:
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v48);

  return v25;
}

void sub_19E9B2614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)&__p, 0);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&a21);

  _Unwind_Resume(a1);
}

void *___ZL36copyPixelBufferToTensorFunctionTablev_block_invoke()
{
  int v3 = 1111970369;
  uint64_t v2 = 30;
  int v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32BGRA_BGRTensor_CompDtypeFLOAT_CompPackFmt32;
  int v3 = 1111970369;
  uint64_t v2 = 20;
  int v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32BGRA_RGBTensor_CompDtypeFLOAT_CompPackFmt32;
  int v3 = 32;
  uint64_t v2 = 30;
  int v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32ARGB_BGRTensor_CompDtypeFLOAT_CompPackFmt32;
  int v3 = 32;
  uint64_t v2 = 20;
  int v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32ARGB_RGBTensor_CompDtypeFLOAT_CompPackFmt32;
  int v3 = 1278226488;
  uint64_t v2 = 10;
  int v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5CopyOneComponent8_GrayTensor_CompDtypeFLOAT_CompPackFmt32;
  int v3 = 1278226536;
  uint64_t v2 = 40;
  int v1 = 52;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5CopyOneComponent16Half_GrayTensor_CompDtypeFLOAT_CompPackFmt32;
  int v3 = 1278226536;
  uint64_t v2 = 40;
  int v1 = 28;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5CopyOneComponent16Half_GrayTensor_CompDtypeFLOAT_CompPackFmt16;
  int v3 = 1111970369;
  uint64_t v2 = 30;
  int v1 = 28;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32BGRA_BGRTensor_CompDtypeFLOAT_CompPackFmt16;
  int v3 = 1111970369;
  uint64_t v2 = 20;
  int v1 = 28;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32BGRA_RGBTensor_CompDtypeFLOAT_CompPackFmt16;
  int v3 = 32;
  uint64_t v2 = 30;
  int v1 = 28;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32ARGB_BGRTensor_CompDtypeFLOAT_CompPackFmt16;
  int v3 = 32;
  uint64_t v2 = 20;
  int v1 = 28;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5Copy32ARGB_RGBTensor_CompDtypeFLOAT_CompPackFmt16;
  int v3 = 1278226488;
  uint64_t v2 = 10;
  int v1 = 28;
  std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1)[5] = MLE5CopyOneComponent8_GrayTensor_CompDtypeFLOAT_CompPackFmt16;
  int v3 = 1278226488;
  uint64_t v2 = 10;
  int v1 = 0;
  uint64_t result = std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(&v1, (uint64_t)&v1);
  result[5] = MLE5CopyOneComponent8_GrayTensor_CompDtypeUINT_CompPackFmt8;
  return result;
}

void *std::__hash_table<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::__unordered_map_hasher<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,true>,std::__unordered_map_equal<MLE5PixelBufferAndTensorStrategyKey,std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,MLE5PixelBufferAndTensorStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PixelBufferAndTensorStrategyKey,void (*)(void const*,unsigned long,unsigned long,unsigned long,void *,long const*,unsigned long)>>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PixelBufferAndTensorStrategyKey&&>,std::tuple<>>(int *a1, uint64_t a2)
{
  unsigned int v4 = a1[4];
  uint64_t v5 = *((void *)a1 + 1);
  int v6 = *a1;
  unint64_t v7 = v5 ^ *a1 ^ v4;
  unint64_t v8 = *((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1);
  if (*((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&copyPixelBufferToTensorFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = v5 ^ v6 ^ v4;
      if (v7 >= *((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1)) {
        unint64_t v2 = v7 % *((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1);
      }
    }
    else
    {
      unint64_t v2 = v7 & (*((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1) - 1);
    }
    unint64_t v10 = *(void ***)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 8) == v4 && v11[3] == v5 && *((_DWORD *)v11 + 4) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1)) {
                v12 %= *((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1);
              }
            }
            else
            {
              v12 &= *((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *(_OWORD *)a2;
  v11[4] = *(void *)(a2 + 16);
  v11[5] = 0;
  float v13 = (float)(unint64_t)(qword_1E946A358 + 1);
  if (!v8 || (float)(*(float *)&dword_1E946A360 * (float)v8) < v13)
  {
    BOOL v14 = 1;
    if (v8 >= 3) {
      BOOL v14 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v8);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1E946A360);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)(unint64_t)qword_1E946A358 / *(float *)&dword_1E946A360);
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v18 = operator new(8 * *(void *)&prime);
          uint64_t v19 = (void *)copyPixelBufferToTensorFunctionTable(void)::table;
          *(void *)&copyPixelBufferToTensorFunctionTable(void)::table = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)&copyPixelBufferToTensorFunctionTable(void)::table + 1) = prime;
          do
            *(void *)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void **)qword_1E946A350;
          if (qword_1E946A350)
          {
            unint64_t v22 = *(void *)(qword_1E946A350 + 8);
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v22) = &qword_1E946A350;
            for (uint64_t i = *v21; i; v22 = v28)
            {
              unint64_t v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(void *)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v28))
                {
                  *(void *)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = v21;
                  goto LABEL_57;
                }
                *uint64_t v21 = (void *)*i;
                *uint64_t i = **(void **)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v28);
                **(void **)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = i;
                uint64_t i = v21;
              }
              unint64_t v28 = v22;
LABEL_57:
              uint64_t v21 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        uint64_t v33 = (void *)copyPixelBufferToTensorFunctionTable(void)::table;
        *(void *)&copyPixelBufferToTensorFunctionTable(void)::table = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v8 = 0;
        *((void *)&copyPixelBufferToTensorFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v29 = copyPixelBufferToTensorFunctionTable(void)::table;
  uint64_t v30 = *(void **)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *uint64_t v11 = *v30;
LABEL_74:
    *uint64_t v30 = v11;
    goto LABEL_75;
  }
  *uint64_t v11 = qword_1E946A350;
  qword_1E946A350 = (uint64_t)v11;
  *(void *)(v29 + 8 * v2) = &qword_1E946A350;
  if (*v11)
  {
    unint64_t v31 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8) {
        v31 %= v8;
      }
    }
    else
    {
      v31 &= v8 - 1;
    }
    uint64_t v30 = (void *)(copyPixelBufferToTensorFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1E946A358;
  return v11;
}

void sub_19E9B2DA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

vImage_Error MLE5CopyOneComponent8_GrayTensor_CompDtypeUINT_CompPackFmt8(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  src.int data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  dest.int data = a5;
  dest.height = a3;
  size_t v7 = *(void *)(a6 + 8 * a7 - 16);
  dest.width = a2;
  dest.rowBytes = v7;
  vImage_Error result = vImageCopyBuffer(&src, &dest, 1uLL, 0);
  if (result)
  {
    vImage_Error v9 = result;
    unint64_t v10 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v14 = v9;
      _os_log_error_impl(&dword_19E58B000, v10, OS_LOG_TYPE_ERROR, "vImageCopyBuffer has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"vImageCopyBuffer has failed with error: %d", v9);
  }
  return result;
}

void MLE5CopyOneComponent8_GrayTensor_CompDtypeFLOAT_CompPackFmt16(char *a1, vImagePixelCount a2, uint64_t a3, size_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  memptr = 0;
  size_t v22 = 4 * a2;
  malloc_type_posix_memalign(&memptr, 0x80uLL, 4 * a2, 0x100004052888210uLL);
  if (a3)
  {
    size_t v14 = *(void *)(a6 + 8 * a7 - 16);
    uint64_t v15 = *MEMORY[0x1E4F1C3A8];
    do
    {
      src.int data = a1;
      src.height = 1;
      src.width = a2;
      src.rowBytes = a4;
      dest.int data = memptr;
      dest.height = 1;
      dest.width = a2;
      dest.rowBytes = v22;
      vImage_Error v16 = vImageConvert_Planar8toPlanarF(&src, &dest, 255.0, 0.0, 0);
      if (v16)
      {
        vImage_Error v17 = v16;
        uint64_t v18 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v28.data) = 67109120;
          HIDWORD(v28.data) = v17;
          _os_log_error_impl(&dword_19E58B000, v18, OS_LOG_TYPE_ERROR, "vImageConvert_Planar8ToPlanarF has failed with error: %d", (uint8_t *)&v28, 8u);
        }

        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v15, @"vImageConvert_Planar8ToPlanarF has failed with error: %d", v17);
      }
      v28.int data = a5;
      v28.height = 1;
      v28.width = a2;
      v28.rowBytes = v14;
      vImage_Error v19 = vImageConvert_PlanarFtoPlanar16F(&dest, &v28, 0);
      if (v19)
      {
        vImage_Error v20 = v19;
        uint64_t v21 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          int v27 = v20;
          _os_log_error_impl(&dword_19E58B000, v21, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar16F with error: %d", buf, 8u);
        }

        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v15, @"vImageConvert_PlanarFtoPlanar16F with error: %d", v20);
      }
      a1 += a4;
      a5 += v14;
      --a3;
    }
    while (a3);
  }
  free(memptr);
}

void MLE5Copy32ARGB_RGBTensor_CompDtypeFLOAT_CompPackFmt16(char *a1, vImagePixelCount a2, int a3, size_t a4, char *a5, const uint64_t *a6, uint64_t a7)
{
}

void _MLE5Copy32XXXX_YYYTensor_CompDtypeFLOAT_CompPackFmt16(char *a1, vImagePixelCount a2, int a3, size_t a4, char *a5, const uint64_t *a6, uint64_t a7, int a8, BOOL a9)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v54 = 0;
  memptr = 0;
  size_t v44 = 4 * a2;
  malloc_type_posix_memalign(&memptr, 0x80uLL, 4 * a2, 0xC6336499uLL);
  vDSP_Length v41 = 3 * a2;
  malloc_type_posix_memalign(&v54, 0x80uLL, 12 * a2, 0x100004052888210uLL);
  if (a3 >= 1)
  {
    uint64_t v16 = 0;
    if (a8) {
      vImagePixelCount v17 = 0;
    }
    else {
      vImagePixelCount v17 = a2;
    }
    int v18 = a8 ^ a9;
    uint64_t v39 = a7 - 2;
    vImagePixelCount v40 = v17;
    uint64_t v42 = *MEMORY[0x1E4F1C3A8];
    uint64_t v43 = a7 - 3;
    BOOL v19 = v18 == 0;
    uint64_t v20 = 2;
    if (v18) {
      uint64_t v21 = 2;
    }
    else {
      uint64_t v21 = 0;
    }
    if (!v19) {
      uint64_t v20 = 0;
    }
    uint64_t v37 = v20;
    uint64_t v38 = v21;
    uint64_t v36 = a3;
    do
    {
      srcARGB.int data = a1;
      srcARGB.height = 1;
      srcARGB.width = a2;
      srcARGB.rowBytes = a4;
      destA.int data = memptr;
      destA.height = 1;
      destA.width = a2;
      destA.rowBytes = a2;
      destR.int data = (char *)memptr + a2;
      destR.height = 1;
      destR.width = a2;
      destR.rowBytes = a2;
      destG.int data = (char *)memptr + 2 * a2;
      destG.height = 1;
      destG.width = a2;
      destG.rowBytes = a2;
      destB.int data = (char *)memptr + v41;
      destB.height = 1;
      destB.width = a2;
      destB.rowBytes = a2;
      vImage_Error v22 = vImageConvert_ARGB8888toPlanar8(&srcARGB, &destA, &destR, &destG, &destB, 0);
      if (v22)
      {
        vImage_Error v23 = v22;
        unint64_t v24 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          LODWORD(src.data) = 67109120;
          HIDWORD(src.data) = v23;
          _os_log_error_impl(&dword_19E58B000, v24, OS_LOG_TYPE_ERROR, "vImageConvert_ARGB8888toPlanar8 has failed with error: %d", (uint8_t *)&src, 8u);
        }

        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v42, @"vImageConvert_ARGB8888toPlanar8 has failed with error: %d", v23);
      }
      size_t v25 = a4;
      vDSP_vfltu8((const unsigned __int8 *)memptr + v40, 1, (float *)v54, 1, v41);
      uint64_t v26 = a6[v39] * v16;
      src.int data = v54;
      src.height = 1;
      src.width = a2;
      src.rowBytes = v44;
      dest.int data = &a5[a6[v43] * v38 + v26];
      dest.height = 1;
      dest.width = a2;
      dest.rowBytes = 2 * a2;
      vImage_Error v27 = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
      if (v27)
      {
        vImage_Error v28 = v27;
        uint64_t v29 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v59.data) = 67109120;
          HIDWORD(v59.data) = v28;
          _os_log_error_impl(&dword_19E58B000, v29, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar16F has failed with error: %d", (uint8_t *)&v59, 8u);
        }

        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v42, @"vImageConvert_PlanarFtoPlanar16F has failed with error: %d", v28);
      }
      v59.int data = (char *)v54 + 4 * a2;
      v59.height = 1;
      v59.width = a2;
      v59.rowBytes = v44;
      v47.int data = &a5[a6[v43] + v26];
      v47.height = 1;
      v47.width = a2;
      v47.rowBytes = 2 * a2;
      vImage_Error v30 = vImageConvert_PlanarFtoPlanar16F(&v59, &v47, 0);
      if (v30)
      {
        vImage_Error v31 = v30;
        uint64_t v32 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v58.data) = 67109120;
          HIDWORD(v58.data) = v31;
          _os_log_error_impl(&dword_19E58B000, v32, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar16F has failed with error: %d", (uint8_t *)&v58, 8u);
        }

        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v42, @"vImageConvert_PlanarFtoPlanar16F has failed with error: %d", v31);
      }
      v58.int data = (char *)v54 + 8 * a2;
      v58.height = 1;
      v58.width = a2;
      v58.rowBytes = v44;
      v46.int data = &a5[a6[v43] * v37 + v26];
      v46.height = 1;
      v46.width = a2;
      v46.rowBytes = 2 * a2;
      vImage_Error v33 = vImageConvert_PlanarFtoPlanar16F(&v58, &v46, 0);
      a4 = v25;
      if (v33)
      {
        vImage_Error v34 = v33;
        int v35 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          int v57 = v34;
          _os_log_error_impl(&dword_19E58B000, v35, OS_LOG_TYPE_ERROR, "vImageConvert_PlanarFtoPlanar16F has failed with error: %d", buf, 8u);
        }

        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v42, @"vImageConvert_PlanarFtoPlanar16F has failed with error: %d", v34);
      }
      ++v16;
      a1 += v25;
    }
    while (v36 != v16);
  }
  free(memptr);
  free(v54);
}

void MLE5Copy32ARGB_BGRTensor_CompDtypeFLOAT_CompPackFmt16(char *a1, vImagePixelCount a2, int a3, size_t a4, char *a5, const uint64_t *a6, uint64_t a7)
{
}

void MLE5Copy32BGRA_RGBTensor_CompDtypeFLOAT_CompPackFmt16(char *a1, vImagePixelCount a2, int a3, size_t a4, char *a5, const uint64_t *a6, uint64_t a7)
{
}

void MLE5Copy32BGRA_BGRTensor_CompDtypeFLOAT_CompPackFmt16(char *a1, vImagePixelCount a2, int a3, size_t a4, char *a5, const uint64_t *a6, uint64_t a7)
{
}

vImage_Error MLE5CopyOneComponent16Half_GrayTensor_CompDtypeFLOAT_CompPackFmt16(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  src.int data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  dest.int data = a5;
  dest.height = a3;
  size_t v7 = *(void *)(a6 + 8 * a7 - 16);
  dest.width = a2;
  dest.rowBytes = v7;
  vImage_Error result = vImageCopyBuffer(&src, &dest, 2uLL, 0);
  if (result)
  {
    vImage_Error v9 = result;
    unint64_t v10 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v14 = v9;
      _os_log_error_impl(&dword_19E58B000, v10, OS_LOG_TYPE_ERROR, "vImageCopyBuffer has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"vImageCopyBuffer has failed with error: %d", v9);
  }
  return result;
}

vImage_Error MLE5CopyOneComponent16Half_GrayTensor_CompDtypeFLOAT_CompPackFmt32(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  src.int data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  dest.int data = a5;
  dest.height = a3;
  size_t v7 = *(void *)(a6 + 8 * a7 - 16);
  dest.width = a2;
  dest.rowBytes = v7;
  vImage_Error result = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  if (result)
  {
    vImage_Error v9 = result;
    unint64_t v10 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v14 = v9;
      _os_log_error_impl(&dword_19E58B000, v10, OS_LOG_TYPE_ERROR, "vImageConvert_ARGB8888toPlanarF has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"vImageConvert_ARGB8888toPlanarF has failed with error: %d", v9);
  }
  return result;
}

vImage_Error MLE5CopyOneComponent8_GrayTensor_CompDtypeFLOAT_CompPackFmt32(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  src.int data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  dest.int data = a5;
  dest.height = a3;
  size_t v7 = *(void *)(a6 + 8 * a7 - 16);
  dest.width = a2;
  dest.rowBytes = v7;
  vImage_Error result = vImageConvert_Planar8toPlanarF(&src, &dest, 255.0, 0.0, 0);
  if (result)
  {
    vImage_Error v9 = result;
    unint64_t v10 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v14 = v9;
      _os_log_error_impl(&dword_19E58B000, v10, OS_LOG_TYPE_ERROR, "vImageConvert_ARGB8888toPlanarF has failed with error: %d", buf, 8u);
    }

    return objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"vImageConvert_ARGB8888toPlanarF has failed with error: %d", v9);
  }
  return result;
}

void MLE5Copy32ARGB_RGBTensor_CompDtypeFLOAT_CompPackFmt32(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  src.int data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  red.int data = a5;
  red.height = a3;
  uint64_t v8 = *(void *)(a6 + 8 * a7 - 24);
  size_t v7 = *(void *)(a6 + 8 * a7 - 16);
  red.width = a2;
  red.rowBytes = v7;
  green.int data = &a5[v8];
  green.height = a3;
  green.width = a2;
  green.rowBytes = v7;
  blue.int data = &a5[2 * v8];
  blue.height = a3;
  blue.width = a2;
  blue.rowBytes = v7;
  operator new[]();
}

void sub_19E9B3AC4(_Unwind_Exception *exception_object)
{
}

void MLE5Copy32ARGB_BGRTensor_CompDtypeFLOAT_CompPackFmt32(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  src.int data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  blue.int data = a5;
  blue.height = a3;
  uint64_t v8 = *(void *)(a6 + 8 * a7 - 24);
  size_t v7 = *(void *)(a6 + 8 * a7 - 16);
  blue.width = a2;
  blue.rowBytes = v7;
  green.int data = &a5[v8];
  green.height = a3;
  green.width = a2;
  green.rowBytes = v7;
  red.int data = &a5[2 * v8];
  red.height = a3;
  red.width = a2;
  red.rowBytes = v7;
  operator new[]();
}

void sub_19E9B3C7C(_Unwind_Exception *exception_object)
{
}

void MLE5Copy32BGRA_RGBTensor_CompDtypeFLOAT_CompPackFmt32(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  src.int data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  green.int data = a5;
  green.height = a3;
  uint64_t v8 = *(void *)(a6 + 8 * a7 - 24);
  size_t v7 = *(void *)(a6 + 8 * a7 - 16);
  green.width = a2;
  green.rowBytes = v7;
  red.int data = &a5[v8];
  red.height = a3;
  red.width = a2;
  red.rowBytes = v7;
  alpha.int data = &a5[2 * v8];
  alpha.height = a3;
  alpha.width = a2;
  alpha.rowBytes = v7;
  operator new[]();
}

void sub_19E9B3E34(_Unwind_Exception *exception_object)
{
}

void MLE5Copy32BGRA_BGRTensor_CompDtypeFLOAT_CompPackFmt32(void *a1, vImagePixelCount a2, vImagePixelCount a3, size_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  src.int data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  alpha.int data = a5;
  alpha.height = a3;
  uint64_t v8 = *(void *)(a6 + 8 * a7 - 24);
  size_t v7 = *(void *)(a6 + 8 * a7 - 16);
  alpha.width = a2;
  alpha.rowBytes = v7;
  red.int data = &a5[v8];
  red.height = a3;
  red.width = a2;
  red.rowBytes = v7;
  green.int data = &a5[2 * v8];
  green.height = a3;
  green.width = a2;
  green.rowBytes = v7;
  operator new[]();
}

void sub_19E9B3FEC(_Unwind_Exception *exception_object)
{
}

BOOL MLE5BindInputBufferObjectByRetainingPixelBuffer(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  CVPixelBufferGetIOSurface((CVPixelBufferRef)[a1 imageBufferValue]);
  MLE5NewBufferObjectUsing((__IOSurface *)&v13);
  uint64_t v7 = e5rt_io_port_bind_buffer_object();
  if (v7)
  {
    uint64_t v8 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      uint64_t v15 = last_error_message;
      __int16 v16 = 1024;
      int v17 = v7;
      _os_log_error_impl(&dword_19E58B000, v8, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a4)
    {
      vImage_Error v9 = +[MLModelErrorUtils genericErrorWithFormat:@"E5RT: %s (%d)", e5rt_get_last_error_message(), v7];
      unint64_t v10 = [v6 name];
      *a4 = +[MLModelErrorUtils errorWithCode:1, v9, @"Failed to bind the input image for feature named: %@.", v10 underlyingError format];
    }
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v13, 0);

  return v7 == 0;
}

void sub_19E9B41B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

BOOL MLE5BindInputBufferObjectByRetainingMultiArrayMemory(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = [a1 multiArrayValue];
  MLE5TensorDescriptorOf((e5rt_io_port *)&v23);
  uint64_t v24 = 0;
  uint64_t size = e5rt_tensor_desc_get_size();
  vImage_Error v9 = (void *)MEMORY[0x1E4F1C3A8];
  if (size)
  {
    unint64_t v10 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      uint64_t v26 = last_error_message;
      __int16 v27 = 1024;
      int v28 = size;
      _os_log_error_impl(&dword_19E58B000, v10, OS_LOG_TYPE_ERROR, "Failed to get size from tensor descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *v9, @"Failed to get size from tensor descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), size);
  }
  id v11 = v7;
  [v11 bytes];
  uint64_t v24 = 0;
  uint64_t v12 = e5rt_buffer_object_create_from_data_pointer();
  if (v12)
  {
    uint64_t v13 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      uint64_t v26 = v20;
      __int16 v27 = 1024;
      int v28 = v12;
      _os_log_error_impl(&dword_19E58B000, v13, OS_LOG_TYPE_ERROR, "Failed to create E5 heap-allocated buffer object from data pointer E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *v9, @"Failed to create E5 heap-allocated buffer object from data pointer E5RT: %s (%d)", e5rt_get_last_error_message(), v12);
  }
  uint64_t v22 = v24;
  uint64_t v14 = e5rt_io_port_bind_buffer_object();
  if (v14)
  {
    uint64_t v15 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      uint64_t v26 = v21;
      __int16 v27 = 1024;
      int v28 = v14;
      _os_log_error_impl(&dword_19E58B000, v15, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a4)
    {
      __int16 v16 = +[MLModelErrorUtils genericErrorWithFormat:@"E5RT: %s (%d)", e5rt_get_last_error_message(), v14];
      int v17 = [v6 name];
      *a4 = +[MLModelErrorUtils errorWithCode:1, v16, @"Failed to bind the input multi-array for feature named: %@.", v17 underlyingError format];
    }
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v22, 0);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v23);

  return v14 == 0;
}

void sub_19E9B452C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v9 = va_arg(va1, void);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va1);

  _Unwind_Resume(a1);
}

BOOL MLE5BindInputBufferObjectByRetainingMultiArraySurface(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = [a1 multiArrayValue];
  CVPixelBufferGetIOSurface((CVPixelBufferRef)[v7 pixelBuffer]);
  MLE5NewBufferObjectUsing((__IOSurface *)&v14);
  uint64_t v8 = e5rt_io_port_bind_buffer_object();
  if (v8)
  {
    uint64_t v9 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      uint64_t v16 = last_error_message;
      __int16 v17 = 1024;
      int v18 = v8;
      _os_log_error_impl(&dword_19E58B000, v9, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a4)
    {
      unint64_t v10 = +[MLModelErrorUtils genericErrorWithFormat:@"E5RT: %s (%d)", e5rt_get_last_error_message(), v8];
      id v11 = [v6 name];
      *a4 = +[MLModelErrorUtils errorWithCode:1, v10, @"Failed to bind the input multi-array for feature named: %@.", v11 underlyingError format];
    }
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v14, 0);

  return v8 == 0;
}

void sub_19E9B4764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t MLE5BindInputBufferObjectByCopyingMultiArray(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  MLE5BufferObjectBoundTo((e5rt_io_port *)&v19);
  if (!v19)
  {
    id v6 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19E58B000, v6, OS_LOG_TYPE_ERROR, "MLE5BindBufferObjectByCopyingMultiArray requires the port to have bound a buffer object.", buf, 2u);
    }

    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"MLE5BindBufferObjectByCopyingMultiArray requires the port to have bound a buffer object."];
  }
  uint64_t v7 = MLE5DataPointerOfBufferObject();
  MLE5TensorDescriptorOf((e5rt_io_port *)&v18);
  uint64_t v8 = [v5 multiArrayValue];
  uint64_t v9 = [MLMultiArray alloc];
  unint64_t v10 = MLE5MultiArrayShapeForTensor();
  uint64_t v11 = MLE5MultiArrayDataTypeForTensor();
  uint64_t v12 = MLE5MultiArrayStridesForTensor();
  uint64_t v13 = [(MLMultiArray *)v9 initWithDataPointer:v7 shape:v10 dataType:v11 strides:v12 deallocator:0 error:a4];

  if (!v13)
  {
    uint64_t v14 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *a4;
      *(_DWORD *)buf = 138412290;
      uint64_t v21 = v17;
      _os_log_error_impl(&dword_19E58B000, v14, OS_LOG_TYPE_ERROR, "Failed to create MLMultiArray: %@.", buf, 0xCu);
    }

    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3A8], @"Failed to create MLMultiArray: %@.", *a4 format];
  }
  uint64_t v15 = [v8 copyIntoMultiArray:v13 error:a4];

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v18);
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v19, 0);

  return v15;
}

void sub_19E9B4A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v7 = va_arg(va1, void);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va1, 0);

  _Unwind_Resume(a1);
}

void sub_19E9B4EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B5124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

void sub_19E9B53FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B59DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  CoreML::Specification::CoreMLModels::AudioFeaturePrint::~AudioFeaturePrint((CoreML::Specification::CoreMLModels::AudioFeaturePrint *)&a11);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  _Unwind_Resume(a1);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_19E9B62E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }

  _Unwind_Resume(a1);
}

void sub_19E9B6634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B6828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_19E9B6B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }

  _Unwind_Resume(a1);
}

void sub_19E9B6DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B6ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_19E9B6FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B7298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B744C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B7628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B77D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B7934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9B79B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B7A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B7BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B7C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9B7D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9B7DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9B80C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  std::unique_ptr<ElapsedTimeRecorder>::reset[abi:ne180100]((id **)(v12 + 48));

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13604(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 4_Block_object_dispose(&a9, 8) = 0;
  *(void *)(result + 4_Block_object_dispose(&a9, 8) = v2;
  return result;
}

id *__Block_byref_object_dispose__13605(uint64_t a1)
{
  return std::unique_ptr<ElapsedTimeRecorder>::reset[abi:ne180100]((id **)(a1 + 48));
}

void sub_19E9B821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9B82AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9B8604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B8700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B8904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B8A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B8B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B8F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B931C(_Unwind_Exception *a1)
{
  uint64_t v9 = v8;

  _Unwind_Resume(a1);
}

void sub_19E9B9554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B95E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B9660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B96E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B9760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B97E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B9860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B9918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9B99AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9B9DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19E9BA234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_19E9BA544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  vImage_Error v30 = v28;

  if (a24 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E9BB454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  MEMORY[0x19F3C1920](v22, 0x10A1C406130BDD3);
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

void sub_19E9BBB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  MEMORY[0x19F3C1920](v35, 0x10A1C40E043F9A7);
  *(void *)uint64_t v32 = v34;
  std::__tree<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::__map_value_compare<CoreML::TreeEnsembleBase::BranchMode,std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>,std::less<CoreML::TreeEnsembleBase::BranchMode>,true>,std::allocator<std::__value_type<CoreML::TreeEnsembleBase::BranchMode,unsigned long>>>::destroy(*(void **)(v32 + 32));
  *(void *)uint64_t v32 = v33;
  uint64_t v37 = *(std::__shared_weak_count **)(v32 + 16);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  MEMORY[0x19F3C1920](v32, 0x10A1C40FE531CD0);

  _Unwind_Resume(a1);
}

void sub_19E9BBE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    uint64_t v21 = __cxa_begin_catch(exception_object);
    if (v18)
    {
      (*(void (**)(void *))(*(void *)v21 + 16))(v21);
      *uint64_t v18 = +[MLModelErrorUtils genericErrorWithFormat:@"%s"];
    }
    __cxa_end_catch();
    JUMPOUT(0x19E9BBE14);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E9BC098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {

    Archiver::MMappedFile::~MMappedFile((Archiver::MMappedFile *)&a10);
    uint64_t v24 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      (*(void (**)(void *))(*(void *)v24 + 16))(v24);
      +[MLModelErrorUtils IOErrorWithFormat:@"Failed to hash the input file: %s"];
      objc_claimAutoreleasedReturnValue();
      __cxa_end_catch();
      JUMPOUT(0x19E9BC02CLL);
    }
    +[MLModelErrorUtils IOErrorWithFormat:@"Failed to hash the input file."];
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
    JUMPOUT(0x19E9BC030);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E9BCAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  if (__p) {
    operator delete(__p);
  }
  if (a30) {
    operator delete(a30);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a36) {
    operator delete(a36);
  }
  if (a39) {
    operator delete(a39);
  }
  if (a42) {
    operator delete(a42);
  }
  if (a45) {
    operator delete(a45);
  }

  _Unwind_Resume(a1);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = a1[1];
    unint64_t v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      unint64_t v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v10 = *a1 + 8 * (v4 >> 6);
        int v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      unint64_t v6 = v5 - 1;
    }
    unint64_t v7 = v6 >> 6;
    if (v5 >= 0x41) {
      unint64_t v8 = v7;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v_Block_object_dispose(&a9, 8) = 0;
    goto LABEL_10;
  }
  return a1;
}

void sub_19E9BD06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9BD444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  uint64_t v35 = *(void **)(v33 - 136);
  if (v35)
  {
    *(void *)(v33 - 12_Block_object_dispose(&a9, 8) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *(void **)(v33 - 112);
  if (v36)
  {
    *(void *)(v33 - 104) = v36;
    operator delete(v36);
  }

  _Unwind_Resume(a1);
}

uint64_t *TensorAlgebraUtils::Ndim_to_Mdim(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2 != result)
  {
    unint64_t v4 = result;
    do
    {
      if (!*v4)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](exception, "Number of elements along each dimension needs to be positive.");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      ++v4;
    }
    while (v4 != a2);
  }
  unint64_t v5 = a2 - result;
  unint64_t v6 = (a4 - (uint64_t)a3) >> 3;
  unint64_t v7 = v6 - v5;
  if (v6 <= v5)
  {
    if (v6 != 1)
    {
      uint64_t v11 = 2;
      if (v6 > 2) {
        uint64_t v11 = (a4 - (uint64_t)a3) >> 3;
      }
      uint64_t v12 = v11 - 1;
      uint64_t v13 = &a3[v6 - 1];
      uint64_t v14 = &result[v5 - 1];
      do
      {
        uint64_t v15 = *v14--;
        *v13-- = v15;
        --v12;
      }
      while (v12);
    }
    *a3 = 1;
    unint64_t v16 = v5 + 1 - v6;
    if (v16)
    {
      if (v16 <= 1) {
        unint64_t v16 = 1;
      }
      uint64_t v17 = 1;
      do
      {
        uint64_t v18 = *result++;
        v17 *= v18;
        *a3 = v17;
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = (uint64_t)&result[v5 - v6];
    do
    {
      if (v8 >= v7) {
        uint64_t v10 = *(void *)(v9 + 8 * v8);
      }
      else {
        uint64_t v10 = 1;
      }
      a3[v8++] = v10;
    }
    while (v6 != v8);
  }
  return result;
}

void sub_19E9BD6D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t TensorAlgebraUtils::computeStrides(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (a2 - result) >> 3;
  if (v4 != (a4 - a3) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Mismatch between lengths of shape and strides.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)(a3 + 8 * (v4 - 1)) = 1;
  if (v4 != 1)
  {
    uint64_t v5 = 1;
    do
    {
      v5 *= *(void *)(result - 8 + 8 * v4);
      *(void *)(a3 - 16 + 8 * v4--) = v5;
    }
    while (v4 != 1);
  }
  return result;
}

void sub_19E9BD788(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *TensorAlgebraUtils::ravel_multi_index(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  unint64_t v6 = (a4 - a3) >> 3;
  if (v6 != (a2 - (uint64_t)result) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Invalid multi_index.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *a6 = 0;
  if (a4 != a3)
  {
    uint64_t v7 = 0;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    do
    {
      uint64_t v9 = *a5++;
      uint64_t v8 = v9;
      uint64_t v10 = *result++;
      v7 += v10 * v8;
      *a6 = v7;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_19E9BD834(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t TensorAlgebraUtils::unravel_index(unint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v5 = (a3 - a2) >> 3;
  if (v5 != (a5 - (uint64_t)a4) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Invalid multi_index.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  while (--v5)
  {
    a4[v5] = result % *(void *)(a2 + 8 * v5);
    result /= *(void *)(a2 + 8 * v5);
  }
  *a4 = result;
  return result;
}

void sub_19E9BD8D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void EspressoBrickUtils::EspressoShape_to_NDShape(void *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  switch((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3)
  {
    case 1:
      uint64_t v6 = (int)[v3 width];
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a2, (char *)&v6, (uint64_t)&v7, 1uLL);
      break;
    case 2:
      uint64_t v7 = (int)objc_msgSend(v3, "width", (int)objc_msgSend(v3, "height"));
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a2, (char *)&v6, (uint64_t)&v8, 2uLL);
      break;
    case 3:
      uint64_t v7 = (int)objc_msgSend(v3, "height", (int)objc_msgSend(v3, "channels"));
      uint64_t v8 = (int)[v4 width];
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a2, (char *)&v6, (uint64_t)&v9, 3uLL);
      break;
    case 4:
      uint64_t v7 = (int)objc_msgSend(v3, "channels", (int)objc_msgSend(v3, "batch"));
      uint64_t v8 = (int)[v4 height];
      uint64_t v9 = (int)[v4 width];
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a2, (char *)&v6, (uint64_t)&v10, 4uLL);
      break;
    case 5:
      uint64_t v7 = (int)objc_msgSend(v3, "batch", (int)objc_msgSend(v3, "sequence"));
      uint64_t v8 = (int)[v4 channels];
      uint64_t v9 = (int)[v4 height];
      uint64_t v10 = (int)[v4 width];
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a2, (char *)&v6, (uint64_t)&v11, 5uLL);
      break;
    default:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3C1380](exception, "Invalid rank encountered while converting Espresso Shapes to N-dimensional shape.");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
}

void sub_19E9BDB40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    vImage_Error result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  unint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    vImage_Error result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_17:
    vImage_Error result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  void *v12 = &v9[v17];
  return result;
}

void EspressoBrickUtils::NDShape_to_EspressoShape(uint64_t **a1, void *a2)
{
  id v3 = a2;
  std::vector<unsigned long>::vector(&__p, 5uLL);
  TensorAlgebraUtils::Ndim_to_Mdim(*a1, a1[1], (uint64_t *)__p, (uint64_t)v5);
  [v3 setSequence:*(unsigned int *)__p];
  [v3 setBatch:*((unsigned int *)__p + 2)];
  [v3 setChannels:*((unsigned int *)__p + 4)];
  [v3 setHeight:*((unsigned int *)__p + 6)];
  [v3 setWidth:*((unsigned int *)__p + 8)];
  [v3 setRank:(unint64_t)((char *)a1[1] - (char *)*a1) >> 3];
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
}

void sub_19E9BDD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void EspressoBrickUtils::NSShape_to_VecShape(void *a1, void *a2)
{
  id v9 = a1;
  uint64_t v3 = [v9 count];
  uint64_t v4 = a2[1];
  if (v3 != (v4 - *a2) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3C1380](exception, "Invalid Shapes encountered while converting objective C NSArray shape to std:vector shape");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v4 != *a2)
  {
    unint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      uint64_t v7 = [v9 objectAtIndexedSubscript:v5];
      *(void *)(*a2 + 8 * v5) = [v7 unsignedIntegerValue];

      unint64_t v5 = v6++;
    }
    while (v5 < (uint64_t)(a2[1] - *a2) >> 3);
  }
}

void sub_19E9BDE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __cxa_free_exception(v10);

  _Unwind_Resume(a1);
}

uint64_t TensorAlgebraUtils::broadcasted_shape(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6 - a5;
  if (a6 != a5)
  {
    unint64_t v7 = 0;
    unint64_t v8 = (a2 - result) >> 3;
    unint64_t v9 = (a4 - a3) >> 3;
    uint64_t v10 = v6 >> 3;
    if ((unint64_t)(v6 >> 3) <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v6 >> 3;
    }
    uint64_t v12 = (unint64_t *)(a5 + 8 * v10 - 8);
    uint64_t v13 = (unint64_t *)(a3 + 8 * v9 - 8);
    uint64_t v14 = (unint64_t *)(result + 8 * v8 - 8);
    do
    {
      if (v8 > v7 && v9 > v7)
      {
        unint64_t v15 = *v14;
        unint64_t v16 = *v13;
        if (*v13 != 1 && v15 != 1 && v15 != v16)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x19F3C1380](exception, "Invalid shapes for broadcasting");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if (v15 <= v16) {
          unint64_t v15 = *v13;
        }
        unint64_t *v12 = v15;
      }
      if (v8 > v7 && v9 <= v7) {
        unint64_t *v12 = *v14;
      }
      if (v8 <= v7 && v9 > v7) {
        unint64_t *v12 = *v13;
      }
      ++v7;
      --v12;
      --v13;
      --v14;
    }
    while (v11 != v7);
  }
  return result;
}

void sub_19E9BDFA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E9BEA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26)
{
  _Unwind_Resume(a1);
}

void sub_19E9BEBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9BF130(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, void (**a6)(void), uint64_t a7, void *a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);

  a6[2]();
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);

  _Unwind_Resume(a1);
}

void sub_19E9BF3A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9BF5D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9BF814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

id NSArrayFromFloatVector(const CoreML::Specification::FloatVector *a1)
{
  uint64_t v2 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((int *)a1 + 4)];
  uint64_t v4 = *((void *)a1 + 3);
  if (v4) {
    unint64_t v5 = (_DWORD *)(v4 + 8);
  }
  else {
    unint64_t v5 = 0;
  }
  if (v4) {
    uint64_t v6 = v4 + 8 + 4 * *((int *)a1 + 4);
  }
  else {
    uint64_t v6 = 0;
  }
  for (; v5 != (_DWORD *)v6; ++v5)
  {
    LODWORD(v3) = *v5;
    unint64_t v7 = [NSNumber numberWithFloat:v3];
    [v2 addObject:v7];
  }

  return v2;
}

void sub_19E9BF940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9BF9F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9BFAF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9BFBC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9BFD00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9BFF88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9C0308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9C0D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E9C146C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19E9C1EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14755(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14756(uint64_t a1)
{
}

uint64_t anonymous namespace'::WriteMainMetadataNNv1(unsigned int a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a2) {
    uint64_t v7 = 403;
  }
  else {
    uint64_t v7 = a1;
  }
  operator<<(a4, v7);
  if (a2)
  {
    int v8 = *(_DWORD *)(a2 + 72);
    if (v8 == 1)
    {
      uint64_t v12 = operator<<(a4, 100);
      operator<<(v12, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
      uint64_t v13 = *(void *)(a2 + 104);
      if (*(void *)(a2 + 112) != v13)
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        do
        {
          operator<<(a4, (uint64_t *)(v13 + v14));
          ++v15;
          uint64_t v13 = *(void *)(a2 + 104);
          v14 += 24;
        }
        while (v15 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 112) - v13) >> 3));
      }
    }
    else if (!v8)
    {
      uint64_t v9 = operator<<(a4, 101);
      operator<<(v9, (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
      uint64_t v10 = *(void *)(a2 + 80);
      if (*(void *)(a2 + 88) != v10)
      {
        unint64_t v11 = 0;
        do
        {
          operator<<(a4, *(void *)(v10 + 8 * v11++));
          uint64_t v10 = *(void *)(a2 + 80);
        }
        while (v11 < (*(void *)(a2 + 88) - v10) >> 3);
      }
    }
    operator<<(a4, (uint64_t *)a2);
  }

  return operator<<<std::string>(a4, a3);
}

void CoreML::NNCompiler::Backend::MetadataUtils::WriteMetadataIos15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  double v3 = *(void **)(a1 + 16);
  if (v2 != v3)
  {
    uint64_t v6 = a1 + 80;
    do
    {
      uint64_t v7 = std::map<std::string,std::string>::at(v6, v2);
      unsigned int v8 = *(_DWORD *)a1;
      uint64_t v9 = *(void *)(v7 + 272);
      memset(v10, 0, sizeof(v10));
      unint64_t v11 = (void **)v10;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
      v2 += 3;
    }
    while (v2 != v3);
  }
}

void sub_19E9C241C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t MLE5PortTraitOf()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t is_tensor = e5rt_io_port_is_tensor();
  if (is_tensor)
  {
    int v1 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v8 = 1024;
      int v9 = is_tensor;
      _os_log_error_impl(&dword_19E58B000, v1, OS_LOG_TYPE_ERROR, "e5rt_io_port_is_tensor failed. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"e5rt_io_port_is_tensor failed. E5RT: %s (%d)", e5rt_get_last_error_message(), is_tensor);
  }
  uint64_t is_surface = e5rt_io_port_is_surface();
  if (is_surface)
  {
    double v3 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = v5;
      __int16 v8 = 1024;
      int v9 = is_surface;
      _os_log_error_impl(&dword_19E58B000, v3, OS_LOG_TYPE_ERROR, "e5rt_io_port_is_surface failed. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"e5rt_io_port_is_surface failed. E5RT: %s (%d)", e5rt_get_last_error_message(), is_surface);
  }
  return 0;
}

void sub_19E9C260C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5FeatureTraitOf(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 multiArrayValue];
  double v3 = v2;
  if (v2)
  {
    unsigned __int8 v4 = MLE5FeatureTraitOfMultiArray(v2);
  }
  else
  {
    uint64_t v5 = (__CVBuffer *)[v1 imageBufferValue];
    if (v5)
    {
      if (CVPixelBufferGetIOSurface(v5)) {
        unsigned __int8 v4 = 3;
      }
      else {
        unsigned __int8 v4 = 4;
      }
    }
    else
    {
      unsigned __int8 v4 = 0;
    }
  }

  return v4;
}

void sub_19E9C26AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5FeatureTraitOfMultiArray(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (__CVBuffer *)[v1 pixelBuffer];
  if (v2 && CVPixelBufferGetIOSurface(v2)) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = 2;
  }

  return v3;
}

void sub_19E9C2714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *___ZL30portCompatibilityFunctionTablev_block_invoke()
{
  LOWORD(v1) = 513;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5PortCompatibilityMultiArrayAndTensor;
  LOWORD(v1) = 257;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5PortCompatibilityMultiArrayAndTensor;
  LOWORD(v1) = 769;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5PortCompatibilityPixelBufferAndTensor;
  LOWORD(v1) = 1025;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  vImage_Error result = std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1);
  result[4] = MLE5PortCompatibilityPixelBufferAndTensor;
  return result;
}

void *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(MLFeatureValue *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *((void *)a1 + 1);
  unint64_t v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  unint64_t v8 = *((void *)&portCompatibilityFunctionTable(void)::table + 1);
  if (*((void *)&portCompatibilityFunctionTable(void)::table + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&portCompatibilityFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((void *)&portCompatibilityFunctionTable(void)::table + 1)) {
        unint64_t v2 = v7 % *((void *)&portCompatibilityFunctionTable(void)::table + 1);
      }
    }
    else
    {
      unint64_t v2 = v7 & (*((void *)&portCompatibilityFunctionTable(void)::table + 1) - 1);
    }
    uint64_t v10 = *(void ***)(portCompatibilityFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((void *)&portCompatibilityFunctionTable(void)::table + 1)) {
                v12 %= *((void *)&portCompatibilityFunctionTable(void)::table + 1);
              }
            }
            else
            {
              v12 &= *((void *)&portCompatibilityFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x28uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  float v13 = (float)(unint64_t)(qword_1E9460128 + 1);
  if (!v8 || (float)(*(float *)&dword_1E9460130 * (float)v8) < v13)
  {
    BOOL v14 = 1;
    if (v8 >= 3) {
      BOOL v14 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v8);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1E9460130);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)&portCompatibilityFunctionTable(void)::table + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)(unint64_t)qword_1E9460128 / *(float *)&dword_1E9460130);
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)&portCompatibilityFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v18 = operator new(8 * *(void *)&prime);
          uint64_t v19 = (void *)portCompatibilityFunctionTable(void)::table;
          *(void *)&portCompatibilityFunctionTable(void)::table = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)&portCompatibilityFunctionTable(void)::table + 1) = prime;
          do
            *(void *)(portCompatibilityFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void **)qword_1E9460120;
          if (qword_1E9460120)
          {
            unint64_t v22 = *(void *)(qword_1E9460120 + 8);
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(portCompatibilityFunctionTable(void)::table + 8 * v22) = &qword_1E9460120;
            for (uint64_t i = *v21; i; v22 = v28)
            {
              unint64_t v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(void *)(portCompatibilityFunctionTable(void)::table + 8 * v28))
                {
                  *(void *)(portCompatibilityFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = v21;
                  goto LABEL_57;
                }
                *uint64_t v21 = (void *)*i;
                *uint64_t i = **(void **)(portCompatibilityFunctionTable(void)::table + 8 * v28);
                **(void **)(portCompatibilityFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = i;
                uint64_t i = v21;
              }
              unint64_t v28 = v22;
LABEL_57:
              uint64_t v21 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        uint64_t v33 = (void *)portCompatibilityFunctionTable(void)::table;
        *(void *)&portCompatibilityFunctionTable(void)::table = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v8 = 0;
        *((void *)&portCompatibilityFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v29 = portCompatibilityFunctionTable(void)::table;
  vImage_Error v30 = *(void **)(portCompatibilityFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *unint64_t v11 = *v30;
LABEL_74:
    *vImage_Error v30 = v11;
    goto LABEL_75;
  }
  *unint64_t v11 = qword_1E9460120;
  qword_1E9460120 = (uint64_t)v11;
  *(void *)(v29 + 8 * v2) = &qword_1E9460120;
  if (*v11)
  {
    unint64_t v31 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8) {
        v31 %= v8;
      }
    }
    else
    {
      v31 &= v8 - 1;
    }
    vImage_Error v30 = (void *)(portCompatibilityFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1E9460128;
  return v11;
}

void sub_19E9C2C28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MLE5PortCompatibilityPixelBufferAndTensor(void *a1)
{
  long long v1 = (__CVBuffer *)[a1 imageBufferValue];
  MLE5TensorDescriptorOf((e5rt_io_port *)&v3);
  MLE5GetShapeFromTensorDescriptor();
  CVPixelBufferGetWidth(v1);
  CVPixelBufferGetHeight(v1);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v3);
  return 0;
}

void sub_19E9C2CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MLE5TensorDescriptorOf(e5rt_io_port *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = e5rt_io_port_retain_tensor_desc();
  uint64_t v3 = result;
  if (result)
  {
    uint64_t v4 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v7 = 1024;
      int v8 = v3;
      _os_log_error_impl(&dword_19E58B000, v4, OS_LOG_TYPE_ERROR, "Failed to get E5 tensor descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    uint64_t result = objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get E5 tensor descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), v3);
  }
  *(void *)a1 = 0;
  return result;
}

void sub_19E9C2E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5GetShapeFromTensorDescriptor()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t shape = e5rt_tensor_desc_get_shape();
  if (shape)
  {
    long long v1 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v5 = 1024;
      int v6 = shape;
      _os_log_error_impl(&dword_19E58B000, v1, OS_LOG_TYPE_ERROR, "Failed to get strides from tensor descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get strides from tensor descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), shape, 0);
  }
  return 0;
}

void sub_19E9C2F3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5PortCompatibilityMultiArrayAndTensor(void *a1)
{
  id v1 = a1;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v7);
  unint64_t v2 = [v1 multiArrayValue];
  uint64_t v3 = [v2 shape];
  uint64_t v4 = MLE5MultiArrayShapeForTensor();
  uint64_t v5 = [v3 isEqualToArray:v4];

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v7);
  return v5;
}

void sub_19E9C2FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MLE5TypeOfBufferObject()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t type = e5rt_buffer_object_get_type();
  if (type)
  {
    id v1 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v5 = 1024;
      int v6 = type;
      _os_log_error_impl(&dword_19E58B000, v1, OS_LOG_TYPE_ERROR, "Failed to get type of the buffer object. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get type of the buffer object. E5RT: %s (%d)", e5rt_get_last_error_message(), type);
  }
  return 0;
}

void sub_19E9C313C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5IOSurfaceOfBufferObject()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t iosurface = e5rt_buffer_object_get_iosurface();
  if (iosurface)
  {
    id v1 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v5 = 1024;
      int v6 = iosurface;
      _os_log_error_impl(&dword_19E58B000, v1, OS_LOG_TYPE_ERROR, "Failed to get buffer object's IOSurface. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get buffer object's IOSurface. E5RT: %s (%d)", e5rt_get_last_error_message(), iosurface);
  }
  return 0;
}

void sub_19E9C3254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5DataPointerOfBufferObject()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t data_ptr = e5rt_buffer_object_get_data_ptr();
  if (data_ptr)
  {
    id v1 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v5 = 1024;
      int v6 = data_ptr;
      _os_log_error_impl(&dword_19E58B000, v1, OS_LOG_TYPE_ERROR, "Failed to get buffer object's base pointer. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get buffer object's base pointer. E5RT: %s (%d)", e5rt_get_last_error_message(), data_ptr);
  }
  return 0;
}

void sub_19E9C336C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5GetStridesFromTensorDescriptor()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t strides = e5rt_tensor_desc_get_strides();
  if (strides)
  {
    id v1 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v5 = 1024;
      int v6 = strides;
      _os_log_error_impl(&dword_19E58B000, v1, OS_LOG_TYPE_ERROR, "Failed to get strides from tensor descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get strides from tensor descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), strides, 0);
  }
  return 0;
}

void sub_19E9C3490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5GetRankFromTensorDescriptor()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t rank = e5rt_tensor_desc_get_rank();
  if (rank)
  {
    id v1 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v5 = 1024;
      int v6 = rank;
      _os_log_error_impl(&dword_19E58B000, v1, OS_LOG_TYPE_ERROR, "Failed to get rank from tensor descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get rank from tensor descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), rank);
  }
  return 0;
}

void sub_19E9C35A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5GetWidthFromSurfaceDescriptor()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t width = e5rt_surface_desc_get_width();
  if (width)
  {
    id v1 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v5 = 1024;
      int v6 = width;
      _os_log_error_impl(&dword_19E58B000, v1, OS_LOG_TYPE_ERROR, "Failed to get width from E5 surface descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get width from E5 surface descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), width);
  }
  return 0;
}

void sub_19E9C36C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5GetHeightFromSurfaceDescriptor()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t height = e5rt_surface_desc_get_height();
  if (height)
  {
    id v1 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v5 = 1024;
      int v6 = height;
      _os_log_error_impl(&dword_19E58B000, v1, OS_LOG_TYPE_ERROR, "Failed to get height from E5 surface descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get height from E5 surface descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), height);
  }
  return 0;
}

void sub_19E9C37D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5GetSurfaceFormatFromSurfaceDescriptor()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t format = e5rt_surface_desc_get_format();
  if (format)
  {
    id v1 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v5 = 1024;
      int v6 = format;
      _os_log_error_impl(&dword_19E58B000, v1, OS_LOG_TYPE_ERROR, "Failed to get the surface format from E5 surface descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get the surface format from E5 surface descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), format);
  }
  return 0;
}

void sub_19E9C38F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL MLE5BindEmptyMemoryObjectToPort(uint64_t a1, void *a2, __CVBuffer **a3, void *a4)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  if (v6 && !a3)
  {
    uint64_t v7 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19E58B000, v7, OS_LOG_TYPE_ERROR, "temporarilyBoundPixelBuffer must be non-NULL if pixelBufferPool is used.", buf, 2u);
    }

    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"temporarilyBoundPixelBuffer must be non-NULL if pixelBufferPool is used."];
  }
  int v8 = MLE5PortTraitOf();
  switch(v8)
  {
    case 0:
      BOOL v14 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_19E58B000, v14, OS_LOG_TYPE_ERROR, "Unable to bind a memory object to the underlying buffer due to the unknown port type. It is a broken or unsupported model.", buf, 2u);
      }

      if (a4)
      {
        unint64_t v15 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v60 = *MEMORY[0x1E4F28568];
        id v9 = [NSString stringWithFormat:@"Unable to bind a memory object to the underlying buffer due to the unknown port type. It is a broken or unsupported model."];
        id v61 = v9;
        unint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v61 forKeys:&v60 count:1];
        *a4 = [v15 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v16];

        BOOL v17 = 0;
LABEL_79:

        goto LABEL_80;
      }
      BOOL v17 = 0;
      goto LABEL_80;
    case 1:
      id v9 = v6;
      MLE5TensorDescriptorOf((e5rt_io_port *)&v58);
      uint64_t v57 = 0;
      uint64_t v18 = v58;
      if (!v6) {
        goto LABEL_68;
      }
      *(void *)buf = 0;
      uint64_t ShapeFromTensorDescriptor = MLE5GetShapeFromTensorDescriptor();
      if (*(void *)buf)
      {
        uint64_t v20 = (unint64_t *)ShapeFromTensorDescriptor;
        uint64_t v21 = ShapeFromTensorDescriptor + 8 * *(void *)buf;
        unint64_t v55 = *(void *)(v21 - 8);
        if (*(void *)buf != 1 && ShapeFromTensorDescriptor != v21 - 8)
        {
          uint64_t v22 = 8 * *(void *)buf - 8;
          unint64_t v23 = 1;
          do
          {
            unint64_t v23 = CoreML::SafeMultiplies<unsigned long>::operator()(v23, *v20++);
            v22 -= 8;
          }
          while (v22);
          goto LABEL_30;
        }
      }
      else
      {
        unint64_t v55 = 1;
      }
      unint64_t v23 = 1;
LABEL_30:
      *(void *)buf = 0;
      uint64_t StridesFromTensorDescriptor = MLE5GetStridesFromTensorDescriptor();
      uint8x8_t v25 = (unint64_t *)StridesFromTensorDescriptor;
      if (*(void *)buf >= 2uLL
        && (*(void *)(StridesFromTensorDescriptor + 8 * *(void *)buf - 16) & 0x3FLL) != 0)
      {
        uint64_t v26 = (unint64_t *)MLE5GetShapeFromTensorDescriptor();
        unint64_t v27 = CoreML::SafeMultiplies<unsigned long>::operator()(*v25, *v26);
        {
          int v28 = 0;
          unint64_t v29 = v27 >> 1;
        }
        {
          int v28 = 0;
          unint64_t v29 = v27 >> 2;
        }
        else
        {
          int v28 = 0;
          unint64_t v29 = v55;
          if (v38) {
            unint64_t v29 = v27;
          }
        }
        unint64_t v55 = v29;
        unint64_t v23 = 1;
      }
      else
      {
        int v28 = 1;
      }
      uint64_t v39 = 1278226488;
      {
        uint64_t v39 = 1278226536;
      }
      {
        uint64_t v39 = 1278226534;
      }
      {
        goto LABEL_68;
      }
      vImagePixelCount v40 = (__CVBuffer *)objc_msgSend(v9, "createPixelBufferWithSize:pixelFormatType:error:", v39, 0, (double)v55, (double)v23);
      vDSP_Length v41 = v40;
      if (v40)
      {
        if (*(void *)buf > 1uLL) {
          int v42 = v28;
        }
        else {
          int v42 = 0;
        }
        if (v42 == 1 && (unint64_t v43 = v25[*(void *)buf - 2], v43 != CVPixelBufferGetBytesPerRow(v40)))
        {
          CVPixelBufferRelease(v41);
        }
        else
        {
          CVPixelBufferGetIOSurface(v41);
          MLE5NewBufferObjectUsing((__IOSurface *)&v59);
          uint64_t v44 = v59;
          uint64_t v59 = 0;
          std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v57, v44);
          std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v59, 0);
          *a3 = v41;
          if (v57)
          {
LABEL_73:
            uint64_t v47 = e5rt_io_port_bind_buffer_object();
            BOOL v17 = v47 == 0;
            if (v47)
            {
              uint64_t v48 = +[MLLogging coreChannel];
              if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
              {
                uint64_t last_error_message = e5rt_get_last_error_message();
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = last_error_message;
                __int16 v63 = 1024;
                int v64 = v47;
                _os_log_error_impl(&dword_19E58B000, v48, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
              }

              if (a4)
              {
                uint64_t v49 = +[MLModelErrorUtils genericErrorWithFormat:@"E5RT: %s (%d)", e5rt_get_last_error_message(), v47];
                *a4 = +[MLModelErrorUtils errorWithCode:1 underlyingError:v49 format:@"Unable to allocate and bind the buffer object. It can be a system level error such as out-of-memory errors, or the model is broken or unsupported."];
              }
            }
            std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v57, 0);
            std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v58);
            goto LABEL_79;
          }
        }
      }
LABEL_68:
      uint64_t v59 = 0;
      uint64_t v45 = e5rt_tensor_desc_alloc_buffer_object();
      if (v45)
      {
        vImage_Buffer v46 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          uint64_t v53 = e5rt_get_last_error_message();
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v53;
          __int16 v63 = 1024;
          int v64 = v45;
          _os_log_error_impl(&dword_19E58B000, v46, OS_LOG_TYPE_ERROR, "Failed to allocate E5 buffer object. E5RT: %s (%d)", buf, 0x12u);
        }

        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to allocate E5 buffer object. E5RT: %s (%d)", e5rt_get_last_error_message(), v45);
      }
      uint64_t v56 = 0;
      std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v57, v59);
      std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v56, 0);
      goto LABEL_73;
    case 2:
      id v9 = v6;
      MLE5SurfaceDescriptorOf((e5rt_io_port *)&v58);
      if (v6)
      {
        uint64_t WidthFromSurfaceDescriptor = MLE5GetWidthFromSurfaceDescriptor();
        uint64_t HeightFromSurfaceDescriptor = MLE5GetHeightFromSurfaceDescriptor();
        int SurfaceFormatFromSurfaceDescriptor = MLE5GetSurfaceFormatFromSurfaceDescriptor();
        uint64_t v13 = 1278226488;
        switch(SurfaceFormatFromSurfaceDescriptor)
        {
          case 1:
            goto LABEL_36;
          case 2:
            uint64_t v13 = 1111970369;
LABEL_36:
            vImage_Error v30 = (__CVBuffer *)objc_msgSend(v9, "createPixelBufferWithSize:pixelFormatType:error:", v13, 0, (double)(unint64_t)WidthFromSurfaceDescriptor, (double)(unint64_t)HeightFromSurfaceDescriptor);
            unint64_t v31 = v30;
            uint64_t v57 = 0;
            if (v30)
            {
              CVPixelBufferGetIOSurface(v30);
              MLE5NewSurfaceObjectUsing((__IOSurface *)buf);
              uint64_t v32 = *(void *)buf;
              *(void *)buf = 0;
              std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100](&v57, v32);
              std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100]((uint64_t *)buf, 0);
              *a3 = v31;
LABEL_43:
              uint64_t v35 = e5rt_io_port_bind_surface_object();
              BOOL v17 = v35 == 0;
              if (v35)
              {
                uint64_t v36 = +[MLLogging coreChannel];
                if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v51 = e5rt_get_last_error_message();
                  *(_DWORD *)buf = 136315394;
                  *(void *)&uint8_t buf[4] = v51;
                  __int16 v63 = 1024;
                  int v64 = v35;
                  _os_log_error_impl(&dword_19E58B000, v36, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
                }

                if (a4)
                {
                  uint64_t v37 = +[MLModelErrorUtils genericErrorWithFormat:@"E5RT: %s (%d)", e5rt_get_last_error_message(), v35];
                  *a4 = +[MLModelErrorUtils errorWithCode:1 underlyingError:v37 format:@"Unable to allocate and bind the surface object. It can be a system level error such as out-of-memory errors, or the model is broken or unsupported."];
                }
              }
              std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100](&v57, 0);
              std::unique_ptr<e5rt_surface_desc,MLE5ObjectDeleter<e5rt_surface_desc>>::reset[abi:ne180100](&v58);
              goto LABEL_79;
            }
LABEL_38:
            uint64_t v59 = 0;
            uint64_t v33 = e5rt_surface_object_alloc();
            if (v33)
            {
              uint64_t v34 = +[MLLogging coreChannel];
              if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
              {
                uint64_t v54 = e5rt_get_last_error_message();
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = v54;
                __int16 v63 = 1024;
                int v64 = v33;
                _os_log_error_impl(&dword_19E58B000, v34, OS_LOG_TYPE_ERROR, "Failed to create E5 surface object from surface descriptor. E5RT: %s (%d)", buf, 0x12u);
              }

              objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to create E5 surface object from surface descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), v33);
            }
            uint64_t v56 = 0;
            std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100](&v57, v59);
            std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100](&v56, 0);
            goto LABEL_43;
          case 7:
            uint64_t v13 = 1278226536;
            goto LABEL_36;
        }
      }
      uint64_t v57 = 0;
      goto LABEL_38;
  }
  BOOL v17 = 1;
LABEL_80:

  return v17;
}

void sub_19E9C41AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va1);

  _Unwind_Resume(a1);
}

BOOL anonymous namespace'::tensorUsesSameMemoryLayoutAsPixelFormatType(uint64_t a1, int a2)
{
  MLE5PixelBufferAndTensorStrategyKey::MLE5PixelBufferAndTensorStrategyKey((uint64_t)&v8, a2);
  {
    *(_OWORD *)&qword_1EB4DCD80 = 0u;
    dword_1EB4DCD90 = 1065353216;
  }
  {
    unint64_t v2 = v9 ^ v8 ^ v10;
                                        + 8));
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ v8 ^ v10;
    }
    else
    {
               - 1);
    }
    if (i)
    {
      for (uint64_t i = (uint64_t *)*i; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v6 = i[1];
        if (v2 == v6)
        {
          if (*((_DWORD *)i + 8) == v10 && i[3] == v9 && *((_DWORD *)i + 4) == v8) {
            return i != 0;
          }
        }
        else
        {
          if (v3.u32[0] > 1uLL)
          {
                       + 1))
          }
          else
          {
                - 1;
          }
          if (v6 != v4) {
            goto LABEL_23;
          }
        }
      }
    }
  }
  else
  {
LABEL_23:
    uint64_t i = 0;
  }
  return i != 0;
}

uint64_t MLE5NewBufferObjectUsing(__IOSurface *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = e5rt_buffer_object_create_from_iosurface();
  uint64_t v3 = result;
  if (result)
  {
    unint64_t v4 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v7 = 1024;
      int v8 = v3;
      _os_log_error_impl(&dword_19E58B000, v4, OS_LOG_TYPE_ERROR, "Failed to create E5 buffer object from IOSurface. E5RT: %s (%d)", buf, 0x12u);
    }

    uint64_t result = objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to create E5 buffer object from IOSurface. E5RT: %s (%d)", e5rt_get_last_error_message(), v3);
  }
  *(void *)a1 = 0;
  return result;
}

void sub_19E9C4564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5SurfaceDescriptorOf(e5rt_io_port *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = e5rt_io_port_retain_surface_desc();
  uint64_t v3 = result;
  if (result)
  {
    unint64_t v4 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v7 = 1024;
      int v8 = v3;
      _os_log_error_impl(&dword_19E58B000, v4, OS_LOG_TYPE_ERROR, "Failed to get E5 surface descriptor. E5RT: %s (%d)", buf, 0x12u);
    }

    uint64_t result = objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get E5 surface descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), v3);
  }
  *(void *)a1 = 0;
  return result;
}

void sub_19E9C4694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5NewSurfaceObjectUsing(__IOSurface *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = e5rt_surface_object_create_from_iosurface();
  uint64_t v3 = result;
  if (result)
  {
    unint64_t v4 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v7 = 1024;
      int v8 = v3;
      _os_log_error_impl(&dword_19E58B000, v4, OS_LOG_TYPE_ERROR, "Failed to create E5 surface object from IOSurface. E5RT: %s (%d)", buf, 0x12u);
    }

    uint64_t result = objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to create E5 surface object from IOSurface. E5RT: %s (%d)", e5rt_get_last_error_message(), v3);
  }
  *(void *)a1 = 0;
  return result;
}

void sub_19E9C47BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_146pixelBufferSurfaceAndTensorDirectBindableTableEv_block_invoke()
{
  int v2 = 1278226536;
  uint64_t v1 = 0;
  int v0 = 28;
  std::__hash_table<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,std::allocator<MLE5PixelBufferAndTensorStrategyKey>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey>(&v0, (uint64_t)&v0);
  int v2 = 1278226534;
  uint64_t v1 = 0;
  int v0 = 52;
  std::__hash_table<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,std::allocator<MLE5PixelBufferAndTensorStrategyKey>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey>(&v0, (uint64_t)&v0);
  int v2 = 1278226488;
  uint64_t v1 = 0;
  int v0 = 0;
  std::__hash_table<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,std::allocator<MLE5PixelBufferAndTensorStrategyKey>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey>(&v0, (uint64_t)&v0);
}

void std::__hash_table<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey::hash,std::equal_to<MLE5PixelBufferAndTensorStrategyKey>,std::allocator<MLE5PixelBufferAndTensorStrategyKey>>::__emplace_unique_key_args<MLE5PixelBufferAndTensorStrategyKey,MLE5PixelBufferAndTensorStrategyKey>(int *a1, uint64_t a2)
{
  unsigned int v4 = a1[4];
  uint64_t v5 = *((void *)a1 + 1);
  int v6 = *a1;
  unint64_t v7 = v5 ^ *a1 ^ v4;
  {
                                        + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = v5 ^ v6 ^ v4;
    }
    else
    {
               - 1);
    }
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 8) == v4 && i[3] == v5 && *((_DWORD *)i + 4) == v6) {
            return;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
                        + 1))
          }
          else
          {
                 - 1;
          }
          if (v12 != v2) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = operator new(0x28uLL);
  *uint64_t v13 = 0;
  v13[1] = v7;
  *((_OWORD *)v13 + 1) = *(_OWORD *)a2;
  v13[4] = *(void *)(a2 + 16);
  float v14 = (float)(unint64_t)(qword_1EB4DCD88 + 1);
  if (!v8 || (float)(*(float *)&dword_1EB4DCD90 * (float)v8) < v14)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v14 / *(float *)&dword_1EB4DCD90);
    if (v16 <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    else {
      int8x8_t prime = (int8x8_t)v16;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)qword_1EB4DCD88 / *(float *)&dword_1EB4DCD90);
      if (v8 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (*(void *)&prime <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime >= v8)
      {
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v19 = operator new(8 * *(void *)&prime);
          if (v20) {
            operator delete(v20);
          }
          uint64_t v21 = 0;
          do
          while (*(void *)&prime != v21);
          uint64_t v22 = (void **)qword_1EB4DCD80;
          if (qword_1EB4DCD80)
          {
            unint64_t v23 = *(void *)(qword_1EB4DCD80 + 8);
            uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            for (j = *v22; j; unint64_t v23 = v29)
            {
              unint64_t v29 = j[1];
              if (v24.u32[0] > 1uLL)
              {
                if (v29 >= *(void *)&prime) {
                  v29 %= *(void *)&prime;
                }
              }
              else
              {
                v29 &= *(void *)&prime - 1;
              }
              if (v29 != v23)
              {
                                + 8 * v29))
                {
                            + 8 * v29) = v22;
                  goto LABEL_57;
                }
                void *v22 = (void *)*j;
                                 + 8 * v29);
                            + 8 * v29) = j;
                uint64_t j = v22;
              }
              unint64_t v29 = v23;
LABEL_57:
              uint64_t v22 = (void **)j;
              uint64_t j = (void *)*j;
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        if (v33) {
          operator delete(v33);
        }
        unint64_t v8 = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  if (v31)
  {
    *uint64_t v13 = *v31;
LABEL_74:
    void *v31 = v13;
    goto LABEL_75;
  }
  *uint64_t v13 = qword_1EB4DCD80;
  qword_1EB4DCD80 = (uint64_t)v13;
  *(void *)(v30 + 8 * v2) = &qword_1EB4DCD80;
  if (*v13)
  {
    unint64_t v32 = *(void *)(*v13 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v32 >= v8) {
        v32 %= v8;
      }
    }
    else
    {
      v32 &= v8 - 1;
    }
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1EB4DCD88;
}

void sub_19E9C4C80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MLE5CompareTensorAndPixelBufferMemoryLayout(uint64_t a1, __CVBuffer *a2, void *a3)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t ShapeFromTensorDescriptor = (uint64_t *)MLE5GetShapeFromTensorDescriptor();
  CVPixelBufferGetWidth(a2);
  CVPixelBufferGetHeight(a2);
  if (a3)
  {
    int v6 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      float v14 = MLE5ArrayOfNumbers<unsigned long>(ShapeFromTensorDescriptor, 0);
      BOOL v15 = [v14 componentsJoinedByString:@" x "];
      *(_DWORD *)buf = 138412290;
      unint64_t v17 = v15;
      _os_log_error_impl(&dword_19E58B000, v6, OS_LOG_TYPE_ERROR, "ML Program's shape is %@, which doesn't have enough dimensions to map width and height.", buf, 0xCu);
    }
    unint64_t v7 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v18 = *MEMORY[0x1E4F28568];
    unint64_t v8 = NSString;
    uint8x8_t v9 = MLE5ArrayOfNumbers<unsigned long>(ShapeFromTensorDescriptor, 0);
    unsigned int v10 = [v9 componentsJoinedByString:@" x "];
    unint64_t v11 = [v8 stringWithFormat:@"ML Program's shape is %@, which doesn't have enough dimensions to map width and height.", v10];
    v19[0] = v11;
    unint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
    *a3 = [v7 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v12];
  }
  return 0;
}

void sub_19E9C5188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id MLE5ArrayOfNumbers<unsigned long>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  for (uint64_t i = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:a2]; v2; --v2)
  {
    uint64_t v5 = *a1++;
    int v6 = [NSNumber numberWithUnsignedLong:v5];
    [i addObject:v6];
  }

  return i;
}

void sub_19E9C52D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5CompareTensorAndMultiArrayMemoryLayout(uint64_t a1, void *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  uint64_t v5 = [v4 shape];
  int v6 = MLE5MultiArrayShapeForTensor();
  if ([v5 isEqualToArray:v6])
  {
    uint64_t v7 = MLE5MultiArrayDataTypeForTensor();
    if (v7 == [v4 dataType])
    {
      unint64_t v8 = [v4 strides];
      uint8x8_t v9 = MLE5MultiArrayStridesForTensor();
      if ([v8 isEqualToArray:v9]) {
        LOBYTE(a3) = 1;
      }
      else {
        LOBYTE(a3) = 2;
      }
    }
    else
    {
      LOBYTE(a3) = 2;
    }
  }
  else
  {
    unsigned int v10 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = [v5 componentsJoinedByString:@" x "];
      uint64_t v19 = [v6 componentsJoinedByString:@" x "];
      *(_DWORD *)buf = 138412546;
      unint64_t v23 = v18;
      __int16 v24 = 2112;
      unint64_t v25 = v19;
      _os_log_error_impl(&dword_19E58B000, v10, OS_LOG_TYPE_ERROR, "MultiArray shape %@ doesn't match ML Program's expected shape %@.", buf, 0x16u);
    }
    if (a3)
    {
      unint64_t v11 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v20 = *MEMORY[0x1E4F28568];
      unint64_t v12 = NSString;
      uint64_t v13 = [v5 componentsJoinedByString:@" x "];
      float v14 = [v6 componentsJoinedByString:@" x "];
      BOOL v15 = [v12 stringWithFormat:@"MultiArray shape %@ doesn't match ML Program's expected shape %@.", v13, v14];
      uint64_t v21 = v15;
      unint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v21 forKeys:&v20 count:1];
      *a3 = [v11 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v16];

      LOBYTE(a3) = 0;
    }
  }

  return a3;
}

void sub_19E9C5584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *MLE5CopyPixelBufferOwningSurfaceOfPort(uint64_t a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  MLE5SurfaceDescriptorOf((e5rt_io_port *)&v41);
  if (v41)
  {
    *(void *)buf = 0;
    uint64_t v3 = e5rt_io_port_retain_surface_object();
    uint64_t v4 = v3;
    if (v3)
    {
      if (v3 == 2)
      {
        vImagePixelCount v40 = 0;
        goto LABEL_23;
      }
      uint8x8_t v9 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t last_error_message = e5rt_get_last_error_message();
        *(_DWORD *)pixelBufferOut = 136315394;
        *(void *)&pixelBufferOut[4] = last_error_message;
        __int16 v52 = 1024;
        int v53 = v4;
        _os_log_error_impl(&dword_19E58B000, v9, OS_LOG_TYPE_ERROR, "Failed to retain surface object associated with the port E5RT: %s (%d)", pixelBufferOut, 0x12u);
      }

      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to retain surface object associated with the port E5RT: %s (%d)", e5rt_get_last_error_message(), v4);
    }
    vImagePixelCount v40 = *(__IOSurface **)buf;
    if (*(void *)buf)
    {
      *(void *)buf = 0;
      uint64_t iosurface = e5rt_surface_object_get_iosurface();
      if (iosurface)
      {
        unint64_t v11 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          uint64_t v36 = e5rt_get_last_error_message();
          *(_DWORD *)pixelBufferOut = 136315394;
          *(void *)&pixelBufferOut[4] = v36;
          __int16 v52 = 1024;
          int v53 = iosurface;
          _os_log_error_impl(&dword_19E58B000, v11, OS_LOG_TYPE_ERROR, "Failed to get surface object's IOSurface. E5RT: %s (%d)", pixelBufferOut, 0x12u);
        }

        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get surface object's IOSurface. E5RT: %s (%d)", e5rt_get_last_error_message(), iosurface);
      }
      unint64_t v12 = *(__IOSurface **)buf;
      *(_DWORD *)buf = 0;
      uint64_t format = e5rt_surface_desc_get_format();
      if (format)
      {
        float v14 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          uint64_t v37 = e5rt_get_last_error_message();
          *(_DWORD *)pixelBufferOut = 136315394;
          *(void *)&pixelBufferOut[4] = v37;
          __int16 v52 = 1024;
          int v53 = format;
          _os_log_error_impl(&dword_19E58B000, v14, OS_LOG_TYPE_ERROR, "Failed to get format from E5 surface descriptor. E5RT: %s (%d)", pixelBufferOut, 0x12u);
        }

        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get format from E5 surface descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), format);
      }
      if ((*(_DWORD *)buf - 1) > 2) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = *(unsigned int *)&a800largb[4 * (*(_DWORD *)buf - 1)];
      }
      *(void *)buf = 0;
      uint64_t width = e5rt_surface_desc_get_width();
      if (width)
      {
        uint64_t v21 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v38 = e5rt_get_last_error_message();
          *(_DWORD *)pixelBufferOut = 136315394;
          *(void *)&pixelBufferOut[4] = v38;
          __int16 v52 = 1024;
          int v53 = width;
          _os_log_error_impl(&dword_19E58B000, v21, OS_LOG_TYPE_ERROR, "Failed to get width from E5 surface descriptor. E5RT: %s (%d)", pixelBufferOut, 0x12u);
        }

        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get width from E5 surface descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), width);
      }
      unint64_t v42 = 0;
      uint64_t height = e5rt_surface_desc_get_height();
      if (height)
      {
        unint64_t v23 = +[MLLogging coreChannel];
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          uint64_t v39 = e5rt_get_last_error_message();
          *(_DWORD *)pixelBufferOut = 136315394;
          *(void *)&pixelBufferOut[4] = v39;
          __int16 v52 = 1024;
          int v53 = height;
          _os_log_error_impl(&dword_19E58B000, v23, OS_LOG_TYPE_ERROR, "Failed to get width from E5 surface descriptor. E5RT: %s (%d)", pixelBufferOut, 0x12u);
        }

        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get width from E5 surface descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), height);
      }
      unint64_t v24 = *(void *)buf;
      unint64_t v25 = v42;
      v45[0] = *MEMORY[0x1E4F24D70];
      uint64_t v26 = [NSNumber numberWithUnsignedInt:v15];
      v46[0] = v26;
      v45[1] = *MEMORY[0x1E4F24E10];
      uint64_t v27 = [NSNumber numberWithDouble:(double)v24];
      v46[1] = v27;
      v45[2] = *MEMORY[0x1E4F24D08];
      int v28 = [NSNumber numberWithDouble:(double)v25];
      v46[2] = v28;
      CFDictionaryRef v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v46 forKeys:v45 count:3];

      *(void *)pixelBufferOut = 0;
      uint64_t v29 = CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12, v18, (CVPixelBufferRef *)pixelBufferOut);
      if (!v29)
      {
        a2 = *(void **)pixelBufferOut;
        goto LABEL_43;
      }
      uint64_t v30 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v29;
        _os_log_error_impl(&dword_19E58B000, v30, OS_LOG_TYPE_ERROR, "Failed to create a pixel buffer from the ML Program. (CoreVideo error code: %d.)", buf, 8u);
      }

      if (!a2) {
        goto LABEL_43;
      }
      unint64_t v31 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v43 = *MEMORY[0x1E4F28568];
      unint64_t v32 = objc_msgSend(NSString, "stringWithFormat:", @"Failed to create a pixel buffer from the ML Program. (CoreVideo error code: %d.)", v29);
      uint64_t v44 = v32;
      uint64_t v33 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v44 forKeys:&v43 count:1];
      *a2 = [v31 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v33];

LABEL_41:
      a2 = 0;
LABEL_43:

LABEL_44:
      std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100]((uint64_t *)&v40, 0);
      goto LABEL_45;
    }
LABEL_23:
    unint64_t v16 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)pixelBufferOut = 0;
      _os_log_error_impl(&dword_19E58B000, v16, OS_LOG_TYPE_ERROR, "This ML Program is expected to have an image feature, but doesn't have the underlying buffer for that.", pixelBufferOut, 2u);
    }

    if (!a2) {
      goto LABEL_44;
    }
    unint64_t v17 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v47 = *MEMORY[0x1E4F28568];
    CFDictionaryRef v18 = [NSString stringWithFormat:@"This ML Program is expected to have an image feature, but doesn't have the underlying buffer for that."];
    CFDictionaryRef v48 = v18;
    uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v48 forKeys:&v47 count:1];
    *a2 = [v17 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v19];

    goto LABEL_41;
  }
  uint64_t v5 = +[MLLogging coreChannel];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)pixelBufferOut = 0;
    _os_log_error_impl(&dword_19E58B000, v5, OS_LOG_TYPE_ERROR, "This ML Program is expected to have an image feature, but doesn't have one.", pixelBufferOut, 2u);
  }

  if (a2)
  {
    int v6 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v49 = *MEMORY[0x1E4F28568];
    uint64_t v7 = [NSString stringWithFormat:@"This ML Program is expected to have an image feature, but doesn't have one."];
    uint64_t v50 = v7;
    unint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v50 forKeys:&v49 count:1];
    *a2 = [v6 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v8];

    a2 = 0;
  }
LABEL_45:
  std::unique_ptr<e5rt_surface_desc,MLE5ObjectDeleter<e5rt_surface_desc>>::reset[abi:ne180100](&v41);
  return a2;
}

void sub_19E9C5DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v8 = va_arg(va1, void);

  std::unique_ptr<e5rt_surface_object,MLE5ObjectDeleter<e5rt_surface_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::unique_ptr<e5rt_surface_desc,MLE5ObjectDeleter<e5rt_surface_desc>>::reset[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t MLE5TensorDataTypeOf(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = e5rt_tensor_desc_retain_dtype();
  uint64_t v3 = result;
  if (result)
  {
    uint64_t v4 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v7 = 1024;
      int v8 = v3;
      _os_log_error_impl(&dword_19E58B000, v4, OS_LOG_TYPE_ERROR, "Failed to get data type of the tensor. E5RT: %s (%d)", buf, 0x12u);
    }

    uint64_t result = objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to get data type of the tensor. E5RT: %s (%d)", e5rt_get_last_error_message(), v3);
  }
  *a1 = 0;
  return result;
}

void sub_19E9C600C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLE5BufferObjectBoundTo(e5rt_io_port *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = e5rt_io_port_retain_buffer_object();
  uint64_t v3 = result;
  if (result && result != 2)
  {
    uint64_t v4 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t last_error_message = e5rt_get_last_error_message();
      __int16 v7 = 1024;
      int v8 = v3;
      _os_log_error_impl(&dword_19E58B000, v4, OS_LOG_TYPE_ERROR, "Failed to retain buffer object associated with the port E5RT: %s (%d)", buf, 0x12u);
    }

    uint64_t result = objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3A8], @"Failed to retain buffer object associated with the port E5RT: %s (%d)", e5rt_get_last_error_message(), v3);
  }
  *(void *)a1 = 0;
  return result;
}

void sub_19E9C614C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9C6248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9C639C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9C7DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9C81E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9C83F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9C85A4(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19E9C8828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9C8B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9C8EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9C92D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9C93BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9C9848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9C9930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unsigned int v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)MLE5OutputPortBinder;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19E9C9A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9CA858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose((const void *)(v59 - 224), 8);
  _Block_object_dispose((const void *)(v59 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15560(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15561(uint64_t a1)
{
}

void sub_19E9CB458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19E9CB4FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9CB5B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9CB728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9CB85C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::addMLProgramToCompiledModel(void *a1, void *a2, char a3, void *a4, void *a5)
{
  v67[1] = *MEMORY[0x1E4F143B8];
  id v8 = a1;
  id v53 = a2;
  id v54 = a4;
  uint64_t v56 = v8;
  uint64_t v55 = [v8 URLByAppendingPathComponent:@"model.espresso.net"];
  uint64_t v9 = [MEMORY[0x1E4F28CB8] defaultManager];
  unsigned int v10 = [v55 path];
  LODWORD(v_Block_object_dispose(&a9, 8) = [v9 fileExistsAtPath:v10];

  if (v8)
  {
    id v11 = [v56 path];
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v11 UTF8String]);
    CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::UpgradeNeuralNetworkToMIL((uint64_t)v65, (char *)__p);
    if (SBYTE7(v61) < 0) {
      operator delete(__p[0]);
    }

    unint64_t v12 = (void *)MEMORY[0x1E4F1CB10];
    if (v66 >= 0) {
      uint64_t v13 = v65;
    }
    else {
      uint64_t v13 = (void **)v65[0];
    }
    float v14 = [NSString stringWithUTF8String:v13];
    uint64_t v15 = [v12 fileURLWithPath:v14];
    v67[0] = v15;
    id v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v67 count:1];
    id v17 = v53;
    CFDictionaryRef v18 = [v17 outputFiles];
    BOOL v19 = v18 == 0;

    if (v19)
    {
      [v17 setOutputFiles:v16];
    }
    else
    {
      uint64_t v20 = [v17 outputFiles];
      uint64_t v21 = [v20 arrayByAddingObjectsFromArray:v16];
      [v17 setOutputFiles:v21];
    }
    [v54 setMilUpgradeStatus:&unk_1EF11A538];
    if (v66 < 0) {
      operator delete(v65[0]);
    }
    char v45 = 1;
  }
  else
  {
    uint64_t v50 = [v56 URLByAppendingPathComponent:@"model0"];
    uint64_t v22 = [MEMORY[0x1E4F28CB8] defaultManager];
    unint64_t v23 = [v50 path];
    int v24 = [v22 fileExistsAtPath:v23];

    if (v24)
    {
      id v59 = v56;
      id v57 = v53;
      id v58 = v54;
      uint64_t v51 = objc_opt_new();
      uint64_t v25 = 0;
      char v52 = 0;
      do
      {
        uint64_t v26 = (void *)MEMORY[0x19F3C29E0]();
        uint64_t v27 = objc_msgSend(NSString, "stringWithFormat:", @"model%d", v25);
        int v28 = [v59 URLByAppendingPathComponent:v27];
        uint64_t v29 = [MEMORY[0x1E4F28CB8] defaultManager];
        uint64_t v30 = [v28 path];
        char v31 = [v29 fileExistsAtPath:v30];

        if (v31)
        {
          v64[0] = 0;
          id v33 = v64[0];
          uint64_t v34 = v33;
          if ((v32 & 1) == 0)
          {
            if (v33)
            {
              uint64_t v35 = [v33 localizedDescription];
              [v51 setObject:v35 forKeyedSubscript:v27];
            }
            char v52 = 1;
          }

          uint64_t v25 = (v25 + 1);
        }
      }
      while ((v31 & 1) != 0);
      if (v52)
      {
        if (a5 && [v51 count])
        {
          long long v62 = 0u;
          long long v63 = 0u;
          *(_OWORD *)std::__split_buffer<std::string> __p = 0u;
          long long v61 = 0u;
          id v36 = v51;
          uint64_t v37 = [v36 countByEnumeratingWithState:__p objects:v65 count:16];
          if (v37)
          {
            uint64_t v38 = *(void *)v61;
            uint64_t v39 = @"Found errors while adding ML Programs to sub-models in the pipeline:";
            do
            {
              uint64_t v40 = 0;
              uint64_t v41 = v39;
              do
              {
                if (*(void *)v61 != v38) {
                  objc_enumerationMutation(v36);
                }
                uint64_t v42 = *((void *)__p[1] + v40);
                uint64_t v43 = NSString;
                uint64_t v44 = [v36 objectForKeyedSubscript:v42];
                uint64_t v39 = [v43 stringWithFormat:@"%@\n     %@ : %@", v41, v42, v44];

                ++v40;
                uint64_t v41 = v39;
              }
              while (v37 != v40);
              uint64_t v37 = [v36 countByEnumeratingWithState:__p objects:v65 count:16];
            }
            while (v37);
          }
          else
          {
            uint64_t v39 = @"Found errors while adding ML Programs to sub-models in the pipeline:";
          }

          [v58 setMilUpgradeStatus:&unk_1EF11A550];
          id v46 = +[MLModelErrorUtils genericErrorWithFormat:@"%@", v39];
          *a5 = v46;
          uint64_t v47 = [v46 description];
          [v58 setMilUpgradeFailureReason:v47];
        }
      }
      else
      {
        [v58 setMilUpgradeStatus:&unk_1EF11A538];
      }

      char v45 = v52 ^ 1;
    }
    else if (a3)
    {
      char v45 = 1;
    }
    else
    {
      +[MLModelErrorUtils genericErrorWithFormat:@"Cannot add ML Program to this model because it is not eligible."];
      char v45 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  return v45 & 1;
}

void sub_19E9CBE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_19E9CC52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_19E9CC6CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9CC874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9CCCD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9CD72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, _Unwind_Exception *exception_object, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }

  _Unwind_Resume(a1);
}

void sub_19E9CDBE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9CDD74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9CDF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a17);
  _Unwind_Resume(a1);
}

void sub_19E9CE00C()
{
}

void sub_19E9CE0C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9CE3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15900(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15901(uint64_t a1)
{
}

void sub_19E9CEBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  _Unwind_Resume(a1);
}

void sub_19E9CF2F4(_Unwind_Exception *a1)
{
  id v8 = v7;

  _Unwind_Resume(a1);
}

void sub_19E9CF468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9CF8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  _MLModelOutputArchiver::~_MLModelOutputArchiver((char **)va);
  _Unwind_Resume(a1);
}

void sub_19E9CFBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,char a27)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }

  _Unwind_Resume(a1);
}

void sub_19E9CFDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  MEMORY[0x19F3C1920](v11, 0x10A1C40FB0D5B10);

  _Unwind_Resume(a1);
}

void sub_19E9D0058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(a1);
}

void sub_19E9D0420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(a1);
}

void sub_19E9D094C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  _Unwind_Resume(a1);
}

void sub_19E9D0D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9D1430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::__shared_weak_count *a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }

  _MLModelInputArchiver::~_MLModelInputArchiver((_MLModelInputArchiver *)&a35);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void CoreML::NNCompiler::Backend::MIL::MILFunctionBuilder::~MILFunctionBuilder(CoreML::NNCompiler::Backend::MIL::MILFunctionBuilder *this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(*((void **)this + 4));
  std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::destroy(*((char **)this + 1));
}

void sub_19E9D1BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9D1F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

uint64_t std::default_delete<_MLModelSpecification>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(std::__shared_weak_count **)(result + 8);
    if (v1) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    }
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<_MLModelSpecification *,std::shared_ptr<_MLModelSpecification>::__shared_ptr_default_delete<_MLModelSpecification,_MLModelSpecification>,std::allocator<_MLModelSpecification>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI21_MLModelSpecificationE27__shared_ptr_default_deleteIS1_S1_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<_MLModelSpecification *,std::shared_ptr<_MLModelSpecification>::__shared_ptr_default_delete<_MLModelSpecification,_MLModelSpecification>,std::allocator<_MLModelSpecification>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<_MLModelSpecification>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<_MLModelSpecification *,std::shared_ptr<_MLModelSpecification>::__shared_ptr_default_delete<_MLModelSpecification,_MLModelSpecification>,std::allocator<_MLModelSpecification>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void sub_19E9D2290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

char *MLLoggingGetHomeDirectory()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uid_t v0 = getuid();
  uint64_t v1 = sysconf(71);
  MEMORY[0x1F4188790](v1);
  memset(&v9, 0, sizeof(v9));
  id v8 = 0;
  if (getpwuid_r(v0, &v9, (char *)&buf[-v2], v3, &v8)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v8 == 0;
  }
  if (!v4) {
    return realpath_DARWIN_EXTSN(v9.pw_dir, 0);
  }
  uint64_t v5 = MLLoggingGetCoreChannel();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_19E58B000, v5, OS_LOG_TYPE_ERROR, "Failed to get the home directory when checking model path.", buf, 2u);
  }

  return 0;
}

uint64_t __MLLoggingAllowsInstrumentationBasedOnProcess_block_invoke()
{
  *(_OWORD *)task_info_out = 0u;
  long long v5 = 0u;
  mach_msg_type_number_t task_info_outCnt = 8;
  uid_t v0 = (mach_port_name_t *)MEMORY[0x1E4F14960];
  uint64_t result = task_info(*MEMORY[0x1E4F14960], 0xFu, task_info_out, &task_info_outCnt);
  int x = 0;
  if (!result)
  {
    uint64_t result = pid_for_task(*v0, &x);
    if (!result)
    {
      getpid();
      return csops_audittoken();
    }
  }
  return result;
}

void __MLLoggingAllowsInstrumentationBasedOnEntitlements_block_invoke()
{
  uid_t v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (v0)
  {
    uint64_t v1 = v0;
    CFTypeRef v2 = SecTaskCopyValueForEntitlement(v0, @"com.apple.private.coreml.tracing-allowed", 0);
    MLLoggingAllowsInstrumentationBasedOnEntitlements_allowed = v2 == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    if (v2) {
      CFRelease(v2);
    }
    CFRelease(v1);
  }
}

google::protobuf::Arena **google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::TypeHandler>(google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  CFTypeRef v2 = (int *)*((void *)this + 2);
  if (!v2)
  {
    int v3 = *((_DWORD *)this + 2);
    int v4 = *((_DWORD *)this + 3);
LABEL_6:
    if (v3 <= v4)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(this, v4 - v3 + 1);
      CFTypeRef v2 = (int *)*((void *)this + 2);
    }
    int v4 = *v2;
    goto LABEL_9;
  }
  int v3 = *((_DWORD *)this + 2);
  int v4 = *v2;
  if (v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(google::protobuf::Arena ***)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3)) {
    goto LABEL_6;
  }
LABEL_9:
  *CFTypeRef v2 = v4 + 1;
  int v6 = *(google::protobuf::Arena **)this;
  if (!*(void *)this) {
    operator new();
  }
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight((CoreML::Specification::BayesianProbitRegressor_FeatureWeight *)Aligned);
  __int16 v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
  *__int16 v7 = (google::protobuf::Arena *)Aligned;
  v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>;
  id v8 = (unint64_t *)((char *)v6 + 32);
  do
    unint64_t v9 = __ldxr(v8);
  while (__stxr((unint64_t)v7, v8));
  v7[2] = (google::protobuf::Arena *)v9;
  uint64_t v10 = *((void *)this + 2);
  uint64_t v11 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v11 + 1;
  *(void *)(v10 + 8 * v11 + _Block_object_dispose(&a9, 8) = Aligned;
  return Aligned;
}

void sub_19E9D3344(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>(google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  CFTypeRef v2 = (int *)*((void *)this + 2);
  if (!v2)
  {
    int v3 = *((_DWORD *)this + 2);
    int v4 = *((_DWORD *)this + 3);
LABEL_6:
    if (v3 <= v4)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(this, v4 - v3 + 1);
      CFTypeRef v2 = (int *)*((void *)this + 2);
    }
    int v4 = *v2;
    goto LABEL_9;
  }
  int v3 = *((_DWORD *)this + 2);
  int v4 = *v2;
  if (v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(google::protobuf::Arena ***)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3)) {
    goto LABEL_6;
  }
LABEL_9:
  *CFTypeRef v2 = v4 + 1;
  int v6 = *(google::protobuf::Arena **)this;
  if (!*(void *)this) {
    operator new();
  }
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight((CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)Aligned);
  __int16 v7 = google::protobuf::Arena::AllocateAligned(v6, 0, 24);
  *__int16 v7 = (google::protobuf::Arena *)Aligned;
  v7[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>;
  id v8 = (unint64_t *)((char *)v6 + 32);
  do
    unint64_t v9 = __ldxr(v8);
  while (__stxr((unint64_t)v7, v8));
  v7[2] = (google::protobuf::Arena *)v9;
  uint64_t v10 = *((void *)this + 2);
  uint64_t v11 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v11 + 1;
  *(void *)(v10 + 8 * v11 + _Block_object_dispose(&a9, 8) = Aligned;
  return Aligned;
}

void sub_19E9D3494(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

double CoreML::BayesianProbitRegression::BayesianProbitRegression::setWeight(CoreML::BayesianProbitRegression::BayesianProbitRegression *this, unint64_t a2, double a3, double a4)
{
  unint64_t v9 = (uint64_t *)((char *)this + 8);
  unint64_t v10 = a2 ^ (a2 >> 8);
  unint64_t v11 = *((void *)this + 2);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v13 = a2 ^ (a2 >> 8);
      if (v10 >= v11) {
        unint64_t v13 = v10 % v11;
      }
    }
    else
    {
      unint64_t v13 = (v11 - 1) & v10;
    }
    float v14 = *(void ***)(*v9 + 8 * v13);
    if (v14)
    {
      uint64_t v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v10)
          {
            if (*((void *)v15 + 2) == a2) {
              goto LABEL_55;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v13) {
              break;
            }
          }
          uint64_t v15 = *(char **)v15;
        }
        while (v15);
      }
    }
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = a2 ^ (a2 >> 8);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    id v17 = *(void ***)(*v9 + 8 * v4);
    if (v17)
    {
      uint64_t v15 = (char *)*v17;
      if (*v17)
      {
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v10)
          {
            if (*((void *)v15 + 2) == a2) {
              goto LABEL_55;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v18 >= v11) {
                v18 %= v11;
              }
            }
            else
            {
              v18 &= v11 - 1;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  uint64_t v15 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v10;
  *((void *)v15 + 2) = a2;
  *(_OWORD *)(v15 + 24) = xmmword_19EC7B880;
  float v19 = (float)(unint64_t)(*((void *)this + 4) + 1);
  float v20 = *((float *)this + 10);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<true>((uint64_t)v9, v24);
    unint64_t v11 = *((void *)this + 2);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *v9;
  uint64_t v26 = *(void **)(*v9 + 8 * v4);
  if (v26)
  {
    *(void *)uint64_t v15 = *v26;
LABEL_53:
    void *v26 = v15;
    goto LABEL_54;
  }
  *(void *)uint64_t v15 = *((void *)this + 3);
  *((void *)this + 3) = v15;
  *(void *)(v25 + 8 * v4) = (char *)this + 24;
  if (*(void *)v15)
  {
    unint64_t v27 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11) {
        v27 %= v11;
      }
    }
    else
    {
      v27 &= v11 - 1;
    }
    uint64_t v26 = (void *)(*v9 + 8 * v27);
    goto LABEL_53;
  }
LABEL_54:
  ++*((void *)this + 4);
LABEL_55:
  double result = a3 * a4;
  *((double *)v15 + 3) = a4;
  *((double *)v15 + 4) = a3 * a4;
  return result;
}

void sub_19E9D37B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::BayesianProbitRegression::BayesianProbitRegression::initializeFeatures(CoreML::BayesianProbitRegression::BayesianProbitRegression *this, uint64_t a2, double a3)
{
  int v6 = (pthread_rwlock_t *)((char *)this + 88);
  __int16 v7 = (void *)pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 88));
  *(void *)this = a2;
  *((double *)this + 10) = a3;
  if (*((void *)this + 4))
  {
    __int16 v7 = (void *)*((void *)this + 3);
    if (v7)
    {
      do
      {
        id v8 = (void *)*v7;
        operator delete(v7);
        __int16 v7 = v8;
      }
      while (v8);
    }
    *((void *)this + 3) = 0;
    uint64_t v9 = *((void *)this + 2);
    if (v9)
    {
      for (uint64_t i = 0; i != v9; ++i)
        *(void *)(*((void *)this + 1) + 8 * i) = 0;
    }
    *((void *)this + 4) = 0;
  }
  if (a3 < 0.0 || a3 > 1.0)
  {
    unint64_t v12 = 0x7FF8000000000000;
LABEL_17:
    double v13 = *(double *)&v12;
    goto LABEL_18;
  }
  if (a3 == 0.0)
  {
    unint64_t v12 = 0xFFF0000000000000;
    goto LABEL_17;
  }
  if (a3 == 1.0)
  {
    unint64_t v12 = 0x7FF0000000000000;
    goto LABEL_17;
  }
  if (1.0 - a3 >= a3) {
    double v16 = a3;
  }
  else {
    double v16 = 1.0 - a3;
  }
  if (v16 <= 0.02425)
  {
    double v20 = sqrt(log(v16) * -2.0);
    double v19 = (((((v20 * -0.007784894 + -0.322396458) * v20 + -2.40075828) * v20 + -2.54973254) * v20 + 4.37466414) * v20
         + 2.93816398)
        / ((((v20 * 0.00778469571 + 0.322467129) * v20 + 2.44513414) * v20 + 3.75440866) * v20 + 1.0);
  }
  else
  {
    double v17 = v16 + -0.5;
    double v18 = v17 * v17;
    double v19 = v17
        * (((((v17 * v17 * -39.6968303 + 220.946098) * (v17 * v17) + -275.92851) * (v17 * v17) + 138.357752)
          * (v17
           * v17)
          + -30.6647981)
         * (v17
          * v17)
         + 2.50662828)
        / (((((v18 * -54.4760988 + 161.585837) * v18 + -155.69898) * v18 + 66.8013119) * v18 + -13.2806816) * v18 + 1.0);
  }
  CoreML::BayesianProbitRegression::Gaussian::stdNormalCDF((CoreML::BayesianProbitRegression::Gaussian *)v7, v19);
  double v22 = (v21 - v16) * 2.50662827;
  long double v23 = exp(v19 * v19 * 0.5);
  double v13 = v19 - v22 * v23 / (v19 * (v22 * v23) * 0.5 + 1.0);
  if (a3 > 0.5) {
    double v13 = -v13;
  }
LABEL_18:
  double v14 = v13 * sqrt((double)*(unint64_t *)this + (double)*(unint64_t *)this);
  *((void *)this + 6) = 0x3FF0000000000000;
  *((double *)this + 7) = v14;
  return pthread_rwlock_unlock(v6);
}

void CoreML::BayesianProbitRegression::BayesianProbitRegression::GetGaussiansAndBias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (a3) {
    std::vector<long long>::reserve((void **)a3, *(unsigned int *)(a2 + 8));
  }
  std::vector<double>::reserve((void **)a4, (v8 + 1));
  std::vector<double>::reserve((void **)a5, (v8 + 1));
  if (v8)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      unint64_t v10 = *(unsigned int *)(*(void *)a2 + 4 * i) | (unint64_t)(i << 32);
      unint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>,CoreML::BayesianProbitRegression::SuperHasher,CoreML::BayesianProbitRegression::SuperHasher,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>,CoreML::BayesianProbitRegression::SuperHasher,CoreML::BayesianProbitRegression::SuperHasher,true>,std::allocator<std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>>>::find<unsigned long long>((void *)(a1 + 8), v10);
      if (v11) {
        unint64_t v12 = (double *)(v11 + 3);
      }
      else {
        unint64_t v12 = (double *)(a1 + 64);
      }
      double v14 = *(double **)(a4 + 8);
      unint64_t v13 = *(void *)(a4 + 16);
      double v15 = v12[1] / *v12;
      if ((unint64_t)v14 >= v13)
      {
        double v17 = *(double **)a4;
        uint64_t v18 = ((uint64_t)v14 - *(void *)a4) >> 3;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61) {
          goto LABEL_87;
        }
        uint64_t v20 = v13 - (void)v17;
        if (v20 >> 2 > v19) {
          unint64_t v19 = v20 >> 2;
        }
        BOOL v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v21) {
          unint64_t v22 = v19;
        }
        if (v22)
        {
          unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v22);
          double v17 = *(double **)a4;
          double v14 = *(double **)(a4 + 8);
        }
        else
        {
          uint64_t v23 = 0;
        }
        size_t v24 = (double *)(v22 + 8 * v18);
        *size_t v24 = v15;
        double v16 = v24 + 1;
        while (v14 != v17)
        {
          uint64_t v25 = *((void *)v14-- - 1);
          *((void *)v24-- - 1) = v25;
        }
        *(void *)a4 = v24;
        *(void *)(a4 + _Block_object_dispose(&a9, 8) = v16;
        *(void *)(a4 + 16) = v22 + 8 * v23;
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *double v14 = v15;
        double v16 = v14 + 1;
      }
      *(void *)(a4 + _Block_object_dispose(&a9, 8) = v16;
      unint64_t v27 = *(double **)(a5 + 8);
      unint64_t v26 = *(void *)(a5 + 16);
      double v28 = 1.0 / *v12;
      if ((unint64_t)v27 >= v26)
      {
        uint64_t v30 = *(double **)a5;
        uint64_t v31 = ((uint64_t)v27 - *(void *)a5) >> 3;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61) {
          goto LABEL_87;
        }
        uint64_t v33 = v26 - (void)v30;
        if (v33 >> 2 > v32) {
          unint64_t v32 = v33 >> 2;
        }
        BOOL v21 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v21) {
          unint64_t v34 = v32;
        }
        if (v34)
        {
          unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v34);
          uint64_t v30 = *(double **)a5;
          unint64_t v27 = *(double **)(a5 + 8);
        }
        else
        {
          uint64_t v35 = 0;
        }
        id v36 = (double *)(v34 + 8 * v31);
        *id v36 = v28;
        uint64_t v29 = v36 + 1;
        while (v27 != v30)
        {
          uint64_t v37 = *((void *)v27-- - 1);
          *((void *)v36-- - 1) = v37;
        }
        *(void *)a5 = v36;
        *(void *)(a5 + _Block_object_dispose(&a9, 8) = v29;
        *(void *)(a5 + 16) = v34 + 8 * v35;
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        *unint64_t v27 = v28;
        uint64_t v29 = v27 + 1;
      }
      *(void *)(a5 + _Block_object_dispose(&a9, 8) = v29;
      if (a3)
      {
        uint64_t v39 = *(unint64_t **)(a3 + 8);
        unint64_t v38 = *(void *)(a3 + 16);
        if ((unint64_t)v39 >= v38)
        {
          uint64_t v41 = *(unint64_t **)a3;
          uint64_t v42 = ((uint64_t)v39 - *(void *)a3) >> 3;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v44 = v38 - (void)v41;
          if (v44 >> 2 > v43) {
            unint64_t v43 = v44 >> 2;
          }
          BOOL v21 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v21) {
            unint64_t v45 = v43;
          }
          if (v45)
          {
            unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v45);
            uint64_t v41 = *(unint64_t **)a3;
            uint64_t v39 = *(unint64_t **)(a3 + 8);
          }
          else
          {
            uint64_t v46 = 0;
          }
          uint64_t v47 = (unint64_t *)(v45 + 8 * v42);
          *uint64_t v47 = v10;
          uint64_t v40 = v47 + 1;
          while (v39 != v41)
          {
            unint64_t v48 = *--v39;
            *--uint64_t v47 = v48;
          }
          *(void *)a3 = v47;
          *(void *)(a3 + _Block_object_dispose(&a9, 8) = v40;
          *(void *)(a3 + 16) = v45 + 8 * v46;
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *uint64_t v39 = v10;
          uint64_t v40 = v39 + 1;
        }
        *(void *)(a3 + _Block_object_dispose(&a9, 8) = v40;
      }
    }
  }
  uint64_t v50 = *(double **)(a4 + 8);
  unint64_t v49 = *(void *)(a4 + 16);
  double v51 = *(double *)(a1 + 56) / *(double *)(a1 + 48);
  if ((unint64_t)v50 >= v49)
  {
    id v53 = *(double **)a4;
    uint64_t v54 = ((uint64_t)v50 - *(void *)a4) >> 3;
    unint64_t v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 61) {
      goto LABEL_87;
    }
    uint64_t v56 = v49 - (void)v53;
    if (v56 >> 2 > v55) {
      unint64_t v55 = v56 >> 2;
    }
    BOOL v21 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v21) {
      unint64_t v57 = v55;
    }
    if (v57)
    {
      unint64_t v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v57);
      id v53 = *(double **)a4;
      uint64_t v50 = *(double **)(a4 + 8);
    }
    else
    {
      uint64_t v58 = 0;
    }
    id v59 = (double *)(v57 + 8 * v54);
    unint64_t v60 = v57 + 8 * v58;
    *id v59 = v51;
    char v52 = v59 + 1;
    while (v50 != v53)
    {
      uint64_t v61 = *((void *)v50-- - 1);
      *((void *)v59-- - 1) = v61;
    }
    *(void *)a4 = v59;
    *(void *)(a4 + _Block_object_dispose(&a9, 8) = v52;
    *(void *)(a4 + 16) = v60;
    if (v53) {
      operator delete(v53);
    }
  }
  else
  {
    *uint64_t v50 = v51;
    char v52 = v50 + 1;
  }
  *(void *)(a4 + _Block_object_dispose(&a9, 8) = v52;
  long long v63 = *(double **)(a5 + 8);
  unint64_t v62 = *(void *)(a5 + 16);
  double v64 = 1.0 / *(double *)(a1 + 48);
  if ((unint64_t)v63 < v62)
  {
    double *v63 = v64;
    uint64_t v65 = v63 + 1;
    goto LABEL_86;
  }
  char v66 = *(double **)a5;
  uint64_t v67 = ((uint64_t)v63 - *(void *)a5) >> 3;
  unint64_t v68 = v67 + 1;
  if ((unint64_t)(v67 + 1) >> 61) {
LABEL_87:
  }
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  uint64_t v69 = v62 - (void)v66;
  if (v69 >> 2 > v68) {
    unint64_t v68 = v69 >> 2;
  }
  BOOL v21 = (unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8;
  unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v21) {
    unint64_t v70 = v68;
  }
  if (v70)
  {
    unint64_t v70 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v70);
    char v66 = *(double **)a5;
    long long v63 = *(double **)(a5 + 8);
  }
  else
  {
    uint64_t v71 = 0;
  }
  uint64_t v72 = (double *)(v70 + 8 * v67);
  unint64_t v73 = v70 + 8 * v71;
  *uint64_t v72 = v64;
  uint64_t v65 = v72 + 1;
  while (v63 != v66)
  {
    uint64_t v74 = *((void *)v63-- - 1);
    *((void *)v72-- - 1) = v74;
  }
  *(void *)a5 = v72;
  *(void *)(a5 + _Block_object_dispose(&a9, 8) = v65;
  *(void *)(a5 + 16) = v73;
  if (v66) {
    operator delete(v66);
  }
LABEL_86:
  *(void *)(a5 + _Block_object_dispose(&a9, 8) = v65;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>,CoreML::BayesianProbitRegression::SuperHasher,CoreML::BayesianProbitRegression::SuperHasher,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>,CoreML::BayesianProbitRegression::SuperHasher,CoreML::BayesianProbitRegression::SuperHasher,true>,std::allocator<std::__hash_value_type<unsigned long long,CoreML::BayesianProbitRegression::Gaussian>>>::find<unsigned long long>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = a2 ^ (a2 >> 8);
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a2 ^ (a2 >> 8);
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  int v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  double result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_19E9D41A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9D43AC(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19E9D44D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9D4748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16306(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16307(uint64_t a1)
{
}

id anonymous namespace'::computeShapeHashForFeatures(void *a1, void *a2)
{
  CoreML::MLNeuralNetworkUtilities::hashFeatureProviderToConfigurationName(&__p, a1, 1, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  unint64_t v3 = [NSString stringWithUTF8String:p_p];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v3;
}

void sub_19E9D4858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id anonymous namespace'::computeDefaultShapeHash(MLModelDescription *this, MLVersionInfo *a2, MLVersionInfo *a3)
{
  CoreML::MLNeuralNetworkUtilities::hashE5ModelDefaultShapesToConfigurationName(&__p, this, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint8x8_t v4 = [NSString stringWithUTF8String:p_p];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v4;
}

void sub_19E9D48F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E9D4C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

BOOL anonymous namespace'::reshapeOperationForFeatures(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a2;
  unint64_t v11 = a3;
  unint64_t v26 = a4;
  unint64_t v12 = [(MLModelDescription *)v11 inputDescriptionsByName];
  unint64_t v13 = [(MLModelDescription *)v11 stateDescriptionsByName];
  uint64_t v14 = [v12 count];
  uint64_t v15 = [v13 count];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v27 = 0u;
  unint64_t v16 = v15 + v14;
  if (v15 + v14)
  {
    if (v16 >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    *(void *)&long long v27 = std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v15 + v14);
    *((void *)&v27 + 1) = v27;
    *(void *)&long long v28 = v27 + 8 * v17;
    *((void *)&v28 + 1) = std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v16);
    *(void *)&long long v29 = *((void *)&v28 + 1);
    *((void *)&v29 + 1) = *((void *)&v28 + 1) + 8 * v18;
  }
  if (v10) {
  uint64_t v20 = else;
  }
  [v9 operationHandle];
  uint64_t v21 = e5rt_execution_stream_operation_reshape_operation();
  if (v21)
  {
    unint64_t v22 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t last_error_message = e5rt_get_last_error_message();
      *(_DWORD *)buf = 136315394;
      uint64_t v31 = last_error_message;
      __int16 v32 = 1024;
      int v33 = v21;
      _os_log_error_impl(&dword_19E58B000, v22, OS_LOG_TYPE_ERROR, "E5RT: %s (%d)", buf, 0x12u);
    }

    if (a5)
    {
      uint64_t v23 = +[MLModelErrorUtils genericErrorWithFormat:@"E5RT: %s (%d)", e5rt_get_last_error_message(), v21];
      *a5 = +[MLModelErrorUtils errorWithCode:0, v23, @"Failed to reshape the operation for shape with hash: %@.", v20 underlyingError format];
    }
  }
  else
  {
    [v9 setShapeHash:v20];
  }

  return v21 == 0;
}

void sub_19E9D4F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, ...)
{
  va_start(va, a5);

  _Unwind_Resume(a1);
}

void anonymous namespace'::appendReshapeInfo(void **a1, void *a2, void *a3, void *a4)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  id v97 = a2;
  id v7 = a3;
  id v93 = a4;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  obuint64_t j = v7;
  uint64_t v8 = [obj countByEnumeratingWithState:&v105 objects:v111 count:16];
  if (v8)
  {
    uint64_t v96 = *(void *)v106;
    uint64_t v92 = *MEMORY[0x1E4F1C3B8];
    uint64_t v99 = *MEMORY[0x1E4F1C3A8];
    do
    {
      uint64_t v98 = v8;
      for (uint64_t i = 0; i != v98; ++i)
      {
        if (*(void *)v106 != v96) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v105 + 1) + 8 * i);
        uint64_t v104 = [obj objectForKeyedSubscript:v10];
        std::string::size_type v103 = [v97 featureValueForName:v10];
        if ([v104 type] == 4)
        {
          id v11 = v104;
          id v12 = v103;
          id v13 = v93;
          uint64_t v100 = v11;
          uint64_t v94 = v12;
          uint64_t v14 = [v11 imageConstraint];
          uint64_t v15 = v14;
          if (v12)
          {
            unint64_t v16 = (__CVBuffer *)[v12 imageBufferValue];
            size_t Width = CVPixelBufferGetWidth(v16);
            size_t Height = CVPixelBufferGetHeight(v16);
          }
          else
          {
            size_t Width = [v14 pixelsWide];
            size_t Height = [v15 pixelsHigh];
          }
          size_t v26 = Height;
          [v100 name];
          std::string v102 = v15;
          id v27 = (id)objc_claimAutoreleasedReturnValue();
          id v28 = v13;
          uint64_t v110 = 0;
          [v28 operationHandle];
          id v29 = v27;
          [v29 UTF8String];
          uint64_t v30 = e5rt_execution_stream_operation_retain_input_port();
          if (v30)
          {
            uint64_t v31 = +[MLLogging coreChannel];
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              uint64_t v85 = [v29 UTF8String];
              uint64_t last_error_message = e5rt_get_last_error_message();
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = v85;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = last_error_message;
              *(_WORD *)&buf[22] = 1024;
              LODWORD(v113) = v30;
              _os_log_error_impl(&dword_19E58B000, v31, OS_LOG_TYPE_ERROR, "Failed to get port for feature named %s E5RT: %s (%d)", buf, 0x1Cu);
            }

            objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v99, @"Failed to get port for feature named %s E5RT: %s (%d)", objc_msgSend(v29, "UTF8String"), e5rt_get_last_error_message(), v30);
          }
          int v32 = MLE5PortTraitOf();
          uint64_t v33 = e5rt_io_port_release();
          if (v33)
          {
            uint64_t v34 = +[MLLogging coreChannel];
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              uint64_t v87 = e5rt_get_last_error_message();
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = v87;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v33;
              _os_log_error_impl(&dword_19E58B000, v34, OS_LOG_TYPE_ERROR, "Failed to release input port E5RT: %s (%d)", buf, 0x12u);
            }

            objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v99, @"Failed to release input port E5RT: %s (%d)", e5rt_get_last_error_message(), v33);
          }

          if (v32 == 2)
          {
            uint64_t v35 = [v102 pixelFormatType];
            uint64_t v36 = v35;
            uint64_t v110 = 0;
            if ((int)v35 > 1278226487)
            {
              if (v35 != 1278226488 && v35 != 1278226536) {
                goto LABEL_56;
              }
            }
            else
            {
              if (v35 == 32 || v35 == 1111970369) {
                goto LABEL_59;
              }
LABEL_56:
              unint64_t v49 = +[MLLogging coreChannel];
              if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
              {
                float v91 = [NSNumber numberWithUnsignedInt:v36];
                *(_DWORD *)buf = 138412290;
                *(void *)&uint8_t buf[4] = v91;
                _os_log_error_impl(&dword_19E58B000, v49, OS_LOG_TYPE_ERROR, "No valid conversion for unsupported pixel format %@", buf, 0xCu);
              }
              uint64_t v50 = (void *)MEMORY[0x1E4F1CA00];
              double v51 = [NSNumber numberWithUnsignedInt:v36];
              [v50 raise:v92, @"No valid conversion for unsupported pixel format %@", v51 format];
            }
LABEL_59:
            uint64_t v52 = e5rt_surface_desc_create();
            if (v52)
            {
              id v53 = +[MLLogging coreChannel];
              if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
              {
                uint64_t v88 = e5rt_get_last_error_message();
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = v88;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v52;
                _os_log_error_impl(&dword_19E58B000, v53, OS_LOG_TYPE_ERROR, "Failed to create surface descriptor. E5RT: %s (%d)", buf, 0x12u);
              }

              objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v99, @"Failed to create surface descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), v52);
            }
            uint64_t v109 = 0;
            uint64_t v54 = e5rt_operand_desc_retain_from_surface_desc();
            if (v54)
            {
              unint64_t v55 = +[MLLogging coreChannel];
              if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
              {
                uint64_t v89 = e5rt_get_last_error_message();
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = v89;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v54;
                _os_log_error_impl(&dword_19E58B000, v55, OS_LOG_TYPE_ERROR, "Failed to transfer surface descriptor to operand descriptor. E5RT: %s (%d)", buf, 0x12u);
              }

              objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v99, @"Failed to transfer surface descriptor to operand descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), v54);
            }
            uint64_t v56 = e5rt_surface_desc_release();
            if (v56)
            {
              unint64_t v57 = +[MLLogging coreChannel];
              if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
              {
                uint64_t v90 = e5rt_get_last_error_message();
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = v90;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v56;
                _os_log_error_impl(&dword_19E58B000, v57, OS_LOG_TYPE_ERROR, "Failed to release surface descriptor. E5RT: %s (%d)", buf, 0x12u);
              }

              objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", v99, @"Failed to release surface descriptor. E5RT: %s (%d)", e5rt_get_last_error_message(), v56);
            }
            uint64_t TensorDescriptor = v109;
LABEL_72:

            goto LABEL_73;
          }
          uint64_t v37 = [v102 pixelType];
          if (v37 > 29)
          {
            uint64_t v39 = 65552;
            if (v37 == 40) {
              goto LABEL_43;
            }
            if (v37 != 30) {
              goto LABEL_31;
            }
          }
          else if (v37 != 10 && v37 != 20)
          {
LABEL_31:
            unint64_t v38 = +[MLLogging coreChannel];
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_19E58B000, v38, OS_LOG_TYPE_ERROR, "Can't get data type from unexpected pixel type.", buf, 2u);
            }

            [MEMORY[0x1E4F1CA00] raise:v92 format:@"Can't get data type from unexpected pixel type."];
            uint64_t v39 = 65600;
LABEL_43:
            uint64_t v41 = [v102 pixelType];
            uint64_t v42 = 1;
            if (v41 > 29)
            {
              unint64_t v43 = 0x1E4F28000uLL;
              if (v41 == 40) {
                goto LABEL_52;
              }
              if (v41 == 30) {
                goto LABEL_51;
              }
LABEL_46:
              uint64_t v44 = +[MLLogging coreChannel];
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_19E58B000, v44, OS_LOG_TYPE_ERROR, "Can't get channels from unexpected pixel type.", buf, 2u);
              }

              [MEMORY[0x1E4F1CA00] raise:v92 format:@"Can't get channels from unexpected pixel type."];
              unint64_t v45 = 0;
            }
            else
            {
              unint64_t v43 = 0x1E4F28000;
              if (v41 != 10)
              {
                if (v41 != 20) {
                  goto LABEL_46;
                }
LABEL_51:
                uint64_t v42 = 3;
              }
LABEL_52:
              unint64_t v45 = [*(id *)(v43 + 3792) numberWithInt:v42];
            }
            *(void *)buf = &unk_1EF11A580;
            *(void *)&uint8_t buf[8] = v45;
            uint64_t v46 = [NSNumber numberWithUnsignedLong:v26];
            *(void *)&buf[16] = v46;
            uint64_t v47 = [NSNumber numberWithUnsignedLong:Width];
            uint64_t v113 = v47;
            unint64_t v48 = [MEMORY[0x1E4F1C978] arrayWithObjects:buf count:4];

            uint64_t TensorDescriptor = MLE5CreateTensorDescriptor(v48, v39);
            goto LABEL_72;
          }
          uint64_t v39 = 65568;
          goto LABEL_43;
        }
        if ([v104 type] == 5)
        {
          id v18 = v103;
          unint64_t v19 = [v104 multiArrayConstraint];
          uint64_t v20 = v19;
          if (v18)
          {
            uint64_t v21 = [v18 multiArrayValue];
            unint64_t v22 = [v21 shape];
          }
          else
          {
            unint64_t v22 = [v19 shape];
          }
          uint64_t TensorDescriptor = MLE5CreateTensorDescriptor(v22, [v20 dataType]);
        }
        else if ([v104 type] == 8)
        {
          uint64_t v23 = [v104 stateConstraint];
          size_t v24 = [v23 bufferShape];
          uint64_t TensorDescriptor = MLE5CreateTensorDescriptor(v24, [v23 dataType]);
        }
        else
        {
          uint64_t v40 = +[MLLogging coreChannel];
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_19E58B000, v40, OS_LOG_TYPE_ERROR, "Logic error: Unknown feature type for reshape.", buf, 2u);
          }

          [MEMORY[0x1E4F1CA00] raise:v92 format:@"Logic error: Unknown feature type for reshape."];
          uint64_t TensorDescriptor = 0;
        }
LABEL_73:
        uint64_t v58 = [v10 UTF8String];
        uint64_t v59 = v58;
        uint64_t v61 = (uint64_t *)a1[1];
        unint64_t v60 = (unint64_t)a1[2];
        if ((unint64_t)v61 >= v60)
        {
          uint64_t v63 = ((char *)v61 - (unsigned char *)*a1) >> 3;
          if ((unint64_t)(v63 + 1) >> 61) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v64 = v60 - (void)*a1;
          uint64_t v65 = v64 >> 2;
          if (v64 >> 2 <= (unint64_t)(v63 + 1)) {
            uint64_t v65 = v63 + 1;
          }
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v66 = v65;
          }
          if (v66) {
            unint64_t v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v66);
          }
          else {
            uint64_t v67 = 0;
          }
          unint64_t v68 = (uint64_t *)(v66 + 8 * v63);
          *unint64_t v68 = v59;
          unint64_t v62 = v68 + 1;
          unint64_t v70 = (char *)*a1;
          uint64_t v69 = (char *)a1[1];
          if (v69 != *a1)
          {
            do
            {
              uint64_t v71 = *((void *)v69 - 1);
              v69 -= 8;
              *--unint64_t v68 = v71;
            }
            while (v69 != v70);
            uint64_t v69 = (char *)*a1;
          }
          *a1 = v68;
          a1[1] = v62;
          a1[2] = (void *)(v66 + 8 * v67);
          if (v69) {
            operator delete(v69);
          }
        }
        else
        {
          uint64_t *v61 = v58;
          unint64_t v62 = v61 + 1;
        }
        a1[1] = v62;
        unint64_t v73 = (uint64_t *)a1[4];
        unint64_t v72 = (unint64_t)a1[5];
        if ((unint64_t)v73 >= v72)
        {
          long long v75 = a1[3];
          uint64_t v76 = ((char *)v73 - v75) >> 3;
          if ((unint64_t)(v76 + 1) >> 61) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v77 = v72 - (void)v75;
          uint64_t v78 = v77 >> 2;
          if (v77 >> 2 <= (unint64_t)(v76 + 1)) {
            uint64_t v78 = v76 + 1;
          }
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v79 = v78;
          }
          if (v79) {
            unint64_t v79 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v79);
          }
          else {
            uint64_t v80 = 0;
          }
          int v81 = (uint64_t *)(v79 + 8 * v76);
          *int v81 = TensorDescriptor;
          uint64_t v74 = v81 + 1;
          long long v83 = (char *)a1[3];
          unint64_t v82 = (char *)a1[4];
          if (v82 != v83)
          {
            do
            {
              uint64_t v84 = *((void *)v82 - 1);
              v82 -= 8;
              *--int v81 = v84;
            }
            while (v82 != v83);
            unint64_t v82 = (char *)a1[3];
          }
          a1[3] = v81;
          a1[4] = v74;
          a1[5] = (void *)(v79 + 8 * v80);
          if (v82) {
            operator delete(v82);
          }
        }
        else
        {
          *unint64_t v73 = TensorDescriptor;
          uint64_t v74 = v73 + 1;
        }
        a1[4] = v74;
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v105 objects:v111 count:16];
    }
    while (v8);
  }
}

void sub_19E9D5BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::InputNameAndOperandDescVector::~InputNameAndOperandDescVector(_anonymous_namespace_::InputNameAndOperandDescVector *this)
{
  int8x8_t v2 = (char *)*((void *)this + 3);
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v2 != v3)
  {
    do
    {
      e5rt_operand_desc_release();
      v2 += 8;
    }
    while (v2 != v3);
    int8x8_t v2 = (char *)*((void *)this + 3);
  }
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint8x8_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

void sub_19E9D5FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9D613C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19E9D63C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9D6668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19E9D67BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9D6B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  _Unwind_Resume(a1);
}

void sub_19E9D715C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9D71F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9D7474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v30 = *(std::__shared_weak_count **)(v28 - 104);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }

  _Unwind_Resume(a1);
}

void sub_19E9D7B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9D7C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9D858C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  _Unwind_Resume(a1);
}

void sub_19E9D89A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19E9D8A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9D8BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9D8D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9D93B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9D96E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZ64__MLE5Engine__probabilityDictionaryWithMultiArray_classifyTopK__EUb_E3__0NS_11__wrap_iterIPmEEEEjT1_S7_S7_T0_(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  float v6 = *(float *)(a4 + 4 * *a2);
  float v7 = *(float *)(a4 + 4 * *a1);
  uint64_t v8 = *a3;
  float v9 = *(float *)(a4 + 4 * *a3);
  if (v6 > v7)
  {
    if (v9 > v6)
    {
      *a1 = v8;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    if (*(float *)(a4 + 4 * *a3) <= v7) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  if (v9 > v6)
  {
    *a2 = v8;
    *a3 = v4;
    uint64_t v10 = *a1;
    if (*(float *)(a4 + 4 * *a2) <= *(float *)(a4 + 4 * *a1)) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v10;
    return 2;
  }
  return 0;
}

void sub_19E9DA174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DA50C(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19E9DA5F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DA740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DA9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DAA4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DAC18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DAD54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DAE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DB1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16978(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16979(uint64_t a1)
{
}

void sub_19E9DB6D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DB8BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DB9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9DBB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DBC00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DBD80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DBF30(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_19E9DC01C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DC288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DC424(_Unwind_Exception *a1)
{
  v2[2](v2);
  _Unwind_Resume(a1);
}

void sub_19E9DC5CC(_Unwind_Exception *a1)
{
  v2[2](v2);
  _Unwind_Resume(a1);
}

void sub_19E9DC834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DC95C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DC9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DCD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19E9DCE50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL37e5rtWouldUseBackwardCompatibilityPathv_block_invoke()
{
  uint64_t result = MGGetSInt64Answer();
  e5rtWouldUseBackwardCompatibilityPath(void)::chipID = result;
  return result;
}

void CoreML::NNCompiler::Backend::MIL::Ios18::Ios18LayerTranslator::~Ios18LayerTranslator(void **this)
{
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(this);

  JUMPOUT(0x19F3C1920);
}

void sub_19E9DD2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DD34C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DD4B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DD748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DD8A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DD9CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DDA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DDCBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DDD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DDE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9DDECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9DDFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DE10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DE204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DE410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DE59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DE630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DE6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9DE7EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DE980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DEB54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DECE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DEF08(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_19E9DEFF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DF06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DF1FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DF384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DF45C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DF560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DF6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DF784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DF83C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9DFE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void (**a15)(void), uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  a15[2]();
  ElapsedTimeRecorder::~ElapsedTimeRecorder(&a26);

  _Unwind_Resume(a1);
}

void sub_19E9E01A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17570(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17571(uint64_t a1)
{
}

void sub_19E9E03C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9E06B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

void sub_19E9E09A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9E176C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  CoreML::Specification::CoreMLModels::VisionFeaturePrint::~VisionFeaturePrint((CoreML::Specification::CoreMLModels::VisionFeaturePrint *)&a32);
  _Unwind_Resume(a1);
}

id sortShapeKeysByFeatureResolution(void *a1)
{
  uint64_t v1 = [a1 keysSortedByValueUsingComparator:&__block_literal_global_17610];

  return v1;
}

uint64_t ___ZL32sortShapeKeysByFeatureResolutionP12NSDictionaryIP8NSStringP7NSArrayE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 lastObject];
  float v6 = [v4 lastObject];
  uint64_t v7 = [v6 compare:v5];

  return v7;
}

void sub_19E9E1BA0(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19E9E22EC()
{
  __cxa_end_catch();
  JUMPOUT(0x19E9E1FB0);
}

void sub_19E9E2354(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19E9E2374()
{
}

void sub_19E9E237C()
{
}

void sub_19E9E2384()
{
}

_anonymous_namespace_::imemstream *anonymous namespace'::imemstream::imemstream(_anonymous_namespace_::imemstream *this, const char *a2, uint64_t a3)
{
  float v6 = (char *)this + 16;
  std::streambuf::basic_streambuf();
  *((void *)this + 4) = a2;
  *((void *)this + 5) = a2;
  *((void *)this + 6) = &a2[a3];
  *((void *)this + 1) = 0;
  *((void *)this + 2) = off_1EF0CE238;
  *(void *)this = &unk_1EF0CAA38;
  *((void *)this + 10) = &unk_1EF0CAA60;
  std::ios_base::init((std::ios_base *)((char *)this + 80), v6);
  *((void *)this + 27) = 0;
  *((_DWORD *)this + 56) = -1;
  *(void *)this = off_1EF0CE1B0;
  *((void *)this + 2) = off_1EF0CE238;
  *((void *)this + 10) = off_1EF0CE2C0;
  return this;
}

void *anonymous namespace'::VisitValue(void *result, uint64_t a2)
{
  int v3 = *((_DWORD *)result + 11);
  if (v3 > 201)
  {
    if (v3 == 202)
    {
      uint64_t v18 = result[4];
      uint64_t v19 = *(void *)(v18 + 32);
      if (v19) {
        uint64_t v20 = (uint64_t *)(v19 + 8);
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = *(int *)(v18 + 24);
      if (v21)
      {
        uint64_t v22 = 8 * v21;
        do
        {
          uint64_t v23 = *v20++;
          v22 -= 8;
        }
        while (v22);
      }
    }
    else if (v3 == 502)
    {
      uint64_t v10 = result[4];
      uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v24, *(void **)(v10 + 40));
      while (v24[0])
      {
        uint64_t v11 = *(void *)(v24[0] + 24);
        google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v25, *(void **)(v11 + 88));
        while (v25[0])
        {
          google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(v25);
        }
        uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(v24);
      }
    }
  }
  else if (v3 == 200)
  {
    uint64_t v12 = *(void *)(result[4] + 16);
    if (!v12) {
      operator new();
    }
    uint64_t v13 = *(void *)(v12 + 32);
    if (v13) {
      uint64_t v14 = (uint64_t *)(v13 + 8);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(int *)(v12 + 24);
    if (v15)
    {
      uint64_t v16 = 8 * v15;
      do
      {
        uint64_t v17 = *v14++;
        v16 -= 8;
      }
      while (v16);
    }
  }
  else if (v3 == 201)
  {
    uint64_t v4 = *(void *)(result[4] + 16);
    if (!v4) {
      operator new();
    }
    uint64_t v5 = *(void *)(v4 + 32);
    if (v5) {
      float v6 = (uint64_t *)(v5 + 8);
    }
    else {
      float v6 = 0;
    }
    uint64_t v7 = *(int *)(v4 + 24);
    if (v7)
    {
      uint64_t v8 = 8 * v7;
      do
      {
        uint64_t v9 = *v6++;
        v8 -= 8;
      }
      while (v8);
    }
  }
  return result;
}

void sub_19E9E26BC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(CoreML::Specification::MILSpec::Value &)>::~__value_func[abi:ne180100](void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void anonymous namespace'::imemstream::~imemstream(_anonymous_namespace_::imemstream *this)
{
  uint64_t v1 = std::istream::~istream();
  MEMORY[0x19F3C1850](v1 + 80);
  std::streambuf::~streambuf();
}

{
  uint64_t v1;
  uint64_t vars8;

  uint64_t v1 = std::istream::~istream();
  MEMORY[0x19F3C1850](v1 + 80);
  std::streambuf::~streambuf();

  JUMPOUT(0x19F3C1920);
}

void virtual thunk to'anonymous namespace'::imemstream::~imemstream(_anonymous_namespace_::imemstream *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  std::istream::~istream();
  MEMORY[0x19F3C1850](v1 + 80);
  std::streambuf::~streambuf();

  JUMPOUT(0x19F3C1920);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  std::istream::~istream();
  MEMORY[0x19F3C1850](v1 + 80);

  std::streambuf::~streambuf();
}

void virtual thunk to'anonymous namespace'::imemstream::~imemstream(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  MEMORY[0x19F3C1850](v1 + 80);
  std::streambuf::~streambuf();

  JUMPOUT(0x19F3C1920);
}

uint64_t virtual thunk to'anonymous namespace'::imemstream::~imemstream(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  MEMORY[0x19F3C1850](v1 + 80);

  return std::streambuf::~streambuf();
}

void *anonymous namespace'::VisitValue(void *a1, uint64_t a2)
{
  uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v4, a1);
  while (v4[0])
  {
    uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(v4);
  }
  return result;
}

void *anonymous namespace'::VisitValue(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a1 + 72) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 80) + 8 * v5 + 8);
      uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::begin(v16, *(void **)(v6 + 40));
      while (v16[0])
      {
        uint64_t v7 = *(void *)(v16[0] + 24);
        int v8 = *(_DWORD *)(v7 + 48);
        if (v8 >= 1)
        {
          for (uint64_t i = 0; i < v8; ++i)
          {
            uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * i + 8);
            if (*(_DWORD *)(v10 + 28) == 2)
            {
              int v8 = *(_DWORD *)(v7 + 48);
            }
          }
        }
        uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair>::operator++(v16);
      }
      uint64_t v11 = *(void *)(v6 + 88);
      if (v11) {
        uint64_t v12 = (uint64_t *)(v11 + 8);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(int *)(v6 + 80);
      if (v13)
      {
        uint64_t v14 = 8 * v13;
        do
        {
          uint64_t v15 = *v12++;
          v14 -= 8;
        }
        while (v14);
      }
      ++v5;
    }
    while (v5 < *(int *)(a1 + 72));
  }
  return result;
}

uint64_t anonymous namespace'::VisitValue(uint64_t result, uint64_t a2)
{
  int8x8_t v2 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
  if (*(void *)(result + 24)) {
    int8x8_t v2 = *(uint64_t **)(result + 24);
  }
  uint64_t v4 = result;
  switch(*((_DWORD *)v2 + 7))
  {
    case 1:
      uint64_t v5 = *(void *)(a2 + 24);
      if (!v5) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)v5 + 48);
      uint64_t result = v6();
      break;
    case 2:
      if (*(_DWORD *)(result + 44) != 3)
      {
        CoreML::Specification::MILSpec::Value::clear_value(result);
        *(_DWORD *)(v4 + 44) = 3;
        operator new();
      }
      uint64_t v9 = *(void *)(result + 32);
      if (*(_DWORD *)(v9 + 28) != 3)
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v9);
        *(_DWORD *)(v9 + 2_Block_object_dispose(&a9, 8) = 3;
        operator new();
      }
      uint64_t v12 = *(void *)(v9 + 16);
      if (*(int *)(v12 + 24) >= 1)
      {
        uint64_t v16 = 0;
        do
        while (v16 < *(int *)(v12 + 24));
      }
      break;
    case 3:
      if (*(_DWORD *)(result + 44) != 3)
      {
        CoreML::Specification::MILSpec::Value::clear_value(result);
        *(_DWORD *)(v4 + 44) = 3;
        operator new();
      }
      uint64_t v7 = *(void *)(result + 32);
      if (*(_DWORD *)(v7 + 28) != 2)
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v7);
        *(_DWORD *)(v7 + 2_Block_object_dispose(&a9, 8) = 2;
        operator new();
      }
      uint64_t v10 = *(void *)(v7 + 16);
      if (*(int *)(v10 + 24) >= 1)
      {
        uint64_t v13 = 0;
        do
        while (v13 < *(int *)(v10 + 24));
      }
      break;
    case 4:
      if (*(_DWORD *)(result + 44) != 3)
      {
        CoreML::Specification::MILSpec::Value::clear_value(result);
        *(_DWORD *)(v4 + 44) = 3;
        operator new();
      }
      uint64_t v8 = *(void *)(result + 32);
      if (*(_DWORD *)(v8 + 28) != 4)
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v8);
        *(_DWORD *)(v8 + 2_Block_object_dispose(&a9, 8) = 4;
        operator new();
      }
      uint64_t v11 = *(void *)(v8 + 16);
      if (*(int *)(v11 + 24) >= 1)
      {
        uint64_t v14 = 0;
        do
        {
          uint64_t v15 = *(void *)(*(void *)(*(void *)(v11 + 32) + 8 * v14 + 8) + 24);
          if (!v15) {
            operator new();
          }
          ++v14;
        }
        while (v14 < *(int *)(v11 + 24));
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_19E9E2E74(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

void *std::__function::__func<anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::target_type()
{
}

uint64_t std::__function::__func<anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN12_GLOBAL__N_132LoadBlobFileReferencesIntoMemoryERN6CoreML13Specification5ModelEP5NSURLPU15__autoreleasingP7NSErrorE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::operator()(uint64_t a1, uint64_t a2)
{
  if (**(void **)(a1 + 8)) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = *(_DWORD *)(a2 + 44) == 5;
  }
  if (v2)
  {
    uint64_t v4 = *(void *)(*(void *)(a2 + 32) + 16);
    id v5 = [**(id **)(a1 + 16) path];
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v5 UTF8String]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }

    uint64_t v6 = (void *)MEMORY[0x1E4F1CB10];
    if ((v19.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v19;
    }
    else {
      uint64_t v7 = (std::__fs::filesystem::path *)v19.__pn_.__r_.__value_.__r.__words[0];
    }
    uint64_t v8 = [NSString stringWithUTF8String:v7];
    uint64_t v9 = [v6 fileURLWithPath:v8];

    if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__pn_.__r_.__value_.__l.__data_);
    }
    uint64_t v10 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfURL:v9 options:1 error:**(void **)(a1 + 24)];
    if (!v10) {
      goto LABEL_26;
    }
    id v11 = [v9 path];
    __p.__r_.__value_.__r.__words[0] = [v11 UTF8String];
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v19.__pn_, &__p.__r_.__value_.__l.__data_);

    id v12 = [**(id **)(a1 + 16) path];
    v17.__pn_.__r_.__value_.__r.__words[0] = [v12 UTF8String];
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &v17.__pn_.__r_.__value_.__l.__data_);

    std::__fs::filesystem::relative[abi:ne180100](&v17, &v19, (const std::__fs::filesystem::path *)&__p);
    if (SHIBYTE(v17.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v17.__pn_.__r_.__value_.__l.__size_)
      {
        uint64_t v13 = (std::__fs::filesystem::path *)v17.__pn_.__r_.__value_.__r.__words[0];
        goto LABEL_19;
      }
    }
    else if (*((unsigned char *)&v17.__pn_.__r_.__value_.__s + 23))
    {
      uint64_t v13 = &v17;
LABEL_19:
      uint64_t v14 = (void *)MEMORY[0x1E4F1CB10];
      uint64_t v15 = [NSString stringWithUTF8String:v13];
      uint64_t v16 = [v14 fileURLWithPath:v15 relativeToURL:**(void **)(a1 + 16)];

      uint64_t v9 = (void *)v16;
    }
    [**(id **)(a1 + 32) setObject:v10 forKeyedSubscript:v9];
    if (SHIBYTE(v17.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__pn_.__r_.__value_.__l.__data_);
    }
LABEL_26:
  }
}

void sub_19E9E3168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

void anonymous namespace'::ResolveModelPathPlaceHolder(std::__fs::filesystem::path *a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v22 = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "@model_path");
  int64_t size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v22;
  }
  else {
    uint64_t v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v7 = v20;
  }
  else {
    uint64_t v7 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    int64_t v8 = v21;
  }
  else {
    int64_t v8 = (int64_t)v20[1];
  }
  if (v8)
  {
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t size = v22.__r_.__value_.__l.__size_;
    }
    if (size >= v8)
    {
      uint64_t v9 = (char *)v6 + size;
      int v10 = *(char *)v7;
      id v11 = v6;
      do
      {
        int64_t v12 = size - v8;
        if (v12 == -1) {
          break;
        }
        uint64_t v13 = (char *)memchr(v11, v10, v12 + 1);
        if (!v13) {
          break;
        }
        uint64_t v14 = v13;
        if (!memcmp(v13, v7, v8))
        {
          if (v14 != v9)
          {
            std::string::size_type v15 = v14 - (char *)v6;
            if (v14 - (char *)v6 != -1) {
              goto LABEL_24;
            }
          }
          break;
        }
        id v11 = (std::string *)(v14 + 1);
        int64_t size = v9 - (v14 + 1);
      }
      while (size >= v8);
    }
  }
  else
  {
    std::string::size_type v15 = 0;
LABEL_24:
    int v16 = *(char *)(a3 + 23);
    if (v16 >= 0) {
      std::__fs::filesystem::path v17 = (const std::string::value_type *)a3;
    }
    else {
      std::__fs::filesystem::path v17 = *(const std::string::value_type **)a3;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(a3 + 8);
    }
    std::string::replace(&v22, v15, v8, v17, v18);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)&v22);
  std::__fs::filesystem::__canonical(a1, (const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v21 < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_19E9E33E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0DD288;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::__clone(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x28uLL);
  *(void *)BOOL v2 = &unk_1EF0DD288;
  *(_OWORD *)(v2 + _Block_object_dispose(&a9, 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<anonymous namespace'::LoadBlobFileReferencesIntoMemory(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::~__func()
{
}

void sub_19E9E3A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a2)
  {
    std::__shared_weak_count::~__shared_weak_count(v51);
    operator delete(v55);
    if (*(char *)(v52 - 185) < 0) {
      operator delete(*(void **)(v52 - 208));
    }
    uint64_t v56 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      unint64_t v57 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        uint64_t v66 = (*(uint64_t (**)(void *))(*(void *)v56 + 16))(v56);
        *(_DWORD *)(v52 - 20_Block_object_dispose(&a9, 8) = 136315138;
        *(void *)(v52 - 204) = v66;
        _os_log_error_impl(&dword_19E58B000, v57, OS_LOG_TYPE_ERROR, "Failed to resolve blob file reference, error=%s.", (uint8_t *)(v52 - 208), 0xCu);
      }

      if (v50)
      {
        uint64_t v58 = (void *)MEMORY[0x1E4F28C58];
        *(void *)(v52 - 184) = *MEMORY[0x1E4F28568];
        uint64_t v59 = NSString;
        (*(void (**)(void *))(*(void *)v56 + 16))(v56);
        unint64_t v60 = [v59 stringWithFormat:@"Failed to resolve blob file reference, error=%s."];
        *(void *)(v52 - 20_Block_object_dispose(&a9, 8) = v60;
        uint64_t v61 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v52 - 208 forKeys:v52 - 184 count:1];
        *uint64_t v50 = [v58 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v61];
      }
    }
    else
    {
      unint64_t v62 = +[MLLogging coreChannel];
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)(v52 - 20_Block_object_dispose(&a9, 8) = 0;
        _os_log_error_impl(&dword_19E58B000, v62, OS_LOG_TYPE_ERROR, "Failed to resolve blob file reference, unknown error.", (uint8_t *)(v52 - 208), 2u);
      }

      if (v50)
      {
        uint64_t v63 = (void *)MEMORY[0x1E4F28C58];
        *(void *)(v52 - 184) = *MEMORY[0x1E4F28568];
        uint64_t v64 = [NSString stringWithFormat:@"Failed to resolve blob file reference, unknown error."];
        *(void *)(v52 - 20_Block_object_dispose(&a9, 8) = v64;
        uint64_t v65 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v52 - 208 forKeys:v52 - 184 count:1];
        *uint64_t v50 = [v63 errorWithDomain:@"com.apple.CoreML" code:0 userInfo:v65];
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x19E9E391CLL);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__17730(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__17731(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN12_GLOBAL__N_118SerializeModelSpecERN6CoreML13Specification5ModelE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  BOOL v2 = *(std::__shared_weak_count **)(v1 + 56);
  *(void *)(v1 + 4_Block_object_dispose(&a9, 8) = 0;
  *(void *)(v1 + 56) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t *std::unique_ptr<anonymous namespace'::MILBlobReader>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    int v3 = *(void **)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v4 = (void *)*v3;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::Blob::StorageReader>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        int v3 = v4;
      }
      while (v4);
    }
    id v5 = *(void **)v2;
    *(void *)uint64_t v2 = 0;
    if (v5) {
      operator delete(v5);
    }
    MEMORY[0x19F3C1920](v2, 0x10A0C408EF24B1CLL);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::Blob::StorageReader>>,0>(uint64_t a1)
{
  uint64_t v2 = *(MIL::Blob::StorageReader **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2)
  {
    MIL::Blob::StorageReader::~StorageReader(v2);
    MEMORY[0x19F3C1920]();
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    id v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_19E9E4000(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDC38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0DDC38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::target_type()
{
}

uint64_t std::__function::__func<anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN12_GLOBAL__N_169ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValuesERN6CoreML13Specification5ModelEP5NSURLPU15__autoreleasingP7NSErrorE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::operator()(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 44) == 5)
  {
    int v3 = *(void **)(a1 + 8);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::string pn = __p.__pn_;
    }
    uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>>>::find<std::string>(v3, (unsigned __int8 *)&pn);
    if (!v4) {
      operator new();
    }
    RawDataView = (CoreML::Specification::MILSpec::protobuf_MIL_2eproto *)MIL::Blob::StorageReader::GetRawDataView(*((MIL::Blob::StorageReader **)v4 + 5));
    uint64_t v6 = (const std::string::value_type *)RawDataView;
    uint64_t v8 = v7;
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(pn.__r_.__value_.__l.__data_);
    }
    int v9 = *(_DWORD *)(a2 + 44);
    if (v9 != 3)
    {
      if (v9 == 5)
      {
        uint64_t v10 = *(void *)(a2 + 32);
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
        *(_DWORD *)(a2 + 44) = 0;
      }
      CoreML::Specification::MILSpec::Value::clear_value(a2);
      *(_DWORD *)(a2 + 44) = 3;
      operator new();
    }
    uint64_t v11 = *(void *)(a2 + 32);
    if (*(_DWORD *)(v11 + 28) != 1)
    {
      CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v11);
      *(_DWORD *)(v11 + 2_Block_object_dispose(&a9, 8) = 1;
      operator new();
    }
    uint64_t v12 = *(void *)(v11 + 16);
    uint64_t v13 = *(uint64_t **)(a2 + 24);
    if (!v13) {
      uint64_t v13 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
    }
    if (*((_DWORD *)v13 + 7) == 1)
    {
      uint64_t v14 = (_DWORD *)v13[2];
    }
    else
    {
      CoreML::Specification::MILSpec::protobuf_MIL_2eproto::InitDefaults(RawDataView);
      uint64_t v14 = &CoreML::Specification::MILSpec::_TensorType_default_instance_;
    }
    switch(v14[20])
    {
      case 1:
        if (*(_DWORD *)(v12 + 28) != 3)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value(v12);
          *(_DWORD *)(v12 + 2_Block_object_dispose(&a9, 8) = 3;
          operator new();
        }
        uint64_t v23 = *(void *)(v12 + 16);
        uint64_t v74 = 0;
        if (!v8) {
          uint64_t v6 = 0;
        }
        memset(&v93, 0, sizeof(v93));
        if (!v8) {
          goto LABEL_158;
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](&v93, v8);
        std::string::size_type size = v93.__r_.__value_.__l.__size_;
        unint64_t v76 = v93.__r_.__value_.__l.__size_ + v8;
        v93.__r_.__value_.__l.__size_ += v8;
        if (size)
        {
          unint64_t v77 = v76 - 1;
          if (((v76 - 1) ^ (size - 1)) <= 0x3F)
          {
            uint64_t v74 = (int *)v93.__r_.__value_.__r.__words[0];
            goto LABEL_150;
          }
        }
        else
        {
          unint64_t v77 = v76 - 1;
        }
        uint64_t v74 = (int *)v93.__r_.__value_.__r.__words[0];
        unint64_t v78 = v77 >> 6;
        if (v76 >= 0x41) {
          unint64_t v79 = v78;
        }
        else {
          unint64_t v79 = 0;
        }
        *(void *)(v93.__r_.__value_.__r.__words[0] + 8 * v79) = 0;
LABEL_150:
        int v80 = size & 0x3F;
        int v81 = (uint64_t *)&v74[2 * (size >> 6)];
        do
        {
          uint64_t v82 = 1 << v80;
          if (*v6) {
            uint64_t v83 = *v81 | v82;
          }
          else {
            uint64_t v83 = *v81 & ~v82;
          }
          *int v81 = v83;
          ++v6;
          v81 += v80 == 63;
          if (v80 == 63) {
            int v80 = 0;
          }
          else {
            ++v80;
          }
          --v8;
        }
        while (v8);
LABEL_158:
        int v84 = v93.__r_.__value_.__s.__data_[8] & 0x3F;
        if (v93.__r_.__value_.__l.__size_ > 0x3F || (v93.__r_.__value_.__s.__data_[8] & 0x3F) != 0)
        {
          int v85 = 0;
          std::string::size_type v86 = &v74[2 * (v93.__r_.__value_.__l.__size_ >> 6)];
          int v87 = *(_DWORD *)(v23 + 16);
          do
          {
            uint64_t v88 = *(void *)v74;
            if (v87 == *(_DWORD *)(v23 + 20))
            {
              google::protobuf::RepeatedField<BOOL>::Reserve((unsigned int *)(v23 + 16), v87 + 1);
              int v87 = *(_DWORD *)(v23 + 16);
            }
            uint64_t v89 = *(void *)(v23 + 24) + v87++;
            *(_DWORD *)(v23 + 16) = v87;
            *(unsigned char *)(v89 + _Block_object_dispose(&a9, 8) = (v88 & (1 << v85)) != 0;
            v74 += 2 * (v85 == 63);
            if (v85 == 63) {
              int v85 = 0;
            }
            else {
              ++v85;
            }
          }
          while (v74 != v86 || v85 != v84);
          uint64_t v74 = (int *)v93.__r_.__value_.__r.__words[0];
        }
        if (v74)
        {
          uint64_t v58 = v74;
LABEL_171:
          operator delete(v58);
        }
LABEL_172:
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        }
        break;
      case 0xA:
      case 0x15:
      case 0x19:
      case 0x1F:
      case 0x21:
      case 0x23:
      case 0x26:
      case 0x27:
        if (*(_DWORD *)(v12 + 28) != 7)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value(v12);
          *(_DWORD *)(v12 + 2_Block_object_dispose(&a9, 8) = 7;
          operator new();
        }
        std::string::size_type v15 = *(long long **)(*(void *)(v12 + 16) + 16);
        if (v15 == &google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
        }
        std::string::append((std::string *)v15, v6, v8);
        goto LABEL_172;
      case 0xB:
        if (*(_DWORD *)(v12 + 28) != 1)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value(v12);
          *(_DWORD *)(v12 + 2_Block_object_dispose(&a9, 8) = 1;
          operator new();
        }
        uint64_t v17 = *(void *)(v12 + 16);
        if ((unint64_t)v8 >= 4) {
          int v32 = v6;
        }
        else {
          int v32 = 0;
        }
        memset(&v93, 0, sizeof(v93));
        std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&v93, v32, (uint64_t)&v32[v8 & 0xFFFFFFFFFFFFFFFCLL], v8 >> 2);
        std::string::size_type v34 = v93.__r_.__value_.__l.__size_;
        uint64_t v33 = (int *)v93.__r_.__value_.__r.__words[0];
        if (v93.__r_.__value_.__r.__words[0] == v93.__r_.__value_.__l.__size_) {
          goto LABEL_107;
        }
        int v35 = *(_DWORD *)(v17 + 16);
        do
        {
          int v36 = *v33;
          if (v35 == *(_DWORD *)(v17 + 20))
          {
            google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v17 + 16), v35 + 1);
            int v35 = *(_DWORD *)(v17 + 16);
          }
          uint64_t v37 = *(void *)(v17 + 24) + 4 * v35++;
          *(_DWORD *)(v17 + 16) = v35;
          *(_DWORD *)(v37 + _Block_object_dispose(&a9, 8) = v36;
          ++v33;
        }
        while (v33 != (int *)v34);
        goto LABEL_106;
      case 0xC:
        if (*(_DWORD *)(v12 + 28) != 6)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value(v12);
          *(_DWORD *)(v12 + 2_Block_object_dispose(&a9, 8) = 6;
          operator new();
        }
        uint64_t v19 = *(void *)(v12 + 16);
        if ((unint64_t)v8 >= 8) {
          uint64_t v46 = v6;
        }
        else {
          uint64_t v46 = 0;
        }
        if ((v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
          goto LABEL_172;
        }
        if (v8 < 0) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v47 = v8 >> 3;
        unint64_t v48 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v8 >> 3);
        size_t v26 = v48;
        if ((unint64_t)v8 >= 8) {
          memmove(v48, v46, v8 & 0xFFFFFFFFFFFFFFF8);
        }
        if (8 * v47)
        {
          uint64_t v49 = 0;
          int v50 = *(_DWORD *)(v19 + 16);
          do
          {
            uint64_t v51 = *(void *)&v26[v49];
            if (v50 == *(_DWORD *)(v19 + 20))
            {
              google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v19 + 16), v50 + 1);
              int v50 = *(_DWORD *)(v19 + 16);
            }
            uint64_t v52 = *(void *)(v19 + 24) + 8 * v50++;
            *(_DWORD *)(v19 + 16) = v50;
            *(void *)(v52 + _Block_object_dispose(&a9, 8) = v51;
            v49 += 2;
          }
          while (2 * v47 != v49);
        }
        goto LABEL_136;
      case 0x16:
        if (*(_DWORD *)(v12 + 28) != 2)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value(v12);
          *(_DWORD *)(v12 + 2_Block_object_dispose(&a9, 8) = 2;
          operator new();
        }
        uint64_t v16 = *(void *)(v12 + 16);
        if ((unint64_t)v8 >= 2) {
          size_t v24 = v6;
        }
        else {
          size_t v24 = 0;
        }
        if ((v8 & 0xFFFFFFFFFFFFFFFELL) == 0) {
          goto LABEL_172;
        }
        if (v8 < 0) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v25 = (char *)operator new(v8 & 0xFFFFFFFFFFFFFFFELL);
        size_t v26 = (int *)v25;
        id v27 = &v25[2 * (v8 >> 1)];
        if ((unint64_t)v8 >= 2) {
          memmove(v25, v24, v8 & 0xFFFFFFFFFFFFFFFELL);
        }
        if (v26 != (int *)v27)
        {
          uint64_t v28 = 0;
          do
          {
            int v29 = *(__int16 *)((char *)v26 + v28);
            int v30 = *(_DWORD *)(v16 + 16);
            if (v30 == *(_DWORD *)(v16 + 20))
            {
              google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v16 + 16), v30 + 1);
              int v30 = *(_DWORD *)(v16 + 16);
            }
            uint64_t v31 = *(void *)(v16 + 24);
            *(_DWORD *)(v16 + 16) = v30 + 1;
            *(_DWORD *)(v31 + 4 * v30 + _Block_object_dispose(&a9, 8) = v29;
            v28 += 2;
          }
          while (2 * (v8 >> 1) != v28);
        }
        goto LABEL_137;
      case 0x17:
        if (*(_DWORD *)(v12 + 28) != 2)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value(v12);
          *(_DWORD *)(v12 + 2_Block_object_dispose(&a9, 8) = 2;
          operator new();
        }
        uint64_t v18 = *(void *)(v12 + 16);
        if ((unint64_t)v8 >= 4) {
          unint64_t v38 = v6;
        }
        else {
          unint64_t v38 = 0;
        }
        if ((v8 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
          goto LABEL_172;
        }
        if (v8 < 0) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v8 >> 2;
        uint64_t v40 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8 >> 2);
        size_t v26 = v40;
        if ((unint64_t)v8 >= 4) {
          memmove(v40, v38, v8 & 0xFFFFFFFFFFFFFFFCLL);
        }
        uint64_t v41 = 4 * v39;
        if (4 * v39)
        {
          unint64_t v42 = 0;
          do
          {
            int v43 = v26[v42 / 4];
            int v44 = *(_DWORD *)(v18 + 16);
            if (v44 == *(_DWORD *)(v18 + 20))
            {
              google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v18 + 16), v44 + 1);
              int v44 = *(_DWORD *)(v18 + 16);
            }
            uint64_t v45 = *(void *)(v18 + 24);
            *(_DWORD *)(v18 + 16) = v44 + 1;
            *(_DWORD *)(v45 + 4 * v44 + _Block_object_dispose(&a9, 8) = v43;
            v42 += 4;
          }
          while (v41 != v42);
        }
        goto LABEL_136;
      case 0x18:
        if (*(_DWORD *)(v12 + 28) != 5)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value(v12);
          *(_DWORD *)(v12 + 2_Block_object_dispose(&a9, 8) = 5;
          operator new();
        }
        uint64_t v20 = *(void *)(v12 + 16);
        if ((unint64_t)v8 >= 8) {
          id v53 = v6;
        }
        else {
          id v53 = 0;
        }
        memset(&v93, 0, sizeof(v93));
        std::vector<long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(&v93, v53, (uint64_t)&v53[v8 & 0xFFFFFFFFFFFFFFF8], v8 >> 3);
        std::string::size_type v54 = v93.__r_.__value_.__l.__size_;
        uint64_t v33 = (int *)v93.__r_.__value_.__r.__words[0];
        if (v93.__r_.__value_.__r.__words[0] == v93.__r_.__value_.__l.__size_) {
          goto LABEL_107;
        }
        int v55 = *(_DWORD *)(v20 + 16);
        do
        {
          uint64_t v56 = *v33;
          if (v55 == *(_DWORD *)(v20 + 20))
          {
            google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v20 + 16), v55 + 1);
            int v55 = *(_DWORD *)(v20 + 16);
          }
          uint64_t v57 = *(void *)(v20 + 24) + 8 * v55++;
          *(_DWORD *)(v20 + 16) = v55;
          *(void *)(v57 + _Block_object_dispose(&a9, 8) = v56;
          v33 += 2;
        }
        while (v33 != (int *)v54);
LABEL_106:
        uint64_t v33 = (int *)v93.__r_.__value_.__r.__words[0];
LABEL_107:
        if (!v33) {
          goto LABEL_172;
        }
        uint64_t v58 = v33;
        goto LABEL_171;
      case 0x20:
        if (*(_DWORD *)(v12 + 28) != 2)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value(v12);
          *(_DWORD *)(v12 + 2_Block_object_dispose(&a9, 8) = 2;
          operator new();
        }
        uint64_t v21 = *(void *)(v12 + 16);
        if ((unint64_t)v8 >= 2) {
          uint64_t v59 = v6;
        }
        else {
          uint64_t v59 = 0;
        }
        if ((v8 & 0xFFFFFFFFFFFFFFFELL) == 0) {
          goto LABEL_172;
        }
        if (v8 < 0) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v60 = (char *)operator new(v8 & 0xFFFFFFFFFFFFFFFELL);
        size_t v26 = (int *)v60;
        uint64_t v61 = &v60[2 * (v8 >> 1)];
        if ((unint64_t)v8 >= 2) {
          memmove(v60, v59, v8 & 0xFFFFFFFFFFFFFFFELL);
        }
        if (v26 != (int *)v61)
        {
          uint64_t v62 = 0;
          do
          {
            int v63 = *(unsigned __int16 *)((char *)v26 + v62);
            int v64 = *(_DWORD *)(v21 + 16);
            if (v64 == *(_DWORD *)(v21 + 20))
            {
              google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v21 + 16), v64 + 1);
              int v64 = *(_DWORD *)(v21 + 16);
            }
            uint64_t v65 = *(void *)(v21 + 24);
            *(_DWORD *)(v21 + 16) = v64 + 1;
            *(_DWORD *)(v65 + 4 * v64 + _Block_object_dispose(&a9, 8) = v63;
            v62 += 2;
          }
          while (2 * (v8 >> 1) != v62);
        }
        goto LABEL_137;
      case 0x22:
        if (*(_DWORD *)(v12 + 28) != 5)
        {
          CoreML::Specification::MILSpec::TensorValue::clear_value(v12);
          *(_DWORD *)(v12 + 2_Block_object_dispose(&a9, 8) = 5;
          operator new();
        }
        uint64_t v22 = *(void *)(v12 + 16);
        if ((unint64_t)v8 >= 8) {
          uint64_t v66 = v6;
        }
        else {
          uint64_t v66 = 0;
        }
        if ((v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
          goto LABEL_172;
        }
        if (v8 < 0) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v67 = v8 >> 3;
        unint64_t v68 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<_KDInterval>>(v8 >> 3);
        size_t v26 = v68;
        if ((unint64_t)v8 >= 8) {
          memmove(v68, v66, v8 & 0xFFFFFFFFFFFFFFF8);
        }
        uint64_t v69 = 8 * v67;
        if (8 * v67)
        {
          unint64_t v70 = 0;
          int v71 = *(_DWORD *)(v22 + 16);
          do
          {
            uint64_t v72 = v26[v70 / 4];
            if (v71 == *(_DWORD *)(v22 + 20))
            {
              google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v22 + 16), v71 + 1);
              int v71 = *(_DWORD *)(v22 + 16);
            }
            uint64_t v73 = *(void *)(v22 + 24) + 8 * v71++;
            *(_DWORD *)(v22 + 16) = v71;
            *(void *)(v73 + _Block_object_dispose(&a9, 8) = v72;
            v70 += 8;
          }
          while (v69 != v70);
        }
LABEL_136:
        if (!v26) {
          goto LABEL_172;
        }
LABEL_137:
        uint64_t v58 = v26;
        goto LABEL_171;
      default:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v93);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93.__r_.__value_.__r.__words[2], (uint64_t)"Failed to set value for DataType=", 33);
        std::ostream::operator<<();
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &pn);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
}

void sub_19E9E5030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v43 & 1) == 0)
    {
LABEL_6:
      a23 = (void *)*MEMORY[0x1E4FBA408];
      uint64_t v45 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(void **)((char *)&a23 + *(a23 - 3)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
      a25 = v45;
      a26 = MEMORY[0x1E4FBA470] + 16;
      if (a39 < 0) {
        operator delete(a34);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x19F3C1850](&a42);
      if (a15 < 0) {
        operator delete(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v42);
  goto LABEL_6;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void google::protobuf::RepeatedField<BOOL>::Reserve(unsigned int *a1, int a2)
{
  signed int v2 = a1[1];
  if (v2 < a2)
  {
    unint64_t v4 = (google::protobuf::Arena **)*((void *)a1 + 1);
    if (v4) {
      int8x8_t v5 = *v4;
    }
    else {
      int8x8_t v5 = 0;
    }
    int v6 = 2 * v2;
    if (v6 <= a2) {
      int v6 = a2;
    }
    if (v6 <= 4) {
      int v7 = 4;
    }
    else {
      int v7 = v6;
    }
    if (v5) {
      Aligned = google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x1E4FBA380], (v7 + 8));
    }
    else {
      Aligned = operator new((v7 + 8));
    }
    *((void *)a1 + 1) = Aligned;
    void *Aligned = v5;
    a1[1] = v7;
    size_t v9 = *a1;
    if ((int)v9 >= 1) {
      memcpy(Aligned + 1, v4 + 1, v9);
    }
    if (v4 && !*v4)
    {
      operator delete(v4);
    }
  }
}

void google::protobuf::RepeatedField<float>::Reserve(unsigned int *a1, int a2)
{
  signed int v2 = a1[1];
  if (v2 < a2)
  {
    unint64_t v4 = (google::protobuf::Arena **)*((void *)a1 + 1);
    if (v4) {
      int8x8_t v5 = *v4;
    }
    else {
      int8x8_t v5 = 0;
    }
    int v6 = 2 * v2;
    if (v6 <= a2) {
      int v6 = a2;
    }
    if (v6 <= 4) {
      unsigned int v7 = 4;
    }
    else {
      unsigned int v7 = v6;
    }
    uint64_t v8 = 4 * v7;
    if (v5) {
      Aligned = google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x1E4FBA380], v8 + 8);
    }
    else {
      Aligned = operator new(v8 + 8);
    }
    *((void *)a1 + 1) = Aligned;
    void *Aligned = v5;
    a1[1] = v7;
    uint64_t v10 = *a1;
    if ((int)v10 >= 1) {
      memcpy(Aligned + 1, v4 + 1, 4 * v10);
    }
    if (v4 && !*v4)
    {
      operator delete(v4);
    }
  }
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    __n128 result = std::vector<_KDInterval>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E9E568C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Blob::StorageReader>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::Blob::StorageReader>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

__n128 std::__function::__func<anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0DD2E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::__clone(uint64_t a1)
{
  signed int v2 = (char *)operator new(0x18uLL);
  *(void *)signed int v2 = &unk_1EF0DD2E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

void std::__function::__func<anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0,std::allocator<anonymous namespace'::ModelSpecificationDataByResolvingBlobFileReferencesIntoInMemoryValues(CoreML::Specification::Model &,NSURL *,NSError * {__autoreleasing}*)::$_0>,void ()(CoreML::Specification::MILSpec::Value &)>::~__func()
{
}

void sub_19E9E5900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MLTreeEnsembleXGBoostClassifier;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

uint64_t softLink_XGBoosterFree(void *a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  signed int v2 = (uint64_t (*)(void *))getXGBoosterFreeSymbolLoc(void)::ptr;
  size_t v9 = getXGBoosterFreeSymbolLoc(void)::ptr;
  if (!getXGBoosterFreeSymbolLoc(void)::ptr)
  {
    int v3 = (void *)XGBoostFrameworkLibrary();
    void v7[3] = (uint64_t)dlsym(v3, "XGBoosterFree");
    getXGBoosterFreeSymbolLoc(void)::ptr = (_UNKNOWN *)v7[3];
    signed int v2 = (uint64_t (*)(void *))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    int8x8_t v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return v2(a1);
}

void *___ZL25getXGBoosterFreeSymbolLocv_block_invoke(uint64_t a1)
{
  signed int v2 = (void *)XGBoostFrameworkLibrary();
  __n128 result = dlsym(v2, "XGBoosterFree");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getXGBoosterFreeSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t XGBoostFrameworkLibrary(void)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!XGBoostFrameworkLibraryCore(char **)::frameworkLibrary)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    v3[2] = 3221225472;
    v3[3] = ___ZL27XGBoostFrameworkLibraryCorePPc_block_invoke;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E59A4BC0;
    uint64_t v5 = 0;
    XGBoostFrameworkLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    uint64_t v1 = (void *)v3[0];
    uint64_t v0 = XGBoostFrameworkLibraryCore(char **)::frameworkLibrary;
    if (XGBoostFrameworkLibraryCore(char **)::frameworkLibrary)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      uint64_t v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return XGBoostFrameworkLibraryCore(char **)::frameworkLibrary;
}

uint64_t ___ZL27XGBoostFrameworkLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  XGBoostFrameworkLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void sub_19E9E5DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9E5FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9E62C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void *___ZL27getXGBoosterCreateSymbolLocv_block_invoke(uint64_t a1)
{
  signed int v2 = (void *)XGBoostFrameworkLibrary();
  uint64_t result = dlsym(v2, "XGBoosterCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getXGBoosterCreateSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL30getXGBoosterLoadModelSymbolLocv_block_invoke(uint64_t a1)
{
  signed int v2 = (void *)XGBoostFrameworkLibrary();
  uint64_t result = dlsym(v2, "XGBoosterLoadModel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getXGBoosterLoadModelSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19E9E65B4(_Unwind_Exception *a1)
{
  size_t v9 = v5;

  _Unwind_Resume(a1);
}

void sub_19E9E6A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19E9E6B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9E6C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9E7238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_19E9E7520(_Unwind_Exception *a1)
{
  XGBoostDataFormat::~XGBoostDataFormat(v2);
  _Unwind_Resume(a1);
}

void XGBoostDataFormat::~XGBoostDataFormat(XGBoostDataFormat *this)
{
  signed int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void sub_19E9E7928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  XGBoostDataFormat::~XGBoostDataFormat(v14);
  _Unwind_Resume(a1);
}

void sub_19E9E7AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9E7D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  XGBoostDataFormat::~XGBoostDataFormat((XGBoostDataFormat *)va);

  v7[2](v7);
  _Unwind_Resume(a1);
}

uint64_t softLink_XGDMatrixCreateFromMat(const float *a1, uint64_t a2, uint64_t a3, float a4, void *a5)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  size_t v9 = (uint64_t (*)(const float *, uint64_t, uint64_t, void *, float))getXGDMatrixCreateFromMatSymbolLoc(void)::ptr;
  uint64_t v16 = getXGDMatrixCreateFromMatSymbolLoc(void)::ptr;
  if (!getXGDMatrixCreateFromMatSymbolLoc(void)::ptr)
  {
    uint64_t v10 = (void *)XGBoostFrameworkLibrary();
    v14[3] = (uint64_t)dlsym(v10, "XGDMatrixCreateFromMat");
    getXGDMatrixCreateFromMatSymbolLoc(void)::ptr = (_UNKNOWN *)v14[3];
    size_t v9 = (uint64_t (*)(const float *, uint64_t, uint64_t, void *, float))v14[3];
  }
  _Block_object_dispose(&v13, 8);
  if (!v9)
  {
    dlerror();
    unint64_t v12 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v13, 8);
    _Unwind_Resume(v12);
  }
  return v9(a1, a2, a3, a5, -1.0);
}

uint64_t softLink_XGBoosterPredict(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, unint64_t *a6, const float **a7)
{
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v11 = getXGBoosterPredictSymbolLoc(void)::ptr;
  uint64_t v18 = getXGBoosterPredictSymbolLoc(void)::ptr;
  if (!getXGBoosterPredictSymbolLoc(void)::ptr)
  {
    unint64_t v12 = (void *)XGBoostFrameworkLibrary();
    void v16[3] = (uint64_t)dlsym(v12, "XGBoosterPredict");
    getXGBoosterPredictSymbolLoc(void)::ptr = (_UNKNOWN *)v16[3];
    uint64_t v11 = (void *)v16[3];
  }
  _Block_object_dispose(&v15, 8);
  if (!v11)
  {
    dlerror();
    uint64_t v14 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v15, 8);
    _Unwind_Resume(v14);
  }
  return ((uint64_t (*)(void *, void *, void, void, void, uint64_t, uint64_t))v11)(a1, a2, 0, 0, 0, a3, a4);
}

uint64_t softLink_XGDMatrixFree(void *a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  signed int v2 = (uint64_t (*)(void *))getXGDMatrixFreeSymbolLoc(void)::ptr;
  size_t v9 = getXGDMatrixFreeSymbolLoc(void)::ptr;
  if (!getXGDMatrixFreeSymbolLoc(void)::ptr)
  {
    int v3 = (void *)XGBoostFrameworkLibrary();
    void v7[3] = (uint64_t)dlsym(v3, "XGDMatrixFree");
    getXGDMatrixFreeSymbolLoc(void)::ptr = (_UNKNOWN *)v7[3];
    signed int v2 = (uint64_t (*)(void *))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    uint64_t v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return v2(a1);
}

void *___ZL25getXGDMatrixFreeSymbolLocv_block_invoke(uint64_t a1)
{
  signed int v2 = (void *)XGBoostFrameworkLibrary();
  uint64_t result = dlsym(v2, "XGDMatrixFree");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getXGDMatrixFreeSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL28getXGBoosterPredictSymbolLocv_block_invoke(uint64_t a1)
{
  signed int v2 = (void *)XGBoostFrameworkLibrary();
  uint64_t result = dlsym(v2, "XGBoosterPredict");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getXGBoosterPredictSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL34getXGDMatrixCreateFromMatSymbolLocv_block_invoke(uint64_t a1)
{
  signed int v2 = (void *)XGBoostFrameworkLibrary();
  uint64_t result = dlsym(v2, "XGDMatrixCreateFromMat");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getXGDMatrixCreateFromMatSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19E9E82B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9E857C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  XGBoostDataFormat::~XGBoostDataFormat((XGBoostDataFormat *)va);

  v8[2](v8);
  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)(v10 - 120));

  _Unwind_Resume(a1);
}

void sub_19E9E886C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _Unwind_Resume(a1);
}

void sub_19E9E8B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9E8C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::NeuralNetwork::UpdatableNeuralNetworkMLComputeBackend::Compile(CoreML::NNCompiler::Backend::NeuralNetwork::UpdatableNeuralNetworkMLComputeBackend *this, OArchive *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void))(**((void **)a2 + 1) + 48))(*((void *)a2 + 1)) == 1)
  {
    uint64_t v15 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19E58B000, v15, OS_LOG_TYPE_ERROR, "UpdatableNeuralNetworkMLComputeBackend doesn't support in-memory compilation.", (uint8_t *)&__p, 2u);
    }

    uint64_t v16 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v38 = *MEMORY[0x1E4F28568];
    uint64_t v17 = [NSString stringWithFormat:@"UpdatableNeuralNetworkMLComputeBackend doesn't support in-memory compilation."];
    uint64_t v39 = v17;
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v39 forKeys:&v38 count:1];
    uint64_t v19 = [v16 errorWithDomain:@"com.apple.CoreML" code:3 userInfo:v18];

    exception = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    CoreML::MLModelException::MLModelException(exception, v19);
  }
  CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::Compile(this, a2);
  long long v4 = (google::protobuf::MessageLite *)*((void *)this + 1);
  uint64_t v7 = (char *)this + 16;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  uint64_t v5 = *((void *)v7 + 1);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (google::protobuf::MessageLite *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  std::string::basic_string[abi:ne180100]<0>(v36, "NetworkUpdateParameters");
  std::string::basic_string[abi:ne180100]<0>(&__p, "updateParameters");
  size_t v9 = OArchive::nestedArchive((char *)a2, (uint64_t)&__p);
  if (SHIBYTE(v45) < 0) {
    operator delete(__p);
  }
  (*(void (**)(void))(**((void **)v9 + 1) + 56))(*((void *)v9 + 1));
  uint64_t v10 = OArchive::nestedArchive(v9, (uint64_t)v36);
  (*(void (**)(void))(**((void **)v10 + 1) + 56))(*((void *)v10 + 1));
  uint64_t v11 = (*(uint64_t (**)(void))(**((void **)v10 + 1) + 56))(*((void *)v10 + 1));
  std::__fs::filesystem::path __p = &unk_1EF0DB360;
  int v44 = &unk_1EF0DB338;
  uint64_t v45 = v11;
  uint64_t v46 = &unk_1EF0DB3E8;
  uint64_t v47 = &v44;
  __int16 v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0x2000;
  if (google::protobuf::MessageLite::SerializeToZeroCopyStream(v8, (google::protobuf::io::ZeroCopyOutputStream *)&__p))
  {
    CoreML::Result::Result((CoreML::Result *)&v33);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v40, "unable to serialize object");
    uint64_t v33 = 4;
    std::operator+<char>();
    if (SHIBYTE(v41) < 0) {
      operator delete(v40);
    }
  }
  google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)&__p);
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if ((v33 & 0xFFFFFFEF) != 0)
  {
    uint64_t v21 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19E58B000, v21, OS_LOG_TYPE_ERROR, "Failed to archive update parameters.", (uint8_t *)&__p, 2u);
    }

    uint64_t v22 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v40 = (void *)*MEMORY[0x1E4F28568];
    uint64_t v23 = [NSString stringWithFormat:@"Failed to archive update parameters."];
    std::__fs::filesystem::path __p = v23;
    size_t v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&__p forKeys:&v40 count:1];
    uint64_t v25 = [v22 errorWithDomain:@"com.apple.CoreML" code:3 userInfo:v24];

    size_t v26 = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    CoreML::MLModelException::MLModelException(v26, v25);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "entireSpec");
  unint64_t v12 = OArchive::nestedArchive((char *)a2, (uint64_t)&__p);
  if (SHIBYTE(v45) < 0) {
    operator delete(__p);
  }
  (*(void (**)(void))(**((void **)v12 + 1) + 56))(*((void *)v12 + 1));
  uint64_t v13 = (*(uint64_t (**)(void))(**((void **)v12 + 1) + 56))(*((void *)v12 + 1));
  std::__fs::filesystem::path __p = &unk_1EF0DB360;
  int v44 = &unk_1EF0DB338;
  uint64_t v45 = v13;
  uint64_t v46 = &unk_1EF0DB3E8;
  uint64_t v47 = &v44;
  __int16 v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0x2000;
  if (google::protobuf::MessageLite::SerializeToZeroCopyStream(v4, (google::protobuf::io::ZeroCopyOutputStream *)&__p))
  {
    CoreML::Result::Result((CoreML::Result *)&v40);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "unable to serialize object");
    uint64_t v40 = (void *)4;
    std::operator+<char>();
    if (v37 < 0) {
      operator delete(v36[0]);
    }
  }
  google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)&__p);
  int v14 = (int)v40;
  uint64_t v33 = (uint64_t)v40;
  if (SHIBYTE(v35) < 0)
  {
    operator delete((void *)v34);
    int v14 = v33;
  }
  long long v34 = v41;
  uint64_t v35 = v42;
  if ((v14 & 0xFFFFFFEF) != 0)
  {
    id v27 = +[MLLogging coreChannel];
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19E58B000, v27, OS_LOG_TYPE_ERROR, "Failed to archive entire spec.", (uint8_t *)&__p, 2u);
    }

    uint64_t v28 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v40 = (void *)*MEMORY[0x1E4F28568];
    int v29 = [NSString stringWithFormat:@"Failed to archive entire spec."];
    std::__fs::filesystem::path __p = v29;
    int v30 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&__p forKeys:&v40 count:1];
    uint64_t v31 = [v28 errorWithDomain:@"com.apple.CoreML" code:3 userInfo:v30];

    int v32 = (CoreML::MLModelException *)__cxa_allocate_exception(0x28uLL);
    CoreML::MLModelException::MLModelException(v32, v31);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19E9E94DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __cxa_free_exception(v39);

  if (a16 < 0) {
    operator delete(__p);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::NeuralNetwork::UpdatableNeuralNetworkMLComputeBackend::~UpdatableNeuralNetworkMLComputeBackend(void **this)
{
  CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::~NeuralNetworkEspressoNetBackend(this);

  JUMPOUT(0x19F3C1920);
}

void sub_19E9E9710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EA21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  _Unwind_Resume(a1);
}

void sub_19E9EA514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EA5B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EAEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_19E9EB10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EB19C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EB230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EB9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E9EC1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CoreML::Archiver::PackedIntegerVector::push_back(CoreML::Archiver::PackedIntegerVector *this, uint64_t a2)
{
  long long v4 = (uint64_t *)((char *)this + 16);
  uint64_t v5 = *((unsigned int *)this + 1);
  unint64_t v6 = *((void *)this + 1) * v5;
  if ((v6 >> 6) + 2 >= *((void *)this + 2))
  {
    do
      CoreML::Archiver::MMappedContentManager::extend_data_block<double>((uint64_t)this + 32, v4, (void **)this + 3, 1);
    while ((v6 >> 6) + 2 >= *v4);
    LODWORD(v5) = *((_DWORD *)this + 1);
  }
  if (v5 == 64) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = ~(-1 << v5);
  }
  *(void *)(*((void *)this + 3) + 8 * (v6 >> 6) + ((v6 >> 3) & 7)) = *(void *)(*((void *)this + 3)
                                                                                   + 8 * (v6 >> 6)
                                                                                   + ((v6 >> 3) & 7)) & ~(v7 << (v6 & 7)) | (a2 << (v6 & 7));
  uint64_t result = *((void *)this + 1);
  *((void *)this + 1) = result + 1;
  return result;
}

void CoreML::Archiver::PackedIntegerVector::export_to_image(char *a1, char **a2, int a3)
{
  unint64_t v6 = a2[1];
  uint64_t v7 = ((_BYTE)v6 - *(_DWORD *)a2) & 7;
  if ((((_BYTE)v6 - *(_DWORD *)a2) & 7) != 0)
  {
    LOBYTE(__src[0]) = 0;
    std::vector<unsigned char>::insert(a2, v6, 8 - v7, (char *)__src);
  }
  uint64_t v8 = *((void *)a1 + 1);
  if (!v8) {
    goto LABEL_17;
  }
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = *((unsigned int *)a1 + 1);
  uint64_t v12 = *((void *)a1 + 1);
  do
  {
    unint64_t v13 = *(void *)(*((void *)a1 + 3) + (v9 >> 3));
    if (v11 != 64) {
      unint64_t v13 = (v13 >> (v9 & 7)) & ~(-1 << v11);
    }
    v10 |= v13;
    v9 += v11;
    --v12;
  }
  while (v12);
  if (v10)
  {
    uint64_t v14 = 0;
    do
      BOOL v15 = (unint64_t)++v14 > 0x3F || v10 >> v14 == 0;
    while (!v15);
    if (!a3) {
      goto LABEL_24;
    }
  }
  else
  {
LABEL_17:
    LODWORD(v14) = 1;
    if (!a3)
    {
LABEL_24:
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)a2, a2[1], a1, a1 + 4, 4);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)a2, a2[1], a1 + 4, a1 + 8, 4);
      uint64_t v18 = a1 + 16;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)a2, a2[1], a1 + 8, a1 + 16, 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)a2, a2[1], a1 + 16, a1 + 24, 8);
      if (*((void *)a1 + 1))
      {
        uint64_t v19 = (char *)*((void *)a1 + 3);
        *(void *)&__src[0] = *v18;
        std::vector<unsigned char>::reserve((unint64_t *)a2, &a2[1][*(void *)&__src[0]] - *a2 + 8);
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)a2, a2[1], (char *)__src, (char *)__src + 8, 8);
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)a2, a2[1], v19, &v19[8 * *(void *)&__src[0]], 8 * *(void *)&__src[0]);
      }
      uint64_t v20 = a2[1];
      uint64_t v21 = ((_BYTE)v20 - *(_DWORD *)a2) & 7;
      if ((((_BYTE)v20 - *(_DWORD *)a2) & 7) != 0)
      {
        LOBYTE(__src[0]) = 0;
        std::vector<unsigned char>::insert(a2, v20, 8 - v21, (char *)__src);
      }
      return;
    }
  }
  int v16 = *((_DWORD *)a1 + 1);
  if (v14 == v16) {
    goto LABEL_24;
  }
  v31[0] = 0;
  v31[1] = 0;
  memset(__src, 0, sizeof(__src));
  int v30 = (CoreML::Archiver::MMappedContentManager *)v31;
  if ((v14 - 25) >= 0x27) {
    int v17 = 0;
  }
  else {
    int v17 = -(int)v14 & 7;
  }
  DWORD1(__src[0]) = v17 + v14;
  if (v17 + v14 == v16)
  {
    CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v30);
    goto LABEL_24;
  }
  v28[0] = 0;
  v28[1] = 0;
  id v27 = (CoreML::Archiver::MMappedContentManager *)v28;
  if (v8)
  {
    unint64_t v22 = 0;
    do
    {
      uint64_t v23 = *((unsigned int *)a1 + 1);
      unint64_t v24 = *(void *)(*((void *)a1 + 3) + ((v22 * v23) >> 3));
      BOOL v15 = v23 == 64;
      uint64_t v25 = (v24 >> ((v22 * v23) & 7)) & ~(-1 << v23);
      if (v15) {
        uint64_t v26 = v24;
      }
      else {
        uint64_t v26 = v25;
      }
      CoreML::Archiver::PackedIntegerVector::push_back((CoreML::Archiver::PackedIntegerVector *)__src, v26);
      ++v22;
    }
    while (v22 < *((void *)a1 + 1));
  }
  CoreML::Archiver::PackedIntegerVector::export_to_image(__src, a2, 0);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v27);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v30);
}

void sub_19E9EC6F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager((CoreML::Archiver::MMappedContentManager **)va);
  CoreML::Archiver::MMappedContentManager::~MMappedContentManager(v2);
  _Unwind_Resume(a1);
}

uint64_t CoreML::NNCompiler::Backend::MIL::Ios17::Ios17Backend::Compile(CoreML::NNCompiler::Backend::MIL::Ios17::Ios17Backend *this, objc_object *a2)
{
  v27[4] = *MEMORY[0x1E4F143B8];
  CoreML::NNCompiler::Backend::MIL::OptimizeProgram((CoreML::NNCompiler::Backend::MIL *)&v19, *((const IRProgram **)this + 1));
  std::string::basic_string[abi:ne180100]<0>(v25, "classify");
  v27[0] = &unk_1EF0DD078;
  v27[1] = CoreML::NNCompiler::Backend::MIL::Ios15::Translations::TranslateClassify;
  v27[3] = v27;
  long long v4 = (MIL::Opsets::Common::ios17::ios17Opset *)std::unordered_map<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>::unordered_map((uint64_t)v24, (uint64_t)v25, 1);
  char v23 = 7;
  strcpy((char *)__p, "CoreML7");
  uint64_t OpsetName = MIL::Opsets::Common::ios17::ios17Opset::GetOpsetName(v4);
  size_t v7 = v6;
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (const void *)OpsetName;
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (__n128 *)operator new(v10 + 1);
    __dst.n128_u64[1] = v7;
    unint64_t v21 = v11 | 0x8000000000000000;
    __dst.n128_u64[0] = (unint64_t)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_8:
  }
    memmove(p_dst, v8, v7);
  p_dst->n128_u8[v7] = 0;
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::ProgramLayerTranslator((uint64_t)v17, v24, (long long *)__p, &__dst);
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__dst.n128_u64[0]);
  }
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>>>>::~__hash_table((uint64_t)v24);
  std::__function::__value_func<void ()(CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator const&,CoreML::NNCompiler::Backend::MIL::LayerTranslationInfo const&,MIL::IROperation const&,CoreML::NNCompiler::Backend::MIL::MILBlockBuilder &)>::~__value_func[abi:ne180100](v27);
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  v17[0] = &unk_1EF0CE598;
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::Translate(&v18, (const IRProgram *)v17, v19);
  CoreML::NNCompiler::Backend::MIL::ProgramLayerTranslator::~ProgramLayerTranslator(v17);
  CoreML::NNCompiler::Backend::MIL::MILMetadataUtils::SetAttributesForFunctions((uint64_t)v18, *((void *)this + 3));
  MIL::Util::FindBlobFilePaths((uint64_t *)v17, v18, v12);
  unint64_t v13 = v18;
  uint64_t v18 = 0;
  int v16 = v13;
  CoreML::NNCompiler::Backend::MIL::WriteProgram((uint64_t *)&v16, *(unsigned int *)(*((void *)this + 3) + 120), a2, *((void *)this + 3) + 56);
  if (v16) {
    (*(void (**)(MIL::Util *))(*(void *)v16 + 8))(v16);
  }
  CoreML::NNCompiler::Backend::MetadataUtils::WriteMetadataIos15(*((void *)this + 3), (uint64_t)a2);
  CoreML::NNCompiler::Backend::MIL::CopyWeights((uint64_t *)(*((void *)this + 3) + 56), (uint64_t **)v17, (uint64_t)a2);
  v25[0] = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v25);
  uint64_t v14 = v18;
  uint64_t v18 = 0;
  if (v14) {
    (*(void (**)(MIL::Util *))(*(void *)v14 + 8))(v14);
  }
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_19E9ECA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  *(void *)(v23 - 12_Block_object_dispose(&a9, 8) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 128));
  uint64_t v25 = a22;
  a22 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = a23;
  a23 = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  _Unwind_Resume(a1);
}

void CoreML::NNCompiler::Backend::MIL::Ios17::Ios17Backend::~Ios17Backend(CoreML::NNCompiler::Backend::MIL::Ios17::Ios17Backend *this)
{
  CoreML::NNCompiler::Backend::MIL::Ios17::Ios17Backend::~Ios17Backend(this);

  JUMPOUT(0x19F3C1920);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF0CE570;
  signed int v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_19E9ECD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9ED5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CoreML::Specification::Optimizer::~Optimizer((CoreML::Specification::Optimizer *)&a9);
  _Unwind_Resume(a1);
}

void sub_19E9ED97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *_KDPriorityQueue::pop(_KDPriorityQueue *this)
{
  uint64_t result = (void *)*((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  if (v3 - (uint64_t)result >= 9)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (v3 - (uint64_t)result) >> 3;
    uint64_t v6 = *result;
    size_t v7 = result;
    do
    {
      uint64_t v8 = v7;
      v7 += v4 + 1;
      uint64_t v9 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v10 = v9 + 2;
      if (v10 < v5 && *((float *)v7 + 1) < *((float *)v7 + 3))
      {
        ++v7;
        uint64_t v4 = v10;
      }
      *uint64_t v8 = *v7;
    }
    while (v4 <= (uint64_t)((unint64_t)(v5 - 2) >> 1));
    uint64_t v11 = (void *)(v3 - 8);
    if (v7 == v11)
    {
      *size_t v7 = v6;
    }
    else
    {
      *size_t v7 = *v11;
      *uint64_t v11 = v6;
      uint64_t result = (void *)std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,_KDPriorityQueueComparator &,std::__wrap_iter<_KDPriorityQueueElement *>>((uint64_t)result, (uint64_t)(v7 + 1), v7 + 1 - result);
    }
  }
  *((void *)this + 2) -= 8;
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,_KDPriorityQueueComparator &,std::__wrap_iter<_KDPriorityQueueElement *>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    unint64_t v3 = (unint64_t)(a3 - 2) >> 1;
    float v4 = *(float *)(a2 - 4);
    if (*(float *)(result + 8 * v3 + 4) < v4)
    {
      int v7 = *(_DWORD *)(a2 - 8);
      uint64_t v5 = a2 - 8;
      int v6 = v7;
      do
      {
        uint64_t v8 = (void *)v5;
        uint64_t v5 = result + 8 * v3;
        *uint64_t v8 = *(void *)v5;
        if (!v3) {
          break;
        }
        unint64_t v3 = (v3 - 1) >> 1;
      }
      while (*(float *)(result + 8 * v3 + 4) < v4);
      *(_DWORD *)uint64_t v5 = v6;
      *(float *)(v5 + 4) = v4;
    }
  }
  return result;
}

void sub_19E9EECB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EEE0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EEF78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

void sub_19E9EF0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EF25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9EF794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  CoreML::Specification::LinkedModelFile::~LinkedModelFile((CoreML::Specification::LinkedModelFile *)va);
  _Unwind_Resume(a1);
}

void sub_19E9EF90C()
{
}

void sub_19E9EFB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EFED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void CoreML::BayesianProbitRegression::Gaussian::stdNormalCDF(CoreML::BayesianProbitRegression::Gaussian *this, double a2)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    double v2 = fabs(a2);
    if (v2 > 0.662912607) {
      exp(-(v2 * v2) * 0.5);
    }
  }
}

char **std::unique_ptr<CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters>::reset[abi:ne180100](char ***a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters::~ImagePreprocessingParameters(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

uint64_t *std::unique_ptr<std::map<std::string,Espresso::net_configuration>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(*(void **)(v1 + 8));
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(void *result, uint64_t *a2, unint64_t a3)
{
  if (a3)
  {
    float v4 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a3);
    uint64_t v5 = (std::string *)v4[1];
    uint64_t v11 = v5;
    uint64_t v10 = v5;
    v8[0] = v4 + 2;
    v8[1] = &v10;
    _OWORD v8[2] = &v11;
    char v9 = 0;
    if (a2)
    {
      int v6 = v5;
      do
      {
        if (*((char *)a2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)a2[2], a2[3]);
          int v6 = v11;
        }
        else
        {
          long long v7 = *((_OWORD *)a2 + 1);
          v6->__r_.__value_.__r.__words[2] = a2[4];
          *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
        }
        a2 = (uint64_t *)*a2;
        uint64_t v11 = ++v6;
      }
      while (a2);
    }
    else
    {
      int v6 = v5;
    }
    char v9 = 1;
    uint64_t result = (void *)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
    v4[1] = v6;
  }
  return result;
}

void sub_19E9F08F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__shared_ptr_pointer<CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN6CoreML10NNCompiler13NeuralNetwork28ImagePreprocessingParametersEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char **std::__shared_ptr_pointer<CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(char ***)(a1 + 24);
  if (result)
  {
    CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters::~ImagePreprocessingParameters(result);
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void std::__shared_ptr_pointer<CoreML::NNCompiler::NeuralNetwork::ImagePreprocessingParameters  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

uint64_t std::__shared_ptr_pointer<std::map<std::string,Espresso::net_configuration> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteINS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8Espresso17net_configurationENS_4lessIS7_EENS5_INS_4pairIKS7_S9_EEEEEEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<std::map<std::string,Espresso::net_configuration> *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(*(void **)(v1 + 8));
    JUMPOUT(0x19F3C1920);
  }
  return result;
}

void std::__shared_ptr_pointer<std::map<std::string,Espresso::net_configuration> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3C1920);
}

void sub_19E9F0FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  MEMORY[0x19F3C1920](v40, 0x10A1C40B6FDD44FLL);
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }

  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Map<std::string,CoreML::Specification::CustomModel_CustomModelParamValue>::operator[](uint64_t a1, uint64_t a2)
{
  float v4 = *(void **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  std::string::size_type v24 = 0;
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v26, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
  uint64_t v6 = v26[0];
  if (v26[0]) {
    goto LABEL_18;
  }
  unint64_t v7 = v4[1];
  unint64_t v8 = *v4 + 1;
  unint64_t v9 = ((3 * v7) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v9 <= v8)
  {
    if (v7 <= 0x800000000000000)
    {
      uint64_t v20 = 2 * v7;
LABEL_33:
      google::protobuf::Map<std::string,std::string>::InnerMap::Resize((uint64_t)v4, v20, v5);
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v25, (uint64_t)v4, (unsigned __int8 *)&__p, 0);
      uint64_t v11 = v25[3];
      goto LABEL_11;
    }
  }
  else if (v7 >= 9 && (12 * v7) >> 6 >= v8)
  {
    char v21 = 0;
    unint64_t v22 = ((5 * v8) >> 2) + 1;
    do
      ++v21;
    while (v22 << v21 < v9);
    uint64_t v20 = v7 >> v21 <= 8 ? 8 : v7 >> v21;
    if (v20 != v7) {
      goto LABEL_33;
    }
  }
  uint64_t v11 = v26[3];
LABEL_11:
  uint64_t v12 = (google::protobuf::Arena *)v4[5];
  if (v12) {
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v12, MEMORY[0x1E4FBA3A0], 40);
  }
  else {
    Aligned = (std::string *)operator new(0x28uLL);
  }
  uint64_t v14 = (std::string::__raw *)Aligned;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(Aligned, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    Aligned->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v15;
  }
  v14[1].__words[0] = v24;
  google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(v25, (uint64_t)v4, v11, v14);
  ++*v4;
  uint64_t v6 = v25[0];
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v16 = *(google::protobuf::Arena ***)(v6 + 24);
  if (!v16)
  {
    if (!*(void *)a1) {
      operator new();
    }
    int v16 = google::protobuf::Arena::AllocateAligned(*(google::protobuf::Arena **)a1, MEMORY[0x1E4FBA3A0], 56);
    int v17 = *(google::protobuf::Arena **)a1;
    v16[1] = 0;
    v16[2] = 0;
    *int v16 = 0;
    google::protobuf::Arena::OwnDestructor<std::string>((google::protobuf::Arena **)v17, (google::protobuf::Arena *)v16);
    uint64_t v18 = *(google::protobuf::Arena **)a1;
    CoreML::Specification::CustomModel_CustomModelParamValue::CustomModel_CustomModelParamValue((CoreML::Specification::CustomModel_CustomModelParamValue *)(v16 + 3));
    google::protobuf::Arena::OwnDestructor<CoreML::Specification::CustomModel_CustomModelParamValue>((google::protobuf::Arena **)v18, (google::protobuf::Arena *)(v16 + 3));
    std::string::operator=((std::string *)v16, (const std::string *)a2);
    *(void *)(v6 + 24) = v16;
  }
  return v16 + 3;
}

void sub_19E9F13D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x19F3C1920](v14, 0x10B2C4015637A22);
  _Unwind_Resume(a1);
}

google::protobuf::Arena **google::protobuf::Arena::OwnDestructor<CoreML::Specification::CustomModel_CustomModelParamValue>(google::protobuf::Arena **result, google::protobuf::Arena *a2)
{
  if (a2)
  {
    unint64_t v3 = result;
    uint64_t result = google::protobuf::Arena::AllocateAligned((google::protobuf::Arena *)result, 0, 24);
    *uint64_t result = a2;
    result[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>;
    float v4 = (unint64_t *)(v3 + 4);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr((unint64_t)result, v4));
    result[2] = (google::protobuf::Arena *)v5;
  }
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::CustomModel_CustomModelParamValue>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void sub_19E9F1FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38)
{
  MEMORY[0x19F3C1920](v42, 0x10A1C40EE95837BLL);
  if (a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a38);
  }

  _Unwind_Resume(a1);
}

void sub_19E9F2330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9F2964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_19E9F2E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E9F30F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_19E9F32DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreML::TreeEnsembles::Internal::predict(CoreML::TreeEnsembles::Internal *this, double *a2, const unsigned __int8 *a3, const double *a4)
{
  i3 = a2;
  switch(*((_DWORD *)a2 + 2))
  {
    case 1:
      uint64_t v6 = *((void *)a2 + 2);
      unint64_t v7 = a2 + 3;
      unint64_t v8 = &i3[v6 + 3];
      uint64_t v10 = *(void *)v8;
      unint64_t v9 = v8 + 1;
      uint64_t v11 = &v9[5 * v10];
      uint64_t v14 = *v11;
      uint64_t v12 = v11 + 1;
      uint64_t v13 = v14;
      int v15 = v12[v14 + 1 + v12[v14]];
      if (v6) {
        memmove(this, v7, 8 * v6);
      }
      if (!v13) {
        goto LABEL_24;
      }
      uint64_t v16 = 0;
      double v17 = *(double *)this;
      while (1)
      {
        uint64_t v18 = v12[v16];
        while (2)
        {
          uint64_t v19 = (double *)&v9[5 * v18];
          double v20 = *(double *)&a3[8 * *((void *)v19 + 1)];
          double v21 = v19[2];
          switch(*(_DWORD *)v19)
          {
            case 0:
              if (v20 <= v21) {
                goto LABEL_19;
              }
              goto LABEL_21;
            case 1:
              if (v20 >= v21) {
                goto LABEL_21;
              }
              goto LABEL_19;
            case 2:
              if (v20 < v21) {
                goto LABEL_21;
              }
              goto LABEL_19;
            case 3:
              if (v20 <= v21) {
                goto LABEL_21;
              }
              goto LABEL_19;
            case 4:
              if (v20 == v21) {
                goto LABEL_19;
              }
              goto LABEL_21;
            case 5:
              if (v20 == v21) {
                goto LABEL_21;
              }
LABEL_19:
              unint64_t v22 = &v9[5 * v18];
              int v23 = *((unsigned __int8 *)v22 + 4);
              std::string::size_type v24 = (double *)(v22 + 3);
              if (v23) {
                goto LABEL_23;
              }
              goto LABEL_22;
            default:
LABEL_21:
              uint64_t v25 = &v9[5 * v18];
              int v26 = *((unsigned __int8 *)v25 + 5);
              std::string::size_type v24 = (double *)(v25 + 4);
              if (!v26)
              {
LABEL_22:
                v18 += *(void *)v24;
                continue;
              }
LABEL_23:
              double v17 = v17 + *v24;
              *(double *)this = v17;
              if (++v16 == v13)
              {
LABEL_24:
                id v27 = (double *)this;
                int v28 = v15;
                goto LABEL_154;
              }
              break;
          }
          break;
        }
      }
    case 2:
      uint64_t v6 = *((void *)a2 + 2);
      int v205 = a2 + 3;
      std::string::size_type v206 = &i3[v6 + 3];
      uint64_t v208 = *(void *)v206;
      int v207 = v206 + 1;
      uint64_t v209 = 5 * v208;
      int v210 = &v207[5 * v208];
      uint64_t v213 = *v210;
      int v211 = v210 + 1;
      uint64_t v212 = v213;
      int v214 = &v211[v213];
      uint64_t v216 = *v214;
      v215 = v214 + 1;
      int v217 = v215[v216];
      if (v6) {
        memmove(this, v205, 8 * v6);
      }
      if (!v212) {
        goto LABEL_153;
      }
      uint64_t v218 = 0;
      v219 = &a2[v6 + 8 + v209 + v212];
LABEL_128:
      uint64_t v220 = v211[v218];
      while (2)
      {
        std::string::size_type v221 = (double *)&v207[5 * v220];
        double v222 = *(double *)&a3[8 * *((void *)v221 + 1)];
        double v223 = v221[2];
        switch(*(_DWORD *)v221)
        {
          case 0:
            if (v222 <= v223) {
              goto LABEL_141;
            }
            goto LABEL_143;
          case 1:
            if (v222 >= v223) {
              goto LABEL_143;
            }
            goto LABEL_141;
          case 2:
            if (v222 < v223) {
              goto LABEL_143;
            }
            goto LABEL_141;
          case 3:
            if (v222 <= v223) {
              goto LABEL_143;
            }
            goto LABEL_141;
          case 4:
            if (v222 == v223) {
              goto LABEL_141;
            }
            goto LABEL_143;
          case 5:
            if (v222 == v223) {
              goto LABEL_143;
            }
LABEL_141:
            v224 = &v207[5 * v220];
            int v225 = *((unsigned __int8 *)v224 + 4);
            v226 = v224 + 3;
            if (!v225) {
              goto LABEL_144;
            }
            uint64_t v234 = *v226;
            uint64_t v235 = v215[v234];
            if (v235)
            {
              std::string::size_type v236 = &v219[v234];
              do
              {
                uint64_t v237 = *((void *)v236 - 1);
                double v238 = *v236;
                v236 += 2;
                *((double *)this + v237) = v238 + *((double *)this + v237);
                --v235;
              }
              while (v235);
            }
            goto LABEL_152;
          default:
LABEL_143:
            int v227 = &v207[5 * v220];
            int v228 = *((unsigned __int8 *)v227 + 5);
            v226 = v227 + 4;
            if (!v228)
            {
LABEL_144:
              v220 += *v226;
              continue;
            }
            uint64_t v229 = *v226;
            uint64_t v230 = v215[v229];
            if (v230)
            {
              v231 = &v219[v229];
              do
              {
                uint64_t v232 = *((void *)v231 - 1);
                double v233 = *v231;
                v231 += 2;
                *((double *)this + v232) = v233 + *((double *)this + v232);
                --v230;
              }
              while (v230);
            }
LABEL_152:
            if (++v218 != v212) {
              goto LABEL_128;
            }
LABEL_153:
            id v27 = (double *)this;
            int v28 = v217;
LABEL_154:
            CoreML::TreeEnsembles::Internal::apply_postevaluation_transform(v27, v28, v6);
            return;
        }
      }
    case 3:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v78 = *((void *)a2 + 2);
      std::string::size_type v149 = a2 + 3;
      uint64_t v2210 = v78;
      v2211 = i3 + 3;
      uint64_t v150 = (uint64_t)&i3[v78 + 3];
      long long v151 = *(_OWORD *)(v150 + 16);
      long long v2212 = *(_OWORD *)v150;
      long long v2213 = v151;
      uint64_t v152 = WORD2(v2212);
      unint64_t v153 = *(void *)(v150 + 32);
      uint64_t v154 = v150 + 40;
      unint64_t v2214 = v153 / WORD2(v2212);
      v2215 = (void *)(v150 + 40);
      if (v153 != v2214 * WORD2(v2212))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](exception, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v155 = v154 + v153;
      uint64_t v156 = 8 - (v155 & 7);
      if ((v155 & 7) == 0) {
        uint64_t v156 = 0;
      }
      uint64_t v157 = v155 + v156;
      uint64_t v158 = *(unsigned int *)(v157 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v157;
      HIDWORD(v2216[0]) = v158;
      *(_OWORD *)&v2216[1] = *(_OWORD *)(v157 + 8);
      unint64_t v159 = v2216[1];
      if (v2216[1])
      {
        uint64_t v160 = v157 + 32;
        v2216[2] = *(void *)(v157 + 24);
        v2216[3] = v157 + 32;
        uint64_t v161 = v157 + 32 + 8 * v2216[2];
      }
      else
      {
        uint64_t v160 = 0;
        uint64_t v161 = v157 + 24;
      }
      if ((v161 & 7) != 0) {
        uint64_t v161 = (v161 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      long long v2220 = *(_OWORD *)v161;
      *(void *)&long long v2221 = *(void *)(v161 + 16);
      if (*((void *)&v2220 + 1))
      {
        *(void *)&long long v2221 = *(void *)(v161 + 24);
        *((void *)&v2221 + 1) = v161 + 32;
        uint64_t v534 = v161 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v534 = v161 + 24;
      }
      uint64_t v535 = 8 - (v534 & 7);
      if ((v534 & 7) == 0) {
        uint64_t v535 = 0;
      }
      uint64_t v537 = v534 + v535 + 8;
      uint64_t v536 = *(void *)(v534 + v535);
      uint64_t v538 = v537 + 4 * v536;
      uint64_t v2230 = v536;
      uint64_t v2231 = v537;
      if ((v538 & 7) != 0) {
        uint64_t v539 = 8 - (v538 & 7);
      }
      else {
        uint64_t v539 = 0;
      }
      uint64_t v540 = v538 + v539;
      long long v2225 = *(_OWORD *)v540;
      *(void *)&long long v2226 = *(void *)(v540 + 16);
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v540 + 24);
        *((void *)&v2226 + 1) = v540 + 32;
        uint64_t v541 = v540 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v541 = v540 + 24;
      }
      uint64_t v542 = 8 - (v541 & 7);
      if ((v541 & 7) == 0) {
        uint64_t v542 = 0;
      }
      int v369 = *(_DWORD *)(v541 + v542);
      int v2232 = v369;
      if (v78) {
        memmove(this, v149, 8 * v78);
      }
      switch(BYTE13(v2212))
      {
        case 0:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v543 = 0;
          int v544 = ~(-1 << SBYTE6(v2212));
          char v545 = BYTE6(v2212) & 7;
          char v546 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v547 = ~(-1 << SBYTE8(v2212));
          unint64_t v548 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v549 = (unint64_t)BYTE6(v2212) >> 3;
          double v550 = *(double *)this;
          while (1)
          {
            int v551 = (*(void *)(v160 + ((v543 * v158) >> 3)) >> ((v543 * v158) & 7)) & ~(-1 << v158);
            if (v158 == 64) {
              int v551 = *(void *)(v160 + ((v543 * v158) >> 3));
            }
            int v552 = (_DWORD *)(v154 + (v551 * v152));
            int v553 = v543 + v551;
            while (1)
            {
              int v554 = *(_DWORD *)((char *)v552 + v549) >> v545;
              if ((((*(double *)&a3[8 * (*v552 & v544)] > *(float *)((char *)v552 + v152 - 4)) ^ ((v554 & 8) >> 3)) & 1) == 0) {
                break;
              }
              int v555 = (*(_DWORD *)((char *)v552 + v548) >> v546) & v547;
              if ((v554 & 2) != 0)
              {
                unsigned int v557 = (v554 & 1) + v553 + v555;
                goto LABEL_460;
              }
              uint64_t v556 = (v555 * v152);
LABEL_457:
              int v552 = (_DWORD *)((char *)v552 + v556);
            }
            uint64_t v556 = v152;
            if ((v554 & 1) == 0) {
              goto LABEL_457;
            }
            unsigned int v557 = ((*(_DWORD *)((char *)v552 + v548) >> v546) & v547) + v553;
LABEL_460:
            double v550 = v550 + *(float *)(v537 + 4 * v557);
            *(double *)this = v550;
            unint64_t v543 = (v543 + 1);
            if (v159 <= v543)
            {
LABEL_2139:
              v1526 = (double *)this;
              int v1527 = v369;
LABEL_2140:
              uint64_t v1962 = v78;
LABEL_2141:
              CoreML::TreeEnsembles::Internal::apply_postevaluation_transform(v1526, v1527, v1962);
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2227);
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2222);
LABEL_2169:
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2217);
              return;
            }
          }
        case 1:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v1597 = 0;
          int v1598 = ~(-1 << SBYTE6(v2212));
          char v1599 = BYTE6(v2212) & 7;
          char v1600 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1601 = ~(-1 << SBYTE8(v2212));
          unint64_t v1602 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1603 = (unint64_t)BYTE6(v2212) >> 3;
          double v1604 = *(double *)this;
          while (1)
          {
            int v1605 = (*(void *)(v160 + ((v1597 * v158) >> 3)) >> ((v1597 * v158) & 7)) & ~(-1 << v158);
            if (v158 == 64) {
              int v1605 = *(void *)(v160 + ((v1597 * v158) >> 3));
            }
            v1606 = (_DWORD *)(v154 + (v1605 * v152));
            int v1607 = v1597 + v1605;
            while (1)
            {
              int v1608 = *(_DWORD *)((char *)v1606 + v1603) >> v1599;
              if (((*(double *)&a3[8 * (*v1606 & v1598)] <= *(float *)((char *)v1606 + v152 - 4)) ^ ((v1608 & 8) >> 3))) {
                break;
              }
              int v1610 = (*(_DWORD *)((char *)v1606 + v1602) >> v1600) & v1601;
              if ((v1608 & 2) != 0)
              {
                unsigned int v1611 = (v1608 & 1) + v1607 + v1610;
                goto LABEL_1612;
              }
              uint64_t v1609 = (v1610 * v152);
LABEL_1610:
              v1606 = (_DWORD *)((char *)v1606 + v1609);
            }
            uint64_t v1609 = v152;
            if ((v1608 & 1) == 0) {
              goto LABEL_1610;
            }
            unsigned int v1611 = ((*(_DWORD *)((char *)v1606 + v1602) >> v1600) & v1601) + v1607;
LABEL_1612:
            double v1604 = v1604 + *(float *)(v537 + 4 * v1611);
            *(double *)this = v1604;
            unint64_t v1597 = (v1597 + 1);
            if (v159 <= v1597) {
              goto LABEL_2139;
            }
          }
        case 2:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v1398 = 0;
          int v1399 = ~(-1 << SBYTE6(v2212));
          char v1400 = BYTE6(v2212) & 7;
          char v1401 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1402 = ~(-1 << SBYTE8(v2212));
          unint64_t v1403 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1404 = (unint64_t)BYTE6(v2212) >> 3;
          double v1405 = *(double *)this;
          while (1)
          {
            int v1406 = (*(void *)(v160 + ((v1398 * v158) >> 3)) >> ((v1398 * v158) & 7)) & ~(-1 << v158);
            if (v158 == 64) {
              int v1406 = *(void *)(v160 + ((v1398 * v158) >> 3));
            }
            v1407 = (_DWORD *)(v154 + (v1406 * v152));
            int v1408 = v1398 + v1406;
            while (1)
            {
              int v1409 = *(_DWORD *)((char *)v1407 + v1404) >> v1400;
              if (((*(double *)&a3[8 * (*v1407 & v1399)] >= *(float *)((char *)v1407 + v152 - 4)) ^ ((v1409 & 8) >> 3))) {
                break;
              }
              uint64_t v1411 = v152;
              if (v1409)
              {
                unsigned int v1412 = ((*(_DWORD *)((char *)v1407 + v1403) >> v1401) & v1402) + v1408;
                goto LABEL_1411;
              }
LABEL_1408:
              v1407 = (_DWORD *)((char *)v1407 + v1411);
            }
            int v1410 = (*(_DWORD *)((char *)v1407 + v1403) >> v1401) & v1402;
            if ((v1409 & 2) == 0) {
              break;
            }
            unsigned int v1412 = (v1409 & 1) + v1408 + v1410;
LABEL_1411:
            double v1405 = v1405 + *(float *)(v537 + 4 * v1412);
            *(double *)this = v1405;
            unint64_t v1398 = (v1398 + 1);
            if (v159 <= v1398) {
              goto LABEL_2139;
            }
          }
          uint64_t v1411 = (v1410 * v152);
          goto LABEL_1408;
        case 3:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v1528 = 0;
          int v1529 = ~(-1 << SBYTE6(v2212));
          char v1530 = BYTE6(v2212) & 7;
          char v1531 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1532 = ~(-1 << SBYTE8(v2212));
          unint64_t v1533 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1534 = (unint64_t)BYTE6(v2212) >> 3;
          double v1535 = *(double *)this;
          while (1)
          {
            int v1536 = (*(void *)(v160 + ((v1528 * v158) >> 3)) >> ((v1528 * v158) & 7)) & ~(-1 << v158);
            if (v158 == 64) {
              int v1536 = *(void *)(v160 + ((v1528 * v158) >> 3));
            }
            v1537 = (_DWORD *)(v154 + (v1536 * v152));
            int v1538 = v1528 + v1536;
            while (1)
            {
              int v1539 = *(_DWORD *)((char *)v1537 + v1534) >> v1530;
              if (((*(double *)&a3[8 * (*v1537 & v1529)] < *(float *)((char *)v1537 + v152 - 4)) ^ ((v1539 & 8) >> 3))) {
                break;
              }
              int v1541 = (*(_DWORD *)((char *)v1537 + v1533) >> v1531) & v1532;
              if ((v1539 & 2) != 0)
              {
                unsigned int v1542 = (v1539 & 1) + v1538 + v1541;
                goto LABEL_1536;
              }
              uint64_t v1540 = (v1541 * v152);
LABEL_1534:
              v1537 = (_DWORD *)((char *)v1537 + v1540);
            }
            uint64_t v1540 = v152;
            if ((v1539 & 1) == 0) {
              goto LABEL_1534;
            }
            unsigned int v1542 = ((*(_DWORD *)((char *)v1537 + v1533) >> v1531) & v1532) + v1538;
LABEL_1536:
            double v1535 = v1535 + *(float *)(v537 + 4 * v1542);
            *(double *)this = v1535;
            unint64_t v1528 = (v1528 + 1);
            if (v159 <= v1528) {
              goto LABEL_2139;
            }
          }
        case 4:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v1180 = 0;
          int v1181 = ~(-1 << SBYTE6(v2212));
          char v1182 = BYTE6(v2212) & 7;
          char v1183 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1184 = ~(-1 << SBYTE8(v2212));
          unint64_t v1185 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1186 = (unint64_t)BYTE6(v2212) >> 3;
          double v1187 = *(double *)this;
          break;
        default:
          goto LABEL_2139;
      }
LABEL_1164:
      int v1188 = (*(void *)(v160 + ((v1180 * v158) >> 3)) >> ((v1180 * v158) & 7)) & ~(-1 << v158);
      if (v158 == 64) {
        int v1188 = *(void *)(v160 + ((v1180 * v158) >> 3));
      }
      v1189 = (_DWORD *)(v154 + (v1188 * v152));
      int v1190 = v1180 + v1188;
      while (1)
      {
        unsigned int v1191 = *(_DWORD *)((char *)v1189 + v1186) >> v1182;
        double v1192 = *(double *)&a3[8 * (*v1189 & v1181)];
        double v1193 = *(float *)((char *)v1189 + v152 - 4);
        switch((v1191 >> 3) & 7)
        {
          case 0u:
            if (v1192 > v1193) {
              goto LABEL_1171;
            }
            goto LABEL_1180;
          case 1u:
            if (v1192 < v1193) {
              goto LABEL_1180;
            }
            goto LABEL_1171;
          case 2u:
            if (v1192 >= v1193) {
              goto LABEL_1180;
            }
            goto LABEL_1171;
          case 3u:
            if (v1192 > v1193) {
              goto LABEL_1180;
            }
            goto LABEL_1171;
          case 4u:
            if (v1192 != v1193) {
              goto LABEL_1171;
            }
            goto LABEL_1180;
          case 5u:
            if (v1192 != v1193) {
              goto LABEL_1180;
            }
LABEL_1171:
            int v1194 = (*(_DWORD *)((char *)v1189 + v1185) >> v1183) & v1184;
            if ((v1191 & 2) != 0)
            {
              unsigned int v1196 = ((*(_DWORD *)((char *)v1189 + v1186) >> v1182) & 1) + v1190 + v1194;
LABEL_1184:
              double v1187 = v1187 + *(float *)(v537 + 4 * v1196);
              *(double *)this = v1187;
              unint64_t v1180 = (v1180 + 1);
              if (v159 <= v1180) {
                goto LABEL_2139;
              }
              goto LABEL_1164;
            }
            uint64_t v1195 = (v1194 * v152);
LABEL_1181:
            v1189 = (_DWORD *)((char *)v1189 + v1195);
            break;
          default:
LABEL_1180:
            uint64_t v1195 = v152;
            if ((v1191 & 1) == 0) {
              goto LABEL_1181;
            }
            unsigned int v1196 = ((*(_DWORD *)((char *)v1189 + v1185) >> v1183) & v1184) + v1190;
            goto LABEL_1184;
        }
      }
    case 4:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v92 = *((void *)a2 + 2);
      std::string v176 = a2 + 3;
      uint64_t v2210 = v92;
      v2211 = i3 + 3;
      uint64_t v177 = (uint64_t)&i3[v92 + 3];
      long long v178 = *(_OWORD *)(v177 + 16);
      long long v2212 = *(_OWORD *)v177;
      long long v2213 = v178;
      uint64_t v179 = WORD2(v2212);
      unint64_t v180 = *(void *)(v177 + 32);
      uint64_t v181 = v177 + 40;
      unint64_t v2214 = v180 / WORD2(v2212);
      v2215 = (void *)(v177 + 40);
      if (v180 != v2214 * WORD2(v2212))
      {
        v2170 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2170, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2170, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v182 = v181 + v180;
      uint64_t v183 = 8 - (v182 & 7);
      if ((v182 & 7) == 0) {
        uint64_t v183 = 0;
      }
      uint64_t v184 = v182 + v183;
      v185 = (CoreML::Archiver::MMappedContentManager *)*(unsigned int *)(v184 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v184;
      HIDWORD(v2216[0]) = v185;
      long long v186 = *(_OWORD *)(v184 + 8);
      *(_OWORD *)&v2216[1] = v186;
      unint64_t v187 = v186;
      if ((void)v186)
      {
        uint64_t v188 = v184 + 32;
        v2216[2] = *(void *)(v184 + 24);
        v2216[3] = v184 + 32;
        uint64_t v189 = v184 + 32 + 8 * v2216[2];
      }
      else
      {
        uint64_t v188 = 0;
        uint64_t v189 = v184 + 24;
      }
      if ((v189 & 7) != 0) {
        uint64_t v189 = (v189 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      LODWORD(v2220) = *(_DWORD *)v189;
      unsigned int v589 = *(_DWORD *)(v189 + 4);
      DWORD1(v2220) = v589;
      *((void *)&v2220 + 1) = *(void *)(v189 + 8);
      *(void *)&long long v2221 = *(void *)(v189 + 16);
      if (*((void *)&v2220 + 1))
      {
        uint64_t v590 = v189 + 32;
        *(void *)&long long v2221 = *(void *)(v189 + 24);
        *((void *)&v2221 + 1) = v189 + 32;
        uint64_t v591 = v189 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v590 = 0;
        uint64_t v591 = v189 + 24;
      }
      uint64_t v592 = 8 - (v591 & 7);
      if ((v591 & 7) == 0) {
        uint64_t v592 = 0;
      }
      uint64_t v594 = v591 + v592 + 8;
      uint64_t v593 = *(void *)(v591 + v592);
      uint64_t v595 = v594 + 4 * v593;
      uint64_t v2230 = v593;
      uint64_t v2231 = v594;
      if ((v595 & 7) != 0) {
        uint64_t v596 = 8 - (v595 & 7);
      }
      else {
        uint64_t v596 = 0;
      }
      uint64_t v597 = v595 + v596;
      long long v2225 = *(_OWORD *)v597;
      *(void *)&long long v2226 = *(void *)(v597 + 16);
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v597 + 24);
        *((void *)&v2226 + 1) = v597 + 32;
        uint64_t v598 = v597 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v598 = v597 + 24;
      }
      uint64_t v599 = 8 - (v598 & 7);
      if ((v598 & 7) == 0) {
        uint64_t v599 = 0;
      }
      int v396 = *(_DWORD *)(v598 + v599);
      int v2232 = v396;
      if (v92)
      {
        v2187 = v185;
        unint64_t v600 = v186;
        uint64_t v601 = v181;
        int v602 = v396;
        uint64_t v603 = v590;
        uint64_t v604 = v92;
        memmove(this, v176, 8 * v92);
        uint64_t v92 = v604;
        uint64_t v590 = v603;
        int v396 = v602;
        uint64_t v181 = v601;
        unint64_t v187 = v600;
        v185 = v2187;
      }
      switch(BYTE13(v2212))
      {
        case 0:
          if (!v187) {
            goto LABEL_1843;
          }
          unint64_t v605 = 0;
          int v606 = ~(-1 << SBYTE6(v2212));
          char v607 = BYTE6(v2212) & 7;
          char v608 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v609 = ~(-1 << SBYTE8(v2212));
          unint64_t v610 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v611 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            int v612 = (*(void *)(v188 + ((v605 * (unint64_t)v185) >> 3)) >> ((v605 * (_BYTE)v185) & 7)) & ~(-1 << (char)v185);
            if (v185 == 64) {
              int v612 = *(void *)(v188 + ((v605 * (unint64_t)v185) >> 3));
            }
            uint64_t v613 = (_DWORD *)(v181 + (v612 * v179));
            int v614 = v605 + v612;
            while (1)
            {
              int v615 = *(_DWORD *)((char *)v613 + v611) >> v607;
              if ((((*(double *)&a3[8 * (*v613 & v606)] > *(float *)((char *)v613 + v179 - 4)) ^ ((v615 & 8) >> 3)) & 1) == 0) {
                break;
              }
              int v616 = (*(_DWORD *)((char *)v613 + v610) >> v608) & v609;
              if ((v615 & 2) != 0)
              {
                unsigned int v618 = (v615 & 1) + v614 + v616;
                goto LABEL_528;
              }
              uint64_t v617 = (v616 * v179);
LABEL_525:
              uint64_t v613 = (_DWORD *)((char *)v613 + v617);
            }
            uint64_t v617 = v179;
            if ((v615 & 1) == 0) {
              goto LABEL_525;
            }
            unsigned int v618 = ((*(_DWORD *)((char *)v613 + v610) >> v608) & v609) + v614;
LABEL_528:
            unint64_t v619 = v589 * (unint64_t)v618;
            unint64_t v620 = *(void *)(v590 + (v619 >> 3));
            uint64_t v621 = (v620 >> (v619 & 7)) & ~(-1 << v589);
            if (v589 == 64) {
              uint64_t v621 = v620;
            }
            *((double *)this + v621) = *((double *)this + v621) + *(float *)(v594 + 4 * v618);
            unint64_t v605 = (v605 + 1);
            if (v187 <= v605)
            {
LABEL_1843:
              CoreML::TreeEnsembles::Internal::apply_postevaluation_transform((double *)this, v396, v92);
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2227);
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2222);
              goto LABEL_2169;
            }
          }
        case 1:
          if (!v187) {
            goto LABEL_1843;
          }
          unint64_t v1785 = 0;
          int v1786 = ~(-1 << SBYTE6(v2212));
          char v1787 = BYTE6(v2212) & 7;
          char v1788 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1789 = ~(-1 << SBYTE8(v2212));
          unint64_t v1790 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1791 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            int v1792 = (*(void *)(v188 + ((v1785 * (unint64_t)v185) >> 3)) >> ((v1785 * (_BYTE)v185) & 7)) & ~(-1 << (char)v185);
            if (v185 == 64) {
              int v1792 = *(void *)(v188 + ((v1785 * (unint64_t)v185) >> 3));
            }
            v1793 = (_DWORD *)(v181 + (v1792 * v179));
            int v1794 = v1785 + v1792;
            while (1)
            {
              int v1795 = *(_DWORD *)((char *)v1793 + v1791) >> v1787;
              if (((*(double *)&a3[8 * (*v1793 & v1786)] <= *(float *)((char *)v1793 + v179 - 4)) ^ ((v1795 & 8) >> 3))) {
                break;
              }
              int v1797 = (*(_DWORD *)((char *)v1793 + v1790) >> v1788) & v1789;
              if ((v1795 & 2) != 0)
              {
                unsigned int v1798 = (v1795 & 1) + v1794 + v1797;
                goto LABEL_1824;
              }
              uint64_t v1796 = (v1797 * v179);
LABEL_1822:
              v1793 = (_DWORD *)((char *)v1793 + v1796);
            }
            uint64_t v1796 = v179;
            if ((v1795 & 1) == 0) {
              goto LABEL_1822;
            }
            unsigned int v1798 = ((*(_DWORD *)((char *)v1793 + v1790) >> v1788) & v1789) + v1794;
LABEL_1824:
            unint64_t v1799 = v589 * (unint64_t)v1798;
            unint64_t v1800 = *(void *)(v590 + (v1799 >> 3));
            uint64_t v1801 = (v1800 >> (v1799 & 7)) & ~(-1 << v589);
            if (v589 == 64) {
              uint64_t v1801 = v1800;
            }
            *((double *)this + v1801) = *((double *)this + v1801) + *(float *)(v594 + 4 * v1798);
            unint64_t v1785 = (v1785 + 1);
            if (v187 <= v1785) {
              goto LABEL_1843;
            }
          }
        case 2:
          if (!v187) {
            goto LABEL_1843;
          }
          unint64_t v1543 = 0;
          int v1544 = ~(-1 << SBYTE6(v2212));
          char v1545 = BYTE6(v2212) & 7;
          char v1546 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1547 = ~(-1 << SBYTE8(v2212));
          unint64_t v1548 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1549 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            int v1550 = (*(void *)(v188 + ((v1543 * (unint64_t)v185) >> 3)) >> ((v1543 * (_BYTE)v185) & 7)) & ~(-1 << (char)v185);
            if (v185 == 64) {
              int v1550 = *(void *)(v188 + ((v1543 * (unint64_t)v185) >> 3));
            }
            v1551 = (_DWORD *)(v181 + (v1550 * v179));
            int v1552 = v1543 + v1550;
            while (1)
            {
              int v1553 = *(_DWORD *)((char *)v1551 + v1549) >> v1545;
              if (((*(double *)&a3[8 * (*v1551 & v1544)] >= *(float *)((char *)v1551 + v179 - 4)) ^ ((v1553 & 8) >> 3))) {
                break;
              }
              uint64_t v1555 = v179;
              if (v1553)
              {
                unsigned int v1556 = ((*(_DWORD *)((char *)v1551 + v1548) >> v1546) & v1547) + v1552;
                goto LABEL_1550;
              }
LABEL_1547:
              v1551 = (_DWORD *)((char *)v1551 + v1555);
            }
            int v1554 = (*(_DWORD *)((char *)v1551 + v1548) >> v1546) & v1547;
            if ((v1553 & 2) == 0) {
              break;
            }
            unsigned int v1556 = (v1553 & 1) + v1552 + v1554;
LABEL_1550:
            unint64_t v1557 = v589 * (unint64_t)v1556;
            unint64_t v1558 = *(void *)(v590 + (v1557 >> 3));
            uint64_t v1559 = (v1558 >> (v1557 & 7)) & ~(-1 << v589);
            if (v589 == 64) {
              uint64_t v1559 = v1558;
            }
            *((double *)this + v1559) = *((double *)this + v1559) + *(float *)(v594 + 4 * v1556);
            unint64_t v1543 = (v1543 + 1);
            if (v187 <= v1543) {
              goto LABEL_1843;
            }
          }
          uint64_t v1555 = (v1554 * v179);
          goto LABEL_1547;
        case 3:
          if (!v187) {
            goto LABEL_1843;
          }
          unint64_t v1715 = 0;
          int v1716 = ~(-1 << SBYTE6(v2212));
          char v1717 = BYTE6(v2212) & 7;
          char v1718 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1719 = ~(-1 << SBYTE8(v2212));
          unint64_t v1720 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1721 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            int v1722 = (*(void *)(v188 + ((v1715 * (unint64_t)v185) >> 3)) >> ((v1715 * (_BYTE)v185) & 7)) & ~(-1 << (char)v185);
            if (v185 == 64) {
              int v1722 = *(void *)(v188 + ((v1715 * (unint64_t)v185) >> 3));
            }
            v1723 = (_DWORD *)(v181 + (v1722 * v179));
            int v1724 = v1715 + v1722;
            while (1)
            {
              int v1725 = *(_DWORD *)((char *)v1723 + v1721) >> v1717;
              if (((*(double *)&a3[8 * (*v1723 & v1716)] < *(float *)((char *)v1723 + v179 - 4)) ^ ((v1725 & 8) >> 3))) {
                break;
              }
              int v1727 = (*(_DWORD *)((char *)v1723 + v1720) >> v1718) & v1719;
              if ((v1725 & 2) != 0)
              {
                unsigned int v1728 = (v1725 & 1) + v1724 + v1727;
                goto LABEL_1757;
              }
              uint64_t v1726 = (v1727 * v179);
LABEL_1755:
              v1723 = (_DWORD *)((char *)v1723 + v1726);
            }
            uint64_t v1726 = v179;
            if ((v1725 & 1) == 0) {
              goto LABEL_1755;
            }
            unsigned int v1728 = ((*(_DWORD *)((char *)v1723 + v1720) >> v1718) & v1719) + v1724;
LABEL_1757:
            unint64_t v1729 = v589 * (unint64_t)v1728;
            unint64_t v1730 = *(void *)(v590 + (v1729 >> 3));
            uint64_t v1731 = (v1730 >> (v1729 & 7)) & ~(-1 << v589);
            if (v589 == 64) {
              uint64_t v1731 = v1730;
            }
            *((double *)this + v1731) = *((double *)this + v1731) + *(float *)(v594 + 4 * v1728);
            unint64_t v1715 = (v1715 + 1);
            if (v187 <= v1715) {
              goto LABEL_1843;
            }
          }
        case 4:
          if (!v187) {
            goto LABEL_1843;
          }
          unint64_t v1308 = 0;
          int v1309 = ~(-1 << SBYTE6(v2212));
          char v1310 = BYTE6(v2212) & 7;
          char v1311 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1312 = ~(-1 << SBYTE8(v2212));
          unint64_t v1313 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1314 = (unint64_t)BYTE6(v2212) >> 3;
          break;
        default:
          goto LABEL_1843;
      }
LABEL_1299:
      int v1315 = (*(void *)(v188 + ((v1308 * (unint64_t)v185) >> 3)) >> ((v1308 * (_BYTE)v185) & 7)) & ~(-1 << (char)v185);
      if (v185 == 64) {
        int v1315 = *(void *)(v188 + ((v1308 * (unint64_t)v185) >> 3));
      }
      v1316 = (_DWORD *)(v181 + (v1315 * v179));
      int v1317 = v1308 + v1315;
      while (1)
      {
        unsigned int v1318 = *(_DWORD *)((char *)v1316 + v1314) >> v1310;
        double v1319 = *(double *)&a3[8 * (*v1316 & v1309)];
        double v1320 = *(float *)((char *)v1316 + v179 - 4);
        switch((v1318 >> 3) & 7)
        {
          case 0u:
            if (v1319 > v1320) {
              goto LABEL_1306;
            }
            goto LABEL_1315;
          case 1u:
            if (v1319 < v1320) {
              goto LABEL_1315;
            }
            goto LABEL_1306;
          case 2u:
            if (v1319 >= v1320) {
              goto LABEL_1315;
            }
            goto LABEL_1306;
          case 3u:
            if (v1319 > v1320) {
              goto LABEL_1315;
            }
            goto LABEL_1306;
          case 4u:
            if (v1319 != v1320) {
              goto LABEL_1306;
            }
            goto LABEL_1315;
          case 5u:
            if (v1319 != v1320) {
              goto LABEL_1315;
            }
LABEL_1306:
            int v1321 = (*(_DWORD *)((char *)v1316 + v1313) >> v1311) & v1312;
            if ((v1318 & 2) != 0)
            {
              unsigned int v1323 = ((*(_DWORD *)((char *)v1316 + v1314) >> v1310) & 1) + v1317 + v1321;
LABEL_1319:
              unint64_t v1324 = v589 * (unint64_t)v1323;
              unint64_t v1325 = *(void *)(v590 + (v1324 >> 3));
              uint64_t v1326 = (v1325 >> (v1324 & 7)) & ~(-1 << v589);
              if (v589 == 64) {
                uint64_t v1326 = v1325;
              }
              *((double *)this + v1326) = *((double *)this + v1326) + *(float *)(v594 + 4 * v1323);
              unint64_t v1308 = (v1308 + 1);
              if (v187 <= v1308) {
                goto LABEL_1843;
              }
              goto LABEL_1299;
            }
            uint64_t v1322 = (v1321 * v179);
LABEL_1316:
            v1316 = (_DWORD *)((char *)v1316 + v1322);
            break;
          default:
LABEL_1315:
            uint64_t v1322 = v179;
            if ((v1318 & 1) == 0) {
              goto LABEL_1316;
            }
            unsigned int v1323 = ((*(_DWORD *)((char *)v1316 + v1313) >> v1311) & v1312) + v1317;
            goto LABEL_1319;
        }
      }
    case 5:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v107 = *((void *)a2 + 2);
      long long v108 = a2 + 3;
      uint64_t v2210 = v107;
      v2211 = i3 + 3;
      uint64_t v109 = (uint64_t)&i3[v107 + 3];
      long long v110 = *(_OWORD *)(v109 + 16);
      long long v2212 = *(_OWORD *)v109;
      long long v2213 = v110;
      uint64_t v111 = WORD2(v2212);
      unint64_t v112 = *(void *)(v109 + 32);
      uint64_t v113 = v109 + 40;
      unint64_t v2214 = v112 / WORD2(v2212);
      v2215 = (void *)(v109 + 40);
      if (v112 != v2214 * WORD2(v2212))
      {
        v2165 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2165, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2165, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v114 = v113 + v112;
      uint64_t v115 = 8 - (v114 & 7);
      if ((v114 & 7) == 0) {
        uint64_t v115 = 0;
      }
      uint64_t v116 = v114 + v115;
      uint64_t v117 = *(unsigned int *)(v116 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v116;
      HIDWORD(v2216[0]) = v117;
      long long v118 = *(_OWORD *)(v116 + 8);
      *(_OWORD *)&v2216[1] = v118;
      if ((void)v118)
      {
        long long v119 = (CoreML::Archiver::MMappedContentManager *)(v116 + 32);
        v2216[2] = *(void *)(v116 + 24);
        v2216[3] = v116 + 32;
        uint64_t v120 = v116 + 32 + 8 * v2216[2];
      }
      else
      {
        long long v119 = 0;
        uint64_t v120 = v116 + 24;
      }
      if ((v120 & 7) != 0) {
        uint64_t v120 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      LODWORD(v2220) = *(_DWORD *)v120;
      unsigned int v419 = *(_DWORD *)(v120 + 4);
      DWORD1(v2220) = v419;
      *((void *)&v2220 + 1) = *(void *)(v120 + 8);
      *(void *)&long long v2221 = *(void *)(v120 + 16);
      if (*((void *)&v2220 + 1))
      {
        uint64_t v420 = v120 + 32;
        *(void *)&long long v2221 = *(void *)(v120 + 24);
        *((void *)&v2221 + 1) = v120 + 32;
        uint64_t v421 = v120 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v420 = 0;
        uint64_t v421 = v120 + 24;
      }
      v2195 = (CoreML::Archiver::MMappedContentManager *)v118;
      uint64_t v422 = 8 - (v421 & 7);
      if ((v421 & 7) == 0) {
        uint64_t v422 = 0;
      }
      uint64_t v424 = v421 + v422 + 8;
      uint64_t v423 = *(void *)(v421 + v422);
      uint64_t v425 = v424 + 4 * v423;
      uint64_t v2230 = v423;
      uint64_t v2231 = v424;
      if ((v425 & 7) != 0) {
        uint64_t v426 = 8 - (v425 & 7);
      }
      else {
        uint64_t v426 = 0;
      }
      uint64_t v427 = v425 + v426;
      LODWORD(v2225) = *(_DWORD *)v427;
      uint64_t v428 = *(unsigned int *)(v427 + 4);
      DWORD1(v2225) = *(_DWORD *)(v427 + 4);
      *((void *)&v2225 + 1) = *(void *)(v427 + 8);
      *(void *)&long long v2226 = *(void *)(v427 + 16);
      v2190 = v119;
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v427 + 24);
        *((void *)&v2226 + 1) = v427 + 32;
        uint64_t v429 = v427 + 32;
        uint64_t v430 = v427 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v429 = 0;
        uint64_t v430 = v427 + 24;
      }
      uint64_t v431 = 8 - (v430 & 7);
      if ((v430 & 7) == 0) {
        uint64_t v431 = 0;
      }
      int v2180 = *(_DWORD *)(v430 + v431);
      int v2232 = v2180;
      if (v107) {
        memmove(this, v108, 8 * v107);
      }
      v2200 = (CoreML::Archiver::MMappedContentManager *)v107;
      switch(BYTE13(v2212))
      {
        case 0:
          if (!v2195) {
            goto LABEL_1457;
          }
          unint64_t v432 = 0;
          int v433 = ~(-1 << SBYTE6(v2212));
          char v434 = BYTE6(v2212) & 7;
          char v435 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v436 = ~(-1 << SBYTE8(v2212));
          unint64_t v437 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v438 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v439 = (1 << (BYTE11(v2212) - 1));
          uint64_t v440 = ~(-1 << v419);
          int v441 = ~v439;
          while (1)
          {
            int v442 = (*(void *)((char *)v2190 + ((v432 * v117) >> 3)) >> ((v432 * v117) & 7)) & ~(-1 << v117);
            if (v117 == 64) {
              int v442 = *(void *)((char *)v2190 + ((v432 * v117) >> 3));
            }
            int v443 = (_DWORD *)(v113 + (v442 * v111));
            int v444 = (*(void *)(v429 + ((v432 * v428) >> 3)) >> ((v432 * v428) & 7)) & ~(-1 << v428);
            if (v428 == 64) {
              int v444 = *(void *)(v429 + ((v432 * v428) >> 3));
            }
            while (1)
            {
              int v445 = *(_DWORD *)((char *)v443 + v438) >> v434;
              if ((((*(double *)&a3[8 * (*v443 & v433)] > *(float *)((char *)v443 + v111 - 4)) ^ ((v445 & 8) >> 3)) & 1) == 0) {
                break;
              }
              int v446 = (*(_DWORD *)((char *)v443 + v437) >> v435) & v436;
              if ((v445 & 2) != 0)
              {
                unsigned int v448 = v446 + v444;
                if (v445)
                {
                  do
                  {
                    unint64_t v449 = v419 * (unint64_t)v448;
                    unint64_t v450 = *(void *)(v420 + (v449 >> 3));
                    unint64_t v451 = (v450 >> (v449 & 7)) & v440;
                    if (v419 == 64) {
                      unint64_t v451 = v450;
                    }
                    ++v448;
                  }
                  while ((v451 & v439) == 0);
                }
                do
                {
                  unint64_t v452 = v419 * (unint64_t)v448;
                  unint64_t v453 = *(void *)(v420 + (v452 >> 3));
                  uint64_t v454 = (v453 >> (v452 & 7)) & v440;
                  if (v419 == 64) {
                    uint64_t v454 = v453;
                  }
                  *((double *)this + (v454 & v441)) = *((double *)this + (v454 & v441))
                                                                  + *(float *)(v424 + 4 * v448++);
                }
                while ((v454 & v439) == 0);
                goto LABEL_344;
              }
              uint64_t v447 = (v446 * v111);
LABEL_331:
              int v443 = (_DWORD *)((char *)v443 + v447);
            }
            uint64_t v447 = v111;
            if ((v445 & 1) == 0) {
              goto LABEL_331;
            }
            unsigned int v455 = ((*(_DWORD *)((char *)v443 + v437) >> v435) & v436) + v444;
            do
            {
              unint64_t v456 = v419 * (unint64_t)v455;
              unint64_t v457 = *(void *)(v420 + (v456 >> 3));
              uint64_t v458 = (v457 >> (v456 & 7)) & v440;
              if (v419 == 64) {
                uint64_t v458 = v457;
              }
              *((double *)this + (v458 & v441)) = *((double *)this + (v458 & v441))
                                                              + *(float *)(v424 + 4 * v455++);
            }
            while ((v458 & v439) == 0);
LABEL_344:
            unint64_t v432 = (v432 + 1);
            if ((unint64_t)v2195 <= v432)
            {
LABEL_1457:
              CoreML::TreeEnsembles::Internal::apply_postevaluation_transform((double *)this, v2180, (uint64_t)v2200);
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2227);
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2222);
              goto LABEL_2169;
            }
          }
        case 1:
          if (!v2195) {
            goto LABEL_1457;
          }
          unint64_t v1371 = 0;
          int v1372 = ~(-1 << SBYTE6(v2212));
          char v1373 = BYTE6(v2212) & 7;
          char v1374 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1375 = ~(-1 << SBYTE8(v2212));
          unint64_t v1376 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1377 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v1378 = (1 << (BYTE11(v2212) - 1));
          uint64_t v1379 = ~(-1 << v419);
          int v1380 = ~v1378;
          while (1)
          {
            int v1381 = (*(void *)((char *)v2190 + ((v1371 * v117) >> 3)) >> ((v1371 * v117) & 7)) & ~(-1 << v117);
            if (v117 == 64) {
              int v1381 = *(void *)((char *)v2190 + ((v1371 * v117) >> 3));
            }
            v1382 = (_DWORD *)(v113 + (v1381 * v111));
            int v1383 = (*(void *)(v429 + ((v1371 * v428) >> 3)) >> ((v1371 * v428) & 7)) & ~(-1 << v428);
            if (v428 == 64) {
              int v1383 = *(void *)(v429 + ((v1371 * v428) >> 3));
            }
            while (1)
            {
              int v1384 = *(_DWORD *)((char *)v1382 + v1377) >> v1373;
              if (((*(double *)&a3[8 * (*v1382 & v1372)] <= *(float *)((char *)v1382 + v111 - 4)) ^ ((v1384 & 8) >> 3))) {
                break;
              }
              int v1386 = (*(_DWORD *)((char *)v1382 + v1376) >> v1374) & v1375;
              if ((v1384 & 2) != 0)
              {
                unsigned int v1391 = v1386 + v1383;
                if (v1384)
                {
                  do
                  {
                    unint64_t v1392 = v419 * (unint64_t)v1391;
                    unint64_t v1393 = *(void *)(v420 + (v1392 >> 3));
                    unint64_t v1394 = (v1393 >> (v1392 & 7)) & v1379;
                    if (v419 == 64) {
                      unint64_t v1394 = v1393;
                    }
                    ++v1391;
                  }
                  while ((v1394 & v1378) == 0);
                }
                do
                {
                  unint64_t v1395 = v419 * (unint64_t)v1391;
                  unint64_t v1396 = *(void *)(v420 + (v1395 >> 3));
                  uint64_t v1397 = (v1396 >> (v1395 & 7)) & v1379;
                  if (v419 == 64) {
                    uint64_t v1397 = v1396;
                  }
                  *((double *)this + (v1397 & v1380)) = *((double *)this + (v1397 & v1380))
                                                                    + *(float *)(v424 + 4 * v1391++);
                }
                while ((v1397 & v1378) == 0);
                goto LABEL_1397;
              }
              uint64_t v1385 = (v1386 * v111);
LABEL_1385:
              v1382 = (_DWORD *)((char *)v1382 + v1385);
            }
            uint64_t v1385 = v111;
            if ((v1384 & 1) == 0) {
              goto LABEL_1385;
            }
            unsigned int v1387 = ((*(_DWORD *)((char *)v1382 + v1376) >> v1374) & v1375) + v1383;
            do
            {
              unint64_t v1388 = v419 * (unint64_t)v1387;
              unint64_t v1389 = *(void *)(v420 + (v1388 >> 3));
              uint64_t v1390 = (v1389 >> (v1388 & 7)) & v1379;
              if (v419 == 64) {
                uint64_t v1390 = v1389;
              }
              *((double *)this + (v1390 & v1380)) = *((double *)this + (v1390 & v1380))
                                                                + *(float *)(v424 + 4 * v1387++);
            }
            while ((v1390 & v1378) == 0);
LABEL_1397:
            unint64_t v1371 = (v1371 + 1);
            if ((unint64_t)v2195 <= v1371) {
              goto LABEL_1457;
            }
          }
        case 2:
          if (!v2195) {
            goto LABEL_1457;
          }
          unint64_t v1153 = 0;
          int v1154 = ~(-1 << SBYTE6(v2212));
          char v1155 = BYTE6(v2212) & 7;
          char v1156 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1157 = ~(-1 << SBYTE8(v2212));
          unint64_t v1158 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1159 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v1160 = (1 << (BYTE11(v2212) - 1));
          uint64_t v1161 = ~(-1 << v419);
          int v1162 = ~v1160;
          while (1)
          {
            int v1163 = (*(void *)((char *)v2190 + ((v1153 * v117) >> 3)) >> ((v1153 * v117) & 7)) & ~(-1 << v117);
            if (v117 == 64) {
              int v1163 = *(void *)((char *)v2190 + ((v1153 * v117) >> 3));
            }
            v1164 = (_DWORD *)(v113 + (v1163 * v111));
            int v1165 = (*(void *)(v429 + ((v1153 * v428) >> 3)) >> ((v1153 * v428) & 7)) & ~(-1 << v428);
            if (v428 == 64) {
              int v1165 = *(void *)(v429 + ((v1153 * v428) >> 3));
            }
            while (1)
            {
              int v1166 = *(_DWORD *)((char *)v1164 + v1159) >> v1155;
              if (((*(double *)&a3[8 * (*v1164 & v1154)] >= *(float *)((char *)v1164 + v111 - 4)) ^ ((v1166 & 8) >> 3))) {
                break;
              }
              uint64_t v1168 = v111;
              if (v1166)
              {
                unsigned int v1176 = ((*(_DWORD *)((char *)v1164 + v1158) >> v1156) & v1157) + v1165;
                do
                {
                  unint64_t v1177 = v419 * (unint64_t)v1176;
                  unint64_t v1178 = *(void *)(v420 + (v1177 >> 3));
                  uint64_t v1179 = (v1178 >> (v1177 & 7)) & v1161;
                  if (v419 == 64) {
                    uint64_t v1179 = v1178;
                  }
                  *((double *)this + (v1179 & v1162)) = *((double *)this + (v1179 & v1162))
                                                                    + *(float *)(v424 + 4 * v1176++);
                }
                while ((v1179 & v1160) == 0);
                goto LABEL_1160;
              }
LABEL_1147:
              v1164 = (_DWORD *)((char *)v1164 + v1168);
            }
            int v1167 = (*(_DWORD *)((char *)v1164 + v1158) >> v1156) & v1157;
            if ((v1166 & 2) == 0) {
              break;
            }
            unsigned int v1169 = v1167 + v1165;
            if (v1166)
            {
              do
              {
                unint64_t v1170 = v419 * (unint64_t)v1169;
                unint64_t v1171 = *(void *)(v420 + (v1170 >> 3));
                unint64_t v1172 = (v1171 >> (v1170 & 7)) & v1161;
                if (v419 == 64) {
                  unint64_t v1172 = v1171;
                }
                ++v1169;
              }
              while ((v1172 & v1160) == 0);
            }
            do
            {
              unint64_t v1173 = v419 * (unint64_t)v1169;
              unint64_t v1174 = *(void *)(v420 + (v1173 >> 3));
              uint64_t v1175 = (v1174 >> (v1173 & 7)) & v1161;
              if (v419 == 64) {
                uint64_t v1175 = v1174;
              }
              *((double *)this + (v1175 & v1162)) = *((double *)this + (v1175 & v1162))
                                                                + *(float *)(v424 + 4 * v1169++);
            }
            while ((v1175 & v1160) == 0);
LABEL_1160:
            unint64_t v1153 = (v1153 + 1);
            if ((unint64_t)v2195 <= v1153) {
              goto LABEL_1457;
            }
          }
          uint64_t v1168 = (v1167 * v111);
          goto LABEL_1147;
        case 3:
          if (!v2195) {
            goto LABEL_1457;
          }
          unint64_t v1281 = 0;
          int v1282 = ~(-1 << SBYTE6(v2212));
          char v1283 = BYTE6(v2212) & 7;
          char v1284 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1285 = ~(-1 << SBYTE8(v2212));
          unint64_t v1286 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1287 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v1288 = (1 << (BYTE11(v2212) - 1));
          uint64_t v1289 = ~(-1 << v419);
          int v1290 = ~v1288;
          while (1)
          {
            int v1291 = (*(void *)((char *)v2190 + ((v1281 * v117) >> 3)) >> ((v1281 * v117) & 7)) & ~(-1 << v117);
            if (v117 == 64) {
              int v1291 = *(void *)((char *)v2190 + ((v1281 * v117) >> 3));
            }
            v1292 = (_DWORD *)(v113 + (v1291 * v111));
            int v1293 = (*(void *)(v429 + ((v1281 * v428) >> 3)) >> ((v1281 * v428) & 7)) & ~(-1 << v428);
            if (v428 == 64) {
              int v1293 = *(void *)(v429 + ((v1281 * v428) >> 3));
            }
            while (1)
            {
              int v1294 = *(_DWORD *)((char *)v1292 + v1287) >> v1283;
              if (((*(double *)&a3[8 * (*v1292 & v1282)] < *(float *)((char *)v1292 + v111 - 4)) ^ ((v1294 & 8) >> 3))) {
                break;
              }
              int v1296 = (*(_DWORD *)((char *)v1292 + v1286) >> v1284) & v1285;
              if ((v1294 & 2) != 0)
              {
                unsigned int v1301 = v1296 + v1293;
                if (v1294)
                {
                  do
                  {
                    unint64_t v1302 = v419 * (unint64_t)v1301;
                    unint64_t v1303 = *(void *)(v420 + (v1302 >> 3));
                    unint64_t v1304 = (v1303 >> (v1302 & 7)) & v1289;
                    if (v419 == 64) {
                      unint64_t v1304 = v1303;
                    }
                    ++v1301;
                  }
                  while ((v1304 & v1288) == 0);
                }
                do
                {
                  unint64_t v1305 = v419 * (unint64_t)v1301;
                  unint64_t v1306 = *(void *)(v420 + (v1305 >> 3));
                  uint64_t v1307 = (v1306 >> (v1305 & 7)) & v1289;
                  if (v419 == 64) {
                    uint64_t v1307 = v1306;
                  }
                  *((double *)this + (v1307 & v1290)) = *((double *)this + (v1307 & v1290))
                                                                    + *(float *)(v424 + 4 * v1301++);
                }
                while ((v1307 & v1288) == 0);
                goto LABEL_1295;
              }
              uint64_t v1295 = (v1296 * v111);
LABEL_1283:
              v1292 = (_DWORD *)((char *)v1292 + v1295);
            }
            uint64_t v1295 = v111;
            if ((v1294 & 1) == 0) {
              goto LABEL_1283;
            }
            unsigned int v1297 = ((*(_DWORD *)((char *)v1292 + v1286) >> v1284) & v1285) + v1293;
            do
            {
              unint64_t v1298 = v419 * (unint64_t)v1297;
              unint64_t v1299 = *(void *)(v420 + (v1298 >> 3));
              uint64_t v1300 = (v1299 >> (v1298 & 7)) & v1289;
              if (v419 == 64) {
                uint64_t v1300 = v1299;
              }
              *((double *)this + (v1300 & v1290)) = *((double *)this + (v1300 & v1290))
                                                                + *(float *)(v424 + 4 * v1297++);
            }
            while ((v1300 & v1288) == 0);
LABEL_1295:
            unint64_t v1281 = (v1281 + 1);
            if ((unint64_t)v2195 <= v1281) {
              goto LABEL_1457;
            }
          }
        case 4:
          if (!v2195) {
            goto LABEL_1457;
          }
          unint64_t v1036 = 0;
          int v1037 = ~(-1 << SBYTE6(v2212));
          char v1038 = BYTE6(v2212) & 7;
          char v1039 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1040 = ~(-1 << SBYTE8(v2212));
          unint64_t v1041 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1042 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v1043 = (1 << (BYTE11(v2212) - 1));
          uint64_t v1044 = ~(-1 << v419);
          int v1045 = ~v1043;
          break;
        default:
          goto LABEL_1457;
      }
LABEL_1007:
      int v1046 = (*(void *)((char *)v2190 + ((v1036 * v117) >> 3)) >> ((v1036 * v117) & 7)) & ~(-1 << v117);
      if (v117 == 64) {
        int v1046 = *(void *)((char *)v2190 + ((v1036 * v117) >> 3));
      }
      unint64_t v1047 = *(void *)(v429 + ((v1036 * v428) >> 3));
      v1048 = (_DWORD *)(v113 + (v1046 * v111));
      if (v428 != 64) {
        LODWORD(v1047) = (v1047 >> ((v1036 * v428) & 7)) & ~(-1 << v428);
      }
      while (1)
      {
        unsigned int v1049 = *(_DWORD *)((char *)v1048 + v1042) >> v1038;
        double v1050 = *(double *)&a3[8 * (*v1048 & v1037)];
        double v1051 = *(float *)((char *)v1048 + v111 - 4);
        switch((v1049 >> 3) & 7)
        {
          case 0u:
            if (v1050 > v1051) {
              goto LABEL_1015;
            }
            goto LABEL_1024;
          case 1u:
            if (v1050 < v1051) {
              goto LABEL_1024;
            }
            goto LABEL_1015;
          case 2u:
            if (v1050 >= v1051) {
              goto LABEL_1024;
            }
            goto LABEL_1015;
          case 3u:
            if (v1050 > v1051) {
              goto LABEL_1024;
            }
            goto LABEL_1015;
          case 4u:
            if (v1050 != v1051) {
              goto LABEL_1015;
            }
            goto LABEL_1024;
          case 5u:
            if (v1050 != v1051) {
              goto LABEL_1024;
            }
LABEL_1015:
            int v1052 = (*(_DWORD *)((char *)v1048 + v1041) >> v1039) & v1040;
            if ((v1049 & 2) != 0)
            {
              unsigned int v1058 = v1052 + v1047;
              if (v1049)
              {
                do
                {
                  unint64_t v1059 = v419 * (unint64_t)v1058;
                  unint64_t v1060 = *(void *)(v420 + (v1059 >> 3));
                  unint64_t v1061 = (v1060 >> (v1059 & 7)) & v1044;
                  if (v419 == 64) {
                    unint64_t v1061 = v1060;
                  }
                  ++v1058;
                }
                while ((v1061 & v1043) == 0);
              }
              do
              {
                unint64_t v1062 = v419 * (unint64_t)v1058;
                unint64_t v1063 = *(void *)(v420 + (v1062 >> 3));
                uint64_t v1064 = (v1063 >> (v1062 & 7)) & v1044;
                if (v419 == 64) {
                  uint64_t v1064 = v1063;
                }
                *((double *)this + (v1064 & v1045)) = *((double *)this + (v1064 & v1045))
                                                                  + *(float *)(v424 + 4 * v1058++);
              }
              while ((v1064 & v1043) == 0);
LABEL_1038:
              unint64_t v1036 = (v1036 + 1);
              if ((unint64_t)v2195 <= v1036) {
                goto LABEL_1457;
              }
              goto LABEL_1007;
            }
            uint64_t v1053 = (v1052 * v111);
LABEL_1025:
            v1048 = (_DWORD *)((char *)v1048 + v1053);
            break;
          default:
LABEL_1024:
            uint64_t v1053 = v111;
            if ((v1049 & 1) == 0) {
              goto LABEL_1025;
            }
            unsigned int v1054 = ((*(_DWORD *)((char *)v1048 + v1041) >> v1039) & v1040) + v1047;
            do
            {
              unint64_t v1055 = v419 * (unint64_t)v1054;
              unint64_t v1056 = *(void *)(v420 + (v1055 >> 3));
              uint64_t v1057 = (v1056 >> (v1055 & 7)) & v1044;
              if (v419 == 64) {
                uint64_t v1057 = v1056;
              }
              *((double *)this + (v1057 & v1045)) = *((double *)this + (v1057 & v1045))
                                                                + *(float *)(v424 + 4 * v1054++);
            }
            while ((v1057 & v1043) == 0);
            goto LABEL_1038;
        }
      }
    case 6:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v78 = *((void *)a2 + 2);
      v254 = a2 + 3;
      uint64_t v2210 = v78;
      v2211 = i3 + 3;
      uint64_t v255 = (uint64_t)&i3[v78 + 3];
      long long v256 = *(_OWORD *)(v255 + 16);
      long long v2212 = *(_OWORD *)v255;
      long long v2213 = v256;
      uint64_t v257 = WORD2(v2212);
      unint64_t v258 = *(void *)(v255 + 32);
      uint64_t v259 = v255 + 40;
      unint64_t v2214 = v258 / WORD2(v2212);
      v2215 = (void *)(v255 + 40);
      if (v258 != v2214 * WORD2(v2212))
      {
        v2173 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2173, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2173, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v260 = v259 + v258;
      uint64_t v261 = 8 - (v260 & 7);
      if ((v260 & 7) == 0) {
        uint64_t v261 = 0;
      }
      uint64_t v262 = v260 + v261;
      uint64_t v263 = *(unsigned int *)(v262 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v262;
      HIDWORD(v2216[0]) = v263;
      *(_OWORD *)&v2216[1] = *(_OWORD *)(v262 + 8);
      unint64_t v264 = v2216[1];
      if (v2216[1])
      {
        uint64_t v265 = v262 + 32;
        v2216[2] = *(void *)(v262 + 24);
        v2216[3] = v262 + 32;
        uint64_t v266 = v262 + 32 + 8 * v2216[2];
      }
      else
      {
        uint64_t v265 = 0;
        uint64_t v266 = v262 + 24;
      }
      if ((v266 & 7) != 0) {
        uint64_t v266 = (v266 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      long long v2220 = *(_OWORD *)v266;
      *(void *)&long long v2221 = *(void *)(v266 + 16);
      if (*((void *)&v2220 + 1))
      {
        *(void *)&long long v2221 = *(void *)(v266 + 24);
        *((void *)&v2221 + 1) = v266 + 32;
        uint64_t v688 = v266 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v688 = v266 + 24;
      }
      uint64_t v689 = 8 - (v688 & 7);
      if ((v688 & 7) == 0) {
        uint64_t v689 = 0;
      }
      uint64_t v691 = v688 + v689 + 8;
      uint64_t v690 = *(void *)(v688 + v689);
      uint64_t v692 = v691 + 4 * v690;
      uint64_t v2230 = v690;
      uint64_t v2231 = v691;
      if ((v692 & 7) != 0) {
        uint64_t v693 = 8 - (v692 & 7);
      }
      else {
        uint64_t v693 = 0;
      }
      uint64_t v694 = v692 + v693;
      long long v2225 = *(_OWORD *)v694;
      *(void *)&long long v2226 = *(void *)(v694 + 16);
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v694 + 24);
        *((void *)&v2226 + 1) = v694 + 32;
        uint64_t v695 = v694 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v695 = v694 + 24;
      }
      uint64_t v696 = 8 - (v695 & 7);
      if ((v695 & 7) == 0) {
        uint64_t v696 = 0;
      }
      int v369 = *(_DWORD *)(v695 + v696);
      int v2232 = v369;
      if (v78) {
        memmove(this, v254, 8 * v78);
      }
      switch(BYTE13(v2212))
      {
        case 0:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v697 = 0;
          int v698 = ~(-1 << SBYTE6(v2212));
          char v699 = BYTE6(v2212) & 7;
          char v700 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v701 = ~(-1 << SBYTE8(v2212));
          unint64_t v702 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v703 = (unint64_t)BYTE6(v2212) >> 3;
          int v704 = DWORD2(v2213);
          uint64_t v705 = DWORD2(v2213);
          while (1)
          {
            int v706 = (*(void *)(v265 + ((v697 * v263) >> 3)) >> ((v697 * v263) & 7)) & ~(-1 << v263);
            if (v263 == 64) {
              int v706 = *(void *)(v265 + ((v697 * v263) >> 3));
            }
            for (uint64_t i = (_DWORD *)(v259 + (v706 * v257)); ; uint64_t i = (_DWORD *)((char *)i + v710))
            {
              int v708 = *(_DWORD *)((char *)i + v703) >> v699;
              if (((*(double *)&a3[8 * (*i & v698)] > *(float *)((char *)i + v257 - 4)) ^ ((v708 & 8) >> 3))) {
                break;
              }
              uint64_t v710 = v257;
              if (v708)
              {
                if (v704)
                {
                  unsigned int v714 = v704 * (((*(_DWORD *)((char *)i + v702) >> v700) & v701) + v697 + v706);
                  unsigned __int16 v715 = (double *)this;
                  uint64_t v716 = v705;
                  do
                  {
                    *unsigned __int16 v715 = *v715 + *(float *)(v691 + 4 * v714);
                    ++v715;
                    ++v714;
                    --v716;
                  }
                  while (v716);
                }
                goto LABEL_642;
              }
LABEL_634:
              ;
            }
            int v709 = (*(_DWORD *)((char *)i + v702) >> v700) & v701;
            if ((v708 & 2) == 0) {
              break;
            }
            if (v704)
            {
              unsigned int v711 = v704 * (v697 + v706 + v709 + (v708 & 1));
              char v712 = (double *)this;
              uint64_t v713 = v705;
              do
              {
                *char v712 = *v712 + *(float *)(v691 + 4 * v711);
                ++v712;
                ++v711;
                --v713;
              }
              while (v713);
            }
LABEL_642:
            unint64_t v697 = (v697 + 1);
            if (v264 <= v697) {
              goto LABEL_2139;
            }
          }
          uint64_t v710 = (v709 * v257);
          goto LABEL_634;
        case 1:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v2018 = 0;
          int v2019 = ~(-1 << SBYTE6(v2212));
          char v2020 = BYTE6(v2212) & 7;
          char v2021 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v2022 = ~(-1 << SBYTE8(v2212));
          unint64_t v2023 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v2024 = (unint64_t)BYTE6(v2212) >> 3;
          int v2025 = DWORD2(v2213);
          uint64_t v2026 = DWORD2(v2213);
          while (1)
          {
            int v2027 = (*(void *)(v265 + ((v2018 * v263) >> 3)) >> ((v2018 * v263) & 7)) & ~(-1 << v263);
            if (v263 == 64) {
              int v2027 = *(void *)(v265 + ((v2018 * v263) >> 3));
            }
            for (uint64_t j = (_DWORD *)(v259 + (v2027 * v257)); ; uint64_t j = (_DWORD *)((char *)j + v2030))
            {
              int v2029 = *(_DWORD *)((char *)j + v2024) >> v2020;
              if (((*(double *)&a3[8 * (*j & v2019)] <= *(float *)((char *)j + v257 - 4)) ^ ((v2029 & 8) >> 3))) {
                break;
              }
              int v2031 = (*(_DWORD *)((char *)j + v2023) >> v2021) & v2022;
              if ((v2029 & 2) != 0)
              {
                if (v2025)
                {
                  unsigned int v2035 = v2025 * (v2018 + v2027 + v2031 + (v2029 & 1));
                  v2036 = (double *)this;
                  uint64_t v2037 = v2026;
                  do
                  {
                    double *v2036 = *v2036 + *(float *)(v691 + 4 * v2035);
                    ++v2036;
                    ++v2035;
                    --v2037;
                  }
                  while (v2037);
                }
                goto LABEL_2049;
              }
              uint64_t v2030 = (v2031 * v257);
LABEL_2041:
              ;
            }
            uint64_t v2030 = v257;
            if ((v2029 & 1) == 0) {
              goto LABEL_2041;
            }
            if (v2025)
            {
              unsigned int v2032 = v2025 * (((*(_DWORD *)((char *)j + v2023) >> v2021) & v2022) + v2018 + v2027);
              v2033 = (double *)this;
              uint64_t v2034 = v2026;
              do
              {
                double *v2033 = *v2033 + *(float *)(v691 + 4 * v2032);
                ++v2033;
                ++v2032;
                --v2034;
              }
              while (v2034);
            }
LABEL_2049:
            unint64_t v2018 = (v2018 + 1);
            if (v264 <= v2018) {
              goto LABEL_2139;
            }
          }
        case 2:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v1817 = 0;
          int v1818 = ~(-1 << SBYTE6(v2212));
          char v1819 = BYTE6(v2212) & 7;
          char v1820 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1821 = ~(-1 << SBYTE8(v2212));
          unint64_t v1822 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1823 = (unint64_t)BYTE6(v2212) >> 3;
          int v1824 = DWORD2(v2213);
          uint64_t v1825 = DWORD2(v2213);
          while (1)
          {
            int v1826 = (*(void *)(v265 + ((v1817 * v263) >> 3)) >> ((v1817 * v263) & 7)) & ~(-1 << v263);
            if (v263 == 64) {
              int v1826 = *(void *)(v265 + ((v1817 * v263) >> 3));
            }
            for (k = (_DWORD *)(v259 + (v1826 * v257)); ; k = (_DWORD *)((char *)k + v1830))
            {
              int v1828 = *(_DWORD *)((char *)k + v1823) >> v1819;
              if (((*(double *)&a3[8 * (*k & v1818)] >= *(float *)((char *)k + v257 - 4)) ^ ((v1828 & 8) >> 3))) {
                break;
              }
              uint64_t v1830 = v257;
              if (v1828)
              {
                if (v1824)
                {
                  unsigned int v1834 = v1824 * (((*(_DWORD *)((char *)k + v1822) >> v1820) & v1821) + v1817 + v1826);
                  v1835 = (double *)this;
                  uint64_t v1836 = v1825;
                  do
                  {
                    double *v1835 = *v1835 + *(float *)(v691 + 4 * v1834);
                    ++v1835;
                    ++v1834;
                    --v1836;
                  }
                  while (v1836);
                }
                goto LABEL_1861;
              }
LABEL_1853:
              ;
            }
            int v1829 = (*(_DWORD *)((char *)k + v1822) >> v1820) & v1821;
            if ((v1828 & 2) == 0) {
              break;
            }
            if (v1824)
            {
              unsigned int v1831 = v1824 * (v1817 + v1826 + v1829 + (v1828 & 1));
              v1832 = (double *)this;
              uint64_t v1833 = v1825;
              do
              {
                double *v1832 = *v1832 + *(float *)(v691 + 4 * v1831);
                ++v1832;
                ++v1831;
                --v1833;
              }
              while (v1833);
            }
LABEL_1861:
            unint64_t v1817 = (v1817 + 1);
            if (v264 <= v1817) {
              goto LABEL_2139;
            }
          }
          uint64_t v1830 = (v1829 * v257);
          goto LABEL_1853;
        case 3:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v1963 = 0;
          int v1964 = ~(-1 << SBYTE6(v2212));
          char v1965 = BYTE6(v2212) & 7;
          char v1966 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1967 = ~(-1 << SBYTE8(v2212));
          unint64_t v1968 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1969 = (unint64_t)BYTE6(v2212) >> 3;
          int v1970 = DWORD2(v2213);
          uint64_t v1971 = DWORD2(v2213);
          while (1)
          {
            int v1972 = (*(void *)(v265 + ((v1963 * v263) >> 3)) >> ((v1963 * v263) & 7)) & ~(-1 << v263);
            if (v263 == 64) {
              int v1972 = *(void *)(v265 + ((v1963 * v263) >> 3));
            }
            for (m = (_DWORD *)(v259 + (v1972 * v257)); ; m = (_DWORD *)((char *)m + v1975))
            {
              int v1974 = *(_DWORD *)((char *)m + v1969) >> v1965;
              if (((*(double *)&a3[8 * (*m & v1964)] < *(float *)((char *)m + v257 - 4)) ^ ((v1974 & 8) >> 3))) {
                break;
              }
              int v1976 = (*(_DWORD *)((char *)m + v1968) >> v1966) & v1967;
              if ((v1974 & 2) != 0)
              {
                if (v1970)
                {
                  unsigned int v1980 = v1970 * (v1963 + v1972 + v1976 + (v1974 & 1));
                  v1981 = (double *)this;
                  uint64_t v1982 = v1971;
                  do
                  {
                    double *v1981 = *v1981 + *(float *)(v691 + 4 * v1980);
                    ++v1981;
                    ++v1980;
                    --v1982;
                  }
                  while (v1982);
                }
                goto LABEL_1995;
              }
              uint64_t v1975 = (v1976 * v257);
LABEL_1987:
              ;
            }
            uint64_t v1975 = v257;
            if ((v1974 & 1) == 0) {
              goto LABEL_1987;
            }
            if (v1970)
            {
              unsigned int v1977 = v1970 * (((*(_DWORD *)((char *)m + v1968) >> v1966) & v1967) + v1963 + v1972);
              v1978 = (double *)this;
              uint64_t v1979 = v1971;
              do
              {
                double *v1978 = *v1978 + *(float *)(v691 + 4 * v1977);
                ++v1978;
                ++v1977;
                --v1979;
              }
              while (v1979);
            }
LABEL_1995:
            unint64_t v1963 = (v1963 + 1);
            if (v264 <= v1963) {
              goto LABEL_2139;
            }
          }
        case 4:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v1575 = 0;
          int v1576 = ~(-1 << SBYTE6(v2212));
          char v1577 = BYTE6(v2212) & 7;
          char v1578 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1579 = ~(-1 << SBYTE8(v2212));
          unint64_t v1580 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1581 = (unint64_t)BYTE6(v2212) >> 3;
          int v1582 = DWORD2(v2213);
          uint64_t v1583 = DWORD2(v2213);
          break;
        default:
          goto LABEL_2139;
      }
LABEL_1572:
      if (v263 == 64) {
        int v1584 = *(void *)(v265 + ((v1575 * v263) >> 3));
      }
      else {
        int v1584 = (*(void *)(v265 + ((v1575 * v263) >> 3)) >> ((v1575 * v263) & 7)) & ~(-1 << v263);
      }
      v1585 = (_DWORD *)(v259 + (v1584 * v257));
      while (1)
      {
        unsigned int v1586 = *(_DWORD *)((char *)v1585 + v1581) >> v1577;
        double v1587 = *(double *)&a3[8 * (*v1585 & v1576)];
        double v1588 = *(float *)((char *)v1585 + v257 - 4);
        switch((v1586 >> 3) & 7)
        {
          case 0u:
            if (v1587 > v1588) {
              goto LABEL_1580;
            }
            goto LABEL_1589;
          case 1u:
            if (v1587 < v1588) {
              goto LABEL_1589;
            }
            goto LABEL_1580;
          case 2u:
            if (v1587 >= v1588) {
              goto LABEL_1589;
            }
            goto LABEL_1580;
          case 3u:
            if (v1587 > v1588) {
              goto LABEL_1589;
            }
            goto LABEL_1580;
          case 4u:
            if (v1587 != v1588) {
              goto LABEL_1580;
            }
            goto LABEL_1589;
          case 5u:
            if (v1587 != v1588) {
              goto LABEL_1589;
            }
LABEL_1580:
            int v1589 = (*(_DWORD *)((char *)v1585 + v1580) >> v1578) & v1579;
            if ((v1586 & 2) != 0)
            {
              if (v1582)
              {
                unsigned int v1594 = v1582 * (v1575 + v1584 + v1589 + ((*(_DWORD *)((char *)v1585 + v1581) >> v1577) & 1));
                v1595 = (double *)this;
                uint64_t v1596 = v1583;
                do
                {
                  double *v1595 = *v1595 + *(float *)(v691 + 4 * v1594);
                  ++v1595;
                  ++v1594;
                  --v1596;
                }
                while (v1596);
              }
LABEL_1598:
              unint64_t v1575 = (v1575 + 1);
              if (v264 <= v1575) {
                goto LABEL_2139;
              }
              goto LABEL_1572;
            }
            uint64_t v1590 = (v1589 * v257);
LABEL_1590:
            v1585 = (_DWORD *)((char *)v1585 + v1590);
            break;
          default:
LABEL_1589:
            uint64_t v1590 = v257;
            if ((v1586 & 1) == 0) {
              goto LABEL_1590;
            }
            if (v1582)
            {
              unsigned int v1591 = v1582 * (((*(_DWORD *)((char *)v1585 + v1580) >> v1578) & v1579) + v1575 + v1584);
              v1592 = (double *)this;
              uint64_t v1593 = v1583;
              do
              {
                double *v1592 = *v1592 + *(float *)(v691 + 4 * v1591);
                ++v1592;
                ++v1591;
                --v1593;
              }
              while (v1593);
            }
            goto LABEL_1598;
        }
      }
    case 7:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v78 = *((void *)a2 + 2);
      char v280 = a2 + 3;
      uint64_t v2210 = v78;
      v2211 = i3 + 3;
      uint64_t v281 = (uint64_t)&i3[v78 + 3];
      long long v282 = *(_OWORD *)(v281 + 16);
      long long v2212 = *(_OWORD *)v281;
      long long v2213 = v282;
      uint64_t v283 = WORD2(v2212);
      unint64_t v284 = *(void *)(v281 + 32);
      uint64_t v285 = v281 + 40;
      unint64_t v2214 = v284 / WORD2(v2212);
      v2215 = (void *)(v281 + 40);
      if (v284 != v2214 * WORD2(v2212))
      {
        v2175 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2175, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2175, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v286 = v285 + v284;
      uint64_t v287 = 8 - (v286 & 7);
      if ((v286 & 7) == 0) {
        uint64_t v287 = 0;
      }
      uint64_t v288 = v286 + v287;
      uint64_t v289 = *(unsigned int *)(v288 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v288;
      HIDWORD(v2216[0]) = v289;
      *(_OWORD *)&v2216[1] = *(_OWORD *)(v288 + 8);
      uint64_t v290 = v2216[1];
      if (v2216[1])
      {
        uint64_t v291 = v288 + 32;
        v2216[2] = *(void *)(v288 + 24);
        v2216[3] = v288 + 32;
        uint64_t v292 = v288 + 32 + 8 * v2216[2];
      }
      else
      {
        uint64_t v291 = 0;
        uint64_t v292 = v288 + 24;
      }
      if ((v292 & 7) != 0) {
        uint64_t v292 = (v292 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      long long v2220 = *(_OWORD *)v292;
      *(void *)&long long v2221 = *(void *)(v292 + 16);
      if (*((void *)&v2220 + 1))
      {
        *(void *)&long long v2221 = *(void *)(v292 + 24);
        *((void *)&v2221 + 1) = v292 + 32;
        uint64_t v746 = v292 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v746 = v292 + 24;
      }
      uint64_t v747 = 8 - (v746 & 7);
      if ((v746 & 7) == 0) {
        uint64_t v747 = 0;
      }
      uint64_t v749 = v746 + v747 + 8;
      uint64_t v748 = *(void *)(v746 + v747);
      uint64_t v750 = v749 + 4 * v748;
      uint64_t v2230 = v748;
      uint64_t v2231 = v749;
      if ((v750 & 7) != 0) {
        uint64_t v751 = 8 - (v750 & 7);
      }
      else {
        uint64_t v751 = 0;
      }
      uint64_t v752 = v750 + v751;
      long long v2225 = *(_OWORD *)v752;
      *(void *)&long long v2226 = *(void *)(v752 + 16);
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v752 + 24);
        *((void *)&v2226 + 1) = v752 + 32;
        uint64_t v753 = v752 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v753 = v752 + 24;
      }
      uint64_t v754 = 8 - (v753 & 7);
      if ((v753 & 7) == 0) {
        uint64_t v754 = 0;
      }
      int v369 = *(_DWORD *)(v753 + v754);
      int v2232 = v369;
      if (v78) {
        memmove(this, v280, 8 * v78);
      }
      switch(BYTE13(v2212))
      {
        case 0:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          uint64_t v755 = 0;
          uint64_t v756 = ~(-1 << SBYTE6(v2212));
          char v757 = BYTE6(v2212) & 7;
          uint64_t v758 = ~(-1 << SBYTE8(v2212));
          char v759 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v760 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v761 = (unint64_t)BYTE6(v2212) >> 3;
          double v762 = *(double *)this;
          while (1)
          {
            uint64_t v763 = (*(void *)(v291 + ((unint64_t)(v755 * v289) >> 3)) >> ((v755 * v289) & 7)) & ~(-1 << v289);
            if (v289 == 64) {
              uint64_t v763 = *(void *)(v291 + ((unint64_t)(v755 * v289) >> 3));
            }
            char v764 = (void *)(v285 + v763 * v283);
            uint64_t v765 = v763 + v755;
            while (1)
            {
              int v766 = *(_DWORD *)((char *)v764 + v761) >> v757;
              if (((*(double *)&a3[8 * (*v764 & v756)] > *(float *)((char *)v764 + v283 - 4)) ^ ((v766 & 8) >> 3))) {
                break;
              }
              uint64_t v768 = v283;
              if (v766)
              {
                uint64_t v769 = ((*(void *)((char *)v764 + v760) >> v759) & v758) + v765;
                goto LABEL_713;
              }
LABEL_710:
              char v764 = (void *)((char *)v764 + v768);
            }
            uint64_t v767 = (*(void *)((char *)v764 + v760) >> v759) & v758;
            if ((v766 & 2) == 0) {
              break;
            }
            uint64_t v769 = v765 + v767 + (v766 & 1);
LABEL_713:
            double v762 = v762 + *(float *)(v749 + 4 * v769);
            *(double *)this = v762;
            if (++v755 == v290) {
              goto LABEL_2139;
            }
          }
          uint64_t v768 = v767 * v283;
          goto LABEL_710;
        case 1:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          uint64_t v2102 = 0;
          uint64_t v2103 = ~(-1 << SBYTE6(v2212));
          char v2104 = BYTE6(v2212) & 7;
          uint64_t v2105 = ~(-1 << SBYTE8(v2212));
          char v2106 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v2107 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v2108 = (unint64_t)BYTE6(v2212) >> 3;
          double v2109 = *(double *)this;
          while (1)
          {
            uint64_t v2110 = (*(void *)(v291 + ((unint64_t)(v2102 * v289) >> 3)) >> ((v2102 * v289) & 7)) & ~(-1 << v289);
            if (v289 == 64) {
              uint64_t v2110 = *(void *)(v291 + ((unint64_t)(v2102 * v289) >> 3));
            }
            v2111 = (void *)(v285 + v2110 * v283);
            uint64_t v2112 = v2110 + v2102;
            while (1)
            {
              int v2113 = *(_DWORD *)((char *)v2111 + v2108) >> v2104;
              if (((*(double *)&a3[8 * (*v2111 & v2103)] <= *(float *)((char *)v2111 + v283 - 4)) ^ ((v2113 & 8) >> 3))) {
                break;
              }
              uint64_t v2115 = (*(void *)((char *)v2111 + v2107) >> v2106) & v2105;
              if ((v2113 & 2) != 0)
              {
                uint64_t v2116 = v2112 + v2115 + (v2113 & 1);
                goto LABEL_2124;
              }
              uint64_t v2114 = v2115 * v283;
LABEL_2122:
              v2111 = (void *)((char *)v2111 + v2114);
            }
            uint64_t v2114 = v283;
            if ((v2113 & 1) == 0) {
              goto LABEL_2122;
            }
            uint64_t v2116 = ((*(void *)((char *)v2111 + v2107) >> v2106) & v2105) + v2112;
LABEL_2124:
            double v2109 = v2109 + *(float *)(v749 + 4 * v2116);
            *(double *)this = v2109;
            if (++v2102 == v290) {
              goto LABEL_2139;
            }
          }
        case 2:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          uint64_t v1880 = 0;
          uint64_t v1881 = ~(-1 << SBYTE6(v2212));
          char v1882 = BYTE6(v2212) & 7;
          uint64_t v1883 = ~(-1 << SBYTE8(v2212));
          char v1884 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1885 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1886 = (unint64_t)BYTE6(v2212) >> 3;
          double v1887 = *(double *)this;
          while (1)
          {
            uint64_t v1888 = (*(void *)(v291 + ((unint64_t)(v1880 * v289) >> 3)) >> ((v1880 * v289) & 7)) & ~(-1 << v289);
            if (v289 == 64) {
              uint64_t v1888 = *(void *)(v291 + ((unint64_t)(v1880 * v289) >> 3));
            }
            v1889 = (void *)(v285 + v1888 * v283);
            uint64_t v1890 = v1888 + v1880;
            while (1)
            {
              int v1891 = *(_DWORD *)((char *)v1889 + v1886) >> v1882;
              if (((*(double *)&a3[8 * (*v1889 & v1881)] >= *(float *)((char *)v1889 + v283 - 4)) ^ ((v1891 & 8) >> 3))) {
                break;
              }
              uint64_t v1893 = v283;
              if (v1891)
              {
                uint64_t v1894 = ((*(void *)((char *)v1889 + v1885) >> v1884) & v1883) + v1890;
                goto LABEL_1914;
              }
LABEL_1911:
              v1889 = (void *)((char *)v1889 + v1893);
            }
            uint64_t v1892 = (*(void *)((char *)v1889 + v1885) >> v1884) & v1883;
            if ((v1891 & 2) == 0) {
              break;
            }
            uint64_t v1894 = v1890 + v1892 + (v1891 & 1);
LABEL_1914:
            double v1887 = v1887 + *(float *)(v749 + 4 * v1894);
            *(double *)this = v1887;
            if (++v1880 == v290) {
              goto LABEL_2139;
            }
          }
          uint64_t v1893 = v1892 * v283;
          goto LABEL_1911;
        case 3:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          uint64_t v2003 = 0;
          uint64_t v2004 = ~(-1 << SBYTE6(v2212));
          char v2005 = BYTE6(v2212) & 7;
          uint64_t v2006 = ~(-1 << SBYTE8(v2212));
          char v2007 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v2008 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v2009 = (unint64_t)BYTE6(v2212) >> 3;
          double v2010 = *(double *)this;
          while (1)
          {
            uint64_t v2011 = (*(void *)(v291 + ((unint64_t)(v2003 * v289) >> 3)) >> ((v2003 * v289) & 7)) & ~(-1 << v289);
            if (v289 == 64) {
              uint64_t v2011 = *(void *)(v291 + ((unint64_t)(v2003 * v289) >> 3));
            }
            v2012 = (void *)(v285 + v2011 * v283);
            uint64_t v2013 = v2011 + v2003;
            while (1)
            {
              int v2014 = *(_DWORD *)((char *)v2012 + v2009) >> v2005;
              if (((*(double *)&a3[8 * (*v2012 & v2004)] < *(float *)((char *)v2012 + v283 - 4)) ^ ((v2014 & 8) >> 3))) {
                break;
              }
              uint64_t v2016 = (*(void *)((char *)v2012 + v2008) >> v2007) & v2006;
              if ((v2014 & 2) != 0)
              {
                uint64_t v2017 = v2013 + v2016 + (v2014 & 1);
                goto LABEL_2029;
              }
              uint64_t v2015 = v2016 * v283;
LABEL_2027:
              v2012 = (void *)((char *)v2012 + v2015);
            }
            uint64_t v2015 = v283;
            if ((v2014 & 1) == 0) {
              goto LABEL_2027;
            }
            uint64_t v2017 = ((*(void *)((char *)v2012 + v2008) >> v2007) & v2006) + v2013;
LABEL_2029:
            double v2010 = v2010 + *(float *)(v749 + 4 * v2017);
            *(double *)this = v2010;
            if (++v2003 == v290) {
              goto LABEL_2139;
            }
          }
        case 4:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          uint64_t v1649 = 0;
          uint64_t v1650 = ~(-1 << SBYTE6(v2212));
          char v1651 = BYTE6(v2212) & 7;
          uint64_t v1652 = ~(-1 << SBYTE8(v2212));
          char v1653 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1654 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1655 = (unint64_t)BYTE6(v2212) >> 3;
          double v1656 = *(double *)this;
          break;
        default:
          goto LABEL_2139;
      }
LABEL_1662:
      uint64_t v1657 = (*(void *)(v291 + ((unint64_t)(v1649 * v289) >> 3)) >> ((v1649 * v289) & 7)) & ~(-1 << v289);
      if (v289 == 64) {
        uint64_t v1657 = *(void *)(v291 + ((unint64_t)(v1649 * v289) >> 3));
      }
      v1658 = (void *)(v285 + v1657 * v283);
      uint64_t v1659 = v1657 + v1649;
      while (1)
      {
        unsigned int v1660 = *(_DWORD *)((char *)v1658 + v1655) >> v1651;
        double v1661 = *(double *)&a3[8 * (*v1658 & v1650)];
        double v1662 = *(float *)((char *)v1658 + v283 - 4);
        switch((v1660 >> 3) & 7)
        {
          case 0u:
            if (v1661 > v1662) {
              goto LABEL_1669;
            }
            goto LABEL_1678;
          case 1u:
            if (v1661 < v1662) {
              goto LABEL_1678;
            }
            goto LABEL_1669;
          case 2u:
            if (v1661 >= v1662) {
              goto LABEL_1678;
            }
            goto LABEL_1669;
          case 3u:
            if (v1661 > v1662) {
              goto LABEL_1678;
            }
            goto LABEL_1669;
          case 4u:
            if (v1661 != v1662) {
              goto LABEL_1669;
            }
            goto LABEL_1678;
          case 5u:
            if (v1661 != v1662) {
              goto LABEL_1678;
            }
LABEL_1669:
            uint64_t v1663 = (*(void *)((char *)v1658 + v1654) >> v1653) & v1652;
            if ((v1660 & 2) != 0)
            {
              uint64_t v1665 = v1659 + v1663 + (v1660 & 1);
LABEL_1682:
              double v1656 = v1656 + *(float *)(v749 + 4 * v1665);
              *(double *)this = v1656;
              if (++v1649 == v290) {
                goto LABEL_2139;
              }
              goto LABEL_1662;
            }
            uint64_t v1664 = v1663 * v283;
LABEL_1679:
            v1658 = (void *)((char *)v1658 + v1664);
            break;
          default:
LABEL_1678:
            uint64_t v1664 = v283;
            if ((v1660 & 1) == 0) {
              goto LABEL_1679;
            }
            uint64_t v1665 = ((*(void *)((char *)v1658 + v1654) >> v1653) & v1652) + v1659;
            goto LABEL_1682;
        }
      }
    case 8:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v92 = *((void *)a2 + 2);
      int v190 = a2 + 3;
      uint64_t v2210 = v92;
      v2211 = i3 + 3;
      uint64_t v191 = (uint64_t)&i3[v92 + 3];
      long long v192 = *(_OWORD *)(v191 + 16);
      long long v2212 = *(_OWORD *)v191;
      long long v2213 = v192;
      uint64_t v193 = WORD2(v2212);
      unint64_t v194 = *(void *)(v191 + 32);
      uint64_t v195 = v191 + 40;
      unint64_t v2214 = v194 / WORD2(v2212);
      v2215 = (void *)(v191 + 40);
      if (v194 != v2214 * WORD2(v2212))
      {
        v2171 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2171, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2171, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v196 = v195 + v194;
      uint64_t v197 = 8 - (v196 & 7);
      if ((v196 & 7) == 0) {
        uint64_t v197 = 0;
      }
      uint64_t v198 = v196 + v197;
      std::string v199 = (CoreML::Archiver::MMappedContentManager *)*(unsigned int *)(v198 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v198;
      HIDWORD(v2216[0]) = v199;
      long long v200 = *(_OWORD *)(v198 + 8);
      *(_OWORD *)&v2216[1] = v200;
      uint64_t v201 = v200;
      if ((void)v200)
      {
        uint64_t v202 = v198 + 32;
        v2216[2] = *(void *)(v198 + 24);
        v2216[3] = v198 + 32;
        uint64_t v203 = v198 + 32 + 8 * v2216[2];
      }
      else
      {
        uint64_t v202 = 0;
        uint64_t v203 = v198 + 24;
      }
      if ((v203 & 7) != 0) {
        uint64_t v203 = (v203 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      LODWORD(v2220) = *(_DWORD *)v203;
      uint64_t v622 = *(unsigned int *)(v203 + 4);
      DWORD1(v2220) = *(_DWORD *)(v203 + 4);
      *((void *)&v2220 + 1) = *(void *)(v203 + 8);
      *(void *)&long long v2221 = *(void *)(v203 + 16);
      if (*((void *)&v2220 + 1))
      {
        uint64_t v623 = v203 + 32;
        *(void *)&long long v2221 = *(void *)(v203 + 24);
        *((void *)&v2221 + 1) = v203 + 32;
        uint64_t v624 = v203 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v623 = 0;
        uint64_t v624 = v203 + 24;
      }
      uint64_t v625 = 8 - (v624 & 7);
      if ((v624 & 7) == 0) {
        uint64_t v625 = 0;
      }
      uint64_t v627 = v624 + v625 + 8;
      uint64_t v626 = *(void *)(v624 + v625);
      uint64_t v628 = v627 + 4 * v626;
      uint64_t v2230 = v626;
      uint64_t v2231 = v627;
      if ((v628 & 7) != 0) {
        uint64_t v629 = 8 - (v628 & 7);
      }
      else {
        uint64_t v629 = 0;
      }
      uint64_t v630 = v628 + v629;
      long long v2225 = *(_OWORD *)v630;
      *(void *)&long long v2226 = *(void *)(v630 + 16);
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v630 + 24);
        *((void *)&v2226 + 1) = v630 + 32;
        uint64_t v631 = v630 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v631 = v630 + 24;
      }
      uint64_t v632 = 8 - (v631 & 7);
      if ((v631 & 7) == 0) {
        uint64_t v632 = 0;
      }
      int v396 = *(_DWORD *)(v631 + v632);
      int v2232 = v396;
      if (v92)
      {
        v2188 = v199;
        uint64_t v633 = v200;
        uint64_t v634 = v195;
        int v635 = v396;
        uint64_t v636 = v623;
        uint64_t v637 = v92;
        memmove(this, v190, 8 * v92);
        uint64_t v92 = v637;
        uint64_t v623 = v636;
        int v396 = v635;
        uint64_t v195 = v634;
        uint64_t v201 = v633;
        std::string v199 = v2188;
      }
      switch(BYTE13(v2212))
      {
        case 0:
          if (!v201) {
            goto LABEL_1843;
          }
          uint64_t v638 = 0;
          uint64_t v639 = ~(-1 << SBYTE6(v2212));
          char v640 = BYTE6(v2212) & 7;
          uint64_t v641 = ~(-1 << SBYTE8(v2212));
          char v642 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v643 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v644 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            uint64_t v645 = (*(void *)(v202 + ((unint64_t)(v638 * (void)v199) >> 3)) >> ((v638 * (_BYTE)v199) & 7)) & ~(-1 << (char)v199);
            if (v199 == 64) {
              uint64_t v645 = *(void *)(v202 + ((unint64_t)(v638 * (void)v199) >> 3));
            }
            unsigned int v646 = (void *)(v195 + v645 * v193);
            uint64_t v647 = v645 + v638;
            while (1)
            {
              int v648 = *(_DWORD *)((char *)v646 + v644) >> v640;
              if (((*(double *)&a3[8 * (*v646 & v639)] > *(float *)((char *)v646 + v193 - 4)) ^ ((v648 & 8) >> 3))) {
                break;
              }
              uint64_t v650 = v193;
              if (v648)
              {
                uint64_t v651 = ((*(void *)((char *)v646 + v643) >> v642) & v641) + v647;
                goto LABEL_563;
              }
LABEL_560:
              unsigned int v646 = (void *)((char *)v646 + v650);
            }
            uint64_t v649 = (*(void *)((char *)v646 + v643) >> v642) & v641;
            if ((v648 & 2) == 0) {
              break;
            }
            uint64_t v651 = v647 + v649 + (v648 & 1);
LABEL_563:
            uint64_t v652 = (*(void *)(v623 + ((unint64_t)(v651 * v622) >> 3)) >> ((v651 * v622) & 7)) & ~(-1 << v622);
            if (v622 == 64) {
              uint64_t v652 = *(void *)(v623 + ((unint64_t)(v651 * v622) >> 3));
            }
            *((double *)this + v652) = *((double *)this + v652) + *(float *)(v627 + 4 * v651);
            if (++v638 == v201) {
              goto LABEL_1843;
            }
          }
          uint64_t v650 = v649 * v193;
          goto LABEL_560;
        case 1:
          if (!v201) {
            goto LABEL_1843;
          }
          uint64_t v1802 = 0;
          uint64_t v1803 = ~(-1 << SBYTE6(v2212));
          char v1804 = BYTE6(v2212) & 7;
          uint64_t v1805 = ~(-1 << SBYTE8(v2212));
          char v1806 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1807 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1808 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            uint64_t v1809 = (*(void *)(v202 + ((unint64_t)(v1802 * (void)v199) >> 3)) >> ((v1802 * (_BYTE)v199) & 7)) & ~(-1 << (char)v199);
            if (v199 == 64) {
              uint64_t v1809 = *(void *)(v202 + ((unint64_t)(v1802 * (void)v199) >> 3));
            }
            v1810 = (void *)(v195 + v1809 * v193);
            uint64_t v1811 = v1809 + v1802;
            while (1)
            {
              int v1812 = *(_DWORD *)((char *)v1810 + v1808) >> v1804;
              if (((*(double *)&a3[8 * (*v1810 & v1803)] <= *(float *)((char *)v1810 + v193 - 4)) ^ ((v1812 & 8) >> 3))) {
                break;
              }
              uint64_t v1814 = (*(void *)((char *)v1810 + v1807) >> v1806) & v1805;
              if ((v1812 & 2) != 0)
              {
                uint64_t v1815 = v1811 + v1814 + (v1812 & 1);
                goto LABEL_1840;
              }
              uint64_t v1813 = v1814 * v193;
LABEL_1838:
              v1810 = (void *)((char *)v1810 + v1813);
            }
            uint64_t v1813 = v193;
            if ((v1812 & 1) == 0) {
              goto LABEL_1838;
            }
            uint64_t v1815 = ((*(void *)((char *)v1810 + v1807) >> v1806) & v1805) + v1811;
LABEL_1840:
            uint64_t v1816 = (*(void *)(v623 + ((unint64_t)(v1815 * v622) >> 3)) >> ((v1815 * v622) & 7)) & ~(-1 << v622);
            if (v622 == 64) {
              uint64_t v1816 = *(void *)(v623 + ((unint64_t)(v1815 * v622) >> 3));
            }
            *((double *)this + v1816) = *((double *)this + v1816) + *(float *)(v627 + 4 * v1815);
            if (++v1802 == v201) {
              goto LABEL_1843;
            }
          }
        case 2:
          if (!v201) {
            goto LABEL_1843;
          }
          uint64_t v1560 = 0;
          uint64_t v1561 = ~(-1 << SBYTE6(v2212));
          char v1562 = BYTE6(v2212) & 7;
          uint64_t v1563 = ~(-1 << SBYTE8(v2212));
          char v1564 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1565 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1566 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            uint64_t v1567 = (*(void *)(v202 + ((unint64_t)(v1560 * (void)v199) >> 3)) >> ((v1560 * (_BYTE)v199) & 7)) & ~(-1 << (char)v199);
            if (v199 == 64) {
              uint64_t v1567 = *(void *)(v202 + ((unint64_t)(v1560 * (void)v199) >> 3));
            }
            v1568 = (void *)(v195 + v1567 * v193);
            uint64_t v1569 = v1567 + v1560;
            while (1)
            {
              int v1570 = *(_DWORD *)((char *)v1568 + v1566) >> v1562;
              if (((*(double *)&a3[8 * (*v1568 & v1561)] >= *(float *)((char *)v1568 + v193 - 4)) ^ ((v1570 & 8) >> 3))) {
                break;
              }
              uint64_t v1572 = v193;
              if (v1570)
              {
                uint64_t v1573 = ((*(void *)((char *)v1568 + v1565) >> v1564) & v1563) + v1569;
                goto LABEL_1566;
              }
LABEL_1563:
              v1568 = (void *)((char *)v1568 + v1572);
            }
            uint64_t v1571 = (*(void *)((char *)v1568 + v1565) >> v1564) & v1563;
            if ((v1570 & 2) == 0) {
              break;
            }
            uint64_t v1573 = v1569 + v1571 + (v1570 & 1);
LABEL_1566:
            uint64_t v1574 = (*(void *)(v623 + ((unint64_t)(v1573 * v622) >> 3)) >> ((v1573 * v622) & 7)) & ~(-1 << v622);
            if (v622 == 64) {
              uint64_t v1574 = *(void *)(v623 + ((unint64_t)(v1573 * v622) >> 3));
            }
            *((double *)this + v1574) = *((double *)this + v1574) + *(float *)(v627 + 4 * v1573);
            if (++v1560 == v201) {
              goto LABEL_1843;
            }
          }
          uint64_t v1572 = v1571 * v193;
          goto LABEL_1563;
        case 3:
          if (!v201) {
            goto LABEL_1843;
          }
          uint64_t v1770 = 0;
          uint64_t v1771 = ~(-1 << SBYTE6(v2212));
          char v1772 = BYTE6(v2212) & 7;
          uint64_t v1773 = ~(-1 << SBYTE8(v2212));
          char v1774 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1775 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1776 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            uint64_t v1777 = (*(void *)(v202 + ((unint64_t)(v1770 * (void)v199) >> 3)) >> ((v1770 * (_BYTE)v199) & 7)) & ~(-1 << (char)v199);
            if (v199 == 64) {
              uint64_t v1777 = *(void *)(v202 + ((unint64_t)(v1770 * (void)v199) >> 3));
            }
            v1778 = (void *)(v195 + v1777 * v193);
            uint64_t v1779 = v1777 + v1770;
            while (1)
            {
              int v1780 = *(_DWORD *)((char *)v1778 + v1776) >> v1772;
              if (((*(double *)&a3[8 * (*v1778 & v1771)] < *(float *)((char *)v1778 + v193 - 4)) ^ ((v1780 & 8) >> 3))) {
                break;
              }
              uint64_t v1782 = (*(void *)((char *)v1778 + v1775) >> v1774) & v1773;
              if ((v1780 & 2) != 0)
              {
                uint64_t v1783 = v1779 + v1782 + (v1780 & 1);
                goto LABEL_1808;
              }
              uint64_t v1781 = v1782 * v193;
LABEL_1806:
              v1778 = (void *)((char *)v1778 + v1781);
            }
            uint64_t v1781 = v193;
            if ((v1780 & 1) == 0) {
              goto LABEL_1806;
            }
            uint64_t v1783 = ((*(void *)((char *)v1778 + v1775) >> v1774) & v1773) + v1779;
LABEL_1808:
            uint64_t v1784 = (*(void *)(v623 + ((unint64_t)(v1783 * v622) >> 3)) >> ((v1783 * v622) & 7)) & ~(-1 << v622);
            if (v622 == 64) {
              uint64_t v1784 = *(void *)(v623 + ((unint64_t)(v1783 * v622) >> 3));
            }
            *((double *)this + v1784) = *((double *)this + v1784) + *(float *)(v627 + 4 * v1783);
            if (++v1770 == v201) {
              goto LABEL_1843;
            }
          }
        case 4:
          if (!v201) {
            goto LABEL_1843;
          }
          uint64_t v1327 = 0;
          uint64_t v1328 = ~(-1 << SBYTE6(v2212));
          char v1329 = BYTE6(v2212) & 7;
          uint64_t v1330 = ~(-1 << SBYTE8(v2212));
          char v1331 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1332 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1333 = (unint64_t)BYTE6(v2212) >> 3;
          break;
        default:
          goto LABEL_1843;
      }
LABEL_1325:
      uint64_t v1334 = (*(void *)(v202 + ((unint64_t)(v1327 * (void)v199) >> 3)) >> ((v1327 * (_BYTE)v199) & 7)) & ~(-1 << (char)v199);
      if (v199 == 64) {
        uint64_t v1334 = *(void *)(v202 + ((unint64_t)(v1327 * (void)v199) >> 3));
      }
      v1335 = (void *)(v195 + v1334 * v193);
      uint64_t v1336 = v1334 + v1327;
      while (1)
      {
        unsigned int v1337 = *(_DWORD *)((char *)v1335 + v1333) >> v1329;
        double v1338 = *(double *)&a3[8 * (*v1335 & v1328)];
        double v1339 = *(float *)((char *)v1335 + v193 - 4);
        switch((v1337 >> 3) & 7)
        {
          case 0u:
            if (v1338 > v1339) {
              goto LABEL_1332;
            }
            goto LABEL_1341;
          case 1u:
            if (v1338 < v1339) {
              goto LABEL_1341;
            }
            goto LABEL_1332;
          case 2u:
            if (v1338 >= v1339) {
              goto LABEL_1341;
            }
            goto LABEL_1332;
          case 3u:
            if (v1338 > v1339) {
              goto LABEL_1341;
            }
            goto LABEL_1332;
          case 4u:
            if (v1338 != v1339) {
              goto LABEL_1332;
            }
            goto LABEL_1341;
          case 5u:
            if (v1338 != v1339) {
              goto LABEL_1341;
            }
LABEL_1332:
            uint64_t v1340 = (*(void *)((char *)v1335 + v1332) >> v1331) & v1330;
            if ((v1337 & 2) != 0)
            {
              uint64_t v1342 = v1336 + v1340 + (v1337 & 1);
LABEL_1345:
              uint64_t v1343 = (*(void *)(v623 + ((unint64_t)(v1342 * v622) >> 3)) >> ((v1342 * v622) & 7)) & ~(-1 << v622);
              if (v622 == 64) {
                uint64_t v1343 = *(void *)(v623 + ((unint64_t)(v1342 * v622) >> 3));
              }
              *((double *)this + v1343) = *((double *)this + v1343) + *(float *)(v627 + 4 * v1342);
              if (++v1327 == v201) {
                goto LABEL_1843;
              }
              goto LABEL_1325;
            }
            uint64_t v1341 = v1340 * v193;
LABEL_1342:
            v1335 = (void *)((char *)v1335 + v1341);
            break;
          default:
LABEL_1341:
            uint64_t v1341 = v193;
            if ((v1337 & 1) == 0) {
              goto LABEL_1342;
            }
            uint64_t v1342 = ((*(void *)((char *)v1335 + v1332) >> v1331) & v1330) + v1336;
            goto LABEL_1345;
        }
      }
    case 9:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v65 = *((void *)a2 + 2);
      unsigned __int8 v306 = a2 + 3;
      uint64_t v2210 = v65;
      v2211 = i3 + 3;
      uint64_t v307 = (uint64_t)&i3[v65 + 3];
      long long v308 = *(_OWORD *)(v307 + 16);
      long long v2212 = *(_OWORD *)v307;
      long long v2213 = v308;
      uint64_t v309 = WORD2(v2212);
      unint64_t v310 = *(void *)(v307 + 32);
      uint64_t v311 = v307 + 40;
      unint64_t v2214 = v310 / WORD2(v2212);
      v2215 = (void *)(v307 + 40);
      if (v310 != v2214 * WORD2(v2212))
      {
        v2177 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2177, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2177, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v312 = v311 + v310;
      uint64_t v313 = 8 - (v312 & 7);
      if ((v312 & 7) == 0) {
        uint64_t v313 = 0;
      }
      uint64_t v314 = v312 + v313;
      uint64_t v315 = *(unsigned int *)(v314 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v314;
      HIDWORD(v2216[0]) = v315;
      long long v316 = *(_OWORD *)(v314 + 8);
      *(_OWORD *)&v2216[1] = v316;
      if ((void)v316)
      {
        v2216[2] = *(void *)(v314 + 24);
        v2216[3] = v314 + 32;
        v2199 = (CoreML::Archiver::MMappedContentManager *)(v314 + 32);
        uint64_t v317 = v314 + 32 + 8 * v2216[2];
      }
      else
      {
        v2199 = 0;
        uint64_t v317 = v314 + 24;
      }
      if ((v317 & 7) != 0) {
        uint64_t v317 = (v317 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      LODWORD(v2220) = *(_DWORD *)v317;
      uint64_t v794 = *(unsigned int *)(v317 + 4);
      DWORD1(v2220) = *(_DWORD *)(v317 + 4);
      *((void *)&v2220 + 1) = *(void *)(v317 + 8);
      *(void *)&long long v2221 = *(void *)(v317 + 16);
      if (*((void *)&v2220 + 1))
      {
        uint64_t v795 = v317 + 32;
        *(void *)&long long v2221 = *(void *)(v317 + 24);
        *((void *)&v2221 + 1) = v317 + 32;
        uint64_t v796 = v317 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v795 = 0;
        uint64_t v796 = v317 + 24;
      }
      v2183 = (CoreML::Archiver::MMappedContentManager *)v316;
      if ((v796 & 7) != 0) {
        uint64_t v797 = 8 - (v796 & 7);
      }
      else {
        uint64_t v797 = 0;
      }
      uint64_t v798 = v796 + v797 + 8 + 4 * *(void *)(v796 + v797);
      uint64_t v2230 = *(void *)(v796 + v797);
      uint64_t v2231 = v796 + v797 + 8;
      if ((v798 & 7) != 0) {
        uint64_t v799 = 8 - (v798 & 7);
      }
      else {
        uint64_t v799 = 0;
      }
      uint64_t v800 = v798 + v799;
      LODWORD(v2225) = *(_DWORD *)v800;
      uint64_t v801 = *(unsigned int *)(v800 + 4);
      DWORD1(v2225) = *(_DWORD *)(v800 + 4);
      *((void *)&v2225 + 1) = *(void *)(v800 + 8);
      *(void *)&long long v2226 = *(void *)(v800 + 16);
      uint64_t v2181 = v311;
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v800 + 24);
        *((void *)&v2226 + 1) = v800 + 32;
        uint64_t v802 = v800 + 32;
        uint64_t v803 = v800 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v802 = 0;
        uint64_t v803 = v800 + 24;
      }
      uint64_t v804 = 8 - (v803 & 7);
      if ((v803 & 7) == 0) {
        uint64_t v804 = 0;
      }
      int v2184 = *(_DWORD *)(v803 + v804);
      int v2232 = v2184;
      if (v65)
      {
        uint64_t v805 = v796;
        uint64_t v806 = v797;
        memmove(this, v306, 8 * v65);
        uint64_t v797 = v806;
        uint64_t v796 = v805;
      }
      switch(BYTE13(v2212))
      {
        case 0:
          if (!v2183) {
            goto LABEL_2168;
          }
          uint64_t v807 = 0;
          uint64_t v808 = ~(-1 << SBYTE6(v2212));
          char v809 = BYTE6(v2212) & 7;
          uint64_t v810 = ~(-1 << SBYTE8(v2212));
          char v811 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v812 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v813 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v814 = 1 << (BYTE11(v2212) - 1);
          uint64_t v815 = ~(-1 << v794);
          uint64_t v816 = ~v814;
          uint64_t v817 = v797 + v796 + 8;
          while (1)
          {
            uint64_t v818 = (*(void *)((char *)v2199 + ((unint64_t)(v807 * v315) >> 3)) >> ((v807 * v315) & 7)) & ~(-1 << v315);
            if (v315 == 64) {
              uint64_t v818 = *(void *)((char *)v2199 + ((unint64_t)(v807 * v315) >> 3));
            }
            long long v819 = (void *)(v2181 + v818 * v309);
            uint64_t v820 = (*(void *)(v802 + ((unint64_t)(v807 * v801) >> 3)) >> ((v807 * v801) & 7)) & ~(-1 << v801);
            if (v801 == 64) {
              uint64_t v820 = *(void *)(v802 + ((unint64_t)(v807 * v801) >> 3));
            }
            while (1)
            {
              int v821 = *(_DWORD *)((char *)v819 + v813) >> v809;
              if ((((*(double *)&a3[8 * (*v819 & v808)] > *(float *)((char *)v819 + v309 - 4)) ^ ((v821 & 8) >> 3)) & 1) == 0) {
                break;
              }
              uint64_t v822 = (*(void *)((char *)v819 + v812) >> v811) & v810;
              if ((v821 & 2) != 0)
              {
                uint64_t v824 = v822 + v820;
                if (v821)
                {
                  unint64_t v825 = v794 * v824;
                  do
                  {
                    unint64_t v826 = *(void *)(v795 + (v825 >> 3));
                    if (v794 != 64) {
                      unint64_t v826 = (v826 >> (v825 & 7)) & v815;
                    }
                    ++v824;
                    v825 += v794;
                  }
                  while ((v826 & v814) == 0);
                }
                v827 = (float *)(v817 + 4 * v824);
                unint64_t v828 = v794 * v824;
                do
                {
                  unint64_t v829 = *(void *)(v795 + (v828 >> 3));
                  if (v794 != 64) {
                    unint64_t v829 = (v829 >> (v828 & 7)) & v815;
                  }
                  float v830 = *v827++;
                  *((double *)this + (v829 & v816)) = *((double *)this + (v829 & v816)) + v830;
                  v828 += v794;
                }
                while ((v829 & v814) == 0);
                goto LABEL_793;
              }
              uint64_t v823 = v822 * v309;
LABEL_778:
              long long v819 = (void *)((char *)v819 + v823);
            }
            uint64_t v823 = v309;
            if ((v821 & 1) == 0) {
              goto LABEL_778;
            }
            uint64_t v831 = ((*(void *)((char *)v819 + v812) >> v811) & v810) + v820;
            uint64_t v832 = (float *)(v817 + 4 * v831);
            unint64_t v833 = v794 * v831;
            do
            {
              unint64_t v834 = *(void *)(v795 + (v833 >> 3));
              if (v794 != 64) {
                unint64_t v834 = (v834 >> (v833 & 7)) & v815;
              }
              float v835 = *v832++;
              *((double *)this + (v834 & v816)) = *((double *)this + (v834 & v816)) + v835;
              v833 += v794;
            }
            while ((v834 & v814) == 0);
LABEL_793:
            if ((CoreML::Archiver::MMappedContentManager *)++v807 == v2183)
            {
LABEL_2168:
              CoreML::TreeEnsembles::Internal::apply_postevaluation_transform((double *)this, v2184, v65);
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2227);
              CoreML::Archiver::MMappedContentManager::~MMappedContentManager(&v2222);
              goto LABEL_2169;
            }
          }
        case 1:
          if (!v2183) {
            goto LABEL_2168;
          }
          uint64_t v2132 = 0;
          uint64_t v2133 = ~(-1 << SBYTE6(v2212));
          char v2134 = BYTE6(v2212) & 7;
          uint64_t v2135 = ~(-1 << SBYTE8(v2212));
          char v2136 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v2137 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v2138 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v2139 = 1 << (BYTE11(v2212) - 1);
          uint64_t v2140 = ~(-1 << v794);
          uint64_t v2141 = ~v2139;
          uint64_t v2142 = v797 + v796 + 8;
          while (1)
          {
            uint64_t v2143 = (*(void *)((char *)v2199 + ((unint64_t)(v2132 * v315) >> 3)) >> ((v2132 * v315) & 7)) & ~(-1 << v315);
            if (v315 == 64) {
              uint64_t v2143 = *(void *)((char *)v2199 + ((unint64_t)(v2132 * v315) >> 3));
            }
            v2144 = (void *)(v2181 + v2143 * v309);
            uint64_t v2145 = (*(void *)(v802 + ((unint64_t)(v2132 * v801) >> 3)) >> ((v2132 * v801) & 7)) & ~(-1 << v801);
            if (v801 == 64) {
              uint64_t v2145 = *(void *)(v802 + ((unint64_t)(v2132 * v801) >> 3));
            }
            while (1)
            {
              int v2146 = *(_DWORD *)((char *)v2144 + v2138) >> v2134;
              if (((*(double *)&a3[8 * (*v2144 & v2133)] <= *(float *)((char *)v2144 + v309 - 4)) ^ ((v2146 & 8) >> 3))) {
                break;
              }
              uint64_t v2148 = (*(void *)((char *)v2144 + v2137) >> v2136) & v2135;
              if ((v2146 & 2) != 0)
              {
                uint64_t v2154 = v2148 + v2145;
                if (v2146)
                {
                  unint64_t v2155 = v794 * v2154;
                  do
                  {
                    unint64_t v2156 = *(void *)(v795 + (v2155 >> 3));
                    if (v794 != 64) {
                      unint64_t v2156 = (v2156 >> (v2155 & 7)) & v2140;
                    }
                    ++v2154;
                    v2155 += v794;
                  }
                  while ((v2156 & v2139) == 0);
                }
                v2157 = (float *)(v2142 + 4 * v2154);
                unint64_t v2158 = v794 * v2154;
                do
                {
                  unint64_t v2159 = *(void *)(v795 + (v2158 >> 3));
                  if (v794 != 64) {
                    unint64_t v2159 = (v2159 >> (v2158 & 7)) & v2140;
                  }
                  float v2160 = *v2157++;
                  *((double *)this + (v2159 & v2141)) = *((double *)this + (v2159 & v2141)) + v2160;
                  v2158 += v794;
                }
                while ((v2159 & v2139) == 0);
                goto LABEL_2167;
              }
              uint64_t v2147 = v2148 * v309;
LABEL_2153:
              v2144 = (void *)((char *)v2144 + v2147);
            }
            uint64_t v2147 = v309;
            if ((v2146 & 1) == 0) {
              goto LABEL_2153;
            }
            uint64_t v2149 = ((*(void *)((char *)v2144 + v2137) >> v2136) & v2135) + v2145;
            v2150 = (float *)(v2142 + 4 * v2149);
            unint64_t v2151 = v794 * v2149;
            do
            {
              unint64_t v2152 = *(void *)(v795 + (v2151 >> 3));
              if (v794 != 64) {
                unint64_t v2152 = (v2152 >> (v2151 & 7)) & v2140;
              }
              float v2153 = *v2150++;
              *((double *)this + (v2152 & v2141)) = *((double *)this + (v2152 & v2141)) + v2153;
              v2151 += v794;
            }
            while ((v2152 & v2139) == 0);
LABEL_2167:
            if ((CoreML::Archiver::MMappedContentManager *)++v2132 == v2183) {
              goto LABEL_2168;
            }
          }
        case 2:
          if (!v2183) {
            goto LABEL_2168;
          }
          uint64_t v1910 = 0;
          uint64_t v1911 = ~(-1 << SBYTE6(v2212));
          char v1912 = BYTE6(v2212) & 7;
          uint64_t v1913 = ~(-1 << SBYTE8(v2212));
          char v1914 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1915 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1916 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v1917 = 1 << (BYTE11(v2212) - 1);
          uint64_t v1918 = ~(-1 << v794);
          uint64_t v1919 = ~v1917;
          uint64_t v1920 = v797 + v796 + 8;
          while (1)
          {
            uint64_t v1921 = (*(void *)((char *)v2199 + ((unint64_t)(v1910 * v315) >> 3)) >> ((v1910 * v315) & 7)) & ~(-1 << v315);
            if (v315 == 64) {
              uint64_t v1921 = *(void *)((char *)v2199 + ((unint64_t)(v1910 * v315) >> 3));
            }
            v1922 = (void *)(v2181 + v1921 * v309);
            uint64_t v1923 = (*(void *)(v802 + ((unint64_t)(v1910 * v801) >> 3)) >> ((v1910 * v801) & 7)) & ~(-1 << v801);
            if (v801 == 64) {
              uint64_t v1923 = *(void *)(v802 + ((unint64_t)(v1910 * v801) >> 3));
            }
            while (1)
            {
              int v1924 = *(_DWORD *)((char *)v1922 + v1916) >> v1912;
              if (((*(double *)&a3[8 * (*v1922 & v1911)] >= *(float *)((char *)v1922 + v309 - 4)) ^ ((v1924 & 8) >> 3))) {
                break;
              }
              uint64_t v1926 = v309;
              if (v1924)
              {
                uint64_t v1934 = ((*(void *)((char *)v1922 + v1915) >> v1914) & v1913) + v1923;
                v1935 = (float *)(v1920 + 4 * v1934);
                unint64_t v1936 = v794 * v1934;
                do
                {
                  unint64_t v1937 = *(void *)(v795 + (v1936 >> 3));
                  if (v794 != 64) {
                    unint64_t v1937 = (v1937 >> (v1936 & 7)) & v1918;
                  }
                  float v1938 = *v1935++;
                  *((double *)this + (v1937 & v1919)) = *((double *)this + (v1937 & v1919)) + v1938;
                  v1936 += v794;
                }
                while ((v1937 & v1917) == 0);
                goto LABEL_1955;
              }
LABEL_1940:
              v1922 = (void *)((char *)v1922 + v1926);
            }
            uint64_t v1925 = (*(void *)((char *)v1922 + v1915) >> v1914) & v1913;
            if ((v1924 & 2) == 0) {
              break;
            }
            uint64_t v1927 = v1925 + v1923;
            if (v1924)
            {
              unint64_t v1928 = v794 * v1927;
              do
              {
                unint64_t v1929 = *(void *)(v795 + (v1928 >> 3));
                if (v794 != 64) {
                  unint64_t v1929 = (v1929 >> (v1928 & 7)) & v1918;
                }
                ++v1927;
                v1928 += v794;
              }
              while ((v1929 & v1917) == 0);
            }
            v1930 = (float *)(v1920 + 4 * v1927);
            unint64_t v1931 = v794 * v1927;
            do
            {
              unint64_t v1932 = *(void *)(v795 + (v1931 >> 3));
              if (v794 != 64) {
                unint64_t v1932 = (v1932 >> (v1931 & 7)) & v1918;
              }
              float v1933 = *v1930++;
              *((double *)this + (v1932 & v1919)) = *((double *)this + (v1932 & v1919)) + v1933;
              v1931 += v794;
            }
            while ((v1932 & v1917) == 0);
LABEL_1955:
            if ((CoreML::Archiver::MMappedContentManager *)++v1910 == v2183) {
              goto LABEL_2168;
            }
          }
          uint64_t v1926 = v1925 * v309;
          goto LABEL_1940;
        case 3:
          if (!v2183) {
            goto LABEL_2168;
          }
          uint64_t v2053 = 0;
          uint64_t v2054 = ~(-1 << SBYTE6(v2212));
          char v2055 = BYTE6(v2212) & 7;
          uint64_t v2056 = ~(-1 << SBYTE8(v2212));
          char v2057 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v2058 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v2059 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v2060 = 1 << (BYTE11(v2212) - 1);
          uint64_t v2061 = ~(-1 << v794);
          uint64_t v2062 = ~v2060;
          uint64_t v2063 = v797 + v796 + 8;
          while (1)
          {
            uint64_t v2064 = (*(void *)((char *)v2199 + ((unint64_t)(v2053 * v315) >> 3)) >> ((v2053 * v315) & 7)) & ~(-1 << v315);
            if (v315 == 64) {
              uint64_t v2064 = *(void *)((char *)v2199 + ((unint64_t)(v2053 * v315) >> 3));
            }
            v2065 = (void *)(v2181 + v2064 * v309);
            uint64_t v2066 = (*(void *)(v802 + ((unint64_t)(v2053 * v801) >> 3)) >> ((v2053 * v801) & 7)) & ~(-1 << v801);
            if (v801 == 64) {
              uint64_t v2066 = *(void *)(v802 + ((unint64_t)(v2053 * v801) >> 3));
            }
            while (1)
            {
              int v2067 = *(_DWORD *)((char *)v2065 + v2059) >> v2055;
              if (((*(double *)&a3[8 * (*v2065 & v2054)] < *(float *)((char *)v2065 + v309 - 4)) ^ ((v2067 & 8) >> 3))) {
                break;
              }
              uint64_t v2069 = (*(void *)((char *)v2065 + v2058) >> v2057) & v2056;
              if ((v2067 & 2) != 0)
              {
                uint64_t v2075 = v2069 + v2066;
                if (v2067)
                {
                  unint64_t v2076 = v794 * v2075;
                  do
                  {
                    unint64_t v2077 = *(void *)(v795 + (v2076 >> 3));
                    if (v794 != 64) {
                      unint64_t v2077 = (v2077 >> (v2076 & 7)) & v2061;
                    }
                    ++v2075;
                    v2076 += v794;
                  }
                  while ((v2077 & v2060) == 0);
                }
                v2078 = (float *)(v2063 + 4 * v2075);
                unint64_t v2079 = v794 * v2075;
                do
                {
                  unint64_t v2080 = *(void *)(v795 + (v2079 >> 3));
                  if (v794 != 64) {
                    unint64_t v2080 = (v2080 >> (v2079 & 7)) & v2061;
                  }
                  float v2081 = *v2078++;
                  *((double *)this + (v2080 & v2062)) = *((double *)this + (v2080 & v2062)) + v2081;
                  v2079 += v794;
                }
                while ((v2080 & v2060) == 0);
                goto LABEL_2090;
              }
              uint64_t v2068 = v2069 * v309;
LABEL_2076:
              v2065 = (void *)((char *)v2065 + v2068);
            }
            uint64_t v2068 = v309;
            if ((v2067 & 1) == 0) {
              goto LABEL_2076;
            }
            uint64_t v2070 = ((*(void *)((char *)v2065 + v2058) >> v2057) & v2056) + v2066;
            v2071 = (float *)(v2063 + 4 * v2070);
            unint64_t v2072 = v794 * v2070;
            do
            {
              unint64_t v2073 = *(void *)(v795 + (v2072 >> 3));
              if (v794 != 64) {
                unint64_t v2073 = (v2073 >> (v2072 & 7)) & v2061;
              }
              float v2074 = *v2071++;
              *((double *)this + (v2073 & v2062)) = *((double *)this + (v2073 & v2062)) + v2074;
              v2072 += v794;
            }
            while ((v2073 & v2060) == 0);
LABEL_2090:
            if ((CoreML::Archiver::MMappedContentManager *)++v2053 == v2183) {
              goto LABEL_2168;
            }
          }
        case 4:
          if (!v2183) {
            goto LABEL_2168;
          }
          uint64_t v1683 = 0;
          uint64_t v1684 = ~(-1 << SBYTE6(v2212));
          char v1685 = BYTE6(v2212) & 7;
          uint64_t v1686 = ~(-1 << SBYTE8(v2212));
          char v1687 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1688 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1689 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v1690 = 1 << (BYTE11(v2212) - 1);
          uint64_t v1691 = ~(-1 << v794);
          uint64_t v1692 = v797 + v796;
          uint64_t v1693 = ~v1690;
          uint64_t v1694 = v1692 + 8;
          break;
        default:
          goto LABEL_2168;
      }
LABEL_1710:
      uint64_t v1695 = (*(void *)((char *)v2199 + ((unint64_t)(v1683 * v315) >> 3)) >> ((v1683 * v315) & 7)) & ~(-1 << v315);
      if (v315 == 64) {
        uint64_t v1695 = *(void *)((char *)v2199 + ((unint64_t)(v1683 * v315) >> 3));
      }
      unint64_t v1696 = *(void *)(v802 + ((unint64_t)(v1683 * v801) >> 3));
      v1697 = (void *)(v2181 + v1695 * v309);
      if (v801 != 64) {
        unint64_t v1696 = (v1696 >> ((v1683 * v801) & 7)) & ~(-1 << v801);
      }
      while (1)
      {
        unsigned int v1698 = *(_DWORD *)((char *)v1697 + v1689) >> v1685;
        double v1699 = *(double *)&a3[8 * (*v1697 & v1684)];
        double v1700 = *(float *)((char *)v1697 + v309 - 4);
        switch((v1698 >> 3) & 7)
        {
          case 0u:
            if (v1699 > v1700) {
              goto LABEL_1718;
            }
            goto LABEL_1727;
          case 1u:
            if (v1699 < v1700) {
              goto LABEL_1727;
            }
            goto LABEL_1718;
          case 2u:
            if (v1699 >= v1700) {
              goto LABEL_1727;
            }
            goto LABEL_1718;
          case 3u:
            if (v1699 > v1700) {
              goto LABEL_1727;
            }
            goto LABEL_1718;
          case 4u:
            if (v1699 != v1700) {
              goto LABEL_1718;
            }
            goto LABEL_1727;
          case 5u:
            if (v1699 != v1700) {
              goto LABEL_1727;
            }
LABEL_1718:
            uint64_t v1701 = (*(void *)((char *)v1697 + v1688) >> v1687) & v1686;
            if ((v1698 & 2) != 0)
            {
              unint64_t v1708 = v1701 + v1696;
              if (v1698)
              {
                unint64_t v1709 = v794 * v1708;
                do
                {
                  unint64_t v1710 = *(void *)(v795 + (v1709 >> 3));
                  if (v794 != 64) {
                    unint64_t v1710 = (v1710 >> (v1709 & 7)) & v1691;
                  }
                  ++v1708;
                  v1709 += v794;
                }
                while ((v1710 & v1690) == 0);
              }
              v1711 = (float *)(v1694 + 4 * v1708);
              unint64_t v1712 = v794 * v1708;
              do
              {
                unint64_t v1713 = *(void *)(v795 + (v1712 >> 3));
                if (v794 != 64) {
                  unint64_t v1713 = (v1713 >> (v1712 & 7)) & v1691;
                }
                float v1714 = *v1711++;
                *((double *)this + (v1713 & v1693)) = *((double *)this + (v1713 & v1693)) + v1714;
                v1712 += v794;
              }
              while ((v1713 & v1690) == 0);
LABEL_1743:
              if ((CoreML::Archiver::MMappedContentManager *)++v1683 == v2183) {
                goto LABEL_2168;
              }
              goto LABEL_1710;
            }
            uint64_t v1702 = v1701 * v309;
LABEL_1728:
            v1697 = (void *)((char *)v1697 + v1702);
            break;
          default:
LABEL_1727:
            uint64_t v1702 = v309;
            if ((v1698 & 1) == 0) {
              goto LABEL_1728;
            }
            unint64_t v1703 = ((*(void *)((char *)v1697 + v1688) >> v1687) & v1686) + v1696;
            v1704 = (float *)(v1694 + 4 * v1703);
            unint64_t v1705 = v794 * v1703;
            do
            {
              unint64_t v1706 = *(void *)(v795 + (v1705 >> 3));
              if (v794 != 64) {
                unint64_t v1706 = (v1706 >> (v1705 & 7)) & v1691;
              }
              float v1707 = *v1704++;
              *((double *)this + (v1706 & v1693)) = *((double *)this + (v1706 & v1693)) + v1707;
              v1705 += v794;
            }
            while ((v1706 & v1690) == 0);
            goto LABEL_1743;
        }
      }
    case 0xA:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v78 = *((void *)a2 + 2);
      uint64_t v135 = a2 + 3;
      uint64_t v2210 = v78;
      v2211 = i3 + 3;
      uint64_t v136 = (uint64_t)&i3[v78 + 3];
      long long v137 = *(_OWORD *)(v136 + 16);
      long long v2212 = *(_OWORD *)v136;
      long long v2213 = v137;
      uint64_t v138 = WORD2(v2212);
      unint64_t v139 = *(void *)(v136 + 32);
      uint64_t v140 = v136 + 40;
      unint64_t v2214 = v139 / WORD2(v2212);
      v2215 = (void *)(v136 + 40);
      if (v139 != v2214 * WORD2(v2212))
      {
        v2167 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2167, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2167, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v141 = v140 + v139;
      uint64_t v142 = 8 - (v141 & 7);
      if ((v141 & 7) == 0) {
        uint64_t v142 = 0;
      }
      uint64_t v143 = v141 + v142;
      uint64_t v144 = *(unsigned int *)(v143 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v143;
      HIDWORD(v2216[0]) = v144;
      long long v145 = *(_OWORD *)(v143 + 8);
      *(_OWORD *)&v2216[1] = v145;
      unint64_t v146 = (CoreML::Archiver::MMappedContentManager *)v145;
      if ((void)v145)
      {
        uint64_t v147 = v143 + 32;
        v2216[2] = *(void *)(v143 + 24);
        v2216[3] = v143 + 32;
        uint64_t v148 = v143 + 32 + 8 * v2216[2];
      }
      else
      {
        uint64_t v147 = 0;
        uint64_t v148 = v143 + 24;
      }
      if ((v148 & 7) != 0) {
        uint64_t v148 = (v148 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      long long v2220 = *(_OWORD *)v148;
      *(void *)&long long v2221 = *(void *)(v148 + 16);
      if (*((void *)&v2220 + 1))
      {
        *(void *)&long long v2221 = *(void *)(v148 + 24);
        *((void *)&v2221 + 1) = v148 + 32;
        uint64_t v499 = v148 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v499 = v148 + 24;
      }
      if ((v499 & 7) != 0) {
        uint64_t v500 = 8 - (v499 & 7);
      }
      else {
        uint64_t v500 = 0;
      }
      uint64_t v501 = v499 + v500 + 8 + 4 * *(void *)(v499 + v500);
      uint64_t v2230 = *(void *)(v499 + v500);
      uint64_t v2231 = v499 + v500 + 8;
      if ((v501 & 7) != 0) {
        uint64_t v502 = 8 - (v501 & 7);
      }
      else {
        uint64_t v502 = 0;
      }
      uint64_t v503 = v501 + v502;
      long long v2225 = *(_OWORD *)v503;
      *(void *)&long long v2226 = *(void *)(v503 + 16);
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v503 + 24);
        *((void *)&v2226 + 1) = v503 + 32;
        uint64_t v504 = v503 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v504 = v503 + 24;
      }
      uint64_t v505 = 8 - (v504 & 7);
      if ((v504 & 7) == 0) {
        uint64_t v505 = 0;
      }
      int v506 = *(_DWORD *)(v504 + v505);
      int v2232 = v506;
      if (v78)
      {
        v2192 = (CoreML::Archiver::MMappedContentManager *)v145;
        uint64_t v507 = v140;
        uint64_t v508 = v500;
        int v509 = v506;
        uint64_t v510 = v499;
        memmove(this, v135, 8 * v78);
        uint64_t v499 = v510;
        uint64_t v500 = v508;
        uint64_t v140 = v507;
        unint64_t v146 = v2192;
        int v506 = v509;
      }
      switch(BYTE13(v2212))
      {
        case 0:
          if (!v146) {
            goto LABEL_1523;
          }
          uint64_t v511 = 0;
          uint64_t v512 = ~(-1 << SBYTE6(v2212));
          char v513 = BYTE6(v2212) & 7;
          uint64_t v514 = ~(-1 << SBYTE8(v2212));
          char v515 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v516 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v517 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v518 = *((void *)&v2213 + 1);
          uint64_t v519 = v500 + v499 + 8;
          uint64_t v520 = 4 * *((void *)&v2213 + 1);
          while (1)
          {
            uint64_t v521 = (*(void *)(v147 + ((unint64_t)(v511 * v144) >> 3)) >> ((v511 * v144) & 7)) & ~(-1 << v144);
            if (v144 == 64) {
              uint64_t v521 = *(void *)(v147 + ((unint64_t)(v511 * v144) >> 3));
            }
            for (n = (void *)(v140 + v521 * v138); ; n = (void *)((char *)n + v525))
            {
              int v523 = *(_DWORD *)((char *)n + v517) >> v513;
              if ((((*(double *)&a3[8 * (*n & v512)] > *(float *)((char *)n + v138 - 4)) ^ ((v523 & 8) >> 3)) & 1) == 0) {
                break;
              }
              uint64_t v524 = (*(void *)((char *)n + v516) >> v515) & v514;
              if ((v523 & 2) != 0)
              {
                if (v518)
                {
                  v526 = (float *)(v519 + v520 * (v521 + v511 + v524 + (v523 & 1)));
                  v527 = (double *)this;
                  uint64_t v528 = v518;
                  do
                  {
                    float v529 = *v526++;
                    double *v527 = *v527 + v529;
                    ++v527;
                    --v528;
                  }
                  while (v528);
                }
                goto LABEL_427;
              }
              uint64_t v525 = v524 * v138;
LABEL_419:
              ;
            }
            uint64_t v525 = v138;
            if ((v523 & 1) == 0) {
              goto LABEL_419;
            }
            if (v518)
            {
              int v530 = (float *)(v519 + v520 * (v521 + ((*(void *)((char *)n + v516) >> v515) & v514) + v511));
              std::string::size_type v531 = (double *)this;
              uint64_t v532 = v518;
              do
              {
                float v533 = *v530++;
                *std::string::size_type v531 = *v531 + v533;
                ++v531;
                --v532;
              }
              while (v532);
            }
LABEL_427:
            if ((CoreML::Archiver::MMappedContentManager *)++v511 == v146)
            {
LABEL_1523:
              v1526 = (double *)this;
              int v1527 = v506;
              goto LABEL_2140;
            }
          }
        case 1:
          if (!v146) {
            goto LABEL_1523;
          }
          uint64_t v1503 = 0;
          uint64_t v1504 = ~(-1 << SBYTE6(v2212));
          char v1505 = BYTE6(v2212) & 7;
          uint64_t v1506 = ~(-1 << SBYTE8(v2212));
          char v1507 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1508 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1509 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v1510 = *((void *)&v2213 + 1);
          uint64_t v1511 = v500 + v499 + 8;
          uint64_t v1512 = 4 * *((void *)&v2213 + 1);
          while (1)
          {
            uint64_t v1513 = (*(void *)(v147 + ((unint64_t)(v1503 * v144) >> 3)) >> ((v1503 * v144) & 7)) & ~(-1 << v144);
            if (v144 == 64) {
              uint64_t v1513 = *(void *)(v147 + ((unint64_t)(v1503 * v144) >> 3));
            }
            for (iuint64_t i = (void *)(v140 + v1513 * v138); ; iuint64_t i = (void *)((char *)ii + v1516))
            {
              int v1515 = *(_DWORD *)((char *)ii + v1509) >> v1505;
              if (((*(double *)&a3[8 * (*ii & v1504)] <= *(float *)((char *)ii + v138 - 4)) ^ ((v1515 & 8) >> 3))) {
                break;
              }
              uint64_t v1517 = (*(void *)((char *)ii + v1508) >> v1507) & v1506;
              if ((v1515 & 2) != 0)
              {
                if (v1510)
                {
                  v1522 = (float *)(v1511 + v1512 * (v1513 + v1503 + v1517 + (v1515 & 1)));
                  v1523 = (double *)this;
                  uint64_t v1524 = v1510;
                  do
                  {
                    float v1525 = *v1522++;
                    double *v1523 = *v1523 + v1525;
                    ++v1523;
                    --v1524;
                  }
                  while (v1524);
                }
                goto LABEL_1522;
              }
              uint64_t v1516 = v1517 * v138;
LABEL_1514:
              ;
            }
            uint64_t v1516 = v138;
            if ((v1515 & 1) == 0) {
              goto LABEL_1514;
            }
            if (v1510)
            {
              v1518 = (float *)(v1511 + v1512 * (v1513 + ((*(void *)((char *)ii + v1508) >> v1507) & v1506) + v1503));
              v1519 = (double *)this;
              uint64_t v1520 = v1510;
              do
              {
                float v1521 = *v1518++;
                double *v1519 = *v1519 + v1521;
                ++v1519;
                --v1520;
              }
              while (v1520);
            }
LABEL_1522:
            if ((CoreML::Archiver::MMappedContentManager *)++v1503 == v146) {
              goto LABEL_1523;
            }
          }
        case 2:
          if (!v146) {
            goto LABEL_1523;
          }
          uint64_t v1258 = 0;
          uint64_t v1259 = ~(-1 << SBYTE6(v2212));
          char v1260 = BYTE6(v2212) & 7;
          uint64_t v1261 = ~(-1 << SBYTE8(v2212));
          char v1262 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1263 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1264 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v1265 = *((void *)&v2213 + 1);
          uint64_t v1266 = v500 + v499 + 8;
          uint64_t v1267 = 4 * *((void *)&v2213 + 1);
          while (1)
          {
            uint64_t v1268 = (*(void *)(v147 + ((unint64_t)(v1258 * v144) >> 3)) >> ((v1258 * v144) & 7)) & ~(-1 << v144);
            if (v144 == 64) {
              uint64_t v1268 = *(void *)(v147 + ((unint64_t)(v1258 * v144) >> 3));
            }
            for (juint64_t j = (void *)(v140 + v1268 * v138); ; juint64_t j = (void *)((char *)jj + v1272))
            {
              int v1270 = *(_DWORD *)((char *)jj + v1264) >> v1260;
              if (((*(double *)&a3[8 * (*jj & v1259)] >= *(float *)((char *)jj + v138 - 4)) ^ ((v1270 & 8) >> 3))) {
                break;
              }
              uint64_t v1272 = v138;
              if (v1270)
              {
                if (v1265)
                {
                  v1277 = (float *)(v1266
                                  + v1267 * (v1268 + ((*(void *)((char *)jj + v1263) >> v1262) & v1261) + v1258));
                  v1278 = (double *)this;
                  uint64_t v1279 = v1265;
                  do
                  {
                    float v1280 = *v1277++;
                    double *v1278 = *v1278 + v1280;
                    ++v1278;
                    --v1279;
                  }
                  while (v1279);
                }
                goto LABEL_1270;
              }
LABEL_1262:
              ;
            }
            uint64_t v1271 = (*(void *)((char *)jj + v1263) >> v1262) & v1261;
            if ((v1270 & 2) == 0) {
              break;
            }
            if (v1265)
            {
              v1273 = (float *)(v1266 + v1267 * (v1268 + v1258 + v1271 + (v1270 & 1)));
              v1274 = (double *)this;
              uint64_t v1275 = v1265;
              do
              {
                float v1276 = *v1273++;
                double *v1274 = *v1274 + v1276;
                ++v1274;
                --v1275;
              }
              while (v1275);
            }
LABEL_1270:
            if ((CoreML::Archiver::MMappedContentManager *)++v1258 == v146) {
              goto LABEL_1523;
            }
          }
          uint64_t v1272 = v1271 * v138;
          goto LABEL_1262;
        case 3:
          if (!v146) {
            goto LABEL_1523;
          }
          uint64_t v1413 = 0;
          uint64_t v1414 = ~(-1 << SBYTE6(v2212));
          char v1415 = BYTE6(v2212) & 7;
          uint64_t v1416 = ~(-1 << SBYTE8(v2212));
          char v1417 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1418 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1419 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v1420 = *((void *)&v2213 + 1);
          uint64_t v1421 = v500 + v499 + 8;
          uint64_t v1422 = 4 * *((void *)&v2213 + 1);
          while (1)
          {
            uint64_t v1423 = (*(void *)(v147 + ((unint64_t)(v1413 * v144) >> 3)) >> ((v1413 * v144) & 7)) & ~(-1 << v144);
            if (v144 == 64) {
              uint64_t v1423 = *(void *)(v147 + ((unint64_t)(v1413 * v144) >> 3));
            }
            for (kk = (void *)(v140 + v1423 * v138); ; kk = (void *)((char *)kk + v1426))
            {
              int v1425 = *(_DWORD *)((char *)kk + v1419) >> v1415;
              if (((*(double *)&a3[8 * (*kk & v1414)] < *(float *)((char *)kk + v138 - 4)) ^ ((v1425 & 8) >> 3))) {
                break;
              }
              uint64_t v1427 = (*(void *)((char *)kk + v1418) >> v1417) & v1416;
              if ((v1425 & 2) != 0)
              {
                if (v1420)
                {
                  v1432 = (float *)(v1421 + v1422 * (v1423 + v1413 + v1427 + (v1425 & 1)));
                  v1433 = (double *)this;
                  uint64_t v1434 = v1420;
                  do
                  {
                    float v1435 = *v1432++;
                    double *v1433 = *v1433 + v1435;
                    ++v1433;
                    --v1434;
                  }
                  while (v1434);
                }
                goto LABEL_1431;
              }
              uint64_t v1426 = v1427 * v138;
LABEL_1423:
              ;
            }
            uint64_t v1426 = v138;
            if ((v1425 & 1) == 0) {
              goto LABEL_1423;
            }
            if (v1420)
            {
              v1428 = (float *)(v1421 + v1422 * (v1423 + ((*(void *)((char *)kk + v1418) >> v1417) & v1416) + v1413));
              v1429 = (double *)this;
              uint64_t v1430 = v1420;
              do
              {
                float v1431 = *v1428++;
                double *v1429 = *v1429 + v1431;
                ++v1429;
                --v1430;
              }
              while (v1430);
            }
LABEL_1431:
            if ((CoreML::Archiver::MMappedContentManager *)++v1413 == v146) {
              goto LABEL_1523;
            }
          }
        case 4:
          if (!v146) {
            goto LABEL_1523;
          }
          uint64_t v1111 = 0;
          uint64_t v1112 = ~(-1 << SBYTE6(v2212));
          char v1113 = BYTE6(v2212) & 7;
          uint64_t v1114 = ~(-1 << SBYTE8(v2212));
          char v1115 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1116 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1117 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v1118 = *((void *)&v2213 + 1);
          uint64_t v1119 = v500 + v499 + 8;
          uint64_t v1120 = 4 * *((void *)&v2213 + 1);
          break;
        default:
          goto LABEL_1523;
      }
LABEL_1093:
      if (v144 == 64) {
        uint64_t v1121 = *(void *)(v147 + ((unint64_t)(v1111 * v144) >> 3));
      }
      else {
        uint64_t v1121 = (*(void *)(v147 + ((unint64_t)(v1111 * v144) >> 3)) >> ((v1111 * v144) & 7)) & ~(-1 << v144);
      }
      v1122 = (void *)(v140 + v1121 * v138);
      while (1)
      {
        unsigned int v1123 = *(_DWORD *)((char *)v1122 + v1117) >> v1113;
        double v1124 = *(double *)&a3[8 * (*v1122 & v1112)];
        double v1125 = *(float *)((char *)v1122 + v138 - 4);
        switch((v1123 >> 3) & 7)
        {
          case 0u:
            if (v1124 > v1125) {
              goto LABEL_1101;
            }
            goto LABEL_1110;
          case 1u:
            if (v1124 < v1125) {
              goto LABEL_1110;
            }
            goto LABEL_1101;
          case 2u:
            if (v1124 >= v1125) {
              goto LABEL_1110;
            }
            goto LABEL_1101;
          case 3u:
            if (v1124 > v1125) {
              goto LABEL_1110;
            }
            goto LABEL_1101;
          case 4u:
            if (v1124 != v1125) {
              goto LABEL_1101;
            }
            goto LABEL_1110;
          case 5u:
            if (v1124 != v1125) {
              goto LABEL_1110;
            }
LABEL_1101:
            uint64_t v1126 = (*(void *)((char *)v1122 + v1116) >> v1115) & v1114;
            if ((v1123 & 2) != 0)
            {
              if (v1118)
              {
                v1132 = (float *)(v1119 + v1120 * (v1121 + v1111 + v1126 + (v1123 & 1)));
                v1133 = (double *)this;
                uint64_t v1134 = v1118;
                do
                {
                  float v1135 = *v1132++;
                  double *v1133 = *v1133 + v1135;
                  ++v1133;
                  --v1134;
                }
                while (v1134);
              }
LABEL_1119:
              if ((CoreML::Archiver::MMappedContentManager *)++v1111 == v146) {
                goto LABEL_1523;
              }
              goto LABEL_1093;
            }
            uint64_t v1127 = v1126 * v138;
LABEL_1111:
            v1122 = (void *)((char *)v1122 + v1127);
            break;
          default:
LABEL_1110:
            uint64_t v1127 = v138;
            if ((v1123 & 1) == 0) {
              goto LABEL_1111;
            }
            if (v1118)
            {
              v1128 = (float *)(v1119 + v1120
                                      * (v1121 + ((*(void *)((char *)v1122 + v1116) >> v1115) & v1114) + v1111));
              v1129 = (double *)this;
              uint64_t v1130 = v1118;
              do
              {
                float v1131 = *v1128++;
                double *v1129 = *v1129 + v1131;
                ++v1129;
                --v1130;
              }
              while (v1130);
            }
            goto LABEL_1119;
        }
      }
    case 0xB:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v78 = *((void *)a2 + 2);
      uint64_t v293 = a2 + 3;
      uint64_t v2210 = v78;
      v2211 = i3 + 3;
      uint64_t v294 = (uint64_t)&i3[v78 + 3];
      long long v295 = *(_OWORD *)(v294 + 16);
      long long v2212 = *(_OWORD *)v294;
      long long v2213 = v295;
      uint64_t v296 = WORD2(v2212);
      unint64_t v297 = *(void *)(v294 + 32);
      uint64_t v298 = v294 + 40;
      unint64_t v2214 = v297 / WORD2(v2212);
      v2215 = (void *)(v294 + 40);
      if (v297 != v2214 * WORD2(v2212))
      {
        v2176 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2176, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2176, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v299 = v298 + v297;
      uint64_t v300 = 8 - (v299 & 7);
      if ((v299 & 7) == 0) {
        uint64_t v300 = 0;
      }
      uint64_t v301 = v299 + v300;
      uint64_t v302 = *(unsigned int *)(v301 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v301;
      HIDWORD(v2216[0]) = v302;
      *(_OWORD *)&v2216[1] = *(_OWORD *)(v301 + 8);
      unint64_t v303 = v2216[1];
      if (v2216[1])
      {
        uint64_t v304 = v301 + 32;
        v2216[2] = *(void *)(v301 + 24);
        v2216[3] = v301 + 32;
        uint64_t v305 = v301 + 32 + 8 * v2216[2];
      }
      else
      {
        uint64_t v304 = 0;
        uint64_t v305 = v301 + 24;
      }
      if ((v305 & 7) != 0) {
        uint64_t v305 = (v305 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      long long v2220 = *(_OWORD *)v305;
      *(void *)&long long v2221 = *(void *)(v305 + 16);
      if (*((void *)&v2220 + 1))
      {
        *(void *)&long long v2221 = *(void *)(v305 + 24);
        *((void *)&v2221 + 1) = v305 + 32;
        uint64_t v770 = v305 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v770 = v305 + 24;
      }
      uint64_t v771 = 8 - (v770 & 7);
      if ((v770 & 7) == 0) {
        uint64_t v771 = 0;
      }
      uint64_t v773 = v770 + v771 + 8;
      uint64_t v772 = *(void *)(v770 + v771);
      uint64_t v774 = v773 + 8 * v772;
      uint64_t v2230 = v772;
      uint64_t v2231 = v773;
      if ((v774 & 7) != 0) {
        uint64_t v775 = 8 - (v774 & 7);
      }
      else {
        uint64_t v775 = 0;
      }
      uint64_t v776 = v774 + v775;
      long long v2225 = *(_OWORD *)v776;
      *(void *)&long long v2226 = *(void *)(v776 + 16);
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v776 + 24);
        *((void *)&v2226 + 1) = v776 + 32;
        uint64_t v777 = v776 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v777 = v776 + 24;
      }
      uint64_t v778 = 8 - (v777 & 7);
      if ((v777 & 7) == 0) {
        uint64_t v778 = 0;
      }
      int v369 = *(_DWORD *)(v777 + v778);
      int v2232 = v369;
      if (v78) {
        memmove(this, v293, 8 * v78);
      }
      switch(BYTE13(v2212))
      {
        case 0:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v779 = 0;
          int v780 = ~(-1 << SBYTE6(v2212));
          char v781 = BYTE6(v2212) & 7;
          char v782 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v783 = ~(-1 << SBYTE8(v2212));
          unint64_t v784 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v785 = (unint64_t)BYTE6(v2212) >> 3;
          double v786 = *(double *)this;
          while (1)
          {
            int v787 = (*(void *)(v304 + ((v779 * v302) >> 3)) >> ((v779 * v302) & 7)) & ~(-1 << v302);
            if (v302 == 64) {
              int v787 = *(void *)(v304 + ((v779 * v302) >> 3));
            }
            v788 = (_DWORD *)(v298 + (v787 * v296));
            int v789 = v779 + v787;
            while (1)
            {
              int v790 = *(_DWORD *)((char *)v788 + v785) >> v781;
              if (((*(double *)&a3[8 * (*v788 & v780)] > *(double *)((char *)v788 + v296 - 8)) ^ ((v790 & 8) >> 3))) {
                break;
              }
              uint64_t v792 = v296;
              if (v790)
              {
                unsigned int v793 = ((*(_DWORD *)((char *)v788 + v784) >> v782) & v783) + v789;
                goto LABEL_746;
              }
LABEL_743:
              v788 = (_DWORD *)((char *)v788 + v792);
            }
            int v791 = (*(_DWORD *)((char *)v788 + v784) >> v782) & v783;
            if ((v790 & 2) == 0) {
              break;
            }
            unsigned int v793 = (v790 & 1) + v789 + v791;
LABEL_746:
            double v786 = v786 + *(double *)(v773 + 8 * v793);
            *(double *)this = v786;
            unint64_t v779 = (v779 + 1);
            if (v303 <= v779) {
              goto LABEL_2139;
            }
          }
          uint64_t v792 = (v791 * v296);
          goto LABEL_743;
        case 1:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v2117 = 0;
          int v2118 = ~(-1 << SBYTE6(v2212));
          char v2119 = BYTE6(v2212) & 7;
          char v2120 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v2121 = ~(-1 << SBYTE8(v2212));
          unint64_t v2122 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v2123 = (unint64_t)BYTE6(v2212) >> 3;
          double v2124 = *(double *)this;
          while (1)
          {
            int v2125 = (*(void *)(v304 + ((v2117 * v302) >> 3)) >> ((v2117 * v302) & 7)) & ~(-1 << v302);
            if (v302 == 64) {
              int v2125 = *(void *)(v304 + ((v2117 * v302) >> 3));
            }
            v2126 = (_DWORD *)(v298 + (v2125 * v296));
            int v2127 = v2117 + v2125;
            while (1)
            {
              int v2128 = *(_DWORD *)((char *)v2126 + v2123) >> v2119;
              if (((*(double *)&a3[8 * (*v2126 & v2118)] <= *(double *)((char *)v2126 + v296 - 8)) ^ ((v2128 & 8) >> 3))) {
                break;
              }
              int v2130 = (*(_DWORD *)((char *)v2126 + v2122) >> v2120) & v2121;
              if ((v2128 & 2) != 0)
              {
                unsigned int v2131 = (v2128 & 1) + v2127 + v2130;
                goto LABEL_2138;
              }
              uint64_t v2129 = (v2130 * v296);
LABEL_2136:
              v2126 = (_DWORD *)((char *)v2126 + v2129);
            }
            uint64_t v2129 = v296;
            if ((v2128 & 1) == 0) {
              goto LABEL_2136;
            }
            unsigned int v2131 = ((*(_DWORD *)((char *)v2126 + v2122) >> v2120) & v2121) + v2127;
LABEL_2138:
            double v2124 = v2124 + *(double *)(v773 + 8 * v2131);
            *(double *)this = v2124;
            unint64_t v2117 = (v2117 + 1);
            if (v303 <= v2117) {
              goto LABEL_2139;
            }
          }
        case 2:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v1895 = 0;
          int v1896 = ~(-1 << SBYTE6(v2212));
          char v1897 = BYTE6(v2212) & 7;
          char v1898 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1899 = ~(-1 << SBYTE8(v2212));
          unint64_t v1900 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1901 = (unint64_t)BYTE6(v2212) >> 3;
          double v1902 = *(double *)this;
          while (1)
          {
            int v1903 = (*(void *)(v304 + ((v1895 * v302) >> 3)) >> ((v1895 * v302) & 7)) & ~(-1 << v302);
            if (v302 == 64) {
              int v1903 = *(void *)(v304 + ((v1895 * v302) >> 3));
            }
            v1904 = (_DWORD *)(v298 + (v1903 * v296));
            int v1905 = v1895 + v1903;
            while (1)
            {
              int v1906 = *(_DWORD *)((char *)v1904 + v1901) >> v1897;
              if (((*(double *)&a3[8 * (*v1904 & v1896)] >= *(double *)((char *)v1904 + v296 - 8)) ^ ((v1906 & 8) >> 3))) {
                break;
              }
              uint64_t v1908 = v296;
              if (v1906)
              {
                unsigned int v1909 = ((*(_DWORD *)((char *)v1904 + v1900) >> v1898) & v1899) + v1905;
                goto LABEL_1928;
              }
LABEL_1925:
              v1904 = (_DWORD *)((char *)v1904 + v1908);
            }
            int v1907 = (*(_DWORD *)((char *)v1904 + v1900) >> v1898) & v1899;
            if ((v1906 & 2) == 0) {
              break;
            }
            unsigned int v1909 = (v1906 & 1) + v1905 + v1907;
LABEL_1928:
            double v1902 = v1902 + *(double *)(v773 + 8 * v1909);
            *(double *)this = v1902;
            unint64_t v1895 = (v1895 + 1);
            if (v303 <= v1895) {
              goto LABEL_2139;
            }
          }
          uint64_t v1908 = (v1907 * v296);
          goto LABEL_1925;
        case 3:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v2038 = 0;
          int v2039 = ~(-1 << SBYTE6(v2212));
          char v2040 = BYTE6(v2212) & 7;
          char v2041 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v2042 = ~(-1 << SBYTE8(v2212));
          unint64_t v2043 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v2044 = (unint64_t)BYTE6(v2212) >> 3;
          double v2045 = *(double *)this;
          while (1)
          {
            int v2046 = (*(void *)(v304 + ((v2038 * v302) >> 3)) >> ((v2038 * v302) & 7)) & ~(-1 << v302);
            if (v302 == 64) {
              int v2046 = *(void *)(v304 + ((v2038 * v302) >> 3));
            }
            v2047 = (_DWORD *)(v298 + (v2046 * v296));
            int v2048 = v2038 + v2046;
            while (1)
            {
              int v2049 = *(_DWORD *)((char *)v2047 + v2044) >> v2040;
              if (((*(double *)&a3[8 * (*v2047 & v2039)] < *(double *)((char *)v2047 + v296 - 8)) ^ ((v2049 & 8) >> 3))) {
                break;
              }
              int v2051 = (*(_DWORD *)((char *)v2047 + v2043) >> v2041) & v2042;
              if ((v2049 & 2) != 0)
              {
                unsigned int v2052 = (v2049 & 1) + v2048 + v2051;
                goto LABEL_2063;
              }
              uint64_t v2050 = (v2051 * v296);
LABEL_2061:
              v2047 = (_DWORD *)((char *)v2047 + v2050);
            }
            uint64_t v2050 = v296;
            if ((v2049 & 1) == 0) {
              goto LABEL_2061;
            }
            unsigned int v2052 = ((*(_DWORD *)((char *)v2047 + v2043) >> v2041) & v2042) + v2048;
LABEL_2063:
            double v2045 = v2045 + *(double *)(v773 + 8 * v2052);
            *(double *)this = v2045;
            unint64_t v2038 = (v2038 + 1);
            if (v303 <= v2038) {
              goto LABEL_2139;
            }
          }
        case 4:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v1666 = 0;
          int v1667 = ~(-1 << SBYTE6(v2212));
          char v1668 = BYTE6(v2212) & 7;
          char v1669 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1670 = ~(-1 << SBYTE8(v2212));
          unint64_t v1671 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1672 = (unint64_t)BYTE6(v2212) >> 3;
          double v1673 = *(double *)this;
          break;
        default:
          goto LABEL_2139;
      }
LABEL_1686:
      int v1674 = (*(void *)(v304 + ((v1666 * v302) >> 3)) >> ((v1666 * v302) & 7)) & ~(-1 << v302);
      if (v302 == 64) {
        int v1674 = *(void *)(v304 + ((v1666 * v302) >> 3));
      }
      v1675 = (_DWORD *)(v298 + (v1674 * v296));
      int v1676 = v1666 + v1674;
      while (1)
      {
        unsigned int v1677 = *(_DWORD *)((char *)v1675 + v1672) >> v1668;
        double v1678 = *(double *)&a3[8 * (*v1675 & v1667)];
        double v1679 = *(double *)((char *)v1675 + v296 - 8);
        switch((v1677 >> 3) & 7)
        {
          case 0u:
            if (v1678 > v1679) {
              goto LABEL_1693;
            }
            goto LABEL_1702;
          case 1u:
            if (v1678 < v1679) {
              goto LABEL_1702;
            }
            goto LABEL_1693;
          case 2u:
            if (v1678 >= v1679) {
              goto LABEL_1702;
            }
            goto LABEL_1693;
          case 3u:
            if (v1678 > v1679) {
              goto LABEL_1702;
            }
            goto LABEL_1693;
          case 4u:
            if (v1678 != v1679) {
              goto LABEL_1693;
            }
            goto LABEL_1702;
          case 5u:
            if (v1678 != v1679) {
              goto LABEL_1702;
            }
LABEL_1693:
            int v1680 = (*(_DWORD *)((char *)v1675 + v1671) >> v1669) & v1670;
            if ((v1677 & 2) != 0)
            {
              unsigned int v1682 = ((*(_DWORD *)((char *)v1675 + v1672) >> v1668) & 1) + v1676 + v1680;
LABEL_1706:
              double v1673 = v1673 + *(double *)(v773 + 8 * v1682);
              *(double *)this = v1673;
              unint64_t v1666 = (v1666 + 1);
              if (v303 <= v1666) {
                goto LABEL_2139;
              }
              goto LABEL_1686;
            }
            uint64_t v1681 = (v1680 * v296);
LABEL_1703:
            v1675 = (_DWORD *)((char *)v1675 + v1681);
            break;
          default:
LABEL_1702:
            uint64_t v1681 = v296;
            if ((v1677 & 1) == 0) {
              goto LABEL_1703;
            }
            unsigned int v1682 = ((*(_DWORD *)((char *)v1675 + v1671) >> v1669) & v1670) + v1676;
            goto LABEL_1706;
        }
      }
    case 0xC:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v92 = *((void *)a2 + 2);
      std::string v93 = a2 + 3;
      uint64_t v2210 = v92;
      v2211 = i3 + 3;
      uint64_t v94 = (uint64_t)&i3[v92 + 3];
      long long v95 = *(_OWORD *)(v94 + 16);
      long long v2212 = *(_OWORD *)v94;
      long long v2213 = v95;
      uint64_t v96 = WORD2(v2212);
      unint64_t v97 = *(void *)(v94 + 32);
      uint64_t v98 = v94 + 40;
      unint64_t v2214 = v97 / WORD2(v2212);
      v2215 = (void *)(v94 + 40);
      if (v97 != v2214 * WORD2(v2212))
      {
        v2164 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2164, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2164, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v99 = v98 + v97;
      uint64_t v100 = 8 - (v99 & 7);
      if ((v99 & 7) == 0) {
        uint64_t v100 = 0;
      }
      uint64_t v101 = v99 + v100;
      std::string v102 = (CoreML::Archiver::MMappedContentManager *)*(unsigned int *)(v101 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v101;
      HIDWORD(v2216[0]) = v102;
      long long v103 = *(_OWORD *)(v101 + 8);
      *(_OWORD *)&v2216[1] = v103;
      unint64_t v104 = v103;
      if ((void)v103)
      {
        uint64_t v105 = v101 + 32;
        v2216[2] = *(void *)(v101 + 24);
        v2216[3] = v101 + 32;
        uint64_t v106 = v101 + 32 + 8 * v2216[2];
      }
      else
      {
        uint64_t v105 = 0;
        uint64_t v106 = v101 + 24;
      }
      if ((v106 & 7) != 0) {
        uint64_t v106 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      LODWORD(v2220) = *(_DWORD *)v106;
      unsigned int v385 = *(_DWORD *)(v106 + 4);
      DWORD1(v2220) = v385;
      *((void *)&v2220 + 1) = *(void *)(v106 + 8);
      *(void *)&long long v2221 = *(void *)(v106 + 16);
      if (*((void *)&v2220 + 1))
      {
        uint64_t v386 = v106 + 32;
        *(void *)&long long v2221 = *(void *)(v106 + 24);
        *((void *)&v2221 + 1) = v106 + 32;
        uint64_t v387 = v106 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v386 = 0;
        uint64_t v387 = v106 + 24;
      }
      uint64_t v388 = 8 - (v387 & 7);
      if ((v387 & 7) == 0) {
        uint64_t v388 = 0;
      }
      uint64_t v390 = v387 + v388 + 8;
      uint64_t v389 = *(void *)(v387 + v388);
      uint64_t v391 = v390 + 8 * v389;
      uint64_t v2230 = v389;
      uint64_t v2231 = v390;
      if ((v391 & 7) != 0) {
        uint64_t v392 = 8 - (v391 & 7);
      }
      else {
        uint64_t v392 = 0;
      }
      uint64_t v393 = v391 + v392;
      long long v2225 = *(_OWORD *)v393;
      *(void *)&long long v2226 = *(void *)(v393 + 16);
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v393 + 24);
        *((void *)&v2226 + 1) = v393 + 32;
        uint64_t v394 = v393 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v394 = v393 + 24;
      }
      uint64_t v395 = 8 - (v394 & 7);
      if ((v394 & 7) == 0) {
        uint64_t v395 = 0;
      }
      int v396 = *(_DWORD *)(v394 + v395);
      int v2232 = v396;
      if (v92)
      {
        v2185 = v102;
        unint64_t v397 = v103;
        uint64_t v398 = v98;
        int v399 = v396;
        uint64_t v400 = v386;
        uint64_t v401 = v92;
        memmove(this, v93, 8 * v92);
        uint64_t v92 = v401;
        uint64_t v386 = v400;
        int v396 = v399;
        uint64_t v98 = v398;
        unint64_t v104 = v397;
        std::string v102 = v2185;
      }
      switch(BYTE13(v2212))
      {
        case 0:
          if (!v104) {
            goto LABEL_1843;
          }
          unint64_t v402 = 0;
          int v403 = ~(-1 << SBYTE6(v2212));
          char v404 = BYTE6(v2212) & 7;
          char v405 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v406 = ~(-1 << SBYTE8(v2212));
          unint64_t v407 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v408 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            int v409 = (*(void *)(v105 + ((v402 * (unint64_t)v102) >> 3)) >> ((v402 * (_BYTE)v102) & 7)) & ~(-1 << (char)v102);
            if (v102 == 64) {
              int v409 = *(void *)(v105 + ((v402 * (unint64_t)v102) >> 3));
            }
            v410 = (_DWORD *)(v98 + (v409 * v96));
            int v411 = v402 + v409;
            while (1)
            {
              int v412 = *(_DWORD *)((char *)v410 + v408) >> v404;
              if (((*(double *)&a3[8 * (*v410 & v403)] > *(double *)((char *)v410 + v96 - 8)) ^ ((v412 & 8) >> 3))) {
                break;
              }
              uint64_t v414 = v96;
              if (v412)
              {
                unsigned int v415 = ((*(_DWORD *)((char *)v410 + v407) >> v405) & v406) + v411;
                goto LABEL_298;
              }
LABEL_295:
              v410 = (_DWORD *)((char *)v410 + v414);
            }
            int v413 = (*(_DWORD *)((char *)v410 + v407) >> v405) & v406;
            if ((v412 & 2) == 0) {
              break;
            }
            unsigned int v415 = (v412 & 1) + v411 + v413;
LABEL_298:
            unint64_t v416 = v385 * (unint64_t)v415;
            unint64_t v417 = *(void *)(v386 + (v416 >> 3));
            uint64_t v418 = (v417 >> (v416 & 7)) & ~(-1 << v385);
            if (v385 == 64) {
              uint64_t v418 = v417;
            }
            *((double *)this + v41_Block_object_dispose(&a9, 8) = *(double *)(v390 + 8 * v415) + *((double *)this + v418);
            unint64_t v402 = (v402 + 1);
            if (v104 <= v402) {
              goto LABEL_1843;
            }
          }
          uint64_t v414 = (v413 * v96);
          goto LABEL_295;
        case 1:
          if (!v104) {
            goto LABEL_1843;
          }
          unint64_t v1197 = 0;
          int v1198 = ~(-1 << SBYTE6(v2212));
          char v1199 = BYTE6(v2212) & 7;
          char v1200 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1201 = ~(-1 << SBYTE8(v2212));
          unint64_t v1202 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1203 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            int v1204 = (*(void *)(v105 + ((v1197 * (unint64_t)v102) >> 3)) >> ((v1197 * (_BYTE)v102) & 7)) & ~(-1 << (char)v102);
            if (v102 == 64) {
              int v1204 = *(void *)(v105 + ((v1197 * (unint64_t)v102) >> 3));
            }
            v1205 = (_DWORD *)(v98 + (v1204 * v96));
            int v1206 = v1197 + v1204;
            while (1)
            {
              int v1207 = *(_DWORD *)((char *)v1205 + v1203) >> v1199;
              if (((*(double *)&a3[8 * (*v1205 & v1198)] <= *(double *)((char *)v1205 + v96 - 8)) ^ ((v1207 & 8) >> 3))) {
                break;
              }
              int v1209 = (*(_DWORD *)((char *)v1205 + v1202) >> v1200) & v1201;
              if ((v1207 & 2) != 0)
              {
                unsigned int v1210 = (v1207 & 1) + v1206 + v1209;
                goto LABEL_1198;
              }
              uint64_t v1208 = (v1209 * v96);
LABEL_1196:
              v1205 = (_DWORD *)((char *)v1205 + v1208);
            }
            uint64_t v1208 = v96;
            if ((v1207 & 1) == 0) {
              goto LABEL_1196;
            }
            unsigned int v1210 = ((*(_DWORD *)((char *)v1205 + v1202) >> v1200) & v1201) + v1206;
LABEL_1198:
            unint64_t v1211 = v385 * (unint64_t)v1210;
            unint64_t v1212 = *(void *)(v386 + (v1211 >> 3));
            uint64_t v1213 = (v1212 >> (v1211 & 7)) & ~(-1 << v385);
            if (v385 == 64) {
              uint64_t v1213 = v1212;
            }
            *((double *)this + v1213) = *(double *)(v390 + 8 * v1210) + *((double *)this + v1213);
            unint64_t v1197 = (v1197 + 1);
            if (v104 <= v1197) {
              goto LABEL_1843;
            }
          }
        case 2:
          if (!v104) {
            goto LABEL_1843;
          }
          unint64_t v1065 = 0;
          int v1066 = ~(-1 << SBYTE6(v2212));
          char v1067 = BYTE6(v2212) & 7;
          char v1068 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1069 = ~(-1 << SBYTE8(v2212));
          unint64_t v1070 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1071 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            int v1072 = (*(void *)(v105 + ((v1065 * (unint64_t)v102) >> 3)) >> ((v1065 * (_BYTE)v102) & 7)) & ~(-1 << (char)v102);
            if (v102 == 64) {
              int v1072 = *(void *)(v105 + ((v1065 * (unint64_t)v102) >> 3));
            }
            v1073 = (_DWORD *)(v98 + (v1072 * v96));
            int v1074 = v1065 + v1072;
            while (1)
            {
              int v1075 = *(_DWORD *)((char *)v1073 + v1071) >> v1067;
              if (((*(double *)&a3[8 * (*v1073 & v1066)] >= *(double *)((char *)v1073 + v96 - 8)) ^ ((v1075 & 8) >> 3))) {
                break;
              }
              uint64_t v1077 = v96;
              if (v1075)
              {
                unsigned int v1078 = ((*(_DWORD *)((char *)v1073 + v1070) >> v1068) & v1069) + v1074;
                goto LABEL_1052;
              }
LABEL_1049:
              v1073 = (_DWORD *)((char *)v1073 + v1077);
            }
            int v1076 = (*(_DWORD *)((char *)v1073 + v1070) >> v1068) & v1069;
            if ((v1075 & 2) == 0) {
              break;
            }
            unsigned int v1078 = (v1075 & 1) + v1074 + v1076;
LABEL_1052:
            unint64_t v1079 = v385 * (unint64_t)v1078;
            unint64_t v1080 = *(void *)(v386 + (v1079 >> 3));
            uint64_t v1081 = (v1080 >> (v1079 & 7)) & ~(-1 << v385);
            if (v385 == 64) {
              uint64_t v1081 = v1080;
            }
            *((double *)this + v1081) = *(double *)(v390 + 8 * v1078) + *((double *)this + v1081);
            unint64_t v1065 = (v1065 + 1);
            if (v104 <= v1065) {
              goto LABEL_1843;
            }
          }
          uint64_t v1077 = (v1076 * v96);
          goto LABEL_1049;
        case 3:
          if (!v104) {
            goto LABEL_1843;
          }
          unint64_t v1136 = 0;
          int v1137 = ~(-1 << SBYTE6(v2212));
          char v1138 = BYTE6(v2212) & 7;
          char v1139 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1140 = ~(-1 << SBYTE8(v2212));
          unint64_t v1141 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1142 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            int v1143 = (*(void *)(v105 + ((v1136 * (unint64_t)v102) >> 3)) >> ((v1136 * (_BYTE)v102) & 7)) & ~(-1 << (char)v102);
            if (v102 == 64) {
              int v1143 = *(void *)(v105 + ((v1136 * (unint64_t)v102) >> 3));
            }
            v1144 = (_DWORD *)(v98 + (v1143 * v96));
            int v1145 = v1136 + v1143;
            while (1)
            {
              int v1146 = *(_DWORD *)((char *)v1144 + v1142) >> v1138;
              if (((*(double *)&a3[8 * (*v1144 & v1137)] < *(double *)((char *)v1144 + v96 - 8)) ^ ((v1146 & 8) >> 3))) {
                break;
              }
              int v1148 = (*(_DWORD *)((char *)v1144 + v1141) >> v1139) & v1140;
              if ((v1146 & 2) != 0)
              {
                unsigned int v1149 = (v1146 & 1) + v1145 + v1148;
                goto LABEL_1133;
              }
              uint64_t v1147 = (v1148 * v96);
LABEL_1131:
              v1144 = (_DWORD *)((char *)v1144 + v1147);
            }
            uint64_t v1147 = v96;
            if ((v1146 & 1) == 0) {
              goto LABEL_1131;
            }
            unsigned int v1149 = ((*(_DWORD *)((char *)v1144 + v1141) >> v1139) & v1140) + v1145;
LABEL_1133:
            unint64_t v1150 = v385 * (unint64_t)v1149;
            unint64_t v1151 = *(void *)(v386 + (v1150 >> 3));
            uint64_t v1152 = (v1151 >> (v1150 & 7)) & ~(-1 << v385);
            if (v385 == 64) {
              uint64_t v1152 = v1151;
            }
            *((double *)this + v1152) = *(double *)(v390 + 8 * v1149) + *((double *)this + v1152);
            unint64_t v1136 = (v1136 + 1);
            if (v104 <= v1136) {
              goto LABEL_1843;
            }
          }
        case 4:
          if (!v104) {
            goto LABEL_1843;
          }
          unint64_t v1017 = 0;
          int v1018 = ~(-1 << SBYTE6(v2212));
          char v1019 = BYTE6(v2212) & 7;
          char v1020 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1021 = ~(-1 << SBYTE8(v2212));
          unint64_t v1022 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1023 = (unint64_t)BYTE6(v2212) >> 3;
          break;
        default:
          goto LABEL_1843;
      }
LABEL_981:
      int v1024 = (*(void *)(v105 + ((v1017 * (unint64_t)v102) >> 3)) >> ((v1017 * (_BYTE)v102) & 7)) & ~(-1 << (char)v102);
      if (v102 == 64) {
        int v1024 = *(void *)(v105 + ((v1017 * (unint64_t)v102) >> 3));
      }
      v1025 = (_DWORD *)(v98 + (v1024 * v96));
      int v1026 = v1017 + v1024;
      while (1)
      {
        unsigned int v1027 = *(_DWORD *)((char *)v1025 + v1023) >> v1019;
        double v1028 = *(double *)&a3[8 * (*v1025 & v1018)];
        double v1029 = *(double *)((char *)v1025 + v96 - 8);
        switch((v1027 >> 3) & 7)
        {
          case 0u:
            if (v1028 > v1029) {
              goto LABEL_988;
            }
            goto LABEL_997;
          case 1u:
            if (v1028 < v1029) {
              goto LABEL_997;
            }
            goto LABEL_988;
          case 2u:
            if (v1028 >= v1029) {
              goto LABEL_997;
            }
            goto LABEL_988;
          case 3u:
            if (v1028 > v1029) {
              goto LABEL_997;
            }
            goto LABEL_988;
          case 4u:
            if (v1028 != v1029) {
              goto LABEL_988;
            }
            goto LABEL_997;
          case 5u:
            if (v1028 != v1029) {
              goto LABEL_997;
            }
LABEL_988:
            int v1030 = (*(_DWORD *)((char *)v1025 + v1022) >> v1020) & v1021;
            if ((v1027 & 2) != 0)
            {
              unsigned int v1032 = ((*(_DWORD *)((char *)v1025 + v1023) >> v1019) & 1) + v1026 + v1030;
LABEL_1001:
              unint64_t v1033 = v385 * (unint64_t)v1032;
              unint64_t v1034 = *(void *)(v386 + (v1033 >> 3));
              uint64_t v1035 = (v1034 >> (v1033 & 7)) & ~(-1 << v385);
              if (v385 == 64) {
                uint64_t v1035 = v1034;
              }
              *((double *)this + v1035) = *(double *)(v390 + 8 * v1032) + *((double *)this + v1035);
              unint64_t v1017 = (v1017 + 1);
              if (v104 <= v1017) {
                goto LABEL_1843;
              }
              goto LABEL_981;
            }
            uint64_t v1031 = (v1030 * v96);
LABEL_998:
            v1025 = (_DWORD *)((char *)v1025 + v1031);
            break;
          default:
LABEL_997:
            uint64_t v1031 = v96;
            if ((v1027 & 1) == 0) {
              goto LABEL_998;
            }
            unsigned int v1032 = ((*(_DWORD *)((char *)v1025 + v1022) >> v1020) & v1021) + v1026;
            goto LABEL_1001;
        }
      }
    case 0xD:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v121 = *((void *)a2 + 2);
      v122 = a2 + 3;
      uint64_t v2210 = v121;
      v2211 = i3 + 3;
      uint64_t v123 = (uint64_t)&i3[v121 + 3];
      long long v124 = *(_OWORD *)(v123 + 16);
      long long v2212 = *(_OWORD *)v123;
      long long v2213 = v124;
      uint64_t v125 = WORD2(v2212);
      unint64_t v126 = *(void *)(v123 + 32);
      uint64_t v127 = v123 + 40;
      unint64_t v2214 = v126 / WORD2(v2212);
      v2215 = (void *)(v123 + 40);
      if (v126 != v2214 * WORD2(v2212))
      {
        v2166 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2166, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2166, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v128 = v127 + v126;
      uint64_t v129 = 8 - (v128 & 7);
      if ((v128 & 7) == 0) {
        uint64_t v129 = 0;
      }
      uint64_t v130 = v128 + v129;
      uint64_t v131 = *(unsigned int *)(v130 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v130;
      HIDWORD(v2216[0]) = v131;
      long long v132 = *(_OWORD *)(v130 + 8);
      *(_OWORD *)&v2216[1] = v132;
      if ((void)v132)
      {
        id v133 = (CoreML::Archiver::MMappedContentManager *)(v130 + 32);
        v2216[2] = *(void *)(v130 + 24);
        v2216[3] = v130 + 32;
        uint64_t v134 = v130 + 32 + 8 * v2216[2];
      }
      else
      {
        id v133 = 0;
        uint64_t v134 = v130 + 24;
      }
      if ((v134 & 7) != 0) {
        uint64_t v134 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      LODWORD(v2220) = *(_DWORD *)v134;
      unsigned int v459 = *(_DWORD *)(v134 + 4);
      DWORD1(v2220) = v459;
      *((void *)&v2220 + 1) = *(void *)(v134 + 8);
      *(void *)&long long v2221 = *(void *)(v134 + 16);
      if (*((void *)&v2220 + 1))
      {
        uint64_t v460 = v134 + 32;
        *(void *)&long long v2221 = *(void *)(v134 + 24);
        *((void *)&v2221 + 1) = v134 + 32;
        uint64_t v461 = v134 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v460 = 0;
        uint64_t v461 = v134 + 24;
      }
      v2196 = (CoreML::Archiver::MMappedContentManager *)v132;
      uint64_t v462 = 8 - (v461 & 7);
      if ((v461 & 7) == 0) {
        uint64_t v462 = 0;
      }
      uint64_t v464 = v461 + v462 + 8;
      uint64_t v463 = *(void *)(v461 + v462);
      uint64_t v465 = v464 + 8 * v463;
      uint64_t v2230 = v463;
      uint64_t v2231 = v464;
      if ((v465 & 7) != 0) {
        uint64_t v466 = 8 - (v465 & 7);
      }
      else {
        uint64_t v466 = 0;
      }
      uint64_t v467 = v465 + v466;
      LODWORD(v2225) = *(_DWORD *)v467;
      uint64_t v468 = *(unsigned int *)(v467 + 4);
      DWORD1(v2225) = *(_DWORD *)(v467 + 4);
      *((void *)&v2225 + 1) = *(void *)(v467 + 8);
      *(void *)&long long v2226 = *(void *)(v467 + 16);
      v2191 = v133;
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v467 + 24);
        *((void *)&v2226 + 1) = v467 + 32;
        uint64_t v469 = v467 + 32;
        uint64_t v470 = v467 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v469 = 0;
        uint64_t v470 = v467 + 24;
      }
      uint64_t v471 = 8 - (v470 & 7);
      if ((v470 & 7) == 0) {
        uint64_t v471 = 0;
      }
      int v2180 = *(_DWORD *)(v470 + v471);
      int v2232 = v2180;
      if (v121) {
        memmove(this, v122, 8 * v121);
      }
      v2200 = (CoreML::Archiver::MMappedContentManager *)v121;
      switch(BYTE13(v2212))
      {
        case 0:
          if (!v2196) {
            goto LABEL_1457;
          }
          unint64_t v472 = 0;
          int v473 = ~(-1 << SBYTE6(v2212));
          char v474 = BYTE6(v2212) & 7;
          char v475 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v476 = ~(-1 << SBYTE8(v2212));
          unint64_t v477 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v478 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v479 = (1 << (BYTE11(v2212) - 1));
          uint64_t v480 = ~(-1 << v459);
          int v481 = ~v479;
          while (1)
          {
            int v482 = (*(void *)((char *)v2191 + ((v472 * v131) >> 3)) >> ((v472 * v131) & 7)) & ~(-1 << v131);
            if (v131 == 64) {
              int v482 = *(void *)((char *)v2191 + ((v472 * v131) >> 3));
            }
            char v483 = (_DWORD *)(v127 + (v482 * v125));
            int v484 = (*(void *)(v469 + ((v472 * v468) >> 3)) >> ((v472 * v468) & 7)) & ~(-1 << v468);
            if (v468 == 64) {
              int v484 = *(void *)(v469 + ((v472 * v468) >> 3));
            }
            while (1)
            {
              int v485 = *(_DWORD *)((char *)v483 + v478) >> v474;
              if (((*(double *)&a3[8 * (*v483 & v473)] > *(double *)((char *)v483 + v125 - 8)) ^ ((v485 & 8) >> 3))) {
                break;
              }
              uint64_t v487 = v125;
              if (v485)
              {
                unsigned int v495 = ((*(_DWORD *)((char *)v483 + v477) >> v475) & v476) + v484;
                do
                {
                  unint64_t v496 = v459 * (unint64_t)v495;
                  unint64_t v497 = *(void *)(v460 + (v496 >> 3));
                  uint64_t v498 = (v497 >> (v496 & 7)) & v480;
                  if (v459 == 64) {
                    uint64_t v498 = v497;
                  }
                  *((double *)this + (v498 & v481)) = *(double *)(v464 + 8 * v495++)
                                                                  + *((double *)this + (v498 & v481));
                }
                while ((v498 & v479) == 0);
                goto LABEL_388;
              }
LABEL_375:
              char v483 = (_DWORD *)((char *)v483 + v487);
            }
            int v486 = (*(_DWORD *)((char *)v483 + v477) >> v475) & v476;
            if ((v485 & 2) == 0) {
              break;
            }
            unsigned int v488 = v486 + v484;
            if (v485)
            {
              do
              {
                unint64_t v489 = v459 * (unint64_t)v488;
                unint64_t v490 = *(void *)(v460 + (v489 >> 3));
                unint64_t v491 = (v490 >> (v489 & 7)) & v480;
                if (v459 == 64) {
                  unint64_t v491 = v490;
                }
                ++v488;
              }
              while ((v491 & v479) == 0);
            }
            do
            {
              unint64_t v492 = v459 * (unint64_t)v488;
              unint64_t v493 = *(void *)(v460 + (v492 >> 3));
              uint64_t v494 = (v493 >> (v492 & 7)) & v480;
              if (v459 == 64) {
                uint64_t v494 = v493;
              }
              *((double *)this + (v494 & v481)) = *(double *)(v464 + 8 * v488++)
                                                              + *((double *)this + (v494 & v481));
            }
            while ((v494 & v479) == 0);
LABEL_388:
            unint64_t v472 = (v472 + 1);
            if ((unint64_t)v2196 <= v472) {
              goto LABEL_1457;
            }
          }
          uint64_t v487 = (v486 * v125);
          goto LABEL_375;
        case 1:
          if (!v2196) {
            goto LABEL_1457;
          }
          unint64_t v1436 = 0;
          int v1437 = ~(-1 << SBYTE6(v2212));
          char v1438 = BYTE6(v2212) & 7;
          char v1439 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1440 = ~(-1 << SBYTE8(v2212));
          unint64_t v1441 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1442 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v1443 = (1 << (BYTE11(v2212) - 1));
          uint64_t v1444 = ~(-1 << v459);
          int v1445 = ~v1443;
          while (1)
          {
            int v1446 = (*(void *)((char *)v2191 + ((v1436 * v131) >> 3)) >> ((v1436 * v131) & 7)) & ~(-1 << v131);
            if (v131 == 64) {
              int v1446 = *(void *)((char *)v2191 + ((v1436 * v131) >> 3));
            }
            v1447 = (_DWORD *)(v127 + (v1446 * v125));
            int v1448 = (*(void *)(v469 + ((v1436 * v468) >> 3)) >> ((v1436 * v468) & 7)) & ~(-1 << v468);
            if (v468 == 64) {
              int v1448 = *(void *)(v469 + ((v1436 * v468) >> 3));
            }
            while (1)
            {
              int v1449 = *(_DWORD *)((char *)v1447 + v1442) >> v1438;
              if (((*(double *)&a3[8 * (*v1447 & v1437)] <= *(double *)((char *)v1447 + v125 - 8)) ^ ((v1449 & 8) >> 3))) {
                break;
              }
              int v1451 = (*(_DWORD *)((char *)v1447 + v1441) >> v1439) & v1440;
              if ((v1449 & 2) != 0)
              {
                unsigned int v1456 = v1451 + v1448;
                if (v1449)
                {
                  do
                  {
                    unint64_t v1457 = v459 * (unint64_t)v1456;
                    unint64_t v1458 = *(void *)(v460 + (v1457 >> 3));
                    unint64_t v1459 = (v1458 >> (v1457 & 7)) & v1444;
                    if (v459 == 64) {
                      unint64_t v1459 = v1458;
                    }
                    ++v1456;
                  }
                  while ((v1459 & v1443) == 0);
                }
                do
                {
                  unint64_t v1460 = v459 * (unint64_t)v1456;
                  unint64_t v1461 = *(void *)(v460 + (v1460 >> 3));
                  uint64_t v1462 = (v1461 >> (v1460 & 7)) & v1444;
                  if (v459 == 64) {
                    uint64_t v1462 = v1461;
                  }
                  *((double *)this + (v1462 & v1445)) = *(double *)(v464 + 8 * v1456++)
                                                                    + *((double *)this + (v1462 & v1445));
                }
                while ((v1462 & v1443) == 0);
                goto LABEL_1456;
              }
              uint64_t v1450 = (v1451 * v125);
LABEL_1444:
              v1447 = (_DWORD *)((char *)v1447 + v1450);
            }
            uint64_t v1450 = v125;
            if ((v1449 & 1) == 0) {
              goto LABEL_1444;
            }
            unsigned int v1452 = ((*(_DWORD *)((char *)v1447 + v1441) >> v1439) & v1440) + v1448;
            do
            {
              unint64_t v1453 = v459 * (unint64_t)v1452;
              unint64_t v1454 = *(void *)(v460 + (v1453 >> 3));
              uint64_t v1455 = (v1454 >> (v1453 & 7)) & v1444;
              if (v459 == 64) {
                uint64_t v1455 = v1454;
              }
              *((double *)this + (v1455 & v1445)) = *(double *)(v464 + 8 * v1452++)
                                                                + *((double *)this + (v1455 & v1445));
            }
            while ((v1455 & v1443) == 0);
LABEL_1456:
            unint64_t v1436 = (v1436 + 1);
            if ((unint64_t)v2196 <= v1436) {
              goto LABEL_1457;
            }
          }
        case 2:
          if (!v2196) {
            goto LABEL_1457;
          }
          unint64_t v1214 = 0;
          int v1215 = ~(-1 << SBYTE6(v2212));
          char v1216 = BYTE6(v2212) & 7;
          char v1217 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1218 = ~(-1 << SBYTE8(v2212));
          unint64_t v1219 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1220 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v1221 = (1 << (BYTE11(v2212) - 1));
          uint64_t v1222 = ~(-1 << v459);
          int v1223 = ~v1221;
          while (1)
          {
            int v1224 = (*(void *)((char *)v2191 + ((v1214 * v131) >> 3)) >> ((v1214 * v131) & 7)) & ~(-1 << v131);
            if (v131 == 64) {
              int v1224 = *(void *)((char *)v2191 + ((v1214 * v131) >> 3));
            }
            v1225 = (_DWORD *)(v127 + (v1224 * v125));
            int v1226 = (*(void *)(v469 + ((v1214 * v468) >> 3)) >> ((v1214 * v468) & 7)) & ~(-1 << v468);
            if (v468 == 64) {
              int v1226 = *(void *)(v469 + ((v1214 * v468) >> 3));
            }
            while (1)
            {
              int v1227 = *(_DWORD *)((char *)v1225 + v1220) >> v1216;
              if (((*(double *)&a3[8 * (*v1225 & v1215)] >= *(double *)((char *)v1225 + v125 - 8)) ^ ((v1227 & 8) >> 3))) {
                break;
              }
              uint64_t v1229 = v125;
              if (v1227)
              {
                unsigned int v1237 = ((*(_DWORD *)((char *)v1225 + v1219) >> v1217) & v1218) + v1226;
                do
                {
                  unint64_t v1238 = v459 * (unint64_t)v1237;
                  unint64_t v1239 = *(void *)(v460 + (v1238 >> 3));
                  uint64_t v1240 = (v1239 >> (v1238 & 7)) & v1222;
                  if (v459 == 64) {
                    uint64_t v1240 = v1239;
                  }
                  *((double *)this + (v1240 & v1223)) = *(double *)(v464 + 8 * v1237++)
                                                                    + *((double *)this + (v1240 & v1223));
                }
                while ((v1240 & v1221) == 0);
                goto LABEL_1225;
              }
LABEL_1212:
              v1225 = (_DWORD *)((char *)v1225 + v1229);
            }
            int v1228 = (*(_DWORD *)((char *)v1225 + v1219) >> v1217) & v1218;
            if ((v1227 & 2) == 0) {
              break;
            }
            unsigned int v1230 = v1228 + v1226;
            if (v1227)
            {
              do
              {
                unint64_t v1231 = v459 * (unint64_t)v1230;
                unint64_t v1232 = *(void *)(v460 + (v1231 >> 3));
                unint64_t v1233 = (v1232 >> (v1231 & 7)) & v1222;
                if (v459 == 64) {
                  unint64_t v1233 = v1232;
                }
                ++v1230;
              }
              while ((v1233 & v1221) == 0);
            }
            do
            {
              unint64_t v1234 = v459 * (unint64_t)v1230;
              unint64_t v1235 = *(void *)(v460 + (v1234 >> 3));
              uint64_t v1236 = (v1235 >> (v1234 & 7)) & v1222;
              if (v459 == 64) {
                uint64_t v1236 = v1235;
              }
              *((double *)this + (v1236 & v1223)) = *(double *)(v464 + 8 * v1230++)
                                                                + *((double *)this + (v1236 & v1223));
            }
            while ((v1236 & v1221) == 0);
LABEL_1225:
            unint64_t v1214 = (v1214 + 1);
            if ((unint64_t)v2196 <= v1214) {
              goto LABEL_1457;
            }
          }
          uint64_t v1229 = (v1228 * v125);
          goto LABEL_1212;
        case 3:
          if (!v2196) {
            goto LABEL_1457;
          }
          unint64_t v1344 = 0;
          int v1345 = ~(-1 << SBYTE6(v2212));
          char v1346 = BYTE6(v2212) & 7;
          char v1347 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1348 = ~(-1 << SBYTE8(v2212));
          unint64_t v1349 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1350 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v1351 = (1 << (BYTE11(v2212) - 1));
          uint64_t v1352 = ~(-1 << v459);
          int v1353 = ~v1351;
          while (1)
          {
            int v1354 = (*(void *)((char *)v2191 + ((v1344 * v131) >> 3)) >> ((v1344 * v131) & 7)) & ~(-1 << v131);
            if (v131 == 64) {
              int v1354 = *(void *)((char *)v2191 + ((v1344 * v131) >> 3));
            }
            v1355 = (_DWORD *)(v127 + (v1354 * v125));
            int v1356 = (*(void *)(v469 + ((v1344 * v468) >> 3)) >> ((v1344 * v468) & 7)) & ~(-1 << v468);
            if (v468 == 64) {
              int v1356 = *(void *)(v469 + ((v1344 * v468) >> 3));
            }
            while (1)
            {
              int v1357 = *(_DWORD *)((char *)v1355 + v1350) >> v1346;
              if (((*(double *)&a3[8 * (*v1355 & v1345)] < *(double *)((char *)v1355 + v125 - 8)) ^ ((v1357 & 8) >> 3))) {
                break;
              }
              int v1359 = (*(_DWORD *)((char *)v1355 + v1349) >> v1347) & v1348;
              if ((v1357 & 2) != 0)
              {
                unsigned int v1364 = v1359 + v1356;
                if (v1357)
                {
                  do
                  {
                    unint64_t v1365 = v459 * (unint64_t)v1364;
                    unint64_t v1366 = *(void *)(v460 + (v1365 >> 3));
                    unint64_t v1367 = (v1366 >> (v1365 & 7)) & v1352;
                    if (v459 == 64) {
                      unint64_t v1367 = v1366;
                    }
                    ++v1364;
                  }
                  while ((v1367 & v1351) == 0);
                }
                do
                {
                  unint64_t v1368 = v459 * (unint64_t)v1364;
                  unint64_t v1369 = *(void *)(v460 + (v1368 >> 3));
                  uint64_t v1370 = (v1369 >> (v1368 & 7)) & v1352;
                  if (v459 == 64) {
                    uint64_t v1370 = v1369;
                  }
                  *((double *)this + (v1370 & v1353)) = *(double *)(v464 + 8 * v1364++)
                                                                    + *((double *)this + (v1370 & v1353));
                }
                while ((v1370 & v1351) == 0);
                goto LABEL_1372;
              }
              uint64_t v1358 = (v1359 * v125);
LABEL_1360:
              v1355 = (_DWORD *)((char *)v1355 + v1358);
            }
            uint64_t v1358 = v125;
            if ((v1357 & 1) == 0) {
              goto LABEL_1360;
            }
            unsigned int v1360 = ((*(_DWORD *)((char *)v1355 + v1349) >> v1347) & v1348) + v1356;
            do
            {
              unint64_t v1361 = v459 * (unint64_t)v1360;
              unint64_t v1362 = *(void *)(v460 + (v1361 >> 3));
              uint64_t v1363 = (v1362 >> (v1361 & 7)) & v1352;
              if (v459 == 64) {
                uint64_t v1363 = v1362;
              }
              *((double *)this + (v1363 & v1353)) = *(double *)(v464 + 8 * v1360++)
                                                                + *((double *)this + (v1363 & v1353));
            }
            while ((v1363 & v1351) == 0);
LABEL_1372:
            unint64_t v1344 = (v1344 + 1);
            if ((unint64_t)v2196 <= v1344) {
              goto LABEL_1457;
            }
          }
        case 4:
          if (!v2196) {
            goto LABEL_1457;
          }
          unint64_t v1082 = 0;
          int v1083 = ~(-1 << SBYTE6(v2212));
          char v1084 = BYTE6(v2212) & 7;
          char v1085 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1086 = ~(-1 << SBYTE8(v2212));
          unint64_t v1087 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1088 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v1089 = (1 << (BYTE11(v2212) - 1));
          uint64_t v1090 = ~(-1 << v459);
          int v1091 = ~v1089;
          break;
        default:
          goto LABEL_1457;
      }
LABEL_1058:
      int v1092 = (*(void *)((char *)v2191 + ((v1082 * v131) >> 3)) >> ((v1082 * v131) & 7)) & ~(-1 << v131);
      if (v131 == 64) {
        int v1092 = *(void *)((char *)v2191 + ((v1082 * v131) >> 3));
      }
      unint64_t v1093 = *(void *)(v469 + ((v1082 * v468) >> 3));
      v1094 = (_DWORD *)(v127 + (v1092 * v125));
      if (v468 != 64) {
        LODWORD(v1093) = (v1093 >> ((v1082 * v468) & 7)) & ~(-1 << v468);
      }
      while (1)
      {
        unsigned int v1095 = *(_DWORD *)((char *)v1094 + v1088) >> v1084;
        double v1096 = *(double *)&a3[8 * (*v1094 & v1083)];
        double v1097 = *(double *)((char *)v1094 + v125 - 8);
        switch((v1095 >> 3) & 7)
        {
          case 0u:
            if (v1096 > v1097) {
              goto LABEL_1066;
            }
            goto LABEL_1075;
          case 1u:
            if (v1096 < v1097) {
              goto LABEL_1075;
            }
            goto LABEL_1066;
          case 2u:
            if (v1096 >= v1097) {
              goto LABEL_1075;
            }
            goto LABEL_1066;
          case 3u:
            if (v1096 > v1097) {
              goto LABEL_1075;
            }
            goto LABEL_1066;
          case 4u:
            if (v1096 != v1097) {
              goto LABEL_1066;
            }
            goto LABEL_1075;
          case 5u:
            if (v1096 != v1097) {
              goto LABEL_1075;
            }
LABEL_1066:
            int v1098 = (*(_DWORD *)((char *)v1094 + v1087) >> v1085) & v1086;
            if ((v1095 & 2) != 0)
            {
              unsigned int v1104 = v1098 + v1093;
              if (v1095)
              {
                do
                {
                  unint64_t v1105 = v459 * (unint64_t)v1104;
                  unint64_t v1106 = *(void *)(v460 + (v1105 >> 3));
                  unint64_t v1107 = (v1106 >> (v1105 & 7)) & v1090;
                  if (v459 == 64) {
                    unint64_t v1107 = v1106;
                  }
                  ++v1104;
                }
                while ((v1107 & v1089) == 0);
              }
              do
              {
                unint64_t v1108 = v459 * (unint64_t)v1104;
                unint64_t v1109 = *(void *)(v460 + (v1108 >> 3));
                uint64_t v1110 = (v1109 >> (v1108 & 7)) & v1090;
                if (v459 == 64) {
                  uint64_t v1110 = v1109;
                }
                *((double *)this + (v1110 & v1091)) = *(double *)(v464 + 8 * v1104++)
                                                                  + *((double *)this + (v1110 & v1091));
              }
              while ((v1110 & v1089) == 0);
LABEL_1089:
              unint64_t v1082 = (v1082 + 1);
              if ((unint64_t)v2196 <= v1082) {
                goto LABEL_1457;
              }
              goto LABEL_1058;
            }
            uint64_t v1099 = (v1098 * v125);
LABEL_1076:
            v1094 = (_DWORD *)((char *)v1094 + v1099);
            break;
          default:
LABEL_1075:
            uint64_t v1099 = v125;
            if ((v1095 & 1) == 0) {
              goto LABEL_1076;
            }
            unsigned int v1100 = ((*(_DWORD *)((char *)v1094 + v1087) >> v1085) & v1086) + v1093;
            do
            {
              unint64_t v1101 = v459 * (unint64_t)v1100;
              unint64_t v1102 = *(void *)(v460 + (v1101 >> 3));
              uint64_t v1103 = (v1102 >> (v1101 & 7)) & v1090;
              if (v459 == 64) {
                uint64_t v1103 = v1102;
              }
              *((double *)this + (v1103 & v1091)) = *(double *)(v464 + 8 * v1100++)
                                                                + *((double *)this + (v1103 & v1091));
            }
            while ((v1103 & v1089) == 0);
            goto LABEL_1089;
        }
      }
    case 0xE:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v78 = *((void *)a2 + 2);
      int v267 = a2 + 3;
      uint64_t v2210 = v78;
      v2211 = i3 + 3;
      uint64_t v268 = (uint64_t)&i3[v78 + 3];
      long long v269 = *(_OWORD *)(v268 + 16);
      long long v2212 = *(_OWORD *)v268;
      long long v2213 = v269;
      uint64_t v270 = WORD2(v2212);
      unint64_t v271 = *(void *)(v268 + 32);
      uint64_t v272 = v268 + 40;
      unint64_t v2214 = v271 / WORD2(v2212);
      v2215 = (void *)(v268 + 40);
      if (v271 != v2214 * WORD2(v2212))
      {
        v2174 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2174, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2174, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v273 = v272 + v271;
      uint64_t v274 = 8 - (v273 & 7);
      if ((v273 & 7) == 0) {
        uint64_t v274 = 0;
      }
      uint64_t v275 = v273 + v274;
      uint64_t v276 = *(unsigned int *)(v275 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v275;
      HIDWORD(v2216[0]) = v276;
      *(_OWORD *)&v2216[1] = *(_OWORD *)(v275 + 8);
      unint64_t v277 = v2216[1];
      if (v2216[1])
      {
        uint64_t v278 = v275 + 32;
        v2216[2] = *(void *)(v275 + 24);
        v2216[3] = v275 + 32;
        uint64_t v279 = v275 + 32 + 8 * v2216[2];
      }
      else
      {
        uint64_t v278 = 0;
        uint64_t v279 = v275 + 24;
      }
      if ((v279 & 7) != 0) {
        uint64_t v279 = (v279 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      long long v2220 = *(_OWORD *)v279;
      *(void *)&long long v2221 = *(void *)(v279 + 16);
      if (*((void *)&v2220 + 1))
      {
        *(void *)&long long v2221 = *(void *)(v279 + 24);
        *((void *)&v2221 + 1) = v279 + 32;
        uint64_t v717 = v279 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v717 = v279 + 24;
      }
      uint64_t v718 = 8 - (v717 & 7);
      if ((v717 & 7) == 0) {
        uint64_t v718 = 0;
      }
      uint64_t v720 = v717 + v718 + 8;
      uint64_t v719 = *(void *)(v717 + v718);
      uint64_t v721 = v720 + 8 * v719;
      uint64_t v2230 = v719;
      uint64_t v2231 = v720;
      if ((v721 & 7) != 0) {
        uint64_t v722 = 8 - (v721 & 7);
      }
      else {
        uint64_t v722 = 0;
      }
      uint64_t v723 = v721 + v722;
      long long v2225 = *(_OWORD *)v723;
      *(void *)&long long v2226 = *(void *)(v723 + 16);
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v723 + 24);
        *((void *)&v2226 + 1) = v723 + 32;
        uint64_t v724 = v723 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v724 = v723 + 24;
      }
      uint64_t v725 = 8 - (v724 & 7);
      if ((v724 & 7) == 0) {
        uint64_t v725 = 0;
      }
      int v369 = *(_DWORD *)(v724 + v725);
      int v2232 = v369;
      if (v78) {
        memmove(this, v267, 8 * v78);
      }
      switch(BYTE13(v2212))
      {
        case 0:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v726 = 0;
          int v727 = ~(-1 << SBYTE6(v2212));
          char v728 = BYTE6(v2212) & 7;
          char v729 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v730 = ~(-1 << SBYTE8(v2212));
          unint64_t v731 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v732 = (unint64_t)BYTE6(v2212) >> 3;
          int v733 = DWORD2(v2213);
          uint64_t v734 = DWORD2(v2213);
          while (1)
          {
            int v735 = (*(void *)(v278 + ((v726 * v276) >> 3)) >> ((v726 * v276) & 7)) & ~(-1 << v276);
            if (v276 == 64) {
              int v735 = *(void *)(v278 + ((v726 * v276) >> 3));
            }
            for (mm = (_DWORD *)(v272 + (v735 * v270)); ; mm = (_DWORD *)((char *)mm + v739))
            {
              int v737 = *(_DWORD *)((char *)mm + v732) >> v728;
              if (((*(double *)&a3[8 * (*mm & v727)] > *(double *)((char *)mm + v270 - 8)) ^ ((v737 & 8) >> 3))) {
                break;
              }
              uint64_t v739 = v270;
              if (v737)
              {
                if (v733)
                {
                  unsigned int v743 = v733 * (((*(_DWORD *)((char *)mm + v731) >> v729) & v730) + v726 + v735);
                  int v744 = (double *)this;
                  uint64_t v745 = v734;
                  do
                  {
                    *int v744 = *(double *)(v720 + 8 * v743) + *v744;
                    ++v744;
                    ++v743;
                    --v745;
                  }
                  while (v745);
                }
                goto LABEL_680;
              }
LABEL_672:
              ;
            }
            int v738 = (*(_DWORD *)((char *)mm + v731) >> v729) & v730;
            if ((v737 & 2) == 0) {
              break;
            }
            if (v733)
            {
              unsigned int v740 = v733 * (v726 + v735 + v738 + (v737 & 1));
              unsigned int v741 = (double *)this;
              uint64_t v742 = v734;
              do
              {
                *unsigned int v741 = *(double *)(v720 + 8 * v740) + *v741;
                ++v741;
                ++v740;
                --v742;
              }
              while (v742);
            }
LABEL_680:
            unint64_t v726 = (v726 + 1);
            if (v277 <= v726) {
              goto LABEL_2139;
            }
          }
          uint64_t v739 = (v738 * v270);
          goto LABEL_672;
        case 1:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v2082 = 0;
          int v2083 = ~(-1 << SBYTE6(v2212));
          char v2084 = BYTE6(v2212) & 7;
          char v2085 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v2086 = ~(-1 << SBYTE8(v2212));
          unint64_t v2087 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v2088 = (unint64_t)BYTE6(v2212) >> 3;
          int v2089 = DWORD2(v2213);
          uint64_t v2090 = DWORD2(v2213);
          while (1)
          {
            int v2091 = (*(void *)(v278 + ((v2082 * v276) >> 3)) >> ((v2082 * v276) & 7)) & ~(-1 << v276);
            if (v276 == 64) {
              int v2091 = *(void *)(v278 + ((v2082 * v276) >> 3));
            }
            for (nn = (_DWORD *)(v272 + (v2091 * v270)); ; nn = (_DWORD *)((char *)nn + v2094))
            {
              int v2093 = *(_DWORD *)((char *)nn + v2088) >> v2084;
              if (((*(double *)&a3[8 * (*nn & v2083)] <= *(double *)((char *)nn + v270 - 8)) ^ ((v2093 & 8) >> 3))) {
                break;
              }
              int v2095 = (*(_DWORD *)((char *)nn + v2087) >> v2085) & v2086;
              if ((v2093 & 2) != 0)
              {
                if (v2089)
                {
                  unsigned int v2099 = v2089 * (v2082 + v2091 + v2095 + (v2093 & 1));
                  v2100 = (double *)this;
                  uint64_t v2101 = v2090;
                  do
                  {
                    double *v2100 = *(double *)(v720 + 8 * v2099) + *v2100;
                    ++v2100;
                    ++v2099;
                    --v2101;
                  }
                  while (v2101);
                }
                goto LABEL_2110;
              }
              uint64_t v2094 = (v2095 * v270);
LABEL_2102:
              ;
            }
            uint64_t v2094 = v270;
            if ((v2093 & 1) == 0) {
              goto LABEL_2102;
            }
            if (v2089)
            {
              unsigned int v2096 = v2089 * (((*(_DWORD *)((char *)nn + v2087) >> v2085) & v2086) + v2082 + v2091);
              v2097 = (double *)this;
              uint64_t v2098 = v2090;
              do
              {
                double *v2097 = *(double *)(v720 + 8 * v2096) + *v2097;
                ++v2097;
                ++v2096;
                --v2098;
              }
              while (v2098);
            }
LABEL_2110:
            unint64_t v2082 = (v2082 + 1);
            if (v277 <= v2082) {
              goto LABEL_2139;
            }
          }
        case 2:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v1837 = 0;
          int v1838 = ~(-1 << SBYTE6(v2212));
          char v1839 = BYTE6(v2212) & 7;
          char v1840 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1841 = ~(-1 << SBYTE8(v2212));
          unint64_t v1842 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1843 = (unint64_t)BYTE6(v2212) >> 3;
          int v1844 = DWORD2(v2213);
          uint64_t v1845 = DWORD2(v2213);
          while (1)
          {
            int v1846 = (*(void *)(v278 + ((v1837 * v276) >> 3)) >> ((v1837 * v276) & 7)) & ~(-1 << v276);
            if (v276 == 64) {
              int v1846 = *(void *)(v278 + ((v1837 * v276) >> 3));
            }
            for (i1 = (_DWORD *)(v272 + (v1846 * v270)); ; i1 = (_DWORD *)((char *)i1 + v1850))
            {
              int v1848 = *(_DWORD *)((char *)i1 + v1843) >> v1839;
              if (((*(double *)&a3[8 * (*i1 & v1838)] >= *(double *)((char *)i1 + v270 - 8)) ^ ((v1848 & 8) >> 3))) {
                break;
              }
              uint64_t v1850 = v270;
              if (v1848)
              {
                if (v1844)
                {
                  unsigned int v1854 = v1844 * (((*(_DWORD *)((char *)i1 + v1842) >> v1840) & v1841) + v1837 + v1846);
                  v1855 = (double *)this;
                  uint64_t v1856 = v1845;
                  do
                  {
                    double *v1855 = *(double *)(v720 + 8 * v1854) + *v1855;
                    ++v1855;
                    ++v1854;
                    --v1856;
                  }
                  while (v1856);
                }
                goto LABEL_1880;
              }
LABEL_1872:
              ;
            }
            int v1849 = (*(_DWORD *)((char *)i1 + v1842) >> v1840) & v1841;
            if ((v1848 & 2) == 0) {
              break;
            }
            if (v1844)
            {
              unsigned int v1851 = v1844 * (v1837 + v1846 + v1849 + (v1848 & 1));
              v1852 = (double *)this;
              uint64_t v1853 = v1845;
              do
              {
                double *v1852 = *(double *)(v720 + 8 * v1851) + *v1852;
                ++v1852;
                ++v1851;
                --v1853;
              }
              while (v1853);
            }
LABEL_1880:
            unint64_t v1837 = (v1837 + 1);
            if (v277 <= v1837) {
              goto LABEL_2139;
            }
          }
          uint64_t v1850 = (v1849 * v270);
          goto LABEL_1872;
        case 3:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v1983 = 0;
          int v1984 = ~(-1 << SBYTE6(v2212));
          char v1985 = BYTE6(v2212) & 7;
          char v1986 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1987 = ~(-1 << SBYTE8(v2212));
          unint64_t v1988 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1989 = (unint64_t)BYTE6(v2212) >> 3;
          int v1990 = DWORD2(v2213);
          uint64_t v1991 = DWORD2(v2213);
          while (1)
          {
            int v1992 = (*(void *)(v278 + ((v1983 * v276) >> 3)) >> ((v1983 * v276) & 7)) & ~(-1 << v276);
            if (v276 == 64) {
              int v1992 = *(void *)(v278 + ((v1983 * v276) >> 3));
            }
            for (i2 = (_DWORD *)(v272 + (v1992 * v270)); ; i2 = (_DWORD *)((char *)i2 + v1995))
            {
              int v1994 = *(_DWORD *)((char *)i2 + v1989) >> v1985;
              if (((*(double *)&a3[8 * (*i2 & v1984)] < *(double *)((char *)i2 + v270 - 8)) ^ ((v1994 & 8) >> 3))) {
                break;
              }
              int v1996 = (*(_DWORD *)((char *)i2 + v1988) >> v1986) & v1987;
              if ((v1994 & 2) != 0)
              {
                if (v1990)
                {
                  unsigned int v2000 = v1990 * (v1983 + v1992 + v1996 + (v1994 & 1));
                  v2001 = (double *)this;
                  uint64_t v2002 = v1991;
                  do
                  {
                    double *v2001 = *(double *)(v720 + 8 * v2000) + *v2001;
                    ++v2001;
                    ++v2000;
                    --v2002;
                  }
                  while (v2002);
                }
                goto LABEL_2015;
              }
              uint64_t v1995 = (v1996 * v270);
LABEL_2007:
              ;
            }
            uint64_t v1995 = v270;
            if ((v1994 & 1) == 0) {
              goto LABEL_2007;
            }
            if (v1990)
            {
              unsigned int v1997 = v1990 * (((*(_DWORD *)((char *)i2 + v1988) >> v1986) & v1987) + v1983 + v1992);
              v1998 = (double *)this;
              uint64_t v1999 = v1991;
              do
              {
                double *v1998 = *(double *)(v720 + 8 * v1997) + *v1998;
                ++v1998;
                ++v1997;
                --v1999;
              }
              while (v1999);
            }
LABEL_2015:
            unint64_t v1983 = (v1983 + 1);
            if (v277 <= v1983) {
              goto LABEL_2139;
            }
          }
        case 4:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          unint64_t v1627 = 0;
          int v1628 = ~(-1 << SBYTE6(v2212));
          char v1629 = BYTE6(v2212) & 7;
          char v1630 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          int v1631 = ~(-1 << SBYTE8(v2212));
          unint64_t v1632 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1633 = (unint64_t)BYTE6(v2212) >> 3;
          int v1634 = DWORD2(v2213);
          uint64_t v1635 = DWORD2(v2213);
          break;
        default:
          goto LABEL_2139;
      }
LABEL_1632:
      if (v276 == 64) {
        int v1636 = *(void *)(v278 + ((v1627 * v276) >> 3));
      }
      else {
        int v1636 = (*(void *)(v278 + ((v1627 * v276) >> 3)) >> ((v1627 * v276) & 7)) & ~(-1 << v276);
      }
      v1637 = (_DWORD *)(v272 + (v1636 * v270));
      while (1)
      {
        unsigned int v1638 = *(_DWORD *)((char *)v1637 + v1633) >> v1629;
        double v1639 = *(double *)&a3[8 * (*v1637 & v1628)];
        double v1640 = *(double *)((char *)v1637 + v270 - 8);
        switch((v1638 >> 3) & 7)
        {
          case 0u:
            if (v1639 > v1640) {
              goto LABEL_1640;
            }
            goto LABEL_1649;
          case 1u:
            if (v1639 < v1640) {
              goto LABEL_1649;
            }
            goto LABEL_1640;
          case 2u:
            if (v1639 >= v1640) {
              goto LABEL_1649;
            }
            goto LABEL_1640;
          case 3u:
            if (v1639 > v1640) {
              goto LABEL_1649;
            }
            goto LABEL_1640;
          case 4u:
            if (v1639 != v1640) {
              goto LABEL_1640;
            }
            goto LABEL_1649;
          case 5u:
            if (v1639 != v1640) {
              goto LABEL_1649;
            }
LABEL_1640:
            int v1641 = (*(_DWORD *)((char *)v1637 + v1632) >> v1630) & v1631;
            if ((v1638 & 2) != 0)
            {
              if (v1634)
              {
                unsigned int v1646 = v1634 * (v1627 + v1636 + v1641 + ((*(_DWORD *)((char *)v1637 + v1633) >> v1629) & 1));
                v1647 = (double *)this;
                uint64_t v1648 = v1635;
                do
                {
                  double *v1647 = *(double *)(v720 + 8 * v1646) + *v1647;
                  ++v1647;
                  ++v1646;
                  --v1648;
                }
                while (v1648);
              }
LABEL_1658:
              unint64_t v1627 = (v1627 + 1);
              if (v277 <= v1627) {
                goto LABEL_2139;
              }
              goto LABEL_1632;
            }
            uint64_t v1642 = (v1641 * v270);
LABEL_1650:
            v1637 = (_DWORD *)((char *)v1637 + v1642);
            break;
          default:
LABEL_1649:
            uint64_t v1642 = v270;
            if ((v1638 & 1) == 0) {
              goto LABEL_1650;
            }
            if (v1634)
            {
              unsigned int v1643 = v1634 * (((*(_DWORD *)((char *)v1637 + v1632) >> v1630) & v1631) + v1627 + v1636);
              v1644 = (double *)this;
              uint64_t v1645 = v1635;
              do
              {
                double *v1644 = *(double *)(v720 + 8 * v1643) + *v1644;
                ++v1644;
                ++v1643;
                --v1645;
              }
              while (v1645);
            }
            goto LABEL_1658;
        }
      }
    case 0xF:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v78 = *((void *)a2 + 2);
      unint64_t v79 = a2 + 3;
      uint64_t v2210 = v78;
      v2211 = i3 + 3;
      uint64_t v80 = (uint64_t)&i3[v78 + 3];
      long long v81 = *(_OWORD *)(v80 + 16);
      long long v2212 = *(_OWORD *)v80;
      long long v2213 = v81;
      uint64_t v82 = WORD2(v2212);
      unint64_t v83 = *(void *)(v80 + 32);
      uint64_t v84 = v80 + 40;
      unint64_t v2214 = v83 / WORD2(v2212);
      v2215 = (void *)(v80 + 40);
      if (v83 != v2214 * WORD2(v2212))
      {
        v2163 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2163, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2163, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v85 = v84 + v83;
      uint64_t v86 = 8 - (v85 & 7);
      if ((v85 & 7) == 0) {
        uint64_t v86 = 0;
      }
      uint64_t v87 = v85 + v86;
      uint64_t v88 = *(unsigned int *)(v87 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v87;
      HIDWORD(v2216[0]) = v88;
      *(_OWORD *)&v2216[1] = *(_OWORD *)(v87 + 8);
      uint64_t v89 = v2216[1];
      if (v2216[1])
      {
        uint64_t v90 = v87 + 32;
        v2216[2] = *(void *)(v87 + 24);
        v2216[3] = v87 + 32;
        uint64_t v91 = v87 + 32 + 8 * v2216[2];
      }
      else
      {
        uint64_t v90 = 0;
        uint64_t v91 = v87 + 24;
      }
      if ((v91 & 7) != 0) {
        uint64_t v91 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      long long v2220 = *(_OWORD *)v91;
      *(void *)&long long v2221 = *(void *)(v91 + 16);
      if (*((void *)&v2220 + 1))
      {
        *(void *)&long long v2221 = *(void *)(v91 + 24);
        *((void *)&v2221 + 1) = v91 + 32;
        uint64_t v360 = v91 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v360 = v91 + 24;
      }
      uint64_t v361 = 8 - (v360 & 7);
      if ((v360 & 7) == 0) {
        uint64_t v361 = 0;
      }
      uint64_t v363 = v360 + v361 + 8;
      uint64_t v362 = *(void *)(v360 + v361);
      uint64_t v364 = v363 + 8 * v362;
      uint64_t v2230 = v362;
      uint64_t v2231 = v363;
      if ((v364 & 7) != 0) {
        uint64_t v365 = 8 - (v364 & 7);
      }
      else {
        uint64_t v365 = 0;
      }
      uint64_t v366 = v364 + v365;
      long long v2225 = *(_OWORD *)v366;
      *(void *)&long long v2226 = *(void *)(v366 + 16);
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v366 + 24);
        *((void *)&v2226 + 1) = v366 + 32;
        uint64_t v367 = v366 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v367 = v366 + 24;
      }
      uint64_t v368 = 8 - (v367 & 7);
      if ((v367 & 7) == 0) {
        uint64_t v368 = 0;
      }
      int v369 = *(_DWORD *)(v367 + v368);
      int v2232 = v369;
      if (v78) {
        memmove(this, v79, 8 * v78);
      }
      switch(BYTE13(v2212))
      {
        case 0:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          uint64_t v370 = 0;
          uint64_t v371 = ~(-1 << SBYTE6(v2212));
          char v372 = BYTE6(v2212) & 7;
          uint64_t v373 = ~(-1 << SBYTE8(v2212));
          char v374 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v375 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v376 = (unint64_t)BYTE6(v2212) >> 3;
          double v377 = *(double *)this;
          while (1)
          {
            uint64_t v378 = (*(void *)(v90 + ((unint64_t)(v370 * v88) >> 3)) >> ((v370 * v88) & 7)) & ~(-1 << v88);
            if (v88 == 64) {
              uint64_t v378 = *(void *)(v90 + ((unint64_t)(v370 * v88) >> 3));
            }
            v379 = (void *)(v84 + v378 * v82);
            uint64_t v380 = v378 + v370;
            while (1)
            {
              int v381 = *(_DWORD *)((char *)v379 + v376) >> v372;
              if (((*(double *)&a3[8 * (*v379 & v371)] > *(double *)((char *)v379 + v82 - 8)) ^ ((v381 & 8) >> 3))) {
                break;
              }
              uint64_t v383 = v82;
              if (v381)
              {
                uint64_t v384 = ((*(void *)((char *)v379 + v375) >> v374) & v373) + v380;
                goto LABEL_265;
              }
LABEL_262:
              v379 = (void *)((char *)v379 + v383);
            }
            uint64_t v382 = (*(void *)((char *)v379 + v375) >> v374) & v373;
            if ((v381 & 2) == 0) {
              break;
            }
            uint64_t v384 = v380 + v382 + (v381 & 1);
LABEL_265:
            double v377 = v377 + *(double *)(v363 + 8 * v384);
            *(double *)this = v377;
            if (++v370 == v89) {
              goto LABEL_2139;
            }
          }
          uint64_t v383 = v382 * v82;
          goto LABEL_262;
        case 1:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          uint64_t v1002 = 0;
          uint64_t v1003 = ~(-1 << SBYTE6(v2212));
          char v1004 = BYTE6(v2212) & 7;
          uint64_t v1005 = ~(-1 << SBYTE8(v2212));
          char v1006 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1007 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1008 = (unint64_t)BYTE6(v2212) >> 3;
          double v1009 = *(double *)this;
          while (1)
          {
            uint64_t v1010 = (*(void *)(v90 + ((unint64_t)(v1002 * v88) >> 3)) >> ((v1002 * v88) & 7)) & ~(-1 << v88);
            if (v88 == 64) {
              uint64_t v1010 = *(void *)(v90 + ((unint64_t)(v1002 * v88) >> 3));
            }
            v1011 = (void *)(v84 + v1010 * v82);
            uint64_t v1012 = v1010 + v1002;
            while (1)
            {
              int v1013 = *(_DWORD *)((char *)v1011 + v1008) >> v1004;
              if (((*(double *)&a3[8 * (*v1011 & v1003)] <= *(double *)((char *)v1011 + v82 - 8)) ^ ((v1013 & 8) >> 3))) {
                break;
              }
              uint64_t v1015 = (*(void *)((char *)v1011 + v1007) >> v1006) & v1005;
              if ((v1013 & 2) != 0)
              {
                uint64_t v1016 = v1012 + v1015 + (v1013 & 1);
                goto LABEL_977;
              }
              uint64_t v1014 = v1015 * v82;
LABEL_975:
              v1011 = (void *)((char *)v1011 + v1014);
            }
            uint64_t v1014 = v82;
            if ((v1013 & 1) == 0) {
              goto LABEL_975;
            }
            uint64_t v1016 = ((*(void *)((char *)v1011 + v1007) >> v1006) & v1005) + v1012;
LABEL_977:
            double v1009 = v1009 + *(double *)(v363 + 8 * v1016);
            *(double *)this = v1009;
            if (++v1002 == v89) {
              goto LABEL_2139;
            }
          }
        case 2:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          uint64_t v972 = 0;
          uint64_t v973 = ~(-1 << SBYTE6(v2212));
          char v974 = BYTE6(v2212) & 7;
          uint64_t v975 = ~(-1 << SBYTE8(v2212));
          char v976 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v977 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v978 = (unint64_t)BYTE6(v2212) >> 3;
          double v979 = *(double *)this;
          while (1)
          {
            uint64_t v980 = (*(void *)(v90 + ((unint64_t)(v972 * v88) >> 3)) >> ((v972 * v88) & 7)) & ~(-1 << v88);
            if (v88 == 64) {
              uint64_t v980 = *(void *)(v90 + ((unint64_t)(v972 * v88) >> 3));
            }
            v981 = (void *)(v84 + v980 * v82);
            uint64_t v982 = v980 + v972;
            while (1)
            {
              int v983 = *(_DWORD *)((char *)v981 + v978) >> v974;
              if (((*(double *)&a3[8 * (*v981 & v973)] >= *(double *)((char *)v981 + v82 - 8)) ^ ((v983 & 8) >> 3))) {
                break;
              }
              uint64_t v985 = v82;
              if (v983)
              {
                uint64_t v986 = ((*(void *)((char *)v981 + v977) >> v976) & v975) + v982;
                goto LABEL_949;
              }
LABEL_946:
              v981 = (void *)((char *)v981 + v985);
            }
            uint64_t v984 = (*(void *)((char *)v981 + v977) >> v976) & v975;
            if ((v983 & 2) == 0) {
              break;
            }
            uint64_t v986 = v982 + v984 + (v983 & 1);
LABEL_949:
            double v979 = v979 + *(double *)(v363 + 8 * v986);
            *(double *)this = v979;
            if (++v972 == v89) {
              goto LABEL_2139;
            }
          }
          uint64_t v985 = v984 * v82;
          goto LABEL_946;
        case 3:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          uint64_t v987 = 0;
          uint64_t v988 = ~(-1 << SBYTE6(v2212));
          char v989 = BYTE6(v2212) & 7;
          uint64_t v990 = ~(-1 << SBYTE8(v2212));
          char v991 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v992 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v993 = (unint64_t)BYTE6(v2212) >> 3;
          double v994 = *(double *)this;
          while (1)
          {
            uint64_t v995 = (*(void *)(v90 + ((unint64_t)(v987 * v88) >> 3)) >> ((v987 * v88) & 7)) & ~(-1 << v88);
            if (v88 == 64) {
              uint64_t v995 = *(void *)(v90 + ((unint64_t)(v987 * v88) >> 3));
            }
            v996 = (void *)(v84 + v995 * v82);
            uint64_t v997 = v995 + v987;
            while (1)
            {
              int v998 = *(_DWORD *)((char *)v996 + v993) >> v989;
              if (((*(double *)&a3[8 * (*v996 & v988)] < *(double *)((char *)v996 + v82 - 8)) ^ ((v998 & 8) >> 3))) {
                break;
              }
              uint64_t v1000 = (*(void *)((char *)v996 + v992) >> v991) & v990;
              if ((v998 & 2) != 0)
              {
                uint64_t v1001 = v997 + v1000 + (v998 & 1);
                goto LABEL_963;
              }
              uint64_t v999 = v1000 * v82;
LABEL_961:
              v996 = (void *)((char *)v996 + v999);
            }
            uint64_t v999 = v82;
            if ((v998 & 1) == 0) {
              goto LABEL_961;
            }
            uint64_t v1001 = ((*(void *)((char *)v996 + v992) >> v991) & v990) + v997;
LABEL_963:
            double v994 = v994 + *(double *)(v363 + 8 * v1001);
            *(double *)this = v994;
            if (++v987 == v89) {
              goto LABEL_2139;
            }
          }
        case 4:
          if (!v2216[1]) {
            goto LABEL_2139;
          }
          uint64_t v897 = 0;
          uint64_t v898 = ~(-1 << SBYTE6(v2212));
          char v899 = BYTE6(v2212) & 7;
          uint64_t v900 = ~(-1 << SBYTE8(v2212));
          char v901 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v902 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v903 = (unint64_t)BYTE6(v2212) >> 3;
          double v904 = *(double *)this;
          break;
        default:
          goto LABEL_2139;
      }
LABEL_861:
      uint64_t v905 = (*(void *)(v90 + ((unint64_t)(v897 * v88) >> 3)) >> ((v897 * v88) & 7)) & ~(-1 << v88);
      if (v88 == 64) {
        uint64_t v905 = *(void *)(v90 + ((unint64_t)(v897 * v88) >> 3));
      }
      v906 = (void *)(v84 + v905 * v82);
      uint64_t v907 = v905 + v897;
      while (1)
      {
        unsigned int v908 = *(_DWORD *)((char *)v906 + v903) >> v899;
        double v909 = *(double *)&a3[8 * (*v906 & v898)];
        double v910 = *(double *)((char *)v906 + v82 - 8);
        switch((v908 >> 3) & 7)
        {
          case 0u:
            if (v909 > v910) {
              goto LABEL_868;
            }
            goto LABEL_877;
          case 1u:
            if (v909 < v910) {
              goto LABEL_877;
            }
            goto LABEL_868;
          case 2u:
            if (v909 >= v910) {
              goto LABEL_877;
            }
            goto LABEL_868;
          case 3u:
            if (v909 > v910) {
              goto LABEL_877;
            }
            goto LABEL_868;
          case 4u:
            if (v909 != v910) {
              goto LABEL_868;
            }
            goto LABEL_877;
          case 5u:
            if (v909 != v910) {
              goto LABEL_877;
            }
LABEL_868:
            uint64_t v911 = (*(void *)((char *)v906 + v902) >> v901) & v900;
            if ((v908 & 2) != 0)
            {
              uint64_t v913 = v907 + v911 + (v908 & 1);
LABEL_881:
              double v904 = v904 + *(double *)(v363 + 8 * v913);
              *(double *)this = v904;
              if (++v897 == v89) {
                goto LABEL_2139;
              }
              goto LABEL_861;
            }
            uint64_t v912 = v911 * v82;
LABEL_878:
            v906 = (void *)((char *)v906 + v912);
            break;
          default:
LABEL_877:
            uint64_t v912 = v82;
            if ((v908 & 1) == 0) {
              goto LABEL_878;
            }
            uint64_t v913 = ((*(void *)((char *)v906 + v902) >> v901) & v900) + v907;
            goto LABEL_881;
        }
      }
    case 0x10:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v92 = *((void *)a2 + 2);
      int v162 = a2 + 3;
      uint64_t v2210 = v92;
      v2211 = i3 + 3;
      uint64_t v163 = (uint64_t)&i3[v92 + 3];
      long long v164 = *(_OWORD *)(v163 + 16);
      long long v2212 = *(_OWORD *)v163;
      long long v2213 = v164;
      uint64_t v165 = WORD2(v2212);
      unint64_t v166 = *(void *)(v163 + 32);
      uint64_t v167 = v163 + 40;
      unint64_t v2214 = v166 / WORD2(v2212);
      v2215 = (void *)(v163 + 40);
      if (v166 != v2214 * WORD2(v2212))
      {
        v2169 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2169, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2169, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v168 = v167 + v166;
      uint64_t v169 = 8 - (v168 & 7);
      if ((v168 & 7) == 0) {
        uint64_t v169 = 0;
      }
      uint64_t v170 = v168 + v169;
      id v171 = (CoreML::Archiver::MMappedContentManager *)*(unsigned int *)(v170 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v170;
      HIDWORD(v2216[0]) = v171;
      long long v172 = *(_OWORD *)(v170 + 8);
      *(_OWORD *)&v2216[1] = v172;
      uint64_t v173 = v172;
      if ((void)v172)
      {
        uint64_t v174 = v170 + 32;
        v2216[2] = *(void *)(v170 + 24);
        v2216[3] = v170 + 32;
        uint64_t v175 = v170 + 32 + 8 * v2216[2];
      }
      else
      {
        uint64_t v174 = 0;
        uint64_t v175 = v170 + 24;
      }
      if ((v175 & 7) != 0) {
        uint64_t v175 = (v175 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      LODWORD(v2220) = *(_DWORD *)v175;
      uint64_t v558 = *(unsigned int *)(v175 + 4);
      DWORD1(v2220) = *(_DWORD *)(v175 + 4);
      *((void *)&v2220 + 1) = *(void *)(v175 + 8);
      *(void *)&long long v2221 = *(void *)(v175 + 16);
      if (*((void *)&v2220 + 1))
      {
        uint64_t v559 = v175 + 32;
        *(void *)&long long v2221 = *(void *)(v175 + 24);
        *((void *)&v2221 + 1) = v175 + 32;
        uint64_t v560 = v175 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v559 = 0;
        uint64_t v560 = v175 + 24;
      }
      uint64_t v561 = 8 - (v560 & 7);
      if ((v560 & 7) == 0) {
        uint64_t v561 = 0;
      }
      uint64_t v563 = v560 + v561 + 8;
      uint64_t v562 = *(void *)(v560 + v561);
      uint64_t v564 = v563 + 8 * v562;
      uint64_t v2230 = v562;
      uint64_t v2231 = v563;
      if ((v564 & 7) != 0) {
        uint64_t v565 = 8 - (v564 & 7);
      }
      else {
        uint64_t v565 = 0;
      }
      uint64_t v566 = v564 + v565;
      long long v2225 = *(_OWORD *)v566;
      *(void *)&long long v2226 = *(void *)(v566 + 16);
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v566 + 24);
        *((void *)&v2226 + 1) = v566 + 32;
        uint64_t v567 = v566 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v567 = v566 + 24;
      }
      uint64_t v568 = 8 - (v567 & 7);
      if ((v567 & 7) == 0) {
        uint64_t v568 = 0;
      }
      int v396 = *(_DWORD *)(v567 + v568);
      int v2232 = v396;
      if (v92)
      {
        v2186 = v171;
        uint64_t v569 = v172;
        uint64_t v570 = v167;
        int v571 = v396;
        uint64_t v572 = v559;
        uint64_t v573 = v92;
        memmove(this, v162, 8 * v92);
        uint64_t v92 = v573;
        uint64_t v559 = v572;
        int v396 = v571;
        uint64_t v167 = v570;
        uint64_t v173 = v569;
        id v171 = v2186;
      }
      switch(BYTE13(v2212))
      {
        case 0:
          if (!v173) {
            goto LABEL_1843;
          }
          uint64_t v574 = 0;
          uint64_t v575 = ~(-1 << SBYTE6(v2212));
          char v576 = BYTE6(v2212) & 7;
          uint64_t v577 = ~(-1 << SBYTE8(v2212));
          char v578 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v579 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v580 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            uint64_t v581 = (*(void *)(v174 + ((unint64_t)(v574 * (void)v171) >> 3)) >> ((v574 * (_BYTE)v171) & 7)) & ~(-1 << (char)v171);
            if (v171 == 64) {
              uint64_t v581 = *(void *)(v174 + ((unint64_t)(v574 * (void)v171) >> 3));
            }
            int v582 = (void *)(v167 + v581 * v165);
            uint64_t v583 = v581 + v574;
            while (1)
            {
              int v584 = *(_DWORD *)((char *)v582 + v580) >> v576;
              if (((*(double *)&a3[8 * (*v582 & v575)] > *(double *)((char *)v582 + v165 - 8)) ^ ((v584 & 8) >> 3))) {
                break;
              }
              uint64_t v586 = v165;
              if (v584)
              {
                uint64_t v587 = ((*(void *)((char *)v582 + v579) >> v578) & v577) + v583;
                goto LABEL_493;
              }
LABEL_490:
              int v582 = (void *)((char *)v582 + v586);
            }
            uint64_t v585 = (*(void *)((char *)v582 + v579) >> v578) & v577;
            if ((v584 & 2) == 0) {
              break;
            }
            uint64_t v587 = v583 + v585 + (v584 & 1);
LABEL_493:
            uint64_t v588 = (*(void *)(v559 + ((unint64_t)(v587 * v558) >> 3)) >> ((v587 * v558) & 7)) & ~(-1 << v558);
            if (v558 == 64) {
              uint64_t v588 = *(void *)(v559 + ((unint64_t)(v587 * v558) >> 3));
            }
            *((double *)this + v58_Block_object_dispose(&a9, 8) = *(double *)(v563 + 8 * v587) + *((double *)this + v588);
            if (++v574 == v173) {
              goto LABEL_1843;
            }
          }
          uint64_t v586 = v585 * v165;
          goto LABEL_490;
        case 1:
          if (!v173) {
            goto LABEL_1843;
          }
          uint64_t v1732 = 0;
          uint64_t v1733 = ~(-1 << SBYTE6(v2212));
          char v1734 = BYTE6(v2212) & 7;
          uint64_t v1735 = ~(-1 << SBYTE8(v2212));
          char v1736 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1737 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1738 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            uint64_t v1739 = (*(void *)(v174 + ((unint64_t)(v1732 * (void)v171) >> 3)) >> ((v1732 * (_BYTE)v171) & 7)) & ~(-1 << (char)v171);
            if (v171 == 64) {
              uint64_t v1739 = *(void *)(v174 + ((unint64_t)(v1732 * (void)v171) >> 3));
            }
            v1740 = (void *)(v167 + v1739 * v165);
            uint64_t v1741 = v1739 + v1732;
            while (1)
            {
              int v1742 = *(_DWORD *)((char *)v1740 + v1738) >> v1734;
              if (((*(double *)&a3[8 * (*v1740 & v1733)] <= *(double *)((char *)v1740 + v165 - 8)) ^ ((v1742 & 8) >> 3))) {
                break;
              }
              uint64_t v1744 = (*(void *)((char *)v1740 + v1737) >> v1736) & v1735;
              if ((v1742 & 2) != 0)
              {
                uint64_t v1745 = v1741 + v1744 + (v1742 & 1);
                goto LABEL_1773;
              }
              uint64_t v1743 = v1744 * v165;
LABEL_1771:
              v1740 = (void *)((char *)v1740 + v1743);
            }
            uint64_t v1743 = v165;
            if ((v1742 & 1) == 0) {
              goto LABEL_1771;
            }
            uint64_t v1745 = ((*(void *)((char *)v1740 + v1737) >> v1736) & v1735) + v1741;
LABEL_1773:
            uint64_t v1746 = (*(void *)(v559 + ((unint64_t)(v1745 * v558) >> 3)) >> ((v1745 * v558) & 7)) & ~(-1 << v558);
            if (v558 == 64) {
              uint64_t v1746 = *(void *)(v559 + ((unint64_t)(v1745 * v558) >> 3));
            }
            *((double *)this + v1746) = *(double *)(v563 + 8 * v1745) + *((double *)this + v1746);
            if (++v1732 == v173) {
              goto LABEL_1843;
            }
          }
        case 2:
          if (!v173) {
            goto LABEL_1843;
          }
          uint64_t v1463 = 0;
          uint64_t v1464 = ~(-1 << SBYTE6(v2212));
          char v1465 = BYTE6(v2212) & 7;
          uint64_t v1466 = ~(-1 << SBYTE8(v2212));
          char v1467 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1468 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1469 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            uint64_t v1470 = (*(void *)(v174 + ((unint64_t)(v1463 * (void)v171) >> 3)) >> ((v1463 * (_BYTE)v171) & 7)) & ~(-1 << (char)v171);
            if (v171 == 64) {
              uint64_t v1470 = *(void *)(v174 + ((unint64_t)(v1463 * (void)v171) >> 3));
            }
            v1471 = (void *)(v167 + v1470 * v165);
            uint64_t v1472 = v1470 + v1463;
            while (1)
            {
              int v1473 = *(_DWORD *)((char *)v1471 + v1469) >> v1465;
              if (((*(double *)&a3[8 * (*v1471 & v1464)] >= *(double *)((char *)v1471 + v165 - 8)) ^ ((v1473 & 8) >> 3))) {
                break;
              }
              uint64_t v1475 = v165;
              if (v1473)
              {
                uint64_t v1476 = ((*(void *)((char *)v1471 + v1468) >> v1467) & v1466) + v1472;
                goto LABEL_1470;
              }
LABEL_1467:
              v1471 = (void *)((char *)v1471 + v1475);
            }
            uint64_t v1474 = (*(void *)((char *)v1471 + v1468) >> v1467) & v1466;
            if ((v1473 & 2) == 0) {
              break;
            }
            uint64_t v1476 = v1472 + v1474 + (v1473 & 1);
LABEL_1470:
            uint64_t v1477 = (*(void *)(v559 + ((unint64_t)(v1476 * v558) >> 3)) >> ((v1476 * v558) & 7)) & ~(-1 << v558);
            if (v558 == 64) {
              uint64_t v1477 = *(void *)(v559 + ((unint64_t)(v1476 * v558) >> 3));
            }
            *((double *)this + v1477) = *(double *)(v563 + 8 * v1476) + *((double *)this + v1477);
            if (++v1463 == v173) {
              goto LABEL_1843;
            }
          }
          uint64_t v1475 = v1474 * v165;
          goto LABEL_1467;
        case 3:
          if (!v173) {
            goto LABEL_1843;
          }
          uint64_t v1612 = 0;
          uint64_t v1613 = ~(-1 << SBYTE6(v2212));
          char v1614 = BYTE6(v2212) & 7;
          uint64_t v1615 = ~(-1 << SBYTE8(v2212));
          char v1616 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1617 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1618 = (unint64_t)BYTE6(v2212) >> 3;
          while (1)
          {
            uint64_t v1619 = (*(void *)(v174 + ((unint64_t)(v1612 * (void)v171) >> 3)) >> ((v1612 * (_BYTE)v171) & 7)) & ~(-1 << (char)v171);
            if (v171 == 64) {
              uint64_t v1619 = *(void *)(v174 + ((unint64_t)(v1612 * (void)v171) >> 3));
            }
            v1620 = (void *)(v167 + v1619 * v165);
            uint64_t v1621 = v1619 + v1612;
            while (1)
            {
              int v1622 = *(_DWORD *)((char *)v1620 + v1618) >> v1614;
              if (((*(double *)&a3[8 * (*v1620 & v1613)] < *(double *)((char *)v1620 + v165 - 8)) ^ ((v1622 & 8) >> 3))) {
                break;
              }
              uint64_t v1624 = (*(void *)((char *)v1620 + v1617) >> v1616) & v1615;
              if ((v1622 & 2) != 0)
              {
                uint64_t v1625 = v1621 + v1624 + (v1622 & 1);
                goto LABEL_1626;
              }
              uint64_t v1623 = v1624 * v165;
LABEL_1624:
              v1620 = (void *)((char *)v1620 + v1623);
            }
            uint64_t v1623 = v165;
            if ((v1622 & 1) == 0) {
              goto LABEL_1624;
            }
            uint64_t v1625 = ((*(void *)((char *)v1620 + v1617) >> v1616) & v1615) + v1621;
LABEL_1626:
            uint64_t v1626 = (*(void *)(v559 + ((unint64_t)(v1625 * v558) >> 3)) >> ((v1625 * v558) & 7)) & ~(-1 << v558);
            if (v558 == 64) {
              uint64_t v1626 = *(void *)(v559 + ((unint64_t)(v1625 * v558) >> 3));
            }
            *((double *)this + v1626) = *(double *)(v563 + 8 * v1625) + *((double *)this + v1626);
            if (++v1612 == v173) {
              goto LABEL_1843;
            }
          }
        case 4:
          if (!v173) {
            goto LABEL_1843;
          }
          uint64_t v1241 = 0;
          uint64_t v1242 = ~(-1 << SBYTE6(v2212));
          char v1243 = BYTE6(v2212) & 7;
          uint64_t v1244 = ~(-1 << SBYTE8(v2212));
          char v1245 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v1246 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                   + BYTE7(v2212)
                                   + BYTE6(v2212)) >> 3;
          unint64_t v1247 = (unint64_t)BYTE6(v2212) >> 3;
          break;
        default:
          goto LABEL_1843;
      }
LABEL_1229:
      uint64_t v1248 = (*(void *)(v174 + ((unint64_t)(v1241 * (void)v171) >> 3)) >> ((v1241 * (_BYTE)v171) & 7)) & ~(-1 << (char)v171);
      if (v171 == 64) {
        uint64_t v1248 = *(void *)(v174 + ((unint64_t)(v1241 * (void)v171) >> 3));
      }
      v1249 = (void *)(v167 + v1248 * v165);
      uint64_t v1250 = v1248 + v1241;
      while (1)
      {
        unsigned int v1251 = *(_DWORD *)((char *)v1249 + v1247) >> v1243;
        double v1252 = *(double *)&a3[8 * (*v1249 & v1242)];
        double v1253 = *(double *)((char *)v1249 + v165 - 8);
        switch((v1251 >> 3) & 7)
        {
          case 0u:
            if (v1252 > v1253) {
              goto LABEL_1236;
            }
            goto LABEL_1245;
          case 1u:
            if (v1252 < v1253) {
              goto LABEL_1245;
            }
            goto LABEL_1236;
          case 2u:
            if (v1252 >= v1253) {
              goto LABEL_1245;
            }
            goto LABEL_1236;
          case 3u:
            if (v1252 > v1253) {
              goto LABEL_1245;
            }
            goto LABEL_1236;
          case 4u:
            if (v1252 != v1253) {
              goto LABEL_1236;
            }
            goto LABEL_1245;
          case 5u:
            if (v1252 != v1253) {
              goto LABEL_1245;
            }
LABEL_1236:
            uint64_t v1254 = (*(void *)((char *)v1249 + v1246) >> v1245) & v1244;
            if ((v1251 & 2) != 0)
            {
              uint64_t v1256 = v1250 + v1254 + (v1251 & 1);
LABEL_1249:
              uint64_t v1257 = (*(void *)(v559 + ((unint64_t)(v1256 * v558) >> 3)) >> ((v1256 * v558) & 7)) & ~(-1 << v558);
              if (v558 == 64) {
                uint64_t v1257 = *(void *)(v559 + ((unint64_t)(v1256 * v558) >> 3));
              }
              *((double *)this + v1257) = *(double *)(v563 + 8 * v1256) + *((double *)this + v1257);
              if (++v1241 == v173) {
                goto LABEL_1843;
              }
              goto LABEL_1229;
            }
            uint64_t v1255 = v1254 * v165;
LABEL_1246:
            v1249 = (void *)((char *)v1249 + v1255);
            break;
          default:
LABEL_1245:
            uint64_t v1255 = v165;
            if ((v1251 & 1) == 0) {
              goto LABEL_1246;
            }
            uint64_t v1256 = ((*(void *)((char *)v1249 + v1246) >> v1245) & v1244) + v1250;
            goto LABEL_1249;
        }
      }
    case 0x11:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v65 = *((void *)a2 + 2);
      uint64_t v66 = a2 + 3;
      uint64_t v2210 = v65;
      v2211 = i3 + 3;
      uint64_t v67 = (uint64_t)&i3[v65 + 3];
      long long v68 = *(_OWORD *)(v67 + 16);
      long long v2212 = *(_OWORD *)v67;
      long long v2213 = v68;
      uint64_t v69 = WORD2(v2212);
      unint64_t v70 = *(void *)(v67 + 32);
      uint64_t v71 = v67 + 40;
      unint64_t v2214 = v70 / WORD2(v2212);
      v2215 = (void *)(v67 + 40);
      if (v70 != v2214 * WORD2(v2212))
      {
        v2162 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2162, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2162, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v72 = v71 + v70;
      uint64_t v73 = 8 - (v72 & 7);
      if ((v72 & 7) == 0) {
        uint64_t v73 = 0;
      }
      uint64_t v74 = v72 + v73;
      uint64_t v75 = *(unsigned int *)(v74 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v74;
      HIDWORD(v2216[0]) = v75;
      long long v76 = *(_OWORD *)(v74 + 8);
      *(_OWORD *)&v2216[1] = v76;
      if ((void)v76)
      {
        v2216[2] = *(void *)(v74 + 24);
        v2216[3] = v74 + 32;
        v2198 = (CoreML::Archiver::MMappedContentManager *)(v74 + 32);
        uint64_t v77 = v74 + 32 + 8 * v2216[2];
      }
      else
      {
        v2198 = 0;
        uint64_t v77 = v74 + 24;
      }
      if ((v77 & 7) != 0) {
        uint64_t v77 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      LODWORD(v2220) = *(_DWORD *)v77;
      uint64_t v318 = *(unsigned int *)(v77 + 4);
      DWORD1(v2220) = *(_DWORD *)(v77 + 4);
      *((void *)&v2220 + 1) = *(void *)(v77 + 8);
      *(void *)&long long v2221 = *(void *)(v77 + 16);
      if (*((void *)&v2220 + 1))
      {
        uint64_t v319 = v77 + 32;
        *(void *)&long long v2221 = *(void *)(v77 + 24);
        *((void *)&v2221 + 1) = v77 + 32;
        uint64_t v320 = v77 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v319 = 0;
        uint64_t v320 = v77 + 24;
      }
      v2182 = (CoreML::Archiver::MMappedContentManager *)v76;
      if ((v320 & 7) != 0) {
        uint64_t v321 = 8 - (v320 & 7);
      }
      else {
        uint64_t v321 = 0;
      }
      uint64_t v322 = v320 + v321 + 8 + 8 * *(void *)(v320 + v321);
      uint64_t v2230 = *(void *)(v320 + v321);
      uint64_t v2231 = v320 + v321 + 8;
      if ((v322 & 7) != 0) {
        uint64_t v323 = 8 - (v322 & 7);
      }
      else {
        uint64_t v323 = 0;
      }
      uint64_t v324 = v322 + v323;
      LODWORD(v2225) = *(_DWORD *)v324;
      uint64_t v325 = *(unsigned int *)(v324 + 4);
      DWORD1(v2225) = *(_DWORD *)(v324 + 4);
      *((void *)&v2225 + 1) = *(void *)(v324 + 8);
      *(void *)&long long v2226 = *(void *)(v324 + 16);
      uint64_t v2179 = v71;
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v324 + 24);
        *((void *)&v2226 + 1) = v324 + 32;
        uint64_t v326 = v324 + 32;
        uint64_t v327 = v324 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v326 = 0;
        uint64_t v327 = v324 + 24;
      }
      uint64_t v328 = 8 - (v327 & 7);
      if ((v327 & 7) == 0) {
        uint64_t v328 = 0;
      }
      int v2184 = *(_DWORD *)(v327 + v328);
      int v2232 = v2184;
      if (v65)
      {
        uint64_t v329 = v320;
        uint64_t v330 = v321;
        memmove(this, v66, 8 * v65);
        uint64_t v321 = v330;
        uint64_t v320 = v329;
      }
      switch(BYTE13(v2212))
      {
        case 0:
          if (!v2182) {
            goto LABEL_2168;
          }
          uint64_t v331 = 0;
          uint64_t v332 = ~(-1 << SBYTE6(v2212));
          char v333 = BYTE6(v2212) & 7;
          uint64_t v334 = ~(-1 << SBYTE8(v2212));
          char v335 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v336 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v337 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v338 = 1 << (BYTE11(v2212) - 1);
          uint64_t v339 = ~(-1 << v318);
          uint64_t v340 = ~v338;
          uint64_t v341 = v321 + v320 + 8;
          while (1)
          {
            uint64_t v342 = (*(void *)((char *)v2198 + ((unint64_t)(v331 * v75) >> 3)) >> ((v331 * v75) & 7)) & ~(-1 << v75);
            if (v75 == 64) {
              uint64_t v342 = *(void *)((char *)v2198 + ((unint64_t)(v331 * v75) >> 3));
            }
            unint64_t v343 = (void *)(v2179 + v342 * v69);
            uint64_t v344 = (*(void *)(v326 + ((unint64_t)(v331 * v325) >> 3)) >> ((v331 * v325) & 7)) & ~(-1 << v325);
            if (v325 == 64) {
              uint64_t v344 = *(void *)(v326 + ((unint64_t)(v331 * v325) >> 3));
            }
            while (1)
            {
              int v345 = *(_DWORD *)((char *)v343 + v337) >> v333;
              if (((*(double *)&a3[8 * (*v343 & v332)] > *(double *)((char *)v343 + v69 - 8)) ^ ((v345 & 8) >> 3))) {
                break;
              }
              uint64_t v347 = v69;
              if (v345)
              {
                uint64_t v355 = ((*(void *)((char *)v343 + v336) >> v335) & v334) + v344;
                v356 = (double *)(v341 + 8 * v355);
                unint64_t v357 = v318 * v355;
                do
                {
                  unint64_t v358 = *(void *)(v319 + (v357 >> 3));
                  if (v318 != 64) {
                    unint64_t v358 = (v358 >> (v357 & 7)) & v339;
                  }
                  double v359 = *v356++;
                  *((double *)this + (v358 & v340)) = v359 + *((double *)this + (v358 & v340));
                  v357 += v318;
                }
                while ((v358 & v338) == 0);
                goto LABEL_232;
              }
LABEL_217:
              unint64_t v343 = (void *)((char *)v343 + v347);
            }
            uint64_t v346 = (*(void *)((char *)v343 + v336) >> v335) & v334;
            if ((v345 & 2) == 0) {
              break;
            }
            uint64_t v348 = v346 + v344;
            if (v345)
            {
              unint64_t v349 = v318 * v348;
              do
              {
                unint64_t v350 = *(void *)(v319 + (v349 >> 3));
                if (v318 != 64) {
                  unint64_t v350 = (v350 >> (v349 & 7)) & v339;
                }
                ++v348;
                v349 += v318;
              }
              while ((v350 & v338) == 0);
            }
            unsigned int v351 = (double *)(v341 + 8 * v348);
            unint64_t v352 = v318 * v348;
            do
            {
              unint64_t v353 = *(void *)(v319 + (v352 >> 3));
              if (v318 != 64) {
                unint64_t v353 = (v353 >> (v352 & 7)) & v339;
              }
              double v354 = *v351++;
              *((double *)this + (v353 & v340)) = v354 + *((double *)this + (v353 & v340));
              v352 += v318;
            }
            while ((v353 & v338) == 0);
LABEL_232:
            if ((CoreML::Archiver::MMappedContentManager *)++v331 == v2182) {
              goto LABEL_2168;
            }
          }
          uint64_t v347 = v346 * v69;
          goto LABEL_217;
        case 1:
          if (!v2182) {
            goto LABEL_2168;
          }
          uint64_t v943 = 0;
          uint64_t v944 = ~(-1 << SBYTE6(v2212));
          char v945 = BYTE6(v2212) & 7;
          uint64_t v946 = ~(-1 << SBYTE8(v2212));
          char v947 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v948 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v949 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v950 = 1 << (BYTE11(v2212) - 1);
          uint64_t v951 = ~(-1 << v318);
          uint64_t v952 = ~v950;
          uint64_t v953 = v321 + v320 + 8;
          while (1)
          {
            uint64_t v954 = (*(void *)((char *)v2198 + ((unint64_t)(v943 * v75) >> 3)) >> ((v943 * v75) & 7)) & ~(-1 << v75);
            if (v75 == 64) {
              uint64_t v954 = *(void *)((char *)v2198 + ((unint64_t)(v943 * v75) >> 3));
            }
            v955 = (void *)(v2179 + v954 * v69);
            uint64_t v956 = (*(void *)(v326 + ((unint64_t)(v943 * v325) >> 3)) >> ((v943 * v325) & 7)) & ~(-1 << v325);
            if (v325 == 64) {
              uint64_t v956 = *(void *)(v326 + ((unint64_t)(v943 * v325) >> 3));
            }
            while (1)
            {
              int v957 = *(_DWORD *)((char *)v955 + v949) >> v945;
              if (((*(double *)&a3[8 * (*v955 & v944)] <= *(double *)((char *)v955 + v69 - 8)) ^ ((v957 & 8) >> 3))) {
                break;
              }
              uint64_t v959 = (*(void *)((char *)v955 + v948) >> v947) & v946;
              if ((v957 & 2) != 0)
              {
                uint64_t v965 = v959 + v956;
                if (v957)
                {
                  unint64_t v966 = v318 * v965;
                  do
                  {
                    unint64_t v967 = *(void *)(v319 + (v966 >> 3));
                    if (v318 != 64) {
                      unint64_t v967 = (v967 >> (v966 & 7)) & v951;
                    }
                    ++v965;
                    v966 += v318;
                  }
                  while ((v967 & v950) == 0);
                }
                v968 = (double *)(v953 + 8 * v965);
                unint64_t v969 = v318 * v965;
                do
                {
                  unint64_t v970 = *(void *)(v319 + (v969 >> 3));
                  if (v318 != 64) {
                    unint64_t v970 = (v970 >> (v969 & 7)) & v951;
                  }
                  double v971 = *v968++;
                  *((double *)this + (v970 & v952)) = v971 + *((double *)this + (v970 & v952));
                  v969 += v318;
                }
                while ((v970 & v950) == 0);
                goto LABEL_935;
              }
              uint64_t v958 = v959 * v69;
LABEL_921:
              v955 = (void *)((char *)v955 + v958);
            }
            uint64_t v958 = v69;
            if ((v957 & 1) == 0) {
              goto LABEL_921;
            }
            uint64_t v960 = ((*(void *)((char *)v955 + v948) >> v947) & v946) + v956;
            v961 = (double *)(v953 + 8 * v960);
            unint64_t v962 = v318 * v960;
            do
            {
              unint64_t v963 = *(void *)(v319 + (v962 >> 3));
              if (v318 != 64) {
                unint64_t v963 = (v963 >> (v962 & 7)) & v951;
              }
              double v964 = *v961++;
              *((double *)this + (v963 & v952)) = v964 + *((double *)this + (v963 & v952));
              v962 += v318;
            }
            while ((v963 & v950) == 0);
LABEL_935:
            if ((CoreML::Archiver::MMappedContentManager *)++v943 == v2182) {
              goto LABEL_2168;
            }
          }
        case 2:
          if (!v2182) {
            goto LABEL_2168;
          }
          uint64_t v868 = 0;
          uint64_t v869 = ~(-1 << SBYTE6(v2212));
          char v870 = BYTE6(v2212) & 7;
          uint64_t v871 = ~(-1 << SBYTE8(v2212));
          char v872 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v873 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v874 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v875 = 1 << (BYTE11(v2212) - 1);
          uint64_t v876 = ~(-1 << v318);
          uint64_t v877 = ~v875;
          uint64_t v878 = v321 + v320 + 8;
          while (1)
          {
            uint64_t v879 = (*(void *)((char *)v2198 + ((unint64_t)(v868 * v75) >> 3)) >> ((v868 * v75) & 7)) & ~(-1 << v75);
            if (v75 == 64) {
              uint64_t v879 = *(void *)((char *)v2198 + ((unint64_t)(v868 * v75) >> 3));
            }
            v880 = (void *)(v2179 + v879 * v69);
            uint64_t v881 = (*(void *)(v326 + ((unint64_t)(v868 * v325) >> 3)) >> ((v868 * v325) & 7)) & ~(-1 << v325);
            if (v325 == 64) {
              uint64_t v881 = *(void *)(v326 + ((unint64_t)(v868 * v325) >> 3));
            }
            while (1)
            {
              int v882 = *(_DWORD *)((char *)v880 + v874) >> v870;
              if (((*(double *)&a3[8 * (*v880 & v869)] >= *(double *)((char *)v880 + v69 - 8)) ^ ((v882 & 8) >> 3))) {
                break;
              }
              uint64_t v884 = v69;
              if (v882)
              {
                uint64_t v892 = ((*(void *)((char *)v880 + v873) >> v872) & v871) + v881;
                v893 = (double *)(v878 + 8 * v892);
                unint64_t v894 = v318 * v892;
                do
                {
                  unint64_t v895 = *(void *)(v319 + (v894 >> 3));
                  if (v318 != 64) {
                    unint64_t v895 = (v895 >> (v894 & 7)) & v876;
                  }
                  double v896 = *v893++;
                  *((double *)this + (v895 & v877)) = v896 + *((double *)this + (v895 & v877));
                  v894 += v318;
                }
                while ((v895 & v875) == 0);
                goto LABEL_857;
              }
LABEL_842:
              v880 = (void *)((char *)v880 + v884);
            }
            uint64_t v883 = (*(void *)((char *)v880 + v873) >> v872) & v871;
            if ((v882 & 2) == 0) {
              break;
            }
            uint64_t v885 = v883 + v881;
            if (v882)
            {
              unint64_t v886 = v318 * v885;
              do
              {
                unint64_t v887 = *(void *)(v319 + (v886 >> 3));
                if (v318 != 64) {
                  unint64_t v887 = (v887 >> (v886 & 7)) & v876;
                }
                ++v885;
                v886 += v318;
              }
              while ((v887 & v875) == 0);
            }
            v888 = (double *)(v878 + 8 * v885);
            unint64_t v889 = v318 * v885;
            do
            {
              unint64_t v890 = *(void *)(v319 + (v889 >> 3));
              if (v318 != 64) {
                unint64_t v890 = (v890 >> (v889 & 7)) & v876;
              }
              double v891 = *v888++;
              *((double *)this + (v890 & v877)) = v891 + *((double *)this + (v890 & v877));
              v889 += v318;
            }
            while ((v890 & v875) == 0);
LABEL_857:
            if ((CoreML::Archiver::MMappedContentManager *)++v868 == v2182) {
              goto LABEL_2168;
            }
          }
          uint64_t v884 = v883 * v69;
          goto LABEL_842;
        case 3:
          if (!v2182) {
            goto LABEL_2168;
          }
          uint64_t v914 = 0;
          uint64_t v915 = ~(-1 << SBYTE6(v2212));
          char v916 = BYTE6(v2212) & 7;
          uint64_t v917 = ~(-1 << SBYTE8(v2212));
          char v918 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v919 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v920 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v921 = 1 << (BYTE11(v2212) - 1);
          uint64_t v922 = ~(-1 << v318);
          uint64_t v923 = ~v921;
          uint64_t v924 = v321 + v320 + 8;
          while (1)
          {
            uint64_t v925 = (*(void *)((char *)v2198 + ((unint64_t)(v914 * v75) >> 3)) >> ((v914 * v75) & 7)) & ~(-1 << v75);
            if (v75 == 64) {
              uint64_t v925 = *(void *)((char *)v2198 + ((unint64_t)(v914 * v75) >> 3));
            }
            v926 = (void *)(v2179 + v925 * v69);
            uint64_t v927 = (*(void *)(v326 + ((unint64_t)(v914 * v325) >> 3)) >> ((v914 * v325) & 7)) & ~(-1 << v325);
            if (v325 == 64) {
              uint64_t v927 = *(void *)(v326 + ((unint64_t)(v914 * v325) >> 3));
            }
            while (1)
            {
              int v928 = *(_DWORD *)((char *)v926 + v920) >> v916;
              if (((*(double *)&a3[8 * (*v926 & v915)] < *(double *)((char *)v926 + v69 - 8)) ^ ((v928 & 8) >> 3))) {
                break;
              }
              uint64_t v930 = (*(void *)((char *)v926 + v919) >> v918) & v917;
              if ((v928 & 2) != 0)
              {
                uint64_t v936 = v930 + v927;
                if (v928)
                {
                  unint64_t v937 = v318 * v936;
                  do
                  {
                    unint64_t v938 = *(void *)(v319 + (v937 >> 3));
                    if (v318 != 64) {
                      unint64_t v938 = (v938 >> (v937 & 7)) & v922;
                    }
                    ++v936;
                    v937 += v318;
                  }
                  while ((v938 & v921) == 0);
                }
                v939 = (double *)(v924 + 8 * v936);
                unint64_t v940 = v318 * v936;
                do
                {
                  unint64_t v941 = *(void *)(v319 + (v940 >> 3));
                  if (v318 != 64) {
                    unint64_t v941 = (v941 >> (v940 & 7)) & v922;
                  }
                  double v942 = *v939++;
                  *((double *)this + (v941 & v923)) = v942 + *((double *)this + (v941 & v923));
                  v940 += v318;
                }
                while ((v941 & v921) == 0);
                goto LABEL_908;
              }
              uint64_t v929 = v930 * v69;
LABEL_894:
              v926 = (void *)((char *)v926 + v929);
            }
            uint64_t v929 = v69;
            if ((v928 & 1) == 0) {
              goto LABEL_894;
            }
            uint64_t v931 = ((*(void *)((char *)v926 + v919) >> v918) & v917) + v927;
            v932 = (double *)(v924 + 8 * v931);
            unint64_t v933 = v318 * v931;
            do
            {
              unint64_t v934 = *(void *)(v319 + (v933 >> 3));
              if (v318 != 64) {
                unint64_t v934 = (v934 >> (v933 & 7)) & v922;
              }
              double v935 = *v932++;
              *((double *)this + (v934 & v923)) = v935 + *((double *)this + (v934 & v923));
              v933 += v318;
            }
            while ((v934 & v921) == 0);
LABEL_908:
            if ((CoreML::Archiver::MMappedContentManager *)++v914 == v2182) {
              goto LABEL_2168;
            }
          }
        case 4:
          if (!v2182) {
            goto LABEL_2168;
          }
          uint64_t v836 = 0;
          uint64_t v837 = ~(-1 << SBYTE6(v2212));
          char v838 = BYTE6(v2212) & 7;
          uint64_t v839 = ~(-1 << SBYTE8(v2212));
          char v840 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
          unint64_t v841 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                                  + BYTE7(v2212)
                                  + BYTE6(v2212)) >> 3;
          unint64_t v842 = (unint64_t)BYTE6(v2212) >> 3;
          uint64_t v843 = 1 << (BYTE11(v2212) - 1);
          uint64_t v844 = ~(-1 << v318);
          uint64_t v845 = v321 + v320;
          uint64_t v846 = ~v843;
          uint64_t v847 = v845 + 8;
          break;
        default:
          goto LABEL_2168;
      }
LABEL_797:
      uint64_t v848 = (*(void *)((char *)v2198 + ((unint64_t)(v836 * v75) >> 3)) >> ((v836 * v75) & 7)) & ~(-1 << v75);
      if (v75 == 64) {
        uint64_t v848 = *(void *)((char *)v2198 + ((unint64_t)(v836 * v75) >> 3));
      }
      unint64_t v849 = *(void *)(v326 + ((unint64_t)(v836 * v325) >> 3));
      long long v850 = (void *)(v2179 + v848 * v69);
      if (v325 != 64) {
        unint64_t v849 = (v849 >> ((v836 * v325) & 7)) & ~(-1 << v325);
      }
      while (1)
      {
        unsigned int v851 = *(_DWORD *)((char *)v850 + v842) >> v838;
        double v852 = *(double *)&a3[8 * (*v850 & v837)];
        double v853 = *(double *)((char *)v850 + v69 - 8);
        switch((v851 >> 3) & 7)
        {
          case 0u:
            if (v852 > v853) {
              goto LABEL_805;
            }
            goto LABEL_814;
          case 1u:
            if (v852 < v853) {
              goto LABEL_814;
            }
            goto LABEL_805;
          case 2u:
            if (v852 >= v853) {
              goto LABEL_814;
            }
            goto LABEL_805;
          case 3u:
            if (v852 > v853) {
              goto LABEL_814;
            }
            goto LABEL_805;
          case 4u:
            if (v852 != v853) {
              goto LABEL_805;
            }
            goto LABEL_814;
          case 5u:
            if (v852 != v853) {
              goto LABEL_814;
            }
LABEL_805:
            uint64_t v854 = (*(void *)((char *)v850 + v841) >> v840) & v839;
            if ((v851 & 2) != 0)
            {
              unint64_t v861 = v854 + v849;
              if (v851)
              {
                unint64_t v862 = v318 * v861;
                do
                {
                  unint64_t v863 = *(void *)(v319 + (v862 >> 3));
                  if (v318 != 64) {
                    unint64_t v863 = (v863 >> (v862 & 7)) & v844;
                  }
                  ++v861;
                  v862 += v318;
                }
                while ((v863 & v843) == 0);
              }
              v864 = (double *)(v847 + 8 * v861);
              unint64_t v865 = v318 * v861;
              do
              {
                unint64_t v866 = *(void *)(v319 + (v865 >> 3));
                if (v318 != 64) {
                  unint64_t v866 = (v866 >> (v865 & 7)) & v844;
                }
                double v867 = *v864++;
                *((double *)this + (v866 & v846)) = v867 + *((double *)this + (v866 & v846));
                v865 += v318;
              }
              while ((v866 & v843) == 0);
LABEL_830:
              if ((CoreML::Archiver::MMappedContentManager *)++v836 == v2182) {
                goto LABEL_2168;
              }
              goto LABEL_797;
            }
            uint64_t v855 = v854 * v69;
LABEL_815:
            long long v850 = (void *)((char *)v850 + v855);
            break;
          default:
LABEL_814:
            uint64_t v855 = v69;
            if ((v851 & 1) == 0) {
              goto LABEL_815;
            }
            unint64_t v856 = ((*(void *)((char *)v850 + v841) >> v840) & v839) + v849;
            v857 = (double *)(v847 + 8 * v856);
            unint64_t v858 = v318 * v856;
            do
            {
              unint64_t v859 = *(void *)(v319 + (v858 >> 3));
              if (v318 != 64) {
                unint64_t v859 = (v859 >> (v858 & 7)) & v844;
              }
              double v860 = *v857++;
              *((double *)this + (v859 & v846)) = v860 + *((double *)this + (v859 & v846));
              v858 += v318;
            }
            while ((v859 & v843) == 0);
            goto LABEL_830;
        }
      }
    case 0x12:
      uint64_t v2218 = 0;
      uint64_t v2219 = 0;
      memset(v2216, 0, sizeof(v2216));
      v2217 = (CoreML::Archiver::MMappedContentManager *)&v2218;
      HIDWORD(v2216[0]) = 64;
      uint64_t v2223 = 0;
      uint64_t v2224 = 0;
      long long v2220 = 0u;
      long long v2221 = 0u;
      v2222 = (CoreML::Archiver::MMappedContentManager *)&v2223;
      DWORD1(v2220) = 64;
      long long v2225 = 0u;
      long long v2226 = 0u;
      v2227 = (CoreML::Archiver::MMappedContentManager *)&v2228;
      uint64_t v2228 = 0;
      DWORD1(v2225) = 64;
      uint64_t v2230 = 0;
      uint64_t v2231 = 0;
      uint64_t v2229 = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v239 = *((void *)a2 + 2);
      char v240 = a2 + 3;
      uint64_t v2210 = v239;
      v2211 = i3 + 3;
      uint64_t v241 = (uint64_t)&i3[v239 + 3];
      long long v242 = *(_OWORD *)(v241 + 16);
      long long v2212 = *(_OWORD *)v241;
      long long v2213 = v242;
      uint64_t v243 = WORD2(v2212);
      unint64_t v244 = *(void *)(v241 + 32);
      uint64_t v245 = v241 + 40;
      unint64_t v2214 = v244 / WORD2(v2212);
      v2215 = (void *)(v241 + 40);
      if (v244 != v2214 * WORD2(v2212))
      {
        v2172 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2172, "Validation failure loading ML tree model; possibly corrupt image.");
        __cxa_throw(v2172, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v246 = v245 + v244;
      uint64_t v247 = 8 - (v246 & 7);
      if ((v246 & 7) == 0) {
        uint64_t v247 = 0;
      }
      uint64_t v248 = v246 + v247;
      uint64_t v249 = *(unsigned int *)(v248 + 4);
      LODWORD(v2216[0]) = *(_DWORD *)v248;
      HIDWORD(v2216[0]) = v249;
      long long v250 = *(_OWORD *)(v248 + 8);
      *(_OWORD *)&v2216[1] = v250;
      std::string::size_type v251 = (CoreML::Archiver::MMappedContentManager *)v250;
      if ((void)v250)
      {
        uint64_t v252 = v248 + 32;
        v2216[2] = *(void *)(v248 + 24);
        v2216[3] = v248 + 32;
        uint64_t v253 = v248 + 32 + 8 * v2216[2];
      }
      else
      {
        uint64_t v252 = 0;
        uint64_t v253 = v248 + 24;
      }
      if ((v253 & 7) != 0) {
        uint64_t v253 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
      }
      long long v2220 = *(_OWORD *)v253;
      *(void *)&long long v2221 = *(void *)(v253 + 16);
      if (*((void *)&v2220 + 1))
      {
        *(void *)&long long v2221 = *(void *)(v253 + 24);
        *((void *)&v2221 + 1) = v253 + 32;
        uint64_t v653 = v253 + 32 + 8 * v2221;
      }
      else
      {
        uint64_t v653 = v253 + 24;
      }
      if ((v653 & 7) != 0) {
        uint64_t v654 = 8 - (v653 & 7);
      }
      else {
        uint64_t v654 = 0;
      }
      uint64_t v655 = v653 + v654 + 8 + 8 * *(void *)(v653 + v654);
      uint64_t v2230 = *(void *)(v653 + v654);
      uint64_t v2231 = v653 + v654 + 8;
      if ((v655 & 7) != 0) {
        uint64_t v656 = 8 - (v655 & 7);
      }
      else {
        uint64_t v656 = 0;
      }
      uint64_t v657 = v655 + v656;
      long long v2225 = *(_OWORD *)v657;
      *(void *)&long long v2226 = *(void *)(v657 + 16);
      if (*((void *)&v2225 + 1))
      {
        *(void *)&long long v2226 = *(void *)(v657 + 24);
        *((void *)&v2226 + 1) = v657 + 32;
        uint64_t v658 = v657 + 32 + 8 * v2226;
      }
      else
      {
        uint64_t v658 = v657 + 24;
      }
      uint64_t v659 = 8 - (v658 & 7);
      if ((v658 & 7) == 0) {
        uint64_t v659 = 0;
      }
      int v660 = *(_DWORD *)(v658 + v659);
      int v2232 = v660;
      if (v239)
      {
        v2193 = (CoreML::Archiver::MMappedContentManager *)v250;
        uint64_t v661 = v245;
        uint64_t v662 = v654;
        int v663 = v660;
        uint64_t v664 = v653;
        memmove(this, v240, 8 * v239);
        uint64_t v653 = v664;
        uint64_t v654 = v662;
        uint64_t v245 = v661;
        std::string::size_type v251 = v2193;
        int v660 = v663;
      }
      break;
    default:
      if (__p != 99999)
      {
        v2161 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3C1380](v2161, "Execution Profile not recognized.");
        __cxa_throw(v2161, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unint64_t v29 = *((void *)a2 + 2);
      unint64_t v30 = *((void *)a2 + 3);
      v2206 = 0;
      v2207 = 0;
      v2208 = 0;
      if (v30 >= 0x21)
      {
        uint64_t v31 = 32;
        v2189 = (CoreML::Archiver::MMappedContentManager *)v30;
        do
        {
          unint64_t v32 = *(void *)((char *)i3 + v31 + 8);
          uint64_t v33 = v31 + 16;
          if (v32)
          {
            uint64_t v34 = *(void *)((char *)i3 + v31);
            std::vector<double>::vector(__p, v29);
            CoreML::TreeEnsembles::Internal::predict((CoreML::TreeEnsembles::Internal *)__p[0], (double *)((char *)i3 + v33), a3, v35);
            int v36 = (CoreML::Archiver::MMappedContentManager *)__p[0];
            char v37 = __p[1];
            __p[1] = 0;
            uint64_t v2210 = 0;
            __p[0] = 0;
            uint64_t v38 = v2207;
            if (v2207 >= v2208)
            {
              v2197 = v36;
              uint64_t v39 = v2206;
              uint64_t v40 = (v2207 - v2206) >> 5;
              unint64_t v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 59) {
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v42 = v2208 - v2206;
              if ((v2208 - v2206) >> 4 > v41) {
                unint64_t v41 = v42 >> 4;
              }
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v43 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v43 = v41;
              }
              if (v43 >> 59) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              int v44 = (char *)operator new(32 * v43);
              uint64_t v45 = &v44[32 * v40];
              *(void *)uint64_t v45 = v34;
              *((void *)v45 + 1) = v2197;
              uint64_t v46 = &v44[32 * v43];
              *((void *)v45 + 2) = v37;
              *((void *)v45 + 3) = v2210;
              uint64_t v47 = v45 + 32;
              if (v38 == v39)
              {
                v2206 = &v44[32 * v40];
                v2207 = v45 + 32;
                v2208 = &v44[32 * v43];
                i3 = a2;
              }
              else
              {
                uint64_t v48 = 0;
                do
                {
                  uint64_t v49 = &v45[v48];
                  uint64_t v50 = &v38[v48];
                  *((void *)v49 - 4) = *(void *)&v38[v48 - 32];
                  *((void *)v49 - 3) = 0;
                  *((void *)v49 - 2) = 0;
                  *((void *)v49 - 1) = 0;
                  *(_OWORD *)(v49 - 24) = *(_OWORD *)&v38[v48 - 24];
                  *((void *)v49 - 1) = *(void *)&v38[v48 - 8];
                  *((void *)v50 - 3) = 0;
                  *((void *)v50 - 2) = 0;
                  *((void *)v50 - 1) = 0;
                  v48 -= 32;
                }
                while (&v38[v48] != v39);
                uint64_t v38 = v2206;
                uint64_t v51 = v2207;
                v2206 = &v45[v48];
                v2207 = v45 + 32;
                v2208 = v46;
                for (i3 = a2; v51 != v38; v51 -= 32)
                {
                  uint64_t v52 = (void *)*((void *)v51 - 3);
                  if (v52)
                  {
                    *((void *)v51 - 2) = v52;
                    operator delete(v52);
                  }
                }
              }
              unint64_t v30 = (unint64_t)v2189;
              if (v38) {
                operator delete(v38);
              }
              v2207 = v47;
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              *(void *)v2207 = v34;
              *((void *)v38 + 1) = v36;
              *((void *)v38 + 2) = v37;
              *((void *)v38 + 3) = v2210;
              v2207 = v38 + 32;
            }
          }
          else
          {
            unint64_t v32 = v31 + 16;
          }
          uint64_t v31 = v32;
        }
        while (v32 < v30);
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      v2204 = 0;
      uint64_t v2205 = 0;
      v2203 = 0;
      std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v2203, *((const void **)v2206 + 1), *((void *)v2206 + 2), (uint64_t)(*((void *)v2206 + 2) - *((void *)v2206 + 1)) >> 3);
      std::string::size_type v54 = v2206;
      id v53 = v2207;
      if ((unint64_t)(v2207 - v2206) >= 0x21)
      {
        int v55 = v2203;
        unint64_t v56 = 1;
        do
        {
          if (v29)
          {
            uint64_t v57 = 0;
            uint64_t v58 = &v54[32 * v56 + 8];
            do
            {
              if (vabdd_f64(*(double *)(*(void *)v58 + 8 * v57), v55[v57]) > 0.0001)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ERROR: profile=", 15);
                uint64_t v59 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"; idx=", 6);
                unint64_t v60 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"; ref_value=",
                  12);
                uint64_t v61 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"; pred=", 7);
                uint64_t v62 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"\n", 1);
              }
              ++v57;
            }
            while (v29 != v57);
            std::string::size_type v54 = v2206;
            id v53 = v2207;
          }
          ++v56;
        }
        while (v56 < (v53 - v54) >> 5);
      }
      std::stringbuf::str();
      std::string::size_type size = HIBYTE(v2202.__r_.__value_.__r.__words[2]);
      if ((v2202.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v2202.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        v2178 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v2178, &v2202);
        __cxa_throw(v2178, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v64 = v2203;
      if (v2204 != v2203) {
        memmove(this, v2203, (char *)v2204 - (char *)v2203);
      }
      if (SHIBYTE(v2202.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v2202.__r_.__value_.__l.__data_);
      }
      if (v64) {
        operator delete(v64);
      }
      __p[0] = *(void **)MEMORY[0x1E4FBA418];
      *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
      __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
      if (SHIBYTE(v2216[1]) < 0) {
        operator delete(v2215);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19F3C1850](&v2217);
      __p[0] = &v2206;
      std::vector<std::pair<unsigned long,std::vector<double>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      return;
  }
  switch(BYTE13(v2212))
  {
    case 0:
      if (!v251) {
        goto LABEL_1976;
      }
      uint64_t v665 = 0;
      uint64_t v666 = ~(-1 << SBYTE6(v2212));
      char v667 = BYTE6(v2212) & 7;
      uint64_t v668 = ~(-1 << SBYTE8(v2212));
      char v669 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
      unint64_t v670 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                              + BYTE7(v2212)
                              + BYTE6(v2212)) >> 3;
      unint64_t v671 = (unint64_t)BYTE6(v2212) >> 3;
      uint64_t v672 = *((void *)&v2213 + 1);
      uint64_t v673 = v654 + v653 + 8;
      uint64_t v674 = 8 * *((void *)&v2213 + 1);
      while (1)
      {
        uint64_t v675 = (*(void *)(v252 + ((unint64_t)(v665 * v249) >> 3)) >> ((v665 * v249) & 7)) & ~(-1 << v249);
        if (v249 == 64) {
          uint64_t v675 = *(void *)(v252 + ((unint64_t)(v665 * v249) >> 3));
        }
        for (i4 = (void *)(v245 + v675 * v243); ; i4 = (void *)((char *)i4 + v679))
        {
          int v677 = *(_DWORD *)((char *)i4 + v671) >> v667;
          if ((((*(double *)&a3[8 * (*i4 & v666)] > *(double *)((char *)i4 + v243 - 8)) ^ ((v677 & 8) >> 3)) & 1) == 0) {
            break;
          }
          uint64_t v678 = (*(void *)((char *)i4 + v670) >> v669) & v668;
          if ((v677 & 2) != 0)
          {
            if (v672)
            {
              uint64_t v680 = (double *)(v673 + v674 * (v675 + v665 + v678 + (v677 & 1)));
              uint64_t v681 = (double *)this;
              uint64_t v682 = v672;
              do
              {
                double v683 = *v680++;
                *uint64_t v681 = v683 + *v681;
                ++v681;
                --v682;
              }
              while (v682);
            }
            goto LABEL_604;
          }
          uint64_t v679 = v678 * v243;
LABEL_596:
          ;
        }
        uint64_t v679 = v243;
        if ((v677 & 1) == 0) {
          goto LABEL_596;
        }
        if (v672)
        {
          unint64_t v684 = (double *)(v673 + v674 * (v675 + ((*(void *)((char *)i4 + v670) >> v669) & v668) + v665));
          unsigned __int16 v685 = (double *)this;
          uint64_t v686 = v672;
          do
          {
            double v687 = *v684++;
            *unsigned __int16 v685 = v687 + *v685;
            ++v685;
            --v686;
          }
          while (v686);
        }
LABEL_604:
        if ((CoreML::Archiver::MMappedContentManager *)++v665 == v251)
        {
LABEL_1976:
          v1526 = (double *)this;
          int v1527 = v660;
          uint64_t v1962 = v239;
          goto LABEL_2141;
        }
      }
    case 1:
      if (!v251) {
        goto LABEL_1976;
      }
      uint64_t v1939 = 0;
      uint64_t v1940 = ~(-1 << SBYTE6(v2212));
      char v1941 = BYTE6(v2212) & 7;
      uint64_t v1942 = ~(-1 << SBYTE8(v2212));
      char v1943 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
      unint64_t v1944 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                               + BYTE7(v2212)
                               + BYTE6(v2212)) >> 3;
      unint64_t v1945 = (unint64_t)BYTE6(v2212) >> 3;
      uint64_t v1946 = *((void *)&v2213 + 1);
      uint64_t v1947 = v654 + v653 + 8;
      uint64_t v1948 = 8 * *((void *)&v2213 + 1);
      while (1)
      {
        uint64_t v1949 = (*(void *)(v252 + ((unint64_t)(v1939 * v249) >> 3)) >> ((v1939 * v249) & 7)) & ~(-1 << v249);
        if (v249 == 64) {
          uint64_t v1949 = *(void *)(v252 + ((unint64_t)(v1939 * v249) >> 3));
        }
        for (i5 = (void *)(v245 + v1949 * v243); ; i5 = (void *)((char *)i5 + v1952))
        {
          int v1951 = *(_DWORD *)((char *)i5 + v1945) >> v1941;
          if (((*(double *)&a3[8 * (*i5 & v1940)] <= *(double *)((char *)i5 + v243 - 8)) ^ ((v1951 & 8) >> 3))) {
            break;
          }
          uint64_t v1953 = (*(void *)((char *)i5 + v1944) >> v1943) & v1942;
          if ((v1951 & 2) != 0)
          {
            if (v1946)
            {
              v1958 = (double *)(v1947 + v1948 * (v1949 + v1939 + v1953 + (v1951 & 1)));
              v1959 = (double *)this;
              uint64_t v1960 = v1946;
              do
              {
                double v1961 = *v1958++;
                double *v1959 = v1961 + *v1959;
                ++v1959;
                --v1960;
              }
              while (v1960);
            }
            goto LABEL_1975;
          }
          uint64_t v1952 = v1953 * v243;
LABEL_1967:
          ;
        }
        uint64_t v1952 = v243;
        if ((v1951 & 1) == 0) {
          goto LABEL_1967;
        }
        if (v1946)
        {
          v1954 = (double *)(v1947 + v1948 * (v1949 + ((*(void *)((char *)i5 + v1944) >> v1943) & v1942) + v1939));
          v1955 = (double *)this;
          uint64_t v1956 = v1946;
          do
          {
            double v1957 = *v1954++;
            double *v1955 = v1957 + *v1955;
            ++v1955;
            --v1956;
          }
          while (v1956);
        }
LABEL_1975:
        if ((CoreML::Archiver::MMappedContentManager *)++v1939 == v251) {
          goto LABEL_1976;
        }
      }
    case 2:
      if (!v251) {
        goto LABEL_1976;
      }
      uint64_t v1747 = 0;
      uint64_t v1748 = ~(-1 << SBYTE6(v2212));
      char v1749 = BYTE6(v2212) & 7;
      uint64_t v1750 = ~(-1 << SBYTE8(v2212));
      char v1751 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
      unint64_t v1752 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                               + BYTE7(v2212)
                               + BYTE6(v2212)) >> 3;
      unint64_t v1753 = (unint64_t)BYTE6(v2212) >> 3;
      uint64_t v1754 = *((void *)&v2213 + 1);
      uint64_t v1755 = v654 + v653 + 8;
      uint64_t v1756 = 8 * *((void *)&v2213 + 1);
      while (1)
      {
        uint64_t v1757 = (*(void *)(v252 + ((unint64_t)(v1747 * v249) >> 3)) >> ((v1747 * v249) & 7)) & ~(-1 << v249);
        if (v249 == 64) {
          uint64_t v1757 = *(void *)(v252 + ((unint64_t)(v1747 * v249) >> 3));
        }
        for (i6 = (void *)(v245 + v1757 * v243); ; i6 = (void *)((char *)i6 + v1761))
        {
          int v1759 = *(_DWORD *)((char *)i6 + v1753) >> v1749;
          if (((*(double *)&a3[8 * (*i6 & v1748)] >= *(double *)((char *)i6 + v243 - 8)) ^ ((v1759 & 8) >> 3))) {
            break;
          }
          uint64_t v1761 = v243;
          if (v1759)
          {
            if (v1754)
            {
              v1766 = (double *)(v1755 + v1756 * (v1757 + ((*(void *)((char *)i6 + v1752) >> v1751) & v1750) + v1747));
              v1767 = (double *)this;
              uint64_t v1768 = v1754;
              do
              {
                double v1769 = *v1766++;
                double *v1767 = v1769 + *v1767;
                ++v1767;
                --v1768;
              }
              while (v1768);
            }
            goto LABEL_1794;
          }
LABEL_1786:
          ;
        }
        uint64_t v1760 = (*(void *)((char *)i6 + v1752) >> v1751) & v1750;
        if ((v1759 & 2) == 0) {
          break;
        }
        if (v1754)
        {
          v1762 = (double *)(v1755 + v1756 * (v1757 + v1747 + v1760 + (v1759 & 1)));
          v1763 = (double *)this;
          uint64_t v1764 = v1754;
          do
          {
            double v1765 = *v1762++;
            double *v1763 = v1765 + *v1763;
            ++v1763;
            --v1764;
          }
          while (v1764);
        }
LABEL_1794:
        if ((CoreML::Archiver::MMappedContentManager *)++v1747 == v251) {
          goto LABEL_1976;
        }
      }
      uint64_t v1761 = v1760 * v243;
      goto LABEL_1786;
    case 3:
      if (!v251) {
        goto LABEL_1976;
      }
      uint64_t v1857 = 0;
      uint64_t v1858 = ~(-1 << SBYTE6(v2212));
      char v1859 = BYTE6(v2212) & 7;
      uint64_t v1860 = ~(-1 << SBYTE8(v2212));
      char v1861 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
      unint64_t v1862 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                               + BYTE7(v2212)
                               + BYTE6(v2212)) >> 3;
      unint64_t v1863 = (unint64_t)BYTE6(v2212) >> 3;
      uint64_t v1864 = *((void *)&v2213 + 1);
      uint64_t v1865 = v654 + v653 + 8;
      uint64_t v1866 = 8 * *((void *)&v2213 + 1);
      while (1)
      {
        uint64_t v1867 = (*(void *)(v252 + ((unint64_t)(v1857 * v249) >> 3)) >> ((v1857 * v249) & 7)) & ~(-1 << v249);
        if (v249 == 64) {
          uint64_t v1867 = *(void *)(v252 + ((unint64_t)(v1857 * v249) >> 3));
        }
        for (i7 = (void *)(v245 + v1867 * v243); ; i7 = (void *)((char *)i7 + v1870))
        {
          int v1869 = *(_DWORD *)((char *)i7 + v1863) >> v1859;
          if (((*(double *)&a3[8 * (*i7 & v1858)] < *(double *)((char *)i7 + v243 - 8)) ^ ((v1869 & 8) >> 3))) {
            break;
          }
          uint64_t v1871 = (*(void *)((char *)i7 + v1862) >> v1861) & v1860;
          if ((v1869 & 2) != 0)
          {
            if (v1864)
            {
              v1876 = (double *)(v1865 + v1866 * (v1867 + v1857 + v1871 + (v1869 & 1)));
              v1877 = (double *)this;
              uint64_t v1878 = v1864;
              do
              {
                double v1879 = *v1876++;
                double *v1877 = v1879 + *v1877;
                ++v1877;
                --v1878;
              }
              while (v1878);
            }
            goto LABEL_1900;
          }
          uint64_t v1870 = v1871 * v243;
LABEL_1892:
          ;
        }
        uint64_t v1870 = v243;
        if ((v1869 & 1) == 0) {
          goto LABEL_1892;
        }
        if (v1864)
        {
          v1872 = (double *)(v1865 + v1866 * (v1867 + ((*(void *)((char *)i7 + v1862) >> v1861) & v1860) + v1857));
          v1873 = (double *)this;
          uint64_t v1874 = v1864;
          do
          {
            double v1875 = *v1872++;
            double *v1873 = v1875 + *v1873;
            ++v1873;
            --v1874;
          }
          while (v1874);
        }
LABEL_1900:
        if ((CoreML::Archiver::MMappedContentManager *)++v1857 == v251) {
          goto LABEL_1976;
        }
      }
    case 4:
      if (!v251) {
        goto LABEL_1976;
      }
      uint64_t v1478 = 0;
      uint64_t v1479 = ~(-1 << SBYTE6(v2212));
      char v1480 = BYTE6(v2212) & 7;
      uint64_t v1481 = ~(-1 << SBYTE8(v2212));
      char v1482 = (((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7) + BYTE7(v2212) + BYTE6(v2212)) & 7;
      unint64_t v1483 = (unint64_t)(((-BYTE8(v2212) - (BYTE7(v2212) + BYTE6(v2212))) & 7)
                               + BYTE7(v2212)
                               + BYTE6(v2212)) >> 3;
      unint64_t v1484 = (unint64_t)BYTE6(v2212) >> 3;
      uint64_t v1485 = *((void *)&v2213 + 1);
      uint64_t v1486 = v654 + v653 + 8;
      uint64_t v1487 = 8 * *((void *)&v2213 + 1);
      break;
    default:
      goto LABEL_1976;
  }
LABEL_1476:
  if (v249 == 64) {
    uint64_t v1488 = *(void *)(v252 + ((unint64_t)(v1478 * v249) >> 3));
  }
  else {
    uint64_t v1488 = (*(void *)(v252 + ((unint64_t)(v1478 * v249) >> 3)) >> ((v1478 * v249) & 7)) & ~(-1 << v249);
  }
  v1489 = (void *)(v245 + v1488 * v243);
  while (1)
  {
    unsigned int v1490 = *(_DWORD *)((char *)v1489 + v1484) >> v1480;
    double v1491 = *(double *)&a3[8 * (*v1489 & v1479)];
    double v1492 = *(double *)((char *)v1489 + v243 - 8);
    switch((v1490 >> 3) & 7)
    {
      case 0u:
        if (v1491 > v1492) {
          goto LABEL_1484;
        }
        goto LABEL_1493;
      case 1u:
        if (v1491 < v1492) {
          goto LABEL_1493;
        }
        goto LABEL_1484;
      case 2u:
        if (v1491 >= v1492) {
          goto LABEL_1493;
        }
        goto LABEL_1484;
      case 3u:
        if (v1491 > v1492) {
          goto LABEL_1493;
        }
        goto LABEL_1484;
      case 4u:
        if (v1491 != v1492) {
          goto LABEL_1484;
        }
        goto LABEL_1493;
      case 5u:
        if (v1491 != v1492) {
          goto LABEL_1493;
        }
LABEL_1484:
        uint64_t v1493 = (*(void *)((char *)v1489 + v1483) >> v1482) & v1481;
        if ((v1490 & 2) != 0)
        {
          if (v1485)
          {
            v1499 = (double *)(v1486 + v1487 * (v1488 + v1478 + v1493 + (v1490 & 1)));
            v1500 = (double *)this;
            uint64_t v1501 = v1485;
            do
            {
              double v1502 = *v1499++;
              double *v1500 = v1502 + *v1500;
              ++v1500;
              --v1501;
            }
            while (v1501);
          }
LABEL_1502:
          if ((CoreML::Archiver::MMappedContentManager *)++v1478 == v251) {
            goto LABEL_1976;
          }
          goto LABEL_1476;
        }
        uint64_t v1494 = v1493 * v243;
LABEL_1494:
        v1489 = (void *)((char *)v1489 + v1494);
        break;
      default:
LABEL_1493:
        uint64_t v1494 = v243;
        if ((v1490 & 1) == 0) {
          goto LABEL_1494;
        }
        if (v1485)
        {
          v1495 = (double *)(v1486 + v1487 * (v1488 + ((*(void *)((char *)v1489 + v1483) >> v1482) & v1481) + v1478));
          v1496 = (double *)this;
          uint64_t v1497 = v1485;
          do
          {
            double v1498 = *v1495++;
            double *v1496 = v1498 + *v1496;
            ++v1496;
            --v1497;
          }
          while (v1497);
        }
        goto LABEL_1502;
    }
  }
}

void sub_19E9FE0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char *a30,uint64_t a31)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  std::ostringstream::~ostringstream((uint64_t)&a30);
  a30 = &a27;
  std::vector<std::pair<unsigned long,std::vector<double>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned long,std::vector<double>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = (char *)**a1;
  if (v2)
  {
    float v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CoreML::TreeEnsembles::Internal::apply_postevaluation_transform(double *a1, int a2, uint64_t a3)
{
  unint64_t v3 = a1;
  switch(a2)
  {
    case 1:
      if (a3)
      {
        unint64_t v7 = a1;
        if (a3 != 1)
        {
          unint64_t v8 = a1 + 1;
          double v9 = *a1;
          uint64_t v10 = 8 * a3 - 8;
          unint64_t v7 = a1;
          uint64_t v11 = a1 + 1;
          do
          {
            double v12 = *v11++;
            double v13 = v12;
            if (v9 < v12)
            {
              double v9 = v13;
              unint64_t v7 = v8;
            }
            unint64_t v8 = v11;
            v10 -= 8;
          }
          while (v10);
        }
        double v14 = *v7;
        uint64_t v15 = 8 * a3;
        double v16 = 0.0;
        uint64_t v17 = 8 * a3;
        uint64_t v18 = a1;
        do
        {
          long double v19 = exp(*v18 - v14);
          *v18++ = v19;
          double v16 = v16 + v19;
          v17 -= 8;
        }
        while (v17);
        do
        {
          *unint64_t v3 = *v3 / v16;
          ++v3;
          v15 -= 8;
        }
        while (v15);
      }
      break;
    case 3:
      if (a3)
      {
        uint64_t v20 = 0;
        double v21 = *a1;
        do
        {
          a1[v20] = a1[v20] - v21;
          ++v20;
        }
        while (a3 != v20);
        uint64_t v22 = 8 * a3;
        int v23 = a1;
        if (a3 != 1)
        {
          std::string::size_type v24 = a1 + 1;
          double v25 = *a1;
          uint64_t v26 = v22 - 8;
          int v23 = a1;
          id v27 = a1 + 1;
          do
          {
            double v28 = *v27++;
            double v29 = v28;
            if (v25 < v28)
            {
              double v25 = v29;
              int v23 = v24;
            }
            std::string::size_type v24 = v27;
            v26 -= 8;
          }
          while (v26);
        }
        double v30 = *v23;
        double v31 = 0.0;
        uint64_t v32 = 8 * a3;
        uint64_t v33 = a1;
        do
        {
          long double v34 = exp(*v33 - v30);
          *v33++ = v34;
          double v31 = v31 + v34;
          v32 -= 8;
        }
        while (v32);
        do
        {
          *unint64_t v3 = *v3 / v31;
          ++v3;
          v22 -= 8;
        }
        while (v22);
      }
      break;
    case 2:
      double v4 = *a1;
      double v5 = exp(-fabs(*a1));
      if (v4 >= 0.0) {
        double v6 = 1.0;
      }
      else {
        double v6 = v5;
      }
      *unint64_t v3 = v6 / (v5 + 1.0);
      break;
  }
}

void CoreML::NNCompiler::Frontend::MIL::Util::ValidateSpecIsConsistent(CoreML::Result *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (*(_DWORD *)(a4 + 96))
  {
    unint64_t v7 = *(long long **)(a4 + 152);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v282, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v8 = *v7;
      v282.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v8;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v282, "main");
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)a2 + 56))(a2, &v282);
  uint64_t v268 = a1;
  if (!v9)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"ML Program does not have a function named ", 42);
    if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v46 = &v282;
    }
    else {
      uint64_t v46 = (std::string *)v282.__r_.__value_.__r.__words[0];
    }
    if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v282.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v282.__r_.__value_.__l.__size_;
    }
    uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)".", 1);
    std::stringbuf::str();
    *(void *)a1 = 12;
    std::operator+<char>();
    if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v289.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
    std::string::size_type v49 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                              + *(void *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408]
                                                                                                + 64);
    __p.__r_.__value_.__r.__words[2] = v49;
    uint64_t v276 = MEMORY[0x1E4FBA470] + 16;
    if (v279 < 0) {
      operator delete(v278);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x19F3C1850](&v281);
    goto LABEL_163;
  }
  uint64_t v261 = v9;
  uint64_t v266 = v4;
  if (*(unsigned char *)(a3 + 104))
  {
    uint64_t v11 = *(void *)(a3 + 8);
    uint64_t v10 = *(void *)(a3 + 16);
    uint64_t v263 = a3;
    if (v11 != v10)
    {
      uint64_t v12 = 0;
      double v13 = (void **)((char *)v268 + 8);
      while (1)
      {
        double v14 = *(void **)(*(void *)(v4 + 104) + 8 * v12 + 8);
        uint64_t v15 = (unsigned __int8 *)v14[11];
        uint64_t v16 = v15[23];
        if ((v16 & 0x80u) == 0) {
          uint64_t v17 = v15[23];
        }
        else {
          uint64_t v17 = *((void *)v15 + 1);
        }
        uint64_t v18 = *(unsigned __int8 *)(v11 + 23);
        int v19 = (char)v18;
        if ((v18 & 0x80u) != 0) {
          uint64_t v18 = *(void *)(v11 + 8);
        }
        if (v17 != v18) {
          goto LABEL_505;
        }
        uint64_t v20 = v19 >= 0 ? (unsigned __int8 *)v11 : *(unsigned __int8 **)v11;
        if ((v16 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v15, v20, *((void *)v15 + 1))) {
            goto LABEL_505;
          }
        }
        else if (v15[23])
        {
          while (*v15 == *v20)
          {
            ++v15;
            ++v20;
            if (!--v16) {
              goto LABEL_25;
            }
          }
LABEL_505:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v239 = std::string::append(&v284, " At function index ");
          long long v240 = *(_OWORD *)&v239->__r_.__value_.__l.__data_;
          v285.__r_.__value_.__r.__words[2] = v239->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v285.__r_.__value_.__l.__data_ = v240;
          v239->__r_.__value_.__l.__size_ = 0;
          v239->__r_.__value_.__r.__words[2] = 0;
          v239->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v283, v12);
          if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v241 = &v283;
          }
          else {
            uint64_t v241 = (std::string *)v283.__r_.__value_.__r.__words[0];
          }
          if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v242 = HIBYTE(v283.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v242 = v283.__r_.__value_.__l.__size_;
          }
          uint64_t v243 = std::string::append(&v285, (const std::string::value_type *)v241, v242);
          long long v244 = *(_OWORD *)&v243->__r_.__value_.__l.__data_;
          v286.__r_.__value_.__r.__words[2] = v243->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v286.__r_.__value_.__l.__data_ = v244;
          v243->__r_.__value_.__l.__size_ = 0;
          v243->__r_.__value_.__r.__words[2] = 0;
          v243->__r_.__value_.__r.__words[0] = 0;
          uint64_t v245 = std::string::append(&v286, " but the model description has ");
          long long v246 = *(_OWORD *)&v245->__r_.__value_.__l.__data_;
          v287.__r_.__value_.__r.__words[2] = v245->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v287.__r_.__value_.__l.__data_ = v246;
          v245->__r_.__value_.__l.__size_ = 0;
          v245->__r_.__value_.__r.__words[2] = 0;
          v245->__r_.__value_.__r.__words[0] = 0;
          uint64_t v247 = v14[11];
          int v248 = *(char *)(v247 + 23);
          if (v248 >= 0) {
            uint64_t v249 = (const std::string::value_type *)v14[11];
          }
          else {
            uint64_t v249 = *(const std::string::value_type **)v247;
          }
          if (v248 >= 0) {
            std::string::size_type v250 = *(unsigned __int8 *)(v247 + 23);
          }
          else {
            std::string::size_type v250 = *(void *)(v247 + 8);
          }
          std::string::size_type v251 = std::string::append(&v287, v249, v250);
          long long v252 = *(_OWORD *)&v251->__r_.__value_.__l.__data_;
          v288.__r_.__value_.__r.__words[2] = v251->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v288.__r_.__value_.__l.__data_ = v252;
          v251->__r_.__value_.__l.__size_ = 0;
          v251->__r_.__value_.__r.__words[2] = 0;
          v251->__r_.__value_.__r.__words[0] = 0;
          uint64_t v253 = std::string::append(&v288, " at the index. ");
          long long v254 = *(_OWORD *)&v253->__r_.__value_.__l.__data_;
          v289.__r_.__value_.__r.__words[2] = v253->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v254;
          v253->__r_.__value_.__l.__size_ = 0;
          v253->__r_.__value_.__r.__words[2] = 0;
          v253->__r_.__value_.__r.__words[0] = 0;
          uint64_t v255 = std::string::append(&v289, "It's a logic error in MLModelInfo object initialization.");
          long long v256 = *(_OWORD *)&v255->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v255->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v256;
          v255->__r_.__value_.__l.__size_ = 0;
          v255->__r_.__value_.__r.__words[2] = 0;
          v255->__r_.__value_.__r.__words[0] = 0;
          std::logic_error::logic_error(exception, &__p);
          __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
        }
LABEL_25:
        uint64_t v21 = *(void *)(std::map<std::string,std::string>::at(v263 + 80, (void *)v11) + 272);
        uint64_t v22 = (unsigned __int8 **)v14[12];
        char v23 = *((unsigned char *)v22 + 23);
        if (!v21) {
          break;
        }
        if ((*((unsigned char *)v22 + 23) & 0x80) != 0)
        {
          if (!v22[1])
          {
LABEL_47:
            std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification does not declare a classifier, but the ML program does declare one.");
            *(void *)uint64_t v268 = 0x110000000CLL;
            std::operator+<char>();
            goto LABEL_70;
          }
        }
        else if (!*((unsigned char *)v22 + 23))
        {
          goto LABEL_47;
        }
        uint64_t v24 = *(unsigned __int8 *)(v21 + 47);
        if ((v24 & 0x80u) == 0) {
          double v25 = (unsigned __int8 *)*(unsigned __int8 *)(v21 + 47);
        }
        else {
          double v25 = *(unsigned __int8 **)(v21 + 32);
        }
        if (v23 >= 0) {
          uint64_t v26 = (unsigned __int8 *)*((unsigned __int8 *)v22 + 23);
        }
        else {
          uint64_t v26 = v22[1];
        }
        if (v25 != v26) {
          goto LABEL_53;
        }
        id v27 = (const void **)(v21 + 24);
        if (v23 >= 0) {
          double v28 = (unsigned __int8 *)v14[12];
        }
        else {
          double v28 = *v22;
        }
        if ((v24 & 0x80) != 0)
        {
          if (memcmp(*v27, v28, *(void *)(v21 + 32))) {
            goto LABEL_53;
          }
        }
        else if (*(unsigned char *)(v21 + 47))
        {
          while (*(unsigned __int8 *)v27 == *v28)
          {
            id v27 = (const void **)((char *)v27 + 1);
            ++v28;
            if (!--v24) {
              goto LABEL_54;
            }
          }
LABEL_53:
          std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification and ML program classifier predicted feature name do not match.");
          *(void *)uint64_t v268 = 0x110000000CLL;
          std::operator+<char>();
          goto LABEL_70;
        }
LABEL_54:
        double v30 = (const void **)v14[13];
        uint64_t v31 = *(unsigned __int8 *)(v21 + 71);
        if ((v31 & 0x80u) == 0) {
          uint64_t v32 = (unsigned __int8 *)*(unsigned __int8 *)(v21 + 71);
        }
        else {
          uint64_t v32 = *(unsigned __int8 **)(v21 + 56);
        }
        uint64_t v33 = (unsigned __int8 *)*((unsigned __int8 *)v30 + 23);
        int v34 = (char)v33;
        if ((char)v33 < 0) {
          uint64_t v33 = (unsigned __int8 *)v30[1];
        }
        if (v32 == v33)
        {
          uint64_t v35 = (const void **)(v21 + 48);
          if (v34 >= 0) {
            int v36 = (unsigned __int8 *)v14[13];
          }
          else {
            int v36 = (unsigned __int8 *)*v30;
          }
          if ((v31 & 0x80) != 0)
          {
            if (!memcmp(*v35, v36, *(void *)(v21 + 56)))
            {
LABEL_79:
              if (v26)
              {
                int v38 = *(_DWORD *)(v21 + 72);
                uint64_t v39 = operator new(4uLL);
                uint64_t v40 = v39;
                if (v38) {
                  int v41 = 3;
                }
                else {
                  int v41 = 1;
                }
                *uint64_t v39 = v41;
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v39 + 1);
                uint64_t v42 = (uint64_t)(v14 + 5);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v39 + 1);
                CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(v268, v42, (const void **)v22, (unsigned int **)&__p);
                operator delete(v40);
                if ((*(_DWORD *)v268 & 0xFFFFFFEF) == 0)
                {
                  if (*((char *)v268 + 31) < 0) {
                    operator delete(*v13);
                  }
                  if (*((char *)v30 + 23) < 0) {
                    unint64_t v43 = (unsigned __int8 *)v30[1];
                  }
                  else {
                    unint64_t v43 = (unsigned __int8 *)*((unsigned __int8 *)v30 + 23);
                  }
                  if (v43)
                  {
                    int v44 = operator new(8uLL);
                    void *v44 = 0x600000005;
                    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v44 + 1);
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v44 + 1);
                    CoreML::validateDescriptionsContainFeatureWithNameAndType<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(v268, v42, v30, (unsigned int **)&__p);
                    operator delete(v44);
                    if ((*(_DWORD *)v268 & 0xFFFFFFEF) == 0)
                    {
                      if (*((char *)v268 + 31) < 0) {
                        operator delete(*v13);
                      }
                      goto LABEL_95;
                    }
                  }
                  else
                  {
LABEL_95:
                    CoreML::Result::Result(v268);
                  }
                }
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "Specification is missing classifier predictedFeatureName");
                *(void *)uint64_t v268 = 12;
                std::operator+<char>();
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
              if ((*(_DWORD *)v268 & 0xFFFFFFEF) != 0) {
                goto LABEL_72;
              }
              if (*((char *)v268 + 31) < 0) {
                operator delete(*v13);
              }
LABEL_99:
              CoreML::Result::Result(v268);
              goto LABEL_72;
            }
          }
          else
          {
            if (!*(unsigned char *)(v21 + 71)) {
              goto LABEL_79;
            }
            while (*(unsigned __int8 *)v35 == *v36)
            {
              uint64_t v35 = (const void **)((char *)v35 + 1);
              ++v36;
              if (!--v31) {
                goto LABEL_79;
              }
            }
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification and ML program classifier predicted probabilities name do not match.");
        *(void *)uint64_t v268 = 0x110000000CLL;
        std::operator+<char>();
LABEL_70:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
LABEL_72:
        int v37 = *(_DWORD *)v268;
        if ((*(_DWORD *)v268 & 0xFFFFFFEF) != 0)
        {
          a1 = v268;
          uint64_t v4 = v266;
          a3 = v263;
          goto LABEL_162;
        }
        uint64_t v4 = v266;
        if (*((char *)v268 + 31) < 0) {
          operator delete(*v13);
        }
        ++v12;
        v11 += 24;
        if (v11 == v10) {
          goto LABEL_161;
        }
      }
      if ((*((unsigned char *)v22 + 23) & 0x80) != 0)
      {
        if (!v22[1]) {
          goto LABEL_49;
        }
      }
      else if (!*((unsigned char *)v22 + 23))
      {
LABEL_49:
        uint64_t v29 = v14[13];
        if (*(char *)(v29 + 23) < 0)
        {
          if (!*(void *)(v29 + 8)) {
            goto LABEL_99;
          }
        }
        else if (!*(unsigned char *)(v29 + 23))
        {
          goto LABEL_99;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification declares a classifier, but the ML program does not contain a 'classify' op.");
      *(void *)uint64_t v268 = 0x110000000CLL;
      std::operator+<char>();
      goto LABEL_70;
    }
    goto LABEL_161;
  }
  uint64_t v50 = *(void *)(std::map<std::string,std::string>::at(a3 + 80, (void *)(a3 + 32)) + 272);
  uint64_t v51 = *(unsigned __int8 ***)(v4 + 136);
  uint64_t v52 = (unsigned __int8 *)*((unsigned __int8 *)v51 + 23);
  if (!v50)
  {
    if ((v52 & 0x80) != 0) {
      uint64_t v52 = v51[1];
    }
    if (v52
      || ((uint64_t v58 = *(void *)(v4 + 144), *(char *)(v58 + 23) < 0)
        ? (uint64_t v59 = *(void *)(v58 + 8))
        : (uint64_t v59 = *(unsigned __int8 *)(v58 + 23)),
          v59))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification declares a classifier, but the ML program does not contain a 'classify' op.");
      *(void *)a1 = 0x110000000CLL;
      std::operator+<char>();
      goto LABEL_156;
    }
    goto LABEL_477;
  }
  if ((v52 & 0x80) == 0)
  {
    if (*((unsigned char *)v51 + 23)) {
      goto LABEL_114;
    }
LABEL_136:
    std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification does not declare a classifier, but the ML program does declare one.");
    *(void *)a1 = 0x110000000CLL;
    std::operator+<char>();
    goto LABEL_156;
  }
  if (!v51[1]) {
    goto LABEL_136;
  }
LABEL_114:
  uint64_t v53 = *(unsigned __int8 *)(v50 + 47);
  if ((v53 & 0x80u) == 0) {
    std::string::size_type v54 = (unsigned __int8 *)*(unsigned __int8 *)(v50 + 47);
  }
  else {
    std::string::size_type v54 = *(unsigned __int8 **)(v50 + 32);
  }
  if ((char)v52 >= 0) {
    int v55 = (unsigned __int8 *)*((unsigned __int8 *)v51 + 23);
  }
  else {
    int v55 = v51[1];
  }
  if (v54 != v55) {
    goto LABEL_138;
  }
  unint64_t v56 = (const void **)(v50 + 24);
  if ((char)v52 >= 0) {
    uint64_t v57 = *(unsigned __int8 **)(v4 + 136);
  }
  else {
    uint64_t v57 = *v51;
  }
  if ((v53 & 0x80) != 0)
  {
    if (!memcmp(*v56, v57, *(void *)(v50 + 32))) {
      goto LABEL_139;
    }
LABEL_138:
    std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification and ML program classifier predicted feature name do not match.");
    *(void *)a1 = 0x110000000CLL;
    std::operator+<char>();
    goto LABEL_156;
  }
  if (*(unsigned char *)(v50 + 47))
  {
    while (*(unsigned __int8 *)v56 == *v57)
    {
      unint64_t v56 = (const void **)((char *)v56 + 1);
      ++v57;
      if (!--v53) {
        goto LABEL_139;
      }
    }
    goto LABEL_138;
  }
LABEL_139:
  unint64_t v60 = *(unsigned __int8 ***)(v4 + 144);
  uint64_t v61 = *(unsigned __int8 *)(v50 + 71);
  if ((v61 & 0x80u) == 0) {
    uint64_t v62 = (unsigned __int8 *)*(unsigned __int8 *)(v50 + 71);
  }
  else {
    uint64_t v62 = *(unsigned __int8 **)(v50 + 56);
  }
  int v63 = (unsigned __int8 *)*((unsigned __int8 *)v60 + 23);
  int v64 = (char)v63;
  if ((char)v63 < 0) {
    int v63 = v60[1];
  }
  if (v62 != v63) {
    goto LABEL_473;
  }
  uint64_t v65 = (const void **)(v50 + 48);
  if (v64 >= 0) {
    uint64_t v66 = *(unsigned __int8 **)(v4 + 144);
  }
  else {
    uint64_t v66 = *v60;
  }
  if ((v61 & 0x80) != 0)
  {
    if (!memcmp(*v65, v66, *(void *)(v50 + 56))) {
      goto LABEL_474;
    }
LABEL_473:
    std::string::basic_string[abi:ne180100]<0>(&__p, "MLModel Specification and ML program classifier predicted probabilities name do not match.");
    *(void *)a1 = 0x110000000CLL;
    std::operator+<char>();
LABEL_156:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_158;
  }
  if (*(unsigned char *)(v50 + 71))
  {
    while (*(unsigned __int8 *)v65 == *v66)
    {
      uint64_t v65 = (const void **)((char *)v65 + 1);
      ++v66;
      if (!--v61) {
        goto LABEL_474;
      }
    }
    goto LABEL_473;
  }
LABEL_474:
  CoreML::validateClassifierFeatureDescriptions((void **)a1, (const CoreML::Specification::ModelDescription *)v4, *(_DWORD *)(v50 + 72) == 0);
  if ((*(_DWORD *)a1 & 0xFFFFFFEF) == 0)
  {
    if (*((char *)a1 + 31) < 0) {
      operator delete(*((void **)a1 + 1));
    }
LABEL_477:
    CoreML::Result::Result(a1);
  }
LABEL_158:
  int v37 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0xFFFFFFEF) != 0) {
    goto LABEL_162;
  }
  uint64_t v263 = a3;
  if (*((char *)a1 + 31) < 0) {
    operator delete(*((void **)a1 + 1));
  }
LABEL_161:
  a1 = v268;
  CoreML::Result::Result(v268);
  a3 = v263;
  int v37 = *(_DWORD *)v268;
LABEL_162:
  if ((v37 & 0xFFFFFFEF) != 0) {
    goto LABEL_163;
  }
  if (*((char *)a1 + 31) < 0) {
    operator delete(*((void **)a1 + 1));
  }
  uint64_t v67 = *(int *)(v4 + 96);
  if (v67)
  {
    uint64_t v68 = *(void *)(v4 + 104);
    if (v68) {
      uint64_t v69 = (uint64_t *)(v68 + 8);
    }
    else {
      uint64_t v69 = 0;
    }
    uint64_t v262 = &v69[v67];
    int v267 = (void **)((char *)a1 + 8);
    std::string::size_type v257 = *(void *)(MEMORY[0x1E4FBA418] + 24);
    std::string::size_type v258 = *MEMORY[0x1E4FBA418];
    uint64_t v260 = a3 + 80;
    while (1)
    {
      uint64_t v70 = *v69;
      uint64_t v71 = *(long long **)(*v69 + 88);
      if (*((char *)v71 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v283, *(const std::string::value_type **)v71, *((void *)v71 + 1));
      }
      else
      {
        long long v72 = *v71;
        v283.__r_.__value_.__r.__words[2] = *((void *)v71 + 2);
        *(_OWORD *)&v283.__r_.__value_.__l.__data_ = v72;
      }
      uint64_t v73 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)a2 + 56))(a2, &v283);
      if (!v73)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        long long v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"ML Program does not have a function named ", 42);
        if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v96 = &v283;
        }
        else {
          uint64_t v96 = (std::string *)v283.__r_.__value_.__r.__words[0];
        }
        if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v97 = HIBYTE(v283.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v97 = v283.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)v96, v97);
        std::stringbuf::str();
        *(void *)a1 = 12;
        std::operator+<char>();
        if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v289.__r_.__value_.__l.__data_);
        }
        __p.__r_.__value_.__r.__words[0] = v258;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v258 - 24)) = v257;
        __p.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
        if (SHIBYTE(v278) < 0) {
          operator delete(v277);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x19F3C1850](&v280);
LABEL_274:
        char v117 = 0;
        goto LABEL_275;
      }
      uint64_t v74 = (const CoreML::NNCompiler::MLFunctionInfo *)std::map<std::string,std::string>::at(v260, &v283);
      std::string::basic_string[abi:ne180100]<0>(&__p, "parameters");
      CoreML::validateInputOutputTypes(a1, *(_DWORD *)(v70 + 24), *(void *)(v70 + 32), 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((*(_DWORD *)a1 & 0xFFFFFFEF) == 0)
      {
        if (*((char *)a1 + 31) < 0) {
          operator delete(*v267);
        }
        int v98 = *(_DWORD *)(v70 + 24);
        int v99 = *(_DWORD *)(v70 + 72);
        if (v99 + v98 == *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v73 + 128))(v73) + 16))
        {
          uint64_t v100 = *(void *)(v70 + 32);
          if (v100) {
            uint64_t v101 = (uint64_t *)(v100 + 8);
          }
          else {
            uint64_t v101 = 0;
          }
          uint64_t v102 = *(int *)(v70 + 24);
          if (!v102)
          {
LABEL_261:
            CoreML::Result::Result(a1);
            goto LABEL_180;
          }
          uint64_t v103 = 8 * v102;
          while (2)
          {
            uint64_t v104 = *v101;
            uint64_t v105 = *(long long **)(*v101 + 16);
            if (*((char *)v105 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v105, *((void *)v105 + 1));
            }
            else
            {
              long long v106 = *v105;
              __p.__r_.__value_.__r.__words[2] = *((void *)v105 + 2);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v106;
            }
            uint64_t v107 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t, std::string *))(*(void *)v73 + 152))(v73, &__p);
            if (v107)
            {
              if (*(void *)(v104 + 32)) {
                long long v108 = *(uint64_t **)(v104 + 32);
              }
              else {
                long long v108 = &CoreML::Specification::_FeatureType_default_instance_;
              }
              if ((*(_DWORD *)a1 & 0xFFFFFFEF) == 0)
              {
                if (*((char *)a1 + 31) < 0) {
                  operator delete(*v267);
                }
                if ((*(_DWORD *)a1 & 0xFFFFFFEF) == 0)
                {
                  if (*((char *)a1 + 31) < 0) {
                    operator delete(*v267);
                  }
                  char v109 = 1;
                  goto LABEL_257;
                }
              }
            }
            else
            {
              std::operator+<char>();
              *(void *)a1 = 0x80000000CLL;
              std::operator+<char>();
              if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v289.__r_.__value_.__l.__data_);
              }
            }
            char v109 = 0;
LABEL_257:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if ((v109 & 1) == 0) {
              goto LABEL_180;
            }
            ++v101;
            v103 -= 8;
            if (!v103) {
              goto LABEL_261;
            }
            continue;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "Model and main function must have same number of inputs and states.");
        *(void *)a1 = 0x70000000CLL;
        std::operator+<char>();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
LABEL_180:
      if ((*(_DWORD *)a1 & 0xFFFFFFEF) != 0) {
        goto LABEL_274;
      }
      if (*((char *)a1 + 31) < 0) {
        operator delete(*v267);
      }
      CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo(&v269, v74);
      uint64_t v259 = v69;
      memset(&__p, 0, sizeof(__p));
      uint64_t v75 = v270;
      if (v270)
      {
        uint64_t v76 = *(void *)(v70 + 56);
        if (v76) {
          uint64_t v77 = (const CoreML::Specification::FeatureDescription **)(v76 + 8);
        }
        else {
          uint64_t v77 = 0;
        }
        uint64_t v78 = *(int *)(v70 + 48);
        if (v78)
        {
          unint64_t v79 = &v77[v78];
          unint64_t v264 = (unsigned __int8 **)(v270 + 48);
          do
          {
            uint64_t v80 = *v77;
            long long v81 = (unsigned __int8 *)*((void *)*v77 + 2);
            uint64_t v82 = v81[23];
            size_t v83 = *((void *)v81 + 1);
            if ((v82 & 0x80u) == 0) {
              uint64_t v84 = v81[23];
            }
            else {
              uint64_t v84 = *((void *)v81 + 1);
            }
            uint64_t v85 = *(unsigned __int8 *)(v75 + 47);
            int v86 = (char)v85;
            if ((v85 & 0x80u) != 0) {
              uint64_t v85 = *(void *)(v75 + 32);
            }
            if (v84 == v85)
            {
              if (v86 >= 0) {
                uint64_t v87 = (unsigned __int8 *)(v75 + 24);
              }
              else {
                uint64_t v87 = *(unsigned __int8 **)(v75 + 24);
              }
              if ((v82 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v81, v87, *((void *)v81 + 1))) {
                  goto LABEL_219;
                }
              }
              else
              {
                if (!v81[23]) {
                  goto LABEL_219;
                }
                uint64_t v88 = (unsigned __int8 *)*((void *)*v77 + 2);
                uint64_t v89 = v81[23];
                while (*v88 == *v87)
                {
                  ++v88;
                  ++v87;
                  if (!--v89) {
                    goto LABEL_219;
                  }
                }
              }
            }
            uint64_t v90 = *(unsigned __int8 *)(v75 + 71);
            int v91 = (char)v90;
            if ((v90 & 0x80u) != 0) {
              uint64_t v90 = *(void *)(v75 + 56);
            }
            if (v84 != v90) {
              goto LABEL_217;
            }
            if (v91 >= 0) {
              uint64_t v92 = (unsigned __int8 *)v264;
            }
            else {
              uint64_t v92 = *v264;
            }
            if ((v82 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v81, v92, v83)) {
                goto LABEL_217;
              }
            }
            else if (v82)
            {
              while (*v81 == *v92)
              {
                ++v81;
                ++v92;
                if (!--v82) {
                  goto LABEL_219;
                }
              }
LABEL_217:
              std::string v93 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((uint64_t)&__p);
              uint64_t v94 = (std::string *)v93;
              if (v80 != (const CoreML::Specification::FeatureDescription *)v93)
              {
                CoreML::Specification::FeatureDescription::Clear((CoreML::Specification::FeatureDescription *)v93);
                CoreML::Specification::FeatureDescription::MergeFrom(v94, v80);
              }
            }
LABEL_219:
            ++v77;
          }
          while (v77 != v79);
        }
      }
      else
      {
        unsigned int v110 = *(_DWORD *)(v70 + 48);
        if (v110)
        {
          uint64_t v111 = *(void *)(v70 + 56);
          unint64_t v112 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&__p, *(_DWORD *)(v70 + 48));
          uint64_t v113 = (const CoreML::Specification::FeatureDescription **)(v111 + 8);
          uint64_t v114 = (_DWORD *)__p.__r_.__value_.__r.__words[2];
          int v115 = __p.__r_.__value_.__r.__words[1];
          google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(&__p, (std::string **)v112, v113, v110, *(_DWORD *)__p.__r_.__value_.__r.__words[2] - LODWORD(__p.__r_.__value_.__r.__words[1]));
          LODWORD(__p.__r_.__value_.__r.__words[1]) = v115 + v110;
          if (*v114 < (signed int)(v115 + v110)) {
            *uint64_t v114 = v115 + v110;
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v289, "return values");
      a1 = v268;
      CoreML::validateInputOutputTypes(v268, __p.__r_.__value_.__r.__words[1], __p.__r_.__value_.__r.__words[2], 2);
      uint64_t v69 = v259;
      if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v289.__r_.__value_.__l.__data_);
      }
      unsigned int v116 = *(_DWORD *)v268 & 0xFFFFFFEF;
      if (!v116 && *((char *)v268 + 31) < 0) {
        operator delete(*v267);
      }
      google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&__p);
      if (!v116)
      {
        int v118 = *(_DWORD *)(v70 + 48);
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v73 + 160))(&__p, v73);
        std::string::size_type v119 = __p.__r_.__value_.__l.__size_;
        std::string::size_type v120 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v118 != ((v119 - v120) >> 3))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "Model and main function must have same number of outputs.");
          *(void *)uint64_t v268 = 0xD0000000CLL;
          std::operator+<char>();
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_273;
          }
          unint64_t v139 = (void *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_345;
        }
        uint64_t v121 = (*(uint64_t (**)(uint64_t))(*(void *)v73 + 112))(v73);
        v122 = (uint64_t *)std::map<std::string,std::string>::at(v121, v271);
        uint64_t v123 = v70;
        if (*(int *)(v70 + 48) < 1)
        {
LABEL_313:
          CoreML::Result::Result(v268);
          goto LABEL_273;
        }
        unint64_t v124 = 0;
        uint64_t v125 = *v122;
        uint64_t v126 = *v122 + 64;
        while (1)
        {
          uint64_t v127 = v123;
          uint64_t v128 = *(void *)(*(void *)(*(void *)(v123 + 56) + 8 * v124 + 8) + 16);
          uint64_t v129 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v125 + 88))(v125);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v129[1] - *v129) >> 3) <= v124) {
            std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v130 = *v129 + 24 * v124;
          uint64_t v131 = *(unsigned __int8 *)(v128 + 23);
          if ((v131 & 0x80u) == 0) {
            uint64_t v132 = *(unsigned __int8 *)(v128 + 23);
          }
          else {
            uint64_t v132 = *(void *)(v128 + 8);
          }
          uint64_t v133 = *(unsigned __int8 *)(v130 + 23);
          int v134 = (char)v133;
          if ((v133 & 0x80u) != 0) {
            uint64_t v133 = *(void *)(v130 + 8);
          }
          if (v132 != v133) {
            break;
          }
          if (v134 >= 0) {
            uint64_t v135 = (const std::string::value_type *)(*v129 + 24 * v124);
          }
          else {
            uint64_t v135 = *(const std::string::value_type **)v130;
          }
          if ((v131 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v128, v135, *(void *)(v128 + 8))) {
              break;
            }
          }
          else if (*(unsigned char *)(v128 + 23))
          {
            uint64_t v136 = (unsigned __int8 *)v128;
            while (*v136 == *(unsigned __int8 *)v135)
            {
              ++v136;
              ++v135;
              if (!--v131) {
                goto LABEL_302;
              }
            }
            break;
          }
LABEL_302:
          long long v137 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v126 + 16))(v126, v130, 1);
          if (*(void *)(*(void *)(*(void *)(v127 + 56) + 8 * v124 + 8) + 32)) {
            uint64_t v138 = *(uint64_t **)(*(void *)(*(void *)(v127 + 56) + 8 * v124 + 8) + 32);
          }
          else {
            uint64_t v138 = &CoreML::Specification::_FeatureType_default_instance_;
          }
          if ((*(_DWORD *)v268 & 0xFFFFFFEF) != 0) {
            goto LABEL_273;
          }
          if (*((char *)v268 + 31) < 0) {
            operator delete(*v267);
          }
          if ((*(_DWORD *)v268 & 0xFFFFFFEF) != 0 || (*((char *)v268 + 31) & 0x80000000) == 0)
          {
            if ((*(_DWORD *)v268 & 0xFFFFFFEF) != 0) {
              goto LABEL_273;
            }
          }
          else
          {
            operator delete(*v267);
          }
          ++v124;
          uint64_t v123 = v127;
          if ((uint64_t)v124 >= *(int *)(v127 + 48)) {
            goto LABEL_313;
          }
        }
        std::to_string(&v284, v124);
        uint64_t v140 = std::string::insert(&v284, 0, "MLModel Specification's output at index ");
        long long v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
        v285.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v285.__r_.__value_.__l.__data_ = v141;
        v140->__r_.__value_.__l.__size_ = 0;
        v140->__r_.__value_.__r.__words[2] = 0;
        v140->__r_.__value_.__r.__words[0] = 0;
        uint64_t v142 = std::string::append(&v285, " is '");
        long long v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
        v286.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v286.__r_.__value_.__l.__data_ = v143;
        v142->__r_.__value_.__l.__size_ = 0;
        v142->__r_.__value_.__r.__words[2] = 0;
        v142->__r_.__value_.__r.__words[0] = 0;
        int v144 = *(char *)(v128 + 23);
        if (v144 >= 0) {
          long long v145 = (const std::string::value_type *)v128;
        }
        else {
          long long v145 = *(const std::string::value_type **)v128;
        }
        if (v144 >= 0) {
          std::string::size_type v146 = *(unsigned __int8 *)(v128 + 23);
        }
        else {
          std::string::size_type v146 = *(void *)(v128 + 8);
        }
        uint64_t v147 = std::string::append(&v286, v145, v146);
        long long v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
        v287.__r_.__value_.__r.__words[2] = v147->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v287.__r_.__value_.__l.__data_ = v148;
        v147->__r_.__value_.__l.__size_ = 0;
        v147->__r_.__value_.__r.__words[2] = 0;
        v147->__r_.__value_.__r.__words[0] = 0;
        std::string::size_type v149 = std::string::append(&v287, "', but the corresponding output name of the ML Program is '");
        long long v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
        v288.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v288.__r_.__value_.__l.__data_ = v150;
        v149->__r_.__value_.__l.__size_ = 0;
        v149->__r_.__value_.__r.__words[2] = 0;
        v149->__r_.__value_.__r.__words[0] = 0;
        int v151 = *(char *)(v130 + 23);
        if (v151 >= 0) {
          uint64_t v152 = (const std::string::value_type *)v130;
        }
        else {
          uint64_t v152 = *(const std::string::value_type **)v130;
        }
        if (v151 >= 0) {
          std::string::size_type v153 = *(unsigned __int8 *)(v130 + 23);
        }
        else {
          std::string::size_type v153 = *(void *)(v130 + 8);
        }
        uint64_t v154 = std::string::append(&v288, v152, v153);
        long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
        v289.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v155;
        v154->__r_.__value_.__l.__size_ = 0;
        v154->__r_.__value_.__r.__words[2] = 0;
        v154->__r_.__value_.__r.__words[0] = 0;
        uint64_t v156 = std::string::append(&v289, "'.");
        long long v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v156->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v157;
        v156->__r_.__value_.__l.__size_ = 0;
        v156->__r_.__value_.__r.__words[2] = 0;
        v156->__r_.__value_.__r.__words[0] = 0;
        *(void *)uint64_t v268 = 0x80000000CLL;
        std::operator+<char>();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v289.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v288.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v287.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v286.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v285.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
        {
          unint64_t v139 = (void *)v284.__r_.__value_.__r.__words[0];
LABEL_345:
          operator delete(v139);
        }
      }
LABEL_273:
      CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)&v269);
      if ((*(_DWORD *)v268 & 0xFFFFFFEF) != 0) {
        goto LABEL_274;
      }
      if (*((char *)v268 + 31) < 0) {
        operator delete(*v267);
      }
      char v117 = 1;
LABEL_275:
      if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v283.__r_.__value_.__l.__data_);
      }
      if ((v117 & 1) == 0) {
        goto LABEL_163;
      }
      if (++v69 == v262) {
        goto LABEL_435;
      }
    }
  }
  uint64_t v158 = (const CoreML::NNCompiler::MLFunctionInfo *)std::map<std::string,std::string>::at(a3 + 80, (void *)(a3 + 32));
  std::string::basic_string[abi:ne180100]<0>(&__p, "parameters");
  CoreML::validateInputOutputTypes(v268, *(_DWORD *)(v266 + 24), *(void *)(v266 + 32), 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((*(_DWORD *)v268 & 0xFFFFFFEF) == 0)
  {
    if (*((char *)v268 + 31) < 0) {
      operator delete(*((void **)v268 + 1));
    }
    int v179 = *(_DWORD *)(v266 + 24);
    int v180 = *(_DWORD *)(v266 + 72);
    if (v180 + v179 != *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v261 + 128))(v261) + 16))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Model and main function must have same number of inputs and states.");
      *(void *)uint64_t v268 = 0x70000000CLL;
      std::operator+<char>();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_349;
    }
    uint64_t v181 = *(void *)(v266 + 32);
    if (v181) {
      uint64_t v182 = (uint64_t *)(v181 + 8);
    }
    else {
      uint64_t v182 = 0;
    }
    uint64_t v183 = *(int *)(v266 + 24);
    if (!v183)
    {
LABEL_419:
      CoreML::Result::Result(v268);
      goto LABEL_349;
    }
    uint64_t v184 = (void **)((char *)v268 + 8);
    uint64_t v185 = 8 * v183;
    while (1)
    {
      uint64_t v186 = *v182;
      unint64_t v187 = *(long long **)(*v182 + 16);
      if (*((char *)v187 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v187, *((void *)v187 + 1));
      }
      else
      {
        long long v188 = *v187;
        __p.__r_.__value_.__r.__words[2] = *((void *)v187 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v188;
      }
      uint64_t v189 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t, std::string *))(*(void *)v261 + 152))(v261, &__p);
      if (!v189) {
        break;
      }
      if (*(void *)(v186 + 32)) {
        int v190 = *(uint64_t **)(v186 + 32);
      }
      else {
        int v190 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if ((*(_DWORD *)v268 & 0xFFFFFFEF) != 0) {
        goto LABEL_414;
      }
      if (*((char *)v268 + 31) < 0) {
        operator delete(*v184);
      }
      if ((*(_DWORD *)v268 & 0xFFFFFFEF) != 0) {
        goto LABEL_414;
      }
      if (*((char *)v268 + 31) < 0) {
        operator delete(*v184);
      }
      char v191 = 1;
LABEL_415:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((v191 & 1) == 0) {
        goto LABEL_349;
      }
      ++v182;
      v185 -= 8;
      if (!v185) {
        goto LABEL_419;
      }
    }
    std::operator+<char>();
    *(void *)uint64_t v268 = 0x80000000CLL;
    std::operator+<char>();
    if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v289.__r_.__value_.__l.__data_);
    }
LABEL_414:
    char v191 = 0;
    goto LABEL_415;
  }
LABEL_349:
  if ((*(_DWORD *)v268 & 0xFFFFFFEF) != 0) {
    goto LABEL_163;
  }
  if (*((char *)v268 + 31) < 0) {
    operator delete(*((void **)v268 + 1));
  }
  CoreML::NNCompiler::MLFunctionInfo::MLFunctionInfo(&v272, v158);
  memset(&__p, 0, sizeof(__p));
  uint64_t v159 = v273;
  if (v273)
  {
    uint64_t v160 = *(void *)(v266 + 56);
    if (v160) {
      uint64_t v161 = (const CoreML::Specification::FeatureDescription **)(v160 + 8);
    }
    else {
      uint64_t v161 = 0;
    }
    uint64_t v162 = *(int *)(v266 + 48);
    if (v162)
    {
      uint64_t v163 = &v161[v162];
      do
      {
        long long v164 = *v161;
        uint64_t v165 = (unsigned __int8 *)*((void *)*v161 + 2);
        uint64_t v166 = v165[23];
        size_t v167 = *((void *)v165 + 1);
        if ((v166 & 0x80u) == 0) {
          uint64_t v168 = v165[23];
        }
        else {
          uint64_t v168 = *((void *)v165 + 1);
        }
        uint64_t v169 = *(unsigned __int8 *)(v159 + 47);
        int v170 = (char)v169;
        if ((v169 & 0x80u) != 0) {
          uint64_t v169 = *(void *)(v159 + 32);
        }
        if (v168 == v169)
        {
          if (v170 >= 0) {
            id v171 = (unsigned __int8 *)(v159 + 24);
          }
          else {
            id v171 = *(unsigned __int8 **)(v159 + 24);
          }
          if ((v166 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v165, v171, *((void *)v165 + 1))) {
              goto LABEL_388;
            }
          }
          else
          {
            if (!v165[23]) {
              goto LABEL_388;
            }
            long long v172 = (unsigned __int8 *)*((void *)*v161 + 2);
            uint64_t v173 = v165[23];
            while (*v172 == *v171)
            {
              ++v172;
              ++v171;
              if (!--v173) {
                goto LABEL_388;
              }
            }
          }
        }
        uint64_t v174 = *(unsigned __int8 *)(v159 + 71);
        int v175 = (char)v174;
        if ((v174 & 0x80u) != 0) {
          uint64_t v174 = *(void *)(v159 + 56);
        }
        if (v168 != v174) {
          goto LABEL_386;
        }
        if (v175 >= 0) {
          std::string v176 = (unsigned __int8 *)(v159 + 48);
        }
        else {
          std::string v176 = *(unsigned __int8 **)(v159 + 48);
        }
        if ((v166 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v165, v176, v167)) {
            goto LABEL_386;
          }
        }
        else if (v166)
        {
          while (*v165 == *v176)
          {
            ++v165;
            ++v176;
            if (!--v166) {
              goto LABEL_388;
            }
          }
LABEL_386:
          uint64_t v177 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((uint64_t)&__p);
          long long v178 = (std::string *)v177;
          if (v164 != (const CoreML::Specification::FeatureDescription *)v177)
          {
            CoreML::Specification::FeatureDescription::Clear((CoreML::Specification::FeatureDescription *)v177);
            CoreML::Specification::FeatureDescription::MergeFrom(v178, v164);
          }
        }
LABEL_388:
        ++v161;
      }
      while (v161 != v163);
    }
  }
  else
  {
    unsigned int v192 = *(_DWORD *)(v266 + 48);
    if (v192)
    {
      uint64_t v193 = *(void *)(v266 + 56);
      unint64_t v194 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&__p, *(_DWORD *)(v266 + 48));
      uint64_t v195 = (const CoreML::Specification::FeatureDescription **)(v193 + 8);
      uint64_t v196 = (_DWORD *)__p.__r_.__value_.__r.__words[2];
      int v197 = __p.__r_.__value_.__r.__words[1];
      google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(&__p, (std::string **)v194, v195, v192, *(_DWORD *)__p.__r_.__value_.__r.__words[2] - LODWORD(__p.__r_.__value_.__r.__words[1]));
      LODWORD(__p.__r_.__value_.__r.__words[1]) = v197 + v192;
      if (*v196 < (signed int)(v197 + v192)) {
        *uint64_t v196 = v197 + v192;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v289, "return values");
  CoreML::validateInputOutputTypes(v268, __p.__r_.__value_.__r.__words[1], __p.__r_.__value_.__r.__words[2], 2);
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v289.__r_.__value_.__l.__data_);
  }
  unsigned int v198 = *(_DWORD *)v268 & 0xFFFFFFEF;
  if (!v198 && *((char *)v268 + 31) < 0) {
    operator delete(*((void **)v268 + 1));
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>(&__p);
  if (v198) {
    goto LABEL_431;
  }
  int v199 = *(_DWORD *)(v266 + 48);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v261 + 160))(&__p, v261);
  std::string::size_type v200 = (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v199 == v200)
  {
    uint64_t v201 = (*(uint64_t (**)(uint64_t))(*(void *)v261 + 112))(v261);
    uint64_t v202 = (uint64_t *)std::map<std::string,std::string>::at(v201, v274);
    uint64_t v203 = v266;
    if (*(int *)(v266 + 48) < 1)
    {
LABEL_469:
      CoreML::Result::Result(v268);
      goto LABEL_431;
    }
    unint64_t v204 = 0;
    uint64_t v205 = *v202;
    uint64_t v206 = *v202 + 64;
    int v207 = (void **)((char *)v268 + 8);
    while (1)
    {
      uint64_t v208 = *(void *)(*(void *)(*(void *)(v203 + 56) + 8 * v204 + 8) + 16);
      uint64_t v209 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v205 + 88))(v205);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v209[1] - *v209) >> 3) <= v204) {
        std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v210 = *v209 + 24 * v204;
      uint64_t v211 = *(unsigned __int8 *)(v208 + 23);
      if ((v211 & 0x80u) == 0) {
        uint64_t v212 = *(unsigned __int8 *)(v208 + 23);
      }
      else {
        uint64_t v212 = *(void *)(v208 + 8);
      }
      uint64_t v213 = *(unsigned __int8 *)(v210 + 23);
      int v214 = (char)v213;
      if ((v213 & 0x80u) != 0) {
        uint64_t v213 = *(void *)(v210 + 8);
      }
      if (v212 != v213) {
        break;
      }
      if (v214 >= 0) {
        v215 = (const std::string::value_type *)(*v209 + 24 * v204);
      }
      else {
        v215 = *(const std::string::value_type **)v210;
      }
      if ((v211 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v208, v215, *(void *)(v208 + 8))) {
          break;
        }
      }
      else if (*(unsigned char *)(v208 + 23))
      {
        uint64_t v216 = (unsigned __int8 *)v208;
        while (*v216 == *(unsigned __int8 *)v215)
        {
          ++v216;
          ++v215;
          if (!--v211) {
            goto LABEL_458;
          }
        }
        break;
      }
LABEL_458:
      int v217 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v206 + 16))(v206, v210, 1);
      if (*(void *)(*(void *)(*(void *)(v266 + 56) + 8 * v204 + 8) + 32)) {
        uint64_t v218 = *(uint64_t **)(*(void *)(*(void *)(v266 + 56) + 8 * v204 + 8) + 32);
      }
      else {
        uint64_t v218 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if ((*(_DWORD *)v268 & 0xFFFFFFEF) != 0) {
        goto LABEL_431;
      }
      if (*((char *)v268 + 31) < 0) {
        operator delete(*v207);
      }
      if ((*(_DWORD *)v268 & 0xFFFFFFEF) != 0 || (*((char *)v268 + 31) & 0x80000000) == 0)
      {
        if ((*(_DWORD *)v268 & 0xFFFFFFEF) != 0) {
          goto LABEL_431;
        }
      }
      else
      {
        operator delete(*v207);
      }
      ++v204;
      uint64_t v203 = v266;
      if ((uint64_t)v204 >= *(int *)(v266 + 48)) {
        goto LABEL_469;
      }
    }
    std::to_string(&v284, v204);
    uint64_t v220 = std::string::insert(&v284, 0, "MLModel Specification's output at index ");
    long long v221 = *(_OWORD *)&v220->__r_.__value_.__l.__data_;
    v285.__r_.__value_.__r.__words[2] = v220->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v285.__r_.__value_.__l.__data_ = v221;
    v220->__r_.__value_.__l.__size_ = 0;
    v220->__r_.__value_.__r.__words[2] = 0;
    v220->__r_.__value_.__r.__words[0] = 0;
    double v222 = std::string::append(&v285, " is '");
    long long v223 = *(_OWORD *)&v222->__r_.__value_.__l.__data_;
    v286.__r_.__value_.__r.__words[2] = v222->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v286.__r_.__value_.__l.__data_ = v223;
    v222->__r_.__value_.__l.__size_ = 0;
    v222->__r_.__value_.__r.__words[2] = 0;
    v222->__r_.__value_.__r.__words[0] = 0;
    int v224 = *(char *)(v208 + 23);
    if (v224 >= 0) {
      int v225 = (const std::string::value_type *)v208;
    }
    else {
      int v225 = *(const std::string::value_type **)v208;
    }
    if (v224 >= 0) {
      std::string::size_type v226 = *(unsigned __int8 *)(v208 + 23);
    }
    else {
      std::string::size_type v226 = *(void *)(v208 + 8);
    }
    int v227 = std::string::append(&v286, v225, v226);
    long long v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
    v287.__r_.__value_.__r.__words[2] = v227->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v287.__r_.__value_.__l.__data_ = v228;
    v227->__r_.__value_.__l.__size_ = 0;
    v227->__r_.__value_.__r.__words[2] = 0;
    v227->__r_.__value_.__r.__words[0] = 0;
    uint64_t v229 = std::string::append(&v287, "', but the corresponding output name of the ML Program is '");
    long long v230 = *(_OWORD *)&v229->__r_.__value_.__l.__data_;
    v288.__r_.__value_.__r.__words[2] = v229->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v288.__r_.__value_.__l.__data_ = v230;
    v229->__r_.__value_.__l.__size_ = 0;
    v229->__r_.__value_.__r.__words[2] = 0;
    v229->__r_.__value_.__r.__words[0] = 0;
    int v231 = *(char *)(v210 + 23);
    if (v231 >= 0) {
      uint64_t v232 = (const std::string::value_type *)v210;
    }
    else {
      uint64_t v232 = *(const std::string::value_type **)v210;
    }
    if (v231 >= 0) {
      std::string::size_type v233 = *(unsigned __int8 *)(v210 + 23);
    }
    else {
      std::string::size_type v233 = *(void *)(v210 + 8);
    }
    uint64_t v234 = std::string::append(&v288, v232, v233);
    long long v235 = *(_OWORD *)&v234->__r_.__value_.__l.__data_;
    v289.__r_.__value_.__r.__words[2] = v234->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v235;
    v234->__r_.__value_.__l.__size_ = 0;
    v234->__r_.__value_.__r.__words[2] = 0;
    v234->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v236 = std::string::append(&v289, "'.");
    long long v237 = *(_OWORD *)&v236->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v236->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v237;
    v236->__r_.__value_.__l.__size_ = 0;
    v236->__r_.__value_.__r.__words[2] = 0;
    v236->__r_.__value_.__r.__words[0] = 0;
    *(void *)uint64_t v268 = 0x80000000CLL;
    std::operator+<char>();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v289.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v288.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v287.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v286.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v285.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v284.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_431;
    }
    v219 = (void *)v284.__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Model and main function must have same number of outputs.");
    *(void *)uint64_t v268 = 0xD0000000CLL;
    std::operator+<char>();
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_431;
    }
    v219 = (void *)__p.__r_.__value_.__r.__words[0];
  }
  operator delete(v219);
LABEL_431:
  CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)&v272);
  a1 = v268;
  if ((*(_DWORD *)v268 & 0xFFFFFFEF) != 0 || (*((char *)v268 + 31) & 0x80000000) == 0)
  {
    if ((*(_DWORD *)v268 & 0xFFFFFFEF) != 0) {
      goto LABEL_163;
    }
  }
  else
  {
    operator delete(*((void **)v268 + 1));
  }
LABEL_435:
  CoreML::Result::Result(a1);
LABEL_163:
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v282.__r_.__value_.__l.__data_);
  }
}

void sub_19EA009BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  if (*(char *)(v63 - 121) < 0) {
    operator delete(*(void **)(v63 - 144));
  }
  if (*(char *)(v63 - 153) < 0) {
    operator delete(*(void **)(v63 - 176));
  }
  if (*(char *)(v63 - 185) < 0) {
    operator delete(*(void **)(v63 - 208));
  }
  if (*(char *)(v63 - 217) < 0) {
    operator delete(*(void **)(v63 - 240));
  }
  if (SLOBYTE(STACK[0x477]) < 0) {
    operator delete((void *)STACK[0x460]);
  }
  if (SLOBYTE(STACK[0x45F]) < 0) {
    operator delete((void *)STACK[0x448]);
  }
  CoreML::NNCompiler::MLFunctionInfo::~MLFunctionInfo((CoreML::NNCompiler::MLFunctionInfo *)&a63);
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  _Unwind_Resume(a1);
}

void CoreML::validateInputOutputTypes(CoreML::Result *this, int a2, uint64_t a3, int a4)
{
  uint64_t v5 = a3 + 8;
  if (!a3) {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    uint64_t v7 = 8 * a2;
    while (1)
    {
      long long v8 = *(uint64_t **)(*(void *)v5 + 32);
      if (!v8) {
        long long v8 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      unsigned int v9 = *((_DWORD *)v8 + 9);
      BOOL v10 = v9 > 8;
      int v11 = (1 << v9) & 0x130;
      if (v10 || v11 == 0) {
        break;
      }
      v5 += 8;
      v7 -= 8;
      if (!v7) {
        goto LABEL_12;
      }
    }
    std::operator+<char>();
    double v13 = std::string::append(&v15, " to be images, MLMultiArray, or State.");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    *(_DWORD *)this = 12;
    *((_DWORD *)this + 1) = a4;
    std::operator+<char>();
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  else
  {
LABEL_12:
    CoreML::Result::Result(this);
  }
}

void sub_19EA00F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ValidateMultiArrayIOTypeIsSupported(CoreML::Result *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4) {
    long long v8 = "input";
  }
  else {
    long long v8 = "output";
  }
  unsigned int v9 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)std::string::basic_string[abi:ne180100]<0>(&v48, v8);
  int v10 = *(_DWORD *)(a2 + 36);
  if (v10 != 5)
  {
    if (v10 == 8 && a4 != 0)
    {
      uint64_t v26 = *(void *)(a2 + 24);
      if (*(_DWORD *)(v26 + 28) == 1)
      {
        id v27 = *(uint64_t **)(v26 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v9);
        id v27 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      if (*((_DWORD *)v27 + 9) != 65552)
      {
        std::operator+<char>();
        double v28 = std::string::append(&v41, " '");
        long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        int v30 = *(char *)(a3 + 23);
        if (v30 >= 0) {
          uint64_t v31 = (const std::string::value_type *)a3;
        }
        else {
          uint64_t v31 = *(const std::string::value_type **)a3;
        }
        if (v30 >= 0) {
          std::string::size_type v32 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          std::string::size_type v32 = *(void *)(a3 + 8);
        }
        uint64_t v33 = std::string::append(&v42, v31, v32);
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        uint64_t v35 = std::string::append(&v43, "' is not a supported data type. Only float16 data type is supported for State ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        if ((v50 & 0x80u) == 0) {
          char v23 = (const std::string::value_type *)&v48;
        }
        else {
          char v23 = v48;
        }
        if ((v50 & 0x80u) == 0) {
          std::string::size_type v24 = v50;
        }
        else {
          std::string::size_type v24 = v49;
        }
        goto LABEL_48;
      }
    }
LABEL_32:
    CoreML::Result::Result(a1);
    goto LABEL_33;
  }
  int v11 = *(_DWORD *)(*(void *)(a2 + 24) + 36);
  if (v11 == 65552 || v11 == 65568 || v11 == 131104) {
    goto LABEL_32;
  }
  std::operator+<char>();
  long long v14 = std::string::append(&v41, " '");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = *(char *)(a3 + 23);
  if (v16 >= 0) {
    std::string::size_type v17 = (const std::string::value_type *)a3;
  }
  else {
    std::string::size_type v17 = *(const std::string::value_type **)a3;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v18 = *(void *)(a3 + 8);
  }
  int v19 = std::string::append(&v42, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  uint64_t v21 = std::string::append(&v43, "' is not a supported data type. Only int32, float32, or float16 data types are supported for MLMultiArray ");
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v50 & 0x80u) == 0) {
    char v23 = (const std::string::value_type *)&v48;
  }
  else {
    char v23 = v48;
  }
  if ((v50 & 0x80u) == 0) {
    std::string::size_type v24 = v50;
  }
  else {
    std::string::size_type v24 = v49;
  }
LABEL_48:
  int v37 = std::string::append(&v44, v23, v24);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  uint64_t v39 = std::string::append(&v45, "s to ML Program models.");
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  std::string::size_type v47 = v39->__r_.__value_.__r.__words[2];
  long long v46 = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  *(void *)a1 = 0x10000000CLL;
  std::operator+<char>();
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)v46);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
LABEL_33:
  if ((char)v50 < 0) {
    operator delete(v48);
  }
}

void sub_19EA01338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v42 - 73) < 0) {
    operator delete(*(void **)(v42 - 96));
  }
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v42 - 49) < 0) {
    operator delete(*(void **)(v42 - 72));
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::SameTypes(CoreML::Result *a1, uint64_t a2, uint64_t a3, MIL::IRValueType *a4, int a5)
{
  if (a5) {
    int v10 = "parameter";
  }
  else {
    int v10 = "return value";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v10);
  int v11 = 12;
  switch(*(_DWORD *)(a3 + 36))
  {
    case 1:
      goto LABEL_6;
    case 3:
      goto LABEL_5;
    case 4:
      uint64_t v42 = *(void *)(a3 + 24);
      uint64_t v43 = (*(uint64_t (**)(MIL::IRValueType *))(*(void *)a4 + 24))(a4);
      uint64_t v44 = v43;
      if (v43
        && ((*(unsigned int (**)(uint64_t))(*(void *)v43 + 88))(v43) == 5
         || (*(unsigned int (**)(uint64_t))(*(void *)v44 + 88))(v44) == 4
         || (*(unsigned int (**)(uint64_t))(*(void *)v44 + 88))(v44) == 14))
      {
        int v45 = *(_DWORD *)(v42 + 32);
        if (v45 == 40 || v45 == 10) {
          uint64_t v47 = 1;
        }
        else {
          uint64_t v47 = 3;
        }
        if (*(void *)(v42 + 24) && *(void *)(v42 + 16))
        {
          uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 96))(v44);
          std::string::size_type v49 = (void *)v48;
          int v50 = *(_DWORD *)(v42 + 52);
          if (v50 == 31)
          {
            if (!a5) {
              goto LABEL_261;
            }
            if (*(void *)(v48 + 8) - *(void *)v48 != 32
            {
LABEL_241:
              BOOL v161 = a5 == 0;
              if (a5) {
                int v15 = 11;
              }
              else {
                int v15 = 15;
              }
              if (v161) {
                uint64_t v162 = "output";
              }
              else {
                uint64_t v162 = "input";
              }
              std::string::basic_string[abi:ne180100]<0>(&v199, v162);
              std::operator+<char>();
              uint64_t v163 = std::string::append(&v193, " '");
              long long v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
              v194.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v164;
              v163->__r_.__value_.__l.__size_ = 0;
              v163->__r_.__value_.__r.__words[2] = 0;
              v163->__r_.__value_.__r.__words[0] = 0;
              int v165 = *(char *)(a2 + 23);
              if (v165 >= 0) {
                uint64_t v166 = (const std::string::value_type *)a2;
              }
              else {
                uint64_t v166 = *(const std::string::value_type **)a2;
              }
              if (v165 >= 0) {
                std::string::size_type v167 = *(unsigned __int8 *)(a2 + 23);
              }
              else {
                std::string::size_type v167 = *(void *)(a2 + 8);
              }
              uint64_t v168 = std::string::append(&v194, v166, v167);
              long long v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
              v195.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v169;
              v168->__r_.__value_.__l.__size_ = 0;
              v168->__r_.__value_.__r.__words[2] = 0;
              v168->__r_.__value_.__r.__words[0] = 0;
              int v170 = std::string::append(&v195, "' has a different shape than its corresponding ");
              long long v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
              v196.__r_.__value_.__r.__words[2] = v170->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v171;
              v170->__r_.__value_.__l.__size_ = 0;
              v170->__r_.__value_.__r.__words[2] = 0;
              v170->__r_.__value_.__r.__words[0] = 0;
              if ((v192 & 0x80u) == 0) {
                p_p = (const std::string::value_type *)&__p;
              }
              else {
                p_p = (const std::string::value_type *)__p;
              }
              if ((v192 & 0x80u) == 0) {
                std::string::size_type v27 = v192;
              }
              else {
                std::string::size_type v27 = v191;
              }
              goto LABEL_27;
            }
            if (v49[1] - *v49 <= 8uLL) {
              goto LABEL_294;
            }
              goto LABEL_241;
            if (v49[1] - *v49 < 0x11uLL) {
              goto LABEL_294;
            }
            if (*(void *)(v157 + 24)) {
              uint64_t v158 = *(uint64_t **)(v157 + 24);
            }
            else {
              uint64_t v158 = &CoreML::Specification::_SizeRange_default_instance_;
            }
              goto LABEL_241;
            if (v49[1] - *v49 < 0x19uLL) {
LABEL_294:
            }
              std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]();
            if (*(void *)(v157 + 16)) {
              uint64_t v159 = *(uint64_t **)(v157 + 16);
            }
            else {
              uint64_t v159 = &CoreML::Specification::_SizeRange_default_instance_;
            }
          }
          else
          {
            if (v50 == 21)
            {
              if (a5)
              {
                uint64_t v51 = *(void *)(v42 + 40);
                uint64_t v52 = *(void *)(v51 + 32);
                uint64_t v53 = v52 ? v52 + 8 : 0;
                uint64_t v54 = *(int *)(v51 + 24);
                if (v54)
                {
                  uint64_t v55 = 8 * v54;
                  {
                    v53 += 8;
                    v55 -= 8;
                    if (!v55) {
                      goto LABEL_261;
                    }
                  }
                  goto LABEL_241;
                }
              }
LABEL_261:
              CoreML::Result::Result(a1);
              goto LABEL_266;
            }
          }
          if (v160) {
            goto LABEL_261;
          }
          goto LABEL_241;
        }
        BOOL v112 = a5 == 0;
        if (a5) {
          int v113 = 3;
        }
        else {
          int v113 = 5;
        }
        if (v112) {
          uint64_t v114 = "output";
        }
        else {
          uint64_t v114 = "input";
        }
        std::string::basic_string[abi:ne180100]<0>(&v199, v114);
        std::operator+<char>();
        int v115 = std::string::append(&v195, " '");
        long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
        v196.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v116;
        v115->__r_.__value_.__l.__size_ = 0;
        v115->__r_.__value_.__r.__words[2] = 0;
        v115->__r_.__value_.__r.__words[0] = 0;
        int v117 = *(char *)(a2 + 23);
        if (v117 >= 0) {
          int v118 = (const std::string::value_type *)a2;
        }
        else {
          int v118 = *(const std::string::value_type **)a2;
        }
        if (v117 >= 0) {
          std::string::size_type v119 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v119 = *(void *)(a2 + 8);
        }
        std::string::size_type v120 = std::string::append(&v196, v118, v119);
        long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
        v197.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v121;
        v120->__r_.__value_.__l.__size_ = 0;
        v120->__r_.__value_.__r.__words[2] = 0;
        v120->__r_.__value_.__r.__words[0] = 0;
        v122 = std::string::append(&v197, "' has empty height or width.");
        long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
        v198.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v123;
        v122->__r_.__value_.__l.__size_ = 0;
        v122->__r_.__value_.__r.__words[2] = 0;
        v122->__r_.__value_.__r.__words[0] = 0;
        *(_DWORD *)a1 = 12;
        *((_DWORD *)a1 + 1) = v113;
        std::operator+<char>();
      }
      else
      {
        BOOL v78 = a5 == 0;
        if (a5) {
          int v79 = 4;
        }
        else {
          int v79 = 6;
        }
        if (v78) {
          uint64_t v80 = "output";
        }
        else {
          uint64_t v80 = "input";
        }
        std::string::basic_string[abi:ne180100]<0>(&v199, v80);
        std::operator+<char>();
        long long v81 = std::string::append(&v195, " '");
        long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
        v196.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v82;
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        int v83 = *(char *)(a2 + 23);
        if (v83 >= 0) {
          uint64_t v84 = (const std::string::value_type *)a2;
        }
        else {
          uint64_t v84 = *(const std::string::value_type **)a2;
        }
        if (v83 >= 0) {
          std::string::size_type v85 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v85 = *(void *)(a2 + 8);
        }
        int v86 = std::string::append(&v196, v84, v85);
        long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v197.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        uint64_t v88 = std::string::append(&v197, "' must be a tensor of type Float32 or Float16");
        long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        v198.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v89;
        v88->__r_.__value_.__l.__size_ = 0;
        v88->__r_.__value_.__r.__words[2] = 0;
        v88->__r_.__value_.__r.__words[0] = 0;
        *(_DWORD *)a1 = 12;
        *((_DWORD *)a1 + 1) = v79;
        std::operator+<char>();
      }
      goto LABEL_199;
    case 5:
      uint64_t v56 = *(void *)(a3 + 24);
      uint64_t v57 = (*(uint64_t (**)(MIL::IRValueType *))(*(void *)a4 + 24))(a4);
      uint64_t v58 = v57;
      if (!v57)
      {
        if (a5) {
          uint64_t v102 = "input";
        }
        else {
          uint64_t v102 = "output";
        }
        std::string::basic_string[abi:ne180100]<0>(&v199, v102);
        std::operator+<char>();
        uint64_t v103 = std::string::append(&v195, " '");
        long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
        v196.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v104;
        v103->__r_.__value_.__l.__size_ = 0;
        v103->__r_.__value_.__r.__words[2] = 0;
        v103->__r_.__value_.__r.__words[0] = 0;
        int v105 = *(char *)(a2 + 23);
        if (v105 >= 0) {
          long long v106 = (const std::string::value_type *)a2;
        }
        else {
          long long v106 = *(const std::string::value_type **)a2;
        }
        if (v105 >= 0) {
          std::string::size_type v107 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v107 = *(void *)(a2 + 8);
        }
        long long v108 = std::string::append(&v196, v106, v107);
        long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
        v197.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v109;
        v108->__r_.__value_.__l.__size_ = 0;
        v108->__r_.__value_.__r.__words[2] = 0;
        v108->__r_.__value_.__r.__words[0] = 0;
        unsigned int v110 = std::string::append(&v197, "' is not a tensor.");
        long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
        v198.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v111;
        v110->__r_.__value_.__l.__size_ = 0;
        v110->__r_.__value_.__r.__words[2] = 0;
        v110->__r_.__value_.__r.__words[0] = 0;
        *(void *)a1 = 0x90000000CLL;
        std::operator+<char>();
LABEL_199:
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v198.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v197.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v196.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v32 = (void *)v195.__r_.__value_.__r.__words[0];
          goto LABEL_207;
        }
LABEL_208:
        if (SHIBYTE(v200) < 0)
        {
          std::string::size_type v149 = (void *)v199;
LABEL_210:
          operator delete(v149);
        }
        goto LABEL_266;
      }
      int v59 = *(_DWORD *)(v56 + 36);
      int v60 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 88))(v57);
      if (v59 > 65599)
      {
        if (v59 != 65600)
        {
          if (v59 != 131104 || v60 != 11) {
            goto LABEL_158;
          }
          goto LABEL_79;
        }
        if (v60 == 6) {
          goto LABEL_79;
        }
      }
      else
      {
        if (v59 != 65552)
        {
          if (v59 != 65568 || v60 != 5) {
            goto LABEL_158;
          }
LABEL_79:
          int v62 = *(_DWORD *)(v56 + 16);
          if ((a5 & 1) == 0 && !v62) {
            goto LABEL_261;
          }
          uint64_t v63 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v58 + 96))(v58);
          uint64_t v64 = v63[1];
          BOOL v65 = v64 == *v63 || (v64 - *v63) >> 3 == v62;
          if (v65 && (v64 != *v63 || v62 == 1 && *(void *)(*(void *)(v56 + 24) + 8) == 1))
          {
            uint64_t v66 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v58 + 96))(v58);
              goto LABEL_261;
            BOOL v67 = a5 == 0;
            if (a5) {
              int v15 = 11;
            }
            else {
              int v15 = 15;
            }
            if (v67) {
              uint64_t v68 = "output";
            }
            else {
              uint64_t v68 = "input";
            }
            std::string::basic_string[abi:ne180100]<0>(&v199, v68);
            std::operator+<char>();
            uint64_t v69 = std::string::append(&v193, " '");
            long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
            v194.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v70;
            v69->__r_.__value_.__l.__size_ = 0;
            v69->__r_.__value_.__r.__words[2] = 0;
            v69->__r_.__value_.__r.__words[0] = 0;
            int v71 = *(char *)(a2 + 23);
            if (v71 >= 0) {
              long long v72 = (const std::string::value_type *)a2;
            }
            else {
              long long v72 = *(const std::string::value_type **)a2;
            }
            if (v71 >= 0) {
              std::string::size_type v73 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              std::string::size_type v73 = *(void *)(a2 + 8);
            }
            uint64_t v74 = std::string::append(&v194, v72, v73);
            long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
            v195.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v75;
            v74->__r_.__value_.__l.__size_ = 0;
            v74->__r_.__value_.__r.__words[2] = 0;
            v74->__r_.__value_.__r.__words[0] = 0;
            uint64_t v76 = std::string::append(&v195, "' has a different shape than its corresponding ");
            long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
            v196.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v77;
            v76->__r_.__value_.__l.__size_ = 0;
            v76->__r_.__value_.__r.__words[2] = 0;
            v76->__r_.__value_.__r.__words[0] = 0;
            if ((v192 & 0x80u) == 0) {
              p_p = (const std::string::value_type *)&__p;
            }
            else {
              p_p = (const std::string::value_type *)__p;
            }
            if ((v192 & 0x80u) == 0) {
              std::string::size_type v27 = v192;
            }
            else {
              std::string::size_type v27 = v191;
            }
          }
          else
          {
            BOOL v175 = a5 == 0;
            if (a5) {
              int v15 = 10;
            }
            else {
              int v15 = 14;
            }
            if (v175) {
              std::string v176 = "output";
            }
            else {
              std::string v176 = "input";
            }
            std::string::basic_string[abi:ne180100]<0>(&v199, v176);
            std::operator+<char>();
            uint64_t v177 = std::string::append(&v193, " '");
            long long v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
            v194.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v178;
            v177->__r_.__value_.__l.__size_ = 0;
            v177->__r_.__value_.__r.__words[2] = 0;
            v177->__r_.__value_.__r.__words[0] = 0;
            int v179 = *(char *)(a2 + 23);
            if (v179 >= 0) {
              int v180 = (const std::string::value_type *)a2;
            }
            else {
              int v180 = *(const std::string::value_type **)a2;
            }
            if (v179 >= 0) {
              std::string::size_type v181 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              std::string::size_type v181 = *(void *)(a2 + 8);
            }
            uint64_t v182 = std::string::append(&v194, v180, v181);
            long long v183 = *(_OWORD *)&v182->__r_.__value_.__l.__data_;
            v195.__r_.__value_.__r.__words[2] = v182->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v183;
            v182->__r_.__value_.__l.__size_ = 0;
            v182->__r_.__value_.__r.__words[2] = 0;
            v182->__r_.__value_.__r.__words[0] = 0;
            uint64_t v184 = std::string::append(&v195, "' has a different rank than its corresponding ");
            long long v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
            v196.__r_.__value_.__r.__words[2] = v184->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v185;
            v184->__r_.__value_.__l.__size_ = 0;
            v184->__r_.__value_.__r.__words[2] = 0;
            v184->__r_.__value_.__r.__words[0] = 0;
            if ((v192 & 0x80u) == 0) {
              p_p = (const std::string::value_type *)&__p;
            }
            else {
              p_p = (const std::string::value_type *)__p;
            }
            if ((v192 & 0x80u) == 0) {
              std::string::size_type v27 = v192;
            }
            else {
              std::string::size_type v27 = v191;
            }
          }
LABEL_27:
          double v28 = std::string::append(&v196, p_p, v27);
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v197.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          int v30 = std::string::append(&v197, " to main.");
          long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v198.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)a1 = 12;
          *((_DWORD *)a1 + 1) = v15;
          std::operator+<char>();
          if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v198.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v197.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v196.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v195.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v194.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v32 = (void *)v193.__r_.__value_.__r.__words[0];
LABEL_207:
            operator delete(v32);
            goto LABEL_208;
          }
          goto LABEL_208;
        }
        if (v60 == 4) {
          goto LABEL_79;
        }
      }
LABEL_158:
      BOOL v125 = a5 == 0;
      if (a5) {
        int v15 = 12;
      }
      else {
        int v15 = 16;
      }
      if (v125) {
        uint64_t v126 = "output";
      }
      else {
        uint64_t v126 = "input";
      }
      std::string::basic_string[abi:ne180100]<0>(&v199, v126);
      std::operator+<char>();
      uint64_t v127 = std::string::append(&v193, " '");
      long long v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
      v194.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v128;
      v127->__r_.__value_.__l.__size_ = 0;
      v127->__r_.__value_.__r.__words[2] = 0;
      v127->__r_.__value_.__r.__words[0] = 0;
      int v129 = *(char *)(a2 + 23);
      if (v129 >= 0) {
        uint64_t v130 = (const std::string::value_type *)a2;
      }
      else {
        uint64_t v130 = *(const std::string::value_type **)a2;
      }
      if (v129 >= 0) {
        std::string::size_type v131 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v131 = *(void *)(a2 + 8);
      }
      uint64_t v132 = std::string::append(&v194, v130, v131);
      long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
      v195.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v133;
      v132->__r_.__value_.__l.__size_ = 0;
      v132->__r_.__value_.__r.__words[2] = 0;
      v132->__r_.__value_.__r.__words[0] = 0;
      int v134 = std::string::append(&v195, "' has a different type than its corresponding ");
      long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
      v196.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v135;
      v134->__r_.__value_.__l.__size_ = 0;
      v134->__r_.__value_.__r.__words[2] = 0;
      v134->__r_.__value_.__r.__words[0] = 0;
      if ((v192 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v192 & 0x80u) == 0) {
        std::string::size_type v27 = v192;
      }
      else {
        std::string::size_type v27 = v191;
      }
      goto LABEL_27;
    case 6:
      uint64_t v33 = *(void *)(a3 + 24);
      uint64_t v34 = (*(uint64_t (**)(MIL::IRValueType *))(*(void *)a4 + 48))(a4);
      if (!v34)
      {
        if (a5) {
          uint64_t v90 = "input";
        }
        else {
          uint64_t v90 = "output";
        }
        std::string::basic_string[abi:ne180100]<0>(&v199, v90);
        std::operator+<char>();
        int v91 = std::string::append(&v195, " '");
        long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
        v196.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v92;
        v91->__r_.__value_.__l.__size_ = 0;
        v91->__r_.__value_.__r.__words[2] = 0;
        v91->__r_.__value_.__r.__words[0] = 0;
        int v93 = *(char *)(a2 + 23);
        if (v93 >= 0) {
          uint64_t v94 = (const std::string::value_type *)a2;
        }
        else {
          uint64_t v94 = *(const std::string::value_type **)a2;
        }
        if (v93 >= 0) {
          std::string::size_type v95 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v95 = *(void *)(a2 + 8);
        }
        uint64_t v96 = std::string::append(&v196, v94, v95);
        long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        v197.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        int v98 = std::string::append(&v197, "' is not a dictionary.");
        long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
        v198.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v99;
        v98->__r_.__value_.__l.__size_ = 0;
        v98->__r_.__value_.__r.__words[2] = 0;
        v98->__r_.__value_.__r.__words[0] = 0;
        *(void *)a1 = 0x90000000CLL;
        std::operator+<char>();
        goto LABEL_199;
      }
      int v35 = *(_DWORD *)(v33 + 28);
      switch(v35)
      {
        case 0:
          if (a5) {
            unint64_t v139 = "input";
          }
          else {
            unint64_t v139 = "output";
          }
          std::string::basic_string[abi:ne180100]<0>(&v199, v139);
          std::operator+<char>();
          uint64_t v140 = std::string::append(&v195, " '");
          long long v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
          v196.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v141;
          v140->__r_.__value_.__l.__size_ = 0;
          v140->__r_.__value_.__r.__words[2] = 0;
          v140->__r_.__value_.__r.__words[0] = 0;
          int v142 = *(char *)(a2 + 23);
          if (v142 >= 0) {
            long long v143 = (const std::string::value_type *)a2;
          }
          else {
            long long v143 = *(const std::string::value_type **)a2;
          }
          if (v142 >= 0) {
            std::string::size_type v144 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            std::string::size_type v144 = *(void *)(a2 + 8);
          }
          long long v145 = std::string::append(&v196, v143, v144);
          long long v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
          v197.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v146;
          v145->__r_.__value_.__l.__size_ = 0;
          v145->__r_.__value_.__r.__words[2] = 0;
          v145->__r_.__value_.__r.__words[0] = 0;
          uint64_t v147 = std::string::append(&v197, "' has invalid key type.");
          long long v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
          v198.__r_.__value_.__r.__words[2] = v147->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v148;
          v147->__r_.__value_.__l.__size_ = 0;
          v147->__r_.__value_.__r.__words[2] = 0;
          v147->__r_.__value_.__r.__words[0] = 0;
          *(void *)a1 = 0x90000000CLL;
          std::operator+<char>();
          goto LABEL_199;
        case 2:
          a4 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v34 + 64))(v34);
LABEL_5:
          int v11 = 3;
          break;
        case 1:
          a4 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v34 + 64))(v34);
          break;
        default:
          goto LABEL_261;
      }
LABEL_6:
      uint64_t v12 = (MIL::IRTensorValueType *)(*(uint64_t (**)(MIL::IRValueType *))(*(void *)a4 + 24))(a4);
      double v13 = v12;
      if (!v12
        || !MIL::IRTensorValueType::IsScalar(v12)
        || (*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v13 + 88))(v13) != v11)
      {
        BOOL v14 = a5 == 0;
        if (a5) {
          int v15 = 12;
        }
        else {
          int v15 = 16;
        }
        if (v14) {
          int v16 = "output";
        }
        else {
          int v16 = "input";
        }
        std::string::basic_string[abi:ne180100]<0>(&v199, v16);
        std::operator+<char>();
        std::string::size_type v17 = std::string::append(&v193, " '");
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v194.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        int v19 = *(char *)(a2 + 23);
        if (v19 >= 0) {
          long long v20 = (const std::string::value_type *)a2;
        }
        else {
          long long v20 = *(const std::string::value_type **)a2;
        }
        if (v19 >= 0) {
          std::string::size_type v21 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v21 = *(void *)(a2 + 8);
        }
        long long v22 = std::string::append(&v194, v20, v21);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v195.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        std::string::size_type v24 = std::string::append(&v195, "' has a different type than its corresponding ");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v196.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        if ((v192 & 0x80u) == 0) {
          p_p = (const std::string::value_type *)&__p;
        }
        else {
          p_p = (const std::string::value_type *)__p;
        }
        if ((v192 & 0x80u) == 0) {
          std::string::size_type v27 = v192;
        }
        else {
          std::string::size_type v27 = v191;
        }
        goto LABEL_27;
      }
      goto LABEL_261;
    case 8:
      uint64_t v36 = *(void *)(a3 + 24);
      int v37 = (MIL::IRStateValueType *)MIL::IRValueType::TryCastAsStateType(a4);
      if (!v37
        || (Wrappeduint64_t Type = MIL::IRStateValueType::GetWrappedType(v37),
            uint64_t v39 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)(*(uint64_t (**)(uint64_t))(*(void *)WrappedType + 24))(WrappedType),
            (long long v40 = v39) == 0))
      {
        std::operator+<char>();
        uint64_t v100 = std::string::append(&v198, "' is not a tensor.");
        long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
        std::string::size_type v200 = v100->__r_.__value_.__r.__words[2];
        long long v199 = v101;
        v100->__r_.__value_.__l.__size_ = 0;
        v100->__r_.__value_.__r.__words[2] = 0;
        v100->__r_.__value_.__r.__words[0] = 0;
        *(void *)a1 = 0x90000000CLL;
        std::operator+<char>();
        goto LABEL_263;
      }
      if (*(_DWORD *)(v36 + 28) == 1)
      {
        std::string v41 = *(uint64_t **)(v36 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v39);
        std::string v41 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      int v136 = *((_DWORD *)v41 + 9);
      long long v137 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)(*(uint64_t (**)(CoreML::Specification::protobuf_FeatureTypes_2eproto *))(*(void *)v40 + 88))(v40);
      if (v136 > 65599)
      {
        if (v136 != 65600)
        {
          if (v136 != 131104 || v137 != 11) {
            goto LABEL_220;
          }
          goto LABEL_186;
        }
        if (v137 == 6) {
          goto LABEL_186;
        }
LABEL_220:
        std::operator+<char>();
        std::string::size_type v153 = std::string::append(&v198, "' has a different type than its corresponding parameter to main.");
        long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
        std::string::size_type v200 = v153->__r_.__value_.__r.__words[2];
        long long v199 = v154;
        v153->__r_.__value_.__l.__size_ = 0;
        v153->__r_.__value_.__r.__words[2] = 0;
        v153->__r_.__value_.__r.__words[0] = 0;
        *(void *)a1 = 0xC0000000CLL;
        std::operator+<char>();
        goto LABEL_263;
      }
      if (v136 == 65552)
      {
        if (v137 == 4) {
          goto LABEL_186;
        }
        goto LABEL_220;
      }
      if (v136 != 65568 || v137 != 5) {
        goto LABEL_220;
      }
LABEL_186:
      if (*(_DWORD *)(v36 + 28) == 1)
      {
        uint64_t v138 = *(uint64_t **)(v36 + 16);
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v137);
        uint64_t v138 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      uint64_t v150 = *((int *)v138 + 4);
      int v151 = (CoreML::Specification::protobuf_FeatureTypes_2eproto *)(*(uint64_t (**)(CoreML::Specification::protobuf_FeatureTypes_2eproto *))(*(void *)v40 + 96))(v40);
      if (v150 == (uint64_t)(*((void *)v151 + 1) - *(void *)v151) >> 3)
      {
        if (*(_DWORD *)(v36 + 28) == 1)
        {
          uint64_t v152 = *(uint64_t **)(v36 + 16);
        }
        else
        {
          CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v151);
          uint64_t v152 = &CoreML::Specification::_ArrayFeatureType_default_instance_;
        }
        long long v172 = (uint64_t *)(*(uint64_t (**)(CoreML::Specification::protobuf_FeatureTypes_2eproto *))(*(void *)v40 + 96))(v40);
          goto LABEL_261;
        std::operator+<char>();
        uint64_t v173 = std::string::append(&v198, "' has a different shape than its corresponding parameter to main.");
        long long v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
        std::string::size_type v200 = v173->__r_.__value_.__r.__words[2];
        long long v199 = v174;
        v173->__r_.__value_.__l.__size_ = 0;
        v173->__r_.__value_.__r.__words[2] = 0;
        v173->__r_.__value_.__r.__words[0] = 0;
        *(void *)a1 = 0xB0000000CLL;
        std::operator+<char>();
      }
      else
      {
        std::operator+<char>();
        long long v155 = std::string::append(&v198, "' has a different rank than its corresponding parameter to main.");
        long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
        std::string::size_type v200 = v155->__r_.__value_.__r.__words[2];
        long long v199 = v156;
        v155->__r_.__value_.__l.__size_ = 0;
        v155->__r_.__value_.__r.__words[2] = 0;
        v155->__r_.__value_.__r.__words[0] = 0;
        *(void *)a1 = 0xA0000000CLL;
        std::operator+<char>();
      }
LABEL_263:
      if (SHIBYTE(v200) < 0) {
        operator delete((void *)v199);
      }
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v149 = (void *)v198.__r_.__value_.__r.__words[0];
        goto LABEL_210;
      }
LABEL_266:
      if ((char)v192 < 0) {
        operator delete(__p);
      }
      return;
    default:
      if (a5) {
        uint64_t v186 = "input";
      }
      else {
        uint64_t v186 = "output";
      }
      std::string::basic_string[abi:ne180100]<0>(&v199, v186);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      long long v188 = std::string::append(&v197, " type.");
      long long v189 = *(_OWORD *)&v188->__r_.__value_.__l.__data_;
      v198.__r_.__value_.__r.__words[2] = v188->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v189;
      v188->__r_.__value_.__l.__size_ = 0;
      v188->__r_.__value_.__r.__words[2] = 0;
      v188->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v198);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
}

void sub_19EA02964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 105) < 0) {
    operator delete(*(void **)(v47 - 128));
  }
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v47 - 73) < 0) {
    operator delete(*(void **)(v47 - 96));
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(std::string *result, std::string **a2, const CoreML::Specification::FeatureDescription **a3, unsigned int a4, unsigned int a5)
{
  unsigned int v9 = (google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    int v11 = a3;
    uint64_t v12 = a2;
    do
    {
      BOOL v14 = *v11++;
      double v13 = v14;
      int v15 = *v12++;
      uint64_t result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureDescription>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    long long v18 = *v9;
    int v19 = (google::protobuf::Arena ***)&a2[a5];
    long long v20 = &a3[a5];
    do
    {
      std::string::size_type v21 = *v20;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::FeatureDescription::FeatureDescription((CoreML::Specification::FeatureDescription *)Aligned);
      long long v23 = google::protobuf::Arena::AllocateAligned(v18, 0, 24);
      *long long v23 = (google::protobuf::Arena *)Aligned;
      v23[1] = (google::protobuf::Arena *)google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureDescription>;
      std::string::size_type v24 = (unint64_t *)((char *)v18 + 32);
      do
        unint64_t v25 = __ldxr(v24);
      while (__stxr((unint64_t)v23, v24));
      v23[2] = (google::protobuf::Arena *)v25;
      uint64_t result = google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureDescription>::Merge(v21, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_19EA02D3C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3C1920](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureDescription>::Merge(const CoreML::Specification::FeatureDescription *a1, std::string *a2)
{
  return CoreML::Specification::FeatureDescription::MergeFrom(a2, a1);
}

uint64_t anonymous namespace'::CompatibleShapes(uint64_t a1, uint64_t *a2, int a3)
{
  int v5 = *(_DWORD *)(a1 + 60);
  if (v5 == 31)
  {
    if (a3)
    {
      uint64_t v19 = *(void *)(a1 + 40);
      if (*(int *)(v19 + 24) >= 1)
      {
        unint64_t v20 = 0;
        do
        {
          if (v20 >= (a2[1] - *a2) >> 3) {
            std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]();
          }
          if ((result & 1) == 0) {
            break;
          }
          ++v20;
        }
        while ((uint64_t)v20 < *(int *)(v19 + 24));
        return result;
      }
    }
    return 1;
  }
  if (v5 == 21)
  {
    if (a3)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = *(void *)(v6 + 32);
      long long v8 = v7 ? (uint64_t *)(v7 + 8) : 0;
      uint64_t v9 = *(int *)(v6 + 24);
      if (v9)
      {
        uint64_t v10 = &v8[v9];
        uint64_t v11 = *a2;
        uint64_t v12 = a2[1];
        while (v12 == v11)
        {
          uint64_t v12 = v11;
LABEL_16:
          ++v8;
          uint64_t result = 1;
          if (v8 == v10) {
            return result;
          }
        }
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        uint64_t v15 = *v8;
        while (1)
        {
          uint64_t v16 = *(void *)(*(void *)(v15 + 24) + (v13 >> 29) + 8);
          uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(v11 + 8 * v14) + 16))(*(void *)(v11 + 8 * v14));
          if (v17)
          {
            if ((*(uint64_t (**)(uint64_t))(*(void *)v17 + 48))(v17) != v16) {
              return 0;
            }
          }
          ++v14;
          uint64_t v11 = *a2;
          uint64_t v12 = a2[1];
          v13 += 0x100000000;
          if (v14 >= (v12 - *a2) >> 3) {
            goto LABEL_16;
          }
        }
      }
    }
    return 1;
  }
  uint64_t v21 = *a2;
  if (a2[1] == *a2) {
    return 1;
  }
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v21 + 8 * v23) + 16))(*(void *)(v21 + 8 * v23));
    if (!result) {
      break;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result) != *(void *)(*(void *)(a1 + 24)
                                                                                              + (v22 >> 29)
                                                                                              + 8))
      return 0;
    ++v23;
    uint64_t v21 = *a2;
    v22 += 0x100000000;
    if (v23 >= (a2[1] - *a2) >> 3) {
      return 1;
    }
  }
  return result;
}

BOOL anonymous namespace'::CompatibleSizes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
    return 0;
  if (*(void *)(a4 + 8) - *(void *)a4 <= 8uLL) {
    goto LABEL_12;
  }
    return 0;
  if (*(void *)(a4 + 8) - *(void *)a4 <= 0x10uLL) {
    goto LABEL_12;
  }
    return 0;
  if (*(void *)(a4 + 8) - *(void *)a4 <= 0x18uLL) {
LABEL_12:
  }
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__throw_out_of_range[abi:ne180100]();
  uint64_t v8 = *(void *)(*(void *)a4 + 24);
}

BOOL anonymous namespace'::CompatibleDimensions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4) == a1;
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2) != 0;
  }
}

{
  uint64_t v4;

  return *(void *)(a1 + 16) == *(void *)(a1 + 24)
      && (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2)) != 0
      && (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4) == *(void *)(a1 + 16)
      || (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2) != 0;
}

void sub_19EA0340C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA035E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19EA03B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  _Unwind_Resume(a1);
}

void sub_19EA03ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19EA041AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA0428C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA04AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA04B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19EA04C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  ElapsedTimeRecorder::~ElapsedTimeRecorder((id *)va);
  _Unwind_Resume(a1);
}

void sub_19EA04D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *___ZL29directOutputModeFunctionTablev_block_invoke()
{
  LOWORD(v1) = 1;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 5;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5DirectOutputModeTensorToMultiArray;
  LOWORD(v1) = 1;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 6;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5DirectOutputModeDirect;
  LOWORD(v1) = 1;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5DirectOutputModeDirect;
  LOWORD(v1) = 1;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 4;
  uint64_t result = std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1);
  result[4] = MLE5DirectOutputModeTensorToPixelBuffer;
  return result;
}

void *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,MLE5DirectMode (*)(e5rt_io_port *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *((void *)a1 + 1);
  unint64_t v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  unint64_t v8 = *((void *)&directOutputModeFunctionTable(void)::table + 1);
  if (*((void *)&directOutputModeFunctionTable(void)::table + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&directOutputModeFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((void *)&directOutputModeFunctionTable(void)::table + 1)) {
        unint64_t v2 = v7 % *((void *)&directOutputModeFunctionTable(void)::table + 1);
      }
    }
    else
    {
      unint64_t v2 = v7 & (*((void *)&directOutputModeFunctionTable(void)::table + 1) - 1);
    }
    uint64_t v10 = *(void ***)(directOutputModeFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((void *)&directOutputModeFunctionTable(void)::table + 1)) {
                v12 %= *((void *)&directOutputModeFunctionTable(void)::table + 1);
              }
            }
            else
            {
              v12 &= *((void *)&directOutputModeFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  float v13 = (float)(unint64_t)(qword_1EB4DCD28 + 1);
  if (!v8 || (float)(*(float *)&dword_1EB4DCD30 * (float)v8) < v13)
  {
    BOOL v14 = 1;
    if (v8 >= 3) {
      BOOL v14 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v8);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1EB4DCD30);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)&directOutputModeFunctionTable(void)::table + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)(unint64_t)qword_1EB4DCD28 / *(float *)&dword_1EB4DCD30);
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)&directOutputModeFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v18 = operator new(8 * *(void *)&prime);
          uint64_t v19 = (void *)directOutputModeFunctionTable(void)::table;
          *(void *)&directOutputModeFunctionTable(void)::table = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)&directOutputModeFunctionTable(void)::table + 1) = prime;
          do
            *(void *)(directOutputModeFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void **)qword_1EB4DCD20;
          if (qword_1EB4DCD20)
          {
            unint64_t v22 = *(void *)(qword_1EB4DCD20 + 8);
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(directOutputModeFunctionTable(void)::table + 8 * v22) = &qword_1EB4DCD20;
            for (uint64_t i = *v21; i; v22 = v28)
            {
              unint64_t v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(void *)(directOutputModeFunctionTable(void)::table + 8 * v28))
                {
                  *(void *)(directOutputModeFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = v21;
                  goto LABEL_57;
                }
                *uint64_t v21 = (void *)*i;
                *uint64_t i = **(void **)(directOutputModeFunctionTable(void)::table + 8 * v28);
                **(void **)(directOutputModeFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = i;
                uint64_t i = v21;
              }
              unint64_t v28 = v22;
LABEL_57:
              uint64_t v21 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        uint64_t v33 = (void *)directOutputModeFunctionTable(void)::table;
        *(void *)&directOutputModeFunctionTable(void)::table = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v8 = 0;
        *((void *)&directOutputModeFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v29 = directOutputModeFunctionTable(void)::table;
  int v30 = *(void **)(directOutputModeFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *uint64_t v11 = *v30;
LABEL_74:
    *int v30 = v11;
    goto LABEL_75;
  }
  *uint64_t v11 = qword_1EB4DCD20;
  qword_1EB4DCD20 = (uint64_t)v11;
  *(void *)(v29 + 8 * v2) = &qword_1EB4DCD20;
  if (*v11)
  {
    unint64_t v31 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8) {
        v31 %= v8;
      }
    }
    else
    {
      v31 &= v8 - 1;
    }
    int v30 = (void *)(directOutputModeFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1EB4DCD28;
  return v11;
}

void sub_19EA05288(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *MLE5DirectOutputModeTensorToPixelBuffer(uint64_t a1, void *a2, void *a3)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v15);
  uint64_t v5 = [v4 imageConstraint];
  uint64_t v14 = 0;
  MLE5GetShapeFromTensorDescriptor();
  uint64_t v6 = +[MLLogging coreChannel];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    float v13 = [v4 name];
    *(_DWORD *)buf = 138412546;
    uint64_t v17 = v13;
    __int16 v18 = 2048;
    uint64_t v19 = v14;
    _os_log_error_impl(&dword_19E58B000, v6, OS_LOG_TYPE_ERROR, "A tensor representation for the image feature named %@ should have at least two dimensions, but its rank was %zu", buf, 0x16u);
  }
  if (a3)
  {
    unint64_t v7 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v20 = *MEMORY[0x1E4F28568];
    unint64_t v8 = NSString;
    uint8x8_t v9 = [v4 name];
    uint64_t v10 = [v8 stringWithFormat:@"A tensor representation for the image feature named %@ should have at least two dimensions, but its rank was %zu", v9, v14];
    v21[0] = v10;
    uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:&v20 count:1];
    *a3 = [v7 errorWithDomain:@"com.apple.CoreML" code:1 userInfo:v11];

    a3 = 0;
  }

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v15);
  return a3;
}

void sub_19EA05660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);

  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va1);

  _Unwind_Resume(a1);
}

uint64_t MLE5DirectOutputModeDirect()
{
  return 1;
}

uint64_t MLE5DirectOutputModeTensorToMultiArray(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  MLE5TensorDescriptorOf((e5rt_io_port *)&v12);
  uint64_t v5 = [v4 multiArrayConstraint];
  uint64_t v6 = MLE5MultiArrayShapeForTensor();
  if (([v5 isAllowedShape:v6 error:a3] & 1) != 0
    || ([v5 shapeConstraint],
        unint64_t v7 = objc_claimAutoreleasedReturnValue(),
        [v7 findAvailableShape:v6],
        unint64_t v8 = objc_claimAutoreleasedReturnValue(),
        v8,
        v7,
        v8))
  {
    uint64_t v9 = MLE5MultiArrayDataTypeForTensor();
    if (v9 == [v5 dataType]) {
      unsigned __int8 v10 = 1;
    }
    else {
      unsigned __int8 v10 = 2;
    }
  }
  else
  {
    unsigned __int8 v10 = 0;
  }

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100](&v12);
  return v10;
}

void sub_19EA05810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<e5rt_tensor_desc,MLE5ObjectDeleter<e5rt_tensor_desc>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *___ZL30outputReusabilityFunctionTablev_block_invoke()
{
  LOWORD(v1) = 769;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5OutputReusabilityTensorPortHasSamePixelBufferSurface;
  LOWORD(v1) = 1025;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5OutputReusabilityNo;
  LOWORD(v1) = 513;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5OutputReusabilityTensorPortHasSameMultiArray;
  LOWORD(v1) = 257;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  uint64_t result = std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1);
  result[4] = MLE5OutputReusabilityTensorPortHasSameMultiArray;
  return result;
}

void *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(objc_object *,e5rt_io_port *)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *((void *)a1 + 1);
  unint64_t v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  unint64_t v8 = *((void *)&outputReusabilityFunctionTable(void)::table + 1);
  if (*((void *)&outputReusabilityFunctionTable(void)::table + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&outputReusabilityFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((void *)&outputReusabilityFunctionTable(void)::table + 1)) {
        unint64_t v2 = v7 % *((void *)&outputReusabilityFunctionTable(void)::table + 1);
      }
    }
    else
    {
      unint64_t v2 = v7 & (*((void *)&outputReusabilityFunctionTable(void)::table + 1) - 1);
    }
    unsigned __int8 v10 = *(void ***)(outputReusabilityFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((void *)&outputReusabilityFunctionTable(void)::table + 1)) {
                v12 %= *((void *)&outputReusabilityFunctionTable(void)::table + 1);
              }
            }
            else
            {
              v12 &= *((void *)&outputReusabilityFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  float v13 = (float)(unint64_t)(qword_1E945FD20 + 1);
  if (!v8 || (float)(*(float *)&dword_1E945FD28 * (float)v8) < v13)
  {
    BOOL v14 = 1;
    if (v8 >= 3) {
      BOOL v14 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v8);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1E945FD28);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)&outputReusabilityFunctionTable(void)::table + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)(unint64_t)qword_1E945FD20 / *(float *)&dword_1E945FD28);
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)&outputReusabilityFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          __int16 v18 = operator new(8 * *(void *)&prime);
          uint64_t v19 = (void *)outputReusabilityFunctionTable(void)::table;
          *(void *)&outputReusabilityFunctionTable(void)::table = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)&outputReusabilityFunctionTable(void)::table + 1) = prime;
          do
            *(void *)(outputReusabilityFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void **)qword_1E945FD18;
          if (qword_1E945FD18)
          {
            unint64_t v22 = *(void *)(qword_1E945FD18 + 8);
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(outputReusabilityFunctionTable(void)::table + 8 * v22) = &qword_1E945FD18;
            for (uint64_t i = *v21; i; v22 = v28)
            {
              unint64_t v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(void *)(outputReusabilityFunctionTable(void)::table + 8 * v28))
                {
                  *(void *)(outputReusabilityFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = v21;
                  goto LABEL_57;
                }
                *uint64_t v21 = (void *)*i;
                *uint64_t i = **(void **)(outputReusabilityFunctionTable(void)::table + 8 * v28);
                **(void **)(outputReusabilityFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = i;
                uint64_t i = v21;
              }
              unint64_t v28 = v22;
LABEL_57:
              uint64_t v21 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        uint64_t v33 = (void *)outputReusabilityFunctionTable(void)::table;
        *(void *)&outputReusabilityFunctionTable(void)::table = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v8 = 0;
        *((void *)&outputReusabilityFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v29 = outputReusabilityFunctionTable(void)::table;
  int v30 = *(void **)(outputReusabilityFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *uint64_t v11 = *v30;
LABEL_74:
    *int v30 = v11;
    goto LABEL_75;
  }
  *uint64_t v11 = qword_1E945FD18;
  qword_1E945FD18 = (uint64_t)v11;
  *(void *)(v29 + 8 * v2) = &qword_1E945FD18;
  if (*v11)
  {
    unint64_t v31 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8) {
        v31 %= v8;
      }
    }
    else
    {
      v31 &= v8 - 1;
    }
    int v30 = (void *)(outputReusabilityFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1E945FD20;
  return v11;
}

void sub_19EA05D60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL MLE5OutputReusabilityTensorPortHasSameMultiArray(void *a1)
{
  id v1 = a1;
  MLE5BufferObjectBoundTo((e5rt_io_port *)&v10);
  if (v10)
  {
    uint64_t v2 = MLE5DataPointerOfBufferObject();
    uint64_t v6 = 0;
    unint64_t v7 = &v6;
    uint64_t v8 = 0x2020000000;
    char v9 = 0;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = __MLE5OutputReusabilityTensorPortHasSameMultiArray_block_invoke;
    v5[3] = &unk_1E59A4E18;
    v5[4] = &v6;
    void v5[5] = v2;
    [v1 getBytesWithHandler:v5];
    BOOL v3 = *((unsigned char *)v7 + 24) != 0;
    _Block_object_dispose(&v6, 8);
  }
  else
  {
    BOOL v3 = 0;
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v10, 0);

  return v3;
}

void sub_19EA05E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)(v9 - 24), 0);

  _Unwind_Resume(a1);
}

uint64_t __MLE5OutputReusabilityTensorPortHasSameMultiArray_block_invoke(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(result + 40) == a2;
  return result;
}

uint64_t MLE5OutputReusabilityNo()
{
  return 0;
}

uint64_t MLE5OutputReusabilityTensorPortHasSamePixelBufferSurface(void *a1)
{
  id v1 = a1;
  MLE5BufferObjectBoundTo((e5rt_io_port *)&v4);
  if (v4)
  {
    uint64_t v2 = MLE5IOSurfaceOfBufferObject();
    if (v2) {
      uint64_t v2 = v2 == (void)CVPixelBufferGetIOSurface(v1);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100](&v4, 0);

  return v2;
}

void sub_19EA05F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<e5rt_buffer_object,MLE5ObjectDeleter<e5rt_buffer_object>>::reset[abi:ne180100]((uint64_t *)va, 0);

  _Unwind_Resume(a1);
}

void *___ZL23outputCopyFunctionTablev_block_invoke()
{
  LOWORD(v1) = 769;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5CopyTensorToPixelBuffer;
  LOWORD(v1) = 1025;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5CopyTensorToPixelBuffer;
  LOWORD(v1) = 513;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5CopyTensorToMultiArray;
  LOWORD(v1) = 257;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1)[4] = MLE5CopyTensorToMultiArray;
  LOWORD(v1) = 1026;
  BYTE2(v1) = 0;
  *((void *)&v1 + 1) = 0;
  uint64_t result = std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>((unsigned __int8 *)&v1, &v1);
  result[4] = MLE5CopySurfaceToPixelBuffer;
  return result;
}

void *std::__hash_table<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::__unordered_map_hasher<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,MLE5PortBindStrategyKey::hash,std::equal_to<MLE5PortBindStrategyKey>,true>,std::__unordered_map_equal<MLE5PortBindStrategyKey,std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>,std::equal_to<MLE5PortBindStrategyKey>,MLE5PortBindStrategyKey::hash,true>,std::allocator<std::__hash_value_type<MLE5PortBindStrategyKey,BOOL (*)(e5rt_io_port *,objc_object *,MLFeatureDescription *,NSError * {__autoreleasing}*)>>>::__emplace_unique_key_args<MLE5PortBindStrategyKey,std::piecewise_construct_t const&,std::tuple<MLE5PortBindStrategyKey&&>,std::tuple<>>(unsigned __int8 *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *((void *)a1 + 1);
  unint64_t v7 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
  unint64_t v8 = *((void *)&outputCopyFunctionTable(void)::table + 1);
  if (*((void *)&outputCopyFunctionTable(void)::table + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&outputCopyFunctionTable(void)::table + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = ((unint64_t)*a1 << 24) | (v4 << 16) | (v5 << 8) | v6;
      if (v7 >= *((void *)&outputCopyFunctionTable(void)::table + 1)) {
        unint64_t v2 = v7 % *((void *)&outputCopyFunctionTable(void)::table + 1);
      }
    }
    else
    {
      unint64_t v2 = v7 & (*((void *)&outputCopyFunctionTable(void)::table + 1) - 1);
    }
    uint64_t v10 = *(void ***)(outputCopyFunctionTable(void)::table + 8 * v2);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == *a1
              && __PAIR64__(*((unsigned __int8 *)v11 + 18), *((unsigned __int8 *)v11 + 17)) == __PAIR64__(v5, v4)
              && v11[3] == v6)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= *((void *)&outputCopyFunctionTable(void)::table + 1)) {
                v12 %= *((void *)&outputCopyFunctionTable(void)::table + 1);
              }
            }
            else
            {
              v12 &= *((void *)&outputCopyFunctionTable(void)::table + 1) - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a2;
  v11[4] = 0;
  float v13 = (float)(unint64_t)(qword_1E946A408 + 1);
  if (!v8 || (float)(*(float *)&dword_1E946A410 * (float)v8) < v13)
  {
    BOOL v14 = 1;
    if (v8 >= 3) {
      BOOL v14 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v8);
    unint64_t v16 = vcvtps_u32_f32(v13 / *(float *)&dword_1E946A410);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)&outputCopyFunctionTable(void)::table + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)(unint64_t)qword_1E946A408 / *(float *)&dword_1E946A410);
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)&outputCopyFunctionTable(void)::table + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          __int16 v18 = operator new(8 * *(void *)&prime);
          uint64_t v19 = (void *)outputCopyFunctionTable(void)::table;
          *(void *)&outputCopyFunctionTable(void)::table = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)&outputCopyFunctionTable(void)::table + 1) = prime;
          do
            *(void *)(outputCopyFunctionTable(void)::table + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void **)qword_1E946A400;
          if (qword_1E946A400)
          {
            unint64_t v22 = *(void *)(qword_1E946A400 + 8);
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(outputCopyFunctionTable(void)::table + 8 * v22) = &qword_1E946A400;
            for (uint64_t i = *v21; i; v22 = v28)
            {
              unint64_t v28 = i[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(void *)(outputCopyFunctionTable(void)::table + 8 * v28))
                {
                  *(void *)(outputCopyFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = v21;
                  goto LABEL_57;
                }
                *uint64_t v21 = (void *)*i;
                *uint64_t i = **(void **)(outputCopyFunctionTable(void)::table + 8 * v28);
                **(void **)(outputCopyFunctionTable(void)::table + 8 * v2_Block_object_dispose(&a9, 8) = i;
                uint64_t i = v21;
              }
              unint64_t v28 = v22;
LABEL_57:
              uint64_t v21 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_61;
        }
        uint64_t v33 = (void *)outputCopyFunctionTable(void)::table;
        *(void *)&outputCopyFunctionTable(void)::table = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v8 = 0;
        *((void *)&outputCopyFunctionTable(void)::table + 1) = 0;
      }
    }
LABEL_61:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v29 = outputCopyFunctionTable(void)::table;
  int v30 = *(void **)(outputCopyFunctionTable(void)::table + 8 * v2);
  if (v30)
  {
    *uint64_t v11 = *v30;
LABEL_74:
    *int v30 = v11;
    goto LABEL_75;
  }
  *uint64_t v11 = qword_1E946A400;
  qword_1E946A400 = (uint64_t)v11;
  *(void *)(v29 + 8 * v2) = &qword_1E946A400;
  if (*v11)
  {
    unint64_t v31 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v31 >= v8) {
        v31 %= v8;
      }
    }
    else
    {
      v31 &= v8 - 1;
    }
    int v30 = (void *)(outputCopyFunctionTable(void)::table + 8 * v31);
    goto LABEL_74;
  }
LABEL_75:
  ++qword_1E946A408;
  return v11;
}