uint64_t vt_Copy_l64r_rgb_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  unsigned char v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  long long v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_444vf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *(unsigned __int8 *)result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(result + 20);
    unint64_t v15 = v11 + *(void *)(result + 44);
    unint64_t v16 = v12 - v11;
    uint64_t v17 = *(void *)(result + 152);
    v18 = *(uint64_t **)(result + 136);
    v19 = *(void **)(result + 56);
    uint64_t v20 = **(void **)(result + 64);
    uint64_t v21 = *v18;
    uint64_t v22 = v18[1];
    uint64_t v23 = v18[2];
    *(float *)&unsigned int v24 = (float)*(unsigned int *)(v17 + 136);
    float v25 = *(float *)&v24 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(v24) = *(_WORD *)(v17 + 144);
    float v26 = (float)v24;
    LOWORD(a5) = *(_WORD *)(v17 + 146);
    float v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 148);
    float v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 150);
    float v29 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 152);
    float v30 = (float)LODWORD(a8);
    float v31 = *(float *)(v17 + 36);
    float v32 = *(float *)(v17 + 40);
    float v33 = *(float *)(v17 + 44);
    float v34 = *(float *)(v17 + 48);
    float v35 = *(float *)(v17 + 52);
    float v36 = *(float *)(v17 + 56);
    float v37 = *(float *)(v17 + 60);
    float v38 = *(float *)(v17 + 64);
    float v39 = *(float *)(v17 + 68);
    v40 = *(void **)(result + 128);
    uint64_t v41 = *(void *)(result + 112);
    unint64_t v42 = *(void *)(result + 104) * a2 / v10 + *(void *)(result + 120);
    uint64_t v43 = *(void *)(result + 36);
    uint64_t v44 = *(unsigned __int8 *)(v17 + 157);
    uint64_t v45 = *(unsigned __int8 *)(v17 + 156);
    uint64_t v46 = *(unsigned __int8 *)(v17 + 155);
    result = *(unsigned __int8 *)(v17 + 154);
    uint64_t v47 = v40[2];
    if (v47) {
      v48 = (unsigned char *)(v47 + v42 * v23 + v41);
    }
    else {
      v48 = 0;
    }
    v51 = v40;
    uint64_t v50 = *v40;
    uint64_t v49 = v51[1];
    BOOL v52 = v49 == 0;
    v53 = (unsigned char *)(v49 + v42 * v22 + v41);
    if (v52) {
      v53 = 0;
    }
    v54 = (unsigned char *)(v50 + v42 * v21 + v41);
    uint64_t v55 = *v19 + v20 * v15 + 8 * v43;
    do
    {
      if (v14)
      {
        uint64_t v56 = v14;
        uint64_t v57 = v55;
        v58 = v48;
        v59 = v53;
        v60 = v54;
        do
        {
          LOWORD(v8) = *(_WORD *)(v57 + 2 * result);
          *(float *)&unsigned int v61 = (float)LODWORD(v8);
          float v62 = v25 * *(float *)&v61;
          LOWORD(v61) = *(_WORD *)(v57 + 2 * v46);
          *(float *)&unsigned int v63 = (float)v61;
          float v64 = v25 * *(float *)&v63;
          LOWORD(v63) = *(_WORD *)(v57 + 2 * v45);
          float v65 = v25 * (float)v63;
          float v8 = (float)((float)((float)(v32 * v64) + (float)(v31 * v62)) + (float)(v33 * v65)) + v26;
          float v66 = v28;
          if (v8 <= v28)
          {
            float v66 = (float)((float)((float)(v32 * v64) + (float)(v31 * v62)) + (float)(v33 * v65)) + v26;
            if (v8 < v26) {
              float v66 = v26;
            }
          }
          LOWORD(v8) = *(_WORD *)(v57 + 2 * v44);
          *v60++ = llroundf(v66);
          if (v59)
          {
            float v67 = (float)((float)(v27 + (float)(v62 * v34)) + (float)(v64 * v35)) + (float)(v65 * v36);
            float v68 = v30;
            if (v67 <= v30)
            {
              float v68 = (float)((float)(v27 + (float)(v62 * v34)) + (float)(v64 * v35)) + (float)(v65 * v36);
              if (v67 < v29) {
                float v68 = v29;
              }
            }
            float v69 = (float)((float)(v27 + (float)(v62 * v37)) + (float)(v64 * v38)) + (float)(v65 * v39);
            unsigned char *v59 = llroundf(v68);
            float v70 = v30;
            if (v69 <= v30)
            {
              float v70 = v69;
              if (v69 < v29) {
                float v70 = v29;
              }
            }
            v59[1] = llroundf(v70);
            v59 += 2;
          }
          if (v58)
          {
            float v8 = (float)LODWORD(v8) * 0.0038911;
            *v58++ = llroundf(v8);
          }
          v57 += 8;
          --v56;
        }
        while (v56);
      }
      v55 += v20;
      v54 += v21;
      v53 += v22;
      v48 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_xf444_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *(void *)(result + 152);
    int64x2_t v12 = *(uint64_t **)(result + 136);
    int64x2_t v13 = *(void **)(result + 56);
    uint64_t v14 = **(void **)(result + 64);
    uint64_t v15 = *v12;
    uint64_t v16 = v12[1];
    uint64_t v17 = v12[2];
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v11 + 128);
    float v19 = 8191.0 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 144);
    float v20 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 146);
    float v21 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 148);
    float v22 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 150);
    float v23 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 152);
    float v24 = (float)v18;
    float v25 = *(float *)(v11 + 36);
    float v26 = *(float *)(v11 + 40);
    float v28 = *(float *)(v11 + 44);
    float v27 = *(float *)(v11 + 48);
    float v99 = *(float *)(v11 + 52);
    float v100 = v27;
    float v29 = *(float *)(v11 + 56);
    float v30 = *(float *)(v11 + 60);
    float v98 = v29;
    float v31 = *(float *)(v11 + 64);
    float v32 = *(float *)(v11 + 68);
    float v33 = *(float *)(v11 + 72);
    float v34 = *(float *)(v11 + 76);
    float v35 = *(float *)(v11 + 80);
    float v36 = *(float *)(v11 + 84);
    float v37 = *(float *)(v11 + 88);
    float v38 = *(float *)(v11 + 92);
    float v39 = *(float *)(v11 + 96);
    float v40 = *(float *)(v11 + 100);
    float v41 = *(float *)(v11 + 104);
    float v42 = *(float *)(v11 + 108);
    uint64_t v43 = v11 + 164;
    uint64_t v44 = v11 + 16548;
    uint64_t v45 = v11 + 32932;
    float v46 = *(float *)(v11 + 112);
    float v47 = *(float *)(v11 + 116);
    float v48 = *(float *)(v11 + 120);
    uint64_t v49 = *(uint64_t **)(result + 128);
    uint64_t v50 = *(void *)(result + 112);
    unint64_t v51 = *(void *)(result + 104) * a2 / v4 + *(void *)(result + 120);
    uint64_t v52 = *(void *)(result + 36);
    unsigned int v53 = *(unsigned __int8 *)(v11 + 132);
    if (v53 >= 0x11) {
      char v54 = 0;
    }
    else {
      char v54 = 16 - v53;
    }
    result = *(unsigned __int8 *)(v11 + 157);
    uint64_t v55 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v56 = *(unsigned __int8 *)(v11 + 155);
    uint64_t v57 = *(unsigned __int8 *)(v11 + 154);
    uint64_t v58 = v49[2];
    if (v58) {
      uint64_t v59 = v58 + v51 * v17 + 2 * v50;
    }
    else {
      uint64_t v59 = 0;
    }
    uint64_t v61 = *v49;
    uint64_t v60 = v49[1];
    uint64_t v62 = v60 + v51 * v16 + 2 * v50;
    if (!v60) {
      uint64_t v62 = 0;
    }
    uint64_t v63 = v61 + v51 * v15 + 2 * v50;
    uint64_t v64 = *v13 + v14 * v9 + 8 * v52;
    char v65 = v54;
    do
    {
      if (v8)
      {
        uint64_t v66 = v8;
        float v67 = (_WORD *)v59;
        float v68 = (_WORD *)v62;
        float v69 = (_WORD *)v63;
        uint64_t v70 = v64;
        do
        {
          LOWORD(v29) = *(_WORD *)(v70 + 2 * v57);
          LOWORD(v27) = *(_WORD *)(v70 + 2 * v56);
          LOWORD(_S18) = *(_WORD *)(v70 + 2 * v55);
          _H0 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v29), 0.0), 8191.0)));
          float v72 = v19 * (float)LODWORD(_S18);
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v27), 0.0), 8191.0)));
          unsigned int v79 = llroundf(fminf(fmaxf(v72, 0.0), 8191.0));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v43 + 2 * v79);
          __asm { FCVT            S15, H0 }
          float v83 = (float)((float)((float)(v46 * _S14) + (float)(v42 * _S18)) + (float)(v47 * _S15))
              + (float)(v48 * fmaxf(_S18, fmaxf(_S14, _S15)));
          float v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v44 + 2 * llroundf(v84));
          __asm { FCVT            S0, H0 }
          _S6 = _S18 * _S0;
          float v88 = _S14 * _S0;
          float v89 = _S15 * _S0;
          float v90 = (float)((float)(v34 * v88) + (float)(_S6 * v33)) + (float)(v89 * v35);
          float v91 = (float)((float)(v37 * v88) + (float)(_S6 * v36)) + (float)(v89 * v38);
          _S0 = (float)((float)(v40 * v88) + (float)(_S6 * v39)) + (float)(v89 * v41);
          LOWORD(_S6) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          LOWORD(_S6) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S15, H6 }
          LOWORD(_S0) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          float v29 = (float)((float)((float)(v26 * _S15) + (float)(v25 * _S14)) + (float)(v28 * _S18)) + v20;
          float v27 = v22;
          if (v29 <= v22)
          {
            float v27 = (float)((float)((float)(v26 * _S15) + (float)(v25 * _S14)) + (float)(v28 * _S18)) + v20;
            if (v29 < v20) {
              float v27 = v20;
            }
          }
          __int16 v95 = *(_WORD *)(v70 + 2 * result);
          *v69++ = llroundf(v27) << v65;
          if (v68)
          {
            float v96 = (float)((float)(v21 + (float)(_S14 * v100)) + (float)(_S15 * v99)) + (float)(_S18 * v98);
            float v97 = v24;
            if (v96 <= v24)
            {
              float v97 = (float)((float)(v21 + (float)(_S14 * v100)) + (float)(_S15 * v99)) + (float)(_S18 * v98);
              if (v96 < v23) {
                float v97 = v23;
              }
            }
            float v29 = (float)(v21 + (float)(_S14 * v30)) + (float)(_S15 * v31);
            _S18 = v29 + (float)(_S18 * v32);
            *float v68 = llroundf(v97) << v65;
            float v27 = v24;
            if (_S18 <= v24)
            {
              float v27 = _S18;
              if (_S18 < v23) {
                float v27 = v23;
              }
            }
            v68[1] = llroundf(v27) << v65;
            v68 += 2;
          }
          if (v67) {
            *v67++ = v95;
          }
          v70 += 8;
          --v66;
        }
        while (v66);
      }
      v64 += v14;
      v63 += v15;
      v62 += v16;
      v59 += v17;
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_xf444_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v12 = *(void *)(result + 28);
  unint64_t v13 = *(unsigned __int8 *)result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = (v12 + v12 * a2) / v13;
  if (v15 != v14)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(result + 20);
    unint64_t v18 = v14 + *(void *)(result + 44);
    unint64_t v19 = v15 - v14;
    uint64_t v20 = *(void *)(result + 152);
    long long v21 = *(uint64_t **)(result + 136);
    int64x2_t v22 = *(void **)(result + 56);
    uint64_t v23 = **(void **)(result + 64);
    uint64_t v24 = *v21;
    uint64_t v25 = v21[1];
    uint64_t v26 = v21[2];
    float v27 = 8191.0 / (float)*(unsigned int *)(v20 + 128);
    LOWORD(a5) = *(_WORD *)(v20 + 144);
    float v28 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v20 + 146);
    float v29 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v20 + 148);
    float v30 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v20 + 150);
    float v31 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v20 + 152);
    float v32 = (float)LODWORD(a9);
    float v33 = *(float *)(v20 + 36);
    float v34 = *(float *)(v20 + 40);
    float v35 = *(float *)(v20 + 44);
    float v36 = *(float *)(v20 + 48);
    float v37 = *(float *)(v20 + 52);
    float v38 = *(float *)(v20 + 56);
    float v39 = *(float *)(v20 + 60);
    float v40 = *(float *)(v20 + 64);
    float v41 = *(float *)(v20 + 68);
    float v42 = *(float *)(v20 + 72);
    float v43 = *(float *)(v20 + 76);
    float v44 = *(float *)(v20 + 80);
    float v45 = *(float *)(v20 + 84);
    float v46 = *(float *)(v20 + 88);
    float v47 = *(float *)(v20 + 92);
    float v48 = *(float *)(v20 + 96);
    float v50 = *(float *)(v20 + 100);
    float v49 = *(float *)(v20 + 104);
    uint64_t v51 = v20 + 164;
    uint64_t v52 = v20 + 16548;
    unsigned int v53 = *(uint64_t **)(result + 128);
    uint64_t v54 = *(void *)(result + 112);
    unint64_t v55 = *(void *)(result + 104) * a2 / v13 + *(void *)(result + 120);
    uint64_t v56 = *(void *)(result + 36);
    unsigned int v57 = *(unsigned __int8 *)(v20 + 132);
    if (v57 >= 0x11) {
      char v58 = 0;
    }
    else {
      char v58 = 16 - v57;
    }
    uint64_t v59 = *(unsigned __int8 *)(v20 + 157);
    result = *(unsigned __int8 *)(v20 + 156);
    uint64_t v60 = *(unsigned __int8 *)(v20 + 155);
    uint64_t v61 = *(unsigned __int8 *)(v20 + 154);
    uint64_t v62 = v53[2];
    if (v62) {
      uint64_t v63 = v62 + v55 * v26 + 2 * v54;
    }
    else {
      uint64_t v63 = 0;
    }
    uint64_t v65 = *v53;
    uint64_t v64 = v53[1];
    uint64_t v66 = v64 + v55 * v25 + 2 * v54;
    if (!v64) {
      uint64_t v66 = 0;
    }
    uint64_t v67 = v65 + v55 * v24 + 2 * v54;
    uint64_t v68 = *v22 + v23 * v18 + 8 * v56;
    char v69 = v58;
    do
    {
      if (v17)
      {
        uint64_t v70 = v17;
        uint64_t v71 = v68;
        float v72 = (_WORD *)v63;
        v73 = (_WORD *)v66;
        v74 = (_WORD *)v67;
        do
        {
          LOWORD(_S10) = *(_WORD *)(v71 + 2 * v61);
          LOWORD(_S11) = *(_WORD *)(v71 + 2 * v60);
          LOWORD(_S12) = *(_WORD *)(v71 + 2 * result);
          unsigned int v75 = llroundf(fminf(fmaxf(v27 * (float)LODWORD(_S10), 0.0), 8191.0));
          _S10 = v27 * (float)LODWORD(_S12);
          _H12 = *(_WORD *)(v51 + 2 * v75);
          __asm { FCVT            S12, H12 }
          _H11 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v27 * (float)LODWORD(_S11), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S10) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          float v86 = (float)((float)(v43 * _S11) + (float)(_S12 * v42)) + (float)(_S10 * v44);
          float v87 = (float)((float)(v46 * _S11) + (float)(_S12 * v45)) + (float)(_S10 * v47);
          _S12 = (float)((float)(v50 * _S11) + (float)(_S12 * v48)) + (float)(_S10 * v49);
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          float v89 = (float)((float)((float)(v34 * _S11) + (float)(v33 * _S10)) + (float)(v35 * _S12)) + v28;
          float v90 = v30;
          if (v89 <= v30)
          {
            float v90 = (float)((float)((float)(v34 * _S11) + (float)(v33 * _S10)) + (float)(v35 * _S12)) + v28;
            if (v89 < v28) {
              float v90 = v28;
            }
          }
          __int16 v91 = *(_WORD *)(v71 + 2 * v59);
          *v74++ = llroundf(v90) << v69;
          if (v73)
          {
            float v92 = (float)((float)(v29 + (float)(_S10 * v36)) + (float)(_S11 * v37)) + (float)(_S12 * v38);
            float v93 = v32;
            if (v92 <= v32)
            {
              float v93 = (float)((float)(v29 + (float)(_S10 * v36)) + (float)(_S11 * v37)) + (float)(_S12 * v38);
              if (v92 < v31) {
                float v93 = v31;
              }
            }
            _S10 = (float)((float)(v29 + (float)(_S10 * v39)) + (float)(_S11 * v40)) + (float)(_S12 * v41);
            _WORD *v73 = llroundf(v93) << v69;
            _S11 = v32;
            if (_S10 <= v32)
            {
              _S11 = _S10;
              if (_S10 < v31) {
                _S11 = v31;
              }
            }
            v73[1] = llroundf(_S11) << v69;
            v73 += 2;
          }
          if (v72) {
            *v72++ = v91;
          }
          v71 += 8;
          --v70;
        }
        while (v70);
      }
      v68 += v23;
      v67 += v24;
      v66 += v25;
      v63 += v26;
      ++v16;
    }
    while (v16 != v19);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_xf444_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = *(unsigned __int8 *)result;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (v14 != v13)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(result + 20);
    unint64_t v17 = v13 + *(void *)(result + 44);
    unint64_t v18 = v14 - v13;
    uint64_t v19 = *(void *)(result + 152);
    int64x2_t v20 = *(uint64_t **)(result + 136);
    long long v21 = *(void **)(result + 56);
    uint64_t v22 = **(void **)(result + 64);
    uint64_t v23 = *v20;
    uint64_t v24 = v20[1];
    uint64_t v25 = v20[2];
    *(float *)&unsigned int v26 = (float)*(unsigned int *)(v19 + 136);
    float v27 = *(float *)&v26 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(v26) = *(_WORD *)(v19 + 144);
    float v28 = (float)v26;
    LOWORD(a5) = *(_WORD *)(v19 + 146);
    float v29 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 148);
    float v30 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v19 + 150);
    float v31 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v19 + 152);
    float v32 = (float)LODWORD(a8);
    float v33 = *(float *)(v19 + 36);
    float v34 = *(float *)(v19 + 40);
    float v35 = *(float *)(v19 + 44);
    float v36 = *(float *)(v19 + 48);
    float v37 = *(float *)(v19 + 52);
    float v38 = *(float *)(v19 + 56);
    float v39 = *(float *)(v19 + 60);
    float v40 = *(float *)(v19 + 64);
    float v41 = *(float *)(v19 + 68);
    float v42 = *(void **)(result + 128);
    uint64_t v43 = *(void *)(result + 112);
    unint64_t v44 = *(void *)(result + 104) * a2 / v12 + *(void *)(result + 120);
    uint64_t v45 = *(void *)(result + 36);
    unsigned int v46 = *(unsigned __int8 *)(v19 + 132);
    if (v46 >= 0x11) {
      char v47 = 0;
    }
    else {
      char v47 = 16 - v46;
    }
    uint64_t v48 = *(unsigned __int8 *)(v19 + 157);
    uint64_t v49 = *(unsigned __int8 *)(v19 + 156);
    uint64_t v50 = *(unsigned __int8 *)(v19 + 155);
    result = *(unsigned __int8 *)(v19 + 154);
    uint64_t v51 = v42[2];
    if (v51) {
      uint64_t v52 = v51 + v44 * v25 + 2 * v43;
    }
    else {
      uint64_t v52 = 0;
    }
    unint64_t v55 = v42;
    uint64_t v54 = *v42;
    uint64_t v53 = v55[1];
    BOOL v56 = v53 == 0;
    uint64_t v57 = v53 + v44 * v24 + 2 * v43;
    if (v56) {
      uint64_t v57 = 0;
    }
    uint64_t v58 = v54 + v44 * v23 + 2 * v43;
    uint64_t v59 = *v21 + v22 * v17 + 8 * v45;
    char v60 = v47;
    do
    {
      if (v16)
      {
        uint64_t v61 = v16;
        uint64_t v62 = v59;
        uint64_t v63 = (_WORD *)v52;
        uint64_t v64 = (_WORD *)v57;
        uint64_t v65 = (_WORD *)v58;
        do
        {
          LOWORD(v8) = *(_WORD *)(v62 + 2 * result);
          float v8 = v27 * (float)LODWORD(v8);
          LOWORD(v9) = *(_WORD *)(v62 + 2 * v50);
          float v9 = v27 * (float)LODWORD(v9);
          LOWORD(v10) = *(_WORD *)(v62 + 2 * v49);
          float v10 = v27 * (float)LODWORD(v10);
          float v66 = (float)((float)((float)(v34 * v9) + (float)(v33 * v8)) + (float)(v35 * v10)) + v28;
          float v67 = v30;
          if (v66 <= v30)
          {
            float v67 = (float)((float)((float)(v34 * v9) + (float)(v33 * v8)) + (float)(v35 * v10)) + v28;
            if (v66 < v28) {
              float v67 = v28;
            }
          }
          __int16 v68 = *(_WORD *)(v62 + 2 * v48);
          *v65++ = llroundf(v67) << v60;
          if (v64)
          {
            float v69 = (float)((float)(v29 + (float)(v8 * v36)) + (float)(v9 * v37)) + (float)(v10 * v38);
            float v70 = v32;
            if (v69 <= v32)
            {
              float v70 = (float)((float)(v29 + (float)(v8 * v36)) + (float)(v9 * v37)) + (float)(v10 * v38);
              if (v69 < v31) {
                float v70 = v31;
              }
            }
            float v8 = (float)((float)(v29 + (float)(v8 * v39)) + (float)(v9 * v40)) + (float)(v10 * v41);
            *uint64_t v64 = llroundf(v70) << v60;
            float v9 = v32;
            if (v8 <= v32)
            {
              float v9 = v8;
              if (v8 < v31) {
                float v9 = v31;
              }
            }
            v64[1] = llroundf(v9) << v60;
            v64 += 2;
          }
          if (v63) {
            *v63++ = v68;
          }
          v62 += 8;
          --v61;
        }
        while (v61);
      }
      v59 += v22;
      v58 += v23;
      v57 += v24;
      v52 += v25;
      ++v15;
    }
    while (v15 != v18);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    unint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = **((void **)result + 8);
    uint64_t v16 = **((void **)result + 17);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    uint64_t v26 = v13 + 164;
    uint64_t v27 = v13 + 16548;
    uint64_t v28 = v13 + 32932;
    float v29 = *(float *)(v13 + 104);
    float v30 = *(float *)(v13 + 108);
    float v31 = *(float *)(v13 + 112);
    float v32 = *(float *)(v13 + 116);
    float v33 = *(float *)(v13 + 120);
    float v34 = (void *)*((void *)result + 16);
    uint64_t v35 = *((void *)result + 14);
    unint64_t v36 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v37 = *(void *)(result + 36);
    uint64_t v38 = *(unsigned __int8 *)(v13 + 161);
    uint64_t v39 = *(unsigned __int8 *)(v13 + 160);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 159);
    uint64_t v40 = *(unsigned __int8 *)(v13 + 158);
    uint64_t v41 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v42 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v43 = *v34 + v36 * v16;
    uint64_t v44 = *(unsigned __int8 *)(v13 + 155);
    uint64_t v45 = *(unsigned __int8 *)(v13 + 154);
    uint64_t v46 = v43 + 4 * v35;
    uint64_t v47 = *v14 + v15 * v11 + 8 * v37;
    do
    {
      if (v10)
      {
        uint64_t v48 = v10;
        uint64_t v49 = v47;
        uint64_t v50 = v46;
        do
        {
          LOWORD(_S26) = *(_WORD *)(v49 + 2 * v45);
          LOWORD(v3) = *(_WORD *)(v49 + 2 * v44);
          LOWORD(v4) = *(_WORD *)(v49 + 2 * v42);
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S26), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0)));
          __asm { FCVT            S29, H28 }
          float v61 = (float)((float)((float)(v31 * _S27) + (float)(v30 * _S26)) + (float)(v32 * _S29))
              + (float)(v33 * fmaxf(_S26, fmaxf(_S27, _S29)));
          float v62 = 8191.0;
          if (v61 <= 8191.0)
          {
            float v62 = v61;
            if (v61 < 0.0) {
              float v62 = 0.0;
            }
          }
          _H28 = *(_WORD *)(v27 + 2 * llroundf(v62));
          __asm { FCVT            S30, H28 }
          float v65 = _S26 * _S30;
          float v66 = _S27 * _S30;
          float v67 = _S29 * _S30;
          if (*(short float *)(v28
                              + 2
                              * llroundf(fminf(fmaxf((float)((float)(v19 * v66) + (float)(v65 * v18))+ (float)((float)(_S29 * _S30) * v20), 0.0), 8191.0))) <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H29, #0 }
            if (_NF) {
              _S29 = 0.0;
            }
            else {
              __asm { FCVT            S29, H29 }
            }
          }
          else
          {
            _S29 = 255.0;
          }
          unsigned int v70 = *(unsigned __int16 *)(v49 + 2 * v41);
          float v71 = (float)((float)(v22 * v66) + (float)(v65 * v21)) + (float)(v67 * v23);
          float v4 = v25 * v66;
          float v72 = (float)(v4 + (float)(v65 * v24)) + (float)(v67 * v29);
          short float v73 = *(short float *)(v28 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          short float v74 = *(short float *)(v28 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          *(unsigned char *)(v50 + v40) = llroundf(_S29);
          if (v73 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H27, #0 }
            if (_NF) {
              _S27 = 0.0;
            }
            else {
              __asm { FCVT            S27, H27 }
            }
          }
          else
          {
            _S27 = 255.0;
          }
          result[v50] = llroundf(_S27);
          if (v74 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H26, #0 }
            if (_NF) {
              _S26 = 0.0;
            }
            else {
              __asm { FCVT            S26, H26 }
            }
          }
          else
          {
            _S26 = 255.0;
          }
          v49 += 8;
          float v3 = (float)v70 * 0.0038911;
          *(unsigned char *)(v50 + v39) = llroundf(_S26);
          *(unsigned char *)(v50 + v38) = llroundf(v3);
          v50 += 4;
          --v48;
        }
        while (v48);
      }
      v47 += v15;
      v46 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    unint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = **((void **)result + 8);
    uint64_t v16 = **((void **)result + 17);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    float v26 = *(float *)(v13 + 104);
    uint64_t v27 = v13 + 164;
    uint64_t v28 = v13 + 16548;
    float v29 = (void *)*((void *)result + 16);
    uint64_t v30 = *((void *)result + 14);
    unint64_t v31 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v32 = *(void *)(result + 36);
    uint64_t v33 = *(unsigned __int8 *)(v13 + 161);
    uint64_t v34 = *(unsigned __int8 *)(v13 + 160);
    uint64_t v35 = *(unsigned __int8 *)(v13 + 159);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 158);
    uint64_t v36 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v37 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v38 = *v29 + v31 * v16;
    uint64_t v39 = *(unsigned __int8 *)(v13 + 155);
    uint64_t v40 = *(unsigned __int8 *)(v13 + 154);
    uint64_t v41 = v38 + 4 * v30;
    uint64_t v42 = *v14 + v15 * v11 + 8 * v32;
    do
    {
      if (v10)
      {
        uint64_t v43 = v10;
        uint64_t v44 = v42;
        uint64_t v45 = v41;
        do
        {
          LOWORD(v2) = *(_WORD *)(v44 + 2 * v40);
          LOWORD(_S23) = *(_WORD *)(v44 + 2 * v39);
          LOWORD(_S24) = *(_WORD *)(v44 + 2 * v37);
          _H22 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v2), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H23 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S23), 0.0), 8191.0)));
          _H25 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S24), 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H23
            FCVT            S23, H25
          }
          if (*(short float *)(v28
                              + 2
                              * llroundf(fminf(fmaxf((float)((float)(v19 * _S24) + (float)(_S22 * v18)) + (float)(_S23 * v20), 0.0), 8191.0))) <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H25, #0 }
            if (_NF) {
              _S25 = 0.0;
            }
            else {
              __asm { FCVT            S25, H25 }
            }
          }
          else
          {
            _S25 = 255.0;
          }
          float v58 = (float)((float)(v22 * _S24) + (float)(_S22 * v21)) + (float)(_S23 * v23);
          float v59 = (float)((float)(v25 * _S24) + (float)(_S22 * v24)) + (float)(_S23 * v26);
          short float v60 = *(short float *)(v28 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          float v62 = fminf(fmaxf(v59, 0.0), 8191.0);
          short float v61 = *(short float *)(v28 + 2 * llroundf(v62));
          LOWORD(v62) = *(_WORD *)(v44 + 2 * v36);
          result[v45] = llroundf(_S25);
          if (v60 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H24, #0 }
            if (_NF) {
              _S24 = 0.0;
            }
            else {
              __asm { FCVT            S24, H24 }
            }
          }
          else
          {
            _S24 = 255.0;
          }
          *(unsigned char *)(v45 + v35) = llroundf(_S24);
          if (v61 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H23, #0 }
            if (_NF) {
              _S23 = 0.0;
            }
            else {
              __asm { FCVT            S23, H23 }
            }
          }
          else
          {
            _S23 = 255.0;
          }
          v44 += 8;
          float v2 = (float)LODWORD(v62) * 0.0038911;
          *(unsigned char *)(v45 + v34) = llroundf(_S23);
          *(unsigned char *)(v45 + v33) = llroundf(v2);
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      v41 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_BGRA_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_BGRA_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *(void *)(result + 152);
    uint64_t v15 = *(void **)(result + 128);
    uint64_t v16 = *(void **)(result + 56);
    uint64_t v17 = **(void **)(result + 64);
    uint64_t v18 = **(void **)(result + 136);
    float v19 = (float)*(unsigned int *)(v14 + 136) / (float)*(unsigned int *)(v14 + 128);
    uint64_t v20 = *(void *)(result + 112);
    unint64_t v21 = *(void *)(result + 104) * a2 / v7 + *(void *)(result + 120);
    uint64_t v22 = *(void *)(result + 36);
    uint64_t v23 = *(unsigned __int8 *)(v14 + 161);
    uint64_t v24 = *(unsigned __int8 *)(v14 + 160);
    uint64_t v25 = *(unsigned __int8 *)(v14 + 159);
    uint64_t v26 = *(unsigned __int8 *)(v14 + 158);
    uint64_t v27 = *(unsigned __int8 *)(v14 + 157);
    result = *(unsigned __int8 *)(v14 + 156);
    uint64_t v28 = *v15 + v21 * v18;
    uint64_t v29 = *(unsigned __int8 *)(v14 + 155);
    uint64_t v30 = *(unsigned __int8 *)(v14 + 154);
    uint64_t v31 = v28 + 4 * v20;
    uint64_t v32 = *v16 + v17 * v12 + 8 * v22;
    do
    {
      if (v11)
      {
        uint64_t v33 = v11;
        uint64_t v34 = v32;
        uint64_t v35 = v31;
        do
        {
          LOWORD(a5) = *(_WORD *)(v34 + 2 * v30);
          float v36 = v19 * (float)LODWORD(a5);
          float v37 = 255.0;
          if (v36 <= 255.0)
          {
            float v37 = v36;
            if (v36 < 0.0) {
              float v37 = 0.0;
            }
          }
          LOWORD(v36) = *(_WORD *)(v34 + 2 * v29);
          float v38 = (float)LODWORD(v36);
          LOWORD(a6) = *(_WORD *)(v34 + 2 * result);
          LOWORD(v36) = *(_WORD *)(v34 + 2 * v27);
          float v39 = v19 * v38;
          *(unsigned char *)(v35 + v26) = llroundf(v37);
          float v40 = 255.0;
          if (v39 <= 255.0)
          {
            float v40 = v39;
            if (v39 < 0.0) {
              float v40 = 0.0;
            }
          }
          char v41 = llroundf(v40);
          float v42 = v19 * (float)LODWORD(a6);
          *(unsigned char *)(v35 + v25) = v41;
          a6 = 255.0;
          if (v42 <= 255.0)
          {
            a6 = v42;
            if (v42 < 0.0) {
              a6 = 0.0;
            }
          }
          v34 += 8;
          a5 = (float)LODWORD(v36) * 0.0038911;
          *(unsigned char *)(v35 + v24) = llroundf(a6);
          *(unsigned char *)(v35 + v23) = llroundf(a5);
          v35 += 4;
          --v33;
        }
        while (v33);
      }
      v32 += v17;
      v31 += v18;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_l10r_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(void **)(result + 56);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = **(void **)(result + 136);
    float v20 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    float v21 = (float)LODWORD(a5);
    float v22 = *(float *)(v16 + 72);
    float v23 = *(float *)(v16 + 76);
    float v24 = *(float *)(v16 + 80);
    float v25 = *(float *)(v16 + 84);
    float v26 = *(float *)(v16 + 88);
    float v27 = *(float *)(v16 + 92);
    float v28 = *(float *)(v16 + 96);
    float v29 = *(float *)(v16 + 100);
    uint64_t v30 = v16 + 164;
    uint64_t v31 = v16 + 16548;
    uint64_t v32 = v16 + 32932;
    float v33 = *(float *)(v16 + 104);
    float v34 = *(float *)(v16 + 108);
    float v35 = *(float *)(v16 + 112);
    float v36 = *(float *)(v16 + 116);
    float v37 = *(float *)(v16 + 120);
    uint64_t v38 = *(void *)(result + 112);
    unint64_t v39 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
    uint64_t v40 = *(void *)(result + 36);
    uint64_t v41 = *(unsigned __int8 *)(v16 + 157);
    uint64_t v42 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v43 = **(void **)(result + 128) + v39 * v19;
    result = *(unsigned __int8 *)(v16 + 155);
    uint64_t v44 = *(unsigned __int8 *)(v16 + 154);
    uint64_t v45 = (unsigned int *)(v43 + 16 * v38);
    uint64_t v46 = *v17 + v18 * v14 + 8 * v40;
    do
    {
      if (v13)
      {
        uint64_t v47 = v13;
        uint64_t v48 = v45;
        uint64_t v49 = v46;
        do
        {
          LOWORD(v5) = *(_WORD *)(v49 + 2 * v44);
          LOWORD(v6) = *(_WORD *)(v49 + 2 * result);
          LOWORD(v7) = *(_WORD *)(v49 + 2 * v42);
          _H29 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v5), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v6), 0.0), 8191.0)));
          unsigned int v57 = llroundf(fminf(fmaxf(v20 * (float)LODWORD(v7), 0.0), 8191.0));
          __asm { FCVT            S31, H30 }
          _H30 = *(_WORD *)(v30 + 2 * v57);
          __asm { FCVT            S9, H30 }
          float v61 = (float)((float)((float)(v35 * _S31) + (float)(v34 * _S29)) + (float)(v36 * _S9))
              + (float)(v37 * fmaxf(_S29, fmaxf(_S31, _S9)));
          float v62 = 8191.0;
          if (v61 <= 8191.0)
          {
            float v62 = v61;
            if (v61 < 0.0) {
              float v62 = 0.0;
            }
          }
          _H30 = *(_WORD *)(v31 + 2 * llroundf(v62));
          __asm { FCVT            S10, H30 }
          float v65 = _S29 * _S10;
          float v66 = _S31 * _S10;
          float v67 = _S9 * _S10;
          _H29 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v29 * v66) + (float)((float)(_S29 * _S10) * v28))+ (float)((float)(_S9 * _S10) * v33), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          float v70 = v21 + _S29;
          BOOL v71 = (float)(v21 + _S29) <= 1023.0;
          float v72 = 1023.0;
          if (v71)
          {
            float v72 = v70;
            if (v70 < 0.0) {
              float v72 = 0.0;
            }
          }
          _H9 = *(_WORD *)(v32
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v26 * v66) + (float)(v65 * v25)) + (float)(v67 * v27), 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          float v75 = v21 + _S9;
          BOOL v71 = (float)(v21 + _S9) <= 1023.0;
          float v76 = 1023.0;
          if (v71)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          _H30 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v23 * v66) + (float)(v65 * v22)) + (float)(v67 * v24), 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          float v79 = v21 + _S30;
          BOOL v71 = (float)(v21 + _S30) <= 1023.0;
          float v6 = 1023.0;
          if (v71)
          {
            float v6 = v79;
            if (v79 < 0.0) {
              float v6 = 0.0;
            }
          }
          float v7 = (double)*(unsigned __int16 *)(v49 + 2 * v41) * 3.0 / 65535.0;
          unsigned int v80 = llroundf(v72);
          v49 += 8;
          unsigned int v81 = llroundf(v76) << 10;
          unsigned int v82 = llroundf(v6);
          float v5 = (float)llroundf(v7);
          if (v5 > 3.0) {
            float v5 = 3.0;
          }
          *v48++ = v81 | v80 | (llroundf(v5) << 30) | (v82 << 20);
          --v47;
        }
        while (v47);
      }
      v46 += v18;
      uint64_t v45 = (unsigned int *)((char *)v45 + v19);
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_l10r_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(void **)(result + 56);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = **(void **)(result + 136);
    float v20 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    float v21 = (float)LODWORD(a5);
    float v22 = *(float *)(v16 + 72);
    float v23 = *(float *)(v16 + 76);
    float v24 = *(float *)(v16 + 80);
    float v25 = *(float *)(v16 + 84);
    float v26 = *(float *)(v16 + 88);
    float v27 = *(float *)(v16 + 92);
    float v28 = *(float *)(v16 + 96);
    float v29 = *(float *)(v16 + 100);
    float v30 = *(float *)(v16 + 104);
    uint64_t v31 = v16 + 164;
    uint64_t v32 = v16 + 16548;
    uint64_t v33 = *(void *)(result + 112);
    unint64_t v34 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
    uint64_t v35 = *(void *)(result + 36);
    uint64_t v36 = *(unsigned __int8 *)(v16 + 157);
    uint64_t v37 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v38 = **(void **)(result + 128) + v34 * v19;
    uint64_t v39 = *(unsigned __int8 *)(v16 + 155);
    result = *(unsigned __int8 *)(v16 + 154);
    uint64_t v40 = (unsigned int *)(v38 + 16 * v33);
    uint64_t v41 = *v17 + v18 * v14 + 8 * v35;
    do
    {
      if (v13)
      {
        uint64_t v42 = v13;
        uint64_t v43 = v41;
        uint64_t v44 = v40;
        do
        {
          LOWORD(v5) = *(_WORD *)(v43 + 2 * result);
          LOWORD(v6) = *(_WORD *)(v43 + 2 * v39);
          LOWORD(v7) = *(_WORD *)(v43 + 2 * v37);
          float v45 = v20 * (float)LODWORD(v7);
          _H25 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v5), 0.0), 8191.0)));
          unsigned int v47 = llroundf(fminf(fmaxf(v20 * (float)LODWORD(v6), 0.0), 8191.0));
          __asm { FCVT            S26, H25 }
          _H25 = *(_WORD *)(v31 + 2 * v47);
          __asm { FCVT            S27, H25 }
          _H25 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v45, 0.0), 8191.0)));
          __asm { FCVT            S28, H25 }
          _H25 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v29 * _S27) + (float)(_S26 * v28)) + (float)(_S28 * v30), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v59 = v21 + _S25;
          BOOL v60 = (float)(v21 + _S25) <= 1023.0;
          float v61 = 1023.0;
          if (v60)
          {
            float v61 = v59;
            if (v59 < 0.0) {
              float v61 = 0.0;
            }
          }
          _H29 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v26 * _S27) + (float)(_S26 * v25)) + (float)(_S28 * v27), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          float v64 = v21 + _S29;
          BOOL v60 = (float)(v21 + _S29) <= 1023.0;
          float v65 = 1023.0;
          if (v60)
          {
            float v65 = v64;
            if (v64 < 0.0) {
              float v65 = 0.0;
            }
          }
          _H26 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v23 * _S27) + (float)(_S26 * v22)) + (float)(_S28 * v24), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          *(float *)&double v7 = v21 + _S26;
          BOOL v60 = (float)(v21 + _S26) <= 1023.0;
          float v6 = 1023.0;
          if (v60)
          {
            float v6 = *(float *)&v7;
            if (*(float *)&v7 < 0.0) {
              float v6 = 0.0;
            }
          }
          LOWORD(v7) = *(_WORD *)(v43 + 2 * v36);
          v43 += 8;
          double v7 = (double)*(unint64_t *)&v7 * 3.0 / 65535.0;
          *(float *)&double v7 = v7;
          unsigned int v68 = llroundf(v61);
          unsigned int v69 = llroundf(v6);
          float v5 = (float)llroundf(*(float *)&v7);
          unsigned int v70 = llroundf(v65) << 10;
          if (v5 > 3.0) {
            float v5 = 3.0;
          }
          *v44++ = v70 | v68 | (llroundf(v5) << 30) | (v69 << 20);
          --v42;
        }
        while (v42);
      }
      v41 += v18;
      uint64_t v40 = (unsigned int *)((char *)v40 + v19);
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10)
{
  uint64_t v13 = *(void *)(result + 28);
  unint64_t v14 = *result;
  unint64_t v15 = v13 * a2 / v14;
  unint64_t v16 = (v13 + v13 * a2) / v14;
  if (v16 != v15)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(result + 20);
    unint64_t v19 = v15 + *(void *)(result + 44);
    unint64_t v20 = v16 - v15;
    uint64_t v21 = *((void *)result + 19);
    uint64_t v22 = **((void **)result + 8);
    uint64_t v23 = **((void **)result + 17);
    *(float *)&unsigned int v24 = (float)*(unsigned int *)(v21 + 136);
    float v25 = *(float *)&v24 / (float)*(unsigned int *)(v21 + 128);
    LOWORD(v24) = *(_WORD *)(v21 + 144);
    float v26 = (float)v24;
    unint64_t v27 = *((void *)result + 13) * a2 / v14 + *((void *)result + 15);
    uint64_t v28 = *(unsigned __int8 *)(v21 + 157);
    uint64_t v29 = *(unsigned __int8 *)(v21 + 156);
    uint64_t v30 = *(unsigned __int8 *)(v21 + 155);
    uint64_t v31 = *(unsigned __int8 *)(v21 + 154);
    uint64_t v32 = **((void **)result + 16) + v27 * v23 + 16 * *((void *)result + 14);
    result = (unsigned __int8 *)(**((void **)result + 7) + v22 * v19 + 8 * *(void *)(result + 36));
    do
    {
      if (v18)
      {
        uint64_t v33 = v18;
        unint64_t v34 = result;
        uint64_t v35 = (unsigned int *)v32;
        do
        {
          LOWORD(a10) = *(_WORD *)&v34[2 * v31];
          LOWORD(v10) = *(_WORD *)&v34[2 * v30];
          LOWORD(v11) = *(_WORD *)&v34[2 * v29];
          float v36 = v25 * (float)LODWORD(a10);
          float v37 = (float)LODWORD(v10);
          LOWORD(v12) = *(_WORD *)&v34[2 * v28];
          double v12 = (double)*(unint64_t *)&v12 * 3.0 / 65535.0;
          float v38 = (float)(v25 * (float)LODWORD(v11)) + v26;
          if (v38 < 0.0) {
            float v39 = 0.0;
          }
          else {
            float v39 = v38;
          }
          BOOL v40 = v38 <= 1023.0;
          float v41 = v12;
          if (v40) {
            *(float *)&double v12 = v39;
          }
          else {
            *(float *)&double v12 = 1023.0;
          }
          unsigned int v42 = llroundf(*(float *)&v12);
          unsigned int v43 = llroundf(v41);
          float v44 = (float)(v25 * v37) + v26;
          if (v44 < 0.0) {
            float v11 = 0.0;
          }
          else {
            float v11 = v44;
          }
          if (v44 <= 1023.0) {
            float v45 = v11;
          }
          else {
            float v45 = 1023.0;
          }
          unsigned int v46 = llroundf(v45);
          float v47 = v36 + v26;
          if (v47 < 0.0) {
            float v48 = 0.0;
          }
          else {
            float v48 = v47;
          }
          unsigned int v49 = v46 << 10;
          if (v47 <= 1023.0) {
            float v50 = v48;
          }
          else {
            float v50 = 1023.0;
          }
          float v10 = (float)v43;
          unsigned int v51 = llroundf(v50);
          if (v10 <= 3.0) {
            a10 = v10;
          }
          else {
            a10 = 3.0;
          }
          v34 += 8;
          *v35++ = v49 | v42 | (llroundf(a10) << 30) | (v51 << 20);
          --v33;
        }
        while (v33);
      }
      result += v22;
      v32 += v23;
      ++v17;
    }
    while (v17 != v20);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_l64r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *(void *)(result + 152);
    unint64_t v14 = *(void **)(result + 56);
    uint64_t v15 = **(void **)(result + 64);
    uint64_t v16 = **(void **)(result + 136);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    uint64_t v26 = v13 + 164;
    uint64_t v27 = v13 + 16548;
    uint64_t v28 = v13 + 32932;
    float v29 = *(float *)(v13 + 104);
    float v30 = *(float *)(v13 + 108);
    float v31 = *(float *)(v13 + 112);
    float v32 = *(float *)(v13 + 116);
    float v33 = *(float *)(v13 + 120);
    uint64_t v34 = *(void *)(result + 112);
    unint64_t v35 = *(void *)(result + 104) * a2 / v6 + *(void *)(result + 120);
    uint64_t v36 = *(void *)(result + 36);
    uint64_t v37 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v38 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v39 = **(void **)(result + 128) + v35 * v16;
    result = *(unsigned __int8 *)(v13 + 155);
    uint64_t v40 = *(unsigned __int8 *)(v13 + 154);
    float v41 = (_WORD *)(v39 + 8 * v34);
    uint64_t v42 = *v14 + v15 * v11 + 8 * v36;
    do
    {
      if (v10)
      {
        uint64_t v43 = v10;
        uint64_t v44 = v42;
        float v45 = v41;
        do
        {
          LOWORD(_S25) = *(_WORD *)(v44 + 2 * v40);
          LOWORD(v3) = *(_WORD *)(v44 + 2 * result);
          LOWORD(v4) = *(_WORD *)(v44 + 2 * v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S25), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          float v56 = (float)((float)((float)(v31 * _S26) + (float)(v30 * _S25)) + (float)(v32 * _S28))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S26, _S28)));
          float v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            float v57 = v56;
            if (v56 < 0.0) {
              float v57 = 0.0;
            }
          }
          _H27 = *(_WORD *)(v27 + 2 * llroundf(v57));
          __asm { FCVT            S29, H27 }
          float v60 = _S25 * _S29;
          float v61 = _S26 * _S29;
          float v62 = _S28 * _S29;
          LOWORD(_S29) = *(_WORD *)(v28
                                  + 2
                                  * llroundf(fminf(fmaxf((float)((float)(v19 * v61) + (float)(v60 * v18))+ (float)((float)(_S28 * _S29) * v20), 0.0), 8191.0)));
          __asm { FCVT            S30, H29 }
          float v64 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v64 = _S30;
            if (_NF) {
              float v64 = 0.0;
            }
          }
          __int16 v66 = *(_WORD *)(v44 + 2 * v37);
          float v67 = (float)((float)(v22 * v61) + (float)(v60 * v21)) + (float)(v62 * v23);
          float v68 = (float)((float)(v25 * v61) + (float)(v60 * v24)) + (float)(v62 * v29);
          _H26 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          _S25 = fminf(fmaxf(v68, 0.0), 8191.0);
          LOWORD(_S25) = *(_WORD *)(v28 + 2 * llroundf(_S25));
          __asm { FCVT            S29, H26 }
          *float v45 = llroundf(v64);
          float v4 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCMP            H26, #0 }
            float v4 = _S29;
            if (_NF) {
              float v4 = 0.0;
            }
          }
          __asm { FCVT            S28, H25 }
          v45[1] = llroundf(v4);
          float v3 = 65535.0;
          if (_S28 <= 65535.0)
          {
            __asm { FCMP            H25, #0 }
            float v3 = _S28;
            if (_NF) {
              float v3 = 0.0;
            }
          }
          v44 += 8;
          v45[2] = llroundf(v3);
          v45[3] = v66;
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      float v41 = (_WORD *)((char *)v41 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_l64r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *(void *)(result + 152);
    unint64_t v14 = *(void **)(result + 56);
    uint64_t v15 = **(void **)(result + 64);
    uint64_t v16 = **(void **)(result + 136);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    float v26 = *(float *)(v13 + 104);
    uint64_t v27 = v13 + 164;
    uint64_t v28 = v13 + 16548;
    uint64_t v29 = *(void *)(result + 112);
    unint64_t v30 = *(void *)(result + 104) * a2 / v6 + *(void *)(result + 120);
    uint64_t v31 = *(void *)(result + 36);
    uint64_t v32 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v33 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v34 = **(void **)(result + 128) + v30 * v16;
    uint64_t v35 = *(unsigned __int8 *)(v13 + 155);
    result = *(unsigned __int8 *)(v13 + 154);
    uint64_t v36 = (_WORD *)(v34 + 8 * v29);
    uint64_t v37 = *v14 + v15 * v11 + 8 * v31;
    do
    {
      if (v10)
      {
        uint64_t v38 = v10;
        uint64_t v39 = v37;
        uint64_t v40 = v36;
        do
        {
          LOWORD(_S21) = *(_WORD *)(v39 + 2 * result);
          LOWORD(v3) = *(_WORD *)(v39 + 2 * v35);
          LOWORD(v4) = *(_WORD *)(v39 + 2 * v33);
          _H21 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S21), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H23 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          _H25 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * _S22) + (float)(_S21 * v18)) + (float)(_S23 * v20), 0.0), 8191.0)));
          __asm { FCVT            S26, H25 }
          float v53 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCMP            H25, #0 }
            float v53 = _S26;
            if (_NF) {
              float v53 = 0.0;
            }
          }
          __int16 v55 = *(_WORD *)(v39 + 2 * v32);
          float v56 = (float)((float)(v22 * _S22) + (float)(_S21 * v21)) + (float)(_S23 * v23);
          float v57 = (float)((float)(v25 * _S22) + (float)(_S21 * v24)) + (float)(_S23 * v26);
          _H22 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v56, 0.0), 8191.0)));
          _S21 = fminf(fmaxf(v57, 0.0), 8191.0);
          LOWORD(_S21) = *(_WORD *)(v28 + 2 * llroundf(_S21));
          __asm { FCVT            S25, H22 }
          _WORD *v40 = llroundf(v53);
          float v4 = 65535.0;
          if (_S25 <= 65535.0)
          {
            __asm { FCMP            H22, #0 }
            float v4 = _S25;
            if (_NF) {
              float v4 = 0.0;
            }
          }
          __asm { FCVT            S24, H21 }
          v40[1] = llroundf(v4);
          float v3 = 65535.0;
          if (_S24 <= 65535.0)
          {
            __asm { FCMP            H21, #0 }
            float v3 = _S24;
            if (_NF) {
              float v3 = 0.0;
            }
          }
          v39 += 8;
          v40[2] = llroundf(v3);
          v40[3] = v55;
          v40 += 4;
          --v38;
        }
        while (v38);
      }
      v37 += v15;
      uint64_t v36 = (_WORD *)((char *)v36 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = **((void **)result + 8);
    uint64_t v15 = **((void **)result + 17);
    float v16 = (float)*(unsigned int *)(v13 + 136) / (float)*(unsigned int *)(v13 + 128);
    unint64_t v17 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v18 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v19 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v20 = *(unsigned __int8 *)(v13 + 155);
    uint64_t v21 = *(unsigned __int8 *)(v13 + 154);
    uint64_t v22 = **((void **)result + 16) + v17 * v15 + 8 * *((void *)result + 14);
    result = (unsigned __int8 *)(**((void **)result + 7) + v14 * v11 + 8 * *(void *)(result + 36));
    do
    {
      if (v10)
      {
        uint64_t v23 = v10;
        uint64_t v24 = result;
        uint64_t v25 = (_WORD *)v22;
        do
        {
          LOWORD(a5) = *(_WORD *)&v24[2 * v21];
          float v26 = v16 * (float)LODWORD(a5);
          float v27 = 65535.0;
          if (v26 <= 65535.0)
          {
            float v27 = v26;
            if (v26 < 0.0) {
              float v27 = 0.0;
            }
          }
          LOWORD(v26) = *(_WORD *)&v24[2 * v20];
          float v28 = (float)LODWORD(v26);
          LOWORD(v26) = *(_WORD *)&v24[2 * v19];
          __int16 v29 = *(_WORD *)&v24[2 * v18];
          float v30 = v16 * v28;
          *uint64_t v25 = llroundf(v27);
          float v31 = 65535.0;
          if (v30 <= 65535.0)
          {
            float v31 = v30;
            if (v30 < 0.0) {
              float v31 = 0.0;
            }
          }
          float v32 = v16 * (float)LODWORD(v26);
          v25[1] = llroundf(v31);
          a5 = 65535.0;
          if (v32 <= 65535.0)
          {
            a5 = v32;
            if (v32 < 0.0) {
              a5 = 0.0;
            }
          }
          v24 += 8;
          v25[2] = llroundf(a5);
          v25[3] = v29;
          v25 += 4;
          --v23;
        }
        while (v23);
      }
      result += v14;
      v22 += v15;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_b64a_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *(void *)(result + 152);
    uint64_t v14 = *(void **)(result + 56);
    uint64_t v15 = **(void **)(result + 64);
    uint64_t v16 = **(void **)(result + 136);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    uint64_t v26 = v13 + 164;
    uint64_t v27 = v13 + 16548;
    uint64_t v28 = v13 + 32932;
    float v29 = *(float *)(v13 + 104);
    float v30 = *(float *)(v13 + 108);
    float v31 = *(float *)(v13 + 112);
    float v32 = *(float *)(v13 + 116);
    float v33 = *(float *)(v13 + 120);
    uint64_t v34 = *(void *)(result + 112);
    unint64_t v35 = *(void *)(result + 104) * a2 / v6 + *(void *)(result + 120);
    uint64_t v36 = *(void *)(result + 36);
    uint64_t v37 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v38 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v39 = **(void **)(result + 128) + v35 * v16;
    result = *(unsigned __int8 *)(v13 + 155);
    uint64_t v40 = *(unsigned __int8 *)(v13 + 154);
    float v41 = (_WORD *)(v39 + 8 * v34);
    uint64_t v42 = *v14 + v15 * v11 + 8 * v36;
    do
    {
      if (v10)
      {
        uint64_t v43 = v10;
        uint64_t v44 = v42;
        float v45 = v41;
        do
        {
          LOWORD(v2) = *(_WORD *)(v44 + 2 * v40);
          LOWORD(v3) = *(_WORD *)(v44 + 2 * result);
          LOWORD(v4) = *(_WORD *)(v44 + 2 * v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v2), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          unsigned int v53 = llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0));
          __asm { FCVT            S27, H26 }
          _H26 = *(_WORD *)(v26 + 2 * v53);
          __asm { FCVT            S29, H26 }
          float v57 = (float)((float)((float)(v31 * _S27) + (float)(v30 * _S25)) + (float)(v32 * _S29))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S27, _S29)));
          float v58 = 8191.0;
          if (v57 <= 8191.0)
          {
            float v58 = v57;
            if (v57 < 0.0) {
              float v58 = 0.0;
            }
          }
          _H26 = *(_WORD *)(v27 + 2 * llroundf(v58));
          __asm { FCVT            S30, H26 }
          float v61 = _S25 * _S30;
          float v62 = _S27 * _S30;
          float v4 = _S29 * _S30;
          _H29 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * v62) + (float)((float)(_S25 * _S30) * v18))+ (float)((float)(_S29 * _S30) * v20), 0.0), 8191.0)));
          __asm { FCVT            S30, H29 }
          float v2 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v2 = _S30;
            if (_NF) {
              float v2 = 0.0;
            }
          }
          _H30 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v22 * v62) + (float)(v61 * v21)) + (float)(v4 * v23), 0.0), 8191.0)));
          __asm { FCVT            S31, H30 }
          float v68 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H30, #0 }
            float v68 = _S31;
            if (_NF) {
              float v68 = 0.0;
            }
          }
          _H27 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v25 * v62) + (float)(v61 * v24)) + (float)(v4 * v29), 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          float v3 = 65535.0;
          if (_S28 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v3 = _S28;
            if (_NF) {
              float v3 = 0.0;
            }
          }
          unsigned int v73 = *(unsigned __int16 *)(v44 + 2 * v37);
          v44 += 8;
          *float v45 = __rev16(v73);
          v45[1] = __rev16(llroundf(v2));
          v45[2] = __rev16(llroundf(v68));
          v45[3] = __rev16(llroundf(v3));
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      float v41 = (_WORD *)((char *)v41 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_b64a_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *(void *)(result + 152);
    uint64_t v14 = *(void **)(result + 56);
    uint64_t v15 = **(void **)(result + 64);
    uint64_t v16 = **(void **)(result + 136);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    float v26 = *(float *)(v13 + 104);
    uint64_t v27 = v13 + 164;
    uint64_t v28 = v13 + 16548;
    uint64_t v29 = *(void *)(result + 112);
    unint64_t v30 = *(void *)(result + 104) * a2 / v6 + *(void *)(result + 120);
    uint64_t v31 = *(void *)(result + 36);
    uint64_t v32 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v33 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v34 = **(void **)(result + 128) + v30 * v16;
    uint64_t v35 = *(unsigned __int8 *)(v13 + 155);
    result = *(unsigned __int8 *)(v13 + 154);
    uint64_t v36 = (_WORD *)(v34 + 8 * v29);
    uint64_t v37 = *v14 + v15 * v11 + 8 * v31;
    do
    {
      if (v10)
      {
        uint64_t v38 = v10;
        uint64_t v39 = v37;
        uint64_t v40 = v36;
        do
        {
          LOWORD(v2) = *(_WORD *)(v39 + 2 * result);
          LOWORD(v3) = *(_WORD *)(v39 + 2 * v35);
          LOWORD(_S23) = *(_WORD *)(v39 + 2 * v33);
          float v41 = v17 * (float)LODWORD(_S23);
          _H21 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v2), 0.0), 8191.0)));
          unsigned int v43 = llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0));
          __asm { FCVT            S22, H21 }
          _H21 = *(_WORD *)(v27 + 2 * v43);
          __asm { FCVT            S23, H21 }
          _H21 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v41, 0.0), 8191.0)));
          __asm { FCVT            S24, H21 }
          _H25 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * _S23) + (float)(_S22 * v18)) + (float)(_S24 * v20), 0.0), 8191.0)));
          __asm { FCVT            S26, H25 }
          float v2 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCMP            H25, #0 }
            float v2 = _S26;
            if (_NF) {
              float v2 = 0.0;
            }
          }
          _H26 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v22 * _S23) + (float)(_S22 * v21)) + (float)(_S24 * v23), 0.0), 8191.0)));
          __asm { FCVT            S27, H26 }
          float v58 = 65535.0;
          if (_S27 <= 65535.0)
          {
            __asm { FCMP            H26, #0 }
            float v58 = _S27;
            if (_NF) {
              float v58 = 0.0;
            }
          }
          _S23 = v25 * _S23;
          LOWORD(_S23) = *(_WORD *)(v28
                                  + 2
                                  * llroundf(fminf(fmaxf((float)(_S23 + (float)(_S22 * v24)) + (float)(_S24 * v26), 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          float v3 = 65535.0;
          if (_S24 <= 65535.0)
          {
            __asm { FCMP            H23, #0 }
            float v3 = _S24;
            if (_NF) {
              float v3 = 0.0;
            }
          }
          unsigned int v62 = *(unsigned __int16 *)(v39 + 2 * v32);
          v39 += 8;
          _WORD *v40 = __rev16(v62);
          v40[1] = __rev16(llroundf(v2));
          v40[2] = __rev16(llroundf(v58));
          v40[3] = __rev16(llroundf(v3));
          v40 += 4;
          --v38;
        }
        while (v38);
      }
      v37 += v15;
      uint64_t v36 = (_WORD *)((char *)v36 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = **((void **)result + 8);
    uint64_t v15 = **((void **)result + 17);
    float v16 = (float)*(unsigned int *)(v13 + 136) / (float)*(unsigned int *)(v13 + 128);
    unint64_t v17 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v18 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v19 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v20 = *(unsigned __int8 *)(v13 + 155);
    uint64_t v21 = *(unsigned __int8 *)(v13 + 154);
    uint64_t v22 = **((void **)result + 16) + v17 * v15 + 8 * *((void *)result + 14);
    result = (unsigned __int8 *)(**((void **)result + 7) + v14 * v11 + 8 * *(void *)(result + 36));
    do
    {
      if (v10)
      {
        uint64_t v23 = v10;
        uint64_t v24 = result;
        uint64_t v25 = (_WORD *)v22;
        do
        {
          LOWORD(a5) = *(_WORD *)&v24[2 * v21];
          float v26 = v16 * (float)LODWORD(a5);
          a5 = 65535.0;
          if (v26 <= 65535.0)
          {
            a5 = v26;
            if (v26 < 0.0) {
              a5 = 0.0;
            }
          }
          LOWORD(v26) = *(_WORD *)&v24[2 * v20];
          float v27 = v16 * (float)LODWORD(v26);
          float v28 = 65535.0;
          if (v27 <= 65535.0)
          {
            float v28 = v27;
            if (v27 < 0.0) {
              float v28 = 0.0;
            }
          }
          LOWORD(v27) = *(_WORD *)&v24[2 * v19];
          float v29 = v16 * (float)LODWORD(v27);
          float v30 = 65535.0;
          if (v29 <= 65535.0)
          {
            float v30 = v29;
            if (v29 < 0.0) {
              float v30 = 0.0;
            }
          }
          unsigned int v31 = *(unsigned __int16 *)&v24[2 * v18];
          v24 += 8;
          *uint64_t v25 = __rev16(v31);
          v25[1] = __rev16(llroundf(a5));
          v25[2] = __rev16(llroundf(v28));
          v25[3] = __rev16(llroundf(v30));
          v25 += 4;
          --v23;
        }
        while (v23);
      }
      result += v14;
      v22 += v15;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_RGhA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *(void *)(result + 152);
    uint64_t v14 = *(void **)(result + 56);
    uint64_t v15 = **(void **)(result + 64);
    uint64_t v16 = **(void **)(result + 136);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    uint64_t v26 = v13 + 164;
    uint64_t v27 = v13 + 16548;
    uint64_t v28 = v13 + 32932;
    float v29 = *(float *)(v13 + 104);
    float v30 = *(float *)(v13 + 108);
    float v31 = *(float *)(v13 + 112);
    float v32 = *(float *)(v13 + 116);
    float v33 = *(float *)(v13 + 120);
    uint64_t v34 = *(void *)(result + 112);
    unint64_t v35 = *(void *)(result + 104) * a2 / v6 + *(void *)(result + 120);
    uint64_t v36 = *(void *)(result + 36);
    uint64_t v37 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v38 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v39 = **(void **)(result + 128) + v35 * v16;
    result = *(unsigned __int8 *)(v13 + 155);
    uint64_t v40 = *(unsigned __int8 *)(v13 + 154);
    float v41 = (_WORD *)(v39 + 8 * v34);
    uint64_t v42 = *v14 + v15 * v11 + 8 * v36;
    do
    {
      if (v10)
      {
        uint64_t v43 = v10;
        uint64_t v44 = v42;
        float v45 = v41;
        do
        {
          LOWORD(_S25) = *(_WORD *)(v44 + 2 * v40);
          LOWORD(v3) = *(_WORD *)(v44 + 2 * result);
          LOWORD(v4) = *(_WORD *)(v44 + 2 * v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S25), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          float v56 = (float)((float)((float)(v31 * _S26) + (float)(v30 * _S25)) + (float)(v32 * _S27))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S26, _S27)));
          float v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            float v57 = v56;
            if (v56 < 0.0) {
              float v57 = 0.0;
            }
          }
          unsigned int v58 = *(unsigned __int16 *)(v44 + 2 * v37);
          _H28 = *(_WORD *)(v27 + 2 * llroundf(v57));
          v44 += 8;
          __asm { FCVT            S28, H28 }
          float v61 = _S25 * _S28;
          float v62 = _S26 * _S28;
          float v63 = _S27 * _S28;
          float v64 = (float)((float)(v19 * v62) + (float)(v61 * v18)) + (float)(v63 * v20);
          float v65 = (float)((float)(v22 * v62) + (float)(v61 * v21)) + (float)(v63 * v23);
          float v66 = (float)((float)(v25 * v62) + (float)(v61 * v24)) + (float)(v63 * v29);
          float v3 = fminf(fmaxf(v64, 0.0), 8191.0);
          float v4 = fminf(fmaxf(v65, 0.0), 8191.0);
          LOWORD(v4) = *(_WORD *)(v28 + 2 * llroundf(v4));
          _S25 = fminf(fmaxf(v66, 0.0), 8191.0);
          LOWORD(_S25) = *(_WORD *)(v28 + 2 * llroundf(_S25));
          _S28 = (float)v58 * 0.000015259;
          *float v45 = *(_WORD *)(v28 + 2 * llroundf(v3));
          v45[1] = LOWORD(v4);
          v45[2] = LOWORD(_S25);
          __asm { FCVT            H25, S28 }
          v45[3] = LOWORD(_S25);
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      float v41 = (_WORD *)((char *)v41 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_RGhA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *(void *)(result + 152);
    uint64_t v15 = *(void **)(result + 56);
    uint64_t v16 = **(void **)(result + 64);
    uint64_t v17 = **(void **)(result + 136);
    float v18 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    float v19 = *(float *)(v14 + 72);
    float v20 = *(float *)(v14 + 76);
    float v21 = *(float *)(v14 + 80);
    float v22 = *(float *)(v14 + 84);
    float v23 = *(float *)(v14 + 88);
    float v24 = *(float *)(v14 + 92);
    float v25 = *(float *)(v14 + 96);
    float v26 = *(float *)(v14 + 100);
    float v27 = *(float *)(v14 + 104);
    uint64_t v28 = v14 + 164;
    uint64_t v29 = v14 + 16548;
    uint64_t v30 = *(void *)(result + 112);
    unint64_t v31 = *(void *)(result + 104) * a2 / v7 + *(void *)(result + 120);
    uint64_t v32 = *(void *)(result + 36);
    uint64_t v33 = *(unsigned __int8 *)(v14 + 157);
    uint64_t v34 = *(unsigned __int8 *)(v14 + 156);
    uint64_t v35 = **(void **)(result + 128) + v31 * v17;
    uint64_t v36 = *(unsigned __int8 *)(v14 + 155);
    result = *(unsigned __int8 *)(v14 + 154);
    uint64_t v37 = (_WORD *)(v35 + 8 * v30);
    uint64_t v38 = *v15 + v16 * v12 + 8 * v32;
    do
    {
      if (v11)
      {
        uint64_t v39 = v11;
        uint64_t v40 = v38;
        float v41 = v37;
        do
        {
          LOWORD(_S21) = *(_WORD *)(v40 + 2 * result);
          LOWORD(v3) = *(_WORD *)(v40 + 2 * v36);
          LOWORD(v4) = *(_WORD *)(v40 + 2 * v34);
          LOWORD(_S24) = *(_WORD *)(v40 + 2 * v33);
          v40 += 8;
          _H21 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v18 * (float)LODWORD(_S21), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v18 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          unsigned int v50 = llroundf(fminf(fmaxf(v18 * (float)LODWORD(v4), 0.0), 8191.0));
          float v51 = (float)(v20 * _S22) + (float)(_S21 * v19);
          float v52 = (float)(v23 * _S22) + (float)(_S21 * v22);
          float v53 = (float)(v26 * _S22) + (float)(_S21 * v25);
          LOWORD(_S22) = *(_WORD *)(v28 + 2 * v50);
          __asm { FCVT            S22, H22 }
          float v4 = v51 + (float)(_S22 * v21);
          float v55 = v53 + (float)(_S22 * v27);
          float v3 = fminf(fmaxf(v52 + (float)(_S22 * v24), 0.0), 8191.0);
          unsigned int v56 = llroundf(v3);
          LOWORD(v3) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v4, 0.0), 8191.0)));
          _S21 = fminf(fmaxf(v55, 0.0), 8191.0);
          unsigned int v57 = llroundf(_S21);
          LOWORD(_S21) = *(_WORD *)(v29 + 2 * v56);
          LOWORD(v4) = *(_WORD *)(v29 + 2 * v57);
          _S24 = (float)LODWORD(_S24) * 0.000015259;
          *float v41 = LOWORD(v3);
          v41[1] = LOWORD(_S21);
          v41[2] = LOWORD(v4);
          __asm { FCVT            H21, S24 }
          v41[3] = LOWORD(_S21);
          v41 += 4;
          --v39;
        }
        while (v39);
      }
      v38 += v16;
      uint64_t v37 = (_WORD *)((char *)v37 + v17);
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v11 = **((void **)result + 8);
    uint64_t v12 = **((void **)result + 17);
    float v13 = 1.0 / (float)*(unsigned int *)(v10 + 128);
    unint64_t v14 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v15 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v16 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v17 = *(unsigned __int8 *)(v10 + 155);
    uint64_t v18 = *(unsigned __int8 *)(v10 + 154);
    uint64_t v19 = **((void **)result + 16) + v14 * v12 + 8 * *((void *)result + 14);
    uint64_t v20 = **((void **)result + 7) + v11 * v8;
    long long v21 = (const float *)&dword_193E8013C;
    int32x4_t v22 = (int32x4_t)vld1q_dup_f32(v21);
    result = (unsigned __int8 *)(v20 + 8 * *(void *)(result + 36));
    *(float *)v22.i32 = v13;
    float32x4_t v23 = (float32x4_t)vzip1q_s32(v22, v22);
    v23.f32[2] = v13;
    do
    {
      if (v7)
      {
        uint64_t v24 = v7;
        uint64_t v25 = result;
        uint64_t v26 = (float16x4_t *)v19;
        do
        {
          float v27 = (__int16 *)&v25[2 * v17];
          uint64_t v28 = (__int16 *)&v25[2 * v16];
          uint64_t v29 = (__int16 *)&v25[2 * v15];
          v30.i16[0] = *(_WORD *)&v25[2 * v18];
          v25 += 8;
          v30.i16[1] = *v27;
          v30.i16[2] = *v28;
          v30.i16[3] = *v29;
          *v26++ = vcvt_f16_f32(vmulq_f32(v23, vcvtq_f32_u32(vmovl_u16(v30))));
          --v24;
        }
        while (v24);
      }
      result += v11;
      v19 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_RGfA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *(void *)(result + 152);
    unint64_t v14 = *(void **)(result + 56);
    uint64_t v15 = **(void **)(result + 64);
    uint64_t v16 = **(void **)(result + 136);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    uint64_t v26 = v13 + 164;
    uint64_t v27 = v13 + 16548;
    uint64_t v28 = v13 + 32932;
    float v29 = *(float *)(v13 + 104);
    float v30 = *(float *)(v13 + 108);
    float v31 = *(float *)(v13 + 112);
    float v32 = *(float *)(v13 + 116);
    float v33 = *(float *)(v13 + 120);
    uint64_t v34 = *(void *)(result + 112);
    unint64_t v35 = *(void *)(result + 104) * a2 / v6 + *(void *)(result + 120);
    uint64_t v36 = *(void *)(result + 36);
    uint64_t v37 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v38 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v39 = **(void **)(result + 128) + v35 * v16;
    result = *(unsigned __int8 *)(v13 + 155);
    uint64_t v40 = *(unsigned __int8 *)(v13 + 154);
    uint64_t v41 = v39 + 16 * v34;
    uint64_t v42 = *v14 + v15 * v11 + 8 * v36;
    do
    {
      if (v10)
      {
        uint64_t v43 = v10;
        uint64_t v44 = v42;
        uint64_t v45 = v41;
        do
        {
          LOWORD(_S25) = *(_WORD *)(v44 + 2 * v40);
          LOWORD(v3) = *(_WORD *)(v44 + 2 * result);
          LOWORD(_S27) = *(_WORD *)(v44 + 2 * v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)_S25, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)_S27, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          float v56 = (float)((float)((float)(v31 * _S26) + (float)(v30 * _S25)) + (float)(v32 * _S27))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S26, _S27)));
          float v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            float v57 = v56;
            if (v56 < 0.0) {
              float v57 = 0.0;
            }
          }
          unsigned int v58 = *(unsigned __int16 *)(v44 + 2 * v37);
          v44 += 8;
          _H28 = *(_WORD *)(v27 + 2 * llroundf(v57));
          __asm { FCVT            S28, H28 }
          float v61 = _S25 * _S28;
          _S26 = _S26 * _S28;
          _S27 = _S27 * _S28;
          float v64 = (float)((float)(v19 * _S26) + (float)(v61 * v18)) + (float)(_S27 * v20);
          float v65 = (float)((float)(v22 * _S26) + (float)(v61 * v21)) + (float)(_S27 * v23);
          _S25 = (float)((float)(v25 * _S26) + (float)(v61 * v24)) + (float)(_S27 * v29);
          LOWORD(_S26) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          LOWORD(_S27) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          LOWORD(_S25) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          *(_DWORD *)uint64_t v45 = _S26;
          *(_DWORD *)(v45 + 4) = _S27;
          float v3 = (float)v58 * 0.000015259;
          *(_DWORD *)(v45 + 8) = _S25;
          *(float *)(v45 + 12) = v3;
          v45 += 16;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      v41 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_RGfA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *(void *)(result + 152);
    unint64_t v14 = *(void **)(result + 56);
    uint64_t v15 = **(void **)(result + 64);
    uint64_t v16 = **(void **)(result + 136);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    float v26 = *(float *)(v13 + 104);
    uint64_t v27 = v13 + 164;
    uint64_t v28 = v13 + 16548;
    uint64_t v29 = *(void *)(result + 112);
    unint64_t v30 = *(void *)(result + 104) * a2 / v6 + *(void *)(result + 120);
    uint64_t v31 = *(void *)(result + 36);
    uint64_t v32 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v33 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v34 = **(void **)(result + 128) + v30 * v16;
    uint64_t v35 = *(unsigned __int8 *)(v13 + 155);
    result = *(unsigned __int8 *)(v13 + 154);
    uint64_t v36 = v34 + 16 * v29;
    uint64_t v37 = *v14 + v15 * v11 + 8 * v31;
    do
    {
      if (v10)
      {
        uint64_t v38 = v10;
        uint64_t v39 = v37;
        uint64_t v40 = v36;
        do
        {
          LOWORD(v2) = *(_WORD *)(v39 + 2 * result);
          LOWORD(v3) = *(_WORD *)(v39 + 2 * v35);
          LOWORD(_S23) = *(_WORD *)(v39 + 2 * v33);
          unsigned int v41 = llroundf(fminf(fmaxf(v17 * (float)LODWORD(v2), 0.0), 8191.0));
          _S21 = v17 * (float)_S23;
          _H23 = *(_WORD *)(v27 + 2 * v41);
          __asm { FCVT            S23, H23 }
          _H22 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S21) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _S24 = (float)((float)(v19 * _S22) + (float)(_S23 * v18)) + (float)(_S21 * v20);
          float v53 = (float)((float)(v22 * _S22) + (float)(_S23 * v21)) + (float)(_S21 * v23);
          *(float *)&unsigned int v54 = (float)(v25 * _S22) + (float)(_S23 * v24);
          float v55 = *(float *)&v54 + (float)(_S21 * v26);
          LOWORD(v54) = *(_WORD *)(v39 + 2 * v32);
          v39 += 8;
          LOWORD(_S23) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          LOWORD(_S24) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v53, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          unsigned int v56 = llroundf(fminf(fmaxf(v55, 0.0), 8191.0));
          __asm { FCVT            S21, H24 }
          LOWORD(_S24) = *(_WORD *)(v28 + 2 * v56);
          __asm { FCVT            S24, H24 }
          float v3 = (float)v54;
          *(_DWORD *)uint64_t v40 = _S23;
          *(_DWORD *)(v40 + 4) = _S21;
          float v2 = v3 * 0.000015259;
          *(_DWORD *)(v40 + 8) = _S24;
          *(float *)(v40 + 12) = v3 * 0.000015259;
          v40 += 16;
          --v38;
        }
        while (v38);
      }
      v37 += v15;
      v36 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = **((void **)result + 8);
    uint64_t v18 = **((void **)result + 17);
    float v19 = 1.0 / (float)*(unsigned int *)(v16 + 128);
    unint64_t v20 = *((void *)result + 13) * a2 / v9 + *((void *)result + 15);
    uint64_t v21 = *(unsigned __int8 *)(v16 + 157);
    uint64_t v22 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v23 = *(unsigned __int8 *)(v16 + 155);
    uint64_t v24 = *(unsigned __int8 *)(v16 + 154);
    uint64_t v25 = **((void **)result + 16) + v20 * v18 + 16 * *((void *)result + 14);
    result = (unsigned __int8 *)(**((void **)result + 7) + v17 * v14 + 8 * *(void *)(result + 36));
    do
    {
      if (v13)
      {
        uint64_t v26 = v13;
        uint64_t v27 = result;
        uint64_t v28 = (float *)v25;
        do
        {
          LOWORD(a5) = *(_WORD *)&v27[2 * v24];
          LOWORD(a6) = *(_WORD *)&v27[2 * v23];
          a6 = v19 * (float)LODWORD(a6);
          LOWORD(a7) = *(_WORD *)&v27[2 * v22];
          a7 = v19 * (float)LODWORD(a7);
          LOWORD(a8) = *(_WORD *)&v27[2 * v21];
          v27 += 8;
          a8 = (float)LODWORD(a8);
          *uint64_t v28 = v19 * (float)LODWORD(a5);
          v28[1] = a6;
          a5 = a8 * 0.000015259;
          v28[2] = a7;
          v28[3] = a8 * 0.000015259;
          v28 += 4;
          --v26;
        }
        while (v26);
      }
      result += v17;
      v25 += v18;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t VTLoadVideoDecodersPreferringInternalBundles()
{
  return vtLoadVideoDecodersGuts(1);
}

uint64_t vtLoadVideoDecodersGuts(int a1)
{
  vtTryToLoadVideoDecoder("/System/Library/VideoCodecs/H264SW.videocodec", "VCPAVCRegisterDecoder");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/VCH263.videodecoder", "VCH263Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/H264H2.videodecoder", "H264H2Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/MP4VH2.videodecoder", "MP4VH2Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/Slim.videodecoder", "SLIMRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/JPEGH1.videodecoder", "JPEGH1Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/H264H4.videodecoder", "H264H4Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/MP4VH4.videodecoder", "MP4VH4Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/H264H6.videodecoder", "H264H6Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/MP4VH6.videodecoder", "MP4VH6Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/H264H8.videodecoder", "H264H8Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/MP4VH8.videodecoder", "MP4VH8Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/HEVCH8.videodecoder", "HEVCH8Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/H8.videodecoder", "H8Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoCodecs/VCPHEVC.videocodec", "VCPHEVCRegisterDecoder");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/AVD.videodecoder", "AVDRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/ExampleIPB.videodecoder", "ExampleIPBDecoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/BritannicusDecoder.videodecoder", "BritannicusRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/VCPMP4V.videodecoder", "VCPMP4VRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/AppleProResSWDecoder.videodecoder", "ProResSWDecoderRegister");
  if (!a1
    || !vtTryToLoadVideoDecoder("/AppleInternal/Library/VideoCodecs/AppleProResHWDecoder-Dev.videodecoder", "ProResDecoderRegister"))
  {
    vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/AppleProResHWDecoder.videodecoder", "ProResDecoderRegister");
  }
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/AV1SW.videodecoder", "AV1RegisterDecoder");

  return vtTryToLoadVideoDecoder("/AppleInternal/Library/VideoCodecs/yzip.videocodec", "yzipRegisterDecoder");
}

uint64_t vtTryToLoadVideoDecoder(const char *a1, const char *a2)
{
  uint64_t result = (uint64_t)dlopen(a1, 4);
  if (result)
  {
    uint64_t result = (uint64_t)dlsym((void *)result, a2);
    if (result)
    {
      ((void (*)(void))result)();
      return 1;
    }
  }
  return result;
}

void FigGetAlignmentForIOSurfaceOutputToDisplayService(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a2)
  {
    if ((planeBaseRequirement_checked & 1) == 0)
    {
      io_registry_entry_t H3clcdService = getH3clcdService();
      if (H3clcdService)
      {
        io_object_t v6 = H3clcdService;
        int v7 = 64;
        uint64_t valuePtr = 64;
        CFDictionaryRef v8 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(H3clcdService, "IOService", @"DisplayPipePlaneBaseAlignment", 0, 0);
        if (v8)
        {
          CFDictionaryRef v9 = v8;
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v8, @"PlaneBaseAlignmentLinear");
          if (Value)
          {
            CFNumberRef v11 = Value;
            CFTypeID v12 = CFGetTypeID(Value);
            if (v12 == CFNumberGetTypeID()) {
              CFNumberGetValue(v11, kCFNumberLongLongType, &valuePtr);
            }
          }
          CFRelease(v9);
          int v7 = valuePtr;
        }
        planeBaseRequirement_requirement = v7;
        IOObjectRelease(v6);
      }
      planeBaseRequirement_checked = 1;
    }
    *a2 = planeBaseRequirement_requirement;
  }
  if (a3)
  {
    if ((strideRequirement_checked & 1) == 0)
    {
      io_registry_entry_t v13 = getH3clcdService();
      if (v13)
      {
        io_object_t v14 = v13;
        int v15 = 64;
        uint64_t valuePtr = 64;
        CFDictionaryRef v16 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(v13, "IOService", @"DisplayPipeStrideRequirements", 0, 0);
        if (v16)
        {
          CFDictionaryRef v17 = v16;
          CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(v16, @"StrideLinearHorizontal");
          if (v18)
          {
            CFNumberRef v19 = v18;
            CFTypeID v20 = CFGetTypeID(v18);
            if (v20 == CFNumberGetTypeID()) {
              CFNumberGetValue(v19, kCFNumberLongLongType, &valuePtr);
            }
          }
          CFRelease(v17);
          int v15 = valuePtr;
        }
        strideRequirement_requirement = v15;
        IOObjectRelease(v14);
      }
      strideRequirement_checked = 1;
    }
    *a3 = strideRequirement_requirement;
  }
}

void FigGetAlignmentForIOSurfaceOutput(_DWORD *a1, _DWORD *a2)
{
}

uint64_t FigGetNumberOfScalerCores()
{
  uint64_t v4 = 0;
  long long v2 = 0u;
  long long v3 = 0u;
  memset(v1, 0, sizeof(v1));
  scalerCapabilities((uint64_t)v1);
  return DWORD2(v2);
}

uint64_t scalerCapabilities(uint64_t result)
{
  uint64_t v1 = result;
  if ((scalerCapabilities_checked & 1) == 0)
  {
    mach_port_t v2 = *MEMORY[0x1E4F2EEF0];
    CFDictionaryRef v3 = IOServiceMatching("AppleM2ScalerCSCDriver");
    uint64_t result = IOServiceGetMatchingService(v2, v3);
    if (result)
    {
      io_object_t v4 = result;
      uint64_t valuePtr = 0;
      uint64_t v92 = 0;
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      uint64_t v87 = 0;
      uint64_t v88 = 0;
      scalerCapabilities_flagCropping = 1;
      CFDictionaryRef v5 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(result, "IOService", @"IOSurfaceAcceleratorCapabilitiesDict", 0, 0);
      if (v5)
      {
        CFDictionaryRef v6 = v5;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v5, @"IOSurfaceAcceleratorFormatInInterleaved422");
        if (Value)
        {
          CFNumberRef v8 = Value;
          CFTypeID v9 = CFGetTypeID(Value);
          if (v9 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v8, kCFNumberLongLongType, &valuePtr);
            if (valuePtr) {
              scalerCapabilities_flagYUVS = 1;
            }
          }
        }
        CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorCapabilitiesIdentityCSC");
        if (v10)
        {
          CFNumberRef v11 = v10;
          CFTypeID v12 = CFGetTypeID(v10);
          if (v12 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v11, kCFNumberLongLongType, &v90);
            if (v90) {
              scalerCapabilities_flagRangeConversion = 1;
            }
          }
        }
        CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(v6, @"kSurfaceAcceleratorCapabilitiesColorManager");
        if (v13)
        {
          CFNumberRef v14 = v13;
          CFTypeID v15 = CFGetTypeID(v13);
          if (v15 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v14, kCFNumberLongLongType, &v89);
            if (v89) {
              scalerCapabilities_flagColorConversion = 1;
            }
          }
        }
        CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorCapabilitiesHDR");
        if (v16)
        {
          CFNumberRef v17 = v16;
          CFTypeID v18 = CFGetTypeID(v16);
          if (v18 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v17, kCFNumberLongLongType, &v88);
            if (v88) {
              scalerCapabilities_flagHDR = 1;
            }
          }
        }
        CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorCapabilitiesFractionalDimensions");
        if (v19)
        {
          CFNumberRef v20 = v19;
          CFTypeID v21 = CFGetTypeID(v19);
          if (v21 == CFNumberGetTypeID())
          {
            uint64_t v86 = 0;
            CFNumberGetValue(v20, kCFNumberLongLongType, &v86);
            if (v86) {
              scalerCapabilities_flagFractionalDimensionsSupport = 1;
            }
          }
        }
        CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorCapabilitiesMaxSourceWidth");
        if (v22)
        {
          CFNumberRef v23 = v22;
          CFTypeID v24 = CFGetTypeID(v22);
          if (v24 == CFNumberGetTypeID()) {
            CFNumberGetValue(v23, kCFNumberLongLongType, &scalerCapabilities_maxSourceWidthVal);
          }
        }
        CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorCapabilitiesMaxSourceHeight");
        if (v25)
        {
          CFNumberRef v26 = v25;
          CFTypeID v27 = CFGetTypeID(v25);
          if (v27 == CFNumberGetTypeID()) {
            CFNumberGetValue(v26, kCFNumberLongLongType, &scalerCapabilities_maxSourceHeightVal);
          }
        }
        CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorCapabilitiesMaxDestWidth");
        if (v28)
        {
          CFNumberRef v29 = v28;
          CFTypeID v30 = CFGetTypeID(v28);
          if (v30 == CFNumberGetTypeID()) {
            CFNumberGetValue(v29, kCFNumberLongLongType, &scalerCapabilities_maxDestWidthVal);
          }
        }
        CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorCapabilitiesMaxDestHeight");
        if (v31)
        {
          CFNumberRef v32 = v31;
          CFTypeID v33 = CFGetTypeID(v31);
          if (v33 == CFNumberGetTypeID()) {
            CFNumberGetValue(v32, kCFNumberLongLongType, &scalerCapabilities_maxDestHeightVal);
          }
        }
        CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorScalerVersion");
        if (v34)
        {
          CFNumberRef v35 = v34;
          CFTypeID v36 = CFGetTypeID(v34);
          if (v36 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v35, kCFNumberLongLongType, &v87);
            if (v87 >= 262151) {
              scalerCapabilities_numScalerCores = 1;
            }
          }
        }
        CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorFormatInRGBA8888");
        if (v37)
        {
          CFNumberRef v38 = v37;
          CFTypeID v39 = CFGetTypeID(v37);
          if (v39 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v38, kCFNumberLongLongType, &valuePtr);
            if (valuePtr) {
              scalerCapabilities_flagRGBA = 1;
            }
          }
        }
        CFNumberRef v40 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorFormatInARGB2101010");
        if (v40)
        {
          CFNumberRef v41 = v40;
          CFTypeID v42 = CFGetTypeID(v40);
          if (v42 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v41, kCFNumberLongLongType, &valuePtr);
            if (valuePtr) {
              scalerCapabilities_flagInw30r = 1;
            }
          }
        }
        CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorFormatOutARGB2101010");
        if (v43)
        {
          CFNumberRef v44 = v43;
          CFTypeID v45 = CFGetTypeID(v43);
          if (v45 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v44, kCFNumberLongLongType, &valuePtr);
            if (valuePtr) {
              scalerCapabilities_flagOutw30r = 1;
            }
          }
        }
        CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorFormatInARGB8101010");
        if (v46)
        {
          CFNumberRef v47 = v46;
          CFTypeID v48 = CFGetTypeID(v46);
          if (v48 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v47, kCFNumberLongLongType, &valuePtr);
            if (valuePtr) {
              scalerCapabilities_flagInb3a8 = 1;
            }
          }
        }
        CFNumberRef v49 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorFormatOutARGB8101010");
        if (v49)
        {
          CFNumberRef v50 = v49;
          CFTypeID v51 = CFGetTypeID(v49);
          if (v51 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v50, kCFNumberLongLongType, &valuePtr);
            if (valuePtr) {
              scalerCapabilities_flagOutb3a8 = 1;
            }
          }
        }
        CFNumberRef v52 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorFormatIn1PlaneYCBCR10444");
        if (v52)
        {
          CFNumberRef v53 = v52;
          CFTypeID v54 = CFGetTypeID(v52);
          if (v54 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v53, kCFNumberLongLongType, &valuePtr);
            if (valuePtr) {
              scalerCapabilities_flagIn1PlaneYCBCR10Bit444 = 1;
            }
          }
        }
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr) {
          scalerCapabilities_flagInLumaOnlyL008 = 1;
        }
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr) {
          scalerCapabilities_flagInLumaOnlyL010 = 1;
        }
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr) {
          scalerCapabilities_flagInLumaOnlyL016 = 1;
        }
        CFNumberRef v55 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorFormatOut1PlaneYCBCR10444");
        if (v55)
        {
          CFNumberRef v56 = v55;
          CFTypeID v57 = CFGetTypeID(v55);
          if (v57 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v56, kCFNumberLongLongType, &valuePtr);
            if (valuePtr) {
              scalerCapabilities_flagOut1PlaneYCBCR10Bit444 = 1;
            }
          }
        }
        CFNumberRef v58 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorFormatIn2Planes42010");
        if (v58)
        {
          CFNumberRef v59 = v58;
          CFTypeID v60 = CFGetTypeID(v58);
          if (v60 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v59, kCFNumberLongLongType, &valuePtr);
            if (valuePtr) {
              scalerCapabilities_flagIn2PlanesYCBCR10Bit420 = 1;
            }
          }
        }
        CFNumberRef v61 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorFormatOut2Planes42010");
        if (v61)
        {
          CFNumberRef v62 = v61;
          CFTypeID v63 = CFGetTypeID(v61);
          if (v63 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v62, kCFNumberLongLongType, &valuePtr);
            if (valuePtr) {
              scalerCapabilities_flagOut2PlanesYCBCR10Bit420 = 1;
            }
          }
        }
        CFNumberRef v64 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorFormatIn2Planes42210");
        if (v64)
        {
          CFNumberRef v65 = v64;
          CFTypeID v66 = CFGetTypeID(v64);
          if (v66 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v65, kCFNumberLongLongType, &valuePtr);
            if (valuePtr) {
              scalerCapabilities_flagIn2PlanesYCBCR10Bit422 = 1;
            }
          }
        }
        CFNumberRef v67 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorFormatOut2Planes42210");
        if (v67)
        {
          CFNumberRef v68 = v67;
          CFTypeID v69 = CFGetTypeID(v67);
          if (v69 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v68, kCFNumberLongLongType, &valuePtr);
            if (valuePtr) {
              scalerCapabilities_flagOut2PlanesYCBCR10Bit422 = 1;
            }
          }
        }
        CFNumberRef v70 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorFormatIn2Planes44410");
        if (v70)
        {
          CFNumberRef v71 = v70;
          CFTypeID v72 = CFGetTypeID(v70);
          if (v72 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v71, kCFNumberLongLongType, &valuePtr);
            if (valuePtr) {
              scalerCapabilities_flagIn2PlanesYCBCR10Bit444 = 1;
            }
          }
        }
        CFNumberRef v73 = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorFormatOut2Planes44410");
        if (v73)
        {
          CFNumberRef v74 = v73;
          CFTypeID v75 = CFGetTypeID(v73);
          if (v75 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v74, kCFNumberLongLongType, &valuePtr);
            if (valuePtr) {
              scalerCapabilities_flagOut2PlanesYCBCR10Bit444 = 1;
            }
          }
        }
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr) {
          scalerCapabilities_flagInMediaCompression = 1;
        }
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr) {
          scalerCapabilities_flagOutMediaCompression = 1;
        }
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr) {
          scalerCapabilities_flagInterchangeCompression = 1;
        }
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr) {
          scalerCapabilities_flagInterchangeLossyCompression = 1;
        }
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr) {
          scalerCapabilities_flagOutLumaOnlyL008 = 1;
        }
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr) {
          scalerCapabilities_flagOutLumaOnlyL010 = 1;
        }
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr) {
          scalerCapabilities_flagOutLumaOnlyL016 = 1;
        }
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr) {
          scalerCapabilities_flag12bitYCbCr = 1;
        }
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr) {
          scalerCapabilities_flag16bitYCbCr = 1;
        }
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr) {
          scalerCapabilities_flagYCbCrAlpha = 1;
        }
        if (FigCFDictionaryGetInt64IfPresent() && v92) {
          *(float *)&scalerCapabilities_maxWidthScaleFactorVal = (float)v92;
        }
        if (FigCFDictionaryGetInt64IfPresent() && v92) {
          *(float *)&scalerCapabilities_minWidthScaleFactorVal = 1.0 / (float)v92;
        }
        if (FigCFDictionaryGetInt64IfPresent() && v92) {
          *(float *)&scalerCapabilities_maxHeightScaleFactorVal = (float)v92;
        }
        if (FigCFDictionaryGetInt64IfPresent() && v92)
        {
          *(float *)&int v76 = 1.0 / (float)v92;
          scalerCapabilities_minHeightScaleFactorVal = v76;
        }
        else
        {
          int v76 = scalerCapabilities_minHeightScaleFactorVal;
        }
        int v77 = scalerCapabilities_minWidthScaleFactorVal;
        if (*(float *)&scalerCapabilities_minWidthScaleFactorVal < *(float *)&v76)
        {
          scalerCapabilities_minWidthScaleFactorVal = v76;
          int v77 = v76;
        }
        if (*(float *)&v76 < *(float *)&v77) {
          scalerCapabilities_minHeightScaleFactorVal = v77;
        }
        if (*(float *)&scalerCapabilities_maxWidthScaleFactorVal <= *(float *)&scalerCapabilities_maxHeightScaleFactorVal)
        {
          if (*(float *)&scalerCapabilities_maxHeightScaleFactorVal > *(float *)&scalerCapabilities_maxWidthScaleFactorVal) {
            scalerCapabilities_maxHeightScaleFactorVal = scalerCapabilities_maxWidthScaleFactorVal;
          }
        }
        else
        {
          scalerCapabilities_maxWidthScaleFactorVal = scalerCapabilities_maxHeightScaleFactorVal;
        }
        if (FigCFDictionaryGetInt64IfPresent() && v92) {
          scalerCapabilities_vTapsVal = v92;
        }
        if (FigCFDictionaryGetInt64IfPresent() && v92) {
          scalerCapabilities_hTapsVal = v92;
        }
        if (FigCFDictionaryGetInt64IfPresent() && v92) {
          scalerCapabilities_vPhasesVal = v92;
        }
        if (FigCFDictionaryGetInt64IfPresent() && v92) {
          scalerCapabilities_hPhasesVal = v92;
        }
        if (FigCFDictionaryGetInt64IfPresent() && v92) {
          scalerCapabilities_prePointBitsVal = v92;
        }
        if (FigCFDictionaryGetInt64IfPresent() && v92) {
          scalerCapabilities_postPointBitsVal = v92;
        }
        CFRelease(v6);
      }
      uint64_t result = IOObjectRelease(v4);
    }
    scalerCapabilities_checked = 1;
  }
  if (v1)
  {
    *(unsigned char *)uint64_t v1 = scalerCapabilities_flagCropping;
    *(unsigned char *)(v1 + 1) = scalerCapabilities_flagColorConversion;
    *(unsigned char *)(v1 + 16) = scalerCapabilities_flagHDR;
    *(unsigned char *)(v1 + 17) = scalerCapabilities_flagFractionalDimensionsSupport;
    *(unsigned char *)(v1 + 2) = scalerCapabilities_flagYUVS;
    *(unsigned char *)(v1 + 3) = scalerCapabilities_flagRGBA;
    *(unsigned char *)(v1 + 4) = scalerCapabilities_flagInw30r & scalerCapabilities_flagOutw30r & 1;
    *(unsigned char *)(v1 + 5) = scalerCapabilities_flagInb3a8 & scalerCapabilities_flagOutb3a8 & 1;
    *(unsigned char *)(v1 + 9) = scalerCapabilities_flagIn1PlaneYCBCR10Bit444 & scalerCapabilities_flagOut1PlaneYCBCR10Bit444 & 1;
    *(unsigned char *)(v1 + 10) = scalerCapabilities_flagIn2PlanesYCBCR10Bit420 & scalerCapabilities_flagOut2PlanesYCBCR10Bit420 & 1;
    *(unsigned char *)(v1 + 11) = scalerCapabilities_flagIn2PlanesYCBCR10Bit422 & scalerCapabilities_flagOut2PlanesYCBCR10Bit422 & 1;
    *(unsigned char *)(v1 + 12) = scalerCapabilities_flagIn2PlanesYCBCR10Bit444 & scalerCapabilities_flagOut2PlanesYCBCR10Bit444 & 1;
    *(unsigned char *)(v1 + 13) = scalerCapabilities_flagInMediaCompression & scalerCapabilities_flagOutMediaCompression & 1;
    *(unsigned char *)(v1 + 14) = scalerCapabilities_flagInterchangeCompression;
    *(unsigned char *)(v1 + 76) = scalerCapabilities_flagInterchangeLossyCompression;
    *(unsigned char *)(v1 + 6) = scalerCapabilities_flagInLumaOnlyL008 & scalerCapabilities_flagOutLumaOnlyL008 & 1;
    *(unsigned char *)(v1 + 7) = scalerCapabilities_flagInLumaOnlyL010 & scalerCapabilities_flagOutLumaOnlyL010 & 1;
    *(unsigned char *)(v1 + 8) = scalerCapabilities_flagInLumaOnlyL016 & scalerCapabilities_flagOutLumaOnlyL016 & 1;
    *(unsigned char *)(v1 + 15) = scalerCapabilities_flagRangeConversion;
    *(unsigned char *)(v1 + 77) = scalerCapabilities_flag12bitYCbCr;
    *(unsigned char *)(v1 + 78) = scalerCapabilities_flag16bitYCbCr;
    *(unsigned char *)(v1 + 79) = scalerCapabilities_flagYCbCrAlpha;
    uint64_t v78 = scalerCapabilities_maxSourceHeightVal;
    *(void *)(v1 + 24) = scalerCapabilities_maxSourceWidthVal;
    *(void *)(v1 + 32) = v78;
    uint64_t v79 = scalerCapabilities_maxDestHeightVal;
    *(void *)(v1 + 40) = scalerCapabilities_maxDestWidthVal;
    *(void *)(v1 + 48) = v79;
    int v80 = scalerCapabilities_minWidthScaleFactorVal;
    *(_DWORD *)(v1 + 56) = scalerCapabilities_maxWidthScaleFactorVal;
    *(_DWORD *)(v1 + 60) = v80;
    int v81 = scalerCapabilities_minHeightScaleFactorVal;
    *(_DWORD *)(v1 + 64) = scalerCapabilities_maxHeightScaleFactorVal;
    *(_DWORD *)(v1 + 68) = v81;
    if (scalerCapabilities_numScalerCores) {
      int v82 = 2;
    }
    else {
      int v82 = 1;
    }
    *(_DWORD *)(v1 + 72) = v82;
    int v83 = scalerCapabilities_hTapsVal;
    *(_DWORD *)(v1 + 80) = scalerCapabilities_vTapsVal;
    *(_DWORD *)(v1 + 84) = v83;
    int v84 = scalerCapabilities_hPhasesVal;
    *(_DWORD *)(v1 + 88) = scalerCapabilities_vPhasesVal;
    *(_DWORD *)(v1 + 92) = v84;
    int v85 = scalerCapabilities_postPointBitsVal;
    *(_DWORD *)(v1 + 96) = scalerCapabilities_prePointBitsVal;
    *(_DWORD *)(v1 + 100) = v85;
  }
  return result;
}

uint64_t FigGetIOSurfaceAcceleratorCapabilityFractionalDimensions()
{
  uint64_t v7 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v3 = 0u;
  long long v4 = 0u;
  long long v1 = 0u;
  long long v2 = 0u;
  scalerCapabilities((uint64_t)&v1);
  return BYTE1(v2);
}

uint64_t FigGetCacheModeForCPUProcessing()
{
  return 768;
}

CFDictionaryRef FigCreateIOSurfacePropertiesDictionaryWithCacheMode(int a1)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  int valuePtr = a1;
  keys[1] = 0;
  values[1] = 0;
  CFNumberRef v1 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  keys[0] = *(void **)MEMORY[0x1E4F2EFE8];
  values[0] = v1;
  CFDictionaryRef v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

uint64_t FigCreatePixelBufferAttributesWithIOSurfaceSupport(const void *a1, int a2, __CFDictionary **a3)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (VTAvoidIOSurfaceBackings())
    {
      if (a1) {
        long long v6 = (__CFDictionary *)CFRetain(a1);
      }
      else {
        long long v6 = 0;
      }
      uint64_t v20 = 0;
      *a3 = v6;
      return v20;
    }
    uint64_t v7 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (a1)
    {
      CFTypeRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x1E4F24D20]);
      CFTypeID v9 = (void *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x1E4F24CB0]);
      if (Value)
      {
        CFTypeRef v17 = CFRetain(Value);
        if (!v9) {
          goto LABEL_8;
        }
        goto LABEL_17;
      }
    }
    else
    {
      CFTypeID v9 = 0;
    }
    values = 0;
    keys[0] = 0;
    CFDictionaryRef v21 = CFDictionaryCreate(*v7, (const void **)keys, (const void **)&values, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v21) {
      return FigSignalErrorAt();
    }
    CFTypeRef v17 = v21;
    CFTypeRef Value = 0;
    if (!v9)
    {
LABEL_8:
      if (v17)
      {
        CFTypeID v18 = CFGetTypeID(v17);
        if (v18 == CFDictionaryGetTypeID())
        {
          if (CFDictionaryGetValue((CFDictionaryRef)v17, (const void *)*MEMORY[0x1E4F2EFE8]))
          {
            ArrayWithCacheModes = 0;
LABEL_28:
            if (Value == v17 && v9 == ArrayWithCacheModes)
            {
              if (a1) {
                CFNumberRef v26 = (__CFDictionary *)CFRetain(a1);
              }
              else {
                CFNumberRef v26 = 0;
              }
              uint64_t v20 = 0;
              *a3 = v26;
              if (!v17) {
                goto LABEL_47;
              }
              goto LABEL_46;
            }
            char v22 = 1;
            CFTypeID v9 = ArrayWithCacheModes;
LABEL_33:
            MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
            if (MutableCopy)
            {
              CFNumberRef v25 = MutableCopy;
              CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D20], v17);
              if (v9) {
                CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E4F24CB0], v9);
              }
              if ((v22 & 1) == 0) {
                CFDictionarySetValue(v25, @"PreferRealTimeCacheModeIfEveryoneDoes", (const void *)*MEMORY[0x1E4F1CFD0]);
              }
              uint64_t v20 = 0;
              *a3 = v25;
              if (!v17) {
                goto LABEL_47;
              }
              goto LABEL_46;
            }
            uint64_t v20 = FigSignalErrorAt();
            if (!v17)
            {
LABEL_47:
              if (v9) {
                CFRelease(v9);
              }
              return v20;
            }
LABEL_46:
            CFRelease(v17);
            goto LABEL_47;
          }
        }
      }
      if ((a2 - 1) >= 4)
      {
        if (a2)
        {
          if (a2 != 5) {
            goto LABEL_50;
          }
          if (displayRequiresRealTimeCacheMode_sCheckOnce != -1) {
            dispatch_once(&displayRequiresRealTimeCacheMode_sCheckOnce, &__block_literal_global_9);
          }
          if (displayRequiresRealTimeCacheMode_isTrueUCEnabled)
          {
            char v22 = 0;
            CFTypeID v9 = 0;
            goto LABEL_33;
          }
        }
        ArrayWithCacheModes = createArrayWithCacheModes(1024, v10, v11, v12, v13, v14, v15, v16, 1280);
      }
      else
      {
        ArrayWithCacheModes = createArrayWithCacheModes(768, v10, v11, v12, v13, v14, v15, v16, 0);
      }
      if (ArrayWithCacheModes) {
        goto LABEL_28;
      }
LABEL_50:
      uint64_t v20 = FigSignalErrorAt();
      ArrayWithCacheModes = 0;
      if (v20)
      {
        CFTypeID v9 = 0;
        if (!v17) {
          goto LABEL_47;
        }
        goto LABEL_46;
      }
      goto LABEL_28;
    }
LABEL_17:
    ArrayWithCacheModes = (void *)CFRetain(v9);
    goto LABEL_28;
  }

  return FigSignalErrorAt();
}

__CFArray *FigCreatePixelBufferCacheModeArray(int a1)
{
  int valuePtr = 768;
  int v13 = a1;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    return Mutable;
  }
  for (uint64_t i = 0; i != 6; ++i)
  {
    int v5 = dword_193E80220[i];
    if (v5 != a1 && i != 3) {
      appendIntToArray(v5, Mutable);
    }
  }
  if (a1 != 768)
  {
    CFNumberRef v7 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
    if (!v7)
    {
LABEL_15:
      FigSignalErrorAt();
      CFRelease(Mutable);
      return 0;
    }
    CFNumberRef v8 = v7;
    CFArrayInsertValueAtIndex(Mutable, 0, v7);
    CFRelease(v8);
  }
  CFNumberRef v9 = CFNumberCreate(v2, kCFNumberSInt32Type, &v13);
  if (!v9) {
    goto LABEL_15;
  }
  CFNumberRef v10 = v9;
  CFArrayInsertValueAtIndex(Mutable, 0, v9);
  CFRelease(v10);
  return Mutable;
}

uint64_t appendIntToArray(int a1, __CFArray *a2)
{
  int valuePtr = a1;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  if (!v3) {
    return FigSignalErrorAt();
  }
  CFNumberRef v4 = v3;
  CFArrayAppendValue(a2, v3);
  CFRelease(v4);
  return 0;
}

uint64_t FigCreateIOSurfaceBackedCVPixelBufferWithAttributes(int a1, int a2, OSType a3, CFDictionaryRef theDict, CVPixelBufferRef *a5)
{
  CFNumberRef v9 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (theDict) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  uint64_t v11 = MutableCopy;
  CFDictionaryRef IOSurfacePropertiesDictionary = FigCreateIOSurfacePropertiesDictionary();
  if (IOSurfacePropertiesDictionary)
  {
    CFDictionaryRef v13 = IOSurfacePropertiesDictionary;
    if (!VTAvoidIOSurfaceBackings()) {
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E4F24D20], v13);
    }
    CFRelease(v13);
  }
  uint64_t v14 = CVPixelBufferCreate(*v9, a1, a2, a3, v11, a5);
  CFRelease(v11);
  return v14;
}

uint64_t FigCreateProtectedIOSurfaceBackedCVPixelBufferWithAttributes(int a1, int a2, OSType a3, uint64_t a4, uint64_t a5, CVPixelBufferRef *a6)
{
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFDictionaryRef IOSurfacePropertiesDictionary = FigCreateIOSurfacePropertiesDictionary();
  uint64_t v14 = (const void *)FigCFDictionaryCreateMutableCopy();
  if (a5) {
    FigCFDictionarySetInt64();
  }
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D20], v14);
  uint64_t v15 = CVPixelBufferCreate(v11, a1, a2, a3, MutableCopy, a6);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (IOSurfacePropertiesDictionary) {
    CFRelease(IOSurfacePropertiesDictionary);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v15;
}

uint64_t getH3clcdService()
{
  mach_port_t v0 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v1 = IOServiceMatching("AppleCLCD");
  uint64_t result = IOServiceGetMatchingService(v0, v1);
  if (!result)
  {
    CFDictionaryRef v3 = IOServiceMatching("AppleCLCD2");
    uint64_t result = IOServiceGetMatchingService(v0, v3);
    if (!result)
    {
      CFDictionaryRef v4 = IOServiceMatching("AppleRGBOUT");
      return IOServiceGetMatchingService(v0, v4);
    }
  }
  return result;
}

uint64_t __displayRequiresRealTimeCacheMode_block_invoke()
{
  int v2 = 0;
  size_t v1 = 4;
  uint64_t result = sysctlbyname("hw.optional.ucnormal_mem", &v2, &v1, 0, 0);
  if (!result) {
    displayRequiresRealTimeCacheMode_isTrueUCEnabled = v2 != 0;
  }
  return result;
}

CFMutableArrayRef createArrayWithCacheModes(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    if (appendIntToArray(a1, Mutable))
    {
LABEL_6:
      CFRelease(Mutable);
      return 0;
    }
    else
    {
      CFDictionaryRef v13 = (int *)&a9;
      while (1)
      {
        CFAllocatorRef v11 = v13;
        v13 += 2;
        if (*v11 < 0) {
          break;
        }
        if (appendIntToArray(*v11, Mutable)) {
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t figIOSurfaceAcceleratedPixelTransfer_Transfer(int a1, int a2, CVPixelBufferRef pixelBuffer, uint64_t a4, __CVBuffer *a5)
{
  CVPixelBufferGetIOSurface(pixelBuffer);
  CVPixelBufferGetIOSurface(a5);
  uint64_t v6 = IOSurfaceAcceleratorTransferSurface();
  if (v6) {
    FigSignalErrorAt();
  }
  return v6;
}

IOSurfaceRef figIOSurfaceAcceleratedPixelTransfer_ValidateM2(__CVBuffer *a1, __CVBuffer *a2)
{
  uint64_t v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t v6 = CVPixelBufferGetWidth(a2);
  size_t v7 = CVPixelBufferGetHeight(a2);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  OSType v9 = CVPixelBufferGetPixelFormatType(a2);
  OSType v10 = v9;
  BOOL v11 = 0;
  unint64_t v29 = v6;
  if (Width >= v6 && Height >= v7) {
    BOOL v11 = v9 == 1111970369 || (v9 & 0xFFFFFFEF) == 875704422;
  }
  BOOL v31 = v11;
  scalerCapabilities((uint64_t)&v32);
  BOOL v14 = (PixelFormatType & 0xFFFFFFEF) != 0x34323066 || v10 != 1111970369;
  if ((Height & 1) == 0) {
    BOOL v14 = 1;
  }
  if (Height != v7) {
    BOOL v14 = 1;
  }
  BOOL v30 = v14;
  CFStringRef v15 = (const __CFString *)*MEMORY[0x1E4F24BC8];
  CFTypeRef v16 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
  CFStringRef v17 = (const __CFString *)*MEMORY[0x1E4F24A90];
  CFTypeRef v18 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A90], 0);
  CFTypeRef v19 = CVBufferCopyAttachment(a2, v15, 0);
  CFTypeRef v20 = CVBufferCopyAttachment(a2, v17, 0);
  CFDictionaryRef v21 = v20;
  if (v10 == 1380411457 && v16 && v19 && v18 && v20)
  {
    BOOL v22 = FigCFEqual() && FigCFEqual() || FigCFEqual() != 0;
  }
  else
  {
    BOOL v22 = 1;
    if (!v16)
    {
      if (!v18) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
  }
  CFRelease(v16);
  if (v18) {
LABEL_29:
  }
    CFRelease(v18);
LABEL_30:
  if (v19) {
    CFRelease(v19);
  }
  if (v21) {
    CFRelease(v21);
  }
  IOSurfaceRef result = CVPixelBufferGetIOSurface(a1);
  if (result)
  {
    IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a2);
    IOSurfaceRef result = 0;
    if (IOSurface)
    {
      if (Width >= 0x10 && Height >= 0x10)
      {
        int v25 = v30 && v31;
        int v26 = Width <= 0x4000 && v30 && v31;
        if (Width > *((void *)&v33 + 1) && !v26) {
          return 0;
        }
        if (Height <= (unint64_t)v34)
        {
          IOSurfaceRef result = 0;
          if (v29 < 0x10 || v7 < 0x10) {
            return result;
          }
        }
        else
        {
          IOSurfaceRef result = 0;
          int v27 = Height <= 0x4000 && v30 && v31;
          if (v27 != 1 || v29 < 0x10 || v7 <= 0xF) {
            return result;
          }
        }
        int v28 = v29 <= 0x4000 && v30 && v31;
        if (v29 > *((void *)&v34 + 1) && !v28) {
          return 0;
        }
        if (v7 > 0x4000) {
          int v25 = 0;
        }
        if (v7 <= (unint64_t)v35) {
          int v25 = 1;
        }
        return (IOSurfaceRef)(v25 & v22);
      }
    }
  }
  return result;
}

uint64_t getSubSampling(OSType pixelFormat)
{
  CFDictionaryRef v1 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E4F1CF80], pixelFormat);
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E4F24EE0]);
    if (Value)
    {
      CFArrayRef v4 = Value;
      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 == CFArrayGetTypeID() && CFArrayGetCount(v4) >= 1)
      {
        CFIndex v6 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v4, v6);
          if (ValueAtIndex)
          {
            CFTypeID v8 = CFGetTypeID(ValueAtIndex);
            if (v8 == CFDictionaryGetTypeID()) {
              FigCFDictionaryGetInt32IfPresent();
            }
          }
          ++v6;
        }
        while (CFArrayGetCount(v4) > v6);
      }
    }
    FigCFDictionaryGetInt32IfPresent();
    CFRelease(v2);
  }
  return 1;
}

BOOL figPixelFormatTypeContainsYCbCr(OSType pixelFormat)
{
  CFDictionaryRef v1 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E4F1CF80], pixelFormat);
  if (!v1) {
    return 0;
  }
  CFDictionaryRef v2 = v1;
  CFDictionaryRef v3 = (const void *)*MEMORY[0x1E4F1CFD0];
  BOOL v4 = v3 == CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E4F24EB8]);
  CFRelease(v2);
  return v4;
}

uint64_t isH3Platform()
{
  if ((isH3Platform_checked & 1) == 0)
  {
    mach_port_t v0 = *MEMORY[0x1E4F2EEF0];
    CFDictionaryRef v1 = IOServiceMatching("AppleM2ScalerCSCDriver");
    io_service_t MatchingService = IOServiceGetMatchingService(v0, v1);
    if (MatchingService)
    {
      io_object_t v3 = MatchingService;
      uint64_t valuePtr = 0;
      CFDictionaryRef v4 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"IOSurfaceAcceleratorCapabilitiesDict", 0, 0);
      if (v4)
      {
        CFDictionaryRef v5 = v4;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"IOSurfaceAcceleratorScalerVersion");
        if (Value)
        {
          CFNumberRef v7 = Value;
          CFTypeID v8 = CFGetTypeID(Value);
          if (v8 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v7, kCFNumberLongLongType, &valuePtr);
            if (valuePtr == 131079 || valuePtr == 131074) {
              isH3Platform_isH3Platform = 1;
            }
          }
        }
        CFRelease(v5);
      }
      IOObjectRelease(v3);
    }
    isH3Platform_checked = 1;
  }
  return isH3Platform_isH3Platform;
}

void _initAsgFilter(int a1, uint64_t a2, char a3, char a4, unsigned int *a5, double a6)
{
  CFTypeID v45 = a5;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v46 = a2;
  if ((int)a2 >= 0) {
    int v6 = a2;
  }
  else {
    int v6 = a2 + 1;
  }
  if (a1 >= 1)
  {
    unint64_t v8 = 0;
    int v9 = v6 >> 1;
    uint64_t v10 = v46;
    size_t v44 = 8 * v46;
    double v39 = (double)a1;
    unint64_t v38 = a1 >> 1;
    double v37 = 0.5 / a6 + -0.5;
    double v36 = (double)v9;
    double v50 = (double)(int)v46;
    double v47 = (double)(int)v46 * -0.5;
    double v48 = (double)(int)v46 * 0.5;
    double v11 = (double)(unint64_t)(1 << a4);
    uint64_t v40 = v9;
    int v12 = ~(-1 << (a4 + a3));
    int v43 = 1 << a4;
    uint64_t v41 = v9 * a1;
    uint64_t v42 = a1;
    int v13 = -v9;
    uint64_t v14 = 4 * a1;
    size_t v15 = v44;
    double v49 = 3.14159265;
    CFTypeRef v16 = v45;
    do
    {
      MEMORY[0x1F4188790]();
      CFStringRef v17 = (double *)((char *)&v35 - ((v15 + 15) & 0xFFFFFFFF0));
      bzero(v17, v44);
      if (a6 == 1.0)
      {
        v17[v40] = 1.0;
        double v18 = 1.0;
      }
      else
      {
        if ((int)v46 < 1) {
          goto LABEL_29;
        }
        uint64_t v19 = 0;
        double v20 = (double)(int)v8 / v39;
        if (v8 >= v38) {
          double v20 = v20 + -1.0;
        }
        double v21 = v37 + v20;
        double v22 = v37 + v20 + v36;
        double v23 = fmin(v22, v50 - v22 + -1.0);
        double v18 = 0.0;
        do
        {
          if (vabdd_f64((float)(int)v19, v22) <= v23)
          {
            double v24 = ((double)(v13 + (int)v19) - v21) * a6;
            double v25 = v24 * v49;
            double v26 = cos(v24 * v49 / v50);
            double v27 = 1.0;
            if (v24 != 0.0)
            {
              double v27 = 0.0;
              if (v48 > v24 && v47 < v24)
              {
                double v29 = 1.0;
                if (a6 < 1.0) {
                  double v29 = v26;
                }
                double v27 = sin(v25) / v25 * (v26 * (v26 * (v26 * v29)));
              }
            }
            v17[v19] = v27;
            double v18 = v18 + v27;
          }
          else
          {
            v17[v19] = 0.0;
          }
          ++v19;
        }
        while (v10 != v19);
      }
      if ((int)v46 >= 1)
      {
        __int16 v30 = 0;
        uint64_t v31 = v10;
        long long v32 = v16;
        do
        {
          double v33 = *v17++;
          unsigned int v34 = llround(v33 / v18 * v11) & v12;
          *long long v32 = v34;
          v30 += v34;
          long long v32 = (unsigned int *)((char *)v32 + v14);
          --v31;
        }
        while (v31);
        goto LABEL_30;
      }
LABEL_29:
      __int16 v30 = 0;
LABEL_30:
      v45[v8 + v41] = (unsigned __int16)(v43 - v30 + v45[v8 + v41]);
      ++v8;
      ++v16;
    }
    while (v8 != v42);
  }
}

uint64_t VTDecompressionSessionServerStartXPC()
{
  FigKTraceInit();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
  uint64_t v1 = FigXPCServerStart();
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v1;
}

uint64_t dssxpc_ReplyingMessageHandler(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  *(void *)token.val = 0;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294949605;
  }
}

uint64_t tddss_NoReplyMessageHandler(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294949605;
  }
}

uint64_t tddss_MakeEnqueueDecision()
{
  return 0;
}

uint64_t dss_ServerSetupEventLink()
{
  return FigOSEventLinkServerSetCallbacks();
}

void VTDecompressionSessionXPCServer_ServiceConnectionHandler()
{
  if (VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode())
  {
    FigKTraceInit();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt32();
    VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
    FigXPCServerStartWithClientXPCConnection();
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

uint64_t dssxpc_DecodeFrame_XPCMessage(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t v23 = 0;
  double v24 = &v23;
  uint64_t v25 = 0x2000000000;
  uint64_t v26 = 0;
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a3 + 114))
  {
    uint64_t v16 = 4294954393;
  }
  else
  {
    uint64_t Cryptor = FigXPCServerCopyMemoryRecipient();
    if (Cryptor
      || (uint64_t Cryptor = FigXPCMessageCopyCMSampleBufferWithLastCryptor(), Cryptor)
      || (uint64_t uint64 = xpc_dictionary_get_uint64(a4, "FrameRefCon"),
          int v10 = xpc_dictionary_get_uint64(a4, "DecoderFlags"),
          uint64_t Cryptor = FigXPCMessageCopyCFDictionary(),
          Cryptor))
    {
      uint64_t v16 = Cryptor;
    }
    else
    {
      if (xpc_dictionary_get_BOOL(a4, "RequiresMultiImageOutputHandler"))
      {
        double v11 = *(OpaqueVTDecompressionSession **)(a3 + 56);
        if (!*((void *)v11 + 14)) {
          VTDecompressionSessionSetMultiImageCallback(v11, (VTDecompressionOutputMultiImageCallback)DecompressionMultiImageOutputCallback, (void *)a3);
        }
      }
      FigXPCRetain();
      if (a2) {
        CFRetain(a2);
      }
      int v12 = (const void *)v24[3];
      if (v12) {
        CFRetain(v12);
      }
      uint64_t v13 = *(void *)(a3 + 24);
      uint64_t v14 = *(NSObject **)(a3 + 88);
      size_t v15 = *(NSObject **)(a3 + 96);
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 0x40000000;
      v19[2] = __dssxpc_DecodeFrame_XPCMessage_block_invoke;
      v19[3] = &unk_1E5785998;
      v19[4] = &v23;
      v19[5] = a2;
      int v20 = v10;
      v19[6] = cf;
      v19[7] = uint64;
      v19[8] = v13;
      v19[9] = 0;
      v19[10] = a1;
      dispatch_group_async(v14, v15, v19);
      uint64_t v16 = 0;
    }
  }
  CFStringRef v17 = (const void *)v24[3];
  if (v17) {
    CFRelease(v17);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Block_object_dispose(&v23, 8);
  return v16;
}

uint64_t dssxpc_DecodeTile(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  CVPixelBufferRef pixelBufferOut = 0;
  v35[0] = 0;
  CFTypeRef v33 = 0;
  if (!a2)
  {
    uint64_t v14 = 0;
    goto LABEL_34;
  }
  if (*(unsigned char *)(a3 + 114))
  {
    int v12 = 0;
    uint64_t v14 = 4294954393;
    goto LABEL_23;
  }
  uint64_t v7 = FigXPCServerCopyMemoryRecipient();
  if (v7
    || (uint64_t v7 = VTCopyCMSampleBufferFromXPCMessage((uint64_t)a4, (uint64_t)v33, a3 + 72, (uint64_t)v35), v7))
  {
    uint64_t v14 = v7;
LABEL_34:
    int v12 = 0;
    goto LABEL_23;
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(a4, "FrameRefCon");
  int v9 = xpc_dictionary_get_uint64(a4, "DecoderFlags");
  uint64_t v10 = xpc_dictionary_get_uint64(a4, "TileCropOffsetXY");
  uint64_t v23 = xpc_dictionary_get_uint64(a4, "TileCropDimensionWH");
  uint64_t v22 = xpc_dictionary_get_uint64(a4, "OffsetInImageBufferXY");
  xpc_object_t value = xpc_dictionary_get_value(a4, "CanvasioSurface");
  if (value)
  {
    int v12 = IOSurfaceLookupFromXPCObject(value);
    if (v12)
    {
      uint64_t v13 = v10;
      uint64_t v14 = CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12, 0, &pixelBufferOut);
      size_t v15 = *(const void **)(a3 + 120);
      CVPixelBufferRef v16 = pixelBufferOut;
      *(void *)(a3 + 120) = pixelBufferOut;
      if (v16) {
        CFRetain(v16);
      }
      if (v15) {
        CFRelease(v15);
      }
      uint64_t v10 = v13;
    }
    else
    {
      uint64_t v14 = 0;
    }
    CFStringRef v17 = pixelBufferOut;
  }
  else
  {
    CFStringRef v17 = *(void **)(a3 + 120);
    if (v17) {
      CFStringRef v17 = (void *)CFRetain(v17);
    }
    uint64_t v14 = 0;
    int v12 = 0;
    CVPixelBufferRef pixelBufferOut = (CVPixelBufferRef)v17;
  }
  if (v17)
  {
    FigXPCRetain();
    if (v35[0]) {
      CFRetain(v35[0]);
    }
    if (pixelBufferOut) {
      CFRetain(pixelBufferOut);
    }
    CFRetain(a2);
    uint64_t v18 = *(void *)(a3 + 24);
    uint64_t v19 = *(NSObject **)(a3 + 88);
    int v20 = *(NSObject **)(a3 + 96);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __dssxpc_DecodeTile_block_invoke;
    block[3] = &__block_descriptor_tmp_80;
    block[4] = a2;
    block[5] = v35[0];
    int v26 = HIDWORD(v10);
    int v27 = v10;
    int v28 = HIDWORD(v23);
    int v29 = v23;
    int v30 = HIDWORD(v22);
    int v31 = v22;
    int v32 = v9;
    block[6] = pixelBufferOut;
    block[7] = uint64;
    block[8] = v18;
    block[9] = a1;
    dispatch_group_async(v19, v20, block);
  }
LABEL_23:
  if (v35[0]) {
    CFRelease(v35[0]);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  if (v33) {
    CFRelease(v33);
  }
  return v14;
}

uint64_t dssxpc_CopySupportedPropertyDictionary(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a2 + 114)) {
    return 4294954393;
  }
  if (*(unsigned char *)(a2 + 32)) {
    VTTileDecompressionSessionCopySupportedPropertyDictionary(a1, &cf);
  }
  else {
    VTDecompressionSessionCopySupportedPropertyDictionary(a1, &cf);
  }
  uint64_t v2 = FigXPCMessageSetCFDictionary();
  if (cf) {
    CFRelease(cf);
  }
  return v2;
}

uint64_t dssxpc_CopySerializableProperties(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a2 + 114)) {
    return 4294954393;
  }
  if (*(unsigned char *)(a2 + 32)) {
    uint64_t v2 = VTTileDecompressionSessionCopySerializableProperties(a1, 0, &cf);
  }
  else {
    uint64_t v2 = VTDecompressionSessionCopySerializableProperties(a1, 0, &cf);
  }
  uint64_t v3 = v2;
  if (!v2) {
    uint64_t v3 = FigXPCMessageSetCFDictionary();
  }
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

uint64_t dssxpc_CopyProperty(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a2 + 114)) {
    return 4294954393;
  }
  uint64_t v2 = FigXPCMessageCopyCFString();
  if (!v2) {
    return FigSignalErrorAt();
  }
  return v2;
}

uint64_t dssxpc_SetProperty(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 114)) {
    return 4294954393;
  }
  uint64_t v2 = FigXPCMessageCopyCFObject();
  if (!v2)
  {
    uint64_t v2 = FigXPCMessageCopyCFString();
    if (!v2) {
      return FigSignalErrorAt();
    }
  }
  return v2;
}

uint64_t dssxpc_SetProperties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 114)) {
    return 4294954393;
  }
  uint64_t v4 = FigXPCMessageCopyCFDictionary();
  if (!v4)
  {
    if (*(unsigned char *)(a2 + 32)) {
      return VTTileDecompressionSessionSetProperties(a1, 0);
    }
    else {
      return VTDecompressionSessionSetProperties(a1, 0);
    }
  }
  return v4;
}

uint64_t dssxpc_FinishDelayedFrames(uint64_t a1, const void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 114)) {
    return 4294954393;
  }
  FigXPCRetain();
  if (a2) {
    CFRetain(a2);
  }
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(NSObject **)(a3 + 88);
  unint64_t v8 = *(NSObject **)(a3 + 96);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __dssxpc_FinishDelayedFrames_block_invoke;
  block[3] = &__block_descriptor_tmp_81;
  block[4] = a2;
  block[5] = v6;
  block[6] = a1;
  dispatch_group_async(v7, v8, block);
  return 0;
}

uint64_t dssxpc_FinishDelayedTiles(uint64_t a1, const void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 114)) {
    return 4294954393;
  }
  FigXPCRetain();
  if (a2) {
    CFRetain(a2);
  }
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(NSObject **)(a3 + 88);
  unint64_t v8 = *(NSObject **)(a3 + 96);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __dssxpc_FinishDelayedTiles_block_invoke;
  block[3] = &__block_descriptor_tmp_82;
  block[4] = a2;
  block[5] = v6;
  block[6] = a1;
  dispatch_group_async(v7, v8, block);
  return 0;
}

uint64_t dssxpc_WaitForAsynchronousFrames(uint64_t a1, const void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 114)) {
    return 4294954393;
  }
  FigXPCRetain();
  if (a2) {
    CFRetain(a2);
  }
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(NSObject **)(a3 + 88);
  unint64_t v8 = *(NSObject **)(a3 + 96);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __dssxpc_WaitForAsynchronousFrames_block_invoke;
  block[3] = &__block_descriptor_tmp_83;
  block[4] = a2;
  block[5] = v6;
  block[6] = a1;
  dispatch_group_async(v7, v8, block);
  return 0;
}

uint64_t dssxpc_CanAcceptFormatDescription(OpaqueVTDecompressionSession *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(unsigned char *)(a2 + 114)) {
    return 4294954393;
  }
  uint64_t v6 = FigXPCMessageCopyFormatDescription();
  if (!v6)
  {
    BOOL v7 = VTDecompressionSessionCanAcceptFormatDescription(a1, 0) != 0;
    xpc_dictionary_set_BOOL(a4, "CanacceptFormat", v7);
  }
  return v6;
}

uint64_t dssxpc_CopyBlackPixelBuffer(uint64_t a1, VTDecompressionSessionRef session, uint64_t a3)
{
  CFTypeRef v8 = 0;
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a3 + 114)) {
    return 4294954393;
  }
  uint64_t v4 = VTDecompressionSessionCopyBlackPixelBuffer(session, (CVPixelBufferRef *)&v8);
  if (v4)
  {
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = dssxpc_copyPixelBufferOriginForConnection(a1, (uint64_t)&cf);
    CFTypeRef v6 = cf;
    if (!v5)
    {
      uint64_t v5 = FigPixelBufferOriginSetPixelBufferInXPCMessage();
      CFTypeRef v6 = cf;
    }
    if (v6) {
      CFRelease(v6);
    }
  }
  if (v8) {
    CFRelease(v8);
  }
  return v5;
}

uint64_t dssxpc_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, uint64_t a2)
{
  long long v3 = *MEMORY[0x1E4F1F9F8];
  uint64_t v4 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (*(unsigned char *)(a2 + 114)) {
    return 4294954393;
  }
  VTDecompressionSessionGetMinOutputPresentationTimeStampOfFramesBeingDecoded(a1, &v3);
  return FigXPCMessageSetCMTime();
}

uint64_t dssxpc_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, uint64_t a2)
{
  CMTime v4 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v3 = v4;
  if (*(unsigned char *)(a2 + 114)) {
    return 4294954393;
  }
  uint64_t result = VTDecompressionSessionGetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(a1, &v4, &v3);
  if (!result)
  {
    uint64_t result = FigXPCMessageSetCMTime();
    if (!result) {
      return FigXPCMessageSetCMTime();
    }
  }
  return result;
}

void DecompressionOutputCallback(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, long long *a6, long long *a7)
{
  CFTypeRef v40 = 0;
  xpc_object_t v41 = 0;
  if (*(unsigned char *)(a1 + 113)
    || *(unsigned char *)(a1 + 114)
    || dssxpc_copyPixelBufferOriginForConnection(*(void *)(a1 + 128), (uint64_t)&v40))
  {
    goto LABEL_42;
  }
  if ((a4 & 2) != 0) {
    goto LABEL_37;
  }
  cf[0] = 0;
  CFTypeRef v43 = 0;
  v44[0] = 0;
  CFTypeRef v42 = 0;
  uint64_t v14 = MEMORY[0x1997057E0]();
  if (dssxpc_ensureEventLinkIfSupported_onceToken != -1) {
    dispatch_once(&dssxpc_ensureEventLinkIfSupported_onceToken, &__block_literal_global_52);
  }
  uint64_t v23 = a2;
  MEMORY[0x1997056B0](*(void *)(a1 + 152));
  if (*(unsigned char *)(a1 + 145))
  {
    uint64_t v15 = 0;
    if (dssxpc_maxNumberOfEmitFrameEventLinksToCreatePerSession_onceToken != -1) {
      dispatch_once(&dssxpc_maxNumberOfEmitFrameEventLinksToCreatePerSession_onceToken, &__block_literal_global_61);
    }
    while (v15 < dssxpc_maxNumberOfEmitFrameEventLinksToCreatePerSession_maxEventLinkCount)
    {
      uint64_t v16 = a1 + 8 * v15;
      uint64_t v17 = *(void *)(v16 + 160);
      if (v14 == *(void *)(v16 + 240)) {
        goto LABEL_25;
      }
      if (!v17) {
        goto LABEL_15;
      }
      ++v15;
    }
  }
  else
  {
    uint64_t v15 = 0;
LABEL_15:
    uint64_t v17 = 0;
    if (!*(unsigned char *)(a1 + 144) || !dssxpc_ensureEventLinkIfSupported_prefersEventLink) {
      goto LABEL_25;
    }
    uint64_t v18 = *(void *)(a1 + 56);
    if (v18)
    {
      CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (!VTDecompressionSessionCopyProperty(v18, @"DecoderEmitsFramesFromConsistentThread", (const __CFAllocator *)*MEMORY[0x1E4F1CF80], cf)&& cf[0] == (CFTypeRef)*MEMORY[0x1E4F1CFD0]&& !VTDecompressionSessionCopyProperty(*(void *)(a1 + 56), @"MachThreadPriorityForThreadEmittingFrames", v19, v44)&& (int)FigCFNumberGetSInt32() >= 1)
      {
        FigXPCServerCopyMemoryOrigin();
        FigXPCServerCopyMemoryRecipient();
        uint64_t v20 = a1 + 8 * v15;
        uint64_t v17 = 0;
        if (!FigXPCServerCreateAssociatedEventLinkForConnection())
        {
          uint64_t v17 = 0;
          *(void *)(v20 + 240) = v14;
        }
        goto LABEL_25;
      }
    }
  }
  uint64_t v17 = 0;
LABEL_25:
  *(unsigned char *)(a1 + 145) = 1;
  MEMORY[0x1997056C0](*(void *)(a1 + 152));
  if (v43) {
    CFRelease(v43);
  }
  a2 = v23;
  if (v42) {
    CFRelease(v42);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v44[0]) {
    CFRelease(v44[0]);
  }
  if (v17)
  {
    uint64_t v26 = MEMORY[0x1E4F143A8];
    uint64_t v27 = 0x40000000;
    int v28 = __DecompressionOutputCallback_block_invoke;
    int v29 = &__block_descriptor_tmp_17;
    int v34 = a3;
    unsigned int v35 = a4;
    uint64_t v30 = a1;
    uint64_t v31 = v23;
    long long v36 = *a6;
    uint64_t v37 = *((void *)a6 + 2);
    long long v38 = *a7;
    uint64_t v39 = *((void *)a7 + 2);
    uint64_t v32 = a5;
    CFTypeRef v33 = v40;
    int v21 = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
    if (!v21) {
      goto LABEL_42;
    }
    if (v21 == -19428)
    {
      FigOSEventLinkRemoteInvalidate();
      goto LABEL_42;
    }
  }
LABEL_37:
  if (!FigXPCCreateBasicMessage())
  {
    FigPixelBufferOriginSetPixelBufferInXPCMessage();
    xpc_dictionary_set_int64(v41, "Result", a3);
    xpc_dictionary_set_uint64(v41, "DecoderFlags", a4);
    xpc_dictionary_set_uint64(v41, "FrameRefCon", a2);
    *(_OWORD *)CFTypeRef cf = *a6;
    uint64_t v25 = *((void *)a6 + 2);
    FigXPCMessageSetCMTime();
    *(_OWORD *)CFTypeRef cf = *a7;
    uint64_t v25 = *((void *)a7 + 2);
    FigXPCMessageSetCMTime();
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 128), v41);
    if (!*(unsigned char *)(a1 + 114))
    {
      uint64_t v22 = 1;
      do
      {
        if (FigSemaphoreWaitRelative() != -12792) {
          break;
        }
        v22 *= 2;
      }
      while (!*(unsigned char *)(a1 + 114));
    }
  }
LABEL_42:
  FigXPCRelease();
  if (v40) {
    CFRelease(v40);
  }
}

uint64_t dssxpc_decompressionSessionClientRecordCreate()
{
  if (dssxpc_dscr_GetTypeID_once != -1) {
    dispatch_once(&dssxpc_dscr_GetTypeID_once, &__block_literal_global_68);
  }

  return _CFRuntimeCreateInstance();
}

uint64_t dssxpc_InitializeClient(uint64_t a1, int a2, uint64_t a3, void *a4, const void *a5, const void *a6, uint64_t a7)
{
  int valuePtr = a2;
  *(void *)(a1 + 16) = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  xpc_object_t v12 = xpc_retain(a4);
  *(_DWORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 114) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = v12;
  if (a5) {
    CFTypeRef v13 = CFRetain(a5);
  }
  else {
    CFTypeRef v13 = 0;
  }
  *(void *)(a1 + 56) = v13;
  if (a6) {
    CFTypeRef v14 = CFRetain(a6);
  }
  else {
    CFTypeRef v14 = 0;
  }
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 104) = FigSemaphoreCreate();
  *(void *)(a1 + 88) = dispatch_group_create();
  if (!a7 || (unsigned int UInt32 = FigCFNumberGetUInt32(), UInt32 > 0x30) || UInt32 == 5) {
    uint64_t v16 = (uint64_t)dispatch_queue_create("DecompressionSessionMessageQueue", 0);
  }
  else {
    uint64_t v16 = FigDispatchQueueCreateWithPriority();
  }
  *(void *)(a1 + 96) = v16;
  if (!v16) {
    return FigSignalErrorAt();
  }
  uint64_t v17 = FigOSTransactionCreateWithProcessName();
  *(void *)(a1 + 136) = v17;
  if (!v17) {
    return FigSignalErrorAt();
  }
  uint64_t v18 = FigSimpleMutexCreate();
  uint64_t result = 0;
  *(void *)(a1 + 152) = v18;
  return result;
}

void dssxpc_DisposeClientRecord(uint64_t a1)
{
  if (a1)
  {
    dssxpc_invalidateSession(a1);
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2 && *(void *)(v2 + 48))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    CMTime v3 = *(NSObject **)(a1 + 88);
    if (v3)
    {
      dispatch_time_t v4 = dispatch_time(0, 60000000000);
      dispatch_group_wait(v3, v4);
      dispatch_release(*(dispatch_object_t *)(a1 + 88));
      *(void *)(a1 + 88) = 0;
    }
    uint64_t v5 = *(NSObject **)(a1 + 96);
    if (v5) {
      dispatch_release(v5);
    }
    *(void *)(a1 + 96) = 0;
    CFRelease((CFTypeRef)a1);
  }
}

BOOL dssxpc_NotificationFilter(int a1, int a2, CFTypeRef cf1)
{
  return CFEqual(cf1, @"FrameDecodeCompleted") != 0;
}

void dssxpc_appStateChangeListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    if (a5)
    {
      FigCFDictionaryGetInt32IfPresent();
      *(_DWORD *)(a2 + 48) = 8;
    }
  }
}

uint64_t dssxpc_copyPixelBufferOriginForConnection(uint64_t a1, uint64_t a2)
{
  ConnectionRefcon = (uint64_t *)FigXPCServerGetConnectionRefcon();
  if (ConnectionRefcon)
  {
    uint64_t v4 = *ConnectionRefcon;
    return MEMORY[0x1F40DDE30](v4, a2);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t __DecompressionOutputCallback_block_invoke(uint64_t a1, CMBlockBufferRef theBuffer)
{
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  uint64_t result = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
  if (!result)
  {
    uint64_t v4 = dataPointerOut;
    if ((dataPointerOut & 7) != 0)
    {
      return 4294949291;
    }
    else if (lengthAtOffsetOut > 0x57)
    {
      *((void *)dataPointerOut + 10) = 0;
      *((_OWORD *)v4 + 3) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)uint64_t v4 = 0u;
      uint64_t v5 = dataPointerOut;
      *(void *)dataPointerOut = *(void *)(*(void *)(a1 + 32) + 24);
      *((_DWORD *)v5 + 2) = 1701672038;
      *((_DWORD *)v5 + 4) = *(_DWORD *)(a1 + 64);
      *((_DWORD *)v5 + 5) = *(_DWORD *)(a1 + 68);
      *((void *)v5 + 3) = *(void *)(a1 + 40);
      long long v6 = *(_OWORD *)(a1 + 72);
      *((void *)v5 + 6) = *(void *)(a1 + 88);
      *((_OWORD *)v5 + 2) = v6;
      long long v7 = *(_OWORD *)(a1 + 96);
      *((void *)v5 + 9) = *(void *)(a1 + 112);
      *(_OWORD *)(v5 + 56) = v7;
      if (!*(void *)(*(void *)(a1 + 32) + 320))
      {
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFStringRef v10 = CFStringCreateWithFormat(v8, 0, @"DecompressionSessionServer-%p", *(void *)(a1 + 32));
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21788], v10);
        *(void *)(*(void *)(a1 + 32) + 320) = CMMemoryPoolCreate(Mutable);
        if (v10) {
          CFRelease(v10);
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      if (*(void *)(a1 + 48) && !*(_DWORD *)(a1 + 64)) {
        return FigPixelBufferOriginAppendPixelBufferToIPCMessageData();
      }
      else {
        return 0;
      }
    }
    else
    {
      return 4294949290;
    }
  }
  return result;
}

uint64_t __DecompressionOutputCallback_block_invoke_2()
{
  return 0;
}

uint64_t __dssxpc_ensureEventLinkIfSupported_block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  dssxpc_ensureEventLinkIfSupported_prefersEventLink = result;
  return result;
}

uint64_t __dssxpc_maxNumberOfEmitFrameEventLinksToCreatePerSession_block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  if ((int)result >= 10) {
    int v1 = 10;
  }
  else {
    int v1 = result;
  }
  dssxpc_maxNumberOfEmitFrameEventLinksToCreatePerSession_maxEventLinkCount = v1;
  return result;
}

double dssxpc_dscr_Init(uint64_t a1)
{
  *(void *)(a1 + 320) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void dssxpc_dscr_Finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3)
  {
    dispatch_time_t v4 = dispatch_time(0, 30000000000);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __dssxpc_dscr_Finalize_block_invoke;
    block[3] = &__block_descriptor_tmp_69_0;
    block[4] = v3;
    dispatch_after(v4, MEMORY[0x1E4F14428], block);
  }
  uint64_t v5 = (const void *)a1[7];
  if (v5)
  {
    CFRelease(v5);
    a1[7] = 0;
  }
  long long v6 = (const void *)a1[8];
  if (v6)
  {
    CFRelease(v6);
    a1[8] = 0;
  }
  long long v7 = (const void *)a1[9];
  if (v7)
  {
    CFRelease(v7);
    a1[9] = 0;
  }
  CFAllocatorRef v8 = (const void *)a1[10];
  if (v8)
  {
    CFRelease(v8);
    a1[10] = 0;
  }
  int v9 = a1[11];
  if (v9)
  {
    dispatch_release(v9);
    a1[11] = 0;
  }
  CFStringRef v10 = a1[12];
  if (v10)
  {
    dispatch_release(v10);
    a1[12] = 0;
  }
  FigSemaphoreDestroy();
  a1[13] = 0;
  double v11 = (const void *)a1[15];
  if (v11)
  {
    CFRelease(v11);
    a1[15] = 0;
  }
  xpc_object_t v12 = (void *)a1[16];
  if (v12)
  {
    a1[16] = 0;
    xpc_release(v12);
  }
  CFTypeRef v13 = (void *)a1[17];
  if (v13)
  {
    os_release(v13);
    a1[17] = 0;
  }
  for (uint64_t i = 0; i != 10; ++i)
  {
    uint64_t v15 = &a1[i];
    uint64_t v16 = (const void *)a1[i + 20];
    if (v16)
    {
      CFRelease(v16);
      v15[20] = 0;
    }
    v15[30] = 0;
  }
  if (a1[19])
  {
    FigSimpleMutexDestroy();
    a1[19] = 0;
  }
  uint64_t v17 = (const void *)a1[40];
  if (v17)
  {
    CFRelease(v17);
    a1[40] = 0;
  }
}

CFStringRef dssxpc_dscr_CopyDebugDesc(uint64_t a1)
{
  int v1 = "subTileSession";
  if (!*(unsigned char *)(a1 + 32)) {
    int v1 = "subDecompressionSession";
  }
  uint64_t v2 = 64;
  if (!*(unsigned char *)(a1 + 32)) {
    uint64_t v2 = 56;
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[ClientRecord %p] [isTile: %d, %s: %p, subSessionIsGone: %d]", a1, *(unsigned __int8 *)(a1 + 32), v1, *(void *)(a1 + v2), *(unsigned __int8 *)(a1 + 114));
}

uint64_t vtInitializePerClientAudioSessionStorage()
{
  gPerClientAudioSessionCache_0 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  uint64_t result = FigSimpleMutexCreate();
  gPerClientAudioSessionCache_1 = result;
  return result;
}

uint64_t registerVTPerClientAudioSessionType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVTPerClientAudioSessionTypeID = result;
  return result;
}

double vtPerClientAudioSessionInit(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void vtPerClientAudioSessionFinalize(uint64_t a1)
{
  if (gPerClientAudioSessionCache_0)
  {
    CFDataRef v2 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)(a1 + 16), 32);
    MEMORY[0x1997056B0](gPerClientAudioSessionCache_1);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)gPerClientAudioSessionCache_0, v2);
    MEMORY[0x1997056C0](gPerClientAudioSessionCache_1);
  }
  else
  {
    CFDataRef v2 = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 48) = 0;
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

void dssxpc_invalidateSession(uint64_t a1)
{
  CFDataRef v2 = *(const void **)(a1 + 56);
  if (v2) {
    unint64_t v3 = (unint64_t)CFRetain(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  dispatch_time_t v4 = *(const void **)(a1 + 64);
  if (v4) {
    unint64_t v5 = (unint64_t)CFRetain(v4);
  }
  else {
    unint64_t v5 = 0;
  }
  if (v3 | v5)
  {
    uint64_t v6 = 0;
    *(unsigned char *)(a1 + 114) = 1;
    do
    {
      if (*(void *)(a1 + 160 + v6)) {
        FigOSEventLinkRemoteInvalidate();
      }
      v6 += 8;
    }
    while (v6 != 80);
    if (*(void *)(a1 + 104)) {
      FigSemaphoreSignal();
    }
    long long v7 = *(NSObject **)(a1 + 88);
    CFAllocatorRef v8 = *(NSObject **)(a1 + 96);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    v9[2] = __dssxpc_invalidateSession_block_invoke;
    v9[3] = &__block_descriptor_tmp_78;
    v9[4] = v3;
    v9[5] = v5;
    dispatch_group_async(v7, v8, v9);
  }
}

void __dssxpc_invalidateSession_block_invoke(uint64_t a1)
{
  VTDecompressionSessionInvalidate(*(VTDecompressionSessionRef *)(a1 + 32));
  VTTileDecompressionSessionInvalidate(*(void *)(a1 + 40));
  CFDataRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  unint64_t v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

void TileDecompressionOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
  CFTypeRef cf = 0;
  xpc_object_t xdict = 0;
  if (!*(unsigned char *)(a1 + 113)
    && !*(unsigned char *)(a1 + 114)
    && !FigXPCCreateBasicMessage()
    && !dssxpc_copyPixelBufferOriginForConnection(*(void *)(a1 + 128), (uint64_t)&cf)
    && !FigPixelBufferOriginSetPixelBufferInXPCMessage())
  {
    xpc_dictionary_set_uint64(xdict, "FrameRefCon", a2);
    xpc_dictionary_set_int64(xdict, "Result", a7);
    xpc_dictionary_set_uint64(xdict, "DecoderFlags", a8);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 128), xdict);
    if (!*(unsigned char *)(a1 + 114))
    {
      uint64_t v12 = 1;
      do
      {
        if (FigSemaphoreWaitRelative() != -12792) {
          break;
        }
        v12 *= 2;
      }
      while (!*(unsigned char *)(a1 + 114));
    }
  }
  FigXPCRelease();
  if (cf) {
    CFRelease(cf);
  }
}

void DecompressionMultiImageOutputCallback(uint64_t a1, uint64_t a2, int a3, unsigned int a4, CMTaggedBufferGroupRef group)
{
  CMItemCount Count = CMTaggedBufferGroupGetCount(group);
  CFTypeRef cf = 0;
  xpc_object_t xdict = 0;
  if (Count >= 6)
  {
    FigSignalErrorAt();
  }
  else if (!*(unsigned char *)(a1 + 113) && !*(unsigned char *)(a1 + 114))
  {
    int64_t v11 = Count;
    if (!FigXPCCreateBasicMessage())
    {
      xpc_dictionary_set_int64(xdict, "Result", a3);
      xpc_dictionary_set_uint64(xdict, "FrameRefCon", a2);
      xpc_dictionary_set_uint64(xdict, "DecoderFlags", a4);
      FigXPCMessageSetCMTime();
      FigXPCMessageSetCMTime();
      xpc_dictionary_set_uint64(xdict, "MultiImageCount", v11);
      if (!dssxpc_copyPixelBufferOriginForConnection(*(void *)(a1 + 128), (uint64_t)&cf))
      {
        if (v11 < 1)
        {
LABEL_13:
          xpc_connection_send_message(*(xpc_connection_t *)(a1 + 128), xdict);
          if (!*(unsigned char *)(a1 + 114))
          {
            uint64_t v17 = 1;
            do
            {
              if (FigSemaphoreWaitRelative() != -12792) {
                break;
              }
              v17 *= 2;
            }
            while (!*(unsigned char *)(a1 + 114));
          }
        }
        else
        {
          CFIndex v12 = 0;
          uint64_t v13 = *MEMORY[0x1E4F1CF80];
          while (1)
          {
            CMTagCollectionRef TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(group, v12);
            uint64_t v15 = (const void *)MEMORY[0x199705710](TagCollectionAtIndex, v13);
            int v16 = FigXPCMessageSetCFData();
            if (v15) {
              CFRelease(v15);
            }
            if (v16) {
              break;
            }
            FigTaggedBufferGroupGetCVPixelBufferAtIndex();
            if (FigPixelBufferOriginSetPixelBufferInXPCMessage()) {
              break;
            }
            if (v11 == ++v12) {
              goto LABEL_13;
            }
          }
        }
      }
    }
  }
  FigXPCRelease();
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t dss_EventLinkServerMessageHandler(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3, OpaqueCMBlockBuffer *a4)
{
  FigOSEventLinkServerGetAssociatedFigXPCServerXPCConnection();
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  uint64_t DataPointer = CMBlockBufferGetDataPointer(a3, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
  if (DataPointer) {
    return DataPointer;
  }
  long long v7 = dataPointerOut;
  if ((dataPointerOut & 7) != 0) {
    return 4294949291;
  }
  size_t v8 = lengthAtOffsetOut;
  if (lengthAtOffsetOut <= 0x57) {
    return 4294949290;
  }
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  uint64_t DataPointer = CMBlockBufferGetDataPointer(a4, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
  if (DataPointer) {
    return DataPointer;
  }
  CFStringRef v10 = dataPointerOut;
  if ((dataPointerOut & 7) != 0) {
    return 4294949291;
  }
  if (lengthAtOffsetOut <= 0x57) {
    return 4294949290;
  }
  *((void *)dataPointerOut + 10) = 0;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)CFStringRef v10 = 0u;
  int64_t v11 = dataPointerOut;
  uint64_t v12 = FigXPCServerLookupAndRetainAssociatedObjectAndCFTypeRefcon();
  if (v12) {
    return v12;
  }
  *((_DWORD *)v11 + 2) = *((_DWORD *)v7 + 2);
  *(void *)int64_t v11 = *(void *)v7;
  if (*((_DWORD *)v7 + 2) != 1684366182) {
    return 0;
  }
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  if (MEMORY[0x72])
  {
    uint64_t DataPointer = 4294954393;
    goto LABEL_29;
  }
  uint64_t v13 = *((void *)v7 + 4);
  uint64_t v14 = *((void *)v7 + 5);
  if (__CFADD__(v14, v13) || v14 + v13 > v8 - 88)
  {
    uint64_t v17 = FigSignalErrorAt();
LABEL_34:
    uint64_t DataPointer = v17;
    goto LABEL_29;
  }
  uint64_t v15 = *((void *)v7 + 2);
  uint64_t v16 = *((unsigned int *)v7 + 6);
  if (v7[48] && !*(void *)(MEMORY[0x38] + 112)) {
    VTDecompressionSessionSetMultiImageCallback(MEMORY[0x38], (VTDecompressionOutputMultiImageCallback)DecompressionMultiImageOutputCallback, 0);
  }
  uint64_t v17 = FigXPCServerCopyMemoryRecipient();
  if (v17) {
    goto LABEL_34;
  }
  if (*((void *)v7 + 4))
  {
    uint64_t v17 = FigInMemoryDeserializerCopyCFDictionary();
    if (v17) {
      goto LABEL_34;
    }
  }
  uint64_t v18 = FigInMemoryDeserializerCopyCMSampleBuffer();
  CFAllocatorRef v19 = (const void *)lengthAtOffsetOut;
  if (!v18)
  {
    uint64_t v18 = VTDecompressionSessionDecodeFrameWithOptions(0, (opaqueCMSampleBuffer *)lengthAtOffsetOut, v16, 0, v15, (int *)v11 + 4);
    CFAllocatorRef v19 = (const void *)lengthAtOffsetOut;
    if (!v18)
    {
      if (lengthAtOffsetOut)
      {
        CFRelease((CFTypeRef)lengthAtOffsetOut);
        size_t lengthAtOffsetOut = 0;
      }
      uint64_t DataPointer = FigMemoryRecipientAppendRecipientStateUpdateToIPCMessageData();
      CFAllocatorRef v19 = (const void *)lengthAtOffsetOut;
      if (!lengthAtOffsetOut) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
  }
  uint64_t DataPointer = v18;
  if (v19) {
LABEL_28:
  }
    CFRelease(v19);
LABEL_29:
  if (dataPointerOut) {
    CFRelease(dataPointerOut);
  }
  return DataPointer;
}

uint64_t vtdcr_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVTDecompressionSessionRemoteID = result;
  return result;
}

uint64_t VTDecompressionSessionRemote_Create(uint64_t a1, uint64_t a2, void *a3, const __CFDictionary *a4, const __CFDictionary *a5, _OWORD *a6, uint64_t *a7)
{
  uint64_t v28 = 0;
  values = a3;
  uint64_t v27 = 0;
  CFTypeRef v25 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v24 = 0;
  uint64_t v11 = vtdsr_oneTimeInitialization();
  if (v11) {
    goto LABEL_39;
  }
  VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
  MEMORY[0x199705810](&VTDecompressionSessionRemoteGetTypeID_sRegisterVTDecompressionSessionRemoteOnce, vtdcr_Register);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v11 = FigSignalErrorAt();
LABEL_39:
    uint64_t v21 = v11;
    CFArrayRef v15 = 0;
    CFAllocatorRef v19 = 0;
    goto LABEL_23;
  }
  uint64_t v13 = Instance;
  *(void *)(Instance + 56) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(void *)(v13 + 120) = dispatch_group_create();
  *(void *)(v13 + 112) = dispatch_queue_create("com.apple.coremedia.decompressionsession.clientcallback", 0);
  *(void *)(v13 + 104) = dispatch_queue_create("com.apple.coremedia.decompressionsession.pendingframequeue", 0);
  *(void *)(v13 + 136) = FigSemaphoreCreate();
  *(void *)(v13 + 160) = FigSemaphoreCreate();
  *(void *)(v13 + 200) = 1;
  *(void *)(v13 + 40) = FigSemaphoreCreate();
  if (a6) {
    *(_OWORD *)(v13 + 72) = *a6;
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef v15 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  if (!v15)
  {
    uint64_t SerializedAtomDataForFormatDescriptions = FigSignalErrorAt();
    goto LABEL_41;
  }
  uint64_t SerializedAtomDataForFormatDescriptions = FigRemote_CreateSerializedAtomDataForFormatDescriptions();
  if (SerializedAtomDataForFormatDescriptions)
  {
LABEL_41:
    uint64_t v21 = SerializedAtomDataForFormatDescriptions;
    goto LABEL_42;
  }
  if (a4)
  {
    if (!VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode()
      || !CFDictionaryContainsKey(a4, @"CMSession"))
    {
      CFAllocatorRef v19 = 0;
LABEL_13:
      uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
      if (CFDataFromCFPropertyList)
      {
LABEL_37:
        uint64_t v21 = CFDataFromCFPropertyList;
        goto LABEL_43;
      }
      goto LABEL_16;
    }
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v14, 0, a4);
    if (MutableCopy)
    {
      uint64_t v18 = MutableCopy;
      CFDictionaryRemoveValue(MutableCopy, @"CMSession");
      CFAllocatorRef v19 = v18;
      goto LABEL_13;
    }
    uint64_t v21 = 0;
LABEL_42:
    CFAllocatorRef v19 = 0;
LABEL_43:
    uint64_t v22 = vtdsr_handleMachErrorsInternal(v13, v21);
    CFRelease((CFTypeRef)v13);
    if (!v15) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  CFAllocatorRef v19 = 0;
LABEL_16:
  uint64_t CFDataFromCFPropertyList = vtdsr_createPixelBufferAttributesWithIOSurfaceSupport(a5, (__CFDictionary **)&v24);
  if (CFDataFromCFPropertyList) {
    goto LABEL_37;
  }
  uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
  if (CFDataFromCFPropertyList) {
    goto LABEL_37;
  }
  *(void *)(v13 + 240) = 0;
  uint64_t CFDataFromCFPropertyList = weakReferenceTable_AddPointerAndGetKey_0();
  if (CFDataFromCFPropertyList) {
    goto LABEL_37;
  }
  uint64_t CFDataFromCFPropertyList = FigRPCCreateServerConnectionForObjectUsingMachChannel();
  if (CFDataFromCFPropertyList) {
    goto LABEL_37;
  }
  uint64_t CFDataFromCFPropertyList = FigRPCGetServerConnectionInfo();
  if (CFDataFromCFPropertyList) {
    goto LABEL_37;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  uint64_t v21 = 0;
  if (!a7) {
    goto LABEL_43;
  }
  *a7 = v13;
LABEL_23:
  uint64_t v22 = vtdsr_handleMachErrorsInternal(0, v21);
  if (v15) {
LABEL_24:
  }
    CFRelease(v15);
LABEL_25:
  if (v28 && v27) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960]);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v24) {
    CFRelease(v24);
  }
  return v22;
}

uint64_t vtdsr_oneTimeInitialization()
{
  uint64_t v3 = 0;
  dispatch_time_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __vtdsr_oneTimeInitialization_block_invoke;
  block[3] = &unk_1E5785B70;
  block[4] = &v3;
  if (vtdsr_oneTimeInitialization_once != -1) {
    dispatch_once(&vtdsr_oneTimeInitialization_once, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t vtdsr_createPixelBufferAttributesWithIOSurfaceSupport(CFDictionaryRef theDict, __CFDictionary **a2)
{
  if (!a2) {
    return 4294954394;
  }
  dispatch_time_t v4 = (const void **)MEMORY[0x1E4F24D20];
  if (theDict && CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E4F24D20]))
  {
    MutableCopyWithCFTypeCallbacks = (__CFDictionary *)CFRetain(theDict);
  }
  else
  {
    MutableCopyWithCFTypeCallbacks = (__CFDictionary *)FigCFDictionaryCreateMutableCopyWithCFTypeCallbacks();
    CFDictionaryRef IOSurfacePropertiesDictionary = FigCreateIOSurfacePropertiesDictionary();
    if (IOSurfacePropertiesDictionary)
    {
      CFDictionaryRef v7 = IOSurfacePropertiesDictionary;
      CFDictionarySetValue(MutableCopyWithCFTypeCallbacks, *v4, IOSurfacePropertiesDictionary);
      CFRelease(v7);
    }
  }
  uint64_t result = 0;
  *a2 = MutableCopyWithCFTypeCallbacks;
  return result;
}

uint64_t weakReferenceTable_AddPointerAndGetKey_0()
{
  MEMORY[0x199705810](&gWeakReferenceTable_RemoteDecompressionSessionClientThreadOnce, weakReferenceTable_OneTimeInitialization_0);
  if (gWeakReferenceTable_RemoteDecompressionSessionClient)
  {
    return MEMORY[0x1F40DCCD0]();
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void vtdsr_handleDeadServerConnection(uint64_t a1, uint64_t a2)
{
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v9[3] = 0;
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2000000000;
  v8[3] = 0;
  *(unsigned char *)(a2 + 28) = 1;
  uint64_t v3 = *(NSObject **)(a2 + 104);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __vtdsr_handleDeadServerConnection_block_invoke;
  block[3] = &unk_1E5785C28;
  void block[5] = v8;
  block[6] = a2;
  block[4] = v9;
  dispatch_sync(v3, block);
  CFRetain((CFTypeRef)a2);
  uint64_t v5 = *(NSObject **)(a2 + 112);
  dispatch_time_t v4 = *(NSObject **)(a2 + 120);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __vtdsr_handleDeadServerConnection_block_invoke_2;
  v6[3] = &unk_1E5785C50;
  v6[4] = v8;
  v6[5] = v9;
  v6[6] = a2;
  dispatch_group_async(v4, v5, v6);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v9, 8);
}

uint64_t vtdsr_handleMachErrorsInternal(uint64_t a1, uint64_t a2)
{
  if ((int)a2 <= 268435458)
  {
    if (a2 != -308 && a2 != -303) {
      goto LABEL_11;
    }
  }
  else if ((a2 - 268435459) >= 2 && a2 != 268451843)
  {
LABEL_11:
    uint64_t v2 = a2;
LABEL_12:
    if (!VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode()) {
      goto LABEL_15;
    }
    return v2;
  }
  if (a1)
  {
    *(unsigned char *)(a1 + 28) = 1;
    uint64_t v2 = 4294954385;
    goto LABEL_12;
  }
  if (!VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode())
  {
    uint64_t v2 = 4294954385;
LABEL_15:
    FigRPCKillServerOnTimeout();
    return v2;
  }
  return 4294954385;
}

uint64_t VTDecompressionSessionRemote_Invalidate(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 52))
    {
      *(unsigned char *)(result + 52) = 1;
      int v2 = *(_DWORD *)(result + 24);
      if (v2 && *(void *)(v1 + 56))
      {
        if (*(void *)(v1 + 224)) {
          VTDecompressionSessionRemote_FinishDelayedTiles(v1);
        }
        else {
          VTDecompressionSessionRemoteClient_Invalidate(v2);
        }
        if (*(void *)(v1 + 112)) {
          vtdsr_dequeueAllPendingFramesAndCallbackClientForEach(v1, 1, 1);
        }
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t v3 = *(NSObject **)(v1 + 120);
      if (v3) {
        dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
      }
      int v4 = *(_DWORD *)(v1 + 24);
      if (v4)
      {
        uint64_t v5 = VTDecompressionSessionRemoteClient_Destroy(v4);
        uint64_t v6 = vtdsr_handleMachErrorsInternal(v1, v5);
      }
      else
      {
        uint64_t v6 = 0;
      }
      FigRPCDisposeServerConnection();
      *(void *)(v1 + 16) = 0;
      CFDictionaryRef v7 = *(const void **)(v1 + 64);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(v1 + 64) = 0;
      }
      size_t v8 = *(const void **)(v1 + 184);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(v1 + 184) = 0;
      }
      int v9 = *(const void **)(v1 + 192);
      if (v9)
      {
        CFRelease(v9);
        *(void *)(v1 + 192) = 0;
      }
      if (*(void *)(v1 + 240))
      {
        MEMORY[0x199705810](&gWeakReferenceTable_RemoteDecompressionSessionClientThreadOnce, weakReferenceTable_OneTimeInitialization_0);
        if (gWeakReferenceTable_RemoteDecompressionSessionClient)
        {
          FigCFWeakReferenceTableRemoveValue();
          *(void *)(v1 + 240) = 0;
        }
        else
        {
          FigSignalErrorAt();
        }
      }
      return vtdsr_handleMachErrorsInternal(v1, v6);
    }
  }
  return result;
}

uint64_t VTDecompressionSessionRemote_FinishDelayedTiles(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 28) || !*(void *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = VTDecompressionSessionRemoteClient_FinishDelayedTiles(*(_DWORD *)(a1 + 24));
    if (v3)
    {
      uint64_t v4 = v3;
    }
    else
    {
      FigSemaphoreWaitRelative();
      uint64_t v4 = *(unsigned int *)(a1 + 168);
    }
    return vtdsr_handleMachErrorsInternal(a1, v4);
  }
}

void vtdsr_dequeueAllPendingFramesAndCallbackClientForEach(uint64_t a1, char a2, int a3)
{
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  int v10 = 0;
  uint64_t v5 = *(NSObject **)(a1 + 120);
  uint64_t v6 = *(NSObject **)(a1 + 112);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __vtdsr_dequeueAllPendingFramesAndCallbackClientForEach_block_invoke;
  block[3] = &unk_1E5785B98;
  char v8 = a2;
  block[4] = v9;
  void block[5] = a1;
  dispatch_group_async(v5, v6, block);
  if (a3) {
    dispatch_group_wait(*(dispatch_group_t *)(a1 + 120), 0xFFFFFFFFFFFFFFFFLL);
  }
  _Block_object_dispose(v9, 8);
}

uint64_t VTDecompressionSessionRemote_CopySupportedPropertyDictionary(uint64_t a1)
{
  unsigned int v8 = 0;
  uint64_t v7 = 0;
  int v6 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 52))
  {
    return FigSignalErrorAt();
  }
  uint64_t CFPropertyListFromData = VTDecompressionSessionRemoteClient_CopySupportedPropertyDictionary(*(_DWORD *)(a1 + 24), &v7, &v6, &v8);
  if (CFPropertyListFromData) {
    goto LABEL_9;
  }
  uint64_t v4 = v8;
  if (!v8)
  {
    uint64_t CFPropertyListFromData = FigCreateCFPropertyListFromData();
LABEL_9:
    uint64_t v4 = CFPropertyListFromData;
  }
  uint64_t v5 = vtdsr_handleMachErrorsInternal(a1, v4);
  if (v6) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v7);
  }
  return v5;
}

uint64_t VTDecompressionSessionRemote_CopySerializableProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v10 = 0;
  uint64_t v9 = 0;
  int v8 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 52) || !a3)
  {
    return FigSignalErrorAt();
  }
  uint64_t CFPropertyListFromData = VTDecompressionSessionRemoteClient_CopySerializableProperties(*(_DWORD *)(a1 + 24), &v9, &v8, &v10);
  if (CFPropertyListFromData) {
    goto LABEL_10;
  }
  uint64_t v6 = v10;
  if (!v10)
  {
    uint64_t CFPropertyListFromData = FigCreateCFPropertyListFromData();
LABEL_10:
    uint64_t v6 = CFPropertyListFromData;
  }
  uint64_t v7 = vtdsr_handleMachErrorsInternal(a1, v6);
  if (v8) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v9);
  }
  return v7;
}

uint64_t VTDecompressionSessionRemote_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  cf[3] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  unsigned int v22 = 0;
  uint64_t v21 = 0;
  int v20 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 52))
  {
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, @"PixelBufferPool"))
  {
    CFTypeRef v24 = 0;
    cf[0] = 0;
    int v8 = (const void *)*MEMORY[0x1E4F24CB8];
    cf[1] = *(CFTypeRef *)MEMORY[0x1E4F24D38];
    CFTypeRef cf[2] = v8;
    uint64_t v9 = VTDecompressionSessionRemote_CopyProperty(a1, @"PoolPixelBufferAttributesSeed", a3, cf);
    if (!v9)
    {
      if (FigCFEqual())
      {
LABEL_16:
        if (v24 && !*(void *)(a1 + 192))
        {
          CFDictionaryRef CopyRemovingKeys = (const __CFDictionary *)FigCFDictionaryCreateCopyRemovingKeys();
          CFDictionaryRef pixelBufferAttributes = 0;
          uint64_t v17 = vtdsr_createPixelBufferAttributesWithIOSurfaceSupport(CopyRemovingKeys, &pixelBufferAttributes);
          if (v17)
          {
            uint64_t v13 = v17;
          }
          else
          {
            uint64_t v13 = CVPixelBufferPoolCreate(a3, 0, pixelBufferAttributes, (CVPixelBufferPoolRef *)(a1 + 192));
            CFRelease(pixelBufferAttributes);
          }
          goto LABEL_26;
        }
        uint64_t v13 = 0;
LABEL_19:
        CFDictionaryRef CopyRemovingKeys = 0;
LABEL_26:
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (v24) {
          CFRelease(v24);
        }
        if (CopyRemovingKeys) {
          CFRelease(CopyRemovingKeys);
        }
        if (!v13)
        {
          CFTypeRef v18 = *(CFTypeRef *)(a1 + 192);
          if (v18) {
            CFTypeRef v18 = CFRetain(v18);
          }
          uint64_t v13 = 0;
          *a4 = v18;
        }
        goto LABEL_36;
      }
      uint64_t v9 = VTDecompressionSessionRemote_CopyProperty(a1, @"PoolPixelBufferAttributes", a3, &v24);
      if (!v9)
      {
        unsigned int v10 = *(const void **)(a1 + 192);
        if (v10)
        {
          CFRelease(v10);
          *(void *)(a1 + 192) = 0;
        }
        uint64_t v11 = *(const void **)(a1 + 184);
        CFTypeRef v12 = cf[0];
        *(CFTypeRef *)(a1 + 184) = cf[0];
        if (v12) {
          CFRetain(v12);
        }
        if (v11) {
          CFRelease(v11);
        }
        goto LABEL_16;
      }
    }
    uint64_t v13 = v9;
    goto LABEL_19;
  }
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  uint64_t CFPropertyListFromData = VTDecompressionSessionRemoteClient_CopyProperty(*(_DWORD *)(a1 + 24), CStringPtrAndBufferToFree, &v21, &v20, &v22);
  if (CFPropertyListFromData) {
    goto LABEL_23;
  }
  uint64_t v13 = v22;
  if (!v22)
  {
    uint64_t CFPropertyListFromData = FigCreateCFPropertyListFromData();
LABEL_23:
    uint64_t v13 = CFPropertyListFromData;
  }
LABEL_36:
  free(0);
  uint64_t v19 = vtdsr_handleMachErrorsInternal(a1, v13);
  if (v20) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v21);
  }
  return v19;
}

uint64_t VTDecompressionSessionRemote_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v13 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 52) || !a2 || !a3)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (FigCFEqual())
    {
      uint64_t v4 = *(const void **)(a1 + 208);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(a1 + 208) = 0;
      }
    }
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    CFGetAllocator((CFTypeRef)a1);
    uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
    if (CFDataFromCFPropertyList)
    {
      uint64_t v11 = CFDataFromCFPropertyList;
    }
    else
    {
      mach_port_t v7 = *(_DWORD *)(a1 + 24);
      BytePtr = CFDataGetBytePtr(0);
      unsigned int Length = CFDataGetLength(0);
      unsigned int v10 = VTDecompressionSessionRemoteClient_SetProperty(v7, CStringPtrAndBufferToFree, (uint64_t)BytePtr, Length, (int *)&v13);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = v13;
      }
    }
    free(0);
    return vtdsr_handleMachErrorsInternal(a1, v11);
  }
}

uint64_t VTDecompressionSessionRemote_SetProperties(mach_port_t *cf, uint64_t a2)
{
  unsigned int v10 = 0;
  if (*((unsigned char *)cf + 28) || *((unsigned char *)cf + 52) || !a2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFGetAllocator(cf);
    uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
    if (CFDataFromCFPropertyList)
    {
      uint64_t v9 = CFDataFromCFPropertyList;
    }
    else
    {
      mach_port_t v5 = cf[6];
      BytePtr = CFDataGetBytePtr(0);
      int Length = CFDataGetLength(0);
      unsigned int v8 = VTDecompressionSessionRemoteClient_SetProperties(v5, (uint64_t)BytePtr, Length, (int *)&v10);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = v10;
      }
    }
    return vtdsr_handleMachErrorsInternal((uint64_t)cf, v9);
  }
}

uint64_t VTDecompressionSessionRemote_SetMultiImageCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && !*(void *)(a1 + 88))
  {
    *(void *)(a1 + 88) = a2;
    *(void *)(a1 + 96) = a3;
    mach_port_t v3 = *(_DWORD *)(a1 + 24);
    return VTDecompressionSessionRemoteClient_EnableMIO(v3);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t VTDecompressionSessionRemote_DecodeFrame(uint64_t a1, opaqueCMSampleBuffer *a2, int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  return vtDecompressionSessionRemote_DecodeFrameCommon(a1, a2, a3, a4, a5, a6, 0, 0);
}

uint64_t vtDecompressionSessionRemote_DecodeFrameCommon(uint64_t a1, opaqueCMSampleBuffer *a2, int a3, uint64_t a4, uint64_t a5, _DWORD *a6, const void *a7, const void *a8)
{
  int v39 = 0;
  uint64_t v38 = 0;
  CFDataRef theData = 0;
  uint64_t v37 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 52))
  {
    return FigSignalErrorAt();
  }
  VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
  uint64_t SerializedAtomDataForSampleBufferWithOptions = FigRemote_CreateSerializedAtomDataForSampleBufferWithOptions();
  if (SerializedAtomDataForSampleBufferWithOptions)
  {
    uint64_t v18 = SerializedAtomDataForSampleBufferWithOptions;
    *(void *)(a1 + 176) = 0;
    goto LABEL_22;
  }
  *(void *)(a1 + 176) = (v37 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
  if (a4)
  {
    uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
    if (CFDataFromCFPropertyList)
    {
      uint64_t v18 = CFDataFromCFPropertyList;
      goto LABEL_22;
    }
  }
  int v20 = (uint64_t *)malloc_type_calloc(1uLL, 0x50uLL, 0x10A00405DCDF47BuLL);
  uint64_t v21 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = v21 + 1;
  *int v20 = v21;
  v20[1] = a5;
  v20[3] = (uint64_t)_Block_copy(a7);
  v20[4] = (uint64_t)_Block_copy(a8);
  v20[2] = CMSampleBufferGetNumSamples(a2);
  unsigned int v22 = *(NSObject **)(a1 + 104);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __vtDecompressionSessionRemote_DecodeFrameCommon_block_invoke;
  block[3] = &__block_descriptor_tmp_16_1;
  block[4] = a1;
  void block[5] = v20;
  dispatch_sync(v22, block);
  int v23 = *(_DWORD *)(a1 + 24);
  int v24 = v39;
  uint64_t v25 = v38;
  int v26 = v37;
  if (!theData)
  {
    BytePtr = 0;
    goto LABEL_14;
  }
  BytePtr = CFDataGetBytePtr(theData);
  if (!theData)
  {
LABEL_14:
    int Length = 0;
    goto LABEL_15;
  }
  int Length = CFDataGetLength(theData);
LABEL_15:
  uint64_t v29 = VTDecompressionSessionRemoteClient_DecodeFrame(v23, v24, v25, v26, a3, (uint64_t)BytePtr, Length, *v20, a8 != 0);
  if (v29)
  {
    uint64_t v18 = v29;
  }
  else
  {
    FigSemaphoreWaitRelative();
    uint64_t v18 = *(unsigned int *)(a1 + 152);
    int v30 = *(_DWORD *)(a1 + 144);
    int v31 = *(unsigned __int8 *)(a1 + 148);
    if ((v30 & 1) == 0) {
      vtdsr_dequeueAllPendingFramesAndCallbackClientForEach(a1, 0, 1);
    }
    if (a6) {
      *a6 = v30;
    }
    if (v31) {
      goto LABEL_22;
    }
  }
  uint64_t v32 = *(NSObject **)(a1 + 104);
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 0x40000000;
  v34[2] = __vtDecompressionSessionRemote_DecodeFrameCommon_block_invoke_2;
  v34[3] = &__block_descriptor_tmp_17_1;
  v34[4] = a1;
  v34[5] = v20;
  dispatch_sync(v32, v34);
LABEL_22:
  uint64_t v33 = vtdsr_handleMachErrorsInternal(a1, v18);
  FigMachPortReleaseSendRight_();
  if (v37) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v38);
  }
  if (theData) {
    CFRelease(theData);
  }
  return v33;
}

uint64_t VTDecompressionSessionRemote_DecodeFrameWithOutputHandler(uint64_t a1, opaqueCMSampleBuffer *a2, int a3, uint64_t a4, _DWORD *a5, unint64_t a6, unint64_t a7)
{
  if (a6 | a7) {
    return vtDecompressionSessionRemote_DecodeFrameCommon(a1, a2, a3, a4, 0, a5, (const void *)a6, (const void *)a7);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t VTDecompressionSessionRemoteCallbackServer_DecodeFrameReturn(uint64_t a1, uint64_t a2, int a3, char a4, int a5)
{
  uint64_t v8 = weakReferenceTable_CopyPointerFromKey_0();
  if (v8)
  {
    uint64_t v9 = (const void *)v8;
    *(_DWORD *)(v8 + 144) = a3;
    *(_DWORD *)(v8 + 152) = a5;
    *(unsigned char *)(v8 + 148) = a4;
    FigSemaphoreSignal();
    CFRelease(v9);
  }
  return 0;
}

uint64_t weakReferenceTable_CopyPointerFromKey_0()
{
  MEMORY[0x199705810](&gWeakReferenceTable_RemoteDecompressionSessionClientThreadOnce, weakReferenceTable_OneTimeInitialization_0);
  if (gWeakReferenceTable_RemoteDecompressionSessionClient)
  {
    return MEMORY[0x1F40DCCE8]();
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t VTDecompressionSessionRemote_WaitForAsynchronousFrames(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 28) || !*(void *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = VTDecompressionSessionRemoteClient_FinishDelayedFrames(*(_DWORD *)(a1 + 24));
    if (v3)
    {
      uint64_t v4 = v3;
    }
    else
    {
      FigSemaphoreWaitRelative();
      uint64_t v4 = *(unsigned int *)(a1 + 168);
      if (!v4)
      {
        FigSemaphoreWaitRelative();
        FigSemaphoreSignal();
        uint64_t v4 = 0;
      }
    }
    return vtdsr_handleMachErrorsInternal(a1, v4);
  }
}

uint64_t VTDecompressionSessionRemote_FinishDelayedFrames(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 52))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = VTDecompressionSessionRemoteClient_FinishDelayedFrames(*(_DWORD *)(a1 + 24));
    if (v3)
    {
      uint64_t v4 = v3;
    }
    else
    {
      FigSemaphoreWaitRelative();
      uint64_t v4 = *(unsigned int *)(a1 + 168);
    }
    return vtdsr_handleMachErrorsInternal(a1, v4);
  }
}

uint64_t VTDecompressionSessionRemoteCallbackServer_FinishDelayedFramesReturn(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = weakReferenceTable_CopyPointerFromKey_0();
  if (v4)
  {
    mach_port_t v5 = (const void *)v4;
    *(_DWORD *)(v4 + 168) = a3;
    FigSemaphoreSignal();
    CFRelease(v5);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemote_CanAcceptFormatDescription(uint64_t a1, void *a2)
{
  values = a2;
  int v8 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 52))
  {
    uint64_t v7 = 0;
LABEL_10:
    vtdsr_handleMachErrorsInternal(a1, v7);
    return v8;
  }
  CFArrayRef v3 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  if (!v3)
  {
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_10;
  }
  CFArrayRef v4 = v3;
  uint64_t SerializedAtomDataForFormatDescriptions = FigRemote_CreateSerializedAtomDataForFormatDescriptions();
  if (!SerializedAtomDataForFormatDescriptions) {
    uint64_t SerializedAtomDataForFormatDescriptions = VTDecompressionSessionRemoteClient_CanAcceptFormatDescription(*(_DWORD *)(a1 + 24), 0, 0, &v8);
  }
  vtdsr_handleMachErrorsInternal(a1, SerializedAtomDataForFormatDescriptions);
  CFRelease(v4);
  return v8;
}

uint64_t VTDecompressionSessionRemote_CopyBlackPixelBuffer(uint64_t a1, CFTypeRef *a2)
{
  unsigned int v10 = 0;
  CFTypeRef cf = 0;
  int v8 = 0;
  uint64_t v7 = 0;
  int v6 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 52))
  {
    return FigSignalErrorAt();
  }
  uint64_t PixelBufferFromSerializedAtomData = VTDecompressionSessionRemoteClient_CopyBlackPixelBuffer(*(_DWORD *)(a1 + 24), &v8, &v7, &v6, &v10);
  if (PixelBufferFromSerializedAtomData)
  {
LABEL_18:
    uint64_t v5 = PixelBufferFromSerializedAtomData;
    goto LABEL_11;
  }
  uint64_t v5 = v10;
  if (!v10)
  {
    uint64_t PixelBufferFromSerializedAtomData = FigRemote_CreatePixelBufferFromSerializedAtomData();
    if (!PixelBufferFromSerializedAtomData)
    {
      int v6 = 0;
      uint64_t v5 = 0;
      if (a2)
      {
        *a2 = cf;
        CFTypeRef cf = 0;
      }
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_11:
  if (v8) {
    FigMachPortReleaseSendRight_();
  }
  if (v6) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v7);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

void VTDecompressionSessionRemote_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = 0;
  CFArrayRef v15 = &v14;
  uint64_t v16 = 0x2000000000;
  int v17 = 0;
  uint64_t v9 = 0;
  unsigned int v10 = &v9;
  uint64_t v11 = 0x3000000000;
  long long v12 = *MEMORY[0x1E4F1F9F8];
  uint64_t v13 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 52))
  {
    uint64_t MinOutputPresentationTimeStampOfFramesBeingDecoded = 0;
  }
  else if (*(unsigned char *)(a1 + 128))
  {
    uint64_t MinOutputPresentationTimeStampOfFramesBeingDecoded = VTDecompressionSessionRemoteClient_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(*(_DWORD *)(a1 + 24), (uint64_t)&v12);
    *((_DWORD *)v15 + 6) = MinOutputPresentationTimeStampOfFramesBeingDecoded;
  }
  else
  {
    uint64_t v5 = *(NSObject **)(a1 + 112);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __VTDecompressionSessionRemote_GetMinOutputPresentationTimeStampOfFramesBeingDecoded_block_invoke;
    block[3] = &unk_1E5785AB8;
    block[4] = &v14;
    void block[5] = &v9;
    void block[6] = a1;
    dispatch_sync(v5, block);
    uint64_t MinOutputPresentationTimeStampOfFramesBeingDecoded = *((unsigned int *)v15 + 6);
  }
  int v6 = vtdsr_handleMachErrorsInternal(a1, MinOutputPresentationTimeStampOfFramesBeingDecoded);
  *((_DWORD *)v15 + 6) = v6;
  uint64_t v7 = v10;
  *(_OWORD *)a2 = *(_OWORD *)(v10 + 3);
  *(void *)(a2 + 16) = v7[5];
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v14, 8);
}

uint64_t VTDecompressionSessionRemote_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = 0;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2000000000;
  int v30 = 0;
  uint64_t v23 = 0;
  int v24 = &v23;
  uint64_t v25 = 0x2000000000;
  int v26 = 0;
  uint64_t v19 = 0;
  int v20 = &v19;
  uint64_t v21 = 0x3000000000;
  memset(v22, 0, sizeof(v22));
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x3000000000;
  memset(v18, 0, sizeof(v18));
  if (!*(unsigned char *)(a1 + 28) && !*(unsigned char *)(a1 + 52))
  {
    if (*(unsigned char *)(a1 + 128))
    {
      int MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded = VTDecompressionSessionRemoteClient_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(*(_DWORD *)(a1 + 24), (uint64_t)v22, (uint64_t)v18, &v26);
      uint64_t v9 = v28;
      *((_DWORD *)v28 + 6) = MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded;
      if (MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded) {
        goto LABEL_14;
      }
    }
    else
    {
      unsigned int v10 = *(NSObject **)(a1 + 112);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __VTDecompressionSessionRemote_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded_block_invoke;
      block[3] = &unk_1E5785AE0;
      block[4] = &v27;
      void block[5] = &v19;
      void block[6] = &v15;
      void block[7] = &v23;
      block[8] = a1;
      dispatch_sync(v10, block);
      uint64_t v9 = v28;
      if (*((_DWORD *)v28 + 6))
      {
LABEL_14:
        uint64_t v4 = vtdsr_handleMachErrorsInternal(a1, *((unsigned int *)v9 + 6));
        *((_DWORD *)v28 + 6) = v4;
        goto LABEL_4;
      }
    }
    int v11 = *((_DWORD *)v24 + 6);
    *((_DWORD *)v9 + 6) = v11;
    if (!v11)
    {
      if (a2)
      {
        uint64_t v12 = v20[5];
        *(_OWORD *)a2 = *(_OWORD *)(v20 + 3);
        *(void *)(a2 + 16) = v12;
      }
      if (a3)
      {
        uint64_t v13 = v16[5];
        *(_OWORD *)a3 = *(_OWORD *)(v16 + 3);
        *(void *)(a3 + 16) = v13;
      }
    }
    goto LABEL_14;
  }
  uint64_t v4 = FigSignalErrorAt();
LABEL_4:
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  return v4;
}

uint64_t VTTileDecompressionSessionRemote_Create(uint64_t a1, uint64_t a2, void *a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6, void *a7)
{
  values = a3;
  uint64_t v11 = vtdsr_oneTimeInitialization();
  if (v11) {
    goto LABEL_26;
  }
  VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
  MEMORY[0x199705810](&VTDecompressionSessionRemoteGetTypeID_sRegisterVTDecompressionSessionRemoteOnce, vtdcr_Register);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v11 = FigSignalErrorAt();
LABEL_26:
    uint64_t v21 = v11;
    CFArrayRef v15 = 0;
    uint64_t v19 = 0;
    goto LABEL_19;
  }
  uint64_t v13 = (void *)Instance;
  *(void *)(Instance + 56) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  v13[15] = dispatch_group_create();
  v13[14] = dispatch_queue_create("com.apple.coremedia.decompressionsession.clientcallback", 0);
  v13[13] = dispatch_queue_create("com.apple.coremedia.decompressionsession.pendingframequeue", 0);
  v13[17] = FigSemaphoreCreate();
  v13[20] = FigSemaphoreCreate();
  v13[25] = 1;
  v13[5] = FigSemaphoreCreate();
  v13[28] = a5;
  v13[29] = a6;
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef v15 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  if (!v15)
  {
    uint64_t SerializedAtomDataForFormatDescriptions = FigSignalErrorAt();
    goto LABEL_28;
  }
  uint64_t SerializedAtomDataForFormatDescriptions = FigRemote_CreateSerializedAtomDataForFormatDescriptions();
  if (SerializedAtomDataForFormatDescriptions)
  {
LABEL_28:
    uint64_t v21 = SerializedAtomDataForFormatDescriptions;
    goto LABEL_29;
  }
  if (!a4)
  {
    uint64_t v19 = 0;
LABEL_14:
    v13[30] = 0;
    uint64_t Key_0 = weakReferenceTable_AddPointerAndGetKey_0();
    if (Key_0) {
      goto LABEL_24;
    }
    uint64_t Key_0 = FigRPCCreateServerConnectionForObjectUsingMachChannel();
    if (Key_0) {
      goto LABEL_24;
    }
    uint64_t Key_0 = FigRPCGetServerConnectionInfo();
    if (Key_0) {
      goto LABEL_24;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    uint64_t v21 = 0;
    if (!a7) {
      goto LABEL_30;
    }
    *a7 = v13;
LABEL_19:
    uint64_t v22 = vtdsr_handleMachErrorsInternal(0, v21);
    if (!v15) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (!VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode()
    || !CFDictionaryContainsKey(a4, @"CMSession"))
  {
    uint64_t v19 = 0;
LABEL_11:
    uint64_t Key_0 = FigCreateCFDataFromCFPropertyList();
    if (Key_0)
    {
LABEL_24:
      uint64_t v21 = Key_0;
      goto LABEL_30;
    }
    goto LABEL_14;
  }
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v14, 0, a4);
  if (MutableCopy)
  {
    uint64_t v18 = MutableCopy;
    CFDictionaryRemoveValue(MutableCopy, @"CMSession");
    uint64_t v19 = v18;
    goto LABEL_11;
  }
  uint64_t v21 = 0;
LABEL_29:
  uint64_t v19 = 0;
LABEL_30:
  uint64_t v22 = vtdsr_handleMachErrorsInternal((uint64_t)v13, v21);
  CFRelease(v13);
  if (v15) {
LABEL_20:
  }
    CFRelease(v15);
LABEL_21:
  if (v19) {
    CFRelease(v19);
  }
  return v22;
}

uint64_t VTDecompressionSessionRemote_DecodeTile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, int a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 52))
  {
    return FigSignalErrorAt();
  }
  uint64_t SerializedAtomDataForSampleBuffer = FigRemote_CreateSerializedAtomDataForSampleBuffer();
  if (SerializedAtomDataForSampleBuffer)
  {
    uint64_t v18 = SerializedAtomDataForSampleBuffer;
    *(void *)(a1 + 176) = 0;
  }
  else
  {
    uint64_t v19 = (void *)MEMORY[0x1E4F14B00];
    *(void *)(a1 + 176) = (v37 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
    if (!FigCFEqual())
    {
      uint64_t SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
      if (SerializedAtomDataForPixelBuffer)
      {
        uint64_t v18 = SerializedAtomDataForPixelBuffer;
        *(void *)(a1 + 216) = 0;
        goto LABEL_21;
      }
      uint64_t v31 = (v35 + *v19 - 1) & -*v19;
      uint64_t v32 = *(const void **)(a1 + 208);
      *(void *)(a1 + 208) = a5;
      *(void *)(a1 + 216) = v31;
      if (a5) {
        CFRetain(a5);
      }
      if (v32) {
        CFRelease(v32);
      }
    }
    int v20 = (uint64_t *)malloc_type_calloc(1uLL, 0x50uLL, 0x10A00405DCDF47BuLL);
    uint64_t v21 = *(void *)(a1 + 200);
    *(void *)(a1 + 200) = v21 + 1;
    *int v20 = v21;
    v20[1] = a8;
    if (a5) {
      CFTypeRef v22 = CFRetain(a5);
    }
    else {
      CFTypeRef v22 = 0;
    }
    v20[5] = (uint64_t)v22;
    v20[6] = a3;
    v20[7] = a4;
    v20[8] = a6;
    v20[2] = 1;
    int v24 = *(NSObject **)(a1 + 104);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __VTDecompressionSessionRemote_DecodeTile_block_invoke;
    block[3] = &__block_descriptor_tmp_7_2;
    block[4] = a1;
    void block[5] = v20;
    dispatch_sync(v24, block);
    uint64_t v25 = VTDecompressionSessionRemoteClient_DecodeTile(*(_DWORD *)(a1 + 24), SHIDWORD(v39), v38, v37, a3, a4, v39, v36, v35, a6, a7, *v20);
    if (v25)
    {
      uint64_t v18 = v25;
    }
    else
    {
      FigSemaphoreWaitRelative();
      uint64_t v18 = *(unsigned int *)(a1 + 152);
      int v26 = *(_DWORD *)(a1 + 144);
      int v27 = *(unsigned __int8 *)(a1 + 148);
      if ((v26 & 1) == 0) {
        vtdsr_dequeueAllPendingFramesAndCallbackClientForEach(a1, 0, 1);
      }
      if (a9) {
        *a9 = v26;
      }
      if (v27) {
        goto LABEL_21;
      }
    }
    uint64_t v28 = *(NSObject **)(a1 + 104);
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 0x40000000;
    v33[2] = __VTDecompressionSessionRemote_DecodeTile_block_invoke_2;
    v33[3] = &__block_descriptor_tmp_8_2;
    v33[4] = a1;
    v33[5] = v20;
    dispatch_sync(v28, v33);
  }
LABEL_21:
  uint64_t v29 = vtdsr_handleMachErrorsInternal(a1, v18);
  FigMachPortReleaseSendRight_();
  FigMachPortReleaseSendRight_();
  int v30 = (unsigned int *)MEMORY[0x1E4F14960];
  if (v37) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v38);
  }
  if (v35) {
    MEMORY[0x199706B20](*v30, v36);
  }
  return v29;
}

uint64_t VTDecompressionSessionRemoteCallbackServer_NotificationIsPending()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v13 = 1;
  uint64_t v0 = weakReferenceTable_CopyPointerFromKey_0();
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t v12 = 0;
    if (!*(unsigned char *)(v0 + 52))
    {
      CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v4 = (unsigned int *)MEMORY[0x1E4F14960];
      do
      {
        uint64_t v11 = 0;
        unsigned int v10 = 0;
        int v13 = 0;
        if (!VTDecompressionSessionRemoteClient_GetNextPendingNotification(*(_DWORD *)(v1 + 24), &v13, &v12, cStr, &v11, &v10))
        {
          uint64_t v5 = v11;
          unsigned int v6 = v10;
          CFTypeRef cf = 0;
          if (!*(unsigned char *)(v1 + 52))
          {
            uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
            if (v7)
            {
              int v8 = (const void *)v7;
              CFStringRef v9 = CFStringCreateWithCString(v3, cStr, 0);
              if (v9)
              {
                if (v5 && v6) {
                  FigCreateCFPropertyListFromData();
                }
                CMNotificationCenterGetDefaultLocalCenter();
                CMNotificationCenterPostNotification();
              }
              CFRelease(v8);
              if (cf) {
                CFRelease(cf);
              }
              if (v9) {
                CFRelease(v9);
              }
            }
          }
          MEMORY[0x199706B20](*v4, v11, v10);
        }
      }
      while (v13);
    }
    CFRelease((CFTypeRef)v1);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteCallbackServer_FrameIsPending()
{
  uint64_t v0 = weakReferenceTable_CopyPointerFromKey_0();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    if (!*(unsigned char *)(v0 + 52)) {
      vtdsr_dequeueAllPendingFramesAndCallbackClientForEach(v0, 0, 0);
    }
    CFRelease(v1);
  }
  return 0;
}

double vtdsr_Init(uint64_t a1)
{
  *(void *)(a1 + 240) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void vtdsr_Finalize(uint64_t a1)
{
  VTDecompressionSessionRemote_Invalidate(a1);
  int v2 = *(NSObject **)(a1 + 120);
  if (v2)
  {
    dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(*(dispatch_object_t *)(a1 + 120));
  }
  CFAllocatorRef v3 = *(NSObject **)(a1 + 112);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = *(NSObject **)(a1 + 104);
  if (v4) {
    dispatch_release(v4);
  }
  FigSemaphoreDestroy();
  FigSemaphoreDestroy();
  FigSemaphoreDestroy();
  uint64_t v5 = *(const void **)(a1 + 56);
  if (v5) {
    CFRelease(v5);
  }
  unsigned int v6 = *(const void **)(a1 + 208);
  if (v6)
  {
    CFRelease(v6);
  }
}

CFStringRef vtdsr_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[VTDecompressionSessionRemote %p]", a1);
}

CFStringRef vtdsr_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[VTDecompressionSessionRemote %p]", a1);
}

uint64_t __vtdsr_oneTimeInitialization_block_invoke(uint64_t a1)
{
  VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
  uint64_t result = FigRPCCreateRemoteClient();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t weakReferenceTable_OneTimeInitialization_0()
{
  return MEMORY[0x1F40DCCF8](*MEMORY[0x1E4F1CF80], 0, &gWeakReferenceTable_RemoteDecompressionSessionClient);
}

void __vtdsr_dequeueAllPendingFramesAndCallbackClientForEach_block_invoke(uint64_t a1)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*(void *)(a1 + 40) + 52) || *(unsigned char *)(a1 + 48))
  {
    int v2 = 0;
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v4 = (unsigned int *)MEMORY[0x1E4F14960];
    while (1)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v98 = 0;
      int v97 = 0;
      uint64_t v93 = 0;
      v94 = &v93;
      uint64_t v95 = 0x2000000000;
      uint64_t v96 = 0;
      uint64_t v87 = 0;
      uint64_t v88 = &v87;
      uint64_t v89 = 0x3002000000;
      uint64_t v90 = __Block_byref_object_copy__0;
      __int16 v91 = __Block_byref_object_dispose__0;
      uint64_t v92 = 0;
      uint64_t v81 = 0;
      int v82 = &v81;
      uint64_t v83 = 0x3002000000;
      int v84 = __Block_byref_object_copy__0;
      int v85 = __Block_byref_object_dispose__0;
      uint64_t v86 = 0;
      uint64_t v77 = 0;
      uint64_t v78 = &v77;
      uint64_t v79 = 0x2000000000;
      uint64_t v80 = 0;
      uint64_t v73 = 0;
      CFNumberRef v74 = &v73;
      uint64_t v75 = 0x2000000000;
      uint64_t v76 = 0;
      uint64_t v69 = 0;
      CFNumberRef v70 = &v69;
      uint64_t v71 = 0x2000000000;
      uint64_t v72 = 0;
      uint64_t v65 = 0;
      CFTypeID v66 = &v65;
      uint64_t v67 = 0x2000000000;
      char v68 = 0;
      uint64_t v64 = 0;
      uint64_t v60 = 0;
      CFNumberRef v61 = &v60;
      uint64_t v62 = 0x2000000000;
      uint64_t v63 = 0;
      int v59 = 0;
      uint64_t v58 = 0;
      int v57 = 0;
      long long v55 = 0uLL;
      uint64_t v56 = 0;
      long long v53 = 0uLL;
      uint64_t v54 = 0;
      memset(v114, 0, sizeof(v114));
      long long v113 = 0u;
      long long v112 = 0u;
      memset(v111, 0, sizeof(v111));
      long long v110 = 0u;
      long long v109 = 0u;
      memset(v108, 0, sizeof(v108));
      long long v107 = 0u;
      long long v106 = 0u;
      memset(v105, 0, sizeof(v105));
      long long v104 = 0u;
      long long v103 = 0u;
      long long v102 = 0u;
      long long v101 = 0u;
      long long v100 = 0u;
      long long v99 = 0u;
      CFTypeRef cf = 0;
      uint64_t v6 = VTDecompressionSessionRemoteClient_DequeueNextPendingFrame(*(_DWORD *)(v5 + 24), &v97, &v96, (_DWORD *)&v64 + 1, &v64, &v59, &v58, &v57, &v99, (void *)&v99 + 1, &v100, (void *)&v100 + 1, &v101, &v103, (void *)&v103 + 1, &v104, (void *)&v104 + 1, v105, &v106,
             (void *)&v106 + 1,
             &v107,
             (void *)&v107 + 1,
             v108,
             &v109,
             (void *)&v109 + 1,
             &v110,
             (void *)&v110 + 1,
             v111,
             &v112,
             (void *)&v112 + 1,
             &v113,
             (void *)&v113 + 1,
             v114,
             (uint64_t)&v55,
             (uint64_t)&v53,
             &v98,
             (_DWORD *)&v98 + 1);
      if (v6)
      {
        uint64_t v7 = v6;
LABEL_94:
        CFMutableArrayRef Mutable = 0;
        CFMutableArrayRef v10 = 0;
        goto LABEL_47;
      }
      uint64_t v7 = HIDWORD(v98);
      if (HIDWORD(v98)) {
        goto LABEL_94;
      }
      if (v97) {
        break;
      }
      uint64_t v7 = 0;
      CFMutableArrayRef Mutable = 0;
      CFMutableArrayRef v10 = 0;
LABEL_46:
      int v2 = v98;
LABEL_47:
      int v29 = vtdsr_handleMachErrorsInternal(v5, v7);
      if (v59) {
        FigMachPortReleaseSendRight_();
      }
      if (v57) {
        MEMORY[0x199706B20](*v4, v58);
      }
      for (uint64_t i = 0; i != 320; i += 64)
      {
        if (*(_DWORD *)((char *)&v99 + i)) {
          FigMachPortReleaseSendRight_();
        }
        uint64_t v31 = (char *)&v99 + i;
        if (*(_DWORD *)((char *)&v99 + i + 16)) {
          MEMORY[0x199706B20](*v4, *((void *)v31 + 1));
        }
        if (*((_DWORD *)v31 + 8)) {
          MEMORY[0x199706B20](*v4, *(void *)((char *)&v100 + i + 8));
        }
        uint64_t v32 = *(const void **)((char *)&v102 + i);
        if (v32) {
          CFRelease(v32);
        }
        uint64_t v33 = *(const void **)((char *)&v101 + i + 8);
        if (v33) {
          CFRelease(v33);
        }
        int v34 = *(const void **)((char *)&v102 + i + 8);
        if (v34) {
          CFRelease(v34);
        }
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v10) {
        CFRelease(v10);
      }
      if (cf) {
        CFRelease(cf);
      }
      uint64_t v35 = (const void *)v61[3];
      if (v35) {
        CFRelease(v35);
      }
      _Block_release((const void *)v88[5]);
      _Block_release((const void *)v82[5]);
      _Block_object_dispose(&v60, 8);
      _Block_object_dispose(&v65, 8);
      _Block_object_dispose(&v69, 8);
      _Block_object_dispose(&v73, 8);
      _Block_object_dispose(&v77, 8);
      _Block_object_dispose(&v81, 8);
      _Block_object_dispose(&v87, 8);
      _Block_object_dispose(&v93, 8);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v29;
      if (!v2 || *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        return;
      }
    }
    if (HIDWORD(v64)) {
      goto LABEL_28;
    }
    int v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    if (v59 | v57)
    {
      HIDWORD(v64) = FigRemote_CreatePixelBufferFromSerializedAtomData();
      if (HIDWORD(v64)) {
        goto LABEL_28;
      }
      int v57 = 0;
    }
    if (v99 | v100)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(v3, 5, v8);
      if (Mutable)
      {
        CFMutableArrayRef v10 = CFArrayCreateMutable(v3, 5, v8);
        if (v10)
        {
          uint64_t v11 = 0;
          while (1)
          {
            uint64_t v12 = (char *)&v99 + v11;
            if (*(_DWORD *)((char *)&v99 + v11) | *(_DWORD *)((char *)&v99 + v11 + 16))
            {
              HIDWORD(v64) = FigRemote_CreatePixelBufferFromSerializedAtomData();
              if (HIDWORD(v64)) {
                break;
              }
              *((_DWORD *)v12 + 4) = 0;
            }
            int v13 = (const UInt8 *)*((void *)v12 + 3);
            if (v13)
            {
              CFIndex v14 = *(unsigned int *)((char *)&v101 + v11);
              if (v14)
              {
                CFDataRef v15 = CFDataCreate(v3, v13, v14);
                *(void *)((char *)&v101 + v11 + 8) = v15;
                if (!v15)
                {
                  int v18 = FigSignalErrorAt();
                  goto LABEL_27;
                }
                HIDWORD(v64) = MEMORY[0x199705730](v15, v3, (char *)&v102 + v11);
                if (HIDWORD(v64)) {
                  break;
                }
              }
            }
            uint64_t v16 = (const void **)((char *)&v99 + v11);
            uint64_t v17 = *(const void **)((char *)&v102 + v11);
            if (v17 && v16[7])
            {
              CFArrayAppendValue(Mutable, v17);
              CFArrayAppendValue(v10, v16[7]);
            }
            v11 += 64;
            if (v11 == 320)
            {
              int v18 = MEMORY[0x199705780](v3, Mutable, v10, &cf);
LABEL_27:
              uint64_t v7 = 0;
              HIDWORD(v64) = v18;
              goto LABEL_30;
            }
          }
          uint64_t v7 = 0;
        }
        else
        {
          uint64_t v7 = FigSignalErrorAt();
        }
LABEL_30:
        uint64_t v19 = *(NSObject **)(v5 + 104);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = __vtdsr_dequeueNextPendingFrameAndCallbackClient_block_invoke;
        block[3] = &unk_1E5785BC0;
        block[12] = v5;
        block[4] = &v93;
        void block[5] = &v87;
        void block[6] = &v81;
        void block[7] = &v77;
        block[8] = &v73;
        void block[9] = &v69;
        void block[10] = &v60;
        block[11] = &v65;
        dispatch_sync(v19, block);
        if (!*((unsigned char *)v66 + 24))
        {
          uint64_t v7 = 4294954385;
          goto LABEL_47;
        }
        *(unsigned char *)(v5 + 128) = 1;
        int v20 = (const void *)v61[3];
        if (!v20)
        {
          uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef, long long *, long long *))(v5 + 88);
          if (v21)
          {
            uint64_t v22 = *(void *)(v5 + 96);
            uint64_t v23 = v94[3];
            uint64_t v24 = HIDWORD(v64);
            uint64_t v25 = v64;
            CFTypeRef v26 = cf;
            long long v49 = v55;
            uint64_t v50 = v56;
            long long v47 = v53;
            uint64_t v48 = v54;
            goto LABEL_40;
          }
          uint64_t v37 = v82[5];
          if (v37)
          {
            uint64_t v38 = *(void (**)(uint64_t, void, void, void, CFTypeRef, long long *, long long *))(v37 + 16);
            long long v49 = v55;
            uint64_t v50 = v56;
            long long v47 = v53;
            uint64_t v48 = v54;
            v38(v37, HIDWORD(v64), v64, 0, cf, &v49, &v47);
            goto LABEL_41;
          }
        }
        if (!cf || *(void *)(v5 + 88) || v82[5])
        {
          uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef, long long *, long long *))(v5 + 72);
          if (v21)
          {
            uint64_t v22 = *(void *)(v5 + 80);
            uint64_t v23 = v94[3];
            uint64_t v24 = HIDWORD(v64);
            uint64_t v25 = v64;
            long long v49 = v55;
            uint64_t v50 = v56;
            long long v47 = v53;
            uint64_t v48 = v54;
            CFTypeRef v26 = v20;
LABEL_40:
            v21(v22, v23, v24, v25, v26, &v49, &v47);
LABEL_41:
            if (!FigAtomicDecrement32()) {
              FigSemaphoreSignal();
            }
            uint64_t v27 = FigCFWeakReferenceHolderCopyReferencedObject();
            if (v27)
            {
              uint64_t v28 = (const void *)v27;
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterPostNotification();
              CFRelease(v28);
            }
            *(unsigned char *)(v5 + 128) = 0;
            goto LABEL_46;
          }
          uint64_t v36 = *(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(v5 + 224);
          if (v36)
          {
            v36(*(void *)(v5 + 232), v94[3], v78[3], v74[3], v61[3], v70[3], HIDWORD(v64), v64);
            goto LABEL_41;
          }
          uint64_t v39 = v88[5];
          if (!v39)
          {
            uint64_t v44 = v82[5];
            if (v44)
            {
              CFTypeID v45 = *(void (**)(uint64_t, void, void, const void *, void, long long *, long long *))(v44 + 16);
              long long v49 = v55;
              uint64_t v50 = v56;
              long long v47 = v53;
              uint64_t v48 = v54;
              v45(v44, HIDWORD(v64), v64, v20, 0, &v49, &v47);
            }
            goto LABEL_41;
          }
          CFTypeRef v40 = *(void (**)(void))(v39 + 16);
          long long v49 = v55;
          uint64_t v50 = v56;
          long long v47 = v53;
          uint64_t v48 = v54;
        }
        else
        {
          if (!HIDWORD(v64)) {
            HIDWORD(v64) = -17699;
          }
          xpc_object_t v41 = *(void (**)(uint64_t, uint64_t))(v5 + 72);
          if (v41)
          {
            uint64_t v42 = *(void *)(v5 + 80);
            uint64_t v43 = v94[3];
            long long v49 = *MEMORY[0x1E4F1F9F8];
            uint64_t v50 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
            long long v47 = v49;
            uint64_t v48 = v50;
            v41(v42, v43);
            goto LABEL_41;
          }
          uint64_t v46 = v88[5];
          if (!v46) {
            goto LABEL_41;
          }
          CFTypeRef v40 = *(void (**)(void))(v46 + 16);
          long long v49 = *MEMORY[0x1E4F1F9F8];
          uint64_t v50 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          long long v47 = v49;
          uint64_t v48 = v50;
        }
        v40();
        goto LABEL_41;
      }
      uint64_t v7 = FigSignalErrorAt();
LABEL_29:
      CFMutableArrayRef v10 = 0;
      goto LABEL_30;
    }
LABEL_28:
    uint64_t v7 = 0;
    CFMutableArrayRef Mutable = 0;
    goto LABEL_29;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __vtdsr_dequeueNextPendingFrameAndCallbackClient_block_invoke(void *a1)
{
  uint64_t v1 = *(void **)(a1[12] + 32);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1[4] + 8);
    while (*v1 != *(void *)(v3 + 24))
    {
      uint64_t v1 = (void *)v1[9];
      if (!v1) {
        return;
      }
    }
    *(void *)(v3 + 24) = v1[1];
    *(void *)(*(void *)(a1[5] + 8) + 40) = _Block_copy((const void *)v1[3]);
    *(void *)(*(void *)(a1[6] + 8) + 40) = _Block_copy((const void *)v1[4]);
    *(void *)(*(void *)(a1[7] + 8) + 24) = v1[6];
    *(void *)(*(void *)(a1[8] + 8) + 24) = v1[7];
    *(void *)(*(void *)(a1[9] + 8) + 24) = v1[8];
    uint64_t v4 = v1[2] - 1;
    v1[2] = v4;
    uint64_t v5 = v1[5];
    if (v5) {
      *(void *)(*(void *)(a1[10] + 8) + 24) = v5;
    }
    if (!v4)
    {
      _Block_release((const void *)v1[3]);
      _Block_release((const void *)v1[4]);
      uint64_t v6 = a1[12];
      CFStringRef v9 = *(void **)(v6 + 32);
      uint64_t v7 = (void *)(v6 + 32);
      int v8 = v9;
      if (v9 != v1)
      {
        do
        {
          CFMutableArrayRef v10 = v8;
          int v8 = (void *)v8[9];
        }
        while (v8 != v1);
        uint64_t v7 = v10 + 9;
      }
      *uint64_t v7 = v1[9];
      free(v1);
    }
    *(unsigned char *)(*(void *)(a1[11] + 8) + 24) = 1;
  }
}

void *__vtdsr_handleDeadServerConnection_block_invoke(void *result)
{
  *(void *)(*(void *)(result[4] + 8) + 24) = *(void *)(result[6] + 32);
  *(void *)(*(void *)(result[5] + 8) + 24) = *(void *)(*(void *)(result[4] + 8) + 24);
  *(void *)(result[6] + 32) = 0;
  return result;
}

void __vtdsr_handleDeadServerConnection_block_invoke_2(void *a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1[4] + 8) + 24);
  if (v2)
  {
    uint64_t v3 = (long long *)MEMORY[0x1E4F1F9F8];
    do
    {
      *(void *)(*(void *)(a1[5] + 8) + 24) = v2;
      *(void *)(*(void *)(a1[4] + 8) + 24) = *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 72);
      uint64_t v4 = (void *)a1[6];
      uint64_t v5 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, long long *, long long *))v4[9];
      if (v5)
      {
        uint64_t v6 = v4[10];
        uint64_t v7 = *(void *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 8);
        long long v22 = *v3;
        uint64_t v23 = *((void *)v3 + 2);
        long long v20 = v22;
        uint64_t v21 = v23;
        v5(v6, v7, 4294954385, 2, 0, &v22, &v20);
      }
      else
      {
        int v8 = (void (*)(uint64_t, void, void, void, void, void, uint64_t, uint64_t))v4[28];
        if (v8)
        {
          uint64_t v9 = v4[29];
          CFMutableArrayRef v10 = *(void **)(*(void *)(a1[5] + 8) + 24);
          v8(v9, v10[1], v10[6], v10[7], 0, v10[8], 4294954385, 2);
        }
        else
        {
          uint64_t v11 = *(void *)(*(void *)(a1[5] + 8) + 24);
          uint64_t v12 = *(void *)(v11 + 32);
          if (v12)
          {
            int v13 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void, long long *, long long *))(v12 + 16);
            long long v22 = *v3;
            uint64_t v23 = *((void *)v3 + 2);
            long long v20 = v22;
            uint64_t v21 = v23;
            v13(v12, 4294954385, 2, 0, 0, &v22, &v20);
          }
          else
          {
            uint64_t v14 = *(void *)(v11 + 24);
            if (v14)
            {
              CFDataRef v15 = *(void (**)(uint64_t, uint64_t, uint64_t, void, long long *, long long *))(v14 + 16);
              long long v22 = *v3;
              uint64_t v23 = *((void *)v3 + 2);
              long long v20 = v22;
              uint64_t v21 = v23;
              v15(v14, 4294954385, 2, 0, &v22, &v20);
            }
          }
        }
      }
      uint64_t v16 = *(void *)(*(void *)(a1[5] + 8) + 24);
      uint64_t v17 = *(const void **)(v16 + 40);
      if (v17)
      {
        CFRelease(v17);
        uint64_t v16 = *(void *)(*(void *)(a1[5] + 8) + 24);
      }
      _Block_release(*(const void **)(v16 + 24));
      _Block_release(*(const void **)(*(void *)(*(void *)(a1[5] + 8) + 24) + 32));
      free(*(void **)(*(void *)(a1[5] + 8) + 24));
      if (!FigAtomicDecrement32()) {
        FigSemaphoreSignal();
      }
      uint64_t v2 = *(void *)(*(void *)(a1[4] + 8) + 24);
    }
    while (v2);
  }
  uint64_t v18 = a1[6];
  *(_DWORD *)(v18 + 144) = 0;
  *(_DWORD *)(v18 + 152) = 0;
  *(unsigned char *)(v18 + 148) = 0;
  *(_DWORD *)(v18 + 168) = 0;
  FigSemaphoreSignal();
  FigSemaphoreSignal();
  uint64_t v19 = (const void *)a1[6];
  if (v19) {
    CFRelease(v19);
  }
}

uint64_t VTLoadVideoEncodersPreferringInternalBundles()
{
  return vtLoadVideoEncodersGuts(1);
}

uint64_t vtLoadVideoEncodersGuts(int a1)
{
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/HEVCH9.videoencoder", "HEVCH9EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/H9.videoencoder", "H9EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoCodecs/VCPHEVC.videocodec", "VCPHEVCRegisterEncoder");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/H264H9.videoencoder", "H264H9EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/H264H7.videoencoder", "H264H7EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/H264H4.videoencoder", "H264H4EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/H264H2.videoencoder", "H264H2EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/JPEGH1.videoencoder", "JPEGH1EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/VCH263.videoencoder", "VCH263EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/Slim.videoencoder", "SLIMEncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/ExampleIPB.videoencoder", "ExampleIPBEncoderRegister");
  if (FigServer_IsServerProcess()) {
    vtTryToLoadVideoDecoder("/System/Library/PrivateFrameworks/VideoProcessing.framework/VideoProcessing", "VPModuleInitialize");
  }
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/AppleProResSWEncoder.videoencoder", "ProResSWEncoderRegister");
  if (!a1
    || !vtTryToLoadVideoDecoder("/AppleInternal/Library/VideoCodecs/AppleProResHWEncoder-Dev.videoencoder", "ProResEncoderRegister"))
  {
    vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/AppleProResHWEncoder.videoencoder", "ProResEncoderRegister");
  }

  return vtTryToLoadVideoDecoder("/AppleInternal/Library/VideoCodecs/yzip.videocodec", "yzipRegisterEncoder");
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    unint64_t v151 = 2 * v9 - 2 * v8;
    uint64_t v12 = *((void *)result + 19);
    uint64_t v13 = (uint64_t *)*((void *)result + 17);
    uint64_t v14 = **((void **)result + 8);
    uint64_t v15 = *v13;
    uint64_t v16 = v13[1];
    uint64_t v17 = v13[2];
    float v18 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    LOWORD(a5) = *(_WORD *)(v12 + 144);
    float v19 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v12 + 146);
    float v20 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v12 + 148);
    float v21 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v12 + 150);
    *(float *)&unsigned int v22 = (float)LODWORD(a6);
    float v173 = v20;
    float v174 = *(float *)&v22;
    LOWORD(v22) = *(_WORD *)(v12 + 152);
    float v171 = *(float *)(v12 + 36);
    float v172 = (float)v22;
    float v169 = *(float *)(v12 + 44);
    float v170 = *(float *)(v12 + 40);
    float v167 = *(float *)(v12 + 52) * 0.25;
    float v168 = *(float *)(v12 + 48) * 0.25;
    float v165 = *(float *)(v12 + 60) * 0.25;
    float v166 = *(float *)(v12 + 56) * 0.25;
    float v163 = *(float *)(v12 + 72);
    float v164 = *(float *)(v12 + 64) * 0.25;
    float v161 = *(float *)(v12 + 76);
    float v162 = *(float *)(v12 + 68) * 0.25;
    float v159 = *(float *)(v12 + 84);
    float v160 = *(float *)(v12 + 80);
    float v157 = *(float *)(v12 + 92);
    float v158 = *(float *)(v12 + 88);
    float v155 = *(float *)(v12 + 100);
    float v156 = *(float *)(v12 + 96);
    float v23 = *(float *)(v12 + 108);
    float v154 = *(float *)(v12 + 104);
    uint64_t v24 = v12 + 164;
    uint64_t v25 = v12 + 16548;
    uint64_t v26 = v12 + 32932;
    float v28 = *(float *)(v12 + 112);
    float v27 = *(float *)(v12 + 116);
    float v29 = *(float *)(v12 + 120);
    uint64_t v30 = *((void *)result + 14);
    unint64_t v31 = *((void *)result + 13) * a2 / v7;
    uint64_t v32 = (void *)*((void *)result + 16);
    uint64_t v33 = *((void *)result + 15) + 2 * v31;
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7)
                               + v14 * (*(void *)(result + 44) + 2 * v8)
                               + 8 * *(void *)(result + 36));
    uint64_t v34 = v32[1];
    uint64_t v35 = (unsigned char *)(*v32 + v33 * v15 + v30);
    uint64_t v36 = v32[2];
    uint64_t v37 = (unsigned char *)(v36 + v33 * v17 + v30);
    if (!v36) {
      uint64_t v37 = 0;
    }
    if (v33 >= 0) {
      uint64_t v38 = v33;
    }
    else {
      uint64_t v38 = v33 + 1;
    }
    uint64_t v39 = v34 + (v38 >> 1) * v16 + v30;
    float v152 = v28;
    float v153 = v23;
    do
    {
      uint64_t v40 = &v37[v17];
      xpc_object_t v41 = &v35[v15];
      uint64_t v42 = &result[v14];
      if (v11)
      {
        unint64_t v43 = 0;
        uint64_t v44 = &v37[v17];
        CFTypeID v45 = &v35[v15];
        uint64_t v46 = (unsigned __int16 *)&result[v14];
        do
        {
          _H3 = *(_WORD *)(v24
                         + 2
                         * llroundf(fminf(fmaxf(v18 * (float)(bswap32(*((unsigned __int16 *)result + 1)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v24
                         + 2
                         * llroundf(fminf(fmaxf(v18 * (float)(bswap32(*((unsigned __int16 *)result + 2)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          _H3 = *(_WORD *)(v24
                         + 2
                         * llroundf(fminf(fmaxf(v18 * (float)(bswap32(*((unsigned __int16 *)result + 3)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          float v57 = fmaxf(_S14, fmaxf(_S15, _S18));
          float v58 = (float)((float)((float)(v28 * _S15) + (float)(v23 * _S14)) + (float)(v27 * _S18)) + (float)(v29 * v57);
          float v59 = 8191.0;
          if (v58 <= 8191.0)
          {
            float v59 = (float)((float)((float)(v28 * _S15) + (float)(v23 * _S14)) + (float)(v27 * _S18)) + (float)(v29 * v57);
            if (v58 < 0.0) {
              float v59 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v24
                         + 2
                         * llroundf(fminf(fmaxf(v18 * (float)(bswap32(*((unsigned __int16 *)result + 5)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v24
                         + 2
                         * llroundf(fminf(fmaxf(v18 * (float)(bswap32(*((unsigned __int16 *)result + 6)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v24
                         + 2
                         * llroundf(fminf(fmaxf(v18 * (float)(bswap32(*((unsigned __int16 *)result + 7)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          float v66 = fmaxf(_S20, fmaxf(_S21, _S22));
          float v67 = (float)((float)((float)(v28 * _S21) + (float)(v23 * _S20)) + (float)(v27 * _S22)) + (float)(v29 * v66);
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = (float)((float)((float)(v28 * _S21) + (float)(v23 * _S20)) + (float)(v27 * _S22)) + (float)(v29 * v66);
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v46[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S5, H3 }
          _H3 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v46[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H6 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v46[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S7, H6 }
          float v75 = (float)((float)((float)(v28 * _S3) + (float)(v23 * _S5)) + (float)(v27 * _S7))
              + (float)(v29 * fmaxf(_S5, fmaxf(_S3, _S7)));
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          _H6 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v46[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S17, H6 }
          _H6 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v46[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H23 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v46[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          float v83 = (float)((float)((float)(v28 * _S6) + (float)(v23 * _S17)) + (float)(v27 * _S23))
              + (float)(v29 * fmaxf(_S17, fmaxf(_S6, _S23)));
          float v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          if (v37)
          {
            char v85 = llroundf((float)(bswap32(*(unsigned __int16 *)result) >> 16) * 0.0038911);
            char v86 = llroundf((float)(bswap32(*((unsigned __int16 *)result + 4)) >> 16) * 0.0038911);
            char v87 = llroundf((float)(bswap32(*v46) >> 16) * 0.0038911);
            char v88 = llroundf((float)(bswap32(v46[4]) >> 16) * 0.0038911);
          }
          else
          {
            char v87 = 0;
            char v85 = 0;
            char v86 = 0;
            char v88 = 0;
          }
          _H19 = *(_WORD *)(v25 + 2 * llroundf(v59));
          __asm { FCVT            S19, H19 }
          float v91 = _S14 * _S19;
          float v92 = _S15 * _S19;
          float v93 = _S18 * _S19;
          LOWORD(_S19) = *(_WORD *)(v25 + 2 * llroundf(v68));
          __asm { FCVT            S19, H19 }
          float v95 = _S20 * _S19;
          float v96 = _S21 * _S19;
          float v97 = _S22 * _S19;
          _H16 = *(_WORD *)(v25 + 2 * llroundf(v76));
          __asm { FCVT            S16, H16 }
          _S5 = _S5 * _S16;
          _S3 = _S3 * _S16;
          _S7 = _S7 * _S16;
          LOWORD(_S16) = *(_WORD *)(v25 + 2 * llroundf(v84));
          __asm { FCVT            S16, H16 }
          float v104 = _S17 * _S16;
          float v105 = _S6 * _S16;
          _S16 = _S23 * _S16;
          _S22 = (float)((float)(v161 * v92) + (float)(v91 * v163)) + (float)(v93 * v160);
          _S23 = (float)((float)(v158 * v92) + (float)(v91 * v159)) + (float)(v93 * v157);
          _S18 = (float)((float)(v155 * v92) + (float)(v91 * v156)) + (float)(v93 * v154);
          float v110 = (float)((float)(v161 * v96) + (float)(v95 * v163)) + (float)(v97 * v160);
          float v111 = (float)((float)(v158 * v96) + (float)(v95 * v159)) + (float)(v97 * v157);
          _S19 = (float)((float)(v155 * v96) + (float)(v95 * v156)) + (float)(v97 * v154);
          float v113 = (float)((float)(v161 * _S3) + (float)(_S5 * v163)) + (float)(_S7 * v160);
          _S21 = (float)((float)(v158 * _S3) + (float)(_S5 * v159)) + (float)(_S7 * v157);
          float v115 = (float)((float)(v155 * _S3) + (float)(_S5 * v156)) + (float)(_S7 * v154);
          float v116 = (float)((float)(v161 * v105) + (float)(v104 * v163)) + (float)(_S16 * v160);
          float v117 = (float)((float)(v158 * v105) + (float)(v104 * v159)) + (float)(_S16 * v157);
          float v118 = (float)((float)(v155 * v105) + (float)(v104 * v156)) + (float)(_S16 * v154);
          LOWORD(_S3) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm { FCVT            S6, H3 }
          LOWORD(_S3) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S7) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S16) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          LOWORD(_S18) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H16
            FCVT            S16, H18
          }
          LOWORD(_S18) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S20, H18 }
          LOWORD(_S18) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S19) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S21) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          LOWORD(_S22) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          LOWORD(_S23) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S23, H23
          }
          float v131 = (float)((float)((float)(v170 * _S3) + (float)(v171 * _S6)) + (float)(v169 * _S5)) + v19;
          if (v131 < v19) {
            float v132 = v19;
          }
          else {
            float v132 = (float)((float)((float)(v170 * _S3) + (float)(v171 * _S6)) + (float)(v169 * _S5)) + v19;
          }
          BOOL v133 = v131 <= v21;
          float v134 = (float)((float)((float)(v170 * _S17) + (float)(v171 * _S7)) + (float)(v169 * _S16)) + v19;
          if (!v133) {
            float v132 = v21;
          }
          char v135 = llroundf(v132);
          if (v134 < v19) {
            float v136 = v19;
          }
          else {
            float v136 = (float)((float)((float)(v170 * _S17) + (float)(v171 * _S7)) + (float)(v169 * _S16)) + v19;
          }
          BOOL v133 = v134 <= v21;
          float v137 = (float)((float)((float)(v170 * _S18) + (float)(v171 * _S20)) + (float)(v169 * _S19)) + v19;
          if (!v133) {
            float v136 = v21;
          }
          char v138 = llroundf(v136);
          if (v137 < v19) {
            float v139 = v19;
          }
          else {
            float v139 = (float)((float)((float)(v170 * _S18) + (float)(v171 * _S20)) + (float)(v169 * _S19)) + v19;
          }
          BOOL v133 = v137 <= v21;
          float v140 = (float)((float)((float)(v170 * _S22) + (float)(v171 * _S21)) + (float)(v169 * _S23)) + v19;
          if (!v133) {
            float v139 = v21;
          }
          char v141 = llroundf(v139);
          if (v140 < v19) {
            float v142 = v19;
          }
          else {
            float v142 = (float)((float)((float)(v170 * _S22) + (float)(v171 * _S21)) + (float)(v169 * _S23)) + v19;
          }
          if (v140 <= v21) {
            float v143 = v142;
          }
          else {
            float v143 = v21;
          }
          float v144 = (float)((float)(_S6 + _S7) + _S20) + _S21;
          float v145 = (float)((float)(_S3 + _S17) + _S18) + _S22;
          *uint64_t v35 = v135;
          v35[1] = v138;
          *CFTypeID v45 = v141;
          v45[1] = llroundf(v143);
          float v146 = (float)((float)(_S5 + _S16) + _S19) + _S23;
          float v147 = (float)((float)(v173 + (float)(v144 * v168)) + (float)(v145 * v167)) + (float)(v146 * v166);
          float v148 = v172;
          if (v147 <= v172)
          {
            float v148 = (float)((float)(v173 + (float)(v144 * v168)) + (float)(v145 * v167)) + (float)(v146 * v166);
            if (v147 < v174) {
              float v148 = v174;
            }
          }
          float v149 = (float)((float)(v173 + (float)(v144 * v165)) + (float)(v145 * v164)) + (float)(v146 * v162);
          *(unsigned char *)(v39 + v43) = llroundf(v148);
          float v150 = v172;
          float v28 = v152;
          float v23 = v153;
          if (v149 <= v172)
          {
            float v150 = v149;
            if (v149 < v174) {
              float v150 = v174;
            }
          }
          *(unsigned char *)(v39 + v43 + 1) = llroundf(v150);
          if (v37)
          {
            *uint64_t v37 = v85;
            v37[1] = v86;
            v37 += 2;
            *uint64_t v44 = v87;
            v44[1] = v88;
            v44 += 2;
          }
          result += 16;
          v46 += 8;
          v35 += 2;
          v45 += 2;
          v43 += 2;
        }
        while (v11 > v43);
      }
      uint64_t result = &v42[v14];
      uint64_t v35 = &v41[v15];
      v39 += v16;
      uint64_t v37 = &v40[v17];
      v10 += 2;
    }
    while (v151 > v10);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = 2 * *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    uint64_t v14 = *(void *)(result + 44) + 2 * v10;
    unint64_t v15 = 2 * v11 - 2 * v10;
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = (uint64_t *)*((void *)result + 17);
    uint64_t v18 = **((void **)result + 8);
    uint64_t v19 = *v17;
    uint64_t v20 = v17[1];
    uint64_t v21 = v17[2];
    float v22 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    float v23 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 146);
    *(float *)&unsigned int v24 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 148);
    float v25 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 150);
    float v137 = (float)LODWORD(a6);
    float v138 = (float)LODWORD(a8);
    LOWORD(v24) = *(_WORD *)(v16 + 152);
    float v135 = *(float *)(v16 + 36);
    float v136 = (float)v24;
    float v133 = *(float *)(v16 + 44);
    float v134 = *(float *)(v16 + 40);
    float v131 = *(float *)(v16 + 52) * 0.25;
    float v132 = *(float *)(v16 + 48) * 0.25;
    float v129 = *(float *)(v16 + 60) * 0.25;
    float v130 = *(float *)(v16 + 56) * 0.25;
    float v127 = *(float *)(v16 + 72);
    float v128 = *(float *)(v16 + 64) * 0.25;
    float v26 = *(float *)(v16 + 80);
    float v125 = *(float *)(v16 + 76);
    float v126 = *(float *)(v16 + 68) * 0.25;
    float v27 = *(float *)(v16 + 84);
    float v28 = *(float *)(v16 + 88);
    float v29 = *(float *)(v16 + 92);
    float v30 = *(float *)(v16 + 96);
    float v32 = *(float *)(v16 + 100);
    float v31 = *(float *)(v16 + 104);
    uint64_t v33 = v16 + 164;
    uint64_t v34 = v16 + 16548;
    uint64_t v35 = *((void *)result + 14);
    unint64_t v36 = *((void *)result + 13) * a2 / v9;
    uint64_t v37 = (void *)*((void *)result + 16);
    uint64_t v38 = *((void *)result + 15) + 2 * v36;
    uint64_t v39 = (unsigned __int16 *)(**((void **)result + 7) + v18 * v14 + 8 * *(void *)(result + 36));
    uint64_t v40 = v37[1];
    uint64_t result = (unsigned __int8 *)(*v37 + v38 * v19 + v35);
    uint64_t v41 = v37[2];
    uint64_t v42 = (unsigned char *)(v41 + v38 * v21 + v35);
    if (!v41) {
      uint64_t v42 = 0;
    }
    if (v38 >= 0) {
      uint64_t v43 = v38;
    }
    else {
      uint64_t v43 = v38 + 1;
    }
    uint64_t v44 = v40 + (v43 >> 1) * v20 + v35;
    do
    {
      CFTypeID v45 = &v42[v21];
      uint64_t v46 = &result[v19];
      long long v47 = (char *)v39 + v18;
      if (v13)
      {
        unint64_t v48 = 0;
        long long v49 = &v42[v21];
        uint64_t v50 = &result[v19];
        uint64_t v51 = (unsigned __int16 *)((char *)v39 + v18);
        do
        {
          if (v42)
          {
            char v52 = llroundf((float)(bswap32(*v39) >> 16) * 0.0038911);
            char v53 = llroundf((float)(bswap32(v39[4]) >> 16) * 0.0038911);
            char v54 = llroundf((float)(bswap32(*v51) >> 16) * 0.0038911);
            char v55 = llroundf((float)(bswap32(v51[4]) >> 16) * 0.0038911);
          }
          else
          {
            char v54 = 0;
            char v52 = 0;
            char v53 = 0;
            char v55 = 0;
          }
          _H18 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v39[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v39[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H10 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v39[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v39[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v39[6]) >> 16), 0.0), 8191.0)));
          _H13 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v39[7]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H12
            FCVT            S13, H13
          }
          _H14 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v51[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v51[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H15 }
          _H20 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v51[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v51[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v51[6]) >> 16), 0.0), 8191.0)));
          _H24 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v51[7]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S24, H24
          }
          _S5 = (float)((float)(v125 * _S19) + (float)(_S18 * v127)) + (float)(_S10 * v26);
          _S3 = (float)((float)(v28 * _S19) + (float)(_S18 * v27)) + (float)(_S10 * v29);
          float v86 = (float)((float)(v32 * _S19) + (float)(_S18 * v30)) + (float)(_S10 * v31);
          float v87 = (float)((float)(v125 * _S12) + (float)(_S11 * v127)) + (float)(_S13 * v26);
          _S7 = (float)((float)(v28 * _S12) + (float)(_S11 * v27)) + (float)(_S13 * v29);
          float v89 = (float)((float)(v32 * _S12) + (float)(_S11 * v30)) + (float)(_S13 * v31);
          float v90 = (float)((float)(v125 * _S15) + (float)(_S14 * v127)) + (float)(_S20 * v26);
          _S6 = (float)((float)(v28 * _S15) + (float)(_S14 * v27)) + (float)(_S20 * v29);
          float v92 = (float)((float)(v32 * _S15) + (float)(_S14 * v30)) + (float)(_S20 * v31);
          LOWORD(_S5) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S12, H5 }
          LOWORD(_S3) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S10, H3 }
          LOWORD(_S3) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S11, H3 }
          LOWORD(_S3) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S13, H3 }
          LOWORD(_S3) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H3
            FCVT            S14, H5
          }
          LOWORD(_S3) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          LOWORD(_S5) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          LOWORD(_S5) = *(_WORD *)(v34
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v125 * _S22) + (float)(_S21 * v127)) + (float)(_S24 * v26), 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v34
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v28 * _S22) + (float)(_S21 * v27)) + (float)(_S24 * v29), 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v34
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v32 * _S22) + (float)(_S21 * v30)) + (float)(_S24 * v31), 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S7, H7
          }
          float v105 = (float)((float)((float)(v134 * _S10) + (float)(v135 * _S12)) + (float)(v133 * _S11)) + v23;
          if (v105 < v23) {
            float v106 = v23;
          }
          else {
            float v106 = (float)((float)((float)(v134 * _S10) + (float)(v135 * _S12)) + (float)(v133 * _S11)) + v23;
          }
          BOOL v107 = v105 <= v25;
          float v108 = (float)((float)((float)(v134 * _S15) + (float)(v135 * _S13)) + (float)(v133 * _S14)) + v23;
          if (!v107) {
            float v106 = v25;
          }
          unsigned __int8 v109 = llroundf(v106);
          if (v108 < v23) {
            float v110 = v23;
          }
          else {
            float v110 = (float)((float)((float)(v134 * _S15) + (float)(v135 * _S13)) + (float)(v133 * _S14)) + v23;
          }
          BOOL v107 = v108 <= v25;
          float v111 = (float)((float)((float)(v134 * _S18) + (float)(v135 * _S3)) + (float)(v133 * _S19)) + v23;
          if (!v107) {
            float v110 = v25;
          }
          unsigned __int8 v112 = llroundf(v110);
          if (v111 < v23) {
            float v113 = v23;
          }
          else {
            float v113 = (float)((float)((float)(v134 * _S18) + (float)(v135 * _S3)) + (float)(v133 * _S19)) + v23;
          }
          BOOL v107 = v111 <= v25;
          float v114 = (float)((float)((float)(v134 * _S6) + (float)(v135 * _S5)) + (float)(v133 * _S7)) + v23;
          if (!v107) {
            float v113 = v25;
          }
          unsigned __int8 v115 = llroundf(v113);
          if (v114 < v23) {
            float v116 = v23;
          }
          else {
            float v116 = (float)((float)((float)(v134 * _S6) + (float)(v135 * _S5)) + (float)(v133 * _S7)) + v23;
          }
          if (v114 <= v25) {
            float v117 = v116;
          }
          else {
            float v117 = v25;
          }
          float v118 = (float)((float)(_S12 + _S13) + _S3) + _S5;
          float v119 = (float)((float)(_S10 + _S15) + _S18) + _S6;
          *uint64_t result = v109;
          result[1] = v112;
          *uint64_t v50 = v115;
          v50[1] = llroundf(v117);
          float v120 = (float)((float)(_S11 + _S14) + _S19) + _S7;
          float v121 = (float)((float)(v137 + (float)(v118 * v132)) + (float)(v119 * v131)) + (float)(v120 * v130);
          float v122 = v136;
          if (v121 <= v136)
          {
            float v122 = (float)((float)(v137 + (float)(v118 * v132)) + (float)(v119 * v131)) + (float)(v120 * v130);
            if (v121 < v138) {
              float v122 = v138;
            }
          }
          float v123 = (float)((float)(v137 + (float)(v118 * v129)) + (float)(v119 * v128)) + (float)(v120 * v126);
          *(unsigned char *)(v44 + v48) = llroundf(v122);
          float v124 = v136;
          if (v123 <= v136)
          {
            float v124 = v123;
            if (v123 < v138) {
              float v124 = v138;
            }
          }
          *(unsigned char *)(v44 + v48 + 1) = llroundf(v124);
          if (v42)
          {
            *uint64_t v42 = v52;
            v42[1] = v53;
            v42 += 2;
            *long long v49 = v54;
            v49[1] = v55;
            v49 += 2;
          }
          v39 += 8;
          v51 += 8;
          result += 2;
          v50 += 2;
          v48 += 2;
        }
        while (v13 > v48);
      }
      uint64_t v39 = (unsigned __int16 *)&v47[v18];
      uint64_t result = &v46[v19];
      v44 += v20;
      uint64_t v42 = &v45[v21];
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = 2 * *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    uint64_t v14 = *(void *)(result + 44) + 2 * v10;
    unint64_t v15 = 2 * v11 - 2 * v10;
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = (uint64_t *)*((void *)result + 17);
    uint64_t v18 = **((void **)result + 8);
    uint64_t v19 = *v17;
    uint64_t v20 = v17[1];
    uint64_t v21 = v17[2];
    *(float *)&unsigned int v22 = (float)*(unsigned int *)(v16 + 136);
    float v23 = *(float *)&v22 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(v22) = *(_WORD *)(v16 + 144);
    float v24 = (float)v22;
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v28 = (float)LODWORD(a8);
    float v29 = *(float *)(v16 + 36);
    float v30 = *(float *)(v16 + 40);
    float v31 = *(float *)(v16 + 44);
    float v32 = *(float *)(v16 + 48) * 0.25;
    float v33 = *(float *)(v16 + 52) * 0.25;
    float v34 = *(float *)(v16 + 56) * 0.25;
    float v35 = *(float *)(v16 + 60) * 0.25;
    float v36 = *(float *)(v16 + 64) * 0.25;
    float v37 = *(float *)(v16 + 68) * 0.25;
    uint64_t v38 = *((void *)result + 14);
    uint64_t v39 = (void *)*((void *)result + 16);
    uint64_t v40 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v9);
    uint64_t v41 = (unsigned __int16 *)(**((void **)result + 7) + v18 * v14 + 8 * *(void *)(result + 36));
    uint64_t v42 = v39[1];
    uint64_t v43 = (unsigned char *)(*v39 + v40 * v19 + v38);
    uint64_t v44 = v39[2];
    CFTypeID v45 = (unsigned char *)(v44 + v40 * v21 + v38);
    if (!v44) {
      CFTypeID v45 = 0;
    }
    if (v40 >= 0) {
      uint64_t v46 = v40;
    }
    else {
      uint64_t v46 = v40 + 1;
    }
    uint64_t v47 = v42 + (v46 >> 1) * v20 + v38;
    uint64_t result = (unsigned __int8 *)&unk_193E80000;
    do
    {
      unint64_t v48 = &v45[v21];
      long long v49 = &v43[v19];
      uint64_t v50 = (char *)v41 + v18;
      if (v13)
      {
        unint64_t v51 = 0;
        char v52 = &v45[v21];
        char v53 = &v43[v19];
        char v54 = (unsigned __int16 *)((char *)v41 + v18);
        do
        {
          if (v45)
          {
            char v55 = llroundf((float)(bswap32(*v41) >> 16) * 0.0038911);
            char v56 = llroundf((float)(bswap32(v41[4]) >> 16) * 0.0038911);
            char v57 = llroundf((float)(bswap32(*v54) >> 16) * 0.0038911);
            char v58 = llroundf((float)(bswap32(v54[4]) >> 16) * 0.0038911);
          }
          else
          {
            char v57 = 0;
            char v55 = 0;
            char v56 = 0;
            char v58 = 0;
          }
          float v59 = v23 * (float)(bswap32(v41[1]) >> 16);
          float v60 = v23 * (float)(bswap32(v41[2]) >> 16);
          float v61 = v23 * (float)(bswap32(v41[3]) >> 16);
          float v62 = v23 * (float)(bswap32(v41[5]) >> 16);
          float v63 = v23 * (float)(bswap32(v41[6]) >> 16);
          float v64 = v23 * (float)(bswap32(v41[7]) >> 16);
          float v65 = v23 * (float)(bswap32(v54[1]) >> 16);
          float v66 = v23 * (float)(bswap32(v54[2]) >> 16);
          float v67 = v23 * (float)(bswap32(v54[3]) >> 16);
          float v68 = v23 * (float)(bswap32(v54[5]) >> 16);
          float v69 = v23 * (float)(bswap32(v54[6]) >> 16);
          float v70 = v23 * (float)(bswap32(v54[7]) >> 16);
          float v71 = (float)((float)((float)(v30 * v60) + (float)(v29 * v59)) + (float)(v31 * v61)) + v24;
          float v72 = (float)((float)((float)(v30 * v63) + (float)(v29 * v62)) + (float)(v31 * v64)) + v24;
          float v73 = (float)((float)((float)(v30 * v66) + (float)(v29 * v65)) + (float)(v31 * v67)) + v24;
          float v74 = (float)((float)((float)(v30 * v69) + (float)(v29 * v68)) + (float)(v31 * v70)) + v24;
          if (v71 < v24) {
            float v75 = v24;
          }
          else {
            float v75 = (float)((float)((float)(v30 * v60) + (float)(v29 * v59)) + (float)(v31 * v61)) + v24;
          }
          if (v71 <= v26) {
            float v76 = v75;
          }
          else {
            float v76 = v26;
          }
          char v77 = llroundf(v76);
          if (v72 < v24) {
            float v78 = v24;
          }
          else {
            float v78 = (float)((float)((float)(v30 * v63) + (float)(v29 * v62)) + (float)(v31 * v64)) + v24;
          }
          if (v72 > v26) {
            float v78 = v26;
          }
          *uint64_t v43 = v77;
          v43[1] = llroundf(v78);
          if (v73 < v24) {
            float v79 = v24;
          }
          else {
            float v79 = (float)((float)((float)(v30 * v66) + (float)(v29 * v65)) + (float)(v31 * v67)) + v24;
          }
          if (v73 > v26) {
            float v79 = v26;
          }
          unsigned char *v53 = llroundf(v79);
          if (v74 < v24) {
            float v80 = v24;
          }
          else {
            float v80 = (float)((float)((float)(v30 * v69) + (float)(v29 * v68)) + (float)(v31 * v70)) + v24;
          }
          if (v74 > v26) {
            float v80 = v26;
          }
          v53[1] = llroundf(v80);
          float v81 = (float)((float)(v59 + v62) + v65) + v68;
          float v82 = (float)((float)(v60 + v63) + v66) + v69;
          float v83 = (float)((float)(v61 + v64) + v67) + v70;
          float v84 = (float)((float)(v25 + (float)(v81 * v32)) + (float)(v82 * v33)) + (float)(v83 * v34);
          float v85 = v28;
          if (v84 <= v28)
          {
            float v85 = (float)((float)(v25 + (float)(v81 * v32)) + (float)(v82 * v33)) + (float)(v83 * v34);
            if (v84 < v27) {
              float v85 = v27;
            }
          }
          float v86 = (float)((float)(v25 + (float)(v81 * v35)) + (float)(v82 * v36)) + (float)(v83 * v37);
          *(unsigned char *)(v47 + v51) = llroundf(v85);
          float v87 = v28;
          if (v86 <= v28)
          {
            float v87 = v86;
            if (v86 < v27) {
              float v87 = v27;
            }
          }
          *(unsigned char *)(v47 + v51 + 1) = llroundf(v87);
          if (v45)
          {
            *CFTypeID v45 = v55;
            v45[1] = v56;
            v45 += 2;
            *char v52 = v57;
            v52[1] = v58;
            v52 += 2;
          }
          v41 += 8;
          v54 += 8;
          v43 += 2;
          v53 += 2;
          v51 += 2;
        }
        while (v13 > v51);
      }
      uint64_t v41 = (unsigned __int16 *)&v50[v18];
      uint64_t v43 = &v49[v19];
      v47 += v20;
      CFTypeID v45 = &v48[v21];
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44) + 2 * v8;
    unint64_t v13 = 2 * v9 - 2 * v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 17);
    uint64_t v16 = **((void **)result + 8);
    uint64_t v17 = *v15;
    uint64_t v18 = v15[1];
    float v19 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    LOWORD(a5) = *(_WORD *)(v14 + 144);
    float v20 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 146);
    float v21 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 148);
    float v22 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 150);
    float v23 = (float)LODWORD(a6);
    float v181 = v23;
    LOWORD(v23) = *(_WORD *)(v14 + 152);
    float v177 = *(float *)(v14 + 40);
    float v178 = *(float *)(v14 + 36);
    float v175 = *(float *)(v14 + 48) * 0.25;
    float v176 = *(float *)(v14 + 44);
    float v173 = *(float *)(v14 + 56) * 0.25;
    float v174 = *(float *)(v14 + 52) * 0.25;
    float v171 = *(float *)(v14 + 64) * 0.25;
    float v172 = *(float *)(v14 + 60) * 0.25;
    float v169 = *(float *)(v14 + 68) * 0.25;
    float v170 = *(float *)(v14 + 72);
    float v167 = *(float *)(v14 + 80);
    float v168 = *(float *)(v14 + 76);
    float v165 = *(float *)(v14 + 88);
    float v166 = *(float *)(v14 + 84);
    float v163 = *(float *)(v14 + 96);
    float v164 = *(float *)(v14 + 92);
    float v24 = *(float *)(v14 + 108);
    float v161 = *(float *)(v14 + 104);
    float v162 = *(float *)(v14 + 100);
    uint64_t v25 = v14 + 164;
    uint64_t v26 = v14 + 16548;
    uint64_t v27 = v14 + 32932;
    float v28 = *(float *)(v14 + 112);
    float v29 = *(float *)(v14 + 116);
    float v30 = *(float *)(v14 + 120);
    uint64_t v31 = *((void *)result + 14);
    unint64_t v32 = *((void *)result + 13) * a2 / v7;
    uint64_t v33 = (uint64_t *)*((void *)result + 16);
    uint64_t v34 = *((void *)result + 15) + 2 * v32;
    uint64_t v35 = (unsigned __int16 *)(**((void **)result + 7) + v16 * v12 + 8 * *(void *)(result + 36));
    uint64_t v36 = *v33;
    uint64_t v37 = v33[1];
    uint64_t result = (unsigned __int8 *)(v36 + v34 * v17 + 2 * v31);
    unsigned int v38 = *(unsigned __int8 *)(v14 + 132);
    if (v38 >= 0x11) {
      char v39 = 0;
    }
    else {
      char v39 = 16 - v38;
    }
    if (v34 >= 0) {
      uint64_t v40 = v34;
    }
    else {
      uint64_t v40 = v34 + 1;
    }
    uint64_t v41 = v37 + (v40 >> 1) * v18 + 2 * v31;
    float v179 = (float)LODWORD(v23);
    float v180 = v21;
    float v159 = v24;
    float v160 = v28;
    float v158 = v29;
    do
    {
      uint64_t v42 = &result[v17];
      uint64_t v43 = (char *)v35 + v16;
      if (v11)
      {
        unint64_t v44 = 0;
        CFTypeID v45 = (unsigned __int16 *)((char *)v35 + v16);
        uint64_t v46 = &result[v17];
        do
        {
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v35[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v35[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v35[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          float v57 = fmaxf(_S14, fmaxf(_S15, _S18));
          float v58 = (float)((float)((float)(v28 * _S15) + (float)(v24 * _S14)) + (float)(v29 * _S18)) + (float)(v30 * v57);
          float v59 = 8191.0;
          if (v58 <= 8191.0)
          {
            float v59 = (float)((float)((float)(v28 * _S15) + (float)(v24 * _S14)) + (float)(v29 * _S18)) + (float)(v30 * v57);
            if (v58 < 0.0) {
              float v59 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v35[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v35[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v35[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          float v66 = fmaxf(_S20, fmaxf(_S21, _S22));
          float v67 = (float)((float)((float)(v28 * _S21) + (float)(v24 * _S20)) + (float)(v29 * _S22)) + (float)(v30 * v66);
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = (float)((float)((float)(v28 * _S21) + (float)(v24 * _S20)) + (float)(v29 * _S22)) + (float)(v30 * v66);
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v45[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S5, H3 }
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v45[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H6 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v45[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S7, H6 }
          float v75 = fmaxf(_S5, fmaxf(_S3, _S7));
          float v76 = (float)((float)((float)(v28 * _S3) + (float)(v24 * _S5)) + (float)(v29 * _S7)) + (float)(v30 * v75);
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = (float)((float)((float)(v28 * _S3) + (float)(v24 * _S5)) + (float)(v29 * _S7)) + (float)(v30 * v75);
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          _H6 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v45[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S16, H6 }
          _H6 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v45[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S23, H6 }
          _H6 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v45[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S25, H6 }
          _H6 = *(_WORD *)(v26 + 2 * llroundf(v59));
          __asm { FCVT            S19, H6 }
          float v86 = _S14 * _S19;
          float v87 = _S15 * _S19;
          float v88 = _S18 * _S19;
          _H18 = *(_WORD *)(v26 + 2 * llroundf(v68));
          __asm { FCVT            S18, H18 }
          float v91 = _S20 * _S18;
          float v92 = _S21 * _S18;
          float v93 = _S22 * _S18;
          _H17 = *(_WORD *)(v26 + 2 * llroundf(v77));
          __asm { FCVT            S17, H17 }
          float v96 = _S5 * _S17;
          float v97 = _S3 * _S17;
          float v98 = _S7 * _S17;
          float v99 = (float)((float)((float)(v28 * _S23) + (float)(v24 * _S16)) + (float)(v29 * _S25))
              + (float)(v30 * fmaxf(_S16, fmaxf(_S23, _S25)));
          float v100 = 8191.0;
          if (v99 <= 8191.0)
          {
            float v100 = v99;
            if (v99 < 0.0) {
              float v100 = 0.0;
            }
          }
          _H7 = *(_WORD *)(v26 + 2 * llroundf(v100));
          __asm { FCVT            S7, H7 }
          _S16 = _S16 * _S7;
          float v104 = _S23 * _S7;
          float v105 = _S25 * _S7;
          float v106 = (float)((float)(v168 * v87) + (float)(v86 * v170)) + (float)(v88 * v167);
          float v107 = (float)((float)(v165 * v87) + (float)(v86 * v166)) + (float)(v88 * v164);
          _S6 = (float)((float)(v162 * v87) + (float)(v86 * v163)) + (float)(v88 * v161);
          float v109 = (float)((float)(v168 * v92) + (float)(v91 * v170)) + (float)(v93 * v167);
          float v110 = (float)((float)(v165 * v92) + (float)(v91 * v166)) + (float)(v93 * v164);
          float v111 = (float)((float)(v162 * v92) + (float)(v91 * v163)) + (float)(v93 * v161);
          float v112 = (float)((float)(v168 * v97) + (float)(v96 * v170)) + (float)(v98 * v167);
          float v113 = (float)((float)(v165 * v97) + (float)(v96 * v166)) + (float)(v98 * v164);
          _S3 = (float)((float)(v162 * v97) + (float)(v96 * v163)) + (float)(v98 * v161);
          float v115 = (float)((float)(v168 * v104) + (float)(_S16 * v170)) + (float)(v105 * v167);
          float v116 = (float)((float)(v165 * v104) + (float)(_S16 * v166)) + (float)(v105 * v164);
          float v117 = (float)((float)(v162 * v104) + (float)(_S16 * v163)) + (float)(v105 * v161);
          _H5 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H5 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          _H5 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H5
            FCVT            S21, H6
          }
          _H5 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S24, H5 }
          _H5 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S22, H5 }
          _H5 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          LOWORD(_S3) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S6, H6
          }
          LOWORD(_S16) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          unsigned int v134 = llroundf(fminf(fmaxf(v117, 0.0), 8191.0));
          __asm { FCVT            S7, H16 }
          LOWORD(_S16) = *(_WORD *)(v27 + 2 * v134);
          __asm { FCVT            S16, H16 }
          float v137 = (float)((float)((float)(v177 * _S19) + (float)(v178 * _S18)) + (float)(v176 * _S20)) + v20;
          if (v137 < v20) {
            float v138 = v20;
          }
          else {
            float v138 = (float)((float)((float)(v177 * _S19) + (float)(v178 * _S18)) + (float)(v176 * _S20)) + v20;
          }
          BOOL v139 = v137 <= v22;
          float v140 = (float)((float)((float)(v177 * _S24) + (float)(v178 * _S21)) + (float)(v176 * _S22)) + v20;
          if (!v139) {
            float v138 = v22;
          }
          unsigned int v141 = llroundf(v138);
          if (v140 < v20) {
            float v142 = v20;
          }
          else {
            float v142 = (float)((float)((float)(v177 * _S24) + (float)(v178 * _S21)) + (float)(v176 * _S22)) + v20;
          }
          BOOL v139 = v140 <= v22;
          float v143 = (float)((float)((float)(v177 * _S14) + (float)(v178 * _S5)) + (float)(v176 * _S3)) + v20;
          if (!v139) {
            float v142 = v22;
          }
          unsigned int v144 = llroundf(v142);
          if (v143 < v20) {
            float v145 = v20;
          }
          else {
            float v145 = (float)((float)((float)(v177 * _S14) + (float)(v178 * _S5)) + (float)(v176 * _S3)) + v20;
          }
          BOOL v139 = v143 <= v22;
          float v146 = (float)((float)((float)(v177 * _S7) + (float)(v178 * _S6)) + (float)(v176 * _S16)) + v20;
          if (!v139) {
            float v145 = v22;
          }
          unsigned int v147 = llroundf(v145);
          if (v146 < v20) {
            float v148 = v20;
          }
          else {
            float v148 = (float)((float)((float)(v177 * _S7) + (float)(v178 * _S6)) + (float)(v176 * _S16)) + v20;
          }
          if (v146 <= v22) {
            float v149 = v148;
          }
          else {
            float v149 = v22;
          }
          float v150 = (float)((float)(_S18 + _S21) + _S5) + _S6;
          float v151 = (float)((float)(_S19 + _S24) + _S14) + _S7;
          *(_WORD *)uint64_t result = v141 << v39;
          *((_WORD *)result + 1) = v144 << v39;
          *(_WORD *)uint64_t v46 = v147 << v39;
          *((_WORD *)v46 + 1) = llroundf(v149) << v39;
          float v152 = (float)((float)(_S20 + _S22) + _S3) + _S16;
          float v153 = (float)((float)(v180 + (float)(v150 * v175)) + (float)(v151 * v174)) + (float)(v152 * v173);
          float v154 = v179;
          if (v153 <= v179)
          {
            float v154 = (float)((float)(v180 + (float)(v150 * v175)) + (float)(v151 * v174)) + (float)(v152 * v173);
            if (v153 < v181) {
              float v154 = v181;
            }
          }
          float v155 = (_WORD *)(v41 + 2 * v44);
          float v156 = (float)((float)(v180 + (float)(v150 * v172)) + (float)(v151 * v171)) + (float)(v152 * v169);
          *float v155 = llroundf(v154) << v39;
          float v157 = v179;
          if (v156 <= v179)
          {
            float v157 = v156;
            if (v156 < v181) {
              float v157 = v181;
            }
          }
          v35 += 8;
          v45 += 8;
          result += 4;
          v46 += 4;
          v155[1] = llroundf(v157) << v39;
          v44 += 2;
          float v24 = v159;
          float v28 = v160;
          float v29 = v158;
        }
        while (v11 > v44);
      }
      uint64_t v35 = (unsigned __int16 *)&v43[v16];
      uint64_t result = &v42[v17];
      v41 += v18;
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = 2 * *result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (2 * v12 != 2 * v11)
  {
    unint64_t v13 = 0;
    unint64_t v14 = *(void *)(result + 20);
    uint64_t v15 = *(void *)(result + 44) + 2 * v11;
    unint64_t v16 = 2 * v12 - 2 * v11;
    uint64_t v17 = *((void *)result + 19);
    uint64_t v18 = (uint64_t *)*((void *)result + 17);
    uint64_t v19 = **((void **)result + 8);
    uint64_t v20 = *v18;
    uint64_t v21 = v18[1];
    float v22 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    float v23 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    float v24 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    float v130 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    float v131 = (float)LODWORD(a9);
    float v132 = (float)LODWORD(a6);
    float v128 = *(float *)(v17 + 40);
    float v129 = *(float *)(v17 + 36);
    float v126 = *(float *)(v17 + 48) * 0.25;
    float v127 = *(float *)(v17 + 44);
    float v124 = *(float *)(v17 + 56) * 0.25;
    float v125 = *(float *)(v17 + 52) * 0.25;
    float v122 = *(float *)(v17 + 64) * 0.25;
    float v123 = *(float *)(v17 + 60) * 0.25;
    float v120 = *(float *)(v17 + 68) * 0.25;
    float v121 = *(float *)(v17 + 72);
    float v25 = *(float *)(v17 + 80);
    float v119 = *(float *)(v17 + 76);
    float v26 = *(float *)(v17 + 84);
    float v27 = *(float *)(v17 + 88);
    float v28 = *(float *)(v17 + 92);
    float v29 = *(float *)(v17 + 96);
    float v31 = *(float *)(v17 + 100);
    float v30 = *(float *)(v17 + 104);
    uint64_t v32 = v17 + 164;
    uint64_t v33 = v17 + 16548;
    uint64_t v34 = *((void *)result + 14);
    unint64_t v35 = *((void *)result + 13) * a2 / v10;
    uint64_t v36 = (void *)*((void *)result + 16);
    uint64_t v37 = *((void *)result + 15) + 2 * v35;
    uint64_t v38 = (unsigned __int16 *)(**((void **)result + 7) + v19 * v15 + 8 * *(void *)(result + 36));
    uint64_t v39 = v36[1];
    uint64_t v40 = (char *)(*v36 + v37 * v20 + 2 * v34);
    unsigned int v41 = *(unsigned __int8 *)(v17 + 132);
    if (v41 >= 0x11) {
      char v42 = 0;
    }
    else {
      char v42 = 16 - v41;
    }
    if (v37 >= 0) {
      uint64_t v43 = v37;
    }
    else {
      uint64_t v43 = v37 + 1;
    }
    uint64_t result = (unsigned __int8 *)(v39 + (v43 >> 1) * v21 + 2 * v34);
    do
    {
      unint64_t v44 = &v40[v20];
      CFTypeID v45 = (char *)v38 + v19;
      if (v14)
      {
        unint64_t v46 = 0;
        uint64_t v47 = (unsigned __int16 *)((char *)v38 + v19);
        unint64_t v48 = &v40[v20];
        do
        {
          _H18 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v38[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v38[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v38[3]) >> 16), 0.0), 8191.0)));
          _H10 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v38[5]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H20
            FCVT            S10, H10
          }
          _H11 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v38[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v38[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v47[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v47[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v47[3]) >> 16), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v47[5]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H15
            FCVT            S21, H21
          }
          _H22 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v47[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H24 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v47[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _S5 = (float)((float)(v119 * _S19) + (float)(_S18 * v121)) + (float)(_S20 * v25);
          _S3 = (float)((float)(v27 * _S19) + (float)(_S18 * v26)) + (float)(_S20 * v28);
          float v79 = (float)((float)(v31 * _S19) + (float)(_S18 * v29)) + (float)(_S20 * v30);
          float v80 = (float)((float)(v119 * _S11) + (float)(_S10 * v121)) + (float)(_S12 * v25);
          float v81 = (float)((float)(v27 * _S11) + (float)(_S10 * v26)) + (float)(_S12 * v28);
          float v82 = (float)((float)(v31 * _S11) + (float)(_S10 * v29)) + (float)(_S12 * v30);
          float v83 = (float)((float)(v119 * _S14) + (float)(_S13 * v121)) + (float)(_S15 * v25);
          float v84 = (float)((float)(v27 * _S14) + (float)(_S13 * v26)) + (float)(_S15 * v28);
          _S6 = (float)((float)(v31 * _S14) + (float)(_S13 * v29)) + (float)(_S15 * v30);
          LOWORD(_S5) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S10, H5 }
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S11, H3 }
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H3
            FCVT            S13, H5
          }
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S14, H3 }
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v33
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v119 * _S22) + (float)(_S21 * v121)) + (float)(_S24 * v25), 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H3
            FCVT            S3, H5
          }
          LOWORD(_S5) = *(_WORD *)(v33
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v27 * _S22) + (float)(_S21 * v26)) + (float)(_S24 * v28), 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v33
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v31 * _S22) + (float)(_S21 * v29)) + (float)(_S24 * v30), 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          float v98 = (float)((float)((float)(v128 * _S11) + (float)(v129 * _S10)) + (float)(v127 * _S12)) + v23;
          if (v98 < v23) {
            float v99 = v23;
          }
          else {
            float v99 = (float)((float)((float)(v128 * _S11) + (float)(v129 * _S10)) + (float)(v127 * _S12)) + v23;
          }
          BOOL v100 = v98 <= v24;
          float v101 = (float)((float)((float)(v128 * _S15) + (float)(v129 * _S13)) + (float)(v127 * _S14)) + v23;
          if (!v100) {
            float v99 = v24;
          }
          unsigned int v102 = llroundf(v99);
          if (v101 < v23) {
            float v103 = v23;
          }
          else {
            float v103 = (float)((float)((float)(v128 * _S15) + (float)(v129 * _S13)) + (float)(v127 * _S14)) + v23;
          }
          BOOL v100 = v101 <= v24;
          float v104 = (float)((float)((float)(v128 * _S19) + (float)(v129 * _S18)) + (float)(v127 * _S20)) + v23;
          if (!v100) {
            float v103 = v24;
          }
          unsigned int v105 = llroundf(v103);
          if (v104 < v23) {
            float v106 = v23;
          }
          else {
            float v106 = (float)((float)((float)(v128 * _S19) + (float)(v129 * _S18)) + (float)(v127 * _S20)) + v23;
          }
          BOOL v100 = v104 <= v24;
          float v107 = (float)((float)((float)(v128 * _S5) + (float)(v129 * _S3)) + (float)(v127 * _S6)) + v23;
          if (!v100) {
            float v106 = v24;
          }
          unsigned int v108 = llroundf(v106);
          if (v107 < v23) {
            float v109 = v23;
          }
          else {
            float v109 = (float)((float)((float)(v128 * _S5) + (float)(v129 * _S3)) + (float)(v127 * _S6)) + v23;
          }
          if (v107 <= v24) {
            float v110 = v109;
          }
          else {
            float v110 = v24;
          }
          float v111 = (float)((float)(_S10 + _S13) + _S18) + _S3;
          float v112 = (float)((float)(_S11 + _S15) + _S19) + _S5;
          *(_WORD *)uint64_t v40 = v102 << v42;
          *((_WORD *)v40 + 1) = v105 << v42;
          *(_WORD *)unint64_t v48 = v108 << v42;
          *((_WORD *)v48 + 1) = llroundf(v110) << v42;
          float v113 = v131;
          float v114 = (float)((float)(_S12 + _S14) + _S20) + _S6;
          float v115 = (float)((float)(v132 + (float)(v111 * v126)) + (float)(v112 * v125)) + (float)(v114 * v124);
          if (v115 <= v131)
          {
            float v113 = (float)((float)(v132 + (float)(v111 * v126)) + (float)(v112 * v125)) + (float)(v114 * v124);
            if (v115 < v130) {
              float v113 = v130;
            }
          }
          float v116 = &result[2 * v46];
          float v117 = (float)((float)(v132 + (float)(v111 * v123)) + (float)(v112 * v122)) + (float)(v114 * v120);
          *(_WORD *)float v116 = llroundf(v113) << v42;
          float v118 = v131;
          if (v117 <= v131)
          {
            float v118 = v117;
            if (v117 < v130) {
              float v118 = v130;
            }
          }
          v38 += 8;
          v47 += 8;
          v40 += 4;
          v48 += 4;
          *((_WORD *)v116 + 1) = llroundf(v118) << v42;
          v46 += 2;
        }
        while (v14 > v46);
      }
      uint64_t v38 = (unsigned __int16 *)&v45[v19];
      uint64_t v40 = &v44[v20];
      result += v21;
      v13 += 2;
    }
    while (v16 > v13);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = 2 * *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    uint64_t v14 = *(void *)(result + 44) + 2 * v10;
    unint64_t v15 = 2 * v11 - 2 * v10;
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = (uint64_t *)*((void *)result + 17);
    uint64_t v18 = **((void **)result + 8);
    uint64_t v19 = *v17;
    uint64_t v20 = v17[1];
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v16 + 136);
    float v22 = *(float *)&v21 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(v21) = *(_WORD *)(v16 + 144);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v26 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v27 = (float)LODWORD(a8);
    float v28 = *(float *)(v16 + 36);
    float v29 = *(float *)(v16 + 40);
    float v30 = *(float *)(v16 + 44);
    float v31 = *(float *)(v16 + 48) * 0.25;
    float v32 = *(float *)(v16 + 52) * 0.25;
    float v33 = *(float *)(v16 + 56) * 0.25;
    float v34 = *(float *)(v16 + 60) * 0.25;
    float v35 = *(float *)(v16 + 64) * 0.25;
    float v36 = *(float *)(v16 + 68) * 0.25;
    uint64_t v37 = *((void *)result + 14);
    unint64_t v38 = *((void *)result + 13) * a2 / v9;
    uint64_t v39 = (void *)*((void *)result + 16);
    uint64_t v40 = *((void *)result + 15) + 2 * v38;
    unsigned int v41 = (unsigned __int16 *)(**((void **)result + 7) + v18 * v14 + 8 * *(void *)(result + 36));
    char v42 = (unsigned __int8 *)(*v39 + v40 * v19 + 2 * v37);
    LODWORD(v16) = *(unsigned __int8 *)(v16 + 132);
    char v43 = 16 - v16;
    if (v16 >= 0x11) {
      char v43 = 0;
    }
    if (v40 >= 0) {
      uint64_t v44 = v40;
    }
    else {
      uint64_t v44 = v40 + 1;
    }
    uint64_t v45 = v39[1] + (v44 >> 1) * v20 + 2 * v37;
    char v46 = v43;
    do
    {
      uint64_t result = &v42[v19];
      uint64_t v47 = (char *)v41 + v18;
      if (v13)
      {
        unint64_t v48 = 0;
        long long v49 = (unsigned __int16 *)((char *)v41 + v18);
        uint64_t v50 = &v42[v19];
        do
        {
          float v51 = v22 * (float)(bswap32(v41[1]) >> 16);
          float v52 = v22 * (float)(bswap32(v41[2]) >> 16);
          float v53 = v22 * (float)(bswap32(v41[3]) >> 16);
          float v54 = v22 * (float)(bswap32(v41[5]) >> 16);
          float v55 = v22 * (float)(bswap32(v41[6]) >> 16);
          float v56 = v22 * (float)(bswap32(v41[7]) >> 16);
          float v57 = v22 * (float)(bswap32(v49[1]) >> 16);
          float v58 = v22 * (float)(bswap32(v49[2]) >> 16);
          float v59 = v22 * (float)(bswap32(v49[3]) >> 16);
          float v60 = v22 * (float)(bswap32(v49[5]) >> 16);
          float v61 = v22 * (float)(bswap32(v49[6]) >> 16);
          float v62 = v22 * (float)(bswap32(v49[7]) >> 16);
          float v63 = (float)((float)((float)(v29 * v52) + (float)(v28 * v51)) + (float)(v30 * v53)) + v23;
          float v64 = (float)((float)((float)(v29 * v55) + (float)(v28 * v54)) + (float)(v30 * v56)) + v23;
          float v65 = (float)((float)((float)(v29 * v58) + (float)(v28 * v57)) + (float)(v30 * v59)) + v23;
          float v66 = (float)((float)((float)(v29 * v61) + (float)(v28 * v60)) + (float)(v30 * v62)) + v23;
          if (v63 < v23) {
            float v67 = v23;
          }
          else {
            float v67 = (float)((float)((float)(v29 * v52) + (float)(v28 * v51)) + (float)(v30 * v53)) + v23;
          }
          if (v63 <= v25) {
            float v68 = v67;
          }
          else {
            float v68 = v25;
          }
          *(_WORD *)char v42 = llroundf(v68) << v46;
          if (v64 < v23) {
            float v69 = v23;
          }
          else {
            float v69 = (float)((float)((float)(v29 * v55) + (float)(v28 * v54)) + (float)(v30 * v56)) + v23;
          }
          if (v64 > v25) {
            float v69 = v25;
          }
          *((_WORD *)v42 + 1) = llroundf(v69) << v46;
          if (v65 < v23) {
            float v70 = v23;
          }
          else {
            float v70 = (float)((float)((float)(v29 * v58) + (float)(v28 * v57)) + (float)(v30 * v59)) + v23;
          }
          if (v65 > v25) {
            float v70 = v25;
          }
          *(_WORD *)uint64_t v50 = llroundf(v70) << v46;
          if (v66 < v23) {
            float v71 = v23;
          }
          else {
            float v71 = (float)((float)((float)(v29 * v61) + (float)(v28 * v60)) + (float)(v30 * v62)) + v23;
          }
          if (v66 > v25) {
            float v71 = v25;
          }
          *((_WORD *)v50 + 1) = llroundf(v71) << v46;
          float v72 = (float)((float)(v51 + v54) + v57) + v60;
          float v73 = (float)((float)(v52 + v55) + v58) + v61;
          float v74 = (float)((float)(v53 + v56) + v59) + v62;
          float v75 = (float)((float)(v24 + (float)(v72 * v31)) + (float)(v73 * v32)) + (float)(v74 * v33);
          float v76 = v27;
          if (v75 <= v27)
          {
            float v76 = (float)((float)(v24 + (float)(v72 * v31)) + (float)(v73 * v32)) + (float)(v74 * v33);
            if (v75 < v26) {
              float v76 = v26;
            }
          }
          float v77 = (_WORD *)(v45 + 2 * v48);
          float v78 = (float)((float)(v24 + (float)(v72 * v34)) + (float)(v73 * v35)) + (float)(v74 * v36);
          *float v77 = llroundf(v76) << v46;
          float v79 = v27;
          if (v78 <= v27)
          {
            float v79 = v78;
            if (v78 < v26) {
              float v79 = v26;
            }
          }
          v41 += 8;
          v49 += 8;
          v42 += 4;
          v50 += 4;
          v77[1] = llroundf(v79) << v46;
          v48 += 2;
        }
        while (v13 > v48);
      }
      unsigned int v41 = (unsigned __int16 *)&v47[v18];
      char v42 = &result[v19];
      v45 += v20;
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_422vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = (uint64_t *)*((void *)result + 17);
    uint64_t v18 = (void *)*((void *)result + 7);
    uint64_t v19 = **((void **)result + 8);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    float v23 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 146);
    float v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 148);
    float v26 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 150);
    float v125 = (float)LODWORD(a8);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v27 = (float)LODWORD(a8);
    float v28 = *(float *)(v16 + 40);
    float v124 = *(float *)(v16 + 36);
    float v29 = *(float *)(v16 + 44);
    float v123 = *(float *)(v16 + 48) * 0.5;
    float v122 = *(float *)(v16 + 52) * 0.5;
    float v121 = *(float *)(v16 + 56) * 0.5;
    float v120 = *(float *)(v16 + 60) * 0.5;
    float v119 = *(float *)(v16 + 64) * 0.5;
    float v30 = *(float *)(v16 + 72);
    float v118 = *(float *)(v16 + 68) * 0.5;
    float v31 = *(float *)(v16 + 76);
    float v32 = *(float *)(v16 + 80);
    float v33 = *(float *)(v16 + 84);
    float v34 = *(float *)(v16 + 88);
    float v35 = *(float *)(v16 + 92);
    float v36 = *(float *)(v16 + 96);
    float v38 = *(float *)(v16 + 100);
    float v37 = *(float *)(v16 + 104);
    uint64_t v39 = v16 + 164;
    uint64_t v40 = v16 + 16548;
    uint64_t v41 = v16 + 32932;
    float v42 = *(float *)(v16 + 108);
    float v43 = *(float *)(v16 + 112);
    float v44 = *(float *)(v16 + 116);
    float v45 = *(float *)(v16 + 120);
    uint64_t v46 = *((void *)result + 14);
    uint64_t v47 = (void *)*((void *)result + 16);
    unint64_t v48 = *((void *)result + 13) * a2 / v9 + *((void *)result + 15);
    uint64_t v49 = *(void *)(result + 36);
    uint64_t v50 = v47[2];
    if (v50) {
      uint64_t result = (unsigned __int8 *)(v50 + v48 * v22 + v46);
    }
    else {
      uint64_t result = 0;
    }
    float v53 = v47;
    uint64_t v52 = *v47;
    uint64_t v51 = v53[1];
    _ZF = v51 == 0;
    uint64_t v55 = v51 + v48 * v21 + v46;
    if (_ZF) {
      uint64_t v55 = 0;
    }
    float v56 = (unsigned char *)(v52 + v48 * v20 + v46);
    uint64_t v57 = *v18 + v19 * v14 + 8 * v49;
    do
    {
      if (v13)
      {
        unint64_t v58 = 0;
        float v59 = result;
        float v60 = v56;
        float v61 = (unsigned __int16 *)v57;
        do
        {
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v61[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v61[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v61[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          float v71 = (float)((float)((float)(v43 * _S15) + (float)(v42 * _S14)) + (float)(v44 * _S18))
              + (float)(v45 * fmaxf(_S14, fmaxf(_S15, _S18)));
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v61[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v61[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v61[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H5 }
          float v79 = (float)((float)((float)(v43 * _S21) + (float)(v42 * _S20)) + (float)(v44 * _S22))
              + (float)(v45 * fmaxf(_S20, fmaxf(_S21, _S22)));
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          if (v59)
          {
            char v81 = llroundf((float)(bswap32(*v61) >> 16) * 0.0038911);
            char v82 = llroundf((float)(bswap32(v61[4]) >> 16) * 0.0038911);
          }
          else
          {
            char v81 = 0;
            char v82 = 0;
          }
          _H3 = *(_WORD *)(v40 + 2 * llroundf(v72));
          __asm { FCVT            S3, H3 }
          float v85 = _S14 * _S3;
          float v86 = _S15 * _S3;
          float v87 = _S18 * _S3;
          _H5 = *(_WORD *)(v40 + 2 * llroundf(v80));
          __asm { FCVT            S5, H5 }
          _S18 = _S20 * _S5;
          _S20 = _S21 * _S5;
          float v92 = _S22 * _S5;
          _S21 = (float)((float)(v31 * v86) + (float)(v85 * v30)) + (float)(v87 * v32);
          float v94 = (float)((float)(v34 * v86) + (float)(v85 * v33)) + (float)(v87 * v35);
          _S3 = (float)((float)(v38 * v86) + (float)(v85 * v36)) + (float)(v87 * v37);
          _S19 = (float)((float)(v31 * _S20) + (float)(_S18 * v30)) + (float)(v92 * v32);
          float v97 = (float)((float)(v34 * _S20) + (float)(_S18 * v33)) + (float)(v92 * v35);
          _S5 = (float)((float)(v38 * _S20) + (float)(_S18 * v36)) + (float)(v92 * v37);
          LOWORD(_S18) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          LOWORD(_S20) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H18
            FCVT            S20, H20
          }
          LOWORD(_S3) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S19) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S21) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          LOWORD(_S5) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          float v105 = (float)((float)((float)(v28 * _S20) + (float)(v124 * _S18)) + (float)(v29 * _S3)) + v24;
          float v106 = (float)((float)((float)(v28 * _S21) + (float)(v124 * _S19)) + (float)(v29 * _S5)) + v24;
          if (v105 < v24) {
            float v107 = v24;
          }
          else {
            float v107 = (float)((float)((float)(v28 * _S20) + (float)(v124 * _S18)) + (float)(v29 * _S3)) + v24;
          }
          if (v105 <= v26) {
            float v108 = v107;
          }
          else {
            float v108 = v26;
          }
          unsigned char *v60 = llroundf(v108);
          if (v106 < v24) {
            float v109 = v24;
          }
          else {
            float v109 = (float)((float)((float)(v28 * _S21) + (float)(v124 * _S19)) + (float)(v29 * _S5)) + v24;
          }
          if (v106 > v26) {
            float v109 = v26;
          }
          v60[1] = llroundf(v109);
          float v110 = _S18 + _S19;
          float v111 = _S20 + _S21;
          float v112 = (float)(v25 + (float)(v110 * v123)) + (float)((float)(_S20 + _S21) * v122);
          float v113 = _S3 + _S5;
          float v114 = v112 + (float)((float)(_S3 + _S5) * v121);
          float v115 = v27;
          if (v114 <= v27)
          {
            float v115 = v114;
            if (v114 < v125) {
              float v115 = v125;
            }
          }
          float v116 = (float)((float)(v25 + (float)(v110 * v120)) + (float)(v111 * v119)) + (float)(v113 * v118);
          *(unsigned char *)(v55 + v58) = llroundf(v115);
          float v117 = v27;
          if (v116 <= v27)
          {
            float v117 = v116;
            if (v116 < v125) {
              float v117 = v125;
            }
          }
          *(unsigned char *)(v55 + v58 + 1) = llroundf(v117);
          if (v59)
          {
            unsigned char *v59 = v81;
            v59[1] = v82;
            v59 += 2;
          }
          v61 += 8;
          v58 += 2;
          v60 += 2;
        }
        while (v13 > v58);
      }
      v57 += v19;
      v56 += v20;
      v55 += v21;
      result += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_422vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    unint64_t v14 = *(void *)(result + 20);
    unint64_t v15 = v11 + *(void *)(result + 44);
    unint64_t v16 = v12 - v11;
    uint64_t v17 = *((void *)result + 19);
    uint64_t v18 = (uint64_t *)*((void *)result + 17);
    uint64_t v19 = (void *)*((void *)result + 7);
    uint64_t v20 = **((void **)result + 8);
    uint64_t v21 = *v18;
    uint64_t v22 = v18[1];
    uint64_t v23 = v18[2];
    float v24 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    float v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    float v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    float v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    float v28 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    float v29 = (float)LODWORD(a9);
    float v30 = *(float *)(v17 + 36);
    float v31 = *(float *)(v17 + 40);
    float v32 = *(float *)(v17 + 44);
    float v103 = *(float *)(v17 + 52) * 0.5;
    float v104 = *(float *)(v17 + 48) * 0.5;
    float v102 = *(float *)(v17 + 56) * 0.5;
    float v33 = *(float *)(v17 + 60) * 0.5;
    float v34 = *(float *)(v17 + 64) * 0.5;
    float v35 = *(float *)(v17 + 72);
    float v36 = *(float *)(v17 + 68) * 0.5;
    float v37 = *(float *)(v17 + 76);
    float v38 = *(float *)(v17 + 80);
    float v39 = *(float *)(v17 + 84);
    float v40 = *(float *)(v17 + 88);
    float v41 = *(float *)(v17 + 92);
    float v42 = *(float *)(v17 + 96);
    float v44 = *(float *)(v17 + 100);
    float v43 = *(float *)(v17 + 104);
    uint64_t v45 = v17 + 164;
    uint64_t v46 = v17 + 16548;
    uint64_t v47 = *((void *)result + 14);
    unint64_t v48 = (uint64_t *)*((void *)result + 16);
    unint64_t v49 = *((void *)result + 13) * a2 / v10 + *((void *)result + 15);
    uint64_t v50 = *(void *)(result + 36);
    uint64_t v51 = v48[2];
    if (v51) {
      uint64_t v52 = (unsigned char *)(v51 + v49 * v23 + v47);
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t v54 = *v48;
    uint64_t v53 = *(void *)(*((void *)result + 16) + 8);
    _ZF = v53 == 0;
    uint64_t result = (unsigned __int8 *)(v53 + v49 * v22 + v47);
    if (_ZF) {
      uint64_t result = 0;
    }
    float v56 = (unsigned char *)(v54 + v49 * v21 + v47);
    uint64_t v57 = *v19 + v20 * v15 + 8 * v50;
    do
    {
      if (v14)
      {
        unint64_t v58 = 0;
        float v59 = (unsigned __int16 *)v57;
        float v60 = v52;
        float v61 = v56;
        do
        {
          if (v60)
          {
            char v62 = llroundf((float)(bswap32(*v59) >> 16) * 0.0038911);
            char v63 = llroundf((float)(bswap32(v59[4]) >> 16) * 0.0038911);
          }
          else
          {
            char v62 = 0;
            char v63 = 0;
          }
          _H10 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v59[1]) >> 16), 0.0), 8191.0)));
          _H11 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v59[2]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          _H12 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v59[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v59[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v59[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v59[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H15 }
          _S18 = (float)((float)(v37 * _S11) + (float)(_S10 * v35)) + (float)(_S12 * v38);
          _S19 = (float)((float)(v40 * _S11) + (float)(_S10 * v39)) + (float)(_S12 * v41);
          _S10 = (float)((float)(v44 * _S11) + (float)(_S10 * v42)) + (float)(_S12 * v43);
          _S11 = (float)((float)(v37 * _S14) + (float)(_S13 * v35)) + (float)(_S15 * v38);
          _S12 = (float)((float)(v40 * _S14) + (float)(_S13 * v39)) + (float)(_S15 * v41);
          float v84 = (float)((float)(v44 * _S14) + (float)(_S13 * v42)) + (float)(_S15 * v43);
          LOWORD(_S18) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          LOWORD(_S19) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H18
            FCVT            S19, H19
          }
          LOWORD(_S10) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S14, H10 }
          LOWORD(_S10) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          float v91 = (float)((float)((float)(v31 * _S19) + (float)(v30 * _S18)) + (float)(v32 * _S14)) + v25;
          float v92 = (float)((float)((float)(v31 * _S11) + (float)(v30 * _S10)) + (float)(v32 * _S12)) + v25;
          if (v91 < v25) {
            float v93 = v25;
          }
          else {
            float v93 = (float)((float)((float)(v31 * _S19) + (float)(v30 * _S18)) + (float)(v32 * _S14)) + v25;
          }
          if (v91 > v27) {
            float v93 = v27;
          }
          *float v61 = llroundf(v93);
          if (v92 < v25) {
            float v94 = v25;
          }
          else {
            float v94 = (float)((float)((float)(v31 * _S11) + (float)(v30 * _S10)) + (float)(v32 * _S12)) + v25;
          }
          if (v92 > v27) {
            float v94 = v27;
          }
          v61[1] = llroundf(v94);
          float v95 = _S18 + _S10;
          float v96 = _S19 + _S11;
          float v97 = _S14 + _S12;
          float v98 = (float)((float)(v26 + (float)(v95 * v104)) + (float)(v96 * v103)) + (float)(v97 * v102);
          float v99 = v29;
          if (v98 <= v29)
          {
            float v99 = (float)((float)(v26 + (float)(v95 * v104)) + (float)(v96 * v103)) + (float)(v97 * v102);
            if (v98 < v28) {
              float v99 = v28;
            }
          }
          float v100 = (float)((float)(v26 + (float)(v95 * v33)) + (float)(v96 * v34)) + (float)(v97 * v36);
          result[v58] = llroundf(v99);
          float v101 = v29;
          if (v100 <= v29)
          {
            float v101 = v100;
            if (v100 < v28) {
              float v101 = v28;
            }
          }
          result[v58 + 1] = llroundf(v101);
          if (v60)
          {
            unsigned char *v60 = v62;
            v60[1] = v63;
            v60 += 2;
          }
          v59 += 8;
          v58 += 2;
          v61 += 2;
        }
        while (v14 > v58);
      }
      v57 += v20;
      v56 += v21;
      result += v22;
      v52 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_422vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_422vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = (uint64_t *)*((void *)result + 17);
    uint64_t v18 = (void *)*((void *)result + 7);
    uint64_t v19 = **((void **)result + 8);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    *(float *)&unsigned int v23 = (float)*(unsigned int *)(v16 + 136);
    float v24 = *(float *)&v23 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(v23) = *(_WORD *)(v16 + 144);
    float v25 = (float)v23;
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v26 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v27 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v28 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v29 = (float)LODWORD(a8);
    float v30 = *(float *)(v16 + 36);
    float v31 = *(float *)(v16 + 40);
    float v32 = *(float *)(v16 + 44);
    float v33 = *(float *)(v16 + 48) * 0.5;
    float v34 = *(float *)(v16 + 52) * 0.5;
    float v35 = *(float *)(v16 + 56) * 0.5;
    float v36 = *(float *)(v16 + 60) * 0.5;
    float v37 = *(float *)(v16 + 64) * 0.5;
    float v38 = *(float *)(v16 + 68) * 0.5;
    uint64_t v39 = *((void *)result + 14);
    unint64_t v40 = *((void *)result + 13) * a2;
    float v41 = (void *)*((void *)result + 16);
    unint64_t v42 = v40 / v9 + *((void *)result + 15);
    uint64_t v43 = *(void *)(result + 36);
    uint64_t v44 = v41[2];
    if (v44) {
      uint64_t v45 = (unsigned char *)(v44 + v42 * v22 + v39);
    }
    else {
      uint64_t v45 = 0;
    }
    unint64_t v48 = v41;
    uint64_t v46 = *v41;
    uint64_t v47 = v48[1];
    BOOL v49 = v47 == 0;
    uint64_t v50 = v47 + v42 * v21 + v39;
    if (v49) {
      uint64_t v50 = 0;
    }
    uint64_t v51 = (unsigned char *)(v46 + v42 * v20 + v39);
    uint64_t result = (unsigned __int8 *)(*v18 + v19 * v14 + 8 * v43);
    do
    {
      if (v13)
      {
        unint64_t v52 = 0;
        uint64_t v53 = (unsigned __int16 *)result;
        uint64_t v54 = v45;
        uint64_t v55 = v51;
        do
        {
          if (v54)
          {
            char v56 = llroundf((float)(bswap32(*v53) >> 16) * 0.0038911);
            char v57 = llroundf((float)(bswap32(v53[4]) >> 16) * 0.0038911);
          }
          else
          {
            char v56 = 0;
            char v57 = 0;
          }
          float v58 = v24 * (float)(bswap32(v53[1]) >> 16);
          float v59 = v24 * (float)(bswap32(v53[2]) >> 16);
          float v60 = v24 * (float)(bswap32(v53[3]) >> 16);
          float v61 = v24 * (float)(bswap32(v53[5]) >> 16);
          float v62 = v24 * (float)(bswap32(v53[6]) >> 16);
          float v63 = v24 * (float)(bswap32(v53[7]) >> 16);
          float v64 = (float)((float)((float)(v31 * v59) + (float)(v30 * v58)) + (float)(v32 * v60)) + v25;
          float v65 = (float)((float)((float)(v31 * v62) + (float)(v30 * v61)) + (float)(v32 * v63)) + v25;
          if (v64 < v25) {
            float v66 = v25;
          }
          else {
            float v66 = (float)((float)((float)(v31 * v59) + (float)(v30 * v58)) + (float)(v32 * v60)) + v25;
          }
          if (v64 <= v27) {
            float v67 = v66;
          }
          else {
            float v67 = v27;
          }
          *uint64_t v55 = llroundf(v67);
          if (v65 < v25) {
            float v68 = v25;
          }
          else {
            float v68 = (float)((float)((float)(v31 * v62) + (float)(v30 * v61)) + (float)(v32 * v63)) + v25;
          }
          if (v65 > v27) {
            float v68 = v27;
          }
          v55[1] = llroundf(v68);
          float v69 = v58 + v61;
          float v70 = v59 + v62;
          float v71 = v60 + v63;
          float v72 = (float)((float)(v26 + (float)(v69 * v33)) + (float)(v70 * v34)) + (float)(v71 * v35);
          float v73 = v29;
          if (v72 <= v29)
          {
            float v73 = (float)((float)(v26 + (float)(v69 * v33)) + (float)(v70 * v34)) + (float)(v71 * v35);
            if (v72 < v28) {
              float v73 = v28;
            }
          }
          float v74 = (float)((float)(v26 + (float)(v69 * v36)) + (float)(v70 * v37)) + (float)(v71 * v38);
          *(unsigned char *)(v50 + v52) = llroundf(v73);
          float v75 = v29;
          if (v74 <= v29)
          {
            float v75 = v74;
            if (v74 < v28) {
              float v75 = v28;
            }
          }
          *(unsigned char *)(v50 + v52 + 1) = llroundf(v75);
          if (v54)
          {
            unsigned char *v54 = v56;
            v54[1] = v57;
            v54 += 2;
          }
          v53 += 8;
          v52 += 2;
          v55 += 2;
        }
        while (v13 > v52);
      }
      result += v19;
      v51 += v20;
      v50 += v21;
      v45 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *result;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = *((void *)result + 14);
  int64x2_t v13 = (void *)*((void *)result + 16);
  unint64_t v14 = *((void *)result + 13) * a2 / v10 + *((void *)result + 15);
  unint64_t v15 = (uint64_t *)*((void *)result + 17);
  unint64_t v16 = (v9 + v9 * a2) / v10;
  uint64_t v17 = (unsigned char *)v13[1];
  if (v17) {
    v17 += v15[1] * v14 + v12;
  }
  if (v16 != v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(result + 44);
    uint64_t v20 = v11 + v19;
    uint64_t v21 = **((void **)result + 8);
    uint64_t v22 = *v15;
    uint64_t v23 = *v13 + v22 * v14;
    uint64_t v24 = *((void *)result + 19);
    unint64_t v25 = *(void *)(result + 20);
    uint64_t v26 = v16 + v19;
    uint64_t v27 = **((void **)result + 7) + v21 * v20 + 8 * *(void *)(result + 36);
    float v28 = (unsigned char *)(v23 + v12);
    uint64_t v29 = v26 - v20;
    LOWORD(a5) = *(_WORD *)(v24 + 144);
    LOWORD(a6) = *(_WORD *)(v24 + 146);
    LOWORD(a7) = *(_WORD *)(v24 + 148);
    LOWORD(a8) = *(_WORD *)(v24 + 150);
    LOWORD(a9) = *(_WORD *)(v24 + 152);
    float v30 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v31 = (float)LODWORD(a5);
    float v32 = (float)LODWORD(a7);
    float v33 = (float)LODWORD(a8);
    float v34 = (float)LODWORD(a9);
    float v35 = *(float *)(v24 + 36);
    float v36 = *(float *)(v24 + 40);
    float v37 = *(float *)(v24 + 44);
    float v127 = *(float *)(v24 + 48) * 0.5;
    float v128 = (float)LODWORD(a6);
    float v125 = *(float *)(v24 + 56) * 0.5;
    float v126 = *(float *)(v24 + 52) * 0.5;
    float v123 = *(float *)(v24 + 64) * 0.5;
    float v124 = *(float *)(v24 + 60) * 0.5;
    float v121 = *(float *)(v24 + 68) * 0.5;
    float v122 = *(float *)(v24 + 72);
    float v38 = *(float *)(v24 + 76);
    float v39 = *(float *)(v24 + 80);
    float v40 = *(float *)(v24 + 84);
    float v41 = *(float *)(v24 + 88);
    float v42 = *(float *)(v24 + 92);
    float v43 = *(float *)(v24 + 96);
    float v45 = *(float *)(v24 + 100);
    float v44 = *(float *)(v24 + 104);
    uint64_t v46 = v24 + 164;
    uint64_t v47 = v24 + 16548;
    uint64_t result = (unsigned __int8 *)(v24 + 32932);
    float v48 = *(float *)(v24 + 108);
    float v49 = *(float *)(v24 + 112);
    float v50 = *(float *)(v24 + 116);
    float v51 = *(float *)(v24 + 120);
    do
    {
      if (v25)
      {
        unint64_t v52 = 0;
        uint64_t v53 = v17;
        uint64_t v54 = v28;
        uint64_t v55 = (unsigned __int16 *)v27;
        do
        {
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          float v66 = (float)((float)((float)(v49 * _S18) + (float)(v48 * _S14)) + (float)(v50 * _S15))
              + (float)(v51 * fmaxf(_S14, fmaxf(_S18, _S15)));
          float v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            float v67 = v66;
            if (v66 < 0.0) {
              float v67 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          float v74 = (float)((float)((float)(v49 * _S21) + (float)(v48 * _S20)) + (float)(v50 * _S22))
              + (float)(v51 * fmaxf(_S20, fmaxf(_S21, _S22)));
          float v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          if (v53)
          {
            char v76 = llroundf((float)(bswap32(*v55) >> 16) * 0.0038911);
            char v77 = llroundf((float)(bswap32(v55[4]) >> 16) * 0.0038911);
          }
          else
          {
            char v76 = 0;
            char v77 = 0;
          }
          _H7 = *(_WORD *)(v47 + 2 * llroundf(v67));
          __asm { FCVT            S7, H7 }
          float v80 = _S14 * _S7;
          float v81 = _S18 * _S7;
          unsigned int v82 = llroundf(v75);
          float v83 = _S15 * _S7;
          LOWORD(_S7) = *(_WORD *)(v47 + 2 * v82);
          __asm { FCVT            S7, H7 }
          float v85 = _S20 * _S7;
          _S21 = _S21 * _S7;
          float v87 = _S22 * _S7;
          float v88 = (float)((float)(v38 * v81) + (float)(v80 * v122)) + (float)(v83 * v39);
          float v89 = (float)((float)(v41 * v81) + (float)(v80 * v40)) + (float)(v83 * v42);
          float v90 = (float)((float)(v45 * v81) + (float)(v80 * v43)) + (float)(v83 * v44);
          float v91 = (float)(v38 * _S21) + (float)(v85 * v122);
          float v92 = (float)(v41 * _S21) + (float)(v85 * v40);
          float v93 = (float)(v45 * _S21) + (float)(v85 * v43);
          _S18 = v91 + (float)(v87 * v39);
          _S19 = v92 + (float)(v87 * v42);
          LOWORD(_S21) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0))];
          float v96 = v93 + (float)(v87 * v44);
          __asm { FCVT            S20, H21 }
          LOWORD(_S21) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0))];
          unsigned int v98 = llroundf(fminf(fmaxf(v90, 0.0), 8191.0));
          __asm { FCVT            S3, H21 }
          LOWORD(_S21) = *(_WORD *)&result[2 * v98];
          __asm { FCVT            S21, H21 }
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0))];
          __asm { FCVT            S18, H18 }
          LOWORD(_S19) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0))];
          __asm { FCVT            S19, H19 }
          unsigned int v103 = llroundf(fminf(fmaxf(v96, 0.0), 8191.0));
          float v104 = (float)(v36 * _S3) + (float)(v35 * _S20);
          _S20 = _S20 + _S18;
          float v106 = _S3 + _S19;
          float v107 = (float)(v128 + (float)(_S20 * v127)) + (float)(v106 * v126);
          float v108 = (float)(v128 + (float)(_S20 * v124)) + (float)(v106 * v123);
          LOWORD(_S20) = *(_WORD *)&result[2 * v103];
          __asm { FCVT            S20, H20 }
          float v110 = v104 + (float)(v37 * _S21);
          float v111 = _S21 + _S20;
          float v112 = v107 + (float)(v111 * v125);
          float v113 = v108 + (float)(v111 * v121);
          if (v112 < v33) {
            float v114 = v33;
          }
          else {
            float v114 = v112;
          }
          float v115 = v110 + v31;
          if (v112 > v34) {
            float v114 = v34;
          }
          char v116 = llroundf(v114);
          if (v115 < v31) {
            float v117 = v31;
          }
          else {
            float v117 = v115;
          }
          unsigned char *v54 = v116;
          if (v115 > v32) {
            float v117 = v32;
          }
          v54[1] = llroundf(v117);
          float v118 = v34;
          if (v113 <= v34)
          {
            float v118 = v113;
            if (v113 < v33) {
              float v118 = v33;
            }
          }
          float v119 = (float)((float)((float)(v36 * _S19) + (float)(v35 * _S18)) + (float)(v37 * _S20)) + v31;
          v54[2] = llroundf(v118);
          float v120 = v32;
          if (v119 <= v32)
          {
            float v120 = v119;
            if (v119 < v31) {
              float v120 = v31;
            }
          }
          v54[3] = llroundf(v120);
          if (v53)
          {
            unsigned char *v53 = v76;
            v53[1] = v77;
            v53 += 2;
          }
          v55 += 8;
          v52 += 2;
          v54 += 4;
        }
        while (v25 > v52);
      }
      v27 += v21;
      v28 += v22;
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *result;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = *((void *)result + 14);
  int64x2_t v13 = (void *)*((void *)result + 16);
  unint64_t v14 = *((void *)result + 13) * a2 / v10 + *((void *)result + 15);
  unint64_t v15 = (uint64_t *)*((void *)result + 17);
  unint64_t v16 = (v9 + v9 * a2) / v10;
  uint64_t v17 = (unsigned char *)v13[1];
  if (v17) {
    v17 += v15[1] * v14 + v12;
  }
  if (v16 != v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(result + 44);
    uint64_t v20 = v11 + v19;
    uint64_t v21 = **((void **)result + 8);
    uint64_t v22 = *v15;
    uint64_t v23 = *v13 + v22 * v14;
    uint64_t v24 = *((void *)result + 19);
    unint64_t v25 = *(void *)(result + 20);
    uint64_t v26 = v16 + v19;
    uint64_t v27 = **((void **)result + 7) + v21 * v20 + 8 * *(void *)(result + 36);
    float v28 = (unsigned char *)(v23 + v12);
    uint64_t v29 = v26 - v20;
    LOWORD(a5) = *(_WORD *)(v24 + 144);
    LOWORD(a6) = *(_WORD *)(v24 + 146);
    LOWORD(a7) = *(_WORD *)(v24 + 148);
    LOWORD(a8) = *(_WORD *)(v24 + 150);
    LOWORD(a9) = *(_WORD *)(v24 + 152);
    float v30 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v31 = (float)LODWORD(a5);
    float v32 = (float)LODWORD(a6);
    float v33 = (float)LODWORD(a7);
    float v34 = (float)LODWORD(a8);
    float v35 = (float)LODWORD(a9);
    float v36 = *(float *)(v24 + 36);
    float v37 = *(float *)(v24 + 40);
    float v38 = *(float *)(v24 + 44);
    float v106 = *(float *)(v24 + 52) * 0.5;
    float v107 = *(float *)(v24 + 48) * 0.5;
    float v39 = *(float *)(v24 + 56) * 0.5;
    float v40 = *(float *)(v24 + 60) * 0.5;
    float v41 = *(float *)(v24 + 64) * 0.5;
    float v42 = *(float *)(v24 + 72);
    float v43 = *(float *)(v24 + 68) * 0.5;
    float v44 = *(float *)(v24 + 76);
    float v45 = *(float *)(v24 + 80);
    float v46 = *(float *)(v24 + 84);
    float v47 = *(float *)(v24 + 88);
    float v48 = *(float *)(v24 + 92);
    float v49 = *(float *)(v24 + 96);
    uint64_t v50 = v24 + 164;
    uint64_t v51 = v24 + 16548;
    uint64_t result = (unsigned __int8 *)&unk_193E80000;
    float v52 = *(float *)(v24 + 100);
    float v53 = *(float *)(v24 + 104);
    do
    {
      if (v25)
      {
        unint64_t v54 = 0;
        uint64_t v55 = (unsigned __int16 *)v27;
        char v56 = v17;
        char v57 = v28;
        do
        {
          if (v56)
          {
            char v58 = llroundf((float)(bswap32(*v55) >> 16) * 0.0038911);
            char v59 = llroundf((float)(bswap32(v55[4]) >> 16) * 0.0038911);
          }
          else
          {
            char v58 = 0;
            char v59 = 0;
          }
          _H10 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _S15 = (float)((float)(v44 * _S11) + (float)(_S10 * v42)) + (float)(_S12 * v45);
          _S18 = (float)((float)(v47 * _S11) + (float)(_S10 * v46)) + (float)(_S12 * v48);
          _S10 = (float)((float)(v52 * _S11) + (float)(_S10 * v49)) + (float)(_S12 * v53);
          float v77 = (float)(v44 * _S14) + (float)(_S13 * v42);
          float v78 = (float)(v47 * _S14) + (float)(_S13 * v46);
          float v79 = (float)(v52 * _S14) + (float)(_S13 * v49);
          LOWORD(_S14) = *(_WORD *)(v50 + 2
                                        * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _S11 = v77 + (float)(_S14 * v45);
          float v82 = v78 + (float)(_S14 * v48);
          LOWORD(_S15) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S15, 0.0), 8191.0)));
          float v83 = v79 + (float)(_S14 * v53);
          __asm { FCVT            S14, H15 }
          LOWORD(_S18) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S10) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S15, H10 }
          LOWORD(_S10) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          unsigned int v89 = llroundf(fminf(fmaxf(v83, 0.0), 8191.0));
          float v90 = (float)(v37 * _S18) + (float)(v36 * _S14);
          _S12 = _S14 + _S10;
          float v92 = _S18 + _S11;
          float v93 = (float)(v32 + (float)((float)(_S14 + _S10) * v107)) + (float)(v92 * v106);
          float v94 = (float)(v32 + (float)(_S12 * v40)) + (float)(v92 * v41);
          LOWORD(_S12) = *(_WORD *)(v51 + 2 * v89);
          __asm { FCVT            S12, H12 }
          float v96 = v90 + (float)(v38 * _S15);
          float v97 = v93 + (float)((float)(_S15 + _S12) * v39);
          float v98 = v94 + (float)((float)(_S15 + _S12) * v43);
          if (v97 < v34) {
            float v99 = v34;
          }
          else {
            float v99 = v97;
          }
          float v100 = v96 + v31;
          if (v97 > v35) {
            float v99 = v35;
          }
          char v101 = llroundf(v99);
          if (v100 < v31) {
            float v102 = v31;
          }
          else {
            float v102 = v100;
          }
          *char v57 = v101;
          if (v100 > v33) {
            float v102 = v33;
          }
          v57[1] = llroundf(v102);
          float v103 = v35;
          if (v98 <= v35)
          {
            float v103 = v98;
            if (v98 < v34) {
              float v103 = v34;
            }
          }
          float v104 = (float)((float)((float)(v37 * _S11) + (float)(v36 * _S10)) + (float)(v38 * _S12)) + v31;
          v57[2] = llroundf(v103);
          float v105 = v33;
          if (v104 <= v33)
          {
            float v105 = v104;
            if (v104 < v31) {
              float v105 = v31;
            }
          }
          v57[3] = llroundf(v105);
          if (v56)
          {
            *char v56 = v58;
            v56[1] = v59;
            v56 += 2;
          }
          v55 += 8;
          v54 += 2;
          v57 += 4;
        }
        while (v25 > v54);
      }
      v27 += v21;
      v28 += v22;
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *result;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = *((void *)result + 14);
  int64x2_t v12 = (void *)*((void *)result + 16);
  unint64_t v13 = *((void *)result + 13) * a2 / v9 + *((void *)result + 15);
  unint64_t v14 = (uint64_t *)*((void *)result + 17);
  unint64_t v15 = (v8 + v8 * a2) / v9;
  unint64_t v16 = (unsigned char *)v12[1];
  if (v16) {
    v16 += v14[1] * v13 + v11;
  }
  if (v15 != v10)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(result + 44);
    uint64_t v19 = v10 + v18;
    uint64_t v20 = **((void **)result + 8);
    uint64_t v21 = *v14;
    uint64_t v22 = *v12 + v21 * v13;
    uint64_t v23 = *((void *)result + 19);
    unint64_t v24 = *(void *)(result + 20);
    uint64_t v25 = v15 + v18;
    uint64_t v26 = **((void **)result + 7) + v20 * v19 + 8 * *(void *)(result + 36);
    uint64_t v27 = (unsigned __int8 *)(v22 + v11);
    uint64_t v28 = v25 - v19;
    *(float *)&unsigned int v29 = (float)*(unsigned int *)(v23 + 136);
    float v30 = *(float *)&v29 / (float)*(unsigned int *)(v23 + 128);
    LOWORD(v29) = *(_WORD *)(v23 + 144);
    float v31 = (float)v29;
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    float v32 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    float v33 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    float v34 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    float v35 = (float)LODWORD(a8);
    float v36 = *(float *)(v23 + 36);
    float v37 = *(float *)(v23 + 40);
    float v38 = *(float *)(v23 + 44);
    float v39 = *(float *)(v23 + 48) * 0.5;
    float v40 = *(float *)(v23 + 52) * 0.5;
    float v41 = *(float *)(v23 + 56) * 0.5;
    float v42 = *(float *)(v23 + 60) * 0.5;
    float v43 = *(float *)(v23 + 64) * 0.5;
    float v44 = *(float *)(v23 + 68) * 0.5;
    do
    {
      if (v24)
      {
        unint64_t v45 = 0;
        float v46 = (unsigned __int16 *)v26;
        float v47 = v16;
        uint64_t result = v27;
        do
        {
          if (v47)
          {
            char v48 = llroundf((float)(bswap32(*v46) >> 16) * 0.0038911);
            char v49 = llroundf((float)(bswap32(v46[4]) >> 16) * 0.0038911);
          }
          else
          {
            char v48 = 0;
            char v49 = 0;
          }
          float v50 = v30 * (float)(bswap32(v46[1]) >> 16);
          float v51 = v30 * (float)(bswap32(v46[2]) >> 16);
          float v52 = v30 * (float)(bswap32(v46[3]) >> 16);
          float v53 = v30 * (float)(bswap32(v46[5]) >> 16);
          float v54 = v30 * (float)(bswap32(v46[6]) >> 16);
          float v55 = v30 * (float)(bswap32(v46[7]) >> 16);
          float v56 = (float)((float)((float)(v37 * v51) + (float)(v36 * v50)) + (float)(v38 * v52)) + v31;
          float v57 = v50 + v53;
          float v58 = v51 + v54;
          float v59 = v52 + v55;
          float v60 = (float)((float)(v32 + (float)(v57 * v39)) + (float)(v58 * v40)) + (float)(v59 * v41);
          float v61 = (float)((float)(v32 + (float)(v57 * v42)) + (float)(v58 * v43)) + (float)(v59 * v44);
          if (v60 < v34) {
            float v62 = v34;
          }
          else {
            float v62 = v60;
          }
          if (v60 > v35) {
            float v62 = v35;
          }
          *uint64_t result = llroundf(v62);
          if (v56 < v31) {
            float v63 = v31;
          }
          else {
            float v63 = v56;
          }
          if (v56 > v33) {
            float v63 = v33;
          }
          result[1] = llroundf(v63);
          float v64 = v35;
          if (v61 <= v35)
          {
            float v64 = v61;
            if (v61 < v34) {
              float v64 = v34;
            }
          }
          float v65 = (float)((float)((float)(v37 * v54) + (float)(v36 * v53)) + (float)(v38 * v55)) + v31;
          result[2] = llroundf(v64);
          float v66 = v33;
          if (v65 <= v33)
          {
            float v66 = v65;
            if (v65 < v31) {
              float v66 = v31;
            }
          }
          result[3] = llroundf(v66);
          if (v47)
          {
            *float v47 = v48;
            v47[1] = v49;
            v47 += 2;
          }
          v46 += 8;
          v45 += 2;
          result += 4;
        }
        while (v24 > v45);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *result;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = *((void *)result + 14);
  int64x2_t v13 = (void *)*((void *)result + 16);
  unint64_t v14 = *((void *)result + 13) * a2 / v10 + *((void *)result + 15);
  unint64_t v15 = (uint64_t *)*((void *)result + 17);
  unint64_t v16 = (v9 + v9 * a2) / v10;
  uint64_t v17 = (unsigned char *)v13[1];
  if (v17) {
    v17 += v15[1] * v14 + v12;
  }
  if (v16 != v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(result + 44);
    uint64_t v20 = v11 + v19;
    uint64_t v21 = **((void **)result + 8);
    uint64_t v22 = *v15;
    uint64_t v23 = *v13 + v22 * v14;
    uint64_t v24 = *((void *)result + 19);
    unint64_t v25 = *(void *)(result + 20);
    uint64_t v26 = v16 + v19;
    uint64_t v27 = **((void **)result + 7) + v21 * v20 + 8 * *(void *)(result + 36);
    uint64_t v28 = (unsigned char *)(v23 + v12);
    uint64_t v29 = v26 - v20;
    LOWORD(a5) = *(_WORD *)(v24 + 144);
    LOWORD(a6) = *(_WORD *)(v24 + 146);
    LOWORD(a7) = *(_WORD *)(v24 + 148);
    LOWORD(a8) = *(_WORD *)(v24 + 150);
    LOWORD(a9) = *(_WORD *)(v24 + 152);
    float v30 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v31 = (float)LODWORD(a5);
    float v32 = (float)LODWORD(a7);
    float v33 = (float)LODWORD(a8);
    float v34 = (float)LODWORD(a9);
    float v35 = *(float *)(v24 + 40);
    float v131 = *(float *)(v24 + 36);
    float v132 = (float)LODWORD(a6);
    float v36 = *(float *)(v24 + 44);
    float v129 = *(float *)(v24 + 52) * 0.5;
    float v130 = *(float *)(v24 + 48) * 0.5;
    float v127 = *(float *)(v24 + 60) * 0.5;
    float v128 = *(float *)(v24 + 56) * 0.5;
    float v37 = *(float *)(v24 + 72);
    float v125 = *(float *)(v24 + 68) * 0.5;
    float v126 = *(float *)(v24 + 64) * 0.5;
    float v38 = *(float *)(v24 + 76);
    float v39 = *(float *)(v24 + 80);
    float v40 = *(float *)(v24 + 84);
    float v41 = *(float *)(v24 + 88);
    float v42 = *(float *)(v24 + 92);
    float v43 = *(float *)(v24 + 96);
    float v45 = *(float *)(v24 + 100);
    float v44 = *(float *)(v24 + 104);
    uint64_t v46 = v24 + 164;
    uint64_t v47 = v24 + 16548;
    uint64_t result = (unsigned __int8 *)(v24 + 32932);
    float v48 = *(float *)(v24 + 108);
    float v49 = *(float *)(v24 + 112);
    float v50 = *(float *)(v24 + 116);
    float v51 = *(float *)(v24 + 120);
    do
    {
      if (v25)
      {
        unint64_t v52 = 0;
        float v53 = v17;
        float v54 = v28;
        float v55 = (unsigned __int16 *)v27;
        do
        {
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          float v66 = (float)((float)((float)(v49 * _S15) + (float)(v48 * _S14)) + (float)(v50 * _S18))
              + (float)(v51 * fmaxf(_S14, fmaxf(_S15, _S18)));
          float v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            float v67 = v66;
            if (v66 < 0.0) {
              float v67 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          float v74 = (float)((float)((float)(v49 * _S21) + (float)(v48 * _S20)) + (float)(v50 * _S22))
              + (float)(v51 * fmaxf(_S20, fmaxf(_S21, _S22)));
          float v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          if (v53)
          {
            char v76 = llroundf((float)(bswap32(*v55) >> 16) * 0.0038911);
            char v77 = llroundf((float)(bswap32(v55[4]) >> 16) * 0.0038911);
          }
          else
          {
            char v76 = 0;
            char v77 = 0;
          }
          _H7 = *(_WORD *)(v47 + 2 * llroundf(v67));
          __asm { FCVT            S7, H7 }
          float v80 = _S14 * _S7;
          float v81 = _S15 * _S7;
          float v82 = _S18 * _S7;
          _H3 = *(_WORD *)(v47 + 2 * llroundf(v75));
          __asm { FCVT            S3, H3 }
          float v85 = _S20 * _S3;
          float v86 = _S21 * _S3;
          float v87 = _S22 * _S3;
          _S21 = (float)((float)(v38 * v81) + (float)(v80 * v37)) + (float)(v82 * v39);
          float v89 = (float)((float)(v41 * v81) + (float)(v80 * v40)) + (float)(v82 * v42);
          _S7 = (float)((float)(v45 * v81) + (float)(v80 * v43)) + (float)(v82 * v44);
          float v91 = (float)(v38 * v86) + (float)(v85 * v37);
          float v92 = (float)(v41 * v86) + (float)(v85 * v40);
          _S18 = (float)(v45 * v86) + (float)(v85 * v43);
          _S19 = v91 + (float)(v87 * v39);
          float v95 = v92 + (float)(v87 * v42);
          float v96 = _S18 + (float)(v87 * v44);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0))];
          __asm { FCVT            S18, H18 }
          LOWORD(_S21) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0))];
          __asm { FCVT            S21, H21 }
          unsigned int v99 = llroundf(fminf(fmaxf(_S7, 0.0), 8191.0));
          LOWORD(_S7) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0))];
          __asm { FCVT            S7, H7 }
          LOWORD(_S19) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0))];
          __asm { FCVT            S19, H19 }
          unsigned int v102 = llroundf(fminf(fmaxf(v96, 0.0), 8191.0));
          float v103 = (float)(v35 * _S21) + (float)(v131 * _S18);
          float v104 = (float)(v35 * _S19) + (float)(v131 * _S7);
          float v105 = _S18 + _S7;
          LOWORD(_S18) = *(_WORD *)&result[2 * v99];
          float v106 = _S21 + _S19;
          LOWORD(_S21) = *(_WORD *)&result[2 * v102];
          __asm
          {
            FCVT            S18, H18
            FCVT            S21, H21
          }
          float v109 = (float)(v103 + (float)(v36 * _S18)) + v31;
          float v110 = v104 + (float)(v36 * _S21);
          float v111 = _S18 + _S21;
          float v112 = (float)(v132 + (float)(v105 * v130)) + (float)(v106 * v129);
          float v113 = (float)(v132 + (float)(v105 * v127)) + (float)(v106 * v126);
          if (v109 < v31) {
            float v114 = v31;
          }
          else {
            float v114 = v109;
          }
          BOOL v115 = v109 <= v32;
          float v116 = v112 + (float)(v111 * v128);
          if (!v115) {
            float v114 = v32;
          }
          char v117 = llroundf(v114);
          if (v116 < v33) {
            float v118 = v33;
          }
          else {
            float v118 = v112 + (float)(v111 * v128);
          }
          if (v116 <= v34) {
            float v119 = v118;
          }
          else {
            float v119 = v34;
          }
          char v120 = llroundf(v119);
          float v121 = v113 + (float)(v111 * v125);
          if ((float)(v110 + v31) < v31) {
            float v122 = v31;
          }
          else {
            float v122 = v110 + v31;
          }
          unsigned char *v54 = v117;
          v54[1] = v120;
          if ((float)(v110 + v31) <= v32) {
            float v123 = v122;
          }
          else {
            float v123 = v32;
          }
          v54[2] = llroundf(v123);
          float v124 = v34;
          if (v121 <= v34)
          {
            float v124 = v121;
            if (v121 < v33) {
              float v124 = v33;
            }
          }
          v54[3] = llroundf(v124);
          if (v53)
          {
            unsigned char *v53 = v76;
            v53[1] = v77;
            v53 += 2;
          }
          v55 += 8;
          v52 += 2;
          v54 += 4;
        }
        while (v25 > v52);
      }
      v27 += v21;
      v28 += v22;
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *result;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = *((void *)result + 14);
  int64x2_t v13 = (void *)*((void *)result + 16);
  unint64_t v14 = *((void *)result + 13) * a2 / v10 + *((void *)result + 15);
  unint64_t v15 = (uint64_t *)*((void *)result + 17);
  unint64_t v16 = (v9 + v9 * a2) / v10;
  uint64_t v17 = (unsigned char *)v13[1];
  if (v17) {
    v17 += v15[1] * v14 + v12;
  }
  if (v16 != v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(result + 44);
    uint64_t v20 = v11 + v19;
    uint64_t v21 = **((void **)result + 8);
    uint64_t v22 = *v15;
    uint64_t v23 = *v13 + v22 * v14;
    uint64_t v24 = *((void *)result + 19);
    unint64_t v25 = *(void *)(result + 20);
    uint64_t v26 = v16 + v19;
    uint64_t v27 = **((void **)result + 7) + v21 * v20 + 8 * *(void *)(result + 36);
    uint64_t v28 = (unsigned char *)(v23 + v12);
    uint64_t v29 = v26 - v20;
    LOWORD(a5) = *(_WORD *)(v24 + 144);
    LOWORD(a6) = *(_WORD *)(v24 + 146);
    LOWORD(a7) = *(_WORD *)(v24 + 148);
    LOWORD(a8) = *(_WORD *)(v24 + 150);
    LOWORD(a9) = *(_WORD *)(v24 + 152);
    float v30 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v31 = (float)LODWORD(a5);
    float v32 = (float)LODWORD(a6);
    float v33 = (float)LODWORD(a7);
    float v34 = (float)LODWORD(a8);
    float v35 = (float)LODWORD(a9);
    float v36 = *(float *)(v24 + 36);
    float v37 = *(float *)(v24 + 40);
    float v38 = *(float *)(v24 + 44);
    float v112 = *(float *)(v24 + 48) * 0.5;
    float v39 = *(float *)(v24 + 52) * 0.5;
    float v40 = *(float *)(v24 + 56) * 0.5;
    float v41 = *(float *)(v24 + 60) * 0.5;
    float v42 = *(float *)(v24 + 64) * 0.5;
    float v43 = *(float *)(v24 + 72);
    float v44 = *(float *)(v24 + 68) * 0.5;
    float v45 = *(float *)(v24 + 76);
    float v46 = *(float *)(v24 + 80);
    float v47 = *(float *)(v24 + 84);
    float v48 = *(float *)(v24 + 88);
    float v49 = *(float *)(v24 + 92);
    float v50 = *(float *)(v24 + 96);
    uint64_t v51 = v24 + 164;
    uint64_t v52 = v24 + 16548;
    uint64_t result = (unsigned __int8 *)&unk_193E80000;
    float v53 = *(float *)(v24 + 100);
    float v54 = *(float *)(v24 + 104);
    do
    {
      if (v25)
      {
        unint64_t v55 = 0;
        float v56 = (unsigned __int16 *)v27;
        float v57 = v17;
        float v58 = v28;
        do
        {
          if (v57)
          {
            char v59 = llroundf((float)(bswap32(*v56) >> 16) * 0.0038911);
            char v60 = llroundf((float)(bswap32(v56[4]) >> 16) * 0.0038911);
          }
          else
          {
            char v59 = 0;
            char v60 = 0;
          }
          _H10 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v56[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v56[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v56[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v56[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v56[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          float v75 = (float)((float)(v45 * _S11) + (float)(_S10 * v43)) + (float)(_S12 * v46);
          float v76 = (float)((float)(v48 * _S11) + (float)(_S10 * v47)) + (float)(_S12 * v49);
          _S10 = (float)((float)(v53 * _S11) + (float)(_S10 * v50)) + (float)(_S12 * v54);
          float v78 = (float)(v45 * _S14) + (float)(_S13 * v43);
          float v79 = (float)(v48 * _S14) + (float)(_S13 * v47);
          float v80 = (float)(v53 * _S14) + (float)(_S13 * v50);
          LOWORD(_S14) = *(_WORD *)(v51 + 2
                                        * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v56[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _S11 = v78 + (float)(_S14 * v46);
          float v83 = v79 + (float)(_S14 * v49);
          float v84 = v80 + (float)(_S14 * v54);
          LOWORD(_S14) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          unsigned int v85 = llroundf(fminf(fmaxf(v76, 0.0), 8191.0));
          __asm { FCVT            S18, H14 }
          LOWORD(_S14) = *(_WORD *)(v52 + 2 * v85);
          __asm { FCVT            S14, H14 }
          unsigned int v88 = llroundf(fminf(fmaxf(_S10, 0.0), 8191.0));
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          unsigned int v91 = llroundf(fminf(fmaxf(v84, 0.0), 8191.0));
          float v92 = (float)(v37 * _S14) + (float)(v36 * _S18);
          float v93 = (float)(v37 * _S11) + (float)(v36 * _S10);
          float v94 = _S18 + _S10;
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * v88);
          float v95 = _S14 + _S11;
          LOWORD(_S14) = *(_WORD *)(v52 + 2 * v91);
          __asm
          {
            FCVT            S10, H10
            FCVT            S14, H14
          }
          float v98 = (float)(v92 + (float)(v38 * _S10)) + v31;
          float v99 = v93 + (float)(v38 * _S14);
          float v100 = _S10 + _S14;
          float v101 = (float)(v32 + (float)(v94 * v112)) + (float)(v95 * v39);
          float v102 = (float)(v32 + (float)(v94 * v41)) + (float)(v95 * v42);
          if (v98 < v31) {
            float v103 = v31;
          }
          else {
            float v103 = v98;
          }
          BOOL v104 = v98 <= v33;
          float v105 = v101 + (float)(v100 * v40);
          if (!v104) {
            float v103 = v33;
          }
          char v106 = llroundf(v103);
          if (v105 < v34) {
            float v107 = v34;
          }
          else {
            float v107 = v101 + (float)(v100 * v40);
          }
          if (v105 > v35) {
            float v107 = v35;
          }
          char v108 = llroundf(v107);
          float v109 = v102 + (float)(v100 * v44);
          if ((float)(v99 + v31) < v31) {
            float v110 = v31;
          }
          else {
            float v110 = v99 + v31;
          }
          unsigned char *v58 = v106;
          v58[1] = v108;
          if ((float)(v99 + v31) > v33) {
            float v110 = v33;
          }
          v58[2] = llroundf(v110);
          float v111 = v35;
          if (v109 <= v35)
          {
            float v111 = v109;
            if (v109 < v34) {
              float v111 = v34;
            }
          }
          v58[3] = llroundf(v111);
          if (v57)
          {
            *float v57 = v59;
            v57[1] = v60;
            v57 += 2;
          }
          v56 += 8;
          v55 += 2;
          v58 += 4;
        }
        while (v25 > v55);
      }
      v27 += v21;
      v28 += v22;
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *result;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = *((void *)result + 14);
  int64x2_t v12 = (void *)*((void *)result + 16);
  unint64_t v13 = *((void *)result + 13) * a2 / v9 + *((void *)result + 15);
  unint64_t v14 = (uint64_t *)*((void *)result + 17);
  unint64_t v15 = (v8 + v8 * a2) / v9;
  unint64_t v16 = (unsigned char *)v12[1];
  if (v16) {
    v16 += v14[1] * v13 + v11;
  }
  if (v15 != v10)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(result + 44);
    uint64_t v19 = v10 + v18;
    uint64_t v20 = **((void **)result + 8);
    uint64_t v21 = *v14;
    uint64_t v22 = *v12 + v21 * v13;
    uint64_t v23 = *((void *)result + 19);
    unint64_t v24 = *(void *)(result + 20);
    uint64_t v25 = v15 + v18;
    uint64_t v26 = **((void **)result + 7) + v20 * v19 + 8 * *(void *)(result + 36);
    uint64_t v27 = (unsigned __int8 *)(v22 + v11);
    uint64_t v28 = v25 - v19;
    *(float *)&unsigned int v29 = (float)*(unsigned int *)(v23 + 136);
    float v30 = *(float *)&v29 / (float)*(unsigned int *)(v23 + 128);
    LOWORD(v29) = *(_WORD *)(v23 + 144);
    float v31 = (float)v29;
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    float v32 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    float v33 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    float v34 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    float v35 = (float)LODWORD(a8);
    float v36 = *(float *)(v23 + 36);
    float v37 = *(float *)(v23 + 40);
    float v38 = *(float *)(v23 + 44);
    float v39 = *(float *)(v23 + 48) * 0.5;
    float v40 = *(float *)(v23 + 52) * 0.5;
    float v41 = *(float *)(v23 + 56) * 0.5;
    float v42 = *(float *)(v23 + 60) * 0.5;
    float v43 = *(float *)(v23 + 64) * 0.5;
    float v44 = *(float *)(v23 + 68) * 0.5;
    do
    {
      if (v24)
      {
        unint64_t v45 = 0;
        float v46 = (unsigned __int16 *)v26;
        float v47 = v16;
        uint64_t result = v27;
        do
        {
          if (v47)
          {
            char v48 = llroundf((float)(bswap32(*v46) >> 16) * 0.0038911);
            char v49 = llroundf((float)(bswap32(v46[4]) >> 16) * 0.0038911);
          }
          else
          {
            char v48 = 0;
            char v49 = 0;
          }
          float v50 = v30 * (float)(bswap32(v46[1]) >> 16);
          float v51 = v30 * (float)(bswap32(v46[2]) >> 16);
          float v52 = v30 * (float)(bswap32(v46[3]) >> 16);
          float v53 = v30 * (float)(bswap32(v46[5]) >> 16);
          float v54 = v30 * (float)(bswap32(v46[6]) >> 16);
          float v55 = v30 * (float)(bswap32(v46[7]) >> 16);
          float v56 = (float)((float)((float)(v37 * v51) + (float)(v36 * v50)) + (float)(v38 * v52)) + v31;
          float v57 = (float)((float)((float)(v37 * v54) + (float)(v36 * v53)) + (float)(v38 * v55)) + v31;
          float v58 = v50 + v53;
          float v59 = v51 + v54;
          float v60 = v52 + v55;
          float v61 = (float)((float)(v32 + (float)(v58 * v39)) + (float)(v59 * v40)) + (float)(v60 * v41);
          float v62 = (float)(v32 + (float)(v58 * v42)) + (float)(v59 * v43);
          if (v56 < v31) {
            float v63 = v31;
          }
          else {
            float v63 = v56;
          }
          if (v56 > v33) {
            float v63 = v33;
          }
          float v64 = v62 + (float)(v60 * v44);
          *uint64_t result = llroundf(v63);
          if (v61 < v34) {
            float v65 = v34;
          }
          else {
            float v65 = v61;
          }
          if (v61 > v35) {
            float v65 = v35;
          }
          result[1] = llroundf(v65);
          if (v57 < v31) {
            float v66 = v31;
          }
          else {
            float v66 = v57;
          }
          if (v57 > v33) {
            float v66 = v33;
          }
          result[2] = llroundf(v66);
          float v67 = v35;
          if (v64 <= v35)
          {
            float v67 = v64;
            if (v64 < v34) {
              float v67 = v34;
            }
          }
          result[3] = llroundf(v67);
          if (v47)
          {
            *float v47 = v48;
            v47[1] = v49;
            v47 += 2;
          }
          v46 += 8;
          v45 += 2;
          result += 4;
        }
        while (v24 > v45);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = (uint64_t *)*((void *)result + 17);
    uint64_t v18 = (void *)*((void *)result + 7);
    uint64_t v19 = **((void **)result + 8);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    float v23 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 146);
    float v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 148);
    float v26 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 150);
    float v124 = (float)LODWORD(a8);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v27 = (float)LODWORD(a8);
    float v28 = *(float *)(v16 + 40);
    float v125 = *(float *)(v16 + 36);
    float v29 = *(float *)(v16 + 44);
    float v123 = *(float *)(v16 + 48) * 0.5;
    float v122 = *(float *)(v16 + 52) * 0.5;
    float v121 = *(float *)(v16 + 56) * 0.5;
    float v120 = *(float *)(v16 + 60) * 0.5;
    float v119 = *(float *)(v16 + 64) * 0.5;
    float v30 = *(float *)(v16 + 72);
    float v118 = *(float *)(v16 + 68) * 0.5;
    float v31 = *(float *)(v16 + 76);
    float v32 = *(float *)(v16 + 80);
    float v33 = *(float *)(v16 + 84);
    float v34 = *(float *)(v16 + 88);
    float v35 = *(float *)(v16 + 92);
    float v36 = *(float *)(v16 + 96);
    float v38 = *(float *)(v16 + 100);
    float v37 = *(float *)(v16 + 104);
    uint64_t v39 = v16 + 164;
    uint64_t v40 = v16 + 16548;
    uint64_t v41 = v16 + 32932;
    float v42 = *(float *)(v16 + 108);
    float v43 = *(float *)(v16 + 112);
    float v44 = *(float *)(v16 + 116);
    float v45 = *(float *)(v16 + 120);
    uint64_t v46 = *((void *)result + 14);
    float v47 = (void *)*((void *)result + 16);
    unint64_t v48 = *((void *)result + 13) * a2 / v9 + *((void *)result + 15);
    uint64_t v49 = *(void *)(result + 36);
    unsigned int v50 = *(unsigned __int8 *)(v16 + 132);
    if (v50 >= 0x11) {
      char v51 = 0;
    }
    else {
      char v51 = 16 - v50;
    }
    uint64_t v52 = v47[2];
    if (v52) {
      uint64_t result = (unsigned __int8 *)(v52 + v48 * v22 + 2 * v46);
    }
    else {
      uint64_t result = 0;
    }
    float v55 = v47;
    uint64_t v54 = *v47;
    uint64_t v53 = v55[1];
    _ZF = v53 == 0;
    uint64_t v57 = v53 + v48 * v21 + 2 * v46;
    if (_ZF) {
      uint64_t v57 = 0;
    }
    uint64_t v58 = v54 + v48 * v20 + 2 * v46;
    uint64_t v59 = *v18 + v19 * v14 + 8 * v49;
    do
    {
      if (v13)
      {
        unint64_t v60 = 0;
        float v61 = result;
        float v62 = (_WORD *)v58;
        float v63 = (unsigned __int16 *)v59;
        do
        {
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v63[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v63[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v63[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          float v73 = (float)((float)((float)(v43 * _S18) + (float)(v42 * _S14)) + (float)(v44 * _S19))
              + (float)(v45 * fmaxf(_S14, fmaxf(_S18, _S19)));
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v63[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v63[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v63[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H5 }
          float v81 = (float)((float)((float)(v43 * _S20) + (float)(v42 * _S15)) + (float)(v44 * _S21))
              + (float)(v45 * fmaxf(_S15, fmaxf(_S20, _S21)));
          float v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          _H22 = *(_WORD *)(v40 + 2 * llroundf(v74));
          __asm { FCVT            S22, H22 }
          _S18 = _S18 * _S22;
          float v86 = _S19 * _S22;
          _S3 = (float)((float)(v34 * _S18) + (float)((float)(_S14 * _S22) * v33)) + (float)(v86 * v35);
          unsigned int v88 = llroundf(fminf(fmaxf((float)((float)(v31 * _S18) + (float)((float)(_S14 * _S22) * v30)) + (float)(v86 * v32), 0.0), 8191.0));
          float v89 = (float)((float)(v38 * _S18) + (float)((float)(_S14 * _S22) * v36)) + (float)(v86 * v37);
          LOWORD(_S18) = *(_WORD *)(v41 + 2 * v88);
          __asm { FCVT            S14, H18 }
          LOWORD(_S3) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          LOWORD(_S3) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          float v93 = (float)((float)((float)(v28 * _S18) + (float)(v125 * _S14)) + (float)(v29 * _S19)) + v24;
          float v94 = v26;
          if (v93 <= v26)
          {
            float v94 = (float)((float)((float)(v28 * _S18) + (float)(v125 * _S14)) + (float)(v29 * _S19)) + v24;
            if (v93 < v24) {
              float v94 = v24;
            }
          }
          unsigned int v95 = *v63;
          unsigned int v96 = v63[4];
          _H3 = *(_WORD *)(v40 + 2 * llroundf(v82));
          __asm { FCVT            S3, H3 }
          _S5 = _S15 * _S3;
          float v100 = _S20 * _S3;
          float v101 = _S21 * _S3;
          float v102 = (float)((float)(v31 * v100) + (float)(_S5 * v30)) + (float)(v101 * v32);
          float v103 = (float)((float)(v34 * v100) + (float)(_S5 * v33)) + (float)(v101 * v35);
          _S3 = (float)((float)(v38 * v100) + (float)(_S5 * v36)) + (float)(v101 * v37);
          LOWORD(_S5) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          LOWORD(_S5) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H5
            FCVT            S21, H3
          }
          float v108 = (float)((float)((float)(v28 * _S24) + (float)(v125 * _S20)) + (float)(v29 * _S21)) + v24;
          *float v62 = llroundf(v94) << v51;
          float v109 = v26;
          if (v108 <= v26)
          {
            float v109 = (float)((float)((float)(v28 * _S24) + (float)(v125 * _S20)) + (float)(v29 * _S21)) + v24;
            if (v108 < v24) {
              float v109 = v24;
            }
          }
          v62[1] = llroundf(v109) << v51;
          float v110 = _S14 + _S20;
          float v111 = _S18 + _S24;
          float v112 = _S19 + _S21;
          float v113 = (float)((float)(v25 + (float)(v110 * v123)) + (float)(v111 * v122)) + (float)(v112 * v121);
          float v114 = v27;
          if (v113 <= v27)
          {
            float v114 = (float)((float)(v25 + (float)(v110 * v123)) + (float)(v111 * v122)) + (float)(v112 * v121);
            if (v113 < v124) {
              float v114 = v124;
            }
          }
          BOOL v115 = (_WORD *)(v57 + 2 * v60);
          float v116 = (float)((float)(v25 + (float)(v110 * v120)) + (float)(v111 * v119)) + (float)(v112 * v118);
          *BOOL v115 = llroundf(v114) << v51;
          float v117 = v27;
          if (v116 <= v27)
          {
            float v117 = v116;
            if (v116 < v124) {
              float v117 = v124;
            }
          }
          v115[1] = llroundf(v117) << v51;
          if (v61)
          {
            *float v61 = bswap32(v95) >> 16;
            v61[1] = bswap32(v96) >> 16;
            v61 += 2;
          }
          v63 += 8;
          v60 += 2;
          v62 += 2;
        }
        while (v13 > v60);
      }
      v59 += v19;
      v58 += v20;
      v57 += v21;
      result += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    unint64_t v14 = *(void *)(result + 20);
    unint64_t v15 = v11 + *(void *)(result + 44);
    unint64_t v16 = v12 - v11;
    uint64_t v17 = *((void *)result + 19);
    uint64_t v18 = (uint64_t *)*((void *)result + 17);
    uint64_t v19 = (void *)*((void *)result + 7);
    uint64_t v20 = **((void **)result + 8);
    uint64_t v21 = *v18;
    uint64_t v22 = v18[1];
    uint64_t v23 = v18[2];
    float v24 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    float v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    float v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    float v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    float v28 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    float v29 = (float)LODWORD(a9);
    float v30 = *(float *)(v17 + 36);
    float v31 = *(float *)(v17 + 40);
    float v32 = *(float *)(v17 + 44);
    float v106 = *(float *)(v17 + 52) * 0.5;
    float v107 = *(float *)(v17 + 48) * 0.5;
    float v105 = *(float *)(v17 + 56) * 0.5;
    float v33 = *(float *)(v17 + 60) * 0.5;
    float v34 = *(float *)(v17 + 64) * 0.5;
    float v35 = *(float *)(v17 + 72);
    float v36 = *(float *)(v17 + 68) * 0.5;
    float v37 = *(float *)(v17 + 76);
    float v38 = *(float *)(v17 + 80);
    float v39 = *(float *)(v17 + 84);
    float v40 = *(float *)(v17 + 88);
    float v41 = *(float *)(v17 + 92);
    float v42 = *(float *)(v17 + 96);
    float v44 = *(float *)(v17 + 100);
    float v43 = *(float *)(v17 + 104);
    uint64_t v45 = v17 + 164;
    uint64_t v46 = v17 + 16548;
    uint64_t v47 = *((void *)result + 14);
    unint64_t v48 = (uint64_t *)*((void *)result + 16);
    unint64_t v49 = *((void *)result + 13) * a2 / v10 + *((void *)result + 15);
    uint64_t v50 = *(void *)(result + 36);
    unsigned int v51 = *(unsigned __int8 *)(v17 + 132);
    if (v51 >= 0x11) {
      char v52 = 0;
    }
    else {
      char v52 = 16 - v51;
    }
    uint64_t v53 = v48[2];
    if (v53) {
      uint64_t v54 = v53 + v49 * v23 + 2 * v47;
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v56 = *v48;
    uint64_t v55 = *(void *)(*((void *)result + 16) + 8);
    _ZF = v55 == 0;
    uint64_t result = (unsigned __int8 *)(v55 + v49 * v22 + 2 * v47);
    if (_ZF) {
      uint64_t result = 0;
    }
    uint64_t v58 = v56 + v49 * v21 + 2 * v47;
    uint64_t v59 = *v19 + v20 * v15 + 8 * v50;
    do
    {
      if (v14)
      {
        unint64_t v60 = 0;
        float v61 = (unsigned __int16 *)v59;
        float v62 = (_WORD *)v54;
        float v63 = (_WORD *)v58;
        do
        {
          _H10 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v61[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H19 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v61[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H18 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v61[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          float v73 = (float)((float)(v37 * _S19) + (float)(_S10 * v35)) + (float)(_S18 * v38);
          float v74 = (float)((float)(v40 * _S19) + (float)(_S10 * v39)) + (float)(_S18 * v41);
          _S18 = (float)((float)(v44 * _S19) + (float)(_S10 * v42)) + (float)(_S18 * v43);
          LOWORD(_S19) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S10, H19 }
          LOWORD(_S19) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S11, H19 }
          LOWORD(_S18) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S12, H18 }
          float v79 = (float)((float)((float)(v31 * _S11) + (float)(v30 * _S10)) + (float)(v32 * _S12)) + v25;
          float v80 = v27;
          if (v79 <= v27)
          {
            float v80 = (float)((float)((float)(v31 * _S11) + (float)(v30 * _S10)) + (float)(v32 * _S12)) + v25;
            if (v79 < v25) {
              float v80 = v25;
            }
          }
          unsigned int v81 = *v61;
          unsigned int v82 = v61[4];
          _H18 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v61[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v61[6]) >> 16), 0.0), 8191.0)));
          _H14 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v61[7]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H19
            FCVT            S14, H14
          }
          float v89 = (float)((float)(v37 * _S19) + (float)(_S18 * v35)) + (float)(_S14 * v38);
          _S20 = (float)((float)(v40 * _S19) + (float)(_S18 * v39)) + (float)(_S14 * v41);
          float v91 = (float)((float)(v44 * _S19) + (float)(_S18 * v42)) + (float)(_S14 * v43);
          LOWORD(_S19) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S14, H19 }
          LOWORD(_S19) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          LOWORD(_S20) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H19
            FCVT            S15, H20
          }
          float v95 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S14)) + (float)(v32 * _S15)) + v25;
          *float v63 = llroundf(v80) << v52;
          float v96 = v27;
          if (v95 <= v27)
          {
            float v96 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S14)) + (float)(v32 * _S15)) + v25;
            if (v95 < v25) {
              float v96 = v25;
            }
          }
          v63[1] = llroundf(v96) << v52;
          float v97 = _S10 + _S14;
          float v98 = _S11 + _S18;
          float v99 = _S12 + _S15;
          float v100 = (float)((float)(v26 + (float)(v97 * v107)) + (float)(v98 * v106))
               + (float)((float)(_S12 + _S15) * v105);
          float v101 = v29;
          if (v100 <= v29)
          {
            float v101 = v100;
            if (v100 < v28) {
              float v101 = v28;
            }
          }
          float v102 = &result[2 * v60];
          float v103 = (float)((float)(v26 + (float)(v97 * v33)) + (float)(v98 * v34)) + (float)(v99 * v36);
          *(_WORD *)float v102 = llroundf(v101) << v52;
          float v104 = v29;
          if (v103 <= v29)
          {
            float v104 = v103;
            if (v103 < v28) {
              float v104 = v28;
            }
          }
          *((_WORD *)v102 + 1) = llroundf(v104) << v52;
          if (v62)
          {
            *float v62 = bswap32(v81) >> 16;
            v62[1] = bswap32(v82) >> 16;
            v62 += 2;
          }
          v61 += 8;
          v60 += 2;
          v63 += 2;
        }
        while (v14 > v60);
      }
      v59 += v20;
      v58 += v21;
      result += v22;
      v54 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = (uint64_t *)*((void *)result + 17);
    uint64_t v18 = (void *)*((void *)result + 7);
    uint64_t v19 = **((void **)result + 8);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    *(float *)&unsigned int v23 = (float)*(unsigned int *)(v16 + 136);
    float v24 = *(float *)&v23 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(v23) = *(_WORD *)(v16 + 144);
    float v25 = (float)v23;
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v26 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v27 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v28 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v29 = (float)LODWORD(a8);
    float v30 = *(float *)(v16 + 36);
    float v31 = *(float *)(v16 + 40);
    float v32 = *(float *)(v16 + 44);
    float v33 = *(float *)(v16 + 48) * 0.5;
    float v34 = *(float *)(v16 + 52) * 0.5;
    float v35 = *(float *)(v16 + 56) * 0.5;
    float v36 = *(float *)(v16 + 60) * 0.5;
    float v37 = *(float *)(v16 + 64) * 0.5;
    float v38 = *(float *)(v16 + 68) * 0.5;
    uint64_t v39 = *((void *)result + 14);
    unint64_t v40 = *((void *)result + 13) * a2;
    float v41 = (void *)*((void *)result + 16);
    unint64_t v42 = v40 / v9 + *((void *)result + 15);
    uint64_t v43 = *(void *)(result + 36);
    unsigned int v44 = *(unsigned __int8 *)(v16 + 132);
    if (v44 >= 0x11) {
      char v45 = 0;
    }
    else {
      char v45 = 16 - v44;
    }
    uint64_t v46 = v41[2];
    if (v46) {
      uint64_t v47 = v46 + v42 * v22 + 2 * v39;
    }
    else {
      uint64_t v47 = 0;
    }
    uint64_t v50 = v41;
    uint64_t v48 = *v41;
    uint64_t v49 = v50[1];
    BOOL v51 = v49 == 0;
    uint64_t v52 = v49 + v42 * v21 + 2 * v39;
    if (v51) {
      uint64_t v52 = 0;
    }
    uint64_t v53 = v48 + v42 * v20 + 2 * v39;
    uint64_t result = (unsigned __int8 *)(*v18 + v19 * v14 + 8 * v43);
    char v54 = v45;
    do
    {
      if (v13)
      {
        unint64_t v55 = 0;
        uint64_t v56 = (unsigned __int16 *)result;
        uint64_t v57 = (_WORD *)v47;
        uint64_t v58 = (_WORD *)v53;
        do
        {
          float v59 = v24 * (float)(bswap32(v56[1]) >> 16);
          float v60 = v24 * (float)(bswap32(v56[2]) >> 16);
          float v61 = v24 * (float)(bswap32(v56[3]) >> 16);
          float v62 = (float)((float)((float)(v31 * v60) + (float)(v30 * v59)) + (float)(v32 * v61)) + v25;
          float v63 = v27;
          if (v62 <= v27)
          {
            float v63 = (float)((float)((float)(v31 * v60) + (float)(v30 * v59)) + (float)(v32 * v61)) + v25;
            if (v62 < v25) {
              float v63 = v25;
            }
          }
          unsigned int v64 = *v56;
          unsigned int v65 = v56[4];
          float v66 = v24 * (float)(bswap32(v56[5]) >> 16);
          float v67 = v24 * (float)(bswap32(v56[6]) >> 16);
          float v68 = v24 * (float)(bswap32(v56[7]) >> 16);
          float v69 = (float)((float)((float)(v31 * v67) + (float)(v30 * v66)) + (float)(v32 * v68)) + v25;
          _WORD *v58 = llroundf(v63) << v54;
          float v70 = v27;
          if (v69 <= v27)
          {
            float v70 = (float)((float)((float)(v31 * v67) + (float)(v30 * v66)) + (float)(v32 * v68)) + v25;
            if (v69 < v25) {
              float v70 = v25;
            }
          }
          v58[1] = llroundf(v70) << v54;
          float v71 = v59 + v66;
          float v72 = v60 + v67;
          float v73 = v61 + v68;
          float v74 = (float)((float)(v26 + (float)(v71 * v33)) + (float)(v72 * v34)) + (float)(v73 * v35);
          float v75 = v29;
          if (v74 <= v29)
          {
            float v75 = (float)((float)(v26 + (float)(v71 * v33)) + (float)(v72 * v34)) + (float)(v73 * v35);
            if (v74 < v28) {
              float v75 = v28;
            }
          }
          float v76 = (_WORD *)(v52 + 2 * v55);
          float v77 = (float)((float)(v26 + (float)(v71 * v36)) + (float)(v72 * v37)) + (float)(v73 * v38);
          *float v76 = llroundf(v75) << v54;
          float v78 = v29;
          if (v77 <= v29)
          {
            float v78 = v77;
            if (v77 < v28) {
              float v78 = v28;
            }
          }
          v76[1] = llroundf(v78) << v54;
          if (v57)
          {
            *uint64_t v57 = bswap32(v64) >> 16;
            v57[1] = bswap32(v65) >> 16;
            v57 += 2;
          }
          v56 += 8;
          v55 += 2;
          v58 += 2;
        }
        while (v13 > v55);
      }
      result += v19;
      v53 += v20;
      v52 += v21;
      v47 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *result;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = *((void *)result + 14);
  int64x2_t v13 = (void *)*((void *)result + 16);
  unint64_t v14 = *((void *)result + 13) * a2 / v10 + *((void *)result + 15);
  unint64_t v15 = (uint64_t *)*((void *)result + 17);
  unint64_t v16 = (v9 + v9 * a2) / v10;
  uint64_t v17 = (_WORD *)v13[1];
  if (v17) {
    uint64_t v17 = (_WORD *)((char *)v17 + 2 * v12 + v15[1] * v14);
  }
  if (v16 != v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(result + 44);
    uint64_t v20 = v11 + v19;
    uint64_t v21 = **((void **)result + 8);
    uint64_t v22 = *v15;
    uint64_t v23 = *v13 + v22 * v14;
    uint64_t v24 = *((void *)result + 19);
    unint64_t v25 = *(void *)(result + 20);
    uint64_t v26 = v16 + v19;
    uint64_t v27 = **((void **)result + 7) + v21 * v20 + 8 * *(void *)(result + 36);
    float v28 = (_WORD *)(v23 + 2 * v12);
    uint64_t v29 = v26 - v20;
    LOWORD(a5) = *(_WORD *)(v24 + 144);
    LOWORD(a6) = *(_WORD *)(v24 + 146);
    LOWORD(a7) = *(_WORD *)(v24 + 148);
    LOWORD(a8) = *(_WORD *)(v24 + 150);
    LOWORD(a9) = *(_WORD *)(v24 + 152);
    float v30 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v31 = (float)LODWORD(a5);
    float v32 = (float)LODWORD(a6);
    float v33 = (float)LODWORD(a7);
    float v34 = (float)LODWORD(a8);
    float v35 = (float)LODWORD(a9);
    float v36 = *(float *)(v24 + 36);
    float v37 = *(float *)(v24 + 40);
    float v38 = *(float *)(v24 + 44);
    float v128 = *(float *)(v24 + 48) * 0.5;
    float v127 = *(float *)(v24 + 52) * 0.5;
    float v126 = *(float *)(v24 + 56) * 0.5;
    float v125 = *(float *)(v24 + 60) * 0.5;
    float v124 = *(float *)(v24 + 64) * 0.5;
    float v39 = *(float *)(v24 + 72);
    float v123 = *(float *)(v24 + 68) * 0.5;
    float v40 = *(float *)(v24 + 76);
    float v41 = *(float *)(v24 + 80);
    float v42 = *(float *)(v24 + 84);
    float v43 = *(float *)(v24 + 88);
    float v44 = *(float *)(v24 + 92);
    float v45 = *(float *)(v24 + 96);
    float v47 = *(float *)(v24 + 100);
    float v46 = *(float *)(v24 + 104);
    uint64_t v48 = v24 + 164;
    uint64_t v49 = v24 + 16548;
    uint64_t result = (unsigned __int8 *)(v24 + 32932);
    float v50 = *(float *)(v24 + 108);
    float v51 = *(float *)(v24 + 112);
    float v52 = *(float *)(v24 + 116);
    float v53 = *(float *)(v24 + 120);
    do
    {
      if (v25)
      {
        unint64_t v54 = 0;
        unint64_t v55 = v17;
        uint64_t v56 = v28;
        uint64_t v57 = (unsigned __int16 *)v27;
        do
        {
          _H0 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v57[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v57[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          _H0 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v57[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          float v68 = (float)((float)((float)(v51 * _S15) + (float)(v50 * _S14)) + (float)(v52 * _S18))
              + (float)(v53 * fmaxf(_S14, fmaxf(_S15, _S18)));
          float v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            float v69 = v68;
            if (v68 < 0.0) {
              float v69 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v57[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S19, H0 }
          _H0 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v57[6]) >> 16), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v57[7]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H0
            FCVT            S21, H21
          }
          _H0 = *(_WORD *)(v49 + 2 * llroundf(v69));
          __asm { FCVT            S0, H0 }
          float v78 = _S14 * _S0;
          float v79 = _S15 * _S0;
          float v80 = _S18 * _S0;
          float v81 = (float)((float)((float)(v51 * _S22) + (float)(v50 * _S19)) + (float)(v52 * _S21))
              + (float)(v53 * fmaxf(_S19, fmaxf(_S22, _S21)));
          float v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v49 + 2 * llroundf(v82));
          __asm { FCVT            S0, H0 }
          float v85 = _S19 * _S0;
          float v86 = _S22 * _S0;
          float v87 = _S21 * _S0;
          _S21 = (float)((float)(v40 * v79) + (float)(v78 * v39)) + (float)(v80 * v41);
          float v89 = (float)((float)(v43 * v79) + (float)(v78 * v42)) + (float)(v80 * v44);
          _S18 = (float)((float)(v47 * v79) + (float)(v78 * v45)) + (float)(v80 * v46);
          float v91 = (float)(v40 * v86) + (float)(v85 * v39);
          float v92 = (float)(v43 * v86) + (float)(v85 * v42);
          _S19 = (float)(v47 * v86) + (float)(v85 * v45);
          _S20 = v91 + (float)(v87 * v41);
          float v95 = v92 + (float)(v87 * v44);
          float v96 = _S19 + (float)(v87 * v46);
          LOWORD(_S19) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0))];
          __asm { FCVT            S19, H19 }
          LOWORD(_S21) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0))];
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0))];
          __asm
          {
            FCVT            S21, H21
            FCVT            S15, H18
          }
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0))];
          __asm { FCVT            S18, H18 }
          LOWORD(_S20) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0))];
          __asm { FCVT            S14, H20 }
          unsigned int v102 = llroundf(fminf(fmaxf(v96, 0.0), 8191.0));
          float v103 = (float)(v37 * _S21) + (float)(v36 * _S19);
          _S19 = _S19 + _S18;
          float v105 = _S21 + _S14;
          float v106 = (float)(v32 + (float)(_S19 * v128)) + (float)(v105 * v127);
          float v107 = (float)(v32 + (float)(_S19 * v125)) + (float)(v105 * v124);
          LOWORD(_S19) = *(_WORD *)&result[2 * v102];
          __asm { FCVT            S19, H19 }
          float v109 = v103 + (float)(v38 * _S15);
          float v110 = _S15 + _S19;
          float v111 = v106 + (float)((float)(_S15 + _S19) * v126);
          float v112 = v107 + (float)(v110 * v123);
          if (v111 < v31) {
            float v113 = v31;
          }
          else {
            float v113 = v111;
          }
          float v114 = v109 + v31;
          if (v111 > v33) {
            float v113 = v33;
          }
          __int16 v115 = llroundf(v113);
          if (v114 < v34) {
            float v116 = v34;
          }
          else {
            float v116 = v114;
          }
          unsigned int v117 = *v57;
          unsigned int v118 = v57[4];
          *uint64_t v56 = v115;
          if (v114 <= v35) {
            float v119 = v116;
          }
          else {
            float v119 = v35;
          }
          v56[1] = llroundf(v119);
          float v120 = v33;
          if (v112 <= v33)
          {
            float v120 = v112;
            if (v112 < v31) {
              float v120 = v31;
            }
          }
          float v121 = (float)((float)(v37 * _S14) + (float)(v36 * _S18)) + (float)(v38 * _S19);
          v56[2] = llroundf(v120);
          float v122 = v35;
          if ((float)(v121 + v31) <= v35)
          {
            float v122 = v121 + v31;
            if ((float)(v121 + v31) < v34) {
              float v122 = v34;
            }
          }
          v56[3] = llroundf(v122);
          if (v55)
          {
            *unint64_t v55 = bswap32(v117) >> 16;
            v55[1] = bswap32(v118) >> 16;
            v55 += 2;
          }
          v57 += 8;
          v54 += 2;
          v56 += 4;
        }
        while (v25 > v54);
      }
      v27 += v21;
      float v28 = (_WORD *)((char *)v28 + v22);
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *result;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = *((void *)result + 14);
  int64x2_t v13 = (void *)*((void *)result + 16);
  unint64_t v14 = *((void *)result + 13) * a2 / v10 + *((void *)result + 15);
  unint64_t v15 = (uint64_t *)*((void *)result + 17);
  unint64_t v16 = (v9 + v9 * a2) / v10;
  uint64_t v17 = (_WORD *)v13[1];
  if (v17) {
    uint64_t v17 = (_WORD *)((char *)v17 + 2 * v12 + v15[1] * v14);
  }
  if (v16 != v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(result + 44);
    uint64_t v20 = v11 + v19;
    uint64_t v21 = **((void **)result + 8);
    uint64_t v22 = *v15;
    uint64_t v23 = *v13 + v22 * v14;
    uint64_t v24 = *((void *)result + 19);
    unint64_t v25 = *(void *)(result + 20);
    uint64_t v26 = v16 + v19;
    uint64_t v27 = **((void **)result + 7) + v21 * v20 + 8 * *(void *)(result + 36);
    float v28 = (_WORD *)(v23 + 2 * v12);
    uint64_t v29 = v26 - v20;
    LOWORD(a5) = *(_WORD *)(v24 + 144);
    LOWORD(a6) = *(_WORD *)(v24 + 146);
    LOWORD(a7) = *(_WORD *)(v24 + 148);
    LOWORD(a8) = *(_WORD *)(v24 + 150);
    LOWORD(a9) = *(_WORD *)(v24 + 152);
    float v30 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v31 = (float)LODWORD(a5);
    float v32 = (float)LODWORD(a6);
    float v33 = (float)LODWORD(a7);
    float v34 = (float)LODWORD(a8);
    float v35 = (float)LODWORD(a9);
    float v36 = *(float *)(v24 + 36);
    float v37 = *(float *)(v24 + 40);
    float v38 = *(float *)(v24 + 44);
    float v107 = *(float *)(v24 + 52) * 0.5;
    float v108 = *(float *)(v24 + 48) * 0.5;
    float v39 = *(float *)(v24 + 56) * 0.5;
    float v40 = *(float *)(v24 + 60) * 0.5;
    float v41 = *(float *)(v24 + 64) * 0.5;
    float v42 = *(float *)(v24 + 72);
    float v43 = *(float *)(v24 + 68) * 0.5;
    float v44 = *(float *)(v24 + 76);
    float v45 = *(float *)(v24 + 80);
    float v46 = *(float *)(v24 + 84);
    float v47 = *(float *)(v24 + 88);
    float v48 = *(float *)(v24 + 92);
    float v49 = *(float *)(v24 + 96);
    uint64_t v50 = v24 + 164;
    uint64_t v51 = v24 + 16548;
    float v52 = *(float *)(v24 + 100);
    float v53 = *(float *)(v24 + 104);
    do
    {
      if (v25)
      {
        uint64_t result = 0;
        unint64_t v54 = (unsigned __int16 *)v27;
        unint64_t v55 = v17;
        uint64_t v56 = v28;
        do
        {
          _H10 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v54[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v54[2]) >> 16), 0.0), 8191.0)));
          _H12 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v54[3]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v54[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v54[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v54[7]) >> 16), 0.0), 8191.0)));
          _S18 = (float)((float)(v44 * _S11) + (float)(_S10 * v42)) + (float)(_S12 * v45);
          _S19 = (float)((float)(v47 * _S11) + (float)(_S10 * v46)) + (float)(_S12 * v48);
          _S10 = (float)((float)(v52 * _S11) + (float)(_S10 * v49)) + (float)(_S12 * v53);
          float v75 = (float)(v44 * _S14) + (float)(_S13 * v42);
          float v76 = (float)(v47 * _S14) + (float)(_S13 * v46);
          float v77 = (float)(v52 * _S14) + (float)(_S13 * v49);
          __asm { FCVT            S14, H15 }
          _S11 = v75 + (float)(_S14 * v45);
          float v80 = v76 + (float)(_S14 * v48);
          float v81 = v77 + (float)(_S14 * v53);
          LOWORD(_S18) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S19) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          LOWORD(_S10) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H19
            FCVT            S14, H10
          }
          LOWORD(_S10) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          unsigned int v87 = llroundf(fminf(fmaxf(v81, 0.0), 8191.0));
          float v88 = (float)(v37 * _S19) + (float)(v36 * _S18);
          float v89 = _S18 + _S10;
          _S19 = _S19 + _S11;
          float v91 = (float)(v32 + (float)(v89 * v108)) + (float)(_S19 * v107);
          float v92 = (float)(v32 + (float)(v89 * v40)) + (float)(_S19 * v41);
          LOWORD(_S19) = *(_WORD *)(v51 + 2 * v87);
          __asm { FCVT            S12, H19 }
          float v94 = v88 + (float)(v38 * _S14);
          float v95 = _S14 + _S12;
          float v96 = v91 + (float)((float)(_S14 + _S12) * v39);
          float v97 = v92 + (float)(v95 * v43);
          if (v96 < v31) {
            float v98 = v31;
          }
          else {
            float v98 = v96;
          }
          float v99 = v94 + v31;
          if (v96 > v33) {
            float v98 = v33;
          }
          __int16 v100 = llroundf(v98);
          if (v99 < v34) {
            float v101 = v34;
          }
          else {
            float v101 = v99;
          }
          unsigned int v102 = *v54;
          unsigned int v103 = v54[4];
          *uint64_t v56 = v100;
          if (v99 > v35) {
            float v101 = v35;
          }
          v56[1] = llroundf(v101);
          float v104 = v33;
          if (v97 <= v33)
          {
            float v104 = v97;
            if (v97 < v31) {
              float v104 = v31;
            }
          }
          float v105 = (float)((float)((float)(v37 * _S11) + (float)(v36 * _S10)) + (float)(v38 * _S12)) + v31;
          v56[2] = llroundf(v104);
          float v106 = v35;
          if (v105 <= v35)
          {
            float v106 = v105;
            if (v105 < v34) {
              float v106 = v34;
            }
          }
          v56[3] = llroundf(v106);
          if (v55)
          {
            *unint64_t v55 = bswap32(v102) >> 16;
            v55[1] = bswap32(v103) >> 16;
            v55 += 2;
          }
          v54 += 8;
          result += 2;
          v56 += 4;
        }
        while (v25 > (unint64_t)result);
      }
      v27 += v21;
      float v28 = (_WORD *)((char *)v28 + v22);
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *result;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = *((void *)result + 14);
  int64x2_t v12 = (void *)*((void *)result + 16);
  unint64_t v13 = *((void *)result + 13) * a2 / v9 + *((void *)result + 15);
  unint64_t v14 = (uint64_t *)*((void *)result + 17);
  unint64_t v15 = (v8 + v8 * a2) / v9;
  unint64_t v16 = (_WORD *)v12[1];
  if (v16) {
    unint64_t v16 = (_WORD *)((char *)v16 + 2 * v11 + v14[1] * v13);
  }
  if (v15 != v10)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(result + 44);
    uint64_t v19 = v10 + v18;
    uint64_t v20 = **((void **)result + 8);
    uint64_t v21 = *v14;
    uint64_t v22 = *v12 + v21 * v13;
    uint64_t v23 = *((void *)result + 19);
    unint64_t v24 = *(void *)(result + 20);
    uint64_t v25 = v15 + v18;
    uint64_t v26 = **((void **)result + 7) + v20 * v19 + 8 * *(void *)(result + 36);
    uint64_t v27 = (unsigned __int8 *)(v22 + 2 * v11);
    uint64_t v28 = v25 - v19;
    *(float *)&unsigned int v29 = (float)*(unsigned int *)(v23 + 136);
    float v30 = *(float *)&v29 / (float)*(unsigned int *)(v23 + 128);
    LOWORD(v29) = *(_WORD *)(v23 + 144);
    float v31 = (float)v29;
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    float v32 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    float v33 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    float v34 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    float v35 = (float)LODWORD(a8);
    float v36 = *(float *)(v23 + 36);
    float v37 = *(float *)(v23 + 40);
    float v38 = *(float *)(v23 + 44);
    float v39 = *(float *)(v23 + 48) * 0.5;
    float v40 = *(float *)(v23 + 52) * 0.5;
    float v41 = *(float *)(v23 + 56) * 0.5;
    float v42 = *(float *)(v23 + 60) * 0.5;
    float v43 = *(float *)(v23 + 64) * 0.5;
    float v44 = *(float *)(v23 + 68) * 0.5;
    do
    {
      if (v24)
      {
        unint64_t v45 = 0;
        float v46 = (unsigned __int16 *)v26;
        float v47 = v16;
        uint64_t result = v27;
        do
        {
          unsigned int v48 = *v46;
          float v49 = v30 * (float)(bswap32(v46[1]) >> 16);
          float v50 = v30 * (float)(bswap32(v46[2]) >> 16);
          float v51 = v30 * (float)(bswap32(v46[3]) >> 16);
          unsigned int v52 = v46[4];
          float v53 = v30 * (float)(bswap32(v46[5]) >> 16);
          float v54 = v30 * (float)(bswap32(v46[6]) >> 16);
          float v55 = v30 * (float)(bswap32(v46[7]) >> 16);
          float v56 = (float)((float)((float)(v37 * v50) + (float)(v36 * v49)) + (float)(v38 * v51)) + v31;
          float v57 = v49 + v53;
          float v58 = v50 + v54;
          float v59 = v51 + v55;
          float v60 = (float)((float)(v32 + (float)(v57 * v39)) + (float)(v58 * v40)) + (float)(v59 * v41);
          float v61 = (float)((float)(v32 + (float)(v57 * v42)) + (float)(v58 * v43)) + (float)(v59 * v44);
          if (v60 < v31) {
            float v62 = v31;
          }
          else {
            float v62 = v60;
          }
          if (v60 > v33) {
            float v62 = v33;
          }
          *(_WORD *)uint64_t result = llroundf(v62);
          if (v56 < v34) {
            float v63 = v34;
          }
          else {
            float v63 = v56;
          }
          if (v56 > v35) {
            float v63 = v35;
          }
          *((_WORD *)result + 1) = llroundf(v63);
          float v64 = v33;
          if (v61 <= v33)
          {
            float v64 = v61;
            if (v61 < v31) {
              float v64 = v31;
            }
          }
          float v65 = (float)((float)((float)(v37 * v54) + (float)(v36 * v53)) + (float)(v38 * v55)) + v31;
          *((_WORD *)result + 2) = llroundf(v64);
          float v66 = v35;
          if (v65 <= v35)
          {
            float v66 = v65;
            if (v65 < v34) {
              float v66 = v34;
            }
          }
          *((_WORD *)result + 3) = llroundf(v66);
          if (v47)
          {
            *float v47 = bswap32(v48) >> 16;
            v47[1] = bswap32(v52) >> 16;
            v47 += 2;
          }
          v46 += 8;
          v45 += 2;
          result += 8;
        }
        while (v24 > v45);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_444vf_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    int64x2_t v11 = (uint64_t *)*((void *)result + 17);
    int64x2_t v12 = (void *)*((void *)result + 7);
    uint64_t v13 = **((void **)result + 8);
    uint64_t v14 = *v11;
    uint64_t v15 = v11[1];
    uint64_t v16 = v11[2];
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    float v18 = 8191.0 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 144);
    float v19 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 146);
    float v20 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 148);
    float v21 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 150);
    float v22 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 152);
    float v23 = (float)v17;
    float v24 = *(float *)(v10 + 36);
    float v25 = *(float *)(v10 + 40);
    float v26 = *(float *)(v10 + 44);
    float v94 = *(float *)(v10 + 52);
    float v95 = *(float *)(v10 + 48);
    float v92 = *(float *)(v10 + 60);
    float v93 = *(float *)(v10 + 56);
    float v27 = *(float *)(v10 + 68);
    float v91 = *(float *)(v10 + 64);
    float v28 = *(float *)(v10 + 72);
    float v29 = *(float *)(v10 + 76);
    float v30 = *(float *)(v10 + 80);
    float v31 = *(float *)(v10 + 84);
    float v32 = *(float *)(v10 + 88);
    float v33 = *(float *)(v10 + 92);
    float v34 = *(float *)(v10 + 96);
    float v35 = *(float *)(v10 + 100);
    float v36 = *(float *)(v10 + 104);
    float v37 = *(float *)(v10 + 108);
    uint64_t v38 = v10 + 164;
    uint64_t v39 = v10 + 16548;
    uint64_t v40 = v10 + 32932;
    float v41 = *(float *)(v10 + 112);
    float v42 = *(float *)(v10 + 116);
    float v43 = *(float *)(v10 + 120);
    uint64_t v44 = *((void *)result + 14);
    unint64_t v45 = (void *)*((void *)result + 16);
    unint64_t v46 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v47 = *(void *)(result + 36);
    uint64_t v48 = v45[2];
    if (v48) {
      uint64_t result = (unsigned __int8 *)(v48 + v46 * v16 + v44);
    }
    else {
      uint64_t result = 0;
    }
    float v51 = v45;
    uint64_t v50 = *v45;
    uint64_t v49 = v51[1];
    _ZF = v49 == 0;
    float v53 = (unsigned char *)(v49 + v46 * v15 + v44);
    if (_ZF) {
      float v53 = 0;
    }
    float v54 = (unsigned char *)(v50 + v46 * v14 + v44);
    uint64_t v55 = *v12 + v13 * v8 + 8 * v47;
    do
    {
      if (v7)
      {
        uint64_t v56 = v7;
        float v57 = result;
        float v58 = v53;
        float v59 = v54;
        float v60 = (unsigned __int16 *)v55;
        do
        {
          _H0 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v60[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v60[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S19, H0 }
          _H0 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v60[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          float v70 = (float)((float)((float)(v41 * _S19) + (float)(v37 * _S18)) + (float)(v42 * _S15))
              + (float)(v43 * fmaxf(_S18, fmaxf(_S19, _S15)));
          float v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            float v71 = v70;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v39 + 2 * llroundf(v71));
          __asm { FCVT            S0, H0 }
          _S6 = _S18 * _S0;
          float v75 = _S19 * _S0;
          float v76 = _S15 * _S0;
          float v77 = (float)((float)(v29 * v75) + (float)(_S6 * v28)) + (float)(v76 * v30);
          float v78 = (float)((float)(v32 * v75) + (float)(_S6 * v31)) + (float)(v76 * v33);
          _S0 = (float)((float)(v35 * v75) + (float)(_S6 * v34)) + (float)(v76 * v36);
          LOWORD(_S6) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S15, H6 }
          LOWORD(_S6) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S18, H6 }
          LOWORD(_S0) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S19, H0 }
          float v83 = (float)((float)((float)(v25 * _S18) + (float)(v24 * _S15)) + (float)(v26 * _S19)) + v19;
          float v84 = v21;
          if (v83 <= v21)
          {
            float v84 = (float)((float)((float)(v25 * _S18) + (float)(v24 * _S15)) + (float)(v26 * _S19)) + v19;
            if (v83 < v19) {
              float v84 = v19;
            }
          }
          unsigned int v85 = *v60;
          *v59++ = llroundf(v84);
          if (v58)
          {
            float v86 = (float)((float)(v20 + (float)(_S15 * v95)) + (float)(_S18 * v94)) + (float)(_S19 * v93);
            float v87 = v23;
            if (v86 <= v23)
            {
              float v87 = (float)((float)(v20 + (float)(_S15 * v95)) + (float)(_S18 * v94)) + (float)(_S19 * v93);
              if (v86 < v22) {
                float v87 = v22;
              }
            }
            float v88 = (float)(v20 + (float)(_S15 * v92)) + (float)(_S18 * v91);
            float v89 = v88 + (float)(_S19 * v27);
            unsigned char *v58 = llroundf(v87);
            float v90 = v23;
            if (v89 <= v23)
            {
              float v90 = v88 + (float)(_S19 * v27);
              if (v89 < v22) {
                float v90 = v22;
              }
            }
            v58[1] = llroundf(v90);
            v58 += 2;
          }
          if (v57) {
            *v57++ = llroundf((float)(bswap32(v85) >> 16) * 0.0038911);
          }
          v60 += 4;
          --v56;
        }
        while (v56);
      }
      v55 += v13;
      v54 += v14;
      v53 += v15;
      result += v16;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_444vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(result + 20);
    unint64_t v15 = v11 + *(void *)(result + 44);
    unint64_t v16 = v12 - v11;
    uint64_t v17 = *((void *)result + 19);
    uint64_t v18 = (uint64_t *)*((void *)result + 17);
    uint64_t v19 = (void *)*((void *)result + 7);
    uint64_t v20 = **((void **)result + 8);
    uint64_t v21 = *v18;
    uint64_t v22 = v18[1];
    uint64_t v23 = v18[2];
    float v24 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    float v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    float v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    float v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    float v28 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    float v29 = (float)LODWORD(a9);
    float v30 = *(float *)(v17 + 36);
    float v31 = *(float *)(v17 + 40);
    float v32 = *(float *)(v17 + 44);
    float v33 = *(float *)(v17 + 48);
    float v34 = *(float *)(v17 + 52);
    float v35 = *(float *)(v17 + 56);
    float v36 = *(float *)(v17 + 60);
    float v37 = *(float *)(v17 + 64);
    float v38 = *(float *)(v17 + 68);
    float v39 = *(float *)(v17 + 72);
    float v40 = *(float *)(v17 + 76);
    float v41 = *(float *)(v17 + 80);
    float v42 = *(float *)(v17 + 84);
    float v43 = *(float *)(v17 + 88);
    float v44 = *(float *)(v17 + 92);
    float v45 = *(float *)(v17 + 96);
    float v47 = *(float *)(v17 + 100);
    float v46 = *(float *)(v17 + 104);
    uint64_t v48 = v17 + 164;
    uint64_t v49 = v17 + 16548;
    uint64_t v50 = *((void *)result + 14);
    float v51 = (uint64_t *)*((void *)result + 16);
    unint64_t v52 = *((void *)result + 13) * a2 / v10 + *((void *)result + 15);
    uint64_t v53 = *(void *)(result + 36);
    uint64_t v54 = v51[2];
    if (v54) {
      uint64_t v55 = (unsigned char *)(v54 + v52 * v23 + v50);
    }
    else {
      uint64_t v55 = 0;
    }
    uint64_t v57 = *v51;
    uint64_t v56 = *(void *)(*((void *)result + 16) + 8);
    _ZF = v56 == 0;
    uint64_t result = (unsigned __int8 *)(v56 + v52 * v22 + v50);
    if (_ZF) {
      uint64_t result = 0;
    }
    float v59 = (unsigned char *)(v57 + v52 * v21 + v50);
    uint64_t v60 = *v19 + v20 * v15 + 8 * v53;
    do
    {
      if (v14)
      {
        uint64_t v61 = v14;
        float v62 = (unsigned __int16 *)v60;
        float v63 = v55;
        float v64 = result;
        float v65 = v59;
        do
        {
          _H13 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v62[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H12 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v62[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H11 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v62[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          float v75 = (float)((float)(v40 * _S12) + (float)(_S13 * v39)) + (float)(_S11 * v41);
          float v76 = (float)((float)(v43 * _S12) + (float)(_S13 * v42)) + (float)(_S11 * v44);
          _S13 = (float)((float)(v47 * _S12) + (float)(_S13 * v45)) + (float)(_S11 * v46);
          LOWORD(_S11) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          LOWORD(_S13) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S13, 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          float v81 = (float)((float)((float)(v31 * _S12) + (float)(v30 * _S11)) + (float)(v32 * _S13)) + v25;
          float v82 = v27;
          if (v81 <= v27)
          {
            float v82 = (float)((float)((float)(v31 * _S12) + (float)(v30 * _S11)) + (float)(v32 * _S13)) + v25;
            if (v81 < v25) {
              float v82 = v25;
            }
          }
          unsigned int v83 = *v62;
          *v65++ = llroundf(v82);
          if (v64)
          {
            float v84 = (float)((float)(v26 + (float)(_S11 * v33)) + (float)(_S12 * v34)) + (float)(_S13 * v35);
            float v85 = v29;
            if (v84 <= v29)
            {
              float v85 = (float)((float)(v26 + (float)(_S11 * v33)) + (float)(_S12 * v34)) + (float)(_S13 * v35);
              if (v84 < v28) {
                float v85 = v28;
              }
            }
            float v86 = (float)((float)(v26 + (float)(_S11 * v36)) + (float)(_S12 * v37)) + (float)(_S13 * v38);
            *float v64 = llroundf(v85);
            float v87 = v29;
            if (v86 <= v29)
            {
              float v87 = v86;
              if (v86 < v28) {
                float v87 = v28;
              }
            }
            v64[1] = llroundf(v87);
            v64 += 2;
          }
          if (v63) {
            *v63++ = llroundf((float)(bswap32(v83) >> 16) * 0.0038911);
          }
          v62 += 4;
          --v61;
        }
        while (v61);
      }
      v60 += v20;
      v59 += v21;
      result += v22;
      v55 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_444vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = (uint64_t *)*((void *)result + 17);
    uint64_t v18 = (void *)*((void *)result + 7);
    uint64_t v19 = **((void **)result + 8);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    *(float *)&unsigned int v23 = (float)*(unsigned int *)(v16 + 136);
    float v24 = *(float *)&v23 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(v23) = *(_WORD *)(v16 + 144);
    float v25 = (float)v23;
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v26 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v27 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v28 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v29 = (float)LODWORD(a8);
    float v30 = *(float *)(v16 + 36);
    float v31 = *(float *)(v16 + 40);
    float v32 = *(float *)(v16 + 44);
    float v33 = *(float *)(v16 + 48);
    float v34 = *(float *)(v16 + 52);
    float v35 = *(float *)(v16 + 56);
    float v36 = *(float *)(v16 + 60);
    float v37 = *(float *)(v16 + 64);
    float v38 = *(float *)(v16 + 68);
    uint64_t v39 = *((void *)result + 14);
    unint64_t v40 = *((void *)result + 13) * a2;
    float v41 = (void *)*((void *)result + 16);
    unint64_t v42 = v40 / v9 + *((void *)result + 15);
    uint64_t v43 = *(void *)(result + 36);
    uint64_t v44 = v41[2];
    if (v44) {
      float v45 = (unsigned char *)(v44 + v42 * v22 + v39);
    }
    else {
      float v45 = 0;
    }
    uint64_t v48 = v41;
    uint64_t v46 = *v41;
    uint64_t v47 = v48[1];
    BOOL v49 = v47 == 0;
    uint64_t v50 = (unsigned char *)(v47 + v42 * v21 + v39);
    if (v49) {
      uint64_t v50 = 0;
    }
    float v51 = (unsigned char *)(v46 + v42 * v20 + v39);
    uint64_t result = (unsigned __int8 *)(*v18 + v19 * v14 + 8 * v43);
    do
    {
      if (v13)
      {
        uint64_t v52 = v13;
        uint64_t v53 = (unsigned __int16 *)result;
        uint64_t v54 = v45;
        uint64_t v55 = v50;
        uint64_t v56 = v51;
        do
        {
          float v57 = v24 * (float)(bswap32(v53[1]) >> 16);
          float v58 = v24 * (float)(bswap32(v53[2]) >> 16);
          float v59 = v24 * (float)(bswap32(v53[3]) >> 16);
          float v60 = (float)((float)((float)(v31 * v58) + (float)(v30 * v57)) + (float)(v32 * v59)) + v25;
          float v61 = v27;
          if (v60 <= v27)
          {
            float v61 = (float)((float)((float)(v31 * v58) + (float)(v30 * v57)) + (float)(v32 * v59)) + v25;
            if (v60 < v25) {
              float v61 = v25;
            }
          }
          unsigned int v62 = *v53;
          *v56++ = llroundf(v61);
          if (v55)
          {
            float v63 = (float)((float)(v26 + (float)(v57 * v33)) + (float)(v58 * v34)) + (float)(v59 * v35);
            float v64 = v29;
            if (v63 <= v29)
            {
              float v64 = (float)((float)(v26 + (float)(v57 * v33)) + (float)(v58 * v34)) + (float)(v59 * v35);
              if (v63 < v28) {
                float v64 = v28;
              }
            }
            float v65 = (float)((float)(v26 + (float)(v57 * v36)) + (float)(v58 * v37)) + (float)(v59 * v38);
            *uint64_t v55 = llroundf(v64);
            float v66 = v29;
            if (v65 <= v29)
            {
              float v66 = v65;
              if (v65 < v28) {
                float v66 = v28;
              }
            }
            v55[1] = llroundf(v66);
            v55 += 2;
          }
          if (v54) {
            *v54++ = llroundf((float)(bswap32(v62) >> 16) * 0.0038911);
          }
          v53 += 4;
          --v52;
        }
        while (v52);
      }
      result += v19;
      v51 += v20;
      v50 += v21;
      v45 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_xf444_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    int64x2_t v11 = (uint64_t *)*((void *)result + 17);
    int64x2_t v12 = (void *)*((void *)result + 7);
    uint64_t v13 = **((void **)result + 8);
    uint64_t v14 = *v11;
    uint64_t v15 = v11[1];
    uint64_t v16 = v11[2];
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    float v18 = 8191.0 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 144);
    float v19 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 146);
    float v20 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 148);
    float v21 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 150);
    float v22 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 152);
    float v23 = (float)v17;
    float v24 = *(float *)(v10 + 36);
    float v25 = *(float *)(v10 + 40);
    float v26 = *(float *)(v10 + 44);
    float v95 = *(float *)(v10 + 52);
    float v96 = *(float *)(v10 + 48);
    float v27 = *(float *)(v10 + 60);
    float v94 = *(float *)(v10 + 56);
    float v28 = *(float *)(v10 + 64);
    float v29 = *(float *)(v10 + 68);
    float v30 = *(float *)(v10 + 72);
    float v31 = *(float *)(v10 + 76);
    float v32 = *(float *)(v10 + 80);
    float v33 = *(float *)(v10 + 84);
    float v34 = *(float *)(v10 + 88);
    float v35 = *(float *)(v10 + 92);
    float v36 = *(float *)(v10 + 96);
    float v37 = *(float *)(v10 + 100);
    float v38 = *(float *)(v10 + 104);
    float v39 = *(float *)(v10 + 108);
    uint64_t v40 = v10 + 164;
    uint64_t v41 = v10 + 16548;
    uint64_t v42 = v10 + 32932;
    float v43 = *(float *)(v10 + 112);
    float v44 = *(float *)(v10 + 116);
    float v45 = *(float *)(v10 + 120);
    uint64_t v46 = *((void *)result + 14);
    uint64_t v47 = (void *)*((void *)result + 16);
    unint64_t v48 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v49 = *(void *)(result + 36);
    unsigned int v50 = *(unsigned __int8 *)(v10 + 132);
    if (v50 >= 0x11) {
      char v51 = 0;
    }
    else {
      char v51 = 16 - v50;
    }
    uint64_t v52 = v47[2];
    if (v52) {
      uint64_t result = (unsigned __int8 *)(v52 + v48 * v16 + 2 * v46);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v55 = v47;
    uint64_t v54 = *v47;
    uint64_t v53 = v55[1];
    _ZF = v53 == 0;
    uint64_t v57 = v53 + v48 * v15 + 2 * v46;
    if (_ZF) {
      uint64_t v57 = 0;
    }
    uint64_t v58 = v54 + v48 * v14 + 2 * v46;
    uint64_t v59 = *v12 + v13 * v8 + 8 * v49;
    do
    {
      if (v7)
      {
        uint64_t v60 = v7;
        float v61 = result;
        unsigned int v62 = (_WORD *)v57;
        float v63 = (_WORD *)v58;
        float v64 = (unsigned __int16 *)v59;
        do
        {
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v64[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v64[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v64[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          float v74 = (float)((float)((float)(v43 * _S14) + (float)(v39 * _S18)) + (float)(v44 * _S15))
              + (float)(v45 * fmaxf(_S18, fmaxf(_S14, _S15)));
          float v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v41 + 2 * llroundf(v75));
          __asm { FCVT            S0, H0 }
          _S6 = _S18 * _S0;
          float v79 = _S14 * _S0;
          float v80 = _S15 * _S0;
          float v81 = (float)((float)(v31 * v79) + (float)(_S6 * v30)) + (float)(v80 * v32);
          float v82 = (float)((float)(v34 * v79) + (float)(_S6 * v33)) + (float)(v80 * v35);
          _S0 = (float)((float)(v37 * v79) + (float)(_S6 * v36)) + (float)(v80 * v38);
          LOWORD(_S6) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          LOWORD(_S6) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S15, H6 }
          LOWORD(_S0) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          float v87 = (float)((float)((float)(v25 * _S15) + (float)(v24 * _S14)) + (float)(v26 * _S18)) + v19;
          float v88 = v21;
          if (v87 <= v21)
          {
            float v88 = (float)((float)((float)(v25 * _S15) + (float)(v24 * _S14)) + (float)(v26 * _S18)) + v19;
            if (v87 < v19) {
              float v88 = v19;
            }
          }
          unsigned int v89 = *v64;
          *v63++ = llroundf(v88) << v51;
          if (v62)
          {
            float v90 = (float)((float)(v20 + (float)(_S14 * v96)) + (float)(_S15 * v95)) + (float)(_S18 * v94);
            float v91 = v23;
            if (v90 <= v23)
            {
              float v91 = (float)((float)(v20 + (float)(_S14 * v96)) + (float)(_S15 * v95)) + (float)(_S18 * v94);
              if (v90 < v22) {
                float v91 = v22;
              }
            }
            float v92 = (float)((float)(v20 + (float)(_S14 * v27)) + (float)(_S15 * v28)) + (float)(_S18 * v29);
            *unsigned int v62 = llroundf(v91) << v51;
            float v93 = v23;
            if (v92 <= v23)
            {
              float v93 = v92;
              if (v92 < v22) {
                float v93 = v22;
              }
            }
            v62[1] = llroundf(v93) << v51;
            v62 += 2;
          }
          if (v61) {
            *v61++ = bswap32(v89) >> 16;
          }
          v64 += 4;
          --v60;
        }
        while (v60);
      }
      v59 += v13;
      v58 += v14;
      v57 += v15;
      result += v16;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_xf444_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(result + 20);
    unint64_t v15 = v11 + *(void *)(result + 44);
    unint64_t v16 = v12 - v11;
    uint64_t v17 = *((void *)result + 19);
    uint64_t v18 = (uint64_t *)*((void *)result + 17);
    uint64_t v19 = (void *)*((void *)result + 7);
    uint64_t v20 = **((void **)result + 8);
    uint64_t v21 = *v18;
    uint64_t v22 = v18[1];
    uint64_t v23 = v18[2];
    float v24 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    float v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    float v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    float v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    float v28 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    float v29 = (float)LODWORD(a9);
    float v30 = *(float *)(v17 + 36);
    float v31 = *(float *)(v17 + 40);
    float v32 = *(float *)(v17 + 44);
    float v33 = *(float *)(v17 + 48);
    float v34 = *(float *)(v17 + 52);
    float v35 = *(float *)(v17 + 56);
    float v36 = *(float *)(v17 + 60);
    float v37 = *(float *)(v17 + 64);
    float v38 = *(float *)(v17 + 68);
    float v39 = *(float *)(v17 + 72);
    float v40 = *(float *)(v17 + 76);
    float v41 = *(float *)(v17 + 80);
    float v42 = *(float *)(v17 + 84);
    float v43 = *(float *)(v17 + 88);
    float v44 = *(float *)(v17 + 92);
    float v45 = *(float *)(v17 + 96);
    float v47 = *(float *)(v17 + 100);
    float v46 = *(float *)(v17 + 104);
    uint64_t v48 = v17 + 164;
    uint64_t v49 = v17 + 16548;
    uint64_t v50 = *((void *)result + 14);
    char v51 = (uint64_t *)*((void *)result + 16);
    unint64_t v52 = *((void *)result + 13) * a2 / v10 + *((void *)result + 15);
    uint64_t v53 = *(void *)(result + 36);
    unsigned int v54 = *(unsigned __int8 *)(v17 + 132);
    if (v54 >= 0x11) {
      char v55 = 0;
    }
    else {
      char v55 = 16 - v54;
    }
    uint64_t v56 = v51[2];
    if (v56) {
      uint64_t v57 = v56 + v52 * v23 + 2 * v50;
    }
    else {
      uint64_t v57 = 0;
    }
    uint64_t v59 = *v51;
    uint64_t v58 = *(void *)(*((void *)result + 16) + 8);
    _ZF = v58 == 0;
    uint64_t result = (unsigned __int8 *)(v58 + v52 * v22 + 2 * v50);
    if (_ZF) {
      uint64_t result = 0;
    }
    uint64_t v61 = v59 + v52 * v21 + 2 * v50;
    uint64_t v62 = *v19 + v20 * v15 + 8 * v53;
    do
    {
      if (v14)
      {
        uint64_t v63 = v14;
        float v64 = (unsigned __int16 *)v62;
        float v65 = (_WORD *)v57;
        float v66 = result;
        float v67 = (_WORD *)v61;
        do
        {
          _H12 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v64[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H11 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v64[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H10 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v64[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          float v77 = (float)((float)(v40 * _S11) + (float)(_S12 * v39)) + (float)(_S10 * v41);
          float v78 = (float)((float)(v43 * _S11) + (float)(_S12 * v42)) + (float)(_S10 * v44);
          _S12 = (float)((float)(v47 * _S11) + (float)(_S12 * v45)) + (float)(_S10 * v46);
          LOWORD(_S10) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          float v83 = (float)((float)((float)(v31 * _S11) + (float)(v30 * _S10)) + (float)(v32 * _S12)) + v25;
          float v84 = v27;
          if (v83 <= v27)
          {
            float v84 = (float)((float)((float)(v31 * _S11) + (float)(v30 * _S10)) + (float)(v32 * _S12)) + v25;
            if (v83 < v25) {
              float v84 = v25;
            }
          }
          unsigned int v85 = *v64;
          *v67++ = llroundf(v84) << v55;
          if (v66)
          {
            float v86 = (float)((float)(v26 + (float)(_S10 * v33)) + (float)(_S11 * v34)) + (float)(_S12 * v35);
            float v87 = v29;
            if (v86 <= v29)
            {
              float v87 = (float)((float)(v26 + (float)(_S10 * v33)) + (float)(_S11 * v34)) + (float)(_S12 * v35);
              if (v86 < v28) {
                float v87 = v28;
              }
            }
            float v88 = (float)((float)(v26 + (float)(_S10 * v36)) + (float)(_S11 * v37)) + (float)(_S12 * v38);
            *float v66 = llroundf(v87) << v55;
            float v89 = v29;
            if (v88 <= v29)
            {
              float v89 = v88;
              if (v88 < v28) {
                float v89 = v28;
              }
            }
            v66[1] = llroundf(v89) << v55;
            v66 += 2;
          }
          if (v65) {
            *v65++ = bswap32(v85) >> 16;
          }
          v64 += 4;
          --v63;
        }
        while (v63);
      }
      v62 += v20;
      v61 += v21;
      result += v22;
      v57 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_xf444_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = (uint64_t *)*((void *)result + 17);
    uint64_t v18 = (void *)*((void *)result + 7);
    uint64_t v19 = **((void **)result + 8);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    *(float *)&unsigned int v23 = (float)*(unsigned int *)(v16 + 136);
    float v24 = *(float *)&v23 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(v23) = *(_WORD *)(v16 + 144);
    float v25 = (float)v23;
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v26 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v27 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v28 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v29 = (float)LODWORD(a8);
    float v30 = *(float *)(v16 + 36);
    float v31 = *(float *)(v16 + 40);
    float v32 = *(float *)(v16 + 44);
    float v33 = *(float *)(v16 + 48);
    float v34 = *(float *)(v16 + 52);
    float v35 = *(float *)(v16 + 56);
    float v36 = *(float *)(v16 + 60);
    float v37 = *(float *)(v16 + 64);
    float v38 = *(float *)(v16 + 68);
    uint64_t v39 = *((void *)result + 14);
    unint64_t v40 = *((void *)result + 13) * a2;
    float v41 = (void *)*((void *)result + 16);
    unint64_t v42 = v40 / v9 + *((void *)result + 15);
    uint64_t v43 = *(void *)(result + 36);
    unsigned int v44 = *(unsigned __int8 *)(v16 + 132);
    if (v44 >= 0x11) {
      char v45 = 0;
    }
    else {
      char v45 = 16 - v44;
    }
    uint64_t v46 = v41[2];
    if (v46) {
      uint64_t v47 = v46 + v42 * v22 + 2 * v39;
    }
    else {
      uint64_t v47 = 0;
    }
    uint64_t v50 = v41;
    uint64_t v48 = *v41;
    uint64_t v49 = v50[1];
    BOOL v51 = v49 == 0;
    uint64_t v52 = v49 + v42 * v21 + 2 * v39;
    if (v51) {
      uint64_t v52 = 0;
    }
    uint64_t v53 = v48 + v42 * v20 + 2 * v39;
    uint64_t result = (unsigned __int8 *)(*v18 + v19 * v14 + 8 * v43);
    char v54 = v45;
    do
    {
      if (v13)
      {
        uint64_t v55 = v13;
        uint64_t v56 = (unsigned __int16 *)result;
        uint64_t v57 = (_WORD *)v47;
        uint64_t v58 = (_WORD *)v52;
        uint64_t v59 = (_WORD *)v53;
        do
        {
          float v60 = v24 * (float)(bswap32(v56[1]) >> 16);
          float v61 = v24 * (float)(bswap32(v56[2]) >> 16);
          float v62 = v24 * (float)(bswap32(v56[3]) >> 16);
          float v63 = (float)((float)((float)(v31 * v61) + (float)(v30 * v60)) + (float)(v32 * v62)) + v25;
          float v64 = v27;
          if (v63 <= v27)
          {
            float v64 = (float)((float)((float)(v31 * v61) + (float)(v30 * v60)) + (float)(v32 * v62)) + v25;
            if (v63 < v25) {
              float v64 = v25;
            }
          }
          unsigned int v65 = *v56;
          *v59++ = llroundf(v64) << v54;
          if (v58)
          {
            float v66 = (float)((float)(v26 + (float)(v60 * v33)) + (float)(v61 * v34)) + (float)(v62 * v35);
            float v67 = v29;
            if (v66 <= v29)
            {
              float v67 = (float)((float)(v26 + (float)(v60 * v33)) + (float)(v61 * v34)) + (float)(v62 * v35);
              if (v66 < v28) {
                float v67 = v28;
              }
            }
            float v68 = (float)((float)(v26 + (float)(v60 * v36)) + (float)(v61 * v37)) + (float)(v62 * v38);
            _WORD *v58 = llroundf(v67) << v54;
            float v69 = v29;
            if (v68 <= v29)
            {
              float v69 = v68;
              if (v68 < v28) {
                float v69 = v28;
              }
            }
            v58[1] = llroundf(v69) << v54;
            v58 += 2;
          }
          if (v57) {
            *v57++ = bswap32(v65) >> 16;
          }
          v56 += 4;
          --v55;
        }
        while (v55);
      }
      result += v19;
      v53 += v20;
      v52 += v21;
      v47 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    int64x2_t v11 = (void *)*((void *)result + 7);
    uint64_t v12 = **((void **)result + 8);
    uint64_t v13 = **((void **)result + 17);
    float v14 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    float v15 = *(float *)(v10 + 72);
    float v16 = *(float *)(v10 + 76);
    float v17 = *(float *)(v10 + 80);
    float v18 = *(float *)(v10 + 84);
    float v19 = *(float *)(v10 + 88);
    float v20 = *(float *)(v10 + 92);
    float v21 = *(float *)(v10 + 96);
    float v22 = *(float *)(v10 + 100);
    uint64_t v23 = v10 + 164;
    uint64_t v24 = v10 + 16548;
    uint64_t v25 = v10 + 32932;
    float v26 = *(float *)(v10 + 104);
    float v27 = *(float *)(v10 + 108);
    float v28 = *(float *)(v10 + 112);
    float v29 = *(float *)(v10 + 116);
    float v30 = *(float *)(v10 + 120);
    uint64_t v31 = *((void *)result + 14);
    unint64_t v32 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v33 = *(void *)(result + 36);
    uint64_t v34 = *(unsigned __int8 *)(v10 + 161);
    uint64_t v35 = *(unsigned __int8 *)(v10 + 160);
    uint64_t v36 = **((void **)result + 16) + v32 * v13;
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 159);
    uint64_t v37 = *(unsigned __int8 *)(v10 + 158);
    uint64_t v38 = v36 + 4 * v31;
    uint64_t v39 = *v11 + v12 * v8 + 8 * v33;
    do
    {
      if (v7)
      {
        uint64_t v40 = v7;
        float v41 = (unsigned __int16 *)v39;
        uint64_t v42 = v38;
        do
        {
          _H26 = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v41[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v41[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v41[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S29, H28 }
          float v53 = (float)((float)((float)(v28 * _S27) + (float)(v27 * _S26)) + (float)(v29 * _S29))
              + (float)(v30 * fmaxf(_S26, fmaxf(_S27, _S29)));
          float v54 = 8191.0;
          if (v53 <= 8191.0)
          {
            float v54 = v53;
            if (v53 < 0.0) {
              float v54 = 0.0;
            }
          }
          _H28 = *(_WORD *)(v24 + 2 * llroundf(v54));
          __asm { FCVT            S30, H28 }
          float v57 = _S26 * _S30;
          float v58 = _S27 * _S30;
          float v59 = _S29 * _S30;
          if (*(short float *)(v25
                              + 2
                              * llroundf(fminf(fmaxf((float)((float)(v16 * v58) + (float)(v57 * v15))+ (float)((float)(_S29 * _S30) * v17), 0.0), 8191.0))) <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H29, #0 }
            if (_NF) {
              _S29 = 0.0;
            }
            else {
              __asm { FCVT            S29, H29 }
            }
          }
          else
          {
            _S29 = 255.0;
          }
          float v62 = (float)((float)(v19 * v58) + (float)(v57 * v18)) + (float)(v59 * v20);
          float v63 = (float)((float)(v22 * v58) + (float)(v57 * v21)) + (float)(v59 * v26);
          short float v64 = *(short float *)(v25 + 2 * llroundf(fminf(fmaxf(v62, 0.0), 8191.0)));
          short float v65 = *(short float *)(v25 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          unsigned int v66 = *v41;
          *(unsigned char *)(v42 + v37) = llroundf(_S29);
          if (v64 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H27, #0 }
            if (_NF) {
              _S27 = 0.0;
            }
            else {
              __asm { FCVT            S27, H27 }
            }
          }
          else
          {
            _S27 = 255.0;
          }
          result[v42] = llroundf(_S27);
          if (v65 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H26, #0 }
            if (_NF) {
              _S26 = 0.0;
            }
            else {
              __asm { FCVT            S26, H26 }
            }
          }
          else
          {
            _S26 = 255.0;
          }
          v41 += 4;
          *(unsigned char *)(v42 + v35) = llroundf(_S26);
          *(unsigned char *)(v42 + v34) = llroundf((float)(bswap32(v66) >> 16) * 0.0038911);
          v42 += 4;
          --v40;
        }
        while (v40);
      }
      v39 += v12;
      v38 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    int64x2_t v11 = (void *)*((void *)result + 7);
    uint64_t v12 = **((void **)result + 8);
    uint64_t v13 = **((void **)result + 17);
    float v14 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    float v15 = *(float *)(v10 + 72);
    float v16 = *(float *)(v10 + 76);
    float v17 = *(float *)(v10 + 80);
    float v18 = *(float *)(v10 + 84);
    float v19 = *(float *)(v10 + 88);
    float v20 = *(float *)(v10 + 92);
    float v21 = *(float *)(v10 + 96);
    float v22 = *(float *)(v10 + 100);
    float v23 = *(float *)(v10 + 104);
    uint64_t v24 = v10 + 164;
    uint64_t v25 = v10 + 16548;
    uint64_t v26 = *((void *)result + 14);
    unint64_t v27 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v28 = *(void *)(result + 36);
    uint64_t v29 = *(unsigned __int8 *)(v10 + 161);
    uint64_t v30 = *(unsigned __int8 *)(v10 + 160);
    uint64_t v31 = **((void **)result + 16) + v27 * v13;
    uint64_t v32 = *(unsigned __int8 *)(v10 + 159);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 158);
    uint64_t v33 = v31 + 4 * v26;
    uint64_t v34 = *v11 + v12 * v8 + 8 * v28;
    do
    {
      if (v7)
      {
        uint64_t v35 = v7;
        uint64_t v36 = (unsigned __int16 *)v34;
        uint64_t v37 = v33;
        do
        {
          _H22 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v36[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H23 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v36[2]) >> 16), 0.0), 8191.0)));
          _H25 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v36[3]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H23
            FCVT            S23, H25
          }
          if (*(short float *)(v25
                              + 2
                              * llroundf(fminf(fmaxf((float)((float)(v16 * _S24) + (float)(_S22 * v15)) + (float)(_S23 * v17), 0.0), 8191.0))) <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H25, #0 }
            if (_NF) {
              _S25 = 0.0;
            }
            else {
              __asm { FCVT            S25, H25 }
            }
          }
          else
          {
            _S25 = 255.0;
          }
          float v50 = (float)((float)(v19 * _S24) + (float)(_S22 * v18)) + (float)(_S23 * v20);
          float v51 = (float)((float)(v22 * _S24) + (float)(_S22 * v21)) + (float)(_S23 * v23);
          short float v52 = *(short float *)(v25 + 2 * llroundf(fminf(fmaxf(v50, 0.0), 8191.0)));
          short float v53 = *(short float *)(v25 + 2 * llroundf(fminf(fmaxf(v51, 0.0), 8191.0)));
          unsigned int v54 = *v36;
          result[v37] = llroundf(_S25);
          if (v52 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H23, #0 }
            if (_NF) {
              _S23 = 0.0;
            }
            else {
              __asm { FCVT            S23, H23 }
            }
          }
          else
          {
            _S23 = 255.0;
          }
          *(unsigned char *)(v37 + v32) = llroundf(_S23);
          if (v53 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H22, #0 }
            if (_NF) {
              _S22 = 0.0;
            }
            else {
              __asm { FCVT            S22, H22 }
            }
          }
          else
          {
            _S22 = 255.0;
          }
          v36 += 4;
          *(unsigned char *)(v37 + v30) = llroundf(_S22);
          *(unsigned char *)(v37 + v29) = llroundf((float)(bswap32(v54) >> 16) * 0.0038911);
          v37 += 4;
          --v35;
        }
        while (v35);
      }
      v34 += v12;
      v33 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v11 = **((void **)result + 8);
    uint64_t v12 = **((void **)result + 17);
    float v13 = (float)*(unsigned int *)(v10 + 136) / (float)*(unsigned int *)(v10 + 128);
    unint64_t v14 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v15 = *(unsigned __int8 *)(v10 + 161);
    uint64_t v16 = *(unsigned __int8 *)(v10 + 160);
    uint64_t v17 = *(unsigned __int8 *)(v10 + 159);
    uint64_t v18 = *(unsigned __int8 *)(v10 + 158);
    uint64_t v19 = **((void **)result + 16) + v14 * v12 + 4 * *((void *)result + 14);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v11 * v8 + 8 * *(void *)(result + 36));
    do
    {
      if (v7)
      {
        uint64_t v20 = v7;
        long long v21 = (unsigned __int16 *)result;
        uint64_t v22 = v19;
        do
        {
          float v23 = v13 * (float)(bswap32(v21[1]) >> 16);
          float v24 = 255.0;
          if (v23 <= 255.0)
          {
            float v24 = v23;
            if (v23 < 0.0) {
              float v24 = 0.0;
            }
          }
          unsigned int v25 = v21[3];
          unsigned int v26 = *v21;
          float v27 = v13 * (float)(bswap32(v21[2]) >> 16);
          *(unsigned char *)(v22 + v18) = llroundf(v24);
          float v28 = 255.0;
          if (v27 <= 255.0)
          {
            float v28 = v27;
            if (v27 < 0.0) {
              float v28 = 0.0;
            }
          }
          float v29 = v13 * (float)(bswap32(v25) >> 16);
          *(unsigned char *)(v22 + v17) = llroundf(v28);
          float v30 = 255.0;
          if (v29 <= 255.0)
          {
            float v30 = v29;
            if (v29 < 0.0) {
              float v30 = 0.0;
            }
          }
          v21 += 4;
          *(unsigned char *)(v22 + v16) = llroundf(v30);
          *(unsigned char *)(v22 + v15) = llroundf((float)(bswap32(v26) >> 16) * 0.0038911);
          v22 += 4;
          --v20;
        }
        while (v20);
      }
      result += v11;
      v19 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    int64x2_t v10 = *(unsigned __int8 **)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = **((void **)result + 8);
    uint64_t v15 = **((void **)result + 17);
    float v16 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 144);
    float v17 = (float)LODWORD(a5);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    uint64_t v26 = v13 + 164;
    uint64_t v27 = v13 + 16548;
    uint64_t v28 = v13 + 32932;
    float v29 = *(float *)(v13 + 104);
    float v30 = *(float *)(v13 + 108);
    float v31 = *(float *)(v13 + 112);
    float v32 = *(float *)(v13 + 116);
    float v33 = *(float *)(v13 + 120);
    uint64_t v34 = **((void **)result + 16)
        + (*((void *)result + 13) * a2 / v6 + *((void *)result + 15)) * v15
        + 16 * *((void *)result + 14);
    uint64_t v35 = **((void **)result + 7) + v14 * v11 + 8 * *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)&unk_193E7D000;
    do
    {
      if (v10)
      {
        uint64_t result = v10;
        uint64_t v36 = (unsigned int *)v34;
        uint64_t v37 = (unsigned __int16 *)v35;
        do
        {
          _H29 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v16 * (float)(bswap32(v37[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v16 * (float)(bswap32(v37[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S31, H30 }
          _H30 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v16 * (float)(bswap32(v37[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S9, H30 }
          float v48 = (float)((float)((float)(v31 * _S31) + (float)(v30 * _S29)) + (float)(v32 * _S9))
              + (float)(v33 * fmaxf(_S29, fmaxf(_S31, _S9)));
          float v49 = 8191.0;
          if (v48 <= 8191.0)
          {
            float v49 = v48;
            if (v48 < 0.0) {
              float v49 = 0.0;
            }
          }
          _H30 = *(_WORD *)(v27 + 2 * llroundf(v49));
          __asm { FCVT            S10, H30 }
          float v52 = _S29 * _S10;
          float v53 = _S31 * _S10;
          float v54 = _S9 * _S10;
          _H29 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v25 * v53) + (float)((float)(_S29 * _S10) * v24))+ (float)((float)(_S9 * _S10) * v29), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          float v57 = v17 + _S29;
          BOOL v58 = (float)(v17 + _S29) <= 1023.0;
          float v59 = 1023.0;
          if (v58)
          {
            float v59 = v57;
            if (v57 < 0.0) {
              float v59 = 0.0;
            }
          }
          _H9 = *(_WORD *)(v28
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v22 * v53) + (float)(v52 * v21)) + (float)(v54 * v23), 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          float v62 = v17 + _S9;
          BOOL v58 = (float)(v17 + _S9) <= 1023.0;
          float v63 = 1023.0;
          if (v58)
          {
            float v63 = v62;
            if (v62 < 0.0) {
              float v63 = 0.0;
            }
          }
          _H30 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * v53) + (float)(v52 * v18)) + (float)(v54 * v20), 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          float v66 = v17 + _S30;
          BOOL v58 = (float)(v17 + _S30) <= 1023.0;
          float v67 = 1023.0;
          if (v58)
          {
            float v67 = v66;
            if (v66 < 0.0) {
              float v67 = 0.0;
            }
          }
          unsigned int v68 = *v37;
          v37 += 4;
          float v69 = (double)(bswap32(v68) >> 16) * 3.0 / 65535.0;
          unsigned int v70 = llroundf(v59);
          unsigned int v71 = llroundf(v63) << 10;
          unsigned int v72 = llroundf(v67);
          float v73 = (float)llroundf(v69);
          if (v73 > 3.0) {
            float v73 = 3.0;
          }
          *v36++ = v71 | v70 | (llroundf(v73) << 30) | (v72 << 20);
          --result;
        }
        while (result);
      }
      v35 += v14;
      v34 += v15;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_l10r_GCD(uint64_t result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *(void *)(result + 152);
    uint64_t v14 = *(void **)(result + 56);
    uint64_t v15 = **(void **)(result + 64);
    uint64_t v16 = **(void **)(result + 136);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 144);
    float v18 = (float)LODWORD(a5);
    float v19 = *(float *)(v13 + 72);
    float v20 = *(float *)(v13 + 76);
    float v21 = *(float *)(v13 + 80);
    float v22 = *(float *)(v13 + 84);
    float v23 = *(float *)(v13 + 88);
    float v24 = *(float *)(v13 + 92);
    float v25 = *(float *)(v13 + 96);
    float v26 = *(float *)(v13 + 100);
    float v27 = *(float *)(v13 + 104);
    uint64_t v28 = v13 + 164;
    uint64_t v29 = v13 + 16548;
    uint64_t v30 = *(void *)(result + 112);
    unint64_t v31 = *(void *)(result + 104) * a2 / v6;
    uint64_t v33 = *(void *)(result + 120);
    float v32 = *(void **)(result + 128);
    uint64_t result = *(void *)(result + 36);
    uint64_t v34 = *v32 + (v31 + v33) * v16 + 16 * v30;
    uint64_t v35 = *v14 + v15 * v11 + 8 * result;
    do
    {
      if (v10)
      {
        uint64_t v36 = v10;
        uint64_t result = v35;
        uint64_t v37 = (unsigned int *)v34;
        do
        {
          _H25 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf(v17 * (float)(bswap32(*(unsigned __int16 *)(result + 2)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S26, H25 }
          _H25 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf(v17 * (float)(bswap32(*(unsigned __int16 *)(result + 4)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S27, H25 }
          _H25 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf(v17 * (float)(bswap32(*(unsigned __int16 *)(result + 6)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S28, H25 }
          _H25 = *(_WORD *)(v29
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v26 * _S27) + (float)(_S26 * v25)) + (float)(_S28 * v27), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v50 = v18 + _S25;
          BOOL v51 = (float)(v18 + _S25) <= 1023.0;
          float v52 = 1023.0;
          if (v51)
          {
            float v52 = v50;
            if (v50 < 0.0) {
              float v52 = 0.0;
            }
          }
          _H29 = *(_WORD *)(v29
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v23 * _S27) + (float)(_S26 * v22)) + (float)(_S28 * v24), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          float v55 = v18 + _S29;
          BOOL v51 = (float)(v18 + _S29) <= 1023.0;
          float v56 = 1023.0;
          if (v51)
          {
            float v56 = v55;
            if (v55 < 0.0) {
              float v56 = 0.0;
            }
          }
          _H26 = *(_WORD *)(v29
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v20 * _S27) + (float)(_S26 * v19)) + (float)(_S28 * v21), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          float v59 = v18 + _S26;
          BOOL v51 = (float)(v18 + _S26) <= 1023.0;
          float v60 = 1023.0;
          if (v51)
          {
            float v60 = v59;
            if (v59 < 0.0) {
              float v60 = 0.0;
            }
          }
          unsigned int v61 = *(unsigned __int16 *)result;
          result += 8;
          float v62 = (double)(bswap32(v61) >> 16) * 3.0 / 65535.0;
          unsigned int v63 = llroundf(v52);
          unsigned int v64 = llroundf(v56) << 10;
          unsigned int v65 = llroundf(v60);
          float v66 = (float)llroundf(v62);
          if (v66 > 3.0) {
            float v66 = 3.0;
          }
          *v37++ = v64 | v63 | (llroundf(v66) << 30) | (v65 << 20);
          --v36;
        }
        while (v36);
      }
      v35 += v15;
      v34 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_b64a_rgb_l10r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *(void *)(result + 152);
    int64x2_t v11 = *(void **)(result + 56);
    uint64_t v12 = **(void **)(result + 64);
    uint64_t v13 = **(void **)(result + 136);
    *(float *)&unsigned int v14 = (float)*(unsigned int *)(v10 + 136);
    float v15 = *(float *)&v14 / (float)*(unsigned int *)(v10 + 128);
    LOWORD(v14) = *(_WORD *)(v10 + 144);
    float v16 = (float)v14;
    uint64_t v17 = *(void *)(result + 112);
    unint64_t v18 = *(void *)(result + 104) * a2 / v3;
    uint64_t v19 = *(void *)(result + 120);
    int64x2_t v20 = *(void **)(result + 128);
    uint64_t result = *(void *)(result + 36);
    uint64_t v21 = *v20 + (v18 + v19) * v13 + 16 * v17;
    uint64_t v22 = *v11 + v12 * v8 + 8 * result;
    do
    {
      if (v7)
      {
        uint64_t v23 = v7;
        uint64_t v24 = (unsigned __int16 *)v22;
        uint64_t v25 = (_DWORD *)v21;
        do
        {
          unsigned int v26 = v24[1];
          unsigned int v27 = v24[2];
          unsigned int v28 = v24[3];
          unsigned int v29 = *v24;
          v24 += 4;
          float v30 = v15 * (float)(bswap32(v26) >> 16);
          float v31 = v15 * (float)(bswap32(v27) >> 16);
          unsigned int v32 = bswap32(v29) >> 16;
          float v33 = (float)(v15 * (float)(bswap32(v28) >> 16)) + v16;
          if (v33 < 0.0) {
            float v34 = 0.0;
          }
          else {
            float v34 = v33;
          }
          if (v33 <= 1023.0) {
            float v36 = v34;
          }
          else {
            float v36 = 1023.0;
          }
          float v35 = (double)v32 * 3.0 / 65535.0;
          unsigned int v37 = llroundf(v35);
          unsigned int v38 = llroundf(v36);
          float v39 = v31 + v16;
          if (v39 < 0.0) {
            float v40 = 0.0;
          }
          else {
            float v40 = v39;
          }
          if (v39 <= 1023.0) {
            float v41 = v40;
          }
          else {
            float v41 = 1023.0;
          }
          unsigned int v42 = llroundf(v41);
          float v43 = v30 + v16;
          if (v43 < 0.0) {
            float v44 = 0.0;
          }
          else {
            float v44 = v43;
          }
          if (v43 <= 1023.0) {
            float v45 = v44;
          }
          else {
            float v45 = 1023.0;
          }
          float v46 = (float)v37;
          unsigned int v47 = llroundf(v45);
          if (v46 <= 3.0) {
            float v48 = v46;
          }
          else {
            float v48 = 3.0;
          }
          uint64_t result = (v42 << 10) | v38 | (llroundf(v48) << 30) | (v47 << 20);
          *v25++ = result;
          --v23;
        }
        while (v23);
      }
      v22 += v12;
      v21 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(unsigned __int8 **)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v11 = **((void **)result + 8);
    uint64_t v12 = **((void **)result + 17);
    float v13 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    float v14 = *(float *)(v10 + 72);
    float v15 = *(float *)(v10 + 76);
    float v16 = *(float *)(v10 + 80);
    float v17 = *(float *)(v10 + 84);
    float v18 = *(float *)(v10 + 88);
    float v19 = *(float *)(v10 + 92);
    float v20 = *(float *)(v10 + 96);
    float v21 = *(float *)(v10 + 100);
    uint64_t v22 = v10 + 164;
    uint64_t v23 = v10 + 16548;
    uint64_t v24 = v10 + 32932;
    float v25 = *(float *)(v10 + 104);
    float v26 = *(float *)(v10 + 108);
    float v27 = *(float *)(v10 + 112);
    float v28 = *(float *)(v10 + 116);
    float v29 = *(float *)(v10 + 120);
    uint64_t v30 = **((void **)result + 16)
        + (*((void *)result + 13) * a2 / v3 + *((void *)result + 15)) * v12
        + 8 * *((void *)result + 14);
    uint64_t v31 = **((void **)result + 7) + v11 * v8 + 8 * *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)&unk_193E7D000;
    do
    {
      if (v7)
      {
        uint64_t result = v7;
        unsigned int v32 = (unsigned __int16 *)v31;
        float v33 = (_WORD *)v30;
        do
        {
          _H25 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          float v44 = (float)((float)((float)(v27 * _S26) + (float)(v26 * _S25)) + (float)(v28 * _S28))
              + (float)(v29 * fmaxf(_S25, fmaxf(_S26, _S28)));
          float v45 = 8191.0;
          if (v44 <= 8191.0)
          {
            float v45 = v44;
            if (v44 < 0.0) {
              float v45 = 0.0;
            }
          }
          _H27 = *(_WORD *)(v23 + 2 * llroundf(v45));
          __asm { FCVT            S29, H27 }
          float v48 = _S25 * _S29;
          float v49 = _S26 * _S29;
          float v50 = _S28 * _S29;
          LOWORD(_S29) = *(_WORD *)(v24
                                  + 2
                                  * llroundf(fminf(fmaxf((float)((float)(v15 * v49) + (float)(v48 * v14))+ (float)((float)(_S28 * _S29) * v16), 0.0), 8191.0)));
          __asm { FCVT            S30, H29 }
          float v52 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v52 = _S30;
            if (_NF) {
              float v52 = 0.0;
            }
          }
          unsigned int v54 = *v32;
          float v55 = (float)((float)(v18 * v49) + (float)(v48 * v17)) + (float)(v50 * v19);
          float v56 = (float)((float)(v21 * v49) + (float)(v48 * v20)) + (float)(v50 * v25);
          _H26 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v55, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v56, 0.0), 8191.0)));
          __asm { FCVT            S29, H26 }
          *float v33 = llroundf(v52);
          float v60 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCMP            H26, #0 }
            float v60 = _S29;
            if (_NF) {
              float v60 = 0.0;
            }
          }
          __asm { FCVT            S28, H25 }
          v33[1] = llroundf(v60);
          float v63 = 65535.0;
          if (_S28 <= 65535.0)
          {
            __asm { FCMP            H25, #0 }
            float v63 = _S28;
            if (_NF) {
              float v63 = 0.0;
            }
          }
          v32 += 4;
          v33[2] = llroundf(v63);
          v33[3] = bswap32(v54) >> 16;
          v33 += 4;
          --result;
        }
        while (result);
      }
      v31 += v11;
      v30 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_l64r_GCD(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *(void *)(result + 152);
    int64x2_t v11 = *(void **)(result + 56);
    uint64_t v12 = **(void **)(result + 64);
    uint64_t v13 = **(void **)(result + 136);
    float v14 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    float v15 = *(float *)(v10 + 72);
    float v16 = *(float *)(v10 + 76);
    float v17 = *(float *)(v10 + 80);
    float v18 = *(float *)(v10 + 84);
    float v19 = *(float *)(v10 + 88);
    float v20 = *(float *)(v10 + 92);
    float v21 = *(float *)(v10 + 96);
    float v22 = *(float *)(v10 + 100);
    float v23 = *(float *)(v10 + 104);
    uint64_t v24 = v10 + 164;
    uint64_t v25 = v10 + 16548;
    uint64_t v26 = *(void *)(result + 112);
    unint64_t v27 = *(void *)(result + 104) * a2 / v3;
    uint64_t v29 = *(void *)(result + 120);
    float v28 = *(void **)(result + 128);
    uint64_t result = *(void *)(result + 36);
    uint64_t v30 = *v28 + (v27 + v29) * v13 + 8 * v26;
    uint64_t v31 = *v11 + v12 * v8 + 8 * result;
    do
    {
      if (v7)
      {
        uint64_t v32 = v7;
        uint64_t result = v31;
        float v33 = (_WORD *)v30;
        do
        {
          _H21 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf(v14 * (float)(bswap32(*(unsigned __int16 *)(result + 2)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf(v14 * (float)(bswap32(*(unsigned __int16 *)(result + 4)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H23 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf(v14 * (float)(bswap32(*(unsigned __int16 *)(result + 6)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          _H25 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v16 * _S22) + (float)(_S21 * v15)) + (float)(_S23 * v17), 0.0), 8191.0)));
          __asm { FCVT            S26, H25 }
          float v46 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCMP            H25, #0 }
            float v46 = _S26;
            if (_NF) {
              float v46 = 0.0;
            }
          }
          unsigned int v48 = *(unsigned __int16 *)result;
          float v49 = (float)((float)(v19 * _S22) + (float)(_S21 * v18)) + (float)(_S23 * v20);
          float v50 = (float)((float)(v22 * _S22) + (float)(_S21 * v21)) + (float)(_S23 * v23);
          _H22 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v49, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v50, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          *float v33 = llroundf(v46);
          float v54 = 65535.0;
          if (_S25 <= 65535.0)
          {
            __asm { FCMP            H22, #0 }
            float v54 = _S25;
            if (_NF) {
              float v54 = 0.0;
            }
          }
          __asm { FCVT            S24, H21 }
          v33[1] = llroundf(v54);
          float v57 = 65535.0;
          if (_S24 <= 65535.0)
          {
            __asm { FCMP            H21, #0 }
            float v57 = _S24;
            if (_NF) {
              float v57 = 0.0;
            }
          }
          result += 8;
          v33[2] = llroundf(v57);
          v33[3] = bswap32(v48) >> 16;
          v33 += 4;
          --v32;
        }
        while (v32);
      }
      v31 += v12;
      v30 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_b64a_rgb_l64r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    int64x2_t v10 = *(void **)(result + 56);
    uint64_t v11 = **(void **)(result + 64);
    uint64_t v12 = **(void **)(result + 136);
    float v13 = (float)*(unsigned int *)(*(void *)(result + 152) + 136)
        / (float)*(unsigned int *)(*(void *)(result + 152) + 128);
    uint64_t v14 = *(void *)(result + 112);
    unint64_t v15 = *(void *)(result + 104) * a2 / v3;
    uint64_t v16 = *(void *)(result + 120);
    uint64_t v17 = *(void **)(result + 128);
    uint64_t result = *(void *)(result + 36);
    uint64_t v18 = *v17 + (v15 + v16) * v12 + 8 * v14;
    uint64_t v19 = *v10 + v11 * v8 + 8 * result;
    do
    {
      if (v7)
      {
        uint64_t v20 = v7;
        long long v21 = (unsigned __int16 *)v19;
        int64x2_t v22 = (_WORD *)v18;
        do
        {
          unsigned int v23 = bswap32(v21[1]);
          float v24 = v13 * (float)HIWORD(v23);
          float v25 = 65535.0;
          if (v24 <= 65535.0)
          {
            float v25 = v13 * (float)HIWORD(v23);
            if (v24 < 0.0) {
              float v25 = 0.0;
            }
          }
          unsigned int v26 = v21[3];
          unsigned int v27 = *v21;
          float v28 = v13 * (float)(bswap32(v21[2]) >> 16);
          *int64x2_t v22 = llroundf(v25);
          float v29 = 65535.0;
          if (v28 <= 65535.0)
          {
            float v29 = v28;
            if (v28 < 0.0) {
              float v29 = 0.0;
            }
          }
          float v30 = v13 * (float)(bswap32(v26) >> 16);
          v22[1] = llroundf(v29);
          float v31 = 65535.0;
          if (v30 <= 65535.0)
          {
            float v31 = v30;
            if (v30 < 0.0) {
              float v31 = 0.0;
            }
          }
          uint64_t result = bswap32(v27) >> 16;
          v21 += 4;
          v22[2] = llroundf(v31);
          void v22[3] = result;
          v22 += 4;
          --v20;
        }
        while (v20);
      }
      v19 += v11;
      v18 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(unsigned __int8 **)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v11 = **((void **)result + 8);
    uint64_t v12 = **((void **)result + 17);
    float v13 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    float v14 = *(float *)(v10 + 72);
    float v15 = *(float *)(v10 + 76);
    float v16 = *(float *)(v10 + 80);
    float v17 = *(float *)(v10 + 84);
    float v18 = *(float *)(v10 + 88);
    float v19 = *(float *)(v10 + 92);
    float v20 = *(float *)(v10 + 96);
    float v21 = *(float *)(v10 + 100);
    uint64_t v22 = v10 + 164;
    uint64_t v23 = v10 + 16548;
    uint64_t v24 = v10 + 32932;
    float v25 = *(float *)(v10 + 104);
    float v26 = *(float *)(v10 + 108);
    float v27 = *(float *)(v10 + 112);
    float v28 = *(float *)(v10 + 116);
    float v29 = *(float *)(v10 + 120);
    uint64_t v30 = **((void **)result + 16)
        + (*((void *)result + 13) * a2 / v3 + *((void *)result + 15)) * v12
        + 8 * *((void *)result + 14);
    uint64_t v31 = **((void **)result + 7) + v11 * v8 + 8 * *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)&unk_193E7D000;
    do
    {
      if (v7)
      {
        uint64_t result = v7;
        uint64_t v32 = (__int16 *)v31;
        float v33 = (_WORD *)v30;
        do
        {
          _H25 = *(_WORD *)(v22
                          + 2
                          * llroundf(fminf(fmaxf(v13 * (float)(bswap32((unsigned __int16)v32[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v22
                          + 2
                          * llroundf(fminf(fmaxf(v13 * (float)(bswap32((unsigned __int16)v32[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S27, H26 }
          _H26 = *(_WORD *)(v22
                          + 2
                          * llroundf(fminf(fmaxf(v13 * (float)(bswap32((unsigned __int16)v32[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S29, H26 }
          float v44 = (float)((float)((float)(v27 * _S27) + (float)(v26 * _S25)) + (float)(v28 * _S29))
              + (float)(v29 * fmaxf(_S25, fmaxf(_S27, _S29)));
          float v45 = 8191.0;
          if (v44 <= 8191.0)
          {
            float v45 = v44;
            if (v44 < 0.0) {
              float v45 = 0.0;
            }
          }
          _H26 = *(_WORD *)(v23 + 2 * llroundf(v45));
          __asm { FCVT            S30, H26 }
          float v48 = _S25 * _S30;
          float v49 = _S27 * _S30;
          float v50 = _S29 * _S30;
          _H29 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v15 * v49) + (float)((float)(_S25 * _S30) * v14))+ (float)((float)(_S29 * _S30) * v16), 0.0), 8191.0)));
          __asm { FCVT            S30, H29 }
          float v53 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v53 = _S30;
            if (_NF) {
              float v53 = 0.0;
            }
          }
          _H30 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v18 * v49) + (float)(v48 * v17)) + (float)(v50 * v19), 0.0), 8191.0)));
          __asm { FCVT            S31, H30 }
          float v57 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H30, #0 }
            float v57 = _S31;
            if (_NF) {
              float v57 = 0.0;
            }
          }
          _H27 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v21 * v49) + (float)(v48 * v20)) + (float)(v50 * v25), 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          float v61 = 65535.0;
          if (_S28 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v61 = _S28;
            if (_NF) {
              float v61 = 0.0;
            }
          }
          __int16 v63 = *v32;
          v32 += 4;
          *float v33 = v63;
          v33[1] = __rev16(llroundf(v53));
          v33[2] = __rev16(llroundf(v57));
          v33[3] = __rev16(llroundf(v61));
          v33 += 4;
          --result;
        }
        while (result);
      }
      v31 += v11;
      v30 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_b64a_GCD(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *(void *)(result + 152);
    int64x2_t v11 = *(void **)(result + 56);
    uint64_t v12 = **(void **)(result + 64);
    uint64_t v13 = **(void **)(result + 136);
    float v14 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    float v15 = *(float *)(v10 + 72);
    float v16 = *(float *)(v10 + 76);
    float v17 = *(float *)(v10 + 80);
    float v18 = *(float *)(v10 + 84);
    float v19 = *(float *)(v10 + 88);
    float v20 = *(float *)(v10 + 92);
    float v21 = *(float *)(v10 + 96);
    float v22 = *(float *)(v10 + 100);
    float v23 = *(float *)(v10 + 104);
    uint64_t v24 = v10 + 164;
    uint64_t v25 = v10 + 16548;
    uint64_t v26 = *(void *)(result + 112);
    unint64_t v27 = *(void *)(result + 104) * a2 / v3;
    uint64_t v29 = *(void *)(result + 120);
    float v28 = *(void **)(result + 128);
    uint64_t result = *(void *)(result + 36);
    uint64_t v30 = *v28 + (v27 + v29) * v13 + 8 * v26;
    uint64_t v31 = *v11 + v12 * v8 + 8 * result;
    do
    {
      if (v7)
      {
        uint64_t v32 = v7;
        uint64_t result = v31;
        float v33 = (_WORD *)v30;
        do
        {
          _H21 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf(v14 * (float)(bswap32(*(unsigned __int16 *)(result + 2)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H21 }
          _H21 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf(v14 * (float)(bswap32(*(unsigned __int16 *)(result + 4)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S23, H21 }
          _H21 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf(v14 * (float)(bswap32(*(unsigned __int16 *)(result + 6)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S24, H21 }
          _H25 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v16 * _S23) + (float)(_S22 * v15)) + (float)(_S24 * v17), 0.0), 8191.0)));
          __asm { FCVT            S26, H25 }
          float v46 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCMP            H25, #0 }
            float v46 = _S26;
            if (_NF) {
              float v46 = 0.0;
            }
          }
          _H26 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * _S23) + (float)(_S22 * v18)) + (float)(_S24 * v20), 0.0), 8191.0)));
          __asm { FCVT            S27, H26 }
          float v50 = 65535.0;
          if (_S27 <= 65535.0)
          {
            __asm { FCMP            H26, #0 }
            float v50 = _S27;
            if (_NF) {
              float v50 = 0.0;
            }
          }
          _H23 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v22 * _S23) + (float)(_S22 * v21)) + (float)(_S24 * v23), 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          float v54 = 65535.0;
          if (_S24 <= 65535.0)
          {
            __asm { FCMP            H23, #0 }
            float v54 = _S24;
            if (_NF) {
              float v54 = 0.0;
            }
          }
          __int16 v56 = *(_WORD *)result;
          result += 8;
          *float v33 = v56;
          v33[1] = __rev16(llroundf(v46));
          v33[2] = __rev16(llroundf(v50));
          v33[3] = __rev16(llroundf(v54));
          v33 += 4;
          --v32;
        }
        while (v32);
      }
      v31 += v12;
      v30 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_b64a_rgb_b64a_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    int64x2_t v10 = *(void **)(result + 56);
    uint64_t v11 = **(void **)(result + 64);
    uint64_t v12 = **(void **)(result + 136);
    float v13 = (float)*(unsigned int *)(*(void *)(result + 152) + 136)
        / (float)*(unsigned int *)(*(void *)(result + 152) + 128);
    uint64_t v14 = *(void *)(result + 112);
    unint64_t v15 = *(void *)(result + 104) * a2 / v3;
    uint64_t v16 = *(void *)(result + 120);
    uint64_t v17 = *(void **)(result + 128);
    uint64_t result = *(void *)(result + 36);
    uint64_t v18 = *v17 + (v15 + v16) * v12 + 8 * v14;
    uint64_t v19 = *v10 + v11 * v8 + 8 * result;
    do
    {
      if (v7)
      {
        uint64_t v20 = v7;
        long long v21 = (unsigned __int16 *)v19;
        int64x2_t v22 = (_WORD *)v18;
        do
        {
          unsigned int v23 = bswap32(v21[1]);
          float v24 = v13 * (float)HIWORD(v23);
          float v25 = 65535.0;
          if (v24 <= 65535.0)
          {
            float v25 = v13 * (float)HIWORD(v23);
            if (v24 < 0.0) {
              float v25 = 0.0;
            }
          }
          unsigned int v26 = bswap32(v21[2]);
          float v27 = v13 * (float)HIWORD(v26);
          float v28 = 65535.0;
          if (v27 <= 65535.0)
          {
            float v28 = v13 * (float)HIWORD(v26);
            if (v27 < 0.0) {
              float v28 = 0.0;
            }
          }
          unsigned int v29 = bswap32(v21[3]);
          float v30 = v13 * (float)HIWORD(v29);
          float v31 = 65535.0;
          if (v30 <= 65535.0)
          {
            float v31 = v13 * (float)HIWORD(v29);
            if (v30 < 0.0) {
              float v31 = 0.0;
            }
          }
          unsigned int v32 = *v21;
          v21 += 4;
          uint64_t result = v32;
          *int64x2_t v22 = v32;
          v22[1] = __rev16(llroundf(v25));
          v22[2] = __rev16(llroundf(v28));
          void v22[3] = __rev16(llroundf(v31));
          v22 += 4;
          --v20;
        }
        while (v20);
      }
      v19 += v11;
      v18 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(unsigned __int8 **)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v11 = **((void **)result + 8);
    uint64_t v12 = **((void **)result + 17);
    float v13 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    float v14 = *(float *)(v10 + 72);
    float v15 = *(float *)(v10 + 76);
    float v16 = *(float *)(v10 + 80);
    float v17 = *(float *)(v10 + 84);
    float v18 = *(float *)(v10 + 88);
    float v19 = *(float *)(v10 + 92);
    float v20 = *(float *)(v10 + 96);
    float v21 = *(float *)(v10 + 100);
    uint64_t v22 = v10 + 164;
    uint64_t v23 = v10 + 16548;
    uint64_t v24 = v10 + 32932;
    float v25 = *(float *)(v10 + 104);
    float v26 = *(float *)(v10 + 108);
    float v27 = *(float *)(v10 + 112);
    float v28 = *(float *)(v10 + 116);
    float v29 = *(float *)(v10 + 120);
    uint64_t v30 = **((void **)result + 16)
        + (*((void *)result + 13) * a2 / v3 + *((void *)result + 15)) * v12
        + 8 * *((void *)result + 14);
    uint64_t v31 = **((void **)result + 7) + v11 * v8 + 8 * *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)&unk_193E80000;
    do
    {
      if (v7)
      {
        uint64_t result = v7;
        unsigned int v32 = (unsigned __int16 *)v31;
        float v33 = (_WORD *)v30;
        do
        {
          _H25 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          float v44 = (float)((float)((float)(v27 * _S26) + (float)(v26 * _S25)) + (float)(v28 * _S27))
              + (float)(v29 * fmaxf(_S25, fmaxf(_S26, _S27)));
          float v45 = 8191.0;
          if (v44 <= 8191.0)
          {
            float v45 = v44;
            if (v44 < 0.0) {
              float v45 = 0.0;
            }
          }
          unsigned int v46 = *v32;
          v32 += 4;
          _H28 = *(_WORD *)(v23 + 2 * llroundf(v45));
          __asm { FCVT            S28, H28 }
          float v49 = _S25 * _S28;
          float v50 = _S26 * _S28;
          float v51 = _S27 * _S28;
          float v52 = (float)((float)(v15 * v50) + (float)(v49 * v14)) + (float)(v51 * v16);
          float v53 = (float)((float)(v18 * v50) + (float)(v49 * v17)) + (float)(v51 * v19);
          _S25 = (float)((float)(v21 * v50) + (float)(v49 * v20)) + (float)(v51 * v25);
          LOWORD(v50) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v52, 0.0), 8191.0)));
          LOWORD(v51) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v53, 0.0), 8191.0)));
          LOWORD(_S25) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          _S28 = (float)(bswap32(v46) >> 16) * 0.000015259;
          *float v33 = LOWORD(v50);
          v33[1] = LOWORD(v51);
          v33[2] = LOWORD(_S25);
          __asm { FCVT            H25, S28 }
          v33[3] = LOWORD(_S25);
          v33 += 4;
          --result;
        }
        while (result);
      }
      v31 += v11;
      v30 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_RGhA_GCD(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *(void *)(result + 152);
    int64x2_t v11 = *(void **)(result + 56);
    uint64_t v12 = **(void **)(result + 64);
    uint64_t v13 = **(void **)(result + 136);
    float v14 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    float v15 = *(float *)(v10 + 72);
    float v16 = *(float *)(v10 + 76);
    float v17 = *(float *)(v10 + 80);
    float v18 = *(float *)(v10 + 84);
    float v19 = *(float *)(v10 + 88);
    float v20 = *(float *)(v10 + 92);
    float v21 = *(float *)(v10 + 96);
    float v22 = *(float *)(v10 + 100);
    float v23 = *(float *)(v10 + 104);
    uint64_t v24 = v10 + 164;
    uint64_t v25 = v10 + 16548;
    uint64_t v26 = *(void *)(result + 112);
    unint64_t v27 = *(void *)(result + 104) * a2 / v3;
    uint64_t v29 = *(void *)(result + 120);
    float v28 = *(void **)(result + 128);
    uint64_t result = *(void *)(result + 36);
    uint64_t v30 = *v28 + (v27 + v29) * v13 + 8 * v26;
    uint64_t v31 = *v11 + v12 * v8 + 8 * result;
    do
    {
      if (v7)
      {
        uint64_t v32 = v7;
        uint64_t result = v31;
        float v33 = (_WORD *)v30;
        do
        {
          unsigned int v34 = *(unsigned __int16 *)(result + 4);
          unsigned int v35 = *(unsigned __int16 *)(result + 2);
          unsigned int v36 = *(unsigned __int16 *)(result + 6);
          unsigned int v37 = *(unsigned __int16 *)result;
          result += 8;
          _H21 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v35) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v34) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H23 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v36) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          float v48 = (float)((float)(v16 * _S22) + (float)(_S21 * v15)) + (float)(_S23 * v17);
          float v49 = (float)((float)(v19 * _S22) + (float)(_S21 * v18)) + (float)(_S23 * v20);
          _S21 = (float)((float)(v22 * _S22) + (float)(_S21 * v21)) + (float)(_S23 * v23);
          LOWORD(_S22) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v48, 0.0), 8191.0)));
          unsigned int v51 = llroundf(fminf(fmaxf(_S21, 0.0), 8191.0));
          LOWORD(_S21) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v49, 0.0), 8191.0)));
          LOWORD(_S23) = *(_WORD *)(v25 + 2 * v51);
          _S24 = (float)(bswap32(v37) >> 16) * 0.000015259;
          *float v33 = LOWORD(_S22);
          v33[1] = LOWORD(_S21);
          v33[2] = LOWORD(_S23);
          __asm { FCVT            H21, S24 }
          v33[3] = LOWORD(_S21);
          v33 += 4;
          --v32;
        }
        while (v32);
      }
      v31 += v12;
      v30 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, int32x2_t a4)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(result + 20);
    unint64_t v10 = v6 + *(void *)(result + 44);
    unint64_t v11 = v7 - v6;
    int64x2_t v12 = (void *)*((void *)result + 7);
    uint64_t v13 = **((void **)result + 8);
    uint64_t v14 = **((void **)result + 17);
    float v15 = 1.0 / (float)*(unsigned int *)(*((void *)result + 19) + 128);
    uint64_t v16 = *((void *)result + 14);
    unint64_t v17 = *((void *)result + 13) * a2 / v5;
    uint64_t v18 = *((void *)result + 15);
    uint64_t v19 = (void *)*((void *)result + 16);
    uint64_t result = *(unsigned __int8 **)(result + 36);
    uint64_t v20 = *v19 + (v17 + v18) * v14 + 8 * v16;
    uint64_t v21 = *v12 + v13 * v10 + 8 * (void)result;
    a4.i32[0] = 931135616;
    int32x4_t v22 = vdupq_lane_s32(a4, 0);
    *(float *)v22.i32 = v15;
    float32x4_t v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
    v23.i32[0] = 931135616;
    do
    {
      if (v9)
      {
        uint64_t v24 = v9;
        uint64_t v25 = (int8x8_t *)v21;
        uint64_t v26 = (int8x8_t *)v20;
        do
        {
          int8x8_t v27 = *v25++;
          int8x8_t v28 = (int8x8_t)vcvt_f16_f32(vmulq_f32(v23, vcvtq_f32_u32(vmovl_u16((uint16x4_t)vrev16_s8(v27)))));
          *v26++ = vext_s8(v28, v28, 2uLL);
          --v24;
        }
        while (v24);
      }
      v21 += v13;
      v20 += v14;
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    unint64_t v7 = *(unsigned __int8 **)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v11 = **((void **)result + 8);
    uint64_t v12 = **((void **)result + 17);
    float v13 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    float v14 = *(float *)(v10 + 72);
    float v15 = *(float *)(v10 + 76);
    float v16 = *(float *)(v10 + 80);
    float v17 = *(float *)(v10 + 84);
    float v18 = *(float *)(v10 + 88);
    float v19 = *(float *)(v10 + 92);
    float v20 = *(float *)(v10 + 96);
    float v21 = *(float *)(v10 + 100);
    uint64_t v22 = v10 + 164;
    uint64_t v23 = v10 + 16548;
    uint64_t v24 = v10 + 32932;
    float v25 = *(float *)(v10 + 104);
    float v26 = *(float *)(v10 + 108);
    float v27 = *(float *)(v10 + 112);
    float v28 = *(float *)(v10 + 116);
    float v29 = *(float *)(v10 + 120);
    uint64_t v30 = **((void **)result + 16)
        + (*((void *)result + 13) * a2 / v3 + *((void *)result + 15)) * v12
        + 16 * *((void *)result + 14);
    uint64_t v31 = **((void **)result + 7) + v11 * v8 + 8 * *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)&unk_193E80000;
    do
    {
      if (v7)
      {
        uint64_t result = v7;
        uint64_t v32 = (unsigned __int16 *)v31;
        uint64_t v33 = v30;
        do
        {
          _H25 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          float v44 = (float)((float)((float)(v27 * _S26) + (float)(v26 * _S25)) + (float)(v28 * _S27))
              + (float)(v29 * fmaxf(_S25, fmaxf(_S26, _S27)));
          float v45 = 8191.0;
          if (v44 <= 8191.0)
          {
            float v45 = v44;
            if (v44 < 0.0) {
              float v45 = 0.0;
            }
          }
          unsigned int v46 = *v32;
          v32 += 4;
          _H28 = *(_WORD *)(v23 + 2 * llroundf(v45));
          __asm { FCVT            S28, H28 }
          float v49 = _S25 * _S28;
          _S26 = _S26 * _S28;
          _S27 = _S27 * _S28;
          float v52 = (float)((float)(v15 * _S26) + (float)(v49 * v14)) + (float)(_S27 * v16);
          float v53 = (float)((float)(v18 * _S26) + (float)(v49 * v17)) + (float)(_S27 * v19);
          _S25 = (float)((float)(v21 * _S26) + (float)(v49 * v20)) + (float)(_S27 * v25);
          LOWORD(_S26) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v52, 0.0), 8191.0)));
          LOWORD(_S27) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v53, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          LOWORD(_S25) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          *(_DWORD *)uint64_t v33 = _S26;
          *(_DWORD *)(v33 + 4) = _S27;
          *(_DWORD *)(v33 + 8) = _S25;
          *(float *)(v33 + 12) = (float)(bswap32(v46) >> 16) * 0.000015259;
          v33 += 16;
          --result;
        }
        while (result);
      }
      v31 += v11;
      v30 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_RGfA_GCD(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *(void *)(result + 152);
    int64x2_t v11 = *(void **)(result + 56);
    uint64_t v12 = **(void **)(result + 64);
    uint64_t v13 = **(void **)(result + 136);
    float v14 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    float v15 = *(float *)(v10 + 72);
    float v16 = *(float *)(v10 + 76);
    float v17 = *(float *)(v10 + 80);
    float v18 = *(float *)(v10 + 84);
    float v19 = *(float *)(v10 + 88);
    float v20 = *(float *)(v10 + 92);
    float v21 = *(float *)(v10 + 96);
    float v22 = *(float *)(v10 + 100);
    float v23 = *(float *)(v10 + 104);
    uint64_t v24 = v10 + 164;
    uint64_t v25 = v10 + 16548;
    uint64_t v26 = *(void *)(result + 112);
    unint64_t v27 = *(void *)(result + 104) * a2 / v3;
    uint64_t v29 = *(void *)(result + 120);
    float v28 = *(void **)(result + 128);
    uint64_t result = *(void *)(result + 36);
    uint64_t v30 = *v28 + (v27 + v29) * v13 + 16 * v26;
    uint64_t v31 = *v11 + v12 * v8 + 8 * result;
    do
    {
      if (v7)
      {
        uint64_t v32 = v7;
        uint64_t result = v31;
        uint64_t v33 = v30;
        do
        {
          unsigned int v34 = *(unsigned __int16 *)(result + 2);
          unsigned int v35 = *(unsigned __int16 *)(result + 4);
          unsigned int v36 = *(unsigned __int16 *)(result + 6);
          unsigned int v37 = *(unsigned __int16 *)result;
          result += 8;
          _H22 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v35) >> 16), 0.0), 8191.0)));
          _H23 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v34) >> 16), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v36) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S22, H22
            FCVT            S21, H21
          }
          float v48 = (float)((float)(v16 * _S22) + (float)(_S23 * v15)) + (float)(_S21 * v17);
          float v49 = (float)((float)(v19 * _S22) + (float)(_S23 * v18)) + (float)(_S21 * v20);
          float v50 = (float)((float)(v22 * _S22) + (float)(_S23 * v21)) + (float)(_S21 * v23);
          LOWORD(_S22) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v48, 0.0), 8191.0)));
          LOWORD(_S23) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v49, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          unsigned int v52 = llroundf(fminf(fmaxf(v50, 0.0), 8191.0));
          __asm { FCVT            S21, H23 }
          LOWORD(_S23) = *(_WORD *)(v25 + 2 * v52);
          __asm { FCVT            S23, H23 }
          *(_DWORD *)uint64_t v33 = _S22;
          *(_DWORD *)(v33 + 4) = _S21;
          *(_DWORD *)(v33 + 8) = _S23;
          *(float *)(v33 + 12) = (float)(bswap32(v37) >> 16) * 0.000015259;
          v33 += 16;
          --v32;
        }
        while (v32);
      }
      v31 += v12;
      v30 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, int32x2_t a4)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(result + 20);
    unint64_t v10 = v6 + *(void *)(result + 44);
    unint64_t v11 = v7 - v6;
    int64x2_t v12 = (void *)*((void *)result + 7);
    uint64_t v13 = **((void **)result + 8);
    uint64_t v14 = **((void **)result + 17);
    float v15 = 1.0 / (float)*(unsigned int *)(*((void *)result + 19) + 128);
    uint64_t v16 = *((void *)result + 14);
    unint64_t v17 = *((void *)result + 13) * a2 / v5;
    uint64_t v18 = *((void *)result + 15);
    uint64_t v19 = (void *)*((void *)result + 16);
    uint64_t result = *(unsigned __int8 **)(result + 36);
    uint64_t v20 = *v19 + (v17 + v18) * v14 + 16 * v16;
    uint64_t v21 = *v12 + v13 * v10 + 8 * (void)result;
    a4.i32[0] = 931135616;
    int32x4_t v22 = vdupq_lane_s32(a4, 0);
    *(float *)v22.i32 = v15;
    float32x4_t v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
    v23.i32[0] = 931135616;
    do
    {
      if (v9)
      {
        uint64_t v24 = v9;
        uint64_t v25 = (int8x8_t *)v21;
        uint64_t v26 = (int8x16_t *)v20;
        do
        {
          int8x8_t v27 = *v25++;
          int8x16_t v28 = (int8x16_t)vmulq_f32(v23, vcvtq_f32_u32(vmovl_u16((uint16x4_t)vrev16_s8(v27))));
          *v26++ = vextq_s8(v28, v28, 4uLL);
          --v24;
        }
        while (v24);
      }
      v21 += v13;
      v20 += v14;
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

CFTypeRef VTImageRotationSessionRetain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

void VTImageRotationSessionRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t VTImageRotationSessionCreate(const __CFAllocator *a1, int a2, VTPixelRotationSessionRef *pixelRotationSessionOut)
{
  if (a2 <= 179)
  {
    if (a2 && a2 != 90) {
      goto LABEL_13;
    }
LABEL_7:
    if (!pixelRotationSessionOut) {
      return 0;
    }
    uint64_t result = VTPixelRotationSessionCreate(a1, pixelRotationSessionOut);
    if (result) {
      return result;
    }
    switch(a2)
    {
      case 90:
        unint64_t v6 = (CFTypeRef *)&kVTRotation_CW90;
        break;
      case 270:
        unint64_t v6 = (CFTypeRef *)&kVTRotation_CCW90;
        break;
      case 180:
        unint64_t v6 = (CFTypeRef *)&kVTRotation_180;
        break;
      default:
LABEL_20:
        VTSessionSetProperty(*pixelRotationSessionOut, @"EnableGPUAcceleratedTransfer", (CFTypeRef)*MEMORY[0x1E4F1CFC8]);
        return 0;
    }
    if (*v6) {
      VTSessionSetProperty(*pixelRotationSessionOut, @"Rotation", *v6);
    }
    goto LABEL_20;
  }
  if (a2 == 180 || a2 == 270) {
    goto LABEL_7;
  }
LABEL_13:

  return FigSignalErrorAt();
}

uint64_t vtCopyPlane(char *__src, uint64_t a2, char *__dst, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a6)
  {
    uint64_t v7 = a6;
    size_t v12 = a7 * a5;
    do
    {
      memcpy(__dst, __src, v12);
      __src += a2;
      __dst += a4;
      --v7;
    }
    while (v7);
  }
  return 0;
}

vImage_Error vt_Rotate_8(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, size_t *a5, void **a6, int a7)
{
  uint64_t v10 = (uint64_t)*a4;
  vImagePixelCount v11 = *a2;
  src.data = *a4;
  src.height = v11;
  vImagePixelCount v12 = *a1;
  size_t v13 = *a3;
  src.width = v12;
  src.rowBytes = v13;
  uint64_t v14 = *a6;
  v18.data = v14;
  v18.height = v11;
  size_t v15 = *a5;
  v18.width = v12;
  v18.rowBytes = v15;
  if (a7 == 90)
  {
    uint8_t v16 = 3;
LABEL_8:
    src.height = v12;
    src.width = v11;
    return vImageRotate90_Planar8(&src, &v18, v16, 0, 0);
  }
  if (a7 == 270)
  {
    uint8_t v16 = 1;
    goto LABEL_8;
  }
  if (a7 != 180)
  {
    uint8_t v16 = 0;
    return vImageRotate90_Planar8(&src, &v18, v16, 0, 0);
  }
  if ((void *)v10 != v14)
  {
    uint8_t v16 = 2;
    return vImageRotate90_Planar8(&src, &v18, v16, 0, 0);
  }
  if ((v10 & 0xF) != 0 || (v13 & 0xF) != 0 || (v15 & 0xF) != 0 || (v12 & 0xF) != 0) {
    vtRotatePixelRect180_1BPP_inplace(v10, v13, (char *)v10, v15, v12, v11);
  }
  else {
    vtRotatePixelRect180_1BPP_inplace_arm((unint64_t *)v10, v13, v10, v15, v12, v11);
  }
  return 0;
}

uint64_t vtRotatePixelRect180_1BPP_inplace(uint64_t result, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = (char *)(a5 + result + (a6 - 1) * a2 - 1);
  if (a6 >= 2)
  {
    uint64_t v7 = (unint64_t)a6 >> 1;
    do
    {
      if (a5)
      {
        uint64_t v8 = 0;
        uint64_t v9 = a3;
        do
        {
          char v10 = *v9;
          *v9++ = v6[v8];
          v6[v8--] = v10;
        }
        while (-a5 != v8);
      }
      v6 -= a2;
      a3 += a4;
    }
    while (v7-- > 1);
  }
  if ((a6 & 1) != 0 && (unint64_t)(a5 + 1) >= 3)
  {
    if (a5 >= 0) {
      uint64_t v12 = a5;
    }
    else {
      uint64_t v12 = a5 + 1;
    }
    uint64_t v13 = v12 >> 1;
    do
    {
      char v14 = *a3;
      *a3++ = *v6;
      *v6-- = v14;
      --v13;
    }
    while (v13);
  }
  return result;
}

vImage_Error vt_Rotate_8_90CW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, void **a8)
{
  vImagePixelCount v8 = *a1;
  if (*a1 != *a6) {
    return 4294954382;
  }
  vImagePixelCount v10 = *a2;
  if (*a2 != *a5) {
    return 4294954382;
  }
  src.data = *a4;
  src.height = v10;
  size_t v16 = *a3;
  src.width = v8;
  src.rowBytes = v16;
  v38.data = *a8;
  v38.height = v8;
  size_t v17 = *a7;
  v38.width = v10;
  v38.rowBytes = v17;
  vImage_Error result = vImageRotate90_Planar8(&src, &v38, 3u, 0, 0);
  if (result)
  {
    vImage_Error result = vtRotatePixelRect90CW_1BPP_arm((uint64_t)*a4, *a3, (uint64_t)*a8, *a7, *a5, *a6);
    if (result)
    {
      uint64_t v19 = *a5;
      if (*a5 >= 1)
      {
        uint64_t v20 = *a7;
        uint64_t v21 = *a6;
        uint64_t v22 = *a7 << 6;
        uint64_t v23 = -64 * *a3;
        uint64_t v24 = (char *)*a8;
        uint64_t v25 = (uint64_t)*a4 + (*a5 - 1) * *a3;
        uint64_t v26 = -*a3;
        do
        {
          if (v21 >= 1)
          {
            if ((unint64_t)v19 >= 0x40) {
              uint64_t v27 = 64;
            }
            else {
              uint64_t v27 = v19;
            }
            uint64_t v28 = v21;
            uint64_t v29 = v24;
            uint64_t v30 = v25;
            do
            {
              if ((unint64_t)v28 >= 0x40) {
                uint64_t v31 = 64;
              }
              else {
                uint64_t v31 = v28;
              }
              uint64_t v32 = v27;
              uint64_t v33 = v29;
              uint64_t v34 = v30;
              do
              {
                uint64_t v35 = 0;
                unsigned int v36 = v33;
                do
                {
                  *unsigned int v36 = *(unsigned char *)(v34 + v35);
                  v36 += v20;
                  ++v35;
                }
                while (v31 != v35);
                v34 += v26;
                ++v33;
                --v32;
              }
              while (v32);
              v30 += 64;
              v29 += v22;
              BOOL v37 = v28 <= 64;
              v28 -= 64;
            }
            while (!v37);
          }
          v25 += v23;
          v24 += 64;
          BOOL v37 = v19 <= 64;
          v19 -= 64;
        }
        while (!v37);
      }
      return 0;
    }
  }
  return result;
}

vImage_Error vt_Rotate_8_180(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, int8x16_t **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  vImagePixelCount v9 = *a1;
  if (*a1 != *a5) {
    return 4294954382;
  }
  size_t v15 = *a4;
  size_t v16 = (int8x16_t *)*a8;
  vImagePixelCount v17 = *a2;
  src.data = v15;
  src.height = v17;
  uint64_t v18 = *a3;
  src.width = v9;
  src.rowBytes = v18;
  uint64_t v19 = *a6;
  v31.data = v16;
  v31.height = v19;
  uint64_t v20 = *a7;
  v31.width = v9;
  v31.rowBytes = v20;
  if (v15 == v16)
  {
    if ((v15 & 0xF) != 0
      || ((v18 | v15) & 0xF) != 0
      || ((v20 | v9) & 0xF) != 0)
    {
      vtRotatePixelRect180_1BPP_inplace((uint64_t)v15, v18, v15->i8, v20, v9, v19);
    }
    else
    {
      vtRotatePixelRect180_1BPP_inplace_arm((unint64_t *)v15, v18, (uint64_t)v15, v20, v9, v19);
    }
    return 0;
  }
  vImage_Error result = vImageRotate90_Planar8(&src, &v31, 2u, 0, 0);
  if (result)
  {
    vImage_Error result = vtRotatePixelRect180_1BPP_arm(*a4, *a3, *a8, *a7, *a5, *a6);
    if (result)
    {
      uint64_t v22 = *a6;
      if (*a6)
      {
        uint64_t v23 = *a7;
        uint64_t v24 = *a5;
        uint64_t v25 = *a8;
        uint64_t v26 = (uint64_t)(*a4)->i64 + *a5 + *a3 * (v22 - 1) - 1;
        uint64_t v27 = -*a3;
        uint64_t v28 = -*a5;
        do
        {
          if (v24)
          {
            uint64_t v29 = 0;
            uint64_t v30 = (unsigned char *)v25;
            do
              *v30++ = *(unsigned char *)(v26 + v29--);
            while (v28 != v29);
          }
          v26 += v27;
          v25 += v23;
          --v22;
        }
        while (v22);
      }
      return 0;
    }
  }
  return result;
}

vImage_Error vt_Rotate_8_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, void **a8)
{
  vImagePixelCount v8 = *a1;
  if (*a1 != *a6) {
    return 4294954382;
  }
  vImagePixelCount v10 = *a2;
  if (*a2 != *a5) {
    return 4294954382;
  }
  src.data = *a4;
  src.height = v10;
  size_t v16 = *a3;
  src.width = v8;
  src.rowBytes = v16;
  v39.data = *a8;
  v39.height = v8;
  size_t v17 = *a7;
  v39.width = v10;
  v39.rowBytes = v17;
  vImage_Error result = vImageRotate90_Planar8(&src, &v39, 1u, 0, 0);
  if (result)
  {
    vImage_Error result = vtRotatePixelRect90CCW_1BPP_arm((uint64_t)*a4, *a3, (uint64_t)*a8, *a7, *a5, *a6);
    if (result)
    {
      uint64_t v19 = *a5;
      if (*a5 >= 1)
      {
        uint64_t v20 = *a3;
        uint64_t v21 = *a7;
        uint64_t v22 = *a6;
        uint64_t v23 = *a7 << 6;
        uint64_t v24 = *a3 << 6;
        uint64_t v25 = (char *)*a8;
        uint64_t v26 = (uint64_t)*a4 + *a6 - 1;
        do
        {
          if (v22 >= 1)
          {
            if ((unint64_t)v19 >= 0x40) {
              uint64_t v27 = 64;
            }
            else {
              uint64_t v27 = v19;
            }
            uint64_t v28 = v22;
            uint64_t v29 = v25;
            uint64_t v30 = v26;
            do
            {
              if ((unint64_t)v28 >= 0x40) {
                uint64_t v31 = 64;
              }
              else {
                uint64_t v31 = v28;
              }
              uint64_t v32 = -v31;
              uint64_t v33 = v27;
              uint64_t v34 = v29;
              uint64_t v35 = v30;
              do
              {
                uint64_t v36 = 0;
                BOOL v37 = v34;
                do
                {
                  *BOOL v37 = *(unsigned char *)(v35 + v36);
                  v37 += v21;
                  --v36;
                }
                while (v32 != v36);
                v35 += v20;
                ++v34;
                --v33;
              }
              while (v33);
              v30 -= 64;
              v29 += v23;
              BOOL v38 = v28 <= 64;
              v28 -= 64;
            }
            while (!v38);
          }
          v26 += v24;
          v25 += 64;
          BOOL v38 = v19 <= 64;
          v19 -= 64;
        }
        while (!v38);
      }
      return 0;
    }
  }
  return result;
}

vImage_Error vt_Rotate_16(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, size_t *a5, void **a6, int a7)
{
  vImagePixelCount v7 = *a2;
  src.data = *a4;
  src.height = v7;
  vImagePixelCount v8 = *a1;
  size_t v9 = *a3;
  src.width = v8;
  src.rowBytes = v9;
  v13.data = *a6;
  v13.height = v7;
  size_t v10 = *a5;
  v13.width = v8;
  v13.rowBytes = v10;
  switch(a7)
  {
    case 270:
      src.height = v8;
      src.width = v7;
      uint8_t v11 = 1;
      break;
    case 180:
      uint8_t v11 = 2;
      break;
    case 90:
      src.height = v8;
      src.width = v7;
      uint8_t v11 = 3;
      break;
    default:
      uint8_t v11 = 0;
      break;
  }
  return vImageRotate90_Planar16U(&src, &v13, v11, 0, 0);
}

vImage_Error vt_Rotate_16_90CW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, uint64_t *a5, uint64_t *a6, size_t *a7, void **a8)
{
  vImagePixelCount v8 = *a1;
  if (*a1 != *a6) {
    return 4294954382;
  }
  vImagePixelCount v10 = *a2;
  if (*a2 != *a5) {
    return 4294954382;
  }
  src.data = *a4;
  src.height = v10;
  size_t v16 = *a3;
  src.width = v8;
  src.rowBytes = v16;
  v38.data = *a8;
  v38.height = v8;
  size_t v17 = *a7;
  v38.width = v10;
  v38.rowBytes = v17;
  vImage_Error result = vImageRotate90_Planar16U(&src, &v38, 3u, 0, 0);
  if (result)
  {
    uint64_t v19 = *a5;
    if (*a5 >= 1)
    {
      size_t v20 = *a7;
      uint64_t v21 = *a6;
      size_t v22 = *a7 << 6;
      uint64_t v23 = -64 * *a3;
      uint64_t v24 = (char *)*a8;
      uint64_t v25 = (uint64_t)*a4 + (*a5 - 1) * *a3;
      uint64_t v26 = -(uint64_t)*a3;
      do
      {
        if (v21 >= 1)
        {
          if ((unint64_t)v19 >= 0x40) {
            uint64_t v27 = 64;
          }
          else {
            uint64_t v27 = v19;
          }
          uint64_t v28 = v21;
          uint64_t v29 = v24;
          uint64_t v30 = v25;
          do
          {
            if ((unint64_t)v28 >= 0x40) {
              uint64_t v31 = 64;
            }
            else {
              uint64_t v31 = v28;
            }
            uint64_t v32 = v27;
            uint64_t v33 = v29;
            uint64_t v34 = v30;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = v33;
              do
              {
                *uint64_t v36 = *(_WORD *)(v34 + 2 * v35);
                uint64_t v36 = (_WORD *)((char *)v36 + v20);
                ++v35;
              }
              while (v31 != v35);
              v34 += v26;
              ++v33;
              --v32;
            }
            while (v32);
            v30 += 128;
            v29 += v22;
            BOOL v37 = v28 <= 64;
            v28 -= 64;
          }
          while (!v37);
        }
        v25 += v23;
        v24 += 128;
        BOOL v37 = v19 <= 64;
        v19 -= 64;
      }
      while (!v37);
    }
    return 0;
  }
  return result;
}

vImage_Error vt_Rotate_16_180(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  vImagePixelCount v9 = *a1;
  if (*a1 != *a5) {
    return 4294954382;
  }
  uint64_t v15 = *a4;
  size_t v16 = (void *)*a8;
  vImagePixelCount v17 = *a2;
  src.data = (void *)v15;
  src.height = v17;
  uint64_t v18 = *a3;
  src.width = v9;
  src.rowBytes = v18;
  uint64_t v19 = *a6;
  v30.data = v16;
  v30.height = v19;
  uint64_t v20 = *a7;
  v30.width = v9;
  v30.rowBytes = v20;
  if ((void *)v15 == v16)
  {
    if ((v15 & 0xF) != 0
      || ((v18 | v15) & 0xF) != 0
      || ((v20 | v9) & 0xF) != 0)
    {
      vtRotatePixelRect180_2BPP_inplace(v15, v18, (__int16 *)v15, v20, v9, v19);
    }
    else
    {
      vtRotatePixelRect180_2BPP_inplace_arm((int16x8_t *)v15, v18, v15, v20, v9, v19);
    }
    return 0;
  }
  vImage_Error result = vImageRotate90_Planar16U(&src, &v30, 2u, 0, 0);
  if (result)
  {
    vImage_Error result = vtRotatePixelRect180_2BPP_arm(*a4, *a3, *a8, *a7, *a5, *a6);
    if (result)
    {
      uint64_t v22 = *a6;
      if (*a6)
      {
        uint64_t v23 = *a7;
        uint64_t v24 = *a5;
        uint64_t v25 = *a8;
        uint64_t v26 = *a4 + 2 * *a5 + *a3 * (v22 - 1) - 2;
        uint64_t v27 = -*a3;
        do
        {
          if (v24)
          {
            uint64_t v28 = 0;
            for (uint64_t i = 0; i != v24; ++i)
            {
              *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v26 + v28);
              v28 -= 2;
            }
          }
          v26 += v27;
          v25 += v23;
          --v22;
        }
        while (v22);
      }
      return 0;
    }
  }
  return result;
}

uint64_t vtRotatePixelRect180_2BPP_inplace(uint64_t result, uint64_t a2, __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = (__int16 *)(result + 2 * a5 + (a6 - 1) * a2 - 2);
  if (a6 >= 2)
  {
    uint64_t v7 = (unint64_t)a6 >> 1;
    do
    {
      if (a5)
      {
        uint64_t v8 = 0;
        for (uint64_t i = 0; i != a5; ++i)
        {
          __int16 v10 = a3[i];
          a3[i] = v6[v8];
          v6[v8--] = v10;
        }
      }
      unint64_t v6 = (__int16 *)((char *)v6 - a2);
      a3 = (__int16 *)((char *)a3 + a4);
    }
    while (v7-- > 1);
  }
  if ((a6 & 1) != 0 && (unint64_t)(a5 + 1) >= 3)
  {
    if (a5 >= 0) {
      uint64_t v12 = a5;
    }
    else {
      uint64_t v12 = a5 + 1;
    }
    uint64_t v13 = v12 >> 1;
    do
    {
      __int16 v14 = *a3;
      *a3++ = *v6;
      *v6-- = v14;
      --v13;
    }
    while (v13);
  }
  return result;
}

vImage_Error vt_Rotate_16_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, uint64_t *a5, uint64_t *a6, size_t *a7, void **a8)
{
  vImagePixelCount v8 = *a1;
  if (*a1 != *a6) {
    return 4294954382;
  }
  vImagePixelCount v10 = *a2;
  if (*a2 != *a5) {
    return 4294954382;
  }
  src.data = *a4;
  src.height = v10;
  size_t v16 = *a3;
  src.width = v8;
  src.rowBytes = v16;
  v39.data = *a8;
  v39.height = v8;
  size_t v17 = *a7;
  v39.width = v10;
  v39.rowBytes = v17;
  vImage_Error result = vImageRotate90_Planar16U(&src, &v39, 1u, 0, 0);
  if (result)
  {
    uint64_t v19 = *a5;
    if (*a5 >= 1)
    {
      size_t v20 = *a3;
      size_t v21 = *a7;
      uint64_t v22 = *a6;
      size_t v23 = *a7 << 6;
      size_t v24 = *a3 << 6;
      uint64_t v25 = (char *)*a8;
      uint64_t v26 = (uint64_t)*a4 + 2 * *a6 - 2;
      do
      {
        if (v22 >= 1)
        {
          if ((unint64_t)v19 >= 0x40) {
            uint64_t v27 = 64;
          }
          else {
            uint64_t v27 = v19;
          }
          uint64_t v28 = v22;
          uint64_t v29 = v25;
          uint64_t v30 = v26;
          do
          {
            if ((unint64_t)v28 >= 0x40) {
              uint64_t v31 = 64;
            }
            else {
              uint64_t v31 = v28;
            }
            uint64_t v32 = -v31;
            uint64_t v33 = v27;
            uint64_t v34 = v29;
            uint64_t v35 = v30;
            do
            {
              uint64_t v36 = 0;
              BOOL v37 = v34;
              do
              {
                *BOOL v37 = *(_WORD *)(v35 + 2 * v36);
                BOOL v37 = (_WORD *)((char *)v37 + v21);
                --v36;
              }
              while (v32 != v36);
              v35 += v20;
              ++v34;
              --v33;
            }
            while (v33);
            v30 -= 128;
            v29 += v23;
            BOOL v38 = v28 <= 64;
            v28 -= 64;
          }
          while (!v38);
        }
        v26 += v24;
        v25 += 128;
        BOOL v38 = v19 <= 64;
        v19 -= 64;
      }
      while (!v38);
    }
    return 0;
  }
  return result;
}

vImage_Error vt_Rotate_32(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, size_t *a5, void **a6, int a7)
{
  *(_DWORD *)backColor = 255;
  vImagePixelCount v7 = *a2;
  src.data = *a4;
  src.height = v7;
  vImagePixelCount v8 = *a1;
  size_t v9 = *a3;
  src.width = v8;
  src.rowBytes = v9;
  dest.data = *a6;
  dest.height = v7;
  size_t v10 = *a5;
  dest.width = v8;
  dest.rowBytes = v10;
  switch(a7)
  {
    case 270:
      src.height = v8;
      src.width = v7;
      uint8_t v11 = 1;
      break;
    case 180:
      uint8_t v11 = 2;
      break;
    case 90:
      src.height = v8;
      src.width = v7;
      uint8_t v11 = 3;
      break;
    default:
      uint8_t v11 = 0;
      break;
  }
  return vImageRotate90_ARGB8888(&src, &dest, v11, backColor, 0);
}

vImage_Error vt_Rotate_32_90CW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, uint64_t *a5, uint64_t *a6, size_t *a7, void **a8)
{
  vImagePixelCount v8 = *a1;
  if (*a1 != *a6) {
    return 4294954382;
  }
  vImagePixelCount v10 = *a2;
  if (*a2 != *a5) {
    return 4294954382;
  }
  *(_DWORD *)backColor = 0;
  src.data = *a4;
  src.height = v10;
  size_t v16 = *a3;
  src.width = v8;
  src.rowBytes = v16;
  dest.data = *a8;
  dest.height = v8;
  size_t v17 = *a7;
  dest.width = v10;
  dest.rowBytes = v17;
  vImage_Error result = vImageRotate90_ARGB8888(&src, &dest, 3u, backColor, 0);
  if (result)
  {
    uint64_t v19 = *a5;
    if (*a5 >= 1)
    {
      size_t v20 = *a7;
      uint64_t v21 = *a6;
      size_t v22 = *a7 << 6;
      uint64_t v23 = -64 * *a3;
      size_t v24 = (char *)*a8;
      uint64_t v25 = (uint64_t)*a4 + (*a5 - 1) * *a3;
      uint64_t v26 = -(uint64_t)*a3;
      do
      {
        if (v21 >= 1)
        {
          if ((unint64_t)v19 >= 0x40) {
            uint64_t v27 = 64;
          }
          else {
            uint64_t v27 = v19;
          }
          uint64_t v28 = v21;
          uint64_t v29 = v24;
          uint64_t v30 = v25;
          do
          {
            if ((unint64_t)v28 >= 0x40) {
              uint64_t v31 = 64;
            }
            else {
              uint64_t v31 = v28;
            }
            uint64_t v32 = v27;
            uint64_t v33 = v29;
            uint64_t v34 = v30;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = v33;
              do
              {
                *uint64_t v36 = *(_DWORD *)(v34 + 4 * v35);
                uint64_t v36 = (_DWORD *)((char *)v36 + v20);
                ++v35;
              }
              while (v31 != v35);
              v34 += v26;
              ++v33;
              --v32;
            }
            while (v32);
            v30 += 256;
            v29 += v22;
            BOOL v37 = v28 <= 64;
            v28 -= 64;
          }
          while (!v37);
        }
        v25 += v23;
        v24 += 256;
        BOOL v37 = v19 <= 64;
        v19 -= 64;
      }
      while (!v37);
    }
    return 0;
  }
  return result;
}

vImage_Error vt_Rotate_32_180(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, uint64_t *a5, vImagePixelCount *a6, size_t *a7, void **a8)
{
  vImagePixelCount v9 = *a1;
  if (*a1 != *a5) {
    return 4294954382;
  }
  uint64_t v15 = *a4;
  size_t v16 = *a8;
  *(_DWORD *)backColor = 0;
  vImagePixelCount v17 = *a2;
  src.data = v15;
  src.height = v17;
  size_t v18 = *a3;
  src.width = v9;
  src.rowBytes = v18;
  vImagePixelCount v19 = *a6;
  dest.data = v16;
  dest.height = v19;
  size_t v20 = *a7;
  dest.width = v9;
  dest.rowBytes = v20;
  if (v15 == v16)
  {
    vtRotatePixelRect180_4BPP_inplace((uint64_t)v15, v18, (int *)v15, v20, v9, v19);
  }
  else
  {
    vImage_Error result = vImageRotate90_ARGB8888(&src, &dest, 2u, backColor, 0);
    if (!result) {
      return result;
    }
    vImagePixelCount v22 = *a6;
    if (*a6)
    {
      size_t v23 = *a7;
      uint64_t v24 = *a5;
      uint64_t v25 = (char *)*a8;
      uint64_t v26 = (uint64_t)*a4 + 4 * *a5 + *a3 * (v22 - 1) - 4;
      uint64_t v27 = -(uint64_t)*a3;
      do
      {
        if (v24)
        {
          uint64_t v28 = 0;
          for (uint64_t i = 0; i != v24; ++i)
          {
            *(_DWORD *)&v25[4 * i] = *(_DWORD *)(v26 + v28);
            v28 -= 4;
          }
        }
        v26 += v27;
        v25 += v23;
        --v22;
      }
      while (v22);
    }
  }
  return 0;
}

uint64_t vtRotatePixelRect180_4BPP_inplace(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = (int *)(result + 2 * a5 + (a6 - 1) * a2 - 2);
  if (a6 >= 2)
  {
    uint64_t v7 = (unint64_t)a6 >> 1;
    do
    {
      if (a5)
      {
        uint64_t v8 = 0;
        for (uint64_t i = 0; i != a5; ++i)
        {
          int v10 = a3[i];
          a3[i] = v6[v8];
          v6[v8--] = v10;
        }
      }
      unint64_t v6 = (int *)((char *)v6 - a2);
      a3 = (int *)((char *)a3 + a4);
    }
    while (v7-- > 1);
  }
  if ((a6 & 1) != 0 && (unint64_t)(a5 + 1) >= 3)
  {
    if (a5 >= 0) {
      uint64_t v12 = a5;
    }
    else {
      uint64_t v12 = a5 + 1;
    }
    uint64_t v13 = v12 >> 1;
    do
    {
      int v14 = *a3;
      *a3++ = *v6;
      *v6-- = v14;
      --v13;
    }
    while (v13);
  }
  return result;
}

vImage_Error vt_Rotate_32_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, uint64_t *a5, uint64_t *a6, size_t *a7, void **a8)
{
  vImagePixelCount v8 = *a1;
  if (*a1 != *a6) {
    return 4294954382;
  }
  vImagePixelCount v10 = *a2;
  if (*a2 != *a5) {
    return 4294954382;
  }
  *(_DWORD *)backColor = 0;
  src.data = *a4;
  src.height = v10;
  size_t v16 = *a3;
  src.width = v8;
  src.rowBytes = v16;
  dest.data = *a8;
  dest.height = v8;
  size_t v17 = *a7;
  dest.width = v10;
  dest.rowBytes = v17;
  vImage_Error result = vImageRotate90_ARGB8888(&src, &dest, 1u, backColor, 0);
  if (result)
  {
    uint64_t v19 = *a5;
    if (*a5 >= 1)
    {
      size_t v20 = *a3;
      size_t v21 = *a7;
      uint64_t v22 = *a6;
      size_t v23 = *a7 << 6;
      size_t v24 = *a3 << 6;
      uint64_t v25 = (char *)*a8;
      uint64_t v26 = (uint64_t)*a4 + 4 * *a6 - 4;
      do
      {
        if (v22 >= 1)
        {
          if ((unint64_t)v19 >= 0x40) {
            uint64_t v27 = 64;
          }
          else {
            uint64_t v27 = v19;
          }
          uint64_t v28 = v22;
          uint64_t v29 = v25;
          uint64_t v30 = v26;
          do
          {
            if ((unint64_t)v28 >= 0x40) {
              uint64_t v31 = 64;
            }
            else {
              uint64_t v31 = v28;
            }
            uint64_t v32 = -v31;
            uint64_t v33 = v27;
            uint64_t v34 = v29;
            uint64_t v35 = v30;
            do
            {
              uint64_t v36 = 0;
              BOOL v37 = v34;
              do
              {
                *BOOL v37 = *(_DWORD *)(v35 + 4 * v36);
                BOOL v37 = (_DWORD *)((char *)v37 + v21);
                --v36;
              }
              while (v32 != v36);
              v35 += v20;
              ++v34;
              --v33;
            }
            while (v33);
            v30 -= 256;
            v29 += v23;
            BOOL v38 = v28 <= 64;
            v28 -= 64;
          }
          while (!v38);
        }
        v26 += v24;
        v25 += 256;
        BOOL v38 = v19 <= 64;
        v19 -= 64;
      }
      while (!v38);
    }
    return 0;
  }
  return result;
}

vImage_Error vt_Rotate_64(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, size_t *a5, void **a6, int a7)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *(void *)backColor = 255;
  vImagePixelCount v7 = *a2;
  src.data = *a4;
  src.height = v7;
  vImagePixelCount v8 = *a1;
  size_t v9 = *a3;
  src.width = v8;
  src.rowBytes = v9;
  v13.data = *a6;
  v13.height = v7;
  size_t v10 = *a5;
  v13.width = v8;
  v13.rowBytes = v10;
  switch(a7)
  {
    case 270:
      src.height = v8;
      src.width = v7;
      uint8_t v11 = 1;
      break;
    case 180:
      uint8_t v11 = 2;
      break;
    case 90:
      src.height = v8;
      src.width = v7;
      uint8_t v11 = 3;
      break;
    default:
      uint8_t v11 = 0;
      break;
  }
  return vImageRotate90_ARGB16U(&src, &v13, v11, backColor, 0);
}

vImage_Error vt_Rotate_64_90CW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, void *a5, void *a6, size_t *a7, void **a8)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  vImagePixelCount v8 = *a1;
  if (*a1 != *a6) {
    return 4294954382;
  }
  vImagePixelCount v9 = *a2;
  if (*a2 != *a5) {
    return 4294954382;
  }
  *(void *)backColor = 255;
  src.data = *a4;
  src.height = v9;
  size_t v10 = *a3;
  src.width = v8;
  src.rowBytes = v10;
  v13.data = *a8;
  v13.height = v8;
  size_t v11 = *a7;
  v13.width = v9;
  v13.rowBytes = v11;
  return vImageRotate90_ARGB16U(&src, &v13, 3u, backColor, 0);
}

vImage_Error vt_Rotate_64_180(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, void *a5, vImagePixelCount *a6, size_t *a7, void **a8)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  vImagePixelCount v8 = *a1;
  if (*a1 != *a5) {
    return 4294954382;
  }
  *(void *)backColor = 255;
  vImagePixelCount v9 = *a2;
  src.data = *a4;
  src.height = v9;
  size_t v10 = *a3;
  src.width = v8;
  src.rowBytes = v10;
  vImagePixelCount v11 = *a6;
  v14.data = *a8;
  v14.height = v11;
  size_t v12 = *a7;
  v14.width = v8;
  v14.rowBytes = v12;
  return vImageRotate90_ARGB16U(&src, &v14, 2u, backColor, 0);
}

vImage_Error vt_Rotate_64_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, void *a5, void *a6, size_t *a7, void **a8)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  vImagePixelCount v8 = *a1;
  if (*a1 != *a6) {
    return 4294954382;
  }
  vImagePixelCount v9 = *a2;
  if (*a2 != *a5) {
    return 4294954382;
  }
  *(void *)backColor = 255;
  src.data = *a4;
  src.height = v9;
  size_t v10 = *a3;
  src.width = v8;
  src.rowBytes = v10;
  v13.data = *a8;
  v13.height = v8;
  size_t v11 = *a7;
  v13.width = v9;
  v13.rowBytes = v11;
  return vImageRotate90_ARGB16U(&src, &v13, 1u, backColor, 0);
}

vImage_Error vt_Rotate_b3a8(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, uint64_t a4, size_t *a5, uint64_t a6, int a7)
{
  *(_DWORD *)backColor = 255;
  vImagePixelCount v7 = *a2;
  vImagePixelCount v8 = *(void **)(a4 + 8);
  src.data = *(void **)a4;
  src.height = v7;
  size_t v10 = *a3;
  size_t v11 = a3[1];
  src.vImagePixelCount width = *a1;
  vImagePixelCount width = src.width;
  src.rowBytes = v10;
  v19.data = v8;
  v19.height = v7;
  v19.vImagePixelCount width = src.width;
  v19.rowBytes = v11;
  size_t v12 = *(void **)(a6 + 8);
  dest.data = *(void **)a6;
  dest.height = v7;
  size_t v13 = *a5;
  size_t v14 = a5[1];
  dest.vImagePixelCount width = src.width;
  dest.rowBytes = v13;
  v17.data = v12;
  v17.height = v7;
  v17.vImagePixelCount width = src.width;
  v17.rowBytes = v14;
  switch(a7)
  {
    case 270:
      src.height = src.width;
      src.vImagePixelCount width = v7;
      uint8_t v15 = 1;
      goto LABEL_6;
    case 180:
      uint8_t v15 = 2;
      break;
    case 90:
      src.height = src.width;
      src.vImagePixelCount width = v7;
      uint8_t v15 = 3;
LABEL_6:
      v19.height = width;
      v19.vImagePixelCount width = v7;
      break;
    default:
      uint8_t v15 = 0;
      break;
  }
  vImage_Error result = vImageRotate90_ARGB8888(&src, &dest, v15, backColor, 0);
  if (!result) {
    return vImageRotate90_Planar8(&v19, &v17, v15, 0, 0);
  }
  return result;
}

vImage_Error vt_Rotate_b3a8_90CW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t a7, void **a8)
{
  vImage_Error result = vt_Rotate_32_90CW(a1, a2, (size_t *)a3, a4, a5, a6, (size_t *)a7, a8);
  if (!result)
  {
    return vt_Rotate_8_90CW(a1 + 1, a2 + 1, (uint64_t *)(a3 + 8), a4 + 1, a5 + 1, a6 + 1, (uint64_t *)(a7 + 8), a8 + 1);
  }
  return result;
}

vImage_Error vt_Rotate_b3a8_180(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  vImage_Error result = vt_Rotate_32_180(a1, a2, (size_t *)a3, (void **)a4, a5, (vImagePixelCount *)a6, (size_t *)a7, (void **)a8);
  if (!result)
  {
    return vt_Rotate_8_180(a1 + 1, a2 + 1, (uint64_t *)(a3 + 8), (int8x16_t **)(a4 + 8), a5 + 1, (uint64_t *)(a6 + 8), (uint64_t *)(a7 + 8), (uint64_t *)(a8 + 8));
  }
  return result;
}

vImage_Error vt_Rotate_b3a8_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t a7, void **a8)
{
  vImage_Error result = vt_Rotate_32_90CCW(a1, a2, (size_t *)a3, a4, a5, a6, (size_t *)a7, a8);
  if (!result)
  {
    return vt_Rotate_8_90CCW(a1 + 1, a2 + 1, (uint64_t *)(a3 + 8), a4 + 1, a5 + 1, a6 + 1, (uint64_t *)(a7 + 8), a8 + 1);
  }
  return result;
}

uint64_t vt_Rotate_y420(unsigned char *a1, uint64_t a2, uint64_t a3, void *a4, unsigned char *a5, void *a6, int a7)
{
  if (*a4 != *a6 && a4[1] != a6[1] && a4[2] != a6[2])
  {
    int v14 = 0;
    BOOL v25 = 0;
LABEL_21:
    uint64_t v15 = 0;
    vImage_Error v16 = 0;
    while (1)
    {
      size_t v17 = *(void *)(a3 + v15 * 8);
      size_t v18 = (void *)a4[v15];
      size_t v19 = *(void *)&a5[v15 * 8];
      size_t v20 = (void *)a6[v15];
      vImagePixelCount v21 = *(void *)(a2 + v15 * 8);
      src.data = v18;
      src.height = v21;
      vImagePixelCount v22 = *(void *)&a1[v15 * 8];
      src.vImagePixelCount width = v22;
      src.rowBytes = v17;
      dest.data = v20;
      dest.height = v21;
      dest.vImagePixelCount width = v22;
      dest.rowBytes = v19;
      if (a7 == 90) {
        break;
      }
      if (a7 == 270)
      {
        uint8_t v23 = 1;
LABEL_30:
        src.height = v22;
        src.vImagePixelCount width = v21;
        if (v14) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
      if (a7 == 180)
      {
        if (v14)
        {
          if (v25) {
            vtRotatePixelRect180_1BPP_inplace_arm((unint64_t *)v18, v17, (uint64_t)v20, v19, v22, v21);
          }
          else {
            vtRotatePixelRect180_1BPP_inplace((uint64_t)v18, v17, (char *)v20, v19, v22, v21);
          }
          goto LABEL_36;
        }
        uint8_t v23 = 2;
      }
      else
      {
        uint8_t v23 = 0;
        if (v14) {
          goto LABEL_36;
        }
      }
LABEL_35:
      vImage_Error v16 = vImageRotate90_Planar8(&src, &dest, v23, 0, 0);
LABEL_36:
      if (++v15 == 3) {
        return v16;
      }
    }
    uint8_t v23 = 3;
    goto LABEL_30;
  }
  if (a7 == 180)
  {
    BOOL v25 = (*a4 & 0xFLL) == 0
       && (*(unsigned char *)a3 & 0xF) == 0
       && (a4[1] & 0xF) == 0
       && (*(unsigned char *)(a3 + 8) & 0xF) == 0
       && (a4[2] & 0xF) == 0
       && ((*(_DWORD *)(a3 + 16) | *a6) & 0xFLL) == 0
       && (*a5 & 0xF) == 0
       && (a6[1] & 0xF) == 0
       && (a5[8] & 0xF) == 0
       && (a6[2] & 0xF) == 0
       && (a5[16] & 0xF) == 0
       && (*a1 & 0xF) == 0
       && (a1[8] & 0xF) == 0
       && (a1[16] & 0xF) == 0;
    int v14 = 1;
    goto LABEL_21;
  }

  return FigSignalErrorAt();
}

vImage_Error vt_Rotate_y420_90CW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, void **a8)
{
  vImage_Error result = vt_Rotate_8_90CW(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result)
  {
    vImage_Error result = vt_Rotate_8_90CW(a1 + 1, a2 + 1, a3 + 1, a4 + 1, a5 + 1, a6 + 1, a7 + 1, a8 + 1);
    if (!result)
    {
      return vt_Rotate_8_90CW(a1 + 2, a2 + 2, a3 + 2, a4 + 2, a5 + 2, a6 + 2, a7 + 2, a8 + 2);
    }
  }
  return result;
}

vImage_Error vt_Rotate_y420_180(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, int8x16_t **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  vImage_Error result = vt_Rotate_8_180(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result)
  {
    vImage_Error result = vt_Rotate_8_180(a1 + 1, a2 + 1, a3 + 1, a4 + 1, a5 + 1, a6 + 1, a7 + 1, a8 + 1);
    if (!result)
    {
      return vt_Rotate_8_180(a1 + 2, a2 + 2, a3 + 2, a4 + 2, a5 + 2, a6 + 2, a7 + 2, a8 + 2);
    }
  }
  return result;
}

vImage_Error vt_Rotate_y420_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, void **a8)
{
  vImage_Error result = vt_Rotate_8_90CCW(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result)
  {
    vImage_Error result = vt_Rotate_8_90CCW(a1 + 1, a2 + 1, a3 + 1, a4 + 1, a5 + 1, a6 + 1, a7 + 1, a8 + 1);
    if (!result)
    {
      return vt_Rotate_8_90CCW(a1 + 2, a2 + 2, a3 + 2, a4 + 2, a5 + 2, a6 + 2, a7 + 2, a8 + 2);
    }
  }
  return result;
}

vImage_Error vt_Rotate_420v(int64x2_t *a1, vImagePixelCount *a2, uint64_t a3, uint64_t *a4, int64x2_t *a5, uint64_t a6, int a7)
{
  uint64_t v11 = *a4;
  size_t v12 = (void *)a4[1];
  vImagePixelCount v13 = *a2;
  vImagePixelCount v14 = a2[1];
  src.data = (void *)*a4;
  src.height = v13;
  uint64_t v15 = *(void *)a3;
  size_t v16 = *(void *)(a3 + 8);
  src.rowBytes = *(void *)a3;
  v29.data = v12;
  v29.height = v14;
  int64x2_t v17 = *a1;
  vImagePixelCount v18 = a1->i64[0];
  src.vImagePixelCount width = a1->i64[0];
  v29.vImagePixelCount width = v17.u64[1];
  v29.rowBytes = v16;
  size_t v20 = *(void **)a6;
  size_t v19 = *(void **)(a6 + 8);
  dest.data = *(void **)a6;
  dest.height = v13;
  v27.data = v19;
  v27.height = v14;
  int64x2_t v21 = *a5;
  *(int64x2_t *)&dest.vImagePixelCount width = vzip1q_s64(v17, *a5);
  *(int64x2_t *)&v27.vImagePixelCount width = vzip2q_s64(v17, v21);
  switch(a7)
  {
    case 90:
      uint8_t v22 = 3;
LABEL_13:
      src.height = v18;
      src.vImagePixelCount width = v13;
      v29.height = v17.u64[1];
      v29.vImagePixelCount width = v14;
      break;
    case 270:
      uint8_t v22 = 1;
      goto LABEL_13;
    case 180:
      uint8_t v22 = 2;
      if ((void *)v11 == v20 && v12 == v19)
      {
        int8x16_t v25 = (int8x16_t)vdupq_n_s64(0xFuLL);
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v21, v25)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v17, v25)))))) & 1) != 0|| ((v15 | v12) & 0xF) != 0|| (v11 & 0xF) != 0|| (v16 & 0xF) != 0)
        {
          vtRotatePixelRect180_1BPP_inplace(v11, v15, (char *)v11, v21.i64[0], v18, v13);
          vtRotatePixelRect180_2BPP_inplace(a4[1], *(void *)(a3 + 8), *(__int16 **)(a6 + 8), a5->i64[1], a1->i64[1], a2[1]);
        }
        else
        {
          vtRotatePixelRect180_1BPP_inplace_arm((unint64_t *)v11, v15, v11, v21.i64[0], v18, v13);
          vtRotatePixelRect180_2BPP_inplace_arm((int16x8_t *)a4[1], *(void *)(a3 + 8), *(void *)(a6 + 8), a5->i64[1], a1->i64[1], a2[1]);
        }
        return 0;
      }
      break;
    default:
      uint8_t v22 = 0;
      break;
  }
  vImage_Error result = vImageRotate90_Planar8(&src, &dest, v22, 0, 0);
  if (!result) {
    return vImageRotate90_Planar16U(&v29, &v27, v22, 0, 0);
  }
  return result;
}

vImage_Error vt_Rotate_420v_90CW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t a7, void **a8)
{
  vImage_Error result = vt_Rotate_8_90CW(a1, a2, (uint64_t *)a3, a4, a5, a6, (uint64_t *)a7, a8);
  if (!result)
  {
    vImage_Error result = vt_Rotate_16_90CW(a1 + 1, a2 + 1, (size_t *)(a3 + 8), a4 + 1, a5 + 1, a6 + 1, (size_t *)(a7 + 8), a8 + 1);
    if (!result)
    {
      vImagePixelCount v18 = a4[2];
      int64x2_t v17 = a4 + 2;
      if (v18 && (size_t v20 = a8[2], v19 = a8 + 2, v20))
      {
        return vt_Rotate_8_90CW(a1 + 2, a2 + 2, (uint64_t *)(a3 + 16), v17, a5 + 2, a6 + 2, (uint64_t *)(a7 + 16), v19);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

vImage_Error vt_Rotate_420v_180(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, int8x16_t **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  vImage_Error result = vt_Rotate_8_180(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result)
  {
    vImage_Error result = vt_Rotate_16_180(a1 + 1, a2 + 1, a3 + 1, (uint64_t *)a4 + 1, a5 + 1, a6 + 1, a7 + 1, a8 + 1);
    if (!result)
    {
      vImagePixelCount v18 = a4[2];
      int64x2_t v17 = a4 + 2;
      if (v18 && (uint64_t v20 = a8[2], v19 = a8 + 2, v20))
      {
        return vt_Rotate_8_180(a1 + 2, a2 + 2, a3 + 2, v17, a5 + 2, a6 + 2, a7 + 2, v19);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

vImage_Error vt_Rotate_420v_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t a7, void **a8)
{
  vImage_Error result = vt_Rotate_8_90CCW(a1, a2, (uint64_t *)a3, a4, a5, a6, (uint64_t *)a7, a8);
  if (!result)
  {
    vImage_Error result = vt_Rotate_16_90CCW(a1 + 1, a2 + 1, (size_t *)(a3 + 8), a4 + 1, a5 + 1, a6 + 1, (size_t *)(a7 + 8), a8 + 1);
    if (!result)
    {
      vImagePixelCount v18 = a4[2];
      int64x2_t v17 = a4 + 2;
      if (v18 && (uint64_t v20 = a8[2], v19 = a8 + 2, v20))
      {
        return vt_Rotate_8_90CCW(a1 + 2, a2 + 2, (uint64_t *)(a3 + 16), v17, a5 + 2, a6 + 2, (uint64_t *)(a7 + 16), v19);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

vImage_Error vt_Rotate_x420(int64x2_t *a1, vImagePixelCount *a2, uint64_t a3, uint64_t a4, int64x2_t *a5, uint64_t a6, int a7)
{
  *(_DWORD *)backColor = 255;
  uint64_t v11 = *(int16x8_t **)a4;
  size_t v12 = *(void **)(a4 + 8);
  vImagePixelCount v13 = *a2;
  vImagePixelCount v14 = a2[1];
  src.data = *(void **)a4;
  src.height = v13;
  uint64_t v15 = *(void *)a3;
  size_t v16 = *(void *)(a3 + 8);
  src.rowBytes = *(void *)a3;
  v29.data = v12;
  v29.height = v14;
  int64x2_t v17 = *a1;
  vImagePixelCount v18 = a1->i64[0];
  src.vImagePixelCount width = a1->i64[0];
  v29.vImagePixelCount width = v17.u64[1];
  v29.rowBytes = v16;
  uint64_t v20 = *(int16x8_t **)a6;
  size_t v19 = *(void **)(a6 + 8);
  dest.data = *(void **)a6;
  dest.height = v13;
  v27.data = v19;
  v27.height = v14;
  int64x2_t v21 = *a5;
  *(int64x2_t *)&dest.vImagePixelCount width = vzip1q_s64(v17, *a5);
  *(int64x2_t *)&v27.vImagePixelCount width = vzip2q_s64(v17, v21);
  switch(a7)
  {
    case 90:
      uint8_t v22 = 3;
LABEL_13:
      src.height = v18;
      src.vImagePixelCount width = v13;
      v29.height = v17.u64[1];
      v29.vImagePixelCount width = v14;
      break;
    case 270:
      uint8_t v22 = 1;
      goto LABEL_13;
    case 180:
      uint8_t v22 = 2;
      if (v11 == v20 && v12 == v19)
      {
        int8x16_t v25 = (int8x16_t)vdupq_n_s64(0xFuLL);
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v21, v25)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v17, v25)))))) & 1) != 0|| ((v15 | v12) & 0xF) != 0|| (v11 & 0xF) != 0|| (v16 & 0xF) != 0)
        {
          vtRotatePixelRect180_2BPP_inplace((uint64_t)v11, v15, v11->i16, v21.i64[0], v18, v13);
        }
        else
        {
          vtRotatePixelRect180_2BPP_inplace_arm(v11, v15, (uint64_t)v11, v21.i64[0], v18, v13);
        }
        vtRotatePixelRect180_4BPP_inplace(*(void *)(a4 + 8), *(void *)(a3 + 8), *(int **)(a6 + 8), a5->i64[1], a1->i64[1], a2[1]);
        return 0;
      }
      break;
    default:
      uint8_t v22 = 0;
      break;
  }
  vImage_Error result = vImageRotate90_Planar16U(&src, &dest, v22, 0, 0);
  if (!result) {
    return vImageRotate90_ARGB8888(&v29, &v27, v22, backColor, 0);
  }
  return result;
}

vImage_Error vt_Rotate_x420_90CW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, uint64_t *a5, uint64_t *a6, size_t *a7, void **a8)
{
  vImage_Error result = vt_Rotate_16_90CW(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result)
  {
    vImage_Error result = vt_Rotate_32_90CW(a1 + 1, a2 + 1, a3 + 1, a4 + 1, a5 + 1, a6 + 1, a7 + 1, a8 + 1);
    if (!result)
    {
      vImagePixelCount v18 = a4[2];
      int64x2_t v17 = a4 + 2;
      if (v18 && (uint64_t v20 = a8[2], v19 = a8 + 2, v20))
      {
        return vt_Rotate_16_90CW(a1 + 2, a2 + 2, a3 + 2, v17, a5 + 2, a6 + 2, a7 + 2, v19);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

vImage_Error vt_Rotate_x420_180(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  vImage_Error result = vt_Rotate_16_180(a1, a2, (uint64_t *)a3, (uint64_t *)a4, a5, (uint64_t *)a6, (uint64_t *)a7, (uint64_t *)a8);
  if (!result)
  {
    vImage_Error result = vt_Rotate_32_180(a1 + 1, a2 + 1, (size_t *)(a3 + 8), (void **)(a4 + 8), a5 + 1, (vImagePixelCount *)(a6 + 8), (size_t *)(a7 + 8), (void **)(a8 + 8));
    if (!result)
    {
      uint64_t v18 = *(void *)(a4 + 16);
      int64x2_t v17 = (uint64_t *)(a4 + 16);
      if (v18 && (uint64_t v20 = *(void *)(a8 + 16), v19 = (uint64_t *)(a8 + 16), v20))
      {
        return vt_Rotate_16_180(a1 + 2, a2 + 2, (uint64_t *)(a3 + 16), v17, a5 + 2, (uint64_t *)(a6 + 16), (uint64_t *)(a7 + 16), v19);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

vImage_Error vt_Rotate_x420_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, uint64_t *a5, uint64_t *a6, size_t *a7, void **a8)
{
  vImage_Error result = vt_Rotate_16_90CCW(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result)
  {
    vImage_Error result = vt_Rotate_32_90CCW(a1 + 1, a2 + 1, a3 + 1, a4 + 1, a5 + 1, a6 + 1, a7 + 1, a8 + 1);
    if (!result)
    {
      uint64_t v18 = a4[2];
      int64x2_t v17 = a4 + 2;
      if (v18 && (uint64_t v20 = a8[2], v19 = a8 + 2, v20))
      {
        return vt_Rotate_16_90CCW(a1 + 2, a2 + 2, a3 + 2, v17, a5 + 2, a6 + 2, a7 + 2, v19);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t vt_Rotate_2vuy(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4, uint64_t *a5, unsigned char **a6, int a7)
{
  uint64_t v9 = *a3;
  unint64_t v10 = *a4;
  uint64_t v11 = *a5;
  size_t v12 = *a6;
  switch(a7)
  {
    case 270:
      vtRotatePixelRect90CCW_2vuy(v10, v9, v12, v11, *a1, *a2);
      break;
    case 180:
      vtRotatePixelRect180_2vuy(v10, v9, v12, v11, *a1, *a2);
      break;
    case 90:
      vtRotatePixelRect90CW_2vuy(v10, v9, v12, v11, *a1, *a2);
      break;
  }
  return 0;
}

unint64_t vtRotatePixelRect90CW_2vuy(unint64_t result, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5 >= 1)
  {
    unint64_t v6 = result + (a5 - 1) * a2;
    uint64_t v7 = -a2;
    uint64_t v8 = -64 * a2;
    do
    {
      if (a6 >= 1)
      {
        if ((unint64_t)a5 >= 0x40) {
          uint64_t v9 = 64;
        }
        else {
          uint64_t v9 = a5;
        }
        uint64_t v10 = a6;
        uint64_t v11 = a3;
        size_t v12 = (unsigned char *)v6;
        do
        {
          if ((unint64_t)v10 >= 0x40) {
            vImage_Error result = 64;
          }
          else {
            vImage_Error result = v10;
          }
          uint64_t v13 = (2 * (int)result) & 0xFCLL;
          int v14 = 1;
          uint64_t v15 = v9;
          size_t v16 = v11;
          int64x2_t v17 = v12;
          do
          {
            uint64_t v18 = v17;
            size_t v19 = v16;
            if (v14)
            {
              if (result >= 2)
              {
                uint64_t v20 = 0;
                size_t v19 = v16;
                do
                {
                  unsigned char *v19 = v17[v20];
                  v19[1] = v17[v20 + 1];
                  v19[2] = v17[v20 + 2];
                  int64x2_t v21 = &v19[a4];
                  *int64x2_t v21 = v17[v20];
                  v21[1] = v17[v20 + 3];
                  v21[2] = v17[v20 + 2];
                  size_t v19 = &v21[a4];
                  v20 += 4;
                }
                while (v13 != v20);
                uint64_t v18 = &v17[v20];
              }
              if (result)
              {
                unsigned char *v19 = *v18;
                v19[1] = v18[1];
                v19[2] = v18[2];
              }
            }
            else
            {
              if (result >= 2)
              {
                uint64_t v22 = 0;
                size_t v19 = v16;
                do
                {
                  v19[3] = v17[v22 + 1];
                  v19[a4 + 3] = v17[v22 + 3];
                  v19 += a4 + a4;
                  v22 += 4;
                }
                while (v13 != v22);
                uint64_t v18 = &v17[v22];
              }
              if (result) {
                v19[3] = v18[1];
              }
              v16 += 4;
            }
            v17 += v7;
            v14 ^= 1u;
            --v15;
          }
          while (v15);
          v12 += 128;
          v11 += 64 * a4;
          BOOL v23 = v10 <= 64;
          v10 -= 64;
        }
        while (!v23);
      }
      v6 += v8;
      a3 += 128;
      BOOL v23 = a5 <= 64;
      a5 -= 64;
    }
    while (!v23);
  }
  return result;
}

uint64_t vtRotatePixelRect180_2vuy(uint64_t result, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5 >= 0) {
    uint64_t v6 = a5;
  }
  else {
    uint64_t v6 = a5 + 1;
  }
  if (a6)
  {
    uint64_t v7 = v6 >> 1;
    uint64_t v8 = result + 4 * v7 + (a6 - 1) * a2 - 4;
    do
    {
      uint64_t v9 = a3;
      if ((unint64_t)(a5 + 1) >= 3)
      {
        uint64_t v10 = 0;
        uint64_t v9 = a3;
        uint64_t v11 = v7;
        do
        {
          *uint64_t v9 = *(unsigned char *)(v8 + v10);
          v9[1] = *(unsigned char *)(v8 + v10 + 3);
          v9[2] = *(unsigned char *)(v8 + v10 + 2);
          void v9[3] = *(unsigned char *)(v8 + v10 + 1);
          v9 += 4;
          v10 -= 4;
          --v11;
        }
        while (v11);
      }
      if (a5) {
        *(_DWORD *)uint64_t v9 = 276828288;
      }
      v8 -= a2;
      a3 += a4;
      --a6;
    }
    while (a6);
  }
  return result;
}

void vtRotatePixelRect90CCW_2vuy(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5 >= 1)
  {
    uint64_t v6 = a2 << 6;
    if (a6 >= 0) {
      unint64_t v7 = a6;
    }
    else {
      unint64_t v7 = a6 + 1;
    }
    uint64_t v8 = a1 + 4 * (v7 >> 1);
    uint64_t v9 = v8 - 4;
    uint64_t v10 = (unsigned char *)(v8 - 1);
    uint64_t v11 = a3;
    uint64_t v12 = a5;
    do
    {
      if (a6 >= 1)
      {
        if ((unint64_t)v12 >= 0x40) {
          uint64_t v13 = 64;
        }
        else {
          uint64_t v13 = v12;
        }
        int v14 = v10;
        uint64_t v15 = a6;
        size_t v16 = v11;
        uint64_t v17 = v9;
        do
        {
          if ((unint64_t)v15 >= 0x40) {
            unint64_t v18 = 64;
          }
          else {
            unint64_t v18 = v15;
          }
          int v19 = 1;
          uint64_t v20 = v14;
          uint64_t v21 = v13;
          uint64_t v22 = v16;
          uint64_t v23 = v17;
          do
          {
            if (v19)
            {
              if (v18 >= 2)
              {
                uint64_t v24 = 0;
                int8x16_t v25 = v22;
                do
                {
                  *int8x16_t v25 = *(unsigned char *)(v23 + v24);
                  v25[1] = *(unsigned char *)(v23 + v24 + 3);
                  v25[2] = *(unsigned char *)(v23 + v24 + 2);
                  uint64_t v26 = &v25[a4];
                  *uint64_t v26 = *(unsigned char *)(v23 + v24);
                  v26[1] = *(unsigned char *)(v23 + v24 + 1);
                  v26[2] = *(unsigned char *)(v23 + v24 + 2);
                  v25 += a4 + a4;
                  v24 -= 4;
                }
                while (4 * (v18 >> 1) + v24);
              }
            }
            else
            {
              if (v18 >= 2)
              {
                vImage_Buffer v27 = v22 + 3;
                uint64_t v28 = v20;
                unint64_t v29 = v18 >> 1;
                do
                {
                  *vImage_Buffer v27 = *v28;
                  v27[a4] = *(v28 - 2);
                  v27 += 2 * a4;
                  v28 -= 4;
                  --v29;
                }
                while (v29);
              }
              v22 += 4;
            }
            v23 += a2;
            v19 ^= 1u;
            v20 += a2;
            --v21;
          }
          while (v21);
          v17 -= 128;
          v14 -= 128;
          v16 += 64 * a4;
          BOOL v30 = v15 <= 64;
          v15 -= 64;
        }
        while (!v30);
      }
      v9 += v6;
      v11 += 128;
      v10 += v6;
      BOOL v30 = v12 <= 64;
      v12 -= 64;
    }
    while (!v30);
  }
  if (a6)
  {
    int __pattern4 = 276828288;
    uint64_t v31 = a5 + 2;
    if (a5 >= -1) {
      uint64_t v31 = a5 + 1;
    }
    memset_pattern4(&a3[(a6 - 1) * a4], &__pattern4, (2 * v31) & 0xFFFFFFFFFFFFFFFCLL);
  }
}

vImage_Error vt_Rotate_2vuy_90CW(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, void *a5, void *a6, uint64_t *a7, uint64_t a8)
{
  if (*(void *)a1 != *a6 || *(void *)a2 != *a5) {
    return 4294954382;
  }
  vtRotatePixelRect90CW_2vuy(*a4, *a3, *(unsigned char **)a8, *a7, *(void *)a2, *(void *)a1);
  unint64_t v17 = a4[1];
  size_t v16 = (void **)(a4 + 1);
  if (!v17) {
    return 0;
  }
  uint64_t v19 = *(void *)(a8 + 8);
  unint64_t v18 = (void **)(a8 + 8);
  if (!v19) {
    return 0;
  }

  return vt_Rotate_8_90CW((vImagePixelCount *)(a1 + 8), (vImagePixelCount *)(a2 + 8), a3 + 1, v16, a5 + 1, a6 + 1, a7 + 1, v18);
}

vImage_Error vt_Rotate_2vuy_180(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t a8)
{
  if (*(void *)a1 != *a5) {
    return 4294954382;
  }
  vtRotatePixelRect180_2vuy(*a4, *a3, *(unsigned char **)a8, *a7, *(void *)a1, *a6);
  uint64_t v17 = a4[1];
  size_t v16 = (int8x16_t **)(a4 + 1);
  if (!v17) {
    return 0;
  }
  uint64_t v19 = *(void *)(a8 + 8);
  unint64_t v18 = (uint64_t *)(a8 + 8);
  if (!v19) {
    return 0;
  }

  return vt_Rotate_8_180((vImagePixelCount *)(a1 + 8), (vImagePixelCount *)(a2 + 8), a3 + 1, v16, a5 + 1, a6 + 1, a7 + 1, v18);
}

vImage_Error vt_Rotate_2vuy_90CCW(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, void *a6, uint64_t *a7, uint64_t a8)
{
  if (*(void *)a1 != *a6 || *(void *)a2 != *a5) {
    return 4294954382;
  }
  vtRotatePixelRect90CCW_2vuy(*a4, *a3, *(unsigned char **)a8, *a7, *(void *)a2, *(void *)a1);
  uint64_t v17 = a4[1];
  size_t v16 = (void **)(a4 + 1);
  if (!v17) {
    return 0;
  }
  uint64_t v19 = *(void *)(a8 + 8);
  unint64_t v18 = (void **)(a8 + 8);
  if (!v19) {
    return 0;
  }

  return vt_Rotate_8_90CCW((vImagePixelCount *)(a1 + 8), (vImagePixelCount *)(a2 + 8), a3 + 1, v16, a5 + 1, a6 + 1, a7 + 1, v18);
}

uint64_t vt_Rotate_yuvs(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4, uint64_t *a5, unsigned char **a6, int a7)
{
  uint64_t v9 = *a3;
  unint64_t v10 = *a4;
  uint64_t v11 = *a5;
  uint64_t v12 = *a6;
  switch(a7)
  {
    case 270:
      vtRotatePixelRect90CCW_yuvs(v10, v9, v12, v11, *a1, *a2);
      break;
    case 180:
      vtRotatePixelRect180_yuvs(v10, v9, v12, v11, *a1, *a2);
      break;
    case 90:
      vtRotatePixelRect90CW_yuvs(v10, v9, v12, v11, *a1, *a2);
      break;
  }
  return 0;
}

unint64_t vtRotatePixelRect90CW_yuvs(unint64_t result, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5 >= 1)
  {
    unint64_t v6 = result + (a5 - 1) * a2;
    uint64_t v7 = -a2;
    uint64_t v8 = -64 * a2;
    do
    {
      if (a6 >= 1)
      {
        if ((unint64_t)a5 >= 0x40) {
          uint64_t v9 = 64;
        }
        else {
          uint64_t v9 = a5;
        }
        uint64_t v10 = a6;
        uint64_t v11 = a3;
        uint64_t v12 = (unsigned char *)v6;
        do
        {
          if ((unint64_t)v10 >= 0x40) {
            vImage_Error result = 64;
          }
          else {
            vImage_Error result = v10;
          }
          uint64_t v13 = (2 * (int)result) & 0xFCLL;
          int v14 = 1;
          uint64_t v15 = v9;
          size_t v16 = v11;
          uint64_t v17 = v12;
          do
          {
            unint64_t v18 = v17;
            uint64_t v19 = v16;
            if (v14)
            {
              if (result >= 2)
              {
                uint64_t v20 = 0;
                uint64_t v19 = v16;
                do
                {
                  unsigned char *v19 = v17[v20];
                  v19[1] = v17[v20 + 1];
                  v19[3] = v17[v20 + 3];
                  uint64_t v21 = &v19[a4];
                  *uint64_t v21 = v17[v20 + 2];
                  v21[1] = v17[v20 + 1];
                  v21[3] = v17[v20 + 3];
                  uint64_t v19 = &v21[a4];
                  v20 += 4;
                }
                while (v13 != v20);
                unint64_t v18 = &v17[v20];
              }
              if (result)
              {
                unsigned char *v19 = *v18;
                v19[1] = v18[1];
                v19[3] = v18[3];
              }
            }
            else
            {
              if (result >= 2)
              {
                uint64_t v22 = 0;
                uint64_t v19 = v16;
                do
                {
                  v19[2] = v17[v22];
                  v19[a4 + 2] = v17[v22 + 2];
                  v19 += a4 + a4;
                  v22 += 4;
                }
                while (v13 != v22);
                unint64_t v18 = &v17[v22];
              }
              if (result) {
                v19[2] = *v18;
              }
              v16 += 4;
            }
            v17 += v7;
            v14 ^= 1u;
            --v15;
          }
          while (v15);
          v12 += 128;
          v11 += 64 * a4;
          BOOL v23 = v10 <= 64;
          v10 -= 64;
        }
        while (!v23);
      }
      v6 += v8;
      a3 += 128;
      BOOL v23 = a5 <= 64;
      a5 -= 64;
    }
    while (!v23);
  }
  return result;
}

uint64_t vtRotatePixelRect180_yuvs(uint64_t result, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5 >= 0) {
    uint64_t v6 = a5;
  }
  else {
    uint64_t v6 = a5 + 1;
  }
  if (a6)
  {
    uint64_t v7 = v6 >> 1;
    uint64_t v8 = (a6 - 1) * a2 + 4 * v7 + result - 2;
    do
    {
      uint64_t v9 = a3;
      if ((unint64_t)(a5 + 1) >= 3)
      {
        uint64_t v10 = (unsigned char *)v8;
        uint64_t v9 = a3;
        uint64_t v11 = v7;
        do
        {
          *uint64_t v9 = *v10;
          v9[1] = *(v10 - 1);
          v9[2] = *(v10 - 2);
          void v9[3] = v10[1];
          v9 += 4;
          v10 -= 4;
          --v11;
        }
        while (v11);
      }
      if (a5) {
        *(_DWORD *)uint64_t v9 = -2146402288;
      }
      a3 += a4;
      v8 -= a2;
      --a6;
    }
    while (a6);
  }
  return result;
}

void vtRotatePixelRect90CCW_yuvs(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5 >= 1)
  {
    uint64_t v6 = a2 << 6;
    if (a6 >= 0) {
      unint64_t v7 = a6;
    }
    else {
      unint64_t v7 = a6 + 1;
    }
    uint64_t v8 = a1 + 4 * (v7 >> 1);
    uint64_t v9 = v8 - 4;
    uint64_t v10 = (unsigned char *)(v8 - 2);
    uint64_t v11 = a3;
    uint64_t v12 = a5;
    do
    {
      if (a6 >= 1)
      {
        if ((unint64_t)v12 >= 0x40) {
          uint64_t v13 = 64;
        }
        else {
          uint64_t v13 = v12;
        }
        int v14 = v10;
        uint64_t v15 = a6;
        size_t v16 = v11;
        uint64_t v17 = v9;
        do
        {
          if ((unint64_t)v15 >= 0x40) {
            unint64_t v18 = 64;
          }
          else {
            unint64_t v18 = v15;
          }
          int v19 = 1;
          uint64_t v20 = v14;
          uint64_t v21 = v13;
          uint64_t v22 = v16;
          uint64_t v23 = v17;
          do
          {
            if (v19)
            {
              uint64_t v24 = v20;
              int8x16_t v25 = v22;
              unint64_t v26 = v18 >> 1;
              if (v18 >= 2)
              {
                do
                {
                  *int8x16_t v25 = *v24;
                  v25[1] = *(v24 - 1);
                  v25[3] = v24[1];
                  vImage_Buffer v27 = &v25[a4];
                  *vImage_Buffer v27 = *(v24 - 2);
                  v27[1] = *(v24 - 1);
                  v27[3] = v24[1];
                  v25 += a4 + a4;
                  v24 -= 4;
                  --v26;
                }
                while (v26);
              }
            }
            else
            {
              if (v18 >= 2)
              {
                uint64_t v28 = 0;
                unint64_t v29 = v22 + 2;
                do
                {
                  *unint64_t v29 = v20[v28];
                  char v30 = *(unsigned char *)(v23 + v28);
                  v28 -= 4;
                  v29[a4] = v30;
                  v29 += 2 * a4;
                }
                while (4 * (v18 >> 1) + v28);
              }
              v22 += 4;
            }
            v23 += a2;
            v19 ^= 1u;
            v20 += a2;
            --v21;
          }
          while (v21);
          v17 -= 128;
          v14 -= 128;
          v16 += 64 * a4;
          BOOL v31 = v15 <= 64;
          v15 -= 64;
        }
        while (!v31);
      }
      v9 += v6;
      v11 += 128;
      v10 += v6;
      BOOL v31 = v12 <= 64;
      v12 -= 64;
    }
    while (!v31);
  }
  if (a6)
  {
    int __pattern4 = -2146402288;
    uint64_t v32 = a5 + 2;
    if (a5 >= -1) {
      uint64_t v32 = a5 + 1;
    }
    memset_pattern4(&a3[(a6 - 1) * a4], &__pattern4, (2 * v32) & 0xFFFFFFFFFFFFFFFCLL);
  }
}

uint64_t vt_Rotate_yuvs_90CW(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4, void *a5, void *a6, uint64_t *a7, unsigned char **a8)
{
  if (*a1 != *a6 || *a2 != *a5) {
    return 4294954382;
  }
  vtRotatePixelRect90CW_yuvs(*a4, *a3, *a8, *a7, *a2, *a1);
  return 0;
}

uint64_t vt_Rotate_yuvs_180(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, uint64_t *a7, unsigned char **a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtRotatePixelRect180_yuvs(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Rotate_yuvs_90CCW(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5, void *a6, uint64_t *a7, unsigned char **a8)
{
  if (*a1 != *a6 || *a2 != *a5) {
    return 4294954382;
  }
  vtRotatePixelRect90CCW_yuvs(*a4, *a3, *a8, *a7, *a2, *a1);
  return 0;
}

uint64_t vt_Rotate_v216(uint64_t *a1, uint64_t *a2, unint64_t *a3, _WORD **a4, unint64_t *a5, char **a6, int a7)
{
  unint64_t v9 = *a3;
  uint64_t v10 = *a4;
  unint64_t v11 = *a5;
  uint64_t v12 = *a6;
  switch(a7)
  {
    case 270:
      vtRotatePixelRect90CCW_v216((uint64_t)v10, v9, v12, v11, *a1, *a2);
      break;
    case 180:
      vtRotatePixelRect180_v216((uint64_t)v10, v9, v12, v11, *a1, *a2);
      break;
    case 90:
      vtRotatePixelRect90CW_v216(v10, v9, v12, v11, *a1, *a2);
      break;
  }
  return 0;
}

_WORD *vtRotatePixelRect90CW_v216(_WORD *result, unint64_t a2, _WORD *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5 >= 1)
  {
    unint64_t v6 = a4 >> 1 << 6;
    uint64_t v7 = -64 * (a2 >> 1);
    uint64_t v8 = (_WORD *)((char *)result + (a5 - 1) * a2);
    uint64_t v9 = 4 * (a4 >> 1);
    uint64_t v10 = a4 >> 1;
    uint64_t v11 = -2 * (a2 >> 1);
    do
    {
      if (a6 >= 1)
      {
        if ((unint64_t)a5 >= 0x40) {
          uint64_t v12 = 64;
        }
        else {
          uint64_t v12 = a5;
        }
        uint64_t v13 = a6;
        vImage_Error result = a3;
        int v14 = v8;
        do
        {
          if ((unint64_t)v13 >= 0x40) {
            unint64_t v15 = 64;
          }
          else {
            unint64_t v15 = v13;
          }
          uint64_t v16 = (4 * (int)v15) & 0x1F8;
          int v17 = 1;
          unint64_t v18 = v14;
          uint64_t v19 = v12;
          uint64_t v20 = result;
          do
          {
            uint64_t v21 = v18;
            uint64_t v22 = v20;
            if (v17)
            {
              if (v15 >= 2)
              {
                unint64_t v23 = 0;
                uint64_t v22 = v20;
                do
                {
                  *uint64_t v22 = v18[v23 / 2];
                  v22[1] = v18[v23 / 2 + 1];
                  v22[2] = v18[v23 / 2 + 2];
                  uint64_t v24 = &v22[v10];
                  *uint64_t v24 = v18[v23 / 2];
                  v24[1] = v18[v23 / 2 + 3];
                  v24[2] = v18[v23 / 2 + 2];
                  v23 += 8;
                  uint64_t v22 = (_WORD *)((char *)v22 + v9);
                }
                while (v16 != v23);
                uint64_t v21 = &v18[v23 / 2];
              }
              if (v15)
              {
                *uint64_t v22 = *v21;
                v22[1] = v21[1];
                v22[2] = v21[2];
              }
            }
            else
            {
              if (v15 >= 2)
              {
                unint64_t v25 = 0;
                uint64_t v22 = v20;
                do
                {
                  void v22[3] = v18[v25 / 2 + 1];
                  v22[v10 + 3] = v18[v25 / 2 + 3];
                  uint64_t v22 = (_WORD *)((char *)v22 + v9);
                  v25 += 8;
                }
                while (v16 != v25);
                uint64_t v21 = &v18[v25 / 2];
              }
              if (v15) {
                void v22[3] = v21[1];
              }
              v20 += 4;
            }
            unint64_t v18 = (_WORD *)((char *)v18 + v11);
            v17 ^= 1u;
            --v19;
          }
          while (v19);
          v14 += 128;
          result += v6;
          BOOL v26 = v13 <= 64;
          v13 -= 64;
        }
        while (!v26);
      }
      v8 += v7;
      a3 += 128;
      BOOL v26 = a5 <= 64;
      a5 -= 64;
    }
    while (!v26);
  }
  return result;
}

uint64_t vtRotatePixelRect180_v216(uint64_t result, uint64_t a2, _WORD *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5 >= 0) {
    uint64_t v6 = a5;
  }
  else {
    uint64_t v6 = a5 + 1;
  }
  if (a6)
  {
    uint64_t v7 = v6 >> 1;
    uint64_t v8 = result + (a6 - 1) * a2 + 8 * v7 - 8;
    do
    {
      uint64_t v9 = a3;
      if ((unint64_t)(a5 + 1) >= 3)
      {
        uint64_t v10 = 0;
        uint64_t v9 = a3;
        uint64_t v11 = v7;
        do
        {
          *uint64_t v9 = *(_WORD *)(v8 + v10);
          v9[1] = *(_WORD *)(v8 + v10 + 6);
          vImage_Error result = *(unsigned __int16 *)(v8 + v10 + 4);
          v9[2] = result;
          void v9[3] = *(_WORD *)(v8 + v10 + 2);
          v9 += 4;
          v10 -= 8;
          --v11;
        }
        while (v11);
      }
      if (a5) {
        *(void *)uint64_t v9 = 0x1000800010008000;
      }
      a3 += a4 >> 1;
      v8 -= a2 & 0xFFFFFFFFFFFFFFFELL;
      --a6;
    }
    while (a6);
  }
  return result;
}

void vtRotatePixelRect90CCW_v216(uint64_t a1, unint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = a3;
  unint64_t v6 = a4 >> 1;
  if (a5 >= 1)
  {
    unint64_t v7 = a2 >> 1;
    if (a6 >= 0) {
      unint64_t v8 = a6;
    }
    else {
      unint64_t v8 = a6 + 1;
    }
    uint64_t v9 = a1 + 8 * (v8 >> 1);
    uint64_t v10 = v9 - 8;
    uint64_t v11 = 2 * v7;
    uint64_t v12 = 4 * v6;
    uint64_t v13 = (_WORD *)(v9 - 2);
    uint64_t v14 = a5;
    do
    {
      if (a6 >= 1)
      {
        if ((unint64_t)v14 >= 0x40) {
          uint64_t v15 = 64;
        }
        else {
          uint64_t v15 = v14;
        }
        uint64_t v16 = v13;
        uint64_t v17 = a6;
        unint64_t v18 = a3;
        uint64_t v19 = v10;
        do
        {
          if ((unint64_t)v17 >= 0x40) {
            unint64_t v20 = 64;
          }
          else {
            unint64_t v20 = v17;
          }
          int v21 = 1;
          uint64_t v22 = v16;
          uint64_t v23 = v19;
          uint64_t v24 = v15;
          unint64_t v25 = v18;
          do
          {
            if (v21)
            {
              if (v20 >= 2)
              {
                uint64_t v26 = 0;
                vImage_Buffer v27 = v25;
                do
                {
                  *vImage_Buffer v27 = *(_WORD *)(v23 + v26);
                  v27[1] = *(_WORD *)(v23 + v26 + 6);
                  v27[2] = *(_WORD *)(v23 + v26 + 4);
                  uint64_t v28 = &v27[v6];
                  *uint64_t v28 = *(_WORD *)(v23 + v26);
                  v28[1] = *(_WORD *)(v23 + v26 + 2);
                  v28[2] = *(_WORD *)(v23 + v26 + 4);
                  v26 -= 8;
                  vImage_Buffer v27 = (_WORD *)((char *)v27 + v12);
                }
                while (8 * (v20 >> 1) + v26);
              }
            }
            else
            {
              if (v20 >= 2)
              {
                unint64_t v29 = v25 + 6;
                char v30 = v22;
                unint64_t v31 = v20 >> 1;
                do
                {
                  *unint64_t v29 = *v30;
                  v29[v6] = *(v30 - 2);
                  unint64_t v29 = (_WORD *)((char *)v29 + v12);
                  v30 -= 4;
                  --v31;
                }
                while (v31);
              }
              v25 += 8;
            }
            v21 ^= 1u;
            v23 += v11;
            uint64_t v22 = (_WORD *)((char *)v22 + v11);
            --v24;
          }
          while (v24);
          v19 -= 256;
          v16 -= 128;
          v18 += 128 * v6;
          BOOL v32 = v17 <= 64;
          v17 -= 64;
        }
        while (!v32);
      }
      v10 += v7 << 7;
      a3 += 256;
      v13 += 64 * v7;
      BOOL v32 = v14 <= 64;
      v14 -= 64;
    }
    while (!v32);
  }
  if (a6)
  {
    uint64_t __pattern4 = 0x1000800010008000;
    uint64_t v33 = &v35[(a6 - 1) * v6];
    uint64_t v34 = a5 + 2;
    if (a5 >= -1) {
      uint64_t v34 = a5 + 1;
    }
    memset_pattern4(v33, &__pattern4, (2 * v34) & 0xFFFFFFFFFFFFFFFCLL);
  }
}

uint64_t vt_Rotate_v216_90CW(uint64_t *a1, uint64_t *a2, unint64_t *a3, _WORD **a4, void *a5, void *a6, unint64_t *a7, _WORD **a8)
{
  if (*a1 != *a6 || *a2 != *a5) {
    return 4294954382;
  }
  vtRotatePixelRect90CW_v216(*a4, *a3, *a8, *a7, *a2, *a1);
  return 0;
}

uint64_t vt_Rotate_v216_180(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, unint64_t *a7, _WORD **a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtRotatePixelRect180_v216(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Rotate_v216_90CCW(uint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4, void *a5, void *a6, unint64_t *a7, char **a8)
{
  if (*a1 != *a6 || *a2 != *a5) {
    return 4294954382;
  }
  vtRotatePixelRect90CCW_v216(*a4, *a3, *a8, *a7, *a2, *a1);
  return 0;
}

uint64_t vt_Flip_8(uint64_t *a1, uint64_t *a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6, int a7, int a8)
{
  uint64_t v10 = *a3;
  uint64_t v11 = *a4;
  uint64_t v12 = *a5;
  uint64_t v13 = *a6;
  if (a7)
  {
    vtFlipPixelRectHoriz_1BPP((uint64_t)v11, v10, (uint64_t)v13, v12, *a1, *a2);
    return 0;
  }
  if (!a8) {
    return 0;
  }
  unint64_t v15 = *a1;
  uint64_t v16 = *a2;

  return vtFlipPixelRectVert(v11, v10, v13, v12, v15, v16, 1uLL);
}

uint64_t vtFlipPixelRectHoriz_1BPP(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a5 + result + (a6 - 1) * a2 - 1;
  unint64_t v7 = (char *)(a3 + (a6 - 1) * a4);
  if (result == a3)
  {
    if (a6)
    {
      if (a5 >= 0) {
        uint64_t v10 = a5;
      }
      else {
        uint64_t v10 = a5 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      do
      {
        if ((unint64_t)(a5 + 1) >= 3)
        {
          uint64_t v12 = 0;
          uint64_t v13 = v7;
          do
          {
            char v14 = *v13;
            *v13++ = *(unsigned char *)(v6 + v12);
            *(unsigned char *)(v6 + v12--) = v14;
          }
          while (v11 != v12);
        }
        v6 -= a2;
        v7 -= a4;
        --a6;
      }
      while (a6);
    }
  }
  else
  {
    for (; a6; --a6)
    {
      if (a5)
      {
        uint64_t v8 = 0;
        uint64_t v9 = v7;
        do
          *v9++ = *(unsigned char *)(v6 + v8--);
        while (-a5 != v8);
      }
      v6 -= a2;
      v7 -= a4;
    }
  }
  return result;
}

uint64_t vtFlipPixelRectVert(char *__src, uint64_t a2, char *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7 = a6;
  uint64_t v10 = &a3[(a6 - 1) * a4];
  size_t v11 = a7 * a5;
  if (__src != a3)
  {
    if (a6)
    {
      uint64_t v12 = __src;
      do
      {
        --v7;
        memcpy(v10, v12, v11);
        v12 += a2;
        v10 -= a4;
      }
      while (v7);
    }
    return 0;
  }
  uint64_t v13 = a3;
  if (!a5)
  {
    size_t v15 = 0;
    malloc_type_id_t v16 = 1270757447;
LABEL_12:
    uint64_t v17 = malloc_type_malloc(v15, v16);
    unint64_t v18 = v17;
    if (v7 >= 0) {
      uint64_t v19 = v7;
    }
    else {
      uint64_t v19 = v7 + 1;
    }
    if (v17)
    {
      if ((unint64_t)(v7 + 1) >= 3)
      {
        uint64_t v20 = v19 >> 1;
        uint64_t v21 = -a4;
        do
        {
          --v20;
          memcpy(v18, v10, v11);
          memcpy(v10, v13, v11);
          memcpy(v13, v18, v11);
          v13 += a2;
          v10 += v21;
        }
        while (v20);
      }
      free(v18);
      return 0;
    }
    return 4294954392;
  }
  if ((a5 & 0x8000000000000000) != 0) {
    return 4294954392;
  }
  uint64_t result = 4294954392;
  if (is_mul_ok(a5, a7) && v11)
  {
    size_t v15 = a7 * a5;
    malloc_type_id_t v16 = 1556728742;
    goto LABEL_12;
  }
  return result;
}

uint64_t vt_Flip_8_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtFlipPixelRectHoriz_1BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Flip_8_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, char **a4, void *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtFlipPixelRectVert(*a4, *a3, *a8, *a7, *a1, *a6, 1uLL);
  return 0;
}

uint64_t vt_Flip_16(uint64_t *a1, uint64_t *a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6, int a7, int a8)
{
  uint64_t v10 = *a3;
  size_t v11 = *a4;
  uint64_t v12 = *a5;
  uint64_t v13 = *a6;
  if (a7)
  {
    vtFlipPixelRectHoriz_2BPP((uint64_t)v11, v10, (uint64_t)v13, v12, *a1, *a2);
    return 0;
  }
  if (!a8) {
    return 0;
  }
  unint64_t v15 = *a1;
  uint64_t v16 = *a2;

  return vtFlipPixelRectVert(v11, v10, v13, v12, v15, v16, 2uLL);
}

uint64_t vtFlipPixelRectHoriz_2BPP(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = result + 2 * a5 + (a6 - 1) * a2 - 2;
  uint64_t v7 = a3 + (a6 - 1) * a4;
  if (result == a3)
  {
    if (a6)
    {
      if (a5 >= 0) {
        uint64_t v10 = a5;
      }
      else {
        uint64_t v10 = a5 + 1;
      }
      uint64_t v11 = v10 >> 1;
      do
      {
        if ((unint64_t)(a5 + 1) >= 3)
        {
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          do
          {
            __int16 v14 = *(_WORD *)(v7 + 2 * v13);
            *(_WORD *)(v7 + 2 * v13) = *(_WORD *)(v6 + v12);
            *(_WORD *)(v6 + v12) = v14;
            ++v13;
            v12 -= 2;
          }
          while (v11 != v13);
        }
        v6 -= a2;
        v7 -= a4;
        --a6;
      }
      while (a6);
    }
  }
  else
  {
    for (; a6; --a6)
    {
      if (a5)
      {
        uint64_t v8 = 0;
        for (uint64_t i = 0; i != a5; ++i)
        {
          *(_WORD *)(v7 + 2 * i) = *(_WORD *)(v6 + v8);
          v8 -= 2;
        }
      }
      v6 -= a2;
      v7 -= a4;
    }
  }
  return result;
}

uint64_t vt_Flip_16_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtFlipPixelRectHoriz_2BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Flip_16_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, char **a4, void *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtFlipPixelRectVert(*a4, *a3, *a8, *a7, *a1, *a6, 2uLL);
  return 0;
}

uint64_t vt_Flip_32(uint64_t *a1, uint64_t *a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6, int a7, int a8)
{
  uint64_t v10 = *a3;
  uint64_t v11 = *a4;
  uint64_t v12 = *a5;
  uint64_t v13 = *a6;
  if (a7)
  {
    vtFlipPixelRectHoriz_4BPP((uint64_t)v11, v10, (uint64_t)v13, v12, *a1, *a2);
    return 0;
  }
  if (!a8) {
    return 0;
  }
  unint64_t v15 = *a1;
  uint64_t v16 = *a2;

  return vtFlipPixelRectVert(v11, v10, v13, v12, v15, v16, 4uLL);
}

uint64_t vtFlipPixelRectHoriz_4BPP(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = result + 4 * a5 + (a6 - 1) * a2 - 4;
  uint64_t v7 = a3 + (a6 - 1) * a4;
  if (result == a3)
  {
    if (a6)
    {
      if (a5 >= 0) {
        uint64_t v10 = a5;
      }
      else {
        uint64_t v10 = a5 + 1;
      }
      uint64_t v11 = v10 >> 1;
      do
      {
        if ((unint64_t)(a5 + 1) >= 3)
        {
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          do
          {
            int v14 = *(_DWORD *)(v7 + 4 * v13);
            *(_DWORD *)(v7 + 4 * v13) = *(_DWORD *)(v6 + v12);
            *(_DWORD *)(v6 + v12) = v14;
            ++v13;
            v12 -= 4;
          }
          while (v11 != v13);
        }
        v6 -= a2;
        v7 -= a4;
        --a6;
      }
      while (a6);
    }
  }
  else
  {
    for (; a6; --a6)
    {
      if (a5)
      {
        uint64_t v8 = 0;
        for (uint64_t i = 0; i != a5; ++i)
        {
          *(_DWORD *)(v7 + 4 * i) = *(_DWORD *)(v6 + v8);
          v8 -= 4;
        }
      }
      v6 -= a2;
      v7 -= a4;
    }
  }
  return result;
}

uint64_t vt_Flip_32_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtFlipPixelRectHoriz_4BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Flip_32_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, char **a4, void *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtFlipPixelRectVert(*a4, *a3, *a8, *a7, *a1, *a6, 4uLL);
  return 0;
}

uint64_t vt_Flip_64(uint64_t *a1, uint64_t *a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6, int a7, int a8)
{
  uint64_t v10 = *a3;
  uint64_t v11 = *a4;
  uint64_t v12 = *a5;
  uint64_t v13 = *a6;
  if (a7)
  {
    vtFlipPixelRectHoriz_8BPP((uint64_t)v11, v10, (uint64_t)v13, v12, *a1, *a2);
    return 0;
  }
  if (!a8) {
    return 0;
  }
  unint64_t v15 = *a1;
  uint64_t v16 = *a2;

  return vtFlipPixelRectVert(v11, v10, v13, v12, v15, v16, 8uLL);
}

uint64_t vtFlipPixelRectHoriz_8BPP(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = result + 8 * a5 + (a6 - 1) * a2 - 8;
  uint64_t v7 = a3 + (a6 - 1) * a4;
  if (result == a3)
  {
    if (a6)
    {
      if (a5 >= 0) {
        uint64_t v10 = a5;
      }
      else {
        uint64_t v10 = a5 + 1;
      }
      uint64_t v11 = v10 >> 1;
      do
      {
        if ((unint64_t)(a5 + 1) >= 3)
        {
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          do
          {
            uint64_t v14 = *(void *)(v7 + 8 * v13);
            *(void *)(v7 + 8 * v13) = *(void *)(v6 + v12);
            *(void *)(v6 + v12) = v14;
            ++v13;
            v12 -= 8;
          }
          while (v11 != v13);
        }
        v6 -= a2;
        v7 -= a4;
        --a6;
      }
      while (a6);
    }
  }
  else
  {
    for (; a6; --a6)
    {
      if (a5)
      {
        uint64_t v8 = 0;
        for (uint64_t i = 0; i != a5; ++i)
        {
          *(void *)(v7 + 8 * i) = *(void *)(v6 + v8);
          v8 -= 8;
        }
      }
      v6 -= a2;
      v7 -= a4;
    }
  }
  return result;
}

uint64_t vt_Flip_64_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtFlipPixelRectHoriz_8BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Flip_64_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, char **a4, void *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtFlipPixelRectVert(*a4, *a3, *a8, *a7, *a1, *a6, 8uLL);
  return 0;
}

uint64_t vt_Flip_b3a8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int a7, int a8)
{
  if (a7)
  {
    vtFlipPixelRectHoriz_4BPP(*a4, *a3, *a6, *a5, *a1, *a2);
    vtFlipPixelRectHoriz_2BPP(a4[1], a3[1], a6[1], a5[1], a1[1], a2[1]);
    return 0;
  }
  if (!a8) {
    return 0;
  }
  uint64_t result = vtFlipPixelRectVert((char *)*a4, *a3, (char *)*a6, *a5, *a1, *a2, 4uLL);
  if (!result)
  {
    unint64_t v15 = (char *)a4[1];
    uint64_t v16 = a3[1];
    uint64_t v17 = (char *)a6[1];
    uint64_t v18 = a5[1];
    unint64_t v19 = a1[1];
    uint64_t v20 = a2[1];
    return vtFlipPixelRectVert(v15, v16, v17, v18, v19, v20, 2uLL);
  }
  return result;
}

uint64_t vt_Flip_b3a8_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtFlipPixelRectHoriz_4BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  vtFlipPixelRectHoriz_2BPP(a4[1], a3[1], a8[1], a7[1], a5[1], a6[1]);
  return 0;
}

uint64_t vt_Flip_b3a8_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, char **a4, void *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  uint64_t result = vtFlipPixelRectVert(*a4, *a3, *a8, *a7, *a1, *a6, 4uLL);
  if (!result)
  {
    unint64_t v15 = a4[1];
    uint64_t v16 = a3[1];
    uint64_t v17 = a8[1];
    uint64_t v18 = a7[1];
    unint64_t v19 = a5[1];
    uint64_t v20 = a6[1];
    return vtFlipPixelRectVert(v15, v16, v17, v18, v19, v20, 2uLL);
  }
  return result;
}

uint64_t vt_Flip_y420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  do
  {
    uint64_t v18 = *(void *)(a3 + v16);
    unint64_t v19 = *(char **)(a4 + v16);
    uint64_t v20 = *(void *)(a5 + v16);
    uint64_t v21 = *(char **)(a6 + v16);
    if (a7)
    {
      vtFlipPixelRectHoriz_1BPP((uint64_t)v19, v18, (uint64_t)v21, v20, *(void *)(a1 + v16), *(void *)(a2 + v16));
    }
    else if (a8)
    {
      uint64_t v17 = vtFlipPixelRectVert(v19, v18, v21, v20, *(void *)(a1 + v16), *(void *)(a2 + v16), 1uLL);
    }
    v16 += 8;
  }
  while (v16 != 24);
  return v17;
}

uint64_t vt_Flip_y420_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtFlipPixelRectHoriz_1BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  vtFlipPixelRectHoriz_1BPP(a4[1], a3[1], a8[1], a7[1], a5[1], a6[1]);
  vtFlipPixelRectHoriz_1BPP(a4[2], a3[2], a8[2], a7[2], a5[2], a6[2]);
  return 0;
}

uint64_t vt_Flip_y420_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, char **a4, void *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  uint64_t result = vtFlipPixelRectVert(*a4, *a3, *a8, *a7, *a1, *a6, 1uLL);
  if (!result)
  {
    uint64_t result = vtFlipPixelRectVert(a4[1], a3[1], a8[1], a7[1], a5[1], a6[1], 1uLL);
    if (!result)
    {
      unint64_t v15 = a4[2];
      uint64_t v16 = a3[2];
      uint64_t v17 = a8[2];
      uint64_t v18 = a7[2];
      unint64_t v19 = a5[2];
      uint64_t v20 = a6[2];
      return vtFlipPixelRectVert(v15, v16, v17, v18, v19, v20, 1uLL);
    }
  }
  return result;
}

uint64_t vt_Flip_420v(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int a7, int a8)
{
  if (a7)
  {
    vtFlipPixelRectHoriz_1BPP(*a4, *a3, *a6, *a5, *a1, *a2);
    vtFlipPixelRectHoriz_2BPP(a4[1], a3[1], a6[1], a5[1], a1[1], a2[1]);
    return 0;
  }
  if (!a8) {
    return 0;
  }
  uint64_t result = vtFlipPixelRectVert((char *)*a4, *a3, (char *)*a6, *a5, *a1, *a2, 1uLL);
  if (!result)
  {
    unint64_t v15 = (char *)a4[1];
    uint64_t v16 = a3[1];
    uint64_t v17 = (char *)a6[1];
    uint64_t v18 = a5[1];
    unint64_t v19 = a1[1];
    uint64_t v20 = a2[1];
    return vtFlipPixelRectVert(v15, v16, v17, v18, v19, v20, 2uLL);
  }
  return result;
}

uint64_t vt_Flip_420v_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtFlipPixelRectHoriz_1BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  vtFlipPixelRectHoriz_2BPP(a4[1], a3[1], a8[1], a7[1], a5[1], a6[1]);
  uint64_t result = a4[2];
  if (result)
  {
    uint64_t v15 = a8[2];
    if (v15) {
      vtFlipPixelRectHoriz_1BPP(result, a3[2], v15, a7[2], a5[2], a6[2]);
    }
    return 0;
  }
  return result;
}

uint64_t vt_Flip_420v_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  uint64_t result = vtFlipPixelRectVert(*(char **)a4, *a3, *a8, *a7, *a1, *a6, 1uLL);
  if (!result)
  {
    uint64_t result = vtFlipPixelRectVert(*(char **)(a4 + 8), a3[1], a8[1], a7[1], a5[1], a6[1], 2uLL);
    if (!result)
    {
      uint64_t result = *(void *)(a4 + 16);
      if (result)
      {
        uint64_t v15 = a8[2];
        if (v15)
        {
          uint64_t v16 = a3[2];
          uint64_t v17 = a7[2];
          unint64_t v18 = a5[2];
          uint64_t v19 = a6[2];
          return vtFlipPixelRectVert((char *)result, v16, v15, v17, v18, v19, 1uLL);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t vt_Flip_x420(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int a7, int a8)
{
  if (a7)
  {
    vtFlipPixelRectHoriz_2BPP(*a4, *a3, *a6, *a5, *a1, *a2);
    vtFlipPixelRectHoriz_4BPP(a4[1], a3[1], a6[1], a5[1], a1[1], a2[1]);
    return 0;
  }
  if (!a8) {
    return 0;
  }
  uint64_t result = vtFlipPixelRectVert((char *)*a4, *a3, (char *)*a6, *a5, *a1, *a2, 2uLL);
  if (!result)
  {
    uint64_t v15 = (char *)a4[1];
    uint64_t v16 = a3[1];
    uint64_t v17 = (char *)a6[1];
    uint64_t v18 = a5[1];
    unint64_t v19 = a1[1];
    uint64_t v20 = a2[1];
    return vtFlipPixelRectVert(v15, v16, v17, v18, v19, v20, 4uLL);
  }
  return result;
}

uint64_t vt_Flip_x420_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtFlipPixelRectHoriz_2BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  vtFlipPixelRectHoriz_4BPP(a4[1], a3[1], a8[1], a7[1], a5[1], a6[1]);
  uint64_t result = a4[2];
  if (result)
  {
    uint64_t v15 = a8[2];
    if (v15) {
      vtFlipPixelRectHoriz_2BPP(result, a3[2], v15, a7[2], a5[2], a6[2]);
    }
    return 0;
  }
  return result;
}

uint64_t vt_Flip_x420_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  uint64_t result = vtFlipPixelRectVert(*(char **)a4, *a3, *a8, *a7, *a1, *a6, 2uLL);
  if (!result)
  {
    uint64_t result = vtFlipPixelRectVert(*(char **)(a4 + 8), a3[1], a8[1], a7[1], a5[1], a6[1], 4uLL);
    if (!result)
    {
      uint64_t result = *(void *)(a4 + 16);
      if (result)
      {
        uint64_t v15 = a8[2];
        if (v15)
        {
          uint64_t v16 = a3[2];
          uint64_t v17 = a7[2];
          unint64_t v18 = a5[2];
          uint64_t v19 = a6[2];
          return vtFlipPixelRectVert((char *)result, v16, v15, v17, v18, v19, 2uLL);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t vt_Flip_2vuy(uint64_t *a1, uint64_t *a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6, int a7, int a8)
{
  uint64_t v10 = *a3;
  uint64_t v11 = *a4;
  uint64_t v12 = *a5;
  uint64_t v13 = *a6;
  if (a7)
  {
    vtFlipPixelRectHoriz_2vuy((uint64_t)v11, v10, (uint64_t)v13, v12, *a1, *a2);
    return 0;
  }
  if (!a8) {
    return 0;
  }
  unint64_t v15 = (unint64_t)(*a1 + 1) >> 1;
  uint64_t v16 = *a2;

  return vtFlipPixelRectVert(v11, v10, v13, v12, v15, v16, 4uLL);
}

uint64_t vtFlipPixelRectHoriz_2vuy(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5 >= 0) {
    uint64_t v6 = a5;
  }
  else {
    uint64_t v6 = a5 + 1;
  }
  uint64_t v7 = v6 >> 1;
  uint64_t v8 = result + 4 * (v6 >> 1) + (a6 - 1) * a2 - 4;
  uint64_t v9 = (_DWORD *)(a3 + (a6 - 1) * a4);
  if (result == a3)
  {
    if (a6)
    {
      if (a5 >= 0) {
        uint64_t v15 = a5;
      }
      else {
        uint64_t v15 = a5 + 3;
      }
      uint64_t v16 = v15 >> 2;
      uint64_t v17 = -a2;
      do
      {
        if (a5) {
          *(_DWORD *)(v8 + 4) = 276828288;
        }
        if ((unint64_t)(a5 + 3) >= 7)
        {
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          do
          {
            uint64_t result = (uint64_t)&v9[v19];
            uint64_t v20 = (unsigned char *)(v8 + v18);
            int v21 = *(_DWORD *)result;
            *(unsigned char *)uint64_t result = *(unsigned char *)(v8 + v18);
            *(unsigned char *)(result + 1) = *(unsigned char *)(v8 + v18 + 3);
            *(unsigned char *)(result + 2) = *(unsigned char *)(v8 + v18 + 2);
            *(unsigned char *)(result + 3) = *(unsigned char *)(v8 + v18 + 1);
            *uint64_t v20 = v21;
            v20[1] = HIBYTE(v21);
            v20[2] = BYTE2(v21);
            v20[3] = BYTE1(v21);
            ++v19;
            v18 -= 4;
          }
          while (v16 != v19);
        }
        v8 += v17;
        uint64_t v9 = (_DWORD *)((char *)v9 - a4);
        --a6;
      }
      while (a6);
    }
  }
  else if (a6)
  {
    uint64_t v10 = -a2;
    do
    {
      uint64_t v11 = v9;
      if ((unint64_t)(a5 + 1) >= 3)
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        uint64_t result = v7;
        do
        {
          uint64_t v14 = &v9[v12];
          *uint64_t v14 = *(unsigned char *)(v8 + v13);
          v14[1] = *(unsigned char *)(v8 + v13 + 3);
          v14[2] = *(unsigned char *)(v8 + v13 + 2);
          v14[3] = *(unsigned char *)(v8 + v13 + 1);
          v13 -= 4;
          ++v12;
          --result;
        }
        while (result);
        uint64_t v11 = &v9[v13 / 0xFFFFFFFFFFFFFFFCLL];
      }
      if (a5) {
        *uint64_t v11 = 276828288;
      }
      v8 += v10;
      uint64_t v9 = (_DWORD *)((char *)v9 - a4);
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t vt_Flip_2vuy_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtFlipPixelRectHoriz_2vuy(*a4, *a3, *a8, *a7, *a1, *a6);
  uint64_t result = a4[1];
  if (result)
  {
    uint64_t v15 = a8[1];
    if (v15) {
      vtFlipPixelRectHoriz_1BPP(result, a3[1], v15, a7[1], a5[1], a6[1]);
    }
    return 0;
  }
  return result;
}

uint64_t vt_Flip_2vuy_Ver(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  uint64_t result = vtFlipPixelRectVert(*(char **)a4, *a3, *a8, *a7, (unint64_t)(*a1 + 1) >> 1, *a6, 4uLL);
  if (!result)
  {
    uint64_t result = *(void *)(a4 + 8);
    if (result)
    {
      uint64_t v15 = a8[1];
      if (v15)
      {
        uint64_t v16 = a3[1];
        uint64_t v17 = a7[1];
        unint64_t v18 = a5[1];
        uint64_t v19 = a6[1];
        return vtFlipPixelRectVert((char *)result, v16, v15, v17, v18, v19, 1uLL);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t vt_Flip_yuvs(uint64_t *a1, uint64_t *a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6, int a7, int a8)
{
  uint64_t v10 = *a3;
  uint64_t v11 = *a4;
  uint64_t v12 = *a5;
  unint64_t v13 = *a6;
  if (a7)
  {
    vtFlipPixelRectHoriz_yuvs(v11, v10, v13, v12, *a1, *a2);
    return 0;
  }
  if (!a8) {
    return 0;
  }
  unint64_t v15 = (unint64_t)(*a1 + 1) >> 1;
  uint64_t v16 = *a2;

  return vtFlipPixelRectVert(v11, v10, v13, v12, v15, v16, 4uLL);
}

unsigned char *vtFlipPixelRectHoriz_yuvs(unsigned char *result, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5 >= 0) {
    uint64_t v6 = a5;
  }
  else {
    uint64_t v6 = a5 + 1;
  }
  uint64_t v7 = v6 >> 1;
  uint64_t v8 = 4 * (v6 >> 1);
  uint64_t v9 = (a6 - 1) * a2;
  uint64_t v10 = &a3[(a6 - 1) * a4];
  if (result == a3)
  {
    if (a6)
    {
      uint64_t v14 = (uint64_t)&result[4 * v7 - 4 + v9];
      if (a5 >= 0) {
        uint64_t v15 = a5;
      }
      else {
        uint64_t v15 = a5 + 3;
      }
      uint64_t v16 = v15 >> 2;
      uint64_t v17 = -a2;
      uint64_t v18 = (uint64_t)&result[v9 - 2 + v8];
      do
      {
        if (a5) {
          *(_DWORD *)(v14 + 4) = -2146402288;
        }
        if ((unint64_t)(a5 + 3) >= 7)
        {
          uint64_t v19 = 0;
          uint64_t result = (unsigned char *)v18;
          do
          {
            uint64_t v20 = &v10[4 * v19];
            int v21 = *(_DWORD *)v20;
            *uint64_t v20 = *result;
            v20[1] = *(result - 1);
            v20[2] = *(result - 2);
            v20[3] = result[1];
            *(result - 2) = BYTE2(v21);
            *(result - 1) = BYTE1(v21);
            *uint64_t result = v21;
            result[1] = HIBYTE(v21);
            ++v19;
            result -= 4;
          }
          while (v16 != v19);
        }
        v14 += v17;
        v10 -= a4;
        v18 += v17;
        --a6;
      }
      while (a6);
    }
  }
  else if (a6)
  {
    uint64_t v11 = (uint64_t)&result[v9 - 2 + v8];
    do
    {
      uint64_t v12 = v10;
      if ((unint64_t)(a5 + 1) >= 3)
      {
        unint64_t v13 = (unsigned char *)v11;
        uint64_t v12 = v10;
        uint64_t result = (unsigned char *)v7;
        do
        {
          *uint64_t v12 = *v13;
          v12[1] = *(v13 - 1);
          v12[2] = *(v13 - 2);
          v12[3] = v13[1];
          v12 += 4;
          v13 -= 4;
          --result;
        }
        while (result);
      }
      if (a5) {
        *(_DWORD *)uint64_t v12 = -2146402288;
      }
      v10 -= a4;
      v11 -= a2;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t vt_Flip_yuvs_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, unsigned char **a4, void *a5, uint64_t *a6, uint64_t *a7, unsigned char **a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtFlipPixelRectHoriz_yuvs(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Flip_yuvs_Ver(void *a1, uint64_t a2, uint64_t *a3, char **a4, void *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 == *a5) {
    return vtFlipPixelRectVert(*a4, *a3, *a8, *a7, (unint64_t)(*a1 + 1) >> 1, *a6, 4uLL);
  }
  else {
    return 4294954382;
  }
}

uint64_t vt_Flip_v216(uint64_t *a1, uint64_t *a2, unint64_t *a3, char **a4, unint64_t *a5, char **a6, int a7, int a8)
{
  unint64_t v10 = *a3;
  uint64_t v11 = *a4;
  unint64_t v12 = *a5;
  unint64_t v13 = *a6;
  if (a7)
  {
    vtFlipPixelRectHoriz_v216((uint64_t)v11, v10, (uint64_t)v13, v12, *a1, *a2);
    return 0;
  }
  if (!a8) {
    return 0;
  }
  unint64_t v15 = (unint64_t)(*a1 + 1) >> 1;
  uint64_t v16 = *a2;

  return vtFlipPixelRectVert(v11, v10, v13, v12, v15, v16, 8uLL);
}

uint64_t vtFlipPixelRectHoriz_v216(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5 >= 0) {
    uint64_t v6 = a5;
  }
  else {
    uint64_t v6 = a5 + 1;
  }
  uint64_t v7 = v6 >> 1;
  uint64_t v8 = result + (a6 - 1) * a2 + 8 * (v6 >> 1) - 8;
  uint64_t v9 = (void *)(a3 + (a6 - 1) * a4);
  char v10 = a5;
  unint64_t v11 = a2 >> 1;
  unint64_t v12 = a4 >> 1;
  if (result == a3)
  {
    if (a6)
    {
      unint64_t v19 = a5 + 3;
      if (a5 >= 0) {
        uint64_t v20 = a5;
      }
      else {
        uint64_t v20 = a5 + 3;
      }
      uint64_t v21 = v20 >> 2;
      uint64_t v22 = -2 * v12;
      uint64_t v23 = -2 * v11;
      do
      {
        if (v10) {
          *(void *)(v8 + 16) = 0x1000800010008000;
        }
        if (v19 >= 7)
        {
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          do
          {
            uint64_t result = (uint64_t)&v9[v25];
            uint64_t v26 = (_WORD *)(v8 + v24);
            uint64_t v27 = *(void *)result;
            uint64_t v28 = *(void *)result >> 16;
            uint64_t v29 = HIDWORD(*(void *)result);
            uint64_t v30 = HIWORD(*(void *)result);
            *(_WORD *)uint64_t result = *(_WORD *)(v8 + v24);
            *(_WORD *)(result + 2) = *(_WORD *)(v8 + v24 + 6);
            *(_WORD *)(result + 4) = *(_WORD *)(v8 + v24 + 4);
            *(_WORD *)(result + 6) = *(_WORD *)(v8 + v24 + 2);
            *uint64_t v26 = v27;
            v26[1] = v30;
            v26[2] = v29;
            v26[3] = v28;
            ++v25;
            v24 -= 8;
          }
          while (v21 != v25);
        }
        v8 += v23;
        uint64_t v9 = (void *)((char *)v9 + v22);
        --a6;
      }
      while (a6);
    }
  }
  else if (a6)
  {
    uint64_t v13 = -2 * v12;
    uint64_t v14 = -2 * v11;
    do
    {
      unint64_t v15 = v9;
      if ((unint64_t)(a5 + 1) >= 3)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        uint64_t result = v7;
        do
        {
          uint64_t v18 = &v9[v16];
          _WORD *v18 = *(_WORD *)(v8 + v17);
          v18[1] = *(_WORD *)(v8 + v17 + 6);
          v18[2] = *(_WORD *)(v8 + v17 + 4);
          void v18[3] = *(_WORD *)(v8 + v17 + 2);
          v17 -= 8;
          ++v16;
          --result;
        }
        while (result);
        unint64_t v15 = &v9[v17 / 0xFFFFFFFFFFFFFFF8];
      }
      if (a5) {
        *unint64_t v15 = 0x1000800010008000;
      }
      uint64_t v9 = (void *)((char *)v9 + v13);
      v8 += v14;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t vt_Flip_v216_Hor(uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, unint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5) {
    return 4294954382;
  }
  vtFlipPixelRectHoriz_v216(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Flip_v216_Ver(void *a1, uint64_t a2, uint64_t *a3, char **a4, void *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 == *a5) {
    return vtFlipPixelRectVert(*a4, *a3, *a8, *a7, (unint64_t)(*a1 + 1) >> 1, *a6, 8uLL);
  }
  else {
    return 4294954382;
  }
}

uint64_t vt_Copy_2vuyITU601_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v10 = *a4 + 1;
    unint64_t v11 = (unsigned char *)*a6;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = (unsigned __int8 *)v10;
        uint64_t v14 = v11;
        do
        {
          int v15 = *(v13 - 1) - 128;
          int v16 = v13[1] - 128;
          int v17 = 38155 * *v13 - 610480;
          int v18 = 38155 * v13[2] - 610480;
          int v19 = -12836 * v15 - 26638 * v16;
          int v20 = 66101 * v15;
          int v21 = 52299 * v16;
          int v22 = (v21 + v17) >> 15;
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          if (v21 + v17 >= 0) {
            char v23 = v22;
          }
          else {
            char v23 = 0;
          }
          int v24 = (v19 + v17) >> 15;
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          if (v19 + v17 >= 0) {
            char v25 = v24;
          }
          else {
            char v25 = 0;
          }
          int v26 = v20 + v17;
          int v27 = v26 >> 15;
          if (v26 >> 15 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v26 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v21 + v18;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v19 + v18;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v20 + v18;
          int v36 = v35 >> 15;
          *uint64_t v14 = -1;
          v14[1] = v23;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          v14[2] = v25;
          v14[3] = v28;
          v14[4] = -1;
          v14[5] = v31;
          if (v35 >= 0) {
            char v37 = v36;
          }
          else {
            char v37 = 0;
          }
          v14[6] = v34;
          v14[7] = v37;
          v14 += 8;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v8;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU601_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v10 = *a4 + 1;
    unint64_t v11 = (unsigned char *)*a6;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = (unsigned __int8 *)v10;
        uint64_t v14 = v11;
        do
        {
          int v15 = *(v13 - 1) - 128;
          int v16 = v13[1] - 128;
          int v17 = 38155 * *v13 - 610480;
          int v18 = 38155 * v13[2] - 610480;
          int v19 = -12836 * v15 - 26638 * v16;
          int v20 = 66101 * v15;
          int v21 = 52299 * v16;
          int v22 = (v21 + v17) >> 15;
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          if (v21 + v17 >= 0) {
            char v23 = v22;
          }
          else {
            char v23 = 0;
          }
          int v24 = (v19 + v17) >> 15;
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          if (v19 + v17 >= 0) {
            char v25 = v24;
          }
          else {
            char v25 = 0;
          }
          int v26 = v20 + v17;
          int v27 = v26 >> 15;
          if (v26 >> 15 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v26 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v21 + v18;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v19 + v18;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v20 + v18;
          *uint64_t v14 = v28;
          v14[1] = v25;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          else {
            int v36 = v35 >> 15;
          }
          v14[2] = v23;
          v14[3] = -1;
          if (v35 < 0) {
            LOBYTE(v36) = 0;
          }
          v14[4] = v36;
          v14[5] = v34;
          v14[6] = v31;
          v14[7] = -1;
          v14 += 8;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v8;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU601_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  if (a2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a3;
    uint64_t v14 = *a5;
    uint64_t v15 = a1 >> 1;
    uint64_t v16 = *a6;
    if (a1 >> 1 <= 1) {
      uint64_t v15 = 1;
    }
    uint64_t v17 = *a4 + 1;
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v19 = v15;
        int v20 = (unsigned __int8 *)v17;
        uint64_t v21 = v16;
        do
        {
          int v22 = *(v20 - 1) - 128;
          v23.i32[0] = v20[1] - 128;
          v23.i32[1] = v20[2];
          int32x4_t v24 = a8;
          v24.i32[0] = -12836 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x950BFFFF97F2);
          a12.i32[0] = 38155 * *v20 - 610480;
          a12 = vzip1q_s32(a12, v24);
          int v25 = 66101 * v22;
          int v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255) {
            LOBYTE(v26) = -1;
          }
          int v27 = v25 + v24.i32[1];
          int v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0) {
            LOBYTE(v26) = 0;
          }
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255) {
            LOBYTE(v28) = -1;
          }
          v29.i32[3] = 52299 * (v20[1] - 128);
          v29.i32[1] = 38155 * *v20 - 610480;
          v29.i32[0] = v29.i32[3];
          int32x4_t v30 = vaddq_s32(a12, v29);
          int8x8_t v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          int16x8_t v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)uint64_t v21 = vmovn_s16(v32).u32[0];
          if (v27 >= 0) {
            char v33 = v28;
          }
          else {
            char v33 = 0;
          }
          *(unsigned char *)(v21 + 4) = v26;
          *(unsigned char *)(v21 + 5) = v33;
          v21 += 6;
          v20 += 4;
          --v19;
        }
        while (v19);
      }
      v16 += v14;
      ++v12;
      v17 += v13;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU601_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v11 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = (unsigned __int8 *)v11;
        uint64_t v14 = v10;
        do
        {
          unsigned int v15 = *(v13 - 2);
          unsigned int v17 = *v13;
          v13 += 4;
          unsigned int v16 = v17;
          unsigned int v18 = (38155 * v15 - 610480) >> 15;
          if (v18 >= 0xFF) {
            LOBYTE(v18) = -1;
          }
          if (v15 >= 0x10) {
            char v19 = v18;
          }
          else {
            char v19 = 0;
          }
          int v20 = (int)(38155 * v16 - 610480) >> 15;
          if (v20 >= 255) {
            LOBYTE(v20) = -1;
          }
          if (v16 >= 0x10) {
            char v21 = v20;
          }
          else {
            char v21 = 0;
          }
          *uint64_t v14 = ~v19;
          v14[1] = ~v21;
          v14 += 2;
          --v12;
        }
        while (v12);
      }
      v10 += v8;
      ++v6;
      v11 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU601_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v11 = *a4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = v10;
        uint64_t v14 = v11;
        do
        {
          int v15 = v14[1] - 128;
          int v16 = v14[3] - 128;
          int v17 = 38155 * *v14 - 610480;
          int v18 = 38155 * v14[2] - 610480;
          int v19 = -12836 * v15 - 26638 * v16;
          int v20 = 66101 * v15;
          int v21 = 52299 * v16;
          int v22 = (v21 + v17) >> 15;
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          if (v21 + v17 >= 0) {
            char v23 = v22;
          }
          else {
            char v23 = 0;
          }
          int v24 = (v19 + v17) >> 15;
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          if (v19 + v17 >= 0) {
            char v25 = v24;
          }
          else {
            char v25 = 0;
          }
          int v26 = v20 + v17;
          int v27 = v26 >> 15;
          if (v26 >> 15 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v26 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v21 + v18;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v19 + v18;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v20 + v18;
          int v36 = v35 >> 15;
          *uint64_t v13 = -1;
          v13[1] = v23;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          v13[2] = v25;
          v13[3] = v28;
          v13[4] = -1;
          v13[5] = v31;
          if (v35 >= 0) {
            char v37 = v36;
          }
          else {
            char v37 = 0;
          }
          v13[6] = v34;
          v13[7] = v37;
          v14 += 4;
          v13 += 8;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU601_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v11 = *a4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = v10;
        uint64_t v14 = v11;
        do
        {
          int v15 = v14[1] - 128;
          int v16 = v14[3] - 128;
          int v17 = 38155 * *v14 - 610480;
          int v18 = 38155 * v14[2] - 610480;
          int v19 = -12836 * v15 - 26638 * v16;
          int v20 = 66101 * v15;
          int v21 = 52299 * v16;
          int v22 = (v21 + v17) >> 15;
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          if (v21 + v17 >= 0) {
            char v23 = v22;
          }
          else {
            char v23 = 0;
          }
          int v24 = (v19 + v17) >> 15;
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          if (v19 + v17 >= 0) {
            char v25 = v24;
          }
          else {
            char v25 = 0;
          }
          int v26 = v20 + v17;
          int v27 = v26 >> 15;
          if (v26 >> 15 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v26 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v21 + v18;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v19 + v18;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v20 + v18;
          *uint64_t v13 = v28;
          v13[1] = v25;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          else {
            int v36 = v35 >> 15;
          }
          v13[2] = v23;
          v13[3] = -1;
          if (v35 < 0) {
            LOBYTE(v36) = 0;
          }
          v13[4] = v36;
          v13[5] = v34;
          v13[6] = v31;
          v13[7] = -1;
          v14 += 4;
          v13 += 8;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU601_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  if (a2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a3;
    uint64_t v14 = *a5;
    uint64_t v15 = a1 >> 1;
    uint64_t v16 = *a6;
    int v17 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v15 = 1;
    }
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v19 = v15;
        uint64_t v20 = v16;
        int v21 = v17;
        do
        {
          int v22 = v21[1] - 128;
          v23.i32[0] = v21[3] - 128;
          v23.i32[1] = v21[2];
          int32x4_t v24 = a8;
          v24.i32[0] = -12836 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x950BFFFF97F2);
          a12.i32[0] = 38155 * *v21 - 610480;
          a12 = vzip1q_s32(a12, v24);
          int v25 = 66101 * v22;
          int v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255) {
            LOBYTE(v26) = -1;
          }
          int v27 = v25 + v24.i32[1];
          int v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0) {
            LOBYTE(v26) = 0;
          }
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255) {
            LOBYTE(v28) = -1;
          }
          v29.i32[3] = 52299 * (v21[3] - 128);
          v29.i32[1] = 38155 * *v21 - 610480;
          v29.i32[0] = v29.i32[3];
          int32x4_t v30 = vaddq_s32(a12, v29);
          int8x8_t v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          int16x8_t v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)uint64_t v20 = vmovn_s16(v32).u32[0];
          if (v27 >= 0) {
            char v33 = v28;
          }
          else {
            char v33 = 0;
          }
          *(unsigned char *)(v20 + 4) = v26;
          *(unsigned char *)(v20 + 5) = v33;
          v21 += 4;
          v20 += 6;
          --v19;
        }
        while (v19);
      }
      v17 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU601_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    uint64_t v11 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = v10;
        uint64_t v14 = v11;
        do
        {
          unsigned int v15 = *v14;
          unsigned int v16 = v14[2];
          unsigned int v17 = (38155 * v15 - 610480) >> 15;
          if (v17 >= 0xFF) {
            LOBYTE(v17) = -1;
          }
          if (v15 >= 0x10) {
            char v18 = v17;
          }
          else {
            char v18 = 0;
          }
          int v19 = (int)(38155 * v16 - 610480) >> 15;
          if (v19 >= 255) {
            LOBYTE(v19) = -1;
          }
          if (v16 >= 0x10) {
            char v20 = v19;
          }
          else {
            char v20 = 0;
          }
          *uint64_t v13 = ~v18;
          v13[1] = ~v20;
          v14 += 4;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU601_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a5;
    uint64_t v8 = *a3;
    uint64_t v9 = a3[1];
    uint64_t v10 = a1 >> 1;
    uint64_t v11 = (unsigned char *)a4[1];
    if (a1 >> 1 <= 1) {
      uint64_t v10 = 1;
    }
    uint64_t v12 = *a4 + 1;
    uint64_t v13 = (unsigned char *)*a6;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v14 = v10;
        unsigned int v15 = (unsigned __int8 *)v12;
        unsigned int v16 = v13;
        unsigned int v17 = v11;
        do
        {
          int v18 = *(v15 - 1) - 128;
          int v19 = v15[1] - 128;
          int v20 = 38155 * *v15 - 610480;
          int v21 = 38155 * v15[2] - 610480;
          int v22 = -12836 * v18 - 26638 * v19;
          int v23 = 66101 * v18;
          int v24 = 52299 * v19;
          int v25 = (v24 + v20) >> 15;
          if (v25 >= 255) {
            LOBYTE(v25) = -1;
          }
          if (v24 + v20 >= 0) {
            char v26 = v25;
          }
          else {
            char v26 = 0;
          }
          int v27 = (v22 + v20) >> 15;
          if (v27 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v22 + v20 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v23 + v20;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v24 + v21;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v22 + v21;
          int v36 = v35 >> 15;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          if (v35 >= 0) {
            char v37 = v36;
          }
          else {
            char v37 = 0;
          }
          int v38 = v23 + v21;
          int v39 = v38 >> 15;
          if (v38 >> 15 >= 255) {
            LOBYTE(v39) = -1;
          }
          *unsigned int v16 = *v17;
          v16[1] = v26;
          v16[2] = v28;
          v16[3] = v31;
          if (v38 >= 0) {
            char v40 = v39;
          }
          else {
            char v40 = 0;
          }
          v16[4] = v17[1];
          v16[5] = v34;
          v16[6] = v37;
          v16[7] = v40;
          v16 += 8;
          v15 += 4;
          v17 += 2;
          --v14;
        }
        while (v14);
      }
      v11 += v9;
      v13 += v7;
      ++v6;
      v12 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU601_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a5;
    uint64_t v8 = *a3;
    uint64_t v9 = a3[1];
    uint64_t v10 = a1 >> 1;
    uint64_t v11 = (unsigned char *)a4[1];
    if (a1 >> 1 <= 1) {
      uint64_t v10 = 1;
    }
    uint64_t v12 = *a4 + 1;
    uint64_t v13 = (unsigned char *)*a6;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v14 = v10;
        unsigned int v15 = (unsigned __int8 *)v12;
        unsigned int v16 = v13;
        unsigned int v17 = v11;
        do
        {
          int v18 = *(v15 - 1) - 128;
          int v19 = v15[1] - 128;
          int v20 = 38155 * *v15 - 610480;
          int v21 = 38155 * v15[2] - 610480;
          int v22 = -12836 * v18 - 26638 * v19;
          int v23 = 66101 * v18;
          int v24 = 52299 * v19;
          int v25 = (v24 + v20) >> 15;
          if (v25 >= 255) {
            LOBYTE(v25) = -1;
          }
          if (v24 + v20 >= 0) {
            char v26 = v25;
          }
          else {
            char v26 = 0;
          }
          int v27 = (v22 + v20) >> 15;
          if (v27 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v22 + v20 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v23 + v20;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v24 + v21;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v22 + v21;
          int v36 = v35 >> 15;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          if (v35 >= 0) {
            char v37 = v36;
          }
          else {
            char v37 = 0;
          }
          int v38 = v23 + v21;
          int v39 = v38 >> 15;
          if (v38 >> 15 >= 255) {
            LOBYTE(v39) = -1;
          }
          if (v38 >= 0) {
            char v40 = v39;
          }
          else {
            char v40 = 0;
          }
          *unsigned int v16 = v31;
          v16[1] = v28;
          v16[2] = v26;
          v16[3] = *v17;
          v16[4] = v40;
          v16[5] = v37;
          v16[6] = v34;
          v16[7] = v17[1];
          v16 += 8;
          v15 += 4;
          v17 += 2;
          --v14;
        }
        while (v14);
      }
      v11 += v9;
      v13 += v7;
      ++v6;
      v12 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU601_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  if (a2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a3;
    uint64_t v14 = *a5;
    uint64_t v15 = a1 >> 1;
    uint64_t v16 = *a6;
    if (a1 >> 1 <= 1) {
      uint64_t v15 = 1;
    }
    uint64_t v17 = *a4 + 1;
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v19 = v15;
        int v20 = (unsigned __int8 *)v17;
        uint64_t v21 = v16;
        do
        {
          int v22 = *(v20 - 1) - 128;
          v23.i32[0] = v20[1] - 128;
          v23.i32[1] = v20[2];
          int32x4_t v24 = a8;
          v24.i32[0] = -12836 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x950BFFFF97F2);
          a12.i32[0] = 38155 * *v20 - 610480;
          a12 = vzip1q_s32(a12, v24);
          int v25 = 66101 * v22;
          int v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255) {
            LOBYTE(v26) = -1;
          }
          int v27 = v25 + v24.i32[1];
          int v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0) {
            LOBYTE(v26) = 0;
          }
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255) {
            LOBYTE(v28) = -1;
          }
          v29.i32[3] = 52299 * (v20[1] - 128);
          v29.i32[1] = 38155 * *v20 - 610480;
          v29.i32[0] = v29.i32[3];
          int32x4_t v30 = vaddq_s32(a12, v29);
          int8x8_t v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          int16x8_t v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)uint64_t v21 = vmovn_s16(v32).u32[0];
          if (v27 >= 0) {
            char v33 = v28;
          }
          else {
            char v33 = 0;
          }
          *(unsigned char *)(v21 + 4) = v26;
          *(unsigned char *)(v21 + 5) = v33;
          v21 += 6;
          v20 += 4;
          --v19;
        }
        while (v19);
      }
      v16 += v14;
      ++v12;
      v17 += v13;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU601_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v11 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = (unsigned __int8 *)v11;
        uint64_t v14 = v10;
        do
        {
          unsigned int v15 = *(v13 - 2);
          unsigned int v17 = *v13;
          v13 += 4;
          unsigned int v16 = v17;
          unsigned int v18 = (38155 * v15 - 610480) >> 15;
          if (v18 >= 0xFF) {
            LOBYTE(v18) = -1;
          }
          if (v15 >= 0x10) {
            char v19 = v18;
          }
          else {
            char v19 = 0;
          }
          int v20 = (int)(38155 * v16 - 610480) >> 15;
          if (v20 >= 255) {
            LOBYTE(v20) = -1;
          }
          if (v16 >= 0x10) {
            char v21 = v20;
          }
          else {
            char v21 = 0;
          }
          *uint64_t v14 = ~v19;
          v14[1] = ~v21;
          v14 += 2;
          --v12;
        }
        while (v12);
      }
      v10 += v8;
      ++v6;
      v11 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU709_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v10 = *a4 + 1;
    uint64_t v11 = (unsigned char *)*a6;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = (unsigned __int8 *)v10;
        uint64_t v14 = v11;
        do
        {
          int v15 = *(v13 - 1) - 128;
          int v16 = v13[1] - 128;
          int v17 = 38155 * *v13 - 610480;
          int v18 = 38155 * v13[2] - 610480;
          int v19 = -6987 * v15 - 17461 * v16;
          int v20 = 69219 * v15;
          int v21 = 58745 * v16;
          int v22 = (v21 + v17) >> 15;
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          if (v21 + v17 >= 0) {
            char v23 = v22;
          }
          else {
            char v23 = 0;
          }
          int v24 = (v19 + v17) >> 15;
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          if (v19 + v17 >= 0) {
            char v25 = v24;
          }
          else {
            char v25 = 0;
          }
          int v26 = v20 + v17;
          int v27 = v26 >> 15;
          if (v26 >> 15 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v26 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v21 + v18;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v19 + v18;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v20 + v18;
          int v36 = v35 >> 15;
          *uint64_t v14 = -1;
          v14[1] = v23;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          v14[2] = v25;
          v14[3] = v28;
          v14[4] = -1;
          v14[5] = v31;
          if (v35 >= 0) {
            char v37 = v36;
          }
          else {
            char v37 = 0;
          }
          v14[6] = v34;
          v14[7] = v37;
          v14 += 8;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v8;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU709_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v10 = *a4 + 1;
    uint64_t v11 = (unsigned char *)*a6;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = (unsigned __int8 *)v10;
        uint64_t v14 = v11;
        do
        {
          int v15 = *(v13 - 1) - 128;
          int v16 = v13[1] - 128;
          int v17 = 38155 * *v13 - 610480;
          int v18 = 38155 * v13[2] - 610480;
          int v19 = -6987 * v15 - 17461 * v16;
          int v20 = 69219 * v15;
          int v21 = 58745 * v16;
          int v22 = (v21 + v17) >> 15;
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          if (v21 + v17 >= 0) {
            char v23 = v22;
          }
          else {
            char v23 = 0;
          }
          int v24 = (v19 + v17) >> 15;
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          if (v19 + v17 >= 0) {
            char v25 = v24;
          }
          else {
            char v25 = 0;
          }
          int v26 = v20 + v17;
          int v27 = v26 >> 15;
          if (v26 >> 15 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v26 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v21 + v18;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v19 + v18;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v20 + v18;
          *uint64_t v14 = v28;
          v14[1] = v25;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          else {
            int v36 = v35 >> 15;
          }
          v14[2] = v23;
          v14[3] = -1;
          if (v35 < 0) {
            LOBYTE(v36) = 0;
          }
          v14[4] = v36;
          v14[5] = v34;
          v14[6] = v31;
          v14[7] = -1;
          v14 += 8;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v8;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU709_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  if (a2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a3;
    uint64_t v14 = *a5;
    uint64_t v15 = a1 >> 1;
    uint64_t v16 = *a6;
    if (a1 >> 1 <= 1) {
      uint64_t v15 = 1;
    }
    uint64_t v17 = *a4 + 1;
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v19 = v15;
        int v20 = (unsigned __int8 *)v17;
        uint64_t v21 = v16;
        do
        {
          int v22 = *(v20 - 1) - 128;
          v23.i32[0] = v20[1] - 128;
          v23.i32[1] = v20[2];
          int32x4_t v24 = a8;
          v24.i32[0] = -6987 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x950BFFFFBBCBLL);
          a12.i32[0] = 38155 * *v20 - 610480;
          a12 = vzip1q_s32(a12, v24);
          int v25 = 69219 * v22;
          int v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255) {
            LOBYTE(v26) = -1;
          }
          int v27 = v25 + v24.i32[1];
          int v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0) {
            LOBYTE(v26) = 0;
          }
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255) {
            LOBYTE(v28) = -1;
          }
          v29.i32[3] = 58745 * (v20[1] - 128);
          v29.i32[1] = 38155 * *v20 - 610480;
          v29.i32[0] = v29.i32[3];
          int32x4_t v30 = vaddq_s32(a12, v29);
          int8x8_t v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          int16x8_t v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)uint64_t v21 = vmovn_s16(v32).u32[0];
          if (v27 >= 0) {
            char v33 = v28;
          }
          else {
            char v33 = 0;
          }
          *(unsigned char *)(v21 + 4) = v26;
          *(unsigned char *)(v21 + 5) = v33;
          v21 += 6;
          v20 += 4;
          --v19;
        }
        while (v19);
      }
      v16 += v14;
      ++v12;
      v17 += v13;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU709_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v11 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = (unsigned __int8 *)v11;
        uint64_t v14 = v10;
        do
        {
          unsigned int v15 = *(v13 - 2);
          unsigned int v17 = *v13;
          v13 += 4;
          unsigned int v16 = v17;
          unsigned int v18 = (38155 * v15 - 610480) >> 15;
          if (v18 >= 0xFF) {
            LOBYTE(v18) = -1;
          }
          if (v15 >= 0x10) {
            char v19 = v18;
          }
          else {
            char v19 = 0;
          }
          int v20 = (int)(38155 * v16 - 610480) >> 15;
          if (v20 >= 255) {
            LOBYTE(v20) = -1;
          }
          if (v16 >= 0x10) {
            char v21 = v20;
          }
          else {
            char v21 = 0;
          }
          *uint64_t v14 = ~v19;
          v14[1] = ~v21;
          v14 += 2;
          --v12;
        }
        while (v12);
      }
      v10 += v8;
      ++v6;
      v11 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU709_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v11 = *a4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = v10;
        uint64_t v14 = v11;
        do
        {
          int v15 = v14[1] - 128;
          int v16 = v14[3] - 128;
          int v17 = 38155 * *v14 - 610480;
          int v18 = 38155 * v14[2] - 610480;
          int v19 = -6987 * v15 - 17461 * v16;
          int v20 = 69219 * v15;
          int v21 = 58745 * v16;
          int v22 = (v21 + v17) >> 15;
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          if (v21 + v17 >= 0) {
            char v23 = v22;
          }
          else {
            char v23 = 0;
          }
          int v24 = (v19 + v17) >> 15;
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          if (v19 + v17 >= 0) {
            char v25 = v24;
          }
          else {
            char v25 = 0;
          }
          int v26 = v20 + v17;
          int v27 = v26 >> 15;
          if (v26 >> 15 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v26 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v21 + v18;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v19 + v18;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v20 + v18;
          int v36 = v35 >> 15;
          *uint64_t v13 = -1;
          v13[1] = v23;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          v13[2] = v25;
          v13[3] = v28;
          v13[4] = -1;
          v13[5] = v31;
          if (v35 >= 0) {
            char v37 = v36;
          }
          else {
            char v37 = 0;
          }
          v13[6] = v34;
          v13[7] = v37;
          v14 += 4;
          v13 += 8;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU709_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v11 = *a4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = v10;
        uint64_t v14 = v11;
        do
        {
          int v15 = v14[1] - 128;
          int v16 = v14[3] - 128;
          int v17 = 38155 * *v14 - 610480;
          int v18 = 38155 * v14[2] - 610480;
          int v19 = -6987 * v15 - 17461 * v16;
          int v20 = 69219 * v15;
          int v21 = 58745 * v16;
          int v22 = (v21 + v17) >> 15;
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          if (v21 + v17 >= 0) {
            char v23 = v22;
          }
          else {
            char v23 = 0;
          }
          int v24 = (v19 + v17) >> 15;
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          if (v19 + v17 >= 0) {
            char v25 = v24;
          }
          else {
            char v25 = 0;
          }
          int v26 = v20 + v17;
          int v27 = v26 >> 15;
          if (v26 >> 15 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v26 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v21 + v18;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v19 + v18;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v20 + v18;
          *uint64_t v13 = v28;
          v13[1] = v25;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          else {
            int v36 = v35 >> 15;
          }
          v13[2] = v23;
          v13[3] = -1;
          if (v35 < 0) {
            LOBYTE(v36) = 0;
          }
          v13[4] = v36;
          v13[5] = v34;
          v13[6] = v31;
          v13[7] = -1;
          v14 += 4;
          v13 += 8;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU709_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  if (a2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a3;
    uint64_t v14 = *a5;
    uint64_t v15 = a1 >> 1;
    uint64_t v16 = *a6;
    int v17 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v15 = 1;
    }
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v19 = v15;
        uint64_t v20 = v16;
        int v21 = v17;
        do
        {
          int v22 = v21[1] - 128;
          v23.i32[0] = v21[3] - 128;
          v23.i32[1] = v21[2];
          int32x4_t v24 = a8;
          v24.i32[0] = -6987 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x950BFFFFBBCBLL);
          a12.i32[0] = 38155 * *v21 - 610480;
          a12 = vzip1q_s32(a12, v24);
          int v25 = 69219 * v22;
          int v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255) {
            LOBYTE(v26) = -1;
          }
          int v27 = v25 + v24.i32[1];
          int v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0) {
            LOBYTE(v26) = 0;
          }
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255) {
            LOBYTE(v28) = -1;
          }
          v29.i32[3] = 58745 * (v21[3] - 128);
          v29.i32[1] = 38155 * *v21 - 610480;
          v29.i32[0] = v29.i32[3];
          int32x4_t v30 = vaddq_s32(a12, v29);
          int8x8_t v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          int16x8_t v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)uint64_t v20 = vmovn_s16(v32).u32[0];
          if (v27 >= 0) {
            char v33 = v28;
          }
          else {
            char v33 = 0;
          }
          *(unsigned char *)(v20 + 4) = v26;
          *(unsigned char *)(v20 + 5) = v33;
          v21 += 4;
          v20 += 6;
          --v19;
        }
        while (v19);
      }
      v17 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU709_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    uint64_t v11 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = v10;
        uint64_t v14 = v11;
        do
        {
          unsigned int v15 = *v14;
          unsigned int v16 = v14[2];
          unsigned int v17 = (38155 * v15 - 610480) >> 15;
          if (v17 >= 0xFF) {
            LOBYTE(v17) = -1;
          }
          if (v15 >= 0x10) {
            char v18 = v17;
          }
          else {
            char v18 = 0;
          }
          int v19 = (int)(38155 * v16 - 610480) >> 15;
          if (v19 >= 255) {
            LOBYTE(v19) = -1;
          }
          if (v16 >= 0x10) {
            char v20 = v19;
          }
          else {
            char v20 = 0;
          }
          *uint64_t v13 = ~v18;
          v13[1] = ~v20;
          v14 += 4;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU709_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a5;
    uint64_t v8 = *a3;
    uint64_t v9 = a3[1];
    uint64_t v10 = a1 >> 1;
    uint64_t v11 = (unsigned char *)a4[1];
    if (a1 >> 1 <= 1) {
      uint64_t v10 = 1;
    }
    uint64_t v12 = *a4 + 1;
    uint64_t v13 = (unsigned char *)*a6;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v14 = v10;
        unsigned int v15 = (unsigned __int8 *)v12;
        unsigned int v16 = v13;
        unsigned int v17 = v11;
        do
        {
          int v18 = *(v15 - 1) - 128;
          int v19 = v15[1] - 128;
          int v20 = 38155 * *v15 - 610480;
          int v21 = 38155 * v15[2] - 610480;
          int v22 = -6987 * v18 - 17461 * v19;
          int v23 = 69219 * v18;
          int v24 = 58745 * v19;
          int v25 = (v24 + v20) >> 15;
          if (v25 >= 255) {
            LOBYTE(v25) = -1;
          }
          if (v24 + v20 >= 0) {
            char v26 = v25;
          }
          else {
            char v26 = 0;
          }
          int v27 = (v22 + v20) >> 15;
          if (v27 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v22 + v20 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v23 + v20;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v24 + v21;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v22 + v21;
          int v36 = v35 >> 15;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          if (v35 >= 0) {
            char v37 = v36;
          }
          else {
            char v37 = 0;
          }
          int v38 = v23 + v21;
          int v39 = v38 >> 15;
          if (v38 >> 15 >= 255) {
            LOBYTE(v39) = -1;
          }
          *unsigned int v16 = *v17;
          v16[1] = v26;
          v16[2] = v28;
          v16[3] = v31;
          if (v38 >= 0) {
            char v40 = v39;
          }
          else {
            char v40 = 0;
          }
          v16[4] = v17[1];
          v16[5] = v34;
          v16[6] = v37;
          v16[7] = v40;
          v16 += 8;
          v15 += 4;
          v17 += 2;
          --v14;
        }
        while (v14);
      }
      v11 += v9;
      v13 += v7;
      ++v6;
      v12 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU709_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a5;
    uint64_t v8 = *a3;
    uint64_t v9 = a3[1];
    uint64_t v10 = a1 >> 1;
    uint64_t v11 = (unsigned char *)a4[1];
    if (a1 >> 1 <= 1) {
      uint64_t v10 = 1;
    }
    uint64_t v12 = *a4 + 1;
    uint64_t v13 = (unsigned char *)*a6;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v14 = v10;
        unsigned int v15 = (unsigned __int8 *)v12;
        unsigned int v16 = v13;
        unsigned int v17 = v11;
        do
        {
          int v18 = *(v15 - 1) - 128;
          int v19 = v15[1] - 128;
          int v20 = 38155 * *v15 - 610480;
          int v21 = 38155 * v15[2] - 610480;
          int v22 = -6987 * v18 - 17461 * v19;
          int v23 = 69219 * v18;
          int v24 = 58745 * v19;
          int v25 = (v24 + v20) >> 15;
          if (v25 >= 255) {
            LOBYTE(v25) = -1;
          }
          if (v24 + v20 >= 0) {
            char v26 = v25;
          }
          else {
            char v26 = 0;
          }
          int v27 = (v22 + v20) >> 15;
          if (v27 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v22 + v20 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v23 + v20;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v24 + v21;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v22 + v21;
          int v36 = v35 >> 15;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          if (v35 >= 0) {
            char v37 = v36;
          }
          else {
            char v37 = 0;
          }
          int v38 = v23 + v21;
          int v39 = v38 >> 15;
          if (v38 >> 15 >= 255) {
            LOBYTE(v39) = -1;
          }
          if (v38 >= 0) {
            char v40 = v39;
          }
          else {
            char v40 = 0;
          }
          *unsigned int v16 = v31;
          v16[1] = v28;
          v16[2] = v26;
          v16[3] = *v17;
          v16[4] = v40;
          v16[5] = v37;
          v16[6] = v34;
          v16[7] = v17[1];
          v16 += 8;
          v15 += 4;
          v17 += 2;
          --v14;
        }
        while (v14);
      }
      v11 += v9;
      v13 += v7;
      ++v6;
      v12 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU709_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  if (a2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a3;
    uint64_t v14 = *a5;
    uint64_t v15 = a1 >> 1;
    uint64_t v16 = *a6;
    if (a1 >> 1 <= 1) {
      uint64_t v15 = 1;
    }
    uint64_t v17 = *a4 + 1;
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v19 = v15;
        int v20 = (unsigned __int8 *)v17;
        uint64_t v21 = v16;
        do
        {
          int v22 = *(v20 - 1) - 128;
          v23.i32[0] = v20[1] - 128;
          v23.i32[1] = v20[2];
          int32x4_t v24 = a8;
          v24.i32[0] = -6987 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x950BFFFFBBCBLL);
          a12.i32[0] = 38155 * *v20 - 610480;
          a12 = vzip1q_s32(a12, v24);
          int v25 = 69219 * v22;
          int v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255) {
            LOBYTE(v26) = -1;
          }
          int v27 = v25 + v24.i32[1];
          int v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0) {
            LOBYTE(v26) = 0;
          }
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255) {
            LOBYTE(v28) = -1;
          }
          v29.i32[3] = 58745 * (v20[1] - 128);
          v29.i32[1] = 38155 * *v20 - 610480;
          v29.i32[0] = v29.i32[3];
          int32x4_t v30 = vaddq_s32(a12, v29);
          int8x8_t v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          int16x8_t v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)uint64_t v21 = vmovn_s16(v32).u32[0];
          if (v27 >= 0) {
            char v33 = v28;
          }
          else {
            char v33 = 0;
          }
          *(unsigned char *)(v21 + 4) = v26;
          *(unsigned char *)(v21 + 5) = v33;
          v21 += 6;
          v20 += 4;
          --v19;
        }
        while (v19);
      }
      v16 += v14;
      ++v12;
      v17 += v13;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU709_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v11 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = (unsigned __int8 *)v11;
        uint64_t v14 = v10;
        do
        {
          unsigned int v15 = *(v13 - 2);
          unsigned int v17 = *v13;
          v13 += 4;
          unsigned int v16 = v17;
          unsigned int v18 = (38155 * v15 - 610480) >> 15;
          if (v18 >= 0xFF) {
            LOBYTE(v18) = -1;
          }
          if (v15 >= 0x10) {
            char v19 = v18;
          }
          else {
            char v19 = 0;
          }
          int v20 = (int)(38155 * v16 - 610480) >> 15;
          if (v20 >= 255) {
            LOBYTE(v20) = -1;
          }
          if (v16 >= 0x10) {
            char v21 = v20;
          }
          else {
            char v21 = 0;
          }
          *uint64_t v14 = ~v19;
          v14[1] = ~v21;
          v14 += 2;
          --v12;
        }
        while (v12);
      }
      v10 += v8;
      ++v6;
      v11 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU2020_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v10 = *a4 + 1;
    uint64_t v11 = (unsigned char *)*a6;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = (unsigned __int8 *)v10;
        uint64_t v14 = v11;
        do
        {
          int v15 = *(v13 - 1) - 128;
          int v16 = v13[1] - 128;
          int v17 = 38267 * *v13 - 612272;
          int v18 = 38267 * v13[2] - 612272;
          int v19 = -6155 * v15 - 21375 * v16;
          int v20 = 70388 * v15;
          int v21 = 55169 * v16;
          int v22 = (v21 + v17) >> 15;
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          if (v21 + v17 >= 0) {
            char v23 = v22;
          }
          else {
            char v23 = 0;
          }
          int v24 = (v19 + v17) >> 15;
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          if (v19 + v17 >= 0) {
            char v25 = v24;
          }
          else {
            char v25 = 0;
          }
          int v26 = v20 + v17;
          int v27 = v26 >> 15;
          if (v26 >> 15 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v26 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v21 + v18;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v19 + v18;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v20 + v18;
          int v36 = v35 >> 15;
          *uint64_t v14 = -1;
          v14[1] = v23;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          v14[2] = v25;
          v14[3] = v28;
          v14[4] = -1;
          v14[5] = v31;
          if (v35 >= 0) {
            char v37 = v36;
          }
          else {
            char v37 = 0;
          }
          v14[6] = v34;
          v14[7] = v37;
          v14 += 8;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v8;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU2020_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v10 = *a4 + 1;
    uint64_t v11 = (unsigned char *)*a6;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = (unsigned __int8 *)v10;
        uint64_t v14 = v11;
        do
        {
          int v15 = *(v13 - 1) - 128;
          int v16 = v13[1] - 128;
          int v17 = 38267 * *v13 - 612272;
          int v18 = 38267 * v13[2] - 612272;
          int v19 = -6155 * v15 - 21375 * v16;
          int v20 = 70388 * v15;
          int v21 = 55169 * v16;
          int v22 = (v21 + v17) >> 15;
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          if (v21 + v17 >= 0) {
            char v23 = v22;
          }
          else {
            char v23 = 0;
          }
          int v24 = (v19 + v17) >> 15;
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          if (v19 + v17 >= 0) {
            char v25 = v24;
          }
          else {
            char v25 = 0;
          }
          int v26 = v20 + v17;
          int v27 = v26 >> 15;
          if (v26 >> 15 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v26 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v21 + v18;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v19 + v18;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v20 + v18;
          *uint64_t v14 = v28;
          v14[1] = v25;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          else {
            int v36 = v35 >> 15;
          }
          v14[2] = v23;
          v14[3] = -1;
          if (v35 < 0) {
            LOBYTE(v36) = 0;
          }
          v14[4] = v36;
          v14[5] = v34;
          v14[6] = v31;
          v14[7] = -1;
          v14 += 8;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v8;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU2020_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  if (a2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a3;
    uint64_t v14 = *a5;
    uint64_t v15 = a1 >> 1;
    uint64_t v16 = *a6;
    if (a1 >> 1 <= 1) {
      uint64_t v15 = 1;
    }
    uint64_t v17 = *a4 + 1;
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6A850);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v19 = v15;
        int v20 = (unsigned __int8 *)v17;
        uint64_t v21 = v16;
        do
        {
          int v22 = *(v20 - 1) - 128;
          v23.i32[0] = v20[1] - 128;
          v23.i32[1] = v20[2];
          int32x4_t v24 = a8;
          v24.i32[0] = -6155 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x957BFFFFAC81);
          a12.i32[0] = 38267 * *v20 - 612272;
          a12 = vzip1q_s32(a12, v24);
          int v25 = 70388 * v22;
          int v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255) {
            LOBYTE(v26) = -1;
          }
          int v27 = v25 + v24.i32[1];
          int v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0) {
            LOBYTE(v26) = 0;
          }
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255) {
            LOBYTE(v28) = -1;
          }
          v29.i32[3] = 55169 * (v20[1] - 128);
          v29.i32[1] = 38267 * *v20 - 612272;
          v29.i32[0] = v29.i32[3];
          int32x4_t v30 = vaddq_s32(a12, v29);
          int8x8_t v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          int16x8_t v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)uint64_t v21 = vmovn_s16(v32).u32[0];
          if (v27 >= 0) {
            char v33 = v28;
          }
          else {
            char v33 = 0;
          }
          *(unsigned char *)(v21 + 4) = v26;
          *(unsigned char *)(v21 + 5) = v33;
          v21 += 6;
          v20 += 4;
          --v19;
        }
        while (v19);
      }
      v16 += v14;
      ++v12;
      v17 += v13;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU2020_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v11 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = (unsigned __int8 *)v11;
        uint64_t v14 = v10;
        do
        {
          unsigned int v15 = *(v13 - 2);
          unsigned int v17 = *v13;
          v13 += 4;
          unsigned int v16 = v17;
          unsigned int v18 = (38267 * v15 - 612272) >> 15;
          if (v18 >= 0xFF) {
            LOBYTE(v18) = -1;
          }
          if (v15 >= 0x10) {
            char v19 = v18;
          }
          else {
            char v19 = 0;
          }
          int v20 = (int)(38267 * v16 - 612272) >> 15;
          if (v20 >= 255) {
            LOBYTE(v20) = -1;
          }
          if (v16 >= 0x10) {
            char v21 = v20;
          }
          else {
            char v21 = 0;
          }
          *uint64_t v14 = ~v19;
          v14[1] = ~v21;
          v14 += 2;
          --v12;
        }
        while (v12);
      }
      v10 += v8;
      ++v6;
      v11 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU2020_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v11 = *a4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = v10;
        uint64_t v14 = v11;
        do
        {
          int v15 = v14[1] - 128;
          int v16 = v14[3] - 128;
          int v17 = 38267 * *v14 - 612272;
          int v18 = 38267 * v14[2] - 612272;
          int v19 = -6155 * v15 - 21375 * v16;
          int v20 = 70388 * v15;
          int v21 = 55169 * v16;
          int v22 = (v21 + v17) >> 15;
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          if (v21 + v17 >= 0) {
            char v23 = v22;
          }
          else {
            char v23 = 0;
          }
          int v24 = (v19 + v17) >> 15;
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          if (v19 + v17 >= 0) {
            char v25 = v24;
          }
          else {
            char v25 = 0;
          }
          int v26 = v20 + v17;
          int v27 = v26 >> 15;
          if (v26 >> 15 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v26 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v21 + v18;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v19 + v18;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v20 + v18;
          int v36 = v35 >> 15;
          *uint64_t v13 = -1;
          v13[1] = v23;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          v13[2] = v25;
          v13[3] = v28;
          v13[4] = -1;
          v13[5] = v31;
          if (v35 >= 0) {
            char v37 = v36;
          }
          else {
            char v37 = 0;
          }
          v13[6] = v34;
          v13[7] = v37;
          v14 += 4;
          v13 += 8;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU2020_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v11 = *a4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = v10;
        uint64_t v14 = v11;
        do
        {
          int v15 = v14[1] - 128;
          int v16 = v14[3] - 128;
          int v17 = 38267 * *v14 - 612272;
          int v18 = 38267 * v14[2] - 612272;
          int v19 = -6155 * v15 - 21375 * v16;
          int v20 = 70388 * v15;
          int v21 = 55169 * v16;
          int v22 = (v21 + v17) >> 15;
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          if (v21 + v17 >= 0) {
            char v23 = v22;
          }
          else {
            char v23 = 0;
          }
          int v24 = (v19 + v17) >> 15;
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          if (v19 + v17 >= 0) {
            char v25 = v24;
          }
          else {
            char v25 = 0;
          }
          int v26 = v20 + v17;
          int v27 = v26 >> 15;
          if (v26 >> 15 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v26 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v21 + v18;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v19 + v18;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v20 + v18;
          *uint64_t v13 = v28;
          v13[1] = v25;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          else {
            int v36 = v35 >> 15;
          }
          v13[2] = v23;
          v13[3] = -1;
          if (v35 < 0) {
            LOBYTE(v36) = 0;
          }
          v13[4] = v36;
          v13[5] = v34;
          v13[6] = v31;
          v13[7] = -1;
          v14 += 4;
          v13 += 8;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU2020_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  if (a2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a3;
    uint64_t v14 = *a5;
    uint64_t v15 = a1 >> 1;
    uint64_t v16 = *a6;
    int v17 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v15 = 1;
    }
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6A850);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v19 = v15;
        uint64_t v20 = v16;
        int v21 = v17;
        do
        {
          int v22 = v21[1] - 128;
          v23.i32[0] = v21[3] - 128;
          v23.i32[1] = v21[2];
          int32x4_t v24 = a8;
          v24.i32[0] = -6155 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x957BFFFFAC81);
          a12.i32[0] = 38267 * *v21 - 612272;
          a12 = vzip1q_s32(a12, v24);
          int v25 = 70388 * v22;
          int v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255) {
            LOBYTE(v26) = -1;
          }
          int v27 = v25 + v24.i32[1];
          int v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0) {
            LOBYTE(v26) = 0;
          }
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255) {
            LOBYTE(v28) = -1;
          }
          v29.i32[3] = 55169 * (v21[3] - 128);
          v29.i32[1] = 38267 * *v21 - 612272;
          v29.i32[0] = v29.i32[3];
          int32x4_t v30 = vaddq_s32(a12, v29);
          int8x8_t v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          int16x8_t v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)uint64_t v20 = vmovn_s16(v32).u32[0];
          if (v27 >= 0) {
            char v33 = v28;
          }
          else {
            char v33 = 0;
          }
          *(unsigned char *)(v20 + 4) = v26;
          *(unsigned char *)(v20 + 5) = v33;
          v21 += 4;
          v20 += 6;
          --v19;
        }
        while (v19);
      }
      v17 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU2020_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    uint64_t v11 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = v10;
        uint64_t v14 = v11;
        do
        {
          unsigned int v15 = *v14;
          unsigned int v16 = v14[2];
          unsigned int v17 = (38267 * v15 - 612272) >> 15;
          if (v17 >= 0xFF) {
            LOBYTE(v17) = -1;
          }
          if (v15 >= 0x10) {
            char v18 = v17;
          }
          else {
            char v18 = 0;
          }
          int v19 = (int)(38267 * v16 - 612272) >> 15;
          if (v19 >= 255) {
            LOBYTE(v19) = -1;
          }
          if (v16 >= 0x10) {
            char v20 = v19;
          }
          else {
            char v20 = 0;
          }
          *uint64_t v13 = ~v18;
          v13[1] = ~v20;
          v14 += 4;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU2020_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a5;
    uint64_t v8 = *a3;
    uint64_t v9 = a3[1];
    uint64_t v10 = a1 >> 1;
    uint64_t v11 = (unsigned char *)a4[1];
    if (a1 >> 1 <= 1) {
      uint64_t v10 = 1;
    }
    uint64_t v12 = *a4 + 1;
    uint64_t v13 = (unsigned char *)*a6;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v14 = v10;
        unsigned int v15 = (unsigned __int8 *)v12;
        unsigned int v16 = v13;
        unsigned int v17 = v11;
        do
        {
          int v18 = *(v15 - 1) - 128;
          int v19 = v15[1] - 128;
          int v20 = 38267 * *v15 - 612272;
          int v21 = 38267 * v15[2] - 612272;
          int v22 = -6155 * v18 - 21375 * v19;
          int v23 = 70388 * v18;
          int v24 = 55169 * v19;
          int v25 = (v24 + v20) >> 15;
          if (v25 >= 255) {
            LOBYTE(v25) = -1;
          }
          if (v24 + v20 >= 0) {
            char v26 = v25;
          }
          else {
            char v26 = 0;
          }
          int v27 = (v22 + v20) >> 15;
          if (v27 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v22 + v20 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v23 + v20;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v24 + v21;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v22 + v21;
          int v36 = v35 >> 15;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          if (v35 >= 0) {
            char v37 = v36;
          }
          else {
            char v37 = 0;
          }
          int v38 = v23 + v21;
          int v39 = v38 >> 15;
          if (v38 >> 15 >= 255) {
            LOBYTE(v39) = -1;
          }
          *unsigned int v16 = *v17;
          v16[1] = v26;
          v16[2] = v28;
          v16[3] = v31;
          if (v38 >= 0) {
            char v40 = v39;
          }
          else {
            char v40 = 0;
          }
          v16[4] = v17[1];
          v16[5] = v34;
          v16[6] = v37;
          v16[7] = v40;
          v16 += 8;
          v15 += 4;
          v17 += 2;
          --v14;
        }
        while (v14);
      }
      v11 += v9;
      v13 += v7;
      ++v6;
      v12 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU2020_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a5;
    uint64_t v8 = *a3;
    uint64_t v9 = a3[1];
    uint64_t v10 = a1 >> 1;
    uint64_t v11 = (unsigned char *)a4[1];
    if (a1 >> 1 <= 1) {
      uint64_t v10 = 1;
    }
    uint64_t v12 = *a4 + 1;
    uint64_t v13 = (unsigned char *)*a6;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v14 = v10;
        unsigned int v15 = (unsigned __int8 *)v12;
        unsigned int v16 = v13;
        unsigned int v17 = v11;
        do
        {
          int v18 = *(v15 - 1) - 128;
          int v19 = v15[1] - 128;
          int v20 = 38267 * *v15 - 612272;
          int v21 = 38267 * v15[2] - 612272;
          int v22 = -6155 * v18 - 21375 * v19;
          int v23 = 70388 * v18;
          int v24 = 55169 * v19;
          int v25 = (v24 + v20) >> 15;
          if (v25 >= 255) {
            LOBYTE(v25) = -1;
          }
          if (v24 + v20 >= 0) {
            char v26 = v25;
          }
          else {
            char v26 = 0;
          }
          int v27 = (v22 + v20) >> 15;
          if (v27 >= 255) {
            LOBYTE(v27) = -1;
          }
          if (v22 + v20 >= 0) {
            char v28 = v27;
          }
          else {
            char v28 = 0;
          }
          int v29 = v23 + v20;
          int v30 = v29 >> 15;
          if (v29 >> 15 >= 255) {
            LOBYTE(v30) = -1;
          }
          if (v29 >= 0) {
            char v31 = v30;
          }
          else {
            char v31 = 0;
          }
          int v32 = v24 + v21;
          int v33 = v32 >> 15;
          if (v32 >> 15 >= 255) {
            LOBYTE(v33) = -1;
          }
          if (v32 >= 0) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          int v35 = v22 + v21;
          int v36 = v35 >> 15;
          if (v35 >> 15 >= 255) {
            LOBYTE(v36) = -1;
          }
          if (v35 >= 0) {
            char v37 = v36;
          }
          else {
            char v37 = 0;
          }
          int v38 = v23 + v21;
          int v39 = v38 >> 15;
          if (v38 >> 15 >= 255) {
            LOBYTE(v39) = -1;
          }
          if (v38 >= 0) {
            char v40 = v39;
          }
          else {
            char v40 = 0;
          }
          *unsigned int v16 = v31;
          v16[1] = v28;
          v16[2] = v26;
          v16[3] = *v17;
          v16[4] = v40;
          v16[5] = v37;
          v16[6] = v34;
          v16[7] = v17[1];
          v16 += 8;
          v15 += 4;
          v17 += 2;
          --v14;
        }
        while (v14);
      }
      v11 += v9;
      v13 += v7;
      ++v6;
      v12 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU2020_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  if (a2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a3;
    uint64_t v14 = *a5;
    uint64_t v15 = a1 >> 1;
    uint64_t v16 = *a6;
    if (a1 >> 1 <= 1) {
      uint64_t v15 = 1;
    }
    uint64_t v17 = *a4 + 1;
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6A850);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v19 = v15;
        int v20 = (unsigned __int8 *)v17;
        uint64_t v21 = v16;
        do
        {
          int v22 = *(v20 - 1) - 128;
          v23.i32[0] = v20[1] - 128;
          v23.i32[1] = v20[2];
          int32x4_t v24 = a8;
          v24.i32[0] = -6155 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x957BFFFFAC81);
          a12.i32[0] = 38267 * *v20 - 612272;
          a12 = vzip1q_s32(a12, v24);
          int v25 = 70388 * v22;
          int v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255) {
            LOBYTE(v26) = -1;
          }
          int v27 = v25 + v24.i32[1];
          int v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0) {
            LOBYTE(v26) = 0;
          }
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255) {
            LOBYTE(v28) = -1;
          }
          v29.i32[3] = 55169 * (v20[1] - 128);
          v29.i32[1] = 38267 * *v20 - 612272;
          v29.i32[0] = v29.i32[3];
          int32x4_t v30 = vaddq_s32(a12, v29);
          int8x8_t v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          int16x8_t v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)uint64_t v21 = vmovn_s16(v32).u32[0];
          if (v27 >= 0) {
            char v33 = v28;
          }
          else {
            char v33 = 0;
          }
          *(unsigned char *)(v21 + 4) = v26;
          *(unsigned char *)(v21 + 5) = v33;
          v21 += 6;
          v20 += 4;
          --v19;
        }
        while (v19);
      }
      v16 += v14;
      ++v12;
      v17 += v13;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU2020_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v11 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        uint64_t v13 = (unsigned __int8 *)v11;
        uint64_t v14 = v10;
        do
        {
          unsigned int v15 = *(v13 - 2);
          unsigned int v17 = *v13;
          v13 += 4;
          unsigned int v16 = v17;
          unsigned int v18 = (38267 * v15 - 612272) >> 15;
          if (v18 >= 0xFF) {
            LOBYTE(v18) = -1;
          }
          if (v15 >= 0x10) {
            char v19 = v18;
          }
          else {
            char v19 = 0;
          }
          int v20 = (int)(38267 * v16 - 612272) >> 15;
          if (v20 >= 255) {
            LOBYTE(v20) = -1;
          }
          if (v16 >= 0x10) {
            char v21 = v20;
          }
          else {
            char v21 = 0;
          }
          *uint64_t v14 = ~v19;
          v14[1] = ~v21;
          v14 += 2;
          --v12;
        }
        while (v12);
      }
      v10 += v8;
      ++v6;
      v11 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t VTRateControlSessionGetTypeID()
{
  return sVTRateControlSessionID;
}

void RegisterVTRateControlSession()
{
  uint64_t v0 = (const void *)_CFRuntimeRegisterClass();
  sVTRateControlSessionID = (uint64_t)v0;
  sVTRateControlSessionPropertyCallbacks = 0;
  *(void *)algn_1E93348D8 = VTRateControlSessionCopySupportedPropertyDictionary;
  qword_1E93348E0 = (uint64_t)VTRateControlSessionSetProperty;
  qword_1E93348E8 = (uint64_t)VTRateControlSessionCopyProperty;

  VTSessionRegisterCallbacksForTypeID(&sVTRateControlSessionPropertyCallbacks, v0);
}

uint64_t VTRateControlSessionCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v22 = 0;
  if (!a10) {
    return 4294954394;
  }
  if (VTRateControlRegisterBundle_onceToken != -1) {
    dispatch_once_f(&VTRateControlRegisterBundle_onceToken, 0, (dispatch_function_t)vtRateControlSessionRegisterBundle);
  }
  if (sSymbolsAvailable)
  {
    MEMORY[0x199705810](&VTRateControlSessionGetTypeID_sRegisterVTRateControlSessionOnce, RegisterVTRateControlSession);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      unsigned int v18 = (void *)Instance;
      uint64_t v19 = sVCPRateControlSessionCreateFunc(a1, a2, a3, a4, a5, a6, 0, vtRateControlSessionBeforeEncodeFrameCallback, vtRateControlSessionCompleteFramesCallback, Instance, &v22);
      if (v19)
      {
        CFRelease(v18);
      }
      else
      {
        uint64_t v20 = sVCPBundleHandle;
        v18[4] = v22;
        v18[5] = v20;
        v18[7] = a8;
        v18[8] = a9;
        *a10 = v18;
      }
      return v19;
    }
  }

  return FigSignalErrorAt();
}

uint64_t vtRateControlSessionBeforeEncodeFrameCallback(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, long long *a5)
{
  if (a1 && *(_DWORD *)(a1 + 16) != 2 && (uint64_t v6 = *(void *)(a1 + 72)) != 0)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, long long *, long long *))(a1 + 56);
    long long v11 = *a4;
    uint64_t v12 = *((void *)a4 + 2);
    long long v9 = *a5;
    uint64_t v10 = *((void *)a5 + 2);
    return v7(v6, a2, a3, &v11, &v9);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vtRateControlSessionCompleteFramesCallback(uint64_t a1, long long *a2)
{
  if (a1 && *(_DWORD *)(a1 + 16) != 2 && (uint64_t v2 = *(void *)(a1 + 72)) != 0)
  {
    unint64_t v3 = *(uint64_t (**)(uint64_t, long long *))(a1 + 64);
    long long v5 = *a2;
    uint64_t v6 = *((void *)a2 + 2);
    return v3(v2, &v5);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTRateControlSessionCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  if (a2 && (*a2 = 0, a1) && *(_DWORD *)(a1 + 16) != 2) {
    return sVCPRateControlCopySupportedPropertiesFunc(*(void *)(a1 + 32));
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t vtRateControlSessionIsPropertySupported(uint64_t a1, const void *a2)
{
  CFDictionaryRef theDict = 0;
  VTRateControlSessionCopySupportedPropertyDictionary(a1, &theDict);
  if (!theDict) {
    return 0;
  }
  uint64_t v3 = CFDictionaryContainsKey(theDict, a2);
  CFRelease(theDict);
  return v3;
}

uint64_t VTRateControlSessionSetProperty(uint64_t a1)
{
  if (!a1 || *(_DWORD *)(a1 + 16) == 2) {
    return FigSignalErrorAt();
  }
  else {
    return sVCPRateControlSessionSetPropertyFunc(*(void *)(a1 + 32));
  }
}

uint64_t VTRateControlSessionCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = 0;
  if (!a1 || *(_DWORD *)(a1 + 16) == 2) {
    return FigSignalErrorAt();
  }
  else {
    return sVCPRateControlSessionCopyPropertyFunc(*(void *)(a1 + 32));
  }
}

uint64_t VTRateControlSessionBeforePrepareToEncodeFrames(uint64_t a1)
{
  if (!a1 || *(_DWORD *)(a1 + 16) == 2) {
    return FigSignalErrorAt();
  }
  else {
    return sVCPRateControlSessionBeforePrepareToEncodeFramesFunc(*(void *)(a1 + 32));
  }
}

uint64_t VTRateControlSessionBeforeEncodeFrame(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, long long *a5)
{
  if (!a1 || *(_DWORD *)(a1 + 16) == 2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    long long v9 = *a4;
    uint64_t v10 = *((void *)a4 + 2);
    long long v7 = *a5;
    uint64_t v8 = *((void *)a5 + 2);
    return sVCPRateControlSessionBeforeEncodeFrameFunc(v5, a2, a3, &v9, &v7);
  }
}

uint64_t VTRateControlSessionBeforeEmitEncodedFrame(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) == 2) {
    return FigSignalErrorAt();
  }
  else {
    return sVCPRateControlSessionBeforeEmitEncodedFrameFunc(*(void *)(a1 + 32));
  }
}

uint64_t VTRateControlSessionCompleteFrames(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) == 2) {
    return FigSignalErrorAt();
  }
  else {
    return sVCPRateControlSessionCompleteFramesFunc(*(void *)(a1 + 32));
  }
}

uint64_t VTRateControlGetVersion(uint64_t *a1)
{
  if (!a1) {
    return 4294954394;
  }
  if (VTRateControlRegisterBundle_onceToken != -1) {
    dispatch_once_f(&VTRateControlRegisterBundle_onceToken, 0, (dispatch_function_t)vtRateControlSessionRegisterBundle);
  }
  if (sSymbolsAvailable)
  {
    uint64_t v2 = sVCPGetVersionFunc();
    uint64_t result = 0;
    *a1 = v2;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t VTRateControlReactionObserverCreate(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (a1 && a2)
  {
    if (VTRateControlRegisterBundle_onceToken != -1) {
      dispatch_once_f(&VTRateControlRegisterBundle_onceToken, 0, (dispatch_function_t)vtRateControlSessionRegisterBundle);
    }
    if (sVCPReactionObserverCreateFunc)
    {
      sVCPReactionObserverCreateFunc(a1, a2, &v5);
      return v5;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

void *vtRateControlSessionRegisterBundle()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/VideoProcessing.framework/VideoProcessing", 1);
  sVCPBundleHandle = (uint64_t)result;
  if (result)
  {
    sVCPRateControlSessionCreateFunc = dlsym(result, "VCPRateControlSessionCreate");
    sVCPRateControlCopySupportedPropertiesFunc = (uint64_t (*)(void))dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionCopySupportedPropertyDictionary");
    sVCPRateControlSessionSetPropertyFunc = (uint64_t (*)(void))dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionSetProperty");
    sVCPRateControlSessionCopyPropertyFunc = (uint64_t (*)(void))dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionCopyProperty");
    sVCPRateControlSessionBeforePrepareToEncodeFramesFunc = dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionBeforePrepareToEncodeFrames");
    if (!sVCPRateControlSessionBeforePrepareToEncodeFramesFunc) {
      sVCPRateControlSessionBeforePrepareToEncodeFramesFunc = dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionBeforePrepareToEncodeFrame");
    }
    sVCPRateControlSessionBeforeEncodeFrameFunc = (uint64_t (*)(void, void, void, void, void))dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionBeforeEncodeFrame");
    sVCPRateControlSessionBeforeEmitEncodedFrameFunc = (uint64_t (*)(void))dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionBeforeEmitEncodedFrame");
    sVCPRateControlSessionCompleteFramesFunc = (uint64_t (*)(void))dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionCompleteFrames");
    sVCPGetVersionFunc = dlsym((void *)sVCPBundleHandle, "VCPGetVersion");
    uint64_t result = dlsym((void *)sVCPBundleHandle, "VCPReactionObserverCreate");
    sVCPReactionObserverCreateFunc = result;
    if (sVCPRateControlSessionCreateFunc
      && sVCPRateControlCopySupportedPropertiesFunc
      && sVCPRateControlSessionSetPropertyFunc
      && sVCPRateControlSessionCopyPropertyFunc
      && sVCPRateControlSessionBeforePrepareToEncodeFramesFunc
      && sVCPRateControlSessionBeforeEncodeFrameFunc
      && sVCPRateControlSessionBeforeEmitEncodedFrameFunc
      && sVCPRateControlSessionCompleteFramesFunc
      && sVCPGetVersionFunc)
    {
      sSymbolsAvailable = 1;
    }
    else
    {
      return (void *)FigSignalErrorAt();
    }
  }
  return result;
}

double vtRateControlSessionInit(_OWORD *a1)
{
  double result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void vtRateControlSessionFinalize(uint64_t a1)
{
  if (a1 && !*(_DWORD *)(a1 + 16)) {
    *(_DWORD *)(a1 + 16) = 1;
  }
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 32) = 0;
  }
  *(_DWORD *)(a1 + 16) = 2;
}

CFTypeRef vtRateControlSessionCopyFormattingDesc()
{
  return CFRetain(@"[VTRateControlSession]");
}

__CFString *vtRateControlSessionCopyDebugDesc(unsigned int *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<VTRateControlSession %p [%p]>{invalid:%d, }", a1, v4, a1[4]);
  return Mutable;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x4_t a9, float32x4_t a10)
{
  uint64_t v16 = *(void *)((char *)result + 28);
  unint64_t v17 = 2 * *(unsigned __int8 *)result;
  unint64_t v18 = v16 * a2 / v17;
  unint64_t v19 = (v16 + v16 * a2) / v17;
  if (2 * v19 != 2 * v18)
  {
    unint64_t v20 = 0;
    size_t v21 = *(void *)((char *)result + 20);
    uint64_t v22 = *(void *)((char *)result + 36);
    uint64_t v23 = *(void *)((char *)result + 44) + 2 * v18;
    unint64_t v24 = 2 * v19 - 2 * v18;
    uint64_t v25 = result[14];
    unint64_t v26 = result[13] * a2;
    uint64_t v27 = result[19];
    uint64_t v28 = (void *)result[7];
    uint64_t v29 = (uint64_t *)result[8];
    uint64_t v31 = result[15];
    uint64_t v30 = (void *)result[16];
    uint64_t v32 = (uint64_t *)result[17];
    uint64_t v33 = *v29;
    uint64_t v34 = v29[1];
    uint64_t v36 = *v32;
    uint64_t v35 = v32[1];
    unsigned int v37 = *(unsigned __int16 *)(v27 + 140);
    uint64_t v38 = v31 + 2 * (v26 / v17);
    uint64_t v368 = v29[2];
    uint64_t v369 = v32[2];
    uint64_t v370 = v30[2];
    uint64_t v371 = v28[2];
    uint64_t v39 = v371 + v368 * v23 + 2 * v22;
    unsigned int v40 = *(unsigned __int16 *)(v27 + 142);
    unsigned int v41 = *(unsigned __int16 *)(v27 + 144);
    LODWORD(v26) = *(unsigned __int16 *)(v27 + 146);
    float v42 = (float)v37;
    *(short float *)v10.i16 = (short float)v37;
    unsigned int v43 = *(unsigned __int16 *)(v27 + 148);
    _S10 = *(_DWORD *)(v27 + 44);
    float v45 = (float)v40;
    short float v46 = (short float)v40;
    unsigned int v50 = *(unsigned __int16 *)(v27 + 150);
    float v395 = (float)v41;
    *(short float *)v11.i16 = (short float)v41;
    unsigned int v51 = *(unsigned __int16 *)(v27 + 152);
    float v420 = (float)v26;
    *(short float *)v12.i16 = (short float)v26;
    uint64_t v52 = v27 + 16548;
    float v53 = (unsigned char *)(v370 + v369 * v38 + v25);
    float v397 = (float)v43;
    float v427 = (float)v50;
    float v419 = (float)v51;
    *(short float *)v13.i16 = (short float)v43;
    *(short float *)v14.i16 = (short float)v50;
    *(short float *)v15.i16 = (short float)v51;
    unsigned int v54 = *(unsigned __int8 *)(v27 + 124);
    if (v54 >= 0x11) {
      unsigned __int8 v55 = 0;
    }
    else {
      unsigned __int8 v55 = 16 - v54;
    }
    if (v38 >= 0) {
      uint64_t v56 = v38;
    }
    else {
      uint64_t v56 = v38 + 1;
    }
    uint64_t v372 = v35;
    uint64_t v57 = v30[1] + v35 * (v56 >> 1);
    double result = &unk_193E7D000;
    *(float *)&a3 = 8191.0 / (float)*(unsigned int *)(v27 + 128);
    _S31 = *(float *)&a3 * *(float *)v27;
    _S30 = *(float *)&a3 * *(float *)(v27 + 8);
    _S23 = *(float *)&a3 * *(float *)(v27 + 16);
    _S15 = *(float *)&a3 * *(float *)(v27 + 20);
    _S11 = *(float *)&a3 * *(float *)(v27 + 28);
    uint64_t v63 = *v30 + v36 * v38;
    uint64_t v64 = v27 + 164;
    uint16x8_t v65 = (uint16x8_t)vdupq_n_s16(-v55);
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(v10, 0);
    *(short float *)&a3 = -v46;
    float16x8_t v426 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    __asm { FMOV            V0.2S, #0.25 }
    v47.i32[1] = *(_DWORD *)(v27 + 60);
    v47.i32[0] = *(_DWORD *)(v27 + 48);
    *(float32x2_t *)a9.f32 = vmul_f32(v47, _D0);
    float16x8_t v417 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a9), 0);
    v48.i32[1] = *(_DWORD *)(v27 + 64);
    v48.i32[0] = *(_DWORD *)(v27 + 52);
    *(float32x2_t *)a10.f32 = vmul_f32(v48, _D0);
    float32x4_t v72 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a10), 0);
    float16x8_t v416 = (float16x8_t)v72;
    v49.i32[1] = *(_DWORD *)(v27 + 68);
    v49.i32[0] = *(_DWORD *)(v27 + 56);
    *(float32x2_t *)v72.f32 = vmul_f32(v49, _D0);
    float16x8_t v414 = (float16x8_t)vdupq_lane_s16(v11, 0);
    float16x8_t v415 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v72), 0);
    float16x8_t v412 = (float16x8_t)vdupq_lane_s16(v13, 0);
    float16x8_t v413 = (float16x8_t)vdupq_lane_s16(v12, 0);
    uint64_t v73 = v27 + 32932;
    float16x8_t v410 = (float16x8_t)vdupq_lane_s16(v15, 0);
    float16x8_t v411 = (float16x8_t)vdupq_lane_s16(v14, 0);
    float v74 = (unsigned char *)(v57 + v25);
    float v75 = (int8x8_t *)(v63 + v25);
    float v78 = v28;
    uint64_t v77 = *v28;
    uint64_t v76 = v78[1];
    _ZF = v76 == 0;
    uint64_t v79 = v76 + v34 * v23 + 2 * v22;
    if (_ZF) {
      float v80 = 0;
    }
    else {
      float v80 = (char *)v79;
    }
    float v81 = (uint16x8_t *)(v77 + v33 * v23 + 2 * v22);
    unsigned __int8 v82 = v55;
    _S5 = *(float *)(v27 + 108);
    _S9 = *(float *)(v27 + 112);
    __asm
    {
      FCVT            H13, S31
      FCVT            H12, S11
    }
    short float v425 = _H12;
    __asm { FCVT            H12, S23 }
    short float v424 = _H12;
    __asm { FCVT            H12, S15 }
    short float v423 = _H12;
    __asm { FCVT            H12, S30 }
    short float v422 = _H12;
    float v409 = *(float *)(v27 + 36);
    __asm { FCVT            H0, S0 }
    short float v393 = _H0;
    float v408 = *(float *)(v27 + 40);
    __asm { FCVT            H0, S17 }
    short float v392 = _H0;
    float v421 = *(float *)(v27 + 44);
    __asm { FCVT            H0, S10 }
    short float v391 = _H0;
    __asm { FCVT            H0, S5 }
    short float v390 = _H0;
    __asm { FCVT            H0, S9 }
    short float v389 = _H0;
    float v376 = *(float *)(v27 + 120);
    float v377 = *(float *)(v27 + 116);
    __asm { FCVT            H0, S3 }
    short float v388 = _H0;
    __asm { FCVT            H0, S28 }
    short float v387 = _H0;
    float v407 = *(float *)(v27 + 72);
    __asm { FCVT            H0, S4 }
    short float v386 = _H0;
    float v406 = *(float *)(v27 + 76);
    __asm { FCVT            H0, S19 }
    short float v385 = _H0;
    float v405 = *(float *)(v27 + 80);
    __asm { FCVT            H0, S20 }
    short float v384 = _H0;
    float v404 = *(float *)(v27 + 84);
    __asm { FCVT            H0, S21 }
    short float v383 = _H0;
    float v402 = *(float *)(v27 + 88);
    __asm { FCVT            H0, S14 }
    short float v382 = _H0;
    float v401 = *(float *)(v27 + 92);
    __asm { FCVT            H0, S24 }
    short float v381 = _H0;
    float v400 = *(float *)(v27 + 96);
    __asm { FCVT            H0, S25 }
    short float v380 = _H0;
    float v399 = *(float *)(v27 + 100);
    __asm { FCVT            H0, S26 }
    short float v379 = _H0;
    float v398 = *(float *)(v27 + 104);
    __asm { FCVT            H0, S27 }
    short float v378 = _H0;
    unint64_t v106 = a10.i64[0];
    uint64_t v107 = v72.i64[0];
    uint64_t v374 = v29[1];
    uint64_t v375 = *v29;
    uint64_t v373 = v36;
    float v430 = _S23;
    float v431 = _S30;
    float v428 = _S11;
    float v429 = _S15;
    float16x8_t v418 = v66;
    uint16x8_t v403 = v65;
    short float v394 = _H13;
    float v396 = v42;
    do
    {
      float v108 = &v81->i8[v33];
      float v109 = &v80[v34];
      float v110 = (int8x8_t *)((char *)v75 + v36);
      if ((int)v21 < 8)
      {
        size_t v208 = 0;
        v207 = v74;
        float v114 = (int8x8_t *)((char *)v75 + v36);
        float v113 = &v80[v34];
        float v112 = (uint16x8_t *)((char *)v81 + v33);
      }
      else
      {
        uint64_t v111 = 0;
        float v112 = (uint16x8_t *)((char *)v81 + v33);
        float v113 = &v80[v34];
        float v114 = v110;
        do
        {
          float16x8_t v115 = 0uLL;
          if (v80)
          {
            int16x8x2_t v432 = vld2q_s16((const __int16 *)v80);
            v80 += 32;
            float16x8_t v116 = vaddq_f16(v426, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v432.val[0], v65)));
            v432.val[0] = (int16x8_t)vaddq_f16(v426, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v432.val[1], v65)));
            float16x8_t v117 = vmulq_n_f16((float16x8_t)v432.val[0], v422);
            float16x8_t v118 = vmlaq_n_f16(vmulq_n_f16(v116, v424), (float16x8_t)v432.val[0], v423);
            float16x8_t v119 = vmulq_n_f16(v116, v425);
          }
          else
          {
            float16x8_t v119 = 0uLL;
            float16x8_t v118 = 0uLL;
            float16x8_t v117 = 0uLL;
          }
          uint16x8_t v120 = *v81++;
          float16x8_t v121 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v120, v65)), v66);
          float16x8_t v122 = vmlaq_n_f16(v117, v121, _H13);
          float16x8_t v123 = vmlaq_n_f16(v118, v121, _H13);
          float16x8_t v124 = vmlaq_n_f16(v119, v121, _H13);
          if (v113)
          {
            int16x8x2_t v433 = vld2q_s16((const __int16 *)v113);
            v113 += 32;
            float16x8_t v125 = vaddq_f16(v426, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v433.val[0], v65)));
            v433.val[0] = (int16x8_t)vaddq_f16(v426, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v433.val[1], v65)));
            float16x8_t v126 = vmulq_n_f16((float16x8_t)v433.val[0], v422);
            float16x8_t v127 = vmlaq_n_f16(vmulq_n_f16(v125, v424), (float16x8_t)v433.val[0], v423);
            float16x8_t v115 = vmulq_n_f16(v125, v425);
          }
          else
          {
            float16x8_t v127 = 0uLL;
            float16x8_t v126 = 0uLL;
          }
          uint16x8_t v128 = *v112++;
          float16x8_t v129 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v128, v65)), v66);
          float16x8_t v130 = vmlaq_n_f16(v126, v129, _H13);
          float16x8_t v131 = vmlaq_n_f16(v127, v129, _H13);
          float16x8_t v132 = vmlaq_n_f16(v115, v129, _H13);
          v133.i64[0] = 0x9000900090009000;
          v133.i64[1] = 0x9000900090009000;
          uint16x8_t v134 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v133));
          uint32x4_t v135 = vmovl_high_u16(v134);
          float16x8_t v136 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v134.i8);
          v136.i16[0] = *(_WORD *)(v64 + 2 * v136.u32[0]);
          v136.i16[1] = *(_WORD *)(v64 + 2 * v136.u32[1]);
          v136.i16[2] = *(_WORD *)(v64 + 2 * v136.u32[2]);
          v136.i16[3] = *(_WORD *)(v64 + 2 * v136.u32[3]);
          v136.i16[4] = *(_WORD *)(v64 + 2 * v135.u32[0]);
          v136.i16[5] = *(_WORD *)(v64 + 2 * v135.u32[1]);
          v136.i16[6] = *(_WORD *)(v64 + 2 * v135.u32[2]);
          v136.i16[7] = *(_WORD *)(v64 + 2 * v135.u32[3]);
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v133));
          uint32x4_t v138 = vmovl_high_u16(v137);
          float16x8_t v139 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v137.i8);
          v139.i16[0] = *(_WORD *)(v64 + 2 * v139.u32[0]);
          v139.i16[1] = *(_WORD *)(v64 + 2 * v139.u32[1]);
          v139.i16[2] = *(_WORD *)(v64 + 2 * v139.u32[2]);
          v139.i16[3] = *(_WORD *)(v64 + 2 * v139.u32[3]);
          v139.i16[4] = *(_WORD *)(v64 + 2 * v138.u32[0]);
          v139.i16[5] = *(_WORD *)(v64 + 2 * v138.u32[1]);
          v139.i16[6] = *(_WORD *)(v64 + 2 * v138.u32[2]);
          v139.i16[7] = *(_WORD *)(v64 + 2 * v138.u32[3]);
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, (float16x8_t)0), v133));
          float16x8_t v141 = (float16x8_t)vmovl_high_u16(v140);
          *(void *)&long long v142 = v141.u32[2];
          *((void *)&v142 + 1) = v141.u32[3];
          long long v143 = v142;
          *(void *)&long long v142 = v141.u32[0];
          *((void *)&v142 + 1) = v141.u32[1];
          uint32x4_t v144 = vmovl_u16(*(uint16x4_t *)v140.i8);
          v141.i16[0] = *(_WORD *)(v64 + 2 * v144.u32[0]);
          v141.i16[1] = *(_WORD *)(v64 + 2 * v144.u32[1]);
          v141.i16[2] = *(_WORD *)(v64 + 2 * v144.u32[2]);
          v141.i16[3] = *(_WORD *)(v64 + 2 * v144.u32[3]);
          v141.i16[4] = *(_WORD *)(v64 + 2 * v142);
          v141.i16[5] = *(_WORD *)(v64 + 2 * *((void *)&v142 + 1));
          v141.i16[6] = *(_WORD *)(v64 + 2 * v143);
          v141.i16[7] = *(_WORD *)(v64 + 2 * *((void *)&v143 + 1));
          uint16x8_t v145 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v130, (float16x8_t)0), v133));
          uint32x4_t v146 = vmovl_high_u16(v145);
          float16x8_t v147 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v145.i8);
          v147.i16[0] = *(_WORD *)(v64 + 2 * v147.u32[0]);
          v147.i16[1] = *(_WORD *)(v64 + 2 * v147.u32[1]);
          v147.i16[2] = *(_WORD *)(v64 + 2 * v147.u32[2]);
          v147.i16[3] = *(_WORD *)(v64 + 2 * v147.u32[3]);
          v147.i16[4] = *(_WORD *)(v64 + 2 * v146.u32[0]);
          v147.i16[5] = *(_WORD *)(v64 + 2 * v146.u32[1]);
          v147.i16[6] = *(_WORD *)(v64 + 2 * v146.u32[2]);
          v147.i16[7] = *(_WORD *)(v64 + 2 * v146.u32[3]);
          uint16x8_t v148 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, (float16x8_t)0), v133));
          uint32x4_t v149 = vmovl_high_u16(v148);
          float16x8_t v150 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v148.i8);
          v150.i16[0] = *(_WORD *)(v64 + 2 * v150.u32[0]);
          v150.i16[1] = *(_WORD *)(v64 + 2 * v150.u32[1]);
          v150.i16[2] = *(_WORD *)(v64 + 2 * v150.u32[2]);
          v150.i16[3] = *(_WORD *)(v64 + 2 * v150.u32[3]);
          v150.i16[4] = *(_WORD *)(v64 + 2 * v149.u32[0]);
          v150.i16[5] = *(_WORD *)(v64 + 2 * v149.u32[1]);
          v150.i16[6] = *(_WORD *)(v64 + 2 * v149.u32[2]);
          v150.i16[7] = *(_WORD *)(v64 + 2 * v149.u32[3]);
          uint16x8_t v151 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v132, (float16x8_t)0), v133));
          uint32x4_t v152 = vmovl_high_u16(v151);
          float16x8_t v153 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v151.i8);
          v153.i16[0] = *(_WORD *)(v64 + 2 * v153.u32[0]);
          v153.i16[1] = *(_WORD *)(v64 + 2 * v153.u32[1]);
          v153.i16[2] = *(_WORD *)(v64 + 2 * v153.u32[2]);
          v153.i16[3] = *(_WORD *)(v64 + 2 * v153.u32[3]);
          v153.i16[4] = *(_WORD *)(v64 + 2 * v152.u32[0]);
          v153.i16[5] = *(_WORD *)(v64 + 2 * v152.u32[1]);
          v153.i16[6] = *(_WORD *)(v64 + 2 * v152.u32[2]);
          v153.i16[7] = *(_WORD *)(v64 + 2 * v152.u32[3]);
          uint16x8_t v154 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v136, v390), v139, v389), v141, v388), vmaxq_f16(vmaxq_f16(v136, v139), v141), v387), (float16x8_t)0), v133));
          uint32x4_t v155 = vmovl_high_u16(v154);
          uint32x4_t v156 = vmovl_u16(*(uint16x4_t *)v154.i8);
          v157.i16[0] = *(_WORD *)(v52 + 2 * v156.u32[0]);
          v157.i16[1] = *(_WORD *)(v52 + 2 * v156.u32[1]);
          v157.i16[2] = *(_WORD *)(v52 + 2 * v156.u32[2]);
          v157.i16[3] = *(_WORD *)(v52 + 2 * v156.u32[3]);
          v157.i16[4] = *(_WORD *)(v52 + 2 * v155.u32[0]);
          v157.i16[5] = *(_WORD *)(v52 + 2 * v155.u32[1]);
          v157.i16[6] = *(_WORD *)(v52 + 2 * v155.u32[2]);
          v157.i16[7] = *(_WORD *)(v52 + 2 * v155.u32[3]);
          float16x8_t v158 = vmulq_f16(v136, v157);
          float16x8_t v159 = vmulq_f16(v139, v157);
          float16x8_t v160 = vmulq_f16(v141, v157);
          uint16x8_t v161 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v147, v390), v150, v389), v153, v388), vmaxq_f16(vmaxq_f16(v147, v150), v153), v387), (float16x8_t)0), v133));
          uint32x4_t v162 = vmovl_high_u16(v161);
          uint32x4_t v163 = vmovl_u16(*(uint16x4_t *)v161.i8);
          v164.i16[0] = *(_WORD *)(v52 + 2 * v163.u32[0]);
          v164.i16[1] = *(_WORD *)(v52 + 2 * v163.u32[1]);
          v164.i16[2] = *(_WORD *)(v52 + 2 * v163.u32[2]);
          v164.i16[3] = *(_WORD *)(v52 + 2 * v163.u32[3]);
          v164.i16[4] = *(_WORD *)(v52 + 2 * v162.u32[0]);
          v164.i16[5] = *(_WORD *)(v52 + 2 * v162.u32[1]);
          v164.i16[6] = *(_WORD *)(v52 + 2 * v162.u32[2]);
          v164.i16[7] = *(_WORD *)(v52 + 2 * v162.u32[3]);
          float16x8_t v165 = vmulq_f16(v147, v164);
          float16x8_t v166 = vmulq_f16(v150, v164);
          float16x8_t v167 = vmulq_f16(v153, v164);
          float16x8_t v168 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v158, v386), v159, v385), v160, v384);
          float16x8_t v169 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v158, v383), v159, v382), v160, v381);
          float16x8_t v170 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v160, v378), v159, v379), v158, v380);
          float16x8_t v171 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v165, v386), v166, v385), v167, v384);
          float16x8_t v172 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v165, v383), v166, v382), v167, v381);
          float16x8_t v173 = vmlaq_n_f16(vmulq_n_f16(v167, v378), v166, v379);
          float16x8_t v174 = (float16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v168, (float16x8_t)0), v133));
          uint32x4_t v175 = vmovl_high_u16((uint16x8_t)v174);
          uint32x4_t v176 = vmovl_u16(*(uint16x4_t *)v174.i8);
          v174.i16[7] = (unint64_t)v176.u32[1] >> 48;
          v174.i16[0] = *(_WORD *)(v73 + 2 * v176.u32[0]);
          v174.i16[1] = *(_WORD *)(v73 + 2 * v176.u32[1]);
          v174.i16[2] = *(_WORD *)(v73 + 2 * v176.u32[2]);
          v174.i16[3] = *(_WORD *)(v73 + 2 * v176.u32[3]);
          v174.i16[4] = *(_WORD *)(v73 + 2 * v175.u32[0]);
          v174.i16[5] = *(_WORD *)(v73 + 2 * v175.u32[1]);
          v174.i16[6] = *(_WORD *)(v73 + 2 * v175.u32[2]);
          float v177 = (__int16 *)(v73 + 2 * v175.u32[3]);
          float16x8_t v178 = (float16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v169, (float16x8_t)0), v133));
          uint32x4_t v179 = vmovl_high_u16((uint16x8_t)v178);
          uint32x4_t v180 = vmovl_u16(*(uint16x4_t *)v178.i8);
          v178.i16[7] = (unint64_t)v180.u32[1] >> 48;
          v178.i16[0] = *(_WORD *)(v73 + 2 * v180.u32[0]);
          v178.i16[1] = *(_WORD *)(v73 + 2 * v180.u32[1]);
          v178.i16[2] = *(_WORD *)(v73 + 2 * v180.u32[2]);
          v178.i16[3] = *(_WORD *)(v73 + 2 * v180.u32[3]);
          v178.i16[4] = *(_WORD *)(v73 + 2 * v179.u32[0]);
          v178.i16[5] = *(_WORD *)(v73 + 2 * v179.u32[1]);
          v178.i16[6] = *(_WORD *)(v73 + 2 * v179.u32[2]);
          float16x8_t v181 = (float16x8_t)vuzp1q_s16((int16x8_t)v174, (int16x8_t)v178);
          v174.i16[7] = *v177;
          v178.i16[7] = *(_WORD *)(v73 + 2 * v179.u32[3]);
          uint16x8_t v182 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v170, (float16x8_t)0), v133));
          uint32x4_t v183 = vmovl_high_u16(v182);
          *(void *)&long long v142 = v183.u32[2];
          *((void *)&v142 + 1) = v183.u32[3];
          long long v184 = v142;
          *(void *)&long long v142 = v183.u32[0];
          *((void *)&v142 + 1) = v183.u32[1];
          long long v185 = v142;
          int16x8_t v186 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v182.i8);
          *((void *)&v142 + 1) = v186.u32[3];
          v186.i16[7] = (unint64_t)v186.u32[1] >> 48;
          v186.i16[0] = *(_WORD *)(v73 + 2 * v186.u32[0]);
          v186.i16[1] = *(_WORD *)(v73 + 2 * v186.u32[1]);
          v186.i16[2] = *(_WORD *)(v73 + 2 * v186.u32[2]);
          v186.i16[3] = *(_WORD *)(v73 + 2 * *((void *)&v142 + 1));
          v186.i16[4] = *(_WORD *)(v73 + 2 * v185);
          v186.i16[5] = *(_WORD *)(v73 + 2 * *((void *)&v185 + 1));
          v186.i16[6] = *(_WORD *)(v73 + 2 * v184);
          v187 = (__int16 *)(v73 + 2 * *((void *)&v184 + 1));
          float16x8_t v188 = (float16x8_t)v186;
          v188.i16[7] = *v187;
          uint16x8_t v189 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v171, (float16x8_t)0), v133));
          uint32x4_t v190 = vmovl_high_u16(v189);
          float16x8_t v191 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v189.i8);
          *(void *)&long long v142 = v190.u32[2];
          *((void *)&v142 + 1) = v190.u32[3];
          long long v192 = v142;
          *(void *)&long long v142 = v190.u32[0];
          *((void *)&v142 + 1) = v190.u32[1];
          long long v193 = v142;
          *((void *)&v142 + 1) = v191.u32[3];
          v191.i16[7] = (unint64_t)v191.u32[3] >> 48;
          v191.i16[0] = *(_WORD *)(v73 + 2 * v191.u32[0]);
          v191.i16[1] = *(_WORD *)(v73 + 2 * v191.u32[1]);
          v191.i16[2] = *(_WORD *)(v73 + 2 * v191.u32[2]);
          v191.i16[3] = *(_WORD *)(v73 + 2 * *((void *)&v142 + 1));
          v191.i16[4] = *(_WORD *)(v73 + 2 * v193);
          v191.i16[5] = *(_WORD *)(v73 + 2 * *((void *)&v193 + 1));
          v191.i16[6] = *(_WORD *)(v73 + 2 * v192);
          v194 = (__int16 *)(v73 + 2 * *((void *)&v192 + 1));
          uint16x8_t v195 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v172, (float16x8_t)0), v133));
          uint32x4_t v196 = vmovl_high_u16(v195);
          float16x8_t v197 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v195.i8);
          *(void *)&long long v142 = v196.u32[2];
          *((void *)&v142 + 1) = v196.u32[3];
          long long v198 = v142;
          *(void *)&long long v142 = v196.u32[0];
          *((void *)&v142 + 1) = v196.u32[1];
          long long v199 = v142;
          *((void *)&v142 + 1) = v197.u32[3];
          v197.i16[7] = (unint64_t)v197.u32[3] >> 48;
          v197.i16[0] = *(_WORD *)(v73 + 2 * v197.u32[0]);
          v197.i16[1] = *(_WORD *)(v73 + 2 * v197.u32[1]);
          v197.i16[2] = *(_WORD *)(v73 + 2 * v197.u32[2]);
          v197.i16[3] = *(_WORD *)(v73 + 2 * *((void *)&v142 + 1));
          v197.i16[4] = *(_WORD *)(v73 + 2 * v199);
          v197.i16[5] = *(_WORD *)(v73 + 2 * *((void *)&v199 + 1));
          v197.i16[6] = *(_WORD *)(v73 + 2 * v198);
          float16x8_t v200 = (float16x8_t)vuzp1q_s16((int16x8_t)v191, (int16x8_t)v197);
          v191.i16[7] = *v194;
          v197.i16[7] = *(_WORD *)(v73 + 2 * *((void *)&v198 + 1));
          uint16x8_t v201 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v173, v165, v380), (float16x8_t)0), v133));
          int16x8_t v202 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v201.i8);
          uint32x4_t v203 = vmovl_high_u16(v201);
          *(void *)&long long v142 = v203.u32[2];
          *((void *)&v142 + 1) = v203.u32[3];
          long long v204 = v142;
          *((void *)&v142 + 1) = v202.u32[3];
          v202.i16[7] = (unint64_t)v202.u32[3] >> 48;
          v202.i16[0] = *(_WORD *)(v73 + 2 * v202.u32[0]);
          v202.i16[1] = *(_WORD *)(v73 + 2 * v202.u32[1]);
          v202.i16[2] = *(_WORD *)(v73 + 2 * v202.u32[2]);
          v202.i16[3] = *(_WORD *)(v73 + 2 * *((void *)&v142 + 1));
          v202.i16[4] = *(_WORD *)(v73 + 2 * v203.u32[0]);
          v202.i16[5] = *(_WORD *)(v73 + 2 * v203.u32[1]);
          v202.i16[6] = *(_WORD *)(v73 + 2 * v204);
          float16x8_t v205 = (float16x8_t)v202;
          v205.i16[7] = *(_WORD *)(v73 + 2 * *((void *)&v204 + 1));
          *v75++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v414, v174, v393), v178, v392), v188, v391), v414), v412)));
          *v114++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v414, v191, v393), v197, v392), v205, v391), v414), v412)));
          int16x8_t v206 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v181, (float16x8_t)vuzp2q_s16((int16x8_t)v174, (int16x8_t)v178)), v200), (float16x8_t)vuzp2q_s16((int16x8_t)v191, (int16x8_t)v197));
          *(int8x8_t *)&v74[v111] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v413, v417, (float16x8_t)vzip1q_s16(v206, v206)), v416, (float16x8_t)vzip2q_s16(v206, v206)), v415, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v186, v186), (float16x8_t)vtrn2q_s16((int16x8_t)v188, (int16x8_t)v188)), (float16x8_t)vtrn1q_s16(v202, v202)),
                                                                   (float16x8_t)vtrn2q_s16((int16x8_t)v205, (int16x8_t)v205))), v411), v410)));
          v111 += 8;
          _S23 = v430;
          _S30 = v431;
          _S11 = v428;
          _S15 = v429;
        }
        while ((int)v111 < (int)v21 - 7);
        v207 = &v74[v111];
        size_t v208 = v21 & 0xFFFFFFF8;
      }
      for (; v21 > v208; v207 += 2)
      {
        if (v80)
        {
          float v209 = (float)(*(unsigned __int16 *)v80 >> v82) - v45;
          float v210 = (float)(*((unsigned __int16 *)v80 + 1) >> v82) - v45;
          v211 = (unsigned __int16 *)(v80 + 4);
          float v212 = _S30 * v210;
          float v213 = (float)(_S15 * v210) + (float)(v209 * _S23);
          float v214 = _S11 * v209;
        }
        else
        {
          v211 = 0;
          float v214 = 0.0;
          float v213 = 0.0;
          float v212 = 0.0;
        }
        float v215 = _S31 * (float)((float)(v81->u16[0] >> v82) - v42);
        float v216 = v212 + v215;
        BOOL v217 = (float)(v212 + v215) <= 8191.0;
        float v218 = 8191.0;
        if (v217)
        {
          float v218 = v216;
          if (v216 < 0.0) {
            float v218 = 0.0;
          }
        }
        float v219 = v213 + v215;
        BOOL v217 = (float)(v213 + v215) <= 8191.0;
        float v220 = 8191.0;
        if (v217)
        {
          float v220 = v219;
          if (v219 < 0.0) {
            float v220 = 0.0;
          }
        }
        float v221 = v214 + v215;
        float v222 = 8191.0;
        if (v221 <= 8191.0)
        {
          float v222 = v221;
          if (v221 < 0.0) {
            float v222 = 0.0;
          }
        }
        if (v211)
        {
          float v223 = (float)(*v211 >> v82) - v45;
          float v224 = (float)(v211[1] >> v82) - v45;
          float v80 = (char *)(v211 + 2);
          float v225 = _S30 * v224;
          float v226 = (float)(_S15 * v224) + (float)(v223 * _S23);
          float v227 = _S11 * v223;
        }
        else
        {
          float v80 = 0;
          float v227 = 0.0;
          float v226 = 0.0;
          float v225 = 0.0;
        }
        float v228 = _S31 * (float)((float)(v81->u16[1] >> v82) - v42);
        float v229 = v225 + v228;
        float v230 = 8191.0;
        BOOL v217 = (float)(v225 + v228) <= 8191.0;
        float v231 = 8191.0;
        if (v217)
        {
          float v231 = v229;
          if (v229 < 0.0) {
            float v231 = 0.0;
          }
        }
        float v232 = v226 + v228;
        BOOL v217 = (float)(v226 + v228) <= 8191.0;
        float v233 = 8191.0;
        if (v217)
        {
          float v233 = v232;
          if (v232 < 0.0) {
            float v233 = 0.0;
          }
        }
        float v234 = v227 + v228;
        if (v234 <= 8191.0)
        {
          float v230 = v234;
          if (v234 < 0.0) {
            float v230 = 0.0;
          }
        }
        if (v113)
        {
          float v235 = (float)(*(unsigned __int16 *)v113 >> v82) - v45;
          float v236 = (float)(*((unsigned __int16 *)v113 + 1) >> v82) - v45;
          v237 = (unsigned __int16 *)(v113 + 4);
          float v238 = _S30 * v236;
          float v239 = (float)(_S15 * v236) + (float)(v235 * _S23);
          float v240 = _S11 * v235;
        }
        else
        {
          v237 = 0;
          float v240 = 0.0;
          float v239 = 0.0;
          float v238 = 0.0;
        }
        float v241 = _S31 * (float)((float)(v112->u16[0] >> v82) - v42);
        float v242 = v238 + v241;
        float v243 = 8191.0;
        float v244 = 8191.0;
        if (v242 <= 8191.0)
        {
          float v244 = v242;
          if (v242 < 0.0) {
            float v244 = 0.0;
          }
        }
        float v245 = v239 + v241;
        float v246 = 8191.0;
        if (v245 <= 8191.0)
        {
          float v246 = v245;
          if (v245 < 0.0) {
            float v246 = 0.0;
          }
        }
        float v247 = v240 + v241;
        if (v247 <= 8191.0)
        {
          float v243 = v247;
          if (v247 < 0.0) {
            float v243 = 0.0;
          }
        }
        if (v237)
        {
          float v248 = (float)(*v237 >> v82) - v45;
          float v249 = (float)(v237[1] >> v82) - v45;
          float v113 = (char *)(v237 + 2);
          float v250 = _S30 * v249;
          float v251 = (float)(_S15 * v249) + (float)(v248 * _S23);
          float v252 = _S11 * v248;
        }
        else
        {
          float v113 = 0;
          float v252 = 0.0;
          float v251 = 0.0;
          float v250 = 0.0;
        }
        float v253 = _S31 * (float)((float)(v112->u16[1] >> v82) - v42);
        float v254 = 8191.0;
        if ((float)(v250 + v253) <= 8191.0)
        {
          float v254 = v250 + v253;
          if ((float)(v250 + v253) < 0.0) {
            float v254 = 0.0;
          }
        }
        float v255 = v251 + v253;
        float v256 = 8191.0;
        if (v255 <= 8191.0)
        {
          float v256 = v255;
          if (v255 < 0.0) {
            float v256 = 0.0;
          }
        }
        float v257 = v252 + v253;
        BOOL v217 = (float)(v252 + v253) <= 8191.0;
        float v258 = 8191.0;
        if (v217)
        {
          float v258 = v257;
          if (v257 < 0.0) {
            float v258 = 0.0;
          }
        }
        _H1 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v218, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        _H7 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v220, 0.0), 8191.0)));
        __asm { FCVT            S7, H7 }
        _H20 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v222, 0.0), 8191.0)));
        __asm { FCVT            S20, H20 }
        _H30 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v231, 0.0), 8191.0)));
        _H25 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v233, 0.0), 8191.0)));
        _H10 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v230, 0.0), 8191.0)));
        _H13 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v244, 0.0), 8191.0)));
        _H14 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v246, 0.0), 8191.0)));
        _H12 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v243, 0.0), 8191.0)));
        _H17 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v254, 0.0), 8191.0)));
        _H21 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v256, 0.0), 8191.0)));
        _H24 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v258, 0.0), 8191.0)));
        float v274 = (float)((float)((float)(_S9 * _S7) + (float)(_S5 * _S1)) + (float)(v377 * _S20))
             + (float)(v376 * fmaxf(_S1, fmaxf(_S7, _S20)));
        float v275 = 8191.0;
        if (v274 <= 8191.0)
        {
          float v275 = v274;
          if (v274 < 0.0) {
            float v275 = 0.0;
          }
        }
        float v276 = _S31;
        __asm
        {
          FCVT            S26, H30
          FCVT            S15, H25
          FCVT            S28, H10
        }
        _H25 = *(_WORD *)(v52 + 2 * llroundf(v275));
        float v281 = fmaxf(_S26, fmaxf(_S15, _S28));
        float v282 = (float)((float)((float)(_S9 * _S15) + (float)(_S5 * _S26)) + (float)(v377 * _S28)) + (float)(v376 * v281);
        float v283 = 8191.0;
        if (v282 <= 8191.0)
        {
          float v283 = (float)((float)((float)(_S9 * _S15) + (float)(_S5 * _S26)) + (float)(v377 * _S28))
               + (float)(v376 * v281);
          if (v282 < 0.0) {
            float v283 = 0.0;
          }
        }
        __asm
        {
          FCVT            S27, H13
          FCVT            S11, H14
          FCVT            S29, H12
        }
        _H8 = *(_WORD *)(v52 + 2 * llroundf(v283));
        float v288 = (float)((float)((float)(_S9 * _S11) + (float)(_S5 * _S27)) + (float)(v377 * _S29))
             + (float)(v376 * fmaxf(_S27, fmaxf(_S11, _S29)));
        float v289 = 8191.0;
        if (v288 <= 8191.0)
        {
          float v289 = v288;
          if (v288 < 0.0) {
            float v289 = 0.0;
          }
        }
        __asm
        {
          FCVT            S12, H17
          FCVT            S13, H21
          FCVT            S14, H24
          FCVT            S17, H25
        }
        float v294 = _S1 * _S17;
        float v295 = _S7 * _S17;
        float v296 = _S20 * _S17;
        __asm { FCVT            S1, H8 }
        float v298 = _S26 * _S1;
        float v299 = _S15 * _S1;
        float v300 = _S28 * _S1;
        LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(v289));
        __asm { FCVT            S7, H1 }
        float v302 = _S27 * _S7;
        float v303 = _S11 * _S7;
        float v304 = _S29 * _S7;
        float v305 = (float)((float)((float)(_S9 * _S13) + (float)(_S5 * _S12)) + (float)(v377 * _S14))
             + (float)(v376 * fmaxf(_S12, fmaxf(_S13, _S14)));
        float v306 = 8191.0;
        if (v305 <= 8191.0)
        {
          float v306 = v305;
          if (v305 < 0.0) {
            float v306 = 0.0;
          }
        }
        _H26 = *(_WORD *)(v52 + 2 * llroundf(v306));
        __asm { FCVT            S26, H26 }
        float v309 = _S12 * _S26;
        float v310 = _S13 * _S26;
        _S26 = _S14 * _S26;
        _S29 = (float)((float)(v406 * v295) + (float)(v294 * v407)) + (float)(v296 * v405);
        float v313 = (float)((float)(v402 * v295) + (float)(v294 * v404)) + (float)(v296 * v401);
        _S25 = (float)((float)(v399 * v295) + (float)(v294 * v400)) + (float)(v296 * v398);
        float v315 = (float)((float)(v406 * v299) + (float)(v298 * v407)) + (float)(v300 * v405);
        float v316 = (float)((float)(v402 * v299) + (float)(v298 * v404)) + (float)(v300 * v401);
        _S21 = (float)((float)(v399 * v299) + (float)(v298 * v400)) + (float)(v300 * v398);
        float v318 = (float)((float)(v406 * v303) + (float)(v302 * v407)) + (float)(v304 * v405);
        float v319 = (float)((float)(v402 * v303) + (float)(v302 * v404)) + (float)(v304 * v401);
        float v320 = (float)((float)(v399 * v303) + (float)(v302 * v400)) + (float)(v304 * v398);
        _S7 = (float)(v402 * v310) + (float)(v309 * v404);
        float v322 = (float)(v399 * v310) + (float)(v309 * v400);
        _S27 = (float)((float)(v406 * v310) + (float)(v309 * v407)) + (float)(_S26 * v405);
        _S28 = _S7 + (float)(_S26 * v401);
        float v325 = v322 + (float)(_S26 * v398);
        _H1 = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(_S29, 0.0), 8191.0)));
        __asm { FCVT            S17, H1 }
        _H1 = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(v313, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        LOWORD(_S7) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
        __asm { FCVT            S7, H7 }
        _H20 = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(v315, 0.0), 8191.0)));
        __asm { FCVT            S20, H20 }
        _H24 = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(v316, 0.0), 8191.0)));
        LOWORD(_S21) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
        __asm
        {
          FCVT            S24, H24
          FCVT            S21, H21
        }
        LOWORD(_S25) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(v318, 0.0), 8191.0)));
        __asm { FCVT            S25, H25 }
        LOWORD(_S26) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(v319, 0.0), 8191.0)));
        __asm { FCVT            S26, H26 }
        LOWORD(_S29) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(v320, 0.0), 8191.0)));
        __asm { FCVT            S12, H29 }
        LOWORD(_S27) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(_S27, 0.0), 8191.0)));
        __asm { FCVT            S27, H27 }
        LOWORD(_S28) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(_S28, 0.0), 8191.0)));
        _H0 = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(v325, 0.0), 8191.0)));
        __asm
        {
          FCVT            S28, H28
          FCVT            S29, H0
        }
        float v343 = (float)((float)((float)(v408 * _S1) + (float)(v409 * _S17)) + (float)(v421 * _S7)) + v395;
        if (v343 < v395) {
          float v344 = v395;
        }
        else {
          float v344 = (float)((float)((float)(v408 * _S1) + (float)(v409 * _S17)) + (float)(v421 * _S7)) + v395;
        }
        BOOL v217 = v343 <= v397;
        float v345 = (float)((float)((float)(v408 * _S24) + (float)(v409 * _S20)) + (float)(v421 * _S21)) + v395;
        if (!v217) {
          float v344 = v397;
        }
        __int8 v346 = llroundf(v344);
        if (v345 < v395) {
          float v347 = v395;
        }
        else {
          float v347 = (float)((float)((float)(v408 * _S24) + (float)(v409 * _S20)) + (float)(v421 * _S21)) + v395;
        }
        BOOL v217 = v345 <= v397;
        float v348 = (float)((float)((float)(v408 * _S26) + (float)(v409 * _S25)) + (float)(v421 * _S12)) + v395;
        if (!v217) {
          float v347 = v397;
        }
        __int8 v349 = llroundf(v347);
        if (v348 < v395) {
          float v350 = v395;
        }
        else {
          float v350 = (float)((float)((float)(v408 * _S26) + (float)(v409 * _S25)) + (float)(v421 * _S12)) + v395;
        }
        BOOL v217 = v348 <= v397;
        float v351 = (float)((float)((float)(v408 * _S28) + (float)(v409 * _S27)) + (float)(v421 * _S29)) + v395;
        if (!v217) {
          float v350 = v397;
        }
        __int8 v352 = llroundf(v350);
        if (v351 < v395) {
          float v353 = v395;
        }
        else {
          float v353 = (float)((float)((float)(v408 * _S28) + (float)(v409 * _S27)) + (float)(v421 * _S29)) + v395;
        }
        if (v351 <= v397) {
          float v354 = v353;
        }
        else {
          float v354 = v397;
        }
        __int8 v355 = llroundf(v354);
        float v356 = (float)((float)(_S17 + _S20) + _S25) + _S27;
        float v357 = (float)((float)(_S1 + _S24) + _S26) + _S28;
        v75->i8[0] = v346;
        v75->i8[1] = v349;
        v114->i8[0] = v352;
        v114->i8[1] = v355;
        float v358 = (float)((float)(_S7 + _S21) + _S12) + _S29;
        float v359 = (float)((float)(v420 + (float)(v356 * a9.f32[0])) + (float)(v357 * *(float *)&v106))
             + (float)(v358 * *(float *)&v107);
        float v360 = v419;
        _S23 = v430;
        _S30 = v431;
        _S11 = v428;
        _S15 = v429;
        if (v359 <= v419)
        {
          float v360 = (float)((float)(v420 + (float)(v356 * a9.f32[0])) + (float)(v357 * *(float *)&v106))
               + (float)(v358 * *(float *)&v107);
          if (v359 < v427) {
            float v360 = v427;
          }
        }
        float v361 = (float)((float)(v420 + (float)(v356 * a9.f32[1])) + (float)(v357 * *((float *)&v106 + 1)))
             + (float)(v358 * *((float *)&v107 + 1));
        unsigned char *v207 = llroundf(v360);
        float v362 = v419;
        float v42 = v396;
        _S31 = v276;
        float16x8_t v66 = v418;
        uint16x8_t v65 = v403;
        _H13 = v394;
        if (v361 <= v419)
        {
          float v362 = v361;
          if (v361 < v427) {
            float v362 = v427;
          }
        }
        v208 += 2;
        float v81 = (uint16x8_t *)((char *)v81 + 4);
        float v112 = (uint16x8_t *)((char *)v112 + 4);
        v207[1] = llroundf(v362);
        float v75 = (int8x8_t *)((char *)v75 + 2);
        float v114 = (int8x8_t *)((char *)v114 + 2);
      }
      uint64_t v34 = v374;
      uint64_t v33 = v375;
      float v81 = (uint16x8_t *)&v108[v375];
      float v80 = &v109[v374];
      uint64_t v36 = v373;
      float v75 = (int8x8_t *)((char *)v110 + v373);
      v74 += v372;
      v20 += 2;
    }
    while (v24 > v20);
    if (v371 && v370)
    {
      uint64_t v363 = 0;
      do
      {
        if (v21)
        {
          size_t v364 = v21;
          v365 = v53;
          v366 = (unsigned __int16 *)v39;
          do
          {
            unsigned int v367 = *v366++;
            *v365++ = llroundf((float)v367 * 0.0038911);
            --v364;
          }
          while (v364);
        }
        v39 += v368;
        v53 += v369;
        ++v363;
      }
      while (v363 != v24);
    }
    else if (v370)
    {
      do
      {
        if (v21) {
          double result = memset(v53, 255, v21);
        }
        v53 += v369;
        --v24;
      }
      while (v24);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Tone_Mat_TRC_420vf_GCD(void *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4 = *(void *)((char *)result + 28);
  unint64_t v5 = 2 * *(unsigned __int8 *)result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    size_t v9 = *(void *)((char *)result + 20);
    uint64_t v10 = *(void *)((char *)result + 36);
    uint64_t v11 = *(void *)((char *)result + 44) + 2 * v6;
    unint64_t v12 = 2 * v7 - 2 * v6;
    uint64_t v13 = result[14];
    uint64_t v14 = (uint64_t *)result[16];
    uint64_t v15 = result[15] + 2 * (result[13] * a2 / v5);
    uint64_t v16 = result[19];
    uint64_t v17 = (void *)result[7];
    uint64_t v18 = (uint64_t *)result[8];
    uint64_t v19 = (uint64_t *)result[17];
    uint64_t v20 = *v18;
    uint64_t v21 = v18[1];
    uint64_t v226 = v18[2];
    uint64_t v229 = v17[2];
    uint64_t v22 = v229 + v226 * v11 + 2 * v10;
    uint64_t v23 = *v19;
    uint64_t v24 = v19[1];
    uint64_t v227 = v19[2];
    uint64_t v228 = v14[2];
    uint64_t v25 = (unsigned char *)(v228 + v227 * v15 + v13);
    float v26 = 8191.0;
    *(float *)&unsigned int v27 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    float v28 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    float v29 = (float)LODWORD(a4);
    float v30 = *(float *)&v27 * *(float *)v16;
    float v31 = *(float *)&v27 * *(float *)(v16 + 8);
    float v32 = *(float *)&v27 * *(float *)(v16 + 16);
    float v33 = *(float *)&v27 * *(float *)(v16 + 20);
    float v34 = *(float *)&v27 * *(float *)(v16 + 28);
    LOWORD(v27) = *(_WORD *)(v16 + 144);
    float v35 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 146);
    *(float *)&unsigned int v36 = (float)v27;
    float v254 = *(float *)&v36;
    LOWORD(v36) = *(_WORD *)(v16 + 148);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v16 + 150);
    *(float *)&unsigned int v38 = (float)v36;
    float v259 = *(float *)&v38;
    LOWORD(v38) = *(_WORD *)(v16 + 152);
    float v252 = *(float *)(v16 + 36);
    float v253 = (float)v38;
    float v250 = *(float *)(v16 + 44);
    float v251 = *(float *)(v16 + 40);
    float v248 = *(float *)(v16 + 52) * 0.25;
    float v249 = *(float *)(v16 + 48) * 0.25;
    float v246 = *(float *)(v16 + 60) * 0.25;
    float v247 = *(float *)(v16 + 56) * 0.25;
    float v244 = *(float *)(v16 + 72);
    float v245 = *(float *)(v16 + 64) * 0.25;
    float v242 = *(float *)(v16 + 76);
    float v243 = *(float *)(v16 + 68) * 0.25;
    float v240 = *(float *)(v16 + 84);
    float v241 = *(float *)(v16 + 80);
    float v238 = *(float *)(v16 + 88);
    float v235 = *(float *)(v16 + 96);
    float v236 = *(float *)(v16 + 92);
    float v233 = *(float *)(v16 + 104);
    float v234 = *(float *)(v16 + 100);
    double result = (void *)(v16 + 164);
    uint64_t v39 = v16 + 16548;
    uint64_t v40 = v17[1];
    unsigned int v41 = (char *)(*v17 + *v18 * v11 + 2 * v10);
    if (v40) {
      float v42 = (char *)(v40 + v21 * v11 + 2 * v10);
    }
    else {
      float v42 = 0;
    }
    unsigned int v43 = *(unsigned __int8 *)(v16 + 124);
    char v44 = 16 - v43;
    _CF = v43 >= 0x11;
    uint64_t v47 = *v14;
    uint64_t v46 = v14[1];
    uint64_t v48 = v47 + v23 * v15;
    if (_CF) {
      char v49 = 0;
    }
    else {
      char v49 = v44;
    }
    if (v15 >= 0) {
      uint64_t v50 = v15;
    }
    else {
      uint64_t v50 = v15 + 1;
    }
    uint64_t v51 = v46 + v24 * (v50 >> 1);
    uint64_t v52 = v16 + 32932;
    float v53 = (unsigned char *)(v48 + v13);
    uint64_t v54 = v51 + v13;
    char v55 = v49;
    float v56 = *(float *)(v16 + 108);
    float v57 = *(float *)(v16 + 112);
    float v59 = *(float *)(v16 + 116);
    float v58 = *(float *)(v16 + 120);
    float v257 = v32;
    float v258 = v31;
    float v255 = v34;
    float v256 = v33;
    float v232 = (float)LODWORD(a4);
    float v239 = v28;
    float v237 = v30;
    float v230 = v59;
    float v231 = v57;
    do
    {
      float v60 = &v53[v23];
      float v61 = &v42[v21];
      float v62 = &v41[v20];
      if (v9)
      {
        size_t v63 = 0;
        uint64_t v64 = &v41[v20];
        uint16x8_t v65 = &v42[v21];
        float16x8_t v66 = &v53[v23];
        do
        {
          if (v42)
          {
            float v67 = (float)(*(unsigned __int16 *)v42 >> v55) - v29;
            float v68 = (float)(*((unsigned __int16 *)v42 + 1) >> v55) - v29;
            v42 += 4;
            float v69 = v31 * v68;
            float v70 = (float)(v33 * v68) + (float)(v67 * v32);
            float v71 = v34 * v67;
          }
          else
          {
            float v71 = 0.0;
            float v70 = 0.0;
            float v69 = 0.0;
          }
          float v72 = v30 * (float)((float)(*(unsigned __int16 *)v41 >> v55) - v28);
          float v73 = v69 + v72;
          BOOL v74 = (float)(v69 + v72) <= 8191.0;
          float v75 = 8191.0;
          if (v74)
          {
            float v75 = v73;
            if (v73 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v70 + v72;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v71 + v72;
          if (v78 <= 8191.0)
          {
            float v26 = v78;
            if (v78 < 0.0) {
              float v26 = 0.0;
            }
          }
          if (v42)
          {
            float v79 = (float)(*(unsigned __int16 *)v42 >> v55) - v29;
            float v80 = (float)(*((unsigned __int16 *)v42 + 1) >> v55) - v29;
            v42 += 4;
            float v81 = v31 * v80;
            float v82 = (float)(v33 * v80) + (float)(v79 * v32);
            float v83 = v34 * v79;
          }
          else
          {
            float v83 = 0.0;
            float v82 = 0.0;
            float v81 = 0.0;
          }
          float v84 = v30 * (float)((float)(*((unsigned __int16 *)v41 + 1) >> v55) - v28);
          float v85 = v81 + v84;
          float v86 = 8191.0;
          float v87 = 8191.0;
          if (v85 <= 8191.0)
          {
            float v87 = v85;
            if (v85 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v82 + v84;
          float v89 = 8191.0;
          if (v88 <= 8191.0)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v83 + v84;
          if (v90 <= 8191.0)
          {
            float v86 = v90;
            if (v90 < 0.0) {
              float v86 = 0.0;
            }
          }
          if (v65)
          {
            float v91 = (float)(*(unsigned __int16 *)v65 >> v55) - v29;
            float v92 = (float)(*((unsigned __int16 *)v65 + 1) >> v55) - v29;
            v65 += 4;
            float v93 = v31 * v92;
            float v94 = (float)(v33 * v92) + (float)(v91 * v32);
            float v95 = v34 * v91;
          }
          else
          {
            float v95 = 0.0;
            float v94 = 0.0;
            float v93 = 0.0;
          }
          float v96 = v30 * (float)((float)(*(unsigned __int16 *)v64 >> v55) - v28);
          float v97 = v93 + v96;
          float v98 = 8191.0;
          BOOL v74 = (float)(v93 + v96) <= 8191.0;
          float v99 = 8191.0;
          if (v74)
          {
            float v99 = v97;
            if (v97 < 0.0) {
              float v99 = 0.0;
            }
          }
          float v100 = v94 + v96;
          BOOL v74 = (float)(v94 + v96) <= 8191.0;
          float v101 = 8191.0;
          if (v74)
          {
            float v101 = v100;
            if (v100 < 0.0) {
              float v101 = 0.0;
            }
          }
          float v102 = v95 + v96;
          if (v102 <= 8191.0)
          {
            float v98 = v102;
            if (v102 < 0.0) {
              float v98 = 0.0;
            }
          }
          if (v65)
          {
            float v103 = (float)(*(unsigned __int16 *)v65 >> v55) - v29;
            float v104 = (float)(*((unsigned __int16 *)v65 + 1) >> v55) - v29;
            v65 += 4;
            float v105 = v31 * v104;
            float v106 = (float)(v33 * v104) + (float)(v103 * v32);
            float v107 = v34 * v103;
          }
          else
          {
            float v107 = 0.0;
            float v106 = 0.0;
            float v105 = 0.0;
          }
          float v108 = v30 * (float)((float)(*((unsigned __int16 *)v64 + 1) >> v55) - v28);
          float v109 = v105 + v108;
          BOOL v74 = (float)(v105 + v108) <= 8191.0;
          float v110 = 8191.0;
          if (v74)
          {
            float v110 = v109;
            if (v109 < 0.0) {
              float v110 = 0.0;
            }
          }
          float v111 = v106 + v108;
          float v112 = 8191.0;
          if (v111 <= 8191.0)
          {
            float v112 = v111;
            if (v111 < 0.0) {
              float v112 = 0.0;
            }
          }
          float v113 = v107 + v108;
          BOOL v74 = (float)(v107 + v108) <= 8191.0;
          float v114 = 8191.0;
          if (v74)
          {
            float v114 = v113;
            if (v113 < 0.0) {
              float v114 = 0.0;
            }
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H20 = *((_WORD *)result + llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          unsigned int v121 = llroundf(fminf(fmaxf(v26, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *((_WORD *)result + v121);
          __asm { FCVT            S30, H20 }
          _H20 = *((_WORD *)result + llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H29 = *((_WORD *)result + llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H31 = *((_WORD *)result + llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          float v134 = fmaxf(_S0, fmaxf(_S19, _S30));
          float v135 = (float)((float)((float)(v57 * _S19) + (float)(v56 * _S0)) + (float)(v59 * _S30)) + (float)(v58 * v134);
          float v136 = 8191.0;
          if (v135 <= 8191.0)
          {
            float v136 = (float)((float)((float)(v57 * _S19) + (float)(v56 * _S0)) + (float)(v59 * _S30))
                 + (float)(v58 * v134);
            if (v135 < 0.0) {
              float v136 = 0.0;
            }
          }
          __asm
          {
            FCVT            S21, H20
            FCVT            S22, H29
            FCVT            S23, H31
          }
          _H20 = *(_WORD *)(v39 + 2 * llroundf(v136));
          float v141 = (float)((float)((float)(v57 * _S22) + (float)(v56 * _S21)) + (float)(v59 * _S23))
               + (float)(v58 * fmaxf(_S21, fmaxf(_S22, _S23)));
          float v142 = 8191.0;
          if (v141 <= 8191.0)
          {
            float v142 = v141;
            if (v141 < 0.0) {
              float v142 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H5
            FCVT            S10, H6
            FCVT            S11, H7
          }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(v142));
          float v147 = fmaxf(_S9, fmaxf(_S10, _S11));
          float v148 = (float)((float)((float)(v57 * _S10) + (float)(v56 * _S9)) + (float)(v59 * _S11)) + (float)(v58 * v147);
          float v149 = 8191.0;
          if (v148 <= 8191.0)
          {
            float v149 = (float)((float)((float)(v57 * _S10) + (float)(v56 * _S9)) + (float)(v59 * _S11))
                 + (float)(v58 * v147);
            if (v148 < 0.0) {
              float v149 = 0.0;
            }
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H4
            FCVT            S1, H20
          }
          float v154 = _S0 * _S1;
          float v155 = _S19 * _S1;
          float v156 = _S30 * _S1;
          __asm { FCVT            S0, H5 }
          float v158 = _S21 * _S0;
          float v159 = _S22 * _S0;
          float v160 = _S23 * _S0;
          LOWORD(_S0) = *(_WORD *)(v39 + 2 * llroundf(v149));
          __asm { FCVT            S1, H0 }
          float v162 = _S9 * _S1;
          float v163 = _S10 * _S1;
          float v164 = _S11 * _S1;
          float v165 = (float)((float)((float)(v57 * _S31) + (float)(v56 * _S29)) + (float)(v59 * _S8))
               + (float)(v58 * fmaxf(_S29, fmaxf(_S31, _S8)));
          float v166 = 8191.0;
          if (v165 <= 8191.0)
          {
            float v166 = v165;
            if (v165 < 0.0) {
              float v166 = 0.0;
            }
          }
          _H21 = *(_WORD *)(v39 + 2 * llroundf(v166));
          __asm { FCVT            S21, H21 }
          float v169 = _S29 * _S21;
          float v170 = _S31 * _S21;
          float v171 = _S8 * _S21;
          float v172 = (float)((float)(v242 * v155) + (float)(v154 * v244)) + (float)(v156 * v241);
          float v173 = (float)((float)(v238 * v155) + (float)(v154 * v240)) + (float)(v156 * v236);
          _S7 = (float)((float)(v234 * v155) + (float)(v154 * v235)) + (float)(v156 * v233);
          _S19 = (float)((float)(v242 * v159) + (float)(v158 * v244)) + (float)(v160 * v241);
          float v176 = (float)((float)(v238 * v159) + (float)(v158 * v240)) + (float)(v160 * v236);
          _S5 = (float)((float)(v234 * v159) + (float)(v158 * v235)) + (float)(v160 * v233);
          float v178 = (float)((float)(v242 * v163) + (float)(v162 * v244)) + (float)(v164 * v241);
          float v179 = (float)((float)(v238 * v163) + (float)(v162 * v240)) + (float)(v164 * v236);
          float v180 = (float)((float)(v234 * v163) + (float)(v162 * v235)) + (float)(v164 * v233);
          _S1 = (float)(v238 * v170) + (float)(v169 * v240);
          float v182 = (float)(v234 * v170) + (float)(v169 * v235);
          _S22 = (float)((float)(v242 * v170) + (float)(v169 * v244)) + (float)(v171 * v241);
          _S23 = _S1 + (float)(v171 * v236);
          _S21 = v182 + (float)(v171 * v233);
          _H0 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0)));
          __asm { FCVT            S3, H0 }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v173, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H6 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S5, H5
          }
          LOWORD(_S7) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v178, 0.0), 8191.0)));
          __asm { FCVT            S20, H7 }
          LOWORD(_S7) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v179, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S19) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v180, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S22) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S21, H21
          }
          float v202 = (float)((float)((float)(v251 * _S0) + (float)(v252 * _S3)) + (float)(v250 * _S1)) + v35;
          if (v202 < v35) {
            float v203 = v35;
          }
          else {
            float v203 = (float)((float)((float)(v251 * _S0) + (float)(v252 * _S3)) + (float)(v250 * _S1)) + v35;
          }
          BOOL v74 = v202 <= v37;
          float v204 = (float)((float)((float)(v251 * _S6) + (float)(v252 * _S4)) + (float)(v250 * _S5)) + v35;
          if (!v74) {
            float v203 = v37;
          }
          char v205 = llroundf(v203);
          if (v204 < v35) {
            float v206 = v35;
          }
          else {
            float v206 = (float)((float)((float)(v251 * _S6) + (float)(v252 * _S4)) + (float)(v250 * _S5)) + v35;
          }
          BOOL v74 = v204 <= v37;
          float v207 = (float)((float)((float)(v251 * _S7) + (float)(v252 * _S20)) + (float)(v250 * _S19)) + v35;
          if (!v74) {
            float v206 = v37;
          }
          char v208 = llroundf(v206);
          if (v207 < v35) {
            float v209 = v35;
          }
          else {
            float v209 = (float)((float)((float)(v251 * _S7) + (float)(v252 * _S20)) + (float)(v250 * _S19)) + v35;
          }
          BOOL v74 = v207 <= v37;
          float v210 = (float)((float)((float)(v251 * _S23) + (float)(v252 * _S22)) + (float)(v250 * _S21)) + v35;
          if (!v74) {
            float v209 = v37;
          }
          char v211 = llroundf(v209);
          if (v210 < v35) {
            float v212 = v35;
          }
          else {
            float v212 = (float)((float)((float)(v251 * _S23) + (float)(v252 * _S22)) + (float)(v250 * _S21)) + v35;
          }
          if (v210 <= v37) {
            float v213 = v212;
          }
          else {
            float v213 = v37;
          }
          float v214 = (float)((float)(_S3 + _S4) + _S20) + _S22;
          float v215 = (float)((float)(_S0 + _S6) + _S7) + _S23;
          unsigned char *v53 = v205;
          v53[1] = v208;
          *float16x8_t v66 = v211;
          v66[1] = llroundf(v213);
          float v216 = (float)((float)(_S1 + _S5) + _S19) + _S21;
          float v217 = (float)((float)(v254 + (float)(v214 * v249)) + (float)(v215 * v248)) + (float)(v216 * v247);
          float v218 = v253;
          if (v217 <= v253)
          {
            float v218 = (float)((float)(v254 + (float)(v214 * v249)) + (float)(v215 * v248)) + (float)(v216 * v247);
            if (v217 < v259) {
              float v218 = v259;
            }
          }
          float v219 = (float)((float)(v254 + (float)(v214 * v246)) + (float)(v215 * v245)) + (float)(v216 * v243);
          *(unsigned char *)(v54 + v63) = llroundf(v218);
          float v220 = v253;
          float v28 = v239;
          float v30 = v237;
          float v31 = v258;
          if (v219 <= v253)
          {
            float v220 = v219;
            if (v219 < v259) {
              float v220 = v259;
            }
          }
          v41 += 4;
          v64 += 4;
          v53 += 2;
          v66 += 2;
          *(unsigned char *)(v54 + v63 + 1) = llroundf(v220);
          v63 += 2;
          float v33 = v256;
          float v32 = v257;
          float v34 = v255;
          float v26 = 8191.0;
          float v29 = v232;
          float v59 = v230;
          float v57 = v231;
        }
        while (v9 > v63);
      }
      unsigned int v41 = &v62[v20];
      float v42 = &v61[v21];
      float v53 = &v60[v23];
      v54 += v24;
      v8 += 2;
    }
    while (v12 > v8);
    if (v229 && v228)
    {
      uint64_t v221 = 0;
      do
      {
        if (v9)
        {
          size_t v222 = v9;
          float v223 = v25;
          float v224 = (unsigned __int16 *)v22;
          do
          {
            unsigned int v225 = *v224++;
            *v223++ = llroundf((float)v225 * 0.0038911);
            --v222;
          }
          while (v222);
        }
        v22 += v226;
        v25 += v227;
        ++v221;
      }
      while (v221 != v12);
    }
    else if (v228)
    {
      do
      {
        if (v9) {
          double result = memset(v25, 255, v9);
        }
        v25 += v227;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Mat_TRC_420vf_neon_fp16_GCD(void *result, uint64_t a2, double a3, float32x4_t a4, double a5, double a6, double a7, double a8, double a9, float32x4_t a10)
{
  uint64_t v17 = *(void *)((char *)result + 28);
  unint64_t v18 = 2 * *(unsigned __int8 *)result;
  unint64_t v19 = v17 * a2 / v18;
  unint64_t v20 = (v17 + v17 * a2) / v18;
  if (2 * v20 != 2 * v19)
  {
    unint64_t v21 = 0;
    size_t v22 = *(void *)((char *)result + 20);
    uint64_t v23 = *(void *)((char *)result + 36);
    uint64_t v24 = *(void *)((char *)result + 44) + 2 * v19;
    unint64_t v25 = 2 * v20 - 2 * v19;
    uint64_t v26 = result[14];
    unint64_t v27 = result[13] * a2;
    uint64_t v28 = result[19];
    uint64_t v29 = (void *)result[7];
    uint64_t v30 = (uint64_t *)result[8];
    uint64_t v31 = (void *)result[16];
    uint64_t v32 = (uint64_t *)result[17];
    uint64_t v33 = *v30;
    uint64_t v34 = v30[1];
    uint64_t v35 = result[15] + 2 * (v27 / v18);
    uint64_t v317 = v30[2];
    uint64_t v320 = v29[2];
    uint64_t v36 = v320 + v317 * v24 + 2 * v23;
    uint64_t v37 = *v32;
    uint64_t v318 = v32[2];
    uint64_t v319 = v31[2];
    unsigned int v38 = *(unsigned __int16 *)(v28 + 140);
    unsigned int v39 = *(unsigned __int16 *)(v28 + 142);
    unsigned int v40 = *(unsigned __int16 *)(v28 + 144);
    float v41 = (float)v38;
    *(short float *)v12.i16 = (short float)v38;
    unsigned int v42 = *(unsigned __int16 *)(v28 + 146);
    _S30 = *(_DWORD *)(v28 + 44);
    float v44 = (float)v39;
    short float v45 = (short float)v39;
    unsigned int v47 = *(unsigned __int16 *)(v28 + 148);
    float v48 = (float)v40;
    float v360 = (float)v42;
    *(short float *)v10.i16 = (short float)v40;
    unsigned int v49 = *(unsigned __int16 *)(v28 + 150);
    float v341 = (float)v47;
    float v367 = (float)v49;
    *(short float *)v13.i16 = (short float)v42;
    unsigned int v50 = *(unsigned __int16 *)(v28 + 152);
    float v359 = (float)v50;
    *(short float *)v15.i16 = (short float)v49;
    *(short float *)v16.i16 = (short float)v50;
    unsigned int v51 = *(unsigned __int8 *)(v28 + 124);
    if (v51 >= 0x11) {
      unsigned __int8 v52 = 0;
    }
    else {
      unsigned __int8 v52 = 16 - v51;
    }
    if (v35 >= 0) {
      uint64_t v53 = v35;
    }
    else {
      uint64_t v53 = v35 + 1;
    }
    uint64_t v321 = v32[1];
    uint64_t v54 = v31[1] + v321 * (v53 >> 1);
    uint64_t v55 = v28 + 164;
    float v56 = (unsigned char *)(v31[2] + v32[2] * v35 + v26);
    uint64_t v57 = *v31 + v37 * v35;
    double result = &unk_193E7D000;
    *(float *)&a3 = 8191.0 / (float)*(unsigned int *)(v28 + 128);
    _S22 = *(float *)&a3 * *(float *)v28;
    _S10 = *(float *)&a3 * *(float *)(v28 + 8);
    float v60 = *(float *)&a3 * *(float *)(v28 + 16);
    float v61 = *(float *)&a3 * *(float *)(v28 + 20);
    float v62 = *(float *)&a3 * *(float *)(v28 + 28);
    int16x8_t v63 = vdupq_lane_s16(v12, 0);
    *(short float *)&a3 = -v45;
    float16x8_t v366 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    uint16x8_t v64 = (uint16x8_t)vdupq_n_s16(-v52);
    __asm { FMOV            V0.2S, #0.25 }
    v46.i32[1] = *(_DWORD *)(v28 + 60);
    v46.i32[0] = *(_DWORD *)(v28 + 48);
    *(float32x2_t *)v11.f32 = vmul_f32(v46, _D0);
    a10.i32[1] = *(_DWORD *)(v28 + 64);
    a10.i32[0] = *(_DWORD *)(v28 + 52);
    *(float32x2_t *)a10.f32 = vmul_f32(*(float32x2_t *)a10.f32, _D0);
    float16x8_t v355 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a10), 0);
    a4.i32[1] = *(_DWORD *)(v28 + 68);
    a4.i32[0] = *(_DWORD *)(v28 + 56);
    *(float32x2_t *)a4.f32 = vmul_f32(*(float32x2_t *)a4.f32, _D0);
    float16x8_t v356 = (float16x8_t)vdupq_lane_s16(v10, 0);
    float16x8_t v357 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v11), 0);
    float16x8_t v353 = (float16x8_t)vdupq_lane_s16(v13, 0);
    float16x8_t v354 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    _S25 = v60;
    uint64_t v71 = v28 + 16548;
    *(short float *)v14.i16 = (short float)v47;
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(v14, 0);
    _S26 = v61;
    float16x8_t v352 = (float16x8_t)vdupq_lane_s16(v15, 0);
    _S27 = v62;
    float v75 = (unsigned char *)(v54 + v26);
    float v76 = (int8x8_t *)(v57 + v26);
    uint64_t v77 = v29[1];
    _ZF = v77 == 0;
    uint64_t v78 = v77 + v34 * v24 + 2 * v23;
    if (_ZF) {
      float v79 = 0;
    }
    else {
      float v79 = (char *)v78;
    }
    float v80 = (uint16x8_t *)(*v29 + v33 * v24 + 2 * v23);
    unsigned __int8 v81 = v52;
    float16x8_t v344 = (float16x8_t)vdupq_lane_s16(v16, 0);
    __asm
    {
      FCVT            H8, S22
      FCVT            H9, S27
    }
    short float v365 = _H9;
    __asm { FCVT            H9, S25 }
    short float v364 = _H9;
    __asm { FCVT            H9, S26 }
    short float v363 = _H9;
    __asm { FCVT            H9, S10 }
    short float v362 = _H9;
    float v350 = *(float *)(v28 + 36);
    __asm { FCVT            H4, S4 }
    short float v337 = _H4;
    float v348 = *(float *)(v28 + 40);
    __asm { FCVT            H4, S17 }
    short float v336 = _H4;
    float v361 = *(float *)(v28 + 44);
    __asm { FCVT            H4, S30 }
    short float v335 = _H4;
    float v346 = *(float *)(v28 + 72);
    __asm { FCVT            H4, S19 }
    short float v334 = _H4;
    float v345 = *(float *)(v28 + 76);
    __asm { FCVT            H4, S21 }
    short float v333 = _H4;
    float v343 = *(float *)(v28 + 80);
    __asm { FCVT            H4, S2 }
    short float v332 = _H4;
    float v342 = *(float *)(v28 + 84);
    __asm { FCVT            H4, S23 }
    short float v331 = _H4;
    float v349 = *(float *)(v28 + 88);
    __asm { FCVT            H4, S6 }
    float v351 = *(float *)(v28 + 92);
    __asm { FCVT            H0, S0 }
    short float v329 = _H0;
    short float v330 = _H4;
    float v347 = *(float *)(v28 + 96);
    __asm { FCVT            H0, S18 }
    short float v328 = _H0;
    float v340 = *(float *)(v28 + 100);
    __asm { FCVT            H0, S5 }
    short float v327 = _H0;
    float v339 = *(float *)(v28 + 104);
    __asm { FCVT            H0, S28 }
    short float v326 = _H0;
    float v358 = v11.f32[0];
    unint64_t v99 = a10.i64[0];
    float v325 = v11.f32[1];
    unint64_t v100 = a4.i64[0];
    uint64_t v322 = v30[1];
    uint64_t v323 = *v30;
    float v368 = _S10;
    float16x8_t v324 = (float16x8_t)v63;
    float v338 = v44;
    do
    {
      float v101 = &v80->i8[v33];
      float v102 = &v79[v34];
      float v103 = (char *)v76 + v37;
      if ((int)v22 < 8)
      {
        size_t v188 = 0;
        v187 = v75;
        float v107 = (int8x8_t *)((char *)v76 + v37);
        float v106 = &v79[v34];
        float v105 = (uint16x8_t *)((char *)v80 + v33);
      }
      else
      {
        uint64_t v104 = 0;
        float v105 = (uint16x8_t *)((char *)v80 + v33);
        float v106 = &v79[v34];
        float v107 = (int8x8_t *)((char *)v76 + v37);
        do
        {
          float16x8_t v108 = 0uLL;
          if (v79)
          {
            int16x8x2_t v369 = vld2q_s16((const __int16 *)v79);
            v79 += 32;
            float16x8_t v109 = vaddq_f16(v366, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v369.val[0], v64)));
            v369.val[0] = (int16x8_t)vaddq_f16(v366, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v369.val[1], v64)));
            float16x8_t v110 = vmulq_n_f16((float16x8_t)v369.val[0], v362);
            float16x8_t v111 = vmlaq_n_f16(vmulq_n_f16(v109, v364), (float16x8_t)v369.val[0], v363);
            float16x8_t v112 = vmulq_n_f16(v109, v365);
          }
          else
          {
            float16x8_t v112 = 0uLL;
            float16x8_t v111 = 0uLL;
            float16x8_t v110 = 0uLL;
          }
          uint16x8_t v113 = *v80++;
          float16x8_t v114 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v113, v64)), v324);
          float16x8_t v115 = vmlaq_n_f16(v110, v114, _H8);
          float16x8_t v116 = vmlaq_n_f16(v111, v114, _H8);
          float16x8_t v117 = vmlaq_n_f16(v112, v114, _H8);
          if (v106)
          {
            int16x8x2_t v370 = vld2q_s16((const __int16 *)v106);
            v106 += 32;
            float16x8_t v118 = vcvtq_f16_u16(vshlq_u16((uint16x8_t)v370.val[0], v64));
            v370.val[0] = (int16x8_t)vcvtq_f16_u16(vshlq_u16((uint16x8_t)v370.val[1], v64));
            v370.val[1] = (int16x8_t)vaddq_f16(v366, v118);
            v370.val[0] = (int16x8_t)vaddq_f16(v366, (float16x8_t)v370.val[0]);
            float16x8_t v119 = vmulq_n_f16((float16x8_t)v370.val[0], v362);
            float16x8_t v120 = vmlaq_n_f16(vmulq_n_f16((float16x8_t)v370.val[1], v364), (float16x8_t)v370.val[0], v363);
            float16x8_t v108 = vmulq_n_f16((float16x8_t)v370.val[1], v365);
          }
          else
          {
            float16x8_t v120 = 0uLL;
            float16x8_t v119 = 0uLL;
          }
          uint16x8_t v121 = *v105++;
          float16x8_t v122 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v121, v64)), v324);
          float16x8_t v123 = vmlaq_n_f16(v119, v122, _H8);
          float16x8_t v124 = vmlaq_n_f16(v120, v122, _H8);
          float16x8_t v125 = vmlaq_n_f16(v108, v122, _H8);
          v126.i64[0] = 0x9000900090009000;
          v126.i64[1] = 0x9000900090009000;
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v126));
          uint32x4_t v128 = vmovl_high_u16(v127);
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v127.i8);
          v130.i16[0] = *(_WORD *)(v55 + 2 * v129.u32[0]);
          v130.i16[1] = *(_WORD *)(v55 + 2 * v129.u32[1]);
          v130.i16[2] = *(_WORD *)(v55 + 2 * v129.u32[2]);
          v130.i16[3] = *(_WORD *)(v55 + 2 * v129.u32[3]);
          v130.i16[4] = *(_WORD *)(v55 + 2 * v128.u32[0]);
          v130.i16[5] = *(_WORD *)(v55 + 2 * v128.u32[1]);
          v130.i16[6] = *(_WORD *)(v55 + 2 * v128.u32[2]);
          v130.i16[7] = *(_WORD *)(v55 + 2 * v128.u32[3]);
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v126));
          uint32x4_t v132 = vmovl_high_u16(v131);
          uint32x4_t v133 = vmovl_u16(*(uint16x4_t *)v131.i8);
          v134.i16[0] = *(_WORD *)(v55 + 2 * v133.u32[0]);
          v134.i16[1] = *(_WORD *)(v55 + 2 * v133.u32[1]);
          v134.i16[2] = *(_WORD *)(v55 + 2 * v133.u32[2]);
          v134.i16[3] = *(_WORD *)(v55 + 2 * v133.u32[3]);
          v134.i16[4] = *(_WORD *)(v55 + 2 * v132.u32[0]);
          v134.i16[5] = *(_WORD *)(v55 + 2 * v132.u32[1]);
          v134.i16[6] = *(_WORD *)(v55 + 2 * v132.u32[2]);
          v134.i16[7] = *(_WORD *)(v55 + 2 * v132.u32[3]);
          uint16x8_t v135 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, (float16x8_t)0), v126));
          uint32x4_t v136 = vmovl_high_u16(v135);
          uint32x4_t v137 = vmovl_u16(*(uint16x4_t *)v135.i8);
          v138.i16[0] = *(_WORD *)(v55 + 2 * v137.u32[0]);
          v138.i16[1] = *(_WORD *)(v55 + 2 * v137.u32[1]);
          v138.i16[2] = *(_WORD *)(v55 + 2 * v137.u32[2]);
          v138.i16[3] = *(_WORD *)(v55 + 2 * v137.u32[3]);
          v138.i16[4] = *(_WORD *)(v55 + 2 * v136.u32[0]);
          v138.i16[5] = *(_WORD *)(v55 + 2 * v136.u32[1]);
          v138.i16[6] = *(_WORD *)(v55 + 2 * v136.u32[2]);
          v138.i16[7] = *(_WORD *)(v55 + 2 * v136.u32[3]);
          uint16x8_t v139 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v126));
          uint32x4_t v140 = vmovl_high_u16(v139);
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v139.i8);
          v123.i16[0] = *(_WORD *)(v55 + 2 * v141.u32[0]);
          v123.i16[1] = *(_WORD *)(v55 + 2 * v141.u32[1]);
          v123.i16[2] = *(_WORD *)(v55 + 2 * v141.u32[2]);
          v123.i16[3] = *(_WORD *)(v55 + 2 * v141.u32[3]);
          v123.i16[4] = *(_WORD *)(v55 + 2 * v140.u32[0]);
          v123.i16[5] = *(_WORD *)(v55 + 2 * v140.u32[1]);
          v123.i16[6] = *(_WORD *)(v55 + 2 * v140.u32[2]);
          v123.i16[7] = *(_WORD *)(v55 + 2 * v140.u32[3]);
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, (float16x8_t)0), v126));
          uint32x4_t v143 = vmovl_high_u16(v142);
          float16x8_t v144 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v142.i8);
          v144.i16[0] = *(_WORD *)(v55 + 2 * v144.u32[0]);
          v144.i16[1] = *(_WORD *)(v55 + 2 * v144.u32[1]);
          v144.i16[2] = *(_WORD *)(v55 + 2 * v144.u32[2]);
          v144.i16[3] = *(_WORD *)(v55 + 2 * v144.u32[3]);
          v144.i16[4] = *(_WORD *)(v55 + 2 * v143.u32[0]);
          v144.i16[5] = *(_WORD *)(v55 + 2 * v143.u32[1]);
          v144.i16[6] = *(_WORD *)(v55 + 2 * v143.u32[2]);
          v144.i16[7] = *(_WORD *)(v55 + 2 * v143.u32[3]);
          uint16x8_t v145 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v125, (float16x8_t)0), v126));
          uint32x4_t v146 = vmovl_high_u16(v145);
          uint32x4_t v147 = vmovl_u16(*(uint16x4_t *)v145.i8);
          v148.i16[0] = *(_WORD *)(v55 + 2 * v147.u32[0]);
          v148.i16[1] = *(_WORD *)(v55 + 2 * v147.u32[1]);
          v148.i16[2] = *(_WORD *)(v55 + 2 * v147.u32[2]);
          v148.i16[3] = *(_WORD *)(v55 + 2 * v147.u32[3]);
          v148.i16[4] = *(_WORD *)(v55 + 2 * v146.u32[0]);
          v148.i16[5] = *(_WORD *)(v55 + 2 * v146.u32[1]);
          v148.i16[6] = *(_WORD *)(v55 + 2 * v146.u32[2]);
          v148.i16[7] = *(_WORD *)(v55 + 2 * v146.u32[3]);
          float16x8_t v149 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v130, v334), v134, v333), v138, v332);
          float16x8_t v150 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v130, v331), v134, v330), v138, v329);
          float16x8_t v151 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v138, v326), v134, v327), v130, v328);
          float16x8_t v152 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v123, v334), v144, v333), v148, v332);
          float16x8_t v153 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v123, v331), v144, v330), v148, v329);
          float16x8_t v154 = vmlaq_n_f16(vmulq_n_f16(v148, v326), v144, v327);
          uint16x8_t v155 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v149, (float16x8_t)0), v126));
          uint32x4_t v156 = vmovl_high_u16(v155);
          uint32x4_t v157 = vmovl_u16(*(uint16x4_t *)v155.i8);
          v134.i16[7] = (unint64_t)v157.u32[1] >> 48;
          v134.i16[0] = *(_WORD *)(v71 + 2 * v157.u32[0]);
          v134.i16[1] = *(_WORD *)(v71 + 2 * v157.u32[1]);
          v134.i16[2] = *(_WORD *)(v71 + 2 * v157.u32[2]);
          v134.i16[3] = *(_WORD *)(v71 + 2 * v157.u32[3]);
          v134.i16[4] = *(_WORD *)(v71 + 2 * v156.u32[0]);
          v134.i16[5] = *(_WORD *)(v71 + 2 * v156.u32[1]);
          v134.i16[6] = *(_WORD *)(v71 + 2 * v156.u32[2]);
          uint16x8_t v158 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v150, (float16x8_t)0), v126));
          uint32x4_t v159 = vmovl_high_u16(v158);
          uint32x4_t v160 = vmovl_u16(*(uint16x4_t *)v158.i8);
          v138.i16[0] = *(_WORD *)(v71 + 2 * v160.u32[0]);
          v138.i16[1] = *(_WORD *)(v71 + 2 * v160.u32[1]);
          v138.i16[2] = *(_WORD *)(v71 + 2 * v160.u32[2]);
          v138.i16[3] = *(_WORD *)(v71 + 2 * v160.u32[3]);
          v138.i16[4] = *(_WORD *)(v71 + 2 * v159.u32[0]);
          v138.i16[5] = *(_WORD *)(v71 + 2 * v159.u32[1]);
          v138.i16[6] = *(_WORD *)(v71 + 2 * v159.u32[2]);
          float16x8_t v161 = (float16x8_t)vuzp1q_s16((int16x8_t)v134, (int16x8_t)v138);
          v134.i16[7] = *(_WORD *)(v71 + 2 * v156.u32[3]);
          v138.i16[7] = *(_WORD *)(v71 + 2 * v159.u32[3]);
          uint16x8_t v162 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v151, (float16x8_t)0), v126));
          uint32x4_t v163 = vmovl_high_u16(v162);
          *(void *)&long long v164 = v163.u32[2];
          *((void *)&v164 + 1) = v163.u32[3];
          long long v165 = v164;
          *(void *)&long long v164 = v163.u32[0];
          *((void *)&v164 + 1) = v163.u32[1];
          long long v166 = v164;
          int16x8_t v167 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v162.i8);
          *((void *)&v164 + 1) = v167.u32[3];
          v167.i16[7] = (unint64_t)v167.u32[1] >> 48;
          v167.i16[0] = *(_WORD *)(v71 + 2 * v167.u32[0]);
          v167.i16[1] = *(_WORD *)(v71 + 2 * v167.u32[1]);
          v167.i16[2] = *(_WORD *)(v71 + 2 * v167.u32[2]);
          v167.i16[3] = *(_WORD *)(v71 + 2 * *((void *)&v164 + 1));
          v167.i16[4] = *(_WORD *)(v71 + 2 * v166);
          v167.i16[5] = *(_WORD *)(v71 + 2 * *((void *)&v166 + 1));
          v167.i16[6] = *(_WORD *)(v71 + 2 * v165);
          float16x8_t v168 = (float16x8_t)v167;
          v168.i16[7] = *(_WORD *)(v71 + 2 * *((void *)&v165 + 1));
          uint16x8_t v169 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v152, (float16x8_t)0), v126));
          uint32x4_t v170 = vmovl_high_u16(v169);
          float16x8_t v171 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v169.i8);
          *(void *)&long long v164 = v170.u32[2];
          *((void *)&v164 + 1) = v170.u32[3];
          long long v172 = v164;
          *(void *)&long long v164 = v170.u32[0];
          *((void *)&v164 + 1) = v170.u32[1];
          long long v173 = v164;
          *((void *)&v164 + 1) = v171.u32[3];
          v171.i16[7] = (unint64_t)v171.u32[3] >> 48;
          v171.i16[0] = *(_WORD *)(v71 + 2 * v171.u32[0]);
          v171.i16[1] = *(_WORD *)(v71 + 2 * v171.u32[1]);
          v171.i16[2] = *(_WORD *)(v71 + 2 * v171.u32[2]);
          v171.i16[3] = *(_WORD *)(v71 + 2 * *((void *)&v164 + 1));
          v171.i16[4] = *(_WORD *)(v71 + 2 * v173);
          v171.i16[5] = *(_WORD *)(v71 + 2 * *((void *)&v173 + 1));
          v171.i16[6] = *(_WORD *)(v71 + 2 * v172);
          float16x8_t v174 = (__int16 *)(v71 + 2 * *((void *)&v172 + 1));
          uint16x8_t v175 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v153, (float16x8_t)0), v126));
          uint32x4_t v176 = vmovl_high_u16(v175);
          float16x8_t v177 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v175.i8);
          *(void *)&long long v164 = v176.u32[2];
          *((void *)&v164 + 1) = v176.u32[3];
          long long v178 = v164;
          *(void *)&long long v164 = v176.u32[0];
          *((void *)&v164 + 1) = v176.u32[1];
          long long v179 = v164;
          *((void *)&v164 + 1) = v177.u32[3];
          v177.i16[7] = (unint64_t)v177.u32[3] >> 48;
          v177.i16[0] = *(_WORD *)(v71 + 2 * v177.u32[0]);
          v177.i16[1] = *(_WORD *)(v71 + 2 * v177.u32[1]);
          v177.i16[2] = *(_WORD *)(v71 + 2 * v177.u32[2]);
          v177.i16[3] = *(_WORD *)(v71 + 2 * *((void *)&v164 + 1));
          v177.i16[4] = *(_WORD *)(v71 + 2 * v179);
          v177.i16[5] = *(_WORD *)(v71 + 2 * *((void *)&v179 + 1));
          v177.i16[6] = *(_WORD *)(v71 + 2 * v178);
          float16x8_t v180 = (float16x8_t)vuzp1q_s16((int16x8_t)v171, (int16x8_t)v177);
          v171.i16[7] = *v174;
          v177.i16[7] = *(_WORD *)(v71 + 2 * *((void *)&v178 + 1));
          uint16x8_t v181 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v154, v123, v328), (float16x8_t)0), v126));
          int16x8_t v182 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v181.i8);
          uint32x4_t v183 = vmovl_high_u16(v181);
          *(void *)&long long v164 = v183.u32[2];
          *((void *)&v164 + 1) = v183.u32[3];
          long long v184 = v164;
          *((void *)&v164 + 1) = v182.u32[3];
          v182.i16[7] = (unint64_t)v182.u32[3] >> 48;
          v182.i16[0] = *(_WORD *)(v71 + 2 * v182.u32[0]);
          v182.i16[1] = *(_WORD *)(v71 + 2 * v182.u32[1]);
          v182.i16[2] = *(_WORD *)(v71 + 2 * v182.u32[2]);
          v182.i16[3] = *(_WORD *)(v71 + 2 * *((void *)&v164 + 1));
          v182.i16[4] = *(_WORD *)(v71 + 2 * v183.u32[0]);
          v182.i16[5] = *(_WORD *)(v71 + 2 * v183.u32[1]);
          v182.i16[6] = *(_WORD *)(v71 + 2 * v184);
          float16x8_t v185 = (float16x8_t)v182;
          v185.i16[7] = *(_WORD *)(v71 + 2 * *((void *)&v184 + 1));
          *v76++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v356, v134, v337), v138, v336), v168, v335), v356), v72)));
          *v107++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v356, v171, v337), v177, v336), v185, v335), v356), v72)));
          int16x8_t v186 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v161, (float16x8_t)vuzp2q_s16((int16x8_t)v134, (int16x8_t)v138)), v180), (float16x8_t)vuzp2q_s16((int16x8_t)v171, (int16x8_t)v177));
          *(int8x8_t *)&v75[v104] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v353, v357, (float16x8_t)vzip1q_s16(v186, v186)), v355, (float16x8_t)vzip2q_s16(v186, v186)), v354, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v167, v167), (float16x8_t)vtrn2q_s16((int16x8_t)v168, (int16x8_t)v168)), (float16x8_t)vtrn1q_s16(v182, v182)),
                                                                   (float16x8_t)vtrn2q_s16((int16x8_t)v185, (int16x8_t)v185))), v352), v344)));
          v104 += 8;
          _S10 = v368;
        }
        while ((int)v104 < (int)v22 - 7);
        v187 = &v75[v104];
        size_t v188 = v22 & 0xFFFFFFF8;
      }
      for (; v22 > v188; float v44 = v338)
      {
        if (v79)
        {
          float v189 = (float)(*(unsigned __int16 *)v79 >> v81) - v44;
          float v190 = (float)(*((unsigned __int16 *)v79 + 1) >> v81) - v44;
          float16x8_t v191 = (unsigned __int16 *)(v79 + 4);
          float v192 = _S10 * v190;
          float v193 = (float)(_S26 * v190) + (float)(v189 * _S25);
          float v194 = _S27 * v189;
        }
        else
        {
          float16x8_t v191 = 0;
          float v194 = 0.0;
          float v193 = 0.0;
          float v192 = 0.0;
        }
        float v195 = _S22 * (float)((float)(v80->u16[0] >> v81) - v41);
        float v196 = v192 + v195;
        BOOL v197 = (float)(v192 + v195) <= 8191.0;
        float v198 = 8191.0;
        if (v197)
        {
          float v198 = v196;
          if (v196 < 0.0) {
            float v198 = 0.0;
          }
        }
        float v199 = v193 + v195;
        float v200 = 8191.0;
        if (v199 <= 8191.0)
        {
          float v200 = v199;
          if (v199 < 0.0) {
            float v200 = 0.0;
          }
        }
        float v201 = v194 + v195;
        float v202 = 8191.0;
        if (v201 <= 8191.0)
        {
          float v202 = v201;
          if (v201 < 0.0) {
            float v202 = 0.0;
          }
        }
        if (v191)
        {
          float v203 = (float)(*v191 >> v81) - v44;
          float v204 = (float)(v191[1] >> v81) - v44;
          float v79 = (char *)(v191 + 2);
          float v205 = _S10 * v204;
          float v206 = (float)(_S26 * v204) + (float)(v203 * _S25);
          float v207 = _S27 * v203;
        }
        else
        {
          float v79 = 0;
          float v207 = 0.0;
          float v206 = 0.0;
          float v205 = 0.0;
        }
        float v208 = _S22 * (float)((float)(v80->u16[1] >> v81) - v41);
        float v209 = v205 + v208;
        float v210 = 8191.0;
        float v211 = 8191.0;
        if (v209 <= 8191.0)
        {
          float v211 = v209;
          if (v209 < 0.0) {
            float v211 = 0.0;
          }
        }
        float v212 = v206 + v208;
        float v213 = 8191.0;
        if (v212 <= 8191.0)
        {
          float v213 = v212;
          if (v212 < 0.0) {
            float v213 = 0.0;
          }
        }
        float v214 = v207 + v208;
        if (v214 <= 8191.0)
        {
          float v210 = v214;
          if (v214 < 0.0) {
            float v210 = 0.0;
          }
        }
        if (v106)
        {
          float v215 = (float)(*(unsigned __int16 *)v106 >> v81) - v44;
          float v216 = (float)(*((unsigned __int16 *)v106 + 1) >> v81) - v44;
          float v217 = (unsigned __int16 *)(v106 + 4);
          float v218 = _S10 * v216;
          float v219 = (float)(_S26 * v216) + (float)(v215 * _S25);
          float v220 = _S27 * v215;
        }
        else
        {
          float v217 = 0;
          float v220 = 0.0;
          float v219 = 0.0;
          float v218 = 0.0;
        }
        float v221 = _S22 * (float)((float)(v105->u16[0] >> v81) - v41);
        float v222 = v218 + v221;
        float v223 = 8191.0;
        float v224 = 8191.0;
        if (v222 <= 8191.0)
        {
          float v224 = v222;
          if (v222 < 0.0) {
            float v224 = 0.0;
          }
        }
        float v225 = v219 + v221;
        BOOL v197 = (float)(v219 + v221) <= 8191.0;
        float v226 = 8191.0;
        if (v197)
        {
          float v226 = v225;
          if (v225 < 0.0) {
            float v226 = 0.0;
          }
        }
        float v227 = v220 + v221;
        if (v227 <= 8191.0)
        {
          float v223 = v227;
          if (v227 < 0.0) {
            float v223 = 0.0;
          }
        }
        if (v217)
        {
          float v228 = (float)(*v217 >> v81) - v44;
          float v229 = (float)(v217[1] >> v81) - v44;
          float v106 = (char *)(v217 + 2);
          float v230 = _S10 * v229;
          float v231 = (float)(_S26 * v229) + (float)(v228 * _S25);
          float v232 = _S27 * v228;
        }
        else
        {
          float v106 = 0;
          float v232 = 0.0;
          float v231 = 0.0;
          float v230 = 0.0;
        }
        float v233 = _S22 * (float)((float)(v105->u16[1] >> v81) - v41);
        float v234 = v230 + v233;
        float v235 = 8191.0;
        if (v234 <= 8191.0)
        {
          float v235 = v234;
          if (v234 < 0.0) {
            float v235 = 0.0;
          }
        }
        float v236 = _S27;
        float v237 = v231 + v233;
        BOOL v197 = (float)(v231 + v233) <= 8191.0;
        float v238 = 8191.0;
        if (v197)
        {
          float v238 = v237;
          if (v237 < 0.0) {
            float v238 = 0.0;
          }
        }
        float v239 = _S26;
        float v240 = v232 + v233;
        BOOL v197 = (float)(v232 + v233) <= 8191.0;
        float v241 = 8191.0;
        if (v197)
        {
          float v241 = v240;
          if (v240 < 0.0) {
            float v241 = 0.0;
          }
        }
        _H4 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v198, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        _H17 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v200, 0.0), 8191.0)));
        __asm { FCVT            S17, H17 }
        _H18 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v202, 0.0), 8191.0)));
        __asm { FCVT            S18, H18 }
        _H19 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v211, 0.0), 8191.0)));
        __asm { FCVT            S19, H19 }
        _H21 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v213, 0.0), 8191.0)));
        _H20 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v210, 0.0), 8191.0)));
        __asm
        {
          FCVT            S21, H21
          FCVT            S20, H20
        }
        _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v224, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        _H7 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v226, 0.0), 8191.0)));
        __asm { FCVT            S7, H7 }
        _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        _H23 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v235, 0.0), 8191.0)));
        __asm { FCVT            S23, H23 }
        _H11 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v238, 0.0), 8191.0)));
        __asm { FCVT            S11, H11 }
        unsigned int v264 = llroundf(fminf(fmaxf(v241, 0.0), 8191.0));
        float v265 = (float)((float)(v345 * _S17) + (float)(_S4 * v346)) + (float)(_S18 * v343);
        float v266 = (float)((float)(v349 * _S17) + (float)(_S4 * v342)) + (float)(_S18 * v351);
        _S17 = (float)((float)(v340 * _S17) + (float)(_S4 * v347)) + (float)(_S18 * v339);
        float v268 = (float)((float)(v345 * _S21) + (float)(_S19 * v346)) + (float)(_S20 * v343);
        float v269 = (float)((float)(v349 * _S21) + (float)(_S19 * v342)) + (float)(_S20 * v351);
        _S19 = (float)((float)(v340 * _S21) + (float)(_S19 * v347)) + (float)(_S20 * v339);
        _S20 = (float)((float)(v345 * _S7) + (float)(_S1 * v346)) + (float)(_S0 * v343);
        float v272 = (float)((float)(v349 * _S7) + (float)(_S1 * v342)) + (float)(_S0 * v351);
        _S26 = (float)((float)(v340 * _S7) + (float)(_S1 * v347)) + (float)(_S0 * v339);
        _S1 = (float)(v349 * _S11) + (float)(_S23 * v342);
        float v275 = (float)(v340 * _S11) + (float)(_S23 * v347);
        LOWORD(_S7) = *(_WORD *)(v55 + 2 * v264);
        __asm { FCVT            S7, H7 }
        _S23 = (float)((float)(v345 * _S11) + (float)(_S23 * v346)) + (float)(_S7 * v343);
        float v278 = _S1 + (float)(_S7 * v351);
        _S28 = v275 + (float)(_S7 * v339);
        LOWORD(_S0) = *(_WORD *)(v71 + 2 * llroundf(fminf(fmaxf(v265, 0.0), 8191.0)));
        __asm { FCVT            S4, H0 }
        LOWORD(_S0) = *(_WORD *)(v71 + 2 * llroundf(fminf(fmaxf(v266, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        LOWORD(_S1) = *(_WORD *)(v71 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        LOWORD(_S7) = *(_WORD *)(v71 + 2 * llroundf(fminf(fmaxf(v268, 0.0), 8191.0)));
        __asm { FCVT            S7, H7 }
        LOWORD(_S17) = *(_WORD *)(v71 + 2 * llroundf(fminf(fmaxf(v269, 0.0), 8191.0)));
        LOWORD(_S19) = *(_WORD *)(v71 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
        __asm
        {
          FCVT            S18, H17
          FCVT            S17, H19
        }
        LOWORD(_S19) = *(_WORD *)(v71 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
        unsigned int v286 = llroundf(fminf(fmaxf(v272, 0.0), 8191.0));
        __asm { FCVT            S21, H19 }
        LOWORD(_S19) = *(_WORD *)(v71 + 2 * v286);
        __asm { FCVT            S19, H19 }
        LOWORD(_S20) = *(_WORD *)(v71 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
        __asm { FCVT            S20, H20 }
        LOWORD(_S23) = *(_WORD *)(v71 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
        __asm { FCVT            S23, H23 }
        LOWORD(_S26) = *(_WORD *)(v71 + 2 * llroundf(fminf(fmaxf(v278, 0.0), 8191.0)));
        LOWORD(_S28) = *(_WORD *)(v71 + 2 * llroundf(fminf(fmaxf(_S28, 0.0), 8191.0)));
        __asm
        {
          FCVT            S26, H26
          FCVT            S28, H28
        }
        float v293 = (float)((float)((float)(v348 * _S0) + (float)(v350 * _S4)) + (float)(v361 * _S1)) + v48;
        if (v293 < v48) {
          float v294 = v48;
        }
        else {
          float v294 = (float)((float)((float)(v348 * _S0) + (float)(v350 * _S4)) + (float)(v361 * _S1)) + v48;
        }
        BOOL v197 = v293 <= v341;
        float v295 = (float)((float)((float)(v348 * _S18) + (float)(v350 * _S7)) + (float)(v361 * _S17)) + v48;
        if (!v197) {
          float v294 = v341;
        }
        __int8 v296 = llroundf(v294);
        if (v295 < v48) {
          float v297 = v48;
        }
        else {
          float v297 = (float)((float)((float)(v348 * _S18) + (float)(v350 * _S7)) + (float)(v361 * _S17)) + v48;
        }
        BOOL v197 = v295 <= v341;
        float v298 = (float)((float)((float)(v348 * _S19) + (float)(v350 * _S21)) + (float)(v361 * _S20)) + v48;
        if (!v197) {
          float v297 = v341;
        }
        __int8 v299 = llroundf(v297);
        if (v298 < v48) {
          float v300 = v48;
        }
        else {
          float v300 = (float)((float)((float)(v348 * _S19) + (float)(v350 * _S21)) + (float)(v361 * _S20)) + v48;
        }
        BOOL v197 = v298 <= v341;
        float v301 = (float)((float)((float)(v348 * _S26) + (float)(v350 * _S23)) + (float)(v361 * _S28)) + v48;
        if (!v197) {
          float v300 = v341;
        }
        __int8 v302 = llroundf(v300);
        if (v301 < v48) {
          float v303 = v48;
        }
        else {
          float v303 = (float)((float)((float)(v348 * _S26) + (float)(v350 * _S23)) + (float)(v361 * _S28)) + v48;
        }
        if (v301 <= v341) {
          float v304 = v303;
        }
        else {
          float v304 = v341;
        }
        float v305 = (float)((float)(_S4 + _S7) + _S21) + _S23;
        float v306 = (float)((float)(_S0 + _S18) + _S19) + _S26;
        v76->i8[0] = v296;
        v76->i8[1] = v299;
        v107->i8[0] = v302;
        v107->i8[1] = llroundf(v304);
        float v307 = (float)((float)(_S1 + _S17) + _S20) + _S28;
        float v308 = (float)((float)(v360 + (float)(v305 * v358)) + (float)(v306 * *(float *)&v99))
             + (float)(v307 * *(float *)&v100);
        float v309 = v359;
        if (v308 <= v359)
        {
          float v309 = (float)((float)(v360 + (float)(v305 * v358)) + (float)(v306 * *(float *)&v99))
               + (float)(v307 * *(float *)&v100);
          if (v308 < v367) {
            float v309 = v367;
          }
        }
        float v310 = (float)((float)(v360 + (float)(v305 * v325)) + (float)(v306 * *((float *)&v99 + 1)))
             + (float)(v307 * *((float *)&v100 + 1));
        unsigned char *v187 = llroundf(v309);
        float v311 = v359;
        _S10 = v368;
        _S26 = v239;
        if (v310 <= v359)
        {
          float v311 = v310;
          if (v310 < v367) {
            float v311 = v367;
          }
        }
        v188 += 2;
        float v80 = (uint16x8_t *)((char *)v80 + 4);
        float v105 = (uint16x8_t *)((char *)v105 + 4);
        v187[1] = llroundf(v311);
        float v76 = (int8x8_t *)((char *)v76 + 2);
        float v107 = (int8x8_t *)((char *)v107 + 2);
        v187 += 2;
        _S25 = v60;
        _S27 = v236;
      }
      uint64_t v34 = v322;
      uint64_t v33 = v323;
      float v80 = (uint16x8_t *)&v101[v323];
      float v79 = &v102[v322];
      float v76 = (int8x8_t *)&v103[v37];
      v75 += v321;
      v21 += 2;
    }
    while (v25 > v21);
    if (v320 && v319)
    {
      uint64_t v312 = 0;
      do
      {
        if (v22)
        {
          size_t v313 = v22;
          v314 = v56;
          float v315 = (unsigned __int16 *)v36;
          do
          {
            unsigned int v316 = *v315++;
            *v314++ = llroundf((float)v316 * 0.0038911);
            --v313;
          }
          while (v313);
        }
        v36 += v317;
        v56 += v318;
        ++v312;
      }
      while (v312 != v25);
    }
    else if (v319)
    {
      do
      {
        if (v22) {
          double result = memset(v56, 255, v22);
        }
        v56 += v318;
        --v25;
      }
      while (v25);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Mat_TRC_420vf_GCD(void *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4 = *(void *)((char *)result + 28);
  unint64_t v5 = 2 * *(unsigned __int8 *)result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    size_t v9 = *(void *)((char *)result + 20);
    uint64_t v10 = *(void *)((char *)result + 36);
    uint64_t v11 = *(void *)((char *)result + 44) + 2 * v6;
    unint64_t v12 = 2 * v7 - 2 * v6;
    uint64_t v13 = result[14];
    uint64_t v14 = (void *)result[16];
    uint64_t v15 = result[15] + 2 * (result[13] * a2 / v5);
    uint64_t v16 = result[19];
    uint64_t v17 = (void *)result[7];
    uint64_t v18 = (uint64_t *)result[8];
    uint64_t v19 = (uint64_t *)result[17];
    uint64_t v20 = *v18;
    uint64_t v21 = v18[1];
    uint64_t v193 = v18[2];
    uint64_t v195 = v17[2];
    uint64_t v22 = v195 + v193 * v11 + 2 * v10;
    uint64_t v23 = *v19;
    uint64_t v24 = v19[1];
    uint64_t v25 = v19[2];
    uint64_t v194 = v14[2];
    uint64_t v26 = (unsigned char *)(v194 + v25 * v15 + v13);
    *(float *)&unsigned int v27 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    float v28 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    float v29 = (float)LODWORD(a4);
    float v30 = *(float *)&v27 * *(float *)v16;
    float v31 = *(float *)&v27 * *(float *)(v16 + 8);
    float v32 = *(float *)&v27 * *(float *)(v16 + 16);
    float v33 = *(float *)&v27 * *(float *)(v16 + 20);
    float v34 = *(float *)&v27 * *(float *)(v16 + 28);
    LOWORD(v27) = *(_WORD *)(v16 + 144);
    float v35 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 146);
    float v36 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 148);
    float v37 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 150);
    *(float *)&unsigned int v38 = (float)v27;
    float v213 = *(float *)&v38;
    LOWORD(v38) = *(_WORD *)(v16 + 152);
    float v207 = (float)v38;
    float v208 = v36;
    float v205 = *(float *)(v16 + 40);
    float v206 = *(float *)(v16 + 36);
    float v203 = *(float *)(v16 + 48) * 0.25;
    float v204 = *(float *)(v16 + 44);
    float v201 = *(float *)(v16 + 56) * 0.25;
    float v202 = *(float *)(v16 + 52) * 0.25;
    float v199 = *(float *)(v16 + 64) * 0.25;
    float v200 = *(float *)(v16 + 60) * 0.25;
    float v197 = *(float *)(v16 + 68) * 0.25;
    float v198 = *(float *)(v16 + 72);
    float v39 = *(float *)(v16 + 80);
    float v196 = *(float *)(v16 + 76);
    float v40 = *(float *)(v16 + 84);
    float v41 = *(float *)(v16 + 88);
    float v42 = *(float *)(v16 + 92);
    float v43 = *(float *)(v16 + 96);
    float v44 = *(float *)(v16 + 100);
    float v45 = *(float *)(v16 + 104);
    double result = (void *)(v16 + 164);
    uint64_t v46 = v17[1];
    unsigned int v47 = (char *)(*v17 + *v18 * v11 + 2 * v10);
    uint64_t v48 = v46 + v21 * v11 + 2 * v10;
    uint64_t v49 = v16 + 16548;
    if (v46) {
      unsigned int v50 = (char *)v48;
    }
    else {
      unsigned int v50 = 0;
    }
    unsigned int v51 = *(unsigned __int8 *)(v16 + 124);
    uint64_t v52 = v14[1];
    uint64_t v53 = (unsigned char *)(*v14 + v23 * v15 + v13);
    if (v51 >= 0x11) {
      char v54 = 0;
    }
    else {
      char v54 = 16 - v51;
    }
    uint64_t v55 = v52 + v19[1] * (v15 / 2) + v13;
    char v56 = v54;
    float v211 = v32;
    float v212 = v31;
    float v209 = v34;
    float v210 = v33;
    do
    {
      uint64_t v57 = &v53[v23];
      float v58 = &v50[v21];
      float v59 = &v47[v20];
      if (v9)
      {
        size_t v60 = 0;
        float v61 = &v47[v20];
        float v62 = &v50[v21];
        int16x8_t v63 = &v53[v23];
        do
        {
          if (v50)
          {
            float v64 = (float)(*(unsigned __int16 *)v50 >> v56) - v29;
            float v65 = (float)(*((unsigned __int16 *)v50 + 1) >> v56) - v29;
            v50 += 4;
            float v66 = v31 * v65;
            float v67 = (float)(v33 * v65) + (float)(v64 * v32);
            float v68 = v34 * v64;
          }
          else
          {
            float v68 = 0.0;
            float v67 = 0.0;
            float v66 = 0.0;
          }
          float v69 = v30 * (float)((float)(*(unsigned __int16 *)v47 >> v56) - v28);
          float v70 = v66 + v69;
          BOOL v71 = (float)(v66 + v69) <= 8191.0;
          float v72 = 8191.0;
          if (v71)
          {
            float v72 = v70;
            if (v70 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v67 + v69;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v68 + v69;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          if (v50)
          {
            float v77 = (float)(*(unsigned __int16 *)v50 >> v56) - v29;
            float v78 = (float)(*((unsigned __int16 *)v50 + 1) >> v56) - v29;
            v50 += 4;
            float v79 = v31 * v78;
            float v80 = (float)(v33 * v78) + (float)(v77 * v32);
            float v81 = v34 * v77;
          }
          else
          {
            float v81 = 0.0;
            float v80 = 0.0;
            float v79 = 0.0;
          }
          float v82 = v30 * (float)((float)(*((unsigned __int16 *)v47 + 1) >> v56) - v28);
          float v83 = v79 + v82;
          float v84 = 8191.0;
          float v85 = 8191.0;
          if (v83 <= 8191.0)
          {
            float v85 = v83;
            if (v83 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = 8191.0;
          if ((float)(v80 + v82) <= 8191.0)
          {
            float v86 = v80 + v82;
            if ((float)(v80 + v82) < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v81 + v82;
          if (v87 <= 8191.0)
          {
            float v84 = v87;
            if (v87 < 0.0) {
              float v84 = 0.0;
            }
          }
          if (v62)
          {
            float v88 = (float)(*(unsigned __int16 *)v62 >> v56) - v29;
            float v89 = (float)(*((unsigned __int16 *)v62 + 1) >> v56) - v29;
            v62 += 4;
            float v90 = v31 * v89;
            float v91 = (float)(v33 * v89) + (float)(v88 * v32);
            float v92 = v34 * v88;
          }
          else
          {
            float v92 = 0.0;
            float v91 = 0.0;
            float v90 = 0.0;
          }
          float v93 = v30 * (float)((float)(*(unsigned __int16 *)v61 >> v56) - v28);
          float v94 = v90 + v93;
          float v95 = 8191.0;
          float v96 = 8191.0;
          if (v94 <= 8191.0)
          {
            float v96 = v94;
            if (v94 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v91 + v93;
          BOOL v71 = (float)(v91 + v93) <= 8191.0;
          float v98 = 8191.0;
          if (v71)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          float v99 = v92 + v93;
          if (v99 <= 8191.0)
          {
            float v95 = v99;
            if (v99 < 0.0) {
              float v95 = 0.0;
            }
          }
          if (v62)
          {
            float v100 = (float)(*(unsigned __int16 *)v62 >> v56) - v29;
            float v101 = (float)(*((unsigned __int16 *)v62 + 1) >> v56) - v29;
            v62 += 4;
            float v102 = v31 * v101;
            float v103 = (float)(v33 * v101) + (float)(v100 * v32);
            float v104 = v34 * v100;
          }
          else
          {
            float v104 = 0.0;
            float v103 = 0.0;
            float v102 = 0.0;
          }
          float v105 = v28;
          float v106 = v30 * (float)((float)(*((unsigned __int16 *)v61 + 1) >> v56) - v28);
          float v107 = v102 + v106;
          float v108 = 8191.0;
          if (v107 <= 8191.0)
          {
            float v108 = v107;
            if (v107 < 0.0) {
              float v108 = 0.0;
            }
          }
          float v109 = v103 + v106;
          BOOL v71 = (float)(v103 + v106) <= 8191.0;
          float v110 = 8191.0;
          if (v71)
          {
            float v110 = v109;
            if (v109 < 0.0) {
              float v110 = 0.0;
            }
          }
          float v111 = v104 + v106;
          float v112 = 8191.0;
          if (v111 <= 8191.0)
          {
            float v112 = v111;
            if (v111 < 0.0) {
              float v112 = 0.0;
            }
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H27 = *((_WORD *)result + llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H25
            FCVT            S27, H27
          }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H17 = *((_WORD *)result + llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H21 = *((_WORD *)result + llroundf(fminf(fmaxf(v108, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          unsigned int v139 = llroundf(fminf(fmaxf(v112, 0.0), 8191.0));
          _S1 = (float)((float)(v196 * _S3) + (float)(_S0 * v198)) + (float)(_S6 * v39);
          float v141 = (float)((float)(v41 * _S3) + (float)(_S0 * v40)) + (float)(_S6 * v42);
          _S3 = (float)((float)(v44 * _S3) + (float)(_S0 * v43)) + (float)(_S6 * v45);
          float v143 = (float)((float)(v196 * _S25) + (float)(_S24 * v198)) + (float)(_S27 * v39);
          float v144 = (float)((float)(v41 * _S25) + (float)(_S24 * v40)) + (float)(_S27 * v42);
          float v145 = (float)((float)(v44 * _S25) + (float)(_S24 * v43)) + (float)(_S27 * v45);
          float v146 = (float)((float)(v196 * _S5) + (float)(_S4 * v198)) + (float)(_S17 * v39);
          float v147 = (float)((float)(v41 * _S5) + (float)(_S4 * v40)) + (float)(_S17 * v42);
          float v148 = (float)((float)(v44 * _S5) + (float)(_S4 * v43)) + (float)(_S17 * v45);
          _S0 = (float)(v196 * _S7) + (float)(_S21 * v198);
          float v150 = (float)(v41 * _S7) + (float)(_S21 * v40);
          float v151 = (float)(v44 * _S7) + (float)(_S21 * v43);
          LOWORD(_S7) = *((_WORD *)result + v139);
          __asm { FCVT            S7, H7 }
          _S21 = _S0 + (float)(_S7 * v39);
          float v154 = v150 + (float)(_S7 * v42);
          float v155 = v151 + (float)(_S7 * v45);
          LOWORD(_S0) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S5, H0 }
          LOWORD(_S0) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          __asm { FCVT            S6, H1 }
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H1
            FCVT            S17, H3
          }
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          __asm { FCVT            S7, H3 }
          LOWORD(_S3) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          __asm { FCVT            S25, H3 }
          LOWORD(_S3) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S21) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H21
            FCVT            S19, H19
          }
          float v169 = (float)((float)((float)(v205 * _S0) + (float)(v206 * _S5)) + (float)(v204 * _S4)) + v35;
          if (v169 < v35) {
            float v170 = v35;
          }
          else {
            float v170 = (float)((float)((float)(v205 * _S0) + (float)(v206 * _S5)) + (float)(v204 * _S4)) + v35;
          }
          BOOL v71 = v169 <= v37;
          float v171 = (float)((float)((float)(v205 * _S24) + (float)(v206 * _S6)) + (float)(v204 * _S17)) + v35;
          if (!v71) {
            float v170 = v37;
          }
          char v172 = llroundf(v170);
          if (v171 < v35) {
            float v173 = v35;
          }
          else {
            float v173 = (float)((float)((float)(v205 * _S24) + (float)(v206 * _S6)) + (float)(v204 * _S17)) + v35;
          }
          BOOL v71 = v171 <= v37;
          float v174 = (float)((float)((float)(v205 * _S7) + (float)(v206 * _S1)) + (float)(v204 * _S25)) + v35;
          if (!v71) {
            float v173 = v37;
          }
          char v175 = llroundf(v173);
          if (v174 < v35) {
            float v176 = v35;
          }
          else {
            float v176 = (float)((float)((float)(v205 * _S7) + (float)(v206 * _S1)) + (float)(v204 * _S25)) + v35;
          }
          BOOL v71 = v174 <= v37;
          float v177 = (float)((float)((float)(v205 * _S20) + (float)(v206 * _S3)) + (float)(v204 * _S19)) + v35;
          if (!v71) {
            float v176 = v37;
          }
          char v178 = llroundf(v176);
          if (v177 < v35) {
            float v179 = v35;
          }
          else {
            float v179 = (float)((float)((float)(v205 * _S20) + (float)(v206 * _S3)) + (float)(v204 * _S19)) + v35;
          }
          if (v177 <= v37) {
            float v180 = v179;
          }
          else {
            float v180 = v37;
          }
          float v181 = (float)((float)(_S5 + _S6) + _S1) + _S3;
          float v182 = (float)((float)(_S0 + _S24) + _S7) + _S20;
          unsigned char *v53 = v172;
          v53[1] = v175;
          *int16x8_t v63 = v178;
          v63[1] = llroundf(v180);
          float v183 = (float)((float)(_S4 + _S17) + _S25) + _S19;
          float v184 = (float)((float)(v208 + (float)(v181 * v203)) + (float)(v182 * v202)) + (float)(v183 * v201);
          float v185 = v207;
          if (v184 <= v207)
          {
            float v185 = (float)((float)(v208 + (float)(v181 * v203)) + (float)(v182 * v202)) + (float)(v183 * v201);
            if (v184 < v213) {
              float v185 = v213;
            }
          }
          float v186 = (float)((float)(v208 + (float)(v181 * v200)) + (float)(v182 * v199)) + (float)(v183 * v197);
          *(unsigned char *)(v55 + v60) = llroundf(v185);
          float v187 = v207;
          float v28 = v105;
          float v32 = v211;
          float v31 = v212;
          if (v186 <= v207)
          {
            float v187 = v186;
            if (v186 < v213) {
              float v187 = v213;
            }
          }
          v47 += 4;
          v61 += 4;
          v53 += 2;
          v63 += 2;
          *(unsigned char *)(v55 + v60 + 1) = llroundf(v187);
          v60 += 2;
          float v34 = v209;
          float v33 = v210;
        }
        while (v9 > v60);
      }
      unsigned int v47 = &v59[v20];
      unsigned int v50 = &v58[v21];
      uint64_t v53 = &v57[v23];
      v55 += v24;
      v8 += 2;
    }
    while (v12 > v8);
    if (v195 && v194)
    {
      uint64_t v188 = 0;
      do
      {
        if (v9)
        {
          size_t v189 = v9;
          float v190 = v26;
          float16x8_t v191 = (unsigned __int16 *)v22;
          do
          {
            unsigned int v192 = *v191++;
            *v190++ = llroundf((float)v192 * 0.0038911);
            --v189;
          }
          while (v189);
        }
        v22 += v193;
        v26 += v25;
        ++v188;
      }
      while (v188 != v12);
    }
    else if (v194)
    {
      do
      {
        if (v9) {
          double result = memset(v26, 255, v9);
        }
        v26 += v25;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_420vf_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_rgb_420vf_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    size_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 36);
    uint64_t v12 = *(void *)(result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = *((void *)result + 14);
    uint64_t v15 = (uint64_t *)*((void *)result + 16);
    uint64_t v16 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v17 = *((void *)result + 19);
    uint64_t v18 = (void *)*((void *)result + 7);
    uint64_t v19 = (uint64_t *)*((void *)result + 8);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    uint64_t v25 = v24 + v23 * v12 + 2 * v11;
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    unsigned int v30 = *(unsigned __int16 *)(v17 + 140);
    unsigned int v31 = *(unsigned __int16 *)(v17 + 142);
    unsigned int v32 = *(unsigned __int16 *)(v17 + 144);
    unsigned int v33 = *(unsigned __int16 *)(v17 + 146);
    unsigned int v34 = *(unsigned __int16 *)(v17 + 148);
    unsigned int v35 = *(unsigned __int16 *)(v17 + 150);
    unsigned int v36 = *(unsigned __int16 *)(v17 + 152);
    _S0 = *(float *)(v17 + 36);
    _S1 = *(float *)(v17 + 40);
    _S2 = *(float *)(v17 + 44);
    v40.i32[0] = *(_DWORD *)(v17 + 48);
    v2.i32[0] = *(_DWORD *)(v17 + 52);
    v41.i32[0] = *(_DWORD *)(v17 + 56);
    float v42 = (float)v30;
    *(short float *)v3.i16 = (short float)v30;
    float v43 = (float)v31;
    float v44 = (unsigned char *)(v29 + v28 * v16 + v14);
    float v45 = (float)*(unsigned int *)(v17 + 136) / (float)*(unsigned int *)(v17 + 128);
    _S5 = v45 * *(float *)v17;
    _S6 = v45 * *(float *)(v17 + 8);
    _S7 = v45 * *(float *)(v17 + 16);
    _S16 = v45 * *(float *)(v17 + 20);
    _S17 = v45 * *(float *)(v17 + 28);
    float v51 = (float)v32;
    float v188 = (float)v33;
    float v52 = (float)v34;
    float v195 = (float)v35;
    _Q22 = (float32x4_t)vdupq_lane_s16(v3, 0);
    float16x8_t v187 = (float16x8_t)_Q22;
    __asm { FCVT            H8, S5 }
    *(short float *)_Q22.i16 = -(short float)v31;
    float16x8_t v58 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q22.f32, 0);
    __asm { FCVT            H9, S17 }
    short float v194 = _H9;
    __asm { FCVT            H9, S7 }
    short float v193 = _H9;
    __asm { FCVT            H9, S16 }
    short float v192 = _H9;
    v40.i32[1] = *(_DWORD *)(v17 + 60);
    __asm { FMOV            V22.2S, #0.25 }
    *(float32x2_t *)v4.f32 = vmul_f32(v40, *(float32x2_t *)_Q22.f32);
    float16x8_t v185 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    v2.i32[1] = *(_DWORD *)(v17 + 64);
    *(float32x2_t *)v2.f32 = vmul_f32(*(float32x2_t *)v2.f32, *(float32x2_t *)_Q22.f32);
    float16x8_t v184 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v2), 0);
    v41.i32[1] = *(_DWORD *)(v17 + 68);
    *(float32x2_t *)_Q22.f32 = vmul_f32(v41, *(float32x2_t *)_Q22.f32);
    int16x4_t v63 = (int16x4_t)vcvt_f16_f32(_Q22);
    __asm { FCVT            H9, S6 }
    short float v191 = _H9;
    int32x4_t v65 = vdupq_lane_s32((int32x2_t)v63, 0);
    *(short float *)v63.i16 = (short float)v32;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(v63, 0);
    *(short float *)v63.i16 = (short float)v33;
    int16x8_t v67 = vdupq_lane_s16(v63, 0);
    float16x8_t v182 = (float16x8_t)v67;
    float16x8_t v183 = (float16x8_t)v65;
    *(short float *)v67.i16 = (short float)v34;
    int16x8_t v68 = vdupq_lane_s16(*(int16x4_t *)v67.i8, 0);
    *(short float *)v67.i16 = (short float)v35;
    int16x8_t v69 = vdupq_lane_s16(*(int16x4_t *)v67.i8, 0);
    float16x8_t v180 = (float16x8_t)v69;
    float16x8_t v181 = (float16x8_t)v68;
    *(short float *)v69.i16 = (short float)v36;
    float16x8_t v179 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v69.i8, 0);
    unsigned int v70 = *(unsigned __int8 *)(v17 + 124);
    unsigned __int8 v71 = 16 - v70;
    if (v70 >= 0x11) {
      unsigned __int8 v71 = 0;
    }
    if (v16 >= 0) {
      uint64_t v72 = v16;
    }
    else {
      uint64_t v72 = v16 + 1;
    }
    uint64_t v73 = *v15;
    float v74 = (unsigned char *)(v15[1] + v27 * (v72 >> 1) + v14);
    double result = (unsigned __int8 *)(v73 + v26 * v16 + v14);
    float v77 = v18;
    uint64_t v75 = *v18;
    uint64_t v76 = v77[1];
    if (v76) {
      float v78 = (const __int16 *)(v76 + v22 * v12 + 2 * v11);
    }
    else {
      float v78 = 0;
    }
    float v79 = (uint16x8_t *)(v75 + v21 * v12 + 2 * v11);
    unsigned __int8 v80 = v71;
    __asm { FCVT            H9, S0 }
    short float v178 = _H9;
    __asm { FCVT            H9, S1 }
    short float v177 = _H9;
    __asm { FCVT            H9, S2 }
    short float v176 = _H9;
    float v186 = v4.f32[0];
    uint64_t v84 = v2.i64[0];
    float v175 = v4.f32[1];
    float v85 = (float)v36;
    uint64_t v86 = _Q22.i64[0];
    uint16x8_t v87 = (uint16x8_t)vdupq_n_s16(-v71);
    float v189 = _S7;
    float v190 = _S6;
    do
    {
      float v88 = &v79->i8[v21];
      float v89 = (char *)v78 + v22;
      float v90 = &result[v26];
      if ((int)v10 < 8)
      {
        size_t v117 = 0;
        float16x8_t v116 = v74;
        float v94 = (int8x8_t *)&result[v26];
        float v93 = (const __int16 *)((char *)v78 + v22);
        float v92 = (uint16x8_t *)((char *)v79 + v21);
      }
      else
      {
        uint64_t v91 = 0;
        float v92 = (uint16x8_t *)((char *)v79 + v21);
        float v93 = (const __int16 *)((char *)v78 + v22);
        float v94 = (int8x8_t *)&result[v26];
        do
        {
          float16x8_t v95 = 0uLL;
          if (v78)
          {
            int16x8x2_t v197 = vld2q_s16(v78);
            v78 += 16;
            float16x8_t v96 = vaddq_f16(v58, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v197.val[0], v87)));
            v197.val[0] = (int16x8_t)vaddq_f16(v58, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v197.val[1], v87)));
            float16x8_t v97 = vmulq_n_f16((float16x8_t)v197.val[0], v191);
            float16x8_t v98 = vmlaq_n_f16(vmulq_n_f16(v96, v193), (float16x8_t)v197.val[0], v192);
            float16x8_t v99 = vmulq_n_f16(v96, v194);
          }
          else
          {
            float16x8_t v99 = 0uLL;
            float16x8_t v98 = 0uLL;
            float16x8_t v97 = 0uLL;
          }
          uint16x8_t v100 = *v79++;
          uint16x8_t v101 = v100;
          if (v93)
          {
            int16x8x2_t v196 = vld2q_s16(v93);
            v93 += 16;
            float16x8_t v102 = vaddq_f16(v58, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v196.val[0], v87)));
            float16x8_t v103 = vaddq_f16(v58, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v196.val[1], v87)));
            float16x8_t v104 = vmulq_n_f16(v103, v191);
            float16x8_t v105 = vmlaq_n_f16(vmulq_n_f16(v102, v193), v103, v192);
            float16x8_t v95 = vmulq_n_f16(v102, v194);
          }
          else
          {
            float16x8_t v105 = 0uLL;
            float16x8_t v104 = 0uLL;
          }
          float16x8_t v106 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v101, v87)), v187);
          float16x8_t v107 = vmlaq_n_f16(v97, v106, _H8);
          float16x8_t v108 = vmlaq_n_f16(v98, v106, _H8);
          float16x8_t v109 = vmlaq_n_f16(v99, v106, _H8);
          uint16x8_t v110 = *v92++;
          float16x8_t v111 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v110, v87)), v187);
          float16x8_t v112 = vmlaq_n_f16(v104, v111, _H8);
          float16x8_t v113 = vmlaq_n_f16(v105, v111, _H8);
          float16x8_t v114 = vmlaq_n_f16(v95, v111, _H8);
          *(int8x8_t *)double result = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v66, v107, v178), v108, v177), v109, v176), v66), v181)));
          result += 8;
          *v94++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v66, v112, v178), v113, v177), v114, v176), v66), v181)));
          int16x8_t v115 = (int16x8_t)vaddq_f16((float16x8_t)vuzp2q_s16((int16x8_t)v112, (int16x8_t)v113), vaddq_f16(vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v107, (int16x8_t)v108), (float16x8_t)vuzp2q_s16((int16x8_t)v107, (int16x8_t)v108)), (float16x8_t)vuzp1q_s16((int16x8_t)v112, (int16x8_t)v113)));
          *(int8x8_t *)&v74[v91] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v182, v185, (float16x8_t)vzip1q_s16(v115, v115)), v184, (float16x8_t)vzip2q_s16(v115, v115)), v183, vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v114, (int16x8_t)v114), vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v109,
                                                                                     (int16x8_t)v109),
                                                                      (float16x8_t)vtrn2q_s16((int16x8_t)v109, (int16x8_t)v109)), (float16x8_t)vtrn1q_s16((int16x8_t)v114, (int16x8_t)v114)))), v180), v179)));
          v91 += 8;
        }
        while ((int)v91 < (int)v10 - 7);
        float16x8_t v116 = &v74[v91];
        size_t v117 = v10 & 0xFFFFFFF8;
      }
      for (; v10 > v117; _S6 = v190)
      {
        float v118 = 0.0;
        if (v78)
        {
          float v119 = (float)(*(unsigned __int16 *)v78 >> v80) - v43;
          float v120 = (float)(*((unsigned __int16 *)v78 + 1) >> v80) - v43;
          v78 += 2;
          float v121 = _S6 * v120;
          float v122 = (float)(_S16 * v120) + (float)(v119 * _S7);
          float v123 = _S17 * v119;
          if (v78)
          {
            float v124 = (float)(*(unsigned __int16 *)v78 >> v80) - v43;
            float v125 = (float)(*((unsigned __int16 *)v78 + 1) >> v80) - v43;
            v78 += 2;
            float v126 = _S6 * v125;
            float v127 = (float)(_S16 * v125) + (float)(v124 * _S7);
            float v118 = _S17 * v124;
            goto LABEL_28;
          }
        }
        else
        {
          float v123 = 0.0;
          float v122 = 0.0;
          float v121 = 0.0;
        }
        float v127 = 0.0;
        float v126 = 0.0;
LABEL_28:
        float v128 = 0.0;
        if (!v93)
        {
          float v133 = 0.0;
          float v132 = 0.0;
          float v131 = 0.0;
LABEL_32:
          float v137 = 0.0;
          float v136 = 0.0;
          goto LABEL_33;
        }
        float v129 = (float)(*(unsigned __int16 *)v93 >> v80) - v43;
        float v130 = (float)(*((unsigned __int16 *)v93 + 1) >> v80) - v43;
        v93 += 2;
        float v131 = _S6 * v130;
        float v132 = (float)(_S16 * v130) + (float)(v129 * _S7);
        float v133 = _S17 * v129;
        if (!v93) {
          goto LABEL_32;
        }
        float v134 = (float)(*(unsigned __int16 *)v93 >> v80) - v43;
        float v135 = (float)(*((unsigned __int16 *)v93 + 1) >> v80) - v43;
        v93 += 2;
        float v136 = _S6 * v135;
        float v137 = (float)(_S16 * v135) + (float)(v134 * _S7);
        float v128 = _S17 * v134;
LABEL_33:
        float v138 = _S5 * (float)((float)(v79->u16[0] >> v80) - v42);
        float v139 = v121 + v138;
        float v140 = v122 + v138;
        float v141 = v123 + v138;
        float v142 = _S5 * (float)((float)(v79->u16[1] >> v80) - v42);
        float v143 = v126 + v142;
        float v144 = v127 + v142;
        float v145 = v118 + v142;
        float v146 = _S5 * (float)((float)(v92->u16[0] >> v80) - v42);
        float v147 = v131 + v146;
        float v148 = v132 + v146;
        float v149 = v133 + v146;
        float v150 = _S5 * (float)((float)(v92->u16[1] >> v80) - v42);
        float v151 = v136 + v150;
        float v152 = v137 + v150;
        float v153 = v128 + v150;
        float v154 = (float)((float)((float)(_S1 * v140) + (float)(_S0 * v139)) + (float)(_S2 * v141)) + v51;
        float v155 = (float)((float)((float)(_S1 * v144) + (float)(_S0 * v143)) + (float)(_S2 * v145)) + v51;
        float v156 = (float)((float)((float)(_S1 * v148) + (float)(_S0 * v147)) + (float)(_S2 * v149)) + v51;
        if (v154 < v51) {
          float v157 = v51;
        }
        else {
          float v157 = (float)((float)((float)(_S1 * v140) + (float)(_S0 * v139)) + (float)(_S2 * v141)) + v51;
        }
        if (v154 > v52) {
          float v157 = v52;
        }
        *double result = llroundf(v157);
        if (v155 < v51) {
          float v158 = v51;
        }
        else {
          float v158 = (float)((float)((float)(_S1 * v144) + (float)(_S0 * v143)) + (float)(_S2 * v145)) + v51;
        }
        if (v155 > v52) {
          float v158 = v52;
        }
        float v159 = (float)((float)((float)(_S1 * v152) + (float)(_S0 * v151)) + (float)(_S2 * v153)) + v51;
        result[1] = llroundf(v158);
        if (v156 < v51) {
          float v160 = v51;
        }
        else {
          float v160 = (float)((float)((float)(_S1 * v148) + (float)(_S0 * v147)) + (float)(_S2 * v149)) + v51;
        }
        if (v156 > v52) {
          float v160 = v52;
        }
        v94->i8[0] = llroundf(v160);
        if (v159 < v51) {
          float v161 = v51;
        }
        else {
          float v161 = (float)((float)((float)(_S1 * v152) + (float)(_S0 * v151)) + (float)(_S2 * v153)) + v51;
        }
        if (v159 <= v52) {
          float v162 = v161;
        }
        else {
          float v162 = v52;
        }
        v94->i8[1] = llroundf(v162);
        float v163 = (float)((float)(v139 + v143) + v147) + v151;
        float v164 = (float)((float)(v140 + v144) + v148) + v152;
        float v165 = (float)((float)(v141 + v145) + v149) + v153;
        float v166 = (float)((float)(v188 + (float)(v163 * v186)) + (float)(v164 * *(float *)&v84))
             + (float)(v165 * *(float *)&v86);
        float v167 = v85;
        if (v166 <= v85)
        {
          float v167 = (float)((float)(v188 + (float)(v163 * v186)) + (float)(v164 * *(float *)&v84))
               + (float)(v165 * *(float *)&v86);
          if (v166 < v195) {
            float v167 = v195;
          }
        }
        float v168 = (float)((float)(v188 + (float)(v163 * v175)) + (float)(v164 * *((float *)&v84 + 1)))
             + (float)(v165 * *((float *)&v86 + 1));
        *float16x8_t v116 = llroundf(v167);
        float v169 = v85;
        if (v168 <= v85)
        {
          float v169 = v168;
          if (v168 < v195) {
            float v169 = v195;
          }
        }
        v117 += 2;
        float v79 = (uint16x8_t *)((char *)v79 + 4);
        float v92 = (uint16x8_t *)((char *)v92 + 4);
        v116[1] = llroundf(v169);
        result += 2;
        float v94 = (int8x8_t *)((char *)v94 + 2);
        v116 += 2;
        _S7 = v189;
      }
      float v79 = (uint16x8_t *)&v88[v21];
      float v78 = (const __int16 *)&v89[v22];
      double result = &v90[v26];
      v74 += v27;
      v9 += 2;
    }
    while (v13 > v9);
    if (v24 && v29)
    {
      uint64_t v170 = 0;
      do
      {
        if (v10)
        {
          size_t v171 = v10;
          char v172 = v44;
          float v173 = (unsigned __int16 *)v25;
          do
          {
            unsigned int v174 = *v173++;
            *v172++ = llroundf((float)v174 * 0.0038911);
            --v171;
          }
          while (v171);
        }
        v25 += v23;
        v44 += v28;
        ++v170;
      }
      while (v170 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          double result = (unsigned __int8 *)memset(v44, 255, v10);
        }
        v44 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_420vf_GCD);
  return 0;
}

void *vt_Copy_xf444_rgb_420vf_GCD(void *result, uint64_t a2)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 == 2 * v8) {
    return result;
  }
  unint64_t v10 = 0;
  size_t v11 = *(void *)((char *)result + 20);
  uint64_t v12 = *(void *)((char *)result + 36);
  uint64_t v13 = *(void *)((char *)result + 44) + 2 * v8;
  unint64_t v14 = 2 * v9 - 2 * v8;
  uint64_t v15 = result[14];
  uint64_t v16 = (void *)result[16];
  uint64_t v17 = result[15] + 2 * (result[13] * a2 / v7);
  uint64_t v18 = result[19];
  uint64_t v20 = (void *)result[7];
  uint64_t v19 = (uint64_t *)result[8];
  uint64_t v21 = (uint64_t *)result[17];
  uint64_t v22 = *v19;
  uint64_t v23 = v19[1];
  uint64_t v24 = v19[2];
  uint64_t v25 = v20[1];
  uint64_t v26 = v20[2];
  uint64_t v27 = v26 + v24 * v13 + 2 * v12;
  uint64_t v28 = *v21;
  uint64_t v29 = v21[1];
  uint64_t v30 = v21[2];
  uint64_t v31 = v16[2];
  uint64_t v32 = (char *)(*v20 + v22 * v13 + 2 * v12);
  uint64_t v33 = (unsigned char *)(v31 + v30 * v17 + v15);
  *(float *)&unsigned int v34 = (float)*(unsigned int *)(v18 + 128);
  *(float *)&unsigned int v35 = (float)*(unsigned int *)(v18 + 136);
  float v36 = *(float *)&v35 / *(float *)&v34;
  LOWORD(v34) = *(_WORD *)(v18 + 140);
  float v37 = (float)v34;
  LOWORD(v35) = *(_WORD *)(v18 + 142);
  float v38 = (float)v35;
  float v39 = v36 * *(float *)v18;
  float v40 = v36 * *(float *)(v18 + 8);
  float v41 = v36 * *(float *)(v18 + 16);
  float v42 = v36 * *(float *)(v18 + 20);
  float v43 = *(float *)(v18 + 28);
  float v44 = v36 * v43;
  LOWORD(v43) = *(_WORD *)(v18 + 144);
  float v45 = (float)LODWORD(v43);
  LOWORD(v2) = *(_WORD *)(v18 + 146);
  float v46 = (float)v2;
  LOWORD(v3) = *(_WORD *)(v18 + 148);
  float v47 = (float)v3;
  LOWORD(v4) = *(_WORD *)(v18 + 150);
  float v48 = (float)v4;
  LOWORD(v5) = *(_WORD *)(v18 + 152);
  float v49 = (float)v5;
  float v50 = *(float *)(v18 + 36);
  float v51 = *(float *)(v18 + 40);
  float v52 = *(float *)(v18 + 44);
  float v131 = *(float *)(v18 + 52) * 0.25;
  float v132 = *(float *)(v18 + 48) * 0.25;
  float v129 = *(float *)(v18 + 60) * 0.25;
  float v130 = *(float *)(v18 + 56) * 0.25;
  float v127 = *(float *)(v18 + 68) * 0.25;
  float v128 = *(float *)(v18 + 64) * 0.25;
  if (v25) {
    uint64_t v53 = (char *)(v25 + v23 * v13 + 2 * v12);
  }
  else {
    uint64_t v53 = 0;
  }
  unsigned int v54 = *(unsigned __int8 *)(v18 + 124);
  char v55 = 16 - v54;
  uint64_t v56 = v16[1];
  uint64_t v57 = (unsigned char *)(*v16 + v28 * v17 + v15);
  if (v54 >= 0x11) {
    char v55 = 0;
  }
  if (v17 >= 0) {
    uint64_t v58 = v17;
  }
  else {
    uint64_t v58 = v17 + 1;
  }
  double result = (void *)(v56 + v29 * (v58 >> 1) + v15);
  char v59 = v55;
  do
  {
    size_t v60 = &v57[v28];
    float v61 = &v53[v23];
    float v62 = &v32[v22];
    if (v11)
    {
      size_t v63 = 0;
      float v64 = &v32[v22];
      int32x4_t v65 = &v53[v23];
      float16x8_t v66 = &v57[v28];
      do
      {
        float v67 = 0.0;
        if (v53)
        {
          float v68 = (float)(*(unsigned __int16 *)v53 >> v59) - v38;
          float v69 = (float)(*((unsigned __int16 *)v53 + 1) >> v59) - v38;
          v53 += 4;
          float v70 = v40 * v69;
          float v71 = (float)(v42 * v69) + (float)(v68 * v41);
          float v72 = v44 * v68;
          if (v53)
          {
            float v73 = (float)(*(unsigned __int16 *)v53 >> v59) - v38;
            float v74 = (float)(*((unsigned __int16 *)v53 + 1) >> v59) - v38;
            v53 += 4;
            float v75 = v40 * v74;
            float v76 = (float)(v42 * v74) + (float)(v73 * v41);
            float v67 = v44 * v73;
            goto LABEL_18;
          }
        }
        else
        {
          float v72 = 0.0;
          float v71 = 0.0;
          float v70 = 0.0;
        }
        float v76 = 0.0;
        float v75 = 0.0;
LABEL_18:
        float v77 = 0.0;
        if (!v65)
        {
          float v82 = 0.0;
          float v81 = 0.0;
          float v80 = 0.0;
LABEL_22:
          float v86 = 0.0;
          float v85 = 0.0;
          goto LABEL_23;
        }
        float v78 = (float)(*(unsigned __int16 *)v65 >> v59) - v38;
        float v79 = (float)(*((unsigned __int16 *)v65 + 1) >> v59) - v38;
        v65 += 4;
        float v80 = v40 * v79;
        float v81 = (float)(v42 * v79) + (float)(v78 * v41);
        float v82 = v44 * v78;
        if (!v65) {
          goto LABEL_22;
        }
        float v83 = (float)(*(unsigned __int16 *)v65 >> v59) - v38;
        float v84 = (float)(*((unsigned __int16 *)v65 + 1) >> v59) - v38;
        v65 += 4;
        float v85 = v40 * v84;
        float v86 = (float)(v42 * v84) + (float)(v83 * v41);
        float v77 = v44 * v83;
LABEL_23:
        float v87 = v39 * (float)((float)(*(unsigned __int16 *)v32 >> v59) - v37);
        float v88 = v70 + v87;
        float v89 = v71 + v87;
        float v90 = v72 + v87;
        float v91 = v39 * (float)((float)(*((unsigned __int16 *)v32 + 1) >> v59) - v37);
        float v92 = v75 + v91;
        float v93 = v76 + v91;
        float v94 = v67 + v91;
        float v95 = v39 * (float)((float)(*(unsigned __int16 *)v64 >> v59) - v37);
        float v96 = v80 + v95;
        float v97 = v81 + v95;
        float v98 = v82 + v95;
        float v99 = v39 * (float)((float)(*((unsigned __int16 *)v64 + 1) >> v59) - v37);
        float v100 = v85 + v99;
        float v101 = v86 + v99;
        float v102 = v77 + v99;
        float v103 = (float)((float)((float)(v51 * v89) + (float)(v50 * v88)) + (float)(v52 * v90)) + v45;
        float v104 = (float)((float)((float)(v51 * v93) + (float)(v50 * v92)) + (float)(v52 * v94)) + v45;
        float v105 = (float)((float)((float)(v51 * v97) + (float)(v50 * v96)) + (float)(v52 * v98)) + v45;
        if (v103 < v45) {
          float v106 = v45;
        }
        else {
          float v106 = (float)((float)((float)(v51 * v89) + (float)(v50 * v88)) + (float)(v52 * v90)) + v45;
        }
        if (v103 > v47) {
          float v106 = v47;
        }
        *uint64_t v57 = llroundf(v106);
        if (v104 < v45) {
          float v107 = v45;
        }
        else {
          float v107 = (float)((float)((float)(v51 * v93) + (float)(v50 * v92)) + (float)(v52 * v94)) + v45;
        }
        if (v104 <= v47) {
          float v108 = v107;
        }
        else {
          float v108 = v47;
        }
        char v109 = llroundf(v108);
        float v110 = (float)((float)((float)(v51 * v101) + (float)(v50 * v100)) + (float)(v52 * v102)) + v45;
        v57[1] = v109;
        if (v105 < v45) {
          float v111 = v45;
        }
        else {
          float v111 = (float)((float)((float)(v51 * v97) + (float)(v50 * v96)) + (float)(v52 * v98)) + v45;
        }
        if (v105 <= v47) {
          float v112 = v111;
        }
        else {
          float v112 = v47;
        }
        *float16x8_t v66 = llroundf(v112);
        if (v110 < v45) {
          float v113 = v45;
        }
        else {
          float v113 = (float)((float)((float)(v51 * v101) + (float)(v50 * v100)) + (float)(v52 * v102)) + v45;
        }
        if (v110 <= v47) {
          float v114 = v113;
        }
        else {
          float v114 = v47;
        }
        v66[1] = llroundf(v114);
        float v115 = (float)((float)(v88 + v92) + v96) + v100;
        float v116 = (float)((float)(v89 + v93) + v97) + v101;
        float v117 = (float)((float)(v90 + v94) + v98) + v102;
        float v118 = (float)((float)(v46 + (float)(v115 * v132)) + (float)(v116 * v131)) + (float)(v117 * v130);
        float v119 = v49;
        if (v118 <= v49)
        {
          float v119 = (float)((float)(v46 + (float)(v115 * v132)) + (float)(v116 * v131)) + (float)(v117 * v130);
          if (v118 < v48) {
            float v119 = v48;
          }
        }
        float v120 = (float)((float)(v46 + (float)(v115 * v129)) + (float)(v116 * v128)) + (float)(v117 * v127);
        *((unsigned char *)result + v63) = llroundf(v119);
        float v121 = v49;
        if (v120 <= v49)
        {
          float v121 = v120;
          if (v120 < v48) {
            float v121 = v48;
          }
        }
        v32 += 4;
        v64 += 4;
        v57 += 2;
        v66 += 2;
        *((unsigned char *)result + v63 + 1) = llroundf(v121);
        v63 += 2;
      }
      while (v11 > v63);
    }
    uint64_t v32 = &v62[v22];
    uint64_t v53 = &v61[v23];
    uint64_t v57 = &v60[v28];
    double result = (void *)((char *)result + v29);
    v10 += 2;
  }
  while (v14 > v10);
  if (v26 && v31)
  {
    uint64_t v122 = 0;
    do
    {
      if (v11)
      {
        size_t v123 = v11;
        float v124 = v33;
        float v125 = (unsigned __int16 *)v27;
        do
        {
          unsigned int v126 = *v125++;
          *v124++ = llroundf((float)v126 * 0.0038911);
          --v123;
        }
        while (v123);
      }
      v27 += v24;
      v33 += v30;
      ++v122;
    }
    while (v122 != v14);
  }
  else if (v31)
  {
    do
    {
      if (v11) {
        double result = memset(v33, 255, v11);
      }
      v33 += v30;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD(unint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float32x4_t a10)
{
  uint64_t v17 = *(void *)(result + 28);
  unint64_t v18 = 2 * *(unsigned __int8 *)result;
  unint64_t v19 = v17 * a2 / v18;
  unint64_t v20 = (v17 + v17 * a2) / v18;
  if (2 * v20 != 2 * v19)
  {
    unint64_t v21 = 0;
    uint64_t v22 = *(void *)(result + 36);
    uint64_t v23 = *(void *)(result + 44) + 2 * v19;
    uint64_t v24 = *(void *)(result + 112);
    unint64_t v25 = 2 * v20 - 2 * v19;
    unint64_t v26 = *(void *)(result + 104) * a2;
    uint64_t v27 = *(void *)(result + 152);
    uint64_t v28 = *(void **)(result + 56);
    uint64_t v29 = *(uint64_t **)(result + 64);
    uint64_t v30 = *(void **)(result + 128);
    uint64_t v31 = *(uint64_t **)(result + 136);
    uint64_t v32 = *v29;
    uint64_t v33 = v29[1];
    uint64_t v35 = *v31;
    uint64_t v34 = v31[1];
    unsigned int v36 = *(unsigned __int16 *)(v27 + 140);
    unsigned int v37 = *(unsigned __int16 *)(v27 + 142);
    LODWORD(a3) = *(_DWORD *)v27;
    uint64_t v38 = *(void *)(result + 120) + 2 * (v26 / v18);
    uint64_t v374 = v29[2];
    uint64_t v375 = v31[2];
    uint64_t v376 = v30[2];
    uint64_t v377 = v28[2];
    __vImage_Buffer src = (char *)(v377 + v374 * v23 + 2 * v22);
    unsigned int v39 = *(unsigned __int16 *)(v27 + 144);
    unsigned int v40 = *(unsigned __int16 *)(v27 + 146);
    LODWORD(v31) = *(unsigned __int16 *)(v27 + 148);
    float v41 = (float)v36;
    *(short float *)v11.i16 = (short float)v36;
    unsigned int v42 = *(unsigned __int16 *)(v27 + 150);
    _S10 = *(_DWORD *)(v27 + 44);
    float v44 = (float)v37;
    short float v45 = (short float)v37;
    unsigned int v49 = *(unsigned __int16 *)(v27 + 152);
    float v403 = (float)v39;
    *(short float *)v12.i16 = (short float)v39;
    uint64_t v50 = v27 + 16548;
    float v433 = (float)v40;
    float v414 = (float)v31;
    float v51 = (char *)(v376 + v375 * v38 + 2 * v24);
    float v440 = (float)v42;
    float v432 = (float)v49;
    *(short float *)v13.i16 = (short float)v40;
    *(short float *)v14.i16 = (short float)v31;
    *(short float *)v15.i16 = (short float)v42;
    unsigned int v52 = *(unsigned __int8 *)(v27 + 132);
    if (v52 >= 0x11) {
      unsigned __int8 v53 = 0;
    }
    else {
      unsigned __int8 v53 = 16 - v52;
    }
    unsigned int v54 = *(unsigned __int8 *)(v27 + 124);
    if (v54 >= 0x11) {
      unsigned __int8 v55 = 0;
    }
    else {
      unsigned __int8 v55 = 16 - v54;
    }
    if (v38 >= 0) {
      uint64_t v56 = v38;
    }
    else {
      uint64_t v56 = v38 + 1;
    }
    uint64_t v378 = v34;
    uint64_t v57 = v30[1] + v34 * (v56 >> 1);
    v10.f32[0] = 8191.0 / (float)*(unsigned int *)(v27 + 128);
    _S31 = v10.f32[0] * *(float *)&a3;
    _S15 = v10.f32[0] * *(float *)(v27 + 8);
    _S14 = v10.f32[0] * *(float *)(v27 + 16);
    _S4 = v10.f32[0] * *(float *)(v27 + 20);
    _S29 = v10.f32[0] * *(float *)(v27 + 28);
    uint64_t v63 = *v30 + v35 * v38;
    uint64_t v64 = v27 + 164;
    int32x4_t v65 = (uint16x8_t *)(v57 + 2 * v24);
    float16x8_t v66 = (uint16x8_t *)(v63 + 2 * v24);
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(v11, 0);
    *(short float *)&a3 = -v45;
    float16x8_t v439 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    uint64_t v68 = v27 + 32932;
    __asm { FMOV            V0.2S, #0.25 }
    v46.i32[1] = *(_DWORD *)(v27 + 60);
    v46.i32[0] = *(_DWORD *)(v27 + 48);
    *(float32x2_t *)a10.f32 = vmul_f32(v46, _D0);
    float16x8_t v430 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a10), 0);
    v47.i32[1] = *(_DWORD *)(v27 + 64);
    v47.i32[0] = *(_DWORD *)(v27 + 52);
    *(float32x2_t *)v10.f32 = vmul_f32(v47, _D0);
    float32x4_t v74 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float16x8_t v429 = (float16x8_t)v74;
    v48.i32[1] = *(_DWORD *)(v27 + 68);
    v48.i32[0] = *(_DWORD *)(v27 + 56);
    *(float32x2_t *)v74.f32 = vmul_f32(v48, _D0);
    float16x8_t v427 = (float16x8_t)vdupq_lane_s16(v12, 0);
    float16x8_t v428 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v74), 0);
    float16x8_t v425 = (float16x8_t)vdupq_lane_s16(v14, 0);
    float16x8_t v426 = (float16x8_t)vdupq_lane_s16(v13, 0);
    *(short float *)v16.i16 = (short float)v49;
    float16x8_t v423 = (float16x8_t)vdupq_lane_s16(v16, 0);
    float16x8_t v424 = (float16x8_t)vdupq_lane_s16(v15, 0);
    uint16x8_t v75 = (uint16x8_t)vdupq_n_s16(-v55);
    uint64_t v76 = v28[1];
    _ZF = v76 == 0;
    uint64_t v77 = v76 + v33 * v23 + 2 * v22;
    if (_ZF) {
      float v78 = 0;
    }
    else {
      float v78 = (unsigned __int16 *)v77;
    }
    float v79 = (uint16x8_t *)(*v28 + v32 * v23 + 2 * v22);
    unint64_t v80 = *(void *)(result + 20);
    double result = (v80 - 7);
    unsigned __int8 v81 = v55;
    unsigned __int8 v82 = v53;
    __asm
    {
      FCVT            H11, S31
      FCVT            H13, S29
    }
    short float v438 = _H13;
    __asm { FCVT            H13, S14 }
    short float v437 = _H13;
    __asm { FCVT            H13, S4 }
    short float v436 = _H13;
    __asm { FCVT            H13, S15 }
    short float v435 = _H13;
    float v422 = *(float *)(v27 + 36);
    __asm { FCVT            H0, S0 }
    short float v402 = _H0;
    float v421 = *(float *)(v27 + 40);
    __asm { FCVT            H0, S18 }
    short float v401 = _H0;
    _S18 = *(float *)(v27 + 116);
    _S5 = *(float *)(v27 + 112);
    float v434 = *(float *)(v27 + 44);
    __asm { FCVT            H0, S10 }
    short float v400 = _H0;
    float v404 = *(float *)(v27 + 108);
    __asm { FCVT            H0, S12 }
    short float v399 = _H0;
    __asm { FCVT            H0, S3 }
    short float v398 = _H0;
    __asm { FCVT            H0, S18 }
    short float v397 = _H0;
    float v410 = *(float *)(v27 + 120);
    __asm { FCVT            H0, S26 }
    short float v396 = _H0;
    float v420 = *(float *)(v27 + 72);
    __asm { FCVT            H0, S19 }
    short float v395 = _H0;
    float v419 = *(float *)(v27 + 76);
    __asm { FCVT            H0, S20 }
    short float v394 = _H0;
    float v418 = *(float *)(v27 + 80);
    __asm { FCVT            H0, S21 }
    short float v393 = _H0;
    float v417 = *(float *)(v27 + 84);
    __asm { FCVT            H0, S9 }
    short float v392 = _H0;
    float v416 = *(float *)(v27 + 88);
    __asm { FCVT            H0, S23 }
    short float v391 = _H0;
    float v413 = *(float *)(v27 + 92);
    __asm { FCVT            H0, S24 }
    short float v390 = _H0;
    float v412 = *(float *)(v27 + 96);
    __asm { FCVT            H0, S25 }
    short float v389 = _H0;
    float v409 = *(float *)(v27 + 100);
    __asm { FCVT            H0, S27 }
    float v105 = _S4;
    short float v388 = _H0;
    float v406 = *(float *)(v27 + 104);
    __asm { FCVT            H0, S30 }
    short float v387 = _H0;
    float v431 = a10.f32[0];
    uint64_t v107 = v10.i64[0];
    float v386 = a10.f32[1];
    uint64_t v108 = v74.i64[0];
    uint16x8_t v385 = (uint16x8_t)vdupq_n_s16(v53);
    uint64_t v380 = v29[1];
    uint64_t v381 = *v29;
    uint64_t v379 = v35;
    float v442 = _S14;
    float v443 = _S15;
    float v441 = _S4;
    uint16x8_t v415 = v75;
    float v411 = v44;
    short float v407 = _H11;
    float16x8_t v408 = v67;
    float v405 = _S29;
    float v383 = _S31;
    float v384 = v41;
    do
    {
      char v109 = &v79->i8[v32];
      float v110 = (unsigned __int16 *)((char *)v78 + v33);
      float v111 = (uint16x8_t *)((char *)v66 + v35);
      short float v382 = &v66->i8[v35];
      if ((int)v80 < 8)
      {
        unint64_t v215 = 0;
        float v115 = v65;
        float v114 = v110;
        float v113 = (uint16x8_t *)((char *)v79 + v32);
      }
      else
      {
        int v112 = 0;
        float v113 = (uint16x8_t *)((char *)v79 + v32);
        float v114 = v110;
        float v115 = v65;
        do
        {
          float16x8_t v116 = 0uLL;
          if (v78)
          {
            int16x8x2_t v444 = vld2q_s16((const __int16 *)v78);
            v78 += 16;
            float16x8_t v117 = vaddq_f16(v439, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v444.val[0], v75)));
            v444.val[0] = (int16x8_t)vaddq_f16(v439, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v444.val[1], v75)));
            float16x8_t v118 = vmulq_n_f16((float16x8_t)v444.val[0], v435);
            float16x8_t v119 = vmlaq_n_f16(vmulq_n_f16(v117, v437), (float16x8_t)v444.val[0], v436);
            float16x8_t v120 = vmulq_n_f16(v117, v438);
          }
          else
          {
            float16x8_t v120 = 0uLL;
            float16x8_t v119 = 0uLL;
            float16x8_t v118 = 0uLL;
          }
          uint16x8_t v121 = *v79++;
          float16x8_t v122 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v121, v75)), v67);
          float16x8_t v123 = vmlaq_n_f16(v118, v122, _H11);
          float16x8_t v124 = vmlaq_n_f16(v119, v122, _H11);
          float16x8_t v125 = vmlaq_n_f16(v120, v122, _H11);
          if (v114)
          {
            int16x8x2_t v445 = vld2q_s16((const __int16 *)v114);
            v114 += 16;
            float16x8_t v126 = vaddq_f16(v439, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v445.val[0], v75)));
            v445.val[0] = (int16x8_t)vaddq_f16(v439, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v445.val[1], v75)));
            float16x8_t v127 = vmulq_n_f16((float16x8_t)v445.val[0], v435);
            float16x8_t v128 = vmlaq_n_f16(vmulq_n_f16(v126, v437), (float16x8_t)v445.val[0], v436);
            float16x8_t v116 = vmulq_n_f16(v126, v438);
          }
          else
          {
            float16x8_t v128 = 0uLL;
            float16x8_t v127 = 0uLL;
          }
          uint16x8_t v129 = *v113++;
          float16x8_t v130 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v129, v75)), v67);
          float16x8_t v131 = vmlaq_n_f16(v127, v130, _H11);
          float16x8_t v132 = vmlaq_n_f16(v128, v130, _H11);
          float16x8_t v133 = vmlaq_n_f16(v116, v130, _H11);
          WORD4(v134) = 0;
          v135.i64[0] = 0x9000900090009000;
          v135.i64[1] = 0x9000900090009000;
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v135));
          uint32x4_t v137 = vmovl_high_u16(v136);
          float16x8_t v138 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v136.i8);
          v138.i16[0] = *(_WORD *)(v64 + 2 * v138.u32[0]);
          v138.i16[1] = *(_WORD *)(v64 + 2 * v138.u32[1]);
          v138.i16[2] = *(_WORD *)(v64 + 2 * v138.u32[2]);
          v138.i16[3] = *(_WORD *)(v64 + 2 * v138.u32[3]);
          v138.i16[4] = *(_WORD *)(v64 + 2 * v137.u32[0]);
          v138.i16[5] = *(_WORD *)(v64 + 2 * v137.u32[1]);
          v138.i16[6] = *(_WORD *)(v64 + 2 * v137.u32[2]);
          v138.i16[7] = *(_WORD *)(v64 + 2 * v137.u32[3]);
          uint16x8_t v139 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, (float16x8_t)0), v135));
          uint32x4_t v140 = vmovl_high_u16(v139);
          float16x8_t v141 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v139.i8);
          v141.i16[0] = *(_WORD *)(v64 + 2 * v141.u32[0]);
          v141.i16[1] = *(_WORD *)(v64 + 2 * v141.u32[1]);
          v141.i16[2] = *(_WORD *)(v64 + 2 * v141.u32[2]);
          v141.i16[3] = *(_WORD *)(v64 + 2 * v141.u32[3]);
          v141.i16[4] = *(_WORD *)(v64 + 2 * v140.u32[0]);
          v141.i16[5] = *(_WORD *)(v64 + 2 * v140.u32[1]);
          v141.i16[6] = *(_WORD *)(v64 + 2 * v140.u32[2]);
          v141.i16[7] = *(_WORD *)(v64 + 2 * v140.u32[3]);
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v125, (float16x8_t)0), v135));
          float16x8_t v143 = (float16x8_t)vmovl_high_u16(v142);
          *(void *)&long long v144 = v143.u32[2];
          *((void *)&v144 + 1) = v143.u32[3];
          long long v145 = v144;
          *(void *)&long long v144 = v143.u32[0];
          *((void *)&v144 + 1) = v143.u32[1];
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v142.i8);
          v143.i16[0] = *(_WORD *)(v64 + 2 * v146.u32[0]);
          v143.i16[1] = *(_WORD *)(v64 + 2 * v146.u32[1]);
          v143.i16[2] = *(_WORD *)(v64 + 2 * v146.u32[2]);
          v143.i16[3] = *(_WORD *)(v64 + 2 * v146.u32[3]);
          v143.i16[4] = *(_WORD *)(v64 + 2 * v144);
          v143.i16[5] = *(_WORD *)(v64 + 2 * *((void *)&v144 + 1));
          v143.i16[6] = *(_WORD *)(v64 + 2 * v145);
          v143.i16[7] = *(_WORD *)(v64 + 2 * *((void *)&v145 + 1));
          uint16x8_t v147 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, (float16x8_t)0), v135));
          uint32x4_t v148 = vmovl_high_u16(v147);
          float16x8_t v149 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v147.i8);
          v149.i16[0] = *(_WORD *)(v64 + 2 * v149.u32[0]);
          v149.i16[1] = *(_WORD *)(v64 + 2 * v149.u32[1]);
          v149.i16[2] = *(_WORD *)(v64 + 2 * v149.u32[2]);
          v149.i16[3] = *(_WORD *)(v64 + 2 * v149.u32[3]);
          v149.i16[4] = *(_WORD *)(v64 + 2 * v148.u32[0]);
          v149.i16[5] = *(_WORD *)(v64 + 2 * v148.u32[1]);
          v149.i16[6] = *(_WORD *)(v64 + 2 * v148.u32[2]);
          v149.i16[7] = *(_WORD *)(v64 + 2 * v148.u32[3]);
          uint16x8_t v150 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v132, (float16x8_t)0), v135));
          float16x8_t v151 = (float16x8_t)vmovl_high_u16(v150);
          *(void *)&long long v144 = v151.u32[2];
          *((void *)&v144 + 1) = v151.u32[3];
          long long v152 = v144;
          *(void *)&long long v144 = v151.u32[0];
          *((void *)&v144 + 1) = v151.u32[1];
          uint32x4_t v153 = vmovl_u16(*(uint16x4_t *)v150.i8);
          v151.i16[0] = *(_WORD *)(v64 + 2 * v153.u32[0]);
          v151.i16[1] = *(_WORD *)(v64 + 2 * v153.u32[1]);
          v151.i16[2] = *(_WORD *)(v64 + 2 * v153.u32[2]);
          v151.i16[3] = *(_WORD *)(v64 + 2 * v153.u32[3]);
          v151.i16[4] = *(_WORD *)(v64 + 2 * v144);
          v151.i16[5] = *(_WORD *)(v64 + 2 * *((void *)&v144 + 1));
          v151.i16[6] = *(_WORD *)(v64 + 2 * v152);
          v151.i16[7] = *(_WORD *)(v64 + 2 * *((void *)&v152 + 1));
          uint16x8_t v154 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v133, (float16x8_t)0), v135));
          uint32x4_t v155 = vmovl_high_u16(v154);
          float16x8_t v156 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v154.i8);
          v156.i16[0] = *(_WORD *)(v64 + 2 * v156.u32[0]);
          v156.i16[1] = *(_WORD *)(v64 + 2 * v156.u32[1]);
          v156.i16[2] = *(_WORD *)(v64 + 2 * v156.u32[2]);
          v156.i16[3] = *(_WORD *)(v64 + 2 * v156.u32[3]);
          v156.i16[4] = *(_WORD *)(v64 + 2 * v155.u32[0]);
          v156.i16[5] = *(_WORD *)(v64 + 2 * v155.u32[1]);
          v156.i16[6] = *(_WORD *)(v64 + 2 * v155.u32[2]);
          v156.i16[7] = *(_WORD *)(v64 + 2 * v155.u32[3]);
          uint16x8_t v157 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v138, v399), v141, v398), v143, v397), vmaxq_f16(vmaxq_f16(v138, v141), v143), v396), (float16x8_t)0), v135));
          uint32x4_t v158 = vmovl_high_u16(v157);
          uint32x4_t v159 = vmovl_u16(*(uint16x4_t *)v157.i8);
          v160.i16[0] = *(_WORD *)(v50 + 2 * v159.u32[0]);
          v160.i16[1] = *(_WORD *)(v50 + 2 * v159.u32[1]);
          v160.i16[2] = *(_WORD *)(v50 + 2 * v159.u32[2]);
          v160.i16[3] = *(_WORD *)(v50 + 2 * v159.u32[3]);
          v160.i16[4] = *(_WORD *)(v50 + 2 * v158.u32[0]);
          v160.i16[5] = *(_WORD *)(v50 + 2 * v158.u32[1]);
          v160.i16[6] = *(_WORD *)(v50 + 2 * v158.u32[2]);
          v160.i16[7] = *(_WORD *)(v50 + 2 * v158.u32[3]);
          float16x8_t v161 = vmulq_f16(v138, v160);
          float16x8_t v162 = vmulq_f16(v141, v160);
          float16x8_t v163 = vmulq_f16(v143, v160);
          uint16x8_t v164 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v149, v399), v151, v398), v156, v397), vmaxq_f16(vmaxq_f16(v149, v151), v156), v396), (float16x8_t)0), v135));
          uint32x4_t v165 = vmovl_high_u16(v164);
          uint32x4_t v166 = vmovl_u16(*(uint16x4_t *)v164.i8);
          __int16 v167 = *(_WORD *)(v50 + 2 * v166.u32[0]);
          __int16 v168 = *(_WORD *)(v50 + 2 * v166.u32[1]);
          __int16 v169 = *(_WORD *)(v50 + 2 * v166.u32[2]);
          __int16 v170 = *(_WORD *)(v50 + 2 * v166.u32[3]);
          __int16 v171 = *(_WORD *)(v50 + 2 * v165.u32[0]);
          __int16 v172 = *(_WORD *)(v50 + 2 * v165.u32[1]);
          __int16 v173 = *(_WORD *)(v50 + 2 * v165.u32[2]);
          *(void *)&long long v134 = *(unsigned __int16 *)(v50 + 2 * v165.u32[3]);
          float16x8_t v174 = vmulq_f16(v149, *(float16x8_t *)&v167);
          float16x8_t v175 = vmulq_f16(v151, *(float16x8_t *)&v167);
          float16x8_t v176 = vmulq_f16(v156, *(float16x8_t *)&v167);
          float16x8_t v177 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v161, v395), v162, v394), v163, v393);
          float16x8_t v178 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v161, v392), v162, v391), v163, v390);
          float16x8_t v179 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v163, v387), v162, v388), v161, v389);
          float16x8_t v180 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v174, v395), v175, v394), v176, v393);
          float16x8_t v181 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v174, v392), v175, v391), v176, v390);
          float16x8_t v182 = vmlaq_n_f16(vmulq_n_f16(v176, v387), v175, v388);
          float16x8_t v183 = (float16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v177, (float16x8_t)*(unint64_t *)((char *)&v134 + 2)), v135));
          uint32x4_t v184 = vmovl_high_u16((uint16x8_t)v183);
          uint32x4_t v185 = vmovl_u16(*(uint16x4_t *)v183.i8);
          v183.i16[7] = (unint64_t)v185.u32[1] >> 48;
          v183.i16[0] = *(_WORD *)(v68 + 2 * v185.u32[0]);
          v183.i16[1] = *(_WORD *)(v68 + 2 * v185.u32[1]);
          v183.i16[2] = *(_WORD *)(v68 + 2 * v185.u32[2]);
          v183.i16[3] = *(_WORD *)(v68 + 2 * v185.u32[3]);
          v183.i16[4] = *(_WORD *)(v68 + 2 * v184.u32[0]);
          v183.i16[5] = *(_WORD *)(v68 + 2 * v184.u32[1]);
          v183.i16[6] = *(_WORD *)(v68 + 2 * v184.u32[2]);
          float v186 = (__int16 *)(v68 + 2 * v184.u32[3]);
          float16x8_t v187 = (float16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v178, (float16x8_t)*(unint64_t *)((char *)&v134 + 2)), v135));
          uint32x4_t v188 = vmovl_high_u16((uint16x8_t)v187);
          uint32x4_t v189 = vmovl_u16(*(uint16x4_t *)v187.i8);
          v187.i16[7] = (unint64_t)v189.u32[1] >> 48;
          v187.i16[0] = *(_WORD *)(v68 + 2 * v189.u32[0]);
          v187.i16[1] = *(_WORD *)(v68 + 2 * v189.u32[1]);
          v187.i16[2] = *(_WORD *)(v68 + 2 * v189.u32[2]);
          v187.i16[3] = *(_WORD *)(v68 + 2 * v189.u32[3]);
          v187.i16[4] = *(_WORD *)(v68 + 2 * v188.u32[0]);
          v187.i16[5] = *(_WORD *)(v68 + 2 * v188.u32[1]);
          v187.i16[6] = *(_WORD *)(v68 + 2 * v188.u32[2]);
          float16x8_t v190 = (float16x8_t)vuzp1q_s16((int16x8_t)v183, (int16x8_t)v187);
          v183.i16[7] = *v186;
          v187.i16[7] = *(_WORD *)(v68 + 2 * v188.u32[3]);
          uint16x8_t v191 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v179, (float16x8_t)*(unint64_t *)((char *)&v134 + 2)), v135));
          uint32x4_t v192 = vmovl_high_u16(v191);
          *(void *)&long long v144 = v192.u32[2];
          *((void *)&v144 + 1) = v192.u32[3];
          long long v193 = v144;
          *(void *)&long long v144 = v192.u32[0];
          *((void *)&v144 + 1) = v192.u32[1];
          long long v194 = v144;
          int16x8_t v195 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v191.i8);
          *((void *)&v144 + 1) = v195.u32[3];
          v195.i16[7] = (unint64_t)v195.u32[1] >> 48;
          v195.i16[0] = *(_WORD *)(v68 + 2 * v195.u32[0]);
          v195.i16[1] = *(_WORD *)(v68 + 2 * v195.u32[1]);
          v195.i16[2] = *(_WORD *)(v68 + 2 * v195.u32[2]);
          v195.i16[3] = *(_WORD *)(v68 + 2 * *((void *)&v144 + 1));
          v195.i16[4] = *(_WORD *)(v68 + 2 * v194);
          v195.i16[5] = *(_WORD *)(v68 + 2 * *((void *)&v194 + 1));
          v195.i16[6] = *(_WORD *)(v68 + 2 * v193);
          float16x8_t v196 = (float16x8_t)v195;
          v196.i16[7] = *(_WORD *)(v68 + 2 * *((void *)&v193 + 1));
          uint16x8_t v197 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v180, (float16x8_t)*(unint64_t *)((char *)&v134 + 2)), v135));
          uint32x4_t v198 = vmovl_high_u16(v197);
          float16x8_t v199 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v197.i8);
          *(void *)&long long v144 = v198.u32[2];
          *((void *)&v144 + 1) = v198.u32[3];
          long long v200 = v144;
          *(void *)&long long v144 = v198.u32[0];
          *((void *)&v144 + 1) = v198.u32[1];
          long long v201 = v144;
          *((void *)&v144 + 1) = v199.u32[3];
          v199.i16[7] = (unint64_t)v199.u32[3] >> 48;
          v199.i16[0] = *(_WORD *)(v68 + 2 * v199.u32[0]);
          v199.i16[1] = *(_WORD *)(v68 + 2 * v199.u32[1]);
          v199.i16[2] = *(_WORD *)(v68 + 2 * v199.u32[2]);
          v199.i16[3] = *(_WORD *)(v68 + 2 * *((void *)&v144 + 1));
          v199.i16[4] = *(_WORD *)(v68 + 2 * v201);
          v199.i16[5] = *(_WORD *)(v68 + 2 * *((void *)&v201 + 1));
          v199.i16[6] = *(_WORD *)(v68 + 2 * v200);
          float v202 = (__int16 *)(v68 + 2 * *((void *)&v200 + 1));
          uint16x8_t v203 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v181, (float16x8_t)*(unint64_t *)((char *)&v134 + 2)), v135));
          uint32x4_t v204 = vmovl_high_u16(v203);
          float16x8_t v205 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v203.i8);
          *(void *)&long long v144 = v204.u32[2];
          *((void *)&v144 + 1) = v204.u32[3];
          long long v206 = v144;
          *(void *)&long long v144 = v204.u32[0];
          *((void *)&v144 + 1) = v204.u32[1];
          long long v207 = v144;
          *((void *)&v144 + 1) = v205.u32[3];
          v205.i16[7] = (unint64_t)v205.u32[3] >> 48;
          v205.i16[0] = *(_WORD *)(v68 + 2 * v205.u32[0]);
          v205.i16[1] = *(_WORD *)(v68 + 2 * v205.u32[1]);
          v205.i16[2] = *(_WORD *)(v68 + 2 * v205.u32[2]);
          v205.i16[3] = *(_WORD *)(v68 + 2 * *((void *)&v144 + 1));
          v205.i16[4] = *(_WORD *)(v68 + 2 * v207);
          v205.i16[5] = *(_WORD *)(v68 + 2 * *((void *)&v207 + 1));
          v205.i16[6] = *(_WORD *)(v68 + 2 * v206);
          float16x8_t v208 = (float16x8_t)vuzp1q_s16((int16x8_t)v199, (int16x8_t)v205);
          v199.i16[7] = *v202;
          v205.i16[7] = *(_WORD *)(v68 + 2 * *((void *)&v206 + 1));
          uint16x8_t v209 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v182, v174, v389), (float16x8_t)*(unint64_t *)((char *)&v134 + 2)), v135));
          int16x8_t v210 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v209.i8);
          uint32x4_t v211 = vmovl_high_u16(v209);
          *(void *)&long long v144 = v211.u32[2];
          *((void *)&v144 + 1) = v211.u32[3];
          long long v212 = v144;
          *((void *)&v144 + 1) = v210.u32[3];
          v210.i16[7] = (unint64_t)v210.u32[3] >> 48;
          v210.i16[0] = *(_WORD *)(v68 + 2 * v210.u32[0]);
          v210.i16[1] = *(_WORD *)(v68 + 2 * v210.u32[1]);
          v210.i16[2] = *(_WORD *)(v68 + 2 * v210.u32[2]);
          v210.i16[3] = *(_WORD *)(v68 + 2 * *((void *)&v144 + 1));
          v210.i16[4] = *(_WORD *)(v68 + 2 * v211.u32[0]);
          v210.i16[5] = *(_WORD *)(v68 + 2 * v211.u32[1]);
          v210.i16[6] = *(_WORD *)(v68 + 2 * v212);
          float16x8_t v213 = (float16x8_t)v210;
          v213.i16[7] = *(_WORD *)(v68 + 2 * *((void *)&v212 + 1));
          *v66++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v427, v183, v402), v187, v401), v196, v400), v427), v425)), v385);
          *v111++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v427, v199, v402), v205, v401), v213, v400), v427), v425)), v385);
          int16x8_t v214 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v190, (float16x8_t)vuzp2q_s16((int16x8_t)v183, (int16x8_t)v187)), v208), (float16x8_t)vuzp2q_s16((int16x8_t)v199, (int16x8_t)v205));
          *v115++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v426, v430, (float16x8_t)vzip1q_s16(v214, v214)), v429, (float16x8_t)vzip2q_s16(v214, v214)), v428, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v195, v195), (float16x8_t)vtrn2q_s16((int16x8_t)v196, (int16x8_t)v196)), (float16x8_t)vtrn1q_s16(v210, v210)), (float16x8_t)vtrn2q_s16((int16x8_t)v213, (int16x8_t)v213))), v424), v423)), v385);
          v112 += 8;
          _S31 = v383;
          float v41 = v384;
          _S14 = v442;
          _S15 = v443;
          float v105 = v441;
        }
        while (v112 < (int)result);
        unint64_t v215 = v80 & 0xFFFFFFF8;
      }
      for (; v80 > v215; uint16x8_t v75 = v415)
      {
        if (v78)
        {
          float v216 = (float)(*v78 >> v81) - v44;
          float v217 = (float)(v78[1] >> v81) - v44;
          float v218 = v78 + 2;
          float v219 = _S15 * v217;
          float v220 = (float)(v105 * v217) + (float)(v216 * _S14);
          float v221 = _S29 * v216;
        }
        else
        {
          float v218 = 0;
          float v221 = 0.0;
          float v220 = 0.0;
          float v219 = 0.0;
        }
        float v222 = _S31 * (float)((float)(v79->u16[0] >> v81) - v41);
        float v223 = v219 + v222;
        BOOL v224 = (float)(v219 + v222) <= 8191.0;
        float v225 = 8191.0;
        if (v224)
        {
          float v225 = v223;
          if (v223 < 0.0) {
            float v225 = 0.0;
          }
        }
        float v226 = v220 + v222;
        BOOL v224 = (float)(v220 + v222) <= 8191.0;
        float v227 = 8191.0;
        if (v224)
        {
          float v227 = v226;
          if (v226 < 0.0) {
            float v227 = 0.0;
          }
        }
        float v228 = v221 + v222;
        float v229 = 8191.0;
        if (v228 <= 8191.0)
        {
          float v229 = v228;
          if (v228 < 0.0) {
            float v229 = 0.0;
          }
        }
        if (v218)
        {
          float v230 = (float)(*v218 >> v81) - v44;
          float v231 = (float)(v218[1] >> v81) - v44;
          float v78 = v218 + 2;
          float v232 = _S15 * v231;
          float v233 = (float)(v105 * v231) + (float)(v230 * _S14);
          float v234 = _S29 * v230;
        }
        else
        {
          float v78 = 0;
          float v234 = 0.0;
          float v233 = 0.0;
          float v232 = 0.0;
        }
        float v235 = _S31 * (float)((float)(v79->u16[1] >> v81) - v41);
        float v236 = v232 + v235;
        float v237 = 8191.0;
        BOOL v224 = (float)(v232 + v235) <= 8191.0;
        float v238 = 8191.0;
        if (v224)
        {
          float v238 = v236;
          if (v236 < 0.0) {
            float v238 = 0.0;
          }
        }
        float v239 = v233 + v235;
        BOOL v224 = (float)(v233 + v235) <= 8191.0;
        float v240 = 8191.0;
        if (v224)
        {
          float v240 = v239;
          if (v239 < 0.0) {
            float v240 = 0.0;
          }
        }
        float v241 = v234 + v235;
        if (v241 <= 8191.0)
        {
          float v237 = v241;
          if (v241 < 0.0) {
            float v237 = 0.0;
          }
        }
        if (v114)
        {
          float v242 = (float)(*v114 >> v81) - v44;
          float v243 = (float)(v114[1] >> v81) - v44;
          float v244 = v114 + 2;
          float v245 = _S15 * v243;
          float v246 = (float)(v105 * v243) + (float)(v242 * _S14);
          float v247 = _S29 * v242;
        }
        else
        {
          float v244 = 0;
          float v247 = 0.0;
          float v246 = 0.0;
          float v245 = 0.0;
        }
        float v248 = _S31 * (float)((float)(v113->u16[0] >> v81) - v41);
        float v249 = v245 + v248;
        float v250 = 8191.0;
        float v251 = 8191.0;
        if (v249 <= 8191.0)
        {
          float v251 = v249;
          if (v249 < 0.0) {
            float v251 = 0.0;
          }
        }
        float v252 = v246 + v248;
        float v253 = 8191.0;
        if (v252 <= 8191.0)
        {
          float v253 = v252;
          if (v252 < 0.0) {
            float v253 = 0.0;
          }
        }
        float v254 = v247 + v248;
        if (v254 <= 8191.0)
        {
          float v250 = v254;
          if (v254 < 0.0) {
            float v250 = 0.0;
          }
        }
        if (v244)
        {
          float v255 = (float)(*v244 >> v81) - v44;
          float v256 = (float)(v244[1] >> v81) - v44;
          float v114 = v244 + 2;
          float v257 = _S15 * v256;
          float v258 = (float)(v105 * v256) + (float)(v255 * _S14);
          float v259 = _S29 * v255;
        }
        else
        {
          float v114 = 0;
          float v259 = 0.0;
          float v258 = 0.0;
          float v257 = 0.0;
        }
        float v260 = _S31 * (float)((float)(v113->u16[1] >> v81) - v41);
        float v261 = 8191.0;
        if ((float)(v257 + v260) <= 8191.0)
        {
          float v261 = v257 + v260;
          if ((float)(v257 + v260) < 0.0) {
            float v261 = 0.0;
          }
        }
        float v262 = v258 + v260;
        float v263 = 8191.0;
        if (v262 <= 8191.0)
        {
          float v263 = v262;
          if (v262 < 0.0) {
            float v263 = 0.0;
          }
        }
        float v264 = v259 + v260;
        BOOL v224 = (float)(v259 + v260) <= 8191.0;
        float v265 = 8191.0;
        if (v224)
        {
          float v265 = v264;
          if (v264 < 0.0) {
            float v265 = 0.0;
          }
        }
        _H1 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v225, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        _H7 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v227, 0.0), 8191.0)));
        __asm { FCVT            S7, H7 }
        _H20 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v229, 0.0), 8191.0)));
        __asm { FCVT            S20, H20 }
        _H27 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v238, 0.0), 8191.0)));
        _H29 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v240, 0.0), 8191.0)));
        _H24 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v237, 0.0), 8191.0)));
        _H12 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v251, 0.0), 8191.0)));
        _H13 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v253, 0.0), 8191.0)));
        _H30 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v250, 0.0), 8191.0)));
        _H17 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v261, 0.0), 8191.0)));
        _H21 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v263, 0.0), 8191.0)));
        _H23 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v265, 0.0), 8191.0)));
        float v281 = (float)((float)((float)(_S5 * _S7) + (float)(v404 * _S1)) + (float)(_S18 * _S20))
             + (float)(v410 * fmaxf(_S1, fmaxf(_S7, _S20)));
        float v282 = 8191.0;
        if (v281 <= 8191.0)
        {
          float v282 = v281;
          if (v281 < 0.0) {
            float v282 = 0.0;
          }
        }
        float v283 = _S31;
        float v284 = v41;
        __asm
        {
          FCVT            S14, H27
          FCVT            S15, H29
          FCVT            S25, H24
        }
        _H27 = *(_WORD *)(v50 + 2 * llroundf(v282));
        float v289 = (float)((float)((float)(_S5 * _S15) + (float)(v404 * _S14)) + (float)(_S18 * _S25))
             + (float)(v410 * fmaxf(_S14, fmaxf(_S15, _S25)));
        float v290 = 8191.0;
        if (v289 <= 8191.0)
        {
          float v290 = v289;
          if (v289 < 0.0) {
            float v290 = 0.0;
          }
        }
        __asm
        {
          FCVT            S9, H12
          FCVT            S10, H13
          FCVT            S26, H30
        }
        _H28 = *(_WORD *)(v50 + 2 * llroundf(v290));
        float v295 = fmaxf(_S9, fmaxf(_S10, _S26));
        float v296 = (float)((float)((float)(_S5 * _S10) + (float)(v404 * _S9)) + (float)(_S18 * _S26)) + (float)(v410 * v295);
        float v297 = 8191.0;
        if (v296 <= 8191.0)
        {
          float v297 = (float)((float)((float)(_S5 * _S10) + (float)(v404 * _S9)) + (float)(_S18 * _S26))
               + (float)(v410 * v295);
          if (v296 < 0.0) {
            float v297 = 0.0;
          }
        }
        __asm
        {
          FCVT            S30, H17
          FCVT            S12, H21
          FCVT            S13, H23
          FCVT            S17, H27
        }
        float v302 = _S1 * _S17;
        float v303 = _S7 * _S17;
        float v304 = _S20 * _S17;
        __asm { FCVT            S1, H28 }
        float v306 = _S14 * _S1;
        float v307 = _S15 * _S1;
        float v308 = _S25 * _S1;
        LOWORD(_S1) = *(_WORD *)(v50 + 2 * llroundf(v297));
        __asm { FCVT            S7, H1 }
        float v310 = _S9 * _S7;
        float v311 = _S10 * _S7;
        float v312 = _S26 * _S7;
        float v313 = (float)((float)((float)(_S5 * _S12) + (float)(v404 * _S30)) + (float)(_S18 * _S13))
             + (float)(v410 * fmaxf(_S30, fmaxf(_S12, _S13)));
        float v314 = 8191.0;
        if (v313 <= 8191.0)
        {
          float v314 = v313;
          if (v313 < 0.0) {
            float v314 = 0.0;
          }
        }
        _H25 = *(_WORD *)(v50 + 2 * llroundf(v314));
        __asm { FCVT            S25, H25 }
        float v317 = _S30 * _S25;
        float v318 = _S12 * _S25;
        float v319 = _S13 * _S25;
        float v320 = (float)((float)(v419 * v303) + (float)(v302 * v420)) + (float)(v304 * v418);
        float v321 = (float)((float)(v416 * v303) + (float)(v302 * v417)) + (float)(v304 * v413);
        _S24 = (float)((float)(v409 * v303) + (float)(v302 * v412)) + (float)(v304 * v406);
        float v323 = (float)((float)(v419 * v307) + (float)(v306 * v420)) + (float)(v308 * v418);
        float v324 = (float)((float)(v416 * v307) + (float)(v306 * v417)) + (float)(v308 * v413);
        _S21 = (float)((float)(v409 * v307) + (float)(v306 * v412)) + (float)(v308 * v406);
        float v326 = (float)((float)(v419 * v311) + (float)(v310 * v420)) + (float)(v312 * v418);
        float v327 = (float)((float)(v416 * v311) + (float)(v310 * v417)) + (float)(v312 * v413);
        float v328 = (float)((float)(v409 * v311) + (float)(v310 * v412)) + (float)(v312 * v406);
        _S7 = (float)(v416 * v318) + (float)(v317 * v417);
        _S17 = (float)(v409 * v318) + (float)(v317 * v412);
        _S26 = (float)((float)(v419 * v318) + (float)(v317 * v420)) + (float)(v319 * v418);
        float v332 = _S7 + (float)(v319 * v413);
        float v333 = _S17 + (float)(v319 * v406);
        _H1 = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(v320, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        LOWORD(_S7) = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(v321, 0.0), 8191.0)));
        __asm { FCVT            S7, H7 }
        LOWORD(_S17) = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
        _H20 = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(v323, 0.0), 8191.0)));
        __asm
        {
          FCVT            S17, H17
          FCVT            S20, H20
        }
        _H23 = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(v324, 0.0), 8191.0)));
        __asm { FCVT            S23, H23 }
        LOWORD(_S21) = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
        __asm { FCVT            S21, H21 }
        LOWORD(_S24) = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(v326, 0.0), 8191.0)));
        __asm { FCVT            S30, H24 }
        LOWORD(_S24) = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(v327, 0.0), 8191.0)));
        __asm { FCVT            S12, H24 }
        LOWORD(_S24) = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(v328, 0.0), 8191.0)));
        LOWORD(_S26) = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
        __asm
        {
          FCVT            S13, H24
          FCVT            S24, H26
        }
        LOWORD(_S26) = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(v332, 0.0), 8191.0)));
        unsigned int v347 = llroundf(fminf(fmaxf(v333, 0.0), 8191.0));
        __asm { FCVT            S25, H26 }
        _H0 = *(_WORD *)(v68 + 2 * v347);
        __asm { FCVT            S26, H0 }
        float v351 = (float)((float)((float)(v421 * _S7) + (float)(v422 * _S1)) + (float)(v434 * _S17)) + v403;
        if (v351 < v403) {
          float v352 = v403;
        }
        else {
          float v352 = (float)((float)((float)(v421 * _S7) + (float)(v422 * _S1)) + (float)(v434 * _S17)) + v403;
        }
        BOOL v224 = v351 <= v414;
        float v353 = (float)((float)((float)(v421 * _S23) + (float)(v422 * _S20)) + (float)(v434 * _S21)) + v403;
        if (!v224) {
          float v352 = v414;
        }
        unsigned int v354 = llroundf(v352);
        if (v353 < v403) {
          float v355 = v403;
        }
        else {
          float v355 = (float)((float)((float)(v421 * _S23) + (float)(v422 * _S20)) + (float)(v434 * _S21)) + v403;
        }
        BOOL v224 = v353 <= v414;
        float v356 = (float)((float)((float)(v421 * _S12) + (float)(v422 * _S30)) + (float)(v434 * _S13)) + v403;
        if (!v224) {
          float v355 = v414;
        }
        unsigned int v357 = llroundf(v355);
        if (v356 < v403) {
          float v358 = v403;
        }
        else {
          float v358 = (float)((float)((float)(v421 * _S12) + (float)(v422 * _S30)) + (float)(v434 * _S13)) + v403;
        }
        BOOL v224 = v356 <= v414;
        float v359 = (float)((float)((float)(v421 * _S25) + (float)(v422 * _S24)) + (float)(v434 * _S26)) + v403;
        if (!v224) {
          float v358 = v414;
        }
        unsigned int v360 = llroundf(v358);
        if (v359 < v403) {
          float v361 = v403;
        }
        else {
          float v361 = (float)((float)((float)(v421 * _S25) + (float)(v422 * _S24)) + (float)(v434 * _S26)) + v403;
        }
        if (v359 <= v414) {
          float v362 = v361;
        }
        else {
          float v362 = v414;
        }
        unsigned int v363 = llroundf(v362);
        float v364 = (float)((float)(_S1 + _S20) + _S30) + _S24;
        float v365 = (float)((float)(_S7 + _S23) + _S12) + _S25;
        v66->i16[0] = v354 << v82;
        v66->i16[1] = v357 << v82;
        v111->i16[0] = v360 << v82;
        v111->i16[1] = v363 << v82;
        float v366 = (float)((float)(_S17 + _S21) + _S13) + _S26;
        float v367 = (float)((float)(v433 + (float)(v364 * v431)) + (float)(v365 * *(float *)&v107))
             + (float)(v366 * *(float *)&v108);
        float v368 = v432;
        _S14 = v442;
        _S15 = v443;
        float v105 = v441;
        if (v367 <= v432)
        {
          float v368 = (float)((float)(v433 + (float)(v364 * v431)) + (float)(v365 * *(float *)&v107))
               + (float)(v366 * *(float *)&v108);
          if (v367 < v440) {
            float v368 = v440;
          }
        }
        float v369 = (float)((float)(v433 + (float)(v364 * v386)) + (float)(v365 * *((float *)&v107 + 1)))
             + (float)(v366 * *((float *)&v108 + 1));
        v115->i16[0] = llroundf(v368) << v82;
        float v370 = v432;
        float v41 = v284;
        _S31 = v283;
        if (v369 <= v432)
        {
          float v370 = v369;
          if (v369 < v440) {
            float v370 = v440;
          }
        }
        v215 += 2;
        float v79 = (uint16x8_t *)((char *)v79 + 4);
        float v113 = (uint16x8_t *)((char *)v113 + 4);
        v115->i16[1] = llroundf(v370) << v82;
        float16x8_t v66 = (uint16x8_t *)((char *)v66 + 4);
        float v111 = (uint16x8_t *)((char *)v111 + 4);
        float v115 = (uint16x8_t *)((char *)v115 + 4);
        _S29 = v405;
        _H11 = v407;
        float16x8_t v67 = v408;
        float v44 = v411;
      }
      uint64_t v33 = v380;
      uint64_t v32 = v381;
      float v79 = (uint16x8_t *)&v109[v381];
      float v78 = (unsigned __int16 *)((char *)v110 + v380);
      uint64_t v35 = v379;
      float16x8_t v66 = (uint16x8_t *)&v382[v379];
      int32x4_t v65 = (uint16x8_t *)((char *)v65 + v378);
      v21 += 2;
    }
    while (v25 > v21);
    if (v377 && v376)
    {
      size_t v371 = 2 * v80;
      uint64_t v372 = __src;
      do
      {
        double result = (unint64_t)memcpy(v51, v372, v371);
        v372 += v374;
        v51 += v375;
        --v25;
      }
      while (v25);
    }
    else if (v376)
    {
      do
      {
        if (v80) {
          double result = (unint64_t)memset(v51, 255, 2 * v80);
        }
        v51 += v375;
        --v25;
      }
      while (v25);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Tone_Mat_TRC_xf420_GCD(void *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4 = *(void *)((char *)result + 28);
  unint64_t v5 = 2 * *(unsigned __int8 *)result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    unint64_t v9 = *(void *)((char *)result + 20);
    uint64_t v10 = *(void *)((char *)result + 36);
    uint64_t v11 = *(void *)((char *)result + 44) + 2 * v6;
    unint64_t v12 = 2 * v7 - 2 * v6;
    uint64_t v13 = result[14];
    uint64_t v14 = (void *)result[16];
    uint64_t v15 = result[15] + 2 * (result[13] * a2 / v5);
    uint64_t v16 = result[19];
    uint64_t v17 = (void *)result[7];
    uint64_t v18 = (uint64_t *)result[8];
    uint64_t v19 = (uint64_t *)result[17];
    uint64_t v20 = *v18;
    uint64_t v21 = v18[1];
    uint64_t v218 = v18[2];
    uint64_t v221 = v17[2];
    size_t v22 = (char *)(v221 + v218 * v11 + 2 * v10);
    uint64_t v23 = *v19;
    uint64_t v219 = v19[2];
    uint64_t v220 = v14[2];
    uint64_t v24 = (char *)(v220 + v219 * v15 + 2 * v13);
    float v25 = 8191.0;
    *(float *)&unsigned int v26 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    float v27 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    float v28 = (float)LODWORD(a4);
    float v29 = *(float *)&v26 * *(float *)v16;
    float v30 = *(float *)&v26 * *(float *)(v16 + 8);
    float v31 = *(float *)&v26 * *(float *)(v16 + 16);
    float v32 = *(float *)&v26 * *(float *)(v16 + 20);
    float v33 = *(float *)&v26 * *(float *)(v16 + 28);
    LOWORD(v26) = *(_WORD *)(v16 + 144);
    float v34 = (float)v26;
    LOWORD(v26) = *(_WORD *)(v16 + 146);
    *(float *)&unsigned int v35 = (float)v26;
    float v247 = *(float *)&v35;
    LOWORD(v35) = *(_WORD *)(v16 + 148);
    float v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v16 + 150);
    *(float *)&unsigned int v37 = (float)v35;
    float v252 = *(float *)&v37;
    LOWORD(v37) = *(_WORD *)(v16 + 152);
    float v245 = *(float *)(v16 + 36);
    float v246 = (float)v37;
    float v243 = *(float *)(v16 + 44);
    float v244 = *(float *)(v16 + 40);
    float v241 = *(float *)(v16 + 52) * 0.25;
    float v242 = *(float *)(v16 + 48) * 0.25;
    float v239 = *(float *)(v16 + 60) * 0.25;
    float v240 = *(float *)(v16 + 56) * 0.25;
    float v237 = *(float *)(v16 + 72);
    float v238 = *(float *)(v16 + 64) * 0.25;
    float v235 = *(float *)(v16 + 76);
    float v236 = *(float *)(v16 + 68) * 0.25;
    float v233 = *(float *)(v16 + 84);
    float v234 = *(float *)(v16 + 80);
    float v231 = *(float *)(v16 + 88);
    float v228 = *(float *)(v16 + 96);
    float v229 = *(float *)(v16 + 92);
    float v226 = *(float *)(v16 + 104);
    float v227 = *(float *)(v16 + 100);
    uint64_t v38 = v16 + 164;
    uint64_t v39 = v16 + 16548;
    double result = (void *)(v16 + 32932);
    uint64_t v40 = v17[1];
    float v41 = (char *)(*v17 + *v18 * v11 + 2 * v10);
    if (v40) {
      unsigned int v42 = (char *)(v40 + v21 * v11 + 2 * v10);
    }
    else {
      unsigned int v42 = 0;
    }
    unsigned int v43 = *(unsigned __int8 *)(v16 + 132);
    if (v43 >= 0x11) {
      char v44 = 0;
    }
    else {
      char v44 = 16 - v43;
    }
    unsigned int v45 = *(unsigned __int8 *)(v16 + 124);
    char v46 = 16 - v45;
    uint64_t v47 = v14[1];
    float32x2_t v48 = (char *)(*v14 + v23 * v15 + 2 * v13);
    if (v45 >= 0x11) {
      char v46 = 0;
    }
    uint64_t v222 = v19[1];
    uint64_t v49 = v47 + v222 * (v15 / 2) + 2 * v13;
    char v50 = v44;
    float v51 = *(float *)(v16 + 108);
    float v52 = *(float *)(v16 + 112);
    float v54 = *(float *)(v16 + 116);
    float v53 = *(float *)(v16 + 120);
    float v250 = v31;
    float v251 = v30;
    float v248 = v33;
    float v249 = v32;
    float v225 = (float)LODWORD(a4);
    float v232 = v27;
    float v230 = v29;
    float v223 = v54;
    float v224 = v52;
    do
    {
      unsigned __int8 v55 = &v48[v23];
      uint64_t v56 = &v42[v21];
      uint64_t v57 = &v41[v20];
      if (v9)
      {
        unint64_t v58 = 0;
        char v59 = &v41[v20];
        size_t v60 = &v42[v21];
        float v61 = &v48[v23];
        do
        {
          if (v42)
          {
            float v62 = (float)(*(unsigned __int16 *)v42 >> v46) - v28;
            float v63 = (float)(*((unsigned __int16 *)v42 + 1) >> v46) - v28;
            v42 += 4;
            float v64 = v30 * v63;
            float v65 = (float)(v32 * v63) + (float)(v62 * v31);
            float v66 = v33 * v62;
          }
          else
          {
            float v66 = 0.0;
            float v65 = 0.0;
            float v64 = 0.0;
          }
          float v67 = v29 * (float)((float)(*(unsigned __int16 *)v41 >> v46) - v27);
          float v68 = v64 + v67;
          BOOL v69 = (float)(v64 + v67) <= 8191.0;
          float v70 = 8191.0;
          if (v69)
          {
            float v70 = v68;
            if (v68 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v65 + v67;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v66 + v67;
          if (v73 <= 8191.0)
          {
            float v25 = v73;
            if (v73 < 0.0) {
              float v25 = 0.0;
            }
          }
          if (v42)
          {
            float v74 = (float)(*(unsigned __int16 *)v42 >> v46) - v28;
            float v75 = (float)(*((unsigned __int16 *)v42 + 1) >> v46) - v28;
            v42 += 4;
            float v76 = v30 * v75;
            float v77 = (float)(v32 * v75) + (float)(v74 * v31);
            float v78 = v33 * v74;
          }
          else
          {
            float v78 = 0.0;
            float v77 = 0.0;
            float v76 = 0.0;
          }
          float v79 = v29 * (float)((float)(*((unsigned __int16 *)v41 + 1) >> v46) - v27);
          float v80 = v76 + v79;
          float v81 = 8191.0;
          float v82 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v82 = v80;
            if (v80 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v77 + v79;
          float v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v78 + v79;
          if (v85 <= 8191.0)
          {
            float v81 = v85;
            if (v85 < 0.0) {
              float v81 = 0.0;
            }
          }
          if (v60)
          {
            float v86 = (float)(*(unsigned __int16 *)v60 >> v46) - v28;
            float v87 = (float)(*((unsigned __int16 *)v60 + 1) >> v46) - v28;
            v60 += 4;
            float v88 = v30 * v87;
            float v89 = (float)(v32 * v87) + (float)(v86 * v31);
            float v90 = v33 * v86;
          }
          else
          {
            float v90 = 0.0;
            float v89 = 0.0;
            float v88 = 0.0;
          }
          float v91 = v29 * (float)((float)(*(unsigned __int16 *)v59 >> v46) - v27);
          float v92 = v88 + v91;
          float v93 = 8191.0;
          BOOL v69 = (float)(v88 + v91) <= 8191.0;
          float v94 = 8191.0;
          if (v69)
          {
            float v94 = v92;
            if (v92 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v89 + v91;
          BOOL v69 = (float)(v89 + v91) <= 8191.0;
          float v96 = 8191.0;
          if (v69)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v90 + v91;
          if (v97 <= 8191.0)
          {
            float v93 = v97;
            if (v97 < 0.0) {
              float v93 = 0.0;
            }
          }
          if (v60)
          {
            float v98 = (float)(*(unsigned __int16 *)v60 >> v46) - v28;
            float v99 = (float)(*((unsigned __int16 *)v60 + 1) >> v46) - v28;
            v60 += 4;
            float v100 = v30 * v99;
            float v101 = (float)(v32 * v99) + (float)(v98 * v31);
            float v102 = v33 * v98;
          }
          else
          {
            float v102 = 0.0;
            float v101 = 0.0;
            float v100 = 0.0;
          }
          float v103 = v29 * (float)((float)(*((unsigned __int16 *)v59 + 1) >> v46) - v27);
          float v104 = v100 + v103;
          BOOL v69 = (float)(v100 + v103) <= 8191.0;
          float v105 = 8191.0;
          if (v69)
          {
            float v105 = v104;
            if (v104 < 0.0) {
              float v105 = 0.0;
            }
          }
          float v106 = v101 + v103;
          float v107 = 8191.0;
          if (v106 <= 8191.0)
          {
            float v107 = v106;
            if (v106 < 0.0) {
              float v107 = 0.0;
            }
          }
          float v108 = v102 + v103;
          BOOL v69 = (float)(v102 + v103) <= 8191.0;
          float v109 = 8191.0;
          if (v69)
          {
            float v109 = v108;
            if (v108 < 0.0) {
              float v109 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H20 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          unsigned int v117 = llroundf(fminf(fmaxf(v25, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *(_WORD *)(v38 + 2 * v117);
          __asm { FCVT            S30, H20 }
          _H20 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          float v130 = fmaxf(_S0, fmaxf(_S19, _S30));
          float v131 = (float)((float)((float)(v52 * _S19) + (float)(v51 * _S0)) + (float)(v54 * _S30)) + (float)(v53 * v130);
          float v132 = 8191.0;
          if (v131 <= 8191.0)
          {
            float v132 = (float)((float)((float)(v52 * _S19) + (float)(v51 * _S0)) + (float)(v54 * _S30))
                 + (float)(v53 * v130);
            if (v131 < 0.0) {
              float v132 = 0.0;
            }
          }
          __asm
          {
            FCVT            S21, H20
            FCVT            S22, H29
            FCVT            S23, H31
          }
          _H20 = *(_WORD *)(v39 + 2 * llroundf(v132));
          float v137 = (float)((float)((float)(v52 * _S22) + (float)(v51 * _S21)) + (float)(v54 * _S23))
               + (float)(v53 * fmaxf(_S21, fmaxf(_S22, _S23)));
          float v138 = 8191.0;
          if (v137 <= 8191.0)
          {
            float v138 = v137;
            if (v137 < 0.0) {
              float v138 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H5
            FCVT            S10, H6
            FCVT            S11, H7
          }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(v138));
          float v143 = fmaxf(_S9, fmaxf(_S10, _S11));
          float v144 = (float)((float)((float)(v52 * _S10) + (float)(v51 * _S9)) + (float)(v54 * _S11)) + (float)(v53 * v143);
          float v145 = 8191.0;
          if (v144 <= 8191.0)
          {
            float v145 = (float)((float)((float)(v52 * _S10) + (float)(v51 * _S9)) + (float)(v54 * _S11))
                 + (float)(v53 * v143);
            if (v144 < 0.0) {
              float v145 = 0.0;
            }
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H4
            FCVT            S1, H20
          }
          float v150 = _S0 * _S1;
          float v151 = _S19 * _S1;
          float v152 = _S30 * _S1;
          __asm { FCVT            S0, H5 }
          float v154 = _S21 * _S0;
          float v155 = _S22 * _S0;
          float v156 = _S23 * _S0;
          LOWORD(_S0) = *(_WORD *)(v39 + 2 * llroundf(v145));
          __asm { FCVT            S1, H0 }
          float v158 = _S9 * _S1;
          float v159 = _S10 * _S1;
          float v160 = _S11 * _S1;
          float v161 = (float)((float)((float)(v52 * _S31) + (float)(v51 * _S29)) + (float)(v54 * _S8))
               + (float)(v53 * fmaxf(_S29, fmaxf(_S31, _S8)));
          float v162 = 8191.0;
          if (v161 <= 8191.0)
          {
            float v162 = v161;
            if (v161 < 0.0) {
              float v162 = 0.0;
            }
          }
          _H21 = *(_WORD *)(v39 + 2 * llroundf(v162));
          __asm { FCVT            S21, H21 }
          float v165 = _S29 * _S21;
          float v166 = _S31 * _S21;
          float v167 = _S8 * _S21;
          float v168 = (float)((float)(v235 * v151) + (float)(v150 * v237)) + (float)(v152 * v234);
          float v169 = (float)((float)(v231 * v151) + (float)(v150 * v233)) + (float)(v152 * v229);
          _S7 = (float)((float)(v227 * v151) + (float)(v150 * v228)) + (float)(v152 * v226);
          _S19 = (float)((float)(v235 * v155) + (float)(v154 * v237)) + (float)(v156 * v234);
          _S20 = (float)((float)(v231 * v155) + (float)(v154 * v233)) + (float)(v156 * v229);
          _S5 = (float)((float)(v227 * v155) + (float)(v154 * v228)) + (float)(v156 * v226);
          float v174 = (float)((float)(v235 * v159) + (float)(v158 * v237)) + (float)(v160 * v234);
          float v175 = (float)((float)(v231 * v159) + (float)(v158 * v233)) + (float)(v160 * v229);
          float v176 = (float)((float)(v227 * v159) + (float)(v158 * v228)) + (float)(v160 * v226);
          _S1 = (float)(v231 * v166) + (float)(v165 * v233);
          _S3 = (float)(v227 * v166) + (float)(v165 * v228);
          _S22 = (float)((float)(v235 * v166) + (float)(v165 * v237)) + (float)(v167 * v234);
          _S23 = _S1 + (float)(v167 * v229);
          float v181 = _S3 + (float)(v167 * v226);
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S4, H4
          }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S5) = *((_WORD *)result + llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v174, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S19) = *((_WORD *)result + llroundf(fminf(fmaxf(v175, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *((_WORD *)result + llroundf(fminf(fmaxf(v176, 0.0), 8191.0)));
          LOWORD(_S22) = *((_WORD *)result + llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm
          {
            FCVT            S21, H20
            FCVT            S20, H22
          }
          LOWORD(_S22) = *((_WORD *)result + llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *((_WORD *)result + llroundf(fminf(fmaxf(v181, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          float v197 = (float)((float)((float)(v244 * _S1) + (float)(v245 * _S0)) + (float)(v243 * _S3)) + v34;
          if (v197 < v34) {
            float v198 = v34;
          }
          else {
            float v198 = (float)((float)((float)(v244 * _S1) + (float)(v245 * _S0)) + (float)(v243 * _S3)) + v34;
          }
          BOOL v69 = v197 <= v36;
          float v199 = (float)((float)((float)(v244 * _S6) + (float)(v245 * _S4)) + (float)(v243 * _S5)) + v34;
          if (!v69) {
            float v198 = v36;
          }
          unsigned int v200 = llroundf(v198);
          if (v199 < v34) {
            float v201 = v34;
          }
          else {
            float v201 = (float)((float)((float)(v244 * _S6) + (float)(v245 * _S4)) + (float)(v243 * _S5)) + v34;
          }
          BOOL v69 = v199 <= v36;
          float v202 = (float)((float)((float)(v244 * _S19) + (float)(v245 * _S7)) + (float)(v243 * _S21)) + v34;
          if (!v69) {
            float v201 = v36;
          }
          unsigned int v203 = llroundf(v201);
          if (v202 < v34) {
            float v204 = v34;
          }
          else {
            float v204 = (float)((float)((float)(v244 * _S19) + (float)(v245 * _S7)) + (float)(v243 * _S21)) + v34;
          }
          BOOL v69 = v202 <= v36;
          float v205 = (float)((float)((float)(v244 * _S22) + (float)(v245 * _S20)) + (float)(v243 * _S23)) + v34;
          if (!v69) {
            float v204 = v36;
          }
          unsigned int v206 = llroundf(v204);
          if (v205 < v34) {
            float v207 = v34;
          }
          else {
            float v207 = (float)((float)((float)(v244 * _S22) + (float)(v245 * _S20)) + (float)(v243 * _S23)) + v34;
          }
          if (v205 <= v36) {
            float v208 = v207;
          }
          else {
            float v208 = v36;
          }
          float v209 = (float)((float)(_S0 + _S4) + _S7) + _S20;
          float v210 = (float)((float)(_S1 + _S6) + _S19) + _S22;
          *(_WORD *)float32x2_t v48 = v200 << v50;
          *((_WORD *)v48 + 1) = v203 << v50;
          *(_WORD *)float v61 = v206 << v50;
          *((_WORD *)v61 + 1) = llroundf(v208) << v50;
          float v211 = (float)((float)(_S3 + _S5) + _S21) + _S23;
          float v212 = (float)((float)(v247 + (float)(v209 * v242)) + (float)(v210 * v241)) + (float)(v211 * v240);
          float v213 = v246;
          if (v212 <= v246)
          {
            float v213 = (float)((float)(v247 + (float)(v209 * v242)) + (float)(v210 * v241)) + (float)(v211 * v240);
            if (v212 < v252) {
              float v213 = v252;
            }
          }
          int16x8_t v214 = (_WORD *)(v49 + 2 * v58);
          float v215 = (float)((float)(v247 + (float)(v209 * v239)) + (float)(v210 * v238)) + (float)(v211 * v236);
          *int16x8_t v214 = llroundf(v213) << v50;
          float v216 = v246;
          float v27 = v232;
          float v29 = v230;
          float v30 = v251;
          if (v215 <= v246)
          {
            float v216 = v215;
            if (v215 < v252) {
              float v216 = v252;
            }
          }
          v41 += 4;
          v59 += 4;
          v48 += 4;
          v61 += 4;
          v214[1] = llroundf(v216) << v50;
          v58 += 2;
          float v32 = v249;
          float v31 = v250;
          float v33 = v248;
          float v25 = 8191.0;
          float v28 = v225;
          float v54 = v223;
          float v52 = v224;
        }
        while (v9 > v58);
      }
      float v41 = &v57[v20];
      unsigned int v42 = &v56[v21];
      float32x2_t v48 = &v55[v23];
      v49 += v222;
      v8 += 2;
    }
    while (v12 > v8);
    if (v221 && v220)
    {
      size_t v217 = 2 * v9;
      do
      {
        double result = memcpy(v24, v22, v217);
        v22 += v218;
        v24 += v219;
        --v12;
      }
      while (v12);
    }
    else if (v220)
    {
      do
      {
        if (v9) {
          double result = memset(v24, 255, 2 * v9);
        }
        v24 += v219;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_xf444_TRC_Mat_TRC_xf420_neon_fp16_GCD(unint64_t result, uint64_t a2, double a3, float32x4_t a4, double a5, double a6, double a7, double a8, double a9, float32x4_t a10)
{
  uint64_t v17 = *(void *)(result + 28);
  unint64_t v18 = 2 * *(unsigned __int8 *)result;
  unint64_t v19 = v17 * a2 / v18;
  unint64_t v20 = (v17 + v17 * a2) / v18;
  if (2 * v20 != 2 * v19)
  {
    unint64_t v21 = 0;
    uint64_t v22 = *(void *)(result + 36);
    uint64_t v23 = *(void *)(result + 44) + 2 * v19;
    uint64_t v24 = *(void *)(result + 112);
    unint64_t v25 = 2 * v20 - 2 * v19;
    uint64_t v26 = *(void *)(result + 152);
    float v27 = *(uint64_t **)(result + 56);
    uint64_t v28 = *(uint64_t **)(result + 64);
    uint64_t v29 = *(void **)(result + 128);
    uint64_t v30 = *(uint64_t **)(result + 136);
    uint64_t v31 = *v28;
    uint64_t v32 = v28[1];
    uint64_t v34 = *v30;
    uint64_t v33 = v30[1];
    uint64_t v35 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v18);
    uint64_t v312 = v28[2];
    uint64_t v313 = v30[2];
    uint64_t v314 = v29[2];
    uint64_t v315 = v27[2];
    __vImage_Buffer src = (char *)(v315 + v312 * v23 + 2 * v22);
    unsigned int v36 = *(unsigned __int16 *)(v26 + 140);
    unsigned int v37 = *(unsigned __int16 *)(v26 + 142);
    LODWORD(v30) = *(unsigned __int16 *)(v26 + 144);
    unsigned int v38 = *(unsigned __int16 *)(v26 + 146);
    float v39 = (float)v36;
    *(short float *)v16.i16 = (short float)v36;
    unsigned int v40 = *(unsigned __int16 *)(v26 + 148);
    _S28 = *(float *)(v26 + 44);
    float v42 = (float)v37;
    short float v43 = (short float)v37;
    unsigned int v45 = *(unsigned __int16 *)(v26 + 150);
    float v46 = (float)v30;
    *(short float *)v10.i16 = (short float)v30;
    LODWORD(v30) = *(unsigned __int16 *)(v26 + 152);
    float v360 = (float)v38;
    float v339 = (float)v40;
    float v366 = (float)v45;
    float v359 = (float)v30;
    *(short float *)v12.i16 = (short float)v38;
    *(short float *)v13.i16 = (short float)v40;
    *(short float *)v14.i16 = (short float)v45;
    *(short float *)v15.i16 = (short float)v30;
    unsigned int v47 = *(unsigned __int8 *)(v26 + 132);
    unsigned __int8 v48 = 16 - v47;
    if (v47 >= 0x11) {
      unsigned __int8 v48 = 0;
    }
    unsigned int v49 = *(unsigned __int8 *)(v26 + 124);
    unsigned __int8 v50 = 16 - v49;
    if (v49 >= 0x11) {
      unsigned __int8 v50 = 0;
    }
    if (v35 >= 0) {
      uint64_t v51 = v35;
    }
    else {
      uint64_t v51 = v35 + 1;
    }
    uint64_t v316 = v33;
    uint64_t v52 = v29[1] + v33 * (v51 >> 1);
    uint64_t v53 = v26 + 164;
    float v54 = (char *)(v314 + v313 * v35 + 2 * v24);
    uint64_t v55 = *v29 + v34 * v35;
    float v56 = 8191.0 / (float)*(unsigned int *)(v26 + 128);
    _S22 = v56 * *(float *)v26;
    _S29 = v56 * *(float *)(v26 + 8);
    _S11 = v56 * *(float *)(v26 + 16);
    _S9 = v56 * *(float *)(v26 + 20);
    float v61 = v56 * *(float *)(v26 + 28);
    float v62 = (uint16x8_t *)(v52 + 2 * v24);
    float v63 = (uint16x8_t *)(v55 + 2 * v24);
    uint64_t v64 = v26 + 16548;
    _Q0 = vdupq_lane_s16(v16, 0);
    float16x8_t v320 = (float16x8_t)_Q0;
    *(short float *)_Q0.i16 = -v43;
    float16x8_t v365 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    __asm { FMOV            V0.2S, #0.25 }
    v44.i32[1] = *(_DWORD *)(v26 + 60);
    v44.i32[0] = *(_DWORD *)(v26 + 48);
    *(float32x2_t *)v11.f32 = vmul_f32(v44, *(float32x2_t *)_Q0.i8);
    float16x8_t v356 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v11), 0);
    a10.i32[1] = *(_DWORD *)(v26 + 64);
    a10.i32[0] = *(_DWORD *)(v26 + 52);
    *(float32x2_t *)a10.f32 = vmul_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)_Q0.i8);
    float16x8_t v355 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a10), 0);
    a4.i32[1] = *(_DWORD *)(v26 + 68);
    a4.i32[0] = *(_DWORD *)(v26 + 56);
    *(float32x2_t *)a4.f32 = vmul_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)_Q0.i8);
    float16x8_t v353 = (float16x8_t)vdupq_lane_s16(v10, 0);
    float16x8_t v354 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    float16x8_t v351 = (float16x8_t)vdupq_lane_s16(v13, 0);
    float16x8_t v352 = (float16x8_t)vdupq_lane_s16(v12, 0);
    float16x8_t v349 = (float16x8_t)vdupq_lane_s16(v15, 0);
    float16x8_t v350 = (float16x8_t)vdupq_lane_s16(v14, 0);
    _S24 = v61;
    uint16x8_t v71 = (uint16x8_t)vdupq_n_s16(-v50);
    uint64_t v72 = *v27;
    uint64_t v73 = *(void *)(*(void *)(result + 56) + 8);
    _ZF = v73 == 0;
    uint64_t v74 = v73 + v32 * v23 + 2 * v22;
    if (_ZF) {
      float v75 = 0;
    }
    else {
      float v75 = (char *)v74;
    }
    float v76 = (uint16x8_t *)(v72 + v31 * v23 + 2 * v22);
    unint64_t v77 = *(void *)(result + 20);
    double result = (v77 - 7);
    unsigned __int8 v78 = v50;
    unsigned __int8 v79 = v48;
    __asm
    {
      FCVT            H10, S22
      FCVT            H8, S24
    }
    short float v364 = _H8;
    __asm { FCVT            H8, S11 }
    short float v363 = _H8;
    __asm { FCVT            H8, S9 }
    short float v362 = _H8;
    __asm { FCVT            H8, S29 }
    short float v361 = _H8;
    float v348 = *(float *)(v26 + 36);
    __asm { FCVT            H0, S0 }
    short float v335 = _H0;
    float v346 = *(float *)(v26 + 40);
    __asm { FCVT            H0, S17 }
    short float v334 = _H0;
    __asm { FCVT            H0, S28 }
    short float v333 = _H0;
    float v341 = *(float *)(v26 + 72);
    __asm { FCVT            H0, S6 }
    short float v332 = _H0;
    float v340 = *(float *)(v26 + 76);
    __asm { FCVT            H0, S23 }
    short float v331 = _H0;
    float v337 = *(float *)(v26 + 80);
    __asm { FCVT            H0, S25 }
    short float v330 = _H0;
    float v338 = *(float *)(v26 + 84);
    __asm { FCVT            H0, S27 }
    short float v329 = _H0;
    float v345 = *(float *)(v26 + 88);
    __asm { FCVT            H0, S19 }
    short float v328 = _H0;
    float v347 = *(float *)(v26 + 92);
    __asm { FCVT            H0, S4 }
    short float v327 = _H0;
    float v344 = *(float *)(v26 + 96);
    __asm { FCVT            H0, S20 }
    short float v326 = _H0;
    float v343 = *(float *)(v26 + 100);
    __asm { FCVT            H0, S21 }
    short float v325 = _H0;
    float v342 = *(float *)(v26 + 104);
    __asm { FCVT            H0, S5 }
    short float v324 = _H0;
    float v357 = v11.f32[0];
    unint64_t v97 = a10.i64[0];
    float v323 = v11.f32[1];
    unint64_t v98 = a4.i64[0];
    uint16x8_t v322 = (uint16x8_t)vdupq_n_s16(v48);
    uint64_t v318 = v28[1];
    uint64_t v319 = *v28;
    uint64_t v317 = v34;
    float v358 = _S29;
    float v367 = _S11;
    float v336 = v42;
    float v321 = _S9;
    do
    {
      float v99 = &v76->i8[v31];
      float v100 = &v75[v32];
      float v101 = &v63->i8[v34];
      if ((int)v77 < 8)
      {
        unint64_t v187 = 0;
        float v106 = v62;
        float v105 = (uint16x8_t *)((char *)v63 + v34);
        float v104 = &v75[v32];
        float v103 = (uint16x8_t *)((char *)v76 + v31);
      }
      else
      {
        int v102 = 0;
        float v103 = (uint16x8_t *)((char *)v76 + v31);
        float v104 = &v75[v32];
        float v105 = (uint16x8_t *)((char *)v63 + v34);
        float v106 = v62;
        do
        {
          float16x8_t v107 = 0uLL;
          if (v75)
          {
            int16x8x2_t v368 = vld2q_s16((const __int16 *)v75);
            v75 += 32;
            float16x8_t v108 = vaddq_f16(v365, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v368.val[0], v71)));
            v368.val[0] = (int16x8_t)vaddq_f16(v365, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v368.val[1], v71)));
            float16x8_t v109 = vmulq_n_f16((float16x8_t)v368.val[0], v361);
            float16x8_t v110 = vmlaq_n_f16(vmulq_n_f16(v108, v363), (float16x8_t)v368.val[0], v362);
            float16x8_t v111 = vmulq_n_f16(v108, v364);
          }
          else
          {
            float16x8_t v111 = 0uLL;
            float16x8_t v110 = 0uLL;
            float16x8_t v109 = 0uLL;
          }
          uint16x8_t v112 = *v76++;
          float16x8_t v113 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v112, v71)), v320);
          float16x8_t v114 = vmlaq_n_f16(v109, v113, _H10);
          float16x8_t v115 = vmlaq_n_f16(v110, v113, _H10);
          float16x8_t v116 = vmlaq_n_f16(v111, v113, _H10);
          if (v104)
          {
            int16x8x2_t v369 = vld2q_s16((const __int16 *)v104);
            v104 += 32;
            float16x8_t v117 = vaddq_f16(v365, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v369.val[0], v71)));
            v369.val[0] = (int16x8_t)vaddq_f16(v365, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v369.val[1], v71)));
            float16x8_t v118 = vmulq_n_f16((float16x8_t)v369.val[0], v361);
            float16x8_t v119 = vmlaq_n_f16(vmulq_n_f16(v117, v363), (float16x8_t)v369.val[0], v362);
            float16x8_t v107 = vmulq_n_f16(v117, v364);
          }
          else
          {
            float16x8_t v119 = 0uLL;
            float16x8_t v118 = 0uLL;
          }
          uint16x8_t v120 = *v103++;
          float16x8_t v121 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v120, v71)), v320);
          float16x8_t v122 = vmlaq_n_f16(v118, v121, _H10);
          float16x8_t v123 = vmlaq_n_f16(v119, v121, _H10);
          float16x8_t v124 = vmlaq_n_f16(v107, v121, _H10);
          v125.i64[0] = 0x9000900090009000;
          v125.i64[1] = 0x9000900090009000;
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v125));
          uint32x4_t v127 = vmovl_high_u16(v126);
          uint32x4_t v128 = vmovl_u16(*(uint16x4_t *)v126.i8);
          v129.i16[0] = *(_WORD *)(v53 + 2 * v128.u32[0]);
          v129.i16[1] = *(_WORD *)(v53 + 2 * v128.u32[1]);
          v129.i16[2] = *(_WORD *)(v53 + 2 * v128.u32[2]);
          v129.i16[3] = *(_WORD *)(v53 + 2 * v128.u32[3]);
          v129.i16[4] = *(_WORD *)(v53 + 2 * v127.u32[0]);
          v129.i16[5] = *(_WORD *)(v53 + 2 * v127.u32[1]);
          v129.i16[6] = *(_WORD *)(v53 + 2 * v127.u32[2]);
          v129.i16[7] = *(_WORD *)(v53 + 2 * v127.u32[3]);
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v125));
          float16x8_t v131 = (float16x8_t)vmovl_high_u16(v130);
          *(void *)&long long v132 = v131.u32[2];
          *((void *)&v132 + 1) = v131.u32[3];
          long long v133 = v132;
          *(void *)&long long v132 = v131.u32[0];
          *((void *)&v132 + 1) = v131.u32[1];
          uint32x4_t v134 = vmovl_u16(*(uint16x4_t *)v130.i8);
          v131.i16[0] = *(_WORD *)(v53 + 2 * v134.u32[0]);
          v131.i16[1] = *(_WORD *)(v53 + 2 * v134.u32[1]);
          v131.i16[2] = *(_WORD *)(v53 + 2 * v134.u32[2]);
          v131.i16[3] = *(_WORD *)(v53 + 2 * v134.u32[3]);
          v131.i16[4] = *(_WORD *)(v53 + 2 * v132);
          v131.i16[5] = *(_WORD *)(v53 + 2 * *((void *)&v132 + 1));
          v131.i16[6] = *(_WORD *)(v53 + 2 * v133);
          v131.i16[7] = *(_WORD *)(v53 + 2 * *((void *)&v133 + 1));
          uint16x8_t v135 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v125));
          uint32x4_t v136 = vmovl_high_u16(v135);
          uint32x4_t v137 = vmovl_u16(*(uint16x4_t *)v135.i8);
          v138.i16[0] = *(_WORD *)(v53 + 2 * v137.u32[0]);
          v138.i16[1] = *(_WORD *)(v53 + 2 * v137.u32[1]);
          v138.i16[2] = *(_WORD *)(v53 + 2 * v137.u32[2]);
          v138.i16[3] = *(_WORD *)(v53 + 2 * v137.u32[3]);
          v138.i16[4] = *(_WORD *)(v53 + 2 * v136.u32[0]);
          v138.i16[5] = *(_WORD *)(v53 + 2 * v136.u32[1]);
          v138.i16[6] = *(_WORD *)(v53 + 2 * v136.u32[2]);
          v138.i16[7] = *(_WORD *)(v53 + 2 * v136.u32[3]);
          uint16x8_t v139 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v125));
          uint32x4_t v140 = vmovl_high_u16(v139);
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v139.i8);
          v142.i16[0] = *(_WORD *)(v53 + 2 * v141.u32[0]);
          v142.i16[1] = *(_WORD *)(v53 + 2 * v141.u32[1]);
          v142.i16[2] = *(_WORD *)(v53 + 2 * v141.u32[2]);
          v142.i16[3] = *(_WORD *)(v53 + 2 * v141.u32[3]);
          v142.i16[4] = *(_WORD *)(v53 + 2 * v140.u32[0]);
          v142.i16[5] = *(_WORD *)(v53 + 2 * v140.u32[1]);
          v142.i16[6] = *(_WORD *)(v53 + 2 * v140.u32[2]);
          v142.i16[7] = *(_WORD *)(v53 + 2 * v140.u32[3]);
          uint16x8_t v143 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v125));
          uint32x4_t v144 = vmovl_high_u16(v143);
          float16x8_t v145 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v143.i8);
          v145.i16[0] = *(_WORD *)(v53 + 2 * v145.u32[0]);
          v145.i16[1] = *(_WORD *)(v53 + 2 * v145.u32[1]);
          v145.i16[2] = *(_WORD *)(v53 + 2 * v145.u32[2]);
          v145.i16[3] = *(_WORD *)(v53 + 2 * v145.u32[3]);
          v145.i16[4] = *(_WORD *)(v53 + 2 * v144.u32[0]);
          v145.i16[5] = *(_WORD *)(v53 + 2 * v144.u32[1]);
          v145.i16[6] = *(_WORD *)(v53 + 2 * v144.u32[2]);
          v145.i16[7] = *(_WORD *)(v53 + 2 * v144.u32[3]);
          uint16x8_t v146 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, (float16x8_t)0), v125));
          uint32x4_t v147 = vmovl_high_u16(v146);
          uint32x4_t v148 = vmovl_u16(*(uint16x4_t *)v146.i8);
          v122.i16[0] = *(_WORD *)(v53 + 2 * v148.u32[0]);
          v122.i16[1] = *(_WORD *)(v53 + 2 * v148.u32[1]);
          v122.i16[2] = *(_WORD *)(v53 + 2 * v148.u32[2]);
          v122.i16[3] = *(_WORD *)(v53 + 2 * v148.u32[3]);
          v122.i16[4] = *(_WORD *)(v53 + 2 * v147.u32[0]);
          v122.i16[5] = *(_WORD *)(v53 + 2 * v147.u32[1]);
          v122.i16[6] = *(_WORD *)(v53 + 2 * v147.u32[2]);
          v122.i16[7] = *(_WORD *)(v53 + 2 * v147.u32[3]);
          float16x8_t v149 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v332), v131, v331), v138, v330);
          float16x8_t v150 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v329), v131, v328), v138, v327);
          float16x8_t v151 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v138, v324), v131, v325), v129, v326);
          float16x8_t v152 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v142, v332), v145, v331), v122, v330);
          float16x8_t v153 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v142, v329), v145, v328), v122, v327);
          float16x8_t v154 = vmlaq_n_f16(vmulq_n_f16(v122, v324), v145, v325);
          uint16x8_t v155 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v149, (float16x8_t)0), v125));
          float16x8_t v156 = (float16x8_t)vmovl_high_u16(v155);
          uint32x4_t v157 = vmovl_u16(*(uint16x4_t *)v155.i8);
          v122.i16[0] = *(_WORD *)(v64 + 2 * v157.u32[0]);
          v122.i16[1] = *(_WORD *)(v64 + 2 * v157.u32[1]);
          v122.i16[2] = *(_WORD *)(v64 + 2 * v157.u32[2]);
          v122.i16[3] = *(_WORD *)(v64 + 2 * v157.u32[3]);
          v122.i16[4] = *(_WORD *)(v64 + 2 * v156.u32[0]);
          v122.i16[5] = *(_WORD *)(v64 + 2 * v156.u32[1]);
          v122.i16[6] = *(_WORD *)(v64 + 2 * v156.u32[2]);
          float v158 = (__int16 *)(v64 + 2 * v156.u32[3]);
          uint16x8_t v159 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v150, (float16x8_t)0), v125));
          uint32x4_t v160 = vmovl_high_u16(v159);
          uint32x4_t v161 = vmovl_u16(*(uint16x4_t *)v159.i8);
          v156.i16[7] = (unint64_t)v161.u32[1] >> 48;
          v156.i16[0] = *(_WORD *)(v64 + 2 * v161.u32[0]);
          v156.i16[1] = *(_WORD *)(v64 + 2 * v161.u32[1]);
          v156.i16[2] = *(_WORD *)(v64 + 2 * v161.u32[2]);
          v156.i16[3] = *(_WORD *)(v64 + 2 * v161.u32[3]);
          v156.i16[4] = *(_WORD *)(v64 + 2 * v160.u32[0]);
          v156.i16[5] = *(_WORD *)(v64 + 2 * v160.u32[1]);
          v156.i16[6] = *(_WORD *)(v64 + 2 * v160.u32[2]);
          float16x8_t v162 = (float16x8_t)vuzp1q_s16((int16x8_t)v122, (int16x8_t)v156);
          v122.i16[7] = *v158;
          v156.i16[7] = *(_WORD *)(v64 + 2 * v160.u32[3]);
          uint16x8_t v163 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v151, (float16x8_t)0), v125));
          uint32x4_t v164 = vmovl_high_u16(v163);
          *(void *)&long long v132 = v164.u32[2];
          *((void *)&v132 + 1) = v164.u32[3];
          long long v165 = v132;
          *(void *)&long long v132 = v164.u32[0];
          *((void *)&v132 + 1) = v164.u32[1];
          long long v166 = v132;
          int16x8_t v167 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v163.i8);
          *((void *)&v132 + 1) = v167.u32[3];
          v167.i16[7] = (unint64_t)v167.u32[1] >> 48;
          v167.i16[0] = *(_WORD *)(v64 + 2 * v167.u32[0]);
          v167.i16[1] = *(_WORD *)(v64 + 2 * v167.u32[1]);
          v167.i16[2] = *(_WORD *)(v64 + 2 * v167.u32[2]);
          v167.i16[3] = *(_WORD *)(v64 + 2 * *((void *)&v132 + 1));
          v167.i16[4] = *(_WORD *)(v64 + 2 * v166);
          v167.i16[5] = *(_WORD *)(v64 + 2 * *((void *)&v166 + 1));
          v167.i16[6] = *(_WORD *)(v64 + 2 * v165);
          float16x8_t v168 = (float16x8_t)v167;
          v168.i16[7] = *(_WORD *)(v64 + 2 * *((void *)&v165 + 1));
          uint16x8_t v169 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v152, (float16x8_t)0), v125));
          uint32x4_t v170 = vmovl_high_u16(v169);
          float16x8_t v171 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v169.i8);
          *(void *)&long long v132 = v170.u32[2];
          *((void *)&v132 + 1) = v170.u32[3];
          long long v172 = v132;
          *(void *)&long long v132 = v170.u32[0];
          *((void *)&v132 + 1) = v170.u32[1];
          long long v173 = v132;
          *((void *)&v132 + 1) = v171.u32[3];
          v171.i16[7] = (unint64_t)v171.u32[3] >> 48;
          v171.i16[0] = *(_WORD *)(v64 + 2 * v171.u32[0]);
          v171.i16[1] = *(_WORD *)(v64 + 2 * v171.u32[1]);
          v171.i16[2] = *(_WORD *)(v64 + 2 * v171.u32[2]);
          v171.i16[3] = *(_WORD *)(v64 + 2 * *((void *)&v132 + 1));
          v171.i16[4] = *(_WORD *)(v64 + 2 * v173);
          v171.i16[5] = *(_WORD *)(v64 + 2 * *((void *)&v173 + 1));
          v171.i16[6] = *(_WORD *)(v64 + 2 * v172);
          float v174 = (__int16 *)(v64 + 2 * *((void *)&v172 + 1));
          uint16x8_t v175 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v153, (float16x8_t)0), v125));
          uint32x4_t v176 = vmovl_high_u16(v175);
          float16x8_t v177 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v175.i8);
          *(void *)&long long v132 = v176.u32[2];
          *((void *)&v132 + 1) = v176.u32[3];
          long long v178 = v132;
          *(void *)&long long v132 = v176.u32[0];
          *((void *)&v132 + 1) = v176.u32[1];
          long long v179 = v132;
          *((void *)&v132 + 1) = v177.u32[3];
          v177.i16[7] = (unint64_t)v177.u32[3] >> 48;
          v177.i16[0] = *(_WORD *)(v64 + 2 * v177.u32[0]);
          v177.i16[1] = *(_WORD *)(v64 + 2 * v177.u32[1]);
          v177.i16[2] = *(_WORD *)(v64 + 2 * v177.u32[2]);
          v177.i16[3] = *(_WORD *)(v64 + 2 * *((void *)&v132 + 1));
          v177.i16[4] = *(_WORD *)(v64 + 2 * v179);
          v177.i16[5] = *(_WORD *)(v64 + 2 * *((void *)&v179 + 1));
          v177.i16[6] = *(_WORD *)(v64 + 2 * v178);
          float16x8_t v180 = (float16x8_t)vuzp1q_s16((int16x8_t)v171, (int16x8_t)v177);
          v171.i16[7] = *v174;
          v177.i16[7] = *(_WORD *)(v64 + 2 * *((void *)&v178 + 1));
          uint16x8_t v181 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v154, v142, v326), (float16x8_t)0), v125));
          int16x8_t v182 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v181.i8);
          uint32x4_t v183 = vmovl_high_u16(v181);
          *(void *)&long long v132 = v183.u32[2];
          *((void *)&v132 + 1) = v183.u32[3];
          long long v184 = v132;
          *((void *)&v132 + 1) = v182.u32[3];
          v182.i16[7] = (unint64_t)v182.u32[3] >> 48;
          v182.i16[0] = *(_WORD *)(v64 + 2 * v182.u32[0]);
          v182.i16[1] = *(_WORD *)(v64 + 2 * v182.u32[1]);
          v182.i16[2] = *(_WORD *)(v64 + 2 * v182.u32[2]);
          v182.i16[3] = *(_WORD *)(v64 + 2 * *((void *)&v132 + 1));
          v182.i16[4] = *(_WORD *)(v64 + 2 * v183.u32[0]);
          v182.i16[5] = *(_WORD *)(v64 + 2 * v183.u32[1]);
          v182.i16[6] = *(_WORD *)(v64 + 2 * v184);
          float16x8_t v185 = (float16x8_t)v182;
          v185.i16[7] = *(_WORD *)(v64 + 2 * *((void *)&v184 + 1));
          *v63++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v353, v122, v335), v156, v334), v168, v333), v353), v351)), v322);
          *v105++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v353, v171, v335), v177, v334), v185, v333), v353), v351)), v322);
          int16x8_t v186 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v162, (float16x8_t)vuzp2q_s16((int16x8_t)v122, (int16x8_t)v156)), v180), (float16x8_t)vuzp2q_s16((int16x8_t)v171, (int16x8_t)v177));
          *v106++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v352, v356, (float16x8_t)vzip1q_s16(v186, v186)), v355, (float16x8_t)vzip2q_s16(v186, v186)), v354, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v167, v167), (float16x8_t)vtrn2q_s16((int16x8_t)v168, (int16x8_t)v168)), (float16x8_t)vtrn1q_s16(v182, v182)), (float16x8_t)vtrn2q_s16((int16x8_t)v185, (int16x8_t)v185))), v350), v349)), v322);
          v102 += 8;
          _S9 = v321;
          _S11 = v367;
        }
        while (v102 < (int)result);
        unint64_t v187 = v77 & 0xFFFFFFF8;
      }
      for (; v77 > v187; float v42 = v336)
      {
        if (v75)
        {
          float v188 = (float)(*(unsigned __int16 *)v75 >> v78) - v42;
          float v189 = (float)(*((unsigned __int16 *)v75 + 1) >> v78) - v42;
          float16x8_t v190 = (unsigned __int16 *)(v75 + 4);
          float v191 = _S29 * v189;
          float v192 = (float)(_S9 * v189) + (float)(v188 * _S11);
          float v193 = _S24 * v188;
        }
        else
        {
          float16x8_t v190 = 0;
          float v193 = 0.0;
          float v192 = 0.0;
          float v191 = 0.0;
        }
        float v194 = _S22 * (float)((float)(v76->u16[0] >> v78) - v39);
        float v195 = v191 + v194;
        float v196 = 8191.0;
        if (v195 <= 8191.0)
        {
          float v196 = v195;
          if (v195 < 0.0) {
            float v196 = 0.0;
          }
        }
        float v197 = v192 + v194;
        float v198 = 8191.0;
        if (v197 <= 8191.0)
        {
          float v198 = v197;
          if (v197 < 0.0) {
            float v198 = 0.0;
          }
        }
        float v199 = v193 + v194;
        float v200 = 8191.0;
        if (v199 <= 8191.0)
        {
          float v200 = v199;
          if (v199 < 0.0) {
            float v200 = 0.0;
          }
        }
        if (v190)
        {
          float v201 = (float)(*v190 >> v78) - v42;
          float v202 = (float)(v190[1] >> v78) - v42;
          float v75 = (char *)(v190 + 2);
          float v203 = _S29 * v202;
          float v204 = (float)(_S9 * v202) + (float)(v201 * _S11);
          float v205 = _S24 * v201;
        }
        else
        {
          float v75 = 0;
          float v205 = 0.0;
          float v204 = 0.0;
          float v203 = 0.0;
        }
        float v206 = _S22 * (float)((float)(v76->u16[1] >> v78) - v39);
        float v207 = v203 + v206;
        float v208 = 8191.0;
        BOOL v209 = (float)(v203 + v206) <= 8191.0;
        float v210 = 8191.0;
        if (v209)
        {
          float v210 = v207;
          if (v207 < 0.0) {
            float v210 = 0.0;
          }
        }
        float v211 = v204 + v206;
        float v212 = 8191.0;
        if (v211 <= 8191.0)
        {
          float v212 = v211;
          if (v211 < 0.0) {
            float v212 = 0.0;
          }
        }
        float v213 = v205 + v206;
        if (v213 <= 8191.0)
        {
          float v208 = v213;
          if (v213 < 0.0) {
            float v208 = 0.0;
          }
        }
        if (v104)
        {
          float v214 = (float)(*(unsigned __int16 *)v104 >> v78) - v42;
          float v215 = (float)(*((unsigned __int16 *)v104 + 1) >> v78) - v42;
          float v216 = (unsigned __int16 *)(v104 + 4);
          float v217 = _S29 * v215;
          float v218 = (float)(_S9 * v215) + (float)(v214 * _S11);
          float v219 = _S24 * v214;
        }
        else
        {
          float v216 = 0;
          float v219 = 0.0;
          float v218 = 0.0;
          float v217 = 0.0;
        }
        float v220 = _S22 * (float)((float)(v103->u16[0] >> v78) - v39);
        float v221 = v217 + v220;
        float v222 = 8191.0;
        float v223 = 8191.0;
        if (v221 <= 8191.0)
        {
          float v223 = v221;
          if (v221 < 0.0) {
            float v223 = 0.0;
          }
        }
        float v224 = v218 + v220;
        BOOL v209 = (float)(v218 + v220) <= 8191.0;
        float v225 = 8191.0;
        if (v209)
        {
          float v225 = v224;
          if (v224 < 0.0) {
            float v225 = 0.0;
          }
        }
        float v226 = v219 + v220;
        if (v226 <= 8191.0)
        {
          float v222 = v226;
          if (v226 < 0.0) {
            float v222 = 0.0;
          }
        }
        if (v216)
        {
          float v227 = (float)(*v216 >> v78) - v42;
          float v228 = (float)(v216[1] >> v78) - v42;
          float v104 = (char *)(v216 + 2);
          float v229 = _S29 * v228;
          float v230 = (float)(_S9 * v228) + (float)(v227 * _S11);
          float v231 = _S24 * v227;
        }
        else
        {
          float v104 = 0;
          float v231 = 0.0;
          float v230 = 0.0;
          float v229 = 0.0;
        }
        float v232 = _S22 * (float)((float)(v103->u16[1] >> v78) - v39);
        float v233 = v229 + v232;
        float v234 = 8191.0;
        if (v233 <= 8191.0)
        {
          float v234 = v233;
          if (v233 < 0.0) {
            float v234 = 0.0;
          }
        }
        float v235 = v230 + v232;
        BOOL v209 = (float)(v230 + v232) <= 8191.0;
        float v236 = 8191.0;
        if (v209)
        {
          float v236 = v235;
          if (v235 < 0.0) {
            float v236 = 0.0;
          }
        }
        float v237 = v231 + v232;
        BOOL v209 = (float)(v231 + v232) <= 8191.0;
        float v238 = 8191.0;
        if (v209)
        {
          float v238 = v237;
          if (v237 < 0.0) {
            float v238 = 0.0;
          }
        }
        _H17 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v196, 0.0), 8191.0)));
        __asm { FCVT            S17, H17 }
        _H18 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v198, 0.0), 8191.0)));
        __asm { FCVT            S18, H18 }
        _H19 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v200, 0.0), 8191.0)));
        _H4 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v210, 0.0), 8191.0)));
        __asm
        {
          FCVT            S19, H19
          FCVT            S4, H4
        }
        _H20 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v212, 0.0), 8191.0)));
        __asm { FCVT            S20, H20 }
        _H21 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v208, 0.0), 8191.0)));
        __asm { FCVT            S21, H21 }
        _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        _H7 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v225, 0.0), 8191.0)));
        __asm { FCVT            S7, H7 }
        _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v222, 0.0), 8191.0)));
        _H23 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v234, 0.0), 8191.0)));
        __asm
        {
          FCVT            S0, H0
          FCVT            S23, H23
        }
        _H30 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v236, 0.0), 8191.0)));
        unsigned int v260 = llroundf(fminf(fmaxf(v238, 0.0), 8191.0));
        __asm { FCVT            S30, H30 }
        float v262 = (float)((float)(v340 * _S18) + (float)(_S17 * v341)) + (float)(_S19 * v337);
        float v263 = (float)((float)(v345 * _S18) + (float)(_S17 * v338)) + (float)(_S19 * v347);
        _S17 = (float)((float)(v343 * _S18) + (float)(_S17 * v344)) + (float)(_S19 * v342);
        float v265 = (float)((float)(v340 * _S20) + (float)(_S4 * v341)) + (float)(_S21 * v337);
        _S19 = (float)((float)(v345 * _S20) + (float)(_S4 * v338)) + (float)(_S21 * v347);
        _S20 = (float)((float)(v343 * _S20) + (float)(_S4 * v344)) + (float)(_S21 * v342);
        _S21 = (float)((float)(v340 * _S7) + (float)(_S1 * v341)) + (float)(_S0 * v337);
        float v269 = (float)((float)(v345 * _S7) + (float)(_S1 * v338)) + (float)(_S0 * v347);
        float v270 = (float)((float)(v343 * _S7) + (float)(_S1 * v344)) + (float)(_S0 * v342);
        _S1 = (float)(v345 * _S30) + (float)(_S23 * v338);
        _S4 = (float)(v343 * _S30) + (float)(_S23 * v344);
        LOWORD(_S7) = *(_WORD *)(v53 + 2 * v260);
        __asm { FCVT            S7, H7 }
        _S23 = (float)((float)(v340 * _S30) + (float)(_S23 * v341)) + (float)(_S7 * v337);
        _S30 = _S1 + (float)(_S7 * v347);
        float v276 = _S4 + (float)(_S7 * v342);
        LOWORD(_S0) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v262, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        LOWORD(_S1) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v263, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        LOWORD(_S4) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
        LOWORD(_S7) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v265, 0.0), 8191.0)));
        __asm
        {
          FCVT            S4, H4
          FCVT            S7, H7
        }
        LOWORD(_S17) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
        __asm { FCVT            S18, H17 }
        LOWORD(_S17) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
        __asm { FCVT            S17, H17 }
        LOWORD(_S19) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
        __asm { FCVT            S19, H19 }
        LOWORD(_S20) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v269, 0.0), 8191.0)));
        __asm { FCVT            S20, H20 }
        LOWORD(_S21) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v270, 0.0), 8191.0)));
        LOWORD(_S23) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
        __asm
        {
          FCVT            S21, H21
          FCVT            S23, H23
        }
        LOWORD(_S30) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(_S30, 0.0), 8191.0)));
        unsigned int v287 = llroundf(fminf(fmaxf(v276, 0.0), 8191.0));
        __asm { FCVT            S25, H30 }
        LOWORD(_S30) = *(_WORD *)(v64 + 2 * v287);
        __asm { FCVT            S30, H30 }
        float v290 = (float)((float)((float)(v346 * _S1) + (float)(v348 * _S0)) + (float)(_S28 * _S4)) + v46;
        if (v290 < v46) {
          float v291 = v46;
        }
        else {
          float v291 = (float)((float)((float)(v346 * _S1) + (float)(v348 * _S0)) + (float)(_S28 * _S4)) + v46;
        }
        BOOL v209 = v290 <= v339;
        float v292 = (float)((float)((float)(v346 * _S18) + (float)(v348 * _S7)) + (float)(_S28 * _S17)) + v46;
        if (!v209) {
          float v291 = v339;
        }
        unsigned int v293 = llroundf(v291);
        if (v292 < v46) {
          float v294 = v46;
        }
        else {
          float v294 = (float)((float)((float)(v346 * _S18) + (float)(v348 * _S7)) + (float)(_S28 * _S17)) + v46;
        }
        BOOL v209 = v292 <= v339;
        float v295 = (float)((float)((float)(v346 * _S20) + (float)(v348 * _S19)) + (float)(_S28 * _S21)) + v46;
        if (!v209) {
          float v294 = v339;
        }
        unsigned int v296 = llroundf(v294);
        if (v295 < v46) {
          float v297 = v46;
        }
        else {
          float v297 = (float)((float)((float)(v346 * _S20) + (float)(v348 * _S19)) + (float)(_S28 * _S21)) + v46;
        }
        BOOL v209 = v295 <= v339;
        float v298 = (float)((float)((float)(v346 * _S25) + (float)(v348 * _S23)) + (float)(_S28 * _S30)) + v46;
        if (!v209) {
          float v297 = v339;
        }
        unsigned int v299 = llroundf(v297);
        if (v298 < v46) {
          float v300 = v46;
        }
        else {
          float v300 = (float)((float)((float)(v346 * _S25) + (float)(v348 * _S23)) + (float)(_S28 * _S30)) + v46;
        }
        if (v298 <= v339) {
          float v301 = v300;
        }
        else {
          float v301 = v339;
        }
        float v302 = (float)((float)(_S0 + _S7) + _S19) + _S23;
        float v303 = (float)((float)(_S1 + _S18) + _S20) + _S25;
        v63->i16[0] = v293 << v79;
        v63->i16[1] = v296 << v79;
        v105->i16[0] = v299 << v79;
        v105->i16[1] = llroundf(v301) << v79;
        float v304 = (float)((float)(_S4 + _S17) + _S21) + _S30;
        float v305 = (float)((float)(v360 + (float)(v302 * v357)) + (float)(v303 * *(float *)&v97))
             + (float)(v304 * *(float *)&v98);
        float v306 = v359;
        if (v305 <= v359)
        {
          float v306 = (float)((float)(v360 + (float)(v302 * v357)) + (float)(v303 * *(float *)&v97))
               + (float)(v304 * *(float *)&v98);
          if (v305 < v366) {
            float v306 = v366;
          }
        }
        float v307 = (float)((float)(v360 + (float)(v302 * v323)) + (float)(v303 * *((float *)&v97 + 1)))
             + (float)(v304 * *((float *)&v98 + 1));
        v106->i16[0] = llroundf(v306) << v79;
        float v308 = v359;
        _S11 = v367;
        if (v307 <= v359)
        {
          float v308 = v307;
          if (v307 < v366) {
            float v308 = v366;
          }
        }
        v187 += 2;
        float v76 = (uint16x8_t *)((char *)v76 + 4);
        float v103 = (uint16x8_t *)((char *)v103 + 4);
        v106->i16[1] = llroundf(v308) << v79;
        float v63 = (uint16x8_t *)((char *)v63 + 4);
        float v105 = (uint16x8_t *)((char *)v105 + 4);
        float v106 = (uint16x8_t *)((char *)v106 + 4);
        _S29 = v358;
        _S24 = v61;
      }
      uint64_t v32 = v318;
      uint64_t v31 = v319;
      float v76 = (uint16x8_t *)&v99[v319];
      float v75 = &v100[v318];
      uint64_t v34 = v317;
      float v63 = (uint16x8_t *)&v101[v317];
      float v62 = (uint16x8_t *)((char *)v62 + v316);
      v21 += 2;
    }
    while (v25 > v21);
    if (v315 && v314)
    {
      size_t v309 = 2 * v77;
      float v310 = __src;
      do
      {
        double result = (unint64_t)memcpy(v54, v310, v309);
        v310 += v312;
        v54 += v313;
        --v25;
      }
      while (v25);
    }
    else if (v314)
    {
      do
      {
        if (v77) {
          double result = (unint64_t)memset(v54, 255, 2 * v77);
        }
        v54 += v313;
        --v25;
      }
      while (v25);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = 2 * *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    unint64_t v9 = *(void *)(result + 20);
    uint64_t v10 = *(void *)(result + 36);
    uint64_t v11 = *(void *)(result + 44) + 2 * v6;
    unint64_t v12 = 2 * v7 - 2 * v6;
    uint64_t v13 = *((void *)result + 14);
    unint64_t v14 = *((void *)result + 13) * a2 / v5;
    uint64_t v15 = (void *)*((void *)result + 16);
    uint64_t v16 = *((void *)result + 15) + 2 * v14;
    uint64_t v17 = *((void *)result + 19);
    uint64_t v18 = (uint64_t *)*((void *)result + 7);
    uint64_t v19 = (uint64_t *)*((void *)result + 8);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v197 = v19[2];
    uint64_t v200 = v18[2];
    uint64_t v23 = (char *)(v200 + v197 * v11 + 2 * v10);
    uint64_t v24 = *v20;
    uint64_t v25 = v20[1];
    uint64_t v198 = v20[2];
    uint64_t v199 = v15[2];
    uint64_t v26 = (char *)(v199 + v198 * v16 + 2 * v13);
    *(float *)&unsigned int v27 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    float v28 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v17 + 142);
    float v29 = (float)LODWORD(a4);
    float v30 = *(float *)&v27 * *(float *)v17;
    float v31 = *(float *)&v27 * *(float *)(v17 + 8);
    float v32 = *(float *)&v27 * *(float *)(v17 + 16);
    float v33 = *(float *)&v27 * *(float *)(v17 + 20);
    float v34 = *(float *)&v27 * *(float *)(v17 + 28);
    LOWORD(v27) = *(_WORD *)(v17 + 144);
    float v35 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v17 + 146);
    float v36 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v17 + 148);
    float v37 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v17 + 150);
    *(float *)&unsigned int v38 = (float)v27;
    float v217 = *(float *)&v38;
    LOWORD(v38) = *(_WORD *)(v17 + 152);
    float v211 = (float)v38;
    float v212 = v36;
    float v209 = *(float *)(v17 + 40);
    float v210 = *(float *)(v17 + 36);
    float v207 = *(float *)(v17 + 48) * 0.25;
    float v208 = *(float *)(v17 + 44);
    float v205 = *(float *)(v17 + 56) * 0.25;
    float v206 = *(float *)(v17 + 52) * 0.25;
    float v203 = *(float *)(v17 + 64) * 0.25;
    float v204 = *(float *)(v17 + 60) * 0.25;
    float v201 = *(float *)(v17 + 68) * 0.25;
    float v202 = *(float *)(v17 + 72);
    float v40 = *(float *)(v17 + 76);
    float v39 = *(float *)(v17 + 80);
    float v41 = *(float *)(v17 + 84);
    float v42 = *(float *)(v17 + 88);
    float v43 = *(float *)(v17 + 92);
    float v44 = *(float *)(v17 + 96);
    float v45 = *(float *)(v17 + 100);
    float v46 = *(float *)(v17 + 104);
    uint64_t v47 = v17 + 164;
    uint64_t v48 = v17 + 16548;
    uint64_t v50 = *v18;
    uint64_t v49 = v18[1];
    double result = (unsigned __int8 *)(v50 + v21 * v11 + 2 * v10);
    if (v49) {
      uint64_t v51 = (char *)(v49 + v22 * v11 + 2 * v10);
    }
    else {
      uint64_t v51 = 0;
    }
    uint64_t v52 = v15[1];
    uint64_t v53 = (char *)(*v15 + v24 * v16 + 2 * v13);
    unsigned int v54 = *(unsigned __int8 *)(v17 + 132);
    _CF = v54 >= 0x11;
    char v56 = 16 - v54;
    if (_CF) {
      char v56 = 0;
    }
    unsigned int v57 = *(unsigned __int8 *)(v17 + 124);
    if (v57 >= 0x11) {
      char v58 = 0;
    }
    else {
      char v58 = 16 - v57;
    }
    uint64_t v59 = v52 + v20[1] * (v16 / 2) + 2 * v13;
    char v60 = v58;
    char v61 = v56;
    float v215 = v32;
    float v216 = v31;
    float v213 = v34;
    float v214 = v33;
    do
    {
      float v62 = &v53[v24];
      float v63 = &v51[v22];
      uint64_t v64 = &result[v21];
      if (v9)
      {
        unint64_t v65 = 0;
        float v66 = &result[v21];
        float v67 = &v51[v22];
        float v68 = &v53[v24];
        do
        {
          if (v51)
          {
            float v69 = (float)(*(unsigned __int16 *)v51 >> v60) - v29;
            float v70 = (float)(*((unsigned __int16 *)v51 + 1) >> v60) - v29;
            v51 += 4;
            float v71 = v31 * v70;
            float v72 = (float)(v33 * v70) + (float)(v69 * v32);
            float v73 = v34 * v69;
          }
          else
          {
            float v73 = 0.0;
            float v72 = 0.0;
            float v71 = 0.0;
          }
          float v74 = v30 * (float)((float)(*(unsigned __int16 *)result >> v60) - v28);
          float v75 = v71 + v74;
          BOOL v76 = (float)(v71 + v74) <= 8191.0;
          float v77 = 8191.0;
          if (v76)
          {
            float v77 = v75;
            if (v75 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v72 + v74;
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v73 + v74;
          float v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          if (v51)
          {
            float v82 = (float)(*(unsigned __int16 *)v51 >> v60) - v29;
            float v83 = (float)(*((unsigned __int16 *)v51 + 1) >> v60) - v29;
            v51 += 4;
            float v84 = v31 * v83;
            float v85 = (float)(v33 * v83) + (float)(v82 * v32);
            float v86 = v34 * v82;
          }
          else
          {
            float v86 = 0.0;
            float v85 = 0.0;
            float v84 = 0.0;
          }
          float v87 = v30 * (float)((float)(*((unsigned __int16 *)result + 1) >> v60) - v28);
          float v88 = v84 + v87;
          float v89 = 8191.0;
          float v90 = 8191.0;
          if (v88 <= 8191.0)
          {
            float v90 = v88;
            if (v88 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = 8191.0;
          if ((float)(v85 + v87) <= 8191.0)
          {
            float v91 = v85 + v87;
            if ((float)(v85 + v87) < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v86 + v87;
          if (v92 <= 8191.0)
          {
            float v89 = v92;
            if (v92 < 0.0) {
              float v89 = 0.0;
            }
          }
          if (v67)
          {
            float v93 = (float)(*(unsigned __int16 *)v67 >> v60) - v29;
            float v94 = (float)(*((unsigned __int16 *)v67 + 1) >> v60) - v29;
            v67 += 4;
            float v95 = v31 * v94;
            float v96 = (float)(v33 * v94) + (float)(v93 * v32);
            float v97 = v34 * v93;
          }
          else
          {
            float v97 = 0.0;
            float v96 = 0.0;
            float v95 = 0.0;
          }
          float v98 = v30 * (float)((float)(*(unsigned __int16 *)v66 >> v60) - v28);
          float v99 = v95 + v98;
          float v100 = 8191.0;
          float v101 = 8191.0;
          if (v99 <= 8191.0)
          {
            float v101 = v99;
            if (v99 < 0.0) {
              float v101 = 0.0;
            }
          }
          float v102 = v96 + v98;
          BOOL v76 = (float)(v96 + v98) <= 8191.0;
          float v103 = 8191.0;
          if (v76)
          {
            float v103 = v102;
            if (v102 < 0.0) {
              float v103 = 0.0;
            }
          }
          float v104 = v97 + v98;
          if (v104 <= 8191.0)
          {
            float v100 = v104;
            if (v104 < 0.0) {
              float v100 = 0.0;
            }
          }
          if (v67)
          {
            float v105 = (float)(*(unsigned __int16 *)v67 >> v60) - v29;
            float v106 = (float)(*((unsigned __int16 *)v67 + 1) >> v60) - v29;
            v67 += 4;
            float v107 = v31 * v106;
            float v108 = (float)(v33 * v106) + (float)(v105 * v32);
            float v109 = v34 * v105;
          }
          else
          {
            float v109 = 0.0;
            float v108 = 0.0;
            float v107 = 0.0;
          }
          float v110 = v28;
          float v111 = v30;
          float v112 = v30 * (float)((float)(*((unsigned __int16 *)v66 + 1) >> v60) - v28);
          float v113 = v107 + v112;
          float v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            float v114 = v113;
            if (v113 < 0.0) {
              float v114 = 0.0;
            }
          }
          float v115 = v108 + v112;
          BOOL v76 = (float)(v108 + v112) <= 8191.0;
          float v116 = 8191.0;
          if (v76)
          {
            float v116 = v115;
            if (v115 < 0.0) {
              float v116 = 0.0;
            }
          }
          float v117 = v109 + v112;
          float v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            float v118 = v117;
            if (v117 < 0.0) {
              float v118 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H3 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H6 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S24, H24
          }
          _H25 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H27 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H4 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H17 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S21, H21
          }
          _H7 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          unsigned int v143 = llroundf(fminf(fmaxf(v118, 0.0), 8191.0));
          __asm { FCVT            S1, H7 }
          float v145 = (float)((float)(v40 * _S3) + (float)(_S0 * v202)) + (float)(_S6 * v39);
          float v146 = (float)((float)(v42 * _S3) + (float)(_S0 * v41)) + (float)(_S6 * v43);
          _S3 = (float)((float)(v45 * _S3) + (float)(_S0 * v44)) + (float)(_S6 * v46);
          _S6 = (float)((float)(v40 * _S25) + (float)(_S24 * v202)) + (float)(_S27 * v39);
          float v149 = (float)((float)(v42 * _S25) + (float)(_S24 * v41)) + (float)(_S27 * v43);
          float v150 = (float)((float)(v45 * _S25) + (float)(_S24 * v44)) + (float)(_S27 * v46);
          float v151 = (float)((float)(v40 * _S5) + (float)(_S4 * v202)) + (float)(_S17 * v39);
          float v152 = (float)((float)(v42 * _S5) + (float)(_S4 * v41)) + (float)(_S17 * v43);
          float v153 = (float)((float)(v45 * _S5) + (float)(_S4 * v44)) + (float)(_S17 * v46);
          _S0 = (float)(v40 * _S1) + (float)(_S21 * v202);
          _S4 = (float)(v42 * _S1) + (float)(_S21 * v41);
          float v156 = (float)(v45 * _S1) + (float)(_S21 * v44);
          LOWORD(_S5) = *(_WORD *)(v47 + 2 * v143);
          __asm { FCVT            S5, H5 }
          _S21 = _S0 + (float)(_S5 * v39);
          float v159 = _S4 + (float)(_S5 * v43);
          float v160 = v156 + (float)(_S5 * v46);
          LOWORD(_S0) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S3) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H3
            FCVT            S17, H6
          }
          LOWORD(_S3) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          unsigned int v165 = llroundf(fminf(fmaxf(v150, 0.0), 8191.0));
          __asm { FCVT            S24, H3 }
          LOWORD(_S3) = *(_WORD *)(v48 + 2 * v165);
          __asm { FCVT            S6, H3 }
          LOWORD(_S3) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          __asm { FCVT            S7, H3 }
          LOWORD(_S3) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          __asm { FCVT            S25, H3 }
          LOWORD(_S3) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H3
            FCVT            S3, H21
          }
          LOWORD(_S21) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          unsigned int v172 = llroundf(fminf(fmaxf(v160, 0.0), 8191.0));
          __asm { FCVT            S1, H21 }
          _H19 = *(_WORD *)(v48 + 2 * v172);
          __asm { FCVT            S19, H19 }
          float v176 = (float)((float)((float)(v209 * _S4) + (float)(v210 * _S0)) + (float)(v208 * _S5)) + v35;
          if (v176 < v35) {
            float v177 = v35;
          }
          else {
            float v177 = (float)((float)((float)(v209 * _S4) + (float)(v210 * _S0)) + (float)(v208 * _S5)) + v35;
          }
          BOOL v76 = v176 <= v37;
          float v178 = (float)((float)((float)(v209 * _S24) + (float)(v210 * _S17)) + (float)(v208 * _S6)) + v35;
          if (!v76) {
            float v177 = v37;
          }
          unsigned int v179 = llroundf(v177);
          if (v178 < v35) {
            float v180 = v35;
          }
          else {
            float v180 = (float)((float)((float)(v209 * _S24) + (float)(v210 * _S17)) + (float)(v208 * _S6)) + v35;
          }
          BOOL v76 = v178 <= v37;
          float v181 = (float)((float)((float)(v209 * _S25) + (float)(v210 * _S7)) + (float)(v208 * _S27)) + v35;
          if (!v76) {
            float v180 = v37;
          }
          unsigned int v182 = llroundf(v180);
          if (v181 < v35) {
            float v183 = v35;
          }
          else {
            float v183 = (float)((float)((float)(v209 * _S25) + (float)(v210 * _S7)) + (float)(v208 * _S27)) + v35;
          }
          BOOL v76 = v181 <= v37;
          float v184 = (float)((float)((float)(v209 * _S1) + (float)(v210 * _S3)) + (float)(v208 * _S19)) + v35;
          if (!v76) {
            float v183 = v37;
          }
          unsigned int v185 = llroundf(v183);
          if (v184 < v35) {
            float v186 = v35;
          }
          else {
            float v186 = (float)((float)((float)(v209 * _S1) + (float)(v210 * _S3)) + (float)(v208 * _S19)) + v35;
          }
          if (v184 <= v37) {
            float v187 = v186;
          }
          else {
            float v187 = v37;
          }
          float v188 = (float)((float)(_S0 + _S17) + _S7) + _S3;
          float v189 = (float)((float)(_S4 + _S24) + _S25) + _S1;
          *(_WORD *)uint64_t v53 = v179 << v61;
          *((_WORD *)v53 + 1) = v182 << v61;
          *(_WORD *)float v68 = v185 << v61;
          *((_WORD *)v68 + 1) = llroundf(v187) << v61;
          float v190 = (float)((float)(_S5 + _S6) + _S27) + _S19;
          float v191 = (float)((float)(v212 + (float)(v188 * v207)) + (float)(v189 * v206)) + (float)(v190 * v205);
          float v192 = v211;
          if (v191 <= v211)
          {
            float v192 = (float)((float)(v212 + (float)(v188 * v207)) + (float)(v189 * v206)) + (float)(v190 * v205);
            if (v191 < v217) {
              float v192 = v217;
            }
          }
          float v193 = (_WORD *)(v59 + 2 * v65);
          float v194 = (float)((float)(v212 + (float)(v188 * v204)) + (float)(v189 * v203)) + (float)(v190 * v201);
          *float v193 = llroundf(v192) << v61;
          float v195 = v211;
          float v28 = v110;
          float v30 = v111;
          float v31 = v216;
          if (v194 <= v211)
          {
            float v195 = v194;
            if (v194 < v217) {
              float v195 = v217;
            }
          }
          result += 4;
          v66 += 4;
          v53 += 4;
          v68 += 4;
          v193[1] = llroundf(v195) << v61;
          v65 += 2;
          float v33 = v214;
          float v32 = v215;
          float v34 = v213;
        }
        while (v9 > v65);
      }
      double result = &v64[v21];
      uint64_t v51 = &v63[v22];
      uint64_t v53 = &v62[v24];
      v59 += v25;
      v8 += 2;
    }
    while (v12 > v8);
    if (v200 && v199)
    {
      size_t v196 = 2 * v9;
      do
      {
        double result = (unsigned __int8 *)memcpy(v26, v23, v196);
        v23 += v197;
        v26 += v198;
        --v12;
      }
      while (v12);
    }
    else if (v199)
    {
      do
      {
        if (v9) {
          double result = (unsigned __int8 *)memset(v26, 255, 2 * v9);
        }
        v26 += v198;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_xf420_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_xf444_rgb_xf420_neon_fp16_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 36);
    uint64_t v12 = *(void *)(result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = *(void *)(result + 112);
    uint64_t v15 = *(void *)(result + 152);
    uint64_t v16 = *(uint64_t **)(result + 128);
    uint64_t v17 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v6);
    uint64_t v18 = *(void **)(result + 56);
    uint64_t v19 = *(uint64_t **)(result + 64);
    uint64_t v20 = *(uint64_t **)(result + 136);
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v176 = v18[2];
    uint64_t v24 = (char *)(v176 + v23 * v12 + 2 * v11);
    uint64_t v25 = *v20;
    uint64_t v26 = v20[1];
    uint64_t v27 = v20[2];
    uint64_t v28 = v16[2];
    unsigned int v29 = *(unsigned __int16 *)(v15 + 140);
    unsigned int v30 = *(unsigned __int16 *)(v15 + 142);
    unsigned int v31 = *(unsigned __int16 *)(v15 + 144);
    unsigned int v32 = *(unsigned __int16 *)(v15 + 146);
    unsigned int v33 = *(unsigned __int16 *)(v15 + 148);
    unsigned int v34 = *(unsigned __int16 *)(v15 + 150);
    unsigned int v35 = *(unsigned __int16 *)(v15 + 152);
    _S0 = *(float *)(v15 + 36);
    _S1 = *(float *)(v15 + 40);
    _S2 = *(float *)(v15 + 44);
    v39.i32[0] = *(_DWORD *)(v15 + 48);
    v3.i32[0] = *(_DWORD *)(v15 + 52);
    v40.i32[0] = *(_DWORD *)(v15 + 56);
    float v41 = (float)v29;
    *(short float *)v2.i16 = (short float)v29;
    float v42 = (float)v30;
    float v43 = (char *)(v28 + v27 * v17 + 2 * v14);
    float v44 = (float)*(unsigned int *)(v15 + 136) / (float)*(unsigned int *)(v15 + 128);
    _S5 = v44 * *(float *)v15;
    _S6 = v44 * *(float *)(v15 + 8);
    _S7 = v44 * *(float *)(v15 + 16);
    _S16 = v44 * *(float *)(v15 + 20);
    float v49 = (float)v31;
    float v190 = (float)v32;
    float v50 = (float)v33;
    _S20 = v44 * *(float *)(v15 + 28);
    _Q18 = vdupq_lane_s16(v2, 0);
    float16x8_t v189 = (float16x8_t)_Q18;
    *(short float *)_Q18.i16 = -(short float)v30;
    float16x8_t v53 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q18.i8, 0);
    __asm
    {
      FCVT            H8, S5
      FCVT            H9, S20
    }
    short float v197 = _H9;
    __asm { FCVT            H9, S7 }
    short float v196 = _H9;
    __asm { FCVT            H9, S16 }
    short float v195 = _H9;
    v39.i32[1] = *(_DWORD *)(v15 + 60);
    __asm { FCVT            H9, S6 }
    short float v194 = _H9;
    __asm { FMOV            V18.2S, #0.25 }
    *(float32x2_t *)v4.f32 = vmul_f32(v39, *(float32x2_t *)_Q18.i8);
    float16x8_t v188 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    v3.i32[1] = *(_DWORD *)(v15 + 64);
    *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)_Q18.i8);
    float32x4_t v63 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    float16x8_t v186 = (float16x8_t)v63;
    v40.i32[1] = *(_DWORD *)(v15 + 68);
    *(float32x2_t *)v63.f32 = vmul_f32(v40, *(float32x2_t *)_Q18.i8);
    *(float16x4_t *)_Q18.i8 = vcvt_f16_f32(v63);
    int32x4_t v64 = vdupq_lane_s32(*(int32x2_t *)_Q18.i8, 0);
    *(short float *)_Q18.i16 = (short float)v31;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q18.i8, 0);
    *(short float *)_Q18.i16 = (short float)v32;
    int16x8_t v66 = vdupq_lane_s16(*(int16x4_t *)_Q18.i8, 0);
    float16x8_t v184 = (float16x8_t)v66;
    float16x8_t v185 = (float16x8_t)v64;
    *(short float *)v66.i16 = (short float)v33;
    int16x8_t v67 = vdupq_lane_s16(*(int16x4_t *)v66.i8, 0);
    *(short float *)v66.i16 = (short float)v34;
    int16x8_t v68 = vdupq_lane_s16(*(int16x4_t *)v66.i8, 0);
    float16x8_t v182 = (float16x8_t)v68;
    float16x8_t v183 = (float16x8_t)v67;
    __asm { FCVT            H9, S0 }
    *(short float *)v68.i16 = (short float)v35;
    float16x8_t v180 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v68.i8, 0);
    short float v181 = _H9;
    unsigned int v70 = *(unsigned __int8 *)(v15 + 132);
    unsigned __int8 v71 = 16 - v70;
    if (v70 >= 0x11) {
      unsigned __int8 v71 = 0;
    }
    unsigned int v72 = *(unsigned __int8 *)(v15 + 124);
    unsigned __int8 v73 = 16 - v72;
    if (v72 >= 0x11) {
      unsigned __int8 v73 = 0;
    }
    if (v17 >= 0) {
      uint64_t v74 = v17;
    }
    else {
      uint64_t v74 = v17 + 1;
    }
    uint64_t v75 = *v16;
    uint64_t v76 = v16[1] + v26 * (v74 >> 1) + 2 * v14;
    float v77 = (uint16x8_t *)(v75 + v25 * v17 + 2 * v14);
    float v80 = v18;
    uint64_t v79 = *v18;
    uint64_t v78 = v80[1];
    float v81 = (const __int16 *)(v78 + v22 * v12 + 2 * v11);
    if (!v78) {
      float v81 = 0;
    }
    float v82 = (uint16x8_t *)(v79 + v21 * v12 + 2 * v11);
    double result = (v10 - 7);
    unsigned __int8 v83 = v73;
    unsigned __int8 v84 = v71;
    __asm { FCVT            H9, S1 }
    short float v179 = _H9;
    __asm { FCVT            H9, S2 }
    short float v178 = _H9;
    uint64_t v87 = v4.i64[0];
    float v198 = (float)v34;
    float v88 = (float)v35;
    float v187 = v3.f32[0];
    uint16x8_t v89 = (uint16x8_t)vdupq_n_s16(-v73);
    uint64_t v90 = v63.i64[0];
    float v177 = v3.f32[1];
    uint16x8_t v91 = (uint16x8_t)vdupq_n_s16(v71);
    float v192 = _S7;
    float v193 = _S6;
    float v191 = _S16;
    do
    {
      float v92 = &v82->i8[v21];
      float v93 = (char *)v81 + v22;
      float v94 = &v77->i8[v25];
      if ((int)v10 < 8)
      {
        unint64_t v122 = 0;
        float v99 = (uint16x8_t *)v76;
        float v98 = (uint16x8_t *)((char *)v77 + v25);
        float v97 = (const __int16 *)((char *)v81 + v22);
        float v96 = (uint16x8_t *)((char *)v82 + v21);
      }
      else
      {
        int v95 = 0;
        float v96 = (uint16x8_t *)((char *)v82 + v21);
        float v97 = (const __int16 *)((char *)v81 + v22);
        float v98 = (uint16x8_t *)((char *)v77 + v25);
        float v99 = (uint16x8_t *)v76;
        do
        {
          float16x8_t v100 = 0uLL;
          if (v81)
          {
            int16x8x2_t v200 = vld2q_s16(v81);
            v81 += 16;
            float16x8_t v101 = vaddq_f16(v53, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v200.val[0], v89)));
            float16x8_t v102 = vaddq_f16(v53, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v200.val[1], v89)));
            float16x8_t v103 = vmulq_n_f16(v102, v194);
            float16x8_t v104 = vmlaq_n_f16(vmulq_n_f16(v101, v196), v102, v195);
            float16x8_t v105 = vmulq_n_f16(v101, v197);
          }
          else
          {
            float16x8_t v105 = 0uLL;
            float16x8_t v104 = 0uLL;
            float16x8_t v103 = 0uLL;
          }
          uint16x8_t v106 = *v82++;
          uint16x8_t v107 = v106;
          if (v97)
          {
            int16x8x2_t v199 = vld2q_s16(v97);
            v97 += 16;
            float16x8_t v108 = vaddq_f16(v53, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v199.val[0], v89)));
            float16x8_t v109 = vaddq_f16(v53, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v199.val[1], v89)));
            float16x8_t v110 = vmulq_n_f16(v109, v194);
            float16x8_t v111 = vmlaq_n_f16(vmulq_n_f16(v108, v196), v109, v195);
            float16x8_t v100 = vmulq_n_f16(v108, v197);
          }
          else
          {
            float16x8_t v111 = 0uLL;
            float16x8_t v110 = 0uLL;
          }
          float16x8_t v112 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v107, v89)), v189);
          float16x8_t v113 = vmlaq_n_f16(v103, v112, _H8);
          float16x8_t v114 = vmlaq_n_f16(v104, v112, _H8);
          float16x8_t v115 = vmlaq_n_f16(v105, v112, _H8);
          uint16x8_t v116 = *v96++;
          float16x8_t v117 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v116, v89)), v189);
          float16x8_t v118 = vmlaq_n_f16(v110, v117, _H8);
          float16x8_t v119 = vmlaq_n_f16(v111, v117, _H8);
          float16x8_t v120 = vmlaq_n_f16(v100, v117, _H8);
          *v77++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v65, v113, v181), v114, v179), v115, v178), v65), v183)), v91);
          *v98++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v65, v118, v181), v119, v179), v120, v178), v65), v183)), v91);
          int16x8_t v121 = (int16x8_t)vaddq_f16((float16x8_t)vuzp2q_s16((int16x8_t)v118, (int16x8_t)v119), vaddq_f16(vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v113, (int16x8_t)v114), (float16x8_t)vuzp2q_s16((int16x8_t)v113, (int16x8_t)v114)), (float16x8_t)vuzp1q_s16((int16x8_t)v118, (int16x8_t)v119)));
          *v99++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v184, v188, (float16x8_t)vzip1q_s16(v121, v121)), v186, (float16x8_t)vzip2q_s16(v121, v121)), v185, vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v120, (int16x8_t)v120), vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v115, (int16x8_t)v115), (float16x8_t)vtrn2q_s16((int16x8_t)v115, (int16x8_t)v115)), (float16x8_t)vtrn1q_s16((int16x8_t)v120, (int16x8_t)v120)))), v182), v180)), v91);
          v95 += 8;
        }
        while (v95 < (int)result);
        unint64_t v122 = v10 & 0xFFFFFFF8;
      }
      for (; v10 > v122; _S16 = v191)
      {
        float v123 = 0.0;
        if (v81)
        {
          float v124 = (float)(*(unsigned __int16 *)v81 >> v83) - v42;
          float v125 = (float)(*((unsigned __int16 *)v81 + 1) >> v83) - v42;
          v81 += 2;
          float v126 = _S6 * v125;
          float v127 = (float)(_S16 * v125) + (float)(v124 * _S7);
          float v128 = _S20 * v124;
          if (v81)
          {
            float v129 = (float)(*(unsigned __int16 *)v81 >> v83) - v42;
            float v130 = (float)(*((unsigned __int16 *)v81 + 1) >> v83) - v42;
            v81 += 2;
            float v131 = _S6 * v130;
            float v132 = (float)(_S16 * v130) + (float)(v129 * _S7);
            float v123 = _S20 * v129;
            goto LABEL_29;
          }
        }
        else
        {
          float v128 = 0.0;
          float v127 = 0.0;
          float v126 = 0.0;
        }
        float v132 = 0.0;
        float v131 = 0.0;
LABEL_29:
        float v133 = 0.0;
        if (!v97)
        {
          float v138 = 0.0;
          float v137 = 0.0;
          float v136 = 0.0;
LABEL_33:
          float v142 = 0.0;
          float v141 = 0.0;
          goto LABEL_34;
        }
        float v134 = (float)(*(unsigned __int16 *)v97 >> v83) - v42;
        float v135 = (float)(*((unsigned __int16 *)v97 + 1) >> v83) - v42;
        v97 += 2;
        float v136 = _S6 * v135;
        float v137 = (float)(_S16 * v135) + (float)(v134 * _S7);
        float v138 = _S20 * v134;
        if (!v97) {
          goto LABEL_33;
        }
        float v139 = (float)(*(unsigned __int16 *)v97 >> v83) - v42;
        float v140 = (float)(*((unsigned __int16 *)v97 + 1) >> v83) - v42;
        v97 += 2;
        float v141 = _S6 * v140;
        float v142 = (float)(_S16 * v140) + (float)(v139 * _S7);
        float v133 = _S20 * v139;
LABEL_34:
        float v143 = _S5 * (float)((float)(v82->u16[0] >> v83) - v41);
        float v144 = v126 + v143;
        float v145 = v127 + v143;
        float v146 = v128 + v143;
        float v147 = _S5 * (float)((float)(v82->u16[1] >> v83) - v41);
        float v148 = v131 + v147;
        float v149 = v132 + v147;
        float v150 = v123 + v147;
        float v151 = _S5 * (float)((float)(v96->u16[0] >> v83) - v41);
        float v152 = v136 + v151;
        float v153 = v137 + v151;
        float v154 = v138 + v151;
        float v155 = _S5 * (float)((float)(v96->u16[1] >> v83) - v41);
        float v156 = v141 + v155;
        float v157 = v142 + v155;
        float v158 = v133 + v155;
        float v159 = (float)((float)((float)(_S1 * v145) + (float)(_S0 * v144)) + (float)(_S2 * v146)) + v49;
        float v160 = (float)((float)((float)(_S1 * v149) + (float)(_S0 * v148)) + (float)(_S2 * v150)) + v49;
        float v161 = (float)((float)((float)(_S1 * v153) + (float)(_S0 * v152)) + (float)(_S2 * v154)) + v49;
        float v162 = (float)((float)((float)(_S1 * v157) + (float)(_S0 * v156)) + (float)(_S2 * v158)) + v49;
        if (v159 < v49) {
          float v163 = v49;
        }
        else {
          float v163 = (float)((float)((float)(_S1 * v145) + (float)(_S0 * v144)) + (float)(_S2 * v146)) + v49;
        }
        if (v159 > v50) {
          float v163 = v50;
        }
        v77->i16[0] = llroundf(v163) << v84;
        if (v160 < v49) {
          float v164 = v49;
        }
        else {
          float v164 = (float)((float)((float)(_S1 * v149) + (float)(_S0 * v148)) + (float)(_S2 * v150)) + v49;
        }
        if (v160 > v50) {
          float v164 = v50;
        }
        v77->i16[1] = llroundf(v164) << v84;
        if (v161 < v49) {
          float v165 = v49;
        }
        else {
          float v165 = (float)((float)((float)(_S1 * v153) + (float)(_S0 * v152)) + (float)(_S2 * v154)) + v49;
        }
        if (v161 <= v50) {
          float v166 = v165;
        }
        else {
          float v166 = v50;
        }
        v98->i16[0] = llroundf(v166) << v84;
        if (v162 < v49) {
          float v167 = v49;
        }
        else {
          float v167 = (float)((float)((float)(_S1 * v157) + (float)(_S0 * v156)) + (float)(_S2 * v158)) + v49;
        }
        if (v162 > v50) {
          float v167 = v50;
        }
        v98->i16[1] = llroundf(v167) << v84;
        float v168 = (float)((float)(v144 + v148) + v152) + v156;
        float v169 = (float)((float)(v145 + v149) + v153) + v157;
        float v170 = (float)((float)(v146 + v150) + v154) + v158;
        float v171 = (float)((float)(v190 + (float)(v168 * *(float *)&v87)) + (float)(v169 * v187))
             + (float)(v170 * *(float *)&v90);
        float v172 = v88;
        if (v171 <= v88)
        {
          float v172 = (float)((float)(v190 + (float)(v168 * *(float *)&v87)) + (float)(v169 * v187))
               + (float)(v170 * *(float *)&v90);
          if (v171 < v198) {
            float v172 = v198;
          }
        }
        float v173 = (float)((float)(v190 + (float)(v168 * *((float *)&v87 + 1))) + (float)(v169 * v177))
             + (float)(v170 * *((float *)&v90 + 1));
        v99->i16[0] = llroundf(v172) << v84;
        float v174 = v88;
        if (v173 <= v88)
        {
          float v174 = v173;
          if (v173 < v198) {
            float v174 = v198;
          }
        }
        v122 += 2;
        float v82 = (uint16x8_t *)((char *)v82 + 4);
        float v96 = (uint16x8_t *)((char *)v96 + 4);
        v99->i16[1] = llroundf(v174) << v84;
        float v77 = (uint16x8_t *)((char *)v77 + 4);
        float v98 = (uint16x8_t *)((char *)v98 + 4);
        float v99 = (uint16x8_t *)((char *)v99 + 4);
        _S7 = v192;
        _S6 = v193;
      }
      float v82 = (uint16x8_t *)&v92[v21];
      float v81 = (const __int16 *)&v93[v22];
      float v77 = (uint16x8_t *)&v94[v25];
      v76 += v26;
      v9 += 2;
    }
    while (v13 > v9);
    if (v176 && v28)
    {
      size_t v175 = 2 * v10;
      do
      {
        double result = (unint64_t)memcpy(v43, v24, v175);
        v24 += v23;
        v43 += v27;
        --v13;
      }
      while (v13);
    }
    else if (v28)
    {
      do
      {
        if (v10) {
          double result = (unint64_t)memset(v43, 255, 2 * v10);
        }
        v43 += v27;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_xf444_rgb_xf420_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 == 2 * v8) {
    return result;
  }
  unint64_t v10 = 0;
  unint64_t v11 = *(void *)(result + 20);
  uint64_t v12 = *(void *)(result + 36);
  uint64_t v13 = *(void *)(result + 44) + 2 * v8;
  unint64_t v14 = 2 * v9 - 2 * v8;
  uint64_t v15 = *(void *)(result + 112);
  uint64_t v16 = *(void **)(result + 128);
  uint64_t v17 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v7);
  uint64_t v18 = *(void *)(result + 152);
  uint64_t v20 = *(void **)(result + 56);
  uint64_t v19 = *(uint64_t **)(result + 64);
  uint64_t v21 = *(uint64_t **)(result + 136);
  uint64_t v22 = *v19;
  uint64_t v23 = v19[1];
  uint64_t v24 = v19[2];
  uint64_t v25 = v20[2];
  uint64_t v26 = (char *)(v25 + v24 * v13 + 2 * v12);
  uint64_t v27 = *v21;
  uint64_t v28 = v21[1];
  uint64_t v29 = v21[2];
  uint64_t v30 = v16[2];
  uint64_t v31 = (char *)(v30 + v29 * v17 + 2 * v15);
  *(float *)&unsigned int v32 = (float)*(unsigned int *)(v18 + 128);
  *(float *)&unsigned int v33 = (float)*(unsigned int *)(v18 + 136);
  float v34 = *(float *)&v33 / *(float *)&v32;
  LOWORD(v32) = *(_WORD *)(v18 + 140);
  float v35 = (float)v32;
  LOWORD(v33) = *(_WORD *)(v18 + 142);
  float v36 = (float)v33;
  float v37 = v34 * *(float *)v18;
  float v38 = v34 * *(float *)(v18 + 8);
  float v39 = v34 * *(float *)(v18 + 16);
  float v40 = v34 * *(float *)(v18 + 20);
  float v41 = *(float *)(v18 + 28);
  float v42 = v34 * v41;
  LOWORD(v41) = *(_WORD *)(v18 + 144);
  float v43 = (float)LODWORD(v41);
  LOWORD(v2) = *(_WORD *)(v18 + 146);
  float v44 = (float)v2;
  LOWORD(v3) = *(_WORD *)(v18 + 148);
  float v45 = (float)v3;
  LOWORD(v4) = *(_WORD *)(v18 + 150);
  float v46 = (float)v4;
  LOWORD(v5) = *(_WORD *)(v18 + 152);
  float v47 = (float)v5;
  float v48 = *(float *)(v18 + 36);
  float v49 = *(float *)(v18 + 40);
  float v50 = *(float *)(v18 + 44);
  float v127 = *(float *)(v18 + 52) * 0.25;
  float v128 = *(float *)(v18 + 48) * 0.25;
  float v125 = *(float *)(v18 + 60) * 0.25;
  float v126 = *(float *)(v18 + 56) * 0.25;
  float v123 = *(float *)(v18 + 68) * 0.25;
  float v124 = *(float *)(v18 + 64) * 0.25;
  uint64_t v51 = v20[1];
  uint64_t v52 = (char *)(*v20 + v22 * v13 + 2 * v12);
  if (v51) {
    float16x8_t v53 = (char *)(v51 + v23 * v13 + 2 * v12);
  }
  else {
    float16x8_t v53 = 0;
  }
  uint64_t v54 = v16[1];
  uint64_t v55 = (char *)(*v16 + v27 * v17 + 2 * v15);
  unsigned int v56 = *(unsigned __int8 *)(v18 + 132);
  BOOL v57 = v56 >= 0x11;
  char v58 = 16 - v56;
  if (v57) {
    char v59 = 0;
  }
  else {
    char v59 = v58;
  }
  LODWORD(result) = *(unsigned __int8 *)(v18 + 124);
  if (result >= 0x11) {
    LOBYTE(result) = 0;
  }
  else {
    LOBYTE(result) = 16 - result;
  }
  uint64_t v60 = v54 + v28 * (v17 / 2) + 2 * v15;
  double result = result;
  char v61 = v59;
  do
  {
    float v62 = &v55[v27];
    float32x4_t v63 = &v53[v23];
    int32x4_t v64 = &v52[v22];
    if (v11)
    {
      unint64_t v65 = 0;
      int16x8_t v66 = &v52[v22];
      int16x8_t v67 = &v53[v23];
      int16x8_t v68 = &v55[v27];
      do
      {
        float v69 = 0.0;
        if (v53)
        {
          float v70 = (float)(*(unsigned __int16 *)v53 >> result) - v36;
          float v71 = (float)(*((unsigned __int16 *)v53 + 1) >> result) - v36;
          v53 += 4;
          float v72 = v38 * v71;
          float v73 = (float)(v40 * v71) + (float)(v70 * v39);
          float v74 = v42 * v70;
          if (v53)
          {
            float v75 = (float)(*(unsigned __int16 *)v53 >> result) - v36;
            float v76 = (float)(*((unsigned __int16 *)v53 + 1) >> result) - v36;
            v53 += 4;
            float v77 = v38 * v76;
            float v78 = (float)(v40 * v76) + (float)(v75 * v39);
            float v69 = v42 * v75;
            goto LABEL_19;
          }
        }
        else
        {
          float v74 = 0.0;
          float v73 = 0.0;
          float v72 = 0.0;
        }
        float v78 = 0.0;
        float v77 = 0.0;
LABEL_19:
        float v79 = 0.0;
        if (!v67)
        {
          float v84 = 0.0;
          float v83 = 0.0;
          float v82 = 0.0;
LABEL_23:
          float v88 = 0.0;
          float v87 = 0.0;
          goto LABEL_24;
        }
        float v80 = (float)(*(unsigned __int16 *)v67 >> result) - v36;
        float v81 = (float)(*((unsigned __int16 *)v67 + 1) >> result) - v36;
        v67 += 4;
        float v82 = v38 * v81;
        float v83 = (float)(v40 * v81) + (float)(v80 * v39);
        float v84 = v42 * v80;
        if (!v67) {
          goto LABEL_23;
        }
        float v85 = (float)(*(unsigned __int16 *)v67 >> result) - v36;
        float v86 = (float)(*((unsigned __int16 *)v67 + 1) >> result) - v36;
        v67 += 4;
        float v87 = v38 * v86;
        float v88 = (float)(v40 * v86) + (float)(v85 * v39);
        float v79 = v42 * v85;
LABEL_24:
        float v89 = v37 * (float)((float)(*(unsigned __int16 *)v52 >> result) - v35);
        float v90 = v72 + v89;
        float v91 = v73 + v89;
        float v92 = v74 + v89;
        float v93 = v37 * (float)((float)(*((unsigned __int16 *)v52 + 1) >> result) - v35);
        float v94 = v77 + v93;
        float v95 = v78 + v93;
        float v96 = v69 + v93;
        float v97 = v37 * (float)((float)(*(unsigned __int16 *)v66 >> result) - v35);
        float v98 = v82 + v97;
        float v99 = v83 + v97;
        float v100 = v84 + v97;
        float v101 = v37 * (float)((float)(*((unsigned __int16 *)v66 + 1) >> result) - v35);
        float v102 = v87 + v101;
        float v103 = v88 + v101;
        float v104 = v79 + v101;
        float v105 = (float)((float)((float)(v49 * v91) + (float)(v48 * v90)) + (float)(v50 * v92)) + v43;
        float v106 = (float)((float)((float)(v49 * v95) + (float)(v48 * v94)) + (float)(v50 * v96)) + v43;
        float v107 = (float)((float)((float)(v49 * v99) + (float)(v48 * v98)) + (float)(v50 * v100)) + v43;
        float v108 = (float)((float)((float)(v49 * v103) + (float)(v48 * v102)) + (float)(v50 * v104)) + v43;
        if (v105 < v43) {
          float v109 = v43;
        }
        else {
          float v109 = (float)((float)((float)(v49 * v91) + (float)(v48 * v90)) + (float)(v50 * v92)) + v43;
        }
        if (v105 > v45) {
          float v109 = v45;
        }
        *(_WORD *)uint64_t v55 = llroundf(v109) << v61;
        if (v106 < v43) {
          float v110 = v43;
        }
        else {
          float v110 = (float)((float)((float)(v49 * v95) + (float)(v48 * v94)) + (float)(v50 * v96)) + v43;
        }
        if (v106 <= v45) {
          float v111 = v110;
        }
        else {
          float v111 = v45;
        }
        *((_WORD *)v55 + 1) = llroundf(v111) << v61;
        if (v107 < v43) {
          float v112 = v43;
        }
        else {
          float v112 = (float)((float)((float)(v49 * v99) + (float)(v48 * v98)) + (float)(v50 * v100)) + v43;
        }
        if (v107 > v45) {
          float v112 = v45;
        }
        *(_WORD *)int16x8_t v68 = llroundf(v112) << v61;
        if (v108 < v43) {
          float v113 = v43;
        }
        else {
          float v113 = (float)((float)((float)(v49 * v103) + (float)(v48 * v102)) + (float)(v50 * v104)) + v43;
        }
        if (v108 > v45) {
          float v113 = v45;
        }
        *((_WORD *)v68 + 1) = llroundf(v113) << v61;
        float v114 = (float)((float)(v90 + v94) + v98) + v102;
        float v115 = (float)((float)(v91 + v95) + v99) + v103;
        float v116 = (float)((float)(v92 + v96) + v100) + v104;
        float v117 = (float)((float)(v44 + (float)(v114 * v128)) + (float)(v115 * v127)) + (float)(v116 * v126);
        float v118 = v47;
        if (v117 <= v47)
        {
          float v118 = (float)((float)(v44 + (float)(v114 * v128)) + (float)(v115 * v127)) + (float)(v116 * v126);
          if (v117 < v46) {
            float v118 = v46;
          }
        }
        float16x8_t v119 = (_WORD *)(v60 + 2 * v65);
        float v120 = (float)((float)(v44 + (float)(v114 * v125)) + (float)(v115 * v124)) + (float)(v116 * v123);
        *float16x8_t v119 = llroundf(v118) << v61;
        float v121 = v47;
        if (v120 <= v47)
        {
          float v121 = v120;
          if (v120 < v46) {
            float v121 = v46;
          }
        }
        v52 += 4;
        v66 += 4;
        v55 += 4;
        v68 += 4;
        v119[1] = llroundf(v121) << v61;
        v65 += 2;
      }
      while (v11 > v65);
    }
    uint64_t v52 = &v64[v22];
    float16x8_t v53 = &v63[v23];
    uint64_t v55 = &v62[v27];
    v60 += v28;
    v10 += 2;
  }
  while (v14 > v10);
  if (v25 && v30)
  {
    size_t v122 = 2 * v11;
    do
    {
      double result = (unint64_t)memcpy(v31, v26, v122);
      v26 += v24;
      v31 += v29;
      --v14;
    }
    while (v14);
  }
  else if (v30)
  {
    do
    {
      if (v11) {
        double result = (unint64_t)memset(v31, 255, 2 * v11);
      }
      v31 += v29;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD(unint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, int16x4_t a7, float32x4_t a8, double a9, double a10)
{
  uint64_t v14 = *(void *)(result + 28);
  unint64_t v15 = *(unsigned __int8 *)result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (v17 != v16)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(result + 36);
    unint64_t v20 = v16 + *(void *)(result + 44);
    unint64_t v21 = v17 - v16;
    uint64_t v22 = *(void *)(result + 112);
    unint64_t v23 = *(void *)(result + 104) * a2;
    uint64_t v24 = *(void *)(result + 152);
    uint64_t v26 = *(uint64_t **)(result + 56);
    uint64_t v25 = *(uint64_t **)(result + 64);
    uint64_t v27 = *(void **)(result + 128);
    uint64_t v28 = *(uint64_t **)(result + 136);
    unsigned int v29 = *(unsigned __int16 *)(v24 + 140);
    unsigned int v30 = *(unsigned __int16 *)(v24 + 142);
    LODWORD(a10) = *(_DWORD *)(v24 + 8);
    unint64_t v31 = v23 / v15 + *(void *)(result + 120);
    uint64_t v226 = v25[2];
    uint64_t v227 = v28[2];
    uint64_t v228 = v27[2];
    uint64_t v229 = v26[2];
    uint64_t v32 = v229 + v226 * v20 + 2 * v19;
    uint64_t v33 = (unsigned char *)(v228 + v227 * v31 + v22);
    v10.i32[0] = *(_DWORD *)(v24 + 16);
    LODWORD(v23) = *(unsigned __int16 *)(v24 + 144);
    unsigned int v34 = *(unsigned __int16 *)(v24 + 146);
    unsigned int v35 = *(unsigned __int16 *)(v24 + 148);
    float v36 = (float)v29;
    *(short float *)v13.i16 = (short float)v29;
    unsigned int v37 = *(unsigned __int16 *)(v24 + 150);
    float v38 = (float)v30;
    short float v39 = (short float)v30;
    unsigned int v42 = *(unsigned __int16 *)(v24 + 152);
    float v43 = (float)v23;
    *(short float *)a7.i16 = (short float)v23;
    uint64_t v44 = v24 + 16548;
    float v273 = (float)v34;
    float v274 = *(float *)(v24 + 44);
    float v45 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    _S13 = v45 * *(float *)v24;
    _S30 = v45 * *(float *)&a10;
    _S15 = v45 * *(float *)v10.i32;
    _S18 = v45 * *(float *)(v24 + 20);
    _S23 = v45 * *(float *)(v24 + 28);
    float v51 = (float)v35;
    *(float *)&a9 = (float)v37;
    float v278 = (float)v37;
    float v52 = (float)v42;
    *(short float *)&a9 = (short float)v35;
    uint64_t v53 = v24 + 164;
    *(short float *)&a10 = (short float)v37;
    *(short float *)v10.i16 = (short float)v42;
    unsigned int v54 = *(unsigned __int8 *)(v24 + 124);
    if (v54 >= 0x11) {
      unsigned __int8 v55 = 0;
    }
    else {
      unsigned __int8 v55 = 16 - v54;
    }
    uint64_t v56 = v27[1];
    uint64_t v230 = v28[1];
    uint64_t v57 = *v28;
    uint64_t v58 = *v27 + *v28 * v31;
    uint64_t v59 = v24 + 32932;
    int16x8_t v60 = vdupq_lane_s16(v13, 0);
    float16x8_t v272 = (float16x8_t)v60;
    *(short float *)v60.i16 = -v39;
    float32x4_t v61 = (float32x4_t)vdupq_lane_s16(*(int16x4_t *)v60.i8, 0);
    float16x8_t v235 = (float16x8_t)v61;
    v40.i32[1] = *(_DWORD *)(v24 + 60);
    v40.i32[0] = *(_DWORD *)(v24 + 48);
    *(float32x2_t *)a8.f32 = vmul_f32(v40, (float32x2_t)0x3F0000003F000000);
    float16x8_t v271 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a8), 0);
    v12.i32[1] = *(_DWORD *)(v24 + 64);
    v12.i32[0] = *(_DWORD *)(v24 + 52);
    *(float32x2_t *)v12.f32 = vmul_f32(*(float32x2_t *)v12.f32, (float32x2_t)0x3F0000003F000000);
    float16x8_t v269 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v12), 0);
    v41.i32[1] = *(_DWORD *)(v24 + 68);
    v41.i32[0] = *(_DWORD *)(v24 + 56);
    *(float32x2_t *)v61.f32 = vmul_f32(v41, (float32x2_t)0x3F0000003F000000);
    float16x8_t v268 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v61), 0);
    float16x8_t v267 = (float16x8_t)vdupq_lane_s16(a7, 0);
    float16x8_t v265 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a9, 0);
    *(short float *)v11.i16 = (short float)v34;
    float16x8_t v266 = (float16x8_t)vdupq_lane_s16(v11, 0);
    float16x8_t v263 = (float16x8_t)vdupq_lane_s16(v10, 0);
    float16x8_t v264 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a10, 0);
    float v62 = (unsigned char *)(v56 + v230 * v31 + v22);
    if (!v56) {
      float v62 = 0;
    }
    float32x4_t v63 = (int8x8_t *)(v58 + v22);
    uint64_t v65 = *v26;
    uint64_t v64 = v26[1];
    uint16x8_t v66 = (uint16x8_t)vdupq_n_s16(-v55);
    uint64_t v67 = *v25;
    uint64_t v68 = v25[1];
    uint64_t v69 = v64 + v68 * v20 + 2 * v19;
    if (!v64) {
      uint64_t v69 = 0;
    }
    uint64_t v70 = v65 + v67 * v20 + 2 * v19;
    size_t v71 = *(void *)(result + 20);
    double result = (v71 - 7);
    _S28 = *(float *)(v24 + 108);
    _S9 = *(float *)(v24 + 112);
    __asm { FCVT            H7, S13 }
    float v275 = _S23;
    __asm { FCVT            H14, S23 }
    short float v234 = _H14;
    float v276 = _S15;
    __asm { FCVT            H14, S15 }
    short float v233 = _H14;
    __asm { FCVT            H14, S18 }
    short float v232 = _H14;
    float v277 = _S30;
    __asm { FCVT            H14, S30 }
    short float v231 = _H14;
    float v262 = *(float *)(v24 + 36);
    __asm { FCVT            H0, S0 }
    short float v251 = _H0;
    float v261 = *(float *)(v24 + 40);
    __asm { FCVT            H0, S4 }
    short float v250 = _H0;
    _S0 = *(_DWORD *)(v24 + 44);
    __asm { FCVT            H0, S0 }
    short float v249 = *(short float *)&_S0;
    __asm { FCVT            H0, S28 }
    short float v248 = *(short float *)&_S0;
    __asm { FCVT            H0, S9 }
    short float v247 = *(short float *)&_S0;
    float v280 = *(float *)(v24 + 116);
    __asm { FCVT            H0, S31 }
    short float v246 = *(short float *)&_S0;
    float v279 = *(float *)(v24 + 120);
    __asm { FCVT            H0, S10 }
    short float v245 = *(short float *)&_S0;
    float v260 = *(float *)(v24 + 72);
    __asm { FCVT            H0, S6 }
    short float v244 = *(short float *)&_S0;
    float v259 = *(float *)(v24 + 76);
    __asm { FCVT            H0, S16 }
    short float v243 = *(short float *)&_S0;
    float v258 = *(float *)(v24 + 80);
    __asm { FCVT            H0, S20 }
    short float v242 = *(short float *)&_S0;
    float v257 = *(float *)(v24 + 84);
    __asm { FCVT            H0, S25 }
    short float v241 = *(short float *)&_S0;
    float v256 = *(float *)(v24 + 88);
    __asm { FCVT            H0, S24 }
    short float v240 = *(short float *)&_S0;
    float v255 = *(float *)(v24 + 92);
    __asm { FCVT            H0, S27 }
    short float v239 = *(short float *)&_S0;
    float v254 = *(float *)(v24 + 96);
    __asm { FCVT            H0, S26 }
    short float v238 = *(short float *)&_S0;
    float v253 = *(float *)(v24 + 100);
    __asm { FCVT            H0, S29 }
    short float v237 = *(short float *)&_S0;
    float v252 = *(float *)(v24 + 104);
    __asm { FCVT            H0, S8 }
    short float v236 = *(short float *)&_S0;
    unint64_t v86 = a8.i64[0];
    float v270 = v12.f32[0];
    uint64_t v87 = v61.i64[0];
    v88.i64[0] = 0x9000900090009000;
    v88.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v71 < 8)
      {
        size_t v144 = 0;
        float v143 = v62;
        float v92 = v63;
        float v91 = (const __int16 *)v69;
        float v90 = (uint16x8_t *)v70;
      }
      else
      {
        uint64_t v89 = 0;
        float v90 = (uint16x8_t *)v70;
        float v91 = (const __int16 *)v69;
        float v92 = v63;
        do
        {
          if (v91)
          {
            int16x8x2_t v281 = vld2q_s16(v91);
            v91 += 16;
            float16x8_t v93 = vaddq_f16(v235, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v281.val[0], v66)));
            float16x8_t v94 = vaddq_f16(v235, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v281.val[1], v66)));
            float16x8_t v95 = vmulq_n_f16(v94, v231);
            float16x8_t v96 = vmlaq_n_f16(vmulq_n_f16(v93, v233), v94, v232);
            float16x8_t v97 = vmulq_n_f16(v93, v234);
          }
          else
          {
            float16x8_t v97 = 0uLL;
            float16x8_t v96 = 0uLL;
            float16x8_t v95 = 0uLL;
          }
          uint16x8_t v98 = *v90++;
          float16x8_t v99 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v98, v66)), v272);
          float16x8_t v100 = vmlaq_n_f16(v96, v99, _H7);
          float16x8_t v101 = vmlaq_n_f16(v97, v99, _H7);
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v95, v99, _H7), (float16x8_t)0), v88));
          uint32x4_t v103 = vmovl_high_u16(v102);
          uint32x4_t v104 = vmovl_u16(*(uint16x4_t *)v102.i8);
          v105.i16[0] = *(_WORD *)(v53 + 2 * v104.u32[0]);
          v105.i16[1] = *(_WORD *)(v53 + 2 * v104.u32[1]);
          v105.i16[2] = *(_WORD *)(v53 + 2 * v104.u32[2]);
          v105.i16[3] = *(_WORD *)(v53 + 2 * v104.u32[3]);
          v105.i16[4] = *(_WORD *)(v53 + 2 * v103.u32[0]);
          v105.i16[5] = *(_WORD *)(v53 + 2 * v103.u32[1]);
          v105.i16[6] = *(_WORD *)(v53 + 2 * v103.u32[2]);
          v105.i16[7] = *(_WORD *)(v53 + 2 * v103.u32[3]);
          uint16x8_t v106 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v100, (float16x8_t)0), v88));
          float16x8_t v107 = (float16x8_t)vmovl_high_u16(v106);
          *(void *)&long long v108 = v107.u32[2];
          *((void *)&v108 + 1) = v107.u32[3];
          long long v109 = v108;
          *(void *)&long long v108 = v107.u32[0];
          *((void *)&v108 + 1) = v107.u32[1];
          uint32x4_t v110 = vmovl_u16(*(uint16x4_t *)v106.i8);
          v107.i16[0] = *(_WORD *)(v53 + 2 * v110.u32[0]);
          v107.i16[1] = *(_WORD *)(v53 + 2 * v110.u32[1]);
          v107.i16[2] = *(_WORD *)(v53 + 2 * v110.u32[2]);
          v107.i16[3] = *(_WORD *)(v53 + 2 * v110.u32[3]);
          v107.i16[4] = *(_WORD *)(v53 + 2 * v108);
          v107.i16[5] = *(_WORD *)(v53 + 2 * *((void *)&v108 + 1));
          v107.i16[6] = *(_WORD *)(v53 + 2 * v109);
          v107.i16[7] = *(_WORD *)(v53 + 2 * *((void *)&v109 + 1));
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v101, (float16x8_t)0), v88));
          uint32x4_t v112 = vmovl_high_u16(v111);
          float16x8_t v113 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v111.i8);
          v113.i16[0] = *(_WORD *)(v53 + 2 * v113.u32[0]);
          v113.i16[1] = *(_WORD *)(v53 + 2 * v113.u32[1]);
          v113.i16[2] = *(_WORD *)(v53 + 2 * v113.u32[2]);
          v113.i16[3] = *(_WORD *)(v53 + 2 * v113.u32[3]);
          v113.i16[4] = *(_WORD *)(v53 + 2 * v112.u32[0]);
          v113.i16[5] = *(_WORD *)(v53 + 2 * v112.u32[1]);
          v113.i16[6] = *(_WORD *)(v53 + 2 * v112.u32[2]);
          v113.i16[7] = *(_WORD *)(v53 + 2 * v112.u32[3]);
          uint16x8_t v114 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v105, v248), v107, v247), v113, v246), vmaxq_f16(vmaxq_f16(v105, v107), v113), v245), (float16x8_t)0), v88));
          uint32x4_t v115 = vmovl_high_u16(v114);
          float16x8_t v116 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v114.i8);
          v116.i16[0] = *(_WORD *)(v44 + 2 * v116.u32[0]);
          v116.i16[1] = *(_WORD *)(v44 + 2 * v116.u32[1]);
          v116.i16[2] = *(_WORD *)(v44 + 2 * v116.u32[2]);
          v116.i16[3] = *(_WORD *)(v44 + 2 * v116.u32[3]);
          v116.i16[4] = *(_WORD *)(v44 + 2 * v115.u32[0]);
          v116.i16[5] = *(_WORD *)(v44 + 2 * v115.u32[1]);
          v116.i16[6] = *(_WORD *)(v44 + 2 * v115.u32[2]);
          v116.i16[7] = *(_WORD *)(v44 + 2 * v115.u32[3]);
          float16x8_t v117 = vmulq_f16(v105, v116);
          float16x8_t v118 = vmulq_f16(v107, v116);
          float16x8_t v119 = vmulq_f16(v113, v116);
          float16x8_t v120 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v117, v241), v118, v240), v119, v239);
          float16x8_t v121 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v119, v236), v118, v237), v117, v238);
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v117, v244), v118, v243), v119, v242), (float16x8_t)0), v88));
          uint32x4_t v123 = vmovl_high_u16(v122);
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v105.i16[0] = *(_WORD *)(v59 + 2 * v124.u32[0]);
          v105.i16[1] = *(_WORD *)(v59 + 2 * v124.u32[1]);
          v105.i16[2] = *(_WORD *)(v59 + 2 * v124.u32[2]);
          v105.i16[3] = *(_WORD *)(v59 + 2 * v124.u32[3]);
          v105.i16[4] = *(_WORD *)(v59 + 2 * v123.u32[0]);
          v105.i16[5] = *(_WORD *)(v59 + 2 * v123.u32[1]);
          v105.i16[6] = *(_WORD *)(v59 + 2 * v123.u32[2]);
          float16x8_t v125 = v105;
          v125.i16[7] = *(_WORD *)(v59 + 2 * v123.u32[3]);
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v88));
          uint32x4_t v127 = vmovl_high_u16(v126);
          uint32x4_t v128 = vmovl_u16(*(uint16x4_t *)v126.i8);
          v118.i16[7] = (unint64_t)v128.u32[1] >> 48;
          v118.i16[0] = *(_WORD *)(v59 + 2 * v128.u32[0]);
          uint64_t v129 = v127.u32[3];
          v118.i16[1] = *(_WORD *)(v59 + 2 * v128.u32[1]);
          v118.i16[2] = *(_WORD *)(v59 + 2 * v128.u32[2]);
          v118.i16[3] = *(_WORD *)(v59 + 2 * v128.u32[3]);
          v118.i16[4] = *(_WORD *)(v59 + 2 * v127.u32[0]);
          v118.i16[5] = *(_WORD *)(v59 + 2 * v127.u32[1]);
          v118.i16[6] = *(_WORD *)(v59 + 2 * v127.u32[2]);
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v88));
          uint32x4_t v131 = vmovl_u16(*(uint16x4_t *)v130.i8);
          uint64_t v132 = v131.u32[1];
          uint64_t v133 = v131.u32[0];
          float16x8_t v134 = v118;
          v134.i16[7] = *(_WORD *)(v59 + 2 * v129);
          int16x8_t v135 = (int16x8_t)vmovl_high_u16(v130);
          uint64_t v136 = v131.u32[3];
          uint64_t v137 = v131.u32[2];
          *(void *)&long long v108 = v135.u32[2];
          *((void *)&v108 + 1) = v135.u32[3];
          long long v138 = v108;
          *(void *)&long long v108 = v135.u32[0];
          v135.i16[7] = (unint64_t)v135.u32[1] >> 48;
          v135.i16[0] = *(_WORD *)(v59 + 2 * v133);
          float v139 = (__int16 *)(v59 + 2 * v135.u32[1]);
          v135.i16[1] = *(_WORD *)(v59 + 2 * v132);
          v135.i16[2] = *(_WORD *)(v59 + 2 * v137);
          v135.i16[3] = *(_WORD *)(v59 + 2 * v136);
          v135.i16[4] = *(_WORD *)(v59 + 2 * v108);
          v135.i16[5] = *v139;
          v135.i16[6] = *(_WORD *)(v59 + 2 * v138);
          float v140 = (__int16 *)(v59 + 2 * *((void *)&v138 + 1));
          float16x8_t v141 = (float16x8_t)v135;
          v141.i16[7] = *v140;
          *v92++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v267, v125, v251), v134, v250), v141, v249), v267), v265)));
          int16x8_t v142 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v105, (int16x8_t)v118), (float16x8_t)vuzp2q_s16((int16x8_t)v125, (int16x8_t)v134));
          *(int8x8_t *)&v62[v89] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v266, v271, (float16x8_t)vzip1q_s16(v142, v142)), v269, (float16x8_t)vzip2q_s16(v142, v142)), v268, vaddq_f16((float16x8_t)vtrn1q_s16(v135, v135), (float16x8_t)vtrn2q_s16((int16x8_t)v141, (int16x8_t)v141))), v264), v263)));
          v89 += 8;
        }
        while ((int)v89 < (int)result);
        float v143 = &v62[v89];
        size_t v144 = v71 & 0xFFFFFFF8;
      }
      for (; v71 > v144; float v92 = (int8x8_t *)((char *)v92 + 2))
      {
        if (v91)
        {
          float v145 = (float)(*(unsigned __int16 *)v91 >> v55) - v38;
          float v146 = (float)(*((unsigned __int16 *)v91 + 1) >> v55) - v38;
          v91 += 2;
          float v147 = v277 * v146;
          float v148 = (float)(_S18 * v146) + (float)(v145 * v276);
          float v149 = v275 * v145;
        }
        else
        {
          float v149 = 0.0;
          float v148 = 0.0;
          float v147 = 0.0;
        }
        float v150 = _S13 * (float)((float)(v90->u16[0] >> v55) - v36);
        float v151 = v147 + v150;
        BOOL v152 = (float)(v147 + v150) <= 8191.0;
        float v153 = 8191.0;
        if (v152)
        {
          float v153 = v151;
          if (v151 < 0.0) {
            float v153 = 0.0;
          }
        }
        float v154 = v148 + v150;
        BOOL v152 = (float)(v148 + v150) <= 8191.0;
        float v155 = 8191.0;
        if (v152)
        {
          float v155 = v154;
          if (v154 < 0.0) {
            float v155 = 0.0;
          }
        }
        float v156 = v149 + v150;
        float v157 = 8191.0;
        if (v156 <= 8191.0)
        {
          float v157 = v156;
          if (v156 < 0.0) {
            float v157 = 0.0;
          }
        }
        if (v91)
        {
          float v158 = (float)(*(unsigned __int16 *)v91 >> v55) - v38;
          float v159 = (float)(*((unsigned __int16 *)v91 + 1) >> v55) - v38;
          v91 += 2;
          float v160 = v277 * v159;
          float v161 = (float)(_S18 * v159) + (float)(v158 * v276);
          float v162 = v275 * v158;
        }
        else
        {
          float v162 = 0.0;
          float v161 = 0.0;
          float v160 = 0.0;
        }
        float v163 = v36;
        v12.f32[0] = _S13;
        float v164 = _S13 * (float)((float)(v90->u16[1] >> v55) - v36);
        float v165 = v160 + v164;
        BOOL v152 = (float)(v160 + v164) <= 8191.0;
        float v166 = 8191.0;
        if (v152)
        {
          float v166 = v165;
          if (v165 < 0.0) {
            float v166 = 0.0;
          }
        }
        float v167 = v161 + v164;
        BOOL v152 = (float)(v161 + v164) <= 8191.0;
        float v168 = 8191.0;
        if (v152)
        {
          float v168 = v167;
          if (v167 < 0.0) {
            float v168 = 0.0;
          }
        }
        float v169 = v162 + v164;
        float v170 = 8191.0;
        if (v169 <= 8191.0)
        {
          float v170 = v169;
          if (v169 < 0.0) {
            float v170 = 0.0;
          }
        }
        _H5 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        _H20 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
        __asm { FCVT            S20, H20 }
        _H4 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
        _H30 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
        _H12 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v170, 0.0), 8191.0)));
        float v180 = (float)((float)((float)(_S9 * _S0) + (float)(_S28 * _S5)) + (float)(v280 * _S20))
             + (float)(v279 * fmaxf(_S5, fmaxf(_S0, _S20)));
        float v181 = 8191.0;
        if (v180 <= 8191.0)
        {
          float v181 = v180;
          if (v180 < 0.0) {
            float v181 = 0.0;
          }
        }
        __asm
        {
          FCVT            S4, H4
          FCVT            S6, H30
          FCVT            S30, H12
        }
        _H12 = *(_WORD *)(v44 + 2 * llroundf(v181));
        float v186 = (float)((float)((float)(_S9 * _S6) + (float)(_S28 * _S4)) + (float)(v280 * _S30))
             + (float)(v279 * fmaxf(_S4, fmaxf(_S6, _S30)));
        float v187 = 8191.0;
        if (v186 <= 8191.0)
        {
          float v187 = v186;
          if (v186 < 0.0) {
            float v187 = 0.0;
          }
        }
        __asm { FCVT            S12, H12 }
        float v189 = _S5 * _S12;
        float v190 = _S0 * _S12;
        float v191 = _S20 * _S12;
        LOWORD(_S12) = *(_WORD *)(v44 + 2 * llroundf(v187));
        __asm { FCVT            S12, H12 }
        float v193 = _S4 * _S12;
        _S6 = _S6 * _S12;
        _S30 = _S30 * _S12;
        float v196 = (float)((float)(v259 * v190) + (float)(v189 * v260)) + (float)(v191 * v258);
        float v197 = (float)((float)(v256 * v190) + (float)(v189 * v257)) + (float)(v191 * v255);
        _S0 = (float)((float)(v253 * v190) + (float)(v189 * v254)) + (float)(v191 * v252);
        float v199 = (float)((float)(v259 * _S6) + (float)(v193 * v260)) + (float)(_S30 * v258);
        _S20 = (float)((float)(v256 * _S6) + (float)(v193 * v257)) + (float)(_S30 * v255);
        _S4 = (float)((float)(v253 * _S6) + (float)(v193 * v254)) + (float)(_S30 * v252);
        LOWORD(_S6) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v196, 0.0), 8191.0)));
        LOWORD(_S30) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v197, 0.0), 8191.0)));
        __asm
        {
          FCVT            S6, H6
          FCVT            S30, H30
        }
        LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        unsigned int v204 = llroundf(fminf(fmaxf(v199, 0.0), 8191.0));
        __asm { FCVT            S5, H0 }
        LOWORD(_S0) = *(_WORD *)(v59 + 2 * v204);
        __asm { FCVT            S0, H0 }
        LOWORD(_S20) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
        __asm { FCVT            S20, H20 }
        LOWORD(_S4) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
        __asm { FCVT            S23, H4 }
        float v209 = (float)((float)((float)(v261 * _S30) + (float)(v262 * _S6)) + (float)(v274 * _S5)) + v43;
        float v210 = (float)((float)((float)(v261 * _S20) + (float)(v262 * _S0)) + (float)(v274 * _S23)) + v43;
        if (v209 < v43) {
          float v211 = v43;
        }
        else {
          float v211 = (float)((float)((float)(v261 * _S30) + (float)(v262 * _S6)) + (float)(v274 * _S5)) + v43;
        }
        if (v209 <= v51) {
          float v212 = v211;
        }
        else {
          float v212 = v51;
        }
        v92->i8[0] = llroundf(v212);
        if (v210 < v43) {
          float v213 = v43;
        }
        else {
          float v213 = (float)((float)((float)(v261 * _S20) + (float)(v262 * _S0)) + (float)(v274 * _S23)) + v43;
        }
        if (v210 > v51) {
          float v213 = v51;
        }
        v92->i8[1] = llroundf(v213);
        float v214 = _S6 + _S0;
        float v215 = _S30 + _S20;
        float v216 = _S5 + _S23;
        float v217 = (float)((float)(v273 + (float)(v214 * *(float *)&v86)) + (float)((float)(_S30 + _S20) * v270))
             + (float)(v216 * *(float *)&v87);
        float v218 = v52;
        if (v217 <= v52)
        {
          float v218 = v217;
          if (v217 < v278) {
            float v218 = v278;
          }
        }
        float v219 = (float)((float)(v273 + (float)(v214 * *((float *)&v86 + 1))) + (float)(v215 * v12.f32[1]))
             + (float)(v216 * *((float *)&v87 + 1));
        *float v143 = llroundf(v218);
        float v220 = v52;
        float v36 = v163;
        _S13 = v12.f32[0];
        if (v219 <= v52)
        {
          float v220 = v219;
          if (v219 < v278) {
            float v220 = v278;
          }
        }
        v143[1] = llroundf(v220);
        v143 += 2;
        v144 += 2;
        float v90 = (uint16x8_t *)((char *)v90 + 4);
      }
      v70 += v67;
      v69 += v68;
      float32x4_t v63 = (int8x8_t *)((char *)v63 + v57);
      v62 += v230;
      ++v18;
    }
    while (v18 != v21);
    if (v229 && v228)
    {
      uint64_t v221 = 0;
      do
      {
        if (v71)
        {
          size_t v222 = v71;
          float v223 = v33;
          float v224 = (unsigned __int16 *)v32;
          do
          {
            unsigned int v225 = *v224++;
            *v223++ = llroundf((float)v225 * 0.0038911);
            --v222;
          }
          while (v222);
        }
        v32 += v226;
        v33 += v227;
        ++v221;
      }
      while (v221 != v21);
    }
    else if (v228)
    {
      do
      {
        if (v71) {
          double result = (unint64_t)memset(v33, 255, v71);
        }
        v33 += v227;
        --v21;
      }
      while (v21);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Tone_Mat_TRC_422vf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (void *)result[16];
    unint64_t v16 = result[13] * a2 / v6 + result[15];
    uint64_t v17 = result[19];
    uint64_t v18 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    uint64_t v25 = v24 + v23 * v12 + 2 * v11;
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    uint64_t v30 = (unsigned char *)(v29 + v28 * v16 + v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    float v32 = (float)LODWORD(a4);
    float v33 = (float)LODWORD(a5);
    float v34 = v31 * *(float *)v17;
    float v173 = v31 * *(float *)(v17 + 16);
    float v174 = v31 * *(float *)(v17 + 8);
    float v35 = v31 * *(float *)(v17 + 20);
    *(float *)&unsigned int v36 = v31 * *(float *)(v17 + 28);
    float v171 = *(float *)&v36;
    float v172 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    *(float *)&unsigned int v40 = (float)v36;
    float v175 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v17 + 152);
    float v41 = (float)v40;
    float v169 = *(float *)(v17 + 36);
    float v170 = v38;
    float v42 = *(float *)(v17 + 44);
    float v167 = *(float *)(v17 + 48) * 0.5;
    float v168 = *(float *)(v17 + 40);
    float v165 = *(float *)(v17 + 56) * 0.5;
    float v166 = *(float *)(v17 + 52) * 0.5;
    float v163 = *(float *)(v17 + 64) * 0.5;
    float v164 = *(float *)(v17 + 60) * 0.5;
    float v43 = *(float *)(v17 + 72);
    float v162 = *(float *)(v17 + 68) * 0.5;
    float v45 = *(float *)(v17 + 76);
    float v44 = *(float *)(v17 + 80);
    float v46 = *(float *)(v17 + 84);
    float v47 = *(float *)(v17 + 88);
    float v48 = *(float *)(v17 + 92);
    float v49 = *(float *)(v17 + 96);
    float v50 = *(float *)(v17 + 100);
    float v51 = *(float *)(v17 + 104);
    double result = (void *)(v17 + 164);
    uint64_t v52 = v17 + 16548;
    unsigned int v53 = *(unsigned __int8 *)(v17 + 124);
    if (v53 >= 0x11) {
      char v54 = 0;
    }
    else {
      char v54 = 16 - v53;
    }
    uint64_t v55 = v15[1];
    _ZF = v55 == 0;
    uint64_t v57 = v55 + v27 * v16;
    uint64_t v58 = *v15 + v26 * v16;
    uint64_t v59 = v17 + 32932;
    uint64_t v60 = v57 + v14;
    if (_ZF) {
      uint64_t v60 = 0;
    }
    float32x4_t v61 = (unsigned char *)(v58 + v14);
    uint64_t v63 = *v18;
    uint64_t v62 = v18[1];
    uint64_t v64 = v62 + v22 * v12 + 2 * v11;
    if (!v62) {
      uint64_t v64 = 0;
    }
    uint64_t v65 = v63 + v21 * v12 + 2 * v11;
    char v66 = v54;
    float v67 = *(float *)(v17 + 108);
    float v68 = *(float *)(v17 + 112);
    float v69 = *(float *)(v17 + 116);
    float v70 = *(float *)(v17 + 120);
    do
    {
      if (v10)
      {
        size_t v71 = 0;
        float v72 = (unsigned __int16 *)v65;
        float v73 = (unsigned __int16 *)v64;
        float v74 = v61;
        do
        {
          if (v73)
          {
            float v75 = (float)(*v73 >> v66) - v33;
            float v76 = (float)(v73[1] >> v66) - v33;
            v73 += 2;
            float v77 = v174 * v76;
            float v78 = (float)(v172 * v76) + (float)(v75 * v173);
            float v79 = v171 * v75;
          }
          else
          {
            float v79 = 0.0;
            float v78 = 0.0;
            float v77 = 0.0;
          }
          float v80 = v34 * (float)((float)(*v72 >> v66) - v32);
          float v81 = v77 + v80;
          BOOL v82 = (float)(v77 + v80) <= 8191.0;
          float v83 = 8191.0;
          if (v82)
          {
            float v83 = v81;
            if (v81 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = 8191.0;
          if ((float)(v78 + v80) <= 8191.0)
          {
            float v84 = v78 + v80;
            if ((float)(v78 + v80) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v79 + v80;
          float v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          if (v73)
          {
            float v87 = (float)(*v73 >> v66) - v33;
            float v88 = (float)(v73[1] >> v66) - v33;
            v73 += 2;
            float v89 = v174 * v88;
            float v90 = (float)(v172 * v88) + (float)(v87 * v173);
            float v91 = v171 * v87;
          }
          else
          {
            float v91 = 0.0;
            float v90 = 0.0;
            float v89 = 0.0;
          }
          float v92 = v34 * (float)((float)(v72[1] >> v66) - v32);
          float v93 = v89 + v92;
          BOOL v82 = (float)(v89 + v92) <= 8191.0;
          float v94 = 8191.0;
          if (v82)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v90 + v92;
          BOOL v82 = (float)(v90 + v92) <= 8191.0;
          float v96 = 8191.0;
          if (v82)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v32;
          float v98 = v91 + v92;
          float v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          unsigned int v106 = llroundf(fminf(fmaxf(v86, 0.0), 8191.0));
          __asm { FCVT            S4, H1 }
          _H1 = *((_WORD *)result + v106);
          __asm { FCVT            S30, H1 }
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          float v113 = fmaxf(_S0, fmaxf(_S4, _S30));
          float v114 = (float)((float)((float)(v68 * _S4) + (float)(v67 * _S0)) + (float)(v69 * _S30)) + (float)(v70 * v113);
          float v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            float v115 = (float)((float)((float)(v68 * _S4) + (float)(v67 * _S0)) + (float)(v69 * _S30)) + (float)(v70 * v113);
            if (v114 < 0.0) {
              float v115 = 0.0;
            }
          }
          __asm
          {
            FCVT            S1, H1
            FCVT            S6, H6
            FCVT            S7, H7
          }
          _H19 = *(_WORD *)(v52 + 2 * llroundf(v115));
          float v120 = (float)((float)((float)(v68 * _S6) + (float)(v67 * _S1)) + (float)(v69 * _S7))
               + (float)(v70 * fmaxf(_S1, fmaxf(_S6, _S7)));
          float v121 = 8191.0;
          if (v120 <= 8191.0)
          {
            float v121 = v120;
            if (v120 < 0.0) {
              float v121 = 0.0;
            }
          }
          __asm { FCVT            S3, H19 }
          float v123 = _S0 * _S3;
          float v124 = _S4 * _S3;
          float v125 = _S30 * _S3;
          _H17 = *(_WORD *)(v52 + 2 * llroundf(v121));
          __asm { FCVT            S17, H17 }
          float v128 = _S1 * _S17;
          _S6 = _S6 * _S17;
          _S7 = _S7 * _S17;
          float v131 = (float)((float)(v45 * v124) + (float)(v123 * v43)) + (float)(v125 * v44);
          float v132 = (float)((float)(v47 * v124) + (float)(v123 * v46)) + (float)(v125 * v48);
          _S0 = (float)((float)(v50 * v124) + (float)(v123 * v49)) + (float)(v125 * v51);
          float v134 = (float)((float)(v45 * _S6) + (float)(v128 * v43)) + (float)(_S7 * v44);
          _S4 = (float)((float)(v47 * _S6) + (float)(v128 * v46)) + (float)(_S7 * v48);
          _S1 = (float)((float)(v50 * _S6) + (float)(v128 * v49)) + (float)(_S7 * v51);
          LOWORD(_S6) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S7, H7
          }
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          unsigned int v139 = llroundf(fminf(fmaxf(v134, 0.0), 8191.0));
          __asm { FCVT            S3, H0 }
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * v139);
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S1) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S17, H1 }
          float v144 = (float)((float)((float)(v168 * _S7) + (float)(v169 * _S6)) + (float)(v42 * _S3)) + v37;
          float v145 = (float)((float)((float)(v168 * _S4) + (float)(v169 * _S0)) + (float)(v42 * _S17)) + v37;
          if (v144 < v37) {
            float v146 = v37;
          }
          else {
            float v146 = (float)((float)((float)(v168 * _S7) + (float)(v169 * _S6)) + (float)(v42 * _S3)) + v37;
          }
          if (v144 <= v39) {
            float v147 = v146;
          }
          else {
            float v147 = v39;
          }
          unsigned char *v74 = llroundf(v147);
          if (v145 < v37) {
            float v148 = v37;
          }
          else {
            float v148 = (float)((float)((float)(v168 * _S4) + (float)(v169 * _S0)) + (float)(v42 * _S17)) + v37;
          }
          if (v145 > v39) {
            float v148 = v39;
          }
          v74[1] = llroundf(v148);
          float v149 = _S6 + _S0;
          float v150 = _S7 + _S4;
          float v151 = (float)(v170 + (float)(v149 * v167)) + (float)((float)(_S7 + _S4) * v166);
          float v152 = _S3 + _S17;
          float v153 = v151 + (float)((float)(_S3 + _S17) * v165);
          float v154 = v41;
          if (v153 <= v41)
          {
            float v154 = v153;
            if (v153 < v175) {
              float v154 = v175;
            }
          }
          float v155 = (float)((float)(v170 + (float)(v149 * v164)) + (float)(v150 * v163)) + (float)(v152 * v162);
          *(unsigned char *)(v60 + v71) = llroundf(v154);
          float v156 = v41;
          float v32 = v97;
          if (v155 <= v41)
          {
            float v156 = v155;
            if (v155 < v175) {
              float v156 = v175;
            }
          }
          *(unsigned char *)(v60 + v71 + 1) = llroundf(v156);
          v71 += 2;
          v72 += 2;
          v74 += 2;
        }
        while (v10 > v71);
      }
      v65 += v21;
      v64 += v22;
      v61 += v26;
      v60 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      uint64_t v157 = 0;
      do
      {
        if (v10)
        {
          size_t v158 = v10;
          float v159 = v30;
          float v160 = (unsigned __int16 *)v25;
          do
          {
            unsigned int v161 = *v160++;
            *v159++ = llroundf((float)v161 * 0.0038911);
            --v158;
          }
          while (v158);
        }
        v25 += v23;
        v30 += v28;
        ++v157;
      }
      while (v157 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          double result = memset(v30, 255, v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_xf444_TRC_Mat_TRC_422vf_neon_fp16_GCD(unint64_t result, uint64_t a2, float32x4_t a3, double a4, double a5, double a6, int16x4_t a7, double a8, double a9)
{
  uint64_t v13 = *(void *)(result + 28);
  unint64_t v14 = *(unsigned __int8 *)result;
  unint64_t v15 = v13 * a2 / v14;
  unint64_t v16 = (v13 + v13 * a2) / v14;
  if (v16 != v15)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(result + 36);
    unint64_t v19 = v15 + *(void *)(result + 44);
    unint64_t v20 = v16 - v15;
    uint64_t v21 = *(void *)(result + 112);
    uint64_t v22 = *(void *)(result + 152);
    uint64_t v23 = *(uint64_t **)(result + 56);
    uint64_t v24 = *(uint64_t **)(result + 64);
    uint64_t v25 = *(void **)(result + 128);
    uint64_t v26 = *(uint64_t **)(result + 136);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    unint64_t v29 = *(void *)(result + 104) * a2 / v14 + *(void *)(result + 120);
    uint64_t v224 = v24[2];
    uint64_t v225 = v26[2];
    uint64_t v226 = v25[2];
    uint64_t v227 = v23[2];
    uint64_t v30 = v227 + v224 * v19 + 2 * v18;
    uint64_t v31 = (unsigned char *)(v226 + v225 * v29 + v21);
    unsigned int v32 = *(unsigned __int16 *)(v22 + 140);
    unsigned int v33 = *(unsigned __int16 *)(v22 + 142);
    v10.i32[0] = *(_DWORD *)(v22 + 28);
    unsigned int v34 = *(unsigned __int16 *)(v22 + 144);
    unsigned int v35 = *(unsigned __int16 *)(v22 + 146);
    *(float *)&a4 = (float)v32;
    *(short float *)v11.i16 = (short float)v32;
    unsigned int v36 = *(unsigned __int16 *)(v22 + 148);
    _S28 = *(_DWORD *)(v22 + 44);
    float v38 = (float)v33;
    short float v39 = (short float)v33;
    unsigned int v43 = *(unsigned __int16 *)(v22 + 150);
    float v44 = (float)v34;
    float v260 = (float)v35;
    float v261 = *(float *)&a4;
    unsigned int v45 = *(unsigned __int16 *)(v22 + 152);
    *(short float *)&a4 = (short float)v35;
    uint64_t v46 = v22 + 164;
    float v47 = (float)v36;
    *(short float *)a7.i16 = (short float)v36;
    float v48 = 8191.0 / (float)*(unsigned int *)(v22 + 128);
    _S7 = v48 * *(float *)v22;
    _S31 = v48 * *(float *)(v22 + 8);
    _S15 = v48 * *(float *)(v22 + 16);
    _S20 = v48 * *(float *)(v22 + 20);
    _S23 = v48 * *(float *)v10.i32;
    *(float *)&a9 = (float)v43;
    float v259 = (float)v43;
    float v54 = (float)v45;
    *(short float *)&a9 = (short float)v43;
    *(short float *)v10.i16 = (short float)v45;
    unsigned int v55 = *(unsigned __int8 *)(v22 + 124);
    unsigned __int8 v56 = 16 - v55;
    if (v55 >= 0x11) {
      unsigned __int8 v56 = 0;
    }
    uint64_t v57 = v25[1];
    uint64_t v58 = *v25 + v27 * v29;
    int16x8_t v59 = vdupq_lane_s16(v11, 0);
    float16x8_t v255 = (float16x8_t)v59;
    *(short float *)v59.i16 = -v39;
    float16x8_t v232 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v59.i8, 0);
    uint64_t v60 = v22 + 16548;
    v40.i32[1] = *(_DWORD *)(v22 + 60);
    v40.i32[0] = *(_DWORD *)(v22 + 48);
    *(float32x2_t *)v9.f32 = vmul_f32(v40, (float32x2_t)0x3F0000003F000000);
    float16x8_t v254 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v9), 0);
    v41.i32[1] = *(_DWORD *)(v22 + 64);
    v41.i32[0] = *(_DWORD *)(v22 + 52);
    *(float32x2_t *)a3.f32 = vmul_f32(v41, (float32x2_t)0x3F0000003F000000);
    float32x4_t v61 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a3), 0);
    float16x8_t v252 = (float16x8_t)v61;
    v42.i32[1] = *(_DWORD *)(v22 + 68);
    v42.i32[0] = *(_DWORD *)(v22 + 56);
    *(float32x2_t *)v61.f32 = vmul_f32(v42, (float32x2_t)0x3F0000003F000000);
    *(short float *)v12.i16 = (short float)v34;
    float16x8_t v245 = (float16x8_t)vdupq_lane_s16(v12, 0);
    float16x8_t v250 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    float16x8_t v251 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v61), 0);
    float16x8_t v249 = (float16x8_t)vdupq_lane_s16(a7, 0);
    float16x8_t v248 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a9, 0);
    uint64_t v62 = (unsigned char *)(v57 + v28 * v29 + v21);
    if (!v57) {
      uint64_t v62 = 0;
    }
    uint64_t v63 = (int8x8_t *)(v58 + v21);
    uint64_t v65 = *v23;
    uint64_t v64 = v23[1];
    uint16x8_t v66 = (uint16x8_t)vdupq_n_s16(-v56);
    uint64_t v67 = *v24;
    uint64_t v68 = v24[1];
    uint64_t v69 = v64 + v68 * v19 + 2 * v18;
    if (!v64) {
      uint64_t v69 = 0;
    }
    uint64_t v70 = v65 + v67 * v19 + 2 * v18;
    size_t v71 = *(void *)(result + 20);
    double result = (v71 - 7);
    unsigned __int8 v72 = v56;
    _S30 = *(float *)(v22 + 36);
    _S12 = *(float *)(v22 + 40);
    _S13 = *(float *)(v22 + 72);
    _S14 = *(float *)(v22 + 76);
    float16x8_t v247 = (float16x8_t)vdupq_lane_s16(v10, 0);
    _S22 = *(float *)(v22 + 80);
    _S25 = *(float *)(v22 + 84);
    _S24 = *(float *)(v22 + 88);
    _S27 = *(float *)(v22 + 92);
    _S26 = *(float *)(v22 + 96);
    _S29 = *(float *)(v22 + 100);
    _S8 = *(float *)(v22 + 104);
    __asm { FCVT            H9, S7 }
    float v257 = _S23;
    __asm { FCVT            H1, S23 }
    short float v231 = _H1;
    __asm { FCVT            H1, S15 }
    short float v230 = _H1;
    float v258 = _S20;
    __asm { FCVT            H1, S20 }
    short float v229 = _H1;
    __asm { FCVT            H1, S31 }
    short float v228 = _H1;
    __asm { FCVT            H1, S30 }
    short float v246 = _H1;
    __asm { FCVT            H1, S12 }
    short float v244 = _H1;
    float v256 = *(float *)(v22 + 44);
    __asm { FCVT            H1, S28 }
    short float v243 = _H1;
    __asm { FCVT            H1, S13 }
    short float v242 = _H1;
    __asm { FCVT            H1, S14 }
    short float v241 = _H1;
    __asm { FCVT            H1, S22 }
    short float v240 = _H1;
    __asm { FCVT            H1, S25 }
    short float v239 = _H1;
    __asm { FCVT            H1, S24 }
    short float v238 = _H1;
    __asm { FCVT            H1, S27 }
    short float v237 = _H1;
    __asm { FCVT            H1, S26 }
    short float v236 = _H1;
    __asm { FCVT            H1, S29 }
    short float v235 = _H1;
    __asm { FCVT            H1, S8 }
    short float v234 = _H1;
    uint64_t v105 = v9.i64[0];
    float v253 = a3.f32[0];
    uint64_t v106 = v61.i64[0];
    float v233 = a3.f32[1];
    v107.i64[0] = 0x9000900090009000;
    v107.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v71 < 8)
      {
        size_t v157 = 0;
        float v156 = v62;
        uint16x8_t v111 = v63;
        uint32x4_t v110 = (const __int16 *)v69;
        long long v109 = (uint16x8_t *)v70;
      }
      else
      {
        uint64_t v108 = 0;
        long long v109 = (uint16x8_t *)v70;
        uint32x4_t v110 = (const __int16 *)v69;
        uint16x8_t v111 = v63;
        do
        {
          if (v110)
          {
            int16x8x2_t v262 = vld2q_s16(v110);
            v110 += 16;
            float16x8_t v112 = vcvtq_f16_u16(vshlq_u16((uint16x8_t)v262.val[0], v66));
            v262.val[0] = (int16x8_t)vcvtq_f16_u16(vshlq_u16((uint16x8_t)v262.val[1], v66));
            v262.val[1] = (int16x8_t)vaddq_f16(v232, v112);
            float16x8_t v113 = vaddq_f16(v232, (float16x8_t)v262.val[0]);
            float16x8_t v114 = vmulq_n_f16(v113, v228);
            float16x8_t v115 = vmlaq_n_f16(vmulq_n_f16((float16x8_t)v262.val[1], v230), v113, v229);
            float16x8_t v116 = vmulq_n_f16((float16x8_t)v262.val[1], v231);
          }
          else
          {
            float16x8_t v116 = 0uLL;
            float16x8_t v115 = 0uLL;
            float16x8_t v114 = 0uLL;
          }
          uint16x8_t v117 = *v109++;
          float16x8_t v118 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v117, v66)), v255);
          float16x8_t v119 = vmlaq_n_f16(v115, v118, _H9);
          float16x8_t v120 = vmlaq_n_f16(v116, v118, _H9);
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v114, v118, _H9), (float16x8_t)0), v107));
          uint32x4_t v122 = vmovl_high_u16(v121);
          uint32x4_t v123 = vmovl_u16(*(uint16x4_t *)v121.i8);
          v124.i16[0] = *(_WORD *)(v46 + 2 * v123.u32[0]);
          v124.i16[1] = *(_WORD *)(v46 + 2 * v123.u32[1]);
          v124.i16[2] = *(_WORD *)(v46 + 2 * v123.u32[2]);
          v124.i16[3] = *(_WORD *)(v46 + 2 * v123.u32[3]);
          v124.i16[4] = *(_WORD *)(v46 + 2 * v122.u32[0]);
          v124.i16[5] = *(_WORD *)(v46 + 2 * v122.u32[1]);
          v124.i16[6] = *(_WORD *)(v46 + 2 * v122.u32[2]);
          v124.i16[7] = *(_WORD *)(v46 + 2 * v122.u32[3]);
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v107));
          uint32x4_t v126 = vmovl_high_u16(v125);
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v125.i8);
          v119.i16[0] = *(_WORD *)(v46 + 2 * v127.u32[0]);
          v119.i16[1] = *(_WORD *)(v46 + 2 * v127.u32[1]);
          v119.i16[2] = *(_WORD *)(v46 + 2 * v127.u32[2]);
          v119.i16[3] = *(_WORD *)(v46 + 2 * v127.u32[3]);
          v119.i16[4] = *(_WORD *)(v46 + 2 * v126.u32[0]);
          v119.i16[5] = *(_WORD *)(v46 + 2 * v126.u32[1]);
          v119.i16[6] = *(_WORD *)(v46 + 2 * v126.u32[2]);
          v119.i16[7] = *(_WORD *)(v46 + 2 * v126.u32[3]);
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v107));
          uint32x4_t v129 = vmovl_high_u16(v128);
          float16x8_t v130 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v128.i8);
          v130.i16[0] = *(_WORD *)(v46 + 2 * v130.u32[0]);
          v130.i16[1] = *(_WORD *)(v46 + 2 * v130.u32[1]);
          v130.i16[2] = *(_WORD *)(v46 + 2 * v130.u32[2]);
          v130.i16[3] = *(_WORD *)(v46 + 2 * v130.u32[3]);
          v130.i16[4] = *(_WORD *)(v46 + 2 * v129.u32[0]);
          v130.i16[5] = *(_WORD *)(v46 + 2 * v129.u32[1]);
          v130.i16[6] = *(_WORD *)(v46 + 2 * v129.u32[2]);
          v130.i16[7] = *(_WORD *)(v46 + 2 * v129.u32[3]);
          float16x8_t v131 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, v239), v119, v238), v130, v237);
          float16x8_t v132 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v130, v234), v119, v235), v124, v236);
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, v242), v119, v241), v130, v240), (float16x8_t)0), v107));
          uint32x4_t v134 = vmovl_high_u16(v133);
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v133.i8);
          v136.i16[7] = (unint64_t)v135.u32[3] >> 48;
          v124.i16[0] = *(_WORD *)(v60 + 2 * v135.u32[0]);
          v124.i16[1] = *(_WORD *)(v60 + 2 * v135.u32[1]);
          v124.i16[2] = *(_WORD *)(v60 + 2 * v135.u32[2]);
          v124.i16[3] = *(_WORD *)(v60 + 2 * v135.u32[3]);
          v124.i16[4] = *(_WORD *)(v60 + 2 * v134.u32[0]);
          v124.i16[5] = *(_WORD *)(v60 + 2 * v134.u32[1]);
          v124.i16[6] = *(_WORD *)(v60 + 2 * v134.u32[2]);
          float16x8_t v137 = v124;
          v137.i16[7] = *(_WORD *)(v60 + 2 * v134.u32[3]);
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, (float16x8_t)0), v107));
          uint32x4_t v139 = vmovl_high_u16(v138);
          uint32x4_t v140 = vmovl_u16(*(uint16x4_t *)v138.i8);
          v136.i16[0] = *(_WORD *)(v60 + 2 * v140.u32[0]);
          uint64_t v141 = v139.u32[3];
          v136.i16[1] = *(_WORD *)(v60 + 2 * v140.u32[1]);
          v136.i16[2] = *(_WORD *)(v60 + 2 * v140.u32[2]);
          v136.i16[3] = *(_WORD *)(v60 + 2 * v140.u32[3]);
          v136.i16[4] = *(_WORD *)(v60 + 2 * v139.u32[0]);
          v136.i16[5] = *(_WORD *)(v60 + 2 * v139.u32[1]);
          v136.i16[6] = *(_WORD *)(v60 + 2 * v139.u32[2]);
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v132, (float16x8_t)0), v107));
          uint32x4_t v143 = vmovl_u16(*(uint16x4_t *)v142.i8);
          uint64_t v144 = v143.u32[1];
          uint64_t v145 = v143.u32[0];
          float16x8_t v146 = (float16x8_t)v136;
          v146.i16[7] = *(_WORD *)(v60 + 2 * v141);
          int16x8_t v147 = (int16x8_t)vmovl_high_u16(v142);
          uint64_t v148 = v143.u32[3];
          uint64_t v149 = v143.u32[2];
          *(void *)&long long v150 = v147.u32[2];
          *((void *)&v150 + 1) = v147.u32[3];
          long long v151 = v150;
          *(void *)&long long v150 = v147.u32[0];
          v147.i16[7] = (unint64_t)v147.u32[1] >> 48;
          v147.i16[0] = *(_WORD *)(v60 + 2 * v145);
          float v152 = (__int16 *)(v60 + 2 * v147.u32[1]);
          v147.i16[1] = *(_WORD *)(v60 + 2 * v144);
          v147.i16[2] = *(_WORD *)(v60 + 2 * v149);
          v147.i16[3] = *(_WORD *)(v60 + 2 * v148);
          v147.i16[4] = *(_WORD *)(v60 + 2 * v150);
          v147.i16[5] = *v152;
          v147.i16[6] = *(_WORD *)(v60 + 2 * v151);
          float v153 = (__int16 *)(v60 + 2 * *((void *)&v151 + 1));
          float16x8_t v154 = (float16x8_t)v147;
          v154.i16[7] = *v153;
          *v111++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v245, v137, v246), v146, v244), v154, v243), v245), v249)));
          int16x8_t v155 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v124, v136), (float16x8_t)vuzp2q_s16((int16x8_t)v137, (int16x8_t)v146));
          *(int8x8_t *)&v62[v108] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v250, v254, (float16x8_t)vzip1q_s16(v155, v155)), v252, (float16x8_t)vzip2q_s16(v155, v155)), v251, vaddq_f16((float16x8_t)vtrn1q_s16(v147, v147), (float16x8_t)vtrn2q_s16((int16x8_t)v154, (int16x8_t)v154))), v248), v247)));
          v108 += 8;
        }
        while ((int)v108 < (int)result);
        float v156 = &v62[v108];
        size_t v157 = v71 & 0xFFFFFFF8;
      }
      while (v71 > v157)
      {
        if (v110)
        {
          float v158 = (float)(*(unsigned __int16 *)v110 >> v72) - v38;
          float v159 = (float)(*((unsigned __int16 *)v110 + 1) >> v72) - v38;
          v110 += 2;
          float v160 = _S31 * v159;
          float v161 = (float)(v258 * v159) + (float)(v158 * _S15);
          float v162 = v257 * v158;
        }
        else
        {
          float v162 = 0.0;
          float v161 = 0.0;
          float v160 = 0.0;
        }
        float v163 = _S7 * (float)((float)(v109->u16[0] >> v72) - v261);
        float v164 = 8191.0;
        if ((float)(v160 + v163) <= 8191.0)
        {
          float v164 = v160 + v163;
          if ((float)(v160 + v163) < 0.0) {
            float v164 = 0.0;
          }
        }
        float v165 = v161 + v163;
        float v166 = 8191.0;
        if (v165 <= 8191.0)
        {
          float v166 = v165;
          if (v165 < 0.0) {
            float v166 = 0.0;
          }
        }
        float v167 = 8191.0;
        if ((float)(v162 + v163) <= 8191.0)
        {
          float v167 = v162 + v163;
          if ((float)(v162 + v163) < 0.0) {
            float v167 = 0.0;
          }
        }
        if (v110)
        {
          float v168 = (float)(*(unsigned __int16 *)v110 >> v72) - v38;
          float v169 = (float)(*((unsigned __int16 *)v110 + 1) >> v72) - v38;
          v110 += 2;
          float v170 = _S31 * v169;
          float v171 = (float)(v258 * v169) + (float)(v168 * _S15);
          float v172 = v257 * v168;
        }
        else
        {
          float v172 = 0.0;
          float v171 = 0.0;
          float v170 = 0.0;
        }
        float v173 = _S7 * (float)((float)(v109->u16[1] >> v72) - v261);
        float v174 = 8191.0;
        if ((float)(v170 + v173) <= 8191.0)
        {
          float v174 = v170 + v173;
          if ((float)(v170 + v173) < 0.0) {
            float v174 = 0.0;
          }
        }
        float v175 = v171 + v173;
        BOOL v176 = (float)(v171 + v173) <= 8191.0;
        float v177 = 8191.0;
        if (v176)
        {
          float v177 = v175;
          if (v175 < 0.0) {
            float v177 = 0.0;
          }
        }
        float v178 = v172 + v173;
        float v179 = 8191.0;
        if (v178 <= 8191.0)
        {
          float v179 = v178;
          if (v178 < 0.0) {
            float v179 = 0.0;
          }
        }
        _H1 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
        _H6 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
        __asm
        {
          FCVT            S1, H1
          FCVT            S6, H6
        }
        _H16 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
        unsigned int v185 = llroundf(fminf(fmaxf(v174, 0.0), 8191.0));
        __asm { FCVT            S4, H16 }
        _H16 = *(_WORD *)(v46 + 2 * v185);
        __asm { FCVT            S16, H16 }
        _H0 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v177, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        _H18 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v179, 0.0), 8191.0)));
        __asm { FCVT            S18, H18 }
        float v193 = (float)((float)(_S14 * _S6) + (float)(_S1 * _S13)) + (float)(_S4 * _S22);
        float v194 = (float)((float)(_S24 * _S6) + (float)(_S1 * _S25)) + (float)(_S4 * _S27);
        _S1 = (float)((float)(_S29 * _S6) + (float)(_S1 * _S26)) + (float)(_S4 * _S8);
        float v196 = (float)((float)(_S14 * _S0) + (float)(_S16 * _S13)) + (float)(_S18 * _S22);
        _S6 = (float)((float)(_S24 * _S0) + (float)(_S16 * _S25)) + (float)(_S18 * _S27);
        _S0 = (float)((float)(_S29 * _S0) + (float)(_S16 * _S26)) + (float)(_S18 * _S8);
        LOWORD(_S16) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v193, 0.0), 8191.0)));
        LOWORD(_S18) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v194, 0.0), 8191.0)));
        __asm
        {
          FCVT            S16, H16
          FCVT            S18, H18
        }
        LOWORD(_S1) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
        unsigned int v201 = llroundf(fminf(fmaxf(v196, 0.0), 8191.0));
        __asm { FCVT            S4, H1 }
        LOWORD(_S1) = *(_WORD *)(v60 + 2 * v201);
        __asm { FCVT            S1, H1 }
        LOWORD(_S6) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
        __asm { FCVT            S6, H6 }
        LOWORD(_S0) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S17, H0 }
        float v206 = (float)((float)((float)(_S12 * _S18) + (float)(_S30 * _S16)) + (float)(v256 * _S4)) + v44;
        float v207 = (float)((float)((float)(_S12 * _S6) + (float)(_S30 * _S1)) + (float)(v256 * _S17)) + v44;
        if (v206 < v44) {
          float v208 = (float)v34;
        }
        else {
          float v208 = (float)((float)((float)(_S12 * _S18) + (float)(_S30 * _S16)) + (float)(v256 * _S4)) + v44;
        }
        if (v206 <= v47) {
          float v209 = v208;
        }
        else {
          float v209 = v47;
        }
        v111->i8[0] = llroundf(v209);
        if (v207 < v44) {
          float v210 = (float)v34;
        }
        else {
          float v210 = (float)((float)((float)(_S12 * _S6) + (float)(_S30 * _S1)) + (float)(v256 * _S17)) + v44;
        }
        if (v207 > v47) {
          float v210 = v47;
        }
        v111->i8[1] = llroundf(v210);
        float v211 = _S16 + _S1;
        float v212 = _S18 + _S6;
        float v213 = (float)(v260 + (float)(v211 * *(float *)&v105)) + (float)((float)(_S18 + _S6) * v253);
        float v214 = _S4 + _S17;
        float v215 = v213 + (float)((float)(_S4 + _S17) * *(float *)&v106);
        float v216 = v54;
        if (v215 <= v54)
        {
          float v216 = v215;
          if (v215 < v259) {
            float v216 = v259;
          }
        }
        float v217 = (float)((float)(v260 + (float)(v211 * *((float *)&v105 + 1))) + (float)(v212 * v233))
             + (float)(v214 * *((float *)&v106 + 1));
        *float v156 = llroundf(v216);
        float v218 = v54;
        if (v217 <= v54)
        {
          float v218 = v217;
          if (v217 < v259) {
            float v218 = v259;
          }
        }
        v156[1] = llroundf(v218);
        v156 += 2;
        v157 += 2;
        long long v109 = (uint16x8_t *)((char *)v109 + 4);
        uint16x8_t v111 = (int8x8_t *)((char *)v111 + 2);
      }
      v70 += v67;
      v69 += v68;
      uint64_t v63 = (int8x8_t *)((char *)v63 + v27);
      v62 += v28;
      ++v17;
    }
    while (v17 != v20);
    if (v227 && v226)
    {
      uint64_t v219 = 0;
      do
      {
        if (v71)
        {
          size_t v220 = v71;
          uint64_t v221 = v31;
          size_t v222 = (unsigned __int16 *)v30;
          do
          {
            unsigned int v223 = *v222++;
            *v221++ = llroundf((float)v223 * 0.0038911);
            --v220;
          }
          while (v220);
        }
        v30 += v224;
        v31 += v225;
        ++v219;
      }
      while (v219 != v20);
    }
    else if (v226)
    {
      do
      {
        if (v71) {
          double result = (unint64_t)memset(v31, 255, v71);
        }
        v31 += v225;
        --v20;
      }
      while (v20);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Mat_TRC_422vf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (uint64_t *)result[16];
    unint64_t v16 = result[13] * a2 / v6 + result[15];
    uint64_t v17 = result[19];
    uint64_t v18 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    uint64_t v25 = v24 + v23 * v12 + 2 * v11;
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    uint64_t v30 = (unsigned char *)(v29 + v28 * v16 + v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    *(float *)&unsigned int v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    float v32 = (float)LODWORD(a4);
    float v33 = (float)LODWORD(a5);
    float v34 = *(float *)&v31 * *(float *)v17;
    float v147 = *(float *)&v31 * *(float *)(v17 + 16);
    float v148 = *(float *)&v31 * *(float *)(v17 + 8);
    float v35 = *(float *)&v31 * *(float *)(v17 + 20);
    float v36 = *(float *)&v31 * *(float *)(v17 + 28);
    LOWORD(v31) = *(_WORD *)(v17 + 144);
    float v37 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 146);
    float v38 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 148);
    float v39 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 150);
    float v40 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 152);
    float v41 = (float)v31;
    float v42 = *(float *)(v17 + 36);
    float v43 = *(float *)(v17 + 40);
    float v44 = *(float *)(v17 + 44);
    float v145 = *(float *)(v17 + 48) * 0.5;
    float v146 = v35;
    float v143 = *(float *)(v17 + 56) * 0.5;
    float v144 = *(float *)(v17 + 52) * 0.5;
    float v141 = *(float *)(v17 + 64) * 0.5;
    float v142 = *(float *)(v17 + 60) * 0.5;
    float v45 = *(float *)(v17 + 72);
    float v140 = *(float *)(v17 + 68) * 0.5;
    float v47 = *(float *)(v17 + 76);
    float v46 = *(float *)(v17 + 80);
    float v48 = *(float *)(v17 + 84);
    float v49 = *(float *)(v17 + 88);
    float v50 = *(float *)(v17 + 92);
    float v51 = *(float *)(v17 + 96);
    float v52 = *(float *)(v17 + 100);
    float v53 = *(float *)(v17 + 104);
    double result = (void *)(v17 + 164);
    uint64_t v54 = v17 + 16548;
    unsigned int v55 = *(unsigned __int8 *)(v17 + 124);
    if (v55 >= 0x11) {
      char v56 = 0;
    }
    else {
      char v56 = 16 - v55;
    }
    uint64_t v58 = *v15;
    uint64_t v57 = v15[1];
    uint64_t v59 = v57 + v27 * v16 + v14;
    if (!v57) {
      uint64_t v59 = 0;
    }
    uint64_t v60 = (unsigned char *)(v58 + v26 * v16 + v14);
    uint64_t v62 = *v18;
    uint64_t v61 = v18[1];
    uint64_t v63 = v61 + v22 * v12 + 2 * v11;
    if (!v61) {
      uint64_t v63 = 0;
    }
    uint64_t v64 = v62 + v21 * v12 + 2 * v11;
    char v65 = v56;
    do
    {
      if (v10)
      {
        size_t v66 = 0;
        uint64_t v67 = (unsigned __int16 *)v64;
        uint64_t v68 = (unsigned __int16 *)v63;
        uint64_t v69 = v60;
        do
        {
          if (v68)
          {
            float v70 = (float)(*v68 >> v65) - v33;
            float v71 = (float)(v68[1] >> v65) - v33;
            v68 += 2;
            float v72 = v148 * v71;
            float v73 = (float)(v146 * v71) + (float)(v70 * v147);
            float v74 = v36 * v70;
          }
          else
          {
            float v74 = 0.0;
            float v73 = 0.0;
            float v72 = 0.0;
          }
          float v75 = v34 * (float)((float)(*v67 >> v65) - v32);
          float v76 = v72 + v75;
          BOOL v77 = (float)(v72 + v75) <= 8191.0;
          float v78 = 8191.0;
          if (v77)
          {
            float v78 = v76;
            if (v76 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v73 + v75;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = 8191.0;
          if ((float)(v74 + v75) <= 8191.0)
          {
            float v81 = v74 + v75;
            if ((float)(v74 + v75) < 0.0) {
              float v81 = 0.0;
            }
          }
          if (v68)
          {
            float v82 = (float)(*v68 >> v65) - v33;
            float v83 = (float)(v68[1] >> v65) - v33;
            v68 += 2;
            float v84 = v148 * v83;
            float v85 = (float)(v146 * v83) + (float)(v82 * v147);
            float v86 = v36 * v82;
          }
          else
          {
            float v86 = 0.0;
            float v85 = 0.0;
            float v84 = 0.0;
          }
          float v87 = v34 * (float)((float)(v67[1] >> v65) - v32);
          float v88 = 8191.0;
          if ((float)(v84 + v87) <= 8191.0)
          {
            float v88 = v84 + v87;
            if ((float)(v84 + v87) < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v85 + v87;
          BOOL v77 = (float)(v85 + v87) <= 8191.0;
          float v90 = 8191.0;
          if (v77)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v86 + v87;
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm
          {
            FCVT            S0, H0
            FCVT            S5, H5
          }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          unsigned int v102 = llroundf(fminf(fmaxf(v88, 0.0), 8191.0));
          __asm { FCVT            S6, H24 }
          _H24 = *((_WORD *)result + v102);
          __asm { FCVT            S24, H24 }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H26 = *((_WORD *)result + llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          float v110 = (float)((float)(v47 * _S5) + (float)(_S0 * v45)) + (float)(_S6 * v46);
          float v111 = (float)((float)(v49 * _S5) + (float)(_S0 * v48)) + (float)(_S6 * v50);
          _S0 = (float)((float)(v52 * _S5) + (float)(_S0 * v51)) + (float)(_S6 * v53);
          float v113 = (float)((float)(v47 * _S4) + (float)(_S24 * v45)) + (float)(_S26 * v46);
          _S6 = (float)((float)(v49 * _S4) + (float)(_S24 * v48)) + (float)(_S26 * v50);
          _S4 = (float)((float)(v52 * _S4) + (float)(_S24 * v51)) + (float)(_S26 * v53);
          LOWORD(_S24) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          LOWORD(_S26) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H24
            FCVT            S26, H26
          }
          LOWORD(_S0) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          unsigned int v118 = llroundf(fminf(fmaxf(v113, 0.0), 8191.0));
          __asm { FCVT            S5, H0 }
          LOWORD(_S0) = *(_WORD *)(v54 + 2 * v118);
          __asm { FCVT            S0, H0 }
          LOWORD(_S6) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S4) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S25, H4 }
          float v123 = (float)((float)((float)(v43 * _S26) + (float)(v42 * _S24)) + (float)(v44 * _S5)) + v37;
          float v124 = (float)((float)((float)(v43 * _S6) + (float)(v42 * _S0)) + (float)(v44 * _S25)) + v37;
          if (v123 < v37) {
            float v125 = v37;
          }
          else {
            float v125 = (float)((float)((float)(v43 * _S26) + (float)(v42 * _S24)) + (float)(v44 * _S5)) + v37;
          }
          if (v123 <= v39) {
            float v126 = v125;
          }
          else {
            float v126 = v39;
          }
          *uint64_t v69 = llroundf(v126);
          if (v124 < v37) {
            float v127 = v37;
          }
          else {
            float v127 = (float)((float)((float)(v43 * _S6) + (float)(v42 * _S0)) + (float)(v44 * _S25)) + v37;
          }
          if (v124 > v39) {
            float v127 = v39;
          }
          v69[1] = llroundf(v127);
          float v128 = _S24 + _S0;
          float v129 = _S26 + _S6;
          float v130 = _S5 + _S25;
          float v131 = (float)((float)(v38 + (float)(v128 * v145)) + (float)((float)(_S26 + _S6) * v144))
               + (float)(v130 * v143);
          float v132 = v41;
          if (v131 <= v41)
          {
            float v132 = v131;
            if (v131 < v40) {
              float v132 = v40;
            }
          }
          float v133 = (float)((float)(v38 + (float)(v128 * v142)) + (float)(v129 * v141)) + (float)(v130 * v140);
          *(unsigned char *)(v59 + v66) = llroundf(v132);
          float v134 = v41;
          if (v133 <= v41)
          {
            float v134 = v133;
            if (v133 < v40) {
              float v134 = v40;
            }
          }
          *(unsigned char *)(v59 + v66 + 1) = llroundf(v134);
          v66 += 2;
          v67 += 2;
          v69 += 2;
        }
        while (v10 > v66);
      }
      v64 += v21;
      v63 += v22;
      v60 += v26;
      v59 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      uint64_t v135 = 0;
      do
      {
        if (v10)
        {
          size_t v136 = v10;
          float16x8_t v137 = v30;
          uint16x8_t v138 = (unsigned __int16 *)v25;
          do
          {
            unsigned int v139 = *v138++;
            *v137++ = llroundf((float)v139 * 0.0038911);
            --v136;
          }
          while (v136);
        }
        v25 += v23;
        v30 += v28;
        ++v135;
      }
      while (v135 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          double result = memset(v30, 255, v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_422vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf444_rgb_422vf_neon_fp16_GCD(void *result, uint64_t a2, double _D0)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 == v8) {
    return result;
  }
  uint64_t v10 = 0;
  size_t v11 = *(void *)((char *)result + 20);
  uint64_t v12 = *(void *)((char *)result + 36);
  unint64_t v13 = v8 + *(void *)((char *)result + 44);
  unint64_t v14 = v9 - v8;
  uint64_t v15 = result[14];
  uint64_t v16 = (uint64_t *)result[16];
  unint64_t v17 = result[13] * a2 / v7 + result[15];
  uint64_t v18 = result[19];
  uint64_t v19 = (uint64_t *)result[7];
  uint64_t v20 = (uint64_t *)result[8];
  uint64_t v21 = (uint64_t *)result[17];
  uint64_t v22 = *v20;
  uint64_t v23 = v20[1];
  uint64_t v24 = v20[2];
  uint64_t v25 = v19[2];
  uint64_t v26 = v25 + v24 * v13 + 2 * v12;
  uint64_t v27 = *v21;
  uint64_t v28 = v21[1];
  uint64_t v29 = v21[2];
  uint64_t v30 = v16[2];
  uint64_t v31 = (unsigned char *)(v30 + v29 * v17 + v15);
  unsigned int v32 = *(unsigned __int16 *)(v18 + 140);
  unsigned int v33 = *(unsigned __int16 *)(v18 + 142);
  unsigned int v34 = *(unsigned __int16 *)(v18 + 144);
  unsigned int v35 = *(unsigned __int16 *)(v18 + 146);
  unsigned int v36 = *(unsigned __int16 *)(v18 + 148);
  unsigned int v37 = *(unsigned __int16 *)(v18 + 150);
  unsigned int v38 = *(unsigned __int16 *)(v18 + 152);
  LODWORD(_D0) = *(_DWORD *)(v18 + 36);
  _S1 = *(float *)(v18 + 40);
  _S2 = *(float *)(v18 + 44);
  v41.i32[0] = *(_DWORD *)(v18 + 48);
  v4.i32[0] = *(_DWORD *)(v18 + 52);
  v42.i32[0] = *(_DWORD *)(v18 + 56);
  float v43 = (float)v32;
  *(short float *)v3.i16 = (short float)v32;
  float v44 = (float)v33;
  v5.f32[0] = (float)*(unsigned int *)(v18 + 136) / (float)*(unsigned int *)(v18 + 128);
  _S5 = v5.f32[0] * *(float *)v18;
  float v46 = (float)v34;
  float v47 = (float)v35;
  int16x8_t v48 = vdupq_lane_s16(v3, 0);
  float16x8_t v147 = (float16x8_t)v48;
  *(short float *)v48.i16 = -(short float)v33;
  float16x8_t v134 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v48.i8, 0);
  __asm { FCVT            H8, S5 }
  float v148 = v5.f32[0] * *(float *)(v18 + 28);
  __asm { FCVT            H9, S16 }
  short float v138 = _H9;
  _S16 = v5.f32[0] * *(float *)(v18 + 16);
  __asm { FCVT            H9, S7 }
  short float v137 = _H9;
  _S19 = v5.f32[0] * *(float *)(v18 + 20);
  __asm { FCVT            H9, S26 }
  short float v136 = _H9;
  _S7 = v5.f32[0] * *(float *)(v18 + 8);
  __asm { FCVT            H9, S6 }
  short float v135 = _H9;
  __asm { FCVT            H9, S0 }
  short float v146 = _H9;
  __asm { FCVT            H9, S1 }
  v41.i32[1] = *(_DWORD *)(v18 + 60);
  *(float32x2_t *)v5.f32 = vmul_f32(v41, (float32x2_t)0x3F0000003F000000);
  float16x8_t v145 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
  v4.i32[1] = *(_DWORD *)(v18 + 64);
  *(float32x2_t *)v4.f32 = vmul_f32(*(float32x2_t *)v4.f32, (float32x2_t)0x3F0000003F000000);
  *(double *)&v63.i64[1] = _D0;
  float16x8_t v144 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
  v42.i32[1] = *(_DWORD *)(v18 + 68);
  *(float32x2_t *)v63.f32 = vmul_f32(v42, (float32x2_t)0x3F0000003F000000);
  int16x4_t v64 = (int16x4_t)vcvt_f16_f32(v63);
  float16x8_t v143 = (float16x8_t)vdupq_lane_s32((int32x2_t)v64, 0);
  *(short float *)v64.i16 = (short float)v34;
  float16x8_t v65 = (float16x8_t)vdupq_lane_s16(v64, 0);
  *(short float *)v64.i16 = (short float)v35;
  float16x8_t v142 = (float16x8_t)vdupq_lane_s16(v64, 0);
  *(short float *)v64.i16 = (short float)v36;
  float16x8_t v141 = (float16x8_t)vdupq_lane_s16(v64, 0);
  *(short float *)v64.i16 = (short float)v37;
  float16x8_t v140 = (float16x8_t)vdupq_lane_s16(v64, 0);
  *(short float *)v64.i16 = (short float)v38;
  float16x8_t v139 = (float16x8_t)vdupq_lane_s16(v64, 0);
  unsigned int v66 = *(unsigned __int8 *)(v18 + 124);
  unsigned __int8 v67 = 16 - v66;
  if (v66 >= 0x11) {
    unsigned __int8 v67 = 0;
  }
  uint64_t v69 = *v16;
  uint64_t v68 = v16[1];
  float v70 = (unsigned char *)(v68 + v28 * v17 + v15);
  if (!v68) {
    float v70 = 0;
  }
  double result = (void *)(v69 + v27 * v17 + v15);
  uint64_t v72 = *v19;
  uint64_t v71 = v19[1];
  uint64_t v73 = v71 + v23 * v13 + 2 * v12;
  if (!v71) {
    uint64_t v73 = 0;
  }
  uint64_t v74 = v72 + v22 * v13 + 2 * v12;
  unsigned __int8 v75 = v67;
  __asm { FCVT            H6, S2 }
  uint64_t v77 = v5.i64[0];
  float v78 = (float)v36;
  float v79 = (float)v37;
  uint64_t v80 = v4.i64[0];
  float v81 = (float)v38;
  uint64_t v82 = v63.i64[0];
  uint16x8_t v83 = (uint16x8_t)vdupq_n_s16(-v67);
  do
  {
    if ((int)v11 < 8)
    {
      size_t v99 = 0;
      float v98 = v70;
      float v87 = (int8x8_t *)result;
      float v86 = (const __int16 *)v73;
      float v85 = (uint16x8_t *)v74;
    }
    else
    {
      uint64_t v84 = 0;
      float v85 = (uint16x8_t *)v74;
      float v86 = (const __int16 *)v73;
      float v87 = (int8x8_t *)result;
      do
      {
        if (v86)
        {
          int16x8x2_t v149 = vld2q_s16(v86);
          v86 += 16;
          float16x8_t v88 = vaddq_f16(v134, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v149.val[0], v83)));
          v149.val[0] = (int16x8_t)vaddq_f16(v134, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v149.val[1], v83)));
          float16x8_t v89 = vmulq_n_f16((float16x8_t)v149.val[0], v135);
          float16x8_t v90 = vmlaq_n_f16(vmulq_n_f16(v88, v137), (float16x8_t)v149.val[0], v136);
          float16x8_t v91 = vmulq_n_f16(v88, v138);
        }
        else
        {
          float16x8_t v91 = 0uLL;
          float16x8_t v90 = 0uLL;
          float16x8_t v89 = 0uLL;
        }
        uint16x8_t v92 = *v85++;
        float16x8_t v93 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v92, v83)), v147);
        float16x8_t v94 = vmlaq_n_f16(v89, v93, _H8);
        float16x8_t v95 = vmlaq_n_f16(v90, v93, _H8);
        float16x8_t v96 = vmlaq_n_f16(v91, v93, _H8);
        *v87++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v65, v94, v146), v95, _H9), v96, _H6), v65), v141)));
        int16x8_t v97 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v94, (int16x8_t)v95), (float16x8_t)vuzp2q_s16((int16x8_t)v94, (int16x8_t)v95));
        *(int8x8_t *)&v70[v84] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v142, v145, (float16x8_t)vzip1q_s16(v97, v97)), v144, (float16x8_t)vzip2q_s16(v97, v97)), v143, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v96, (int16x8_t)v96), (float16x8_t)vtrn2q_s16((int16x8_t)v96, (int16x8_t)v96))), v140), v139)));
        v84 += 8;
      }
      while ((int)v84 < (int)v11 - 7);
      float v98 = &v70[v84];
      size_t v99 = v11 & 0xFFFFFFF8;
    }
    while (v11 > v99)
    {
      float v100 = 0.0;
      if (v86)
      {
        float v101 = (float)(*(unsigned __int16 *)v86 >> v75) - v44;
        float v102 = (float)(*((unsigned __int16 *)v86 + 1) >> v75) - v44;
        v86 += 2;
        float v103 = _S7 * v102;
        float v104 = (float)(_S19 * v102) + (float)(v101 * _S16);
        float v105 = v148 * v101;
        if (v86)
        {
          float v106 = (float)(*(unsigned __int16 *)v86 >> v75) - v44;
          float v107 = (float)(*((unsigned __int16 *)v86 + 1) >> v75) - v44;
          v86 += 2;
          float v108 = _S7 * v107;
          float v109 = (float)(_S19 * v107) + (float)(v106 * _S16);
          float v100 = v148 * v106;
          goto LABEL_22;
        }
      }
      else
      {
        float v105 = 0.0;
        float v104 = 0.0;
        float v103 = 0.0;
      }
      float v109 = 0.0;
      float v108 = 0.0;
LABEL_22:
      float v110 = _S5 * (float)((float)(v85->u16[0] >> v75) - v43);
      float v111 = v103 + v110;
      float v112 = v104 + v110;
      float v113 = v105 + v110;
      float v114 = _S5 * (float)((float)(v85->u16[1] >> v75) - v43);
      float v115 = v108 + v114;
      float v116 = v109 + v114;
      float v117 = v100 + v114;
      float v118 = (float)((float)((float)(_S1 * v112) + (float)(*(float *)&_D0 * v111)) + (float)(_S2 * v113)) + v46;
      float v119 = (float)((float)((float)(_S1 * v116) + (float)(*(float *)&_D0 * v115)) + (float)(_S2 * v117)) + v46;
      if (v118 < v46) {
        float v120 = v46;
      }
      else {
        float v120 = (float)((float)((float)(_S1 * v112) + (float)(*(float *)&_D0 * v111)) + (float)(_S2 * v113)) + v46;
      }
      if (v118 <= v78) {
        float v121 = v120;
      }
      else {
        float v121 = v78;
      }
      v87->i8[0] = llroundf(v121);
      if (v119 < v46) {
        float v122 = v46;
      }
      else {
        float v122 = (float)((float)((float)(_S1 * v116) + (float)(*(float *)&_D0 * v115)) + (float)(_S2 * v117)) + v46;
      }
      if (v119 > v78) {
        float v122 = v78;
      }
      v87->i8[1] = llroundf(v122);
      float v123 = v111 + v115;
      float v124 = v112 + v116;
      float v125 = (float)((float)(v47 + (float)((float)(v111 + v115) * *(float *)&v77))
                   + (float)((float)(v112 + v116) * *(float *)&v80))
           + (float)((float)(v113 + v117) * *(float *)&v82);
      float v126 = v81;
      if (v125 <= v81)
      {
        float v126 = v125;
        if (v125 < v79) {
          float v126 = v79;
        }
      }
      float v127 = (float)((float)(v47 + (float)(v123 * *((float *)&v77 + 1))) + (float)(v124 * *((float *)&v80 + 1)))
           + (float)((float)(v113 + v117) * *((float *)&v82 + 1));
      *float v98 = llroundf(v126);
      float v128 = v81;
      if (v127 <= v81)
      {
        float v128 = v127;
        if (v127 < v79) {
          float v128 = v79;
        }
      }
      v98[1] = llroundf(v128);
      v98 += 2;
      v99 += 2;
      float v85 = (uint16x8_t *)((char *)v85 + 4);
      float v87 = (int8x8_t *)((char *)v87 + 2);
    }
    v74 += v22;
    v73 += v23;
    double result = (void *)((char *)result + v27);
    v70 += v28;
    ++v10;
  }
  while (v10 != v14);
  if (v25 && v30)
  {
    uint64_t v129 = 0;
    do
    {
      if (v11)
      {
        size_t v130 = v11;
        float v131 = v31;
        float v132 = (unsigned __int16 *)v26;
        do
        {
          unsigned int v133 = *v132++;
          *v131++ = llroundf((float)v133 * 0.0038911);
          --v130;
        }
        while (v130);
      }
      v26 += v24;
      v31 += v29;
      ++v129;
    }
    while (v129 != v14);
  }
  else if (v30)
  {
    do
    {
      if (v11) {
        double result = memset(v31, 255, v11);
      }
      v31 += v29;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_422vf_GCD);
  return 0;
}

void *vt_Copy_xf444_rgb_422vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v10 = *(void *)((char *)result + 28);
  unint64_t v11 = *(unsigned __int8 *)result;
  unint64_t v12 = v10 * a2 / v11;
  unint64_t v13 = (v10 + v10 * a2) / v11;
  if (v13 == v12) {
    return result;
  }
  uint64_t v14 = 0;
  size_t v15 = *(void *)((char *)result + 20);
  uint64_t v16 = *(void *)((char *)result + 36);
  unint64_t v17 = v12 + *(void *)((char *)result + 44);
  unint64_t v18 = v13 - v12;
  uint64_t v19 = result[14];
  uint64_t v20 = (uint64_t *)result[16];
  unint64_t v21 = result[13] * a2 / v11 + result[15];
  uint64_t v22 = result[19];
  uint64_t v23 = (uint64_t *)result[7];
  uint64_t v24 = (uint64_t *)result[8];
  uint64_t v25 = (uint64_t *)result[17];
  uint64_t v26 = *v24;
  uint64_t v27 = v24[1];
  uint64_t v28 = v24[2];
  uint64_t v29 = v23[2];
  uint64_t v30 = v29 + v28 * v17 + 2 * v16;
  uint64_t v31 = *v25;
  uint64_t v32 = v25[1];
  uint64_t v33 = v25[2];
  uint64_t v34 = v20[2];
  uint64_t v35 = (unsigned char *)(v34 + v33 * v21 + v19);
  LOWORD(a5) = *(_WORD *)(v22 + 140);
  LOWORD(a6) = *(_WORD *)(v22 + 142);
  float v36 = (float)*(unsigned int *)(v22 + 136) / (float)*(unsigned int *)(v22 + 128);
  float v37 = (float)LODWORD(a5);
  float v38 = (float)LODWORD(a6);
  float v39 = v36 * *(float *)v22;
  float v40 = v36 * *(float *)(v22 + 8);
  float v41 = v36 * *(float *)(v22 + 16);
  float v42 = v36 * *(float *)(v22 + 20);
  float v43 = *(float *)(v22 + 28);
  float v44 = v36 * v43;
  LOWORD(v43) = *(_WORD *)(v22 + 144);
  float v45 = (float)LODWORD(v43);
  LOWORD(v6) = *(_WORD *)(v22 + 146);
  float v46 = (float)v6;
  LOWORD(v7) = *(_WORD *)(v22 + 148);
  float v47 = (float)v7;
  LOWORD(v8) = *(_WORD *)(v22 + 150);
  float v48 = (float)v8;
  LOWORD(v9) = *(_WORD *)(v22 + 152);
  float v49 = (float)v9;
  float v50 = *(float *)(v22 + 36);
  float v51 = *(float *)(v22 + 40);
  float v52 = *(float *)(v22 + 44);
  float v53 = *(float *)(v22 + 48) * 0.5;
  float v54 = *(float *)(v22 + 52) * 0.5;
  float v55 = *(float *)(v22 + 56) * 0.5;
  float v56 = *(float *)(v22 + 60) * 0.5;
  float v57 = *(float *)(v22 + 64) * 0.5;
  float v58 = *(float *)(v22 + 68) * 0.5;
  unsigned int v59 = *(unsigned __int8 *)(v22 + 124);
  char v60 = 16 - v59;
  if (v59 >= 0x11) {
    char v60 = 0;
  }
  uint64_t v62 = *v20;
  uint64_t v61 = v20[1];
  uint64_t v63 = v61 + v32 * v21 + v19;
  if (!v61) {
    uint64_t v63 = 0;
  }
  double result = (void *)(v62 + v31 * v21 + v19);
  uint64_t v65 = *v23;
  uint64_t v64 = v23[1];
  uint64_t v66 = v64 + v27 * v17 + 2 * v16;
  if (!v64) {
    uint64_t v66 = 0;
  }
  uint64_t v67 = v65 + v26 * v17 + 2 * v16;
  char v68 = v60;
  do
  {
    if (v15)
    {
      size_t v69 = 0;
      float v70 = (unsigned __int16 *)v67;
      uint64_t v71 = (unsigned __int16 *)v66;
      uint64_t v72 = result;
      while (1)
      {
        float v73 = 0.0;
        if (!v71) {
          break;
        }
        float v74 = (float)(*v71 >> v68) - v38;
        float v75 = (float)(v71[1] >> v68) - v38;
        v71 += 2;
        float v76 = v40 * v75;
        float v77 = (float)(v42 * v75) + (float)(v74 * v41);
        float v78 = v44 * v74;
        if (!v71) {
          goto LABEL_15;
        }
        float v79 = (float)(*v71 >> v68) - v38;
        float v80 = (float)(v71[1] >> v68) - v38;
        v71 += 2;
        float v81 = v40 * v80;
        float v82 = (float)(v42 * v80) + (float)(v79 * v41);
        float v73 = v44 * v79;
LABEL_16:
        float v83 = v39 * (float)((float)(*v70 >> v68) - v37);
        float v84 = v76 + v83;
        float v85 = v77 + v83;
        float v86 = v78 + v83;
        float v87 = v39 * (float)((float)(v70[1] >> v68) - v37);
        float v88 = v81 + v87;
        float v89 = v82 + v87;
        float v90 = v73 + v87;
        float v91 = (float)((float)((float)(v51 * v85) + (float)(v50 * v84)) + (float)(v52 * v86)) + v45;
        float v92 = (float)((float)((float)(v51 * v89) + (float)(v50 * v88)) + (float)(v52 * v90)) + v45;
        if (v91 < v45) {
          float v93 = v45;
        }
        else {
          float v93 = (float)((float)((float)(v51 * v85) + (float)(v50 * v84)) + (float)(v52 * v86)) + v45;
        }
        if (v91 <= v47) {
          float v94 = v93;
        }
        else {
          float v94 = v47;
        }
        *uint64_t v72 = llroundf(v94);
        if (v92 < v45) {
          float v95 = v45;
        }
        else {
          float v95 = (float)((float)((float)(v51 * v89) + (float)(v50 * v88)) + (float)(v52 * v90)) + v45;
        }
        if (v92 > v47) {
          float v95 = v47;
        }
        v72[1] = llroundf(v95);
        float v96 = v84 + v88;
        float v97 = v85 + v89;
        float v98 = (float)((float)(v46 + (float)((float)(v84 + v88) * v53)) + (float)((float)(v85 + v89) * v54))
            + (float)((float)(v86 + v90) * v55);
        float v99 = v49;
        if (v98 <= v49)
        {
          float v99 = v98;
          if (v98 < v48) {
            float v99 = v48;
          }
        }
        float v100 = (float)((float)(v46 + (float)(v96 * v56)) + (float)(v97 * v57)) + (float)((float)(v86 + v90) * v58);
        *(unsigned char *)(v63 + v69) = llroundf(v99);
        float v101 = v49;
        if (v100 <= v49)
        {
          float v101 = v100;
          if (v100 < v48) {
            float v101 = v48;
          }
        }
        *(unsigned char *)(v63 + v69 + 1) = llroundf(v101);
        v69 += 2;
        v70 += 2;
        v72 += 2;
        if (v15 <= v69) {
          goto LABEL_34;
        }
      }
      float v78 = 0.0;
      float v77 = 0.0;
      float v76 = 0.0;
LABEL_15:
      float v82 = 0.0;
      float v81 = 0.0;
      goto LABEL_16;
    }
LABEL_34:
    v67 += v26;
    v66 += v27;
    double result = (void *)((char *)result + v31);
    v63 += v32;
    ++v14;
  }
  while (v14 != v18);
  if (v29 && v34)
  {
    uint64_t v102 = 0;
    do
    {
      if (v15)
      {
        size_t v103 = v15;
        float v104 = v35;
        float v105 = (unsigned __int16 *)v30;
        do
        {
          unsigned int v106 = *v105++;
          *v104++ = llroundf((float)v106 * 0.0038911);
          --v103;
        }
        while (v103);
      }
      v30 += v28;
      v35 += v33;
      ++v102;
    }
    while (v102 != v18);
  }
  else if (v34)
  {
    do
    {
      if (v15) {
        double result = memset(v35, 255, v15);
      }
      v35 += v33;
      --v18;
    }
    while (v18);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Tone_Mat_TRC_2vuyf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  int64x2_t v10 = (void *)result[16];
  unint64_t v11 = result[13] * a2 / v6 + result[15];
  int64x2_t v12 = (uint64_t *)result[17];
  uint64_t v13 = v12[1];
  uint64_t v14 = v10[1];
  size_t v15 = (unsigned char *)(v14 + v13 * v11 + v9);
  unint64_t v16 = v8 / v6;
  if (v14) {
    uint64_t v17 = (_WORD *)(v14 + v13 * v11 + v9);
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16 != v7)
  {
    uint64_t v18 = 0;
    size_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    unint64_t v21 = v7 + *(void *)((char *)result + 44);
    unint64_t v22 = v16 - v7;
    uint64_t v23 = result[19];
    uint64_t v24 = (void *)result[7];
    uint64_t v25 = (uint64_t *)result[8];
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = v25[2];
    uint64_t v29 = v24[2];
    uint64_t v30 = v29 + v28 * v21 + 2 * v20;
    uint64_t v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    float v33 = (float)LODWORD(a4);
    float v34 = v32 * *(float *)v23;
    float v179 = v32 * *(float *)(v23 + 16);
    float v180 = v32 * *(float *)(v23 + 8);
    float v178 = v32 * *(float *)(v23 + 20);
    *(float *)&unsigned int v35 = v32 * *(float *)(v23 + 28);
    float v176 = (float)LODWORD(a5);
    float v177 = *(float *)&v35;
    LOWORD(v35) = *(_WORD *)(v23 + 144);
    float v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 146);
    float v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 148);
    float v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 150);
    float v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 152);
    float v40 = (float)v35;
    float v41 = *(float *)(v23 + 36);
    float v42 = *(float *)(v23 + 40);
    float v43 = *(float *)(v23 + 44);
    float v175 = *(float *)(v23 + 48) * 0.5;
    float v173 = *(float *)(v23 + 56) * 0.5;
    float v174 = *(float *)(v23 + 52) * 0.5;
    float v171 = *(float *)(v23 + 64) * 0.5;
    float v172 = *(float *)(v23 + 60) * 0.5;
    float v169 = *(float *)(v23 + 68) * 0.5;
    float v170 = *(float *)(v23 + 72);
    float v167 = *(float *)(v23 + 80);
    float v168 = *(float *)(v23 + 76);
    float v165 = *(float *)(v23 + 88);
    float v166 = *(float *)(v23 + 84);
    float v163 = *(float *)(v23 + 96);
    float v164 = *(float *)(v23 + 92);
    float v161 = *(float *)(v23 + 104);
    float v162 = *(float *)(v23 + 100);
    uint64_t v44 = v23 + 164;
    unsigned int v45 = *(unsigned __int8 *)(v23 + 124);
    char v46 = 16 - v45;
    _CF = v45 >= 0x11;
    double result = (void *)(v23 + 16548);
    uint64_t v48 = *v10 + v31 * v11;
    uint64_t v49 = v23 + 32932;
    if (_CF) {
      char v46 = 0;
    }
    float v50 = (unsigned char *)(v48 + v9);
    float v53 = v24;
    uint64_t v52 = *v24;
    uint64_t v51 = v53[1];
    _ZF = v51 == 0;
    uint64_t v55 = v51 + v27 * v21 + 2 * v20;
    if (_ZF) {
      uint64_t v55 = 0;
    }
    uint64_t v56 = v52 + v26 * v21 + 2 * v20;
    char v57 = v46;
    float v58 = *(float *)(v23 + 108);
    float v59 = *(float *)(v23 + 112);
    float v60 = *(float *)(v23 + 116);
    float v61 = *(float *)(v23 + 120);
    float v160 = v39;
    do
    {
      if (v19)
      {
        size_t v62 = 0;
        uint64_t v63 = (unsigned __int16 *)v56;
        uint64_t v64 = (unsigned __int16 *)v55;
        uint64_t v65 = v17;
        uint64_t v66 = v50;
        do
        {
          if (v64)
          {
            float v67 = (float)(*v64 >> v57) - v176;
            float v68 = (float)(v64[1] >> v57) - v176;
            v64 += 2;
            float v69 = v180 * v68;
            float v70 = (float)(v178 * v68) + (float)(v67 * v179);
            float v71 = v177 * v67;
          }
          else
          {
            float v71 = 0.0;
            float v70 = 0.0;
            float v69 = 0.0;
          }
          float v72 = v34 * (float)((float)(*v63 >> v57) - v33);
          float v73 = v69 + v72;
          BOOL v74 = (float)(v69 + v72) <= 8191.0;
          float v75 = 8191.0;
          if (v74)
          {
            float v75 = v73;
            if (v73 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v70 + v72;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v71 + v72;
          BOOL v74 = (float)(v71 + v72) <= 8191.0;
          float v79 = 8191.0;
          if (v74)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          if (v64)
          {
            float v80 = (float)(*v64 >> v57) - v176;
            float v81 = (float)(v64[1] >> v57) - v176;
            v64 += 2;
            float v82 = v180 * v81;
            float v83 = (float)(v178 * v81) + (float)(v80 * v179);
            float v84 = v177 * v80;
          }
          else
          {
            float v84 = 0.0;
            float v83 = 0.0;
            float v82 = 0.0;
          }
          float v85 = v33;
          float v86 = v34;
          float v87 = v34 * (float)((float)(v63[1] >> v57) - v33);
          float v88 = v82 + v87;
          BOOL v74 = (float)(v82 + v87) <= 8191.0;
          float v89 = 8191.0;
          if (v74)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v83 + v87;
          BOOL v74 = (float)(v83 + v87) <= 8191.0;
          float v91 = 8191.0;
          if (v74)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v84 + v87;
          float v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H7 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          unsigned int v99 = llroundf(fminf(fmaxf(v79, 0.0), 8191.0));
          __asm { FCVT            S4, H7 }
          _H7 = *(_WORD *)(v44 + 2 * v99);
          __asm { FCVT            S7, H7 }
          _H6 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          float v106 = (float)((float)((float)(v59 * _S4) + (float)(v58 * _S0)) + (float)(v60 * _S7))
               + (float)(v61 * fmaxf(_S0, fmaxf(_S4, _S7)));
          float v107 = 8191.0;
          if (v106 <= 8191.0)
          {
            float v107 = v106;
            if (v106 < 0.0) {
              float v107 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H6
            FCVT            S6, H1
            FCVT            S30, H30
          }
          _H1 = *((_WORD *)result + llroundf(v107));
          __asm { FCVT            S1, H1 }
          float v113 = _S0 * _S1;
          float v114 = _S4 * _S1;
          float v115 = _S7 * _S1;
          float v116 = (float)((float)((float)(v59 * _S6) + (float)(v58 * _S3)) + (float)(v60 * _S30))
               + (float)(v61 * fmaxf(_S3, fmaxf(_S6, _S30)));
          float v117 = 8191.0;
          if (v116 <= 8191.0)
          {
            float v117 = v116;
            if (v116 < 0.0) {
              float v117 = 0.0;
            }
          }
          _H7 = *((_WORD *)result + llroundf(v117));
          __asm { FCVT            S7, H7 }
          float v120 = _S3 * _S7;
          _S6 = _S6 * _S7;
          _S7 = _S30 * _S7;
          float v123 = (float)((float)(v168 * v114) + (float)(v113 * v170)) + (float)(v115 * v167);
          float v124 = (float)((float)(v165 * v114) + (float)(v113 * v166)) + (float)(v115 * v164);
          _S0 = (float)((float)(v162 * v114) + (float)(v113 * v163)) + (float)(v115 * v161);
          float v126 = (float)(v168 * _S6) + (float)(v120 * v170);
          float v127 = (float)(v165 * _S6) + (float)(v120 * v166);
          float v128 = (float)(v162 * _S6) + (float)(v120 * v163);
          _S1 = v126 + (float)(_S7 * v167);
          float v130 = v127 + (float)(_S7 * v164);
          LOWORD(_S6) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          float v131 = v128 + (float)(_S7 * v161);
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S0) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S17, H0 }
          LOWORD(_S0) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          unsigned int v137 = llroundf(fminf(fmaxf(v131, 0.0), 8191.0));
          float v138 = (float)(v42 * _S7) + (float)(v41 * _S6);
          _S1 = _S6 + _S0;
          float v140 = _S7 + _S4;
          float v141 = (float)(v37 + (float)((float)(_S6 + _S0) * v175)) + (float)(v140 * v174);
          float v142 = (float)(v37 + (float)(_S1 * v172)) + (float)(v140 * v171);
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * v137);
          __asm { FCVT            S1, H1 }
          float v144 = v138 + (float)(v43 * _S17);
          float v145 = v141 + (float)((float)(_S17 + _S1) * v173);
          float v146 = v142 + (float)((float)(_S17 + _S1) * v169);
          if (v145 < v160) {
            float v147 = v160;
          }
          else {
            float v147 = v145;
          }
          BOOL v74 = v145 <= v40;
          float v148 = v144 + v36;
          if (!v74) {
            float v147 = v40;
          }
          char v149 = llroundf(v147);
          if (v148 < v36) {
            float v150 = v36;
          }
          else {
            float v150 = v144 + v36;
          }
          *uint64_t v66 = v149;
          if (v148 <= v38) {
            float v151 = v150;
          }
          else {
            float v151 = v38;
          }
          v66[1] = llroundf(v151);
          float v152 = v40;
          if (v146 <= v40)
          {
            float v152 = v146;
            if (v146 < v160) {
              float v152 = v160;
            }
          }
          float v153 = (float)((float)((float)(v42 * _S4) + (float)(v41 * _S0)) + (float)(v43 * _S1)) + v36;
          v66[2] = llroundf(v152);
          float v154 = v38;
          float v33 = v85;
          float v34 = v86;
          if (v153 <= v38)
          {
            float v154 = v153;
            if (v153 < v36) {
              float v154 = v36;
            }
          }
          v66[3] = llroundf(v154);
          if (v65) {
            *v65++ = 0;
          }
          v62 += 2;
          v63 += 2;
          v66 += 4;
        }
        while (v19 > v62);
      }
      v56 += v26;
      v55 += v27;
      v50 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      uint64_t v155 = 0;
      do
      {
        if (v19)
        {
          size_t v156 = v19;
          size_t v157 = v15;
          float v158 = (unsigned __int16 *)v30;
          do
          {
            unsigned int v159 = *v158++;
            *v157++ = llroundf((float)v159 * 0.0038911);
            --v156;
          }
          while (v156);
        }
        v30 += v28;
        v15 += v13;
        ++v155;
      }
      while (v155 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19) {
          double result = memset(v15, 255, v19);
        }
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Mat_TRC_2vuyf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  int64x2_t v10 = (void *)result[16];
  unint64_t v11 = result[13] * a2 / v6 + result[15];
  int64x2_t v12 = (uint64_t *)result[17];
  uint64_t v13 = v12[1];
  uint64_t v14 = v10[1];
  size_t v15 = (unsigned char *)(v14 + v13 * v11 + v9);
  unint64_t v16 = v8 / v6;
  if (v14) {
    uint64_t v17 = (_WORD *)(v14 + v13 * v11 + v9);
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16 != v7)
  {
    uint64_t v18 = 0;
    size_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    unint64_t v21 = v7 + *(void *)((char *)result + 44);
    unint64_t v22 = v16 - v7;
    uint64_t v23 = result[19];
    uint64_t v24 = (void *)result[7];
    uint64_t v25 = (uint64_t *)result[8];
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = v25[2];
    uint64_t v29 = v24[2];
    uint64_t v30 = v29 + v28 * v21 + 2 * v20;
    uint64_t v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    *(float *)&unsigned int v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    float v33 = (float)LODWORD(a4);
    float v34 = (float)LODWORD(a5);
    float v35 = *(float *)&v32 * *(float *)v23;
    float v146 = *(float *)&v32 * *(float *)(v23 + 16);
    float v147 = *(float *)&v32 * *(float *)(v23 + 8);
    float v36 = *(float *)&v32 * *(float *)(v23 + 20);
    float v37 = *(float *)&v32 * *(float *)(v23 + 28);
    LOWORD(v32) = *(_WORD *)(v23 + 144);
    float v38 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 146);
    float v39 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 148);
    float v40 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 150);
    float v41 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 152);
    float v42 = (float)v32;
    float v43 = *(float *)(v23 + 36);
    float v44 = *(float *)(v23 + 40);
    float v45 = *(float *)(v23 + 44);
    float v144 = *(float *)(v23 + 48) * 0.5;
    float v145 = v36;
    float v142 = *(float *)(v23 + 56) * 0.5;
    float v143 = *(float *)(v23 + 52) * 0.5;
    float v140 = *(float *)(v23 + 64) * 0.5;
    float v141 = *(float *)(v23 + 60) * 0.5;
    float v46 = *(float *)(v23 + 72);
    float v139 = *(float *)(v23 + 68) * 0.5;
    float v48 = *(float *)(v23 + 76);
    float v47 = *(float *)(v23 + 80);
    float v49 = *(float *)(v23 + 84);
    float v50 = *(float *)(v23 + 88);
    float v51 = *(float *)(v23 + 92);
    float v52 = *(float *)(v23 + 96);
    float v53 = *(float *)(v23 + 100);
    float v54 = *(float *)(v23 + 104);
    unsigned int v55 = *(unsigned __int8 *)(v23 + 124);
    char v56 = 16 - v55;
    _CF = v55 >= 0x11;
    uint64_t v58 = v23 + 16548;
    double result = (void *)(v23 + 164);
    if (_CF) {
      char v59 = 0;
    }
    else {
      char v59 = v56;
    }
    float v60 = (unsigned char *)(*v10 + v31 * v11 + v9);
    uint64_t v61 = v24[1];
    if (v61) {
      uint64_t v62 = v61 + v27 * v21 + 2 * v20;
    }
    else {
      uint64_t v62 = 0;
    }
    uint64_t v63 = *v24 + v26 * v21 + 2 * v20;
    char v64 = v59;
    do
    {
      if (v19)
      {
        size_t v65 = 0;
        uint64_t v66 = (unsigned __int16 *)v63;
        float v67 = (unsigned __int16 *)v62;
        float v68 = v17;
        float v69 = v60;
        do
        {
          if (v67)
          {
            float v70 = (float)(*v67 >> v64) - v34;
            float v71 = (float)(v67[1] >> v64) - v34;
            v67 += 2;
            float v72 = v147 * v71;
            float v73 = (float)(v145 * v71) + (float)(v70 * v146);
            float v74 = v37 * v70;
          }
          else
          {
            float v74 = 0.0;
            float v73 = 0.0;
            float v72 = 0.0;
          }
          float v75 = v35 * (float)((float)(*v66 >> v64) - v33);
          float v76 = v72 + v75;
          BOOL v77 = (float)(v72 + v75) <= 8191.0;
          float v78 = 8191.0;
          if (v77)
          {
            float v78 = v76;
            if (v76 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v73 + v75;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = 8191.0;
          if ((float)(v74 + v75) <= 8191.0)
          {
            float v81 = v74 + v75;
            if ((float)(v74 + v75) < 0.0) {
              float v81 = 0.0;
            }
          }
          if (v67)
          {
            float v82 = (float)(*v67 >> v64) - v34;
            float v83 = (float)(v67[1] >> v64) - v34;
            v67 += 2;
            float v84 = v147 * v83;
            float v85 = (float)(v145 * v83) + (float)(v82 * v146);
            float v86 = v37 * v82;
          }
          else
          {
            float v86 = 0.0;
            float v85 = 0.0;
            float v84 = 0.0;
          }
          float v87 = v35 * (float)((float)(v66[1] >> v64) - v33);
          float v88 = 8191.0;
          if ((float)(v84 + v87) <= 8191.0)
          {
            float v88 = v84 + v87;
            if ((float)(v84 + v87) < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v85 + v87;
          BOOL v77 = (float)(v85 + v87) <= 8191.0;
          float v90 = 8191.0;
          if (v77)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v86 + v87;
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _S26 = (float)((float)(v48 * _S5) + (float)(_S0 * v46)) + (float)(_S24 * v47);
          float v107 = (float)((float)(v50 * _S5) + (float)(_S0 * v49)) + (float)(_S24 * v51);
          _S0 = (float)((float)(v53 * _S5) + (float)(_S0 * v52)) + (float)(_S24 * v54);
          float v109 = (float)(v48 * _S4) + (float)(_S6 * v46);
          float v110 = (float)(v50 * _S4) + (float)(_S6 * v49);
          _S4 = (float)(v53 * _S4) + (float)(_S6 * v52);
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _S5 = v109 + (float)(_S6 * v47);
          float v114 = v110 + (float)(_S6 * v51);
          LOWORD(_S26) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
          float v115 = _S4 + (float)(_S6 * v54);
          __asm { FCVT            S26, H26 }
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm { FCVT            S28, H4 }
          LOWORD(_S0) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S30, H0 }
          LOWORD(_S0) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          float v121 = (float)(v39 + (float)((float)(_S26 + _S0) * v141)) + (float)((float)(_S28 + _S4) * v140);
          LOWORD(_S5) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          float v123 = (float)((float)(v44 * _S28) + (float)(v43 * _S26)) + (float)(v45 * _S30);
          float v124 = (float)((float)(v39 + (float)((float)(_S26 + _S0) * v144)) + (float)((float)(_S28 + _S4) * v143))
               + (float)((float)(_S30 + _S5) * v142);
          float v125 = v121 + (float)((float)(_S30 + _S5) * v139);
          if (v124 < v41) {
            float v126 = v41;
          }
          else {
            float v126 = v124;
          }
          float v127 = v123 + v38;
          if (v124 > v42) {
            float v126 = v42;
          }
          char v128 = llroundf(v126);
          if (v127 < v38) {
            float v129 = v38;
          }
          else {
            float v129 = v127;
          }
          *float v69 = v128;
          if (v127 <= v40) {
            float v130 = v129;
          }
          else {
            float v130 = v40;
          }
          v69[1] = llroundf(v130);
          float v131 = v42;
          if (v125 <= v42)
          {
            float v131 = v125;
            if (v125 < v41) {
              float v131 = v41;
            }
          }
          float v132 = (float)((float)((float)(v44 * _S4) + (float)(v43 * _S0)) + (float)(v45 * _S5)) + v38;
          v69[2] = llroundf(v131);
          float v133 = v40;
          if (v132 <= v40)
          {
            float v133 = v132;
            if (v132 < v38) {
              float v133 = v38;
            }
          }
          v69[3] = llroundf(v133);
          if (v68) {
            *v68++ = 0;
          }
          v65 += 2;
          v66 += 2;
          v69 += 4;
        }
        while (v19 > v65);
      }
      v63 += v26;
      v62 += v27;
      v60 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      uint64_t v134 = 0;
      do
      {
        if (v19)
        {
          size_t v135 = v19;
          short float v136 = v15;
          unsigned int v137 = (unsigned __int16 *)v30;
          do
          {
            unsigned int v138 = *v137++;
            *v136++ = llroundf((float)v138 * 0.0038911);
            --v135;
          }
          while (v135);
        }
        v30 += v28;
        v15 += v13;
        ++v134;
      }
      while (v134 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19) {
          double result = memset(v15, 255, v19);
        }
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_2vuyf_GCD);
  return 0;
}

void *vt_Copy_xf444_rgb_2vuyf_GCD(void *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v12 = *(void *)((char *)result + 28);
  unint64_t v13 = *(unsigned __int8 *)result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = v12 + v12 * a2;
  uint64_t v16 = result[14];
  uint64_t v17 = (void *)result[16];
  unint64_t v18 = result[13] * a2 / v13 + result[15];
  uint64_t v19 = (uint64_t *)result[17];
  uint64_t v20 = v19[1];
  uint64_t v21 = v17[1];
  int64x2_t v22 = (unsigned char *)(v21 + v20 * v18 + v16);
  unint64_t v23 = v15 / v13;
  if (v21) {
    uint64_t v24 = (_WORD *)(v21 + v20 * v18 + v16);
  }
  else {
    uint64_t v24 = 0;
  }
  if (v23 == v14) {
    return result;
  }
  uint64_t v25 = 0;
  size_t v26 = *(void *)((char *)result + 20);
  uint64_t v27 = *(void *)((char *)result + 36);
  unint64_t v28 = v14 + *(void *)((char *)result + 44);
  unint64_t v29 = v23 - v14;
  uint64_t v30 = result[19];
  uint64_t v31 = (void *)result[7];
  unsigned int v32 = (uint64_t *)result[8];
  uint64_t v33 = *v32;
  uint64_t v34 = v32[1];
  uint64_t v35 = v32[2];
  uint64_t v36 = v31[2];
  LOWORD(a6) = *(_WORD *)(v30 + 140);
  LOWORD(a7) = *(_WORD *)(v30 + 142);
  float v37 = (float)*(unsigned int *)(v30 + 136) / (float)*(unsigned int *)(v30 + 128);
  float v38 = *(float *)v30;
  float v39 = *(float *)(v30 + 8);
  float v40 = *(float *)(v30 + 16);
  float v41 = *(float *)(v30 + 20);
  float v42 = *(float *)(v30 + 28);
  LOWORD(v7) = *(_WORD *)(v30 + 144);
  LOWORD(v8) = *(_WORD *)(v30 + 146);
  LOWORD(v9) = *(_WORD *)(v30 + 148);
  LOWORD(v10) = *(_WORD *)(v30 + 150);
  LOWORD(v11) = *(_WORD *)(v30 + 152);
  float v43 = *(float *)(v30 + 36);
  float v44 = *(float *)(v30 + 40);
  float v45 = *(float *)(v30 + 44);
  float v46 = *(float *)(v30 + 48);
  float v47 = *(float *)(v30 + 52);
  float v48 = *(float *)(v30 + 56);
  float v49 = *(float *)(v30 + 60);
  float v50 = *(float *)(v30 + 64);
  float v51 = *(float *)(v30 + 68);
  LODWORD(v30) = *(unsigned __int8 *)(v30 + 124);
  char v52 = 16 - v30;
  BOOL v53 = v30 >= 0x11;
  uint64_t v54 = v36 + v35 * v28 + 2 * v27;
  uint64_t v55 = *v19;
  float v56 = (float)LODWORD(a6);
  float v57 = (float)LODWORD(a7);
  float v58 = v37 * v38;
  float v59 = v37 * v39;
  float v60 = v37 * v40;
  float v61 = v37 * v41;
  float v62 = v37 * v42;
  float v63 = (float)v7;
  float v64 = (float)v8;
  float v65 = (float)v9;
  float v66 = (float)v10;
  float v67 = (float)v11;
  float v68 = v46 * 0.5;
  float v69 = v47 * 0.5;
  float v70 = v48 * 0.5;
  float v71 = v49 * 0.5;
  float v72 = v50 * 0.5;
  float v73 = v51 * 0.5;
  if (v53) {
    char v74 = 0;
  }
  else {
    char v74 = v52;
  }
  float v75 = (unsigned char *)(*v17 + v55 * v18 + v16);
  uint64_t v76 = v31[1];
  if (v76) {
    uint64_t v77 = v76 + v34 * v28 + 2 * v27;
  }
  else {
    uint64_t v77 = 0;
  }
  double result = (void *)(*v31 + v33 * v28 + 2 * v27);
  char v78 = v74;
  do
  {
    if (v26)
    {
      size_t v79 = 0;
      float v80 = (unsigned __int16 *)result;
      float v81 = (unsigned __int16 *)v77;
      float v82 = v24;
      float v83 = v75;
      while (1)
      {
        float v84 = 0.0;
        if (!v81) {
          break;
        }
        float v85 = (float)(*v81 >> v78) - v57;
        float v86 = (float)(v81[1] >> v78) - v57;
        v81 += 2;
        float v87 = v59 * v86;
        float v88 = (float)(v61 * v86) + (float)(v85 * v60);
        float v89 = v62 * v85;
        if (!v81) {
          goto LABEL_18;
        }
        float v90 = (float)(*v81 >> v78) - v57;
        float v91 = (float)(v81[1] >> v78) - v57;
        v81 += 2;
        float v92 = v59 * v91;
        float v93 = (float)(v61 * v91) + (float)(v90 * v60);
        float v84 = v62 * v90;
LABEL_19:
        float v94 = v58 * (float)((float)(*v80 >> v78) - v56);
        float v95 = v87 + v94;
        float v96 = v88 + v94;
        float v97 = v89 + v94;
        float v98 = v58 * (float)((float)(v80[1] >> v78) - v56);
        float v99 = v92 + v98;
        float v100 = v93 + v98;
        float v101 = v84 + v98;
        float v102 = (float)((float)((float)(v44 * v96) + (float)(v43 * v95)) + (float)(v45 * v97)) + v63;
        float v103 = v95 + (float)(v92 + v98);
        float v104 = v96 + v100;
        float v105 = v97 + v101;
        float v106 = (float)((float)(v64 + (float)(v103 * v68)) + (float)(v104 * v69)) + (float)(v105 * v70);
        float v107 = (float)((float)(v64 + (float)(v103 * v71)) + (float)(v104 * v72)) + (float)(v105 * v73);
        if (v106 < v66) {
          float v108 = v66;
        }
        else {
          float v108 = v106;
        }
        if (v106 <= v67) {
          float v109 = v108;
        }
        else {
          float v109 = v67;
        }
        *float v83 = llroundf(v109);
        if (v102 < v63) {
          float v110 = v63;
        }
        else {
          float v110 = v102;
        }
        if (v102 <= v65) {
          float v111 = v110;
        }
        else {
          float v111 = v65;
        }
        v83[1] = llroundf(v111);
        float v112 = v67;
        if (v107 <= v67)
        {
          float v112 = v107;
          if (v107 < v66) {
            float v112 = v66;
          }
        }
        float v113 = (float)((float)((float)(v44 * v100) + (float)(v43 * v99)) + (float)(v45 * v101)) + v63;
        v83[2] = llroundf(v112);
        float v114 = v65;
        if (v113 <= v65)
        {
          float v114 = v113;
          if (v113 < v63) {
            float v114 = v63;
          }
        }
        v83[3] = llroundf(v114);
        if (v82) {
          *v82++ = 0;
        }
        v79 += 2;
        v80 += 2;
        v83 += 4;
        if (v26 <= v79) {
          goto LABEL_40;
        }
      }
      float v89 = 0.0;
      float v88 = 0.0;
      float v87 = 0.0;
LABEL_18:
      float v93 = 0.0;
      float v92 = 0.0;
      goto LABEL_19;
    }
LABEL_40:
    double result = (void *)((char *)result + v33);
    v77 += v34;
    v75 += v55;
    ++v25;
  }
  while (v25 != v29);
  if (v36 && v24)
  {
    uint64_t v115 = 0;
    do
    {
      if (v26)
      {
        size_t v116 = v26;
        float v117 = v22;
        float v118 = (unsigned __int16 *)v54;
        do
        {
          unsigned int v119 = *v118++;
          *v117++ = llroundf((float)v119 * 0.0038911);
          --v116;
        }
        while (v116);
      }
      v54 += v35;
      v22 += v20;
      ++v115;
    }
    while (v115 != v29);
  }
  else if (v24)
  {
    do
    {
      if (v26) {
        double result = memset(v22, 255, v26);
      }
      v22 += v20;
      --v29;
    }
    while (v29);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Tone_Mat_TRC_yuvsf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  int64x2_t v10 = (void *)result[16];
  unint64_t v11 = result[13] * a2 / v6 + result[15];
  int64x2_t v12 = (uint64_t *)result[17];
  uint64_t v13 = v12[1];
  uint64_t v14 = v10[1];
  unint64_t v15 = (unsigned char *)(v14 + v13 * v11 + v9);
  unint64_t v16 = v8 / v6;
  if (v14) {
    uint64_t v17 = (_WORD *)(v14 + v13 * v11 + v9);
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16 != v7)
  {
    uint64_t v18 = 0;
    size_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    unint64_t v21 = v7 + *(void *)((char *)result + 44);
    unint64_t v22 = v16 - v7;
    uint64_t v23 = result[19];
    uint64_t v24 = (void *)result[7];
    uint64_t v25 = (uint64_t *)result[8];
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = v25[2];
    uint64_t v29 = v24[2];
    uint64_t v30 = v29 + v28 * v21 + 2 * v20;
    uint64_t v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    float v33 = (float)LODWORD(a4);
    float v34 = (float)LODWORD(a5);
    float v35 = v32 * *(float *)v23;
    float v179 = v32 * *(float *)(v23 + 16);
    float v180 = v32 * *(float *)(v23 + 8);
    float v36 = v32 * *(float *)(v23 + 20);
    *(float *)&unsigned int v37 = v32 * *(float *)(v23 + 28);
    float v177 = *(float *)&v37;
    float v178 = v36;
    LOWORD(v37) = *(_WORD *)(v23 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v23 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v23 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v23 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v23 + 152);
    float v42 = (float)v37;
    float v175 = *(float *)(v23 + 36);
    float v176 = v39;
    float v43 = *(float *)(v23 + 44);
    float v173 = *(float *)(v23 + 48) * 0.5;
    float v174 = *(float *)(v23 + 40);
    float v171 = *(float *)(v23 + 56) * 0.5;
    float v172 = *(float *)(v23 + 52) * 0.5;
    float v169 = *(float *)(v23 + 64) * 0.5;
    float v170 = *(float *)(v23 + 60) * 0.5;
    float v44 = *(float *)(v23 + 72);
    float v168 = *(float *)(v23 + 68) * 0.5;
    float v46 = *(float *)(v23 + 76);
    float v45 = *(float *)(v23 + 80);
    float v47 = *(float *)(v23 + 84);
    float v48 = *(float *)(v23 + 88);
    float v49 = *(float *)(v23 + 92);
    float v50 = *(float *)(v23 + 96);
    float v51 = *(float *)(v23 + 100);
    float v52 = *(float *)(v23 + 104);
    uint64_t v53 = v23 + 164;
    unsigned int v54 = *(unsigned __int8 *)(v23 + 124);
    char v55 = 16 - v54;
    _CF = v54 >= 0x11;
    double result = (void *)(v23 + 16548);
    uint64_t v57 = *v10 + v31 * v11;
    uint64_t v58 = v23 + 32932;
    if (_CF) {
      char v55 = 0;
    }
    float v59 = (unsigned char *)(v57 + v9);
    float v62 = v24;
    uint64_t v61 = *v24;
    uint64_t v60 = v62[1];
    _ZF = v60 == 0;
    uint64_t v64 = v60 + v27 * v21 + 2 * v20;
    if (_ZF) {
      uint64_t v64 = 0;
    }
    uint64_t v65 = v61 + v26 * v21 + 2 * v20;
    char v66 = v55;
    float v67 = *(float *)(v23 + 108);
    float v68 = *(float *)(v23 + 112);
    float v69 = *(float *)(v23 + 116);
    float v70 = *(float *)(v23 + 120);
    do
    {
      if (v19)
      {
        size_t v71 = 0;
        float v72 = (unsigned __int16 *)v65;
        float v73 = (unsigned __int16 *)v64;
        char v74 = v17;
        float v75 = v59;
        do
        {
          if (v73)
          {
            float v76 = (float)(*v73 >> v66) - v34;
            float v77 = (float)(v73[1] >> v66) - v34;
            v73 += 2;
            float v78 = v180 * v77;
            float v79 = (float)(v178 * v77) + (float)(v76 * v179);
            float v80 = v177 * v76;
          }
          else
          {
            float v80 = 0.0;
            float v79 = 0.0;
            float v78 = 0.0;
          }
          float v81 = v35 * (float)((float)(*v72 >> v66) - v33);
          float v82 = v78 + v81;
          BOOL v83 = (float)(v78 + v81) <= 8191.0;
          float v84 = 8191.0;
          if (v83)
          {
            float v84 = v82;
            if (v82 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v79 + v81;
          float v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v80 + v81;
          BOOL v83 = (float)(v80 + v81) <= 8191.0;
          float v88 = 8191.0;
          if (v83)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          if (v73)
          {
            float v89 = (float)(*v73 >> v66) - v34;
            float v90 = (float)(v73[1] >> v66) - v34;
            v73 += 2;
            float v91 = v180 * v90;
            float v92 = (float)(v178 * v90) + (float)(v89 * v179);
            float v93 = v177 * v89;
          }
          else
          {
            float v93 = 0.0;
            float v92 = 0.0;
            float v91 = 0.0;
          }
          float v94 = v33;
          float v95 = v35 * (float)((float)(v72[1] >> v66) - v33);
          float v96 = v91 + v95;
          BOOL v83 = (float)(v91 + v95) <= 8191.0;
          float v97 = 8191.0;
          if (v83)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          float v98 = v92 + v95;
          BOOL v83 = (float)(v92 + v95) <= 8191.0;
          float v99 = 8191.0;
          if (v83)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          float v100 = v93 + v95;
          float v101 = 8191.0;
          if (v100 <= 8191.0)
          {
            float v101 = v100;
            if (v100 < 0.0) {
              float v101 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H7 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          unsigned int v107 = llroundf(fminf(fmaxf(v88, 0.0), 8191.0));
          __asm { FCVT            S4, H7 }
          _H7 = *(_WORD *)(v53 + 2 * v107);
          __asm { FCVT            S7, H7 }
          _H6 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          float v114 = (float)((float)((float)(v68 * _S4) + (float)(v67 * _S0)) + (float)(v69 * _S7))
               + (float)(v70 * fmaxf(_S0, fmaxf(_S4, _S7)));
          float v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            float v115 = v114;
            if (v114 < 0.0) {
              float v115 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H6
            FCVT            S6, H1
            FCVT            S30, H30
          }
          _H1 = *((_WORD *)result + llroundf(v115));
          __asm { FCVT            S1, H1 }
          float v121 = _S0 * _S1;
          float v122 = _S4 * _S1;
          float v123 = _S7 * _S1;
          float v124 = (float)((float)((float)(v68 * _S6) + (float)(v67 * _S3)) + (float)(v69 * _S30))
               + (float)(v70 * fmaxf(_S3, fmaxf(_S6, _S30)));
          float v125 = 8191.0;
          if (v124 <= 8191.0)
          {
            float v125 = v124;
            if (v124 < 0.0) {
              float v125 = 0.0;
            }
          }
          _H7 = *((_WORD *)result + llroundf(v125));
          __asm { FCVT            S7, H7 }
          float v128 = _S3 * _S7;
          _S6 = _S6 * _S7;
          float v130 = _S30 * _S7;
          float v131 = (float)((float)(v46 * v122) + (float)(v121 * v44)) + (float)(v123 * v45);
          float v132 = (float)((float)(v48 * v122) + (float)(v121 * v47)) + (float)(v123 * v49);
          _S0 = (float)((float)(v51 * v122) + (float)(v121 * v50)) + (float)(v123 * v52);
          _S1 = (float)(v46 * _S6) + (float)(v128 * v44);
          _S4 = (float)(v48 * _S6) + (float)(v128 * v47);
          float v136 = (float)((float)(v51 * _S6) + (float)(v128 * v50)) + (float)(v130 * v52);
          LOWORD(_S6) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          unsigned int v137 = llroundf(fminf(fmaxf(_S0, 0.0), 8191.0));
          LOWORD(_S0) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S0, H0
          }
          LOWORD(_S1) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S1 + (float)(v130 * v45), 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S4 + (float)(v130 * v49), 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          unsigned int v142 = llroundf(fminf(fmaxf(v136, 0.0), 8191.0));
          float v143 = (float)(v174 * _S0) + (float)(v175 * _S6);
          float v144 = (float)(v174 * _S4) + (float)(v175 * _S1);
          float v145 = _S6 + _S1;
          LOWORD(_S6) = *(_WORD *)(v58 + 2 * v137);
          float v146 = _S0 + _S4;
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * v142);
          __asm
          {
            FCVT            S6, H6
            FCVT            S4, H4
          }
          float v149 = (float)(v143 + (float)(v43 * _S6)) + v38;
          float v150 = v144 + (float)(v43 * _S4);
          float v151 = _S6 + _S4;
          float v152 = (float)(v176 + (float)(v145 * v173)) + (float)(v146 * v172);
          float v153 = (float)(v176 + (float)(v145 * v170)) + (float)(v146 * v169);
          if (v149 < v38) {
            float v154 = v38;
          }
          else {
            float v154 = v149;
          }
          BOOL v83 = v149 <= v40;
          float v155 = v152 + (float)(v151 * v171);
          if (!v83) {
            float v154 = v40;
          }
          char v156 = llroundf(v154);
          if (v155 < v41) {
            float v157 = v41;
          }
          else {
            float v157 = v152 + (float)(v151 * v171);
          }
          if (v155 > v42) {
            float v157 = v42;
          }
          char v158 = llroundf(v157);
          float v159 = v153 + (float)(v151 * v168);
          if ((float)(v150 + v38) < v38) {
            float v160 = v38;
          }
          else {
            float v160 = v150 + v38;
          }
          *float v75 = v156;
          v75[1] = v158;
          if ((float)(v150 + v38) <= v40) {
            float v161 = v160;
          }
          else {
            float v161 = v40;
          }
          v75[2] = llroundf(v161);
          float v162 = v42;
          if (v159 <= v42)
          {
            float v162 = v159;
            if (v159 < v41) {
              float v162 = v41;
            }
          }
          v75[3] = llroundf(v162);
          float v33 = v94;
          if (v74) {
            *v74++ = 0;
          }
          v71 += 2;
          v72 += 2;
          v75 += 4;
        }
        while (v19 > v71);
      }
      v65 += v26;
      v64 += v27;
      v59 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      uint64_t v163 = 0;
      do
      {
        if (v19)
        {
          size_t v164 = v19;
          float v165 = v15;
          float v166 = (unsigned __int16 *)v30;
          do
          {
            unsigned int v167 = *v166++;
            *v165++ = llroundf((float)v167 * 0.0038911);
            --v164;
          }
          while (v164);
        }
        v30 += v28;
        v15 += v13;
        ++v163;
      }
      while (v163 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19) {
          double result = memset(v15, 255, v19);
        }
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Mat_TRC_yuvsf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  int64x2_t v10 = (void *)result[16];
  unint64_t v11 = result[13] * a2 / v6 + result[15];
  int64x2_t v12 = (uint64_t *)result[17];
  uint64_t v13 = v12[1];
  uint64_t v14 = v10[1];
  unint64_t v15 = (unsigned char *)(v14 + v13 * v11 + v9);
  unint64_t v16 = v8 / v6;
  if (v14) {
    uint64_t v17 = (_WORD *)(v14 + v13 * v11 + v9);
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16 != v7)
  {
    uint64_t v18 = 0;
    size_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    unint64_t v21 = v7 + *(void *)((char *)result + 44);
    unint64_t v22 = v16 - v7;
    uint64_t v23 = result[19];
    uint64_t v24 = (void *)result[7];
    uint64_t v25 = (uint64_t *)result[8];
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = v25[2];
    uint64_t v29 = v24[2];
    uint64_t v30 = v29 + v28 * v21 + 2 * v20;
    uint64_t v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    *(float *)&unsigned int v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    float v33 = (float)LODWORD(a4);
    float v34 = (float)LODWORD(a5);
    float v35 = *(float *)&v32 * *(float *)v23;
    float v155 = *(float *)&v32 * *(float *)(v23 + 16);
    float v156 = *(float *)&v32 * *(float *)(v23 + 8);
    float v36 = *(float *)&v32 * *(float *)(v23 + 20);
    float v37 = *(float *)&v32 * *(float *)(v23 + 28);
    LOWORD(v32) = *(_WORD *)(v23 + 144);
    float v38 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 146);
    float v39 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 148);
    float v40 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 150);
    float v41 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 152);
    float v42 = (float)v32;
    float v43 = *(float *)(v23 + 36);
    float v44 = *(float *)(v23 + 40);
    float v45 = *(float *)(v23 + 44);
    float v153 = *(float *)(v23 + 48) * 0.5;
    float v154 = v36;
    float v151 = *(float *)(v23 + 56) * 0.5;
    float v152 = *(float *)(v23 + 52) * 0.5;
    float v149 = *(float *)(v23 + 64) * 0.5;
    float v150 = *(float *)(v23 + 60) * 0.5;
    float v46 = *(float *)(v23 + 72);
    float v148 = *(float *)(v23 + 68) * 0.5;
    float v48 = *(float *)(v23 + 76);
    float v47 = *(float *)(v23 + 80);
    float v49 = *(float *)(v23 + 84);
    float v50 = *(float *)(v23 + 88);
    float v51 = *(float *)(v23 + 92);
    float v52 = *(float *)(v23 + 96);
    float v53 = *(float *)(v23 + 100);
    float v54 = *(float *)(v23 + 104);
    unsigned int v55 = *(unsigned __int8 *)(v23 + 124);
    char v56 = 16 - v55;
    _CF = v55 >= 0x11;
    uint64_t v58 = v23 + 16548;
    double result = (void *)(v23 + 164);
    if (_CF) {
      char v59 = 0;
    }
    else {
      char v59 = v56;
    }
    uint64_t v60 = (unsigned char *)(*v10 + v31 * v11 + v9);
    uint64_t v61 = v24[1];
    if (v61) {
      uint64_t v62 = v61 + v27 * v21 + 2 * v20;
    }
    else {
      uint64_t v62 = 0;
    }
    uint64_t v63 = *v24 + v26 * v21 + 2 * v20;
    char v64 = v59;
    do
    {
      if (v19)
      {
        size_t v65 = 0;
        char v66 = (unsigned __int16 *)v63;
        float v67 = (unsigned __int16 *)v62;
        float v68 = v17;
        float v69 = v60;
        do
        {
          if (v67)
          {
            float v70 = (float)(*v67 >> v64) - v34;
            float v71 = (float)(v67[1] >> v64) - v34;
            v67 += 2;
            float v72 = v156 * v71;
            float v73 = (float)(v154 * v71) + (float)(v70 * v155);
            float v74 = v37 * v70;
          }
          else
          {
            float v74 = 0.0;
            float v73 = 0.0;
            float v72 = 0.0;
          }
          float v75 = v35 * (float)((float)(*v66 >> v64) - v33);
          float v76 = v72 + v75;
          BOOL v77 = (float)(v72 + v75) <= 8191.0;
          float v78 = 8191.0;
          if (v77)
          {
            float v78 = v76;
            if (v76 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v73 + v75;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = 8191.0;
          if ((float)(v74 + v75) <= 8191.0)
          {
            float v81 = v74 + v75;
            if ((float)(v74 + v75) < 0.0) {
              float v81 = 0.0;
            }
          }
          if (v67)
          {
            float v82 = (float)(*v67 >> v64) - v34;
            float v83 = (float)(v67[1] >> v64) - v34;
            v67 += 2;
            float v84 = v156 * v83;
            float v85 = (float)(v154 * v83) + (float)(v82 * v155);
            float v86 = v37 * v82;
          }
          else
          {
            float v86 = 0.0;
            float v85 = 0.0;
            float v84 = 0.0;
          }
          float v87 = v35 * (float)((float)(v66[1] >> v64) - v33);
          float v88 = 8191.0;
          if ((float)(v84 + v87) <= 8191.0)
          {
            float v88 = v84 + v87;
            if ((float)(v84 + v87) < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v85 + v87;
          BOOL v77 = (float)(v85 + v87) <= 8191.0;
          float v90 = 8191.0;
          if (v77)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v86 + v87;
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          float v106 = (float)((float)(v48 * _S5) + (float)(_S0 * v46)) + (float)(_S24 * v47);
          float v107 = (float)((float)(v50 * _S5) + (float)(_S0 * v49)) + (float)(_S24 * v51);
          _S0 = (float)((float)(v53 * _S5) + (float)(_S0 * v52)) + (float)(_S24 * v54);
          float v109 = (float)(v48 * _S4) + (float)(_S6 * v46);
          float v110 = (float)(v50 * _S4) + (float)(_S6 * v49);
          float v111 = (float)(v53 * _S4) + (float)(_S6 * v52);
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _S5 = v109 + (float)(_S6 * v47);
          _S24 = v110 + (float)(_S6 * v51);
          float v115 = v111 + (float)(_S6 * v54);
          LOWORD(_S6) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          unsigned int v116 = llroundf(fminf(fmaxf(_S0, 0.0), 8191.0));
          LOWORD(_S0) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S0, H0
          }
          LOWORD(_S5) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          unsigned int v121 = llroundf(fminf(fmaxf(v115, 0.0), 8191.0));
          float v122 = (float)(v44 * _S0) + (float)(v43 * _S6);
          float v123 = (float)(v44 * _S24) + (float)(v43 * _S5);
          float v124 = _S6 + _S5;
          LOWORD(_S6) = *(_WORD *)(v58 + 2 * v116);
          float v125 = _S0 + _S24;
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * v121);
          __asm
          {
            FCVT            S6, H6
            FCVT            S24, H24
          }
          float v128 = (float)(v122 + (float)(v45 * _S6)) + v38;
          float v129 = v123 + (float)(v45 * _S24);
          float v130 = _S6 + _S24;
          float v131 = (float)(v39 + (float)(v124 * v153)) + (float)(v125 * v152);
          float v132 = (float)(v39 + (float)(v124 * v150)) + (float)(v125 * v149);
          if (v128 < v38) {
            float v133 = v38;
          }
          else {
            float v133 = v128;
          }
          BOOL v77 = v128 <= v40;
          float v134 = v131 + (float)(v130 * v151);
          if (!v77) {
            float v133 = v40;
          }
          char v135 = llroundf(v133);
          if (v134 < v41) {
            float v136 = v41;
          }
          else {
            float v136 = v131 + (float)(v130 * v151);
          }
          if (v134 <= v42) {
            float v137 = v136;
          }
          else {
            float v137 = v42;
          }
          char v138 = llroundf(v137);
          float v139 = v132 + (float)(v130 * v148);
          if ((float)(v129 + v38) < v38) {
            float v140 = v38;
          }
          else {
            float v140 = v129 + v38;
          }
          *float v69 = v135;
          v69[1] = v138;
          if ((float)(v129 + v38) <= v40) {
            float v141 = v140;
          }
          else {
            float v141 = v40;
          }
          v69[2] = llroundf(v141);
          float v142 = v42;
          if (v139 <= v42)
          {
            float v142 = v139;
            if (v139 < v41) {
              float v142 = v41;
            }
          }
          v69[3] = llroundf(v142);
          if (v68) {
            *v68++ = 0;
          }
          v65 += 2;
          v66 += 2;
          v69 += 4;
        }
        while (v19 > v65);
      }
      v63 += v26;
      v62 += v27;
      v60 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      uint64_t v143 = 0;
      do
      {
        if (v19)
        {
          size_t v144 = v19;
          float v145 = v15;
          float v146 = (unsigned __int16 *)v30;
          do
          {
            unsigned int v147 = *v146++;
            *v145++ = llroundf((float)v147 * 0.0038911);
            --v144;
          }
          while (v144);
        }
        v30 += v28;
        v15 += v13;
        ++v143;
      }
      while (v143 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19) {
          double result = memset(v15, 255, v19);
        }
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_yuvsf_GCD);
  return 0;
}

void *vt_Copy_xf444_rgb_yuvsf_GCD(void *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v12 = *(void *)((char *)result + 28);
  unint64_t v13 = *(unsigned __int8 *)result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = v12 + v12 * a2;
  uint64_t v16 = result[14];
  uint64_t v17 = (void *)result[16];
  unint64_t v18 = result[13] * a2 / v13 + result[15];
  uint64_t v19 = (uint64_t *)result[17];
  uint64_t v20 = v19[1];
  uint64_t v21 = v17[1];
  int64x2_t v22 = (unsigned char *)(v21 + v20 * v18 + v16);
  unint64_t v23 = v15 / v13;
  if (v21) {
    uint64_t v24 = (_WORD *)(v21 + v20 * v18 + v16);
  }
  else {
    uint64_t v24 = 0;
  }
  if (v23 == v14) {
    return result;
  }
  uint64_t v25 = 0;
  size_t v26 = *(void *)((char *)result + 20);
  uint64_t v27 = *(void *)((char *)result + 36);
  unint64_t v28 = v14 + *(void *)((char *)result + 44);
  unint64_t v29 = v23 - v14;
  uint64_t v30 = result[19];
  uint64_t v31 = (void *)result[7];
  unsigned int v32 = (uint64_t *)result[8];
  uint64_t v33 = *v32;
  uint64_t v34 = v32[1];
  uint64_t v35 = v32[2];
  uint64_t v36 = v31[2];
  LOWORD(a6) = *(_WORD *)(v30 + 140);
  LOWORD(a7) = *(_WORD *)(v30 + 142);
  float v37 = (float)*(unsigned int *)(v30 + 136) / (float)*(unsigned int *)(v30 + 128);
  float v38 = *(float *)v30;
  float v39 = *(float *)(v30 + 8);
  float v40 = *(float *)(v30 + 16);
  float v41 = *(float *)(v30 + 20);
  float v42 = *(float *)(v30 + 28);
  LOWORD(v7) = *(_WORD *)(v30 + 144);
  LOWORD(v8) = *(_WORD *)(v30 + 146);
  LOWORD(v9) = *(_WORD *)(v30 + 148);
  LOWORD(v10) = *(_WORD *)(v30 + 150);
  LOWORD(v11) = *(_WORD *)(v30 + 152);
  float v43 = *(float *)(v30 + 36);
  float v44 = *(float *)(v30 + 40);
  float v45 = *(float *)(v30 + 44);
  float v46 = *(float *)(v30 + 48);
  float v47 = *(float *)(v30 + 52);
  float v48 = *(float *)(v30 + 56);
  float v49 = *(float *)(v30 + 60);
  float v50 = *(float *)(v30 + 64);
  float v51 = *(float *)(v30 + 68);
  LODWORD(v30) = *(unsigned __int8 *)(v30 + 124);
  char v52 = 16 - v30;
  BOOL v53 = v30 >= 0x11;
  uint64_t v54 = v36 + v35 * v28 + 2 * v27;
  uint64_t v55 = *v19;
  float v56 = (float)LODWORD(a6);
  float v57 = (float)LODWORD(a7);
  float v58 = v37 * v38;
  float v59 = v37 * v39;
  float v60 = v37 * v40;
  float v61 = v37 * v41;
  float v62 = v37 * v42;
  float v63 = (float)v7;
  float v64 = (float)v8;
  float v65 = (float)v9;
  float v66 = (float)v10;
  float v67 = (float)v11;
  float v68 = v46 * 0.5;
  float v69 = v47 * 0.5;
  float v70 = v48 * 0.5;
  float v71 = v49 * 0.5;
  float v72 = v50 * 0.5;
  float v73 = v51 * 0.5;
  if (v53) {
    char v74 = 0;
  }
  else {
    char v74 = v52;
  }
  float v75 = (unsigned char *)(*v17 + v55 * v18 + v16);
  uint64_t v76 = v31[1];
  if (v76) {
    uint64_t v77 = v76 + v34 * v28 + 2 * v27;
  }
  else {
    uint64_t v77 = 0;
  }
  double result = (void *)(*v31 + v33 * v28 + 2 * v27);
  char v78 = v74;
  do
  {
    if (v26)
    {
      size_t v79 = 0;
      float v80 = (unsigned __int16 *)result;
      float v81 = (unsigned __int16 *)v77;
      float v82 = v24;
      float v83 = v75;
      while (1)
      {
        float v84 = 0.0;
        if (!v81) {
          break;
        }
        float v85 = (float)(*v81 >> v78) - v57;
        float v86 = (float)(v81[1] >> v78) - v57;
        v81 += 2;
        float v87 = v59 * v86;
        float v88 = (float)(v61 * v86) + (float)(v85 * v60);
        float v89 = v62 * v85;
        if (!v81) {
          goto LABEL_18;
        }
        float v90 = (float)(*v81 >> v78) - v57;
        float v91 = (float)(v81[1] >> v78) - v57;
        v81 += 2;
        float v92 = v59 * v91;
        float v93 = (float)(v61 * v91) + (float)(v90 * v60);
        float v84 = v62 * v90;
LABEL_19:
        float v94 = v58 * (float)((float)(*v80 >> v78) - v56);
        float v95 = v87 + v94;
        float v96 = v88 + v94;
        float v97 = v89 + v94;
        float v98 = v58 * (float)((float)(v80[1] >> v78) - v56);
        float v99 = v92 + v98;
        float v100 = v93 + v98;
        float v101 = v84 + v98;
        float v102 = (float)((float)((float)(v44 * v96) + (float)(v43 * v95)) + (float)(v45 * v97)) + v63;
        float v103 = (float)((float)((float)(v44 * v100) + (float)(v43 * v99)) + (float)(v45 * v101)) + v63;
        float v104 = v95 + v99;
        float v105 = v96 + v100;
        float v106 = v97 + v101;
        float v107 = (float)((float)(v64 + (float)(v104 * v68)) + (float)(v105 * v69)) + (float)(v106 * v70);
        float v108 = (float)(v64 + (float)(v104 * v71)) + (float)(v105 * v72);
        if (v102 < v63) {
          float v109 = v63;
        }
        else {
          float v109 = v102;
        }
        if (v102 > v65) {
          float v109 = v65;
        }
        float v110 = v108 + (float)(v106 * v73);
        *float v83 = llroundf(v109);
        if (v107 < v66) {
          float v111 = v66;
        }
        else {
          float v111 = v107;
        }
        if (v107 <= v67) {
          float v112 = v111;
        }
        else {
          float v112 = v67;
        }
        v83[1] = llroundf(v112);
        if (v103 < v63) {
          float v113 = v63;
        }
        else {
          float v113 = v103;
        }
        if (v103 > v65) {
          float v113 = v65;
        }
        v83[2] = llroundf(v113);
        float v114 = v67;
        if (v110 <= v67)
        {
          float v114 = v110;
          if (v110 < v66) {
            float v114 = v66;
          }
        }
        v83[3] = llroundf(v114);
        if (v82) {
          *v82++ = 0;
        }
        v79 += 2;
        v80 += 2;
        v83 += 4;
        if (v26 <= v79) {
          goto LABEL_41;
        }
      }
      float v89 = 0.0;
      float v88 = 0.0;
      float v87 = 0.0;
LABEL_18:
      float v93 = 0.0;
      float v92 = 0.0;
      goto LABEL_19;
    }
LABEL_41:
    double result = (void *)((char *)result + v33);
    v77 += v34;
    v75 += v55;
    ++v25;
  }
  while (v25 != v29);
  if (v36 && v24)
  {
    uint64_t v115 = 0;
    do
    {
      if (v26)
      {
        size_t v116 = v26;
        float v117 = v22;
        float v118 = (unsigned __int16 *)v54;
        do
        {
          unsigned int v119 = *v118++;
          *v117++ = llroundf((float)v119 * 0.0038911);
          --v116;
        }
        while (v116);
      }
      v54 += v35;
      v22 += v20;
      ++v115;
    }
    while (v115 != v29);
  }
  else if (v24)
  {
    do
    {
      if (v26) {
        double result = memset(v22, 255, v26);
      }
      v22 += v20;
      --v29;
    }
    while (v29);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD(unint64_t result, uint64_t a2, double a3, int16x4_t a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v14 = *(void *)(result + 28);
  unint64_t v15 = *(unsigned __int8 *)result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (v17 != v16)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(result + 36);
    unint64_t v20 = v16 + *(void *)(result + 44);
    unint64_t v21 = v17 - v16;
    uint64_t v22 = *(void *)(result + 112);
    uint64_t v23 = *(void *)(result + 152);
    uint64_t v25 = *(uint64_t **)(result + 56);
    uint64_t v24 = *(uint64_t **)(result + 64);
    size_t v26 = *(void **)(result + 128);
    uint64_t v27 = *(uint64_t **)(result + 136);
    a4.i32[0] = *(_DWORD *)(v23 + 128);
    unsigned int v28 = *(unsigned __int16 *)(v23 + 140);
    unsigned int v29 = *(unsigned __int16 *)(v23 + 142);
    LODWORD(a9) = *(_DWORD *)(v23 + 8);
    LODWORD(a10) = *(_DWORD *)(v23 + 16);
    unint64_t v30 = *(void *)(result + 104) * a2 / v15 + *(void *)(result + 120);
    uint64_t v247 = v24[2];
    uint64_t v248 = v27[2];
    uint64_t v249 = v26[2];
    uint64_t v250 = v25[2];
    uint64_t v31 = (char *)(v250 + v247 * v20 + 2 * v19);
    uint64_t v32 = (char *)(v249 + v248 * v30 + 2 * v22);
    float v33 = (float)a4.u32[0];
    unsigned int v34 = *(unsigned __int16 *)(v23 + 144);
    unsigned int v35 = *(unsigned __int16 *)(v23 + 146);
    unsigned int v36 = *(unsigned __int16 *)(v23 + 148);
    unsigned int v37 = *(unsigned __int16 *)(v23 + 150);
    float v38 = (float)v28;
    *(short float *)a4.i16 = (short float)v28;
    unsigned int v39 = *(unsigned __int16 *)(v23 + 152);
    _S15 = *(float *)(v23 + 44);
    float v296 = (float)v29;
    short float v41 = (short float)v29;
    float v43 = (float)v34;
    uint64_t v44 = v23 + 16548;
    float v45 = 8191.0 / v33;
    _S27 = v45 * *(float *)v23;
    _S24 = v45 * *(float *)&a9;
    _S25 = v45 * *(float *)&a10;
    _S30 = v45 * *(float *)(v23 + 20);
    _S18 = v45 * *(float *)(v23 + 28);
    float v295 = (float)v35;
    float v51 = (float)v36;
    float v301 = (float)v37;
    float v52 = (float)v39;
    int16x8_t v53 = vdupq_lane_s16(a4, 0);
    float16x8_t v294 = (float16x8_t)v53;
    *(short float *)v53.i16 = -v41;
    int16x8_t v54 = vdupq_lane_s16(*(int16x4_t *)v53.i8, 0);
    float16x8_t v258 = (float16x8_t)v54;
    *(short float *)v54.i16 = (short float)v35;
    uint64_t v55 = v23 + 164;
    *(short float *)a4.i16 = (short float)v36;
    *(short float *)&a9 = (short float)v37;
    *(short float *)&a10 = (short float)v39;
    unsigned int v56 = *(unsigned __int8 *)(v23 + 132);
    if (v56 >= 0x11) {
      unsigned __int8 v57 = 0;
    }
    else {
      unsigned __int8 v57 = 16 - v56;
    }
    unsigned int v58 = *(unsigned __int8 *)(v23 + 124);
    unsigned __int8 v59 = 16 - v58;
    if (v58 >= 0x11) {
      unsigned __int8 v59 = 0;
    }
    uint64_t v60 = v26[1];
    uint64_t v252 = v27[1];
    uint64_t v253 = *v27;
    uint64_t v61 = *v26 + *v27 * v30;
    v13.i32[1] = *(_DWORD *)(v23 + 60);
    v13.i32[0] = *(_DWORD *)(v23 + 48);
    *(float32x2_t *)v13.f32 = vmul_f32(*(float32x2_t *)v13.f32, (float32x2_t)0x3F0000003F000000);
    float16x8_t v292 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v13), 0);
    v12.i32[1] = *(_DWORD *)(v23 + 64);
    v12.i32[0] = *(_DWORD *)(v23 + 52);
    *(float32x2_t *)v12.f32 = vmul_f32(*(float32x2_t *)v12.f32, (float32x2_t)0x3F0000003F000000);
    float16x8_t v290 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v12), 0);
    v42.i32[1] = *(_DWORD *)(v23 + 68);
    v42.i32[0] = *(_DWORD *)(v23 + 56);
    *(float32x2_t *)v10.f32 = vmul_f32(v42, (float32x2_t)0x3F0000003F000000);
    *(short float *)v11.i16 = (short float)v34;
    float16x8_t v288 = (float16x8_t)vdupq_lane_s16(v11, 0);
    float16x8_t v289 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    uint64_t v62 = v23 + 32932;
    float16x8_t v286 = (float16x8_t)vdupq_lane_s16(a4, 0);
    float16x8_t v287 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v54.i8, 0);
    uint64_t v63 = v60 + v252 * v30 + 2 * v22;
    if (!v60) {
      uint64_t v63 = 0;
    }
    float v64 = (uint16x8_t *)(v61 + 2 * v22);
    uint64_t v65 = *v25;
    uint64_t v66 = *(void *)(*(void *)(result + 56) + 8);
    uint16x8_t v67 = (uint16x8_t)vdupq_n_s16(-v59);
    uint64_t v69 = *v24;
    uint64_t v68 = v24[1];
    float16x8_t v284 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a10, 0);
    float16x8_t v285 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a9, 0);
    uint64_t v70 = v66 + v68 * v20 + 2 * v19;
    if (!v66) {
      uint64_t v70 = 0;
    }
    uint64_t v71 = v65 + v69 * v20 + 2 * v19;
    unint64_t v72 = *(void *)(result + 20);
    double result = (v72 - 7);
    uint64_t v251 = v69;
    _S17 = *(float *)(v23 + 80);
    _S19 = *(float *)(v23 + 84);
    _S23 = *(float *)(v23 + 88);
    _S8 = *(float *)(v23 + 100);
    _S26 = *(float *)(v23 + 108);
    _S10 = *(float *)(v23 + 112);
    _S11 = *(float *)(v23 + 116);
    __asm { FCVT            H6, S27 }
    float v297 = _S18;
    __asm { FCVT            H12, S18 }
    short float v257 = _H12;
    float v299 = _S25;
    __asm { FCVT            H12, S25 }
    short float v256 = _H12;
    float v298 = _S30;
    __asm { FCVT            H12, S30 }
    short float v255 = _H12;
    float v300 = _S24;
    __asm { FCVT            H12, S24 }
    short float v254 = _H12;
    float v303 = *(float *)(v23 + 36);
    __asm { FCVT            H0, S0 }
    short float v277 = _H0;
    float v302 = *(float *)(v23 + 40);
    __asm { FCVT            H0, S1 }
    short float v276 = _H0;
    __asm { FCVT            H0, S15 }
    short float v275 = _H0;
    __asm { FCVT            H0, S26 }
    short float v274 = _H0;
    __asm { FCVT            H0, S10 }
    short float v273 = _H0;
    __asm { FCVT            H0, S11 }
    short float v272 = _H0;
    float v259 = *(float *)(v23 + 120);
    __asm { FCVT            H0, S9 }
    short float v271 = _H0;
    float v283 = *(float *)(v23 + 72);
    __asm { FCVT            H0, S4 }
    short float v270 = _H0;
    float v282 = *(float *)(v23 + 76);
    __asm { FCVT            H0, S7 }
    short float v269 = _H0;
    __asm { FCVT            H0, S17 }
    short float v268 = _H0;
    __asm { FCVT            H0, S19 }
    short float v267 = _H0;
    __asm { FCVT            H0, S23 }
    short float v266 = _H0;
    float v281 = *(float *)(v23 + 92);
    __asm { FCVT            H0, S28 }
    short float v265 = _H0;
    float v280 = *(float *)(v23 + 96);
    __asm { FCVT            H0, S31 }
    short float v264 = _H0;
    __asm { FCVT            H0, S8 }
    short float v263 = _H0;
    float v279 = *(float *)(v23 + 104);
    __asm { FCVT            H0, S29 }
    short float v262 = _H0;
    float v293 = v13.f32[0];
    float v291 = v12.f32[0];
    uint64_t v105 = v10.i64[0];
    float v261 = v12.f32[1];
    v106.i64[0] = 0x9000900090009000;
    v106.i64[1] = 0x9000900090009000;
    uint16x8_t v260 = (uint16x8_t)vdupq_n_s16(v57);
    uint16x8_t v278 = v67;
    float v107 = _S19;
    do
    {
      if ((int)v72 < 8)
      {
        unint64_t v165 = 0;
        float v112 = (uint16x8_t *)v63;
        float v111 = v64;
        float v110 = (const __int16 *)v70;
        float v109 = (uint16x8_t *)v71;
      }
      else
      {
        int v108 = 0;
        float v109 = (uint16x8_t *)v71;
        float v110 = (const __int16 *)v70;
        float v111 = v64;
        float v112 = (uint16x8_t *)v63;
        do
        {
          if (v110)
          {
            int16x8x2_t v304 = vld2q_s16(v110);
            v110 += 16;
            float16x8_t v113 = vcvtq_f16_u16(vshlq_u16((uint16x8_t)v304.val[0], v67));
            v304.val[0] = (int16x8_t)vcvtq_f16_u16(vshlq_u16((uint16x8_t)v304.val[1], v67));
            v304.val[1] = (int16x8_t)vaddq_f16(v258, v113);
            float16x8_t v114 = vaddq_f16(v258, (float16x8_t)v304.val[0]);
            float16x8_t v115 = vmulq_n_f16(v114, v254);
            float16x8_t v116 = vmlaq_n_f16(vmulq_n_f16((float16x8_t)v304.val[1], v256), v114, v255);
            float16x8_t v117 = vmulq_n_f16((float16x8_t)v304.val[1], v257);
          }
          else
          {
            float16x8_t v117 = 0uLL;
            float16x8_t v116 = 0uLL;
            float16x8_t v115 = 0uLL;
          }
          uint16x8_t v118 = *v109++;
          float16x8_t v119 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v118, v67)), v294);
          float16x8_t v120 = vmlaq_n_f16(v116, v119, _H6);
          float16x8_t v121 = vmlaq_n_f16(v117, v119, _H6);
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v115, v119, _H6), (float16x8_t)0), v106));
          uint32x4_t v123 = vmovl_high_u16(v122);
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v125.i16[0] = *(_WORD *)(v55 + 2 * v124.u32[0]);
          v125.i16[1] = *(_WORD *)(v55 + 2 * v124.u32[1]);
          v125.i16[2] = *(_WORD *)(v55 + 2 * v124.u32[2]);
          v125.i16[3] = *(_WORD *)(v55 + 2 * v124.u32[3]);
          v125.i16[4] = *(_WORD *)(v55 + 2 * v123.u32[0]);
          v125.i16[5] = *(_WORD *)(v55 + 2 * v123.u32[1]);
          v125.i16[6] = *(_WORD *)(v55 + 2 * v123.u32[2]);
          v125.i16[7] = *(_WORD *)(v55 + 2 * v123.u32[3]);
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v106));
          float16x8_t v127 = (float16x8_t)vmovl_high_u16(v126);
          *(void *)&long long v128 = v127.u32[2];
          *((void *)&v128 + 1) = v127.u32[3];
          long long v129 = v128;
          *(void *)&long long v128 = v127.u32[0];
          *((void *)&v128 + 1) = v127.u32[1];
          uint32x4_t v130 = vmovl_u16(*(uint16x4_t *)v126.i8);
          v127.i16[0] = *(_WORD *)(v55 + 2 * v130.u32[0]);
          v127.i16[1] = *(_WORD *)(v55 + 2 * v130.u32[1]);
          v127.i16[2] = *(_WORD *)(v55 + 2 * v130.u32[2]);
          v127.i16[3] = *(_WORD *)(v55 + 2 * v130.u32[3]);
          v127.i16[4] = *(_WORD *)(v55 + 2 * v128);
          v127.i16[5] = *(_WORD *)(v55 + 2 * *((void *)&v128 + 1));
          v127.i16[6] = *(_WORD *)(v55 + 2 * v129);
          v127.i16[7] = *(_WORD *)(v55 + 2 * *((void *)&v129 + 1));
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v106));
          uint32x4_t v132 = vmovl_high_u16(v131);
          float16x8_t v133 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v131.i8);
          v133.i16[0] = *(_WORD *)(v55 + 2 * v133.u32[0]);
          v133.i16[1] = *(_WORD *)(v55 + 2 * v133.u32[1]);
          v133.i16[2] = *(_WORD *)(v55 + 2 * v133.u32[2]);
          v133.i16[3] = *(_WORD *)(v55 + 2 * v133.u32[3]);
          v133.i16[4] = *(_WORD *)(v55 + 2 * v132.u32[0]);
          v133.i16[5] = *(_WORD *)(v55 + 2 * v132.u32[1]);
          v133.i16[6] = *(_WORD *)(v55 + 2 * v132.u32[2]);
          v133.i16[7] = *(_WORD *)(v55 + 2 * v132.u32[3]);
          uint16x8_t v134 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v125, v274), v127, v273), v133, v272), vmaxq_f16(vmaxq_f16(v125, v127), v133), v271), (float16x8_t)0), v106));
          uint32x4_t v135 = vmovl_high_u16(v134);
          float16x8_t v136 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v134.i8);
          v136.i16[0] = *(_WORD *)(v44 + 2 * v136.u32[0]);
          v136.i16[1] = *(_WORD *)(v44 + 2 * v136.u32[1]);
          v136.i16[2] = *(_WORD *)(v44 + 2 * v136.u32[2]);
          v136.i16[3] = *(_WORD *)(v44 + 2 * v136.u32[3]);
          v136.i16[4] = *(_WORD *)(v44 + 2 * v135.u32[0]);
          v136.i16[5] = *(_WORD *)(v44 + 2 * v135.u32[1]);
          v136.i16[6] = *(_WORD *)(v44 + 2 * v135.u32[2]);
          v136.i16[7] = *(_WORD *)(v44 + 2 * v135.u32[3]);
          float16x8_t v137 = vmulq_f16(v125, v136);
          float16x8_t v138 = vmulq_f16(v127, v136);
          float16x8_t v139 = vmulq_f16(v133, v136);
          float16x8_t v140 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v137, v267), v138, v266), v139, v265);
          float16x8_t v141 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v139, v262), v138, v263), v137, v264);
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v137, v270), v138, v269), v139, v268), (float16x8_t)0), v106));
          uint32x4_t v143 = vmovl_high_u16(v142);
          uint32x4_t v144 = vmovl_u16(*(uint16x4_t *)v142.i8);
          v125.i16[0] = *(_WORD *)(v62 + 2 * v144.u32[0]);
          v125.i16[1] = *(_WORD *)(v62 + 2 * v144.u32[1]);
          v125.i16[2] = *(_WORD *)(v62 + 2 * v144.u32[2]);
          v125.i16[3] = *(_WORD *)(v62 + 2 * v144.u32[3]);
          v125.i16[4] = *(_WORD *)(v62 + 2 * v143.u32[0]);
          v125.i16[5] = *(_WORD *)(v62 + 2 * v143.u32[1]);
          v125.i16[6] = *(_WORD *)(v62 + 2 * v143.u32[2]);
          float16x8_t v145 = v125;
          v145.i16[7] = *(_WORD *)(v62 + 2 * v143.u32[3]);
          uint16x8_t v146 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v140, (float16x8_t)0), v106));
          uint32x4_t v147 = vmovl_high_u16(v146);
          int16x8_t v148 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v146.i8);
          *(void *)&long long v128 = v147.u32[2];
          *((void *)&v128 + 1) = v147.u32[3];
          long long v149 = v128;
          *(void *)&long long v128 = v147.u32[0];
          *((void *)&v128 + 1) = v147.u32[1];
          long long v150 = v128;
          *((void *)&v128 + 1) = v148.u32[3];
          v148.i16[7] = (unint64_t)v148.u32[3] >> 48;
          v148.i16[0] = *(_WORD *)(v62 + 2 * v148.u32[0]);
          uint64_t v151 = *((void *)&v149 + 1);
          v148.i16[1] = *(_WORD *)(v62 + 2 * v148.u32[1]);
          v148.i16[2] = *(_WORD *)(v62 + 2 * v148.u32[2]);
          v148.i16[3] = *(_WORD *)(v62 + 2 * *((void *)&v128 + 1));
          v148.i16[4] = *(_WORD *)(v62 + 2 * v150);
          v148.i16[5] = *(_WORD *)(v62 + 2 * *((void *)&v150 + 1));
          v148.i16[6] = *(_WORD *)(v62 + 2 * v149);
          uint16x8_t v152 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v141, (float16x8_t)0), v106));
          uint32x4_t v153 = vmovl_u16(*(uint16x4_t *)v152.i8);
          uint64_t v154 = v153.u32[1];
          uint64_t v155 = v153.u32[0];
          float16x8_t v156 = (float16x8_t)v148;
          v156.i16[7] = *(_WORD *)(v62 + 2 * v151);
          int16x8_t v157 = (int16x8_t)vmovl_high_u16(v152);
          uint64_t v158 = v153.u32[3];
          uint64_t v159 = v153.u32[2];
          *(void *)&long long v128 = v157.u32[2];
          *((void *)&v128 + 1) = v157.u32[3];
          long long v160 = v128;
          *(void *)&long long v128 = v157.u32[0];
          v157.i16[7] = (unint64_t)v157.u32[1] >> 48;
          v157.i16[0] = *(_WORD *)(v62 + 2 * v155);
          float v161 = (__int16 *)(v62 + 2 * v157.u32[1]);
          v157.i16[1] = *(_WORD *)(v62 + 2 * v154);
          v157.i16[2] = *(_WORD *)(v62 + 2 * v159);
          v157.i16[3] = *(_WORD *)(v62 + 2 * v158);
          v157.i16[4] = *(_WORD *)(v62 + 2 * v128);
          v157.i16[5] = *v161;
          v157.i16[6] = *(_WORD *)(v62 + 2 * v160);
          float v162 = (__int16 *)(v62 + 2 * *((void *)&v160 + 1));
          float16x8_t v163 = (float16x8_t)v157;
          v163.i16[7] = *v162;
          *v111++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v288, v145, v277), v156, v276), v163, v275), v288), v286)), v260);
          int16x8_t v164 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v125, v148), (float16x8_t)vuzp2q_s16((int16x8_t)v145, (int16x8_t)v156));
          *v112++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v287, v292, (float16x8_t)vzip1q_s16(v164, v164)), v290, (float16x8_t)vzip2q_s16(v164, v164)), v289, vaddq_f16((float16x8_t)vtrn1q_s16(v157, v157), (float16x8_t)vtrn2q_s16((int16x8_t)v163, (int16x8_t)v163))), v285), v284)), v260);
          v108 += 8;
        }
        while (v108 < (int)result);
        unint64_t v165 = v72 & 0xFFFFFFF8;
      }
      while (v72 > v165)
      {
        if (v110)
        {
          float v166 = (float)(*(unsigned __int16 *)v110 >> v59) - v296;
          float v167 = (float)(*((unsigned __int16 *)v110 + 1) >> v59) - v296;
          v110 += 2;
          float v168 = v300 * v167;
          float v169 = (float)(v298 * v167) + (float)(v166 * v299);
          float v170 = v297 * v166;
        }
        else
        {
          float v170 = 0.0;
          float v169 = 0.0;
          float v168 = 0.0;
        }
        float v171 = _S27 * (float)((float)(v109->u16[0] >> v59) - v38);
        float v172 = v168 + v171;
        BOOL v173 = (float)(v168 + v171) <= 8191.0;
        float v174 = 8191.0;
        if (v173)
        {
          float v174 = v172;
          if (v172 < 0.0) {
            float v174 = 0.0;
          }
        }
        float v175 = v169 + v171;
        BOOL v173 = (float)(v169 + v171) <= 8191.0;
        float v176 = 8191.0;
        if (v173)
        {
          float v176 = v175;
          if (v175 < 0.0) {
            float v176 = 0.0;
          }
        }
        float v177 = v170 + v171;
        float v178 = 8191.0;
        if (v177 <= 8191.0)
        {
          float v178 = v177;
          if (v177 < 0.0) {
            float v178 = 0.0;
          }
        }
        if (v110)
        {
          float v179 = (float)(*(unsigned __int16 *)v110 >> v59) - v296;
          float v180 = (float)(*((unsigned __int16 *)v110 + 1) >> v59) - v296;
          v110 += 2;
          float v181 = v300 * v180;
          float v182 = (float)(v298 * v180) + (float)(v179 * v299);
          float v183 = v297 * v179;
        }
        else
        {
          float v183 = 0.0;
          float v182 = 0.0;
          float v181 = 0.0;
        }
        float v184 = v38;
        float v185 = _S27 * (float)((float)(v109->u16[1] >> v59) - v38);
        float v186 = v181 + v185;
        BOOL v173 = (float)(v181 + v185) <= 8191.0;
        float v187 = 8191.0;
        if (v173)
        {
          float v187 = v186;
          if (v186 < 0.0) {
            float v187 = 0.0;
          }
        }
        float v188 = v182 + v185;
        BOOL v173 = (float)(v182 + v185) <= 8191.0;
        float v189 = 8191.0;
        if (v173)
        {
          float v189 = v188;
          if (v188 < 0.0) {
            float v189 = 0.0;
          }
        }
        float v190 = _S27;
        float v191 = v183 + v185;
        BOOL v173 = (float)(v183 + v185) <= 8191.0;
        float v192 = 8191.0;
        if (v173)
        {
          float v192 = v191;
          if (v191 < 0.0) {
            float v192 = 0.0;
          }
        }
        float v193 = _S15;
        _H4 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v174, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0)));
        unsigned int v197 = llroundf(fminf(fmaxf(v178, 0.0), 8191.0));
        __asm { FCVT            S0, H1 }
        _H1 = *(_WORD *)(v55 + 2 * v197);
        __asm { FCVT            S1, H1 }
        _H18 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v187, 0.0), 8191.0)));
        _H12 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v189, 0.0), 8191.0)));
        _H13 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v192, 0.0), 8191.0)));
        float v204 = (float)((float)((float)(_S10 * _S0) + (float)(_S26 * _S4)) + (float)(_S11 * _S1))
             + (float)(v259 * fmaxf(_S4, fmaxf(_S0, _S1)));
        float v205 = 8191.0;
        if (v204 <= 8191.0)
        {
          float v205 = v204;
          if (v204 < 0.0) {
            float v205 = 0.0;
          }
        }
        __asm
        {
          FCVT            S18, H18
          FCVT            S30, H12
          FCVT            S12, H13
        }
        _H13 = *(_WORD *)(v44 + 2 * llroundf(v205));
        float v210 = (float)((float)((float)(_S10 * _S30) + (float)(_S26 * _S18)) + (float)(_S11 * _S12))
             + (float)(v259 * fmaxf(_S18, fmaxf(_S30, _S12)));
        float v211 = 8191.0;
        if (v210 <= 8191.0)
        {
          float v211 = v210;
          if (v210 < 0.0) {
            float v211 = 0.0;
          }
        }
        __asm { FCVT            S19, H13 }
        float v213 = _S4 * _S19;
        _S0 = _S0 * _S19;
        _S1 = _S1 * _S19;
        LOWORD(_S19) = *(_WORD *)(v44 + 2 * llroundf(v211));
        __asm { FCVT            S19, H19 }
        float v217 = _S18 * _S19;
        float v218 = _S30 * _S19;
        float v219 = _S12 * _S19;
        float v220 = (float)((float)(v282 * _S0) + (float)(v213 * v283)) + (float)(_S1 * _S17);
        float v221 = (float)((float)(_S23 * _S0) + (float)(v213 * v107)) + (float)(_S1 * v281);
        _S4 = (float)((float)(_S8 * _S0) + (float)(v213 * v280)) + (float)(_S1 * v279);
        float v223 = (float)((float)(v282 * v218) + (float)(v217 * v283)) + (float)(v219 * _S17);
        float v224 = (float)((float)(_S23 * v218) + (float)(v217 * v107)) + (float)(v219 * v281);
        float v225 = (float)((float)(_S8 * v218) + (float)(v217 * v280)) + (float)(v219 * v279);
        LOWORD(_S0) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v220, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        LOWORD(_S1) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v221, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        LOWORD(_S4) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        _H18 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0)));
        _H12 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v224, 0.0), 8191.0)));
        _H13 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v225, 0.0), 8191.0)));
        _S15 = v193;
        float v232 = (float)((float)((float)(v302 * _S1) + (float)(v303 * _S0)) + (float)(v193 * _S4)) + v43;
        float v233 = v51;
        if (v232 <= v51)
        {
          float v233 = (float)((float)((float)(v302 * _S1) + (float)(v303 * _S0)) + (float)(v193 * _S4)) + v43;
          if (v232 < v43) {
            float v233 = (float)v34;
          }
        }
        __asm
        {
          FCVT            S30, H18
          FCVT            S20, H12
          FCVT            S18, H13
        }
        float v237 = (float)((float)((float)(v302 * _S20) + (float)(v303 * _S30)) + (float)(v193 * _S18)) + v43;
        v111->i16[0] = llroundf(v233) << v57;
        float v238 = v51;
        _S27 = v190;
        if (v237 <= v51)
        {
          float v238 = v237;
          if (v237 < v43) {
            float v238 = (float)v34;
          }
        }
        v111->i16[1] = llroundf(v238) << v57;
        float v239 = _S0 + _S30;
        float v240 = _S1 + _S20;
        float v241 = _S4 + _S18;
        float v242 = (float)((float)(v295 + (float)(v239 * v293)) + (float)(v240 * v291)) + (float)(v241 * *(float *)&v105);
        float v243 = v52;
        float v38 = v184;
        if (v242 <= v52)
        {
          float v243 = (float)((float)(v295 + (float)(v239 * v293)) + (float)(v240 * v291)) + (float)(v241 * *(float *)&v105);
          if (v242 < v301) {
            float v243 = v301;
          }
        }
        float v244 = (float)((float)(v295 + (float)(v239 * v13.f32[1])) + (float)(v240 * v261))
             + (float)(v241 * *((float *)&v105 + 1));
        v112->i16[0] = llroundf(v243) << v57;
        float v245 = v52;
        uint16x8_t v67 = v278;
        if (v244 <= v52)
        {
          float v245 = v244;
          if (v244 < v301) {
            float v245 = v301;
          }
        }
        v165 += 2;
        v112->i16[1] = llroundf(v245) << v57;
        float v109 = (uint16x8_t *)((char *)v109 + 4);
        float v111 = (uint16x8_t *)((char *)v111 + 4);
        float v112 = (uint16x8_t *)((char *)v112 + 4);
      }
      v71 += v251;
      v70 += v68;
      float v64 = (uint16x8_t *)((char *)v64 + v253);
      v63 += v252;
      ++v18;
    }
    while (v18 != v21);
    if (v250 && v249)
    {
      size_t v246 = 2 * v72;
      do
      {
        double result = (unint64_t)memcpy(v32, v31, v246);
        v31 += v247;
        v32 += v248;
        --v21;
      }
      while (v21);
    }
    else if (v249)
    {
      do
      {
        if (v72) {
          double result = (unint64_t)memset(v32, 255, 2 * v72);
        }
        v32 += v248;
        --v21;
      }
      while (v21);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Tone_Mat_TRC_xf422_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (void *)result[16];
    unint64_t v16 = result[13] * a2 / v6 + result[15];
    uint64_t v17 = result[19];
    uint64_t v18 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    uint64_t v25 = (char *)(v24 + v23 * v12 + 2 * v11);
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    uint64_t v30 = (char *)(v29 + v28 * v16 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    float v32 = (float)LODWORD(a4);
    float v33 = (float)LODWORD(a5);
    float v34 = v31 * *(float *)v17;
    float v172 = v31 * *(float *)(v17 + 16);
    float v173 = v31 * *(float *)(v17 + 8);
    float v35 = v31 * *(float *)(v17 + 20);
    *(float *)&unsigned int v36 = v31 * *(float *)(v17 + 28);
    float v170 = *(float *)&v36;
    float v171 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    float v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 152);
    float v41 = (float)v36;
    float v42 = *(float *)(v17 + 36);
    float v174 = v40;
    float v175 = *(float *)(v17 + 40);
    float v43 = *(float *)(v17 + 44);
    float v168 = *(float *)(v17 + 48) * 0.5;
    float v169 = v38;
    float v166 = *(float *)(v17 + 56) * 0.5;
    float v167 = *(float *)(v17 + 52) * 0.5;
    float v164 = *(float *)(v17 + 64) * 0.5;
    float v165 = *(float *)(v17 + 60) * 0.5;
    float v162 = *(float *)(v17 + 68) * 0.5;
    float v163 = *(float *)(v17 + 72);
    float v44 = *(float *)(v17 + 84);
    float v160 = *(float *)(v17 + 80);
    float v161 = *(float *)(v17 + 76);
    float v45 = *(float *)(v17 + 88);
    float v46 = *(float *)(v17 + 92);
    float v47 = *(float *)(v17 + 96);
    float v48 = *(float *)(v17 + 100);
    float v49 = *(float *)(v17 + 104);
    uint64_t v50 = v17 + 164;
    uint64_t v51 = v17 + 16548;
    unsigned int v52 = *(unsigned __int8 *)(v17 + 132);
    char v53 = 16 - v52;
    if (v52 >= 0x11) {
      char v53 = 0;
    }
    unsigned int v54 = *(unsigned __int8 *)(v17 + 124);
    char v55 = 16 - v54;
    if (v54 >= 0x11) {
      char v55 = 0;
    }
    uint64_t v56 = v15[1];
    _ZF = v56 == 0;
    uint64_t v58 = v56 + v27 * v16;
    uint64_t v59 = *v15 + v26 * v16;
    double result = (void *)(v17 + 32932);
    uint64_t v60 = v58 + 2 * v14;
    if (_ZF) {
      uint64_t v60 = 0;
    }
    uint64_t v61 = (_WORD *)(v59 + 2 * v14);
    uint64_t v63 = *v18;
    uint64_t v62 = v18[1];
    uint64_t v64 = v62 + v22 * v12 + 2 * v11;
    if (!v62) {
      uint64_t v64 = 0;
    }
    uint64_t v65 = v63 + v21 * v12 + 2 * v11;
    char v66 = v55;
    char v67 = v53;
    float v68 = *(float *)(v17 + 108);
    float v69 = *(float *)(v17 + 112);
    float v70 = *(float *)(v17 + 116);
    float v71 = *(float *)(v17 + 120);
    do
    {
      if (v10)
      {
        unint64_t v72 = 0;
        float v73 = (unsigned __int16 *)v65;
        char v74 = (unsigned __int16 *)v64;
        float v75 = v61;
        do
        {
          if (v74)
          {
            float v76 = (float)(*v74 >> v66) - v33;
            float v77 = (float)(v74[1] >> v66) - v33;
            v74 += 2;
            float v78 = v173 * v77;
            float v79 = (float)(v171 * v77) + (float)(v76 * v172);
            float v80 = v170 * v76;
          }
          else
          {
            float v80 = 0.0;
            float v79 = 0.0;
            float v78 = 0.0;
          }
          float v81 = v34 * (float)((float)(*v73 >> v66) - v32);
          float v82 = v78 + v81;
          BOOL v83 = (float)(v78 + v81) <= 8191.0;
          float v84 = 8191.0;
          if (v83)
          {
            float v84 = v82;
            if (v82 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = 8191.0;
          if ((float)(v79 + v81) <= 8191.0)
          {
            float v85 = v79 + v81;
            if ((float)(v79 + v81) < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v80 + v81;
          float v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          if (v74)
          {
            float v88 = (float)(*v74 >> v66) - v33;
            float v89 = (float)(v74[1] >> v66) - v33;
            v74 += 2;
            float v90 = v173 * v89;
            float v91 = (float)(v171 * v89) + (float)(v88 * v172);
            float v92 = v170 * v88;
          }
          else
          {
            float v92 = 0.0;
            float v91 = 0.0;
            float v90 = 0.0;
          }
          float v93 = v34 * (float)((float)(v73[1] >> v66) - v32);
          float v94 = v90 + v93;
          BOOL v83 = (float)(v90 + v93) <= 8191.0;
          float v95 = 8191.0;
          if (v83)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          float v96 = v91 + v93;
          BOOL v83 = (float)(v91 + v93) <= 8191.0;
          float v97 = 8191.0;
          if (v83)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          float v98 = v92 + v93;
          float v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          unsigned int v106 = llroundf(fminf(fmaxf(v87, 0.0), 8191.0));
          __asm { FCVT            S4, H1 }
          _H1 = *(_WORD *)(v50 + 2 * v106);
          __asm { FCVT            S30, H1 }
          _H1 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          float v113 = fmaxf(_S0, fmaxf(_S4, _S30));
          float v114 = (float)((float)((float)(v69 * _S4) + (float)(v68 * _S0)) + (float)(v70 * _S30)) + (float)(v71 * v113);
          float v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            float v115 = (float)((float)((float)(v69 * _S4) + (float)(v68 * _S0)) + (float)(v70 * _S30)) + (float)(v71 * v113);
            if (v114 < 0.0) {
              float v115 = 0.0;
            }
          }
          float v116 = v42;
          __asm
          {
            FCVT            S1, H1
            FCVT            S6, H6
            FCVT            S7, H7
          }
          _H19 = *(_WORD *)(v51 + 2 * llroundf(v115));
          float v121 = (float)((float)((float)(v69 * _S6) + (float)(v68 * _S1)) + (float)(v70 * _S7))
               + (float)(v71 * fmaxf(_S1, fmaxf(_S6, _S7)));
          float v122 = 8191.0;
          if (v121 <= 8191.0)
          {
            float v122 = v121;
            if (v121 < 0.0) {
              float v122 = 0.0;
            }
          }
          __asm { FCVT            S3, H19 }
          _S0 = _S0 * _S3;
          float v125 = _S4 * _S3;
          float v126 = _S30 * _S3;
          _H17 = *(_WORD *)(v51 + 2 * llroundf(v122));
          __asm { FCVT            S17, H17 }
          _S1 = _S1 * _S17;
          float v130 = _S6 * _S17;
          float v131 = _S7 * _S17;
          float v132 = (float)((float)(v161 * v125) + (float)(_S0 * v163)) + (float)(v126 * v160);
          float v133 = (float)((float)(v45 * v125) + (float)(_S0 * v44)) + (float)(v126 * v46);
          float v134 = (float)((float)(v48 * v125) + (float)(_S0 * v47)) + (float)(v126 * v49);
          float v135 = (float)((float)(v161 * v130) + (float)(_S1 * v163)) + (float)(v131 * v160);
          float v136 = (float)((float)(v45 * v130) + (float)(_S1 * v44)) + (float)(v131 * v46);
          float v137 = (float)((float)(v48 * v130) + (float)(_S1 * v47)) + (float)(v131 * v49);
          LOWORD(_S0) = *((_WORD *)result + llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          __asm { FCVT            S30, H1 }
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H19 = *((_WORD *)result + llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          float v42 = v116;
          float v144 = (float)((float)((float)(v175 * _S4) + (float)(v116 * _S0)) + (float)(v43 * _S30)) + v37;
          float v145 = v39;
          if (v144 <= v39)
          {
            float v145 = (float)((float)((float)(v175 * _S4) + (float)(v116 * _S0)) + (float)(v43 * _S30)) + v37;
            if (v144 < v37) {
              float v145 = v37;
            }
          }
          __asm
          {
            FCVT            S7, H1
            FCVT            S6, H6
            FCVT            S1, H19
          }
          float v149 = (float)((float)((float)(v175 * _S6) + (float)(v116 * _S7)) + (float)(v43 * _S1)) + v37;
          *float v75 = llroundf(v145) << v67;
          float v150 = v39;
          if (v149 <= v39)
          {
            float v150 = (float)((float)((float)(v175 * _S6) + (float)(v116 * _S7)) + (float)(v43 * _S1)) + v37;
            if (v149 < v37) {
              float v150 = v37;
            }
          }
          v75[1] = llroundf(v150) << v67;
          float v151 = _S0 + _S7;
          float v152 = _S4 + _S6;
          float v153 = _S30 + _S1;
          float v154 = (float)((float)(v169 + (float)(v151 * v168)) + (float)(v152 * v167)) + (float)(v153 * v166);
          float v155 = v41;
          if (v154 <= v41)
          {
            float v155 = (float)((float)(v169 + (float)(v151 * v168)) + (float)(v152 * v167)) + (float)(v153 * v166);
            if (v154 < v174) {
              float v155 = v174;
            }
          }
          float16x8_t v156 = (_WORD *)(v60 + 2 * v72);
          float v157 = (float)((float)(v169 + (float)(v151 * v165)) + (float)(v152 * v164)) + (float)(v153 * v162);
          *float16x8_t v156 = llroundf(v155) << v67;
          float v158 = v41;
          if (v157 <= v41)
          {
            float v158 = v157;
            if (v157 < v174) {
              float v158 = v174;
            }
          }
          v156[1] = llroundf(v158) << v67;
          v72 += 2;
          v73 += 2;
          v75 += 2;
        }
        while (v10 > v72);
      }
      v65 += v21;
      v64 += v22;
      uint64_t v61 = (_WORD *)((char *)v61 + v26);
      v60 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      size_t v159 = 2 * v10;
      do
      {
        double result = memcpy(v30, v25, v159);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          double result = memset(v30, 255, 2 * v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_xf444_TRC_Mat_TRC_xf422_neon_fp16_GCD(unint64_t result, uint64_t a2, int16x4_t a3, int16x4_t a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = *(unsigned __int8 *)result;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (v14 != v13)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(result + 36);
    unint64_t v17 = v13 + *(void *)(result + 44);
    unint64_t v18 = v14 - v13;
    uint64_t v19 = *(void *)(result + 112);
    unint64_t v20 = *(void *)(result + 104) * a2;
    uint64_t v21 = *(void *)(result + 152);
    size_t v22 = *(uint64_t **)(result + 56);
    uint64_t v23 = *(uint64_t **)(result + 64);
    uint64_t v24 = *(void **)(result + 128);
    uint64_t v25 = *(uint64_t **)(result + 136);
    uint64_t v26 = v25[1];
    a3.i32[0] = *(_DWORD *)(v21 + 128);
    unsigned int v27 = *(unsigned __int16 *)(v21 + 140);
    unsigned int v28 = *(unsigned __int16 *)(v21 + 142);
    unint64_t v29 = v20 / v12 + *(void *)(result + 120);
    uint64_t v219 = v23[2];
    uint64_t v220 = v25[2];
    uint64_t v221 = v24[2];
    uint64_t v222 = v22[2];
    uint64_t v30 = (char *)(v222 + v219 * v17 + 2 * v16);
    uint64_t v31 = (char *)(v221 + v220 * v29 + 2 * v19);
    *(float *)&a9 = (float)a3.u32[0];
    LODWORD(a8) = *(_DWORD *)(v21 + 20);
    unsigned int v32 = *(unsigned __int16 *)(v21 + 144);
    unsigned int v33 = *(unsigned __int16 *)(v21 + 146);
    unsigned int v34 = *(unsigned __int16 *)(v21 + 148);
    float v35 = (float)v27;
    *(short float *)v10.i16 = (short float)v27;
    unsigned int v36 = *(unsigned __int16 *)(v21 + 150);
    _S30 = *(float *)(v21 + 44);
    float v38 = (float)v28;
    short float v39 = (short float)v28;
    unsigned int v43 = *(unsigned __int16 *)(v21 + 152);
    float v44 = (float)v32;
    float v45 = (float)v33;
    *(short float *)a3.i16 = (short float)v32;
    uint64_t v46 = v21 + 164;
    _S14 = (float)(8191.0 / *(float *)&a9) * *(float *)v21;
    _S28 = (float)(8191.0 / *(float *)&a9) * *(float *)(v21 + 8);
    _S17 = (float)(8191.0 / *(float *)&a9) * *(float *)(v21 + 16);
    _S31 = (float)(8191.0 / *(float *)&a9) * *(float *)&a8;
    _S10 = (float)(8191.0 / *(float *)&a9) * *(float *)(v21 + 28);
    float v52 = (float)v34;
    *(float *)&a7 = (float)v36;
    float v258 = (float)v36;
    float v53 = (float)v43;
    *(short float *)&a7 = (short float)v34;
    *(short float *)&a8 = (short float)v36;
    *(short float *)&a9 = (short float)v43;
    unsigned int v54 = *(unsigned __int8 *)(v21 + 132);
    if (v54 >= 0x11) {
      unsigned __int8 v55 = 0;
    }
    else {
      unsigned __int8 v55 = 16 - v54;
    }
    unsigned int v56 = *(unsigned __int8 *)(v21 + 124);
    unsigned __int8 v57 = 16 - v56;
    if (v56 >= 0x11) {
      unsigned __int8 v57 = 0;
    }
    uint64_t v58 = v24[1];
    uint64_t v223 = *v25;
    uint64_t v59 = *v24 + *v25 * v29;
    int16x8_t v60 = vdupq_lane_s16(*(int16x4_t *)v10.f32, 0);
    float16x8_t v255 = (float16x8_t)v60;
    *(short float *)v60.i16 = -v39;
    float16x8_t v227 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v60.i8, 0);
    v40.i32[1] = *(_DWORD *)(v21 + 60);
    v40.i32[0] = *(_DWORD *)(v21 + 48);
    *(float32x2_t *)v10.f32 = vmul_f32(v40, (float32x2_t)0x3F0000003F000000);
    float16x8_t v254 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    v41.i32[1] = *(_DWORD *)(v21 + 64);
    v41.i32[0] = *(_DWORD *)(v21 + 52);
    *(float32x2_t *)v9.f32 = vmul_f32(v41, (float32x2_t)0x3F0000003F000000);
    float32x4_t v61 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v9), 0);
    float16x8_t v252 = (float16x8_t)v61;
    v42.i32[1] = *(_DWORD *)(v21 + 68);
    v42.i32[0] = *(_DWORD *)(v21 + 56);
    *(float32x2_t *)v61.f32 = vmul_f32(v42, (float32x2_t)0x3F0000003F000000);
    float16x8_t v250 = (float16x8_t)vdupq_lane_s16(a3, 0);
    float16x8_t v251 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v61), 0);
    float16x8_t v248 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    *(short float *)a4.i16 = (short float)v33;
    float16x8_t v249 = (float16x8_t)vdupq_lane_s16(a4, 0);
    int16x8_t v62 = vdupq_lane_s16(*(int16x4_t *)&a8, 0);
    uint64_t v63 = v21 + 16548;
    uint64_t v64 = v58 + v26 * v29 + 2 * v19;
    if (!v58) {
      uint64_t v64 = 0;
    }
    uint64_t v65 = (uint16x8_t *)(v59 + 2 * v19);
    uint64_t v67 = *v22;
    uint64_t v66 = v22[1];
    float16x8_t v246 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a9, 0);
    float16x8_t v247 = (float16x8_t)v62;
    uint16x8_t v68 = (uint16x8_t)vdupq_n_s16(-v57);
    uint64_t v69 = *v23;
    uint64_t v70 = v23[1];
    uint64_t v71 = v66 + v70 * v17 + 2 * v16;
    if (!v66) {
      uint64_t v71 = 0;
    }
    uint64_t v72 = v67 + v69 * v17 + 2 * v16;
    unint64_t v73 = *(void *)(result + 20);
    double result = (v73 - 7);
    unsigned __int8 v74 = v57;
    _S6 = *(float *)(v21 + 80);
    _S7 = *(float *)(v21 + 84);
    _S22 = *(float *)(v21 + 88);
    _S25 = *(float *)(v21 + 100);
    __asm
    {
      FCVT            H9, S14
      FCVT            H8, S10
    }
    short float v226 = _H8;
    float v256 = _S17;
    __asm { FCVT            H8, S17 }
    short float v225 = _H8;
    __asm { FCVT            H8, S31 }
    short float v224 = _H8;
    float v257 = _S28;
    __asm { FCVT            H8, S28 }
    float v260 = *(float *)(v21 + 36);
    __asm { FCVT            H0, S0 }
    short float v240 = _H0;
    float v259 = *(float *)(v21 + 40);
    __asm { FCVT            H0, S1 }
    short float v239 = _H0;
    __asm { FCVT            H0, S30 }
    short float v238 = _H0;
    float v245 = *(float *)(v21 + 72);
    __asm { FCVT            H0, S4 }
    short float v237 = _H0;
    float v244 = *(float *)(v21 + 76);
    __asm { FCVT            H0, S5 }
    short float v236 = _H0;
    __asm { FCVT            H0, S6 }
    short float v235 = _H0;
    __asm { FCVT            H0, S7 }
    short float v234 = _H0;
    __asm { FCVT            H0, S22 }
    short float v233 = _H0;
    float v243 = *(float *)(v21 + 92);
    __asm { FCVT            H0, S26 }
    short float v232 = _H0;
    float v242 = *(float *)(v21 + 96);
    __asm { FCVT            H0, S27 }
    short float v231 = _H0;
    __asm { FCVT            H0, S25 }
    short float v230 = _H0;
    float v241 = *(float *)(v21 + 104);
    __asm { FCVT            H0, S24 }
    short float v229 = _H0;
    uint64_t v100 = v10.i64[0];
    float v253 = v9.f32[0];
    uint64_t v101 = v61.i64[0];
    v102.i64[0] = 0x9000900090009000;
    v102.i64[1] = 0x9000900090009000;
    uint16x8_t v228 = (uint16x8_t)vdupq_n_s16(v55);
    float v103 = _S6;
    float v104 = _S22;
    do
    {
      if ((int)v73 < 8)
      {
        unint64_t v153 = 0;
        float v109 = (uint16x8_t *)v64;
        int v108 = v65;
        float v107 = (const __int16 *)v71;
        unsigned int v106 = (uint16x8_t *)v72;
      }
      else
      {
        int v105 = 0;
        unsigned int v106 = (uint16x8_t *)v72;
        float v107 = (const __int16 *)v71;
        int v108 = v65;
        float v109 = (uint16x8_t *)v64;
        do
        {
          if (v107)
          {
            int16x8x2_t v261 = vld2q_s16(v107);
            v107 += 16;
            float16x8_t v110 = vcvtq_f16_u16(vshlq_u16((uint16x8_t)v261.val[0], v68));
            v261.val[0] = (int16x8_t)vcvtq_f16_u16(vshlq_u16((uint16x8_t)v261.val[1], v68));
            v261.val[1] = (int16x8_t)vaddq_f16(v227, v110);
            float16x8_t v111 = vaddq_f16(v227, (float16x8_t)v261.val[0]);
            float16x8_t v112 = vmulq_n_f16(v111, _H8);
            float16x8_t v113 = vmlaq_n_f16(vmulq_n_f16((float16x8_t)v261.val[1], v225), v111, v224);
            float16x8_t v114 = vmulq_n_f16((float16x8_t)v261.val[1], v226);
          }
          else
          {
            float16x8_t v114 = 0uLL;
            float16x8_t v113 = 0uLL;
            float16x8_t v112 = 0uLL;
          }
          uint16x8_t v115 = *v106++;
          float16x8_t v116 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v115, v68)), v255);
          float16x8_t v117 = vmlaq_n_f16(v113, v116, _H9);
          float16x8_t v118 = vmlaq_n_f16(v114, v116, _H9);
          uint16x8_t v119 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v112, v116, _H9), (float16x8_t)0), v102));
          uint32x4_t v120 = vmovl_high_u16(v119);
          uint32x4_t v121 = vmovl_u16(*(uint16x4_t *)v119.i8);
          v122.i16[0] = *(_WORD *)(v46 + 2 * v121.u32[0]);
          v122.i16[1] = *(_WORD *)(v46 + 2 * v121.u32[1]);
          v122.i16[2] = *(_WORD *)(v46 + 2 * v121.u32[2]);
          v122.i16[3] = *(_WORD *)(v46 + 2 * v121.u32[3]);
          v122.i16[4] = *(_WORD *)(v46 + 2 * v120.u32[0]);
          v122.i16[5] = *(_WORD *)(v46 + 2 * v120.u32[1]);
          v122.i16[6] = *(_WORD *)(v46 + 2 * v120.u32[2]);
          v122.i16[7] = *(_WORD *)(v46 + 2 * v120.u32[3]);
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, (float16x8_t)0), v102));
          uint32x4_t v124 = vmovl_high_u16(v123);
          uint32x4_t v125 = vmovl_u16(*(uint16x4_t *)v123.i8);
          v117.i16[0] = *(_WORD *)(v46 + 2 * v125.u32[0]);
          v117.i16[1] = *(_WORD *)(v46 + 2 * v125.u32[1]);
          v117.i16[2] = *(_WORD *)(v46 + 2 * v125.u32[2]);
          v117.i16[3] = *(_WORD *)(v46 + 2 * v125.u32[3]);
          v117.i16[4] = *(_WORD *)(v46 + 2 * v124.u32[0]);
          v117.i16[5] = *(_WORD *)(v46 + 2 * v124.u32[1]);
          v117.i16[6] = *(_WORD *)(v46 + 2 * v124.u32[2]);
          v117.i16[7] = *(_WORD *)(v46 + 2 * v124.u32[3]);
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v102));
          uint32x4_t v127 = vmovl_high_u16(v126);
          float16x8_t v128 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v126.i8);
          v128.i16[0] = *(_WORD *)(v46 + 2 * v128.u32[0]);
          v128.i16[1] = *(_WORD *)(v46 + 2 * v128.u32[1]);
          v128.i16[2] = *(_WORD *)(v46 + 2 * v128.u32[2]);
          v128.i16[3] = *(_WORD *)(v46 + 2 * v128.u32[3]);
          v128.i16[4] = *(_WORD *)(v46 + 2 * v127.u32[0]);
          v128.i16[5] = *(_WORD *)(v46 + 2 * v127.u32[1]);
          v128.i16[6] = *(_WORD *)(v46 + 2 * v127.u32[2]);
          v128.i16[7] = *(_WORD *)(v46 + 2 * v127.u32[3]);
          float16x8_t v129 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v122, v234), v117, v233), v128, v232);
          float16x8_t v130 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v128, v229), v117, v230), v122, v231);
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v122, v237), v117, v236), v128, v235), (float16x8_t)0), v102));
          uint32x4_t v132 = vmovl_high_u16(v131);
          uint32x4_t v133 = vmovl_u16(*(uint16x4_t *)v131.i8);
          v122.i16[0] = *(_WORD *)(v63 + 2 * v133.u32[0]);
          v122.i16[1] = *(_WORD *)(v63 + 2 * v133.u32[1]);
          v122.i16[2] = *(_WORD *)(v63 + 2 * v133.u32[2]);
          v122.i16[3] = *(_WORD *)(v63 + 2 * v133.u32[3]);
          v122.i16[4] = *(_WORD *)(v63 + 2 * v132.u32[0]);
          v122.i16[5] = *(_WORD *)(v63 + 2 * v132.u32[1]);
          v122.i16[6] = *(_WORD *)(v63 + 2 * v132.u32[2]);
          float16x8_t v134 = v122;
          v134.i16[7] = *(_WORD *)(v63 + 2 * v132.u32[3]);
          uint16x8_t v135 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, (float16x8_t)0), v102));
          uint32x4_t v136 = vmovl_high_u16(v135);
          uint32x4_t v137 = vmovl_u16(*(uint16x4_t *)v135.i8);
          v10.i16[0] = *(_WORD *)(v63 + 2 * v137.u32[0]);
          uint64_t v138 = v136.u32[3];
          v10.i16[1] = *(_WORD *)(v63 + 2 * v137.u32[1]);
          v10.i16[2] = *(_WORD *)(v63 + 2 * v137.u32[2]);
          v10.i16[3] = *(_WORD *)(v63 + 2 * v137.u32[3]);
          v10.i16[4] = *(_WORD *)(v63 + 2 * v136.u32[0]);
          v10.i16[5] = *(_WORD *)(v63 + 2 * v136.u32[1]);
          v10.i16[6] = *(_WORD *)(v63 + 2 * v136.u32[2]);
          uint16x8_t v139 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v130, (float16x8_t)0), v102));
          uint32x4_t v140 = vmovl_u16(*(uint16x4_t *)v139.i8);
          uint64_t v141 = v140.u32[1];
          uint64_t v142 = v140.u32[0];
          float16x8_t v143 = (float16x8_t)v10;
          v143.i16[7] = *(_WORD *)(v63 + 2 * v138);
          int16x8_t v144 = (int16x8_t)vmovl_high_u16(v139);
          uint64_t v145 = v140.u32[3];
          uint64_t v146 = v140.u32[2];
          *(void *)&long long v147 = v144.u32[2];
          *((void *)&v147 + 1) = v144.u32[3];
          long long v148 = v147;
          *(void *)&long long v147 = v144.u32[0];
          v144.i16[7] = (unint64_t)v144.u32[1] >> 48;
          v144.i16[0] = *(_WORD *)(v63 + 2 * v142);
          float v149 = (__int16 *)(v63 + 2 * v144.u32[1]);
          v144.i16[1] = *(_WORD *)(v63 + 2 * v141);
          v144.i16[2] = *(_WORD *)(v63 + 2 * v146);
          v144.i16[3] = *(_WORD *)(v63 + 2 * v145);
          v144.i16[4] = *(_WORD *)(v63 + 2 * v147);
          v144.i16[5] = *v149;
          v144.i16[6] = *(_WORD *)(v63 + 2 * v148);
          float v150 = (__int16 *)(v63 + 2 * *((void *)&v148 + 1));
          float16x8_t v151 = (float16x8_t)v144;
          v151.i16[7] = *v150;
          *v108++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v250, v134, v240), v143, v239), v151, v238), v250), v248)), v228);
          int16x8_t v152 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v122, (int16x8_t)v10), (float16x8_t)vuzp2q_s16((int16x8_t)v134, (int16x8_t)v143));
          *v109++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v249, v254, (float16x8_t)vzip1q_s16(v152, v152)), v252, (float16x8_t)vzip2q_s16(v152, v152)), v251, vaddq_f16((float16x8_t)vtrn1q_s16(v144, v144), (float16x8_t)vtrn2q_s16((int16x8_t)v151, (int16x8_t)v151))), v247), v246)), v228);
          v105 += 8;
        }
        while (v105 < (int)result);
        unint64_t v153 = v73 & 0xFFFFFFF8;
      }
      while (v73 > v153)
      {
        if (v107)
        {
          float v154 = (float)(*(unsigned __int16 *)v107 >> v74) - v38;
          float v155 = (float)(*((unsigned __int16 *)v107 + 1) >> v74) - v38;
          v107 += 2;
          float v156 = v257 * v155;
          float v157 = (float)(_S31 * v155) + (float)(v154 * v256);
          float v158 = _S10 * v154;
        }
        else
        {
          float v158 = 0.0;
          float v157 = 0.0;
          float v156 = 0.0;
        }
        float v159 = _S14 * (float)((float)(v106->u16[0] >> v74) - v35);
        float v160 = v156 + v159;
        float v161 = 8191.0;
        if (v160 <= 8191.0)
        {
          float v161 = v160;
          if (v160 < 0.0) {
            float v161 = 0.0;
          }
        }
        float v162 = v157 + v159;
        float v163 = 8191.0;
        if (v162 <= 8191.0)
        {
          float v163 = v162;
          if (v162 < 0.0) {
            float v163 = 0.0;
          }
        }
        float v164 = v158 + v159;
        float v165 = 8191.0;
        if (v164 <= 8191.0)
        {
          float v165 = v164;
          if (v164 < 0.0) {
            float v165 = 0.0;
          }
        }
        if (v107)
        {
          float v166 = (float)(*(unsigned __int16 *)v107 >> v74) - v38;
          float v167 = (float)(*((unsigned __int16 *)v107 + 1) >> v74) - v38;
          v107 += 2;
          float v168 = v257 * v167;
          float v169 = (float)(_S31 * v167) + (float)(v166 * v256);
          float v170 = _S10 * v166;
        }
        else
        {
          float v170 = 0.0;
          float v169 = 0.0;
          float v168 = 0.0;
        }
        v9.f32[0] = v35;
        float v171 = _S14 * (float)((float)(v106->u16[1] >> v74) - v35);
        float v172 = 8191.0;
        if ((float)(v168 + v171) <= 8191.0)
        {
          float v172 = v168 + v171;
          if ((float)(v168 + v171) < 0.0) {
            float v172 = 0.0;
          }
        }
        float v173 = _S14;
        float v174 = v169 + v171;
        BOOL v175 = (float)(v169 + v171) <= 8191.0;
        float v176 = 8191.0;
        if (v175)
        {
          float v176 = v174;
          if (v174 < 0.0) {
            float v176 = 0.0;
          }
        }
        float v177 = _S30;
        float v178 = v170 + v171;
        float v179 = 8191.0;
        if (v178 <= 8191.0)
        {
          float v179 = v178;
          if (v178 < 0.0) {
            float v179 = 0.0;
          }
        }
        _H4 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        _H5 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        _H16 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
        __asm { FCVT            S16, H16 }
        _H6 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0)));
        _H1 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0)));
        __asm
        {
          FCVT            S6, H6
          FCVT            S1, H1
        }
        _H0 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v179, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        float v192 = (float)((float)(v244 * _S5) + (float)(_S4 * v245)) + (float)(_S16 * v103);
        float v193 = (float)((float)(v104 * _S5) + (float)(_S4 * _S7)) + (float)(_S16 * v243);
        float v194 = (float)((float)(_S25 * _S5) + (float)(_S4 * v242)) + (float)(_S16 * v241);
        float v195 = (float)((float)(v244 * _S1) + (float)(_S6 * v245)) + (float)(_S0 * v103);
        float v196 = (float)((float)(v104 * _S1) + (float)(_S6 * _S7)) + (float)(_S0 * v243);
        float v197 = (float)((float)(_S25 * _S1) + (float)(_S6 * v242)) + (float)(_S0 * v241);
        LOWORD(_S0) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v192, 0.0), 8191.0)));
        __asm { FCVT            S5, H0 }
        LOWORD(_S0) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v193, 0.0), 8191.0)));
        __asm { FCVT            S16, H0 }
        LOWORD(_S0) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v194, 0.0), 8191.0)));
        __asm { FCVT            S18, H0 }
        _H0 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v195, 0.0), 8191.0)));
        _H1 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v196, 0.0), 8191.0)));
        _H17 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v197, 0.0), 8191.0)));
        _S30 = v177;
        float v204 = (float)((float)((float)(v259 * _S16) + (float)(v260 * _S5)) + (float)(v177 * _S18)) + v44;
        float v205 = v52;
        if (v204 <= v52)
        {
          float v205 = (float)((float)((float)(v259 * _S16) + (float)(v260 * _S5)) + (float)(v177 * _S18)) + v44;
          if (v204 < v44) {
            float v205 = v44;
          }
        }
        __asm
        {
          FCVT            S4, H0
          FCVT            S1, H1
          FCVT            S0, H17
        }
        float v209 = (float)((float)((float)(v259 * _S1) + (float)(v260 * _S4)) + (float)(v177 * _S0)) + v44;
        v108->i16[0] = llroundf(v205) << v55;
        float v210 = v52;
        _S14 = v173;
        if (v209 <= v52)
        {
          float v210 = v209;
          if (v209 < v44) {
            float v210 = v44;
          }
        }
        v108->i16[1] = llroundf(v210) << v55;
        float v211 = _S5 + _S4;
        float v212 = _S16 + _S1;
        float v213 = _S18 + _S0;
        float v214 = (float)((float)(v45 + (float)(v211 * *(float *)&v100)) + (float)(v212 * v253))
             + (float)(v213 * *(float *)&v101);
        float v215 = v53;
        if (v214 <= v53)
        {
          float v215 = (float)((float)(v45 + (float)(v211 * *(float *)&v100)) + (float)(v212 * v253))
               + (float)(v213 * *(float *)&v101);
          if (v214 < v258) {
            float v215 = v258;
          }
        }
        float v216 = (float)((float)(v45 + (float)(v211 * *((float *)&v100 + 1))) + (float)(v212 * v9.f32[1]))
             + (float)(v213 * *((float *)&v101 + 1));
        v109->i16[0] = llroundf(v215) << v55;
        float v217 = v53;
        float v35 = v9.f32[0];
        if (v216 <= v53)
        {
          float v217 = v216;
          if (v216 < v258) {
            float v217 = v258;
          }
        }
        v153 += 2;
        v109->i16[1] = llroundf(v217) << v55;
        unsigned int v106 = (uint16x8_t *)((char *)v106 + 4);
        int v108 = (uint16x8_t *)((char *)v108 + 4);
        float v109 = (uint16x8_t *)((char *)v109 + 4);
      }
      v72 += v69;
      v71 += v70;
      uint64_t v65 = (uint16x8_t *)((char *)v65 + v223);
      v64 += v26;
      ++v15;
    }
    while (v15 != v18);
    if (v222 && v221)
    {
      size_t v218 = 2 * v73;
      do
      {
        double result = (unint64_t)memcpy(v31, v30, v218);
        v30 += v219;
        v31 += v220;
        --v18;
      }
      while (v18);
    }
    else if (v221)
    {
      do
      {
        if (v73) {
          double result = (unint64_t)memset(v31, 255, 2 * v73);
        }
        v31 += v220;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Mat_TRC_xf422_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (void *)result[16];
    unint64_t v16 = result[13] * a2 / v6 + result[15];
    uint64_t v17 = result[19];
    uint64_t v18 = (void *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    uint64_t v25 = (char *)(v24 + v23 * v12 + 2 * v11);
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    uint64_t v30 = (char *)(v29 + v28 * v16 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    float v32 = (float)LODWORD(a4);
    float v33 = (float)LODWORD(a5);
    float v34 = v31 * *(float *)v17;
    float v151 = v31 * *(float *)(v17 + 16);
    float v152 = v31 * *(float *)(v17 + 8);
    float v35 = v31 * *(float *)(v17 + 20);
    *(float *)&unsigned int v36 = v31 * *(float *)(v17 + 28);
    float v149 = *(float *)&v36;
    float v150 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    *(float *)&unsigned int v40 = (float)v36;
    float v153 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v17 + 152);
    float v41 = (float)v40;
    float v42 = *(float *)(v17 + 36);
    float v43 = *(float *)(v17 + 40);
    float v44 = *(float *)(v17 + 44);
    float v147 = *(float *)(v17 + 52) * 0.5;
    float v148 = *(float *)(v17 + 48) * 0.5;
    float v145 = *(float *)(v17 + 60) * 0.5;
    float v146 = *(float *)(v17 + 56) * 0.5;
    float v45 = *(float *)(v17 + 72);
    float v143 = *(float *)(v17 + 68) * 0.5;
    float v144 = *(float *)(v17 + 64) * 0.5;
    float v47 = *(float *)(v17 + 76);
    float v46 = *(float *)(v17 + 80);
    float v48 = *(float *)(v17 + 84);
    float v49 = *(float *)(v17 + 88);
    float v50 = *(float *)(v17 + 92);
    float v51 = *(float *)(v17 + 96);
    float v52 = *(float *)(v17 + 100);
    float v53 = *(float *)(v17 + 104);
    uint64_t v54 = v17 + 164;
    uint64_t v55 = v17 + 16548;
    unsigned int v56 = *(unsigned __int8 *)(v17 + 132);
    _CF = v56 >= 0x11;
    char v58 = 16 - v56;
    if (_CF) {
      char v59 = 0;
    }
    else {
      char v59 = v58;
    }
    unsigned int v60 = *(unsigned __int8 *)(v17 + 124);
    char v61 = 16 - v60;
    if (v60 >= 0x11) {
      char v61 = 0;
    }
    uint64_t v64 = v15;
    uint64_t v63 = *v15;
    uint64_t v62 = v64[1];
    _ZF = v62 == 0;
    double result = (void *)(v62 + v27 * v16 + 2 * v14);
    if (_ZF) {
      double result = 0;
    }
    uint64_t v66 = v63 + v26 * v16 + 2 * v14;
    uint64_t v69 = v18;
    uint64_t v68 = *v18;
    uint64_t v67 = v69[1];
    if (v67) {
      uint64_t v70 = v67 + v22 * v12 + 2 * v11;
    }
    else {
      uint64_t v70 = 0;
    }
    uint64_t v71 = v68 + v21 * v12 + 2 * v11;
    char v72 = v61;
    char v73 = v59;
    do
    {
      if (v10)
      {
        unint64_t v74 = 0;
        float v75 = (unsigned __int16 *)v71;
        float v76 = (unsigned __int16 *)v70;
        float v77 = (_WORD *)v66;
        do
        {
          if (v76)
          {
            float v78 = (float)(*v76 >> v72) - v33;
            float v79 = (float)(v76[1] >> v72) - v33;
            v76 += 2;
            float v80 = v152 * v79;
            float v81 = (float)(v150 * v79) + (float)(v78 * v151);
            float v82 = v149 * v78;
          }
          else
          {
            float v82 = 0.0;
            float v81 = 0.0;
            float v80 = 0.0;
          }
          float v83 = v34 * (float)((float)(*v75 >> v72) - v32);
          float v84 = v80 + v83;
          BOOL v85 = (float)(v80 + v83) <= 8191.0;
          float v86 = 8191.0;
          if (v85)
          {
            float v86 = v84;
            if (v84 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v81 + v83;
          float v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = 8191.0;
          if ((float)(v82 + v83) <= 8191.0)
          {
            float v89 = v82 + v83;
            if ((float)(v82 + v83) < 0.0) {
              float v89 = 0.0;
            }
          }
          if (v76)
          {
            float v90 = (float)(*v76 >> v72) - v33;
            float v91 = (float)(v76[1] >> v72) - v33;
            v76 += 2;
            float v92 = v152 * v91;
            float v93 = (float)(v150 * v91) + (float)(v90 * v151);
            float v94 = v149 * v90;
          }
          else
          {
            float v94 = 0.0;
            float v93 = 0.0;
            float v92 = 0.0;
          }
          float v95 = v34 * (float)((float)(v75[1] >> v72) - v32);
          float v96 = 8191.0;
          if ((float)(v92 + v95) <= 8191.0)
          {
            float v96 = v92 + v95;
            if ((float)(v92 + v95) < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v93 + v95;
          BOOL v85 = (float)(v93 + v95) <= 8191.0;
          float v98 = 8191.0;
          if (v85)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          float v99 = v94 + v95;
          float v100 = 8191.0;
          if (v99 <= 8191.0)
          {
            float v100 = v99;
            if (v99 < 0.0) {
              float v100 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S4, H4
          }
          _H26 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          float v115 = (float)((float)(v47 * _S5) + (float)(_S0 * v45)) + (float)(_S24 * v46);
          float v116 = (float)((float)(v49 * _S5) + (float)(_S0 * v48)) + (float)(_S24 * v50);
          float v117 = (float)((float)(v52 * _S5) + (float)(_S0 * v51)) + (float)(_S24 * v53);
          float v118 = (float)((float)(v47 * _S4) + (float)(_S6 * v45)) + (float)(_S26 * v46);
          float v119 = (float)((float)(v49 * _S4) + (float)(_S6 * v48)) + (float)(_S26 * v50);
          float v120 = (float)((float)(v52 * _S4) + (float)(_S6 * v51)) + (float)(_S26 * v53);
          LOWORD(_S0) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          __asm { FCVT            S24, H4 }
          LOWORD(_S4) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          _H4 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          float v127 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S0)) + (float)(v44 * _S26)) + v37;
          float v128 = v39;
          if (v127 <= v39)
          {
            float v128 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S0)) + (float)(v44 * _S26)) + v37;
            if (v127 < v37) {
              float v128 = v37;
            }
          }
          __asm
          {
            FCVT            S25, H4
            FCVT            S5, H5
            FCVT            S4, H28
          }
          float v132 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S25)) + (float)(v44 * _S4)) + v37;
          *float v77 = llroundf(v128) << v73;
          float v133 = v39;
          if (v132 <= v39)
          {
            float v133 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S25)) + (float)(v44 * _S4)) + v37;
            if (v132 < v37) {
              float v133 = v37;
            }
          }
          v77[1] = llroundf(v133) << v73;
          float v134 = _S0 + _S25;
          float v135 = _S24 + _S5;
          float v136 = _S26 + _S4;
          float v137 = (float)((float)(v38 + (float)(v134 * v148)) + (float)(v135 * v147)) + (float)(v136 * v146);
          float v138 = v41;
          if (v137 <= v41)
          {
            float v138 = (float)((float)(v38 + (float)(v134 * v148)) + (float)(v135 * v147)) + (float)(v136 * v146);
            if (v137 < v153) {
              float v138 = v153;
            }
          }
          uint16x8_t v139 = (_WORD *)result + v74;
          float v140 = (float)((float)(v38 + (float)(v134 * v145)) + (float)(v135 * v144)) + (float)(v136 * v143);
          *uint16x8_t v139 = llroundf(v138) << v73;
          float v141 = v41;
          if (v140 <= v41)
          {
            float v141 = v140;
            if (v140 < v153) {
              float v141 = v153;
            }
          }
          v139[1] = llroundf(v141) << v73;
          v74 += 2;
          v75 += 2;
          v77 += 2;
        }
        while (v10 > v74);
      }
      v71 += v21;
      v70 += v22;
      v66 += v26;
      double result = (void *)((char *)result + v27);
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      size_t v142 = 2 * v10;
      do
      {
        double result = memcpy(v30, v25, v142);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          double result = memset(v30, 255, 2 * v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_xf422_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf444_rgb_xf422_neon_fp16_GCD(void *result, uint64_t a2)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 == v8) {
    return result;
  }
  uint64_t v10 = 0;
  unint64_t v11 = *(void *)((char *)result + 20);
  uint64_t v12 = *(void *)((char *)result + 36);
  unint64_t v13 = v8 + *(void *)((char *)result + 44);
  unint64_t v14 = v9 - v8;
  uint64_t v15 = result[14];
  uint64_t v16 = result[19];
  uint64_t v17 = (uint64_t *)result[16];
  unint64_t v18 = result[13] * a2 / v7 + result[15];
  uint64_t v20 = (uint64_t *)result[7];
  uint64_t v19 = (uint64_t *)result[8];
  uint64_t v21 = (uint64_t *)result[17];
  uint64_t v22 = *v19;
  uint64_t v23 = v19[1];
  uint64_t v24 = v19[2];
  uint64_t v25 = v20[2];
  uint64_t v26 = (char *)(v25 + v24 * v13 + 2 * v12);
  uint64_t v27 = *v21;
  uint64_t v28 = v21[1];
  uint64_t v29 = v21[2];
  uint64_t v30 = v17[2];
  uint64_t v31 = (char *)(v30 + v29 * v18 + 2 * v15);
  unsigned int v32 = *(unsigned __int16 *)(v16 + 140);
  unsigned int v33 = *(unsigned __int16 *)(v16 + 142);
  unsigned int v34 = *(unsigned __int16 *)(v16 + 144);
  unsigned int v35 = *(unsigned __int16 *)(v16 + 146);
  unsigned int v36 = *(unsigned __int16 *)(v16 + 148);
  unsigned int v37 = *(unsigned __int16 *)(v16 + 150);
  unsigned int v38 = *(unsigned __int16 *)(v16 + 152);
  _S0 = *(float *)(v16 + 36);
  _S1 = *(float *)(v16 + 40);
  _S2 = *(float *)(v16 + 44);
  v42.i32[0] = *(_DWORD *)(v16 + 48);
  v3.i32[0] = *(_DWORD *)(v16 + 52);
  v43.i32[0] = *(_DWORD *)(v16 + 56);
  float v44 = (float)v32;
  *(short float *)v2.i16 = (short float)v32;
  float v45 = (float)v33;
  float v46 = (float)*(unsigned int *)(v16 + 136) / (float)*(unsigned int *)(v16 + 128);
  _S5 = v46 * *(float *)v16;
  _Q25.f32[0] = v46 * *(float *)(v16 + 8);
  _S7 = v46 * *(float *)(v16 + 16);
  _S26 = v46 * *(float *)(v16 + 20);
  _S16 = v46 * *(float *)(v16 + 28);
  float v51 = (float)v34;
  float v52 = (float)v35;
  __asm { FCVT            H8, S5 }
  _Q6 = vdupq_lane_s16(v2, 0);
  float16x8_t v148 = (float16x8_t)_Q6;
  *(short float *)_Q6.i16 = -(short float)v33;
  float16x8_t v137 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q6.i8, 0);
  float v149 = _S16;
  __asm { FCVT            H6, S16 }
  short float v136 = *(short float *)_Q6.i16;
  float v59 = _S7;
  __asm { FCVT            H6, S7 }
  short float v135 = *(short float *)_Q6.i16;
  float v60 = _S26;
  __asm { FCVT            H6, S26 }
  short float v134 = *(short float *)_Q6.i16;
  float v61 = _Q25.f32[0];
  __asm { FCVT            H6, S25 }
  short float v133 = *(short float *)_Q6.i16;
  v42.i32[1] = *(_DWORD *)(v16 + 60);
  __asm { FCVT            H6, S0 }
  short float v147 = *(short float *)_Q6.i16;
  *(float32x2_t *)v4.f32 = vmul_f32(v42, (float32x2_t)0x3F0000003F000000);
  v3.i32[1] = *(_DWORD *)(v16 + 64);
  *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v3.f32, (float32x2_t)0x3F0000003F000000);
  float16x8_t v145 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
  float16x8_t v146 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
  v43.i32[1] = *(_DWORD *)(v16 + 68);
  *(float32x2_t *)_Q25.f32 = vmul_f32(v43, (float32x2_t)0x3F0000003F000000);
  int32x4_t v62 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(_Q25), 0);
  float16x8_t v144 = (float16x8_t)v62;
  *(short float *)v62.i16 = (short float)v34;
  float16x8_t v63 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v62.i8, 0);
  *(short float *)v62.i16 = (short float)v35;
  int16x8_t v64 = vdupq_lane_s16(*(int16x4_t *)v62.i8, 0);
  float16x8_t v143 = (float16x8_t)v64;
  *(short float *)v64.i16 = (short float)v36;
  int16x8_t v65 = vdupq_lane_s16(*(int16x4_t *)v64.i8, 0);
  float16x8_t v142 = (float16x8_t)v65;
  *(short float *)v65.i16 = (short float)v37;
  _Q6 = vdupq_lane_s16(*(int16x4_t *)v65.i8, 0);
  float16x8_t v141 = (float16x8_t)_Q6;
  __asm { FCVT            H6, S1 }
  short float v140 = *(short float *)_Q6.i16;
  unsigned int v67 = *(unsigned __int8 *)(v16 + 132);
  unsigned __int8 v68 = 16 - v67;
  if (v67 >= 0x11) {
    unsigned __int8 v68 = 0;
  }
  unsigned int v69 = *(unsigned __int8 *)(v16 + 124);
  unsigned __int8 v70 = 16 - v69;
  if (v69 >= 0x11) {
    unsigned __int8 v70 = 0;
  }
  uint64_t v72 = *v17;
  uint64_t v71 = v17[1];
  uint64_t v73 = v71 + v28 * v18 + 2 * v15;
  if (!v71) {
    uint64_t v73 = 0;
  }
  uint64_t v74 = v72 + v27 * v18 + 2 * v15;
  uint64_t v76 = *v20;
  uint64_t v75 = v20[1];
  uint64_t v77 = v75 + v23 * v13 + 2 * v12;
  if (!v75) {
    uint64_t v77 = 0;
  }
  double result = (void *)(v76 + v22 * v13 + 2 * v12);
  unsigned __int8 v78 = v70;
  *(short float *)_Q6.i16 = (short float)v38;
  float16x8_t v139 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q6.i8, 0);
  float v79 = (float)v36;
  __asm { FCVT            H6, S2 }
  short float v138 = _H6;
  uint64_t v81 = v4.i64[0];
  float v82 = (float)v37;
  float v83 = (float)v38;
  uint16x8_t v84 = (uint16x8_t)vdupq_n_s16(-v70);
  uint64_t v85 = _Q25.i64[0];
  uint16x8_t v86 = (uint16x8_t)vdupq_n_s16(v68);
  do
  {
    if ((int)v11 < 8)
    {
      unint64_t v102 = 0;
      float v91 = (uint16x8_t *)v73;
      float v90 = (uint16x8_t *)v74;
      float v89 = (const __int16 *)v77;
      float v88 = (uint16x8_t *)result;
    }
    else
    {
      int v87 = 0;
      float v88 = (uint16x8_t *)result;
      float v89 = (const __int16 *)v77;
      float v90 = (uint16x8_t *)v74;
      float v91 = (uint16x8_t *)v73;
      do
      {
        if (v89)
        {
          int16x8x2_t v150 = vld2q_s16(v89);
          v89 += 16;
          float16x8_t v92 = vaddq_f16(v137, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v150.val[0], v84)));
          v150.val[0] = (int16x8_t)vaddq_f16(v137, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v150.val[1], v84)));
          float16x8_t v93 = vmulq_n_f16((float16x8_t)v150.val[0], v133);
          float16x8_t v94 = vmlaq_n_f16(vmulq_n_f16(v92, v135), (float16x8_t)v150.val[0], v134);
          float16x8_t v95 = vmulq_n_f16(v92, v136);
        }
        else
        {
          float16x8_t v95 = 0uLL;
          float16x8_t v94 = 0uLL;
          float16x8_t v93 = 0uLL;
        }
        uint16x8_t v96 = *v88++;
        float16x8_t v97 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v96, v84)), v148);
        float16x8_t v98 = vmlaq_n_f16(v93, v97, _H8);
        float16x8_t v99 = vmlaq_n_f16(v94, v97, _H8);
        float16x8_t v100 = vmlaq_n_f16(v95, v97, _H8);
        *v90++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v63, v98, v147), v99, v140), v100, v138), v63), v142)), v86);
        int16x8_t v101 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v98, (int16x8_t)v99), (float16x8_t)vuzp2q_s16((int16x8_t)v98, (int16x8_t)v99));
        *v91++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v143, v146, (float16x8_t)vzip1q_s16(v101, v101)), v145, (float16x8_t)vzip2q_s16(v101, v101)), v144, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v100, (int16x8_t)v100), (float16x8_t)vtrn2q_s16((int16x8_t)v100, (int16x8_t)v100))), v141), v139)), v86);
        v87 += 8;
      }
      while (v87 < (int)v11 - 7);
      unint64_t v102 = v11 & 0xFFFFFFF8;
    }
    while (v11 > v102)
    {
      float v103 = 0.0;
      if (!v89)
      {
        float v108 = 0.0;
        float v107 = 0.0;
        float v106 = 0.0;
LABEL_23:
        float v112 = 0.0;
        float v111 = 0.0;
        goto LABEL_24;
      }
      float v104 = (float)(*(unsigned __int16 *)v89 >> v78) - v45;
      float v105 = (float)(*((unsigned __int16 *)v89 + 1) >> v78) - v45;
      v89 += 2;
      float v106 = v61 * v105;
      float v107 = (float)(v60 * v105) + (float)(v104 * v59);
      float v108 = v149 * v104;
      if (!v89) {
        goto LABEL_23;
      }
      float v109 = (float)(*(unsigned __int16 *)v89 >> v78) - v45;
      float v110 = (float)(*((unsigned __int16 *)v89 + 1) >> v78) - v45;
      v89 += 2;
      float v111 = v61 * v110;
      float v112 = (float)(v60 * v110) + (float)(v109 * v59);
      float v103 = v149 * v109;
LABEL_24:
      float v113 = _S5 * (float)((float)(v88->u16[0] >> v78) - v44);
      float v114 = v106 + v113;
      float v115 = v107 + v113;
      float v116 = v108 + v113;
      float v117 = (float)((float)((float)(_S1 * v115) + (float)(_S0 * v114)) + (float)(_S2 * v116)) + v51;
      float v118 = v79;
      if (v117 <= v79)
      {
        float v118 = (float)((float)((float)(_S1 * v115) + (float)(_S0 * v114)) + (float)(_S2 * v116)) + v51;
        if (v117 < v51) {
          float v118 = v51;
        }
      }
      float v119 = _S5 * (float)((float)(v88->u16[1] >> v78) - v44);
      float v120 = v111 + v119;
      float v121 = v112 + v119;
      float v122 = v103 + v119;
      float v123 = (float)((float)((float)(_S1 * v121) + (float)(_S0 * v120)) + (float)(_S2 * v122)) + v51;
      v90->i16[0] = llroundf(v118) << v68;
      float v124 = v79;
      if (v123 <= v79)
      {
        float v124 = (float)((float)((float)(_S1 * v121) + (float)(_S0 * v120)) + (float)(_S2 * v122)) + v51;
        if (v123 < v51) {
          float v124 = v51;
        }
      }
      v90->i16[1] = llroundf(v124) << v68;
      float v125 = v114 + v120;
      float v126 = v115 + v121;
      float v127 = v116 + v122;
      float v128 = (float)((float)(v52 + (float)(v125 * *(float *)&v81)) + (float)(v126 * v3.f32[0]))
           + (float)(v127 * *(float *)&v85);
      float v129 = v83;
      if (v128 <= v83)
      {
        float v129 = (float)((float)(v52 + (float)(v125 * *(float *)&v81)) + (float)(v126 * v3.f32[0]))
             + (float)(v127 * *(float *)&v85);
        if (v128 < v82) {
          float v129 = v82;
        }
      }
      float v130 = (float)((float)(v52 + (float)(v125 * *((float *)&v81 + 1))) + (float)(v126 * v3.f32[1]))
           + (float)(v127 * *((float *)&v85 + 1));
      v91->i16[0] = llroundf(v129) << v68;
      float v131 = v83;
      if (v130 <= v83)
      {
        float v131 = v130;
        if (v130 < v82) {
          float v131 = v82;
        }
      }
      v102 += 2;
      v91->i16[1] = llroundf(v131) << v68;
      float v88 = (uint16x8_t *)((char *)v88 + 4);
      float v90 = (uint16x8_t *)((char *)v90 + 4);
      float v91 = (uint16x8_t *)((char *)v91 + 4);
    }
    double result = (void *)((char *)result + v22);
    v77 += v23;
    v74 += v27;
    v73 += v28;
    ++v10;
  }
  while (v10 != v14);
  if (v25 && v30)
  {
    size_t v132 = 2 * v11;
    do
    {
      double result = memcpy(v31, v26, v132);
      v26 += v24;
      v31 += v29;
      --v14;
    }
    while (v14);
  }
  else if (v30)
  {
    do
    {
      if (v11) {
        double result = memset(v31, 255, 2 * v11);
      }
      v31 += v29;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_xf422_GCD);
  return 0;
}

void *vt_Copy_xf444_rgb_xf422_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v9 = *(void *)((char *)result + 28);
  unint64_t v10 = *(unsigned __int8 *)result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (v12 == v11) {
    return result;
  }
  uint64_t v13 = 0;
  unint64_t v14 = *(void *)((char *)result + 20);
  uint64_t v15 = *(void *)((char *)result + 36);
  unint64_t v16 = v11 + *(void *)((char *)result + 44);
  unint64_t v17 = v12 - v11;
  uint64_t v18 = result[14];
  uint64_t v19 = (uint64_t *)result[16];
  unint64_t v20 = result[13] * a2 / v10 + result[15];
  uint64_t v21 = result[19];
  uint64_t v23 = (uint64_t *)result[7];
  size_t v22 = (uint64_t *)result[8];
  uint64_t v24 = (uint64_t *)result[17];
  uint64_t v25 = *v22;
  uint64_t v26 = v22[1];
  uint64_t v27 = v22[2];
  uint64_t v28 = v23[2];
  uint64_t v29 = (char *)(v28 + v27 * v16 + 2 * v15);
  uint64_t v30 = *v24;
  uint64_t v31 = v24[1];
  uint64_t v32 = v24[2];
  uint64_t v33 = v19[2];
  uint64_t v34 = (char *)(v33 + v32 * v20 + 2 * v18);
  *(float *)&unsigned int v35 = (float)*(unsigned int *)(v21 + 136);
  LOWORD(a5) = *(_WORD *)(v21 + 140);
  float v36 = *(float *)&v35 / (float)*(unsigned int *)(v21 + 128);
  float v37 = (float)LODWORD(a5);
  LOWORD(v35) = *(_WORD *)(v21 + 142);
  float v38 = (float)v35;
  float v39 = v36 * *(float *)v21;
  float v40 = v36 * *(float *)(v21 + 8);
  float v41 = v36 * *(float *)(v21 + 16);
  float v42 = v36 * *(float *)(v21 + 20);
  float v43 = *(float *)(v21 + 28);
  float v44 = v36 * v43;
  LOWORD(v43) = *(_WORD *)(v21 + 144);
  float v45 = (float)LODWORD(v43);
  LOWORD(v5) = *(_WORD *)(v21 + 146);
  float v46 = (float)v5;
  LOWORD(v6) = *(_WORD *)(v21 + 148);
  float v47 = (float)v6;
  LOWORD(v7) = *(_WORD *)(v21 + 150);
  float v48 = (float)v7;
  LOWORD(v8) = *(_WORD *)(v21 + 152);
  float v49 = (float)v8;
  float v50 = *(float *)(v21 + 36);
  float v51 = *(float *)(v21 + 40);
  float v52 = *(float *)(v21 + 44);
  float v53 = *(float *)(v21 + 48) * 0.5;
  float v54 = *(float *)(v21 + 52) * 0.5;
  float v55 = *(float *)(v21 + 56) * 0.5;
  float v56 = *(float *)(v21 + 60) * 0.5;
  float v57 = *(float *)(v21 + 64) * 0.5;
  float v58 = *(float *)(v21 + 68) * 0.5;
  unsigned int v59 = *(unsigned __int8 *)(v21 + 132);
  BOOL v60 = v59 >= 0x11;
  char v61 = 16 - v59;
  if (v60) {
    char v62 = 0;
  }
  else {
    char v62 = v61;
  }
  unsigned int v63 = *(unsigned __int8 *)(v21 + 124);
  char v64 = 16 - v63;
  if (v63 >= 0x11) {
    char v64 = 0;
  }
  uint64_t v66 = *v19;
  uint64_t v65 = v19[1];
  uint64_t v67 = v65 + v31 * v20 + 2 * v18;
  if (!v65) {
    uint64_t v67 = 0;
  }
  uint64_t v68 = v66 + v30 * v20 + 2 * v18;
  uint64_t v70 = *v23;
  uint64_t v69 = v23[1];
  uint64_t v71 = v69 + v26 * v16 + 2 * v15;
  if (!v69) {
    uint64_t v71 = 0;
  }
  double result = (void *)(v70 + v25 * v16 + 2 * v15);
  char v72 = v64;
  char v73 = v62;
  do
  {
    if (v14)
    {
      unint64_t v74 = 0;
      uint64_t v75 = (unsigned __int16 *)result;
      uint64_t v76 = (unsigned __int16 *)v71;
      uint64_t v77 = (_WORD *)v68;
      do
      {
        float v78 = 0.0;
        if (v76)
        {
          float v79 = (float)(*v76 >> v72) - v38;
          float v80 = (float)(v76[1] >> v72) - v38;
          v76 += 2;
          float v81 = v40 * v80;
          float v82 = (float)(v42 * v80) + (float)(v79 * v41);
          float v83 = v44 * v79;
          if (v76)
          {
            float v84 = (float)(*v76 >> v72) - v38;
            float v85 = (float)(v76[1] >> v72) - v38;
            v76 += 2;
            float v86 = v40 * v85;
            float v87 = (float)(v42 * v85) + (float)(v84 * v41);
            float v78 = v44 * v84;
            goto LABEL_19;
          }
        }
        else
        {
          float v83 = 0.0;
          float v82 = 0.0;
          float v81 = 0.0;
        }
        float v87 = 0.0;
        float v86 = 0.0;
LABEL_19:
        float v88 = v39 * (float)((float)(*v75 >> v72) - v37);
        float v89 = v81 + v88;
        float v90 = v82 + v88;
        float v91 = v83 + v88;
        float v92 = (float)((float)((float)(v51 * v90) + (float)(v50 * v89)) + (float)(v52 * v91)) + v45;
        float v93 = v47;
        if (v92 <= v47)
        {
          float v93 = (float)((float)((float)(v51 * v90) + (float)(v50 * v89)) + (float)(v52 * v91)) + v45;
          if (v92 < v45) {
            float v93 = v45;
          }
        }
        float v94 = v39 * (float)((float)(v75[1] >> v72) - v37);
        float v95 = v86 + v94;
        float v96 = v87 + v94;
        float v97 = v78 + v94;
        float v98 = (float)((float)((float)(v51 * v96) + (float)(v50 * v95)) + (float)(v52 * v97)) + v45;
        *uint64_t v77 = llroundf(v93) << v73;
        float v99 = v47;
        if (v98 <= v47)
        {
          float v99 = (float)((float)((float)(v51 * v96) + (float)(v50 * v95)) + (float)(v52 * v97)) + v45;
          if (v98 < v45) {
            float v99 = v45;
          }
        }
        v77[1] = llroundf(v99) << v73;
        float v100 = v89 + v95;
        float v101 = v90 + v96;
        float v102 = v91 + v97;
        float v103 = (float)((float)(v46 + (float)(v100 * v53)) + (float)(v101 * v54)) + (float)(v102 * v55);
        float v104 = v49;
        if (v103 <= v49)
        {
          float v104 = (float)((float)(v46 + (float)(v100 * v53)) + (float)(v101 * v54)) + (float)(v102 * v55);
          if (v103 < v48) {
            float v104 = v48;
          }
        }
        float v105 = (_WORD *)(v67 + 2 * v74);
        float v106 = (float)((float)(v46 + (float)(v100 * v56)) + (float)(v101 * v57)) + (float)(v102 * v58);
        *float v105 = llroundf(v104) << v73;
        float v107 = v49;
        if (v106 <= v49)
        {
          float v107 = v106;
          if (v106 < v48) {
            float v107 = v48;
          }
        }
        v105[1] = llroundf(v107) << v73;
        v74 += 2;
        v75 += 2;
        v77 += 2;
      }
      while (v14 > v74);
    }
    double result = (void *)((char *)result + v25);
    v71 += v26;
    v68 += v30;
    v67 += v31;
    ++v13;
  }
  while (v13 != v17);
  if (v28 && v33)
  {
    size_t v108 = 2 * v14;
    do
    {
      double result = memcpy(v34, v29, v108);
      v29 += v27;
      v34 += v32;
      --v17;
    }
    while (v17);
  }
  else if (v33)
  {
    do
    {
      if (v14) {
        double result = memset(v34, 255, 2 * v14);
      }
      v34 += v32;
      --v17;
    }
    while (v17);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Tone_Mat_TRC_v216_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  unint64_t v10 = result[13] * a2 / v6;
  int64x2_t v11 = (void *)result[16];
  unint64_t v12 = v10 + result[15];
  int64x2_t v13 = (uint64_t *)result[17];
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  unint64_t v16 = (char *)(v15 + v14 * v12 + 2 * v9);
  unint64_t v17 = v8 / v6;
  if (v15) {
    uint64_t v18 = v15 + v14 * v12 + 2 * v9;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17 != v7)
  {
    uint64_t v19 = 0;
    unint64_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    unint64_t v22 = v7 + *(void *)((char *)result + 44);
    unint64_t v23 = v17 - v7;
    uint64_t v24 = result[19];
    uint64_t v25 = (void *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = (char *)(v30 + v29 * v22 + 2 * v21);
    uint64_t v32 = *v13;
    LOWORD(a4) = *(_WORD *)(v24 + 140);
    LOWORD(a5) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a4);
    float v35 = v33 * *(float *)v24;
    float v174 = v33 * *(float *)(v24 + 16);
    float v175 = v33 * *(float *)(v24 + 8);
    float v173 = v33 * *(float *)(v24 + 20);
    *(float *)&unsigned int v36 = v33 * *(float *)(v24 + 28);
    float v171 = (float)LODWORD(a5);
    float v172 = *(float *)&v36;
    LOWORD(v36) = *(_WORD *)(v24 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 150);
    *(float *)&unsigned int v40 = (float)v36;
    float v176 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v24 + 152);
    float v41 = (float)v40;
    float v42 = *(float *)(v24 + 36);
    float v43 = *(float *)(v24 + 40);
    float v44 = *(float *)(v24 + 44);
    float v170 = *(float *)(v24 + 48) * 0.5;
    float v168 = *(float *)(v24 + 56) * 0.5;
    float v169 = *(float *)(v24 + 52) * 0.5;
    float v166 = *(float *)(v24 + 64) * 0.5;
    float v167 = *(float *)(v24 + 60) * 0.5;
    float v164 = *(float *)(v24 + 68) * 0.5;
    float v165 = *(float *)(v24 + 72);
    float v162 = *(float *)(v24 + 80);
    float v163 = *(float *)(v24 + 76);
    float v160 = *(float *)(v24 + 88);
    float v161 = *(float *)(v24 + 84);
    float v158 = *(float *)(v24 + 96);
    float v159 = *(float *)(v24 + 92);
    float v156 = *(float *)(v24 + 104);
    float v157 = *(float *)(v24 + 100);
    uint64_t v45 = v24 + 164;
    unsigned int v46 = *(unsigned __int8 *)(v24 + 124);
    char v47 = 16 - v46;
    _CF = v46 >= 0x11;
    uint64_t v49 = v24 + 16548;
    uint64_t v50 = *v11 + v32 * v12;
    uint64_t v51 = v24 + 32932;
    if (_CF) {
      char v52 = 0;
    }
    else {
      char v52 = v47;
    }
    double result = (void *)(v50 + 2 * v9);
    uint64_t v53 = v25[1];
    _ZF = v53 == 0;
    uint64_t v55 = v53 + v28 * v22 + 2 * v21;
    if (_ZF) {
      uint64_t v55 = 0;
    }
    uint64_t v56 = *v25 + v27 * v22 + 2 * v21;
    char v57 = v52;
    float v58 = *(float *)(v24 + 108);
    float v59 = *(float *)(v24 + 112);
    float v60 = *(float *)(v24 + 116);
    float v61 = *(float *)(v24 + 120);
    do
    {
      if (v20)
      {
        unint64_t v62 = 0;
        unsigned int v63 = (unsigned __int16 *)v56;
        char v64 = (unsigned __int16 *)v55;
        uint64_t v65 = (_DWORD *)v18;
        uint64_t v66 = result;
        do
        {
          if (v64)
          {
            float v67 = (float)(*v64 >> v57) - v171;
            float v68 = (float)(v64[1] >> v57) - v171;
            v64 += 2;
            float v69 = v175 * v68;
            float v70 = (float)(v173 * v68) + (float)(v67 * v174);
            float v71 = v172 * v67;
          }
          else
          {
            float v71 = 0.0;
            float v70 = 0.0;
            float v69 = 0.0;
          }
          float v72 = v35 * (float)((float)(*v63 >> v57) - v34);
          float v73 = v69 + v72;
          BOOL v74 = (float)(v69 + v72) <= 8191.0;
          float v75 = 8191.0;
          if (v74)
          {
            float v75 = v73;
            if (v73 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v70 + v72;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v71 + v72;
          BOOL v74 = (float)(v71 + v72) <= 8191.0;
          float v79 = 8191.0;
          if (v74)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          if (v64)
          {
            float v80 = (float)(*v64 >> v57) - v171;
            float v81 = (float)(v64[1] >> v57) - v171;
            v64 += 2;
            float v82 = v175 * v81;
            float v83 = (float)(v173 * v81) + (float)(v80 * v174);
            float v84 = v172 * v80;
          }
          else
          {
            float v84 = 0.0;
            float v83 = 0.0;
            float v82 = 0.0;
          }
          float v85 = v34;
          float v86 = v35;
          float v87 = v35 * (float)((float)(v63[1] >> v57) - v34);
          float v88 = v82 + v87;
          BOOL v74 = (float)(v82 + v87) <= 8191.0;
          float v89 = 8191.0;
          if (v74)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v83 + v87;
          BOOL v74 = (float)(v83 + v87) <= 8191.0;
          float v91 = 8191.0;
          if (v74)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v84 + v87;
          float v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H7 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          unsigned int v99 = llroundf(fminf(fmaxf(v79, 0.0), 8191.0));
          __asm { FCVT            S4, H7 }
          _H7 = *(_WORD *)(v45 + 2 * v99);
          __asm { FCVT            S7, H7 }
          _H6 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          float v106 = (float)((float)((float)(v59 * _S4) + (float)(v58 * _S0)) + (float)(v60 * _S7))
               + (float)(v61 * fmaxf(_S0, fmaxf(_S4, _S7)));
          float v107 = 8191.0;
          if (v106 <= 8191.0)
          {
            float v107 = v106;
            if (v106 < 0.0) {
              float v107 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H6
            FCVT            S6, H1
            FCVT            S30, H30
          }
          _H1 = *(_WORD *)(v49 + 2 * llroundf(v107));
          __asm { FCVT            S1, H1 }
          float v113 = _S0 * _S1;
          float v114 = _S4 * _S1;
          float v115 = _S7 * _S1;
          float v116 = (float)((float)((float)(v59 * _S6) + (float)(v58 * _S3)) + (float)(v60 * _S30))
               + (float)(v61 * fmaxf(_S3, fmaxf(_S6, _S30)));
          float v117 = 8191.0;
          if (v116 <= 8191.0)
          {
            float v117 = v116;
            if (v116 < 0.0) {
              float v117 = 0.0;
            }
          }
          _H7 = *(_WORD *)(v49 + 2 * llroundf(v117));
          __asm { FCVT            S7, H7 }
          float v120 = _S3 * _S7;
          _S6 = _S6 * _S7;
          _S7 = _S30 * _S7;
          float v123 = (float)((float)(v163 * v114) + (float)(v113 * v165)) + (float)(v115 * v162);
          float v124 = (float)((float)(v160 * v114) + (float)(v113 * v161)) + (float)(v115 * v159);
          _S0 = (float)((float)(v157 * v114) + (float)(v113 * v158)) + (float)(v115 * v156);
          float v126 = (float)(v163 * _S6) + (float)(v120 * v165);
          float v127 = (float)(v160 * _S6) + (float)(v120 * v161);
          float v128 = (float)(v157 * _S6) + (float)(v120 * v158);
          _S1 = v126 + (float)(_S7 * v162);
          float v130 = v127 + (float)(_S7 * v159);
          LOWORD(_S6) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          float v131 = v128 + (float)(_S7 * v156);
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S0) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S17, H0 }
          LOWORD(_S0) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          unsigned int v137 = llroundf(fminf(fmaxf(v131, 0.0), 8191.0));
          float v138 = (float)(v43 * _S7) + (float)(v42 * _S6);
          _S1 = _S6 + _S0;
          float v140 = _S7 + _S4;
          float v141 = (float)(v38 + (float)((float)(_S6 + _S0) * v170)) + (float)(v140 * v169);
          float v142 = (float)(v38 + (float)(_S1 * v167)) + (float)(v140 * v166);
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * v137);
          __asm { FCVT            S1, H1 }
          float v144 = v138 + (float)(v44 * _S17);
          float v145 = v141 + (float)((float)(_S17 + _S1) * v168);
          float v146 = v142 + (float)((float)(_S17 + _S1) * v164);
          if (v145 < v37) {
            float v147 = v37;
          }
          else {
            float v147 = v145;
          }
          BOOL v74 = v145 <= v39;
          float v148 = v144 + v37;
          if (!v74) {
            float v147 = v39;
          }
          __int16 v149 = llroundf(v147);
          float v150 = v176;
          if (v148 >= v176) {
            float v150 = v144 + v37;
          }
          *uint64_t v66 = v149;
          if (v148 <= v41) {
            float v151 = v150;
          }
          else {
            float v151 = v41;
          }
          v66[1] = llroundf(v151);
          float v152 = v39;
          if (v146 <= v39)
          {
            float v152 = v146;
            if (v146 < v37) {
              float v152 = v37;
            }
          }
          float v153 = (float)((float)((float)(v43 * _S4) + (float)(v42 * _S0)) + (float)(v44 * _S1)) + v37;
          v66[2] = llroundf(v152);
          float v154 = v41;
          float v34 = v85;
          float v35 = v86;
          if (v153 <= v41)
          {
            float v154 = v153;
            if (v153 < v176) {
              float v154 = v176;
            }
          }
          v66[3] = llroundf(v154);
          if (v65) {
            *v65++ = 0;
          }
          v62 += 2;
          v63 += 2;
          v66 += 4;
        }
        while (v20 > v62);
      }
      v56 += v27;
      v55 += v28;
      double result = (void *)((char *)result + v32);
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      size_t v155 = 2 * v20;
      do
      {
        double result = memcpy(v16, v31, v155);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          double result = memset(v16, 255, 2 * v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_v216_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Mat_TRC_v216_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  int64x2_t v10 = (void *)result[16];
  unint64_t v11 = result[13] * a2 / v6 + result[15];
  int64x2_t v12 = (uint64_t *)result[17];
  uint64_t v13 = v12[1];
  uint64_t v14 = v10[1];
  uint64_t v15 = (char *)(v14 + v13 * v11 + 2 * v9);
  unint64_t v16 = v8 / v6;
  if (v14) {
    uint64_t v17 = v14 + v13 * v11 + 2 * v9;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16 != v7)
  {
    uint64_t v18 = 0;
    unint64_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    unint64_t v21 = v7 + *(void *)((char *)result + 44);
    unint64_t v22 = v16 - v7;
    uint64_t v23 = result[19];
    uint64_t v24 = (void *)result[7];
    uint64_t v25 = (uint64_t *)result[8];
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = v25[2];
    uint64_t v29 = v24[2];
    uint64_t v30 = (char *)(v29 + v28 * v21 + 2 * v20);
    uint64_t v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    *(float *)&unsigned int v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    float v33 = (float)LODWORD(a4);
    float v34 = (float)LODWORD(a5);
    float v35 = *(float *)&v32 * *(float *)v23;
    float v142 = *(float *)&v32 * *(float *)(v23 + 16);
    float v143 = *(float *)&v32 * *(float *)(v23 + 8);
    float v36 = *(float *)&v32 * *(float *)(v23 + 20);
    float v37 = *(float *)&v32 * *(float *)(v23 + 28);
    LOWORD(v32) = *(_WORD *)(v23 + 144);
    float v38 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 146);
    float v39 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 148);
    float v40 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 150);
    float v41 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 152);
    float v42 = (float)v32;
    float v43 = *(float *)(v23 + 36);
    float v44 = *(float *)(v23 + 40);
    float v45 = *(float *)(v23 + 44);
    float v140 = *(float *)(v23 + 48) * 0.5;
    float v141 = v36;
    float v138 = *(float *)(v23 + 56) * 0.5;
    float v139 = *(float *)(v23 + 52) * 0.5;
    float v136 = *(float *)(v23 + 64) * 0.5;
    float v137 = *(float *)(v23 + 60) * 0.5;
    float v46 = *(float *)(v23 + 72);
    float v135 = *(float *)(v23 + 68) * 0.5;
    float v48 = *(float *)(v23 + 76);
    float v47 = *(float *)(v23 + 80);
    float v49 = *(float *)(v23 + 84);
    float v50 = *(float *)(v23 + 88);
    float v51 = *(float *)(v23 + 92);
    float v52 = *(float *)(v23 + 96);
    float v53 = *(float *)(v23 + 100);
    float v54 = *(float *)(v23 + 104);
    unsigned int v55 = *(unsigned __int8 *)(v23 + 124);
    char v56 = 16 - v55;
    _CF = v55 >= 0x11;
    uint64_t v58 = v23 + 16548;
    uint64_t v59 = v23 + 164;
    if (_CF) {
      char v60 = 0;
    }
    else {
      char v60 = v56;
    }
    uint64_t v61 = *v10 + v31 * v11 + 2 * v9;
    uint64_t v62 = v24[1];
    if (v62) {
      double result = (void *)(v62 + v27 * v21 + 2 * v20);
    }
    else {
      double result = 0;
    }
    uint64_t v63 = *v24 + v26 * v21 + 2 * v20;
    char v64 = v60;
    do
    {
      if (v19)
      {
        unint64_t v65 = 0;
        uint64_t v66 = (unsigned __int16 *)v63;
        float v67 = (unsigned __int16 *)result;
        float v68 = (_DWORD *)v17;
        float v69 = (_WORD *)v61;
        do
        {
          if (v67)
          {
            float v70 = (float)(*v67 >> v64) - v34;
            float v71 = (float)(v67[1] >> v64) - v34;
            v67 += 2;
            float v72 = v143 * v71;
            float v73 = (float)(v141 * v71) + (float)(v70 * v142);
            float v74 = v37 * v70;
          }
          else
          {
            float v74 = 0.0;
            float v73 = 0.0;
            float v72 = 0.0;
          }
          float v75 = v35 * (float)((float)(*v66 >> v64) - v33);
          float v76 = v72 + v75;
          BOOL v77 = (float)(v72 + v75) <= 8191.0;
          float v78 = 8191.0;
          if (v77)
          {
            float v78 = v76;
            if (v76 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v73 + v75;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = 8191.0;
          if ((float)(v74 + v75) <= 8191.0)
          {
            float v81 = v74 + v75;
            if ((float)(v74 + v75) < 0.0) {
              float v81 = 0.0;
            }
          }
          if (v67)
          {
            float v82 = (float)(*v67 >> v64) - v34;
            float v83 = (float)(v67[1] >> v64) - v34;
            v67 += 2;
            float v84 = v143 * v83;
            float v85 = (float)(v141 * v83) + (float)(v82 * v142);
            float v86 = v37 * v82;
          }
          else
          {
            float v86 = 0.0;
            float v85 = 0.0;
            float v84 = 0.0;
          }
          float v87 = v35 * (float)((float)(v66[1] >> v64) - v33);
          float v88 = 8191.0;
          if ((float)(v84 + v87) <= 8191.0)
          {
            float v88 = v84 + v87;
            if ((float)(v84 + v87) < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v85 + v87;
          BOOL v77 = (float)(v85 + v87) <= 8191.0;
          float v90 = 8191.0;
          if (v77)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v86 + v87;
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H4 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _S26 = (float)((float)(v48 * _S5) + (float)(_S0 * v46)) + (float)(_S24 * v47);
          float v107 = (float)((float)(v50 * _S5) + (float)(_S0 * v49)) + (float)(_S24 * v51);
          _S0 = (float)((float)(v53 * _S5) + (float)(_S0 * v52)) + (float)(_S24 * v54);
          float v109 = (float)(v48 * _S4) + (float)(_S6 * v46);
          float v110 = (float)(v50 * _S4) + (float)(_S6 * v49);
          _S4 = (float)(v53 * _S4) + (float)(_S6 * v52);
          LOWORD(_S6) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _S5 = v109 + (float)(_S6 * v47);
          float v114 = v110 + (float)(_S6 * v51);
          LOWORD(_S26) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
          float v115 = _S4 + (float)(_S6 * v54);
          __asm { FCVT            S26, H26 }
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm { FCVT            S28, H4 }
          LOWORD(_S0) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S30, H0 }
          LOWORD(_S0) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          float v121 = (float)(v39 + (float)((float)(_S26 + _S0) * v137)) + (float)((float)(_S28 + _S4) * v136);
          LOWORD(_S5) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          float v123 = (float)((float)(v44 * _S28) + (float)(v43 * _S26)) + (float)(v45 * _S30);
          float v124 = (float)((float)(v39 + (float)((float)(_S26 + _S0) * v140)) + (float)((float)(_S28 + _S4) * v139))
               + (float)((float)(_S30 + _S5) * v138);
          float v125 = v121 + (float)((float)(_S30 + _S5) * v135);
          if (v124 < v38) {
            float v126 = v38;
          }
          else {
            float v126 = v124;
          }
          float v127 = v123 + v38;
          if (v124 > v40) {
            float v126 = v40;
          }
          __int16 v128 = llroundf(v126);
          if (v127 < v41) {
            float v129 = v41;
          }
          else {
            float v129 = v127;
          }
          *float v69 = v128;
          if (v127 <= v42) {
            float v130 = v129;
          }
          else {
            float v130 = v42;
          }
          v69[1] = llroundf(v130);
          float v131 = v40;
          if (v125 <= v40)
          {
            float v131 = v125;
            if (v125 < v38) {
              float v131 = v38;
            }
          }
          float v132 = (float)((float)((float)(v44 * _S4) + (float)(v43 * _S0)) + (float)(v45 * _S5)) + v38;
          v69[2] = llroundf(v131);
          float v133 = v42;
          if (v132 <= v42)
          {
            float v133 = v132;
            if (v132 < v41) {
              float v133 = v41;
            }
          }
          v69[3] = llroundf(v133);
          if (v68) {
            *v68++ = 0;
          }
          v65 += 2;
          v66 += 2;
          v69 += 4;
        }
        while (v19 > v65);
      }
      v63 += v26;
      double result = (void *)((char *)result + v27);
      v61 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      size_t v134 = 2 * v19;
      do
      {
        double result = memcpy(v15, v30, v134);
        v30 += v28;
        v15 += v13;
        --v22;
      }
      while (v22);
    }
    else if (v17)
    {
      do
      {
        if (v19) {
          double result = memset(v15, 255, 2 * v19);
        }
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_v216_GCD);
  return 0;
}

void *vt_Copy_xf444_rgb_v216_GCD(void *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v12 = *(void *)((char *)result + 28);
  unint64_t v13 = *(unsigned __int8 *)result;
  unint64_t v14 = v12 * a2 / v13;
  uint64_t v15 = result[14];
  unint64_t v16 = (void *)result[16];
  unint64_t v17 = result[13] * a2 / v13 + result[15];
  uint64_t v18 = (uint64_t *)result[17];
  uint64_t v19 = v18[1];
  uint64_t v20 = v16[1];
  long long v21 = (char *)(v20 + v19 * v17 + 2 * v15);
  unint64_t v22 = (v12 + v12 * a2) / v13;
  if (v20) {
    uint64_t v23 = v20 + v19 * v17 + 2 * v15;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v22 == v14) {
    return result;
  }
  uint64_t v24 = 0;
  unint64_t v25 = *(void *)((char *)result + 20);
  uint64_t v26 = *(void *)((char *)result + 36);
  unint64_t v27 = v14 + *(void *)((char *)result + 44);
  unint64_t v28 = v22 - v14;
  uint64_t v29 = result[19];
  uint64_t v30 = (void *)result[7];
  uint64_t v31 = (uint64_t *)result[8];
  uint64_t v32 = *v31;
  uint64_t v33 = v31[1];
  uint64_t v34 = v31[2];
  uint64_t v35 = v30[2];
  LOWORD(a6) = *(_WORD *)(v29 + 140);
  LOWORD(a7) = *(_WORD *)(v29 + 142);
  float v36 = (float)*(unsigned int *)(v29 + 136) / (float)*(unsigned int *)(v29 + 128);
  LOWORD(v7) = *(_WORD *)(v29 + 144);
  LOWORD(v8) = *(_WORD *)(v29 + 146);
  LOWORD(v9) = *(_WORD *)(v29 + 148);
  LOWORD(v10) = *(_WORD *)(v29 + 150);
  LOWORD(v11) = *(_WORD *)(v29 + 152);
  float v37 = *(float *)(v29 + 36);
  float v38 = *(float *)(v29 + 40);
  float v39 = *(float *)(v29 + 44);
  unsigned int v40 = *(unsigned __int8 *)(v29 + 124);
  float v41 = (char *)(v35 + v34 * v27 + 2 * v26);
  uint64_t v42 = *v18;
  float v43 = (float)LODWORD(a6);
  float v44 = (float)LODWORD(a7);
  float v45 = v36 * *(float *)v29;
  float v46 = v36 * *(float *)(v29 + 8);
  float v47 = v36 * *(float *)(v29 + 16);
  float v48 = v36 * *(float *)(v29 + 20);
  float v49 = v36 * *(float *)(v29 + 28);
  float v50 = (float)v7;
  float v51 = (float)v8;
  float v52 = (float)v9;
  float v53 = (float)v10;
  float v54 = (float)v11;
  float v55 = *(float *)(v29 + 48) * 0.5;
  float v56 = *(float *)(v29 + 52) * 0.5;
  float v57 = *(float *)(v29 + 56) * 0.5;
  float v58 = *(float *)(v29 + 60) * 0.5;
  float v59 = *(float *)(v29 + 64) * 0.5;
  float v60 = *(float *)(v29 + 68) * 0.5;
  if (v40 >= 0x11) {
    double result = 0;
  }
  else {
    double result = (void *)(16 - v40);
  }
  uint64_t v61 = *v16 + v42 * v17 + 2 * v15;
  uint64_t v62 = v30[1];
  if (v62) {
    uint64_t v63 = v62 + v33 * v27 + 2 * v26;
  }
  else {
    uint64_t v63 = 0;
  }
  uint64_t v64 = *v30 + v32 * v27 + 2 * v26;
  char v65 = (char)result;
  do
  {
    if (v25)
    {
      double result = 0;
      uint64_t v66 = (unsigned __int16 *)v64;
      float v67 = (unsigned __int16 *)v63;
      float v68 = (_DWORD *)v23;
      float v69 = (_WORD *)v61;
      while (1)
      {
        float v70 = 0.0;
        if (!v67) {
          break;
        }
        float v71 = (float)(*v67 >> v65) - v44;
        float v72 = (float)(v67[1] >> v65) - v44;
        v67 += 2;
        float v73 = v46 * v72;
        float v74 = (float)(v48 * v72) + (float)(v71 * v47);
        float v75 = v49 * v71;
        if (!v67) {
          goto LABEL_18;
        }
        float v76 = (float)(*v67 >> v65) - v44;
        float v77 = (float)(v67[1] >> v65) - v44;
        v67 += 2;
        float v78 = v46 * v77;
        float v79 = (float)(v48 * v77) + (float)(v76 * v47);
        float v70 = v49 * v76;
LABEL_19:
        float v80 = v45 * (float)((float)(*v66 >> v65) - v43);
        float v81 = v73 + v80;
        float v82 = v74 + v80;
        float v83 = v75 + v80;
        float v84 = v45 * (float)((float)(v66[1] >> v65) - v43);
        float v85 = v78 + v84;
        float v86 = v79 + v84;
        float v87 = v70 + v84;
        float v88 = (float)((float)((float)(v38 * v82) + (float)(v37 * v81)) + (float)(v39 * v83)) + v50;
        float v89 = v81 + (float)(v78 + v84);
        float v90 = v82 + v86;
        float v91 = v83 + v87;
        float v92 = (float)((float)(v51 + (float)(v89 * v55)) + (float)(v90 * v56)) + (float)(v91 * v57);
        float v93 = (float)((float)(v51 + (float)(v89 * v58)) + (float)(v90 * v59)) + (float)(v91 * v60);
        if (v92 < v50) {
          float v94 = v50;
        }
        else {
          float v94 = v92;
        }
        if (v92 <= v52) {
          float v95 = v94;
        }
        else {
          float v95 = v52;
        }
        *float v69 = llroundf(v95);
        if (v88 < v53) {
          float v96 = v53;
        }
        else {
          float v96 = v88;
        }
        if (v88 <= v54) {
          float v97 = v96;
        }
        else {
          float v97 = v54;
        }
        v69[1] = llroundf(v97);
        float v98 = v52;
        if (v93 <= v52)
        {
          float v98 = v93;
          if (v93 < v50) {
            float v98 = v50;
          }
        }
        float v99 = (float)((float)((float)(v38 * v86) + (float)(v37 * v85)) + (float)(v39 * v87)) + v50;
        v69[2] = llroundf(v98);
        float v100 = v54;
        if (v99 <= v54)
        {
          float v100 = v99;
          if (v99 < v53) {
            float v100 = v53;
          }
        }
        v69[3] = llroundf(v100);
        if (v68) {
          *v68++ = 0;
        }
        double result = (void *)((char *)result + 2);
        v66 += 2;
        v69 += 4;
        if (v25 <= (unint64_t)result) {
          goto LABEL_40;
        }
      }
      float v75 = 0.0;
      float v74 = 0.0;
      float v73 = 0.0;
LABEL_18:
      float v79 = 0.0;
      float v78 = 0.0;
      goto LABEL_19;
    }
LABEL_40:
    v64 += v32;
    v63 += v33;
    v61 += v42;
    ++v24;
  }
  while (v24 != v28);
  if (v35 && v23)
  {
    size_t v101 = 2 * v25;
    do
    {
      double result = memcpy(v21, v41, v101);
      v41 += v34;
      v21 += v19;
      --v28;
    }
    while (v28);
  }
  else if (v23)
  {
    do
    {
      if (v25) {
        double result = memset(v21, 255, 2 * v25);
      }
      v21 += v19;
      --v28;
    }
    while (v28);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_444vf_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD(void *result, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)((char *)result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    size_t v8 = *(void *)((char *)result + 20);
    uint64_t v9 = *(void *)((char *)result + 36);
    unint64_t v10 = v5 + *(void *)((char *)result + 44);
    unint64_t v11 = v6 - v5;
    uint64_t v12 = result[14];
    unint64_t v13 = result[13] * a2;
    uint64_t v14 = result[19];
    uint64_t v15 = (uint64_t *)result[7];
    unint64_t v16 = (uint64_t *)result[8];
    uint64_t v17 = (void *)result[16];
    uint64_t v18 = (uint64_t *)result[17];
    uint64_t v19 = *v16;
    uint64_t v20 = v16[1];
    unint64_t v21 = v13 / v4 + result[15];
    uint64_t v198 = v16[2];
    uint64_t v201 = v15[2];
    uint64_t v22 = v201 + v198 * v10 + 2 * v9;
    uint64_t v23 = *v18;
    uint64_t v24 = v18[1];
    uint64_t v199 = v18[2];
    uint64_t v200 = v17[2];
    uint64_t v25 = (unsigned char *)(v200 + v199 * v21 + v12);
    unsigned int v26 = *(unsigned __int16 *)(v14 + 140);
    unsigned int v27 = *(unsigned __int16 *)(v14 + 142);
    unsigned int v28 = *(unsigned __int16 *)(v14 + 144);
    unsigned int v29 = *(unsigned __int16 *)(v14 + 146);
    unsigned int v30 = *(unsigned __int16 *)(v14 + 148);
    unsigned int v31 = *(unsigned __int16 *)(v14 + 150);
    unsigned int v32 = *(unsigned __int16 *)(v14 + 152);
    _S6 = *(_DWORD *)(v14 + 36);
    _S7 = *(float *)(v14 + 40);
    _S16 = *(_DWORD *)(v14 + 44);
    _S17 = *(_DWORD *)(v14 + 48);
    _S18 = *(_DWORD *)(v14 + 52);
    _S19 = *(_DWORD *)(v14 + 56);
    _S21 = *(_DWORD *)(v14 + 60);
    _S23 = *(float *)(v14 + 64);
    *(float *)&a3 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    float v245 = (float)v26;
    _S24 = *(float *)(v14 + 68);
    _S25 = *(_DWORD *)(v14 + 72);
    float v43 = (float)v27;
    _S1 = *(float *)&a3 * *(float *)v14;
    _S2 = *(float *)&a3 * *(float *)(v14 + 8);
    uint64_t v46 = v14 + 16548;
    _S3 = *(float *)&a3 * *(float *)(v14 + 16);
    _S4 = *(float *)&a3 * *(float *)(v14 + 20);
    _S5 = *(float *)&a3 * *(float *)(v14 + 28);
    float v50 = (float)v28;
    *(short float *)&a3 = (short float)v26;
    double result = (void *)(v14 + 164);
    float v243 = _S1;
    __asm { FCVT            H8, S1 }
    _Q0 = vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    float16x8_t v242 = (float16x8_t)_Q0;
    *(short float *)_Q0.i16 = -(short float)v27;
    float16x8_t v56 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float v212 = _S5;
    float v213 = _S4;
    __asm { FCVT            H0, S5 }
    short float v211 = *(short float *)_Q0.i16;
    float v214 = _S3;
    __asm { FCVT            H0, S3 }
    short float v210 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S4 }
    short float v209 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v28;
    float16x8_t v58 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    unsigned int v59 = *(unsigned __int8 *)(v14 + 124);
    unsigned __int8 v60 = 16 - v59;
    if (v59 >= 0x11) {
      unsigned __int8 v60 = 0;
    }
    uint64_t v61 = v17;
    uint64_t v62 = *v17 + v23 * v21;
    *(short float *)_Q0.i16 = (short float)v29;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v30;
    uint64_t v64 = v14 + 32932;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v241 = (float16x8_t)_Q0;
    *(short float *)_Q0.i16 = (short float)v31;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float v215 = _S2;
    __asm { FCVT            H0, S2 }
    short float v208 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v32;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float v68 = (char *)(v61[1] + v24 * v21 + v12);
    if (_ZF) {
      float v68 = 0;
    }
    float v69 = (int8x8_t *)(v62 + v12);
    uint64_t v70 = *v15;
    uint64_t v71 = v15[1];
    _ZF = v71 == 0;
    uint64_t v72 = v71 + v20 * v10 + 2 * v9;
    if (_ZF) {
      float v73 = 0;
    }
    else {
      float v73 = (const __int16 *)v72;
    }
    uint64_t v74 = v70 + v19 * v10 + 2 * v9;
    float v247 = *(float *)(v14 + 36);
    __asm { FCVT            H6, S6 }
    short float v234 = _H6;
    __asm { FCVT            H6, S7 }
    short float v233 = _H6;
    float v246 = *(float *)(v14 + 44);
    __asm { FCVT            H6, S16 }
    short float v232 = _H6;
    float v218 = *(float *)(v14 + 52);
    float v219 = *(float *)(v14 + 48);
    __asm { FCVT            H6, S17 }
    short float v207 = _H6;
    __asm { FCVT            H6, S18 }
    short float v206 = _H6;
    float v216 = *(float *)(v14 + 60);
    float v217 = *(float *)(v14 + 56);
    __asm { FCVT            H6, S19 }
    short float v205 = _H6;
    __asm { FCVT            H6, S21 }
    short float v204 = _H6;
    __asm { FCVT            H6, S23 }
    short float v203 = _H6;
    __asm { FCVT            H6, S24 }
    short float v202 = _H6;
    float v238 = *(float *)(v14 + 108);
    __asm { FCVT            H2, S2 }
    short float v231 = _H2;
    float v237 = *(float *)(v14 + 112);
    __asm { FCVT            H2, S3 }
    short float v230 = _H2;
    float v236 = *(float *)(v14 + 116);
    __asm { FCVT            H2, S4 }
    short float v229 = _H2;
    float v235 = *(float *)(v14 + 120);
    __asm { FCVT            H2, S5 }
    short float v228 = _H2;
    float v244 = *(float *)(v14 + 72);
    __asm { FCVT            H2, S25 }
    short float v227 = _H2;
    float v240 = *(float *)(v14 + 76);
    __asm { FCVT            H0, S0 }
    short float v226 = _H0;
    float v239 = *(float *)(v14 + 80);
    __asm { FCVT            H0, S1 }
    short float v225 = _H0;
    float v91 = (float)v29;
    _S25 = *(float *)(v14 + 84);
    __asm { FCVT            H0, S0 }
    short float v224 = _H0;
    float v94 = (float)v30;
    float v220 = (float)v31;
    v95.i64[0] = 0x9000900090009000;
    v95.i64[1] = 0x9000900090009000;
    float v96 = (float)v32;
    uint16x8_t v97 = (uint16x8_t)vdupq_n_s16(-v60);
    _S18 = *(float *)(v14 + 88);
    __asm { FCVT            H1, S1 }
    _S6 = *(float *)(v14 + 92);
    __asm { FCVT            H0, S0 }
    short float v222 = _H0;
    short float v223 = _H1;
    _S11 = *(float *)(v14 + 96);
    __asm { FCVT            H0, S2 }
    short float v221 = _H0;
    _S10 = *(float *)(v14 + 100);
    __asm { FCVT            H0, S3 }
    _S13 = *(float *)(v14 + 104);
    __asm { FCVT            H1, S4 }
    do
    {
      if ((int)v8 < 8)
      {
        size_t v152 = 0;
        float v112 = v68;
        float v111 = v69;
        float v110 = v73;
        float v109 = (uint16x8_t *)v74;
      }
      else
      {
        int v108 = 0;
        float v109 = (uint16x8_t *)v74;
        float v110 = v73;
        float v111 = v69;
        float v112 = v68;
        do
        {
          if (v110)
          {
            int16x8x2_t v249 = vld2q_s16(v110);
            v110 += 16;
            float16x8_t v113 = vcvtq_f16_u16(vshlq_u16((uint16x8_t)v249.val[0], v97));
            v249.val[0] = (int16x8_t)vcvtq_f16_u16(vshlq_u16((uint16x8_t)v249.val[1], v97));
            v249.val[1] = (int16x8_t)vaddq_f16(v56, v113);
            float16x8_t v114 = vaddq_f16(v56, (float16x8_t)v249.val[0]);
            float16x8_t v115 = vmulq_n_f16(v114, v208);
            float16x8_t v116 = vmlaq_n_f16(vmulq_n_f16((float16x8_t)v249.val[1], v210), v114, v209);
            float16x8_t v117 = vmulq_n_f16((float16x8_t)v249.val[1], v211);
          }
          else
          {
            float16x8_t v117 = 0uLL;
            float16x8_t v116 = 0uLL;
            float16x8_t v115 = 0uLL;
          }
          uint16x8_t v118 = *v109++;
          float16x8_t v119 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v118, v97)), v242);
          float16x8_t v120 = vmlaq_n_f16(v116, v119, _H8);
          float16x8_t v121 = vmlaq_n_f16(v117, v119, _H8);
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v115, v119, _H8), (float16x8_t)0), v95));
          uint32x4_t v123 = vmovl_high_u16(v122);
          float16x8_t v124 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v122.i8);
          v124.i16[0] = *((_WORD *)result + v124.u32[0]);
          v124.i16[1] = *((_WORD *)result + v124.u32[1]);
          v124.i16[2] = *((_WORD *)result + v124.u32[2]);
          v124.i16[3] = *((_WORD *)result + v124.u32[3]);
          v124.i16[4] = *((_WORD *)result + v123.u32[0]);
          v124.i16[5] = *((_WORD *)result + v123.u32[1]);
          v124.i16[6] = *((_WORD *)result + v123.u32[2]);
          v124.i16[7] = *((_WORD *)result + v123.u32[3]);
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v95));
          uint32x4_t v126 = vmovl_high_u16(v125);
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v125.i8);
          v120.i16[0] = *((_WORD *)result + v127.u32[0]);
          v120.i16[1] = *((_WORD *)result + v127.u32[1]);
          v120.i16[2] = *((_WORD *)result + v127.u32[2]);
          v120.i16[3] = *((_WORD *)result + v127.u32[3]);
          v120.i16[4] = *((_WORD *)result + v126.u32[0]);
          v120.i16[5] = *((_WORD *)result + v126.u32[1]);
          v120.i16[6] = *((_WORD *)result + v126.u32[2]);
          v120.i16[7] = *((_WORD *)result + v126.u32[3]);
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v95));
          uint32x4_t v129 = vmovl_high_u16(v128);
          float16x8_t v130 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v128.i8);
          v130.i16[0] = *((_WORD *)result + v130.u32[0]);
          v130.i16[1] = *((_WORD *)result + v130.u32[1]);
          v130.i16[2] = *((_WORD *)result + v130.u32[2]);
          v130.i16[3] = *((_WORD *)result + v130.u32[3]);
          v130.i16[4] = *((_WORD *)result + v129.u32[0]);
          v130.i16[5] = *((_WORD *)result + v129.u32[1]);
          v130.i16[6] = *((_WORD *)result + v129.u32[2]);
          v130.i16[7] = *((_WORD *)result + v129.u32[3]);
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, v231), v120, v230), v130, v229), vmaxq_f16(vmaxq_f16(v124, v120), v130), v228), (float16x8_t)0), v95));
          uint32x4_t v132 = vmovl_high_u16(v131);
          float16x8_t v133 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v131.i8);
          v133.i16[0] = *(_WORD *)(v46 + 2 * v133.u32[0]);
          v133.i16[1] = *(_WORD *)(v46 + 2 * v133.u32[1]);
          v133.i16[2] = *(_WORD *)(v46 + 2 * v133.u32[2]);
          v133.i16[3] = *(_WORD *)(v46 + 2 * v133.u32[3]);
          v133.i16[4] = *(_WORD *)(v46 + 2 * v132.u32[0]);
          v133.i16[5] = *(_WORD *)(v46 + 2 * v132.u32[1]);
          v133.i16[6] = *(_WORD *)(v46 + 2 * v132.u32[2]);
          v133.i16[7] = *(_WORD *)(v46 + 2 * v132.u32[3]);
          float16x8_t v134 = vmulq_f16(v124, v133);
          float16x8_t v135 = vmulq_f16(v120, v133);
          float16x8_t v136 = vmulq_f16(v130, v133);
          float16x8_t v137 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v134, v224), v135, v223), v136, v222);
          float16x8_t v138 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v136, _H1), v135, _H0), v134, v221);
          uint16x8_t v139 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v134, v227), v135, v226), v136, v225), (float16x8_t)0), v95));
          uint32x4_t v140 = vmovl_high_u16(v139);
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v139.i8);
          v142.i16[0] = *(_WORD *)(v64 + 2 * v141.u32[0]);
          v142.i16[1] = *(_WORD *)(v64 + 2 * v141.u32[1]);
          v142.i16[2] = *(_WORD *)(v64 + 2 * v141.u32[2]);
          v142.i16[3] = *(_WORD *)(v64 + 2 * v141.u32[3]);
          v142.i16[4] = *(_WORD *)(v64 + 2 * v140.u32[0]);
          v142.i16[5] = *(_WORD *)(v64 + 2 * v140.u32[1]);
          v142.i16[6] = *(_WORD *)(v64 + 2 * v140.u32[2]);
          v142.i16[7] = *(_WORD *)(v64 + 2 * v140.u32[3]);
          uint16x8_t v143 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v137, (float16x8_t)0), v95));
          uint32x4_t v144 = vmovl_high_u16(v143);
          uint32x4_t v145 = vmovl_u16(*(uint16x4_t *)v143.i8);
          v146.i16[0] = *(_WORD *)(v64 + 2 * v145.u32[0]);
          v146.i16[1] = *(_WORD *)(v64 + 2 * v145.u32[1]);
          v146.i16[2] = *(_WORD *)(v64 + 2 * v145.u32[2]);
          v146.i16[3] = *(_WORD *)(v64 + 2 * v145.u32[3]);
          v146.i16[4] = *(_WORD *)(v64 + 2 * v144.u32[0]);
          v146.i16[5] = *(_WORD *)(v64 + 2 * v144.u32[1]);
          v146.i16[6] = *(_WORD *)(v64 + 2 * v144.u32[2]);
          v146.i16[7] = *(_WORD *)(v64 + 2 * v144.u32[3]);
          uint16x8_t v147 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v138, (float16x8_t)0), v95));
          uint32x4_t v148 = vmovl_high_u16(v147);
          uint32x4_t v149 = vmovl_u16(*(uint16x4_t *)v147.i8);
          v150.i16[0] = *(_WORD *)(v64 + 2 * v149.u32[0]);
          v150.i16[1] = *(_WORD *)(v64 + 2 * v149.u32[1]);
          v150.i16[2] = *(_WORD *)(v64 + 2 * v149.u32[2]);
          v150.i16[3] = *(_WORD *)(v64 + 2 * v149.u32[3]);
          v150.i16[4] = *(_WORD *)(v64 + 2 * v148.u32[0]);
          v150.i16[5] = *(_WORD *)(v64 + 2 * v148.u32[1]);
          v150.i16[6] = *(_WORD *)(v64 + 2 * v148.u32[2]);
          v150.i16[7] = *(_WORD *)(v64 + 2 * v148.u32[3]);
          *v111++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v58, v142, v234), v146, v233), v150, v232), v58), v241)));
          if (v112)
          {
            float16x8_t v151 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v63, v142, v204), v146, v203), v150, v202);
            v248.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v63, v142, v207), v146, v206), v150, v205), v66), v67), v66), v67)));
            v248.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(v151));
            vst2_s8(v112, v248);
            v112 += 16;
          }
          v108 += 8;
        }
        while (v108 < (int)v8 - 7);
        size_t v152 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v152;
      size_t v153 = v8 - v152;
      if (v153 != 0 && _CF)
      {
        do
        {
          if (v110)
          {
            float v154 = (float)(*(unsigned __int16 *)v110 >> v60) - v43;
            float v155 = (float)(*((unsigned __int16 *)v110 + 1) >> v60) - v43;
            v110 += 2;
            float v156 = v215 * v155;
            float v157 = (float)(v213 * v155) + (float)(v154 * v214);
            float v158 = v212 * v154;
          }
          else
          {
            float v158 = 0.0;
            float v157 = 0.0;
            float v156 = 0.0;
          }
          unsigned int v159 = v109->u16[0];
          float v109 = (uint16x8_t *)((char *)v109 + 2);
          float v160 = v243 * (float)((float)(int)(v159 >> v60) - v245);
          float v161 = v156 + v160;
          float v162 = 8191.0;
          if (v161 <= 8191.0)
          {
            float v162 = v161;
            if (v161 < 0.0) {
              float v162 = 0.0;
            }
          }
          float v163 = v157 + v160;
          BOOL v164 = (float)(v157 + v160) <= 8191.0;
          float v165 = 8191.0;
          if (v164)
          {
            float v165 = v163;
            if (v163 < 0.0) {
              float v165 = 0.0;
            }
          }
          float v166 = v158 + v160;
          float v167 = 8191.0;
          if (v166 <= 8191.0)
          {
            float v167 = v166;
            if (v166 < 0.0) {
              float v167 = 0.0;
            }
          }
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          float v174 = (float)((float)((float)(v237 * _S3) + (float)(v238 * _S2)) + (float)(v236 * _S4))
               + (float)(v235 * fmaxf(_S2, fmaxf(_S3, _S4)));
          float v175 = 8191.0;
          if (v174 <= 8191.0)
          {
            float v175 = v174;
            if (v174 < 0.0) {
              float v175 = 0.0;
            }
          }
          _H5 = *(_WORD *)(v46 + 2 * llroundf(v175));
          __asm { FCVT            S5, H5 }
          _S2 = _S2 * _S5;
          _S3 = _S3 * _S5;
          float v180 = _S4 * _S5;
          float v181 = (float)((float)(v240 * _S3) + (float)(_S2 * v244)) + (float)(v180 * v239);
          float v182 = (float)((float)(_S18 * _S3) + (float)(_S2 * _S25)) + (float)(v180 * _S6);
          _S4 = (float)((float)(_S10 * _S3) + (float)(_S2 * _S11)) + (float)(v180 * _S13);
          LOWORD(_S2) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v181, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S3) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v182, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S4) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S15, H4 }
          float v187 = (float)((float)((float)(_S7 * _S3) + (float)(v247 * _S2)) + (float)(v246 * _S15)) + v50;
          float v188 = v94;
          if (v187 <= v94)
          {
            float v188 = (float)((float)((float)(_S7 * _S3) + (float)(v247 * _S2)) + (float)(v246 * _S15)) + v50;
            if (v187 < v50) {
              float v188 = v50;
            }
          }
          v111->i8[0] = llroundf(v188);
          float v111 = (int8x8_t *)((char *)v111 + 1);
          if (v112)
          {
            float v189 = (float)((float)(v91 + (float)(_S2 * v219)) + (float)(_S3 * v218)) + (float)(_S15 * v217);
            float v190 = v96;
            if (v189 <= v96)
            {
              float v190 = (float)((float)(v91 + (float)(_S2 * v219)) + (float)(_S3 * v218)) + (float)(_S15 * v217);
              if (v189 < v220) {
                float v190 = v220;
              }
            }
            float v191 = (float)((float)(v91 + (float)(_S2 * v216)) + (float)(_S3 * _S23)) + (float)(_S15 * _S24);
            *float v112 = llroundf(v190);
            float v192 = v96;
            if (v191 <= v96)
            {
              float v192 = v191;
              if (v191 < v220) {
                float v192 = v220;
              }
            }
            v112[1] = llroundf(v192);
            v112 += 2;
          }
          --v153;
        }
        while (v153);
      }
      v74 += v19;
      float v73 = (const __int16 *)((char *)v73 + v20);
      float v69 = (int8x8_t *)((char *)v69 + v23);
      v68 += v24;
      ++v7;
    }
    while (v7 != v11);
    if (v201 && v200)
    {
      uint64_t v193 = 0;
      do
      {
        if (v8)
        {
          size_t v194 = v8;
          float v195 = v25;
          float v196 = (unsigned __int16 *)v22;
          do
          {
            unsigned int v197 = *v196++;
            *v195++ = llroundf((float)v197 * 0.0038911);
            --v194;
          }
          while (v194);
        }
        v22 += v198;
        v25 += v199;
        ++v193;
      }
      while (v193 != v11);
    }
    else if (v200)
    {
      do
      {
        if (v8) {
          double result = memset(v25, 255, v8);
        }
        v25 += v199;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Tone_Mat_TRC_444vf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (void *)result[16];
    unint64_t v16 = result[13] * a2 / v6 + result[15];
    uint64_t v17 = result[19];
    uint64_t v18 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    int64x2_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    uint64_t v25 = v24 + v23 * v12 + 2 * v11;
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    unsigned int v30 = (unsigned char *)(v29 + v28 * v16 + v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    float v32 = (float)LODWORD(a4);
    float v33 = (float)LODWORD(a5);
    float v34 = v31 * *(float *)v17;
    float v134 = v31 * *(float *)(v17 + 16);
    float v135 = v31 * *(float *)(v17 + 8);
    float v35 = v31 * *(float *)(v17 + 20);
    *(float *)&unsigned int v36 = v31 * *(float *)(v17 + 28);
    float v132 = *(float *)&v36;
    float v133 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    float v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 152);
    float v41 = (float)v36;
    float v42 = *(float *)(v17 + 36);
    float v43 = *(float *)(v17 + 40);
    float v44 = *(float *)(v17 + 44);
    float v130 = *(float *)(v17 + 52);
    float v131 = *(float *)(v17 + 48);
    float v128 = *(float *)(v17 + 60);
    float v129 = *(float *)(v17 + 56);
    float v45 = *(float *)(v17 + 68);
    float v127 = *(float *)(v17 + 64);
    float v46 = *(float *)(v17 + 72);
    float v47 = *(float *)(v17 + 76);
    float v48 = *(float *)(v17 + 80);
    float v49 = *(float *)(v17 + 84);
    float v50 = *(float *)(v17 + 88);
    float v51 = *(float *)(v17 + 92);
    float v52 = *(float *)(v17 + 96);
    float v53 = *(float *)(v17 + 100);
    float v54 = *(float *)(v17 + 104);
    uint64_t v55 = v17 + 164;
    double result = (void *)(v17 + 16548);
    unsigned int v56 = *(unsigned __int8 *)(v17 + 124);
    if (v56 >= 0x11) {
      char v57 = 0;
    }
    else {
      char v57 = 16 - v56;
    }
    uint64_t v58 = v15[1];
    _ZF = v58 == 0;
    uint64_t v60 = v58 + v27 * v16;
    uint64_t v61 = *v15 + v26 * v16;
    uint64_t v62 = v17 + 32932;
    float16x8_t v63 = (unsigned char *)(v60 + v14);
    if (_ZF) {
      float16x8_t v63 = 0;
    }
    uint64_t v64 = (unsigned char *)(v61 + v14);
    uint64_t v66 = *v18;
    uint64_t v65 = v18[1];
    uint64_t v67 = v65 + v22 * v12 + 2 * v11;
    if (!v65) {
      uint64_t v67 = 0;
    }
    uint64_t v68 = v66 + v21 * v12 + 2 * v11;
    char v69 = v57;
    float v71 = *(float *)(v17 + 108);
    float v70 = *(float *)(v17 + 112);
    float v72 = *(float *)(v17 + 116);
    float v73 = *(float *)(v17 + 120);
    do
    {
      size_t v74 = v10;
      float v75 = (unsigned __int16 *)v68;
      float v76 = (unsigned __int16 *)v67;
      float v77 = v63;
      for (uint64_t i = v64; v74; --v74)
      {
        if (v76)
        {
          float v79 = (float)(*v76 >> v69) - v33;
          float v80 = (float)(v76[1] >> v69) - v33;
          v76 += 2;
          float v81 = v135 * v80;
          float v82 = (float)(v133 * v80) + (float)(v79 * v134);
          float v83 = v132 * v79;
        }
        else
        {
          float v83 = 0.0;
          float v82 = 0.0;
          float v81 = 0.0;
        }
        unsigned int v84 = *v75++;
        float v85 = v34 * (float)((float)(int)(v84 >> v69) - v32);
        float v86 = v81 + v85;
        float v87 = 8191.0;
        if (v86 <= 8191.0)
        {
          float v87 = v86;
          if (v86 < 0.0) {
            float v87 = 0.0;
          }
        }
        float v88 = v82 + v85;
        BOOL v89 = (float)(v82 + v85) <= 8191.0;
        float v90 = 8191.0;
        if (v89)
        {
          float v90 = v88;
          if (v88 < 0.0) {
            float v90 = 0.0;
          }
        }
        float v91 = v83 + v85;
        float v92 = 8191.0;
        if (v91 <= 8191.0)
        {
          float v92 = v91;
          if (v91 < 0.0) {
            float v92 = 0.0;
          }
        }
        _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
        __asm { FCVT            S24, H0 }
        _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
        __asm { FCVT            S25, H0 }
        _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        float v102 = (float)((float)((float)(v70 * _S25) + (float)(v71 * _S24)) + (float)(v72 * _S26))
             + (float)(v73 * fmaxf(_S24, fmaxf(_S25, _S26)));
        float v103 = 8191.0;
        if (v102 <= 8191.0)
        {
          float v103 = v102;
          if (v102 < 0.0) {
            float v103 = 0.0;
          }
        }
        _H0 = *((_WORD *)result + llroundf(v103));
        __asm { FCVT            S0, H0 }
        _S24 = _S24 * _S0;
        _S25 = _S25 * _S0;
        float v108 = _S26 * _S0;
        float v109 = (float)((float)(v47 * _S25) + (float)(_S24 * v46)) + (float)(v108 * v48);
        float v110 = (float)((float)(v50 * _S25) + (float)(_S24 * v49)) + (float)(v108 * v51);
        _S0 = (float)((float)(v53 * _S25) + (float)(_S24 * v52)) + (float)(v108 * v54);
        LOWORD(_S24) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
        __asm { FCVT            S24, H24 }
        LOWORD(_S25) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
        __asm { FCVT            S25, H25 }
        LOWORD(_S0) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        float v115 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S26)) + v37;
        float v116 = v39;
        if (v115 <= v39)
        {
          float v116 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S26)) + v37;
          if (v115 < v37) {
            float v116 = v37;
          }
        }
        *i++ = llroundf(v116);
        if (v77)
        {
          float v117 = (float)((float)(v38 + (float)(_S24 * v131)) + (float)(_S25 * v130)) + (float)(_S26 * v129);
          float v118 = v41;
          if (v117 <= v41)
          {
            float v118 = (float)((float)(v38 + (float)(_S24 * v131)) + (float)(_S25 * v130)) + (float)(_S26 * v129);
            if (v117 < v40) {
              float v118 = v40;
            }
          }
          float v119 = (float)(v38 + (float)(_S24 * v128)) + (float)(_S25 * v127);
          float v120 = v119 + (float)(_S26 * v45);
          *float v77 = llroundf(v118);
          float v121 = v41;
          if (v120 <= v41)
          {
            float v121 = v119 + (float)(_S26 * v45);
            if (v120 < v40) {
              float v121 = v40;
            }
          }
          v77[1] = llroundf(v121);
          v77 += 2;
        }
      }
      v68 += v21;
      v67 += v22;
      v64 += v26;
      v63 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      uint64_t v122 = 0;
      do
      {
        if (v10)
        {
          size_t v123 = v10;
          float16x8_t v124 = v30;
          uint16x8_t v125 = (unsigned __int16 *)v25;
          do
          {
            unsigned int v126 = *v125++;
            *v124++ = llroundf((float)v126 * 0.0038911);
            --v123;
          }
          while (v123);
        }
        v25 += v23;
        v30 += v28;
        ++v122;
      }
      while (v122 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          double result = memset(v30, 255, v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_444vf_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Mat_TRC_444vf_neon_fp16_GCD(void *result, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)((char *)result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    size_t v8 = *(void *)((char *)result + 20);
    uint64_t v9 = *(void *)((char *)result + 36);
    unint64_t v10 = v5 + *(void *)((char *)result + 44);
    unint64_t v11 = v6 - v5;
    uint64_t v12 = result[14];
    uint64_t v13 = result[19];
    uint64_t v14 = (void *)result[16];
    unint64_t v15 = result[13] * a2 / v4 + result[15];
    unint64_t v16 = (uint64_t *)result[7];
    uint64_t v17 = (uint64_t *)result[8];
    uint64_t v18 = (uint64_t *)result[17];
    uint64_t v19 = *v17;
    uint64_t v20 = v17[1];
    uint64_t v188 = v17[2];
    uint64_t v191 = v16[2];
    uint64_t v21 = v191 + v188 * v10 + 2 * v9;
    uint64_t v22 = *v18;
    uint64_t v23 = v18[1];
    uint64_t v189 = v18[2];
    uint64_t v190 = v14[2];
    uint64_t v24 = (unsigned char *)(v190 + v189 * v15 + v12);
    unsigned int v25 = *(unsigned __int16 *)(v13 + 140);
    unsigned int v26 = *(unsigned __int16 *)(v13 + 142);
    unsigned int v27 = *(unsigned __int16 *)(v13 + 144);
    unsigned int v28 = *(unsigned __int16 *)(v13 + 146);
    unsigned int v29 = *(unsigned __int16 *)(v13 + 148);
    unsigned int v30 = *(unsigned __int16 *)(v13 + 150);
    unsigned int v31 = *(unsigned __int16 *)(v13 + 152);
    _S10 = *(_DWORD *)(v13 + 36);
    _S13 = *(_DWORD *)(v13 + 40);
    _S17 = *(_DWORD *)(v13 + 44);
    _S19 = *(_DWORD *)(v13 + 48);
    _S14 = *(float *)(v13 + 52);
    _S21 = *(_DWORD *)(v13 + 56);
    *(float *)&a3 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    _S22 = *(_DWORD *)(v13 + 60);
    _S23 = *(_DWORD *)(v13 + 64);
    float v230 = (float)v25;
    float v40 = (float)v26;
    _S1 = *(float *)&a3 * *(float *)v13;
    _S24 = *(_DWORD *)(v13 + 68);
    _S25 = *(_DWORD *)(v13 + 72);
    _S2 = *(float *)&a3 * *(float *)(v13 + 8);
    _S3 = *(float *)&a3 * *(float *)(v13 + 16);
    _S26 = *(float *)&a3 * *(float *)(v13 + 20);
    _S27 = *(_DWORD *)(v13 + 76);
    _S28 = *(float *)(v13 + 80);
    _S5 = *(float *)&a3 * *(float *)(v13 + 28);
    *(short float *)&a3 = (short float)v25;
    int16x8_t v50 = vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    float16x8_t v227 = (float16x8_t)v50;
    _S29 = *(_DWORD *)(v13 + 84);
    _S30 = *(_DWORD *)(v13 + 88);
    uint64_t v53 = v13 + 164;
    *(short float *)v50.i16 = -(short float)v26;
    float16x8_t v54 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v50.i8, 0);
    *(short float *)v50.i16 = (short float)v27;
    float16x8_t v55 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v50.i8, 0);
    *(short float *)v50.i16 = (short float)v28;
    float16x8_t v56 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v50.i8, 0);
    *(short float *)v50.i16 = (short float)v29;
    int16x8_t v57 = vdupq_lane_s16(*(int16x4_t *)v50.i8, 0);
    float16x8_t v225 = (float16x8_t)v57;
    unsigned int v58 = *(unsigned __int8 *)(v13 + 124);
    unsigned __int8 v59 = 16 - v58;
    if (v58 >= 0x11) {
      unsigned __int8 v59 = 0;
    }
    uint64_t v60 = v14[1];
    _ZF = v60 == 0;
    uint64_t v62 = v60 + v23 * v15;
    uint64_t v63 = *v14 + v22 * v15;
    double result = (void *)(v13 + 16548);
    *(short float *)v57.i16 = (short float)v30;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v57.i8, 0);
    *(short float *)v57.i16 = (short float)v31;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v57.i8, 0);
    uint64_t v66 = (char *)(v62 + v12);
    if (_ZF) {
      uint64_t v67 = 0;
    }
    else {
      uint64_t v67 = v66;
    }
    uint64_t v68 = (int8x8_t *)(v63 + v12);
    uint64_t v69 = *v16;
    uint64_t v70 = v16[1];
    _ZF = v70 == 0;
    uint64_t v71 = v70 + v20 * v10 + 2 * v9;
    if (_ZF) {
      float v72 = 0;
    }
    else {
      float v72 = (const __int16 *)v71;
    }
    uint64_t v73 = v69 + v19 * v10 + 2 * v9;
    float v229 = _S1;
    __asm { FCVT            H4, S1 }
    float v202 = _S5;
    float v203 = _S26;
    __asm { FCVT            H1, S5 }
    short float v201 = _H1;
    float v204 = _S3;
    float v205 = _S2;
    __asm { FCVT            H1, S3 }
    short float v200 = _H1;
    __asm { FCVT            H1, S26 }
    short float v199 = _H1;
    __asm { FCVT            H1, S2 }
    short float v198 = _H1;
    float v228 = *(float *)(v13 + 36);
    __asm { FCVT            H1, S10 }
    short float v222 = _H1;
    float v226 = *(float *)(v13 + 40);
    __asm { FCVT            H1, S13 }
    short float v221 = _H1;
    float v224 = *(float *)(v13 + 44);
    __asm { FCVT            H1, S17 }
    short float v220 = _H1;
    float v210 = *(float *)(v13 + 48);
    __asm { FCVT            H1, S19 }
    short float v197 = _H1;
    __asm { FCVT            H1, S14 }
    short float v196 = _H1;
    float v208 = *(float *)(v13 + 60);
    float v209 = *(float *)(v13 + 56);
    __asm { FCVT            H1, S21 }
    short float v195 = _H1;
    __asm { FCVT            H1, S22 }
    short float v194 = _H1;
    float v206 = *(float *)(v13 + 68);
    float v207 = *(float *)(v13 + 64);
    __asm { FCVT            H1, S23 }
    short float v193 = _H1;
    __asm { FCVT            H1, S24 }
    short float v192 = _H1;
    float v223 = *(float *)(v13 + 72);
    __asm { FCVT            H1, S25 }
    short float v218 = _H1;
    float v219 = *(float *)(v13 + 76);
    __asm
    {
      FCVT            H1, S27
      FCVT            H2, S28
    }
    short float v217 = _H2;
    float v94 = *(float *)(v13 + 84);
    __asm { FCVT            H2, S29 }
    short float v216 = _H2;
    float v96 = *(float *)(v13 + 88);
    __asm { FCVT            H3, S30 }
    short float v215 = _H3;
    _S3 = *(float *)(v13 + 92);
    __asm { FCVT            H0, S0 }
    short float v214 = _H0;
    _S10 = *(float *)(v13 + 96);
    __asm { FCVT            H0, S6 }
    short float v213 = _H0;
    _S5 = *(float *)(v13 + 100);
    __asm { FCVT            H0, S7 }
    short float v212 = _H0;
    float v104 = (float)v27;
    float v105 = (float)v28;
    v106.i64[0] = 0x9000900090009000;
    v106.i64[1] = 0x9000900090009000;
    float v107 = (float)v29;
    float v211 = (float)v30;
    float v108 = (float)v31;
    uint16x8_t v109 = (uint16x8_t)vdupq_n_s16(-v59);
    _S13 = *(float *)(v13 + 104);
    __asm { FCVT            H7, S20 }
    do
    {
      if ((int)v8 < 8)
      {
        size_t v149 = 0;
        float v116 = v67;
        float v115 = v68;
        float16x8_t v114 = v72;
        float16x8_t v113 = (uint16x8_t *)v73;
      }
      else
      {
        int v112 = 0;
        float16x8_t v113 = (uint16x8_t *)v73;
        float16x8_t v114 = v72;
        float v115 = v68;
        float v116 = v67;
        do
        {
          if (v114)
          {
            int16x8x2_t v232 = vld2q_s16(v114);
            v114 += 16;
            float16x8_t v117 = vaddq_f16(v54, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v232.val[0], v109)));
            float16x8_t v118 = vaddq_f16(v54, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v232.val[1], v109)));
            float16x8_t v119 = vmulq_n_f16(v118, v198);
            float16x8_t v120 = vmlaq_n_f16(vmulq_n_f16(v117, v200), v118, v199);
            float16x8_t v121 = vmulq_n_f16(v117, v201);
          }
          else
          {
            float16x8_t v121 = 0uLL;
            float16x8_t v120 = 0uLL;
            float16x8_t v119 = 0uLL;
          }
          uint16x8_t v122 = *v113++;
          float16x8_t v123 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v122, v109)), v227);
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v119, v123, _H4), (float16x8_t)0), v106));
          float16x8_t v125 = (float16x8_t)vmovl_high_u16(v124);
          float16x8_t v126 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v124.i8);
          v126.i16[0] = *(_WORD *)(v53 + 2 * v126.u32[0]);
          v126.i16[1] = *(_WORD *)(v53 + 2 * v126.u32[1]);
          v126.i16[2] = *(_WORD *)(v53 + 2 * v126.u32[2]);
          v126.i16[3] = *(_WORD *)(v53 + 2 * v126.u32[3]);
          v126.i16[4] = *(_WORD *)(v53 + 2 * v125.u32[0]);
          v126.i16[5] = *(_WORD *)(v53 + 2 * v125.u32[1]);
          v126.i16[6] = *(_WORD *)(v53 + 2 * v125.u32[2]);
          v126.i16[7] = *(_WORD *)(v53 + 2 * v125.u32[3]);
          float16x8_t v127 = vmlaq_n_f16(v121, v123, _H4);
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v120, v123, _H4), (float16x8_t)0), v106));
          uint32x4_t v129 = vmovl_high_u16(v128);
          uint32x4_t v130 = vmovl_u16(*(uint16x4_t *)v128.i8);
          v125.i16[0] = *(_WORD *)(v53 + 2 * v130.u32[0]);
          v125.i16[1] = *(_WORD *)(v53 + 2 * v130.u32[1]);
          v125.i16[2] = *(_WORD *)(v53 + 2 * v130.u32[2]);
          v125.i16[3] = *(_WORD *)(v53 + 2 * v130.u32[3]);
          v125.i16[4] = *(_WORD *)(v53 + 2 * v129.u32[0]);
          v125.i16[5] = *(_WORD *)(v53 + 2 * v129.u32[1]);
          v125.i16[6] = *(_WORD *)(v53 + 2 * v129.u32[2]);
          v125.i16[7] = *(_WORD *)(v53 + 2 * v129.u32[3]);
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v127, (float16x8_t)0), v106));
          uint32x4_t v132 = vmovl_high_u16(v131);
          float16x8_t v133 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v131.i8);
          v133.i16[0] = *(_WORD *)(v53 + 2 * v133.u32[0]);
          v133.i16[1] = *(_WORD *)(v53 + 2 * v133.u32[1]);
          v133.i16[2] = *(_WORD *)(v53 + 2 * v133.u32[2]);
          v133.i16[3] = *(_WORD *)(v53 + 2 * v133.u32[3]);
          v133.i16[4] = *(_WORD *)(v53 + 2 * v132.u32[0]);
          v133.i16[5] = *(_WORD *)(v53 + 2 * v132.u32[1]);
          v133.i16[6] = *(_WORD *)(v53 + 2 * v132.u32[2]);
          v133.i16[7] = *(_WORD *)(v53 + 2 * v132.u32[3]);
          float16x8_t v134 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v126, v216), v125, v215), v133, v214);
          float16x8_t v135 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v133, _H7), v125, v212), v126, v213);
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v126, v218), v125, _H1), v133, v217), (float16x8_t)0), v106));
          uint32x4_t v137 = vmovl_high_u16(v136);
          uint32x4_t v138 = vmovl_u16(*(uint16x4_t *)v136.i8);
          v139.i16[0] = *((_WORD *)result + v138.u32[0]);
          v139.i16[1] = *((_WORD *)result + v138.u32[1]);
          v139.i16[2] = *((_WORD *)result + v138.u32[2]);
          v139.i16[3] = *((_WORD *)result + v138.u32[3]);
          v139.i16[4] = *((_WORD *)result + v137.u32[0]);
          v139.i16[5] = *((_WORD *)result + v137.u32[1]);
          v139.i16[6] = *((_WORD *)result + v137.u32[2]);
          v139.i16[7] = *((_WORD *)result + v137.u32[3]);
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v134, (float16x8_t)0), v106));
          uint32x4_t v141 = vmovl_high_u16(v140);
          uint32x4_t v142 = vmovl_u16(*(uint16x4_t *)v140.i8);
          v143.i16[0] = *((_WORD *)result + v142.u32[0]);
          v143.i16[1] = *((_WORD *)result + v142.u32[1]);
          v143.i16[2] = *((_WORD *)result + v142.u32[2]);
          v143.i16[3] = *((_WORD *)result + v142.u32[3]);
          v143.i16[4] = *((_WORD *)result + v141.u32[0]);
          v143.i16[5] = *((_WORD *)result + v141.u32[1]);
          v143.i16[6] = *((_WORD *)result + v141.u32[2]);
          v143.i16[7] = *((_WORD *)result + v141.u32[3]);
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v135, (float16x8_t)0), v106));
          uint32x4_t v145 = vmovl_high_u16(v144);
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v144.i8);
          v147.i16[0] = *((_WORD *)result + v146.u32[0]);
          v147.i16[1] = *((_WORD *)result + v146.u32[1]);
          v147.i16[2] = *((_WORD *)result + v146.u32[2]);
          v147.i16[3] = *((_WORD *)result + v146.u32[3]);
          v147.i16[4] = *((_WORD *)result + v145.u32[0]);
          v147.i16[5] = *((_WORD *)result + v145.u32[1]);
          v147.i16[6] = *((_WORD *)result + v145.u32[2]);
          v147.i16[7] = *((_WORD *)result + v145.u32[3]);
          *v115++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v55, v139, v222), v143, v221), v147, v220), v55), v225)));
          if (v116)
          {
            float16x8_t v148 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v56, v139, v194), v143, v193), v147, v192);
            v231.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v56, v139, v197), v143, v196), v147, v195), v64), v65), v64), v65)));
            v231.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(v148));
            vst2_s8(v116, v231);
            v116 += 16;
          }
          v112 += 8;
        }
        while (v112 < (int)v8 - 7);
        size_t v149 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v149;
      size_t v150 = v8 - v149;
      if (v150 != 0 && _CF)
      {
        do
        {
          if (v114)
          {
            float v151 = (float)(*(unsigned __int16 *)v114 >> v59) - v40;
            float v152 = (float)(*((unsigned __int16 *)v114 + 1) >> v59) - v40;
            v114 += 2;
            float v153 = v205 * v152;
            float v154 = (float)(v203 * v152) + (float)(v151 * v204);
            float v155 = v202 * v151;
          }
          else
          {
            float v155 = 0.0;
            float v154 = 0.0;
            float v153 = 0.0;
          }
          unsigned int v156 = v113->u16[0];
          float16x8_t v113 = (uint16x8_t *)((char *)v113 + 2);
          float v157 = v229 * (float)((float)(int)(v156 >> v59) - v230);
          float v158 = v153 + v157;
          float v159 = 8191.0;
          if (v158 <= 8191.0)
          {
            float v159 = v158;
            if (v158 < 0.0) {
              float v159 = 0.0;
            }
          }
          float v160 = v154 + v157;
          BOOL v161 = (float)(v154 + v157) <= 8191.0;
          float v162 = 8191.0;
          if (v161)
          {
            float v162 = v160;
            if (v160 < 0.0) {
              float v162 = 0.0;
            }
          }
          float v163 = v155 + v157;
          BOOL v161 = (float)(v155 + v157) <= 8191.0;
          float v164 = 8191.0;
          if (v161)
          {
            float v164 = v163;
            if (v163 < 0.0) {
              float v164 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H6 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H20 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          float v171 = (float)((float)(v219 * _S6) + (float)(_S0 * v223)) + (float)(_S20 * _S28);
          float v172 = (float)((float)(v96 * _S6) + (float)(_S0 * v94)) + (float)(_S20 * _S3);
          _S0 = (float)(_S5 * _S6) + (float)(_S0 * _S10);
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(v171, 0.0), 8191.0)));
          __asm { FCVT            S23, H6 }
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(v172, 0.0), 8191.0)));
          __asm { FCVT            S24, H6 }
          LOWORD(_S0) = *((_WORD *)result + llroundf(fminf(fmaxf(_S0 + (float)(_S20 * _S13), 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          float v177 = (float)((float)(v226 * _S24) + (float)(v228 * _S23)) + (float)(v224 * _S26);
          float v178 = v107;
          if ((float)(v177 + v104) <= v107)
          {
            float v178 = v177 + v104;
            if ((float)(v177 + v104) < v104) {
              float v178 = v104;
            }
          }
          v115->i8[0] = llroundf(v178);
          float v115 = (int8x8_t *)((char *)v115 + 1);
          if (v116)
          {
            float v179 = (float)((float)(v105 + (float)(_S23 * v210)) + (float)(_S24 * _S14)) + (float)(_S26 * v209);
            float v180 = v108;
            if (v179 <= v108)
            {
              float v180 = (float)((float)(v105 + (float)(_S23 * v210)) + (float)(_S24 * _S14)) + (float)(_S26 * v209);
              if (v179 < v211) {
                float v180 = v211;
              }
            }
            float v181 = (float)((float)(v105 + (float)(_S23 * v208)) + (float)(_S24 * v207)) + (float)(_S26 * v206);
            *float v116 = llroundf(v180);
            float v182 = v108;
            if (v181 <= v108)
            {
              float v182 = v181;
              if (v181 < v211) {
                float v182 = v211;
              }
            }
            v116[1] = llroundf(v182);
            v116 += 2;
          }
          --v150;
        }
        while (v150);
      }
      v73 += v19;
      float v72 = (const __int16 *)((char *)v72 + v20);
      uint64_t v68 = (int8x8_t *)((char *)v68 + v22);
      v67 += v23;
      ++v7;
    }
    while (v7 != v11);
    if (v191 && v190)
    {
      uint64_t v183 = 0;
      do
      {
        if (v8)
        {
          size_t v184 = v8;
          float v185 = v24;
          float v186 = (unsigned __int16 *)v21;
          do
          {
            unsigned int v187 = *v186++;
            *v185++ = llroundf((float)v187 * 0.0038911);
            --v184;
          }
          while (v184);
        }
        v21 += v188;
        v24 += v189;
        ++v183;
      }
      while (v183 != v11);
    }
    else if (v190)
    {
      do
      {
        if (v8) {
          double result = memset(v24, 255, v8);
        }
        v24 += v189;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Mat_TRC_444vf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    unint64_t v15 = result[13] * a2 / v6;
    unint64_t v16 = (uint64_t *)result[16];
    unint64_t v17 = v15 + result[15];
    uint64_t v18 = result[19];
    uint64_t v19 = (uint64_t *)result[7];
    int64x2_t v20 = (uint64_t *)result[8];
    long long v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = v25 + v24 * v12 + 2 * v11;
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    unsigned int v31 = (unsigned char *)(v30 + v29 * v17 + v14);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v33 = (float)LODWORD(a4);
    float v34 = (float)LODWORD(a5);
    float v35 = v32 * *(float *)v18;
    float v122 = v32 * *(float *)(v18 + 16);
    float v123 = v32 * *(float *)(v18 + 8);
    float v36 = v32 * *(float *)(v18 + 20);
    *(float *)&unsigned int v37 = v32 * *(float *)(v18 + 28);
    float v120 = *(float *)&v37;
    float v121 = v36;
    LOWORD(v37) = *(_WORD *)(v18 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v18 + 36);
    float v44 = *(float *)(v18 + 40);
    float v45 = *(float *)(v18 + 44);
    float v119 = *(float *)(v18 + 48);
    float v46 = *(float *)(v18 + 52);
    float v47 = *(float *)(v18 + 56);
    float v48 = *(float *)(v18 + 60);
    float v49 = *(float *)(v18 + 64);
    float v50 = *(float *)(v18 + 68);
    float v51 = *(float *)(v18 + 72);
    float v53 = *(float *)(v18 + 76);
    float v52 = *(float *)(v18 + 80);
    float v54 = *(float *)(v18 + 84);
    float v55 = *(float *)(v18 + 88);
    float v56 = *(float *)(v18 + 92);
    float v57 = *(float *)(v18 + 96);
    float v58 = *(float *)(v18 + 100);
    float v59 = *(float *)(v18 + 104);
    uint64_t v60 = v18 + 164;
    double result = (void *)(v18 + 16548);
    unsigned int v61 = *(unsigned __int8 *)(v18 + 124);
    if (v61 >= 0x11) {
      char v62 = 0;
    }
    else {
      char v62 = 16 - v61;
    }
    uint64_t v64 = *v16;
    uint64_t v63 = v16[1];
    float16x8_t v65 = (unsigned char *)(v63 + v28 * v17 + v14);
    if (!v63) {
      float16x8_t v65 = 0;
    }
    uint64_t v66 = (unsigned char *)(v64 + v27 * v17 + v14);
    uint64_t v68 = *v19;
    uint64_t v67 = v19[1];
    uint64_t v69 = v67 + v23 * v12 + 2 * v11;
    if (!v67) {
      uint64_t v69 = 0;
    }
    uint64_t v70 = v68 + v22 * v12 + 2 * v11;
    char v71 = v62;
    do
    {
      size_t v72 = v10;
      uint64_t v73 = (unsigned __int16 *)v70;
      size_t v74 = (unsigned __int16 *)v69;
      float v75 = v65;
      for (uint64_t i = v66; v72; --v72)
      {
        if (v74)
        {
          float v77 = (float)(*v74 >> v71) - v34;
          float v78 = (float)(v74[1] >> v71) - v34;
          v74 += 2;
          float v79 = v123 * v78;
          float v80 = (float)(v121 * v78) + (float)(v77 * v122);
          float v81 = v120 * v77;
        }
        else
        {
          float v81 = 0.0;
          float v80 = 0.0;
          float v79 = 0.0;
        }
        unsigned int v82 = *v73++;
        float v83 = v35 * (float)((float)(int)(v82 >> v71) - v33);
        float v84 = v79 + v83;
        float v85 = 8191.0;
        if (v84 <= 8191.0)
        {
          float v85 = v84;
          if (v84 < 0.0) {
            float v85 = 0.0;
          }
        }
        float v86 = v80 + v83;
        BOOL v87 = (float)(v80 + v83) <= 8191.0;
        float v88 = 8191.0;
        if (v87)
        {
          float v88 = v86;
          if (v86 < 0.0) {
            float v88 = 0.0;
          }
        }
        float v89 = v81 + v83;
        BOOL v87 = (float)(v81 + v83) <= 8191.0;
        float v90 = 8191.0;
        if (v87)
        {
          float v90 = v89;
          if (v89 < 0.0) {
            float v90 = 0.0;
          }
        }
        _H0 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        _H5 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        _H4 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        float v101 = (float)((float)(v53 * _S5) + (float)(_S0 * v51)) + (float)(_S4 * v52);
        float v102 = (float)((float)(v55 * _S5) + (float)(_S0 * v54)) + (float)(_S4 * v56);
        _S0 = (float)((float)(v58 * _S5) + (float)(_S0 * v57)) + (float)(_S4 * v59);
        LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        LOWORD(_S5) = *((_WORD *)result + llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        LOWORD(_S0) = *((_WORD *)result + llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S6, H0 }
        float v107 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
        float v108 = v40;
        if (v107 <= v40)
        {
          float v108 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          if (v107 < v38) {
            float v108 = v38;
          }
        }
        *i++ = llroundf(v108);
        if (v75)
        {
          float v109 = (float)((float)(v39 + (float)(_S4 * v119)) + (float)(_S5 * v46)) + (float)(_S6 * v47);
          float v110 = v42;
          if (v109 <= v42)
          {
            float v110 = (float)((float)(v39 + (float)(_S4 * v119)) + (float)(_S5 * v46)) + (float)(_S6 * v47);
            if (v109 < v41) {
              float v110 = v41;
            }
          }
          float v111 = (float)(v39 + (float)(_S4 * v48)) + (float)(_S5 * v49);
          float v112 = v111 + (float)(_S6 * v50);
          *float v75 = llroundf(v110);
          float v113 = v42;
          if (v112 <= v42)
          {
            float v113 = v111 + (float)(_S6 * v50);
            if (v112 < v41) {
              float v113 = v41;
            }
          }
          v75[1] = llroundf(v113);
          v75 += 2;
        }
      }
      v70 += v22;
      v69 += v23;
      v66 += v27;
      v65 += v28;
      ++v9;
    }
    while (v9 != v13);
    if (v25 && v30)
    {
      uint64_t v114 = 0;
      do
      {
        if (v10)
        {
          size_t v115 = v10;
          float v116 = v31;
          float16x8_t v117 = (unsigned __int16 *)v26;
          do
          {
            unsigned int v118 = *v117++;
            *v116++ = llroundf((float)v118 * 0.0038911);
            --v115;
          }
          while (v115);
        }
        v26 += v24;
        v31 += v29;
        ++v114;
      }
      while (v114 != v13);
    }
    else if (v30)
    {
      do
      {
        if (v10) {
          double result = memset(v31, 255, v10);
        }
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_444vf_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_444vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf444_rgb_444vf_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double _D5)
{
  uint64_t v9 = *(void *)((char *)result + 28);
  unint64_t v10 = *(unsigned __int8 *)result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    size_t v14 = *(void *)((char *)result + 20);
    uint64_t v15 = *(void *)((char *)result + 36);
    unint64_t v16 = v11 + *(void *)((char *)result + 44);
    unint64_t v17 = v12 - v11;
    uint64_t v18 = result[14];
    uint64_t v19 = (uint64_t *)result[16];
    unint64_t v20 = result[13] * a2 / v10 + result[15];
    uint64_t v21 = result[19];
    int64x2_t v22 = (uint64_t *)result[7];
    uint64_t v23 = (uint64_t *)result[8];
    uint64_t v24 = (uint64_t *)result[17];
    uint64_t v25 = *v23;
    uint64_t v26 = v23[1];
    uint64_t v27 = v23[2];
    uint64_t v28 = v22[2];
    uint64_t v29 = v28 + v27 * v16 + 2 * v15;
    uint64_t v30 = *v24;
    uint64_t v31 = v24[1];
    uint64_t v32 = v24[2];
    uint64_t v33 = v19[2];
    float v34 = (unsigned char *)(v33 + v32 * v20 + v18);
    unsigned int v35 = *(unsigned __int16 *)(v21 + 140);
    unsigned int v36 = *(unsigned __int16 *)(v21 + 142);
    unsigned int v37 = *(unsigned __int16 *)(v21 + 144);
    unsigned int v38 = *(unsigned __int16 *)(v21 + 146);
    unsigned int v39 = *(unsigned __int16 *)(v21 + 148);
    float v40 = (float)v35;
    *(short float *)v8.i16 = (short float)v35;
    unsigned int v41 = *(unsigned __int16 *)(v21 + 150);
    float v42 = (float)v36;
    short float v43 = (short float)v36;
    unsigned int v44 = *(unsigned __int16 *)(v21 + 152);
    _S2 = *(float *)(v21 + 36);
    _S3 = *(float *)(v21 + 40);
    _S4 = *(float *)(v21 + 44);
    _S28 = *(float *)(v21 + 48);
    _S11 = *(float *)(v21 + 52);
    _S18 = *(float *)(v21 + 56);
    _S16 = *(float *)(v21 + 60);
    _S17 = *(float *)(v21 + 64);
    float v137 = *(float *)(v21 + 68);
    *(float *)&_D5 = (float)*(unsigned int *)(v21 + 136) / (float)*(unsigned int *)(v21 + 128);
    _S19 = *(float *)&_D5 * *(float *)v21;
    _S6 = *(float *)&_D5 * *(float *)(v21 + 8);
    _S7 = *(float *)&_D5 * *(float *)(v21 + 16);
    _S26 = *(float *)&_D5 * *(float *)(v21 + 20);
    float v57 = (float)v37;
    float v58 = (float)v38;
    float v59 = (float)v39;
    _S31 = *(float *)&_D5 * *(float *)(v21 + 28);
    float v61 = (float)v41;
    float v62 = (float)v44;
    __asm { FCVT            H8, S19 }
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(v8, 0);
    *(short float *)&_D5 = -v43;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D5, 0);
    float v148 = _S31;
    __asm { FCVT            H5, S31 }
    short float v147 = *(short float *)&_D5;
    float v150 = _S7;
    __asm { FCVT            H5, S7 }
    short float v145 = *(short float *)&_D5;
    float v149 = _S26;
    __asm { FCVT            H5, S26 }
    short float v144 = *(short float *)&_D5;
    *(short float *)&_D5 = (short float)v37;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D5, 0);
    *(short float *)&_D5 = (short float)v38;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D5, 0);
    *(short float *)&_D5 = (short float)v39;
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D5, 0);
    *(short float *)&_D5 = (short float)v41;
    float16x8_t v73 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D5, 0);
    *(short float *)&_D5 = (short float)v44;
    float16x8_t v74 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D5, 0);
    unsigned int v75 = *(unsigned __int8 *)(v21 + 124);
    unsigned __int8 v76 = 16 - v75;
    if (v75 >= 0x11) {
      unsigned __int8 v76 = 0;
    }
    uint64_t v78 = *v19;
    uint64_t v77 = v19[1];
    float v79 = (char *)(v77 + v31 * v20 + v18);
    if (!v77) {
      float v79 = 0;
    }
    double result = (void *)(v78 + v30 * v20 + v18);
    uint64_t v81 = *v22;
    uint64_t v80 = v22[1];
    uint64_t v82 = v80 + v26 * v16 + 2 * v15;
    if (!v80) {
      uint64_t v82 = 0;
    }
    uint64_t v83 = v81 + v25 * v16 + 2 * v15;
    unsigned __int8 v84 = v76;
    float v151 = _S6;
    __asm { FCVT            H5, S6 }
    short float v143 = _H5;
    __asm
    {
      FCVT            H6, S2
      FCVT            H7, S3
      FCVT            H9, S4
    }
    float v153 = _S28;
    __asm { FCVT            H5, S28 }
    short float v142 = _H5;
    float v152 = _S11;
    __asm { FCVT            H5, S11 }
    short float v141 = _H5;
    float v146 = _S18;
    __asm { FCVT            H5, S18 }
    short float v140 = _H5;
    float v92 = _S16;
    __asm { FCVT            H10, S16 }
    short float v139 = _H10;
    float v94 = _S17;
    __asm { FCVT            H10, S17 }
    short float v138 = _H10;
    _S10 = v137;
    __asm { FCVT            H11, S16 }
    uint16x8_t v98 = (uint16x8_t)vdupq_n_s16(-v76);
    do
    {
      if ((int)v14 < 8)
      {
        size_t v114 = 0;
        float v103 = v79;
        float v102 = (int8x8_t *)result;
        float v101 = (const __int16 *)v82;
        float v100 = (uint16x8_t *)v83;
      }
      else
      {
        int v99 = 0;
        float v100 = (uint16x8_t *)v83;
        float v101 = (const __int16 *)v82;
        float v102 = (int8x8_t *)result;
        float v103 = v79;
        do
        {
          if (v101)
          {
            int16x8x2_t v155 = vld2q_s16(v101);
            v101 += 16;
            float16x8_t v104 = vaddq_f16(v69, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v155.val[0], v98)));
            v155.val[0] = (int16x8_t)vaddq_f16(v69, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v155.val[1], v98)));
            float16x8_t v105 = vmulq_n_f16((float16x8_t)v155.val[0], v143);
            float16x8_t v106 = vmlaq_n_f16(vmulq_n_f16(v104, v145), (float16x8_t)v155.val[0], v144);
            float16x8_t v107 = vmulq_n_f16(v104, v147);
          }
          else
          {
            float16x8_t v107 = 0uLL;
            float16x8_t v106 = 0uLL;
            float16x8_t v105 = 0uLL;
          }
          uint16x8_t v108 = *v100++;
          float16x8_t v109 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v108, v98)), v68);
          float16x8_t v110 = vmlaq_n_f16(v105, v109, _H8);
          float16x8_t v111 = vmlaq_n_f16(v106, v109, _H8);
          float16x8_t v112 = vmlaq_n_f16(v107, v109, _H8);
          *v102++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v70, v110, _H6), v111, _H7), v112, _H9), v70), v72)));
          if (v103)
          {
            float16x8_t v113 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v71, v110, v139), v111, v138), v112, _H11);
            v154.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v71, v110, v142), v111, v141), v112, v140), v73), v74), v73), v74)));
            v154.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(v113));
            vst2_s8(v103, v154);
            v103 += 16;
          }
          v99 += 8;
        }
        while (v99 < (int)v14 - 7);
        size_t v114 = v14 & 0xFFFFFFF8;
      }
      _CF = v14 >= v114;
      size_t v115 = v14 - v114;
      if (v115 != 0 && _CF)
      {
        do
        {
          if (v101)
          {
            float v116 = (float)(*(unsigned __int16 *)v101 >> v84) - v42;
            float v117 = (float)(*((unsigned __int16 *)v101 + 1) >> v84) - v42;
            v101 += 2;
            float v118 = v151 * v117;
            float v119 = (float)(v149 * v117) + (float)(v116 * v150);
            float v120 = v148 * v116;
          }
          else
          {
            float v120 = 0.0;
            float v119 = 0.0;
            float v118 = 0.0;
          }
          unsigned int v121 = v100->u16[0];
          float v100 = (uint16x8_t *)((char *)v100 + 2);
          float v122 = _S19 * (float)((float)(int)(v121 >> v84) - v40);
          float v123 = v118 + v122;
          float v124 = v119 + v122;
          float v125 = v120 + v122;
          float v126 = (float)((float)((float)(_S3 * v124) + (float)(_S2 * v123)) + (float)(_S4 * v125)) + v57;
          float v127 = v59;
          if (v126 <= v59)
          {
            float v127 = (float)((float)((float)(_S3 * v124) + (float)(_S2 * v123)) + (float)(_S4 * v125)) + v57;
            if (v126 < v57) {
              float v127 = v57;
            }
          }
          v102->i8[0] = llroundf(v127);
          float v102 = (int8x8_t *)((char *)v102 + 1);
          if (v103)
          {
            float v128 = (float)((float)(v58 + (float)(v123 * v153)) + (float)(v124 * v152)) + (float)(v125 * v146);
            float v129 = (float)v44;
            if (v128 <= v62)
            {
              float v129 = (float)((float)(v58 + (float)(v123 * v153)) + (float)(v124 * v152)) + (float)(v125 * v146);
              if (v128 < v61) {
                float v129 = v61;
              }
            }
            float v130 = (float)((float)(v58 + (float)(v123 * v92)) + (float)(v124 * v94)) + (float)(v125 * v137);
            *float v103 = llroundf(v129);
            float v131 = (float)v44;
            if (v130 <= v62)
            {
              float v131 = v130;
              if (v130 < v61) {
                float v131 = v61;
              }
            }
            v103[1] = llroundf(v131);
            v103 += 2;
          }
          --v115;
        }
        while (v115);
      }
      v83 += v25;
      v82 += v26;
      double result = (void *)((char *)result + v30);
      v79 += v31;
      ++v13;
    }
    while (v13 != v17);
    if (v28 && v33)
    {
      uint64_t v132 = 0;
      do
      {
        if (v14)
        {
          size_t v133 = v14;
          float16x8_t v134 = v34;
          float16x8_t v135 = (unsigned __int16 *)v29;
          do
          {
            unsigned int v136 = *v135++;
            *v134++ = llroundf((float)v136 * 0.0038911);
            --v133;
          }
          while (v133);
        }
        v29 += v27;
        v34 += v32;
        ++v132;
      }
      while (v132 != v17);
    }
    else if (v33)
    {
      do
      {
        if (v14) {
          double result = memset(v34, 255, v14);
        }
        v34 += v32;
        --v17;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_444vf_GCD);
  return 0;
}

void *vt_Copy_xf444_rgb_444vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v10 = *(void *)((char *)result + 28);
  unint64_t v11 = *(unsigned __int8 *)result;
  unint64_t v12 = v10 * a2 / v11;
  unint64_t v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    uint64_t v14 = 0;
    size_t v15 = *(void *)((char *)result + 20);
    uint64_t v16 = *(void *)((char *)result + 36);
    unint64_t v17 = v12 + *(void *)((char *)result + 44);
    unint64_t v18 = v13 - v12;
    uint64_t v19 = result[14];
    int64x2_t v20 = (uint64_t *)result[16];
    unint64_t v21 = result[13] * a2 / v11 + result[15];
    uint64_t v22 = result[19];
    uint64_t v23 = (uint64_t *)result[7];
    uint64_t v24 = (uint64_t *)result[8];
    uint64_t v25 = (uint64_t *)result[17];
    uint64_t v26 = *v24;
    uint64_t v27 = v24[1];
    uint64_t v28 = v24[2];
    uint64_t v29 = v23[2];
    uint64_t v30 = v29 + v28 * v17 + 2 * v16;
    uint64_t v31 = *v25;
    uint64_t v32 = v25[1];
    uint64_t v33 = v25[2];
    uint64_t v34 = v20[2];
    unsigned int v35 = (unsigned char *)(v34 + v33 * v21 + v19);
    LOWORD(a5) = *(_WORD *)(v22 + 140);
    LOWORD(a6) = *(_WORD *)(v22 + 142);
    float v36 = (float)*(unsigned int *)(v22 + 136) / (float)*(unsigned int *)(v22 + 128);
    float v37 = (float)LODWORD(a5);
    float v38 = (float)LODWORD(a6);
    float v39 = v36 * *(float *)v22;
    float v40 = v36 * *(float *)(v22 + 8);
    float v41 = v36 * *(float *)(v22 + 16);
    float v42 = v36 * *(float *)(v22 + 20);
    float v43 = *(float *)(v22 + 28);
    float v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v22 + 144);
    float v45 = (float)LODWORD(v43);
    LOWORD(v6) = *(_WORD *)(v22 + 146);
    float v46 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v22 + 148);
    float v47 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v22 + 150);
    float v48 = (float)v8;
    LOWORD(v9) = *(_WORD *)(v22 + 152);
    float v49 = (float)v9;
    float v50 = *(float *)(v22 + 36);
    float v51 = *(float *)(v22 + 40);
    float v52 = *(float *)(v22 + 44);
    float v53 = *(float *)(v22 + 48);
    float v54 = *(float *)(v22 + 52);
    float v55 = *(float *)(v22 + 56);
    float v56 = *(float *)(v22 + 60);
    float v57 = *(float *)(v22 + 64);
    float v58 = *(float *)(v22 + 68);
    unsigned int v59 = *(unsigned __int8 *)(v22 + 124);
    char v60 = 16 - v59;
    if (v59 >= 0x11) {
      char v60 = 0;
    }
    uint64_t v62 = *v20;
    uint64_t v61 = v20[1];
    uint64_t v63 = (unsigned char *)(v61 + v32 * v21 + v19);
    if (!v61) {
      uint64_t v63 = 0;
    }
    double result = (void *)(v62 + v31 * v21 + v19);
    uint64_t v65 = *v23;
    uint64_t v64 = v23[1];
    uint64_t v66 = v64 + v27 * v17 + 2 * v16;
    if (!v64) {
      uint64_t v66 = 0;
    }
    uint64_t v67 = v65 + v26 * v17 + 2 * v16;
    char v68 = v60;
    do
    {
      size_t v69 = v15;
      float16x8_t v70 = (unsigned __int16 *)v67;
      float16x8_t v71 = (unsigned __int16 *)v66;
      float16x8_t v72 = v63;
      for (uint64_t i = result; v69; --v69)
      {
        if (v71)
        {
          float v74 = (float)(*v71 >> v68) - v38;
          float v75 = (float)(v71[1] >> v68) - v38;
          v71 += 2;
          float v76 = v40 * v75;
          float v77 = (float)(v42 * v75) + (float)(v74 * v41);
          float v78 = v44 * v74;
        }
        else
        {
          float v78 = 0.0;
          float v77 = 0.0;
          float v76 = 0.0;
        }
        unsigned int v79 = *v70++;
        float v80 = v39 * (float)((float)(int)(v79 >> v68) - v37);
        float v81 = v76 + v80;
        float v82 = v77 + v80;
        float v83 = v78 + v80;
        float v84 = (float)((float)((float)(v51 * v82) + (float)(v50 * v81)) + (float)(v52 * v83)) + v45;
        float v85 = v47;
        if (v84 <= v47)
        {
          float v85 = (float)((float)((float)(v51 * v82) + (float)(v50 * v81)) + (float)(v52 * v83)) + v45;
          if (v84 < v45) {
            float v85 = v45;
          }
        }
        *i++ = llroundf(v85);
        if (v72)
        {
          float v86 = (float)((float)(v46 + (float)(v81 * v53)) + (float)(v82 * v54)) + (float)(v83 * v55);
          float v87 = v49;
          if (v86 <= v49)
          {
            float v87 = (float)((float)(v46 + (float)(v81 * v53)) + (float)(v82 * v54)) + (float)(v83 * v55);
            if (v86 < v48) {
              float v87 = v48;
            }
          }
          float v88 = (float)((float)(v46 + (float)(v81 * v56)) + (float)(v82 * v57)) + (float)(v83 * v58);
          *float16x8_t v72 = llroundf(v87);
          float v89 = v49;
          if (v88 <= v49)
          {
            float v89 = v88;
            if (v88 < v48) {
              float v89 = v48;
            }
          }
          v72[1] = llroundf(v89);
          v72 += 2;
        }
      }
      v67 += v26;
      v66 += v27;
      double result = (void *)((char *)result + v31);
      v63 += v32;
      ++v14;
    }
    while (v14 != v18);
    if (v29 && v34)
    {
      uint64_t v90 = 0;
      do
      {
        if (v15)
        {
          size_t v91 = v15;
          float v92 = v35;
          float v93 = (unsigned __int16 *)v30;
          do
          {
            unsigned int v94 = *v93++;
            *v92++ = llroundf((float)v94 * 0.0038911);
            --v91;
          }
          while (v91);
        }
        v30 += v28;
        v35 += v33;
        ++v90;
      }
      while (v90 != v18);
    }
    else if (v34)
    {
      do
      {
        if (v15) {
          double result = memset(v35, 255, v15);
        }
        v35 += v33;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_xf444_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD(void *result, uint64_t a2, double a3, double _D1)
{
  uint64_t v4 = *(void *)((char *)result + 28);
  unint64_t v5 = *(unsigned __int8 *)result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    unint64_t v9 = *(void *)((char *)result + 20);
    uint64_t v10 = *(void *)((char *)result + 36);
    unint64_t v11 = v6 + *(void *)((char *)result + 44);
    unint64_t v12 = v7 - v6;
    uint64_t v13 = result[14];
    uint64_t v14 = result[19];
    size_t v15 = (void *)result[7];
    uint64_t v16 = (uint64_t *)result[8];
    uint64_t v17 = (void *)result[16];
    uint64_t v18 = (uint64_t *)result[17];
    uint64_t v19 = *v16;
    uint64_t v20 = v16[1];
    unint64_t v21 = result[13] * a2 / v5 + result[15];
    uint64_t v207 = v16[2];
    uint64_t v210 = v15[2];
    int64x2_t v22 = (char *)(v210 + v207 * v11 + 2 * v10);
    uint64_t v23 = *v18;
    uint64_t v24 = v18[1];
    uint64_t v208 = v18[2];
    uint64_t v209 = v17[2];
    uint64_t v25 = (char *)(v209 + v208 * v21 + 2 * v13);
    unsigned int v26 = *(unsigned __int16 *)(v14 + 140);
    unsigned int v27 = *(unsigned __int16 *)(v14 + 142);
    unsigned int v28 = *(unsigned __int16 *)(v14 + 144);
    unsigned int v29 = *(unsigned __int16 *)(v14 + 146);
    unsigned int v30 = *(unsigned __int16 *)(v14 + 148);
    unsigned int v31 = *(unsigned __int16 *)(v14 + 150);
    unsigned int v32 = *(unsigned __int16 *)(v14 + 152);
    _S7 = *(_DWORD *)(v14 + 36);
    _S16 = *(_DWORD *)(v14 + 40);
    _S17 = *(_DWORD *)(v14 + 44);
    _S18 = *(_DWORD *)(v14 + 48);
    _S19 = *(_DWORD *)(v14 + 52);
    _S21 = *(float *)(v14 + 56);
    _S22 = *(_DWORD *)(v14 + 60);
    _S23 = *(_DWORD *)(v14 + 64);
    _S24 = *(_DWORD *)(v14 + 68);
    _S27 = *(_DWORD *)(v14 + 72);
    uint64_t v43 = v14 + 16548;
    *(float *)&a3 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    float v44 = (float)v26;
    float v45 = (float)v27;
    *(float *)&_D1 = *(float *)&a3 * *(float *)v14;
    _S2 = *(float *)&a3 * *(float *)(v14 + 8);
    _S3 = *(float *)&a3 * *(float *)(v14 + 16);
    _S5 = *(float *)&a3 * *(float *)(v14 + 20);
    float v49 = (float)v28;
    float v50 = (float)v29;
    _S6 = *(float *)&a3 * *(float *)(v14 + 28);
    *(short float *)&a3 = (short float)v26;
    uint64_t v52 = v14 + 164;
    float v254 = *(float *)&_D1;
    float v255 = v44;
    __asm { FCVT            H8, S1 }
    int16x8_t v59 = vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    float16x8_t v253 = (float16x8_t)v59;
    *(short float *)v59.i16 = -(short float)v27;
    float16x8_t v58 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v59.i8, 0);
    *(short float *)v59.i16 = (short float)v28;
    *(short float *)&_D1 = (short float)v29;
    unsigned int v60 = *(unsigned __int8 *)(v14 + 132);
    unsigned __int8 v61 = 16 - v60;
    if (v60 >= 0x11) {
      unsigned __int8 v61 = 0;
    }
    unsigned int v62 = *(unsigned __int8 *)(v14 + 124);
    unsigned __int8 v63 = 16 - v62;
    if (v62 >= 0x11) {
      unsigned __int8 v63 = 0;
    }
    uint64_t v64 = v17[1] + v24 * v21;
    uint64_t v65 = *v17 + v23 * v21;
    float v221 = _S6;
    float v222 = _S5;
    __asm { FCVT            H6, S6 }
    float v223 = _S3;
    float v224 = _S2;
    __asm { FCVT            H3, S3 }
    short float v219 = _H3;
    short float v220 = _H6;
    __asm { FCVT            H3, S5 }
    uint64_t v69 = v14 + 32932;
    __asm { FCVT            H2, S2 }
    short float v217 = _H2;
    short float v218 = _H3;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v59.i8, 0);
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D1, 0);
    *(short float *)v59.i16 = (short float)v30;
    int16x8_t v73 = vdupq_lane_s16(*(int16x4_t *)v59.i8, 0);
    float16x8_t v252 = (float16x8_t)v73;
    *(short float *)v73.i16 = (short float)v31;
    float16x8_t v74 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v73.i8, 0);
    *(short float *)v73.i16 = (short float)v32;
    float16x8_t v75 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v73.i8, 0);
    double result = (void *)(v64 + 2 * v13);
    if (_ZF) {
      double result = 0;
    }
    float v76 = (uint16x8_t *)(v65 + 2 * v13);
    unsigned int v79 = v15;
    uint64_t v77 = *v15;
    uint64_t v78 = v79[1];
    _ZF = v78 == 0;
    uint64_t v80 = v78 + v20 * v11 + 2 * v10;
    if (_ZF) {
      float v81 = 0;
    }
    else {
      float v81 = (const __int16 *)v80;
    }
    uint64_t v82 = v77 + v19 * v11 + 2 * v10;
    unsigned __int8 v83 = v61;
    float v258 = *(float *)(v14 + 40);
    float v259 = *(float *)(v14 + 36);
    __asm { FCVT            H5, S7 }
    short float v249 = _H5;
    __asm { FCVT            H5, S16 }
    short float v248 = _H5;
    float v257 = *(float *)(v14 + 44);
    __asm { FCVT            H5, S17 }
    short float v247 = _H5;
    float v229 = *(float *)(v14 + 48);
    __asm { FCVT            H5, S18 }
    short float v216 = _H5;
    float v228 = *(float *)(v14 + 52);
    __asm { FCVT            H5, S19 }
    short float v215 = _H5;
    float v227 = *(float *)(v14 + 60);
    __asm { FCVT            H5, S21 }
    short float v214 = _H5;
    __asm { FCVT            H5, S22 }
    short float v213 = _H5;
    float v225 = *(float *)(v14 + 68);
    float v226 = *(float *)(v14 + 64);
    __asm { FCVT            H5, S23 }
    short float v212 = _H5;
    __asm { FCVT            H5, S24 }
    short float v211 = _H5;
    float v251 = *(float *)(v14 + 108);
    __asm { FCVT            H0, S0 }
    short float v246 = _H0;
    float v250 = *(float *)(v14 + 112);
    __asm { FCVT            H0, S1 }
    short float v245 = _H0;
    float v242 = *(float *)(v14 + 116);
    __asm { FCVT            H0, S2 }
    short float v244 = _H0;
    float v237 = *(float *)(v14 + 120);
    __asm { FCVT            H0, S3 }
    short float v243 = _H0;
    float v256 = *(float *)(v14 + 72);
    __asm { FCVT            H0, S27 }
    float v234 = *(float *)(v14 + 76);
    __asm { FCVT            H1, S1 }
    short float v240 = _H1;
    short float v241 = _H0;
    _S12 = *(float *)(v14 + 80);
    __asm { FCVT            H1, S2 }
    short float v239 = _H1;
    float v101 = (float)v30;
    _S11 = *(float *)(v14 + 84);
    __asm { FCVT            H1, S1 }
    short float v238 = _H1;
    float v230 = (float)v31;
    float v104 = (float)v32;
    v105.i64[0] = 0x9000900090009000;
    v105.i64[1] = 0x9000900090009000;
    uint16x8_t v106 = (uint16x8_t)vdupq_n_s16(-v63);
    uint16x8_t v107 = (uint16x8_t)vdupq_n_s16(v61);
    _S1 = *(float *)(v14 + 88);
    __asm { FCVT            H2, S2 }
    short float v236 = _H2;
    _S5 = *(float *)(v14 + 92);
    __asm { FCVT            H2, S3 }
    short float v235 = _H2;
    _S2 = *(float *)(v14 + 96);
    __asm { FCVT            H0, S7 }
    short float v233 = _H0;
    _S13 = *(float *)(v14 + 100);
    __asm { FCVT            H0, S17 }
    short float v232 = _H0;
    _S0 = *(float *)(v14 + 104);
    __asm { FCVT            H3, S18 }
    short float v231 = _H3;
    do
    {
      if ((int)v9 < 8)
      {
        unint64_t v164 = 0;
        float v122 = (__int16 *)result;
        unsigned int v121 = v76;
        float v120 = v81;
        float v119 = (uint16x8_t *)v82;
      }
      else
      {
        int v118 = 0;
        float v119 = (uint16x8_t *)v82;
        float v120 = v81;
        unsigned int v121 = v76;
        float v122 = (__int16 *)result;
        do
        {
          if (v120)
          {
            int16x8x2_t v260 = vld2q_s16(v120);
            v120 += 16;
            float16x8_t v123 = vaddq_f16(v58, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v260.val[0], v106)));
            float16x8_t v124 = vaddq_f16(v58, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v260.val[1], v106)));
            float16x8_t v125 = vmulq_n_f16(v124, v217);
            float16x8_t v126 = vmlaq_n_f16(vmulq_n_f16(v123, v219), v124, v218);
            float16x8_t v127 = vmulq_n_f16(v123, v220);
          }
          else
          {
            float16x8_t v127 = 0uLL;
            float16x8_t v126 = 0uLL;
            float16x8_t v125 = 0uLL;
          }
          uint16x8_t v128 = *v119++;
          float16x8_t v129 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v128, v106)), v253);
          float16x8_t v130 = vmlaq_n_f16(v126, v129, _H8);
          float16x8_t v131 = vmlaq_n_f16(v127, v129, _H8);
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v125, v129, _H8), (float16x8_t)0), v105));
          float16x8_t v133 = (float16x8_t)vmovl_high_u16(v132);
          *(void *)&long long v134 = v133.u32[2];
          *((void *)&v134 + 1) = v133.u32[3];
          long long v135 = v134;
          *(void *)&long long v134 = v133.u32[0];
          *((void *)&v134 + 1) = v133.u32[1];
          uint32x4_t v136 = vmovl_u16(*(uint16x4_t *)v132.i8);
          v133.i16[0] = *(_WORD *)(v52 + 2 * v136.u32[0]);
          v133.i16[1] = *(_WORD *)(v52 + 2 * v136.u32[1]);
          v133.i16[2] = *(_WORD *)(v52 + 2 * v136.u32[2]);
          v133.i16[3] = *(_WORD *)(v52 + 2 * v136.u32[3]);
          v133.i16[4] = *(_WORD *)(v52 + 2 * v134);
          v133.i16[5] = *(_WORD *)(v52 + 2 * *((void *)&v134 + 1));
          v133.i16[6] = *(_WORD *)(v52 + 2 * v135);
          v133.i16[7] = *(_WORD *)(v52 + 2 * *((void *)&v135 + 1));
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v130, (float16x8_t)0), v105));
          uint32x4_t v138 = vmovl_high_u16(v137);
          uint32x4_t v139 = vmovl_u16(*(uint16x4_t *)v137.i8);
          v130.i16[0] = *(_WORD *)(v52 + 2 * v139.u32[0]);
          v130.i16[1] = *(_WORD *)(v52 + 2 * v139.u32[1]);
          v130.i16[2] = *(_WORD *)(v52 + 2 * v139.u32[2]);
          v130.i16[3] = *(_WORD *)(v52 + 2 * v139.u32[3]);
          v130.i16[4] = *(_WORD *)(v52 + 2 * v138.u32[0]);
          v130.i16[5] = *(_WORD *)(v52 + 2 * v138.u32[1]);
          v130.i16[6] = *(_WORD *)(v52 + 2 * v138.u32[2]);
          v130.i16[7] = *(_WORD *)(v52 + 2 * v138.u32[3]);
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, (float16x8_t)0), v105));
          uint32x4_t v141 = vmovl_high_u16(v140);
          float16x8_t v142 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v140.i8);
          v142.i16[0] = *(_WORD *)(v52 + 2 * v142.u32[0]);
          v142.i16[1] = *(_WORD *)(v52 + 2 * v142.u32[1]);
          v142.i16[2] = *(_WORD *)(v52 + 2 * v142.u32[2]);
          v142.i16[3] = *(_WORD *)(v52 + 2 * v142.u32[3]);
          v142.i16[4] = *(_WORD *)(v52 + 2 * v141.u32[0]);
          v142.i16[5] = *(_WORD *)(v52 + 2 * v141.u32[1]);
          v142.i16[6] = *(_WORD *)(v52 + 2 * v141.u32[2]);
          v142.i16[7] = *(_WORD *)(v52 + 2 * v141.u32[3]);
          uint16x8_t v143 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v133, v246), v130, v245), v142, v244), vmaxq_f16(vmaxq_f16(v133, v130), v142), v243), (float16x8_t)0), v105));
          uint32x4_t v144 = vmovl_high_u16(v143);
          float16x8_t v145 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v143.i8);
          v145.i16[0] = *(_WORD *)(v43 + 2 * v145.u32[0]);
          v145.i16[1] = *(_WORD *)(v43 + 2 * v145.u32[1]);
          v145.i16[2] = *(_WORD *)(v43 + 2 * v145.u32[2]);
          v145.i16[3] = *(_WORD *)(v43 + 2 * v145.u32[3]);
          v145.i16[4] = *(_WORD *)(v43 + 2 * v144.u32[0]);
          v145.i16[5] = *(_WORD *)(v43 + 2 * v144.u32[1]);
          v145.i16[6] = *(_WORD *)(v43 + 2 * v144.u32[2]);
          v145.i16[7] = *(_WORD *)(v43 + 2 * v144.u32[3]);
          float16x8_t v146 = vmulq_f16(v133, v145);
          float16x8_t v147 = vmulq_f16(v130, v145);
          float16x8_t v148 = vmulq_f16(v142, v145);
          float16x8_t v149 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v146, v238), v147, v236), v148, v235);
          float16x8_t v150 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v148, v231), v147, v232), v146, v233);
          uint16x8_t v151 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v146, v241), v147, v240), v148, v239), (float16x8_t)0), v105));
          uint32x4_t v152 = vmovl_high_u16(v151);
          uint32x4_t v153 = vmovl_u16(*(uint16x4_t *)v151.i8);
          v154.i16[0] = *(_WORD *)(v69 + 2 * v153.u32[0]);
          v154.i16[1] = *(_WORD *)(v69 + 2 * v153.u32[1]);
          v154.i16[2] = *(_WORD *)(v69 + 2 * v153.u32[2]);
          v154.i16[3] = *(_WORD *)(v69 + 2 * v153.u32[3]);
          v154.i16[4] = *(_WORD *)(v69 + 2 * v152.u32[0]);
          v154.i16[5] = *(_WORD *)(v69 + 2 * v152.u32[1]);
          v154.i16[6] = *(_WORD *)(v69 + 2 * v152.u32[2]);
          v154.i16[7] = *(_WORD *)(v69 + 2 * v152.u32[3]);
          uint16x8_t v155 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v149, (float16x8_t)0), v105));
          uint32x4_t v156 = vmovl_high_u16(v155);
          uint32x4_t v157 = vmovl_u16(*(uint16x4_t *)v155.i8);
          v158.i16[0] = *(_WORD *)(v69 + 2 * v157.u32[0]);
          v158.i16[1] = *(_WORD *)(v69 + 2 * v157.u32[1]);
          v158.i16[2] = *(_WORD *)(v69 + 2 * v157.u32[2]);
          v158.i16[3] = *(_WORD *)(v69 + 2 * v157.u32[3]);
          v158.i16[4] = *(_WORD *)(v69 + 2 * v156.u32[0]);
          v158.i16[5] = *(_WORD *)(v69 + 2 * v156.u32[1]);
          v158.i16[6] = *(_WORD *)(v69 + 2 * v156.u32[2]);
          v158.i16[7] = *(_WORD *)(v69 + 2 * v156.u32[3]);
          uint16x8_t v159 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v150, (float16x8_t)0), v105));
          uint32x4_t v160 = vmovl_high_u16(v159);
          uint32x4_t v161 = vmovl_u16(*(uint16x4_t *)v159.i8);
          v162.i16[0] = *(_WORD *)(v69 + 2 * v161.u32[0]);
          v162.i16[1] = *(_WORD *)(v69 + 2 * v161.u32[1]);
          v162.i16[2] = *(_WORD *)(v69 + 2 * v161.u32[2]);
          v162.i16[3] = *(_WORD *)(v69 + 2 * v161.u32[3]);
          v162.i16[4] = *(_WORD *)(v69 + 2 * v160.u32[0]);
          v162.i16[5] = *(_WORD *)(v69 + 2 * v160.u32[1]);
          v162.i16[6] = *(_WORD *)(v69 + 2 * v160.u32[2]);
          v162.i16[7] = *(_WORD *)(v69 + 2 * v160.u32[3]);
          *v121++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v71, v154, v249), v158, v248), v162, v247), v71), v252)), v107);
          if (v122)
          {
            float16x8_t v163 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v72, v154, v213), v158, v212), v162, v211);
            v261.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v72, v154, v216), v158, v215), v162, v214), v74), v75), v74), v75)), v107);
            v261.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(v163), v107);
            vst2q_s16(v122, v261);
            v122 += 16;
          }
          v118 += 8;
        }
        while (v118 < (int)v9 - 7);
        unint64_t v164 = v9 & 0xFFFFFFF8;
      }
      _CF = v9 >= v164;
      unint64_t v165 = v9 - v164;
      if (v165 != 0 && _CF)
      {
        do
        {
          if (v120)
          {
            float v166 = (float)(*(unsigned __int16 *)v120 >> v63) - v45;
            float v167 = (float)(*((unsigned __int16 *)v120 + 1) >> v63) - v45;
            v120 += 2;
            float v168 = v224 * v167;
            float v169 = (float)(v222 * v167) + (float)(v166 * v223);
            float v170 = v221 * v166;
          }
          else
          {
            float v170 = 0.0;
            float v169 = 0.0;
            float v168 = 0.0;
          }
          unsigned int v171 = v119->u16[0];
          float v119 = (uint16x8_t *)((char *)v119 + 2);
          float v172 = v254 * (float)((float)(int)(v171 >> v63) - v255);
          float v173 = v168 + v172;
          float v174 = 8191.0;
          if (v173 <= 8191.0)
          {
            float v174 = v173;
            if (v173 < 0.0) {
              float v174 = 0.0;
            }
          }
          float v175 = v169 + v172;
          BOOL v176 = (float)(v169 + v172) <= 8191.0;
          float v177 = 8191.0;
          if (v176)
          {
            float v177 = v175;
            if (v175 < 0.0) {
              float v177 = 0.0;
            }
          }
          float v178 = v170 + v172;
          float v179 = 8191.0;
          if (v178 <= 8191.0)
          {
            float v179 = v178;
            if (v178 < 0.0) {
              float v179 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v174, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H7 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v177, 0.0), 8191.0)));
          __asm { FCVT            S23, H7 }
          _H7 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v179, 0.0), 8191.0)));
          __asm { FCVT            S24, H7 }
          float v186 = fmaxf(_S3, fmaxf(_S23, _S24));
          float v187 = (float)((float)((float)(v250 * _S23) + (float)(v251 * _S3)) + (float)(v242 * _S24))
               + (float)(v237 * v186);
          float v188 = 8191.0;
          if (v187 <= 8191.0)
          {
            float v188 = (float)((float)((float)(v250 * _S23) + (float)(v251 * _S3)) + (float)(v242 * _S24))
                 + (float)(v237 * v186);
            if (v187 < 0.0) {
              float v188 = 0.0;
            }
          }
          _H7 = *(_WORD *)(v43 + 2 * llroundf(v188));
          __asm { FCVT            S7, H7 }
          _S3 = _S3 * _S7;
          _S17 = _S23 * _S7;
          float v193 = _S24 * _S7;
          float v194 = (float)((float)(v234 * _S17) + (float)(_S3 * v256)) + (float)(v193 * _S12);
          float v195 = (float)((float)(_S1 * _S17) + (float)(_S3 * _S11)) + (float)(v193 * _S5);
          _S7 = (float)((float)(_S13 * _S17) + (float)(_S3 * _S2)) + (float)(v193 * _S0);
          LOWORD(_S3) = *(_WORD *)(v69 + 2 * llroundf(fminf(fmaxf(v194, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S17) = *(_WORD *)(v69 + 2 * llroundf(fminf(fmaxf(v195, 0.0), 8191.0)));
          __asm { FCVT            S23, H17 }
          LOWORD(_S7) = *(_WORD *)(v69 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          __asm { FCVT            S24, H7 }
          float v200 = (float)((float)(v258 * _S23) + (float)(v259 * _S3)) + (float)(v257 * _S24);
          float v201 = v101;
          if ((float)(v200 + v49) <= v101)
          {
            float v201 = v200 + v49;
            if ((float)(v200 + v49) < v49) {
              float v201 = v49;
            }
          }
          v121->i16[0] = llroundf(v201) << v83;
          unsigned int v121 = (uint16x8_t *)((char *)v121 + 2);
          if (v122)
          {
            float v202 = (float)((float)(v50 + (float)(_S3 * v229)) + (float)(_S23 * v228)) + (float)(_S24 * _S21);
            float v203 = v104;
            if (v202 <= v104)
            {
              float v203 = (float)((float)(v50 + (float)(_S3 * v229)) + (float)(_S23 * v228)) + (float)(_S24 * _S21);
              if (v202 < v230) {
                float v203 = v230;
              }
            }
            float v204 = (float)((float)(v50 + (float)(_S3 * v227)) + (float)(_S23 * v226)) + (float)(_S24 * v225);
            *float v122 = llroundf(v203) << v83;
            float v205 = v104;
            if (v204 <= v104)
            {
              float v205 = v204;
              if (v204 < v230) {
                float v205 = v230;
              }
            }
            v122[1] = llroundf(v205) << v83;
            v122 += 2;
          }
          --v165;
        }
        while (v165);
      }
      v82 += v19;
      float v81 = (const __int16 *)((char *)v81 + v20);
      float v76 = (uint16x8_t *)((char *)v76 + v23);
      double result = (void *)((char *)result + v24);
      ++v8;
    }
    while (v8 != v12);
    if (v210 && v209)
    {
      size_t v206 = 2 * v9;
      do
      {
        double result = memcpy(v25, v22, v206);
        v22 += v207;
        v25 += v208;
        --v12;
      }
      while (v12);
    }
    else if (v209)
    {
      do
      {
        if (v9) {
          double result = memset(v25, 255, 2 * v9);
        }
        v25 += v208;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Tone_Mat_TRC_xf444_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    unint64_t v15 = result[13] * a2 / v6;
    uint64_t v16 = (void *)result[16];
    unint64_t v17 = v15 + result[15];
    uint64_t v18 = result[19];
    uint64_t v19 = (void *)result[7];
    int64x2_t v20 = (uint64_t *)result[8];
    long long v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = (char *)(v25 + v24 * v12 + 2 * v11);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    unsigned int v31 = (char *)(v30 + v29 * v17 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v33 = (float)LODWORD(a4);
    float v34 = (float)LODWORD(a5);
    float v35 = v32 * *(float *)v18;
    float v135 = v32 * *(float *)(v18 + 16);
    float v136 = v32 * *(float *)(v18 + 8);
    float v36 = v32 * *(float *)(v18 + 20);
    *(float *)&unsigned int v37 = v32 * *(float *)(v18 + 28);
    float v133 = *(float *)&v37;
    float v134 = v36;
    LOWORD(v37) = *(_WORD *)(v18 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v18 + 36);
    float v44 = *(float *)(v18 + 40);
    float v45 = *(float *)(v18 + 44);
    float v131 = *(float *)(v18 + 52);
    float v132 = *(float *)(v18 + 48);
    float v129 = *(float *)(v18 + 60);
    float v130 = *(float *)(v18 + 56);
    float v46 = *(float *)(v18 + 68);
    float v128 = *(float *)(v18 + 64);
    float v47 = *(float *)(v18 + 72);
    float v48 = *(float *)(v18 + 76);
    float v49 = *(float *)(v18 + 80);
    float v50 = *(float *)(v18 + 84);
    float v51 = *(float *)(v18 + 88);
    float v52 = *(float *)(v18 + 92);
    float v53 = *(float *)(v18 + 96);
    float v54 = *(float *)(v18 + 100);
    float v55 = *(float *)(v18 + 104);
    uint64_t v56 = v18 + 164;
    uint64_t v57 = v18 + 16548;
    unsigned int v58 = *(unsigned __int8 *)(v18 + 132);
    char v59 = 16 - v58;
    if (v58 >= 0x11) {
      char v59 = 0;
    }
    unsigned int v60 = *(unsigned __int8 *)(v18 + 124);
    char v61 = 16 - v60;
    if (v60 >= 0x11) {
      char v61 = 0;
    }
    uint64_t v62 = v16[1];
    _ZF = v62 == 0;
    uint64_t v64 = v62 + v28 * v17;
    uint64_t v65 = *v16 + v27 * v17;
    uint64_t v66 = v18 + 32932;
    double result = (void *)(v64 + 2 * v14);
    if (_ZF) {
      double result = 0;
    }
    uint64_t v67 = (_WORD *)(v65 + 2 * v14);
    float16x8_t v70 = v19;
    uint64_t v69 = *v19;
    uint64_t v68 = v70[1];
    _ZF = v68 == 0;
    uint64_t v71 = v68 + v23 * v12 + 2 * v11;
    if (_ZF) {
      uint64_t v71 = 0;
    }
    uint64_t v72 = v69 + v22 * v12 + 2 * v11;
    char v73 = v61;
    char v74 = v59;
    float v76 = *(float *)(v18 + 108);
    float v75 = *(float *)(v18 + 112);
    float v77 = *(float *)(v18 + 116);
    float v78 = *(float *)(v18 + 120);
    do
    {
      uint64_t v79 = v10;
      uint64_t v80 = (unsigned __int16 *)v72;
      float v81 = (unsigned __int16 *)v71;
      uint64_t v82 = result;
      for (uint64_t i = v67; v79; --v79)
      {
        if (v81)
        {
          float v84 = (float)(*v81 >> v73) - v34;
          float v85 = (float)(v81[1] >> v73) - v34;
          v81 += 2;
          float v86 = v136 * v85;
          float v87 = (float)(v134 * v85) + (float)(v84 * v135);
          float v88 = v133 * v84;
        }
        else
        {
          float v88 = 0.0;
          float v87 = 0.0;
          float v86 = 0.0;
        }
        unsigned int v89 = *v80++;
        float v90 = v35 * (float)((float)(int)(v89 >> v73) - v33);
        float v91 = v86 + v90;
        float v92 = 8191.0;
        if (v91 <= 8191.0)
        {
          float v92 = v91;
          if (v91 < 0.0) {
            float v92 = 0.0;
          }
        }
        float v93 = v87 + v90;
        BOOL v94 = (float)(v87 + v90) <= 8191.0;
        float v95 = 8191.0;
        if (v94)
        {
          float v95 = v93;
          if (v93 < 0.0) {
            float v95 = 0.0;
          }
        }
        float v96 = v88 + v90;
        float v97 = 8191.0;
        if (v96 <= 8191.0)
        {
          float v97 = v96;
          if (v96 < 0.0) {
            float v97 = 0.0;
          }
        }
        _H0 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
        __asm { FCVT            S24, H0 }
        _H0 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
        __asm { FCVT            S25, H0 }
        _H0 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        float v107 = (float)((float)((float)(v75 * _S25) + (float)(v76 * _S24)) + (float)(v77 * _S26))
             + (float)(v78 * fmaxf(_S24, fmaxf(_S25, _S26)));
        float v108 = 8191.0;
        if (v107 <= 8191.0)
        {
          float v108 = v107;
          if (v107 < 0.0) {
            float v108 = 0.0;
          }
        }
        _H0 = *(_WORD *)(v57 + 2 * llroundf(v108));
        __asm { FCVT            S0, H0 }
        _S24 = _S24 * _S0;
        _S25 = _S25 * _S0;
        float v113 = _S26 * _S0;
        float v114 = (float)((float)(v48 * _S25) + (float)(_S24 * v47)) + (float)(v113 * v49);
        float v115 = (float)((float)(v51 * _S25) + (float)(_S24 * v50)) + (float)(v113 * v52);
        _S0 = (float)((float)(v54 * _S25) + (float)(_S24 * v53)) + (float)(v113 * v55);
        LOWORD(_S24) = *(_WORD *)(v66 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
        __asm { FCVT            S24, H24 }
        LOWORD(_S25) = *(_WORD *)(v66 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
        __asm { FCVT            S25, H25 }
        LOWORD(_S0) = *(_WORD *)(v66 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        float v120 = (float)((float)((float)(v44 * _S25) + (float)(v43 * _S24)) + (float)(v45 * _S26)) + v38;
        float v121 = v40;
        if (v120 <= v40)
        {
          float v121 = (float)((float)((float)(v44 * _S25) + (float)(v43 * _S24)) + (float)(v45 * _S26)) + v38;
          if (v120 < v38) {
            float v121 = v38;
          }
        }
        *i++ = llroundf(v121) << v74;
        if (v82)
        {
          float v122 = (float)((float)(v39 + (float)(_S24 * v132)) + (float)(_S25 * v131)) + (float)(_S26 * v130);
          float v123 = v42;
          if (v122 <= v42)
          {
            float v123 = (float)((float)(v39 + (float)(_S24 * v132)) + (float)(_S25 * v131)) + (float)(_S26 * v130);
            if (v122 < v41) {
              float v123 = v41;
            }
          }
          float v124 = (float)(v39 + (float)(_S24 * v129)) + (float)(_S25 * v128);
          float v125 = v124 + (float)(_S26 * v46);
          *uint64_t v82 = llroundf(v123) << v74;
          float v126 = v42;
          if (v125 <= v42)
          {
            float v126 = v124 + (float)(_S26 * v46);
            if (v125 < v41) {
              float v126 = v41;
            }
          }
          v82[1] = llroundf(v126) << v74;
          v82 += 2;
        }
      }
      v72 += v22;
      v71 += v23;
      uint64_t v67 = (_WORD *)((char *)v67 + v27);
      double result = (void *)((char *)result + v28);
      ++v9;
    }
    while (v9 != v13);
    if (v25 && v30)
    {
      size_t v127 = 2 * v10;
      do
      {
        double result = memcpy(v31, v26, v127);
        v26 += v24;
        v31 += v29;
        --v13;
      }
      while (v13);
    }
    else if (v30)
    {
      do
      {
        if (v10) {
          double result = memset(v31, 255, 2 * v10);
        }
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_xf444_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Mat_TRC_xf444_neon_fp16_GCD(void *result, uint64_t a2, double a3, int16x4_t a4)
{
  uint64_t v4 = *(void *)((char *)result + 28);
  unint64_t v5 = *(unsigned __int8 *)result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    unint64_t v9 = *(void *)((char *)result + 20);
    uint64_t v10 = *(void *)((char *)result + 36);
    unint64_t v11 = v6 + *(void *)((char *)result + 44);
    unint64_t v12 = v7 - v6;
    uint64_t v13 = result[14];
    unint64_t v14 = result[13] * a2;
    uint64_t v15 = result[19];
    uint64_t v16 = (uint64_t *)result[7];
    uint64_t v17 = (uint64_t *)result[8];
    uint64_t v18 = (void *)result[16];
    uint64_t v19 = (uint64_t *)result[17];
    unint64_t v20 = v14 / v5 + result[15];
    uint64_t v22 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v187 = v17[2];
    uint64_t v190 = v16[2];
    uint64_t v23 = (char *)(v190 + v187 * v11 + 2 * v10);
    uint64_t v24 = *v19;
    uint64_t v25 = v19[1];
    uint64_t v188 = v19[2];
    uint64_t v189 = v18[2];
    uint64_t v26 = (char *)(v189 + v188 * v20 + 2 * v13);
    unsigned int v27 = *(unsigned __int16 *)(v15 + 140);
    unsigned int v28 = *(unsigned __int16 *)(v15 + 142);
    a4.i32[0] = *(_DWORD *)v15;
    unsigned int v29 = *(unsigned __int16 *)(v15 + 144);
    unsigned int v30 = *(unsigned __int16 *)(v15 + 146);
    unsigned int v31 = *(unsigned __int16 *)(v15 + 148);
    unsigned int v32 = *(unsigned __int16 *)(v15 + 150);
    unsigned int v33 = *(unsigned __int16 *)(v15 + 152);
    _S9 = *(_DWORD *)(v15 + 36);
    _S10 = *(_DWORD *)(v15 + 40);
    _S11 = *(_DWORD *)(v15 + 44);
    _S14 = *(_DWORD *)(v15 + 48);
    _S19 = *(_DWORD *)(v15 + 52);
    _S15 = *(float *)(v15 + 56);
    _S21 = *(_DWORD *)(v15 + 60);
    _S23 = *(_DWORD *)(v15 + 64);
    _S24 = *(_DWORD *)(v15 + 68);
    _S25 = *(_DWORD *)(v15 + 72);
    _S26 = *(_DWORD *)(v15 + 76);
    _S28 = *(float *)(v15 + 80);
    *(float *)&a3 = 8191.0 / (float)*(unsigned int *)(v15 + 128);
    float v229 = (float)v27;
    uint64_t v46 = v15 + 164;
    float v47 = (float)v28;
    _S29 = *(float *)&a3 * *(float *)v15;
    _S2 = *(float *)&a3 * *(float *)(v15 + 8);
    _S3 = *(float *)&a3 * *(float *)(v15 + 16);
    _S4 = *(float *)&a3 * *(float *)(v15 + 20);
    float v52 = (float)v29;
    *(short float *)a4.i16 = (short float)v27;
    int16x8_t v53 = vdupq_lane_s16(a4, 0);
    _S1 = *(float *)&a3 * *(float *)(v15 + 28);
    *(short float *)&a3 = -(short float)v28;
    float16x8_t v55 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    *(short float *)&a3 = (short float)v29;
    float16x8_t v56 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    *(short float *)&a3 = (short float)v30;
    float16x8_t v57 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    *(short float *)&a3 = (short float)v31;
    int16x8_t v58 = vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    float16x8_t v226 = (float16x8_t)v58;
    float16x8_t v227 = (float16x8_t)v53;
    unsigned int v59 = *(unsigned __int8 *)(v15 + 132);
    unsigned __int8 v60 = 16 - v59;
    if (v59 >= 0x11) {
      unsigned __int8 v60 = 0;
    }
    unsigned int v61 = *(unsigned __int8 *)(v15 + 124);
    unsigned __int8 v62 = 16 - v61;
    if (v61 >= 0x11) {
      unsigned __int8 v62 = 0;
    }
    uint64_t v63 = v18[1];
    uint64_t v64 = *v18 + v24 * v20;
    _S6 = *(_DWORD *)(v15 + 84);
    _S16 = *(_DWORD *)(v15 + 88);
    uint64_t v67 = v15 + 16548;
    *(short float *)v58.i16 = (short float)v32;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v58.i8, 0);
    *(short float *)v58.i16 = (short float)v33;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v58.i8, 0);
    uint64_t v70 = v63 + v25 * v20 + 2 * v13;
    if (!v63) {
      uint64_t v70 = 0;
    }
    double result = (void *)(v64 + 2 * v13);
    uint64_t v71 = *v16;
    uint64_t v72 = v16[1];
    _ZF = v72 == 0;
    uint64_t v74 = v72 + v21 * v11 + 2 * v10;
    if (_ZF) {
      float v75 = 0;
    }
    else {
      float v75 = (const __int16 *)v74;
    }
    uint64_t v76 = v71 + v22 * v11 + 2 * v10;
    float v228 = _S29;
    __asm { FCVT            H5, S29 }
    float v201 = _S1;
    float v202 = _S4;
    __asm { FCVT            H1, S1 }
    short float v200 = _H1;
    float v203 = _S3;
    float v204 = _S2;
    __asm { FCVT            H1, S3 }
    short float v199 = _H1;
    __asm { FCVT            H1, S4 }
    short float v198 = _H1;
    __asm { FCVT            H1, S2 }
    short float v197 = _H1;
    float v230 = *(float *)(v15 + 40);
    float v231 = *(float *)(v15 + 36);
    __asm { FCVT            H1, S9 }
    short float v222 = _H1;
    __asm { FCVT            H1, S10 }
    short float v221 = _H1;
    float v225 = *(float *)(v15 + 44);
    __asm { FCVT            H1, S11 }
    short float v220 = _H1;
    float v208 = *(float *)(v15 + 52);
    float v209 = *(float *)(v15 + 48);
    __asm { FCVT            H1, S14 }
    short float v196 = _H1;
    __asm { FCVT            H1, S19 }
    short float v195 = _H1;
    float v207 = *(float *)(v15 + 60);
    __asm { FCVT            H1, S15 }
    short float v194 = _H1;
    __asm { FCVT            H1, S21 }
    short float v193 = _H1;
    float v205 = *(float *)(v15 + 68);
    float v206 = *(float *)(v15 + 64);
    __asm { FCVT            H1, S23 }
    short float v192 = _H1;
    __asm { FCVT            H1, S24 }
    short float v191 = _H1;
    float v224 = *(float *)(v15 + 72);
    __asm { FCVT            H1, S25 }
    short float v219 = _H1;
    float v223 = *(float *)(v15 + 76);
    __asm { FCVT            H1, S26 }
    short float v218 = _H1;
    __asm { FCVT            H1, S28 }
    short float v217 = _H1;
    float v214 = *(float *)(v15 + 84);
    __asm { FCVT            H1, S6 }
    short float v216 = _H1;
    float v98 = *(float *)(v15 + 88);
    __asm { FCVT            H1, S16 }
    short float v215 = _H1;
    _S3 = *(float *)(v15 + 92);
    __asm { FCVT            H0, S0 }
    short float v213 = _H0;
    _S9 = *(float *)(v15 + 96);
    __asm { FCVT            H0, S17 }
    short float v212 = _H0;
    _S14 = *(float *)(v15 + 100);
    __asm { FCVT            H0, S18 }
    short float v211 = _H0;
    float v106 = (float)v30;
    float v107 = (float)v31;
    v108.i64[0] = 0x9000900090009000;
    v108.i64[1] = 0x9000900090009000;
    float v210 = (float)v32;
    float v109 = (float)v33;
    uint16x8_t v110 = (uint16x8_t)vdupq_n_s16(-v62);
    uint16x8_t v111 = (uint16x8_t)vdupq_n_s16(v60);
    _S10 = *(float *)(v15 + 104);
    __asm { FCVT            H4, S20 }
    do
    {
      if ((int)v9 < 8)
      {
        unint64_t v152 = 0;
        int v118 = (__int16 *)v70;
        float v117 = (uint16x8_t *)result;
        float v116 = v75;
        float v115 = (uint16x8_t *)v76;
      }
      else
      {
        int v114 = 0;
        float v115 = (uint16x8_t *)v76;
        float v116 = v75;
        float v117 = (uint16x8_t *)result;
        int v118 = (__int16 *)v70;
        do
        {
          if (v116)
          {
            int16x8x2_t v232 = vld2q_s16(v116);
            v116 += 16;
            float16x8_t v119 = vaddq_f16(v55, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v232.val[0], v110)));
            float16x8_t v120 = vaddq_f16(v55, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v232.val[1], v110)));
            float16x8_t v121 = vmulq_n_f16(v120, v197);
            float16x8_t v122 = vmlaq_n_f16(vmulq_n_f16(v119, v199), v120, v198);
            float16x8_t v123 = vmulq_n_f16(v119, v200);
          }
          else
          {
            float16x8_t v123 = 0uLL;
            float16x8_t v122 = 0uLL;
            float16x8_t v121 = 0uLL;
          }
          uint16x8_t v124 = *v115++;
          float16x8_t v125 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v124, v110)), v227);
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v121, v125, _H5), (float16x8_t)0), v108));
          float16x8_t v127 = (float16x8_t)vmovl_high_u16(v126);
          *(void *)&long long v128 = v127.u32[2];
          *((void *)&v128 + 1) = v127.u32[3];
          long long v129 = v128;
          *(void *)&long long v128 = v127.u32[0];
          *((void *)&v128 + 1) = v127.u32[1];
          uint32x4_t v130 = vmovl_u16(*(uint16x4_t *)v126.i8);
          v127.i16[0] = *(_WORD *)(v46 + 2 * v130.u32[0]);
          v127.i16[1] = *(_WORD *)(v46 + 2 * v130.u32[1]);
          v127.i16[2] = *(_WORD *)(v46 + 2 * v130.u32[2]);
          v127.i16[3] = *(_WORD *)(v46 + 2 * v130.u32[3]);
          v127.i16[4] = *(_WORD *)(v46 + 2 * v128);
          v127.i16[5] = *(_WORD *)(v46 + 2 * *((void *)&v128 + 1));
          v127.i16[6] = *(_WORD *)(v46 + 2 * v129);
          v127.i16[7] = *(_WORD *)(v46 + 2 * *((void *)&v129 + 1));
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v122, v125, _H5), (float16x8_t)0), v108));
          uint32x4_t v132 = vmovl_high_u16(v131);
          uint32x4_t v133 = vmovl_u16(*(uint16x4_t *)v131.i8);
          v134.i16[0] = *(_WORD *)(v46 + 2 * v133.u32[0]);
          v134.i16[1] = *(_WORD *)(v46 + 2 * v133.u32[1]);
          v134.i16[2] = *(_WORD *)(v46 + 2 * v133.u32[2]);
          v134.i16[3] = *(_WORD *)(v46 + 2 * v133.u32[3]);
          v134.i16[4] = *(_WORD *)(v46 + 2 * v132.u32[0]);
          v134.i16[5] = *(_WORD *)(v46 + 2 * v132.u32[1]);
          v134.i16[6] = *(_WORD *)(v46 + 2 * v132.u32[2]);
          v134.i16[7] = *(_WORD *)(v46 + 2 * v132.u32[3]);
          uint16x8_t v135 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v123, v125, _H5), (float16x8_t)0), v108));
          uint32x4_t v136 = vmovl_high_u16(v135);
          float16x8_t v137 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v135.i8);
          v137.i16[0] = *(_WORD *)(v46 + 2 * v137.u32[0]);
          v137.i16[1] = *(_WORD *)(v46 + 2 * v137.u32[1]);
          v137.i16[2] = *(_WORD *)(v46 + 2 * v137.u32[2]);
          v137.i16[3] = *(_WORD *)(v46 + 2 * v137.u32[3]);
          v137.i16[4] = *(_WORD *)(v46 + 2 * v136.u32[0]);
          v137.i16[5] = *(_WORD *)(v46 + 2 * v136.u32[1]);
          v137.i16[6] = *(_WORD *)(v46 + 2 * v136.u32[2]);
          v137.i16[7] = *(_WORD *)(v46 + 2 * v136.u32[3]);
          float16x8_t v138 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v127, v216), v134, v215), v137, v213);
          float16x8_t v139 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v137, _H4), v134, v211), v127, v212);
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v127, v219), v134, v218), v137, v217), (float16x8_t)0), v108));
          uint32x4_t v141 = vmovl_high_u16(v140);
          uint32x4_t v142 = vmovl_u16(*(uint16x4_t *)v140.i8);
          v143.i16[0] = *(_WORD *)(v67 + 2 * v142.u32[0]);
          v143.i16[1] = *(_WORD *)(v67 + 2 * v142.u32[1]);
          v143.i16[2] = *(_WORD *)(v67 + 2 * v142.u32[2]);
          v143.i16[3] = *(_WORD *)(v67 + 2 * v142.u32[3]);
          v143.i16[4] = *(_WORD *)(v67 + 2 * v141.u32[0]);
          v143.i16[5] = *(_WORD *)(v67 + 2 * v141.u32[1]);
          v143.i16[6] = *(_WORD *)(v67 + 2 * v141.u32[2]);
          v143.i16[7] = *(_WORD *)(v67 + 2 * v141.u32[3]);
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v138, (float16x8_t)0), v108));
          uint32x4_t v145 = vmovl_high_u16(v144);
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v144.i8);
          v147.i16[0] = *(_WORD *)(v67 + 2 * v146.u32[0]);
          v147.i16[1] = *(_WORD *)(v67 + 2 * v146.u32[1]);
          v147.i16[2] = *(_WORD *)(v67 + 2 * v146.u32[2]);
          v147.i16[3] = *(_WORD *)(v67 + 2 * v146.u32[3]);
          v147.i16[4] = *(_WORD *)(v67 + 2 * v145.u32[0]);
          v147.i16[5] = *(_WORD *)(v67 + 2 * v145.u32[1]);
          v147.i16[6] = *(_WORD *)(v67 + 2 * v145.u32[2]);
          v147.i16[7] = *(_WORD *)(v67 + 2 * v145.u32[3]);
          uint16x8_t v148 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v139, (float16x8_t)0), v108));
          uint32x4_t v149 = vmovl_high_u16(v148);
          uint32x4_t v150 = vmovl_u16(*(uint16x4_t *)v148.i8);
          v151.i16[0] = *(_WORD *)(v67 + 2 * v150.u32[0]);
          v151.i16[1] = *(_WORD *)(v67 + 2 * v150.u32[1]);
          v151.i16[2] = *(_WORD *)(v67 + 2 * v150.u32[2]);
          v151.i16[3] = *(_WORD *)(v67 + 2 * v150.u32[3]);
          v151.i16[4] = *(_WORD *)(v67 + 2 * v149.u32[0]);
          v151.i16[5] = *(_WORD *)(v67 + 2 * v149.u32[1]);
          v151.i16[6] = *(_WORD *)(v67 + 2 * v149.u32[2]);
          v151.i16[7] = *(_WORD *)(v67 + 2 * v149.u32[3]);
          *v117++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v56, v143, v222), v147, v221), v151, v220), v56), v226)), v111);
          if (v118)
          {
            v233.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v57, v143, v196), v147, v195), v151, v194), v68), v69), v68), v69)), v111);
            v233.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v57, v143, v193), v147, v192), v151, v191)), v111);
            vst2q_s16(v118, v233);
            v118 += 16;
          }
          v114 += 8;
        }
        while (v114 < (int)v9 - 7);
        unint64_t v152 = v9 & 0xFFFFFFF8;
      }
      _CF = v9 >= v152;
      unint64_t v153 = v9 - v152;
      if (v153 != 0 && _CF)
      {
        do
        {
          if (v116)
          {
            float v154 = (float)(*(unsigned __int16 *)v116 >> v62) - v47;
            float v155 = (float)(*((unsigned __int16 *)v116 + 1) >> v62) - v47;
            v116 += 2;
            float v156 = v204 * v155;
            float v157 = (float)(v202 * v155) + (float)(v154 * v203);
            float v158 = v201 * v154;
          }
          else
          {
            float v158 = 0.0;
            float v157 = 0.0;
            float v156 = 0.0;
          }
          unsigned int v159 = v115->u16[0];
          float v115 = (uint16x8_t *)((char *)v115 + 2);
          float v160 = v228 * (float)((float)(int)(v159 >> v62) - v229);
          float v161 = v156 + v160;
          float v162 = 8191.0;
          if (v161 <= 8191.0)
          {
            float v162 = v161;
            if (v161 < 0.0) {
              float v162 = 0.0;
            }
          }
          float v163 = v157 + v160;
          BOOL v164 = (float)(v157 + v160) <= 8191.0;
          float v165 = 8191.0;
          if (v164)
          {
            float v165 = v163;
            if (v163 < 0.0) {
              float v165 = 0.0;
            }
          }
          float v166 = v158 + v160;
          BOOL v164 = (float)(v158 + v160) <= 8191.0;
          float v167 = 8191.0;
          if (v164)
          {
            float v167 = v166;
            if (v166 < 0.0) {
              float v167 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          float v174 = (float)((float)(v223 * _S1) + (float)(_S0 * v224)) + (float)(_S2 * _S28);
          float v175 = (float)((float)(v98 * _S1) + (float)(_S0 * v214)) + (float)(_S2 * _S3);
          _S0 = (float)(_S14 * _S1) + (float)(_S0 * _S9);
          LOWORD(_S1) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v174, 0.0), 8191.0)));
          __asm { FCVT            S6, H1 }
          LOWORD(_S1) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v175, 0.0), 8191.0)));
          __asm { FCVT            S17, H1 }
          LOWORD(_S0) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(_S0 + (float)(_S2 * _S10), 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          float v180 = (float)((float)(v230 * _S17) + (float)(v231 * _S6)) + (float)(v225 * _S24);
          float v181 = v107;
          if ((float)(v180 + v52) <= v107)
          {
            float v181 = v180 + v52;
            if ((float)(v180 + v52) < v52) {
              float v181 = v52;
            }
          }
          v117->i16[0] = llroundf(v181) << v60;
          float v117 = (uint16x8_t *)((char *)v117 + 2);
          if (v118)
          {
            float v182 = (float)((float)(v106 + (float)(_S6 * v209)) + (float)(_S17 * v208)) + (float)(_S24 * _S15);
            float v183 = v109;
            if (v182 <= v109)
            {
              float v183 = (float)((float)(v106 + (float)(_S6 * v209)) + (float)(_S17 * v208)) + (float)(_S24 * _S15);
              if (v182 < v210) {
                float v183 = v210;
              }
            }
            float v184 = (float)((float)(v106 + (float)(_S6 * v207)) + (float)(_S17 * v206)) + (float)(_S24 * v205);
            *int v118 = llroundf(v183) << v60;
            float v185 = v109;
            if (v184 <= v109)
            {
              float v185 = v184;
              if (v184 < v210) {
                float v185 = v210;
              }
            }
            v118[1] = llroundf(v185) << v60;
            v118 += 2;
          }
          --v153;
        }
        while (v153);
      }
      v76 += v22;
      float v75 = (const __int16 *)((char *)v75 + v21);
      double result = (void *)((char *)result + v24);
      v70 += v25;
      ++v8;
    }
    while (v8 != v12);
    if (v190 && v189)
    {
      size_t v186 = 2 * v9;
      do
      {
        double result = memcpy(v26, v23, v186);
        v23 += v187;
        v26 += v188;
        --v12;
      }
      while (v12);
    }
    else if (v189)
    {
      do
      {
        if (v9) {
          double result = memset(v26, 255, 2 * v9);
        }
        v26 += v188;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

void *vt_Copy_xf444_TRC_Mat_TRC_xf444_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (uint64_t *)result[16];
    unint64_t v16 = result[13] * a2 / v6 + result[15];
    uint64_t v17 = result[19];
    uint64_t v18 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    int64x2_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    uint64_t v25 = (char *)(v24 + v23 * v12 + 2 * v11);
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    unsigned int v30 = (char *)(v29 + v28 * v16 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    float v32 = (float)LODWORD(a4);
    float v33 = (float)LODWORD(a5);
    float v34 = v31 * *(float *)v17;
    float v121 = v31 * *(float *)(v17 + 16);
    float v122 = v31 * *(float *)(v17 + 8);
    float v35 = v31 * *(float *)(v17 + 20);
    *(float *)&unsigned int v36 = v31 * *(float *)(v17 + 28);
    float v119 = *(float *)&v36;
    float v120 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    float v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 152);
    float v41 = (float)v36;
    float v42 = *(float *)(v17 + 36);
    float v43 = *(float *)(v17 + 40);
    float v44 = *(float *)(v17 + 44);
    float v118 = *(float *)(v17 + 48);
    float v45 = *(float *)(v17 + 52);
    float v46 = *(float *)(v17 + 56);
    float v47 = *(float *)(v17 + 60);
    float v48 = *(float *)(v17 + 64);
    float v49 = *(float *)(v17 + 68);
    float v50 = *(float *)(v17 + 72);
    float v52 = *(float *)(v17 + 76);
    float v51 = *(float *)(v17 + 80);
    float v53 = *(float *)(v17 + 84);
    float v54 = *(float *)(v17 + 88);
    float v55 = *(float *)(v17 + 92);
    float v56 = *(float *)(v17 + 96);
    float v57 = *(float *)(v17 + 100);
    float v58 = *(float *)(v17 + 104);
    uint64_t v59 = v17 + 164;
    uint64_t v60 = v17 + 16548;
    unsigned int v61 = *(unsigned __int8 *)(v17 + 132);
    _CF = v61 >= 0x11;
    char v63 = 16 - v61;
    if (_CF) {
      char v64 = 0;
    }
    else {
      char v64 = v63;
    }
    unsigned int v65 = *(unsigned __int8 *)(v17 + 124);
    char v66 = 16 - v65;
    if (v65 >= 0x11) {
      char v66 = 0;
    }
    uint64_t v68 = *v15;
    uint64_t v67 = v15[1];
    uint64_t v69 = v67 + v27 * v16 + 2 * v14;
    if (!v67) {
      uint64_t v69 = 0;
    }
    double result = (void *)(v68 + v26 * v16 + 2 * v14);
    uint64_t v71 = *v18;
    uint64_t v70 = v18[1];
    uint64_t v72 = v70 + v22 * v12 + 2 * v11;
    if (!v70) {
      uint64_t v72 = 0;
    }
    uint64_t v73 = v71 + v21 * v12 + 2 * v11;
    char v74 = v66;
    char v75 = v64;
    do
    {
      uint64_t v76 = v10;
      float v77 = (unsigned __int16 *)v73;
      float v78 = (unsigned __int16 *)v72;
      uint64_t v79 = (_WORD *)v69;
      for (uint64_t i = result; v76; --v76)
      {
        if (v78)
        {
          float v81 = (float)(*v78 >> v74) - v33;
          float v82 = (float)(v78[1] >> v74) - v33;
          v78 += 2;
          float v83 = v122 * v82;
          float v84 = (float)(v120 * v82) + (float)(v81 * v121);
          float v85 = v119 * v81;
        }
        else
        {
          float v85 = 0.0;
          float v84 = 0.0;
          float v83 = 0.0;
        }
        unsigned int v86 = *v77++;
        float v87 = v34 * (float)((float)(int)(v86 >> v74) - v32);
        float v88 = v83 + v87;
        float v89 = 8191.0;
        if (v88 <= 8191.0)
        {
          float v89 = v88;
          if (v88 < 0.0) {
            float v89 = 0.0;
          }
        }
        float v90 = v84 + v87;
        BOOL v91 = (float)(v84 + v87) <= 8191.0;
        float v92 = 8191.0;
        if (v91)
        {
          float v92 = v90;
          if (v90 < 0.0) {
            float v92 = 0.0;
          }
        }
        float v93 = v85 + v87;
        BOOL v91 = (float)(v85 + v87) <= 8191.0;
        float v94 = 8191.0;
        if (v91)
        {
          float v94 = v93;
          if (v93 < 0.0) {
            float v94 = 0.0;
          }
        }
        _H0 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        _H5 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        _H4 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        float v104 = (float)((float)(v52 * _S5) + (float)(_S0 * v50)) + (float)(_S4 * v51);
        float v105 = (float)((float)(v54 * _S5) + (float)(_S0 * v53)) + (float)(_S4 * v55);
        _S0 = (float)((float)(v57 * _S5) + (float)(_S0 * v56)) + (float)(_S4 * v58);
        LOWORD(_S4) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        LOWORD(_S5) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        LOWORD(_S0) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S6, H0 }
        float v110 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
        float v111 = v39;
        if (v110 <= v39)
        {
          float v111 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
          if (v110 < v37) {
            float v111 = v37;
          }
        }
        *i++ = llroundf(v111) << v75;
        if (v79)
        {
          float v112 = (float)((float)(v38 + (float)(_S4 * v118)) + (float)(_S5 * v45)) + (float)(_S6 * v46);
          float v113 = v41;
          if (v112 <= v41)
          {
            float v113 = (float)((float)(v38 + (float)(_S4 * v118)) + (float)(_S5 * v45)) + (float)(_S6 * v46);
            if (v112 < v40) {
              float v113 = v40;
            }
          }
          float v114 = (float)(v38 + (float)(_S4 * v47)) + (float)(_S5 * v48);
          float v115 = v114 + (float)(_S6 * v49);
          *uint64_t v79 = llroundf(v113) << v75;
          float v116 = v41;
          if (v115 <= v41)
          {
            float v116 = v114 + (float)(_S6 * v49);
            if (v115 < v40) {
              float v116 = v40;
            }
          }
          v79[1] = llroundf(v116) << v75;
          v79 += 2;
        }
      }
      v73 += v21;
      v72 += v22;
      double result = (void *)((char *)result + v26);
      v69 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      size_t v117 = 2 * v10;
      do
      {
        double result = memcpy(v30, v25, v117);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          double result = memset(v30, 255, 2 * v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_xf444_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_xf444_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf444_rgb_xf444_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double _D5)
{
  uint64_t v9 = *(void *)((char *)result + 28);
  unint64_t v10 = *(unsigned __int8 *)result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    unint64_t v14 = *(void *)((char *)result + 20);
    uint64_t v15 = *(void *)((char *)result + 36);
    unint64_t v16 = v11 + *(void *)((char *)result + 44);
    unint64_t v17 = v12 - v11;
    uint64_t v18 = result[14];
    uint64_t v19 = (uint64_t *)result[16];
    unint64_t v20 = result[13] * a2 / v10 + result[15];
    uint64_t v21 = result[19];
    uint64_t v23 = (uint64_t *)result[7];
    int64x2_t v22 = (uint64_t *)result[8];
    uint64_t v24 = (uint64_t *)result[17];
    uint64_t v25 = *v22;
    uint64_t v26 = v22[1];
    uint64_t v27 = v22[2];
    uint64_t v28 = v23[2];
    uint64_t v29 = (char *)(v28 + v27 * v16 + 2 * v15);
    uint64_t v30 = *v24;
    uint64_t v31 = v24[1];
    uint64_t v32 = v24[2];
    uint64_t v33 = v19[2];
    float v34 = (char *)(v33 + v32 * v20 + 2 * v18);
    unsigned int v35 = *(unsigned __int16 *)(v21 + 140);
    unsigned int v36 = *(unsigned __int16 *)(v21 + 142);
    unsigned int v37 = *(unsigned __int16 *)(v21 + 144);
    unsigned int v38 = *(unsigned __int16 *)(v21 + 146);
    float v39 = (float)v35;
    unsigned int v40 = *(unsigned __int16 *)(v21 + 148);
    *(short float *)v8.i16 = (short float)v35;
    unsigned int v41 = *(unsigned __int16 *)(v21 + 150);
    float v42 = (float)v36;
    short float v43 = (short float)v36;
    unsigned int v44 = *(unsigned __int16 *)(v21 + 152);
    _S2 = *(float *)(v21 + 36);
    _S3 = *(float *)(v21 + 40);
    _S4 = *(float *)(v21 + 44);
    _S26 = *(float *)(v21 + 48);
    _S28 = *(float *)(v21 + 52);
    _S10 = *(float *)(v21 + 56);
    _S14 = *(float *)(v21 + 60);
    float v136 = *(float *)(v21 + 68);
    float v137 = *(float *)(v21 + 64);
    *(float *)&_D5 = (float)*(unsigned int *)(v21 + 136) / (float)*(unsigned int *)(v21 + 128);
    _S19 = *(float *)&_D5 * *(float *)v21;
    _S6 = *(float *)&_D5 * *(float *)(v21 + 8);
    _S7 = *(float *)&_D5 * *(float *)(v21 + 16);
    _S16 = *(float *)&_D5 * *(float *)(v21 + 20);
    _S17 = *(float *)&_D5 * *(float *)(v21 + 28);
    float v57 = (float)v37;
    float v58 = (float)v38;
    float v59 = (float)v40;
    float v60 = (float)v41;
    float v61 = (float)v44;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(v8, 0);
    __asm { FCVT            H8, S19 }
    *(short float *)&_D5 = -v43;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D5, 0);
    float v148 = _S17;
    __asm { FCVT            H5, S17 }
    short float v147 = *(short float *)&_D5;
    float v150 = _S7;
    __asm { FCVT            H5, S7 }
    short float v145 = *(short float *)&_D5;
    *(short float *)&_D5 = (short float)v37;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D5, 0);
    *(short float *)&_D5 = (short float)v38;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D5, 0);
    *(short float *)&_D5 = (short float)v40;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D5, 0);
    *(short float *)&_D5 = (short float)v41;
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D5, 0);
    float v149 = _S16;
    __asm { FCVT            H5, S16 }
    short float v144 = *(short float *)&_D5;
    *(short float *)&_D5 = (short float)v44;
    float16x8_t v73 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D5, 0);
    unsigned int v74 = *(unsigned __int8 *)(v21 + 132);
    unsigned __int8 v75 = 16 - v74;
    if (v74 >= 0x11) {
      unsigned __int8 v75 = 0;
    }
    unsigned int v76 = *(unsigned __int8 *)(v21 + 124);
    unsigned __int8 v77 = 16 - v76;
    if (v76 >= 0x11) {
      unsigned __int8 v77 = 0;
    }
    uint64_t v79 = *v19;
    uint64_t v78 = v19[1];
    uint64_t v80 = v78 + v31 * v20 + 2 * v18;
    if (!v78) {
      uint64_t v80 = 0;
    }
    uint64_t v81 = v79 + v30 * v20 + 2 * v18;
    uint64_t v83 = *v23;
    uint64_t v82 = v23[1];
    uint64_t v84 = v82 + v26 * v16 + 2 * v15;
    if (!v82) {
      uint64_t v84 = 0;
    }
    double result = (void *)(v83 + v25 * v16 + 2 * v15);
    unsigned __int8 v85 = v77;
    unsigned __int8 v86 = v75;
    float v151 = _S6;
    __asm { FCVT            H5, S6 }
    short float v143 = _H5;
    __asm
    {
      FCVT            H6, S2
      FCVT            H7, S3
      FCVT            H9, S4
    }
    float v154 = _S26;
    __asm { FCVT            H5, S26 }
    short float v142 = _H5;
    float v153 = _S28;
    __asm { FCVT            H5, S28 }
    short float v141 = _H5;
    float v152 = _S10;
    __asm { FCVT            H5, S10 }
    short float v140 = _H5;
    float v146 = _S14;
    __asm { FCVT            H5, S14 }
    short float v139 = _H5;
    _S14 = v137;
    __asm { FCVT            H5, S5 }
    short float v138 = _H5;
    _S5 = v136;
    __asm { FCVT            H10, S16 }
    uint16x8_t v99 = (uint16x8_t)vdupq_n_s16(-v77);
    uint16x8_t v100 = (uint16x8_t)vdupq_n_s16(v75);
    do
    {
      if ((int)v14 < 8)
      {
        unint64_t v117 = 0;
        float v105 = (__int16 *)v80;
        float v104 = (uint16x8_t *)v81;
        float v103 = (const __int16 *)v84;
        float v102 = (uint16x8_t *)result;
      }
      else
      {
        int v101 = 0;
        float v102 = (uint16x8_t *)result;
        float v103 = (const __int16 *)v84;
        float v104 = (uint16x8_t *)v81;
        float v105 = (__int16 *)v80;
        do
        {
          if (v103)
          {
            int16x8x2_t v155 = vld2q_s16(v103);
            v103 += 16;
            float16x8_t v106 = vaddq_f16(v68, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v155.val[0], v99)));
            float16x8_t v107 = vaddq_f16(v68, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v155.val[1], v99)));
            float16x8_t v108 = vmulq_n_f16(v107, v143);
            float16x8_t v109 = vmlaq_n_f16(vmulq_n_f16(v106, v145), v107, v144);
            float16x8_t v110 = vmulq_n_f16(v106, v147);
          }
          else
          {
            float16x8_t v110 = 0uLL;
            float16x8_t v109 = 0uLL;
            float16x8_t v108 = 0uLL;
          }
          uint16x8_t v111 = *v102++;
          float16x8_t v112 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v111, v99)), v62);
          float16x8_t v113 = vmlaq_n_f16(v108, v112, _H8);
          float16x8_t v114 = vmlaq_n_f16(v109, v112, _H8);
          float16x8_t v115 = vmlaq_n_f16(v110, v112, _H8);
          *v104++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, v113, _H6), v114, _H7), v115, _H9), v69), v71)), v100);
          if (v105)
          {
            float16x8_t v116 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v70, v113, v139), v114, v138), v115, _H10);
            v156.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v70, v113, v142), v114, v141), v115, v140), v72), v73), v72), v73)), v100);
            v156.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(v116), v100);
            vst2q_s16(v105, v156);
            v105 += 16;
          }
          v101 += 8;
        }
        while (v101 < (int)v14 - 7);
        unint64_t v117 = v14 & 0xFFFFFFF8;
      }
      _CF = v14 >= v117;
      unint64_t v118 = v14 - v117;
      if (v118 != 0 && _CF)
      {
        do
        {
          if (v103)
          {
            float v119 = (float)(*(unsigned __int16 *)v103 >> v85) - v42;
            float v120 = (float)(*((unsigned __int16 *)v103 + 1) >> v85) - v42;
            v103 += 2;
            float v121 = v151 * v120;
            float v122 = (float)(v149 * v120) + (float)(v119 * v150);
            float v123 = v148 * v119;
          }
          else
          {
            float v123 = 0.0;
            float v122 = 0.0;
            float v121 = 0.0;
          }
          unsigned int v124 = v102->u16[0];
          float v102 = (uint16x8_t *)((char *)v102 + 2);
          float v125 = _S19 * (float)((float)(int)(v124 >> v85) - v39);
          float v126 = v121 + v125;
          float v127 = v122 + v125;
          float v128 = v123 + v125;
          float v129 = (float)((float)((float)(_S3 * v127) + (float)(_S2 * v126)) + (float)(_S4 * v128)) + v57;
          float v130 = v59;
          if (v129 <= v59)
          {
            float v130 = (float)((float)((float)(_S3 * v127) + (float)(_S2 * v126)) + (float)(_S4 * v128)) + v57;
            if (v129 < v57) {
              float v130 = v57;
            }
          }
          v104->i16[0] = llroundf(v130) << v86;
          float v104 = (uint16x8_t *)((char *)v104 + 2);
          if (v105)
          {
            float v131 = (float)((float)(v58 + (float)(v126 * v154)) + (float)(v127 * v153)) + (float)(v128 * v152);
            float v132 = v61;
            if (v131 <= v61)
            {
              float v132 = (float)((float)(v58 + (float)(v126 * v154)) + (float)(v127 * v153)) + (float)(v128 * v152);
              if (v131 < v60) {
                float v132 = v60;
              }
            }
            float v133 = (float)((float)(v58 + (float)(v126 * v146)) + (float)(v127 * v137)) + (float)(v128 * v136);
            *float v105 = llroundf(v132) << v86;
            float v134 = v61;
            if (v133 <= v61)
            {
              float v134 = v133;
              if (v133 < v60) {
                float v134 = v60;
              }
            }
            v105[1] = llroundf(v134) << v86;
            v105 += 2;
          }
          --v118;
        }
        while (v118);
      }
      double result = (void *)((char *)result + v25);
      v84 += v26;
      v81 += v30;
      v80 += v31;
      ++v13;
    }
    while (v13 != v17);
    if (v28 && v33)
    {
      size_t v135 = 2 * v14;
      do
      {
        double result = memcpy(v34, v29, v135);
        v29 += v27;
        v34 += v32;
        --v17;
      }
      while (v17);
    }
    else if (v33)
    {
      do
      {
        if (v14) {
          double result = memset(v34, 255, 2 * v14);
        }
        v34 += v32;
        --v17;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_xf444_GCD);
  return 0;
}

void *vt_Copy_xf444_rgb_xf444_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v9 = *(void *)((char *)result + 28);
  unint64_t v10 = *(unsigned __int8 *)result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)((char *)result + 20);
    uint64_t v15 = *(void *)((char *)result + 36);
    unint64_t v16 = v11 + *(void *)((char *)result + 44);
    unint64_t v17 = v12 - v11;
    uint64_t v18 = result[14];
    uint64_t v19 = (uint64_t *)result[16];
    unint64_t v20 = result[13] * a2 / v10 + result[15];
    uint64_t v21 = result[19];
    uint64_t v23 = (uint64_t *)result[7];
    int64x2_t v22 = (uint64_t *)result[8];
    uint64_t v24 = (uint64_t *)result[17];
    uint64_t v25 = *v22;
    uint64_t v26 = v22[1];
    uint64_t v27 = v22[2];
    uint64_t v28 = v23[2];
    uint64_t v29 = (char *)(v28 + v27 * v16 + 2 * v15);
    uint64_t v30 = *v24;
    uint64_t v31 = v24[1];
    uint64_t v32 = v24[2];
    uint64_t v33 = v19[2];
    float v34 = (char *)(v33 + v32 * v20 + 2 * v18);
    *(float *)&unsigned int v35 = (float)*(unsigned int *)(v21 + 136);
    LOWORD(a5) = *(_WORD *)(v21 + 140);
    float v36 = *(float *)&v35 / (float)*(unsigned int *)(v21 + 128);
    float v37 = (float)LODWORD(a5);
    LOWORD(v35) = *(_WORD *)(v21 + 142);
    float v38 = (float)v35;
    float v39 = v36 * *(float *)v21;
    float v40 = v36 * *(float *)(v21 + 8);
    float v41 = v36 * *(float *)(v21 + 16);
    float v42 = v36 * *(float *)(v21 + 20);
    float v43 = *(float *)(v21 + 28);
    float v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v21 + 144);
    float v45 = (float)LODWORD(v43);
    LOWORD(v5) = *(_WORD *)(v21 + 146);
    float v46 = (float)v5;
    LOWORD(v6) = *(_WORD *)(v21 + 148);
    float v47 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v21 + 150);
    float v48 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v21 + 152);
    float v49 = (float)v8;
    float v50 = *(float *)(v21 + 36);
    float v51 = *(float *)(v21 + 40);
    float v52 = *(float *)(v21 + 44);
    float v53 = *(float *)(v21 + 48);
    float v54 = *(float *)(v21 + 52);
    float v55 = *(float *)(v21 + 56);
    float v56 = *(float *)(v21 + 60);
    float v57 = *(float *)(v21 + 64);
    float v58 = *(float *)(v21 + 68);
    unsigned int v59 = *(unsigned __int8 *)(v21 + 132);
    BOOL v60 = v59 >= 0x11;
    char v61 = 16 - v59;
    if (v60) {
      char v62 = 0;
    }
    else {
      char v62 = v61;
    }
    unsigned int v63 = *(unsigned __int8 *)(v21 + 124);
    char v64 = 16 - v63;
    if (v63 >= 0x11) {
      char v64 = 0;
    }
    uint64_t v66 = *v19;
    uint64_t v65 = v19[1];
    uint64_t v67 = v65 + v31 * v20 + 2 * v18;
    if (!v65) {
      uint64_t v67 = 0;
    }
    uint64_t v68 = v66 + v30 * v20 + 2 * v18;
    uint64_t v70 = *v23;
    uint64_t v69 = v23[1];
    uint64_t v71 = v69 + v26 * v16 + 2 * v15;
    if (!v69) {
      uint64_t v71 = 0;
    }
    double result = (void *)(v70 + v25 * v16 + 2 * v15);
    char v72 = v64;
    char v73 = v62;
    do
    {
      uint64_t v74 = v14;
      unsigned __int8 v75 = (unsigned __int16 *)result;
      unsigned int v76 = (unsigned __int16 *)v71;
      unsigned __int8 v77 = (_WORD *)v67;
      for (uint64_t i = (_WORD *)v68; v74; --v74)
      {
        if (v76)
        {
          float v79 = (float)(*v76 >> v72) - v38;
          float v80 = (float)(v76[1] >> v72) - v38;
          v76 += 2;
          float v81 = v40 * v80;
          float v82 = (float)(v42 * v80) + (float)(v79 * v41);
          float v83 = v44 * v79;
        }
        else
        {
          float v83 = 0.0;
          float v82 = 0.0;
          float v81 = 0.0;
        }
        unsigned int v84 = *v75++;
        float v85 = v39 * (float)((float)(int)(v84 >> v72) - v37);
        float v86 = v81 + v85;
        float v87 = v82 + v85;
        float v88 = v83 + v85;
        float v89 = (float)((float)((float)(v51 * v87) + (float)(v50 * v86)) + (float)(v52 * v88)) + v45;
        float v90 = v47;
        if (v89 <= v47)
        {
          float v90 = (float)((float)((float)(v51 * v87) + (float)(v50 * v86)) + (float)(v52 * v88)) + v45;
          if (v89 < v45) {
            float v90 = v45;
          }
        }
        *i++ = llroundf(v90) << v73;
        if (v77)
        {
          float v91 = (float)((float)(v46 + (float)(v86 * v53)) + (float)(v87 * v54)) + (float)(v88 * v55);
          float v92 = v49;
          if (v91 <= v49)
          {
            float v92 = (float)((float)(v46 + (float)(v86 * v53)) + (float)(v87 * v54)) + (float)(v88 * v55);
            if (v91 < v48) {
              float v92 = v48;
            }
          }
          float v93 = (float)((float)(v46 + (float)(v86 * v56)) + (float)(v87 * v57)) + (float)(v88 * v58);
          *unsigned __int8 v77 = llroundf(v92) << v73;
          float v94 = v49;
          if (v93 <= v49)
          {
            float v94 = v93;
            if (v93 < v48) {
              float v94 = v48;
            }
          }
          v77[1] = llroundf(v94) << v73;
          v77 += 2;
        }
      }
      double result = (void *)((char *)result + v25);
      v71 += v26;
      v68 += v30;
      v67 += v31;
      ++v13;
    }
    while (v13 != v17);
    if (v28 && v33)
    {
      size_t v95 = 2 * v14;
      do
      {
        double result = memcpy(v34, v29, v95);
        v29 += v27;
        v34 += v32;
        --v17;
      }
      while (v17);
    }
    else if (v33)
    {
      do
      {
        if (v14) {
          double result = memset(v34, 255, 2 * v14);
        }
        v34 += v32;
        --v17;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_BGRA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

unsigned char *vt_Copy_xf444_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3)
{
  char v3 = 0;
  uint64_t v4 = 0;
  unint64_t v5 = *(void *)(a1 + 20);
  uint64_t v6 = *(void *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 28);
  unint64_t v9 = *a1;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = v10 + v7;
  unint64_t v12 = (v8 + v8 * a2) / v9;
  uint64_t v13 = v12 + v7;
  uint64_t v199 = *((void *)a1 + 14);
  uint64_t v14 = *((void *)a1 + 19);
  uint64_t v15 = (uint64_t *)*((void *)a1 + 7);
  unint64_t v16 = (uint64_t *)*((void *)a1 + 8);
  uint64_t v17 = *((void *)a1 + 15);
  uint64_t v209 = *v16;
  uint64_t v18 = v16[1];
  uint64_t v19 = v16[2];
  unint64_t v20 = *((void *)a1 + 13) * a2;
  uint64_t v21 = v15[1];
  uint64_t v198 = *v15;
  uint64_t v22 = v15[2];
  uint64_t v23 = **((void **)a1 + 17);
  uint64_t v197 = **((void **)a1 + 16);
  unsigned int v24 = *(_DWORD *)(v14 + 128);
  uint64_t v207 = *(unsigned __int8 *)(v14 + 158);
  v234[0] = *(unsigned char *)(v14 + 158);
  uint64_t v206 = *(unsigned __int8 *)(v14 + 159);
  v234[1] = *(unsigned char *)(v14 + 159);
  uint64_t v205 = *(unsigned __int8 *)(v14 + 160);
  v234[2] = *(unsigned char *)(v14 + 160);
  uint64_t v204 = *(unsigned __int8 *)(v14 + 161);
  v234[3] = *(unsigned char *)(v14 + 161);
  unsigned int v25 = *(unsigned __int16 *)(v14 + 140);
  unsigned int v26 = *(unsigned __int8 *)(v14 + 124);
  unsigned int v27 = *(unsigned __int16 *)(v14 + 142);
  LODWORD(a3) = *(_DWORD *)v14;
  float v28 = *(float *)(v14 + 8);
  float v29 = *(float *)(v14 + 16);
  float v30 = *(float *)(v14 + 20);
  float v31 = *(float *)(v14 + 28);
  _S22 = *(float *)(v14 + 72);
  _S24 = *(float *)(v14 + 76);
  _S29 = *(float *)(v14 + 80);
  _S31 = *(float *)(v14 + 84);
  uint64_t v208 = v18;
  float v231 = *(float *)(v14 + 88);
  float v230 = *(float *)(v14 + 92);
  unint64_t v36 = v23 * (v20 / v9 + v17);
  float v229 = *(float *)(v14 + 96);
  float v228 = *(float *)(v14 + 100);
  float v227 = *(float *)(v14 + 104);
  float v226 = *(float *)(v14 + 108);
  float v225 = *(float *)(v14 + 112);
  float v223 = *(float *)(v14 + 120);
  float v224 = *(float *)(v14 + 116);
  long long v232 = 0u;
  long long v233 = 0u;
  double result = v234;
  do
  {
    int v38 = 0;
    char v39 = v234[v4];
    do
    {
      *(unsigned char *)(((unint64_t)&v232 + ((v39 + 4 * v38) & 0xF8)) | (v39 + 4 * (_BYTE)v38) & 7) = v3 + v38;
      ++v38;
    }
    while (v38 != 8);
    ++v4;
    v3 += 8;
  }
  while (v4 != 4);
  if (v12 != v10)
  {
    float v40 = 0;
    double result = (unsigned char *)(v13 - v11);
    float v41 = (float)v24;
    uint64_t v42 = v14 + 16548;
    float v43 = (float)v27;
    float v44 = 8191.0 / v41;
    _S6 = v44 * *(float *)&a3;
    _S1 = v44 * v28;
    _S2 = v44 * v29;
    _S3 = v44 * v30;
    _S4 = v44 * v31;
    *(short float *)&a3 = (short float)v25;
    uint64_t v50 = v14 + 32932;
    uint64_t v51 = v14 + 164;
    _Q5 = vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    float v221 = _S6;
    float v222 = (float)v25;
    __asm { FCVT            H8, S6 }
    *(short float *)&a3 = -(short float)v27;
    float16x8_t v58 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    float v214 = _S4;
    float v215 = _S3;
    __asm { FCVT            H0, S4 }
    short float v213 = _H0;
    float v216 = _S2;
    float v217 = _S1;
    __asm { FCVT            H0, S2 }
    short float v212 = _H0;
    __asm { FCVT            H0, S3 }
    short float v211 = _H0;
    __asm { FCVT            H0, S1 }
    short float v210 = _H0;
    _S0 = v226;
    __asm { FCVT            H0, S0 }
    short float v219 = *(short float *)&_S0;
    float16x8_t v220 = (float16x8_t)_Q5;
    _S0 = v225;
    __asm { FCVT            H0, S0 }
    short float v218 = *(short float *)&_S0;
    _S0 = v224;
    __asm { FCVT            H15, S0 }
    _S0 = v223;
    __asm
    {
      FCVT            H9, S0
      FCVT            H10, S22
      FCVT            H11, S24
      FCVT            H12, S29
      FCVT            H0, S31
    }
    _S1 = v231;
    __asm { FCVT            H1, S1 }
    _S2 = v230;
    __asm { FCVT            H2, S2 }
    _S3 = v229;
    __asm { FCVT            H3, S3 }
    _S4 = v228;
    __asm { FCVT            H4, S4 }
    *(float *)_Q5.i32 = v227;
    __asm { FCVT            H5, S5 }
    unsigned __int8 v82 = 16 - v26;
    if (v26 >= 0x11) {
      unsigned __int8 v82 = 0;
    }
    uint64_t v83 = v197 + v36 + 4 * v199;
    if (v22) {
      uint64_t v84 = v22 + v19 * v11 + 2 * v6;
    }
    else {
      uint64_t v84 = 0;
    }
    if (v21) {
      uint64_t v85 = v21 + v18 * v11 + 2 * v6;
    }
    else {
      uint64_t v85 = 0;
    }
    uint64_t v86 = v198 + v209 * v11 + 2 * v6;
    uint16x8_t v87 = (uint16x8_t)vdupq_n_s16(-v82);
    v88.i64[0] = 0x9000900090009000;
    v88.i64[1] = 0x9000900090009000;
    float v202 = _S24;
    float v203 = _S22;
    float v200 = _S31;
    float v201 = _S29;
    do
    {
      if ((int)v5 < 8)
      {
        unint64_t v148 = 0;
        size_t v95 = (const __int16 *)v85;
        float v94 = (int8x16_t *)v84;
        float v93 = (_OWORD *)v83;
        float v92 = (uint16x8_t *)v86;
      }
      else
      {
        int v89 = 0;
        int8x8_t v90 = *(int8x8_t *)((char *)&v232 + 8);
        int8x8_t v91 = (int8x8_t)v232;
        float v92 = (uint16x8_t *)v86;
        float v93 = (_OWORD *)v83;
        float v94 = (int8x16_t *)v84;
        size_t v95 = (const __int16 *)v85;
        int8x8_t v97 = *(int8x8_t *)((char *)&v233 + 8);
        int8x8_t v96 = (int8x8_t)v233;
        do
        {
          int8x16_t v98 = 0uLL;
          if (v95)
          {
            int16x8x2_t v236 = vld2q_s16(v95);
            v95 += 16;
            float16x8_t v99 = vcvtq_f16_u16(vshlq_u16((uint16x8_t)v236.val[0], v87));
            v236.val[0] = (int16x8_t)vcvtq_f16_u16(vshlq_u16((uint16x8_t)v236.val[1], v87));
            v236.val[1] = (int16x8_t)vaddq_f16(v58, v99);
            float16x8_t v100 = vaddq_f16(v58, (float16x8_t)v236.val[0]);
            float16x8_t v101 = vmulq_n_f16(v100, v210);
            float16x8_t v102 = vmlaq_n_f16(vmulq_n_f16((float16x8_t)v236.val[1], v212), v100, v211);
            float16x8_t v103 = vmulq_n_f16((float16x8_t)v236.val[1], v213);
          }
          else
          {
            float16x8_t v103 = 0uLL;
            float16x8_t v102 = 0uLL;
            float16x8_t v101 = 0uLL;
          }
          uint16x8_t v104 = *v92++;
          uint16x8_t v105 = v104;
          if (v94)
          {
            int8x16_t v106 = *v94++;
            int8x16_t v98 = v106;
          }
          float16x8_t v107 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v105, v87)), v220);
          float16x8_t v108 = vmlaq_n_f16(v102, v107, _H8);
          float16x8_t v109 = vmlaq_n_f16(v103, v107, _H8);
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v101, v107, _H8), (float16x8_t)0), v88));
          uint32x4_t v111 = vmovl_high_u16(v110);
          float16x8_t v112 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v110.i8);
          v112.i16[0] = *(_WORD *)(v51 + 2 * v112.u32[0]);
          v112.i16[1] = *(_WORD *)(v51 + 2 * v112.u32[1]);
          v112.i16[2] = *(_WORD *)(v51 + 2 * v112.u32[2]);
          v112.i16[3] = *(_WORD *)(v51 + 2 * v112.u32[3]);
          v112.i16[4] = *(_WORD *)(v51 + 2 * v111.u32[0]);
          v112.i16[5] = *(_WORD *)(v51 + 2 * v111.u32[1]);
          v112.i16[6] = *(_WORD *)(v51 + 2 * v111.u32[2]);
          v112.i16[7] = *(_WORD *)(v51 + 2 * v111.u32[3]);
          uint16x8_t v113 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v108, (float16x8_t)0), v88));
          uint32x4_t v114 = vmovl_high_u16(v113);
          float16x8_t v115 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v113.i8);
          v115.i16[0] = *(_WORD *)(v51 + 2 * v115.u32[0]);
          v115.i16[1] = *(_WORD *)(v51 + 2 * v115.u32[1]);
          v115.i16[2] = *(_WORD *)(v51 + 2 * v115.u32[2]);
          v115.i16[3] = *(_WORD *)(v51 + 2 * v115.u32[3]);
          v115.i16[4] = *(_WORD *)(v51 + 2 * v114.u32[0]);
          v115.i16[5] = *(_WORD *)(v51 + 2 * v114.u32[1]);
          v115.i16[6] = *(_WORD *)(v51 + 2 * v114.u32[2]);
          v115.i16[7] = *(_WORD *)(v51 + 2 * v114.u32[3]);
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v109, (float16x8_t)0), v88));
          uint32x4_t v117 = vmovl_high_u16(v116);
          float16x8_t v118 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v116.i8);
          v118.i16[0] = *(_WORD *)(v51 + 2 * v118.u32[0]);
          v118.i16[1] = *(_WORD *)(v51 + 2 * v118.u32[1]);
          v118.i16[2] = *(_WORD *)(v51 + 2 * v118.u32[2]);
          v118.i16[3] = *(_WORD *)(v51 + 2 * v118.u32[3]);
          v118.i16[4] = *(_WORD *)(v51 + 2 * v117.u32[0]);
          v118.i16[5] = *(_WORD *)(v51 + 2 * v117.u32[1]);
          v118.i16[6] = *(_WORD *)(v51 + 2 * v117.u32[2]);
          v118.i16[7] = *(_WORD *)(v51 + 2 * v117.u32[3]);
          uint16x8_t v119 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v112, v219), v115, v218), v118, _H15), vmaxq_f16(vmaxq_f16(v112, v115), v118), _H9), (float16x8_t)0), v88));
          uint32x4_t v120 = vmovl_high_u16(v119);
          float16x8_t v121 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v119.i8);
          v121.i16[0] = *(_WORD *)(v42 + 2 * v121.u32[0]);
          v121.i16[1] = *(_WORD *)(v42 + 2 * v121.u32[1]);
          v121.i16[2] = *(_WORD *)(v42 + 2 * v121.u32[2]);
          v121.i16[3] = *(_WORD *)(v42 + 2 * v121.u32[3]);
          v121.i16[4] = *(_WORD *)(v42 + 2 * v120.u32[0]);
          v121.i16[5] = *(_WORD *)(v42 + 2 * v120.u32[1]);
          v121.i16[6] = *(_WORD *)(v42 + 2 * v120.u32[2]);
          v121.i16[7] = *(_WORD *)(v42 + 2 * v120.u32[3]);
          float16x8_t v122 = vmulq_f16(v112, v121);
          float16x8_t v123 = vmulq_f16(v115, v121);
          float16x8_t v124 = vmulq_f16(v118, v121);
          float16x8_t v125 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v122, _H0), v123, _H1), v124, _H2);
          float16x8_t v126 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, _H5), v123, _H4), v122, _H3);
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v122, _H10), v123, _H11), v124, _H12), (float16x8_t)0), v88));
          uint32x4_t v128 = vmovl_high_u16(v127);
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v127.i8);
          v130.i16[0] = *(_WORD *)(v50 + 2 * v129.u32[0]);
          v130.i16[1] = *(_WORD *)(v50 + 2 * v129.u32[1]);
          v130.i16[2] = *(_WORD *)(v50 + 2 * v129.u32[2]);
          v130.i16[3] = *(_WORD *)(v50 + 2 * v129.u32[3]);
          v130.i16[4] = *(_WORD *)(v50 + 2 * v128.u32[0]);
          v130.i16[5] = *(_WORD *)(v50 + 2 * v128.u32[1]);
          v130.i16[6] = *(_WORD *)(v50 + 2 * v128.u32[2]);
          v130.i16[7] = *(_WORD *)(v50 + 2 * v128.u32[3]);
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v125, (float16x8_t)0), v88));
          uint32x4_t v132 = vmovl_high_u16(v131);
          uint32x4_t v133 = vmovl_u16(*(uint16x4_t *)v131.i8);
          v134.i16[0] = *(_WORD *)(v50 + 2 * v133.u32[0]);
          v134.i16[1] = *(_WORD *)(v50 + 2 * v133.u32[1]);
          v134.i16[2] = *(_WORD *)(v50 + 2 * v133.u32[2]);
          v134.i16[3] = *(_WORD *)(v50 + 2 * v133.u32[3]);
          v134.i16[4] = *(_WORD *)(v50 + 2 * v132.u32[0]);
          v134.i16[5] = *(_WORD *)(v50 + 2 * v132.u32[1]);
          v134.i16[6] = *(_WORD *)(v50 + 2 * v132.u32[2]);
          v134.i16[7] = *(_WORD *)(v50 + 2 * v132.u32[3]);
          uint16x8_t v135 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v126, (float16x8_t)0), v88));
          uint32x4_t v136 = vmovl_high_u16(v135);
          float16x8_t v138 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v135.i8);
          v138.i16[0] = *(_WORD *)(v50 + 2 * v138.u32[0]);
          float v137 = (__int16 *)(v50 + 2 * v136.u32[3]);
          v138.i16[1] = *(_WORD *)(v50 + 2 * v138.u32[1]);
          v138.i16[2] = *(_WORD *)(v50 + 2 * v138.u32[2]);
          v138.i16[3] = *(_WORD *)(v50 + 2 * v138.u32[3]);
          v138.i16[4] = *(_WORD *)(v50 + 2 * v136.u32[0]);
          v138.i16[5] = *(_WORD *)(v50 + 2 * v136.u32[1]);
          v138.i16[6] = *(_WORD *)(v50 + 2 * v136.u32[2]);
          if (v94)
          {
            *(int16x4_t *)v139.i8 = vzip1_s16(*(int16x4_t *)v98.i8, 0);
            v139.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v98.i8, 0);
            int16x4_t v140 = (int16x4_t)vextq_s8(v98, v98, 8uLL).u64[0];
            *(int16x4_t *)v141.i8 = vzip1_s16(v140, 0);
            v141.u64[1] = (unint64_t)vzip2_s16(v140, 0);
            float32x4_t v142 = vcvtq_f32_u32(v141);
            float32x4_t v143 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
            int8x8_t v144 = vmovn_s16(vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_u32(v139), v143)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(v142, v143))));
          }
          else
          {
            int8x8_t v144 = (int8x8_t)-1;
          }
          float16x8_t v145 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          v138.i16[7] = *v137;
          *(int8x8_t *)v235.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v138, (float16x8_t)0), v145)));
          v235.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v130, (float16x8_t)0), v145)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v134, (float16x8_t)0), v145)));
          v235.val[1].u64[1] = (unint64_t)v144;
          *(int8x8_t *)&long long v146 = vqtbl2_s8(v235, v91);
          *((int8x8_t *)&v146 + 1) = vqtbl2_s8(v235, v90);
          *(int8x8_t *)&long long v147 = vqtbl2_s8(v235, v96);
          *((int8x8_t *)&v147 + 1) = vqtbl2_s8(v235, v97);
          *float v93 = v146;
          v93[1] = v147;
          v93 += 2;
          v89 += 8;
        }
        while (v89 < (int)v5 - 7);
        unint64_t v148 = v5 & 0xFFFFFFF8;
        _S24 = v202;
        _S22 = v203;
        _S31 = v200;
        _S29 = v201;
      }
      _CF = v5 >= v148;
      unint64_t v149 = v5 - v148;
      if (v149 != 0 && _CF)
      {
        float v150 = (char *)v93 + v204;
        float v151 = (char *)v93 + v205;
        float v152 = (char *)v93 + v206;
        float v153 = (char *)v93 + v207;
        do
        {
          if (v95)
          {
            float v154 = (float)(*(unsigned __int16 *)v95 >> v82) - v43;
            float v155 = (float)(*((unsigned __int16 *)v95 + 1) >> v82) - v43;
            v95 += 2;
            float v156 = v217 * v155;
            float v157 = (float)(v215 * v155) + (float)(v154 * v216);
            float v158 = v214 * v154;
          }
          else
          {
            float v158 = 0.0;
            float v157 = 0.0;
            float v156 = 0.0;
          }
          unsigned int v159 = v92->u16[0];
          float v92 = (uint16x8_t *)((char *)v92 + 2);
          float v160 = v221 * (float)((float)(int)(v159 >> v82) - v222);
          float v161 = v156 + v160;
          BOOL v162 = (float)(v156 + v160) <= 8191.0;
          float v163 = 8191.0;
          if (v162)
          {
            float v163 = v161;
            if (v161 < 0.0) {
              float v163 = 0.0;
            }
          }
          float v164 = v157 + v160;
          BOOL v162 = (float)(v157 + v160) <= 8191.0;
          float v165 = 8191.0;
          if (v162)
          {
            float v165 = v164;
            if (v164 < 0.0) {
              float v165 = 0.0;
            }
          }
          float v166 = v158 + v160;
          float v167 = 8191.0;
          if (v166 <= 8191.0)
          {
            float v167 = v166;
            if (v166 < 0.0) {
              float v167 = 0.0;
            }
          }
          if (v94)
          {
            unsigned int v169 = v94->u16[0];
            float v94 = (int8x16_t *)((char *)v94 + 2);
            unsigned int v168 = v169;
          }
          else
          {
            unsigned int v168 = 0;
          }
          _H17 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H16 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          unsigned int v173 = llroundf(fminf(fmaxf(v167, 0.0), 8191.0));
          __asm { FCVT            S7, H16 }
          _H16 = *(_WORD *)(v51 + 2 * v173);
          __asm { FCVT            S19, H16 }
          float v177 = (float)((float)((float)(v225 * _S7) + (float)(v226 * _S17)) + (float)(v224 * _S19))
               + (float)(v223 * fmaxf(_S17, fmaxf(_S7, _S19)));
          float v178 = 8191.0;
          if (v177 <= 8191.0)
          {
            float v178 = v177;
            if (v177 < 0.0) {
              float v178 = 0.0;
            }
          }
          _H16 = *(_WORD *)(v42 + 2 * llroundf(v178));
          __asm { FCVT            S20, H16 }
          float v181 = _S17 * _S20;
          float v182 = _S7 * _S20;
          float v183 = _S19 * _S20;
          short float v184 = *(short float *)(v50
                                + 2
                                * llroundf(fminf(fmaxf((float)((float)(_S24 * (float)(_S7 * _S20)) + (float)(v181 * _S22))+ (float)((float)(_S19 * _S20) * _S29), 0.0), 8191.0)));
          char v185 = llroundf((float)v168 * 0.0038911);
          if (v94) {
            char v186 = v185;
          }
          else {
            char v186 = -1;
          }
          if (v184 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H19, #0 }
            if (_NF) {
              _S19 = 0.0;
            }
            else {
              __asm { FCVT            S19, H19 }
            }
          }
          else
          {
            _S19 = 255.0;
          }
          float v189 = (float)((float)(v231 * v182) + (float)(v181 * _S31)) + (float)(v183 * v230);
          float v190 = (float)((float)(v228 * v182) + (float)(v181 * v229)) + (float)(v183 * v227);
          short float v191 = *(short float *)(v50 + 2 * llroundf(fminf(fmaxf(v189, 0.0), 8191.0)));
          short float v192 = *(short float *)(v50 + 2 * llroundf(fminf(fmaxf(v190, 0.0), 8191.0)));
          *float v153 = llroundf(_S19);
          if (v191 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H16, #0 }
            if (_NF) {
              _S16 = 0.0;
            }
            else {
              __asm { FCVT            S16, H16 }
            }
          }
          else
          {
            _S16 = 255.0;
          }
          *float v152 = llroundf(_S16);
          if (v192 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H6, #0 }
            if (_NF) {
              _S6 = 0.0;
            }
            else {
              __asm { FCVT            S6, H6 }
            }
          }
          else
          {
            _S6 = 255.0;
          }
          *float v151 = llroundf(_S6);
          v151 += 4;
          *float v150 = v186;
          v150 += 4;
          v152 += 4;
          v153 += 4;
          --v149;
        }
        while (v149);
      }
      v86 += v209;
      v85 += v208;
      v84 += v19;
      v83 += v23;
      ++v40;
    }
    while (v40 != result);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (uint64_t *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    uint64_t v37 = v13 + 164;
    uint64_t v38 = v13 + 16548;
    uint64_t v39 = v13 + 32932;
    float v40 = *(float *)(v13 + 104);
    float v41 = *(float *)(v13 + 108);
    float v42 = *(float *)(v13 + 112);
    float v43 = *(float *)(v13 + 116);
    float v44 = *(float *)(v13 + 120);
    float v45 = (void *)*((void *)result + 16);
    uint64_t v46 = *((void *)result + 14);
    unint64_t v47 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v48 = *(void *)(result + 36);
    unsigned int v49 = *(unsigned __int8 *)(v13 + 124);
    if (v49 >= 0x11) {
      char v50 = 0;
    }
    else {
      char v50 = 16 - v49;
    }
    double result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 161);
    uint64_t v51 = *(unsigned __int8 *)(v13 + 160);
    uint64_t v52 = *(unsigned __int8 *)(v13 + 159);
    uint64_t v53 = *(unsigned __int8 *)(v13 + 158);
    uint64_t v54 = *v45 + v47 * v19 + 4 * v46;
    uint64_t v55 = v14[2];
    if (v55) {
      uint64_t v56 = v55 + v18 * v11 + 2 * v48;
    }
    else {
      uint64_t v56 = 0;
    }
    uint64_t v58 = *v14;
    uint64_t v57 = v14[1];
    uint64_t v59 = v57 + v17 * v11 + 2 * v48;
    if (!v57) {
      uint64_t v59 = 0;
    }
    uint64_t v60 = v58 + v16 * v11 + 2 * v48;
    char v61 = v50;
    do
    {
      if (v10)
      {
        uint64_t v62 = v10;
        unsigned int v63 = (unsigned __int16 *)v60;
        uint64_t v64 = v54;
        uint64_t v65 = (unsigned __int16 *)v56;
        uint64_t v66 = (unsigned __int16 *)v59;
        do
        {
          if (v66)
          {
            float v67 = (float)(*v66 >> v61) - v23;
            float v68 = (float)(v66[1] >> v61) - v23;
            v66 += 2;
            float v69 = v25 * v68;
            float v70 = (float)(v27 * v68) + (float)(v67 * v26);
            float v71 = v28 * v67;
          }
          else
          {
            float v71 = 0.0;
            float v70 = 0.0;
            float v69 = 0.0;
          }
          unsigned int v72 = *v63++;
          float v73 = v24 * (float)((float)(int)(v72 >> v61) - v22);
          float v74 = v69 + v73;
          BOOL v75 = (float)(v69 + v73) <= 8191.0;
          float v76 = 8191.0;
          if (v75)
          {
            float v76 = v74;
            if (v74 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v70 + v73;
          BOOL v75 = (float)(v70 + v73) <= 8191.0;
          float v78 = 8191.0;
          if (v75)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v71 + v73;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          if (v65)
          {
            unsigned int v82 = *v65++;
            unsigned int v81 = v82;
          }
          else
          {
            unsigned int v81 = 0;
          }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          unsigned int v90 = llroundf(fminf(fmaxf(v80, 0.0), 8191.0));
          __asm { FCVT            S9, H10 }
          _H10 = *(_WORD *)(v37 + 2 * v90);
          __asm { FCVT            S11, H10 }
          float v94 = (float)((float)((float)(v42 * _S9) + (float)(v41 * _S8)) + (float)(v43 * _S11))
              + (float)(v44 * fmaxf(_S8, fmaxf(_S9, _S11)));
          float v95 = 8191.0;
          if (v94 <= 8191.0)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          _H10 = *(_WORD *)(v38 + 2 * llroundf(v95));
          __asm { FCVT            S12, H10 }
          float v98 = _S8 * _S12;
          float v99 = _S9 * _S12;
          float v100 = _S11 * _S12;
          short float v101 = *(short float *)(v39
                                + 2
                                * llroundf(fminf(fmaxf((float)((float)(v30 * v99) + (float)(v98 * v29))+ (float)((float)(_S11 * _S12) * v31), 0.0), 8191.0)));
          char v102 = llroundf((float)v81 * 0.0038911);
          if (!v65) {
            char v102 = -1;
          }
          if (v101 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H11, #0 }
            if (_NF) {
              _S11 = 0.0;
            }
            else {
              __asm { FCVT            S11, H11 }
            }
          }
          else
          {
            _S11 = 255.0;
          }
          float v105 = (float)((float)(v33 * v99) + (float)(v98 * v32)) + (float)(v100 * v34);
          float v106 = (float)((float)(v36 * v99) + (float)(v98 * v35)) + (float)(v100 * v40);
          short float v107 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          short float v108 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          *(unsigned char *)(v64 + v53) = llroundf(_S11);
          if (v107 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H9, #0 }
            if (_NF) {
              _S9 = 0.0;
            }
            else {
              __asm { FCVT            S9, H9 }
            }
          }
          else
          {
            _S9 = 255.0;
          }
          *(unsigned char *)(v64 + v52) = llroundf(_S9);
          if (v108 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H8, #0 }
            if (_NF) {
              _S8 = 0.0;
            }
            else {
              __asm { FCVT            S8, H8 }
            }
          }
          else
          {
            _S8 = 255.0;
          }
          *(unsigned char *)(v64 + v51) = llroundf(_S8);
          result[v64] = v102;
          v64 += 4;
          --v62;
        }
        while (v62);
      }
      v60 += v16;
      v59 += v17;
      v56 += v18;
      v54 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_BGRA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

long long *vt_Copy_xf444_TRC_Mat_TRC_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  char v3 = 0;
  uint64_t v4 = 0;
  unint64_t v5 = *(void *)(a1 + 20);
  uint64_t v6 = *(void *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 28);
  unint64_t v9 = *a1;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = v10 + v7;
  unint64_t v12 = (v8 + v8 * a2) / v9;
  uint64_t v13 = v12 + v7;
  uint64_t v14 = *((void *)a1 + 15);
  uint64_t v169 = *((void *)a1 + 14);
  uint64_t v15 = *((void *)a1 + 19);
  uint64_t v17 = (uint64_t *)*((void *)a1 + 7);
  uint64_t v16 = (uint64_t *)*((void *)a1 + 8);
  unint64_t v18 = *((void *)a1 + 13) * a2;
  uint64_t v181 = *v16;
  uint64_t v19 = v16[1];
  uint64_t v20 = v16[2];
  uint64_t v21 = v17[1];
  uint64_t v168 = *v17;
  uint64_t v22 = v17[2];
  uint64_t v23 = **((void **)a1 + 17);
  uint64_t v167 = **((void **)a1 + 16);
  unsigned int v24 = *(_DWORD *)(v15 + 128);
  uint64_t v179 = *(unsigned __int8 *)(v15 + 158);
  v197[0] = *(unsigned char *)(v15 + 158);
  uint64_t v178 = *(unsigned __int8 *)(v15 + 159);
  v197[1] = *(unsigned char *)(v15 + 159);
  uint64_t v177 = *(unsigned __int8 *)(v15 + 160);
  v197[2] = *(unsigned char *)(v15 + 160);
  uint64_t v176 = *(unsigned __int8 *)(v15 + 161);
  v197[3] = *(unsigned char *)(v15 + 161);
  unsigned int v25 = *(unsigned __int16 *)(v15 + 140);
  unsigned int v26 = *(unsigned __int8 *)(v15 + 124);
  unsigned int v27 = *(unsigned __int16 *)(v15 + 142);
  float v28 = *(float *)v15;
  float v29 = *(float *)(v15 + 8);
  float v30 = *(float *)(v15 + 16);
  float v31 = *(float *)(v15 + 20);
  float v32 = *(float *)(v15 + 28);
  uint64_t v180 = v19;
  _S7 = *(float *)(v15 + 72);
  _S16 = *(float *)(v15 + 76);
  unint64_t v35 = v23 * (v18 / v9 + v14);
  _S17 = *(float *)(v15 + 80);
  _S24 = *(float *)(v15 + 84);
  _S27 = *(float *)(v15 + 88);
  _S28 = *(float *)(v15 + 92);
  float v193 = *(float *)(v15 + 100);
  float v194 = *(float *)(v15 + 96);
  float v192 = *(float *)(v15 + 104);
  long long v195 = 0u;
  long long v196 = 0u;
  double result = &v195;
  do
  {
    int v41 = 0;
    char v42 = v197[v4];
    do
    {
      *(unsigned char *)(((unint64_t)&v195 + ((v42 + 4 * v41) & 0xF8)) | (v42 + 4 * (_BYTE)v41) & 7) = v3 + v41;
      ++v41;
    }
    while (v41 != 8);
    ++v4;
    v3 += 8;
  }
  while (v4 != 4);
  if (v12 != v10)
  {
    float v43 = 0;
    double result = (long long *)(v13 - v11);
    float v44 = (float)v24;
    uint64_t v45 = v15 + 16548;
    uint64_t v46 = v15 + 164;
    float v191 = (float)v25;
    *(short float *)v2.i16 = (short float)v25;
    float v47 = 8191.0 / v44;
    float v48 = (float)v27;
    _S25 = v47 * v28;
    __asm { FCVT            H8, S0 }
    _Q0 = vdupq_lane_s16(v2, 0);
    float16x8_t v190 = (float16x8_t)_Q0;
    *(short float *)_Q0.i16 = -(short float)v27;
    float16x8_t v56 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float v186 = v47 * v32;
    float v187 = v47 * v31;
    __asm { FCVT            H0, S4 }
    short float v185 = *(short float *)_Q0.i16;
    float v188 = v47 * v30;
    float v189 = v47 * v29;
    __asm { FCVT            H0, S2 }
    short float v184 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S3 }
    short float v183 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S1 }
    short float v182 = *(short float *)_Q0.i16;
    __asm
    {
      FCVT            H13, S7
      FCVT            H14, S16
      FCVT            H15, S17
      FCVT            H9, S24
      FCVT            H10, S27
      FCVT            H11, S28
    }
    *(float *)_Q0.i32 = v194;
    __asm { FCVT            H12, S0 }
    _S1 = v192;
    *(float *)_Q0.i32 = v193;
    __asm
    {
      FCVT            H0, S0
      FCVT            H1, S1
    }
    unsigned __int8 v67 = 16 - v26;
    if (v26 >= 0x11) {
      unsigned __int8 v67 = 0;
    }
    uint64_t v68 = v167 + v35 + 4 * v169;
    if (v22) {
      uint64_t v69 = v22 + v20 * v11 + 2 * v6;
    }
    else {
      uint64_t v69 = 0;
    }
    if (v21) {
      uint64_t v70 = v21 + v19 * v11 + 2 * v6;
    }
    else {
      uint64_t v70 = 0;
    }
    uint64_t v71 = v168 + v181 * v11 + 2 * v6;
    uint16x8_t v72 = (uint16x8_t)vdupq_n_s16(-v67);
    v73.i64[0] = 0x9000900090009000;
    v73.i64[1] = 0x9000900090009000;
    float v174 = _S16;
    float v175 = _S7;
    float v172 = _S24;
    float v173 = _S17;
    float v170 = _S28;
    float v171 = _S27;
    do
    {
      if ((int)v5 < 8)
      {
        unint64_t v125 = 0;
        float v80 = (const __int16 *)v70;
        float v79 = (int8x16_t *)v69;
        float v78 = (_OWORD *)v68;
        float v77 = (uint16x8_t *)v71;
      }
      else
      {
        int v74 = 0;
        int8x8_t v76 = *(int8x8_t *)((char *)&v195 + 8);
        int8x8_t v75 = (int8x8_t)v195;
        float v77 = (uint16x8_t *)v71;
        float v78 = (_OWORD *)v68;
        float v79 = (int8x16_t *)v69;
        float v80 = (const __int16 *)v70;
        int8x8_t v82 = *(int8x8_t *)((char *)&v196 + 8);
        int8x8_t v81 = (int8x8_t)v196;
        do
        {
          int8x16_t v83 = 0uLL;
          if (v80)
          {
            int16x8x2_t v198 = vld2q_s16(v80);
            v80 += 16;
            float16x8_t v84 = vcvtq_f16_u16(vshlq_u16((uint16x8_t)v198.val[0], v72));
            v198.val[0] = (int16x8_t)vcvtq_f16_u16(vshlq_u16((uint16x8_t)v198.val[1], v72));
            v198.val[1] = (int16x8_t)vaddq_f16(v56, v84);
            float16x8_t v85 = vaddq_f16(v56, (float16x8_t)v198.val[0]);
            float16x8_t v86 = vmulq_n_f16(v85, v182);
            float16x8_t v87 = vmlaq_n_f16(vmulq_n_f16((float16x8_t)v198.val[1], v184), v85, v183);
            float16x8_t v88 = vmulq_n_f16((float16x8_t)v198.val[1], v185);
          }
          else
          {
            float16x8_t v88 = 0uLL;
            float16x8_t v87 = 0uLL;
            float16x8_t v86 = 0uLL;
          }
          uint16x8_t v89 = *v77++;
          uint16x8_t v90 = v89;
          if (v79)
          {
            int8x16_t v91 = *v79++;
            int8x16_t v83 = v91;
          }
          float16x8_t v92 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v90, v72)), v190);
          uint16x8_t v93 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v86, v92, _H8), (float16x8_t)0), v73));
          uint32x4_t v94 = vmovl_high_u16(v93);
          float16x8_t v95 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v93.i8);
          v95.i16[0] = *(_WORD *)(v46 + 2 * v95.u32[0]);
          v95.i16[1] = *(_WORD *)(v46 + 2 * v95.u32[1]);
          v95.i16[2] = *(_WORD *)(v46 + 2 * v95.u32[2]);
          v95.i16[3] = *(_WORD *)(v46 + 2 * v95.u32[3]);
          v95.i16[4] = *(_WORD *)(v46 + 2 * v94.u32[0]);
          v95.i16[5] = *(_WORD *)(v46 + 2 * v94.u32[1]);
          v95.i16[6] = *(_WORD *)(v46 + 2 * v94.u32[2]);
          v95.i16[7] = *(_WORD *)(v46 + 2 * v94.u32[3]);
          uint16x8_t v96 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v87, v92, _H8), (float16x8_t)0), v73));
          uint32x4_t v97 = vmovl_high_u16(v96);
          float16x8_t v98 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v96.i8);
          v98.i16[0] = *(_WORD *)(v46 + 2 * v98.u32[0]);
          v98.i16[1] = *(_WORD *)(v46 + 2 * v98.u32[1]);
          v98.i16[2] = *(_WORD *)(v46 + 2 * v98.u32[2]);
          v98.i16[3] = *(_WORD *)(v46 + 2 * v98.u32[3]);
          v98.i16[4] = *(_WORD *)(v46 + 2 * v97.u32[0]);
          v98.i16[5] = *(_WORD *)(v46 + 2 * v97.u32[1]);
          v98.i16[6] = *(_WORD *)(v46 + 2 * v97.u32[2]);
          v98.i16[7] = *(_WORD *)(v46 + 2 * v97.u32[3]);
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v88, v92, _H8), (float16x8_t)0), v73));
          uint32x4_t v100 = vmovl_high_u16(v99);
          float16x8_t v101 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v99.i8);
          v101.i16[0] = *(_WORD *)(v46 + 2 * v101.u32[0]);
          v101.i16[1] = *(_WORD *)(v46 + 2 * v101.u32[1]);
          v101.i16[2] = *(_WORD *)(v46 + 2 * v101.u32[2]);
          v101.i16[3] = *(_WORD *)(v46 + 2 * v101.u32[3]);
          v101.i16[4] = *(_WORD *)(v46 + 2 * v100.u32[0]);
          v101.i16[5] = *(_WORD *)(v46 + 2 * v100.u32[1]);
          v101.i16[6] = *(_WORD *)(v46 + 2 * v100.u32[2]);
          v101.i16[7] = *(_WORD *)(v46 + 2 * v100.u32[3]);
          float16x8_t v102 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v95, _H9), v98, _H10), v101, _H11);
          float16x8_t v103 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v101, _H1), v98, _H0), v95, _H12);
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v95, _H13), v98, _H14), v101, _H15), (float16x8_t)0), v73));
          uint32x4_t v105 = vmovl_high_u16(v104);
          uint32x4_t v106 = vmovl_u16(*(uint16x4_t *)v104.i8);
          v107.i16[0] = *(_WORD *)(v45 + 2 * v106.u32[0]);
          v107.i16[1] = *(_WORD *)(v45 + 2 * v106.u32[1]);
          v107.i16[2] = *(_WORD *)(v45 + 2 * v106.u32[2]);
          v107.i16[3] = *(_WORD *)(v45 + 2 * v106.u32[3]);
          v107.i16[4] = *(_WORD *)(v45 + 2 * v105.u32[0]);
          v107.i16[5] = *(_WORD *)(v45 + 2 * v105.u32[1]);
          v107.i16[6] = *(_WORD *)(v45 + 2 * v105.u32[2]);
          v107.i16[7] = *(_WORD *)(v45 + 2 * v105.u32[3]);
          uint16x8_t v108 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v102, (float16x8_t)0), v73));
          uint32x4_t v109 = vmovl_high_u16(v108);
          uint32x4_t v110 = vmovl_u16(*(uint16x4_t *)v108.i8);
          v111.i16[0] = *(_WORD *)(v45 + 2 * v110.u32[0]);
          v111.i16[1] = *(_WORD *)(v45 + 2 * v110.u32[1]);
          v111.i16[2] = *(_WORD *)(v45 + 2 * v110.u32[2]);
          v111.i16[3] = *(_WORD *)(v45 + 2 * v110.u32[3]);
          v111.i16[4] = *(_WORD *)(v45 + 2 * v109.u32[0]);
          v111.i16[5] = *(_WORD *)(v45 + 2 * v109.u32[1]);
          v111.i16[6] = *(_WORD *)(v45 + 2 * v109.u32[2]);
          v111.i16[7] = *(_WORD *)(v45 + 2 * v109.u32[3]);
          uint16x8_t v112 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v103, (float16x8_t)0), v73));
          uint32x4_t v113 = vmovl_high_u16(v112);
          float16x8_t v115 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v112.i8);
          v115.i16[0] = *(_WORD *)(v45 + 2 * v115.u32[0]);
          uint32x4_t v114 = (__int16 *)(v45 + 2 * v113.u32[3]);
          v115.i16[1] = *(_WORD *)(v45 + 2 * v115.u32[1]);
          v115.i16[2] = *(_WORD *)(v45 + 2 * v115.u32[2]);
          v115.i16[3] = *(_WORD *)(v45 + 2 * v115.u32[3]);
          v115.i16[4] = *(_WORD *)(v45 + 2 * v113.u32[0]);
          v115.i16[5] = *(_WORD *)(v45 + 2 * v113.u32[1]);
          v115.i16[6] = *(_WORD *)(v45 + 2 * v113.u32[2]);
          if (v79)
          {
            *(int16x4_t *)v116.i8 = vzip1_s16(*(int16x4_t *)v83.i8, 0);
            v116.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v83.i8, 0);
            int16x4_t v117 = (int16x4_t)vextq_s8(v83, v83, 8uLL).u64[0];
            *(int16x4_t *)v118.i8 = vzip1_s16(v117, 0);
            v118.u64[1] = (unint64_t)vzip2_s16(v117, 0);
            float32x4_t v119 = vcvtq_f32_u32(v118);
            float32x4_t v120 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
            int8x8_t v121 = vmovn_s16(vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_u32(v116), v120)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(v119, v120))));
          }
          else
          {
            int8x8_t v121 = (int8x8_t)-1;
          }
          float16x8_t v122 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          v115.i16[7] = *v114;
          *(int8x8_t *)v199.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v122)));
          v199.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v107, (float16x8_t)0), v122)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v111, (float16x8_t)0), v122)));
          v199.val[1].u64[1] = (unint64_t)v121;
          *(int8x8_t *)&long long v123 = vqtbl2_s8(v199, v75);
          *((int8x8_t *)&v123 + 1) = vqtbl2_s8(v199, v76);
          *(int8x8_t *)&long long v124 = vqtbl2_s8(v199, v81);
          *((int8x8_t *)&v124 + 1) = vqtbl2_s8(v199, v82);
          *float v78 = v123;
          v78[1] = v124;
          v78 += 2;
          v74 += 8;
        }
        while (v74 < (int)v5 - 7);
        unint64_t v125 = v5 & 0xFFFFFFF8;
        _S16 = v174;
        _S7 = v175;
        _S24 = v172;
        _S17 = v173;
        _S28 = v170;
        _S27 = v171;
      }
      unint64_t v126 = v5 - v125;
      if (v5 > v125)
      {
        uint16x8_t v127 = (char *)v78 + v176;
        uint32x4_t v128 = (char *)v78 + v177;
        uint32x4_t v129 = (char *)v78 + v178;
        float16x8_t v130 = (char *)v78 + v179;
        do
        {
          if (v80)
          {
            float v131 = (float)(*(unsigned __int16 *)v80 >> v67) - v48;
            float v132 = (float)(*((unsigned __int16 *)v80 + 1) >> v67) - v48;
            v80 += 2;
            float v133 = v189 * v132;
            float v134 = (float)(v187 * v132) + (float)(v131 * v188);
            float v135 = v186 * v131;
          }
          else
          {
            float v135 = 0.0;
            float v134 = 0.0;
            float v133 = 0.0;
          }
          unsigned int v136 = v77->u16[0];
          float v77 = (uint16x8_t *)((char *)v77 + 2);
          float v137 = _S25 * (float)((float)(int)(v136 >> v67) - v191);
          float v138 = v133 + v137;
          BOOL v139 = (float)(v133 + v137) <= 8191.0;
          float v140 = 8191.0;
          if (v139)
          {
            float v140 = v138;
            if (v138 < 0.0) {
              float v140 = 0.0;
            }
          }
          float v141 = v134 + v137;
          BOOL v139 = (float)(v134 + v137) <= 8191.0;
          float v142 = 8191.0;
          if (v139)
          {
            float v142 = v141;
            if (v141 < 0.0) {
              float v142 = 0.0;
            }
          }
          float v143 = v135 + v137;
          float v144 = 8191.0;
          if (v143 <= 8191.0)
          {
            float v144 = v143;
            if (v143 < 0.0) {
              float v144 = 0.0;
            }
          }
          if (v79)
          {
            unsigned int v146 = v79->u16[0];
            float v79 = (int8x16_t *)((char *)v79 + 2);
            unsigned int v145 = v146;
          }
          else
          {
            unsigned int v145 = 0;
          }
          _H5 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v140, 0.0), 8191.0)));
          unsigned int v148 = llroundf(fminf(fmaxf(v142, 0.0), 8191.0));
          __asm { FCVT            S4, H5 }
          _H5 = *(_WORD *)(v46 + 2 * v148);
          __asm { FCVT            S5, H5 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          short float v154 = *(short float *)(v45
                                + 2
                                * llroundf(fminf(fmaxf((float)((float)(_S16 * _S5) + (float)(_S4 * _S7)) + (float)(_S22 * _S17), 0.0), 8191.0)));
          char v155 = llroundf((float)v145 * 0.0038911);
          if (v79) {
            char v156 = v155;
          }
          else {
            char v156 = -1;
          }
          if (v154 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H23, #0 }
            if (_NF) {
              _S23 = 0.0;
            }
            else {
              __asm { FCVT            S23, H23 }
            }
          }
          else
          {
            _S23 = 255.0;
          }
          float v159 = (float)((float)(_S27 * _S5) + (float)(_S4 * _S24)) + (float)(_S22 * _S28);
          float v160 = (float)((float)(v193 * _S5) + (float)(_S4 * v194)) + (float)(_S22 * v192);
          short float v161 = *(short float *)(v45 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          short float v162 = *(short float *)(v45 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          *float16x8_t v130 = llroundf(_S23);
          if (v161 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H4, #0 }
            if (_NF) {
              _S4 = 0.0;
            }
            else {
              __asm { FCVT            S4, H4 }
            }
          }
          else
          {
            _S4 = 255.0;
          }
          *uint32x4_t v129 = llroundf(_S4);
          if (v162 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H2, #0 }
            if (_NF) {
              _S2 = 0.0;
            }
            else {
              __asm { FCVT            S2, H2 }
            }
          }
          else
          {
            _S2 = 255.0;
          }
          *uint32x4_t v128 = llroundf(_S2);
          v128 += 4;
          *uint16x8_t v127 = v156;
          v127 += 4;
          v129 += 4;
          v130 += 4;
          --v126;
        }
        while (v126);
      }
      v71 += v181;
      v70 += v180;
      v69 += v20;
      v68 += v23;
      float v43 = (long long *)((char *)v43 + 1);
    }
    while (v43 != result);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (uint64_t *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    float v37 = *(float *)(v13 + 104);
    uint64_t v38 = v13 + 164;
    uint64_t v39 = v13 + 16548;
    float v40 = (void *)*((void *)result + 16);
    uint64_t v41 = *((void *)result + 14);
    unint64_t v42 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v43 = *(void *)(result + 36);
    unsigned int v44 = *(unsigned __int8 *)(v13 + 124);
    if (v44 >= 0x11) {
      char v45 = 0;
    }
    else {
      char v45 = 16 - v44;
    }
    uint64_t v46 = *(unsigned __int8 *)(v13 + 161);
    double result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 160);
    uint64_t v47 = *(unsigned __int8 *)(v13 + 159);
    uint64_t v48 = *(unsigned __int8 *)(v13 + 158);
    uint64_t v49 = *v40 + v42 * v19 + 4 * v41;
    uint64_t v50 = v14[2];
    if (v50) {
      uint64_t v51 = v50 + v18 * v11 + 2 * v43;
    }
    else {
      uint64_t v51 = 0;
    }
    uint64_t v53 = *v14;
    uint64_t v52 = v14[1];
    uint64_t v54 = v52 + v17 * v11 + 2 * v43;
    if (!v52) {
      uint64_t v54 = 0;
    }
    uint64_t v55 = v53 + v16 * v11 + 2 * v43;
    char v56 = v45;
    do
    {
      if (v10)
      {
        uint64_t v57 = v10;
        uint64_t v58 = (unsigned __int16 *)v55;
        uint64_t v59 = v49;
        uint64_t v60 = (unsigned __int16 *)v51;
        char v61 = (unsigned __int16 *)v54;
        do
        {
          if (v61)
          {
            float v62 = (float)(*v61 >> v56) - v23;
            float v63 = (float)(v61[1] >> v56) - v23;
            v61 += 2;
            float v64 = v25 * v63;
            float v65 = (float)(v27 * v63) + (float)(v62 * v26);
            float v66 = v28 * v62;
          }
          else
          {
            float v66 = 0.0;
            float v65 = 0.0;
            float v64 = 0.0;
          }
          unsigned int v67 = *v58++;
          float v68 = v24 * (float)((float)(int)(v67 >> v56) - v22);
          float v69 = v64 + v68;
          BOOL v70 = (float)(v64 + v68) <= 8191.0;
          float v71 = 8191.0;
          if (v70)
          {
            float v71 = v69;
            if (v69 < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v65 + v68;
          BOOL v70 = (float)(v65 + v68) <= 8191.0;
          float v73 = 8191.0;
          if (v70)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v66 + v68;
          float v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          if (v60)
          {
            unsigned int v77 = *v60++;
            unsigned int v76 = v77;
          }
          else
          {
            unsigned int v76 = 0;
          }
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          short float v88 = *(short float *)(v39
                               + 2
                               * llroundf(fminf(fmaxf((float)((float)(v30 * _S29) + (float)(_S28 * v29)) + (float)(_S30 * v31), 0.0), 8191.0)));
          char v89 = llroundf((float)v76 * 0.0038911);
          if (!v60) {
            char v89 = -1;
          }
          if (v88 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H31, #0 }
            if (_NF) {
              _S31 = 0.0;
            }
            else {
              __asm { FCVT            S31, H31 }
            }
          }
          else
          {
            _S31 = 255.0;
          }
          float v92 = (float)((float)(v33 * _S29) + (float)(_S28 * v32)) + (float)(_S30 * v34);
          float v93 = (float)((float)(v36 * _S29) + (float)(_S28 * v35)) + (float)(_S30 * v37);
          short float v94 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          short float v95 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          *(unsigned char *)(v59 + v48) = llroundf(_S31);
          if (v94 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H29, #0 }
            if (_NF) {
              _S29 = 0.0;
            }
            else {
              __asm { FCVT            S29, H29 }
            }
          }
          else
          {
            _S29 = 255.0;
          }
          *(unsigned char *)(v59 + v47) = llroundf(_S29);
          if (v95 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H28, #0 }
            if (_NF) {
              _S28 = 0.0;
            }
            else {
              __asm { FCVT            S28, H28 }
            }
          }
          else
          {
            _S28 = 255.0;
          }
          result[v59] = llroundf(_S28);
          *(unsigned char *)(v59 + v46) = v89;
          v59 += 4;
          --v57;
        }
        while (v57);
      }
      v55 += v16;
      v54 += v17;
      v51 += v18;
      v49 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_BGRA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_BGRA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_xf444_rgb_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  char v4 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = *(void *)(a1 + 20);
  uint64_t v7 = *(void *)(a1 + 36);
  uint64_t v8 = *(void *)(a1 + 44);
  uint64_t v9 = *(void *)(a1 + 28);
  unint64_t v10 = *a1;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = v11 + v8;
  unint64_t v13 = (v9 + v9 * a2) / v10;
  uint64_t v117 = v13 + v8;
  uint64_t v14 = *((void *)a1 + 15);
  uint64_t v120 = *((void *)a1 + 14);
  unint64_t v15 = *((void *)a1 + 13) * a2;
  uint64_t v16 = *((void *)a1 + 19);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 7);
  uint64_t v17 = (uint64_t *)*((void *)a1 + 8);
  uint64_t v19 = *v17;
  uint64_t v20 = v17[1];
  uint64_t v21 = v17[2];
  uint64_t v23 = *v18;
  uint64_t v22 = v18[1];
  uint64_t v24 = v18[2];
  uint64_t v25 = **((void **)a1 + 17);
  uint64_t v118 = **((void **)a1 + 16);
  uint64_t v119 = v23;
  uint64_t result = *(unsigned int *)(v16 + 128);
  unsigned int v27 = *(_DWORD *)(v16 + 136);
  uint64_t v28 = *(unsigned __int8 *)(v16 + 158);
  v123[0] = *(unsigned char *)(v16 + 158);
  uint64_t v29 = *(unsigned __int8 *)(v16 + 159);
  v123[1] = *(unsigned char *)(v16 + 159);
  uint64_t v30 = *(unsigned __int8 *)(v16 + 160);
  v123[2] = *(unsigned char *)(v16 + 160);
  uint64_t v31 = *(unsigned __int8 *)(v16 + 161);
  v123[3] = *(unsigned char *)(v16 + 161);
  unsigned int v32 = *(unsigned __int16 *)(v16 + 140);
  unsigned int v33 = *(unsigned __int8 *)(v16 + 124);
  unint64_t v116 = v25 * (v15 / v10 + v14);
  unsigned int v34 = *(unsigned __int16 *)(v16 + 142);
  float v35 = *(float *)v16;
  float v36 = *(float *)(v16 + 8);
  float v37 = *(float *)(v16 + 16);
  float v38 = *(float *)(v16 + 20);
  float v39 = *(float *)(v16 + 28);
  long long v121 = 0u;
  long long v122 = 0u;
  do
  {
    int v40 = 0;
    char v41 = v123[v5];
    do
    {
      *(unsigned char *)(((unint64_t)&v121 + ((v41 + 4 * v40) & 0xF8)) | (v41 + 4 * (_BYTE)v40) & 7) = v4 + v40;
      ++v40;
    }
    while (v40 != 8);
    ++v5;
    v4 += 8;
  }
  while (v5 != 4);
  if (v13 != v11)
  {
    uint64_t v42 = 0;
    float v43 = (float)result;
    uint64_t result = v117 - v12;
    float v44 = (float)v27 / v43;
    float v45 = (float)v34;
    _S2 = v44 * v35;
    _S3 = v44 * v36;
    _S4 = v44 * v37;
    _S5 = v44 * v38;
    _S6 = v44 * v39;
    __asm { FCVT            H7, S2 }
    *(short float *)v2.i16 = (short float)v32;
    float16x8_t v56 = (float16x8_t)vdupq_lane_s16(v2, 0);
    *(short float *)v3.i16 = -(short float)v34;
    float16x8_t v57 = (float16x8_t)vdupq_lane_s16(v3, 0);
    __asm
    {
      FCVT            H8, S6
      FCVT            H9, S4
      FCVT            H10, S5
      FCVT            H11, S3
    }
    uint64_t v62 = v24 + v21 * v12 + 2 * v7;
    if (v33 >= 0x11) {
      unsigned __int8 v63 = 0;
    }
    else {
      unsigned __int8 v63 = 16 - v33;
    }
    uint64_t v64 = v118 + v116 + 4 * v120;
    if (!v24) {
      uint64_t v62 = 0;
    }
    if (v22) {
      uint64_t v65 = v22 + v20 * v12 + 2 * v7;
    }
    else {
      uint64_t v65 = 0;
    }
    uint64_t v66 = v119 + v19 * v12 + 2 * v7;
    unsigned __int8 v67 = v63;
    uint16x8_t v68 = (uint16x8_t)vdupq_n_s16(-v63);
    float16x8_t v69 = (float16x8_t)vdupq_n_s16(0x5BF8u);
    float32x4_t v70 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
    while (1)
    {
      if ((int)v6 < 8)
      {
        unint64_t v94 = 0;
        unsigned int v77 = (const __int16 *)v65;
        unsigned int v76 = (int8x16_t *)v62;
        float v75 = (_OWORD *)v64;
        float v74 = (uint16x8_t *)v66;
      }
      else
      {
        int v71 = 0;
        int8x8_t v73 = *(int8x8_t *)((char *)&v121 + 8);
        int8x8_t v72 = (int8x8_t)v121;
        float v74 = (uint16x8_t *)v66;
        float v75 = (_OWORD *)v64;
        unsigned int v76 = (int8x16_t *)v62;
        unsigned int v77 = (const __int16 *)v65;
        int8x8_t v79 = *(int8x8_t *)((char *)&v122 + 8);
        int8x8_t v78 = (int8x8_t)v122;
        do
        {
          if (v77)
          {
            int16x8x2_t v125 = vld2q_s16(v77);
            v77 += 16;
            float16x8_t v80 = vaddq_f16(v57, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v125.val[0], v68)));
            v125.val[0] = (int16x8_t)vaddq_f16(v57, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v125.val[1], v68)));
            float16x8_t v81 = vmulq_n_f16((float16x8_t)v125.val[0], _H11);
            float16x8_t v82 = vmlaq_n_f16(vmulq_n_f16(v80, _H9), (float16x8_t)v125.val[0], _H10);
            float16x8_t v83 = vmulq_n_f16(v80, _H8);
          }
          else
          {
            float16x8_t v83 = 0uLL;
            float16x8_t v82 = 0uLL;
            float16x8_t v81 = 0uLL;
          }
          uint16x8_t v84 = *v74++;
          uint16x8_t v85 = v84;
          if (v76)
          {
            int8x16_t v86 = *v76++;
            *(int16x4_t *)v87.i8 = vzip1_s16(*(int16x4_t *)v86.i8, 0);
            v87.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v86.i8, 0);
            int16x4_t v88 = (int16x4_t)vextq_s8(v86, v86, 8uLL).u64[0];
            *(int16x4_t *)v89.i8 = vzip1_s16(v88, 0);
            v89.u64[1] = (unint64_t)vzip2_s16(v88, 0);
            int8x8_t v90 = vmovn_s16(vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_u32(v87), v70)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_u32(v89), v70))));
          }
          else
          {
            int8x8_t v90 = (int8x8_t)-1;
          }
          float16x8_t v91 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v85, v68)), v56);
          *(int8x8_t *)v124.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v83, v91, _H7), (float16x8_t)0), v69)));
          v124.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v81, v91, _H7), (float16x8_t)0), v69)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v82, v91, _H7), (float16x8_t)0), v69)));
          v124.val[1].u64[1] = (unint64_t)v90;
          *(int8x8_t *)&long long v92 = vqtbl2_s8(v124, v72);
          *((int8x8_t *)&v92 + 1) = vqtbl2_s8(v124, v73);
          *(int8x8_t *)&long long v93 = vqtbl2_s8(v124, v78);
          *((int8x8_t *)&v93 + 1) = vqtbl2_s8(v124, v79);
          *float v75 = v92;
          v75[1] = v93;
          v75 += 2;
          v71 += 8;
        }
        while (v71 < (int)v6 - 7);
        unint64_t v94 = v6 & 0xFFFFFFF8;
      }
      _CF = v6 >= v94;
      unint64_t v95 = v6 - v94;
      if (v95 != 0 && _CF) {
        break;
      }
LABEL_46:
      v66 += v19;
      v65 += v20;
      v62 += v21;
      v64 += v25;
      if (++v42 == result) {
        return result;
      }
    }
    uint16x8_t v96 = (char *)v75 + v31;
    uint32x4_t v97 = (char *)v75 + v30;
    float16x8_t v98 = (char *)v75 + v29;
    uint16x8_t v99 = (char *)v75 + v28;
    while (1)
    {
      if (v77)
      {
        float v100 = (float)(*(unsigned __int16 *)v77 >> v67) - v45;
        float v101 = (float)(*((unsigned __int16 *)v77 + 1) >> v67) - v45;
        v77 += 2;
        float v102 = _S3 * v101;
        float v103 = (float)(_S5 * v101) + (float)(v100 * _S4);
        float v104 = _S6 * v100;
        if (!v76) {
          goto LABEL_33;
        }
      }
      else
      {
        float v104 = 0.0;
        float v103 = 0.0;
        float v102 = 0.0;
        if (!v76)
        {
LABEL_33:
          unsigned int v105 = 0;
          goto LABEL_34;
        }
      }
      unsigned int v106 = v76->u16[0];
      unsigned int v76 = (int8x16_t *)((char *)v76 + 2);
      unsigned int v105 = v106;
LABEL_34:
      unsigned int v107 = v74->u16[0];
      float v74 = (uint16x8_t *)((char *)v74 + 2);
      float v108 = _S2 * (float)((float)(int)(v107 >> v67) - (float)v32);
      char v109 = llroundf((float)v105 * 0.0038911);
      float v110 = v102 + v108;
      if (!v76) {
        char v109 = -1;
      }
      float v111 = 255.0;
      if (v110 <= 255.0)
      {
        float v111 = v110;
        if (v110 < 0.0) {
          float v111 = 0.0;
        }
      }
      float v112 = v103 + v108;
      *uint16x8_t v99 = llroundf(v111);
      float v113 = 255.0;
      if (v112 <= 255.0)
      {
        float v113 = v112;
        if (v112 < 0.0) {
          float v113 = 0.0;
        }
      }
      float v114 = v104 + v108;
      *float16x8_t v98 = llroundf(v113);
      float v115 = 255.0;
      if (v114 <= 255.0)
      {
        float v115 = v114;
        if (v114 < 0.0) {
          float v115 = 0.0;
        }
      }
      *uint32x4_t v97 = llroundf(v115);
      v97 += 4;
      *uint16x8_t v96 = v109;
      v96 += 4;
      v98 += 4;
      v99 += 4;
      if (!--v95) {
        goto LABEL_46;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    int64x2_t v11 = (uint64_t *)*((void *)result + 7);
    int64x2_t v12 = (uint64_t *)*((void *)result + 8);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = v12[2];
    uint64_t v16 = **((void **)result + 17);
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v10 + 136);
    float v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    float v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    float v21 = (float)v18;
    float v22 = v19 * *(float *)v10;
    float v23 = v19 * *(float *)(v10 + 8);
    float v24 = v19 * *(float *)(v10 + 16);
    float v25 = v19 * *(float *)(v10 + 20);
    float v26 = v19 * *(float *)(v10 + 28);
    unsigned int v27 = (void *)*((void *)result + 16);
    uint64_t v28 = *((void *)result + 14);
    unint64_t v29 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v30 = *(void *)(result + 36);
    unsigned int v31 = *(unsigned __int8 *)(v10 + 124);
    if (v31 >= 0x11) {
      char v32 = 0;
    }
    else {
      char v32 = 16 - v31;
    }
    uint64_t v33 = *(unsigned __int8 *)(v10 + 161);
    uint64_t v34 = *(unsigned __int8 *)(v10 + 160);
    uint64_t v35 = *(unsigned __int8 *)(v10 + 159);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 158);
    uint64_t v36 = *v27 + v29 * v16 + 4 * v28;
    uint64_t v37 = v11[2];
    if (v37) {
      uint64_t v38 = v37 + v15 * v8 + 2 * v30;
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v40 = *v11;
    uint64_t v39 = v11[1];
    uint64_t v41 = v39 + v14 * v8 + 2 * v30;
    if (!v39) {
      uint64_t v41 = 0;
    }
    uint64_t v42 = v40 + v13 * v8 + 2 * v30;
    char v43 = v32;
    while (!v7)
    {
LABEL_30:
      v42 += v13;
      v41 += v14;
      v38 += v15;
      v36 += v16;
      if (++v6 == v9) {
        return result;
      }
    }
    uint64_t v44 = v7;
    float v45 = (unsigned __int16 *)v42;
    uint64_t v46 = v36;
    uint64_t v47 = (unsigned __int16 *)v38;
    uint64_t v48 = (unsigned __int16 *)v41;
    while (1)
    {
      if (v48)
      {
        float v49 = (float)(*v48 >> v43) - v21;
        float v50 = (float)(v48[1] >> v43) - v21;
        v48 += 2;
        float v51 = v23 * v50;
        float v52 = (float)(v25 * v50) + (float)(v49 * v24);
        float v53 = v26 * v49;
        if (!v47) {
          goto LABEL_17;
        }
      }
      else
      {
        float v53 = 0.0;
        float v52 = 0.0;
        float v51 = 0.0;
        if (!v47)
        {
LABEL_17:
          unsigned int v54 = 0;
          goto LABEL_18;
        }
      }
      unsigned int v55 = *v47++;
      unsigned int v54 = v55;
LABEL_18:
      unsigned int v56 = *v45++;
      float v57 = v22 * (float)((float)(int)(v56 >> v43) - v20);
      char v58 = llroundf((float)v54 * 0.0038911);
      float v59 = v51 + v57;
      if (!v47) {
        char v58 = -1;
      }
      float v60 = 255.0;
      if (v59 <= 255.0)
      {
        float v60 = v59;
        if (v59 < 0.0) {
          float v60 = 0.0;
        }
      }
      unsigned __int8 v61 = llroundf(v60);
      float v62 = v52 + v57;
      result[v46] = v61;
      float v63 = 255.0;
      if (v62 <= 255.0)
      {
        float v63 = v62;
        if (v62 < 0.0) {
          float v63 = 0.0;
        }
      }
      char v64 = llroundf(v63);
      float v65 = v53 + v57;
      *(unsigned char *)(v46 + v35) = v64;
      float v66 = 255.0;
      if (v65 <= 255.0)
      {
        float v66 = v65;
        if (v65 < 0.0) {
          float v66 = 0.0;
        }
      }
      *(unsigned char *)(v46 + v34) = llroundf(v66);
      *(unsigned char *)(v46 + v33) = v58;
      v46 += 4;
      if (!--v44) {
        goto LABEL_30;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = *(float *)(v13 + 28);
    float v29 = v21 * v28;
    LOWORD(v28) = *(_WORD *)(v13 + 144);
    float v30 = (float)LODWORD(v28);
    float v31 = *(float *)(v13 + 72);
    float v32 = *(float *)(v13 + 76);
    float v33 = *(float *)(v13 + 80);
    float v34 = *(float *)(v13 + 84);
    float v35 = *(float *)(v13 + 88);
    float v36 = *(float *)(v13 + 92);
    float v37 = *(float *)(v13 + 96);
    float v38 = *(float *)(v13 + 100);
    uint64_t v39 = v13 + 164;
    uint64_t v40 = v13 + 16548;
    uint64_t v41 = v13 + 32932;
    float v42 = *(float *)(v13 + 104);
    float v43 = *(float *)(v13 + 108);
    float v44 = *(float *)(v13 + 112);
    float v45 = *(float *)(v13 + 116);
    float v46 = *(float *)(v13 + 120);
    uint64_t v47 = *((void *)result + 14);
    unint64_t v48 = *((void *)result + 13) * a2 / v6;
    float v49 = (void *)*((void *)result + 16);
    unint64_t v50 = v48 + *((void *)result + 15);
    uint64_t v51 = *(void *)(result + 36);
    unsigned int v52 = *(unsigned __int8 *)(v13 + 124);
    char v53 = 16 - v52;
    if (v52 >= 0x11) {
      char v53 = 0;
    }
    uint64_t result = (unsigned __int8 *)(*v49 + v50 * v19 + 16 * v47);
    uint64_t v54 = v14[2];
    if (v54) {
      uint64_t v55 = v54 + v18 * v11 + 2 * v51;
    }
    else {
      uint64_t v55 = 0;
    }
    char v58 = v14;
    uint64_t v57 = *v14;
    uint64_t v56 = v58[1];
    if (v56) {
      uint64_t v59 = v56 + v17 * v11 + 2 * v51;
    }
    else {
      uint64_t v59 = 0;
    }
    uint64_t v60 = v57 + v16 * v11 + 2 * v51;
    do
    {
      if (v10)
      {
        uint64_t v61 = v10;
        float v62 = (unsigned __int16 *)v60;
        float v63 = (unsigned int *)result;
        char v64 = (unsigned __int16 *)v55;
        float v65 = (unsigned __int16 *)v59;
        do
        {
          if (v65)
          {
            float v66 = (float)(*v65 >> v53) - v23;
            float v67 = (float)(v65[1] >> v53) - v23;
            v65 += 2;
            float v68 = v25 * v67;
            float v69 = (float)(v27 * v67) + (float)(v66 * v26);
            float v70 = v29 * v66;
          }
          else
          {
            float v70 = 0.0;
            float v69 = 0.0;
            float v68 = 0.0;
          }
          unsigned int v71 = *v62++;
          float v72 = v24 * (float)((float)(int)(v71 >> v53) - v22);
          float v73 = v68 + v72;
          BOOL v74 = (float)(v68 + v72) <= 8191.0;
          float v75 = 8191.0;
          if (v74)
          {
            float v75 = v73;
            if (v73 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v69 + v72;
          BOOL v74 = (float)(v69 + v72) <= 8191.0;
          float v77 = 8191.0;
          if (v74)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v70 + v72;
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          if (v64)
          {
            unsigned int v81 = *v64++;
            unsigned int v80 = v81;
          }
          else
          {
            unsigned int v80 = 0;
          }
          _H10 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H12 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          unsigned int v89 = llroundf(fminf(fmaxf(v79, 0.0), 8191.0));
          __asm { FCVT            S11, H12 }
          _H12 = *(_WORD *)(v39 + 2 * v89);
          __asm { FCVT            S12, H12 }
          float v93 = (float)((float)((float)(v44 * _S11) + (float)(v43 * _S10)) + (float)(v45 * _S12))
              + (float)(v46 * fmaxf(_S10, fmaxf(_S11, _S12)));
          float v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          if (v64)
          {
            float v95 = (double)v80 * 3.0 / 65535.0;
            unsigned int v96 = llroundf(v95);
          }
          else
          {
            unsigned int v96 = 3;
          }
          _H13 = *(_WORD *)(v40 + 2 * llroundf(v94));
          __asm { FCVT            S13, H13 }
          float v99 = _S10 * _S13;
          float v100 = _S11 * _S13;
          float v101 = _S12 * _S13;
          float v102 = (float)((float)(v32 * v100) + (float)(v99 * v31)) + (float)(v101 * v33);
          float v103 = (float)((float)(v35 * v100) + (float)(v99 * v34)) + (float)(v101 * v36);
          _S10 = (float)((float)(v38 * v100) + (float)(v99 * v37)) + (float)(v101 * v42);
          _H11 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          LOWORD(_S10) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          float v108 = v30 + _S10;
          BOOL v74 = (float)(v30 + _S10) <= 1023.0;
          float v109 = 1023.0;
          if (v74)
          {
            float v109 = v108;
            if (v108 < 0.0) {
              float v109 = 0.0;
            }
          }
          __asm { FCVT            S12, H12 }
          float v111 = v30 + _S12;
          BOOL v74 = (float)(v30 + _S12) <= 1023.0;
          float v112 = 1023.0;
          if (v74)
          {
            float v112 = v111;
            if (v111 < 0.0) {
              float v112 = 0.0;
            }
          }
          __asm { FCVT            S11, H11 }
          float v114 = v30 + _S11;
          BOOL v74 = (float)(v30 + _S11) <= 1023.0;
          float v115 = 1023.0;
          if (v74)
          {
            float v115 = v114;
            if (v114 < 0.0) {
              float v115 = 0.0;
            }
          }
          unsigned int v116 = llroundf(v109);
          unsigned int v117 = llroundf(v112) << 10;
          unsigned int v118 = llroundf(v115);
          float v119 = (float)v96;
          if ((float)v96 > 3.0) {
            float v119 = 3.0;
          }
          *v63++ = v117 | v116 | (llroundf(v119) << 30) | (v118 << 20);
          --v61;
        }
        while (v61);
      }
      v60 += v16;
      v59 += v17;
      v55 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = *(float *)(v13 + 28);
    float v29 = v21 * v28;
    LOWORD(v28) = *(_WORD *)(v13 + 144);
    float v30 = (float)LODWORD(v28);
    float v31 = *(float *)(v13 + 72);
    float v32 = *(float *)(v13 + 76);
    float v33 = *(float *)(v13 + 80);
    float v34 = *(float *)(v13 + 84);
    float v35 = *(float *)(v13 + 88);
    float v36 = *(float *)(v13 + 92);
    float v37 = *(float *)(v13 + 96);
    float v38 = *(float *)(v13 + 100);
    float v39 = *(float *)(v13 + 104);
    uint64_t v40 = v13 + 164;
    uint64_t v41 = v13 + 16548;
    uint64_t v42 = *((void *)result + 14);
    unint64_t v43 = *((void *)result + 13) * a2 / v6;
    float v44 = (void *)*((void *)result + 16);
    unint64_t v45 = v43 + *((void *)result + 15);
    uint64_t v46 = *(void *)(result + 36);
    unsigned int v47 = *(unsigned __int8 *)(v13 + 124);
    char v48 = 16 - v47;
    if (v47 >= 0x11) {
      char v48 = 0;
    }
    uint64_t v49 = *v44 + v45 * v19 + 16 * v42;
    uint64_t v50 = v14[2];
    if (v50) {
      uint64_t result = (unsigned __int8 *)(v50 + v18 * v11 + 2 * v46);
    }
    else {
      uint64_t result = 0;
    }
    char v53 = v14;
    uint64_t v52 = *v14;
    uint64_t v51 = v53[1];
    if (v51) {
      uint64_t v54 = v51 + v17 * v11 + 2 * v46;
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v55 = v52 + v16 * v11 + 2 * v46;
    do
    {
      if (v10)
      {
        uint64_t v56 = v10;
        uint64_t v57 = (unsigned __int16 *)v55;
        char v58 = (unsigned int *)v49;
        uint64_t v59 = (unsigned __int16 *)result;
        uint64_t v60 = (unsigned __int16 *)v54;
        do
        {
          if (v60)
          {
            float v61 = (float)(*v60 >> v48) - v23;
            float v62 = (float)(v60[1] >> v48) - v23;
            v60 += 2;
            float v63 = v25 * v62;
            float v64 = (float)(v27 * v62) + (float)(v61 * v26);
            float v65 = v29 * v61;
          }
          else
          {
            float v65 = 0.0;
            float v64 = 0.0;
            float v63 = 0.0;
          }
          unsigned int v66 = *v57++;
          float v67 = v24 * (float)((float)(int)(v66 >> v48) - v22);
          float v68 = v63 + v67;
          BOOL v69 = (float)(v63 + v67) <= 8191.0;
          float v70 = 8191.0;
          if (v69)
          {
            float v70 = v68;
            if (v68 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v64 + v67;
          BOOL v69 = (float)(v64 + v67) <= 8191.0;
          float v72 = 8191.0;
          if (v69)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v65 + v67;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          if (v59 && (v76 = *v59, ++v59, unsigned int v75 = v76, v59))
          {
            float v77 = (double)v75 * 3.0 / 65535.0;
            unsigned int v78 = llroundf(v77);
          }
          else
          {
            unsigned int v78 = 3;
          }
          _H31 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          unsigned int v80 = llroundf(fminf(fmaxf(v72, 0.0), 8191.0));
          __asm { FCVT            S8, H31 }
          _H31 = *(_WORD *)(v40 + 2 * v80);
          __asm { FCVT            S10, H31 }
          _H31 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S9, H31 }
          _H31 = *(_WORD *)(v41
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v38 * _S10) + (float)(_S8 * v37)) + (float)(_S9 * v39), 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          float v92 = v30 + _S31;
          BOOL v69 = (float)(v30 + _S31) <= 1023.0;
          float v93 = 1023.0;
          if (v69)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = (float)((float)(v32 * _S10) + (float)(_S8 * v31)) + (float)(_S9 * v33);
          _S8 = (float)((float)(v35 * _S10) + (float)(_S8 * v34)) + (float)(_S9 * v36);
          _H9 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          LOWORD(_S8) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          float v98 = v30 + _S8;
          BOOL v69 = (float)(v30 + _S8) <= 1023.0;
          float v99 = 1023.0;
          if (v69)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          __asm { FCVT            S9, H9 }
          float v101 = v30 + _S9;
          BOOL v69 = (float)(v30 + _S9) <= 1023.0;
          float v102 = 1023.0;
          if (v69)
          {
            float v102 = v101;
            if (v101 < 0.0) {
              float v102 = 0.0;
            }
          }
          unsigned int v103 = llroundf(v93);
          unsigned int v104 = llroundf(v99) << 10;
          unsigned int v105 = llroundf(v102);
          float v106 = (float)v78;
          if ((float)v78 > 3.0) {
            float v106 = 3.0;
          }
          *v58++ = v104 | v103 | (llroundf(v106) << 30) | (v105 << 20);
          --v56;
        }
        while (v56);
      }
      v55 += v16;
      v54 += v17;
      result += v18;
      v49 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    int64x2_t v12 = (uint64_t *)*((void *)result + 7);
    int64x2_t v11 = (uint64_t *)*((void *)result + 8);
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    uint64_t v15 = v11[2];
    uint64_t v16 = **((void **)result + 17);
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v10 + 136);
    float v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    float v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    float v21 = (float)v18;
    float v22 = v19 * *(float *)v10;
    float v23 = v19 * *(float *)(v10 + 8);
    float v24 = v19 * *(float *)(v10 + 16);
    float v25 = v19 * *(float *)(v10 + 20);
    float v26 = *(float *)(v10 + 28);
    float v27 = v19 * v26;
    LOWORD(v26) = *(_WORD *)(v10 + 144);
    float v28 = (float)LODWORD(v26);
    uint64_t v29 = *((void *)result + 14);
    unint64_t v30 = *((void *)result + 13) * a2 / v3;
    float v31 = (void *)*((void *)result + 16);
    unint64_t v32 = v30 + *((void *)result + 15);
    uint64_t v33 = *(void *)(result + 36);
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 124);
    char v34 = 16 - v10;
    if (v10 >= 0x11) {
      char v34 = 0;
    }
    uint64_t v35 = *v31 + v32 * v16 + 16 * v29;
    uint64_t v36 = v12[2];
    if (v36) {
      uint64_t v37 = v36 + v15 * v8 + 2 * v33;
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v39 = *v12;
    uint64_t v38 = v12[1];
    uint64_t v40 = v38 + v14 * v8 + 2 * v33;
    if (!v38) {
      uint64_t v40 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v39 + v13 * v8 + 2 * v33);
    char v41 = v34;
    while (!v7)
    {
LABEL_29:
      result += v13;
      v40 += v14;
      v37 += v15;
      v35 += v16;
      if (++v6 == v9) {
        return result;
      }
    }
    uint64_t v42 = v7;
    unint64_t v43 = (unsigned __int16 *)result;
    float v44 = (unsigned int *)v35;
    unint64_t v45 = (unsigned __int16 *)v37;
    uint64_t v46 = (unsigned __int16 *)v40;
    while (1)
    {
      if (v46)
      {
        float v47 = (float)(*v46 >> v41) - v21;
        float v48 = (float)(v46[1] >> v41) - v21;
        v46 += 2;
        float v49 = v23 * v48;
        float v50 = (float)(v25 * v48) + (float)(v47 * v24);
        float v51 = v27 * v47;
        if (v45) {
          goto LABEL_14;
        }
      }
      else
      {
        float v51 = 0.0;
        float v50 = 0.0;
        float v49 = 0.0;
        if (v45)
        {
LABEL_14:
          unsigned int v52 = *v45++;
          float v53 = (double)v52 * 3.0 / 65535.0;
          unsigned int v54 = llroundf(v53);
          goto LABEL_17;
        }
      }
      unsigned int v54 = 3;
LABEL_17:
      unsigned int v55 = *v43++;
      float v56 = v22 * (float)((float)(int)(v55 >> v41) - v20);
      float v57 = (float)(v51 + v56) + v28;
      float v58 = 1023.0;
      if (v57 <= 1023.0)
      {
        float v58 = v57;
        if (v57 < 0.0) {
          float v58 = 0.0;
        }
      }
      float v59 = (float)(v50 + v56) + v28;
      float v60 = 1023.0;
      if (v59 <= 1023.0)
      {
        float v60 = v59;
        if (v59 < 0.0) {
          float v60 = 0.0;
        }
      }
      float v61 = (float)(v49 + v56) + v28;
      float v62 = 1023.0;
      if (v61 <= 1023.0)
      {
        float v62 = v61;
        if (v61 < 0.0) {
          float v62 = 0.0;
        }
      }
      unsigned int v63 = llroundf(v58);
      unsigned int v64 = llroundf(v60) << 10;
      unsigned int v65 = llroundf(v62);
      float v66 = (float)v54;
      if ((float)v54 > 3.0) {
        float v66 = 3.0;
      }
      *v44++ = v64 | v63 | (llroundf(v66) << 30) | (v65 << 20);
      if (!--v42) {
        goto LABEL_29;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    uint64_t v37 = v13 + 164;
    uint64_t v38 = v13 + 16548;
    uint64_t v39 = v13 + 32932;
    float v40 = *(float *)(v13 + 104);
    float v41 = *(float *)(v13 + 108);
    float v42 = *(float *)(v13 + 112);
    float v43 = *(float *)(v13 + 116);
    float v44 = *(float *)(v13 + 120);
    uint64_t v45 = *((void *)result + 14);
    unint64_t v46 = *((void *)result + 13) * a2 / v6;
    float v47 = (void *)*((void *)result + 16);
    unint64_t v48 = v46 + *((void *)result + 15);
    uint64_t v49 = *(void *)(result + 36);
    unsigned int v50 = *(unsigned __int8 *)(v13 + 124);
    char v51 = 16 - v50;
    if (v50 >= 0x11) {
      char v51 = 0;
    }
    uint64_t result = (unsigned __int8 *)(*v47 + v48 * v19 + 8 * v45);
    uint64_t v52 = v14[2];
    if (v52) {
      uint64_t v53 = v52 + v18 * v11 + 2 * v49;
    }
    else {
      uint64_t v53 = 0;
    }
    float v56 = v14;
    uint64_t v55 = *v14;
    uint64_t v54 = v56[1];
    if (v54) {
      uint64_t v57 = v54 + v17 * v11 + 2 * v49;
    }
    else {
      uint64_t v57 = 0;
    }
    uint64_t v58 = v55 + v16 * v11 + 2 * v49;
    do
    {
      if (v10)
      {
        uint64_t v59 = v10;
        float v60 = (unsigned __int16 *)v58;
        float v61 = result;
        float v62 = (__int16 *)v53;
        unsigned int v63 = (unsigned __int16 *)v57;
        do
        {
          if (v63)
          {
            float v64 = (float)(*v63 >> v51) - v23;
            float v65 = (float)(v63[1] >> v51) - v23;
            v63 += 2;
            float v66 = v25 * v65;
            float v67 = (float)(v27 * v65) + (float)(v64 * v26);
            float v68 = v28 * v64;
          }
          else
          {
            float v68 = 0.0;
            float v67 = 0.0;
            float v66 = 0.0;
          }
          unsigned int v69 = *v60++;
          float v70 = v24 * (float)((float)(int)(v69 >> v51) - v22);
          float v71 = v66 + v70;
          BOOL v72 = (float)(v66 + v70) <= 8191.0;
          float v73 = 8191.0;
          if (v72)
          {
            float v73 = v71;
            if (v71 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v67 + v70;
          BOOL v72 = (float)(v67 + v70) <= 8191.0;
          float v75 = 8191.0;
          if (v72)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v68 + v70;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          if (v62)
          {
            __int16 v79 = *v62++;
            __int16 v78 = v79;
          }
          else
          {
            __int16 v78 = 0;
          }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          unsigned int v87 = llroundf(fminf(fmaxf(v77, 0.0), 8191.0));
          __asm { FCVT            S8, H9 }
          _H9 = *(_WORD *)(v37 + 2 * v87);
          __asm { FCVT            S10, H9 }
          float v91 = (float)((float)((float)(v42 * _S8) + (float)(v41 * _S31)) + (float)(v43 * _S10))
              + (float)(v44 * fmaxf(_S31, fmaxf(_S8, _S10)));
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          _H9 = *(_WORD *)(v38 + 2 * llroundf(v92));
          __asm { FCVT            S11, H9 }
          float v95 = _S31 * _S11;
          float v96 = _S8 * _S11;
          float v97 = _S10 * _S11;
          LOWORD(_S11) = *(_WORD *)(v39
                                  + 2
                                  * llroundf(fminf(fmaxf((float)((float)(v30 * v96) + (float)(v95 * v29))+ (float)((float)(_S10 * _S11) * v31), 0.0), 8191.0)));
          __asm { FCVT            S12, H11 }
          if (!v62) {
            __int16 v78 = -1;
          }
          float v99 = 65535.0;
          if (_S12 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v99 = _S12;
            if (_NF) {
              float v99 = 0.0;
            }
          }
          float v101 = (float)((float)(v33 * v96) + (float)(v95 * v32)) + (float)(v97 * v34);
          float v102 = (float)((float)(v36 * v96) + (float)(v95 * v35)) + (float)(v97 * v40);
          _H8 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S11, H8 }
          *float v61 = llroundf(v99);
          float v106 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v106 = _S11;
            if (_NF) {
              float v106 = 0.0;
            }
          }
          __asm { FCVT            S10, H31 }
          v61[1] = llroundf(v106);
          float v109 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v109 = _S10;
            if (_NF) {
              float v109 = 0.0;
            }
          }
          v61[2] = llroundf(v109);
          v61[3] = v78;
          v61 += 4;
          --v59;
        }
        while (v59);
      }
      v58 += v16;
      v57 += v17;
      v53 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    float v37 = *(float *)(v13 + 104);
    uint64_t v38 = v13 + 164;
    uint64_t v39 = v13 + 16548;
    uint64_t v40 = *((void *)result + 14);
    unint64_t v41 = *((void *)result + 13) * a2 / v6;
    float v42 = (void *)*((void *)result + 16);
    unint64_t v43 = v41 + *((void *)result + 15);
    uint64_t v44 = *(void *)(result + 36);
    unsigned int v45 = *(unsigned __int8 *)(v13 + 124);
    char v46 = 16 - v45;
    if (v45 >= 0x11) {
      char v46 = 0;
    }
    uint64_t v47 = *v42 + v43 * v19 + 8 * v40;
    uint64_t v48 = v14[2];
    if (v48) {
      uint64_t result = (unsigned __int8 *)(v48 + v18 * v11 + 2 * v44);
    }
    else {
      uint64_t result = 0;
    }
    char v51 = v14;
    uint64_t v50 = *v14;
    uint64_t v49 = v51[1];
    if (v49) {
      uint64_t v52 = v49 + v17 * v11 + 2 * v44;
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t v53 = v50 + v16 * v11 + 2 * v44;
    do
    {
      if (v10)
      {
        uint64_t v54 = v10;
        uint64_t v55 = (unsigned __int16 *)v53;
        float v56 = (_WORD *)v47;
        uint64_t v57 = (__int16 *)result;
        uint64_t v58 = (unsigned __int16 *)v52;
        do
        {
          if (v58)
          {
            float v59 = (float)(*v58 >> v46) - v23;
            float v60 = (float)(v58[1] >> v46) - v23;
            v58 += 2;
            float v61 = v25 * v60;
            float v62 = (float)(v27 * v60) + (float)(v59 * v26);
            float v63 = v28 * v59;
          }
          else
          {
            float v63 = 0.0;
            float v62 = 0.0;
            float v61 = 0.0;
          }
          unsigned int v64 = *v55++;
          float v65 = v24 * (float)((float)(int)(v64 >> v46) - v22);
          float v66 = v61 + v65;
          BOOL v67 = (float)(v61 + v65) <= 8191.0;
          float v68 = 8191.0;
          if (v67)
          {
            float v68 = v66;
            if (v66 < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v62 + v65;
          BOOL v67 = (float)(v62 + v65) <= 8191.0;
          float v70 = 8191.0;
          if (v67)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v63 + v65;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          if (v57)
          {
            __int16 v74 = *v57++;
            __int16 v73 = v74;
          }
          else
          {
            __int16 v73 = 0;
          }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S29, H29
          }
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H31 = *(_WORD *)(v39
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v30 * _S29) + (float)(_S27 * v29)) + (float)(_S28 * v31), 0.0), 8191.0)));
          __asm { FCVT            S8, H31 }
          if (!v57) {
            __int16 v73 = -1;
          }
          float v87 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v87 = _S8;
            if (_NF) {
              float v87 = 0.0;
            }
          }
          float v89 = (float)((float)(v33 * _S29) + (float)(_S27 * v32)) + (float)(_S28 * v34);
          float v90 = (float)((float)(v36 * _S29) + (float)(_S27 * v35)) + (float)(_S28 * v37);
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S31, H28 }
          *float v56 = llroundf(v87);
          float v94 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H28, #0 }
            float v94 = _S31;
            if (_NF) {
              float v94 = 0.0;
            }
          }
          __asm { FCVT            S30, H27 }
          v56[1] = llroundf(v94);
          float v97 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v97 = _S30;
            if (_NF) {
              float v97 = 0.0;
            }
          }
          v56[2] = llroundf(v97);
          v56[3] = v73;
          v56 += 4;
          --v54;
        }
        while (v54);
      }
      v53 += v16;
      v52 += v17;
      result += v18;
      v47 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    int64x2_t v12 = (uint64_t *)*((void *)result + 7);
    int64x2_t v11 = (uint64_t *)*((void *)result + 8);
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    uint64_t v15 = v11[2];
    uint64_t v16 = **((void **)result + 17);
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v10 + 136);
    float v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    float v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    float v21 = (float)v18;
    float v22 = v19 * *(float *)v10;
    float v23 = v19 * *(float *)(v10 + 8);
    float v24 = v19 * *(float *)(v10 + 16);
    float v25 = v19 * *(float *)(v10 + 20);
    float v26 = v19 * *(float *)(v10 + 28);
    uint64_t v27 = *((void *)result + 14);
    unint64_t v28 = *((void *)result + 13) * a2 / v3;
    float v29 = (void *)*((void *)result + 16);
    unint64_t v30 = v28 + *((void *)result + 15);
    uint64_t v31 = *(void *)(result + 36);
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 124);
    char v32 = 16 - v10;
    if (v10 >= 0x11) {
      char v32 = 0;
    }
    uint64_t v33 = *v29 + v30 * v16 + 8 * v27;
    uint64_t v34 = v12[2];
    if (v34) {
      uint64_t v35 = v34 + v15 * v8 + 2 * v31;
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v37 = *v12;
    uint64_t v36 = v12[1];
    uint64_t v38 = v36 + v14 * v8 + 2 * v31;
    if (!v36) {
      uint64_t v38 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v37 + v13 * v8 + 2 * v31);
    char v39 = v32;
    while (!v7)
    {
LABEL_31:
      result += v13;
      v38 += v14;
      v35 += v15;
      v33 += v16;
      if (++v6 == v9) {
        return result;
      }
    }
    uint64_t v40 = v7;
    unint64_t v41 = (unsigned __int16 *)result;
    float v42 = (_WORD *)v33;
    unint64_t v43 = (__int16 *)v35;
    uint64_t v44 = (unsigned __int16 *)v38;
    while (1)
    {
      if (v44)
      {
        float v45 = (float)(*v44 >> v39) - v21;
        float v46 = (float)(v44[1] >> v39) - v21;
        v44 += 2;
        float v47 = v23 * v46;
        float v48 = (float)(v25 * v46) + (float)(v45 * v24);
        float v49 = v26 * v45;
        if (!v43) {
          goto LABEL_16;
        }
      }
      else
      {
        float v49 = 0.0;
        float v48 = 0.0;
        float v47 = 0.0;
        if (!v43)
        {
LABEL_16:
          __int16 v50 = 0;
          goto LABEL_17;
        }
      }
      __int16 v51 = *v43++;
      __int16 v50 = v51;
LABEL_17:
      unsigned int v52 = *v41++;
      float v53 = v22 * (float)((float)(int)(v52 >> v39) - v20);
      float v54 = v47 + v53;
      if (!v43) {
        __int16 v50 = -1;
      }
      float v55 = 65535.0;
      if (v54 <= 65535.0)
      {
        float v55 = v54;
        if (v54 < 0.0) {
          float v55 = 0.0;
        }
      }
      float v56 = v48 + v53;
      *float v42 = llroundf(v55);
      BOOL v57 = (float)(v48 + v53) <= 65535.0;
      float v58 = 65535.0;
      if (v57)
      {
        float v58 = v56;
        if (v56 < 0.0) {
          float v58 = 0.0;
        }
      }
      float v59 = v49 + v53;
      v42[1] = llroundf(v58);
      BOOL v57 = (float)(v49 + v53) <= 65535.0;
      float v60 = 65535.0;
      if (v57)
      {
        float v60 = v59;
        if (v59 < 0.0) {
          float v60 = 0.0;
        }
      }
      v42[2] = llroundf(v60);
      v42[3] = v50;
      v42 += 4;
      if (!--v40) {
        goto LABEL_31;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    uint64_t v37 = v13 + 164;
    uint64_t v38 = v13 + 16548;
    uint64_t v39 = v13 + 32932;
    float v40 = *(float *)(v13 + 104);
    float v41 = *(float *)(v13 + 108);
    float v42 = *(float *)(v13 + 112);
    float v43 = *(float *)(v13 + 116);
    float v44 = *(float *)(v13 + 120);
    uint64_t v45 = *((void *)result + 14);
    unint64_t v46 = *((void *)result + 13) * a2 / v6;
    float v47 = (void *)*((void *)result + 16);
    unint64_t v48 = v46 + *((void *)result + 15);
    uint64_t v49 = *(void *)(result + 36);
    unsigned int v50 = *(unsigned __int8 *)(v13 + 124);
    char v51 = 16 - v50;
    if (v50 >= 0x11) {
      char v51 = 0;
    }
    uint64_t result = (unsigned __int8 *)(*v47 + v48 * v19 + 8 * v45);
    uint64_t v52 = v14[2];
    if (v52) {
      uint64_t v53 = v52 + v18 * v11 + 2 * v49;
    }
    else {
      uint64_t v53 = 0;
    }
    float v56 = v14;
    uint64_t v55 = *v14;
    uint64_t v54 = v56[1];
    if (v54) {
      uint64_t v57 = v54 + v17 * v11 + 2 * v49;
    }
    else {
      uint64_t v57 = 0;
    }
    uint64_t v58 = v55 + v16 * v11 + 2 * v49;
    do
    {
      if (v10)
      {
        uint64_t v59 = v10;
        float v60 = (unsigned __int16 *)v58;
        float v61 = result;
        float v62 = (unsigned __int16 *)v53;
        float v63 = (unsigned __int16 *)v57;
        do
        {
          if (v63)
          {
            float v64 = (float)(*v63 >> v51) - v23;
            float v65 = (float)(v63[1] >> v51) - v23;
            v63 += 2;
            float v66 = v25 * v65;
            float v67 = (float)(v27 * v65) + (float)(v64 * v26);
            float v68 = v28 * v64;
          }
          else
          {
            float v68 = 0.0;
            float v67 = 0.0;
            float v66 = 0.0;
          }
          unsigned int v69 = *v60++;
          float v70 = v24 * (float)((float)(int)(v69 >> v51) - v22);
          float v71 = v66 + v70;
          BOOL v72 = (float)(v66 + v70) <= 8191.0;
          float v73 = 8191.0;
          if (v72)
          {
            float v73 = v71;
            if (v71 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v67 + v70;
          BOOL v72 = (float)(v67 + v70) <= 8191.0;
          float v75 = 8191.0;
          if (v72)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v68 + v70;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          if (v62)
          {
            unsigned int v79 = *v62++;
            unsigned int v78 = v79;
          }
          else
          {
            unsigned int v78 = 0;
          }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          unsigned int v87 = llroundf(fminf(fmaxf(v77, 0.0), 8191.0));
          __asm { FCVT            S8, H9 }
          _H9 = *(_WORD *)(v37 + 2 * v87);
          __asm { FCVT            S11, H9 }
          float v91 = (float)((float)((float)(v42 * _S8) + (float)(v41 * _S31)) + (float)(v43 * _S11))
              + (float)(v44 * fmaxf(_S31, fmaxf(_S8, _S11)));
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          _H9 = *(_WORD *)(v38 + 2 * llroundf(v92));
          __asm { FCVT            S12, H9 }
          float v95 = _S31 * _S12;
          float v96 = _S8 * _S12;
          float v97 = _S11 * _S12;
          _H11 = *(_WORD *)(v39
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v30 * v96) + (float)((float)(_S31 * _S12) * v29))+ (float)((float)(_S11 * _S12) * v31), 0.0), 8191.0)));
          __asm { FCVT            S12, H11 }
          if (!v62) {
            unsigned int v78 = -1;
          }
          float v100 = 65535.0;
          if (_S12 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v100 = _S12;
            if (_NF) {
              float v100 = 0.0;
            }
          }
          float v102 = (float)((float)(v33 * v96) + (float)(v95 * v32)) + (float)(v97 * v34);
          float v103 = (float)(v36 * v96) + (float)(v95 * v35);
          _H10 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S11, H10 }
          _H9 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v103 + (float)(v97 * v40), 0.0), 8191.0)));
          float v107 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCMP            H10, #0 }
            float v107 = _S11;
            if (_NF) {
              float v107 = 0.0;
            }
          }
          __asm { FCVT            S11, H9 }
          float v110 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v110 = _S11;
            if (_NF) {
              float v110 = 0.0;
            }
          }
          *float v61 = bswap32(v78) >> 16;
          v61[1] = __rev16(llroundf(v100));
          v61[2] = __rev16(llroundf(v107));
          v61[3] = __rev16(llroundf(v110));
          v61 += 4;
          --v59;
        }
        while (v59);
      }
      v58 += v16;
      v57 += v17;
      v53 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    float v37 = *(float *)(v13 + 104);
    uint64_t v38 = v13 + 164;
    uint64_t v39 = v13 + 16548;
    uint64_t v40 = *((void *)result + 14);
    unint64_t v41 = *((void *)result + 13) * a2 / v6;
    float v42 = (void *)*((void *)result + 16);
    unint64_t v43 = v41 + *((void *)result + 15);
    uint64_t v44 = *(void *)(result + 36);
    unsigned int v45 = *(unsigned __int8 *)(v13 + 124);
    char v46 = 16 - v45;
    if (v45 >= 0x11) {
      char v46 = 0;
    }
    uint64_t v47 = *v42 + v43 * v19 + 8 * v40;
    uint64_t v48 = v14[2];
    if (v48) {
      uint64_t result = (unsigned __int8 *)(v48 + v18 * v11 + 2 * v44);
    }
    else {
      uint64_t result = 0;
    }
    char v51 = v14;
    uint64_t v50 = *v14;
    uint64_t v49 = v51[1];
    if (v49) {
      uint64_t v52 = v49 + v17 * v11 + 2 * v44;
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t v53 = v50 + v16 * v11 + 2 * v44;
    do
    {
      if (v10)
      {
        uint64_t v54 = v10;
        uint64_t v55 = (unsigned __int16 *)v53;
        float v56 = (_WORD *)v47;
        uint64_t v57 = (unsigned __int16 *)result;
        uint64_t v58 = (unsigned __int16 *)v52;
        do
        {
          if (v58)
          {
            float v59 = (float)(*v58 >> v46) - v23;
            float v60 = (float)(v58[1] >> v46) - v23;
            v58 += 2;
            float v61 = v25 * v60;
            float v62 = (float)(v27 * v60) + (float)(v59 * v26);
            float v63 = v28 * v59;
          }
          else
          {
            float v63 = 0.0;
            float v62 = 0.0;
            float v61 = 0.0;
          }
          unsigned int v64 = *v55++;
          float v65 = v24 * (float)((float)(int)(v64 >> v46) - v22);
          float v66 = v61 + v65;
          BOOL v67 = (float)(v61 + v65) <= 8191.0;
          float v68 = 8191.0;
          if (v67)
          {
            float v68 = v66;
            if (v66 < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v62 + v65;
          BOOL v67 = (float)(v62 + v65) <= 8191.0;
          float v70 = 8191.0;
          if (v67)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v63 + v65;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          if (v57)
          {
            unsigned int v74 = *v57++;
            unsigned int v73 = v74;
          }
          else
          {
            unsigned int v73 = 0;
          }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H27
            FCVT            S29, H29
          }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S30, H27 }
          _H31 = *(_WORD *)(v39
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v30 * _S29) + (float)(_S28 * v29)) + (float)(_S30 * v31), 0.0), 8191.0)));
          __asm { FCVT            S8, H31 }
          if (!v57) {
            unsigned int v73 = -1;
          }
          float v87 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v87 = _S8;
            if (_NF) {
              float v87 = 0.0;
            }
          }
          _H8 = *(_WORD *)(v39
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v33 * _S29) + (float)(_S28 * v32)) + (float)(_S30 * v34), 0.0), 8191.0)));
          __asm { FCVT            S9, H8 }
          float v91 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v91 = _S9;
            if (_NF) {
              float v91 = 0.0;
            }
          }
          _H29 = *(_WORD *)(v39
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v36 * _S29) + (float)(_S28 * v35)) + (float)(_S30 * v37), 0.0), 8191.0)));
          __asm { FCVT            S30, H29 }
          float v95 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v95 = _S30;
            if (_NF) {
              float v95 = 0.0;
            }
          }
          *float v56 = bswap32(v73) >> 16;
          v56[1] = __rev16(llroundf(v87));
          v56[2] = __rev16(llroundf(v91));
          v56[3] = __rev16(llroundf(v95));
          v56 += 4;
          --v54;
        }
        while (v54);
      }
      v53 += v16;
      v52 += v17;
      result += v18;
      v47 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    int64x2_t v12 = (uint64_t *)*((void *)result + 7);
    int64x2_t v11 = (uint64_t *)*((void *)result + 8);
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    uint64_t v15 = v11[2];
    uint64_t v16 = **((void **)result + 17);
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v10 + 136);
    float v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    float v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    float v21 = (float)v18;
    float v22 = v19 * *(float *)v10;
    float v23 = v19 * *(float *)(v10 + 8);
    float v24 = v19 * *(float *)(v10 + 16);
    float v25 = v19 * *(float *)(v10 + 20);
    float v26 = v19 * *(float *)(v10 + 28);
    uint64_t v27 = *((void *)result + 14);
    unint64_t v28 = *((void *)result + 13) * a2 / v3;
    float v29 = (void *)*((void *)result + 16);
    unint64_t v30 = v28 + *((void *)result + 15);
    uint64_t v31 = *(void *)(result + 36);
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 124);
    char v32 = 16 - v10;
    if (v10 >= 0x11) {
      char v32 = 0;
    }
    uint64_t v33 = *v29 + v30 * v16 + 8 * v27;
    uint64_t v34 = v12[2];
    if (v34) {
      uint64_t v35 = v34 + v15 * v8 + 2 * v31;
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v37 = *v12;
    uint64_t v36 = v12[1];
    uint64_t v38 = v36 + v14 * v8 + 2 * v31;
    if (!v36) {
      uint64_t v38 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v37 + v13 * v8 + 2 * v31);
    char v39 = v32;
    while (!v7)
    {
LABEL_30:
      result += v13;
      v38 += v14;
      v35 += v15;
      v33 += v16;
      if (++v6 == v9) {
        return result;
      }
    }
    uint64_t v40 = v7;
    unint64_t v41 = (unsigned __int16 *)result;
    float v42 = (_WORD *)v33;
    unint64_t v43 = (unsigned __int16 *)v35;
    uint64_t v44 = (unsigned __int16 *)v38;
    while (1)
    {
      if (v44)
      {
        float v45 = (float)(*v44 >> v39) - v21;
        float v46 = (float)(v44[1] >> v39) - v21;
        v44 += 2;
        float v47 = v23 * v46;
        float v48 = (float)(v25 * v46) + (float)(v45 * v24);
        float v49 = v26 * v45;
        if (!v43) {
          goto LABEL_16;
        }
      }
      else
      {
        float v49 = 0.0;
        float v48 = 0.0;
        float v47 = 0.0;
        if (!v43)
        {
LABEL_16:
          unsigned int v50 = 0;
          goto LABEL_17;
        }
      }
      unsigned int v51 = *v43++;
      unsigned int v50 = v51;
LABEL_17:
      unsigned int v52 = *v41++;
      float v53 = v22 * (float)((float)(int)(v52 >> v39) - v20);
      float v54 = v47 + v53;
      if (!v43) {
        unsigned int v50 = -1;
      }
      float v55 = 65535.0;
      if (v54 <= 65535.0)
      {
        float v55 = v54;
        if (v54 < 0.0) {
          float v55 = 0.0;
        }
      }
      float v56 = v48 + v53;
      BOOL v57 = (float)(v48 + v53) <= 65535.0;
      float v58 = 65535.0;
      if (v57)
      {
        float v58 = v56;
        if (v56 < 0.0) {
          float v58 = 0.0;
        }
      }
      float v59 = v49 + v53;
      float v60 = 65535.0;
      if (v59 <= 65535.0)
      {
        float v60 = v59;
        if (v59 < 0.0) {
          float v60 = 0.0;
        }
      }
      *float v42 = bswap32(v50) >> 16;
      v42[1] = __rev16(llroundf(v55));
      v42[2] = __rev16(llroundf(v58));
      v42[3] = __rev16(llroundf(v60));
      v42 += 4;
      if (!--v40) {
        goto LABEL_30;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_RGhA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double _D0)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(void *)(result + 20);
    uint64_t v9 = *(void *)(result + 44);
    uint64_t v10 = v5 + v9;
    uint64_t v11 = v6 + v9;
    uint64_t v12 = *((void *)result + 19);
    int64x2_t v13 = (uint64_t *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = **((void **)result + 17);
    unsigned int v18 = *(unsigned __int16 *)(v12 + 140);
    unsigned int v19 = *(unsigned __int16 *)(v12 + 142);
    _S6 = *(float *)(v12 + 72);
    _S7 = *(float *)(v12 + 76);
    _S16 = *(float *)(v12 + 80);
    _S17 = *(float *)(v12 + 84);
    _S18 = *(float *)(v12 + 88);
    _S19 = *(float *)(v12 + 92);
    _S20 = *(float *)(v12 + 96);
    _S22 = *(float *)(v12 + 100);
    _S24 = *(float *)(v12 + 104);
    uint64_t v185 = v11 - v10;
    uint64_t v29 = v12 + 16548;
    float v30 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    float v205 = (float)v18;
    float v31 = (float)v19;
    *(float *)&_D0 = v30 * *(float *)v12;
    _S1 = v30 * *(float *)(v12 + 8);
    _S2 = v30 * *(float *)(v12 + 16);
    _S3 = v30 * *(float *)(v12 + 20);
    _S4 = v30 * *(float *)(v12 + 28);
    uint64_t v36 = v12 + 164;
    uint64_t v37 = v12 + 32932;
    float v204 = *(float *)&_D0;
    __asm { FCVT            H8, S0 }
    *(short float *)&_D0 = (short float)v18;
    int16x8_t v43 = vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    *(short float *)&_D0 = -(short float)v19;
    float16x8_t v44 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    float v191 = _S4;
    float v192 = _S3;
    __asm { FCVT            H0, S4 }
    short float v190 = _H0;
    __asm { FCVT            H0, S2 }
    short float v189 = _H0;
    __asm { FCVT            H0, S3 }
    short float v188 = _H0;
    __asm { FCVT            H0, S1 }
    short float v187 = _H0;
    float v209 = *(float *)(v12 + 108);
    __asm { FCVT            H0, S25 }
    short float v202 = _H0;
    float16x8_t v203 = (float16x8_t)v43;
    float v208 = *(float *)(v12 + 112);
    __asm { FCVT            H0, S26 }
    short float v201 = _H0;
    float v207 = *(float *)(v12 + 116);
    __asm { FCVT            H0, S27 }
    short float v200 = _H0;
    float v206 = *(float *)(v12 + 120);
    __asm { FCVT            H0, S28 }
    short float v199 = _H0;
    LODWORD(v12) = *(unsigned __int8 *)(v12 + 124);
    unsigned __int8 v53 = 16 - v12;
    uint64_t v54 = v13[2];
    uint64_t v186 = v14[2];
    uint64_t v55 = *(void *)(result + 36);
    uint64_t v56 = *((void *)result + 14);
    unint64_t v57 = *((void *)result + 13) * a2 / v4 + *((void *)result + 15);
    uint64_t v59 = *v13;
    uint64_t v58 = *(void *)(*((void *)result + 7) + 8);
    uint64_t v60 = v16;
    uint64_t v61 = **((void **)result + 16);
    if (v12 >= 0x11) {
      unsigned __int8 v53 = 0;
    }
    uint64_t v62 = v17;
    uint64_t result = (unsigned __int8 *)(v61 + v17 * v57 + 8 * v56);
    if (v54) {
      uint64_t v63 = v54 + v186 * v10 + 2 * v55;
    }
    else {
      uint64_t v63 = 0;
    }
    if (v58) {
      uint64_t v64 = v58 + v16 * v10 + 2 * v55;
    }
    else {
      uint64_t v64 = 0;
    }
    uint64_t v65 = v15;
    uint64_t v66 = v59 + v15 * v10 + 2 * v55;
    float v67 = _S6;
    __asm { FCVT            H0, S6 }
    short float v198 = _H0;
    float v69 = _S7;
    __asm { FCVT            H0, S7 }
    short float v197 = _H0;
    float v71 = _S16;
    __asm { FCVT            H0, S16 }
    short float v196 = _H0;
    float v73 = _S17;
    __asm { FCVT            H0, S17 }
    short float v195 = _H0;
    float v75 = _S18;
    __asm { FCVT            H0, S18 }
    short float v194 = _H0;
    float v77 = _S19;
    __asm { FCVT            H0, S19 }
    short float v193 = _H0;
    float v79 = _S20;
    __asm { FCVT            H3, S20 }
    float v81 = _S22;
    __asm
    {
      FCVT            H4, S22
      FCVT            H5, S24
    }
    uint16x8_t v84 = (uint16x8_t)vdupq_n_s16(-v53);
    v85.i64[0] = 0x9000900090009000;
    v85.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v146 = 0;
        float v90 = (const __int16 *)v64;
        float v89 = (int8x16_t *)v63;
        int16x4_t v88 = (__int16 *)result;
        float v87 = (uint16x8_t *)v66;
      }
      else
      {
        int v86 = 0;
        float v87 = (uint16x8_t *)v66;
        int16x4_t v88 = (__int16 *)result;
        float v89 = (int8x16_t *)v63;
        float v90 = (const __int16 *)v64;
        do
        {
          int8x16_t v91 = 0uLL;
          if (v90)
          {
            int16x8x2_t v210 = vld2q_s16(v90);
            v90 += 16;
            float16x8_t v92 = vaddq_f16(v44, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v210.val[0], v84)));
            v210.val[0] = (int16x8_t)vaddq_f16(v44, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v210.val[1], v84)));
            float16x8_t v93 = vmulq_n_f16((float16x8_t)v210.val[0], v187);
            float16x8_t v94 = vmlaq_n_f16(vmulq_n_f16(v92, v189), (float16x8_t)v210.val[0], v188);
            float16x8_t v95 = vmulq_n_f16(v92, v190);
          }
          else
          {
            float16x8_t v95 = 0uLL;
            float16x8_t v94 = 0uLL;
            float16x8_t v93 = 0uLL;
          }
          uint16x8_t v96 = *v87++;
          uint16x8_t v97 = v96;
          if (v89)
          {
            int8x16_t v98 = *v89++;
            int8x16_t v91 = v98;
          }
          float16x8_t v99 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v97, v84)), v203);
          float16x8_t v100 = vmlaq_n_f16(v94, v99, _H8);
          float16x8_t v101 = vmlaq_n_f16(v95, v99, _H8);
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v93, v99, _H8), (float16x8_t)0), v85));
          uint32x4_t v103 = vmovl_high_u16(v102);
          float16x8_t v104 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v102.i8);
          v104.i16[0] = *(_WORD *)(v36 + 2 * v104.u32[0]);
          v104.i16[1] = *(_WORD *)(v36 + 2 * v104.u32[1]);
          v104.i16[2] = *(_WORD *)(v36 + 2 * v104.u32[2]);
          v104.i16[3] = *(_WORD *)(v36 + 2 * v104.u32[3]);
          v104.i16[4] = *(_WORD *)(v36 + 2 * v103.u32[0]);
          v104.i16[5] = *(_WORD *)(v36 + 2 * v103.u32[1]);
          v104.i16[6] = *(_WORD *)(v36 + 2 * v103.u32[2]);
          v104.i16[7] = *(_WORD *)(v36 + 2 * v103.u32[3]);
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v100, (float16x8_t)0), v85));
          float16x8_t v106 = (float16x8_t)vmovl_high_u16(v105);
          *(void *)&long long v107 = v106.u32[2];
          *((void *)&v107 + 1) = v106.u32[3];
          long long v108 = v107;
          *(void *)&long long v107 = v106.u32[0];
          *((void *)&v107 + 1) = v106.u32[1];
          uint32x4_t v109 = vmovl_u16(*(uint16x4_t *)v105.i8);
          v106.i16[0] = *(_WORD *)(v36 + 2 * v109.u32[0]);
          v106.i16[1] = *(_WORD *)(v36 + 2 * v109.u32[1]);
          v106.i16[2] = *(_WORD *)(v36 + 2 * v109.u32[2]);
          v106.i16[3] = *(_WORD *)(v36 + 2 * v109.u32[3]);
          v106.i16[4] = *(_WORD *)(v36 + 2 * v107);
          v106.i16[5] = *(_WORD *)(v36 + 2 * *((void *)&v107 + 1));
          v106.i16[6] = *(_WORD *)(v36 + 2 * v108);
          v106.i16[7] = *(_WORD *)(v36 + 2 * *((void *)&v108 + 1));
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v101, (float16x8_t)0), v85));
          float16x8_t v111 = (float16x8_t)vmovl_high_u16(v110);
          *(void *)&long long v107 = v111.u32[2];
          *((void *)&v107 + 1) = v111.u32[3];
          long long v112 = v107;
          *(void *)&long long v107 = v111.u32[0];
          *((void *)&v107 + 1) = v111.u32[1];
          uint32x4_t v113 = vmovl_u16(*(uint16x4_t *)v110.i8);
          v111.i16[0] = *(_WORD *)(v36 + 2 * v113.u32[0]);
          v111.i16[1] = *(_WORD *)(v36 + 2 * v113.u32[1]);
          v111.i16[2] = *(_WORD *)(v36 + 2 * v113.u32[2]);
          v111.i16[3] = *(_WORD *)(v36 + 2 * v113.u32[3]);
          v111.i16[4] = *(_WORD *)(v36 + 2 * v107);
          v111.i16[5] = *(_WORD *)(v36 + 2 * *((void *)&v107 + 1));
          v111.i16[6] = *(_WORD *)(v36 + 2 * v112);
          v111.i16[7] = *(_WORD *)(v36 + 2 * *((void *)&v112 + 1));
          uint16x8_t v114 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v104, v202), v106, v201), v111, v200), vmaxq_f16(vmaxq_f16(v104, v106), v111), v199), (float16x8_t)0), v85));
          uint32x4_t v115 = vmovl_high_u16(v114);
          float16x8_t v116 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v114.i8);
          v116.i16[0] = *(_WORD *)(v29 + 2 * v116.u32[0]);
          v116.i16[1] = *(_WORD *)(v29 + 2 * v116.u32[1]);
          v116.i16[2] = *(_WORD *)(v29 + 2 * v116.u32[2]);
          v116.i16[3] = *(_WORD *)(v29 + 2 * v116.u32[3]);
          v116.i16[4] = *(_WORD *)(v29 + 2 * v115.u32[0]);
          v116.i16[5] = *(_WORD *)(v29 + 2 * v115.u32[1]);
          v116.i16[6] = *(_WORD *)(v29 + 2 * v115.u32[2]);
          v116.i16[7] = *(_WORD *)(v29 + 2 * v115.u32[3]);
          float16x8_t v117 = vmulq_f16(v104, v116);
          float16x8_t v118 = vmulq_f16(v106, v116);
          float16x8_t v119 = vmulq_f16(v111, v116);
          float16x8_t v120 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v117, v198), v118, v197), v119, v196);
          float16x8_t v121 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v117, v195), v118, v194), v119, v193);
          float16x8_t v122 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v119, _H5), v118, _H4), v117, _H3);
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v85));
          uint32x4_t v124 = vmovl_high_u16(v123);
          *(void *)&long long v107 = v124.u32[2];
          *((void *)&v107 + 1) = v124.u32[3];
          long long v125 = v107;
          *(void *)&long long v107 = v124.u32[0];
          *((void *)&v107 + 1) = v124.u32[1];
          uint32x4_t v126 = vmovl_u16(*(uint16x4_t *)v123.i8);
          *(_WORD *)uint16x8_t v127 = *(_WORD *)(v37 + 2 * v126.u32[0]);
          *(_WORD *)&v127[2] = *(_WORD *)(v37 + 2 * v126.u32[1]);
          *(_WORD *)&v127[4] = *(_WORD *)(v37 + 2 * v126.u32[2]);
          *(_WORD *)&v127[6] = *(_WORD *)(v37 + 2 * v126.u32[3]);
          *(_WORD *)&v127[8] = *(_WORD *)(v37 + 2 * v107);
          *(_WORD *)&v127[10] = *(_WORD *)(v37 + 2 * *((void *)&v107 + 1));
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v85));
          uint32x4_t v131 = vmovl_high_u16(v130);
          uint32x4_t v132 = vmovl_u16(*(uint16x4_t *)v130.i8);
          LOWORD(v133) = *(_WORD *)(v37 + 2 * v132.u32[0]);
          WORD1(v133) = *(_WORD *)(v37 + 2 * v132.u32[1]);
          WORD2(v133) = *(_WORD *)(v37 + 2 * v132.u32[2]);
          WORD3(v133) = *(_WORD *)(v37 + 2 * v132.u32[3]);
          WORD4(v133) = *(_WORD *)(v37 + 2 * v131.u32[0]);
          WORD5(v133) = *(_WORD *)(v37 + 2 * v131.u32[1]);
          WORD6(v133) = *(_WORD *)(v37 + 2 * v131.u32[2]);
          HIWORD(v133) = *(_WORD *)(v37 + 2 * v131.u32[3]);
          uint16x8_t v134 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v85));
          uint32x4_t v135 = vmovl_high_u16(v134);
          uint32x4_t v136 = vmovl_u16(*(uint16x4_t *)v134.i8);
          *(_WORD *)float v138 = *(_WORD *)(v37 + 2 * v136.u32[0]);
          float v137 = (__int16 *)(v37 + 2 * v135.u32[3]);
          *(_WORD *)&v138[2] = *(_WORD *)(v37 + 2 * v136.u32[1]);
          *(_WORD *)&v138[4] = *(_WORD *)(v37 + 2 * v136.u32[2]);
          *(_WORD *)&v138[6] = *(_WORD *)(v37 + 2 * v136.u32[3]);
          *(_WORD *)&v138[8] = *(_WORD *)(v37 + 2 * v135.u32[0]);
          *(_WORD *)&v138[10] = *(_WORD *)(v37 + 2 * v135.u32[1]);
          *(_WORD *)&v138[12] = *(_WORD *)(v37 + 2 * v135.u32[2]);
          if (v89)
          {
            *(int16x4_t *)v140.i8 = vzip1_s16(*(int16x4_t *)v91.i8, 0);
            v140.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v91.i8, 0);
            int16x4_t v141 = (int16x4_t)vextq_s8(v91, v91, 8uLL).u64[0];
            *(int16x4_t *)v142.i8 = vzip1_s16(v141, 0);
            v142.u64[1] = (unint64_t)vzip2_s16(v141, 0);
            float32x4_t v143 = vcvtq_f32_u32(v142);
            float32x4_t v144 = (float32x4_t)vdupq_n_s32(0x37800080u);
            float16x8_t v145 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(v140), v144)), vmulq_f32(v143, v144));
          }
          else
          {
            v145.i64[0] = 0x3C003C003C003C00;
            v145.i64[1] = 0x3C003C003C003C00;
          }
          __int16 v139 = *v137;
          __int16 v129 = *(_WORD *)(v37 + 2 * *((void *)&v125 + 1));
          __int16 v128 = *(_WORD *)(v37 + 2 * v125);
          vst4q_s16(v88, *(int16x8x4_t *)v127);
          v88 += 32;
          v86 += 8;
        }
        while (v86 < (int)v8 - 7);
        unint64_t v146 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v146;
      unint64_t v147 = v8 - v146;
      if (v147 != 0 && _CF)
      {
        do
        {
          if (v90)
          {
            float v148 = (float)(*(unsigned __int16 *)v90 >> v53) - v31;
            float v149 = (float)(*((unsigned __int16 *)v90 + 1) >> v53) - v31;
            v90 += 2;
            float v150 = _S1 * v149;
            float v151 = (float)(v192 * v149) + (float)(v148 * _S2);
            float v152 = v191 * v148;
          }
          else
          {
            float v152 = 0.0;
            float v151 = 0.0;
            float v150 = 0.0;
          }
          unsigned int v153 = v87->u16[0];
          float v87 = (uint16x8_t *)((char *)v87 + 2);
          float v154 = v204 * (float)((float)(int)(v153 >> v53) - v205);
          float v155 = v150 + v154;
          float v156 = 8191.0;
          if (v155 <= 8191.0)
          {
            float v156 = v155;
            if (v155 < 0.0) {
              float v156 = 0.0;
            }
          }
          float v157 = v151 + v154;
          BOOL v158 = (float)(v151 + v154) <= 8191.0;
          float v159 = 8191.0;
          if (v158)
          {
            float v159 = v157;
            if (v157 < 0.0) {
              float v159 = 0.0;
            }
          }
          float v160 = v152 + v154;
          float v161 = 8191.0;
          if (v160 <= 8191.0)
          {
            float v161 = v160;
            if (v160 < 0.0) {
              float v161 = 0.0;
            }
          }
          if (v89)
          {
            unsigned int v163 = v89->u16[0];
            float v89 = (int8x16_t *)((char *)v89 + 2);
            unsigned int v162 = v163;
          }
          else
          {
            unsigned int v162 = 0;
          }
          _H7 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm { FCVT            S18, H7 }
          _H7 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          unsigned int v167 = llroundf(fminf(fmaxf(v161, 0.0), 8191.0));
          __asm { FCVT            S16, H7 }
          _H7 = *(_WORD *)(v36 + 2 * v167);
          __asm { FCVT            S17, H7 }
          float v171 = (float)((float)((float)(v208 * _S16) + (float)(v209 * _S18)) + (float)(v207 * _S17))
               + (float)(v206 * fmaxf(_S18, fmaxf(_S16, _S17)));
          float v172 = 8191.0;
          if (v171 <= 8191.0)
          {
            float v172 = v171;
            if (v171 < 0.0) {
              float v172 = 0.0;
            }
          }
          _H7 = *(_WORD *)(v29 + 2 * llroundf(v172));
          __asm { FCVT            S7, H7 }
          float v175 = _S18 * _S7;
          float v176 = _S16 * _S7;
          float v177 = _S17 * _S7;
          float v178 = (float)((float)(v69 * v176) + (float)(v175 * v67)) + (float)(v177 * v71);
          float v179 = (float)((float)(v75 * v176) + (float)(v175 * v73)) + (float)(v177 * v77);
          float v180 = (float)((float)(v81 * v176) + (float)(v175 * v79)) + (float)(v177 * _S24);
          LOWORD(v176) = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v178, 0.0), 8191.0)));
          LOWORD(v178) = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v179, 0.0), 8191.0)));
          __int16 v181 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v180, 0.0), 8191.0)));
          _S7 = (float)v162 * 0.000015259;
          __asm { FCVT            H7, S7 }
          *int16x4_t v88 = LOWORD(v176);
          v88[1] = LOWORD(v178);
          v88[2] = v181;
          if (v89) {
            short float v184 = _H7;
          }
          else {
            LOWORD(v184) = COERCE_UNSIGNED_INT(1.0);
          }
          *((short float *)v88 + 3) = v184;
          v88 += 4;
          --v147;
        }
        while (v147);
      }
      v66 += v65;
      v64 += v60;
      v63 += v186;
      result += v62;
      ++v7;
    }
    while (v7 != v185);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    uint64_t v37 = v13 + 164;
    uint64_t v38 = v13 + 16548;
    uint64_t v39 = v13 + 32932;
    float v40 = *(float *)(v13 + 104);
    float v41 = *(float *)(v13 + 108);
    float v42 = *(float *)(v13 + 112);
    float v43 = *(float *)(v13 + 116);
    float v44 = *(float *)(v13 + 120);
    uint64_t v45 = *((void *)result + 14);
    unint64_t v46 = *((void *)result + 13) * a2 / v6;
    float v47 = (void *)*((void *)result + 16);
    unint64_t v48 = v46 + *((void *)result + 15);
    uint64_t v49 = *(void *)(result + 36);
    unsigned int v50 = *(unsigned __int8 *)(v13 + 124);
    char v51 = 16 - v50;
    if (v50 >= 0x11) {
      char v51 = 0;
    }
    uint64_t result = (unsigned __int8 *)(*v47 + v48 * v19 + 8 * v45);
    uint64_t v52 = v14[2];
    if (v52) {
      uint64_t v53 = v52 + v18 * v11 + 2 * v49;
    }
    else {
      uint64_t v53 = 0;
    }
    uint64_t v56 = v14;
    uint64_t v55 = *v14;
    uint64_t v54 = v56[1];
    if (v54) {
      uint64_t v57 = v54 + v17 * v11 + 2 * v49;
    }
    else {
      uint64_t v57 = 0;
    }
    uint64_t v58 = v55 + v16 * v11 + 2 * v49;
    do
    {
      if (v10)
      {
        uint64_t v59 = v10;
        uint64_t v60 = (unsigned __int16 *)v58;
        uint64_t v61 = result;
        uint64_t v62 = (unsigned __int16 *)v53;
        uint64_t v63 = (unsigned __int16 *)v57;
        do
        {
          if (v63)
          {
            float v64 = (float)(*v63 >> v51) - v23;
            float v65 = (float)(v63[1] >> v51) - v23;
            v63 += 2;
            float v66 = v25 * v65;
            float v67 = (float)(v27 * v65) + (float)(v64 * v26);
            float v68 = v28 * v64;
          }
          else
          {
            float v68 = 0.0;
            float v67 = 0.0;
            float v66 = 0.0;
          }
          unsigned int v69 = *v60++;
          float v70 = v24 * (float)((float)(int)(v69 >> v51) - v22);
          float v71 = v66 + v70;
          BOOL v72 = (float)(v66 + v70) <= 8191.0;
          float v73 = 8191.0;
          if (v72)
          {
            float v73 = v71;
            if (v71 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v67 + v70;
          BOOL v72 = (float)(v67 + v70) <= 8191.0;
          float v75 = 8191.0;
          if (v72)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v68 + v70;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          if (v62)
          {
            unsigned int v79 = *v62++;
            unsigned int v78 = v79;
          }
          else
          {
            unsigned int v78 = 0;
          }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          unsigned int v87 = llroundf(fminf(fmaxf(v77, 0.0), 8191.0));
          __asm { FCVT            S9, H10 }
          _H10 = *(_WORD *)(v37 + 2 * v87);
          __asm { FCVT            S10, H10 }
          float v91 = (float)((float)((float)(v42 * _S9) + (float)(v41 * _S8)) + (float)(v43 * _S10))
              + (float)(v44 * fmaxf(_S8, fmaxf(_S9, _S10)));
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          _H11 = *(_WORD *)(v38 + 2 * llroundf(v92));
          __asm { FCVT            S11, H11 }
          float v95 = _S8 * _S11;
          float v96 = _S9 * _S11;
          float v97 = _S10 * _S11;
          float v98 = (float)((float)(v30 * v96) + (float)(v95 * v29)) + (float)(v97 * v31);
          float v99 = (float)((float)(v33 * v96) + (float)(v95 * v32)) + (float)(v97 * v34);
          float v100 = (float)((float)(v36 * v96) + (float)(v95 * v35)) + (float)(v97 * v40);
          LOWORD(v96) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          LOWORD(v97) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          LOWORD(v100) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _S11 = (float)v78 * 0.000015259;
          __asm { FCVT            H11, S11 }
          *(_WORD *)uint64_t v61 = LOWORD(v96);
          *((_WORD *)v61 + 1) = LOWORD(v97);
          *((_WORD *)v61 + 2) = LOWORD(v100);
          if (v62) {
            short float v103 = _H11;
          }
          else {
            LOWORD(v103) = COERCE_UNSIGNED_INT(1.0);
          }
          *((short float *)v61 + 3) = v103;
          v61 += 8;
          --v59;
        }
        while (v59);
      }
      v58 += v16;
      v57 += v17;
      v53 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_RGhA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_RGhA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double _D0)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(void *)(result + 20);
    uint64_t v9 = *(void *)(result + 44);
    uint64_t v10 = v5 + v9;
    uint64_t v11 = v6 + v9;
    uint64_t v12 = *((void *)result + 19);
    int64x2_t v13 = (uint64_t *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = **((void **)result + 17);
    unsigned int v19 = *(unsigned __int16 *)(v12 + 140);
    unsigned int v20 = *(unsigned __int16 *)(v12 + 142);
    _S30 = *(float *)(v12 + 104);
    uint64_t v149 = v11 - v10;
    uint64_t v22 = v12 + 164;
    float v23 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    float v24 = (float)v20;
    *(float *)&_D0 = v23 * *(float *)v12;
    _S1 = v23 * *(float *)(v12 + 8);
    _S2 = v23 * *(float *)(v12 + 16);
    _S3 = v23 * *(float *)(v12 + 20);
    _S4 = v23 * *(float *)(v12 + 28);
    uint64_t v29 = v12 + 16548;
    float v163 = *(float *)&_D0;
    float v164 = (float)v19;
    __asm { FCVT            H8, S0 }
    *(short float *)&_D0 = (short float)v19;
    int16x8_t v35 = vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    *(short float *)&_D0 = -(short float)v20;
    float16x8_t v36 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    float v154 = _S4;
    float v155 = _S3;
    __asm { FCVT            H0, S4 }
    short float v153 = _H0;
    float v156 = _S2;
    float v157 = _S1;
    __asm { FCVT            H0, S2 }
    short float v152 = _H0;
    __asm { FCVT            H0, S3 }
    short float v151 = _H0;
    __asm { FCVT            H0, S1 }
    short float v150 = _H0;
    _S7 = *(float *)(v12 + 72);
    __asm { FCVT            H0, S6 }
    short float v161 = _H0;
    float16x8_t v162 = (float16x8_t)v35;
    _S16 = *(float *)(v12 + 76);
    __asm { FCVT            H0, S21 }
    short float v160 = _H0;
    _S18 = *(float *)(v12 + 80);
    __asm { FCVT            H0, S22 }
    short float v159 = _H0;
    _S20 = *(float *)(v12 + 84);
    __asm { FCVT            H0, S23 }
    short float v158 = _H0;
    _S25 = *(float *)(v12 + 88);
    __asm { FCVT            H10, S24 }
    _S13 = *(float *)(v12 + 92);
    __asm { FCVT            H11, S27 }
    _S14 = *(float *)(v12 + 96);
    __asm { FCVT            H12, S28 }
    _S15 = *(float *)(v12 + 100);
    __asm { FCVT            H0, S29 }
    LODWORD(v12) = *(unsigned __int8 *)(v12 + 124);
    unsigned __int8 v57 = 16 - v12;
    uint64_t v58 = v13[2];
    uint64_t v59 = *(void *)(result + 36);
    uint64_t v60 = *((void *)result + 14);
    unint64_t v61 = *((void *)result + 13) * a2 / v4 + *((void *)result + 15);
    uint64_t v63 = *v13;
    uint64_t v62 = *(void *)(*((void *)result + 7) + 8);
    uint64_t v64 = **((void **)result + 16);
    if (v12 >= 0x11) {
      unsigned __int8 v57 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v64 + v18 * v61 + 8 * v60);
    if (v58) {
      uint64_t v65 = v58 + v17 * v10 + 2 * v59;
    }
    else {
      uint64_t v65 = 0;
    }
    if (v62) {
      uint64_t v66 = v62 + v16 * v10 + 2 * v59;
    }
    else {
      uint64_t v66 = 0;
    }
    uint64_t v67 = v63 + v15 * v10 + 2 * v59;
    __asm { FCVT            H1, S30 }
    uint16x8_t v69 = (uint16x8_t)vdupq_n_s16(-v57);
    v70.i64[0] = 0x9000900090009000;
    v70.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v119 = 0;
        float v75 = (const __int16 *)v66;
        float v74 = (int8x16_t *)v65;
        float v73 = (__int16 *)result;
        BOOL v72 = (uint16x8_t *)v67;
      }
      else
      {
        int v71 = 0;
        BOOL v72 = (uint16x8_t *)v67;
        float v73 = (__int16 *)result;
        float v74 = (int8x16_t *)v65;
        float v75 = (const __int16 *)v66;
        do
        {
          int8x16_t v76 = 0uLL;
          if (v75)
          {
            int16x8x2_t v165 = vld2q_s16(v75);
            v75 += 16;
            float16x8_t v77 = vcvtq_f16_u16(vshlq_u16((uint16x8_t)v165.val[0], v69));
            v165.val[0] = (int16x8_t)vcvtq_f16_u16(vshlq_u16((uint16x8_t)v165.val[1], v69));
            v165.val[1] = (int16x8_t)vaddq_f16(v36, v77);
            float16x8_t v78 = vaddq_f16(v36, (float16x8_t)v165.val[0]);
            float16x8_t v79 = vmulq_n_f16(v78, v150);
            float16x8_t v80 = vmlaq_n_f16(vmulq_n_f16((float16x8_t)v165.val[1], v152), v78, v151);
            float16x8_t v81 = vmulq_n_f16((float16x8_t)v165.val[1], v153);
          }
          else
          {
            float16x8_t v81 = 0uLL;
            float16x8_t v80 = 0uLL;
            float16x8_t v79 = 0uLL;
          }
          uint16x8_t v82 = *v72++;
          uint16x8_t v83 = v82;
          if (v74)
          {
            int8x16_t v84 = *v74++;
            int8x16_t v76 = v84;
          }
          float16x8_t v85 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v83, v69)), v162);
          uint16x8_t v86 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v79, v85, _H8), (float16x8_t)0), v70));
          uint32x4_t v87 = vmovl_high_u16(v86);
          float16x8_t v88 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v86.i8);
          v88.i16[0] = *(_WORD *)(v22 + 2 * v88.u32[0]);
          v88.i16[1] = *(_WORD *)(v22 + 2 * v88.u32[1]);
          v88.i16[2] = *(_WORD *)(v22 + 2 * v88.u32[2]);
          v88.i16[3] = *(_WORD *)(v22 + 2 * v88.u32[3]);
          v88.i16[4] = *(_WORD *)(v22 + 2 * v87.u32[0]);
          v88.i16[5] = *(_WORD *)(v22 + 2 * v87.u32[1]);
          v88.i16[6] = *(_WORD *)(v22 + 2 * v87.u32[2]);
          v88.i16[7] = *(_WORD *)(v22 + 2 * v87.u32[3]);
          uint16x8_t v89 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v80, v85, _H8), (float16x8_t)0), v70));
          uint32x4_t v90 = vmovl_high_u16(v89);
          float16x8_t v91 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v89.i8);
          v91.i16[0] = *(_WORD *)(v22 + 2 * v91.u32[0]);
          v91.i16[1] = *(_WORD *)(v22 + 2 * v91.u32[1]);
          v91.i16[2] = *(_WORD *)(v22 + 2 * v91.u32[2]);
          v91.i16[3] = *(_WORD *)(v22 + 2 * v91.u32[3]);
          v91.i16[4] = *(_WORD *)(v22 + 2 * v90.u32[0]);
          v91.i16[5] = *(_WORD *)(v22 + 2 * v90.u32[1]);
          v91.i16[6] = *(_WORD *)(v22 + 2 * v90.u32[2]);
          v91.i16[7] = *(_WORD *)(v22 + 2 * v90.u32[3]);
          uint16x8_t v92 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v81, v85, _H8), (float16x8_t)0), v70));
          uint32x4_t v93 = vmovl_high_u16(v92);
          float16x8_t v94 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v92.i8);
          v94.i16[0] = *(_WORD *)(v22 + 2 * v94.u32[0]);
          v94.i16[1] = *(_WORD *)(v22 + 2 * v94.u32[1]);
          v94.i16[2] = *(_WORD *)(v22 + 2 * v94.u32[2]);
          v94.i16[3] = *(_WORD *)(v22 + 2 * v94.u32[3]);
          v94.i16[4] = *(_WORD *)(v22 + 2 * v93.u32[0]);
          v94.i16[5] = *(_WORD *)(v22 + 2 * v93.u32[1]);
          v94.i16[6] = *(_WORD *)(v22 + 2 * v93.u32[2]);
          v94.i16[7] = *(_WORD *)(v22 + 2 * v93.u32[3]);
          float16x8_t v95 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v88, v158), v91, _H10), v94, _H11);
          float16x8_t v96 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v94, _H1), v91, _H0), v88, _H12);
          uint16x8_t v97 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v88, v161), v91, v160), v94, v159), (float16x8_t)0), v70));
          uint32x4_t v98 = vmovl_high_u16(v97);
          uint32x4_t v99 = vmovl_u16(*(uint16x4_t *)v97.i8);
          LOWORD(v100) = *(_WORD *)(v29 + 2 * v99.u32[0]);
          WORD1(v100) = *(_WORD *)(v29 + 2 * v99.u32[1]);
          WORD2(v100) = *(_WORD *)(v29 + 2 * v99.u32[2]);
          WORD3(v100) = *(_WORD *)(v29 + 2 * v99.u32[3]);
          WORD4(v100) = *(_WORD *)(v29 + 2 * v98.u32[0]);
          WORD5(v100) = *(_WORD *)(v29 + 2 * v98.u32[1]);
          WORD6(v100) = *(_WORD *)(v29 + 2 * v98.u32[2]);
          HIWORD(v100) = *(_WORD *)(v29 + 2 * v98.u32[3]);
          uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v95, (float16x8_t)0), v70));
          uint32x4_t v102 = vmovl_high_u16(v101);
          uint32x4_t v103 = vmovl_u16(*(uint16x4_t *)v101.i8);
          LOWORD(v104) = *(_WORD *)(v29 + 2 * v103.u32[0]);
          WORD1(v104) = *(_WORD *)(v29 + 2 * v103.u32[1]);
          WORD2(v104) = *(_WORD *)(v29 + 2 * v103.u32[2]);
          WORD3(v104) = *(_WORD *)(v29 + 2 * v103.u32[3]);
          WORD4(v104) = *(_WORD *)(v29 + 2 * v102.u32[0]);
          WORD5(v104) = *(_WORD *)(v29 + 2 * v102.u32[1]);
          WORD6(v104) = *(_WORD *)(v29 + 2 * v102.u32[2]);
          HIWORD(v104) = *(_WORD *)(v29 + 2 * v102.u32[3]);
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v96, (float16x8_t)0), v70));
          uint32x4_t v106 = vmovl_high_u16(v105);
          *(void *)&long long v107 = v106.u32[2];
          *((void *)&v107 + 1) = v106.u32[3];
          long long v108 = v107;
          uint32x4_t v109 = vmovl_u16(*(uint16x4_t *)v105.i8);
          *(_WORD *)uint16x8_t v110 = *(_WORD *)(v29 + 2 * v109.u32[0]);
          *(_WORD *)&v110[2] = *(_WORD *)(v29 + 2 * v109.u32[1]);
          *(_WORD *)&v110[4] = *(_WORD *)(v29 + 2 * v109.u32[2]);
          *(_WORD *)&v110[6] = *(_WORD *)(v29 + 2 * v109.u32[3]);
          *(_WORD *)&v110[8] = *(_WORD *)(v29 + 2 * v106.u32[0]);
          *(_WORD *)&v110[10] = *(_WORD *)(v29 + 2 * v106.u32[1]);
          if (v74)
          {
            *(int16x4_t *)v113.i8 = vzip1_s16(*(int16x4_t *)v76.i8, 0);
            v113.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v76.i8, 0);
            int16x4_t v114 = (int16x4_t)vextq_s8(v76, v76, 8uLL).u64[0];
            *(int16x4_t *)v115.i8 = vzip1_s16(v114, 0);
            v115.u64[1] = (unint64_t)vzip2_s16(v114, 0);
            float32x4_t v116 = vcvtq_f32_u32(v115);
            float32x4_t v117 = (float32x4_t)vdupq_n_s32(0x37800080u);
            float16x8_t v118 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(v113), v117)), vmulq_f32(v116, v117));
          }
          else
          {
            v118.i64[0] = 0x3C003C003C003C00;
            v118.i64[1] = 0x3C003C003C003C00;
          }
          __int16 v112 = *(_WORD *)(v29 + 2 * *((void *)&v108 + 1));
          __int16 v111 = *(_WORD *)(v29 + 2 * v108);
          vst4q_s16(v73, *(int16x8x4_t *)&v100);
          v73 += 32;
          v71 += 8;
        }
        while (v71 < (int)v8 - 7);
        unint64_t v119 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v119;
      unint64_t v120 = v8 - v119;
      if (v120 != 0 && _CF)
      {
        do
        {
          if (v75)
          {
            float v121 = (float)(*(unsigned __int16 *)v75 >> v57) - v24;
            float v122 = (float)(*((unsigned __int16 *)v75 + 1) >> v57) - v24;
            v75 += 2;
            float v123 = v157 * v122;
            float v124 = (float)(v155 * v122) + (float)(v121 * v156);
            float v125 = v154 * v121;
          }
          else
          {
            float v125 = 0.0;
            float v124 = 0.0;
            float v123 = 0.0;
          }
          unsigned int v126 = v72->u16[0];
          BOOL v72 = (uint16x8_t *)((char *)v72 + 2);
          float v127 = v163 * (float)((float)(int)(v126 >> v57) - v164);
          float v128 = v123 + v127;
          BOOL v129 = (float)(v123 + v127) <= 8191.0;
          float v130 = 8191.0;
          if (v129)
          {
            float v130 = v128;
            if (v128 < 0.0) {
              float v130 = 0.0;
            }
          }
          float v131 = v124 + v127;
          BOOL v129 = (float)(v124 + v127) <= 8191.0;
          float v132 = 8191.0;
          if (v129)
          {
            float v132 = v131;
            if (v131 < 0.0) {
              float v132 = 0.0;
            }
          }
          float v133 = v125 + v127;
          float v134 = 8191.0;
          if (v133 <= 8191.0)
          {
            float v134 = v133;
            if (v133 < 0.0) {
              float v134 = 0.0;
            }
          }
          if (v74)
          {
            unsigned int v136 = v74->u16[0];
            float v74 = (int8x16_t *)((char *)v74 + 2);
            unsigned int v135 = v136;
          }
          else
          {
            unsigned int v135 = 0;
          }
          _H2 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H4 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H3 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          float v143 = (float)((float)(_S16 * _S4) + (float)(_S2 * _S7)) + (float)(_S3 * _S18);
          float v144 = (float)((float)(_S25 * _S4) + (float)(_S2 * _S20)) + (float)(_S3 * _S13);
          float v145 = (float)((float)(_S15 * _S4) + (float)(_S2 * _S14)) + (float)(_S3 * _S30);
          LOWORD(_S4) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          LOWORD(v145) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          _S5 = (float)v135 * 0.000015259;
          __asm { FCVT            H5, S5 }
          __int16 *v73 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          v73[1] = LOWORD(_S4);
          v73[2] = LOWORD(v145);
          LOWORD(v148) = COERCE_UNSIGNED_INT(1.0);
          if (v74) {
            short float v148 = _H5;
          }
          *((short float *)v73 + 3) = v148;
          v73 += 4;
          --v120;
        }
        while (v120);
      }
      v67 += v15;
      v66 += v16;
      v65 += v17;
      result += v18;
      ++v7;
    }
    while (v7 != v149);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    float v37 = *(float *)(v13 + 104);
    uint64_t v38 = v13 + 164;
    uint64_t v39 = v13 + 16548;
    uint64_t v40 = *((void *)result + 14);
    unint64_t v41 = *((void *)result + 13) * a2 / v6;
    float v42 = (void *)*((void *)result + 16);
    unint64_t v43 = v41 + *((void *)result + 15);
    uint64_t v44 = *(void *)(result + 36);
    unsigned int v45 = *(unsigned __int8 *)(v13 + 124);
    char v46 = 16 - v45;
    if (v45 >= 0x11) {
      char v46 = 0;
    }
    uint64_t v47 = *v42 + v43 * v19 + 8 * v40;
    uint64_t v48 = v14[2];
    if (v48) {
      uint64_t result = (unsigned __int8 *)(v48 + v18 * v11 + 2 * v44);
    }
    else {
      uint64_t result = 0;
    }
    char v51 = v14;
    uint64_t v50 = *v14;
    uint64_t v49 = v51[1];
    if (v49) {
      uint64_t v52 = v49 + v17 * v11 + 2 * v44;
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t v53 = v50 + v16 * v11 + 2 * v44;
    do
    {
      if (v10)
      {
        uint64_t v54 = v10;
        uint64_t v55 = (unsigned __int16 *)v53;
        uint64_t v56 = v47;
        unsigned __int8 v57 = (unsigned __int16 *)result;
        uint64_t v58 = (unsigned __int16 *)v52;
        do
        {
          if (v58)
          {
            float v59 = (float)(*v58 >> v46) - v23;
            float v60 = (float)(v58[1] >> v46) - v23;
            v58 += 2;
            float v61 = v25 * v60;
            float v62 = (float)(v27 * v60) + (float)(v59 * v26);
            float v63 = v28 * v59;
          }
          else
          {
            float v63 = 0.0;
            float v62 = 0.0;
            float v61 = 0.0;
          }
          unsigned int v64 = *v55++;
          float v65 = v24 * (float)((float)(int)(v64 >> v46) - v22);
          float v66 = v61 + v65;
          BOOL v67 = (float)(v61 + v65) <= 8191.0;
          float v68 = 8191.0;
          if (v67)
          {
            float v68 = v66;
            if (v66 < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v62 + v65;
          BOOL v67 = (float)(v62 + v65) <= 8191.0;
          float v70 = 8191.0;
          if (v67)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v63 + v65;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          if (v57)
          {
            unsigned int v74 = *v57++;
            unsigned int v73 = v74;
          }
          else
          {
            unsigned int v73 = 0;
          }
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H28
            FCVT            S30, H30
          }
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          float v85 = (float)((float)(v30 * _S30) + (float)(_S28 * v29)) + (float)(_S29 * v31);
          float v86 = (float)((float)(v33 * _S30) + (float)(_S28 * v32)) + (float)(_S29 * v34);
          float v87 = (float)((float)(v36 * _S30) + (float)(_S28 * v35)) + (float)(_S29 * v37);
          LOWORD(_S29) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          LOWORD(v87) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _S31 = (float)v73 * 0.000015259;
          __asm { FCVT            H31, S31 }
          *(_WORD *)uint64_t v56 = LOWORD(_S29);
          *(_WORD *)(v56 + 2) = LOWORD(_S30);
          *(_WORD *)(v56 + 4) = LOWORD(v87);
          if (v57) {
            short float v90 = _H31;
          }
          else {
            LOWORD(v90) = COERCE_UNSIGNED_INT(1.0);
          }
          *(short float *)(v56 + 6) = v90;
          v56 += 8;
          --v54;
        }
        while (v54);
      }
      v53 += v16;
      v52 += v17;
      result += v18;
      v47 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_RGhA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_RGhA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_rgb_RGhA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    unint64_t v9 = *(void *)(result + 20);
    uint64_t v10 = *(void *)(result + 44);
    uint64_t v11 = v6 + v10;
    uint64_t v12 = v7 + v10;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v14;
    uint64_t v17 = v14[1];
    uint64_t v18 = v14[2];
    uint64_t v19 = **((void **)result + 17);
    unsigned int v20 = *(unsigned __int16 *)(v13 + 140);
    unsigned int v21 = *(unsigned __int16 *)(v13 + 142);
    uint64_t v22 = v12 - v11;
    float v23 = 1.0 / (float)*(unsigned int *)(v13 + 128);
    float v24 = (float)v20;
    float v25 = (float)v21;
    _S2 = v23 * *(float *)v13;
    _S3 = v23 * *(float *)(v13 + 8);
    _S4 = v23 * *(float *)(v13 + 16);
    _S5 = v23 * *(float *)(v13 + 20);
    _S6 = v23 * *(float *)(v13 + 28);
    __asm { FCVT            H7, S2 }
    *(short float *)v2.i16 = (short float)v20;
    float16x8_t v36 = (float16x8_t)vdupq_lane_s16(v2, 0);
    *(short float *)v3.i16 = -(short float)v21;
    float16x8_t v37 = (float16x8_t)vdupq_lane_s16(v3, 0);
    __asm
    {
      FCVT            H8, S6
      FCVT            H9, S4
      FCVT            H10, S5
      FCVT            H11, S3
    }
    LODWORD(v13) = *(unsigned __int8 *)(v13 + 124);
    unsigned __int8 v42 = 16 - v13;
    uint64_t v43 = v15[2];
    uint64_t v44 = *(void *)(result + 36);
    uint64_t v45 = *((void *)result + 14);
    unint64_t v46 = *((void *)result + 13) * a2 / v5 + *((void *)result + 15);
    uint64_t v48 = *v15;
    uint64_t v47 = v15[1];
    uint64_t v49 = v47 + v17 * v11 + 2 * v44;
    uint64_t v50 = **((void **)result + 16);
    if (v13 >= 0x11) {
      unsigned __int8 v42 = 0;
    }
    uint64_t v51 = v50 + v19 * v46 + 8 * v45;
    if (v43) {
      uint64_t v52 = v43 + v18 * v11 + 2 * v44;
    }
    else {
      uint64_t v52 = 0;
    }
    if (!v47) {
      uint64_t v49 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v48 + v16 * v11 + 2 * v44);
    uint16x8_t v53 = (uint16x8_t)vdupq_n_s16(-v42);
    float32x4_t v54 = (float32x4_t)vdupq_n_s32(0x37800080u);
    while (1)
    {
      if ((int)v9 < 8)
      {
        unint64_t v73 = 0;
        float v59 = (const __int16 *)v49;
        uint64_t v58 = (int8x16_t *)v52;
        uint64_t v57 = v51;
        uint64_t v56 = (uint16x8_t *)result;
      }
      else
      {
        int v55 = 0;
        uint64_t v56 = (uint16x8_t *)result;
        uint64_t v57 = v51;
        uint64_t v58 = (int8x16_t *)v52;
        float v59 = (const __int16 *)v49;
        do
        {
          if (v59)
          {
            int16x8x2_t v90 = vld2q_s16(v59);
            v59 += 16;
            float16x8_t v60 = vaddq_f16(v37, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v90.val[0], v53)));
            float16x8_t v61 = vaddq_f16(v37, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v90.val[1], v53)));
            float16x8_t v62 = vmulq_n_f16(v61, _H11);
            float16x8_t v63 = vmlaq_n_f16(vmulq_n_f16(v60, _H9), v61, _H10);
            float16x8_t v64 = vmulq_n_f16(v60, _H8);
          }
          else
          {
            float16x8_t v64 = 0uLL;
            float16x8_t v63 = 0u;
            float16x8_t v62 = 0u;
          }
          uint16x8_t v65 = *v56++;
          uint16x8_t v66 = v65;
          if (v58)
          {
            int8x16_t v67 = *v58++;
            *(int16x4_t *)v68.i8 = vzip1_s16(*(int16x4_t *)v67.i8, 0);
            v68.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v67.i8, 0);
            int16x4_t v69 = (int16x4_t)vextq_s8(v67, v67, 8uLL).u64[0];
            *(int16x4_t *)v70.i8 = vzip1_s16(v69, 0);
            v70.u64[1] = (unint64_t)vzip2_s16(v69, 0);
            float16x8_t v71 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(v68), v54)), vmulq_f32(vcvtq_f32_u32(v70), v54));
          }
          else
          {
            v71.i64[0] = 0x3C003C003C003C00;
            v71.i64[1] = 0x3C003C003C003C00;
          }
          float16x8_t v72 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v66, v53)), v36);
          v91.val[0] = (int16x8_t)vmlaq_n_f16(v62, v72, _H7);
          v91.val[1] = (int16x8_t)vmlaq_n_f16(v63, v72, _H7);
          v91.val[2] = (int16x8_t)vmlaq_n_f16(v64, v72, _H7);
          v91.val[3] = (int16x8_t)v71;
          vst4q_s16((__int16 *)v57, v91);
          v57 += 64;
          v55 += 8;
        }
        while (v55 < (int)v9 - 7);
        unint64_t v73 = v9 & 0xFFFFFFF8;
      }
      _CF = v9 >= v73;
      unint64_t v74 = v9 - v73;
      if (v74 != 0 && _CF) {
        break;
      }
LABEL_32:
      result += v16;
      v49 += v17;
      v52 += v18;
      v51 += v19;
      if (++v8 == v22) {
        return result;
      }
    }
    while (1)
    {
      if (v59)
      {
        float v75 = (float)(*(unsigned __int16 *)v59 >> v42) - v25;
        float v76 = (float)(*((unsigned __int16 *)v59 + 1) >> v42) - v25;
        v59 += 2;
        float v77 = _S3 * v76;
        float v78 = (float)(_S5 * v76) + (float)(v75 * _S4);
        float v79 = _S6 * v75;
        if (!v58) {
          goto LABEL_27;
        }
      }
      else
      {
        float v79 = 0.0;
        float v78 = 0.0;
        float v77 = 0.0;
        if (!v58)
        {
LABEL_27:
          unsigned int v80 = 0;
          goto LABEL_28;
        }
      }
      unsigned int v81 = v58->u16[0];
      uint64_t v58 = (int8x16_t *)((char *)v58 + 2);
      unsigned int v80 = v81;
LABEL_28:
      unsigned int v82 = v56->u16[0];
      uint64_t v56 = (uint16x8_t *)((char *)v56 + 2);
      float v83 = _S2 * (float)((float)(int)(v82 >> v42) - v24);
      _S24 = v77 + v83;
      _S23 = v78 + v83;
      _S22 = v79 + v83;
      _S25 = (float)v80 * 0.000015259;
      __asm
      {
        FCVT            H25, S25
        FCVT            H24, S24
      }
      *(_WORD *)uint64_t v57 = LOWORD(_S24);
      __asm { FCVT            H23, S23 }
      *(_WORD *)(v57 + 2) = LOWORD(_S23);
      __asm { FCVT            H22, S22 }
      *(_WORD *)(v57 + 4) = LOWORD(_S22);
      if (v58) {
        short float v89 = _H25;
      }
      else {
        LOWORD(v89) = COERCE_UNSIGNED_INT(1.0);
      }
      *(short float *)(v57 + 6) = v89;
      v57 += 8;
      if (!--v74) {
        goto LABEL_32;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    int64x2_t v12 = (uint64_t *)*((void *)result + 7);
    int64x2_t v11 = (uint64_t *)*((void *)result + 8);
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    uint64_t v15 = v11[2];
    uint64_t v16 = **((void **)result + 17);
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    unsigned int v18 = 1.0;
    float v19 = 1.0 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    float v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    float v21 = (float)v18;
    float v22 = v19 * *(float *)v10;
    float v23 = v19 * *(float *)(v10 + 8);
    float v24 = v19 * *(float *)(v10 + 16);
    float v25 = v19 * *(float *)(v10 + 20);
    float v26 = v19 * *(float *)(v10 + 28);
    uint64_t v27 = *((void *)result + 14);
    unint64_t v28 = *((void *)result + 13) * a2 / v3;
    float v29 = (void *)*((void *)result + 16);
    unint64_t v30 = v28 + *((void *)result + 15);
    uint64_t v31 = *(void *)(result + 36);
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 124);
    char v32 = 16 - v10;
    if (v10 >= 0x11) {
      char v32 = 0;
    }
    uint64_t v33 = *v29 + v30 * v16 + 8 * v27;
    uint64_t v34 = v12[2];
    if (v34) {
      uint64_t v35 = v34 + v15 * v8 + 2 * v31;
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v37 = *v12;
    uint64_t v36 = v12[1];
    uint64_t v38 = v36 + v14 * v8 + 2 * v31;
    if (!v36) {
      uint64_t v38 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v37 + v13 * v8 + 2 * v31);
    char v39 = v32;
    while (!v7)
    {
LABEL_21:
      result += v13;
      v38 += v14;
      v35 += v15;
      v33 += v16;
      if (++v6 == v9) {
        return result;
      }
    }
    uint64_t v40 = v7;
    unint64_t v41 = (unsigned __int16 *)result;
    uint64_t v42 = v33;
    uint64_t v43 = (unsigned __int16 *)v35;
    uint64_t v44 = (unsigned __int16 *)v38;
    while (1)
    {
      if (v44)
      {
        float v45 = (float)(*v44 >> v39) - v21;
        float v46 = (float)(v44[1] >> v39) - v21;
        v44 += 2;
        float v47 = v23 * v46;
        float v48 = (float)(v25 * v46) + (float)(v45 * v24);
        float v49 = v26 * v45;
        if (!v43) {
          goto LABEL_16;
        }
      }
      else
      {
        float v49 = 0.0;
        float v48 = 0.0;
        float v47 = 0.0;
        if (!v43)
        {
LABEL_16:
          unsigned int v50 = 0;
          goto LABEL_17;
        }
      }
      unsigned int v51 = *v43++;
      unsigned int v50 = v51;
LABEL_17:
      unsigned int v52 = *v41++;
      float v53 = v22 * (float)((float)(int)(v52 >> v39) - v20);
      _S19 = v47 + v53;
      _S18 = v48 + v53;
      _S17 = v49 + v53;
      _S20 = (float)v50 * 0.000015259;
      __asm
      {
        FCVT            H20, S20
        FCVT            H19, S19
      }
      *(_WORD *)uint64_t v42 = LOWORD(_S19);
      __asm { FCVT            H18, S18 }
      *(_WORD *)(v42 + 2) = LOWORD(_S18);
      __asm { FCVT            H17, S17 }
      *(_WORD *)(v42 + 4) = LOWORD(_S17);
      if (v43) {
        short float v63 = _H20;
      }
      else {
        LOWORD(v63) = COERCE_UNSIGNED_INT(1.0);
      }
      *(short float *)(v42 + 6) = v63;
      v42 += 8;
      if (!--v40) {
        goto LABEL_21;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_RGfA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double _D0)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(void *)(result + 20);
    uint64_t v9 = *(void *)(result + 44);
    uint64_t v10 = v5 + v9;
    uint64_t v11 = v6 + v9;
    uint64_t v12 = *((void *)result + 19);
    int64x2_t v13 = (uint64_t *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = **((void **)result + 17);
    unsigned int v18 = *(unsigned __int16 *)(v12 + 140);
    unsigned int v19 = *(unsigned __int16 *)(v12 + 142);
    _S6 = *(float *)(v12 + 72);
    _S7 = *(float *)(v12 + 76);
    _S16 = *(float *)(v12 + 80);
    _S17 = *(float *)(v12 + 84);
    _S18 = *(float *)(v12 + 88);
    _S19 = *(float *)(v12 + 92);
    _S20 = *(float *)(v12 + 96);
    _S25 = *(float *)(v12 + 100);
    _S26 = *(float *)(v12 + 104);
    uint64_t v188 = v11 - v10;
    uint64_t v29 = v12 + 16548;
    float v30 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    float v31 = (float)v18;
    float v32 = (float)v19;
    *(float *)&_D0 = v30 * *(float *)v12;
    _S1 = v30 * *(float *)(v12 + 8);
    _S2 = v30 * *(float *)(v12 + 16);
    _S3 = v30 * *(float *)(v12 + 20);
    _S4 = v30 * *(float *)(v12 + 28);
    uint64_t v37 = v12 + 164;
    uint64_t v38 = v12 + 32932;
    float v208 = *(float *)&_D0;
    __asm { FCVT            H8, S0 }
    *(short float *)&_D0 = (short float)v18;
    int16x8_t v44 = vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    *(short float *)&_D0 = -(short float)v19;
    float16x8_t v45 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    float v194 = _S4;
    float v195 = _S3;
    __asm { FCVT            H0, S4 }
    short float v193 = _H0;
    float v196 = _S1;
    __asm { FCVT            H0, S2 }
    short float v192 = _H0;
    __asm { FCVT            H0, S3 }
    short float v191 = _H0;
    __asm { FCVT            H0, S1 }
    short float v190 = _H0;
    float v212 = *(float *)(v12 + 108);
    __asm { FCVT            H0, S22 }
    short float v206 = _H0;
    float16x8_t v207 = (float16x8_t)v44;
    float v211 = *(float *)(v12 + 112);
    __asm { FCVT            H0, S24 }
    short float v205 = _H0;
    float v210 = *(float *)(v12 + 116);
    __asm { FCVT            H0, S27 }
    short float v204 = _H0;
    float v209 = *(float *)(v12 + 120);
    __asm { FCVT            H0, S28 }
    short float v203 = _H0;
    LODWORD(v12) = *(unsigned __int8 *)(v12 + 124);
    unsigned __int8 v54 = 16 - v12;
    uint64_t v55 = v13[2];
    uint64_t v189 = v14[2];
    uint64_t v56 = *(void *)(result + 36);
    uint64_t v57 = *((void *)result + 14);
    unint64_t v58 = *((void *)result + 13) * a2 / v4 + *((void *)result + 15);
    uint64_t v60 = *v13;
    uint64_t v59 = *(void *)(*((void *)result + 7) + 8);
    uint64_t v61 = v16;
    uint64_t v62 = **((void **)result + 16);
    if (v12 >= 0x11) {
      unsigned __int8 v54 = 0;
    }
    uint64_t v63 = v17;
    uint64_t result = (unsigned __int8 *)(v62 + v17 * v58 + 16 * v57);
    if (v55) {
      uint64_t v64 = v55 + v189 * v10 + 2 * v56;
    }
    else {
      uint64_t v64 = 0;
    }
    if (v59) {
      uint64_t v65 = v59 + v16 * v10 + 2 * v56;
    }
    else {
      uint64_t v65 = 0;
    }
    uint64_t v66 = v15;
    uint64_t v67 = v60 + v15 * v10 + 2 * v56;
    float v68 = _S6;
    __asm { FCVT            H0, S6 }
    short float v202 = _H0;
    float v70 = _S7;
    __asm { FCVT            H0, S7 }
    short float v201 = _H0;
    float v72 = _S16;
    __asm { FCVT            H0, S16 }
    short float v200 = _H0;
    float v74 = _S17;
    __asm { FCVT            H0, S17 }
    short float v199 = _H0;
    float v76 = _S18;
    __asm { FCVT            H0, S18 }
    short float v198 = _H0;
    float v78 = _S19;
    __asm { FCVT            H0, S19 }
    short float v197 = _H0;
    float v80 = _S20;
    __asm { FCVT            H3, S20 }
    float v82 = _S25;
    __asm
    {
      FCVT            H4, S25
      FCVT            H5, S26
    }
    uint16x8_t v85 = (uint16x8_t)vdupq_n_s16(-v54);
    v86.i64[0] = 0x9000900090009000;
    v86.i64[1] = 0x9000900090009000;
    float v187 = v31;
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v147 = 0;
        int16x8x4_t v91 = (const __int16 *)v65;
        int16x8x2_t v90 = (int8x16_t *)v64;
        float v145 = (float *)result;
        float16x8_t v88 = (uint16x8_t *)v67;
      }
      else
      {
        int v87 = 0;
        float16x8_t v88 = (uint16x8_t *)v67;
        short float v89 = (float *)result;
        int16x8x2_t v90 = (int8x16_t *)v64;
        int16x8x4_t v91 = (const __int16 *)v65;
        do
        {
          int8x16_t v92 = 0uLL;
          if (v91)
          {
            int16x8x2_t v213 = vld2q_s16(v91);
            v91 += 16;
            float16x8_t v93 = vcvtq_f16_u16(vshlq_u16((uint16x8_t)v213.val[0], v85));
            v213.val[0] = (int16x8_t)vcvtq_f16_u16(vshlq_u16((uint16x8_t)v213.val[1], v85));
            v213.val[1] = (int16x8_t)vaddq_f16(v45, v93);
            float16x8_t v94 = vaddq_f16(v45, (float16x8_t)v213.val[0]);
            float16x8_t v95 = vmulq_n_f16(v94, v190);
            float16x8_t v96 = vmlaq_n_f16(vmulq_n_f16((float16x8_t)v213.val[1], v192), v94, v191);
            float16x8_t v97 = vmulq_n_f16((float16x8_t)v213.val[1], v193);
          }
          else
          {
            float16x8_t v97 = 0uLL;
            float16x8_t v96 = 0uLL;
            float16x8_t v95 = 0uLL;
          }
          uint16x8_t v98 = *v88++;
          uint16x8_t v99 = v98;
          if (v90)
          {
            int8x16_t v100 = *v90++;
            int8x16_t v92 = v100;
          }
          float16x8_t v101 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v99, v85)), v207);
          float16x8_t v102 = vmlaq_n_f16(v96, v101, _H8);
          float16x8_t v103 = vmlaq_n_f16(v97, v101, _H8);
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v95, v101, _H8), (float16x8_t)0), v86));
          uint32x4_t v105 = vmovl_high_u16(v104);
          float16x8_t v106 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v104.i8);
          v106.i16[0] = *(_WORD *)(v37 + 2 * v106.u32[0]);
          v106.i16[1] = *(_WORD *)(v37 + 2 * v106.u32[1]);
          v106.i16[2] = *(_WORD *)(v37 + 2 * v106.u32[2]);
          v106.i16[3] = *(_WORD *)(v37 + 2 * v106.u32[3]);
          v106.i16[4] = *(_WORD *)(v37 + 2 * v105.u32[0]);
          v106.i16[5] = *(_WORD *)(v37 + 2 * v105.u32[1]);
          v106.i16[6] = *(_WORD *)(v37 + 2 * v105.u32[2]);
          v106.i16[7] = *(_WORD *)(v37 + 2 * v105.u32[3]);
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v102, (float16x8_t)0), v86));
          uint32x4_t v108 = vmovl_high_u16(v107);
          float16x8_t v109 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v107.i8);
          v109.i16[0] = *(_WORD *)(v37 + 2 * v109.u32[0]);
          v109.i16[1] = *(_WORD *)(v37 + 2 * v109.u32[1]);
          v109.i16[2] = *(_WORD *)(v37 + 2 * v109.u32[2]);
          v109.i16[3] = *(_WORD *)(v37 + 2 * v109.u32[3]);
          v109.i16[4] = *(_WORD *)(v37 + 2 * v108.u32[0]);
          v109.i16[5] = *(_WORD *)(v37 + 2 * v108.u32[1]);
          v109.i16[6] = *(_WORD *)(v37 + 2 * v108.u32[2]);
          v109.i16[7] = *(_WORD *)(v37 + 2 * v108.u32[3]);
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v103, (float16x8_t)0), v86));
          uint32x4_t v111 = vmovl_high_u16(v110);
          float16x8_t v112 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v110.i8);
          v112.i16[0] = *(_WORD *)(v37 + 2 * v112.u32[0]);
          v112.i16[1] = *(_WORD *)(v37 + 2 * v112.u32[1]);
          v112.i16[2] = *(_WORD *)(v37 + 2 * v112.u32[2]);
          v112.i16[3] = *(_WORD *)(v37 + 2 * v112.u32[3]);
          v112.i16[4] = *(_WORD *)(v37 + 2 * v111.u32[0]);
          v112.i16[5] = *(_WORD *)(v37 + 2 * v111.u32[1]);
          v112.i16[6] = *(_WORD *)(v37 + 2 * v111.u32[2]);
          v112.i16[7] = *(_WORD *)(v37 + 2 * v111.u32[3]);
          uint16x8_t v113 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v106, v206), v109, v205), v112, v204), vmaxq_f16(vmaxq_f16(v106, v109), v112), v203), (float16x8_t)0), v86));
          uint32x4_t v114 = vmovl_high_u16(v113);
          float16x8_t v115 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v113.i8);
          v115.i16[0] = *(_WORD *)(v29 + 2 * v115.u32[0]);
          v115.i16[1] = *(_WORD *)(v29 + 2 * v115.u32[1]);
          v115.i16[2] = *(_WORD *)(v29 + 2 * v115.u32[2]);
          v115.i16[3] = *(_WORD *)(v29 + 2 * v115.u32[3]);
          v115.i16[4] = *(_WORD *)(v29 + 2 * v114.u32[0]);
          v115.i16[5] = *(_WORD *)(v29 + 2 * v114.u32[1]);
          v115.i16[6] = *(_WORD *)(v29 + 2 * v114.u32[2]);
          v115.i16[7] = *(_WORD *)(v29 + 2 * v114.u32[3]);
          float16x8_t v116 = vmulq_f16(v106, v115);
          float16x8_t v117 = vmulq_f16(v109, v115);
          float16x8_t v118 = vmulq_f16(v112, v115);
          float16x8_t v119 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v116, v199), v117, v198), v118, v197);
          float16x8_t v120 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v118, _H5), v117, _H4), v116, _H3);
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v116, v202), v117, v201), v118, v200), (float16x8_t)0), v86));
          uint32x4_t v122 = vmovl_high_u16(v121);
          uint32x4_t v123 = vmovl_u16(*(uint16x4_t *)v121.i8);
          v124.i16[0] = *(_WORD *)(v38 + 2 * v123.u32[0]);
          v124.i16[1] = *(_WORD *)(v38 + 2 * v123.u32[1]);
          v124.i16[2] = *(_WORD *)(v38 + 2 * v123.u32[2]);
          v124.i16[3] = *(_WORD *)(v38 + 2 * v123.u32[3]);
          v124.i16[4] = *(_WORD *)(v38 + 2 * v122.u32[0]);
          v124.i16[5] = *(_WORD *)(v38 + 2 * v122.u32[1]);
          v124.i16[6] = *(_WORD *)(v38 + 2 * v122.u32[2]);
          v124.i16[7] = *(_WORD *)(v38 + 2 * v122.u32[3]);
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v86));
          uint32x4_t v126 = vmovl_high_u16(v125);
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v125.i8);
          v128.i16[0] = *(_WORD *)(v38 + 2 * v127.u32[0]);
          v128.i16[1] = *(_WORD *)(v38 + 2 * v127.u32[1]);
          v128.i16[2] = *(_WORD *)(v38 + 2 * v127.u32[2]);
          v128.i16[3] = *(_WORD *)(v38 + 2 * v127.u32[3]);
          v128.i16[4] = *(_WORD *)(v38 + 2 * v126.u32[0]);
          v128.i16[5] = *(_WORD *)(v38 + 2 * v126.u32[1]);
          v128.i16[6] = *(_WORD *)(v38 + 2 * v126.u32[2]);
          v128.i16[7] = *(_WORD *)(v38 + 2 * v126.u32[3]);
          uint16x8_t v129 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v86));
          uint32x4_t v130 = vmovl_high_u16(v129);
          int8x16_t v132 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v129.i8);
          v132.i16[0] = *(_WORD *)(v38 + 2 * v132.u32[0]);
          float v131 = (__int16 *)(v38 + 2 * v130.u32[3]);
          v132.i16[1] = *(_WORD *)(v38 + 2 * v132.u32[1]);
          v132.i16[2] = *(_WORD *)(v38 + 2 * v132.u32[2]);
          v132.i16[3] = *(_WORD *)(v38 + 2 * v132.u32[3]);
          v132.i16[4] = *(_WORD *)(v38 + 2 * v130.u32[0]);
          v132.i16[5] = *(_WORD *)(v38 + 2 * v130.u32[1]);
          v132.i16[6] = *(_WORD *)(v38 + 2 * v130.u32[2]);
          if (v90)
          {
            *(int16x4_t *)v133.i8 = vzip1_s16(*(int16x4_t *)v92.i8, 0);
            v133.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v92.i8, 0);
            int16x4_t v134 = (int16x4_t)vextq_s8(v92, v92, 8uLL).u64[0];
            *(int16x4_t *)v135.i8 = vzip1_s16(v134, 0);
            v135.u64[1] = (unint64_t)vzip2_s16(v134, 0);
            float32x4_t v136 = (float32x4_t)vdupq_n_s32(0x37800080u);
            _Q20 = vmulq_f32(vcvtq_f32_u32(v133), v136);
            float32x4_t v138 = vmulq_f32(vcvtq_f32_u32(v135), v136);
          }
          else
          {
            __asm { FMOV            V20.4S, #1.0 }
            float32x4_t v138 = _Q20;
          }
          float32x4_t v139 = vcvtq_f32_f16(*(float16x4_t *)v124.i8);
          float32x4_t v140 = vcvtq_f32_f16(*(float16x4_t *)v128.i8);
          v132.i16[7] = *v131;
          float32x4_t v141 = vcvtq_f32_f16(*(float16x4_t *)v132.i8);
          float32x4_t v142 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL));
          float32x4_t v143 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL));
          float32x4_t v144 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v132, v132, 8uLL));
          float v145 = v89 + 32;
          vst4q_f32(v89, *(float32x4x4_t *)(&_Q20 - 3));
          unint64_t v146 = v89 + 16;
          vst4q_f32(v146, *(float32x4x4_t *)(&v138 - 3));
          v87 += 8;
          short float v89 = v145;
        }
        while (v87 < (int)v8 - 7);
        unint64_t v147 = v8 & 0xFFFFFFF8;
        float v31 = v187;
      }
      _CF = v8 >= v147;
      unint64_t v148 = v8 - v147;
      if (v148 != 0 && _CF)
      {
        do
        {
          if (v91)
          {
            float v149 = (float)(*(unsigned __int16 *)v91 >> v54) - v32;
            float v150 = (float)(*((unsigned __int16 *)v91 + 1) >> v54) - v32;
            v91 += 2;
            float v151 = v196 * v150;
            float v152 = (float)(v195 * v150) + (float)(v149 * _S2);
            float v153 = v194 * v149;
          }
          else
          {
            float v153 = 0.0;
            float v152 = 0.0;
            float v151 = 0.0;
          }
          unsigned int v154 = v88->u16[0];
          float16x8_t v88 = (uint16x8_t *)((char *)v88 + 2);
          float v155 = v208 * (float)((float)(int)(v154 >> v54) - v31);
          float v156 = v151 + v155;
          BOOL v157 = (float)(v151 + v155) <= 8191.0;
          float v158 = 8191.0;
          if (v157)
          {
            float v158 = v156;
            if (v156 < 0.0) {
              float v158 = 0.0;
            }
          }
          float v159 = v152 + v155;
          BOOL v157 = (float)(v152 + v155) <= 8191.0;
          float v160 = 8191.0;
          if (v157)
          {
            float v160 = v159;
            if (v159 < 0.0) {
              float v160 = 0.0;
            }
          }
          float v161 = v153 + v155;
          float v162 = 8191.0;
          if (v161 <= 8191.0)
          {
            float v162 = v161;
            if (v161 < 0.0) {
              float v162 = 0.0;
            }
          }
          if (v90)
          {
            unsigned int v164 = v90->u16[0];
            int16x8x2_t v90 = (int8x16_t *)((char *)v90 + 2);
            unsigned int v163 = v164;
          }
          else
          {
            unsigned int v163 = 0;
          }
          _H17 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H16 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          unsigned int v168 = llroundf(fminf(fmaxf(v162, 0.0), 8191.0));
          __asm { FCVT            S7, H16 }
          _H16 = *(_WORD *)(v37 + 2 * v168);
          __asm { FCVT            S16, H16 }
          float v172 = (float)((float)((float)(v211 * _S7) + (float)(v212 * _S17)) + (float)(v210 * _S16))
               + (float)(v209 * fmaxf(_S17, fmaxf(_S7, _S16)));
          float v173 = 8191.0;
          if (v172 <= 8191.0)
          {
            float v173 = v172;
            if (v172 < 0.0) {
              float v173 = 0.0;
            }
          }
          _H18 = *(_WORD *)(v29 + 2 * llroundf(v173));
          __asm { FCVT            S18, H18 }
          _S17 = _S17 * _S18;
          float v177 = _S7 * _S18;
          _S16 = _S16 * _S18;
          float v179 = (float)((float)(v70 * v177) + (float)(_S17 * v68)) + (float)(_S16 * v72);
          float v180 = (float)((float)(v76 * v177) + (float)(_S17 * v74)) + (float)(_S16 * v78);
          float v181 = (float)((float)(v82 * v177) + (float)(_S17 * v80)) + (float)(_S16 * _S26);
          LOWORD(_S16) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v179, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S17) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v180, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H6 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v181, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          float v186 = (float)v163 * 0.000015259;
          *(_DWORD *)float v145 = _S16;
          *((_DWORD *)v145 + 1) = _S17;
          if (!v90) {
            float v186 = 1.0;
          }
          *((_DWORD *)v145 + 2) = _S6;
          v145[3] = v186;
          v145 += 4;
          --v148;
        }
        while (v148);
      }
      v67 += v66;
      v65 += v61;
      v64 += v189;
      result += v63;
      ++v7;
    }
    while (v7 != v188);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    uint64_t v37 = v13 + 164;
    uint64_t v38 = v13 + 16548;
    uint64_t v39 = v13 + 32932;
    float v40 = *(float *)(v13 + 104);
    float v41 = *(float *)(v13 + 108);
    float v42 = *(float *)(v13 + 112);
    float v43 = *(float *)(v13 + 116);
    float v44 = *(float *)(v13 + 120);
    uint64_t v45 = *((void *)result + 14);
    unint64_t v46 = *((void *)result + 13) * a2 / v6;
    float v47 = (void *)*((void *)result + 16);
    unint64_t v48 = v46 + *((void *)result + 15);
    uint64_t v49 = *(void *)(result + 36);
    unsigned int v50 = *(unsigned __int8 *)(v13 + 124);
    char v51 = 16 - v50;
    if (v50 >= 0x11) {
      char v51 = 0;
    }
    uint64_t result = (unsigned __int8 *)(*v47 + v48 * v19 + 16 * v45);
    uint64_t v52 = v14[2];
    if (v52) {
      uint64_t v53 = v52 + v18 * v11 + 2 * v49;
    }
    else {
      uint64_t v53 = 0;
    }
    uint64_t v56 = v14;
    uint64_t v55 = *v14;
    uint64_t v54 = v56[1];
    if (v54) {
      uint64_t v57 = v54 + v17 * v11 + 2 * v49;
    }
    else {
      uint64_t v57 = 0;
    }
    uint64_t v58 = v55 + v16 * v11 + 2 * v49;
    do
    {
      if (v10)
      {
        uint64_t v59 = v10;
        uint64_t v60 = (unsigned __int16 *)v58;
        uint64_t v61 = result;
        uint64_t v62 = (unsigned __int16 *)v53;
        uint64_t v63 = (unsigned __int16 *)v57;
        do
        {
          if (v63)
          {
            float v64 = (float)(*v63 >> v51) - v23;
            float v65 = (float)(v63[1] >> v51) - v23;
            v63 += 2;
            float v66 = v25 * v65;
            float v67 = (float)(v27 * v65) + (float)(v64 * v26);
            float v68 = v28 * v64;
          }
          else
          {
            float v68 = 0.0;
            float v67 = 0.0;
            float v66 = 0.0;
          }
          unsigned int v69 = *v60++;
          float v70 = v24 * (float)((float)(int)(v69 >> v51) - v22);
          float v71 = v66 + v70;
          BOOL v72 = (float)(v66 + v70) <= 8191.0;
          float v73 = 8191.0;
          if (v72)
          {
            float v73 = v71;
            if (v71 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v67 + v70;
          BOOL v72 = (float)(v67 + v70) <= 8191.0;
          float v75 = 8191.0;
          if (v72)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v68 + v70;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          if (v62)
          {
            unsigned int v79 = *v62++;
            unsigned int v78 = v79;
          }
          else
          {
            unsigned int v78 = 0;
          }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          unsigned int v87 = llroundf(fminf(fmaxf(v77, 0.0), 8191.0));
          __asm { FCVT            S9, H10 }
          _H10 = *(_WORD *)(v37 + 2 * v87);
          __asm { FCVT            S10, H10 }
          float v91 = (float)((float)((float)(v42 * _S9) + (float)(v41 * _S8)) + (float)(v43 * _S10))
              + (float)(v44 * fmaxf(_S8, fmaxf(_S9, _S10)));
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          _H11 = *(_WORD *)(v38 + 2 * llroundf(v92));
          __asm { FCVT            S11, H11 }
          float v95 = _S8 * _S11;
          _S9 = _S9 * _S11;
          _S10 = _S10 * _S11;
          float v98 = (float)((float)(v30 * _S9) + (float)(v95 * v29)) + (float)(_S10 * v31);
          float v99 = (float)((float)(v33 * _S9) + (float)(v95 * v32)) + (float)(_S10 * v34);
          _S8 = (float)((float)(v36 * _S9) + (float)(v95 * v35)) + (float)(_S10 * v40);
          LOWORD(_S9) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          LOWORD(_S10) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S8) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          *(_DWORD *)uint64_t v61 = _S9;
          *((_DWORD *)v61 + 1) = _S10;
          if (v62) {
            float v104 = (float)v78 * 0.000015259;
          }
          else {
            float v104 = 1.0;
          }
          *((_DWORD *)v61 + 2) = _S8;
          *((float *)v61 + 3) = v104;
          v61 += 16;
          --v59;
        }
        while (v59);
      }
      v58 += v16;
      v57 += v17;
      v53 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_RGfA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_RGfA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double _D0)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(void *)(result + 20);
    uint64_t v9 = *(void *)(result + 44);
    uint64_t v10 = v5 + v9;
    uint64_t v11 = v6 + v9;
    uint64_t v12 = *((void *)result + 19);
    int64x2_t v13 = (uint64_t *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = **((void **)result + 17);
    unsigned int v19 = *(unsigned __int16 *)(v12 + 140);
    unsigned int v20 = *(unsigned __int16 *)(v12 + 142);
    _S29 = *(float *)(v12 + 104);
    uint64_t v156 = v11 - v10;
    uint64_t v22 = v12 + 164;
    float v23 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    float v24 = (float)v20;
    *(float *)&_D0 = v23 * *(float *)v12;
    _S1 = v23 * *(float *)(v12 + 8);
    _S2 = v23 * *(float *)(v12 + 16);
    _S3 = v23 * *(float *)(v12 + 20);
    _S4 = v23 * *(float *)(v12 + 28);
    uint64_t v29 = v12 + 16548;
    float v173 = *(float *)&_D0;
    float v174 = (float)v19;
    __asm { FCVT            H8, S0 }
    *(short float *)&_D0 = (short float)v19;
    int16x8_t v35 = vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    *(short float *)&_D0 = -(short float)v20;
    float16x8_t v36 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    float v161 = _S4;
    float v162 = _S3;
    __asm { FCVT            H0, S4 }
    short float v160 = _H0;
    float v163 = _S2;
    float v164 = _S1;
    __asm { FCVT            H0, S2 }
    short float v159 = _H0;
    __asm { FCVT            H0, S3 }
    short float v158 = _H0;
    __asm { FCVT            H0, S1 }
    short float v157 = _H0;
    _S6 = *(float *)(v12 + 72);
    __asm { FCVT            H0, S7 }
    short float v171 = _H0;
    float16x8_t v172 = (float16x8_t)v35;
    _S18 = *(float *)(v12 + 76);
    __asm { FCVT            H0, S16 }
    short float v170 = _H0;
    _S20 = *(float *)(v12 + 80);
    __asm { FCVT            H0, S21 }
    short float v169 = _H0;
    _S25 = *(float *)(v12 + 84);
    __asm { FCVT            H0, S22 }
    short float v168 = _H0;
    _S7 = *(float *)(v12 + 88);
    __asm { FCVT            H0, S23 }
    short float v167 = _H0;
    _S9 = *(float *)(v12 + 92);
    __asm { FCVT            H0, S24 }
    short float v166 = _H0;
    _S10 = *(float *)(v12 + 96);
    __asm { FCVT            H0, S27 }
    short float v165 = _H0;
    _S11 = *(float *)(v12 + 100);
    __asm { FCVT            H0, S28 }
    LODWORD(v12) = *(unsigned __int8 *)(v12 + 124);
    unsigned __int8 v57 = 16 - v12;
    uint64_t v58 = v13[2];
    uint64_t v59 = *(void *)(result + 36);
    uint64_t v60 = *((void *)result + 14);
    unint64_t v61 = *((void *)result + 13) * a2 / v4 + *((void *)result + 15);
    uint64_t v63 = *v13;
    uint64_t v62 = *(void *)(*((void *)result + 7) + 8);
    uint64_t v64 = **((void **)result + 16);
    if (v12 >= 0x11) {
      unsigned __int8 v57 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v64 + v18 * v61 + 16 * v60);
    if (v58) {
      uint64_t v65 = v58 + v17 * v10 + 2 * v59;
    }
    else {
      uint64_t v65 = 0;
    }
    if (v62) {
      uint64_t v66 = v62 + v16 * v10 + 2 * v59;
    }
    else {
      uint64_t v66 = 0;
    }
    uint64_t v67 = v63 + v15 * v10 + 2 * v59;
    float v68 = _S29;
    __asm { FCVT            H1, S29 }
    uint16x8_t v70 = (uint16x8_t)vdupq_n_s16(-v57);
    v71.i64[0] = 0x9000900090009000;
    v71.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v125 = 0;
        float v76 = (const __int16 *)v66;
        float v75 = (int8x16_t *)v65;
        uint32x4_t v123 = (float *)result;
        float v73 = (uint16x8_t *)v67;
      }
      else
      {
        int v72 = 0;
        float v73 = (uint16x8_t *)v67;
        float v74 = (float *)result;
        float v75 = (int8x16_t *)v65;
        float v76 = (const __int16 *)v66;
        do
        {
          int8x16_t v77 = 0uLL;
          if (v76)
          {
            int16x8x2_t v175 = vld2q_s16(v76);
            v76 += 16;
            float16x8_t v78 = vcvtq_f16_u16(vshlq_u16((uint16x8_t)v175.val[0], v70));
            v175.val[0] = (int16x8_t)vcvtq_f16_u16(vshlq_u16((uint16x8_t)v175.val[1], v70));
            v175.val[1] = (int16x8_t)vaddq_f16(v36, v78);
            v175.val[0] = (int16x8_t)vaddq_f16(v36, (float16x8_t)v175.val[0]);
            float16x8_t v79 = vmulq_n_f16((float16x8_t)v175.val[0], v157);
            float16x8_t v80 = vmlaq_n_f16(vmulq_n_f16((float16x8_t)v175.val[1], v159), (float16x8_t)v175.val[0], v158);
            float16x8_t v81 = vmulq_n_f16((float16x8_t)v175.val[1], v160);
          }
          else
          {
            float16x8_t v81 = 0uLL;
            float16x8_t v80 = 0uLL;
            float16x8_t v79 = 0uLL;
          }
          uint16x8_t v82 = *v73++;
          uint16x8_t v83 = v82;
          if (v75)
          {
            int8x16_t v84 = *v75++;
            int8x16_t v77 = v84;
          }
          float16x8_t v85 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v83, v70)), v172);
          uint16x8_t v86 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v79, v85, _H8), (float16x8_t)0), v71));
          uint32x4_t v87 = vmovl_high_u16(v86);
          uint32x4_t v88 = vmovl_u16(*(uint16x4_t *)v86.i8);
          v89.i16[0] = *(_WORD *)(v22 + 2 * v88.u32[0]);
          v89.i16[1] = *(_WORD *)(v22 + 2 * v88.u32[1]);
          v89.i16[2] = *(_WORD *)(v22 + 2 * v88.u32[2]);
          v89.i16[3] = *(_WORD *)(v22 + 2 * v88.u32[3]);
          v89.i16[4] = *(_WORD *)(v22 + 2 * v87.u32[0]);
          v89.i16[5] = *(_WORD *)(v22 + 2 * v87.u32[1]);
          v89.i16[6] = *(_WORD *)(v22 + 2 * v87.u32[2]);
          v89.i16[7] = *(_WORD *)(v22 + 2 * v87.u32[3]);
          uint16x8_t v90 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v80, v85, _H8), (float16x8_t)0), v71));
          uint32x4_t v91 = vmovl_high_u16(v90);
          uint32x4_t v92 = vmovl_u16(*(uint16x4_t *)v90.i8);
          v93.i16[0] = *(_WORD *)(v22 + 2 * v92.u32[0]);
          v93.i16[1] = *(_WORD *)(v22 + 2 * v92.u32[1]);
          v93.i16[2] = *(_WORD *)(v22 + 2 * v92.u32[2]);
          v93.i16[3] = *(_WORD *)(v22 + 2 * v92.u32[3]);
          v93.i16[4] = *(_WORD *)(v22 + 2 * v91.u32[0]);
          v93.i16[5] = *(_WORD *)(v22 + 2 * v91.u32[1]);
          v93.i16[6] = *(_WORD *)(v22 + 2 * v91.u32[2]);
          v93.i16[7] = *(_WORD *)(v22 + 2 * v91.u32[3]);
          uint16x8_t v94 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v81, v85, _H8), (float16x8_t)0), v71));
          uint32x4_t v95 = vmovl_high_u16(v94);
          float16x8_t v96 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v94.i8);
          v96.i16[0] = *(_WORD *)(v22 + 2 * v96.u32[0]);
          v96.i16[1] = *(_WORD *)(v22 + 2 * v96.u32[1]);
          v96.i16[2] = *(_WORD *)(v22 + 2 * v96.u32[2]);
          v96.i16[3] = *(_WORD *)(v22 + 2 * v96.u32[3]);
          v96.i16[4] = *(_WORD *)(v22 + 2 * v95.u32[0]);
          v96.i16[5] = *(_WORD *)(v22 + 2 * v95.u32[1]);
          v96.i16[6] = *(_WORD *)(v22 + 2 * v95.u32[2]);
          v96.i16[7] = *(_WORD *)(v22 + 2 * v95.u32[3]);
          float16x8_t v97 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v89, v168), v93, v167), v96, v166);
          float16x8_t v110 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v96, _H1), v93, _H0), v89, v165);
          uint16x8_t v98 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v89, v171), v93, v170), v96, v169), (float16x8_t)0), v71));
          uint32x4_t v99 = vmovl_high_u16(v98);
          uint32x4_t v100 = vmovl_u16(*(uint16x4_t *)v98.i8);
          v101.i16[0] = *(_WORD *)(v29 + 2 * v100.u32[0]);
          v101.i16[1] = *(_WORD *)(v29 + 2 * v100.u32[1]);
          v101.i16[2] = *(_WORD *)(v29 + 2 * v100.u32[2]);
          v101.i16[3] = *(_WORD *)(v29 + 2 * v100.u32[3]);
          v101.i16[4] = *(_WORD *)(v29 + 2 * v99.u32[0]);
          v101.i16[5] = *(_WORD *)(v29 + 2 * v99.u32[1]);
          v101.i16[6] = *(_WORD *)(v29 + 2 * v99.u32[2]);
          v101.i16[7] = *(_WORD *)(v29 + 2 * v99.u32[3]);
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v97, (float16x8_t)0), v71));
          uint32x4_t v103 = vmovl_high_u16(v102);
          uint32x4_t v104 = vmovl_u16(*(uint16x4_t *)v102.i8);
          v105.i16[0] = *(_WORD *)(v29 + 2 * v104.u32[0]);
          v105.i16[1] = *(_WORD *)(v29 + 2 * v104.u32[1]);
          v105.i16[2] = *(_WORD *)(v29 + 2 * v104.u32[2]);
          v105.i16[3] = *(_WORD *)(v29 + 2 * v104.u32[3]);
          v105.i16[4] = *(_WORD *)(v29 + 2 * v103.u32[0]);
          v105.i16[5] = *(_WORD *)(v29 + 2 * v103.u32[1]);
          v105.i16[6] = *(_WORD *)(v29 + 2 * v103.u32[2]);
          v105.i16[7] = *(_WORD *)(v29 + 2 * v103.u32[3]);
          uint16x8_t v106 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v110, (float16x8_t)0), v71));
          uint32x4_t v107 = vmovl_high_u16(v106);
          uint32x4_t v108 = vmovl_u16(*(uint16x4_t *)v106.i8);
          v110.i16[0] = *(_WORD *)(v29 + 2 * v108.u32[0]);
          float16x8_t v109 = (__int16 *)(v29 + 2 * v107.u32[3]);
          v110.i16[1] = *(_WORD *)(v29 + 2 * v108.u32[1]);
          v110.i16[2] = *(_WORD *)(v29 + 2 * v108.u32[2]);
          v110.i16[3] = *(_WORD *)(v29 + 2 * v108.u32[3]);
          v110.i16[4] = *(_WORD *)(v29 + 2 * v107.u32[0]);
          v110.i16[5] = *(_WORD *)(v29 + 2 * v107.u32[1]);
          v110.i16[6] = *(_WORD *)(v29 + 2 * v107.u32[2]);
          if (v75)
          {
            *(int16x4_t *)v111.i8 = vzip1_s16(*(int16x4_t *)v77.i8, 0);
            v111.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v77.i8, 0);
            int16x4_t v112 = (int16x4_t)vextq_s8(v77, v77, 8uLL).u64[0];
            *(int16x4_t *)v113.i8 = vzip1_s16(v112, 0);
            v113.u64[1] = (unint64_t)vzip2_s16(v112, 0);
            float32x4_t v114 = (float32x4_t)vdupq_n_s32(0x37800080u);
            _Q5 = vmulq_f32(vcvtq_f32_u32(v111), v114);
            float32x4_t v116 = vmulq_f32(vcvtq_f32_u32(v113), v114);
          }
          else
          {
            __asm { FMOV            V5.4S, #1.0 }
            float32x4_t v116 = _Q5;
          }
          float32x4_t v117 = vcvtq_f32_f16(*(float16x4_t *)v101.i8);
          float32x4_t v118 = vcvtq_f32_f16(*(float16x4_t *)v105.i8);
          v110.i16[7] = *v109;
          float32x4_t v119 = vcvtq_f32_f16(*(float16x4_t *)v110.i8);
          float32x4_t v120 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL));
          float32x4_t v121 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v105, v105, 8uLL));
          float32x4_t v122 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL));
          uint32x4_t v123 = v74 + 32;
          vst4q_f32(v74, *(float32x4x4_t *)(&_Q5 - 3));
          int8x16_t v124 = v74 + 16;
          vst4q_f32(v124, *(float32x4x4_t *)(&v116 - 3));
          v72 += 8;
          float v74 = v123;
        }
        while (v72 < (int)v8 - 7);
        unint64_t v125 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v125;
      unint64_t v126 = v8 - v125;
      if (v126 != 0 && _CF)
      {
        do
        {
          if (v76)
          {
            float v127 = (float)(*(unsigned __int16 *)v76 >> v57) - v24;
            float v128 = (float)(*((unsigned __int16 *)v76 + 1) >> v57) - v24;
            v76 += 2;
            float v129 = v164 * v128;
            float v130 = (float)(v162 * v128) + (float)(v127 * v163);
            float v131 = v161 * v127;
          }
          else
          {
            float v131 = 0.0;
            float v130 = 0.0;
            float v129 = 0.0;
          }
          unsigned int v132 = v73->u16[0];
          float v73 = (uint16x8_t *)((char *)v73 + 2);
          float v133 = v173 * (float)((float)(int)(v132 >> v57) - v174);
          float v134 = v129 + v133;
          float v135 = 8191.0;
          if (v134 <= 8191.0)
          {
            float v135 = v134;
            if (v134 < 0.0) {
              float v135 = 0.0;
            }
          }
          float v136 = v130 + v133;
          float v137 = 8191.0;
          if (v136 <= 8191.0)
          {
            float v137 = v136;
            if (v136 < 0.0) {
              float v137 = 0.0;
            }
          }
          float v138 = v131 + v133;
          BOOL v139 = (float)(v131 + v133) <= 8191.0;
          float v140 = 8191.0;
          if (v139)
          {
            float v140 = v138;
            if (v138 < 0.0) {
              float v140 = 0.0;
            }
          }
          if (v75)
          {
            unsigned int v142 = v75->u16[0];
            float v75 = (int8x16_t *)((char *)v75 + 2);
            unsigned int v141 = v142;
          }
          else
          {
            unsigned int v141 = 0;
          }
          _H2 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H4 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v140, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          float v149 = (float)((float)(_S18 * _S4) + (float)(_S2 * _S6)) + (float)(_S5 * _S20);
          float v150 = (float)((float)(_S7 * _S4) + (float)(_S2 * _S25)) + (float)(_S5 * _S9);
          _S2 = (float)((float)(_S11 * _S4) + (float)(_S2 * _S10)) + (float)(_S5 * v68);
          LOWORD(_S4) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S2) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          float v155 = (float)v141 * 0.000015259;
          *(_DWORD *)uint32x4_t v123 = _S4;
          *((_DWORD *)v123 + 1) = _S5;
          if (!v75) {
            float v155 = 1.0;
          }
          *((_DWORD *)v123 + 2) = _S2;
          v123[3] = v155;
          v123 += 4;
          --v126;
        }
        while (v126);
      }
      v67 += v15;
      v66 += v16;
      v65 += v17;
      result += v18;
      ++v7;
    }
    while (v7 != v156);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    float v37 = *(float *)(v13 + 104);
    uint64_t v38 = v13 + 164;
    uint64_t v39 = v13 + 16548;
    uint64_t v40 = *((void *)result + 14);
    unint64_t v41 = *((void *)result + 13) * a2 / v6;
    float v42 = (void *)*((void *)result + 16);
    unint64_t v43 = v41 + *((void *)result + 15);
    uint64_t v44 = *(void *)(result + 36);
    unsigned int v45 = *(unsigned __int8 *)(v13 + 124);
    char v46 = 16 - v45;
    if (v45 >= 0x11) {
      char v46 = 0;
    }
    uint64_t v47 = *v42 + v43 * v19 + 16 * v40;
    uint64_t v48 = v14[2];
    if (v48) {
      uint64_t result = (unsigned __int8 *)(v48 + v18 * v11 + 2 * v44);
    }
    else {
      uint64_t result = 0;
    }
    char v51 = v14;
    uint64_t v50 = *v14;
    uint64_t v49 = v51[1];
    if (v49) {
      uint64_t v52 = v49 + v17 * v11 + 2 * v44;
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t v53 = v50 + v16 * v11 + 2 * v44;
    do
    {
      if (v10)
      {
        uint64_t v54 = v10;
        uint64_t v55 = (unsigned __int16 *)v53;
        uint64_t v56 = v47;
        unsigned __int8 v57 = (unsigned __int16 *)result;
        uint64_t v58 = (unsigned __int16 *)v52;
        do
        {
          if (v58)
          {
            float v59 = (float)(*v58 >> v46) - v23;
            float v60 = (float)(v58[1] >> v46) - v23;
            v58 += 2;
            float v61 = v25 * v60;
            float v62 = (float)(v27 * v60) + (float)(v59 * v26);
            float v63 = v28 * v59;
          }
          else
          {
            float v63 = 0.0;
            float v62 = 0.0;
            float v61 = 0.0;
          }
          unsigned int v64 = *v55++;
          float v65 = v24 * (float)((float)(int)(v64 >> v46) - v22);
          float v66 = v61 + v65;
          BOOL v67 = (float)(v61 + v65) <= 8191.0;
          float v68 = 8191.0;
          if (v67)
          {
            float v68 = v66;
            if (v66 < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v62 + v65;
          BOOL v67 = (float)(v62 + v65) <= 8191.0;
          float v70 = 8191.0;
          if (v67)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v63 + v65;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          if (v57)
          {
            unsigned int v74 = *v57++;
            unsigned int v73 = v74;
          }
          else
          {
            unsigned int v73 = 0;
          }
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          float v85 = (float)((float)(v30 * _S30) + (float)(_S28 * v29)) + (float)(_S29 * v31);
          float v86 = (float)((float)(v33 * _S30) + (float)(_S28 * v32)) + (float)(_S29 * v34);
          _S28 = (float)((float)(v36 * _S30) + (float)(_S28 * v35)) + (float)(_S29 * v37);
          LOWORD(_S29) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          LOWORD(_S30) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          LOWORD(_S28) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S28, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          *(_DWORD *)uint64_t v56 = _S29;
          *(_DWORD *)(v56 + 4) = _S30;
          if (v57) {
            float v91 = (float)v73 * 0.000015259;
          }
          else {
            float v91 = 1.0;
          }
          *(_DWORD *)(v56 + 8) = _S28;
          *(float *)(v56 + 12) = v91;
          v56 += 16;
          --v54;
        }
        while (v54);
      }
      v53 += v16;
      v52 += v17;
      result += v18;
      v47 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_RGfA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_rgb_RGfA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, int16x4_t a3)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(void *)(result + 20);
    uint64_t v9 = *(void *)(result + 44);
    uint64_t v10 = v5 + v9;
    uint64_t v11 = v6 + v9;
    uint64_t v12 = *((void *)result + 19);
    uint64_t v14 = (uint64_t *)*((void *)result + 7);
    int64x2_t v13 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v13;
    uint64_t v16 = v13[1];
    uint64_t v17 = v13[2];
    uint64_t v18 = **((void **)result + 17);
    unsigned int v19 = *(unsigned __int16 *)(v12 + 140);
    unsigned int v20 = *(unsigned __int16 *)(v12 + 142);
    a3.i32[0] = *(_DWORD *)v12;
    uint64_t v21 = v11 - v10;
    float v22 = 1.0 / (float)*(unsigned int *)(v12 + 128);
    float v23 = (float)v19;
    float v24 = (float)v20;
    _S3 = v22 * *(float *)v12;
    _S4 = v22 * *(float *)(v12 + 8);
    _S5 = v22 * *(float *)(v12 + 16);
    _S6 = v22 * *(float *)(v12 + 20);
    _S7 = v22 * *(float *)(v12 + 28);
    __asm { FCVT            H8, S3 }
    *(short float *)a3.i16 = (short float)v19;
    float16x8_t v35 = (float16x8_t)vdupq_lane_s16(a3, 0);
    *(short float *)a3.i16 = -(short float)v20;
    float16x8_t v36 = (float16x8_t)vdupq_lane_s16(a3, 0);
    __asm
    {
      FCVT            H9, S7
      FCVT            H10, S5
      FCVT            H11, S6
      FCVT            H12, S4
    }
    LODWORD(v12) = *(unsigned __int8 *)(v12 + 124);
    unsigned __int8 v41 = 16 - v12;
    uint64_t v42 = v14[2];
    uint64_t v43 = *(void *)(result + 36);
    uint64_t v44 = *((void *)result + 14);
    unint64_t v45 = *((void *)result + 13) * a2 / v4 + *((void *)result + 15);
    uint64_t v47 = *v14;
    uint64_t v46 = v14[1];
    uint64_t v48 = v46 + v16 * v10 + 2 * v43;
    uint64_t v49 = **((void **)result + 16);
    if (v12 >= 0x11) {
      unsigned __int8 v41 = 0;
    }
    uint64_t v50 = v49 + v18 * v45 + 16 * v44;
    if (v42) {
      uint64_t v51 = v42 + v17 * v10 + 2 * v43;
    }
    else {
      uint64_t v51 = 0;
    }
    if (!v46) {
      uint64_t v48 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v47 + v15 * v10 + 2 * v43);
    uint16x8_t v52 = (uint16x8_t)vdupq_n_s16(-v41);
    __asm { FMOV            V19.4S, #1.0 }
    float32x4_t v54 = (float32x4_t)vdupq_n_s32(0x37800080u);
    while (1)
    {
      if ((int)v8 < 8)
      {
        unint64_t v84 = 0;
        float v59 = (const __int16 *)v48;
        uint64_t v58 = (int8x16_t *)v51;
        uint16x8_t v82 = (float *)v50;
        uint64_t v56 = (uint16x8_t *)result;
      }
      else
      {
        int v55 = 0;
        uint64_t v56 = (uint16x8_t *)result;
        unsigned __int8 v57 = (float *)v50;
        uint64_t v58 = (int8x16_t *)v51;
        float v59 = (const __int16 *)v48;
        do
        {
          if (v59)
          {
            int16x8x2_t v97 = vld2q_s16(v59);
            v59 += 16;
            float16x8_t v60 = vaddq_f16(v36, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v97.val[0], v52)));
            v97.val[0] = (int16x8_t)vaddq_f16(v36, vcvtq_f16_u16(vshlq_u16((uint16x8_t)v97.val[1], v52)));
            float16x8_t v61 = vmulq_n_f16((float16x8_t)v97.val[0], _H12);
            float16x8_t v62 = vmlaq_n_f16(vmulq_n_f16(v60, _H10), (float16x8_t)v97.val[0], _H11);
            float16x8_t v63 = vmulq_n_f16(v60, _H9);
          }
          else
          {
            float16x8_t v63 = 0uLL;
            float16x8_t v62 = 0uLL;
            float16x8_t v61 = 0uLL;
          }
          uint16x8_t v64 = *v56++;
          uint16x8_t v65 = v64;
          if (v58)
          {
            int8x16_t v66 = *v58++;
            *(int16x4_t *)v67.i8 = vzip1_s16(*(int16x4_t *)v66.i8, 0);
            v67.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v66.i8, 0);
            int16x4_t v68 = (int16x4_t)vextq_s8(v66, v66, 8uLL).u64[0];
            *(int16x4_t *)v69.i8 = vzip1_s16(v68, 0);
            v69.u64[1] = (unint64_t)vzip2_s16(v68, 0);
            float32x4_t v70 = vmulq_f32(vcvtq_f32_u32(v67), v54);
            float32x4_t v71 = vmulq_f32(vcvtq_f32_u32(v69), v54);
          }
          else
          {
            float32x4_t v70 = _Q19;
            float32x4_t v71 = _Q19;
          }
          float16x8_t v72 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v65, v52)), v35);
          int8x16_t v73 = (int8x16_t)vmlaq_n_f16(v61, v72, _H8);
          int8x16_t v74 = (int8x16_t)vmlaq_n_f16(v62, v72, _H8);
          int8x16_t v75 = (int8x16_t)vmlaq_n_f16(v63, v72, _H8);
          float32x4_t v76 = vcvtq_f32_f16(*(float16x4_t *)v73.i8);
          float32x4_t v77 = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
          float32x4_t v78 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
          float32x4_t v79 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL));
          float32x4_t v80 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL));
          float32x4_t v81 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL));
          uint16x8_t v82 = v57 + 32;
          vst4q_f32(v57, *(float32x4x4_t *)(&v70 - 3));
          uint16x8_t v83 = v57 + 16;
          vst4q_f32(v83, *(float32x4x4_t *)(&v71 - 3));
          v55 += 8;
          unsigned __int8 v57 = v82;
        }
        while (v55 < (int)v8 - 7);
        unint64_t v84 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v84;
      unint64_t v85 = v8 - v84;
      if (v85 != 0 && _CF) {
        break;
      }
LABEL_32:
      result += v15;
      v48 += v16;
      v51 += v17;
      v50 += v18;
      if (++v7 == v21) {
        return result;
      }
    }
    while (1)
    {
      if (v59)
      {
        float v86 = (float)(*(unsigned __int16 *)v59 >> v41) - v24;
        float v87 = (float)(*((unsigned __int16 *)v59 + 1) >> v41) - v24;
        v59 += 2;
        float v88 = _S4 * v87;
        float v89 = (float)(_S6 * v87) + (float)(v86 * _S5);
        float v90 = _S7 * v86;
        if (!v58) {
          goto LABEL_27;
        }
      }
      else
      {
        float v90 = 0.0;
        float v89 = 0.0;
        float v88 = 0.0;
        if (!v58)
        {
LABEL_27:
          unsigned int v91 = 0;
          goto LABEL_28;
        }
      }
      unsigned int v92 = v58->u16[0];
      uint64_t v58 = (int8x16_t *)((char *)v58 + 2);
      unsigned int v91 = v92;
LABEL_28:
      unsigned int v93 = v56->u16[0];
      uint64_t v56 = (uint16x8_t *)((char *)v56 + 2);
      float v94 = _S3 * (float)((float)(int)(v93 >> v41) - v23);
      float v95 = v90 + v94;
      *uint16x8_t v82 = v88 + v94;
      v82[1] = v89 + v94;
      if (v58) {
        float v96 = (float)v91 * 0.000015259;
      }
      else {
        float v96 = 1.0;
      }
      v82[2] = v95;
      v82[3] = v96;
      v82 += 4;
      if (!--v85) {
        goto LABEL_32;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v14;
    uint64_t v17 = v14[1];
    uint64_t v18 = v14[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 1.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    uint64_t v29 = *((void *)result + 14);
    unint64_t v30 = *((void *)result + 13) * a2 / v6;
    float v31 = (void *)*((void *)result + 16);
    unint64_t v32 = v30 + *((void *)result + 15);
    uint64_t v33 = *(void *)(result + 36);
    LODWORD(v13) = *(unsigned __int8 *)(v13 + 124);
    char v34 = 16 - v13;
    if (v13 >= 0x11) {
      char v34 = 0;
    }
    uint64_t v35 = *v31 + v32 * v19 + 16 * v29;
    uint64_t v36 = v15[2];
    if (v36) {
      uint64_t v37 = v36 + v18 * v11 + 2 * v33;
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v39 = *v15;
    uint64_t v38 = v15[1];
    uint64_t v40 = v38 + v17 * v11 + 2 * v33;
    if (!v38) {
      uint64_t v40 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v39 + v16 * v11 + 2 * v33);
    char v41 = v34;
    while (!v10)
    {
LABEL_21:
      result += v16;
      v40 += v17;
      v37 += v18;
      v35 += v19;
      if (++v9 == v12) {
        return result;
      }
    }
    uint64_t v42 = v10;
    uint64_t v43 = (unsigned __int16 *)result;
    uint64_t v44 = (float *)v35;
    unint64_t v45 = (unsigned __int16 *)v37;
    uint64_t v46 = (unsigned __int16 *)v40;
    while (1)
    {
      if (v46)
      {
        float v47 = (float)(*v46 >> v41) - v23;
        float v48 = (float)(v46[1] >> v41) - v23;
        v46 += 2;
        float v49 = v25 * v48;
        float v50 = (float)(v27 * v48) + (float)(v47 * v26);
        float v51 = v28 * v47;
        if (!v45) {
          goto LABEL_16;
        }
      }
      else
      {
        float v51 = 0.0;
        float v50 = 0.0;
        float v49 = 0.0;
        if (!v45)
        {
LABEL_16:
          unsigned int v52 = 0;
          goto LABEL_17;
        }
      }
      unsigned int v53 = *v45++;
      unsigned int v52 = v53;
LABEL_17:
      unsigned int v54 = *v43++;
      float v55 = v24 * (float)((float)(int)(v54 >> v41) - v22);
      float v56 = v51 + v55;
      *uint64_t v44 = v49 + v55;
      v44[1] = v50 + v55;
      if (v45) {
        float v57 = (float)v52 * 0.000015259;
      }
      else {
        float v57 = 1.0;
      }
      CFTypeRef v44[2] = v56;
      v44[3] = v57;
      v44 += 4;
      if (!--v42) {
        goto LABEL_21;
      }
    }
  }
  return result;
}

uint64_t MuxedAlphaEncoder_CreateInstance()
{
  VTVideoEncoderGetClassID();
  uint64_t result = CMDerivedObjectCreate();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t MuxedAlphaEncoder_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    *(unsigned char *)uint64_t DerivedStorage = 1;
    uint64_t v2 = *(OpaqueVTCompressionSession **)(DerivedStorage + 64);
    if (v2) {
      VTCompressionSessionInvalidate(v2);
    }
    uint64_t v3 = *(OpaqueVTCompressionSession **)(v1 + 112);
    if (v3) {
      VTCompressionSessionInvalidate(v3);
    }
  }
  return 0;
}

void MuxedAlphaEncoder_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  uint64_t v1 = (const void *)DerivedStorage[3];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[3] = 0;
  }
  uint64_t v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[6];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[6] = 0;
  }
  unint64_t v4 = (const void *)DerivedStorage[7];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[7] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[8];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[8] = 0;
  }
  unint64_t v6 = (const void *)DerivedStorage[13];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[13] = 0;
  }
  unint64_t v7 = (const void *)DerivedStorage[14];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[14] = 0;
  }
  unint64_t v8 = (const void *)DerivedStorage[9];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[9] = 0;
  }
  uint64_t v9 = (const void *)DerivedStorage[15];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[15] = 0;
  }
  uint64_t v10 = (const void *)DerivedStorage[10];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[10] = 0;
  }
  unint64_t v11 = (const void *)DerivedStorage[11];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[11] = 0;
  }
  unint64_t v12 = (const void *)DerivedStorage[12];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[12] = 0;
  }
  uint64_t v13 = (const void *)DerivedStorage[16];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[16] = 0;
  }
  uint64_t v14 = (const void *)DerivedStorage[17];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[17] = 0;
  }
  uint64_t v15 = (const void *)DerivedStorage[18];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[18] = 0;
  }
  uint64_t v16 = DerivedStorage[20];
  if (v16)
  {
    dispatch_release(v16);
    DerivedStorage[20] = 0;
  }
  uint64_t v17 = DerivedStorage[19];
  if (v17)
  {
    dispatch_release(v17);
    DerivedStorage[19] = 0;
  }
}

__CFString *MuxedAlphaEncoder_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<MuxedAlphaVideoEncoder %p>", a1);
  return Mutable;
}

uint64_t MuxedAlphaEncoder_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"AlphaChannelMode"))
  {
    if (CFEqual(a2, @"SublayerEncoderSpecification"))
    {
      CFStringRef v9 = *(CFStringRef *)(DerivedStorage + 48);
      if (v9) {
        goto LABEL_9;
      }
    }
    else if (CFEqual(a2, @"MVHEVCVideoLayerIDs"))
    {
      CFStringRef v9 = *(CFStringRef *)(DerivedStorage + 80);
      if (v9) {
        goto LABEL_9;
      }
    }
    else if (CFEqual(a2, @"MVHEVCViewIDs"))
    {
      CFStringRef v9 = *(CFStringRef *)(DerivedStorage + 88);
      if (v9) {
        goto LABEL_9;
      }
    }
    else
    {
      if (!CFEqual(a2, @"MVHEVCLeftAndRightViewIDs"))
      {
        if (!*(void *)(DerivedStorage + 64) || !*(void *)(DerivedStorage + 112)) {
          return 4294954393;
        }
        if (CFEqual(a2, @"TargetQualityForAlpha"))
        {
          unint64_t v12 = *(const void **)(DerivedStorage + 112);
          CFStringRef v13 = @"Quality";
        }
        else
        {
          unint64_t v12 = *(const void **)(DerivedStorage + 64);
          CFStringRef v13 = a2;
        }
        return VTSessionCopyProperty(v12, v13, a3, a4);
      }
      CFStringRef v9 = *(CFStringRef *)(DerivedStorage + 96);
      if (v9)
      {
LABEL_9:
        CFTypeRef v10 = CFRetain(v9);
LABEL_10:
        uint64_t result = 0;
        *a4 = v10;
        return result;
      }
    }
    CFTypeRef v10 = 0;
    goto LABEL_10;
  }
  if (*(unsigned char *)(DerivedStorage + 40) || *(unsigned char *)(DerivedStorage + 41))
  {
    unint64_t v8 = &kVTAlphaChannelMode_StraightAlpha;
    if (*(unsigned char *)(DerivedStorage + 42)) {
      unint64_t v8 = &kVTAlphaChannelMode_PremultipliedAlpha;
    }
    CFStringRef v9 = *v8;
    goto LABEL_9;
  }
  uint64_t result = 0;
  *a4 = 0;
  return result;
}

uint64_t MuxedAlphaEncoder_SetProperty(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"ProfileLevel"))
  {
    if (!a3 || (CFTypeID v7 = CFGetTypeID(a3), v7 == CFStringGetTypeID()))
    {
      uint64_t v8 = a1;
      CFStringRef v9 = a3;
LABEL_5:
      return alphaencoder_configureSubEncodersByProfile(v8, v9);
    }
    goto LABEL_32;
  }
  if (CFEqual(a2, @"OutputBitDepth"))
  {
    if (a3)
    {
      int SInt32 = FigCFNumberGetSInt32();
      if ((SInt32 | 2) == 0xA)
      {
        int v12 = SInt32;
        uint64_t result = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 64), @"OutputBitDepth", a3);
        if (result) {
          return result;
        }
        *(_DWORD *)(DerivedStorage + 176) = v12;
        goto LABEL_13;
      }
    }
LABEL_32:
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, @"AlphaChannelMode"))
  {
    if (!a3)
    {
      if (!*(unsigned char *)(DerivedStorage + 41))
      {
        uint64_t result = 0;
        *(unsigned char *)(DerivedStorage + 42) = 1;
        *(unsigned char *)(DerivedStorage + 40) = 0;
        return result;
      }
      goto LABEL_32;
    }
    if (CFEqual(a3, @"StraightAlpha"))
    {
      int v13 = 0;
    }
    else
    {
      if (!CFEqual(a3, @"PremultipliedAlpha")) {
        goto LABEL_32;
      }
      int v13 = 1;
    }
    if (!*(unsigned char *)(DerivedStorage + 41) || *(unsigned __int8 *)(DerivedStorage + 42) == v13)
    {
      uint64_t result = 0;
      *(unsigned char *)(DerivedStorage + 42) = v13;
      *(unsigned char *)(DerivedStorage + 40) = 1;
      return result;
    }
    goto LABEL_32;
  }
  if (CFEqual(a2, @"SublayerEncoderSpecification"))
  {
    if (!a3) {
      goto LABEL_32;
    }
    CFTypeID v14 = CFGetTypeID(a3);
    if (v14 != CFDictionaryGetTypeID()) {
      goto LABEL_32;
    }
    uint64_t v15 = *(const void **)(DerivedStorage + 48);
    *(void *)(DerivedStorage + 48) = a3;
    CFRetain(a3);
    if (v15) {
      CFRelease(v15);
    }
    return 0;
  }
  if (CFEqual(a2, @"BaseLayerProperties"))
  {
    if (!a3) {
      goto LABEL_32;
    }
    CFTypeID v16 = CFGetTypeID(a3);
    if (v16 != CFDictionaryGetTypeID()) {
      goto LABEL_32;
    }
    uint64_t v17 = *(const void **)(DerivedStorage + 64);
    goto LABEL_43;
  }
  if (CFEqual(a2, @"AlphaLayerProperties"))
  {
    if (!a3) {
      goto LABEL_32;
    }
    CFTypeID v18 = CFGetTypeID(a3);
    if (v18 != CFDictionaryGetTypeID()) {
      goto LABEL_32;
    }
    uint64_t v17 = *(const void **)(DerivedStorage + 112);
LABEL_43:
    return alphaencoder_setSessionPropertiesInListFromDictionaryIfPresent(v17, (CFDictionaryRef)a3);
  }
  if (CFEqual(a2, @"MVHEVCVideoLayerIDs"))
  {
    if ((_os_feature_enabled_impl() & 1) == 0) {
      goto LABEL_32;
    }
    if (a3)
    {
      CFTypeID v19 = CFGetTypeID(a3);
      if (v19 == CFArrayGetTypeID())
      {
        FigCFArrayGetInt32AtIndex();
        FigCFArrayGetInt32AtIndex();
        float v26 = *(const void **)(DerivedStorage + 80);
        if (v26)
        {
          CFRelease(v26);
          *(void *)(DerivedStorage + 80) = 0;
        }
        *(void *)(DerivedStorage + 80) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)a3);
        uint64_t result = alphaencoder_setVideoLayerIDsToMVHEVCColorAlphaEncoder();
        if (!result) {
          return alphaencoder_configureSubEncodersByProfile(a1, *(const void **)(DerivedStorage + 72));
        }
        return result;
      }
      return 4294954394;
    }
    uint64_t result = *(void *)(DerivedStorage + 80);
    if (result)
    {
      CFRelease((CFTypeRef)result);
      uint64_t result = 0;
      *(void *)(DerivedStorage + 80) = 0;
    }
    return result;
  }
  if (CFEqual(a2, @"MVHEVCViewIDs"))
  {
    if ((_os_feature_enabled_impl() & 1) == 0) {
      goto LABEL_32;
    }
    if (!a3)
    {
      uint64_t result = *(void *)(DerivedStorage + 88);
      if (result)
      {
        CFRelease((CFTypeRef)result);
        uint64_t result = 0;
        *(void *)(DerivedStorage + 88) = 0;
      }
      return result;
    }
    CFTypeID v20 = CFGetTypeID(a3);
    if (v20 != CFArrayGetTypeID()) {
      return 4294954394;
    }
    float v21 = *(const void **)(DerivedStorage + 88);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(DerivedStorage + 88) = 0;
    }
    *(void *)(DerivedStorage + 88) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)a3);
    uint64_t result = alphaencoder_setViewIDsToMVHEVCColorAlphaEncoder();
    if (result) {
      return result;
    }
LABEL_13:
    CFStringRef v9 = *(const void **)(DerivedStorage + 72);
    uint64_t v8 = a1;
    goto LABEL_5;
  }
  if (!CFEqual(a2, @"MVHEVCLeftAndRightViewIDs"))
  {
    if (!*(void *)(DerivedStorage + 64) || !*(void *)(DerivedStorage + 112)) {
      return 4294954393;
    }
    if (CFEqual(a2, @"TargetQualityForAlpha"))
    {
      float v24 = *(const void **)(DerivedStorage + 112);
      CFStringRef v25 = @"Quality";
    }
    else
    {
      if (!CFEqual(a2, @"AverageBitRate")
        && !CFEqual(a2, @"AverageDataRate")
        && !CFEqual(a2, @"RelaxAverageBitRateTarget"))
      {
        unsigned int v27 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 64), a2, a3);
        VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 112), a2, a3);
        if (v27)
        {
          if (CFEqual(a2, @"SourceFrameCount")) {
            return 0;
          }
          else {
            return v27;
          }
        }
        return 0;
      }
      float v24 = *(const void **)(DerivedStorage + 64);
      CFStringRef v25 = a2;
    }
    return VTSessionSetProperty(v24, v25, a3);
  }
  if ((_os_feature_enabled_impl() & 1) == 0) {
    goto LABEL_32;
  }
  if (!a3)
  {
    uint64_t result = *(void *)(DerivedStorage + 96);
    if (result)
    {
      CFRelease((CFTypeRef)result);
      uint64_t result = 0;
      *(void *)(DerivedStorage + 96) = 0;
    }
    return result;
  }
  CFTypeID v22 = CFGetTypeID(a3);
  if (v22 != CFArrayGetTypeID()) {
    return 4294954394;
  }
  float v23 = *(const void **)(DerivedStorage + 96);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(DerivedStorage + 96) = 0;
  }
  *(void *)(DerivedStorage + 96) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)a3);
  uint64_t result = alphaencoder_setLeftAndRightViewIDsToMVHEVCColorAlphaEncoder();
  if (!result) {
    goto LABEL_13;
  }
  return result;
}

uint64_t alphaencoder_configureSubEncodersByProfile(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  unint64_t v4 = DerivedStorage;
  unsigned int v27 = 0;
  BOOL v5 = DerivedStorage[10] || DerivedStorage[11] || DerivedStorage[12] != 0;
  if (!a2 || CFEqual(a2, @"HEVC_Main_AutoLevel"))
  {
    *((_DWORD *)v4 + 43) = 1982882104;
    unint64_t v6 = @"HEVC_Main_AutoLevel";
    CFTypeID v7 = @"HEVC_Main_AutoLevel";
    goto LABEL_18;
  }
  unint64_t v6 = @"HEVC_Main444_AutoLevel";
  if (CFEqual(a2, @"HEVC_Main444_AutoLevel"))
  {
    int v8 = 1982882104;
LABEL_9:
    int v9 = v8 | 0x40000;
LABEL_17:
    *((_DWORD *)v4 + 43) = v9;
    CFTypeID v7 = @"HEVC_Monochrome_AutoLevel";
LABEL_18:
    if (v5) {
      CFTypeRef v10 = @"HEVC_Main_AutoLevel";
    }
    else {
      CFTypeRef v10 = v7;
    }
    if (!CFEqual((CFTypeRef)v4[9], v6))
    {
      uint64_t v11 = VTSessionSetProperty((VTSessionRef)v4[8], @"ProfileLevel", v6);
      if (v11) {
        return v11;
      }
      int v12 = (const void *)v4[9];
      v4[9] = v6;
      if (v6) {
        CFRetain(v6);
      }
      if (v12) {
        CFRelease(v12);
      }
    }
    if (!CFEqual((CFTypeRef)v4[15], v10))
    {
      VTSessionSetProperty((VTSessionRef)v4[14], @"ProfileLevel", v10);
      int v13 = (const void *)v4[15];
      v4[15] = v10;
      if (v10) {
        CFRetain(v10);
      }
      if (v13) {
        CFRelease(v13);
      }
    }
    uint64_t v14 = alphaencoder_createPixelBufferAttributesDictionary(*((unsigned int *)v4 + 4), *((unsigned int *)v4 + 5), (uint64_t)v4 + 172, 1, &v27);
    uint64_t v15 = v27;
    if (!v14)
    {
      VTEncoderSessionSetPixelBufferAttributes((uint64_t *)v4[1], v27);
      if (CFEqual(v6, v10))
      {
        uint64_t v16 = 0;
        if (!v15) {
          return v16;
        }
        goto LABEL_53;
      }
      CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFMutableArrayRef v19 = Mutable;
        CFMutableArrayRef v20 = CFArrayCreateMutable(v17, 0, MEMORY[0x1E4F1D510]);
        if (!v20)
        {
          uint64_t v16 = FigSignalErrorAt();
          CFMutableArrayRef v25 = v19;
          goto LABEL_51;
        }
        CFMutableArrayRef v21 = v20;
        if (!CFEqual(v10, @"HEVC_Main_AutoLevel")
          && !CFEqual(v10, @"HEVC_Main10_AutoLevel")
          && !CFEqual(v10, @"HEVC_Main444_AutoLevel")
          && !CFEqual(v10, @"HEVC_Main42210_AutoLevel")
          && !CFEqual(v10, @"HEVC_Main44410_AutoLevel")
          && !CFEqual(v10, @"HEVC_Monochrome_AutoLevel")
          && !CFEqual(v10, @"HEVC_Monochrome10_AutoLevel"))
        {
          uint64_t v22 = FigSignalErrorAt();
          if (v22) {
            goto LABEL_68;
          }
        }
        if (v5)
        {
          FigCFArrayAppendInt();
          FigCFArrayAppendInt();
          uint64_t v22 = VTSessionSetProperty((VTSessionRef)v4[8], @"RequiredHEVCVideoParameterSetRepFormatBitDepths", v19);
          if (!v22)
          {
            FigCFArrayAppendInt();
            FigCFArrayAppendInt();
            uint64_t v22 = VTSessionSetProperty((VTSessionRef)v4[8], @"RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs", v21);
            if (!v22) {
              goto LABEL_46;
            }
          }
        }
        else
        {
          FigCFArrayAppendInt();
          uint64_t v22 = VTSessionSetProperty((VTSessionRef)v4[8], @"RequiredHEVCVideoParameterSetRepFormatBitDepths", v19);
          if (!v22)
          {
            FigCFArrayAppendInt();
            uint64_t v22 = VTSessionSetProperty((VTSessionRef)v4[8], @"RequiredHEVCVideoParameterSetRepFormatChromaFormatIdcs", v21);
            if (!v22)
            {
LABEL_46:
              int SInt32 = (void *)FigCFNumberCreateSInt32();
              if (SInt32)
              {
                uint64_t v24 = VTSessionSetProperty((VTSessionRef)v4[14], @"RequiredHEVCSequenceParameterSetRepFormatIndex", SInt32);
                if (!v24)
                {
                  uint64_t v16 = 0;
LABEL_49:
                  CFRelease(v19);
                  CFRelease(v21);
                  if (!SInt32) {
                    goto LABEL_52;
                  }
                  CFMutableArrayRef v25 = (CFMutableArrayRef)SInt32;
LABEL_51:
                  CFRelease(v25);
LABEL_52:
                  if (!v15) {
                    return v16;
                  }
LABEL_53:
                  CFRelease(v15);
                  return v16;
                }
              }
              else
              {
                uint64_t v24 = FigSignalErrorAt();
              }
              uint64_t v16 = v24;
              goto LABEL_49;
            }
          }
        }
LABEL_68:
        uint64_t v16 = v22;
        int SInt32 = 0;
        goto LABEL_49;
      }
      uint64_t v14 = FigSignalErrorAt();
    }
    uint64_t v16 = v14;
    if (!v15) {
      return v16;
    }
    goto LABEL_53;
  }
  unint64_t v6 = @"HEVC_Main10_AutoLevel";
  if (CFEqual(a2, @"HEVC_Main10_AutoLevel"))
  {
    int v9 = 2016436536;
    goto LABEL_17;
  }
  unint64_t v6 = @"HEVC_Main42210_AutoLevel";
  if (CFEqual(a2, @"HEVC_Main42210_AutoLevel"))
  {
    if (*((_DWORD *)v4 + 44) == 8) {
      int v9 = 1983013176;
    }
    else {
      int v9 = 2016567608;
    }
    goto LABEL_17;
  }
  unint64_t v6 = @"HEVC_Main44410_AutoLevel";
  if (CFEqual(a2, @"HEVC_Main44410_AutoLevel"))
  {
    int v8 = 2016436536;
    goto LABEL_9;
  }

  return FigSignalErrorAt();
}

uint64_t alphaencoder_setSessionPropertiesInListFromDictionaryIfPresent(const void *a1, CFDictionaryRef theDict)
{
  CFIndex Count = CFDictionaryGetCount(theDict);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    CFStringRef v7 = *kMuxedAlphaEncoderSublayerCompressionPropertyKeyAllowList[v5];
    CFNumberRef Value = CFDictionaryGetValue(theDict, v7);
    if (Value)
    {
      --Count;
      unsigned int v9 = VTSessionSetProperty(a1, v7, Value);
      if (v6) {
        uint64_t v6 = v6;
      }
      else {
        uint64_t v6 = v9;
      }
    }
    ++v5;
  }
  while (v5 != 5);
  if (Count > 0)
  {
    CFTypeRef v10 = (const void *)FigCFCopyCompactDescription();
    if (v10) {
      CFRelease(v10);
    }
  }
  return v6;
}

uint64_t alphaencoder_setVideoLayerIDsToMVHEVCColorAlphaEncoder()
{
  uint64_t DerivedStorage = (VTSessionRef *)CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = (const __CFArray *)DerivedStorage[10];
  if (v1
    && CFArrayGetCount(v1) == 2
    && (CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510])) != 0))
  {
    CFArrayRef v4 = Mutable;
    FigCFArrayGetInt32AtIndex();
    FigCFArrayGetInt32AtIndex();
    FigCFArrayAppendInt32();
    FigCFArrayAppendInt32();
    VTSessionRef v5 = DerivedStorage[16];
    if (v5)
    {
      CFRelease(v5);
      DerivedStorage[16] = 0;
    }
    CFArrayRef Copy = CFArrayCreateCopy(v2, v4);
    DerivedStorage[16] = Copy;
    if (Copy)
    {
      uint64_t v7 = VTSessionSetProperty(DerivedStorage[8], @"MVHEVCVideoLayerIDs", DerivedStorage[10]);
      if (!v7)
      {
        uint64_t v7 = VTSessionSetProperty(DerivedStorage[8], @"RequiredMVHEVCSequenceParameterSetIDs", DerivedStorage[10]);
        if (!v7)
        {
          uint64_t v7 = VTSessionSetProperty(DerivedStorage[8], @"RequiredMVHEVCPictureParameterSetIDs", DerivedStorage[10]);
          if (!v7)
          {
            uint64_t v7 = VTSessionSetProperty(DerivedStorage[8], @"RequiredMVHEVCVideoParameterSetAlphaVideoLayerIDs", DerivedStorage[16]);
            if (!v7)
            {
              uint64_t v7 = VTSessionSetProperty(DerivedStorage[14], @"MVHEVCVideoLayerIDs", DerivedStorage[10]);
              if (!v7)
              {
                uint64_t v7 = VTSessionSetProperty(DerivedStorage[14], @"RequiredMVHEVCSequenceParameterSetIDs", DerivedStorage[16]);
                if (!v7) {
                  uint64_t v7 = VTSessionSetProperty(DerivedStorage[14], @"RequiredMVHEVCPictureParameterSetIDs", DerivedStorage[16]);
                }
              }
            }
          }
        }
      }
    }
    else
    {
      uint64_t v7 = FigSignalErrorAt();
    }
    uint64_t v8 = v7;
    CFRelease(v4);
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t alphaencoder_setViewIDsToMVHEVCColorAlphaEncoder()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = *(const __CFArray **)(DerivedStorage + 88);
  if (v1)
  {
    if (CFArrayGetCount(v1) == 2)
    {
      CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFArrayRef v4 = Mutable;
        uint64_t v5 = 0;
        int v6 = 2;
        BOOL v7 = 1;
        do
        {
          while (FigCFArrayContainsInt())
          {
            ++v6;
            if (!v7) {
              goto LABEL_9;
            }
          }
          FigCFArrayAppendInt32();
          ++v6;
          BOOL v7 = v5++ == 0;
        }
        while (v5 != 2);
LABEL_9:
        uint64_t v8 = *(const void **)(DerivedStorage + 136);
        if (v8)
        {
          CFRelease(v8);
          *(void *)(DerivedStorage + 136) = 0;
        }
        CFArrayRef Copy = CFArrayCreateCopy(v2, v4);
        *(void *)(DerivedStorage + 136) = Copy;
        if (Copy)
        {
          uint64_t v10 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 64), @"MVHEVCViewIDs", *(CFTypeRef *)(DerivedStorage + 88));
          if (!v10)
          {
            uint64_t v10 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 112), @"MVHEVCViewIDs", *(CFTypeRef *)(DerivedStorage + 136));
            if (!v10)
            {
              if (*(void *)(DerivedStorage + 96)) {
                alphaencoder_setLeftAndRightViewIDsToMVHEVCColorAlphaEncoder();
              }
              uint64_t v11 = 0;
              goto LABEL_17;
            }
          }
        }
        else
        {
          uint64_t v10 = FigSignalErrorAt();
        }
        uint64_t v11 = v10;
LABEL_17:
        CFRelease(v4);
        return v11;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t alphaencoder_setLeftAndRightViewIDsToMVHEVCColorAlphaEncoder()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = *(const __CFArray **)(DerivedStorage + 96);
  if (v1 && CFArrayGetCount(v1) == 2)
  {
    CFArrayRef v2 = *(const __CFArray **)(DerivedStorage + 88);
    if (!v2 || CFArrayGetCount(v2) != 2) {
      return 0;
    }
    FigCFArrayGetIntAtIndex();
    FigCFArrayGetIntAtIndex();
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (!Mutable) {
      return FigSignalErrorAt();
    }
    CFArrayRef v5 = Mutable;
    FigCFArrayGetIntAtIndex();
    FigCFArrayGetIntAtIndex();
    FigCFArrayAppendInt();
    FigCFArrayAppendInt();
    int v6 = *(const void **)(DerivedStorage + 144);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(DerivedStorage + 144) = 0;
    }
    CFArrayRef Copy = CFArrayCreateCopy(v3, v5);
    *(void *)(DerivedStorage + 144) = Copy;
    if (Copy)
    {
      uint64_t v8 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 64), @"MVHEVCLeftAndRightViewIDs", *(CFTypeRef *)(DerivedStorage + 96));
      if (!v8) {
        uint64_t v8 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 112), @"MVHEVCLeftAndRightViewIDs", *(CFTypeRef *)(DerivedStorage + 144));
      }
    }
    else
    {
      uint64_t v8 = FigSignalErrorAt();
    }
    uint64_t v9 = v8;
    CFRelease(v5);
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t alphaencoder_createPixelBufferAttributesDictionary(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __CFDictionary **a5)
{
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v10 = Mutable;
    CFMutableArrayRef v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (v11)
    {
      if (a4 < 1)
      {
        uint64_t v14 = 4294954392;
LABEL_9:
        CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E4F24D70], v11);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CFDictionaryRef v15 = CFDictionaryCreate(v8, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E4F24D20], v15);
        *a5 = v10;
LABEL_10:
        CFRelease(v11);
LABEL_11:
        if (v15) {
          CFRelease(v15);
        }
        return v14;
      }
      uint64_t v12 = a4;
      while (1)
      {
        a3 += 4;
        uint64_t appended = FigCFArrayAppendInt32();
        if (appended) {
          break;
        }
        if (!--v12)
        {
          uint64_t v14 = 0;
          goto LABEL_9;
        }
      }
    }
    else
    {
      uint64_t appended = FigSignalErrorAt();
    }
    uint64_t v14 = appended;
    CFRelease(v10);
    CFDictionaryRef v15 = 0;
    if (!v11) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  return FigSignalErrorAt();
}

uint64_t MuxedAlphaEncoder_StartSession(uint64_t a1, uint64_t a2, unint64_t a3, const void *a4)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = HIDWORD(a3);
  VTVideoEncoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v33 = 0;
  v34[0] = 0x4C30303834323066;
  CFDictionaryRef v31 = 0;
  CFDictionaryRef sourceImageBufferAttributes = 0;
  int valuePtr = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  int v29 = 1;
  CFNumberRef v11 = CFNumberCreate(v9, kCFNumberSInt32Type, &v29);
  Float32 = (const void *)FigCFNumberCreateFloat32();
  *(void *)(DerivedStorage + 8) = a2;
  *(_DWORD *)(DerivedStorage + 16) = a3;
  *(_DWORD *)(DerivedStorage + 20) = v7;
  uint64_t v12 = *(const void **)(DerivedStorage + 72);
  *(void *)(DerivedStorage + 72) = @"HEVC_Main_AutoLevel";
  if (@"HEVC_Main_AutoLevel") {
    CFRetain(@"HEVC_Main_AutoLevel");
  }
  if (v12) {
    CFRelease(v12);
  }
  int v13 = *(const void **)(DerivedStorage + 120);
  *(void *)(DerivedStorage + 120) = @"HEVC_Main_AutoLevel";
  if (@"HEVC_Main_AutoLevel") {
    CFRetain(@"HEVC_Main_AutoLevel");
  }
  if (v13) {
    CFRelease(v13);
  }
  *(_DWORD *)(DerivedStorage + 172) = 1982882104;
  uint64_t v14 = *(const void **)(DerivedStorage + 24);
  *(void *)(DerivedStorage + 24) = a4;
  if (a4) {
    CFRetain(a4);
  }
  if (v14) {
    CFRelease(v14);
  }
  CFDictionaryRef v15 = *(const void **)(DerivedStorage + 32);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 32) = 0;
  }
  uint64_t PixelBufferAttributesDictionary = alphaencoder_createPixelBufferAttributesDictionary(a3, v7, DerivedStorage + 172, 1, (__CFDictionary **)&v33);
  if (PixelBufferAttributesDictionary
    || (VTEncoderSessionSetPixelBufferAttributes(*(uint64_t **)(DerivedStorage + 8), v33),
        PixelBufferAttributesDictionary = alphaencoder_createPixelBufferAttributesDictionary(a3, v7, (uint64_t)&unk_193E80550, 6, &sourceImageBufferAttributes), PixelBufferAttributesDictionary)|| (CFAllocatorRef v17 = (VTSessionRef *)(DerivedStorage + 64), PixelBufferAttributesDictionary = VTCompressionSessionCreate(v9, a3, v7, 0x68766331u, *(CFDictionaryRef *)(DerivedStorage + 48), sourceImageBufferAttributes, v9, 0, 0, (VTCompressionSessionRef *)(DerivedStorage + 64)), PixelBufferAttributesDictionary))
  {
    uint64_t v25 = PixelBufferAttributesDictionary;
    float v23 = Float32;
    goto LABEL_29;
  }
  uint64_t v18 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 64), @"ProfileLevel", *(CFTypeRef *)(DerivedStorage + 72));
  if (v18
    || (uint64_t v18 = VTSessionSetProperty(*v17, @"RequiredHEVCSequenceParameterSetID", v10), v18)
    || (uint64_t v18 = VTSessionSetProperty(*v17, @"RequiredHEVCPictureParameterSetID", v10), v18))
  {
    uint64_t v25 = v18;
LABEL_45:
    float v23 = Float32;
    goto LABEL_29;
  }
  CFNumberRef cf = v10;
  VTSessionSetProperty(*v17, @"RequiredHEVCVideoParameterSetAlphaLayerID", v11);
  CFMutableArrayRef v19 = (const void *)*MEMORY[0x1E4F1CFD0];
  uint64_t v20 = VTSessionSetProperty(*v17, @"RequireDeterministicDependencyAndReordering", (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
  if (v20
    || (uint64_t v20 = alphaencoder_createPixelBufferAttributesDictionary(a3, v7, (uint64_t)v34, 2, &v31), v20)
    || (CFMutableArrayRef v21 = (VTSessionRef *)(DerivedStorage + 112),
        uint64_t v20 = VTCompressionSessionCreate(v9, a3, v7, 0x68766331u, *(CFDictionaryRef *)(DerivedStorage + 48), v31, v9, 0, 0, (VTCompressionSessionRef *)(DerivedStorage + 112)), v20))
  {
    uint64_t v25 = v20;
    CFNumberRef v10 = cf;
    goto LABEL_45;
  }
  uint64_t v22 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 112), @"ProfileLevel", *(CFTypeRef *)(DerivedStorage + 120));
  float v23 = Float32;
  if (v22)
  {
    uint64_t v25 = v22;
    CFNumberRef v10 = cf;
  }
  else
  {
    uint64_t v24 = VTSessionSetProperty(*v21, @"RequiredHEVCSequenceParameterSetID", v11);
    if (!v24)
    {
      uint64_t v24 = VTSessionSetProperty(*v21, @"RequiredHEVCPictureParameterSetID", v11);
      if (!v24)
      {
        VTSessionSetProperty(*v21, @"EncodesAlpha", v19);
        VTSessionSetProperty(*v21, @"Quality", Float32);
        uint64_t v24 = VTSessionSetProperty(*v21, @"RequireDeterministicDependencyAndReordering", v19);
      }
    }
    uint64_t v25 = v24;
    CFNumberRef v10 = cf;
  }
LABEL_29:
  if (v23) {
    CFRelease(v23);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (sourceImageBufferAttributes) {
    CFRelease(sourceImageBufferAttributes);
  }
  if (v31) {
    CFRelease(v31);
  }
  return v25;
}

uint64_t MuxedAlphaEncoder_EncodeFrame(uint64_t a1, const void *a2, __CVBuffer *a3, CMTime *a4, CMTime *a5, const __CFDictionary *a6, _DWORD *a7)
{
  uint64_t v13 = a1;
  VTVideoEncoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v72 = 0;
  int8x16_t v73 = (CVPixelBufferRef *)&v72;
  uint64_t v74 = 0x3800000000;
  long long v75 = 0u;
  long long v76 = 0u;
  uint64_t v67 = 0;
  int16x4_t v68 = (CVPixelBufferRef *)&v67;
  uint64_t v69 = 0x3800000000;
  long long v70 = 0u;
  long long v71 = 0u;
  uint64_t v63 = 0;
  uint16x8_t v64 = &v63;
  uint64_t v65 = 0x2000000000;
  int v66 = 0;
  CFDictionaryRef v15 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (a6)
  {
    uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
    v73[4] = (CVPixelBufferRef)MutableCopy;
    if (!MutableCopy || (uint64_t v17 = FigCFDictionaryCreateMutableCopy(), (v68[4] = (CVPixelBufferRef)v17) == 0))
    {
      uint64_t v36 = FigSignalErrorAt();
LABEL_39:
      uint64_t v52 = v36;
      uint64_t v37 = 0;
      goto LABEL_40;
    }
    uint64_t v58 = a7;
    uint64_t v18 = a4;
    CFMutableArrayRef v19 = a5;
    uint64_t v20 = a3;
    uint64_t v21 = v13;
    uint64_t v22 = a2;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a6, @"BaseLayerOptions");
    if (Value)
    {
      CFDictionaryRef v24 = Value;
      CFTypeID v25 = CFGetTypeID(Value);
      BOOL v26 = v25 == CFDictionaryGetTypeID();
      CFDictionaryRef v15 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
      if (v26)
      {
        alphaencoder_setKeysInListFromDictionaryIfPresent(v24, (const void ***)kMuxedAlphaEncoderSublayerFrameOptionsKeyAllowList, 6, v73[4]);
        CFDictionaryRemoveValue(v73[4], @"BaseLayerOptions");
        CFDictionaryRemoveValue(v68[4], @"BaseLayerOptions");
      }
    }
    CFDictionaryRef v27 = (const __CFDictionary *)CFDictionaryGetValue(a6, @"AlphaLayerOptions");
    a2 = v22;
    uint64_t v13 = v21;
    a3 = v20;
    a5 = v19;
    a4 = v18;
    a7 = v58;
    if (v27)
    {
      CFDictionaryRef v28 = v27;
      int v29 = a3;
      unint64_t v30 = a4;
      CFDictionaryRef v31 = a5;
      uint64_t v32 = v13;
      CFTypeRef v33 = a2;
      char v34 = v15;
      CFTypeID v35 = CFGetTypeID(v27);
      BOOL v26 = v35 == CFDictionaryGetTypeID();
      CFDictionaryRef v15 = v34;
      a2 = v33;
      uint64_t v13 = v32;
      a5 = v31;
      a4 = v30;
      a3 = v29;
      if (v26)
      {
        alphaencoder_setKeysInListFromDictionaryIfPresent(v28, (const void ***)kMuxedAlphaEncoderSublayerFrameOptionsKeyAllowList, 6, v68[4]);
        CFDictionaryRemoveValue(v73[4], @"AlphaLayerOptions");
        CFDictionaryRemoveValue(v68[4], @"AlphaLayerOptions");
      }
    }
  }
  if (*a7) {
    *a7 = *((_DWORD *)v64 + 6);
  }
  dispatch_group_enter(*(dispatch_group_t *)(DerivedStorage + 160));
  ++*(_DWORD *)(DerivedStorage + 168);
  uint64_t v36 = alphaencoder_validateThatPixelBufferUsesConsistentPremultiplicationMode(v13, a3);
  if (v36) {
    goto LABEL_39;
  }
  uint64_t v37 = dispatch_group_create();
  CFAllocatorRef v38 = *v15;
  PixelBufferPool = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)(DerivedStorage + 64));
  uint64_t PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(v38, PixelBufferPool, v73 + 3);
  if (PixelBuffer) {
    goto LABEL_37;
  }
  char v41 = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)(DerivedStorage + 112));
  uint64_t PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(v38, v41, v68 + 3);
  if (PixelBuffer) {
    goto LABEL_37;
  }
  uint64_t PixelBuffer = alphaencoder_demuxBaseAndAlpha(a3, v73[3], v68[3]);
  if (PixelBuffer) {
    goto LABEL_37;
  }
  dispatch_retain(v37);
  dispatch_group_enter(v37);
  uint64_t v42 = v73;
  CVPixelBufferRef v43 = v73[3];
  if (v43)
  {
    CFRetain(v43);
    uint64_t v42 = v73;
    uint64_t v44 = v73[3];
  }
  else
  {
    uint64_t v44 = 0;
  }
  unint64_t v45 = *(OpaqueVTCompressionSession **)(DerivedStorage + 64);
  CFDictionaryRef v46 = v42[4];
  outputHandler[0] = MEMORY[0x1E4F143A8];
  outputHandler[1] = 0x40000000;
  outputHandler[2] = __MuxedAlphaEncoder_EncodeFrame_block_invoke;
  outputHandler[3] = &unk_1E5785CD0;
  outputHandler[4] = &v72;
  outputHandler[5] = v37;
  CMTime presentationTimeStamp = *a4;
  CMTime duration = *a5;
  uint64_t PixelBuffer = VTCompressionSessionEncodeFrameWithOutputHandler(v45, v44, &presentationTimeStamp, &duration, v46, 0, outputHandler);
  if (PixelBuffer)
  {
LABEL_37:
    uint64_t v52 = PixelBuffer;
LABEL_40:
    alphaencoder_emitEncodedFrame(v13, a2, v52, 0, 0);
    goto LABEL_26;
  }
  dispatch_retain(v37);
  float v47 = v68;
  CVPixelBufferRef v48 = v68[3];
  if (v48)
  {
    CFRetain(v48);
    float v47 = v68;
    float v49 = v68[3];
  }
  else
  {
    float v49 = 0;
  }
  float v50 = *(OpaqueVTCompressionSession **)(DerivedStorage + 112);
  CFDictionaryRef v51 = v47[4];
  v59[0] = MEMORY[0x1E4F143A8];
  v59[1] = 0x40000000;
  v59[2] = __MuxedAlphaEncoder_EncodeFrame_block_invoke_2;
  v59[3] = &unk_1E5785D20;
  v59[4] = &v67;
  v59[5] = &v72;
  v59[8] = DerivedStorage;
  v59[9] = v13;
  v59[10] = a2;
  v59[6] = &v63;
  v59[7] = v37;
  CMTime presentationTimeStamp = *a4;
  CMTime duration = *a5;
  uint64_t v52 = VTCompressionSessionEncodeFrameWithOutputHandler(v50, v49, &presentationTimeStamp, &duration, v51, 0, v59);
LABEL_26:
  CVPixelBufferRef v53 = v73[4];
  if (v53) {
    CFRelease(v53);
  }
  CVPixelBufferRef v54 = v68[4];
  if (v54) {
    CFRelease(v54);
  }
  CVPixelBufferRef v55 = v73[3];
  if (v55) {
    CFRelease(v55);
  }
  CVPixelBufferRef v56 = v68[3];
  if (v56) {
    CFRelease(v56);
  }
  if (v37) {
    dispatch_release(v37);
  }
  _Block_object_dispose(&v63, 8);
  _Block_object_dispose(&v67, 8);
  _Block_object_dispose(&v72, 8);
  return v52;
}

uint64_t MuxedAlphaEncoder_CompleteFrames(uint64_t a1, CMTime *a2)
{
  VTVideoEncoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFArrayRef v4 = (OpaqueVTCompressionSession *)DerivedStorage[8];
  CMTime v11 = *a2;
  uint64_t v5 = VTCompressionSessionCompleteFrames(v4, &v11);
  int v6 = (OpaqueVTCompressionSession *)DerivedStorage[14];
  CMTime v11 = *a2;
  VTCompressionSessionCompleteFrames(v6, &v11);
  if (DerivedStorage[20])
  {
    uint64_t v7 = 2;
    do
    {
      CFAllocatorRef v8 = DerivedStorage[20];
      dispatch_time_t v9 = dispatch_time(0, 1000000000 * v7);
      v7 *= 2;
    }
    while (dispatch_group_wait(v8, v9));
  }
  return v5;
}

uint64_t MuxedAlphaEncoder_CopySupportedPropertyDictionary(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  VTVideoEncoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef supportedPropertyDictionaryOut = 0;
  CFTypeID v25 = 0;
  BOOL v26 = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(_OWORD *)keys = 0u;
  long long v24 = 0u;
  *(_OWORD *)values = 0u;
  long long v22 = 0u;
  uint64_t v4 = VTSessionCopySupportedPropertyDictionary(*(VTSessionRef *)(DerivedStorage + 64), &supportedPropertyDictionaryOut);
  if (v4)
  {
    uint64_t MutableCopy = 0;
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    CFDictionaryRemoveValue(MutableCopy, @"MultiPassStorage");
    FigCFDictionaryGetValue();
    if (FigCFDictionaryGetArrayValue())
    {
      v20[0] = @"HEVC_Main_AutoLevel";
      v20[1] = @"HEVC_Main444_AutoLevel";
      v20[2] = @"HEVC_Main10_AutoLevel";
      v20[3] = @"HEVC_Main42210_AutoLevel";
      v20[4] = @"HEVC_Main44410_AutoLevel";
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v2, 5, MEMORY[0x1E4F1D510]);
      for (uint64_t i = 0; i != 5; ++i)
      {
        CFAllocatorRef v8 = (const void *)v20[i];
        if (FigCFArrayContainsValue()) {
          CFArrayAppendValue(Mutable, v8);
        }
      }
      uint64_t v4 = 0;
      if (Mutable) {
        goto LABEL_9;
      }
    }
    values[0] = @"HEVC_Main_AutoLevel";
    CFMutableDictionaryRef Mutable = CFArrayCreate(v2, (const void **)values, 1, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
LABEL_9:
      keys[0] = @"SupportedValueList";
      keys[1] = @"PropertyType";
      values[0] = Mutable;
      values[1] = @"Enumeration";
      *(void *)&long long v24 = @"ReadWriteStatus";
      *((void *)&v24 + 1) = @"ShouldBeSerialized";
      uint64_t v9 = *MEMORY[0x1E4F1CFC8];
      *(void *)&long long v22 = @"ReadWrite";
      *((void *)&v22 + 1) = v9;
      CFDictionaryRef v10 = CFDictionaryCreate(v2, (const void **)keys, (const void **)values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v10)
      {
        CFDictionaryRef v11 = v10;
        CFDictionarySetValue(MutableCopy, @"ProfileLevel", v10);
        CFRelease(v11);
      }
      CFRelease(Mutable);
    }
    uint64_t v12 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
    values[0] = @"StraightAlpha";
    values[1] = @"PremultipliedAlpha";
    CFArrayRef v13 = CFArrayCreate(v2, (const void **)values, 2, MEMORY[0x1E4F1D510]);
    if (v13)
    {
      CFArrayRef v14 = v13;
      keys[0] = @"SupportedValueList";
      keys[1] = @"PropertyType";
      values[0] = v13;
      values[1] = @"Enumeration";
      *(void *)&long long v24 = @"ReadWriteStatus";
      *((void *)&v24 + 1) = @"ShouldBeSerialized";
      uint64_t v15 = *MEMORY[0x1E4F1CFC8];
      *(void *)&long long v22 = @"ReadWrite";
      *((void *)&v22 + 1) = v15;
      CFDictionaryRef v16 = CFDictionaryCreate(v2, (const void **)keys, (const void **)values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v16)
      {
        CFDictionaryRef v17 = v16;
        CFDictionarySetValue(MutableCopy, @"AlphaChannelMode", v16);
        CFRelease(v17);
      }
      CFRelease(v14);
    }
    CFDictionarySetValue(v12, @"SublayerEncoderSpecification", v3);
    CFDictionarySetValue(v12, @"SourceFrameCount", v3);
    CFDictionarySetValue(v12, @"BaseLayerProperties", v3);
    CFDictionarySetValue(v12, @"AlphaLayerProperties", v3);
    if (CFDictionaryContainsKey(MutableCopy, @"Quality")) {
      CFDictionarySetValue(v12, @"TargetQualityForAlpha", v3);
    }
    CFTypeID v25 = MutableCopy;
    BOOL v26 = v12;
    FigCFCreateCombinedDictionary();
  }
  if (supportedPropertyDictionaryOut) {
    CFRelease(supportedPropertyDictionaryOut);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

uint64_t MuxedAlphaEncoder_EncodeMultiImageFrame(uint64_t a1, const void *a2, OpaqueCMTaggedBufferGroup *a3, CMTime *a4, CMTime *a5, const __CFDictionary *a6, _DWORD *a7)
{
  VTVideoEncoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v85 = 0;
  float v86 = &v85;
  uint64_t v87 = 0x3800000000;
  long long v88 = 0u;
  long long v89 = 0u;
  uint64_t v80 = 0;
  float32x4_t v81 = &v80;
  uint64_t v82 = 0x3800000000;
  long long v83 = 0u;
  long long v84 = 0u;
  uint64_t v76 = 0;
  float32x4_t v77 = &v76;
  uint64_t v78 = 0x2000000000;
  int v79 = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  CMTagCollectionRef newCollectionOut = 0;
  uint64_t v69 = a1;
  if ((_os_feature_enabled_impl() & 1) == 0) {
    goto LABEL_75;
  }
  CFArrayRef v13 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a6)
  {
    uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
    v86[4] = MutableCopy;
    if (MutableCopy)
    {
      uint64_t v15 = FigCFDictionaryCreateMutableCopy();
      v81[4] = v15;
      if (v15)
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a6, @"BaseLayerOptions");
        if (Value)
        {
          CFDictionaryRef v17 = Value;
          CFTypeID v18 = CFGetTypeID(Value);
          if (v18 == CFDictionaryGetTypeID())
          {
            alphaencoder_setKeysInListFromDictionaryIfPresent(v17, (const void ***)kMuxedAlphaEncoderSublayerFrameOptionsKeyAllowList, 6, (__CFDictionary *)v86[4]);
            CFDictionaryRemoveValue((CFMutableDictionaryRef)v86[4], @"BaseLayerOptions");
            CFDictionaryRemoveValue((CFMutableDictionaryRef)v81[4], @"BaseLayerOptions");
          }
        }
        CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(a6, @"AlphaLayerOptions");
        if (v19)
        {
          CFDictionaryRef v20 = v19;
          CFTypeID v21 = CFGetTypeID(v19);
          if (v21 == CFDictionaryGetTypeID())
          {
            alphaencoder_setKeysInListFromDictionaryIfPresent(v20, (const void ***)kMuxedAlphaEncoderSublayerFrameOptionsKeyAllowList, 6, (__CFDictionary *)v81[4]);
            CFDictionaryRemoveValue((CFMutableDictionaryRef)v86[4], @"AlphaLayerOptions");
            CFDictionaryRemoveValue((CFMutableDictionaryRef)v81[4], @"AlphaLayerOptions");
          }
        }
        goto LABEL_11;
      }
    }
LABEL_75:
    uint64_t v51 = FigSignalErrorAt();
    CFMutableDictionaryRef Mutable = 0;
    int v29 = 0;
    BOOL v26 = 0;
    goto LABEL_45;
  }
LABEL_11:
  int16x4_t v68 = a2;
  if (*a7) {
    *a7 = *((_DWORD *)v77 + 6);
  }
  dispatch_group_enter(*(dispatch_group_t *)(DerivedStorage + 160));
  ++*(_DWORD *)(DerivedStorage + 168);
  CMItemCount Count = CMTaggedBufferGroupGetCount(a3);
  if (Count >= 1)
  {
    CFIndex v23 = 0;
    while (1)
    {
      CVPixelBufferAtIndex = CMTaggedBufferGroupGetCVPixelBufferAtIndex(a3, v23);
      uint64_t v25 = alphaencoder_validateThatPixelBufferUsesConsistentPremultiplicationMode(a1, CVPixelBufferAtIndex);
      if (v25) {
        break;
      }
      if (Count == ++v23) {
        goto LABEL_17;
      }
    }
    uint64_t v51 = v25;
    CFMutableDictionaryRef Mutable = 0;
    int v29 = 0;
    BOOL v26 = 0;
    goto LABEL_74;
  }
LABEL_17:
  BOOL v26 = dispatch_group_create();
  CFAllocatorRef v27 = *v13;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(*v13, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v51 = FigSignalErrorAt();
    int v29 = 0;
    goto LABEL_74;
  }
  int v29 = CFArrayCreateMutable(v27, 0, MEMORY[0x1E4F1D510]);
  if (Count >= 1)
  {
    uint64_t v30 = 0;
    do
    {
      FigCFArrayGetValueAtIndex();
      tags.xpc_object_t value = 0;
      *(void *)&tags.timescale = 0;
      unsigned int UInt32 = FigCFNumberGetUInt32();
      CMTag v32 = CMTagMakeWithSInt64Value(kCMTagCategory_VideoLayerID, UInt32);
      tags.xpc_object_t value = *(void *)&v32.category;
      *(void *)&tags.timescale = v32.value;
      uint64_t v33 = CMTagCollectionCreate(v27, (const CMTag *)&tags, 1, &newCollectionOut);
      if (v33) {
        goto LABEL_73;
      }
      PixelBufferPool = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)(DerivedStorage + 64));
      uint64_t v33 = CVPixelBufferPoolCreatePixelBuffer(v27, PixelBufferPool, &pixelBufferOut);
      if (v33) {
        goto LABEL_73;
      }
      CFArrayAppendValue(Mutable, pixelBufferOut);
      CFArrayAppendValue(v29, newCollectionOut);
      if (newCollectionOut)
      {
        CFRelease(newCollectionOut);
        CMTagCollectionRef newCollectionOut = 0;
      }
      if (pixelBufferOut)
      {
        CFRelease(pixelBufferOut);
        CVPixelBufferRef pixelBufferOut = 0;
      }
    }
    while (Count != ++v30);
  }
  MEMORY[0x1997042B0](v27, v29, Mutable, v86 + 3);
  if (!v86[3]) {
    goto LABEL_72;
  }
  CFArrayRemoveAllValues(v29);
  CFArrayRemoveAllValues(Mutable);
  if (Count >= 1)
  {
    uint64_t v35 = 0;
    do
    {
      FigCFArrayGetValueAtIndex();
      tags.xpc_object_t value = 0;
      *(void *)&tags.timescale = 0;
      unsigned int v36 = FigCFNumberGetUInt32();
      CMTag v37 = CMTagMakeWithSInt64Value(kCMTagCategory_VideoLayerID, v36);
      tags.xpc_object_t value = *(void *)&v37.category;
      *(void *)&tags.timescale = v37.value;
      uint64_t v33 = CMTagCollectionCreate(v27, (const CMTag *)&tags, 1, &newCollectionOut);
      if (v33) {
        goto LABEL_73;
      }
      CFAllocatorRef v38 = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)(DerivedStorage + 112));
      uint64_t v33 = CVPixelBufferPoolCreatePixelBuffer(v27, v38, &pixelBufferOut);
      if (v33) {
        goto LABEL_73;
      }
      CFArrayAppendValue(Mutable, pixelBufferOut);
      CFArrayAppendValue(v29, newCollectionOut);
      if (newCollectionOut)
      {
        CFRelease(newCollectionOut);
        CMTagCollectionRef newCollectionOut = 0;
      }
      if (pixelBufferOut)
      {
        CFRelease(pixelBufferOut);
        CVPixelBufferRef pixelBufferOut = 0;
      }
    }
    while (Count != ++v35);
  }
  MEMORY[0x1997042B0](v27, v29, Mutable, v81 + 3);
  uint64_t v39 = (OpaqueCMTaggedBufferGroup *)v81[3];
  if (!v39)
  {
LABEL_72:
    uint64_t v33 = FigSignalErrorAt();
LABEL_73:
    uint64_t v51 = v33;
LABEL_74:
    a2 = v68;
LABEL_45:
    alphaencoder_emitEncodedFrame(v69, a2, v51, 0, 0);
    goto LABEL_52;
  }
  object = v26;
  uint64_t v40 = (OpaqueCMTaggedBufferGroup *)v86[3];
  CMItemCount v41 = CMTaggedBufferGroupGetCount(a3);
  if (v41 >= 1)
  {
    CMItemCount v42 = v41;
    CFIndex v43 = 0;
    while (1)
    {
      uint64_t v44 = CMTaggedBufferGroupGetCVPixelBufferAtIndex(a3, v43);
      unint64_t v45 = CMTaggedBufferGroupGetCVPixelBufferAtIndex(v40, v43);
      CFDictionaryRef v46 = CMTaggedBufferGroupGetCVPixelBufferAtIndex(v39, v43);
      uint64_t v47 = alphaencoder_demuxBaseAndAlpha(v44, v45, v46);
      if (v47) {
        break;
      }
      if (v42 == ++v43) {
        goto LABEL_42;
      }
    }
    uint64_t v51 = v47;
    BOOL v26 = object;
    a2 = v68;
    goto LABEL_45;
  }
LABEL_42:
  BOOL v26 = object;
  dispatch_retain(object);
  dispatch_group_enter(object);
  CVPixelBufferRef v48 = v86;
  float v49 = (const void *)v86[3];
  if (v49)
  {
    CFRetain(v49);
    CVPixelBufferRef v48 = v86;
    float v50 = (OpaqueCMTaggedBufferGroup *)v86[3];
  }
  else
  {
    float v50 = 0;
  }
  a2 = v68;
  uint64_t v52 = *(OpaqueVTCompressionSession **)(DerivedStorage + 64);
  CFDictionaryRef v53 = (const __CFDictionary *)v48[4];
  outputHandler[0] = MEMORY[0x1E4F143A8];
  outputHandler[1] = 0x40000000;
  outputHandler[2] = __MuxedAlphaEncoder_EncodeMultiImageFrame_block_invoke;
  outputHandler[3] = &unk_1E5785D90;
  outputHandler[4] = &v85;
  outputHandler[5] = object;
  CMTime tags = *a4;
  CMTime duration = *a5;
  uint64_t v54 = VTCompressionSessionEncodeMultiImageFrameWithOutputHandler(v52, v50, &tags, &duration, v53, 0, outputHandler);
  if (v54)
  {
    uint64_t v51 = v54;
    goto LABEL_45;
  }
  dispatch_retain(object);
  CVPixelBufferRef v55 = v81;
  CVPixelBufferRef v56 = (const void *)v81[3];
  if (v56)
  {
    CFRetain(v56);
    CVPixelBufferRef v55 = v81;
    float v57 = (OpaqueCMTaggedBufferGroup *)v81[3];
  }
  else
  {
    float v57 = 0;
  }
  uint64_t v58 = *(OpaqueVTCompressionSession **)(DerivedStorage + 112);
  CFDictionaryRef v59 = (const __CFDictionary *)v55[4];
  v70[0] = MEMORY[0x1E4F143A8];
  v70[1] = 0x40000000;
  v70[2] = __MuxedAlphaEncoder_EncodeMultiImageFrame_block_invoke_2;
  v70[3] = &unk_1E5785DE0;
  v70[4] = &v80;
  v70[5] = &v85;
  v70[8] = DerivedStorage;
  v70[9] = v69;
  v70[10] = v68;
  v70[6] = &v76;
  v70[7] = object;
  CMTime tags = *a4;
  CMTime duration = *a5;
  uint64_t v51 = VTCompressionSessionEncodeMultiImageFrameWithOutputHandler(v58, v57, &tags, &duration, v59, 0, v70);
LABEL_52:
  float16x8_t v60 = (const void *)v86[4];
  if (v60) {
    CFRelease(v60);
  }
  float16x8_t v61 = (const void *)v81[4];
  if (v61) {
    CFRelease(v61);
  }
  float16x8_t v62 = (const void *)v86[3];
  if (v62) {
    CFRelease(v62);
  }
  uint64_t v63 = (const void *)v81[3];
  if (v63) {
    CFRelease(v63);
  }
  if (newCollectionOut) {
    CFRelease(newCollectionOut);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v26) {
    dispatch_release(v26);
  }
  _Block_object_dispose(&v76, 8);
  _Block_object_dispose(&v80, 8);
  _Block_object_dispose(&v85, 8);
  return v51;
}

void alphaencoder_setKeysInListFromDictionaryIfPresent(const __CFDictionary *a1, const void ***a2, uint64_t a3, __CFDictionary *a4)
{
  CFIndex Count = CFDictionaryGetCount(a1);
  if (a3 >= 1)
  {
    do
    {
      uint64_t v9 = **a2;
      CFDictionaryRef Value = CFDictionaryGetValue(a1, v9);
      if (Value)
      {
        --Count;
        CFDictionarySetValue(a4, v9, Value);
      }
      ++a2;
      --a3;
    }
    while (a3);
  }
  if (Count > 0)
  {
    CFDictionaryRef v11 = (const void *)FigCFCopyCompactDescription();
    if (v11)
    {
      CFRelease(v11);
    }
  }
}

uint64_t alphaencoder_validateThatPixelBufferUsesConsistentPremultiplicationMode(uint64_t a1, __CVBuffer *a2)
{
  VTVideoEncoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v4 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E4F249D8], 0);
  if (v4)
  {
    uint64_t v5 = v4;
    if (CFEqual((CFTypeRef)*MEMORY[0x1E4F249E0], v4))
    {
      int v6 = 1;
    }
    else
    {
      if (!CFEqual((CFTypeRef)*MEMORY[0x1E4F249E8], v5))
      {
LABEL_10:
        uint64_t v7 = FigSignalErrorAt();
LABEL_13:
        CFRelease(v5);
        return v7;
      }
      int v6 = 0;
    }
    if (DerivedStorage[41] || DerivedStorage[40])
    {
      if (v6 != DerivedStorage[42]) {
        goto LABEL_10;
      }
    }
    else
    {
      DerivedStorage[42] = v6;
    }
    uint64_t v7 = 0;
    DerivedStorage[41] = 1;
    goto LABEL_13;
  }
  uint64_t v7 = 0;
  DerivedStorage[41] = 1;
  return v7;
}

uint64_t alphaencoder_demuxBaseAndAlpha(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3)
{
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  CVPixelBufferGetPixelFormatType(a2);
  CVPixelBufferGetPixelFormatType(a3);
  uint64_t v7 = 4294954394;
  if (PixelFormatType <= 2016436535)
  {
    if (PixelFormatType != 1982882104 && PixelFormatType != 1983013176)
    {
      int v8 = 1983144248;
      goto LABEL_8;
    }
LABEL_9:
    CVPixelBufferGetWidth(a1);
    CVPixelBufferGetHeight(a1);
    DescriptionWithsigned int PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
    if (DescriptionWithPixelFormatType
      && (Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E4F24EE0])) != 0&& (CFArrayRef v11 = Value, v12 = CFGetTypeID(Value), v12 == CFArrayGetTypeID())&& CFArrayGetCount(v11) > 1)
    {
      CFArrayGetValueAtIndex(v11, 0);
      FigCFDictionaryGetInt32IfPresent();
      CFArrayGetValueAtIndex(v11, 1);
      FigCFDictionaryGetInt32IfPresent();
    }
    else
    {
      uint64_t v14 = FigSignalErrorAt();
      if (v14) {
        return v14;
      }
    }
    return FigSignalErrorAt();
  }
  if (PixelFormatType == 2016436536 || PixelFormatType == 2016698680) {
    goto LABEL_9;
  }
  int v8 = 2016567608;
LABEL_8:
  if (PixelFormatType == v8) {
    goto LABEL_9;
  }
  return v7;
}

void alphaencoder_emitEncodedFrame(uint64_t a1, const void *a2, uint64_t a3, unsigned int a4, opaqueCMSampleBuffer *a5)
{
  VTVideoEncoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  VTEncoderSessionEmitEncodedFrame(*(uint64_t **)(DerivedStorage + 8), a2, a3, a4, a5);
  --*(_DWORD *)(DerivedStorage + 168);
  CFDictionaryRef v10 = *(NSObject **)(DerivedStorage + 160);

  dispatch_group_leave(v10);
}

uint64_t alphaencoder_transferPlane(__CVBuffer *a1, size_t a2, __CVBuffer *a3, size_t a4, uint64_t a5)
{
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, a2);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, a2);
  if (CVPixelBufferGetWidthOfPlane(a3, a4) == WidthOfPlane
    && CVPixelBufferGetHeightOfPlane(a3, a4) == HeightOfPlane
    && (BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, a2),
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, a2),
        uint64_t v14 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, a4),
        size_t v15 = CVPixelBufferGetBytesPerRowOfPlane(a3, a4),
        size_t v16 = WidthOfPlane * a5,
        v16 <= BytesPerRowOfPlane)
    && (size_t v17 = v15, v16 <= v15))
  {
    for (; HeightOfPlane; --HeightOfPlane)
    {
      memcpy(v14, BaseAddressOfPlane, v16);
      BaseAddressOfPlane += BytesPerRowOfPlane;
      v14 += v17;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFArrayRef alphaencoder_getSampleBufferSampleAttachment(opaqueCMSampleBuffer *a1, const void *a2)
{
  CFArrayRef result = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  if (result)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(result, 0);
    return (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, a2);
  }
  return result;
}

uint64_t alphaencoder_createDerivedSampleBuffer(opaqueCMSampleBuffer *a1, opaqueCMSampleBuffer *a2, CMBlockBufferRef theBuffer, const opaqueCMFormatDescription *a4, CMSampleBufferRef *a5)
{
  CMSampleBufferRef sampleBufferOut = 0;
  *(_OWORD *)&timingInfoOut.duration.xpc_object_t value = *MEMORY[0x1E4F1F9F8];
  timingInfoOut.duration.epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  timingInfoOut.CMTime presentationTimeStamp = timingInfoOut.duration;
  timingInfoOut.decodeTimeStamp = timingInfoOut.duration;
  size_t sampleSizeArray = CMBlockBufferGetDataLength(theBuffer);
  uint64_t SampleTimingInfo = CMSampleBufferGetSampleTimingInfo(a1, 0, &timingInfoOut);
  if (SampleTimingInfo) {
    return SampleTimingInfo;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v12 = CMSampleBufferCreateReady((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theBuffer, a4, 1, 1, &timingInfoOut, 1, &sampleSizeArray, &sampleBufferOut);
  CMSampleBufferRef v13 = sampleBufferOut;
  if (v12)
  {
    uint64_t v23 = v12;
  }
  else
  {
    CMPropagateAttachments(a1, sampleBufferOut);
    CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
    if (!SampleAttachmentsArray
      || (CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0),
          CFArrayRef v16 = CMSampleBufferGetSampleAttachmentsArray(sampleBufferOut, 1u),
          size_t v17 = (void *)CFArrayGetValueAtIndex(v16, 0),
          CFDictionaryApplyFunction(ValueAtIndex, (CFDictionaryApplierFunction)alphaencoder_dictionarySetValue, v17),
          (CFArrayRef v18 = CMSampleBufferGetSampleAttachmentsArray(a2, 0)) == 0))
    {
      uint64_t v23 = 0;
      *a5 = sampleBufferOut;
      return v23;
    }
    CFDictionaryRef v19 = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, 0);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFTypeID v21 = Mutable;
      alphaencoder_setKeysInListFromDictionaryIfPresent(v19, (const void ***)kMuxedAlphaEncoderAlphaLayerSampleAttachmentKeyAllowList, 9, Mutable);
      DataBuffer = CMSampleBufferGetDataBuffer(a2);
      CMBlockBufferGetDataLength(DataBuffer);
      FigCFDictionarySetInt32();
      CFDictionarySetValue((CFMutableDictionaryRef)v17, @"AlphaLayerAttachments", v21);
      *a5 = sampleBufferOut;
      CMSampleBufferRef sampleBufferOut = 0;
      CFRelease(v21);
      return 0;
    }
    uint64_t v23 = FigSignalErrorAt();
    CMSampleBufferRef v13 = sampleBufferOut;
  }
  if (v13) {
    CFRelease(v13);
  }
  return v23;
}

void alphaencoder_dictionarySetValue(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t VTPixelBufferAttributesMediatorGetTypeID()
{
  if (VTPixelBufferAttributesMediatorGetTypeID_sRegisterVTPixelBufferAtributesMediatorTypeOnce != -1) {
    dispatch_once_f(&VTPixelBufferAttributesMediatorGetTypeID_sRegisterVTPixelBufferAtributesMediatorTypeOnce, 0, (dispatch_function_t)RegisterVTPixelBufferAtributesMediatorIDType);
  }
  return sVTPixelBufferAtributesMediatorID;
}

uint64_t RegisterVTPixelBufferAtributesMediatorIDType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVTPixelBufferAtributesMediatorID = result;
  return result;
}

uint64_t VTPixelBufferAttributesMediatorCreate(const __CFAllocator *a1, uint64_t *a2)
{
  if (VTPixelBufferAttributesMediatorGetTypeID_sRegisterVTPixelBufferAtributesMediatorTypeOnce != -1) {
    dispatch_once_f(&VTPixelBufferAttributesMediatorGetTypeID_sRegisterVTPixelBufferAtributesMediatorTypeOnce, 0, (dispatch_function_t)RegisterVTPixelBufferAtributesMediatorIDType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v5 = Instance;
    uint64_t v6 = FigSimpleMutexCreate();
    *(void *)(v5 + 16) = v6;
    if (v6
      && (CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]), (*(void *)(v5 + 24) = Mutable) != 0)
      && (CFMutableArrayRef v8 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]), (*(void *)(v5 + 32) = v8) != 0)
      && (CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
          (*(void *)(v5 + 40) = v9) != 0))
    {
      *(unsigned char *)(v5 + 49) = 1;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRegisterForBarrierSupport();
      *a2 = v5;
      return 0;
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
      CFRelease((CFTypeRef)v5);
      return v11;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTPixelBufferAttributesMediatorCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, __CFDictionary **a4)
{
  theDict[3] = *(CFDictionaryRef *)MEMORY[0x1E4F143B8];
  *a4 = 0;
  if (CFEqual(cf1, @"LayersAreSuppressed"))
  {
    MEMORY[0x1997056B0](*(void *)(a1 + 16));
    uint64_t v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    int v8 = *(unsigned __int8 *)(a1 + 48);
LABEL_5:
    if (!v8) {
      uint64_t v7 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    CFMutableDictionaryRef v9 = (void *)*v7;
    if (*v7) {
      CFMutableDictionaryRef v9 = (void *)CFRetain(v9);
    }
    *a4 = (__CFDictionary *)v9;
    MEMORY[0x1997056C0](*(void *)(a1 + 16));
    return 0;
  }
  if (CFEqual(cf1, @"AlwaysVendNonNULLAttributes"))
  {
    MEMORY[0x1997056B0](*(void *)(a1 + 16));
    uint64_t v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    int v8 = *(unsigned __int8 *)(a1 + 49);
    goto LABEL_5;
  }
  if (!CFEqual(cf1, @"MediatedPixelBufferAttributes")) {
    return 4294954396;
  }
  CFDictionaryRef resolvedDictionaryOut = 0;
  CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)a1);
  MEMORY[0x1997056B0](*(void *)(a1 + 16));
  if (vtPixelBufferAttributesMediatorCopyMediatedPixelBufferAttributes_onceToken != -1) {
    dispatch_once_f(&vtPixelBufferAttributesMediatorCopyMediatedPixelBufferAttributes_onceToken, 0, (dispatch_function_t)vtPixelBufferAttributesMediatorCreateCALayerDesiredAttributes);
  }
  if (!vtPixelBufferAttributesMediatorCALayerDesiredAttributes) {
    goto LABEL_91;
  }
  CFArrayRef v13 = *(const __CFArray **)(a1 + 24);
  BOOL v14 = v13 && CFArrayGetCount(v13) >= 1 && *(unsigned char *)(a1 + 48) == 0;
  CFArrayRef v15 = *(const __CFArray **)(a1 + 32);
  if (!v15)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v12, 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFArrayRef v18 = Mutable;
      goto LABEL_37;
    }
LABEL_91:
    uint64_t v10 = FigSignalErrorAt();
    CFArrayRef v18 = 0;
LABEL_92:
    MEMORY[0x1997056C0](*(void *)(a1 + 16));
    goto LABEL_87;
  }
  CFIndex Count = CFArrayGetCount(v15);
  size_t v17 = CFArrayCreateMutable(v12, 0, MEMORY[0x1E4F1D510]);
  if (!v17) {
    goto LABEL_91;
  }
  CFArrayRef v18 = v17;
  if (Count < 1)
  {
LABEL_37:
    BOOL v26 = 0;
LABEL_38:
    if (*(unsigned char *)(a1 + 49) && vtPixelBufferAttributesMediatorCALayerDesiredAttributes) {
      long long v22 = (__CFDictionary *)CFRetain((CFTypeRef)vtPixelBufferAttributesMediatorCALayerDesiredAttributes);
    }
    else {
      long long v22 = 0;
    }
    goto LABEL_84;
  }
  if (v14) {
    CFArrayAppendValue(v17, (const void *)vtPixelBufferAttributesMediatorCALayerDesiredAttributes);
  }
  for (CFIndex i = 0; i != Count; ++i)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
    CFTypeID v21 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), ValueAtIndex);
    CFArrayAppendValue(v18, v21);
  }
  CVPixelBufferCreateResolvedAttributesDictionary(v12, v18, &resolvedDictionaryOut);
  long long v22 = resolvedDictionaryOut;
  if (resolvedDictionaryOut)
  {
    if (!v14)
    {
      BOOL v26 = 0;
      goto LABEL_83;
    }
    CFDictionaryRef v23 = (const __CFDictionary *)*MEMORY[0x1E4F24D08];
    theDict[0] = *(CFDictionaryRef *)MEMORY[0x1E4F24E10];
    theDict[1] = v23;
    theDict[2] = *(CFDictionaryRef *)MEMORY[0x1E4F24CC8];
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v12, 0, resolvedDictionaryOut);
    if (MutableCopy)
    {
      long long v22 = MutableCopy;
      for (uint64_t j = 0; j != 3; ++j)
        CFDictionaryRemoveValue(v22, theDict[j]);
      if (resolvedDictionaryOut) {
        CFRelease(resolvedDictionaryOut);
      }
      BOOL v26 = 0;
      CFDictionaryRef resolvedDictionaryOut = v22;
LABEL_72:
      if (v22) {
        goto LABEL_83;
      }
      goto LABEL_38;
    }
    goto LABEL_94;
  }
  uint64_t v52 = v18;
  CFArrayRemoveAllValues(v18);
  CFAllocatorRef allocator = v12;
  theArray = CFArrayCreateMutable(v12, 0, MEMORY[0x1E4F1D510]);
  if (!theArray)
  {
LABEL_94:
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_92;
  }
  CFIndex v28 = 0;
  int v29 = (const void *)*MEMORY[0x1E4F24D70];
  CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v31 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  BOOL v56 = v14;
  CFAllocatorRef v53 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  key = (void *)*MEMORY[0x1E4F24D70];
  do
  {
    CMTag v32 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v28);
    CFDictionaryRef v33 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v32);
    xpc_object_t value = 0;
    if (!CFDictionaryGetValueIfPresent(v33, v29, (const void **)&value)) {
      goto LABEL_65;
    }
    char v34 = value;
    if (!v14)
    {
      if (value)
      {
        char v34 = CFRetain(value);
        if (v34)
        {
LABEL_60:
          CFTypeID v41 = CFGetTypeID(v34);
          if (v41 == CFArrayGetTypeID())
          {
            v60.length = CFArrayGetCount((CFArrayRef)v34);
            v60.location = 0;
            CFArrayAppendArray(theArray, (CFArrayRef)v34, v60);
          }
          else
          {
            CFTypeID v42 = CFGetTypeID(v34);
            if (v42 == CFNumberGetTypeID()) {
              CFArrayAppendValue(theArray, v34);
            }
          }
        }
      }
      CFRelease(v34);
      goto LABEL_65;
    }
    uint64_t v35 = (const void *)vtPixelBufferAttributesMediatorCALayerDesiredAttributes;
    theDict[0] = 0;
    CFMutableArrayRef v36 = CFArrayCreateMutable(v30, 2, v31);
    if (!v36)
    {
      BOOL v14 = v56;
      goto LABEL_65;
    }
    CFMutableArrayRef v37 = v36;
    CFAllocatorRef v38 = CFDictionaryCreateMutable(v30, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v38)
    {
      CFRelease(v37);
      BOOL v14 = v56;
      int v29 = key;
      goto LABEL_65;
    }
    uint64_t v39 = v38;
    CFDictionaryAddValue(v38, key, v34);
    CFArrayAppendValue(v37, v35);
    CFArrayAppendValue(v37, v39);
    CVPixelBufferCreateResolvedAttributesDictionary(v30, v37, theDict);
    if (theDict[0])
    {
      uint64_t v40 = CFDictionaryGetValue(theDict[0], key);
      char v34 = v40;
      if (v40) {
        CFRetain(v40);
      }
      BOOL v14 = v56;
      CFDictionaryRef v31 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      if (theDict[0]) {
        CFRelease(theDict[0]);
      }
    }
    else
    {
      char v34 = 0;
      BOOL v14 = v56;
      CFDictionaryRef v31 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    }
    CFRelease(v39);
    CFRelease(v37);
    CFAllocatorRef v30 = v53;
    int v29 = key;
    if (v34) {
      goto LABEL_60;
    }
LABEL_65:
    ++v28;
  }
  while (Count != v28);
  BOOL v26 = theArray;
  if (CFArrayGetCount(theArray) <= 0)
  {
    long long v22 = resolvedDictionaryOut;
    CFArrayRef v18 = v52;
    goto LABEL_72;
  }
  CFArrayRef v18 = v52;
  if (v56)
  {
    CFIndex v43 = CFDictionaryGetCount((CFDictionaryRef)vtPixelBufferAttributesMediatorCALayerDesiredAttributes);
    uint64_t v44 = CFDictionaryCreateMutableCopy(allocator, v43 + 1, (CFDictionaryRef)vtPixelBufferAttributesMediatorCALayerDesiredAttributes);
    if (!v44) {
      goto LABEL_93;
    }
LABEL_82:
    long long v22 = v44;
    CFDictionarySetValue(v44, v29, theArray);
LABEL_83:
    CFDictionaryRef resolvedDictionaryOut = 0;
LABEL_84:
    uint64_t v10 = 0;
    *a4 = v22;
  }
  else
  {
    CFIndex v45 = 0;
    while (1)
    {
      CFDictionaryRef v46 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v45);
      CFDictionaryRef v47 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v46);
      CVPixelBufferRef v48 = CFDictionaryCreateMutableCopy(allocator, 0, v47);
      if (!v48) {
        break;
      }
      float v49 = v48;
      CFDictionaryRemoveValue(v48, v29);
      CFArrayAppendValue(v52, v49);
      CFRelease(v49);
      if (Count == ++v45)
      {
        CVPixelBufferCreateResolvedAttributesDictionary(allocator, v52, &resolvedDictionaryOut);
        if (resolvedDictionaryOut)
        {
          float v50 = CFDictionaryCreateMutableCopy(allocator, 0, resolvedDictionaryOut);
          if (!v50) {
            break;
          }
          long long v22 = v50;
          CFDictionarySetValue(v50, v29, theArray);
          if (resolvedDictionaryOut) {
            CFRelease(resolvedDictionaryOut);
          }
          goto LABEL_83;
        }
        uint64_t v44 = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v44) {
          break;
        }
        goto LABEL_82;
      }
    }
LABEL_93:
    uint64_t v10 = FigSignalErrorAt();
  }
  MEMORY[0x1997056C0](*(void *)(a1 + 16));
  if (v26) {
    CFRelease(v26);
  }
LABEL_87:
  if (resolvedDictionaryOut) {
    CFRelease(resolvedDictionaryOut);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v10;
}

uint64_t VTPixelBufferAttributesMediatorSetProperty(uint64_t a1, CFTypeRef cf1, const void *a3)
{
  if (CFEqual(cf1, @"LayersAreSuppressed"))
  {
    if (a3)
    {
      CFTypeID v6 = CFGetTypeID(a3);
      if (v6 == CFBooleanGetTypeID())
      {
        MEMORY[0x1997056B0](*(void *)(a1 + 16));
        *(unsigned char *)(a1 + 48) = CFBooleanGetValue((CFBooleanRef)a3);
LABEL_9:
        MEMORY[0x1997056C0](*(void *)(a1 + 16));
        return 0;
      }
    }
  }
  else
  {
    if (!CFEqual(cf1, @"AlwaysVendNonNULLAttributes")) {
      return 4294954396;
    }
    if (a3)
    {
      CFTypeID v7 = CFGetTypeID(a3);
      if (v7 == CFBooleanGetTypeID())
      {
        MEMORY[0x1997056B0](*(void *)(a1 + 16));
        *(unsigned char *)(a1 + 49) = CFBooleanGetValue((CFBooleanRef)a3);
        goto LABEL_9;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t VTPixelBufferAttributesMediatorNotificationBarrier(uint64_t a1)
{
  uint64_t DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();

  return MEMORY[0x1F40DBCB0](DefaultLocalCenter, a1);
}

uint64_t VTPixelBufferAttributesMediatorSetRequestedPixelBufferAttributesForKey(uint64_t a1, const void *a2, const void *a3)
{
  MEMORY[0x1997056B0](*(void *)(a1 + 16));
  if (a2)
  {
    if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 40), a3)) {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), a3);
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a3, a2);
  }
  MEMORY[0x1997056C0](*(void *)(a1 + 16));
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t VTPixelBufferAttributesMediatorAddLayer(uint64_t a1, const void *a2)
{
  MEMORY[0x1997056B0](*(void *)(a1 + 16));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), a2);
  MEMORY[0x1997056C0](*(void *)(a1 + 16));
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t VTPixelBufferAttributesMediatorRemoveRequestedPixelBufferAttributesForKey(uint64_t a1, const void *a2)
{
  MEMORY[0x1997056B0](*(void *)(a1 + 16));
  CFArrayRef v4 = *(const __CFArray **)(a1 + 32);
  v8.length = CFArrayGetCount(v4);
  v8.location = 0;
  FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v4, v8, a2);
  if (FirstIndexOfValue != -1) {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), FirstIndexOfValue);
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), a2);
  MEMORY[0x1997056C0](*(void *)(a1 + 16));
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t VTPixelBufferAttributesMediatorRemoveLayer(uint64_t a1, const void *a2)
{
  MEMORY[0x1997056B0](*(void *)(a1 + 16));
  CFArrayRef v4 = *(const __CFArray **)(a1 + 24);
  v8.length = CFArrayGetCount(v4);
  v8.location = 0;
  FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v4, v8, a2);
  if (FirstIndexOfValue != -1) {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), FirstIndexOfValue);
  }
  MEMORY[0x1997056C0](*(void *)(a1 + 16));
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

double vtPixelBufferAttributesMediatorInit(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t vtPixelBufferAttributesMediatorFinalize(void *a1)
{
  CFAllocatorRef v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  CFDictionaryRef v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  CFArrayRef v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();

  return MEMORY[0x1F40DBCE0](DefaultLocalCenter, a1);
}

__CFString *vtPixelBufferAttributesMediatorCopyDesc(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  MEMORY[0x1997056B0](*(void *)(a1 + 16));
  if (*(unsigned char *)(a1 + 48)) {
    CFArrayRef v4 = "";
  }
  else {
    CFArrayRef v4 = "not ";
  }
  CFStringAppendFormat(Mutable, 0, @"<VTPixelBufferAttributesMediatorRef %p, layers %ssuppressed", a1, v4);
  CFArrayRef v5 = *(const __CFArray **)(a1 + 24);
  if (v5 && (CFIndex Count = CFArrayGetCount(v5)) != 0)
  {
    uint64_t v7 = Count;
    CFRange v8 = "s";
    if (Count <= 1) {
      CFRange v8 = "";
    }
    CFStringAppendFormat(Mutable, 0, @", %lld layer%s: [", Count, v8);
    if (v7 < 1)
    {
      CFStringRef v10 = @"]";
    }
    else
    {
      CFIndex v9 = 0;
      CFStringRef v10 = @"]";
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v9);
        if (v9) {
          CFAllocatorRef v12 = ", ";
        }
        else {
          CFAllocatorRef v12 = "";
        }
        CFStringAppendFormat(Mutable, 0, @"%s%@", v12, ValueAtIndex);
        ++v9;
      }
      while (v7 != v9);
    }
  }
  else
  {
    CFStringRef v10 = @", no layers";
  }
  CFStringAppend(Mutable, v10);
  CFArrayRef v13 = *(const __CFArray **)(a1 + 32);
  if (v13 && (CFIndex v14 = CFArrayGetCount(v13)) != 0)
  {
    uint64_t v15 = v14;
    CFArrayRef v16 = "s";
    if (v14 <= 1) {
      CFArrayRef v16 = "";
    }
    CFStringAppendFormat(Mutable, 0, @", %lld stakeholder%s: {", v14, v16);
    if (v15 < 1)
    {
      CFStringRef v18 = @"}";
    }
    else
    {
      CFIndex v17 = 0;
      CFStringRef v18 = @"}";
      do
      {
        CFDictionaryRef v19 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v17);
        CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v19);
        uint64_t v20 = FigCFCopyCompactDescription();
        CFTypeID v21 = (const void *)v20;
        if (v17) {
          long long v22 = ", ";
        }
        else {
          long long v22 = "";
        }
        CFStringAppendFormat(Mutable, 0, @"%s%@: %@", v22, v19, v20);
        if (v21) {
          CFRelease(v21);
        }
        ++v17;
      }
      while (v15 != v17);
    }
  }
  else
  {
    CFStringRef v18 = @", no stakeholders";
  }
  CFStringAppend(Mutable, v18);
  CFStringAppend(Mutable, @">");
  MEMORY[0x1997056C0](*(void *)(a1 + 16));
  return Mutable;
}

void vtPixelBufferAttributesMediatorCreateCALayerDesiredAttributes()
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D18], (const void *)*MEMORY[0x1E4F1CFD0]);
  vtPixelBufferAttributesMediatorCALayerDesiredAttributes = (uint64_t)Mutable;
}

__CFString *vtCopyVTMTSRenderPassDescriptorFormattingDescWithTabCount(const void *a1, int a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v4, 0);
  CFTypeID v6 = (void *)MEMORY[0x199706500]();
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFRange v8 = CFStringCreateMutable(v7, 0);
  if (a2 >= 1)
  {
    do
    {
      CFStringAppend(v8, @"\t");
      --a2;
    }
    while (a2);
  }
  CFAllocatorRef v9 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<VTMTSRenderPassDescriptor %p [%p]>{", a1, v9);
  CFStringAppendFormat(Mutable, 0, @"%@}", v8);
  if (v8) {
    CFRelease(v8);
  }
  return Mutable;
}

__CFString *vtCopyVTMTSRenderPassBarrierFormattingDescWithTabCount(const void *a1, int a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v4, 0);
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFAllocatorRef v7 = CFStringCreateMutable(v6, 0);
  if (a2 >= 1)
  {
    do
    {
      CFStringAppend(v7, @"\t");
      --a2;
    }
    while (a2);
  }
  CFAllocatorRef v8 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<VTMTSRenderPassBarrier %p [%p]>{}", a1, v8);
  if (v7) {
    CFRelease(v7);
  }
  return Mutable;
}

uint64_t VTMetalTransferSessionCopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  CFDictionaryRef v3 = (void *)MEMORY[0x199706500]();
  MEMORY[0x199705810](&sCreateSupportedPropertyDictionaryOnce_2, vtMetalTransferSessionCreateSupportedPropertyDictionary);
  if (a2 && sVTMetalTransferSessionSupportedPropertyDictionary)
  {
    uint64_t v4 = 0;
    *a2 = CFRetain((CFTypeRef)sVTMetalTransferSessionSupportedPropertyDictionary);
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  return v4;
}

void vtMetalTransferSessionCreateSupportedPropertyDictionary()
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)MEMORY[0x199706500]();
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  uint64_t v21 = 0;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t v39 = 0;
  keys = @"ReadWriteStatus";
  values = @"ReadWrite";
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    keys = @"PreferRenderKernel";
    *(void *)&long long v23 = @"AllowLowQualityScaling";
    values = v2;
    *(void *)&long long v5 = v2;
    *((void *)&v23 + 1) = @"RequireDeviceRegistryID";
    *(void *)&long long v24 = @"ShouldWaitToComplete";
    *((void *)&v5 + 1) = v2;
    *(void *)&long long v6 = v2;
    *((void *)&v24 + 1) = @"WriteBlackPixelsOutsideDestRect";
    *((void *)&v6 + 1) = v2;
    sVTMetalTransferSessionSupportedPropertyDictionary = (uint64_t)CFDictionaryCreate(v1, (const void **)&keys, (const void **)&values, 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!sVTMetalTransferSessionSupportedPropertyDictionary) {
      FigSignalErrorAt();
    }
    CFRelease(v3);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t VTMetalTransferSessionCopyProperty(const void *a1, const void *a2, uint64_t a3, void *a4)
{
  long long v7 = (void *)MEMORY[0x199706500]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a4 = 0;
  if (a1)
  {
    uint64_t v9 = DerivedStorage;
    if (DerivedStorage)
    {
      CFTypeID v10 = CFGetTypeID(a1);
      if (v10 == VTPixelTransferNodeGetTypeID() && !*(unsigned char *)(v9 + 20))
      {
        if (CFEqual(a2, @"PreferRenderKernel"))
        {
          long long v13 = (const void **)MEMORY[0x1E4F1CFD0];
          int v14 = *(unsigned __int8 *)(v9 + 1352);
        }
        else if (CFEqual(a2, @"AllowLowQualityScaling"))
        {
          long long v13 = (const void **)MEMORY[0x1E4F1CFD0];
          int v14 = *(unsigned __int8 *)(v9 + 1353);
        }
        else
        {
          if (CFEqual(a2, @"RequireDeviceRegistryID"))
          {
            UInt64 = (const void *)FigCFNumberCreateUInt64();
            goto LABEL_16;
          }
          if (CFEqual(a2, @"MostRecentElapsedGPUTime"))
          {
            UInt64 = (const void *)FigCFNumberCreateFloat64();
            goto LABEL_16;
          }
          if (!CFEqual(a2, @"ShouldWaitToComplete"))
          {
            if (!CFEqual(a2, @"WriteBlackPixelsOutsideDestRect"))
            {
              if (CFEqual(a2, @"PQEOTFOpticalScale"))
              {
                UInt64 = *(const void **)(v9 + 1376);
                if (!UInt64) {
                  goto LABEL_16;
                }
              }
              else if (CFEqual(a2, @"PQInvEOTFOpticalScale"))
              {
                UInt64 = *(const void **)(v9 + 1384);
                if (!UInt64) {
                  goto LABEL_16;
                }
              }
              else if (CFEqual(a2, @"HLGOETFOpticalScale"))
              {
                UInt64 = *(const void **)(v9 + 1392);
                if (!UInt64) {
                  goto LABEL_16;
                }
              }
              else if (CFEqual(a2, @"HLGInvOETFOpticalScale"))
              {
                UInt64 = *(const void **)(v9 + 1400);
                if (!UInt64) {
                  goto LABEL_16;
                }
              }
              else
              {
                if (!FigCFEqual())
                {
                  uint64_t v11 = 4294954396;
                  goto LABEL_6;
                }
                UInt64 = *(const void **)(v9 + 1344);
                if (!UInt64) {
                  goto LABEL_16;
                }
              }
              goto LABEL_15;
            }
            long long v13 = (const void **)MEMORY[0x1E4F1CFC8];
            int v14 = *(unsigned __int8 *)(v9 + 1354);
            long long v15 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_12:
            if (!v14) {
              long long v13 = v15;
            }
            UInt64 = *v13;
LABEL_15:
            UInt64 = CFRetain(UInt64);
LABEL_16:
            uint64_t v11 = 0;
            *a4 = UInt64;
            goto LABEL_6;
          }
          long long v13 = (const void **)MEMORY[0x1E4F1CFD0];
          int v14 = *(unsigned __int8 *)(v9 + 1368);
        }
        long long v15 = (const void **)MEMORY[0x1E4F1CFC8];
        goto LABEL_12;
      }
    }
  }
  uint64_t v11 = FigSignalErrorAt();
LABEL_6:
  return v11;
}

uint64_t VTMetalTransferSessionSetProperty(const void *a1, const void *a2, const void *a3)
{
  long long v6 = (void *)MEMORY[0x199706500]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1) {
    goto LABEL_26;
  }
  uint64_t v8 = DerivedStorage;
  CFTypeID v9 = CFGetTypeID(a1);
  uint64_t TypeID = VTPixelTransferNodeGetTypeID();
  uint64_t v11 = 4294954394;
  if (a2 && v9 == TypeID)
  {
    CFTypeID v12 = CFGetTypeID(a2);
    if (v12 == CFStringGetTypeID())
    {
      uint64_t v13 = CMBaseObjectGetDerivedStorage();
      if (FigCFEqual())
      {
        int v14 = (const void **)(v13 + 1432);
LABEL_9:
        CFTypeID v15 = CFStringGetTypeID();
        goto LABEL_10;
      }
      if (FigCFEqual())
      {
        int v14 = (const void **)(v13 + 1440);
        goto LABEL_9;
      }
      if (FigCFEqual())
      {
        int v14 = (const void **)(v13 + 1448);
        CFTypeID v15 = CFDataGetTypeID();
        goto LABEL_10;
      }
      if (FigCFEqual())
      {
        int v14 = (const void **)(v13 + 1456);
        goto LABEL_9;
      }
      if (FigCFEqual())
      {
        int v14 = (const void **)(v13 + 1408);
LABEL_20:
        CFTypeID v15 = CFBooleanGetTypeID();
        goto LABEL_10;
      }
      if (FigCFEqual())
      {
        int v14 = (const void **)(v13 + 1416);
        goto LABEL_20;
      }
      if (FigCFEqual())
      {
        int v14 = (const void **)(v13 + 1424);
        CFTypeID v15 = CFNumberGetTypeID();
LABEL_10:
        if (vtSetPropertyOrArrayOfType(v14, a3, v15, (unsigned char *)(v13 + 64)))
        {
LABEL_11:
          uint64_t v11 = FigSignalErrorAt();
          goto LABEL_76;
        }
        goto LABEL_75;
      }
      if (FigCFEqual())
      {
        if (FigCFEqual())
        {
          uint64_t v11 = 0;
          *(unsigned char *)(v8 + 1352) = 1;
          goto LABEL_76;
        }
        if (!a3 || FigCFEqual())
        {
          uint64_t v11 = 0;
          *(unsigned char *)(v8 + 1352) = 0;
          goto LABEL_76;
        }
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        if (FigCFEqual())
        {
          uint64_t v11 = 0;
          *(unsigned char *)(v8 + 1353) = 1;
          goto LABEL_76;
        }
        if (!a3 || FigCFEqual())
        {
          uint64_t v11 = 0;
          *(unsigned char *)(v8 + 1353) = 0;
          goto LABEL_76;
        }
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        if (FigCFEqual())
        {
          uint64_t v11 = 0;
          *(unsigned char *)(v8 + 1368) = 1;
          goto LABEL_76;
        }
        if (!a3 || FigCFEqual())
        {
          uint64_t v11 = 0;
          *(unsigned char *)(v8 + 1368) = 0;
          goto LABEL_76;
        }
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        if (FigCFEqual())
        {
          uint64_t v11 = 0;
          *(unsigned char *)(v8 + 1354) = 0;
          goto LABEL_76;
        }
        if (!a3 || FigCFEqual())
        {
          uint64_t v11 = 0;
          *(unsigned char *)(v8 + 1354) = 1;
          goto LABEL_76;
        }
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        if (!a3)
        {
          long long v18 = *(const void **)(v8 + 1376);
          if (v18)
          {
            CFRelease(v18);
            uint64_t v11 = 0;
            *(void *)(v8 + 1376) = 0;
            goto LABEL_76;
          }
          goto LABEL_75;
        }
        CFTypeID v16 = CFGetTypeID(a3);
        if (v16 != CFNumberGetTypeID()) {
          goto LABEL_11;
        }
        if (!FigCFEqual())
        {
          uint64_t v11 = *(void *)(v8 + 1376);
          *(void *)(v8 + 1376) = a3;
LABEL_73:
          CFRetain(a3);
          if (!v11) {
            goto LABEL_76;
          }
          CFRelease((CFTypeRef)v11);
        }
      }
      else if (FigCFEqual())
      {
        if (!a3)
        {
          long long v20 = *(const void **)(v8 + 1384);
          if (v20)
          {
            CFRelease(v20);
            uint64_t v11 = 0;
            *(void *)(v8 + 1384) = 0;
            goto LABEL_76;
          }
          goto LABEL_75;
        }
        CFTypeID v17 = CFGetTypeID(a3);
        if (v17 != CFNumberGetTypeID()) {
          goto LABEL_11;
        }
        if (!FigCFEqual())
        {
          uint64_t v11 = *(void *)(v8 + 1384);
          *(void *)(v8 + 1384) = a3;
          goto LABEL_73;
        }
      }
      else if (FigCFEqual())
      {
        if (!a3)
        {
          long long v23 = *(const void **)(v8 + 1392);
          if (v23)
          {
            CFRelease(v23);
            uint64_t v11 = 0;
            *(void *)(v8 + 1392) = 0;
            goto LABEL_76;
          }
          goto LABEL_75;
        }
        CFTypeID v19 = CFGetTypeID(a3);
        if (v19 != CFNumberGetTypeID()) {
          goto LABEL_11;
        }
        if (!FigCFEqual())
        {
          uint64_t v11 = *(void *)(v8 + 1392);
          *(void *)(v8 + 1392) = a3;
          goto LABEL_73;
        }
      }
      else if (FigCFEqual())
      {
        if (!a3)
        {
          long long v25 = *(const void **)(v8 + 1400);
          if (v25)
          {
            CFRelease(v25);
            uint64_t v11 = 0;
            *(void *)(v8 + 1400) = 0;
            goto LABEL_76;
          }
          goto LABEL_75;
        }
        CFTypeID v21 = CFGetTypeID(a3);
        if (v21 != CFNumberGetTypeID()) {
          goto LABEL_11;
        }
        if (!FigCFEqual())
        {
          uint64_t v11 = *(void *)(v8 + 1400);
          *(void *)(v8 + 1400) = a3;
          goto LABEL_73;
        }
      }
      else
      {
        if (!FigCFEqual()) {
          goto LABEL_11;
        }
        if (!a3 || CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1D260]))
        {
          long long v24 = *(const void **)(v8 + 1344);
          if (v24)
          {
            CFRelease(v24);
            uint64_t v11 = 0;
            *(void *)(v8 + 1344) = 0;
            goto LABEL_76;
          }
          goto LABEL_75;
        }
        CFTypeID v26 = CFGetTypeID(a3);
        if (v26 != CFStringGetTypeID()) {
          goto LABEL_11;
        }
        if (!FigCFEqual())
        {
          uint64_t v11 = *(void *)(v8 + 1344);
          *(void *)(v8 + 1344) = a3;
          goto LABEL_73;
        }
      }
LABEL_75:
      uint64_t v11 = 0;
      goto LABEL_76;
    }
LABEL_26:
    uint64_t v11 = 4294954394;
  }
LABEL_76:
  return v11;
}

uint64_t VTMetalTransferSessionCreatePixelBufferDescription(__CVBuffer *a1, __CFDictionary **a2)
{
  return vtMetalTransferSessionCreatePixelBufferDescriptionWithOptions(a1, 0, a2);
}

uint64_t vtMetalTransferSessionCreatePixelBufferDescriptionWithOptions(__CVBuffer *a1, uint64_t a2, __CFDictionary **a3)
{
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a1);
  if (a3)
  {
    if (a1)
    {
      long long v6 = IOSurface;
      long long v32 = a3;
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
      FigCFDictionarySetInt32();
      CVPixelBufferGetWidth(a1);
      FigCFDictionarySetCFIndex();
      CVPixelBufferGetHeight(a1);
      FigCFDictionarySetCFIndex();
      if (FigCFDictionaryGetInt32IfPresent()) {
        FigCFDictionarySetCFIndex();
      }
      if (FigCFDictionaryGetInt32IfPresent()) {
        FigCFDictionarySetCFIndex();
      }
      if (FigCFDictionaryGetInt32IfPresent()) {
        FigCFDictionarySetCFIndex();
      }
      if (FigCFDictionaryGetInt32IfPresent()) {
        FigCFDictionarySetCFIndex();
      }
      CFTypeRef v8 = IOSurfaceCopyValue(v6, (CFStringRef)*MEMORY[0x1E4F2F080]);
      CFTypeID v9 = (const void *)*MEMORY[0x1E4F2F158];
      CFTypeRef cf = v8;
      if (FigCFDictionaryGetBooleanIfPresent()) {
        CFDictionarySetValue(Mutable, v9, (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      CFTypeID v10 = (const void *)*MEMORY[0x1E4F24A90];
      CFTypeRef v11 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A90], 0);
      CFTypeID v12 = (const void *)*MEMORY[0x1E4F24BC8];
      CFTypeRef v13 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
      int v14 = v13;
      if (v11 && v13)
      {
        CFDictionarySetValue(Mutable, v10, v11);
        CFDictionarySetValue(Mutable, v12, v14);
      }
      long long v28 = (void *)v12;
      key = (void *)v10;
      CFTypeID v15 = (const void *)*MEMORY[0x1E4F24A00];
      CFTypeRef v16 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A00], 0);
      if (v16) {
        CFDictionarySetValue(Mutable, v15, v16);
      }
      CFTypeID v17 = (const void *)*MEMORY[0x1E4F24B70];
      CFTypeRef v18 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24B70], 0);
      if (v18) {
        CFDictionarySetValue(Mutable, v17, v18);
      }
      CFTypeID v19 = (const void *)*MEMORY[0x1E4F24C18];
      CFTypeRef v20 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
      if (v20) {
        CFDictionarySetValue(Mutable, v19, v20);
      }
      CFTypeID v21 = (const void *)*MEMORY[0x1E4F249D0];
      CFTypeRef v22 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F249D0], 0);
      if (v22) {
        CFDictionarySetValue(Mutable, v21, v22);
      }
      long long v23 = (const void *)*MEMORY[0x1E4F24E08];
      CFTypeRef v24 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24E08], 0);
      long long v25 = v24;
      BOOL v26 = PixelFormatType == 1651521076 || PixelFormatType == 1647392369;
      if (v26 && v24)
      {
        CFDictionarySetValue(Mutable, v23, v24);
        CFDictionaryRemoveValue(Mutable, v15);
        CFDictionarySetValue(Mutable, key, (const void *)*MEMORY[0x1E4F24AA8]);
        CFDictionarySetValue(Mutable, v28, (const void *)*MEMORY[0x1E4F24BE8]);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24BC0], (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      *long long v32 = Mutable;
      if (cf) {
        CFRelease(cf);
      }
      if (v11) {
        CFRelease(v11);
      }
      if (v14) {
        CFRelease(v14);
      }
      if (v20) {
        CFRelease(v20);
      }
      if (v16) {
        CFRelease(v16);
      }
      if (v18) {
        CFRelease(v18);
      }
      if (v22) {
        CFRelease(v22);
      }
      if (v25) {
        CFRelease(v25);
      }
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTMetalTransferSessionCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)MEMORY[0x199706500]();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  MEMORY[0x199705810](&sReadDebugOverrideAllDefaultsOnce_0, ReadDebugOverrideAllDefaults_0);
  if (a3)
  {
    VTPixelTransferNodeGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  return v5;
}

double ReadDebugOverrideAllDefaults_0()
{
  globalVTMTSDebug = 0uLL;
  *(_DWORD *)((char *)&qword_1EB3B8C18 + 7) = 0;
  qword_1EB3B8C18 = 0;
  *(void *)&double result = 16842753;
  *(_DWORD *)&byte_1EB3B8C23 = 16842753;
  byte_1EB3B8C27 = 0;
  return result;
}

void *checkForDisableWriteCombine(void *result)
{
  if (result)
  {
    objc_msgSend((id)objc_msgSend(result, "vendorName"), "uppercaseString");
    int v1 = FigCFEqual();
    return (void *)((FigCFEqual() | v1) != 0);
  }
  return result;
}

void vtmtsCreateDefaultDevice(void *a1, unsigned char *a2)
{
  id v4 = MTLCreateSystemDefaultDevice();
  id v5 = v4;
  if (a2) {
    *a2 = checkForDisableWriteCombine(v4);
  }
  *a1 = v5;
}

void *vtmtsCacheSupportedPixelformats(void *result, BOOL *a2)
{
  if (result && a2)
  {
    CFDictionaryRef v3 = (void *)[result name];
    BOOL v4 = v3 && ([v3 containsString:@"Intel"] & 1) != 0;
    *a2 = v4;
    MTLPixelFormatGetInfoForDevice();
    a2[2] = (v5 & 4) != 0;
    a2[3] = (v5 & 0x10) != 0;
    a2[4] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[5] = (v5 & 4) != 0;
    a2[6] = (v5 & 0x10) != 0;
    a2[7] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[8] = (v5 & 4) != 0;
    a2[9] = (v5 & 0x10) != 0;
    a2[10] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[11] = (v5 & 4) != 0;
    a2[12] = (v5 & 0x10) != 0;
    a2[13] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[14] = (v5 & 4) != 0;
    a2[15] = (v5 & 0x10) != 0;
    a2[16] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[17] = (v5 & 4) != 0;
    a2[18] = (v5 & 0x10) != 0;
    a2[19] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[20] = (v5 & 4) != 0;
    a2[21] = (v5 & 0x10) != 0;
    a2[22] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[23] = (v5 & 4) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[24] = (v5 & 4) != 0;
    a2[25] = (v5 & 0x10) != 0;
    a2[26] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[27] = (v5 & 4) != 0;
    a2[28] = (v5 & 0x10) != 0;
    a2[29] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[30] = (v5 & 4) != 0;
    a2[31] = (v5 & 0x10) != 0;
    a2[32] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[33] = (v5 & 4) != 0;
    a2[34] = (v5 & 0x10) != 0;
    a2[35] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[36] = (v5 & 4) != 0;
    a2[37] = (v5 & 0x10) != 0;
    a2[38] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[39] = (v5 & 4) != 0;
    a2[40] = (v5 & 0x10) != 0;
    a2[41] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[42] = (v5 & 4) != 0;
    a2[43] = (v5 & 0x10) != 0;
    a2[44] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[45] = (v5 & 4) != 0;
    a2[46] = (v5 & 0x10) != 0;
    a2[47] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[48] = (v5 & 0x10) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[49] = (v5 & 0x10) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[50] = (v5 & 0x10) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[51] = (v5 & 4) != 0;
    a2[52] = (v5 & 0x10) != 0;
    a2[53] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[54] = (v5 & 4) != 0;
    a2[55] = (v5 & 0x10) != 0;
    a2[56] = (v5 & 2) != 0;
    double result = (void *)MTLPixelFormatGetInfoForDevice();
    a2[57] = (v5 & 4) != 0;
    a2[58] = (v5 & 0x10) != 0;
    a2[59] = (v5 & 2) != 0;
  }
  return result;
}

uint64_t vtPixelTransferAppendMetalNodeCallback(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFTypeID v10 = (void *)MEMORY[0x199706500]();
  CFTypeRef cf = 0;
  CFTypeRef v11 = *(CFTypeRef *)(a6 + 176);
  if (v11) {
    CFTypeRef v11 = CFRetain(v11);
  }
  VTSessionRef session = v11;
  unsigned int v12 = *((unsigned __int8 *)a2 + 4) ^ *(unsigned __int8 *)(a1 + 4);
  int v13 = (v12 >> 4) & 1;
  int v14 = (v12 >> 3) & 1;
  int valuePtr = 0;
  int v15 = v12 & 0x18;
  if ((v12 & 4) != 0)
  {
    char v17 = 0;
    if (v15 == 24)
    {
      int v14 = 0;
      int v16 = 90;
    }
    else
    {
      if (!v13)
      {
        int valuePtr = 90;
        int v14 = (v12 & 8) == 0;
        goto LABEL_13;
      }
      int v13 = 0;
      int v14 = 0;
      int v16 = 270;
    }
LABEL_12:
    int valuePtr = v16;
    goto LABEL_13;
  }
  if (v15 == 24)
  {
    char v17 = 0;
    int v13 = 0;
    int v14 = 0;
    int v16 = 180;
    goto LABEL_12;
  }
  char v17 = 1;
LABEL_13:
  long long v35 = 0u;
  long long v36 = 0u;
  if (v11) {
    goto LABEL_16;
  }
  uint64_t CurrentDimensions = VTMetalTransferSessionCreate(0, *(void *)(a6 + 200), (uint64_t)&session);
  if (CurrentDimensions)
  {
LABEL_42:
    uint64_t v30 = CurrentDimensions;
    goto LABEL_43;
  }
  CFTypeRef v11 = session;
  if (session)
  {
LABEL_16:
    if (v17)
    {
      VTSessionSetProperty(v11, @"Rotation", 0);
    }
    else
    {
      CFNumberRef v19 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
      VTSessionSetProperty(session, @"Rotation", v19);
      if (v19) {
        CFRelease(v19);
      }
    }
    CFTypeRef v20 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (v13) {
      CFTypeID v21 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      CFTypeID v21 = 0;
    }
    VTSessionSetProperty(session, @"FlipHorizontalOrientation", v21);
    if (v14) {
      CFTypeRef v22 = v20;
    }
    else {
      CFTypeRef v22 = 0;
    }
    VTSessionSetProperty(session, @"FlipVerticalOrientation", v22);
    if (((*((unsigned __int8 *)a2 + 4) ^ *(unsigned __int8 *)(a1 + 4)) & 2) != 0)
    {
      CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a6 + 160), (const void *)*MEMORY[0x1E4F24A90]);
      CFTypeRef v24 = CFDictionaryGetValue(*(CFDictionaryRef *)(a6 + 160), (const void *)*MEMORY[0x1E4F24BC8]);
      long long v25 = CFDictionaryGetValue(*(CFDictionaryRef *)(a6 + 160), (const void *)*MEMORY[0x1E4F24C18]);
      BOOL v26 = CFDictionaryGetValue(*(CFDictionaryRef *)(a6 + 160), (const void *)*MEMORY[0x1E4F24B70]);
      if (Value) {
        VTSessionSetProperty(session, @"DestinationColorPrimaries", Value);
      }
      if (v24) {
        VTSessionSetProperty(session, @"DestinationTransferFunction", v24);
      }
      if (v25) {
        VTSessionSetProperty(session, @"DestinationYCbCrMatrix", v25);
      }
      if (v26) {
        VTSessionSetProperty(session, @"DestinationICCProfile", v26);
      }
    }
    uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
    uint64_t CurrentDimensions = VTPixelTransferGraphGetCurrentDimensions(a1, (uint64_t)a2, a3, a6, 0, (uint64_t)&v35);
    if (!CurrentDimensions)
    {
      uint64_t CurrentDimensions = VTPixelTransferChainCreatePixelBufferPoolAttributes(*a2, (unint64_t)*(double *)&v36, (unint64_t)*((double *)&v36 + 1), (CFMutableDictionaryRef *)&cf);
      if (!CurrentDimensions)
      {
        long long v28 = *DerivedStorage;
        CFTypeRef v29 = cf;
        *uint64_t DerivedStorage = cf;
        if (v29) {
          CFRetain(v29);
        }
        if (v28) {
          CFRelease(v28);
        }
        uint64_t CurrentDimensions = VTPixelTransferChainAppendNode(*(void *)a6, session);
      }
    }
    goto LABEL_42;
  }
  uint64_t v30 = 0;
LABEL_43:
  if (cf) {
    CFRelease(cf);
  }
  if (session) {
    CFRelease(session);
  }
  return v30;
}

void VTMetalTransferSessionInitializeDestinationArray(void *a1)
{
  CFDictionaryRef v2 = (void *)MEMORY[0x199706500]();
  if (a1 && a1[22])
  {
    CFDictionaryRef v3 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 992, 0);
    a1[23] = v3;
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = *(unsigned int *)&sDstPixelFormatArray[v4];
        uint64_t v7 = a1[22];
        __int16 v10 = 0;
        if (v7)
        {
          uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
          getKernelTypeCapabilities_destination((unsigned char *)(DerivedStorage + 1633), v6, (unsigned char *)&v10 + 1, (char *)&v10);
          if (v10 | HIBYTE(v10))
          {
            uint64_t v9 = a1[23] + 8 * v5;
            *(_DWORD *)uint64_t v9 = v6;
            if (getPixelFormatCharacteristics(v6, (unsigned char *)(v9 + 4), (unsigned char *)(v9 + 5))) {
              ++v5;
            }
          }
        }
        v4 += 4;
      }
      while (v4 != 496);
    }
    else
    {
      uint64_t v5 = 0;
    }
    a1[24] = v5;
  }
}

void VTMetalTransferSessionCleanupDestinationArray(uint64_t a1)
{
  CFDictionaryRef v2 = (void *)MEMORY[0x199706500]();
  if (a1)
  {
    CFDictionaryRef v3 = *(void **)(a1 + 184);
    if (v3) {
      CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3);
    }
  }
}

uint64_t VTPixelTransferSessionGetNextMetalBlitter(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v10 = (void *)MEMORY[0x199706500]();
  if (*(unsigned char *)(a4 + 48) || *(unsigned char *)(a4 + 49))
  {
    unint64_t v11 = *(void *)(a4 + 32);
    unint64_t v12 = *(void *)(a5 + 192);
    if (v11 < v12)
    {
      BOOL v13 = *(void *)(a4 + 40) < 0x40uLL;
      while (!v13)
      {
LABEL_10:
        *(void *)(a4 + 32) = ++v11;
        *(void *)(a4 + 40) = 0;
        BOOL v13 = 1;
        if (v11 >= v12) {
          goto LABEL_11;
        }
      }
      while (1)
      {
        uint64_t v14 = *(void *)(a5 + 184) + 8 * *(void *)(a4 + 32);
        int v15 = *(_DWORD *)v14;
        char v16 = *(unsigned char *)(v14 + 5);
        *(_DWORD *)a2 = v15;
        *(unsigned char *)(a2 + 6) = *(unsigned char *)(*(void *)(a5 + 184) + 8 * *(void *)(a4 + 32) + 4);
        *(unsigned char *)(a2 + 7) = *(unsigned char *)(*(void *)(a5 + 184) + 8 * *(void *)(a4 + 32) + 5);
        char v17 = a1[4] & 0x1F;
        *(unsigned char *)(a2 + 4) = v17;
        uint64_t v18 = *(void *)(a4 + 40);
        if ((v18 & ~(unint64_t)*(unsigned __int8 *)(a5 + 20)) == 0 && (v18 & a1[4]) == 0) {
          break;
        }
        *(void *)(a4 + 40) = v18 + 1;
        if ((unint64_t)(v18 + 1) >= 0x40)
        {
          unint64_t v11 = *(void *)(a4 + 32);
          unint64_t v12 = *(void *)(a5 + 192);
          goto LABEL_10;
        }
      }
      if ((v18 & 1) != 0 && *(unsigned char *)(a4 + 49))
      {
        v17 |= 1u;
        *(unsigned char *)(a2 + 4) = v17;
        uint64_t v18 = *(void *)(a4 + 40);
      }
      if ((v18 & 2) != 0)
      {
        v17 |= 2u;
        *(unsigned char *)(a2 + 4) = v17;
        uint64_t v18 = *(void *)(a4 + 40);
        if ((v18 & 4) == 0)
        {
LABEL_17:
          if ((v18 & 8) == 0) {
            goto LABEL_18;
          }
          goto LABEL_24;
        }
      }
      else if ((v18 & 4) == 0)
      {
        goto LABEL_17;
      }
      v17 |= 4u;
      *(unsigned char *)(a2 + 4) = v17;
      uint64_t v18 = *(void *)(a4 + 40);
      if ((v18 & 8) == 0)
      {
LABEL_18:
        if ((v18 & 0x10) == 0) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
LABEL_24:
      v17 |= 8u;
      *(unsigned char *)(a2 + 4) = v17;
      uint64_t v18 = *(void *)(a4 + 40);
      if ((v18 & 0x10) == 0)
      {
LABEL_20:
        *(void *)(a4 + 40) = v18 + 1;
        if ((v16 & 2) == 0)
        {
          char v20 = 0;
LABEL_32:
          *(unsigned char *)(a2 + 5) = v20;
          *(void *)a3 = vtPixelTransferAppendMetalNodeCallback;
          *(_DWORD *)(a3 + 40) = 2;
          *(int64x2_t *)(a3 + 48) = vdupq_n_s64(0xC8uLL);
          *(unsigned char *)(a3 + 64) = 0;
          uint64_t v19 = 1;
          goto LABEL_33;
        }
        if ((*(unsigned char *)(a5 + 23) & 3) == 1)
        {
          if ((a1[7] & 2) == 0)
          {
            char v20 = 1;
            goto LABEL_32;
          }
          CFTypeID v21 = a1 + 5;
        }
        else
        {
          CFTypeID v21 = (char *)(a5 + 21);
        }
        char v20 = *v21;
        goto LABEL_32;
      }
LABEL_19:
      *(unsigned char *)(a2 + 4) = v17 | 0x10;
      uint64_t v18 = *(void *)(a4 + 40);
      goto LABEL_20;
    }
  }
LABEL_11:
  uint64_t v19 = 0;
  *(_DWORD *)a2 = 0;
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a4 + 32) = 0;
LABEL_33:
  return v19;
}

uint64_t VTMetalTransferSessionConfigureForSourceAndDest(const void *a1, void *a2, void *a3, const __CFDictionary *a4)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  CFTypeRef v8 = (void *)MEMORY[0x199706500]();
  if (a1
    && (CFTypeID v9 = CFGetTypeID(a1), v9 == VTPixelTransferNodeGetTypeID())
    && a2
    && (CFTypeID v10 = CFGetTypeID(a2), v10 == CFDictionaryGetTypeID())
    && a3
    && (CFTypeID v11 = CFGetTypeID(a3), v11 == CFDictionaryGetTypeID())
    && (!a4 || (CFTypeID v12 = CFGetTypeID(a4), v12 == CFDictionaryGetTypeID()))
    && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(unsigned char *)(DerivedStorage + 21)))
  {
    uint64_t v14 = DerivedStorage;
    values[0] = a2;
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    char v16 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    CFArrayRef v17 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 1, MEMORY[0x1E4F1D510]);
    CFTypeID v21 = a3;
    CFArrayRef v18 = CFArrayCreate(v15, (const void **)&v21, 1, v16);
    *(_DWORD *)(v14 + 24) = 1;
    uint64_t v19 = vtMetalTransferSessionConfigureForManySourcesAndManyDests((uint64_t)a1, v17, v18, a4);
    if (v17) {
      CFRelease(v17);
    }
    if (v18) {
      CFRelease(v18);
    }
  }
  else
  {
    uint64_t v19 = FigSignalErrorAt();
  }
  return v19;
}

uint64_t vtMetalTransferSessionConfigureForManySourcesAndManyDests(uint64_t a1, const __CFArray *a2, const __CFArray *a3, const __CFDictionary *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
  {
    uint64_t v14 = 0;
    long long v32 = 0;
    goto LABEL_83;
  }
  CFArrayRef Value = CFDictionaryGetValue(a4, @"SourceAmendments");
  if (!Value
    || (CFTypeID v9 = Value, v10 = CFGetTypeID(Value), v10 != CFArrayGetTypeID())
    && (CFTypeID v11 = CFGetTypeID(v9), v11 != CFDictionaryGetTypeID()))
  {
    uint64_t v14 = 0;
    goto LABEL_37;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 0;
  }
  uint64_t v14 = Mutable;
  if (!a2 || (CFIndex Count = CFArrayGetCount(a2), Count < 1))
  {
    a2 = v14;
    goto LABEL_37;
  }
  CFIndex v16 = Count;
  CFDictionaryRef theDict = a4;
  CFArrayRef v17 = a2;
  uint64_t v69 = (void *)a1;
  CFAllocatorRef allocator = a3;
  for (CFIndex i = 0; i != v16; ++i)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, i);
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v12, 0, ValueAtIndex);
    if (!MutableCopy)
    {
      long long v32 = 0;
      goto LABEL_88;
    }
    CFMutableDictionaryRef v21 = MutableCopy;
    CFTypeID v22 = CFGetTypeID(v9);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFDictionaryRef v24 = (const __CFDictionary *)v9;
    if (v22 != TypeID)
    {
      CFTypeID v25 = CFGetTypeID(v9);
      if (v25 == CFArrayGetTypeID()) {
        CFDictionaryRef v24 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v9, i);
      }
      else {
        CFDictionaryRef v24 = 0;
      }
    }
    CFDictionaryApplyFunction(v24, (CFDictionaryApplierFunction)dictConcatApplier, v21);
    if (!CFDictionaryGetValue(v21, @"FlipHorizontalOrientation"))
    {
      CFArrayRef v26 = *(const __CFArray **)(DerivedStorage + 1408);
      if (v26)
      {
        CFTypeID v27 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 1408));
        if (v27 == CFArrayGetTypeID() && i < CFArrayGetCount(v26)) {
          CFArrayGetValueAtIndex(v26, i);
        }
      }
      FigCFDictionarySetValue();
    }
    if (!CFDictionaryGetValue(v21, @"FlipVerticalOrientation"))
    {
      CFArrayRef v28 = *(const __CFArray **)(DerivedStorage + 1416);
      if (v28)
      {
        CFTypeID v29 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 1416));
        if (v29 == CFArrayGetTypeID() && i < CFArrayGetCount(v28)) {
          CFArrayGetValueAtIndex(v28, i);
        }
      }
      FigCFDictionarySetValue();
    }
    if (!CFDictionaryGetValue(v21, @"Rotation"))
    {
      CFArrayRef v30 = *(const __CFArray **)(DerivedStorage + 1424);
      if (v30)
      {
        CFTypeID v31 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 1424));
        if (v31 == CFArrayGetTypeID() && i < CFArrayGetCount(v30)) {
          CFArrayGetValueAtIndex(v30, i);
        }
      }
      FigCFDictionarySetValue();
    }
    CFArrayAppendValue(v14, v21);
    CFRelease(v21);
  }
  a2 = v14;
  a1 = (uint64_t)v69;
  a3 = allocator;
  a4 = theDict;
LABEL_37:
  CFArrayRef v33 = (const __CFArray *)CFDictionaryGetValue(a4, @"DestinationAmendments");
  if (!v33 || (CFArrayRef v34 = v33, v35 = CFGetTypeID(v33), v35 != CFArrayGetTypeID()))
  {
    long long v32 = 0;
LABEL_80:
    CFBooleanRef v54 = (const __CFBoolean *)CFDictionaryGetValue(a4, @"SetGPUPriorityLow");
    CFBooleanRef v55 = v54;
    if (!v54)
    {
LABEL_84:
      uint64_t v57 = CMBaseObjectGetDerivedStorage();
      if (!*(unsigned char *)(v57 + 64)
        || (uint64_t v58 = v57, !FigCFEqual())
        || !FigCFEqual()
        || *(unsigned __int8 *)(v58 + 1632) != v55)
      {
        CFRange v60 = (void *)MEMORY[0x199706500]();
        uint64_t v59 = vtMetalTransferSessionRebuild(a1, a2, a3, (int)v55);
        if (v14) {
          goto LABEL_91;
        }
        goto LABEL_92;
      }
LABEL_88:
      uint64_t v59 = 0;
      if (v14) {
        goto LABEL_91;
      }
      goto LABEL_92;
    }
    CFTypeID v56 = CFGetTypeID(v54);
    if (v56 == CFBooleanGetTypeID())
    {
      LODWORD(v55) = CFBooleanGetValue(v55);
      goto LABEL_84;
    }
LABEL_83:
    LODWORD(v55) = 0;
    goto LABEL_84;
  }
  CFAllocatorRef allocatora = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v32 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!v32) {
    goto LABEL_88;
  }
  if (!a3 || (CFIndex v36 = CFArrayGetCount(a3), v36 < 1))
  {
    a3 = v32;
    goto LABEL_80;
  }
  CFIndex v37 = v36;
  CFDictionaryRef theDicta = a4;
  CFArrayRef v62 = a2;
  uint64_t v63 = v14;
  CFIndex v38 = 0;
  key = (void *)*MEMORY[0x1E4F24A90];
  uint16x8_t v64 = (void *)*MEMORY[0x1E4F24BC8];
  long long v70 = (void *)*MEMORY[0x1E4F24B70];
  int16x4_t v68 = (void *)*MEMORY[0x1E4F24C18];
  while (1)
  {
    uint64_t v39 = CFArrayGetValueAtIndex(a3, v38);
    uint64_t v40 = CFArrayGetValueAtIndex(v34, v38);
    if (v39)
    {
      CFTypeID v41 = v40;
      CFTypeID v42 = CFGetTypeID(v39);
      if (v42 == CFDictionaryGetTypeID()) {
        break;
      }
    }
LABEL_76:
    if (v37 == ++v38)
    {
      a3 = v32;
      a2 = v62;
      uint64_t v14 = v63;
      a4 = theDicta;
      goto LABEL_80;
    }
  }
  CFMutableDictionaryRef v43 = CFDictionaryCreateMutableCopy(allocatora, 0, (CFDictionaryRef)v39);
  if (v43)
  {
    CFMutableDictionaryRef v44 = v43;
    if (v41)
    {
      CFTypeID v45 = CFGetTypeID(v41);
      if (v45 == CFDictionaryGetTypeID()) {
        CFDictionaryApplyFunction((CFDictionaryRef)v41, (CFDictionaryApplierFunction)dictConcatApplier, v44);
      }
    }
    if (!CFDictionaryGetValue(v44, key) && !CFDictionaryGetValue(v44, v64))
    {
      CFArrayRef v46 = *(const __CFArray **)(DerivedStorage + 1432);
      CFDictionaryRef v47 = *(const void **)(DerivedStorage + 1440);
      if (v46)
      {
        CFTypeID v48 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 1432));
        if (v48 == CFArrayGetTypeID() && v38 < CFArrayGetCount(v46))
        {
          if (v47)
          {
            CFTypeID v49 = CFGetTypeID(v47);
            if (v49 == CFArrayGetTypeID() && v38 < CFArrayGetCount((CFArrayRef)v47))
            {
              CFArrayGetValueAtIndex(v46, v38);
              CFArrayGetValueAtIndex((CFArrayRef)v47, v38);
            }
          }
        }
      }
      if (!FigCFEqual() && !FigCFEqual())
      {
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
      }
    }
    if (!CFDictionaryGetValue(v44, v70))
    {
      CFArrayRef v50 = *(const __CFArray **)(DerivedStorage + 1448);
      if (v50)
      {
        CFTypeID v51 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 1448));
        if (v51 == CFArrayGetTypeID() && v38 < CFArrayGetCount(v50)) {
          CFArrayGetValueAtIndex(v50, v38);
        }
      }
      if (!FigCFEqual()) {
        FigCFDictionarySetValue();
      }
    }
    if (!CFDictionaryGetValue(v44, v68))
    {
      CFArrayRef v52 = *(const __CFArray **)(DerivedStorage + 1456);
      if (v52)
      {
        CFTypeID v53 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 1456));
        if (v53 == CFArrayGetTypeID() && v38 < CFArrayGetCount(v52)) {
          CFArrayGetValueAtIndex(v52, v38);
        }
      }
      if (!FigCFEqual()) {
        FigCFDictionarySetValue();
      }
    }
    CFArrayAppendValue(v32, v44);
    CFRelease(v44);
    goto LABEL_76;
  }
  uint64_t v59 = 0;
  uint64_t v14 = v63;
  if (!v63) {
    goto LABEL_92;
  }
LABEL_91:
  CFRelease(v14);
LABEL_92:
  if (v32) {
    CFRelease(v32);
  }
  return v59;
}

uint64_t VTMetalTransferSessionTransferImageSync(const __CFArray *a1, void *a2, void *a3, const __CFDictionary *a4)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  CFTypeRef v8 = (void *)MEMORY[0x199706500]();
  CFMutableDictionaryRef v21 = a3;
  values[0] = a2;
  if (a1
    && (CFTypeID v9 = CFGetTypeID(a1), v9 == VTPixelTransferNodeGetTypeID())
    && a2
    && (CFTypeID v10 = CFGetTypeID(a2), v10 == CVPixelBufferGetTypeID())
    && a3
    && (CFTypeID v11 = CFGetTypeID(a3), v11 == CVPixelBufferGetTypeID())
    && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(unsigned char *)(DerivedStorage + 21))
    && ((uint64_t v13 = DerivedStorage, !a4) || (v14 = CFGetTypeID(a4), v14 == CFDictionaryGetTypeID())))
  {
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v16 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    CFArrayRef v17 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 1, MEMORY[0x1E4F1D510]);
    CFArrayRef v18 = CFArrayCreate(v15, (const void **)&v21, 1, v16);
    *(_DWORD *)(v13 + 24) = 1;
    uint64_t v19 = vtMetalTransferSessionTransferImageCommonSync(a1, v17, v18, a4);
    if (v17) {
      CFRelease(v17);
    }
    if (v18) {
      CFRelease(v18);
    }
  }
  else
  {
    uint64_t v19 = FigSignalErrorAt();
  }
  return v19;
}

uint64_t vtMetalTransferSessionTransferImageCommonSync(const __CFArray *a1, const __CFArray *a2, const __CFArray *a3, const __CFDictionary *a4)
{
  uint64_t v209 = *MEMORY[0x1E4F143B8];
  CFTypeRef ValueAtIndex = 0;
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (*(unsigned char *)(DerivedStorage + 21) || !*(_DWORD *)(DerivedStorage + 24))
  {
    uint64_t v34 = FigSignalErrorAt();
    CFArrayRef v35 = 0;
    CFIndex v36 = 0;
    goto LABEL_217;
  }
  CFArrayRef theArray = a1;
  if (a4)
  {
    CFArrayRef Value = CFDictionaryGetValue(a4, @"SourceAmendments");
    CFTypeID v11 = CFDictionaryGetValue(a4, @"DestinationAmendments");
  }
  else
  {
    CFArrayRef Value = 0;
    CFTypeID v11 = 0;
  }
  short float v192 = (CFTypeRef *)DerivedStorage;
  CFAllocatorRef allocator = v9;
  if (!a2)
  {
    CFArrayRef v21 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    if (!a3) {
      goto LABEL_38;
    }
LABEL_18:
    CFIndex Count = CFArrayGetCount(a3);
    CFArrayRef v23 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    if (Count < 1)
    {
LABEL_28:
      uint64_t v30 = (uint64_t)theArray;
      CFArrayRef theArraya = v23;
      uint64_t v31 = vtMetalTransferSessionConfigureForManySourcesAndManyDests(v30, v21, v23, a4);
      if (v31) {
        goto LABEL_39;
      }
      if (Count == 1)
      {
        LODWORD(textureOut[0]) = 0;
        *(void *)&long long v193 = 0;
        *(void *)buffer = 0;
        uint64_t DerivedStorage = (uint64_t)v192;
        if (*v192)
        {
          CFRelease(*v192);
          *short float v192 = 0;
        }
        CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(v23, 0);
        FigCFDictionaryGetInt32IfPresent();
        CFAllocatorRef v9 = allocator;
        if (!FigCFDictionaryGetInt64IfPresent()) {
          FigCFDictionaryGetInt64IfPresent();
        }
        if (!FigCFDictionaryGetInt64IfPresent()) {
          FigCFDictionaryGetInt64IfPresent();
        }
        VTPixelTransferChainCreatePixelBufferPoolAttributes(LODWORD(textureOut[0]), v193, *(uint64_t *)buffer, (CFMutableDictionaryRef *)v192);
      }
      else
      {
        uint64_t DerivedStorage = (uint64_t)v192;
        CFAllocatorRef v9 = allocator;
      }
      goto LABEL_44;
    }
    CFIndex v24 = 0;
    while (1)
    {
      if (ValueAtIndex) {
        CFRelease(ValueAtIndex);
      }
      CFTypeID v25 = (__CVBuffer *)CFArrayGetValueAtIndex(a3, v24);
      if (!v11) {
        break;
      }
      CFTypeID v26 = CFGetTypeID(v11);
      CFTypeID TypeID = CFDictionaryGetTypeID();
      CFArrayRef v28 = v11;
      if (v26 != TypeID)
      {
        CFTypeID v29 = CFGetTypeID(v11);
        if (v29 != CFArrayGetTypeID()) {
          break;
        }
        CFArrayRef v28 = CFArrayGetValueAtIndex((CFArrayRef)v11, v24);
      }
LABEL_27:
      vtMetalTransferSessionCreatePixelBufferDescriptionWithOptions(v25, (uint64_t)v28, (__CFDictionary **)&ValueAtIndex);
      CFArrayAppendValue(v23, ValueAtIndex);
      if (Count == ++v24) {
        goto LABEL_28;
      }
    }
    CFArrayRef v28 = 0;
    goto LABEL_27;
  }
  CFIndex v12 = CFArrayGetCount(a2);
  CFMutableArrayRef v13 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
  CFTypeID v14 = v13;
  if (v12 < 1)
  {
    CFArrayRef v21 = v13;
    if (!a3) {
      goto LABEL_38;
    }
    goto LABEL_18;
  }
  for (CFIndex i = 0; i != v12; ++i)
  {
    if (cf) {
      CFRelease(cf);
    }
    CFIndex v16 = (__CVBuffer *)CFArrayGetValueAtIndex(a2, i);
    if (!Value) {
      goto LABEL_15;
    }
    CFTypeID v17 = CFGetTypeID(Value);
    CFTypeID v18 = CFDictionaryGetTypeID();
    uint64_t v19 = Value;
    if (v17 == v18) {
      goto LABEL_16;
    }
    CFTypeID v20 = CFGetTypeID(Value);
    if (v20 == CFArrayGetTypeID()) {
      uint64_t v19 = CFArrayGetValueAtIndex((CFArrayRef)Value, i);
    }
    else {
LABEL_15:
    }
      uint64_t v19 = 0;
LABEL_16:
    vtMetalTransferSessionCreatePixelBufferDescriptionWithOptions(v16, (uint64_t)v19, (__CFDictionary **)&cf);
    CFArrayAppendValue(v14, cf);
  }
  CFArrayRef v21 = v14;
  uint64_t DerivedStorage = (uint64_t)v192;
  CFAllocatorRef v9 = allocator;
  if (a3) {
    goto LABEL_18;
  }
LABEL_38:
  CFArrayRef v32 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
  uint64_t v33 = (uint64_t)theArray;
  CFArrayRef theArraya = v32;
  uint64_t v31 = vtMetalTransferSessionConfigureForManySourcesAndManyDests(v33, v21, v32, a4);
  if (v31)
  {
LABEL_39:
    uint64_t v34 = v31;
    CFArrayRef v35 = 0;
LABEL_40:
    CFIndex v36 = 0;
    goto LABEL_213;
  }
LABEL_44:
  if (*(void *)(DerivedStorage + 1616))
  {
    long long v198 = 0u;
    memset(v199, 0, 28);
    long long v196 = 0u;
    long long v197 = 0u;
    long long v194 = 0u;
    long long v195 = 0u;
    long long v193 = 0u;
    float v173 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    CFArrayRef v38 = *(const __CFArray **)(DerivedStorage + 1616);
    if (v38)
    {
      CFIndex v39 = 0;
      int v40 = 0;
      uint64_t v156 = DerivedStorage + 136;
      short float v157 = (const __CFDictionary **)(DerivedStorage + 128);
      uint64_t v169 = DerivedStorage + 104;
      short float v170 = (const __CFDictionary **)(DerivedStorage + 96);
      short float v171 = (const __CFDictionary **)(DerivedStorage + 120);
      short float v168 = (const __CFDictionary **)(DerivedStorage + 88);
      CFStringRef v166 = (const __CFString *)*MEMORY[0x1E4F24DF0];
      CFStringRef v165 = (const __CFString *)*MEMORY[0x1E4F24DB0];
      CFStringRef v164 = (const __CFString *)*MEMORY[0x1E4F24DC0];
      CFStringRef v163 = (const __CFString *)*MEMORY[0x1E4F24DE0];
      CFStringRef v162 = (const __CFString *)*MEMORY[0x1E4F24DE8];
      CFStringRef v161 = (const __CFString *)*MEMORY[0x1E4F24DD8];
      CFStringRef key = (const __CFString *)*MEMORY[0x1E4F24DD0];
      CFStringRef v159 = (const __CFString *)*MEMORY[0x1E4F24DB8];
      v37.i32[0] = 1101703851;
      __asm { FMOV            V13.2S, #1.0 }
      __int32 v158 = vdup_lane_s32(v37, 0).i32[1];
      CFArrayRef v178 = v21;
      CFArrayRef v174 = a2;
      do
      {
        if (CFArrayGetCount(v38) <= v39) {
          break;
        }
        int v182 = v40;
        CFTypeID v45 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1616), v39);
        if (v45)
        {
          CFArrayRef v46 = v45;
          CFTypeID v47 = CFGetTypeID(v45);
          MEMORY[0x199705810](&VTMTSRenderPassDescriptorGetTypeID_sRegisterVTMTSRenderPassDescriptorOnce, RegisterVTMTSRenderPassDescriptor);
          if (v47 == sVTMTSRenderPassDescriptorID)
          {
            CFIndex v36 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
            uint64_t v180 = [*((id *)v46 + 9) contents];
            CFArrayRef v48 = (const __CFArray *)*((void *)v46 + 25);
            if (v48)
            {
              CFIndex v49 = 0;
              int v50 = 0;
              int v176 = 0;
              int v172 = -1;
              int16x8x2_t v175 = v36;
              do
              {
                if (CFArrayGetCount(v48) <= v49) {
                  break;
                }
                CFTypeID v51 = (MTLPixelFormat *)CFArrayGetValueAtIndex(*((CFArrayRef *)v46 + 25), v49);
                CFArrayRef v52 = v51;
                int v53 = *((_DWORD *)v51 + 4);
                if (v53 == 2)
                {
                  CFBooleanRef v54 = (__CVBuffer *)CFArrayGetValueAtIndex(a3, *((unsigned int *)v51 + 5));
                  CFDictionaryRef v57 = 0;
                  uint64_t v58 = 0;
                  if (v54) {
                    goto LABEL_94;
                  }
                }
                else if (v53 == 1)
                {
                  CFBooleanRef v54 = (__CVBuffer *)CFArrayGetValueAtIndex(a3, *((unsigned int *)v51 + 5));
                  if (CVPixelBufferGetIOSurface(v54) && IOSurfaceGetProhibitUseCount())
                  {
                    _ZF = *((_DWORD *)v46 + 4) == 2;
                    unsigned int v91 = (const __CFDictionary **)v156;
                    float v90 = v157;
                  }
                  else
                  {
                    _ZF = *((_DWORD *)v46 + 4) == 2;
                    unsigned int v91 = (const __CFDictionary **)v169;
                    float v90 = v170;
                  }
                  if (!_ZF) {
                    float v90 = v91;
                  }
                  CFDictionaryRef v57 = *v90;
                  uint64_t v58 = CFArrayGetValueAtIndex(theArraya, *((unsigned int *)v52 + 5));
                  if (v54) {
                    goto LABEL_94;
                  }
                }
                else
                {
                  if (v53)
                  {
                    uint64_t v58 = 0;
                    goto LABEL_116;
                  }
                  CFBooleanRef v54 = (__CVBuffer *)CFArrayGetValueAtIndex(a2, *((unsigned int *)v51 + 5));
                  if (!CVPixelBufferGetIOSurface(v54)
                    || (ProhibitUseCount = IOSurfaceGetProhibitUseCount(), CFTypeID v56 = v171, !ProhibitUseCount))
                  {
                    CFTypeID v56 = v168;
                  }
                  CFDictionaryRef v57 = *v56;
                  uint64_t v58 = CFArrayGetValueAtIndex(v178, *((unsigned int *)v52 + 5));
                  if (v54)
                  {
                    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v54);
                    if (PixelFormatType == 1651521076 || PixelFormatType == 1647392369)
                    {
                      int v184 = v50;
                      CFDictionaryRef v167 = v57;
                      if (v172 != -1 && v172 != *((_DWORD *)v52 + 5))
                      {
                        uint64_t v34 = FigSignalErrorAt();
                        goto LABEL_229;
                      }
                      uint64_t v60 = [*((id *)v46 + 11) contents];
                      uint64_t v61 = v60;
                      if (v60)
                      {
                        vtGetBufferAttachmentInt32IfPresent(v54, v166, (_DWORD *)(v60 + 4));
                        vtGetBufferAttachmentInt32IfPresent(v54, v165, (_DWORD *)v61);
                        vtGetBufferAttachmentFloatIfPresent(v54, v164, (_DWORD *)(v61 + 44));
                        vtGetBufferAttachmentFloatIfPresent(v54, v163, (_DWORD *)(v61 + 56));
                        vtGetBufferAttachmentFloatIfPresent(v54, v162, (_DWORD *)(v61 + 48));
                        vtGetBufferAttachmentFloatIfPresent(v54, v161, (_DWORD *)(v61 + 52));
                        vtGetBufferAttachmentFloatIfPresent(v54, @"ProResRAW_LargestDCQSS", (_DWORD *)(v61 + 60));
                        CFDataRef v62 = (const __CFData *)CVBufferCopyAttachment(v54, key, 0);
                        CFDataRef v63 = v62;
                        if (v62)
                        {
                          CFTypeID v64 = CFGetTypeID(v62);
                          _ZF = v64 == CFDataGetTypeID();
                          CFIndex v36 = v175;
                          if (_ZF)
                          {
                            if (CFDataGetLength(v63) == 32)
                            {
                              v210.location = 0;
                              v210.length = 32;
                              CFDataGetBytes(v63, v210, buffer);
                              long long v65 = v203;
                              *(_OWORD *)(v61 + 92) = *(_OWORD *)buffer;
                              *(_OWORD *)(v61 + 108) = v65;
                            }
                            else
                            {
                              FigSignalErrorAt();
                            }
                          }
                        }
                        uint64_t v66 = 0;
                        uint64_t v67 = textureOut;
                        do
                        {
                          for (uint64_t j = 0; j != 3; ++j)
                          {
                            if (v66 == j) {
                              float v69 = 1.0;
                            }
                            else {
                              float v69 = 0.0;
                            }
                            *((float *)v67 + j) = v69;
                          }
                          ++v66;
                          uint64_t v67 = (CVMetalTextureRef *)((char *)v67 + 12);
                        }
                        while (v66 != 3);
                        float v177 = v58;
                        CFDataRef v70 = (const __CFData *)CVBufferCopyAttachment(v54, v159, 0);
                        CFDataRef v71 = v70;
                        if (v70)
                        {
                          CFTypeID v72 = CFGetTypeID(v70);
                          _ZF = v72 == CFDataGetTypeID();
                          CFIndex v36 = v175;
                          if (_ZF && (unint64_t)CFDataGetLength(v71) >= 0x24)
                          {
                            v211.location = 0;
                            v211.length = 36;
                            CFDataGetBytes(v71, v211, buffer);
                            *(_OWORD *)textureOut = *(_OWORD *)buffer;
                            long long v207 = v203;
                            int v208 = v204;
                          }
                        }
                        uint64_t v73 = v61 + 8;
                        matrixMultiply(setUpProResParametersForPixelBuffer_kXYZToRGB_2020, (float *)textureOut, (float *)(v61 + 8));
                        uint64_t v74 = 0;
                        double v75 = *(float *)(v61 + 44) / 0.9;
                        *(float *)&double v75 = v75;
                        do
                        {
                          for (uint64_t k = 0; k != 12; k += 4)
                            *(float *)(v73 + k) = *(float *)(v73 + k) * *(float *)&v75;
                          ++v74;
                          v73 += 12;
                        }
                        while (v74 != 3);
                        int v77 = *(_DWORD *)v61;
                        int v78 = *(_DWORD *)(v61 + 4) - *(_DWORD *)v61;
                        *(float *)&double v75 = (float)v78;
                        if (!v78) {
                          *(float *)&double v75 = 65535.0;
                        }
                        *(float *)&unsigned int v79 = (float)((float)(*(float *)(v61 + 60) * *(float *)(v61 + 60)) * 5.0) + 21.333;
                        *(float *)(v61 + 64) = 1.0 / *(float *)&v75;
                        *(float *)(v61 + 76) = *(float *)&v79 / 150990000.0;
                        float32x2_t v80 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v75, 0);
                        v80.f32[0] = *(float *)&v75 * 256.0;
                        *(float32x2_t *)(v61 + 80) = vdiv_f32((float32x2_t)__PAIR64__(v158, v79), vmul_n_f32(v80, *(float *)&v75));
                        *(int8x8_t *)(v61 + 68) = vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)(v61 + 48)), (int8x8_t)_D13, (int8x8_t)vdiv_f32(_D13, *(float32x2_t *)(v61 + 48)));
                        *(float *)(v61 + 88) = (float)v77 / *(float *)&v75;
                        if (v71) {
                          CFRelease(v71);
                        }
                        uint64_t DerivedStorage = (uint64_t)v192;
                        uint64_t v58 = v177;
                        if (v63) {
                          CFRelease(v63);
                        }
                      }
                      long long v197 = *(_OWORD *)(v61 + 64);
                      long long v198 = *(_OWORD *)(v61 + 80);
                      v199[0] = *(_OWORD *)(v61 + 96);
                      *(_OWORD *)((char *)v199 + 12) = *(_OWORD *)(v61 + 108);
                      long long v193 = *(_OWORD *)v61;
                      long long v194 = *(_OWORD *)(v61 + 16);
                      long long v195 = *(_OWORD *)(v61 + 32);
                      long long v196 = *(_OWORD *)(v61 + 48);
                      int v172 = *((_DWORD *)v52 + 5);
                      int v176 = 1;
                      CFDictionaryRef v57 = v167;
                      int v50 = v184;
                    }
LABEL_94:
                    int v185 = v50;
                    float32x4_t v81 = v36;
                    uint64_t v82 = (uint64_t)v58;
                    textureOut[0] = 0;
                    size_t v83 = CVPixelBufferGetWidthOfPlane(v54, *((unsigned int *)v52 + 6)) / *((unsigned int *)v52 + 10);
                    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v54, *((unsigned int *)v52 + 6));
                    if (!*((_DWORD *)v52 + 6) && *((_DWORD *)v52 + 14) == 2 && *((_DWORD *)v52 + 10) == 1)
                    {
                      size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(v54, 0);
                      _ZF = WidthOfPlane == CVPixelBufferGetWidth(v54);
                      float32x4_t v81 = v175;
                      if (_ZF) {
                        size_t v83 = CVPixelBufferGetWidthOfPlane(v54, *((unsigned int *)v52 + 6)) >> 1;
                      }
                    }
                    if (*((_DWORD *)v52 + 16) != 1) {
                      setBufferExtents((float *)(v180 + 16 * *((unsigned int *)v52 + 11)), v52, v82, v83, HeightOfPlane, *(unsigned char *)(DerivedStorage + 1354) == 0);
                    }
                    uint64_t v205 = 0;
                    long long v203 = 0u;
                    long long v204 = 0u;
                    *(_OWORD *)buffer = 0u;
                    MTLPixelFormatGetInfoForDevice();
                    IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(v54);
                    size_t BytesPerElementOfPlane = IOSurfaceGetBytesPerElementOfPlane(IOSurface, *((unsigned int *)v52 + 6));
                    if (*((void *)&v203 + 1) > BytesPerElementOfPlane * *((unsigned int *)v52 + 10))
                    {
                      CVPixelBufferGetPixelFormatType(v54);
                      uint64_t v34 = FigSignalErrorAt();
                      CFArrayRef v35 = v173;
                      CFIndex v36 = v81;
LABEL_231:
                      CFArrayRef v21 = v178;
                      goto LABEL_213;
                    }
                    CVMetalTextureCacheCreateTextureFromImage(allocator, *(CVMetalTextureCacheRef *)(DerivedStorage + 48), v54, v57, v52[4], v83, HeightOfPlane, *((unsigned int *)v52 + 6), textureOut);
                    CFIndex v36 = v81;
                    if (!textureOut[0])
                    {
                      uint64_t v34 = 4294954392;
                      CFArrayRef v35 = v173;
                      goto LABEL_231;
                    }
                    CFArrayAppendValue(Mutable, textureOut[0]);
                    id Texture = CVMetalTextureGetTexture(textureOut[0]);
                    CFArrayAppendValue(v81, Texture);
                    if (textureOut[0]) {
                      CFRelease(textureOut[0]);
                    }
                    a2 = v174;
                    int v50 = v185;
                    goto LABEL_125;
                  }
                }
                int v53 = *((_DWORD *)v52 + 4);
LABEL_116:
                if (v53 == 3)
                {
                  CFArrayRef v92 = *(const __CFArray **)(DerivedStorage + 80);
                  if (!v92
                    || (CFIndex v93 = *((unsigned int *)v52 + 5), CFArrayGetCount(v92) <= v93)
                    || (float v94 = (void *)CFArrayGetValueAtIndex(v92, v93)) == 0)
                  {
                    uint64_t v34 = 4294954392;
LABEL_229:
                    CFArrayRef v21 = v178;
                    CFArrayRef v35 = v173;
                    goto LABEL_213;
                  }
                  float v95 = v94;
                  CFArrayAppendValue(v36, v94);
                  setBufferExtents((float *)(v180 + 16 * *((unsigned int *)v52 + 11)), v52, (uint64_t)v58, [v95 width], objc_msgSend(v95, "height"), 0);
                  if (*((_DWORD *)v46 + 508))
                  {
                    uint64_t DerivedStorage = (uint64_t)v192;
                    if (!v176)
                    {
                      float v96 = (_OWORD *)[*((id *)v46 + 11) contents];
                      int v176 = 0;
                      v96[4] = v197;
                      v96[5] = v198;
                      v96[6] = v199[0];
                      *(_OWORD *)((char *)v96 + 108) = *(_OWORD *)((char *)v199 + 12);
                      *float v96 = v193;
                      v96[1] = v194;
                      v96[2] = v195;
                      v96[3] = v196;
                    }
                  }
                  else
                  {
                    uint64_t DerivedStorage = (uint64_t)v192;
                  }
                  CFIndex v36 = v175;
                }
LABEL_125:
                CFIndex v49 = (v50 + 1);
                CFArrayRef v48 = (const __CFArray *)*((void *)v46 + 25);
                ++v50;
              }
              while (v48);
            }
            CFArrayAppendValue(v173, v36);
            CFArrayRef v21 = v178;
            if (v36) {
              CFRelease(v36);
            }
          }
        }
        CFIndex v39 = (v182 + 1);
        CFArrayRef v38 = *(const __CFArray **)(DerivedStorage + 1616);
        int v40 = v182 + 1;
      }
      while (v38);
    }
    CFArrayRef v35 = v173;
  }
  else
  {
    CFArrayRef v35 = 0;
  }
  if (!*(unsigned char *)(DerivedStorage + 64))
  {
    uint64_t v34 = FigSignalErrorAt();
    double v154 = 0.0;
    goto LABEL_212;
  }
  int16x8x2_t v97 = (void *)MEMORY[0x199706500]();
  uint64_t v98 = [*(id *)(DerivedStorage + 1480) commandBuffer];
  if (!v98)
  {
    uint64_t v34 = 4294954392;
LABEL_207:
    goto LABEL_40;
  }
  CFAllocatorRef v99 = (const __CFAllocator *)v98;
  CFArrayRef v100 = *(const __CFArray **)(DerivedStorage + 1616);
  if (!v100)
  {
    double v154 = 0.0;
    goto LABEL_211;
  }
  CFAllocatorRef allocatora = v99;
  CFArrayRef v179 = v21;
  float v181 = v97;
  CFIndex v101 = 0;
  int v102 = 0;
  unsigned int v103 = 0;
  uint64_t v183 = DerivedStorage + 144;
  unint64_t v104 = 0x1EB3B8000uLL;
  while (2)
  {
    if (CFArrayGetCount(v100) > v101)
    {
      int8x16_t v105 = (int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1616), v101);
      if (v105)
      {
        uint16x8_t v106 = v105;
        CFTypeID v107 = CFGetTypeID(v105);
        MEMORY[0x199705810](&VTMTSRenderPassDescriptorGetTypeID_sRegisterVTMTSRenderPassDescriptorOnce, RegisterVTMTSRenderPassDescriptor);
        if (v107 == *(void *)(v104 + 3136))
        {
          uint32x4_t v108 = CFArrayGetValueAtIndex(v35, v103);
          if (*((void *)v106 + 4))
          {
            float16x8_t v109 = *(__CFString **)(DerivedStorage + 1344);
            CFTypeID v110 = CFGetTypeID(v106);
            MEMORY[0x199705810](&VTMTSRenderPassDescriptorGetTypeID_sRegisterVTMTSRenderPassDescriptorOnce, RegisterVTMTSRenderPassDescriptor);
            if (v110 == *(void *)(v104 + 3136))
            {
              uint32x4_t v111 = (const void *)*((void *)v106 + 25);
              if (v111)
              {
                CFTypeID v112 = CFGetTypeID(v111);
                if (v112 == CFArrayGetTypeID())
                {
                  if (v108)
                  {
                    CFTypeID v113 = CFGetTypeID(v108);
                    if (v113 == CFArrayGetTypeID())
                    {
                      CFIndex v114 = CFArrayGetCount((CFArrayRef)v108);
                      CFArrayRef v115 = (const __CFArray *)*((void *)v106 + 25);
                      if (v115) {
                        CFArrayRef v115 = (const __CFArray *)CFArrayGetCount(v115);
                      }
                      if ((const __CFArray *)v114 == v115)
                      {
                        unsigned int v186 = v103;
                        CFArrayRef v116 = v35;
                        float32x4_t v117 = (void *)[MEMORY[0x1E4F352E0] renderPassDescriptor];
                        CFArrayRef v118 = (const __CFArray *)*((void *)v106 + 25);
                        if (v118)
                        {
                          CFIndex v119 = 0;
                          unsigned int v120 = 1;
                          do
                          {
                            if (CFArrayGetCount(v118) <= v119) {
                              break;
                            }
                            float32x4_t v121 = CFArrayGetValueAtIndex(*((CFArrayRef *)v106 + 25), v119);
                            if (v121[16] == 1) {
                              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v117, "colorAttachments"), "objectAtIndexedSubscript:", v121[11]), "setTexture:", CFArrayGetValueAtIndex((CFArrayRef)v108, v119));
                            }
                            CFIndex v119 = v120;
                            CFArrayRef v118 = (const __CFArray *)*((void *)v106 + 25);
                            ++v120;
                          }
                          while (v118);
                        }
                        float32x4_t v122 = (void *)[(__CFAllocator *)allocatora renderCommandEncoderWithDescriptor:v117];
                        [v122 setVertexBuffer:*((void *)v106 + 5) offset:0 atIndex:0];
                        [v122 setVertexBuffer:*((void *)v106 + 6) offset:0 atIndex:1];
                        [v122 setFragmentBuffer:*((void *)v106 + 8) offset:0 atIndex:0];
                        [v122 setFragmentBuffer:*((void *)v106 + 9) offset:0 atIndex:1];
                        [v122 setFragmentBuffer:*((void *)v106 + 10) offset:0 atIndex:2];
                        if (v109) {
                          uint32x4_t v123 = v109;
                        }
                        else {
                          uint32x4_t v123 = @"com.apple.VideoToolbox.VTMetalTransferSession";
                        }
                        [v122 setLabel:v123];
                        CFArrayRef v124 = (const __CFArray *)*((void *)v106 + 25);
                        if (v124)
                        {
                          CFIndex v125 = 0;
                          unsigned int v126 = 1;
                          do
                          {
                            if (CFArrayGetCount(v124) <= v125) {
                              break;
                            }
                            float v127 = (unsigned int *)CFArrayGetValueAtIndex(*((CFArrayRef *)v106 + 25), v125);
                            if (!v127[16])
                            {
                              float v128 = v127;
                              unsigned int v129 = v127[12];
                              float v130 = CFArrayGetValueAtIndex((CFArrayRef)v108, v125);
                              uint64_t v131 = v128[11];
                              if (v129) {
                                [v122 setFragmentTexture:v130 atTextureIndex:v131 samplerState:*(void *)(v183 + 8 * v128[12]) atSamplerIndex:v128[13]];
                              }
                              else {
                                [v122 setFragmentTexture:v130 atIndex:v131];
                              }
                            }
                            CFIndex v125 = v126;
                            CFArrayRef v124 = (const __CFArray *)*((void *)v106 + 25);
                            ++v126;
                          }
                          while (v124);
                        }
                        uint64_t v132 = *((void *)v106 + 256);
                        uint64_t DerivedStorage = (uint64_t)v192;
                        CFArrayRef v35 = v116;
                        if (v132) {
                          [v122 setFragmentTexture:v132 atIndex:v106[77]];
                        }
                        [v122 setRenderPipelineState:*((void *)v106 + 4)];
                        [v122 drawPrimitives:4 vertexStart:0 vertexCount:4];
                        unsigned int v103 = v186;
                        if (!v122) {
                          goto LABEL_196;
                        }
LABEL_195:
                        [v122 endEncoding];
                        goto LABEL_196;
                      }
                    }
                  }
                }
              }
            }
LABEL_199:
            uint64_t v149 = FigSignalErrorAt();
            uint64_t DerivedStorage = (uint64_t)v192;
            if (v149)
            {
              uint64_t v34 = v149;
              CFArrayRef v21 = v179;
              int16x8x2_t v97 = v181;
              goto LABEL_207;
            }
          }
          else
          {
            if (!*((void *)v106 + 7)) {
              goto LABEL_196;
            }
            float v133 = *(__CFString **)(DerivedStorage + 1344);
            CFTypeID v134 = CFGetTypeID(v106);
            MEMORY[0x199705810](&VTMTSRenderPassDescriptorGetTypeID_sRegisterVTMTSRenderPassDescriptorOnce, RegisterVTMTSRenderPassDescriptor);
            if (v134 != sVTMTSRenderPassDescriptorID) {
              goto LABEL_199;
            }
            float v135 = (const void *)*((void *)v106 + 25);
            if (!v135) {
              goto LABEL_199;
            }
            CFTypeID v136 = CFGetTypeID(v135);
            if (v136 != CFArrayGetTypeID()) {
              goto LABEL_199;
            }
            if (!v108) {
              goto LABEL_199;
            }
            CFTypeID v137 = CFGetTypeID(v108);
            if (v137 != CFArrayGetTypeID()) {
              goto LABEL_199;
            }
            CFIndex v138 = CFArrayGetCount((CFArrayRef)v108);
            CFArrayRef v139 = (const __CFArray *)*((void *)v106 + 25);
            if (v139) {
              CFArrayRef v139 = (const __CFArray *)CFArrayGetCount(v139);
            }
            if ((const __CFArray *)v138 != v139) {
              goto LABEL_199;
            }
            float v140 = (void *)[(__CFAllocator *)allocatora computeCommandEncoder];
            float32x4_t v122 = v140;
            if (v133) {
              unsigned int v141 = v133;
            }
            else {
              unsigned int v141 = @"com.apple.VideoToolbox.VTMetalTransferSession";
            }
            [v140 setLabel:v141];
            [v122 setComputePipelineState:*((void *)v106 + 7)];
            [v122 setBuffer:*((void *)v106 + 8) offset:0 atIndex:0];
            [v122 setBuffer:*((void *)v106 + 9) offset:0 atIndex:1];
            [v122 setBuffer:*((void *)v106 + 10) offset:0 atIndex:2];
            [v122 setBuffer:*((void *)v106 + 11) offset:0 atIndex:3];
            CFArrayRef v142 = (const __CFArray *)*((void *)v106 + 25);
            if (v142)
            {
              CFIndex v143 = 0;
              unsigned int v144 = 1;
              do
              {
                if (CFArrayGetCount(v142) <= v143) {
                  break;
                }
                float v145 = (unsigned int *)CFArrayGetValueAtIndex(*((CFArrayRef *)v106 + 25), v143);
                if (!v145[16]) {
                  objc_msgSend(v122, "setTexture:atIndex:", CFArrayGetValueAtIndex((CFArrayRef)v108, v143), v145[11]);
                }
                uint64_t v146 = v145[12];
                if (v146) {
                  [v122 setSamplerState:*(void *)(v183 + 8 * v146) atIndex:v145[13]];
                }
                CFIndex v143 = v144;
                CFArrayRef v142 = (const __CFArray *)*((void *)v106 + 25);
                ++v144;
              }
              while (v142);
            }
            uint64_t v147 = *((void *)v106 + 256);
            if (v147) {
              [v122 setTexture:v147 atIndex:v106[77]];
            }
            uint64_t v148 = *((void *)v106 + 257);
            uint64_t DerivedStorage = (uint64_t)v192;
            if (v148) {
              [v122 setTexture:v148 atIndex:v106[78]];
            }
            long long v193 = *((_OWORD *)v106 + 11);
            *(void *)&long long v194 = *((void *)v106 + 24);
            *(_OWORD *)buffer = *(_OWORD *)(v106 + 38);
            *(void *)&long long v203 = *((void *)v106 + 21);
            [v122 dispatchThreadgroups:&v193 threadsPerThreadgroup:buffer];
            if (v122) {
              goto LABEL_195;
            }
          }
LABEL_196:
          ++v103;
          unint64_t v104 = 0x1EB3B8000;
        }
      }
      CFIndex v101 = (v102 + 1);
      CFArrayRef v100 = *(const __CFArray **)(DerivedStorage + 1616);
      ++v102;
      if (!v100) {
        break;
      }
      continue;
    }
    break;
  }
  if (([(__CFAllocator *)allocatora commitAndWaitUntilSubmitted] & 1) == 0) {
    [(__CFAllocator *)allocatora waitUntilScheduled];
  }
  CFArrayRef v21 = v179;
  int16x8x2_t v97 = v181;
  if (*(unsigned char *)(DerivedStorage + 1368)) {
    [(__CFAllocator *)allocatora waitUntilCompleted];
  }
  [(__CFAllocator *)allocatora GPUEndTime];
  double v151 = v150;
  [(__CFAllocator *)allocatora GPUStartTime];
  double v153 = v152;
  if ([(__CFAllocator *)allocatora error])
  {
    uint64_t v34 = 4294954394;
    goto LABEL_207;
  }
  double v154 = v151 - v153 + 0.0;
LABEL_211:
  uint64_t v34 = 0;
LABEL_212:
  CFIndex v36 = 0;
  *(double *)(DerivedStorage + 1624) = v154;
LABEL_213:
  if (v21) {
    CFRelease(v21);
  }
  if (theArraya) {
    CFRelease(theArraya);
  }
LABEL_217:
  if (cf) {
    CFRelease(cf);
  }
  if (ValueAtIndex) {
    CFRelease(ValueAtIndex);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v34;
}

uint64_t VTMetalTransferSessionCompositeImageSync(const __CFArray *a1, const __CFArray *a2, const void *a3, const __CFDictionary *a4)
{
  v18[1] = *(const void **)MEMORY[0x1E4F143B8];
  CFTypeRef v8 = (void *)MEMORY[0x199706500]();
  v18[0] = a3;
  if (a1
    && (CFTypeID v9 = CFGetTypeID(a1), v9 == VTPixelTransferNodeGetTypeID())
    && a2
    && (CFTypeID v10 = CFGetTypeID(a2), v10 == CFArrayGetTypeID())
    && a3
    && (CFTypeID v11 = CFGetTypeID(a3), v11 == CVPixelBufferGetTypeID())
    && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(unsigned char *)(DerivedStorage + 21))
    && ((uint64_t v13 = DerivedStorage, !a4) || (v14 = CFGetTypeID(a4), v14 == CFDictionaryGetTypeID())))
  {
    CFArrayRef v15 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v18, 1, MEMORY[0x1E4F1D510]);
    *(_DWORD *)(v13 + 24) = 2;
    uint64_t v16 = vtMetalTransferSessionTransferImageCommonSync(a1, a2, v15, a4);
    if (v15) {
      CFRelease(v15);
    }
  }
  else
  {
    uint64_t v16 = FigSignalErrorAt();
  }
  return v16;
}

uint64_t VTMetalTransferSessionGetRequiredAlignment(uint64_t a1, uint64_t *a2)
{
  CFDictionaryRef v3 = (void *)MEMORY[0x199706500]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && (id v5 = *(id *)(DerivedStorage + 1464)) != 0)
  {
    uint64_t v6 = 0;
  }
  else
  {
    id v5 = MTLCreateSystemDefaultDevice();
    uint64_t v6 = v5;
    if (!v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 4294954389;
      goto LABEL_7;
    }
  }
  uint64_t v7 = [v5 iosurfaceTextureAlignmentBytes];
  uint64_t v8 = 0;
LABEL_7:
  *a2 = v7;

  return v8;
}

uint64_t VTMetalTransferSessionStartPerformanceCapture()
{
  return 0;
}

uint64_t VTMetalTransferSessionStopPerformanceCapture()
{
  return 0;
}

uint64_t VTMetalTransferSessionGenerateColorBars(void *a1)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (void *)MEMORY[0x199706500]();
  CFTypeRef cf = 0;
  values[0] = a1;
  if (!a1 || (CFTypeID v3 = CFGetTypeID(a1), TypeID = CVPixelBufferGetTypeID(), v3 != TypeID))
  {
LABEL_12:
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_13;
  }
  uint64_t v5 = VTMetalTransferSessionCreate(TypeID, 0, (uint64_t)&cf);
  if (!v5)
  {
    if (cf)
    {
      CFTypeID v6 = CFGetTypeID(cf);
      if (v6 == VTPixelTransferNodeGetTypeID())
      {
        CFArrayRef v7 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 1, MEMORY[0x1E4F1D510]);
        *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 24) = 1;
        uint64_t v8 = vtMetalTransferSessionTransferImageCommonSync((const __CFArray *)cf, 0, v7, 0);
        goto LABEL_7;
      }
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v8 = v5;
  CFArrayRef v7 = 0;
LABEL_7:
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v8;
}

uint64_t VTMetalTransferSessionCanDoHighQualityScaling(uint64_t a1, int a2)
{
  CFTypeID v3 = (void *)MEMORY[0x199706500]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x199705810](&sReadDebugOverrideAllDefaultsOnce_0, ReadDebugOverrideAllDefaults_0);
  unsigned int v5 = byte_1EB3B8C23;
  if (byte_1EB3B8C23)
  {
    if (vtmtsGetIntermediateScalingFormat((unsigned __int8 *)(DerivedStorage + 1633), a2, 0, 0, 0, 0))uint64_t v6 = 0; {
    else
    }
      uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  return v6;
}

uint64_t vtmtsGetIntermediateScalingFormat(unsigned __int8 *a1, int a2, int *a3, uint64_t a4, int a5, int *a6)
{
  __int16 v26 = 0;
  if (a2 > 1380411456)
  {
    if (a2 > 1983013175)
    {
      if (a2 > 2019964015)
      {
        if (a2 > 2037741157)
        {
          if (a2 > 2084075055)
          {
            if (a2 <= 2088265263)
            {
              if (a2 != 2084075056)
              {
                int v10 = 2084718401;
                goto LABEL_159;
              }
              goto LABEL_124;
            }
            if (a2 == 2088265264) {
              goto LABEL_226;
            }
            int v16 = 2088269360;
            goto LABEL_219;
          }
          if (a2 == 2037741158) {
            goto LABEL_167;
          }
          if (a2 == 2037741171) {
            goto LABEL_172;
          }
          int v11 = 2084070960;
LABEL_187:
          if (a2 != v11) {
            goto LABEL_321;
          }
          goto LABEL_188;
        }
        if (a2 <= 2021078067)
        {
          if (a2 == 2019964016) {
            goto LABEL_180;
          }
          if (a2 == 2021077552)
          {
            if (a4)
            {
              *(_OWORD *)a4 = xmmword_193E805E0;
              *(void *)(a4 + 16) = 0;
              *(void *)(a4 + 24) = 0;
            }
            if (!a3 || a5 != 1) {
              goto LABEL_317;
            }
            int v21 = 1114112;
            int v22 = 2019963440;
LABEL_274:
            int v13 = v22 | v21;
            goto LABEL_316;
          }
          if (a2 != 2021077554) {
            goto LABEL_321;
          }
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_193E805E0;
            *(void *)(a4 + 16) = 0;
            *(void *)(a4 + 24) = 0;
          }
          if (a3 && a5 == 1)
          {
            int v13 = 2021077554;
LABEL_316:
            *a3 = v13;
          }
LABEL_317:
          uint64_t result = 0;
          if (!a6) {
            return result;
          }
          int v25 = 1;
          goto LABEL_319;
        }
        if (a2 == 2021078068 || a2 == 2021078128)
        {
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_193E805E0;
            *(void *)(a4 + 16) = 0;
            *(void *)(a4 + 24) = 0;
          }
          if (!a3) {
            goto LABEL_317;
          }
          int v13 = 2021078068;
          goto LABEL_316;
        }
        if (a2 != 2033463606) {
          goto LABEL_321;
        }
LABEL_149:
        if (a4)
        {
          *(void *)a4 = 110;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          *(void *)(a4 + 24) = 0;
        }
        if (!a3) {
          goto LABEL_309;
        }
        int v17 = 2033463606;
        goto LABEL_308;
      }
      if (a2 <= 2016687155)
      {
        if (a2 <= 2016567666)
        {
          if (a2 == 1983013176)
          {
            if (a4)
            {
              *(_OWORD *)a4 = xmmword_193E805E0;
              *(_OWORD *)(a4 + 16) = xmmword_193E80610;
            }
            if (!a3 || a5 != 1) {
              goto LABEL_317;
            }
            int v13 = 1983013176;
            goto LABEL_316;
          }
          if (a2 == 1983144248)
          {
            if (a4)
            {
              *(_OWORD *)a4 = xmmword_193E805E0;
              *(_OWORD *)(a4 + 16) = xmmword_193E80610;
            }
            if (!a3) {
              goto LABEL_317;
            }
            int v13 = 1983144248;
            goto LABEL_316;
          }
          int v10 = 1999843442;
          goto LABEL_159;
        }
        if (a2 == 2016567667)
        {
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_193E805E0;
            *(_OWORD *)(a4 + 16) = xmmword_193E80610;
          }
          if (!a3 || a5 != 1) {
            goto LABEL_317;
          }
          int v13 = 2016567667;
          goto LABEL_316;
        }
        if (a2 == 2016686640) {
          goto LABEL_221;
        }
        if (a2 != 2016686642) {
          goto LABEL_321;
        }
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_193E805E0;
          *(void *)(a4 + 16) = 0;
          *(void *)(a4 + 24) = 0;
        }
        if (!a3 || a5 != 1) {
          goto LABEL_317;
        }
        int v18 = 2016686640;
LABEL_303:
        int v13 = v18 | 2;
        goto LABEL_316;
      }
      if (a2 > 2019963439)
      {
        if (a2 == 2019963440)
        {
LABEL_227:
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_193E805E0;
            *(void *)(a4 + 16) = 0;
            *(void *)(a4 + 24) = 0;
          }
          if (!a3 || a5 != 1) {
            goto LABEL_317;
          }
          int v13 = 2019963440;
          goto LABEL_316;
        }
        if (a2 != 2019963442)
        {
          if (a2 != 2019963956) {
            goto LABEL_321;
          }
          goto LABEL_180;
        }
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_193E805E0;
          *(void *)(a4 + 16) = 0;
          *(void *)(a4 + 24) = 0;
        }
        if (!a3 || a5 != 1) {
          goto LABEL_317;
        }
        int v18 = 2019963440;
        goto LABEL_303;
      }
      if (a2 == 2016687156 || a2 == 2016687216)
      {
LABEL_202:
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_193E805E0;
          *(void *)(a4 + 16) = 0;
          *(void *)(a4 + 24) = 0;
        }
        if (!a3) {
          goto LABEL_317;
        }
        int v23 = 2016686640;
        goto LABEL_279;
      }
      if (a2 != 2016698739) {
        goto LABEL_321;
      }
      if (a4)
      {
        *(_OWORD *)a4 = xmmword_193E805E0;
        *(_OWORD *)(a4 + 16) = xmmword_193E80610;
      }
      if (!a3) {
        goto LABEL_309;
      }
      int v17 = 2016698739;
LABEL_308:
      *a3 = v17;
      goto LABEL_309;
    }
    if (a2 <= 1932681586)
    {
      if (a2 > 1751528499)
      {
        if (a2 <= 1882468911)
        {
          if (a2 != 1751528500)
          {
            if (a2 != 1815162994)
            {
              int v15 = 1815491698;
              goto LABEL_212;
            }
            goto LABEL_160;
          }
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_193E805E0;
            *(void *)(a4 + 16) = 0;
            *(void *)(a4 + 24) = 0;
          }
          if (!a3) {
            goto LABEL_317;
          }
          int v23 = 1751527984;
          goto LABEL_279;
        }
        if (a2 == 1882468912) {
          goto LABEL_220;
        }
        if (a2 == 1885745712) {
          goto LABEL_226;
        }
        int v10 = 1915892016;
        goto LABEL_159;
      }
      if (a2 > 1651521075)
      {
        if (a2 != 1651521076)
        {
          if (a2 == 1751527984)
          {
            if (a4)
            {
              *(_OWORD *)a4 = xmmword_193E805E0;
              *(void *)(a4 + 16) = 0;
              *(void *)(a4 + 24) = 0;
            }
            if (!a3 || a5 != 1) {
              goto LABEL_317;
            }
            int v13 = 1751527984;
            goto LABEL_316;
          }
          if (a2 != 1751527986) {
            goto LABEL_321;
          }
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_193E805E0;
            *(void *)(a4 + 16) = 0;
            *(void *)(a4 + 24) = 0;
          }
          if (!a3 || a5 != 1) {
            goto LABEL_317;
          }
          int v18 = 1751527984;
          goto LABEL_303;
        }
      }
      else
      {
        if (a2 == 1380411457) {
          goto LABEL_160;
        }
        if (a2 != 1647392369)
        {
          int v10 = 1647534392;
          goto LABEL_159;
        }
      }
      if (a4)
      {
        *(void *)a4 = 115;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)(a4 + 24) = 0;
      }
      if (!a3) {
        goto LABEL_309;
      }
      int v17 = 1380411457;
      goto LABEL_308;
    }
    if (a2 > 1937125937)
    {
      if (a2 <= 1949589874)
      {
        if (a2 != 1937125938)
        {
          if (a2 == 1937126452)
          {
            if (a4)
            {
              *(_OWORD *)a4 = xmmword_193E805F0;
              *(void *)(a4 + 16) = 0;
              *(void *)(a4 + 24) = 0;
            }
            if (!a3) {
              goto LABEL_309;
            }
            int v17 = 1937126452;
            goto LABEL_308;
          }
          if (a2 != 1949458803) {
            goto LABEL_321;
          }
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_193E805F0;
            *(_OWORD *)(a4 + 16) = xmmword_193E80600;
          }
          if (!a3 || a5 != 1) {
            goto LABEL_309;
          }
          int v17 = 1949458803;
          goto LABEL_308;
        }
LABEL_197:
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_193E805F0;
          *(void *)(a4 + 16) = 0;
          *(void *)(a4 + 24) = 0;
        }
        if (!a3 || a5 != 1) {
          goto LABEL_309;
        }
        int v17 = 1937125938;
        goto LABEL_308;
      }
      if (a2 == 1949589875)
      {
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_193E805F0;
          *(_OWORD *)(a4 + 16) = xmmword_193E80600;
        }
        if (!a3) {
          goto LABEL_309;
        }
        int v17 = 1949589875;
        goto LABEL_308;
      }
      if (a2 == 1982882104)
      {
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_193E805E0;
          *(_OWORD *)(a4 + 16) = xmmword_193E80610;
        }
        if (!a3 || a5 != 1) {
          goto LABEL_317;
        }
        int v13 = 1982882104;
        goto LABEL_316;
      }
      int v20 = 1983000886;
    }
    else
    {
      if (a2 <= 1936077361)
      {
        if (a2 == 1932681587)
        {
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_193E805F0;
            *(_OWORD *)(a4 + 16) = xmmword_193E80600;
          }
          if (!a3 || a5 != 1) {
            goto LABEL_309;
          }
          int v17 = 1932681587;
          goto LABEL_308;
        }
        if (a2 == 1932812659) {
          goto LABEL_149;
        }
        if (a2 != 1936077360) {
          goto LABEL_321;
        }
LABEL_237:
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_193E805F0;
          *(void *)(a4 + 16) = 0;
          *(void *)(a4 + 24) = 0;
        }
        if (!a3 || a5 != 1) {
          goto LABEL_309;
        }
        int v17 = 1936077362;
        goto LABEL_308;
      }
      if (a2 == 1936077362) {
        goto LABEL_237;
      }
      if (a2 == 1936077876)
      {
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_193E805F0;
          *(void *)(a4 + 16) = 0;
          *(void *)(a4 + 24) = 0;
        }
        if (!a3) {
          goto LABEL_309;
        }
        int v17 = 1936077876;
        goto LABEL_308;
      }
      int v20 = 1937125936;
    }
    if (a2 != v20) {
      goto LABEL_321;
    }
    goto LABEL_197;
  }
  if (a2 <= 758674991)
  {
    if (a2 <= 642527287)
    {
      if (a2 <= 641230385)
      {
        if (a2 <= 590902831)
        {
          if (a2 == 32) {
            goto LABEL_160;
          }
          if (a2 == 40) {
            goto LABEL_102;
          }
          int v11 = 590898736;
          goto LABEL_187;
        }
        if (a2 == 590902832) {
          goto LABEL_124;
        }
        if (a2 != 640955504)
        {
          int v11 = 641230384;
          goto LABEL_187;
        }
        goto LABEL_202;
      }
      if (a2 <= 641234481)
      {
        if (a2 == 641230386) {
          goto LABEL_167;
        }
        if (a2 == 641230388) {
          goto LABEL_242;
        }
        int v14 = 641234480;
LABEL_123:
        if (a2 != v14) {
          goto LABEL_321;
        }
        goto LABEL_124;
      }
      if (a2 == 641234482) {
        goto LABEL_172;
      }
      if (a2 == 641234484) {
        goto LABEL_250;
      }
      int v10 = 641877825;
LABEL_159:
      if (a2 != v10) {
        goto LABEL_321;
      }
      goto LABEL_160;
    }
    if (a2 <= 644232303)
    {
      if (a2 <= 642527541)
      {
        if (a2 != 642527288 && a2 != 642527336)
        {
          int v12 = 642527536;
          goto LABEL_101;
        }
        goto LABEL_102;
      }
      if (a2 == 642527542) {
        goto LABEL_206;
      }
      if (a2 != 642934849)
      {
        int v10 = 643969848;
        goto LABEL_159;
      }
      goto LABEL_160;
    }
    if (a2 > 645424687)
    {
      if (a2 == 645424688) {
        goto LABEL_226;
      }
      if (a2 == 645428784) {
        goto LABEL_220;
      }
      int v11 = 758670896;
      goto LABEL_187;
    }
    if (a2 != 644232304)
    {
      if (a2 != 644624754)
      {
        int v10 = 645346162;
        goto LABEL_159;
      }
      goto LABEL_160;
    }
LABEL_180:
    if (a4)
    {
      *(_OWORD *)a4 = xmmword_193E805E0;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 24) = 0;
    }
    if (!a3) {
      goto LABEL_317;
    }
    int v23 = 2019963440;
LABEL_279:
    int v13 = v23 + 516;
    goto LABEL_316;
  }
  if (a2 <= 875704437)
  {
    if (a2 <= 792872768)
    {
      if (a2 <= 762869295)
      {
        if (a2 != 758674992)
        {
          if (a2 != 759318337)
          {
            if (a2 != 762865200) {
              goto LABEL_321;
            }
LABEL_226:
            getKernelTypeCapabilities_source(a1, a2, (char *)&v26 + 1, (char *)&v26);
            if ((_BYTE)v26) {
              goto LABEL_227;
            }
            return 4294954391;
          }
LABEL_160:
          if (a4)
          {
            *(void *)a4 = 115;
            *(void *)(a4 + 8) = 0;
            *(void *)(a4 + 16) = 0;
            *(void *)(a4 + 24) = 0;
          }
          if (!a3) {
            goto LABEL_317;
          }
          int v13 = 1380411457;
          goto LABEL_316;
        }
LABEL_124:
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_193E805E0;
          *(void *)(a4 + 16) = 0;
          *(void *)(a4 + 24) = 0;
        }
        if (!a3 || a5 != 1) {
          goto LABEL_317;
        }
        int v19 = 875704422;
        goto LABEL_254;
      }
      if (a2 != 762869296)
      {
        if (a2 != 792225328)
        {
          int v14 = 792229424;
          goto LABEL_123;
        }
LABEL_188:
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_193E805E0;
          *(void *)(a4 + 16) = 0;
          *(void *)(a4 + 24) = 0;
        }
        if (!a3 || a5 != 1) {
          goto LABEL_317;
        }
        int v13 = 875704422;
        goto LABEL_316;
      }
      goto LABEL_220;
    }
    if (a2 <= 846624101)
    {
      if (a2 == 792872769) {
        goto LABEL_160;
      }
      if (a2 == 796419632) {
        goto LABEL_226;
      }
      int v16 = 796423728;
LABEL_219:
      if (a2 != v16) {
        goto LABEL_321;
      }
LABEL_220:
      getKernelTypeCapabilities_source(a1, a2, (char *)&v26 + 1, (char *)&v26);
      if (!(_BYTE)v26) {
        return 4294954391;
      }
LABEL_221:
      if (a4)
      {
        *(_OWORD *)a4 = xmmword_193E805E0;
        *(void *)(a4 + 16) = 0;
        *(void *)(a4 + 24) = 0;
      }
      if (!a3 || a5 != 1) {
        goto LABEL_317;
      }
      int v13 = 2016686640;
      goto LABEL_316;
    }
    if (a2 == 846624102) {
      goto LABEL_167;
    }
    if (a2 == 846624121) {
      goto LABEL_172;
    }
    int v11 = 875704422;
    goto LABEL_187;
  }
  if (a2 > 1278226487)
  {
    if (a2 > 1278226735)
    {
      if (a2 <= 1378955370)
      {
        if (a2 != 1278226736)
        {
          if (a2 != 1278226742) {
            goto LABEL_321;
          }
          goto LABEL_206;
        }
        goto LABEL_102;
      }
      if (a2 != 1378955371)
      {
        int v15 = 1380410945;
LABEL_212:
        if (a2 != v15) {
          goto LABEL_321;
        }
        if (a4)
        {
          *(void *)a4 = 125;
          *(void *)(a4 + 8) = 0;
          *(void *)(a4 + 16) = 0;
          *(void *)(a4 + 24) = 0;
        }
        if (a3)
        {
          int v17 = 1380410945;
          goto LABEL_308;
        }
LABEL_309:
        uint64_t result = 0;
        if (!a6) {
          return result;
        }
        int v25 = 2;
        goto LABEL_319;
      }
      goto LABEL_160;
    }
    if (a2 != 1278226488)
    {
      if (a2 != 1278226534)
      {
        int v12 = 1278226536;
LABEL_101:
        if (a2 != v12) {
          goto LABEL_321;
        }
        goto LABEL_102;
      }
LABEL_206:
      if (a4)
      {
        *(void *)a4 = 55;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)(a4 + 24) = 0;
      }
      if (!a3) {
        goto LABEL_309;
      }
      int v17 = 1278226534;
      goto LABEL_308;
    }
LABEL_102:
    if (a4)
    {
      *(void *)a4 = 25;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 24) = 0;
    }
    if (!a3) {
      goto LABEL_317;
    }
    int v13 = 1278226536;
    goto LABEL_316;
  }
  if (a2 > 875836517)
  {
    if (a2 != 875836518)
    {
      if (a2 != 875836534)
      {
        int v10 = 1111970369;
        goto LABEL_159;
      }
LABEL_250:
      if (a4)
      {
        *(_OWORD *)a4 = xmmword_193E805E0;
        *(void *)(a4 + 16) = 0;
        *(void *)(a4 + 24) = 0;
      }
      if (!a3) {
        goto LABEL_317;
      }
      int v19 = 875836518;
LABEL_254:
      int v13 = v19 | 0x10;
      goto LABEL_316;
    }
LABEL_242:
    if (a4)
    {
      *(_OWORD *)a4 = xmmword_193E805E0;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 24) = 0;
    }
    if (!a3) {
      goto LABEL_317;
    }
    int v13 = 875836518;
    goto LABEL_316;
  }
  switch(a2)
  {
    case 875704438:
      goto LABEL_124;
    case 875704934:
LABEL_167:
      if (a4)
      {
        *(_OWORD *)a4 = xmmword_193E805E0;
        *(void *)(a4 + 16) = 0;
        *(void *)(a4 + 24) = 0;
      }
      if (!a3 || a5 != 1) {
        goto LABEL_317;
      }
      int v13 = 875704934;
      goto LABEL_316;
    case 875704950:
LABEL_172:
      if (a4)
      {
        *(_OWORD *)a4 = xmmword_193E805E0;
        *(void *)(a4 + 16) = 0;
        *(void *)(a4 + 24) = 0;
      }
      if (!a3 || a5 != 1) {
        goto LABEL_317;
      }
      int v21 = 528;
      int v22 = 875704422;
      goto LABEL_274;
  }
LABEL_321:
  if (a4)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  if (a3) {
    *a3 = 0;
  }
  uint64_t result = 4294954391;
  if (a6)
  {
    int v25 = 0;
LABEL_319:
    *a6 = v25;
  }
  return result;
}

BOOL VTMetalTransferSessionCanAcceptSource1xWithSession(uint64_t a1, int a2)
{
  uint64_t v4 = (void *)MEMORY[0x199706500]();
  __int16 v8 = 0;
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    getKernelTypeCapabilities_source((unsigned __int8 *)(DerivedStorage + 1633), a2, (char *)&v8 + 1, (char *)&v8);
    BOOL v6 = (v8 | HIBYTE(v8)) != 0;
  }
  else
  {
    BOOL v6 = 0;
  }
  return v6;
}

unsigned __int8 *getKernelTypeCapabilities_source(unsigned __int8 *result, int a2, char *a3, char *a4)
{
  if (a2 > 1647534391)
  {
    if (a2 > 1953903151)
    {
      if (a2 > 2019964015)
      {
        if (a2 > 2037741170)
        {
          if (a2 > 2088265263)
          {
            if (a2 > 2088269359)
            {
              if (a2 == 2088269360) {
                goto LABEL_203;
              }
              unsigned __int16 v24 = 30258;
            }
            else
            {
              if (a2 == 2088265264) {
                goto LABEL_203;
              }
              unsigned __int16 v24 = 26162;
            }
            int v19 = v24 | 0x7C780000;
            goto LABEL_229;
          }
          if (a2 > 2084075055)
          {
            if (a2 == 2084075056) {
              goto LABEL_183;
            }
            int v12 = 2084718401;
LABEL_172:
            if (a2 != v12) {
              return result;
            }
            goto LABEL_196;
          }
          if (a2 != 2037741171)
          {
            int v4 = 2084070960;
            goto LABEL_182;
          }
        }
        else
        {
          if (a2 <= 2021078127)
          {
            if (a2 > 2021077553)
            {
              if (a2 == 2021077554) {
                goto LABEL_219;
              }
              unsigned __int16 v9 = 13364;
            }
            else
            {
              if (a2 == 2019964016) {
                goto LABEL_177;
              }
              unsigned __int16 v9 = 12848;
            }
            int v5 = v9 | 0x78770000;
            goto LABEL_218;
          }
          if (a2 <= 2033463605)
          {
            if (a2 != 2021078128)
            {
              if (a2 != 2033463352) {
                return result;
              }
              char v18 = result[27];
              goto LABEL_231;
            }
            goto LABEL_177;
          }
          if (a2 == 2033463606)
          {
LABEL_225:
            char v18 = result[33];
            goto LABEL_231;
          }
          if (a2 != 2037741158) {
            return result;
          }
        }
        char v18 = result[42];
        goto LABEL_231;
      }
      if (a2 <= 2016686639)
      {
        if (a2 > 1983013175)
        {
          if (a2 <= 1999843441)
          {
            if (a2 == 1983013176) {
              goto LABEL_183;
            }
            int v4 = 1983144248;
            goto LABEL_182;
          }
          if (a2 == 1999843442) {
            goto LABEL_177;
          }
          int v5 = 2016567667;
          goto LABEL_218;
        }
        if (a2 > 1953903667)
        {
          if (a2 != 1953903668)
          {
            int v26 = 1983000886;
            goto LABEL_224;
          }
        }
        else if (a2 != 1953903152)
        {
          int v5 = 1953903154;
          goto LABEL_218;
        }
LABEL_219:
        char v18 = result[8];
        if (!v18) {
          goto LABEL_231;
        }
        int v27 = result[11];
        goto LABEL_221;
      }
      if (a2 > 2016698738)
      {
        if (a2 > 2019963441)
        {
          if (a2 == 2019963442) {
            goto LABEL_219;
          }
          unsigned __int16 v21 = 13364;
        }
        else
        {
          if (a2 == 2016698739) {
            goto LABEL_219;
          }
          unsigned __int16 v21 = 12848;
        }
        int v5 = v21 | 0x78660000;
        goto LABEL_218;
      }
      if (a2 <= 2016687155)
      {
        if (a2 == 2016686640) {
          goto LABEL_219;
        }
        int v5 = 2016686642;
LABEL_218:
        if (a2 != v5) {
          return result;
        }
        goto LABEL_219;
      }
      if (a2 == 2016687156) {
        goto LABEL_219;
      }
      int v16 = 2016687216;
LABEL_176:
      if (a2 != v16) {
        return result;
      }
      goto LABEL_177;
    }
    if (a2 <= 1886859825)
    {
      if (a2 > 1815491697)
      {
        if (a2 <= 1885745711)
        {
          if (a2 <= 1882468913)
          {
            if (a2 != 1815491698)
            {
              int v11 = 1882468912;
              goto LABEL_202;
            }
            goto LABEL_225;
          }
          if (a2 == 1882468914) {
            goto LABEL_230;
          }
          int v7 = 1882469428;
          goto LABEL_213;
        }
        if (a2 <= 1885746227)
        {
          if (a2 != 1885745712)
          {
            int v19 = 1885745714;
            goto LABEL_229;
          }
          goto LABEL_203;
        }
        if (a2 != 1885746228)
        {
          int v11 = 1886859824;
LABEL_202:
          if (a2 != v11) {
            return result;
          }
          goto LABEL_203;
        }
        goto LABEL_214;
      }
      if (a2 > 1751527983)
      {
        if (a2 > 1751528499)
        {
          if (a2 != 1751528500)
          {
            int v16 = 1815162994;
            goto LABEL_176;
          }
        }
        else if (a2 != 1751527984 && a2 != 1751527986)
        {
          return result;
        }
        char v18 = result[14];
        if (!v18) {
          goto LABEL_231;
        }
        int v27 = result[17];
        goto LABEL_221;
      }
      if (a2 == 1647534392)
      {
LABEL_144:
        char v18 = result[30];
        if (!v18) {
          goto LABEL_231;
        }
        int v27 = result[2];
LABEL_221:
        char v18 = v27 != 0;
        goto LABEL_231;
      }
      if (a2 != 1647719521)
      {
        int v26 = 1651521076;
        goto LABEL_224;
      }
    }
    else
    {
      if (a2 > 1937125935)
      {
        if (a2 > 1949589874)
        {
          if (a2 > 1952854577)
          {
            if (a2 == 1952854578) {
              goto LABEL_219;
            }
            unsigned __int16 v23 = 13364;
          }
          else
          {
            if (a2 == 1949589875) {
              goto LABEL_219;
            }
            unsigned __int16 v23 = 12848;
          }
          int v5 = v23 | 0x74660000;
        }
        else if (a2 > 1937126451)
        {
          if (a2 == 1937126452) {
            goto LABEL_219;
          }
          int v5 = 1949458803;
        }
        else
        {
          if (a2 == 1937125936) {
            goto LABEL_219;
          }
          int v5 = 1937125938;
        }
        goto LABEL_218;
      }
      if (a2 > 1932812658)
      {
        if (a2 > 1936077361)
        {
          if (a2 == 1936077362) {
            goto LABEL_219;
          }
          unsigned __int16 v17 = 13364;
        }
        else
        {
          if (a2 == 1932812659) {
            goto LABEL_219;
          }
          unsigned __int16 v17 = 12848;
        }
        int v5 = v17 | 0x73660000;
        goto LABEL_218;
      }
      if (a2 <= 1915892015)
      {
        if (a2 == 1886859826) {
          goto LABEL_230;
        }
        int v7 = 1886860340;
        goto LABEL_213;
      }
      if (a2 != 1915892016)
      {
        int v5 = 1932681587;
        goto LABEL_218;
      }
    }
LABEL_148:
    char v18 = 0;
    goto LABEL_239;
  }
  if (a2 <= 758670895)
  {
    if (a2 <= 642527535)
    {
      if (a2 > 641230383)
      {
        if (a2 <= 641234479)
        {
          unsigned __int16 v10 = -26160;
        }
        else
        {
          if (a2 > 641877824)
          {
            if (a2 == 641877825) {
              goto LABEL_196;
            }
            if (a2 == 642527288) {
              goto LABEL_195;
            }
            int v14 = 642527336;
LABEL_129:
            if (a2 != v14) {
              return result;
            }
            char v18 = result[14];
LABEL_231:
            char v28 = v18;
            if (!a3) {
              goto LABEL_233;
            }
            goto LABEL_232;
          }
          unsigned __int16 v10 = -30256;
        }
        unsigned int v25 = a2 + (v10 | 0xD9C70000);
        if (v25 <= 4 && ((1 << v25) & 0x15) != 0) {
          goto LABEL_183;
        }
        return result;
      }
      if (a2 <= 590898735)
      {
        if (a2)
        {
          if (a2 == 32) {
            goto LABEL_196;
          }
          if (a2 != 40) {
            return result;
          }
          goto LABEL_195;
        }
        char v18 = 1;
LABEL_239:
        char v28 = 1;
        if (!a3)
        {
LABEL_233:
          if (a4) {
            *a4 = v28;
          }
          return result;
        }
LABEL_232:
        *a3 = v18;
        goto LABEL_233;
      }
      if (a2 == 590898736 || a2 == 590902832) {
        goto LABEL_183;
      }
      int v16 = 640955504;
      goto LABEL_176;
    }
    if (a2 <= 645424689)
    {
      if (a2 <= 644232303)
      {
        if (a2 <= 642934848)
        {
          if (a2 != 642527536)
          {
            int v6 = 642527542;
            goto LABEL_168;
          }
LABEL_169:
          char v18 = result[8];
          goto LABEL_231;
        }
        if (a2 == 642934849) {
          goto LABEL_236;
        }
        if (a2 != 643969848) {
          return result;
        }
        goto LABEL_144;
      }
      if (a2 <= 645346161)
      {
        if (a2 != 644232304)
        {
          int v16 = 644624754;
          goto LABEL_176;
        }
LABEL_177:
        char v18 = result[30];
        goto LABEL_231;
      }
      if (a2 == 645346162) {
        goto LABEL_177;
      }
      unsigned __int16 v22 = 26160;
      goto LABEL_189;
    }
    if (a2 <= 645428787)
    {
      if (a2 <= 645428783)
      {
        if (a2 == 645424690) {
          goto LABEL_230;
        }
        unsigned __int16 v13 = 26164;
        goto LABEL_212;
      }
      if (a2 == 645428784) {
        goto LABEL_203;
      }
      int v19 = 645428786;
LABEL_229:
      if (a2 != v19) {
        return result;
      }
      goto LABEL_230;
    }
    if (a2 > 645429041)
    {
      if (a2 == 645429042) {
        goto LABEL_230;
      }
      unsigned __int16 v13 = 30516;
LABEL_212:
      int v7 = v13 | 0x26780000;
LABEL_213:
      if (a2 != v7) {
        return result;
      }
      goto LABEL_214;
    }
    if (a2 != 645428788)
    {
      unsigned __int16 v22 = 30512;
LABEL_189:
      int v11 = v22 | 0x26780000;
      goto LABEL_202;
    }
LABEL_214:
    char v18 = result[57];
    goto LABEL_231;
  }
  if (a2 > 875704421)
  {
    if (a2 <= 1278226533)
    {
      if (a2 <= 875836517)
      {
        if (a2 > 875704933)
        {
          if (a2 == 875704934) {
            goto LABEL_183;
          }
          unsigned __int16 v8 = 12918;
        }
        else
        {
          if (a2 == 875704422) {
            goto LABEL_183;
          }
          unsigned __int16 v8 = 12406;
        }
        int v4 = v8 | 0x34320000;
LABEL_182:
        if (a2 != v4) {
          return result;
        }
        goto LABEL_183;
      }
      if (a2 <= 1111970368)
      {
        if (a2 == 875836518) {
          goto LABEL_183;
        }
        int v4 = 875836534;
        goto LABEL_182;
      }
      if (a2 == 1111970369) {
        goto LABEL_196;
      }
      if (a2 != 1278226488) {
        return result;
      }
LABEL_195:
      char v18 = result[2];
      goto LABEL_231;
    }
    if (a2 <= 1378955370)
    {
      if (a2 <= 1278226735)
      {
        if (a2 == 1278226534)
        {
          char v18 = result[20];
          goto LABEL_231;
        }
        int v14 = 1278226536;
        goto LABEL_129;
      }
      if (a2 != 1278226736)
      {
        int v6 = 1278226742;
LABEL_168:
        if (a2 != v6) {
          return result;
        }
        goto LABEL_169;
      }
      goto LABEL_169;
    }
    if (a2 <= 1380411456)
    {
      if (a2 != 1378955371)
      {
        if (a2 != 1380410945) {
          return result;
        }
        char v18 = result[39];
        goto LABEL_231;
      }
      goto LABEL_148;
    }
    if (a2 != 1380411457)
    {
      int v26 = 1647392369;
LABEL_224:
      if (a2 != v26) {
        return result;
      }
      goto LABEL_225;
    }
LABEL_236:
    char v18 = result[36];
    goto LABEL_231;
  }
  if (a2 <= 792229423)
  {
    if (a2 <= 762865201)
    {
      if (a2 <= 759318336)
      {
        if (a2 != 758670896)
        {
          int v4 = 758674992;
          goto LABEL_182;
        }
LABEL_183:
        char v18 = result[2];
        if (!v18) {
          goto LABEL_231;
        }
        int v27 = result[5];
        goto LABEL_221;
      }
      if (a2 != 759318337)
      {
        unsigned __int16 v15 = 26160;
        goto LABEL_139;
      }
LABEL_196:
      char v18 = result[24];
      goto LABEL_231;
    }
    if (a2 <= 762869297)
    {
      if (a2 != 762865202)
      {
        unsigned __int16 v15 = 30256;
LABEL_139:
        int v11 = v15 | 0x2D780000;
        goto LABEL_202;
      }
      goto LABEL_230;
    }
    if (a2 != 762869298)
    {
      int v4 = 792225328;
      goto LABEL_182;
    }
LABEL_230:
    char v18 = result[54];
    goto LABEL_231;
  }
  if (a2 <= 796423727)
  {
    if (a2 <= 796419631)
    {
      if (a2 == 792229424) {
        goto LABEL_183;
      }
      int v12 = 792872769;
      goto LABEL_172;
    }
    if (a2 != 796419632)
    {
      unsigned __int16 v20 = 26162;
      goto LABEL_159;
    }
    goto LABEL_203;
  }
  if (a2 <= 846624101)
  {
    if (a2 != 796423728)
    {
      unsigned __int16 v20 = 30258;
LABEL_159:
      int v19 = v20 | 0x2F780000;
      goto LABEL_229;
    }
LABEL_203:
    char v18 = result[51];
    goto LABEL_231;
  }
  if (a2 == 846624102 || a2 == 846624121)
  {
    char v18 = result[45];
    goto LABEL_231;
  }
  return result;
}

BOOL VTMetalTransferSessionCanTransferWithSession(uint64_t a1, int a2, int a3, int a4, const __CFDictionary *a5)
{
  unsigned __int16 v10 = (void *)MEMORY[0x199706500]();
  __int16 v16 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = DerivedStorage;
  if (!a1)
  {
    MEMORY[0x199705810](&sReadDebugOverrideAllDefaultsOnce_0, ReadDebugOverrideAllDefaults_0);
    int v13 = 0;
    if (!a5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v13 = *(unsigned __int8 *)(DerivedStorage + 1353);
  if (a5) {
LABEL_3:
  }
    VTPixelTransferChainNodeSessionSetProperties(a1, a5);
LABEL_4:
  getKernelTypeCapabilities((unsigned __int8 *)(v12 + 1633), a2, a3, (char *)&v16 + 1, (char *)&v16);
  BOOL v14 = (a4 || v13 || VTMetalTransferSessionCanDoHighQualityScaling(a1, a2))
     && (v16 | HIBYTE(v16)) != 0;
  return v14;
}

unsigned char *getKernelTypeCapabilities(unsigned __int8 *a1, int a2, int a3, char *a4, char *a5)
{
  __int16 v15 = 0;
  __int16 v14 = 0;
  getKernelTypeCapabilities_source(a1, a2, (char *)&v15 + 1, (char *)&v14 + 1);
  uint64_t result = getKernelTypeCapabilities_destination(a1, a3, &v15, (char *)&v14);
  if (a4)
  {
    if (HIBYTE(v15)) {
      BOOL v10 = v15 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    char v11 = !v10;
    *a4 = v11;
  }
  if (a5)
  {
    if (HIBYTE(v14)) {
      BOOL v12 = v14 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    char v13 = !v12;
    *a5 = v13;
  }
  return result;
}

BOOL VTMetalTransferSessionCanTransfer(int a1, int a2, char a3)
{
  int v6 = (void *)MEMORY[0x199706500]();
  memset(v13, 0, 60);
  char v12 = 0;
  char v11 = 0;
  vtmtsCreateDefaultDevice(&v11, &v12);
  int v7 = v11;
  vtmtsCacheSupportedPixelformats(v11, (BOOL *)v13);
  if (a3)
  {
    __int16 v10 = 0;
    getKernelTypeCapabilities_destination(v13, a2, (unsigned char *)&v10 + 1, (char *)&v10);
    if (HIBYTE(v10) | v10)
    {
      MEMORY[0x199705810](&sReadDebugOverrideAllDefaultsOnce_0, ReadDebugOverrideAllDefaults_0);
      if (byte_1EB3B8C23) {
        vtmtsGetIntermediateScalingFormat((unsigned __int8 *)v13, a1, 0, 0, 0, 0);
      }
    }
    BOOL v8 = 0;
  }
  else
  {
    __int16 v10 = 0;
    getKernelTypeCapabilities((unsigned __int8 *)v13, a1, a2, (char *)&v10 + 1, (char *)&v10);
    BOOL v8 = (HIBYTE(v10) | v10) != 0;
  }

  return v8;
}

unsigned char *getKernelTypeCapabilities_destination(unsigned char *result, int a2, unsigned char *a3, char *a4)
{
  char v4 = 0;
  char v5 = 1;
  if (a2 <= 1647534391)
  {
    if (a2 <= 758670895)
    {
      if (a2 > 642527541)
      {
        if (a2 <= 645424689)
        {
          if (a2 <= 644624753)
          {
            if (a2 <= 643969847)
            {
              if (a2 != 642527542)
              {
                if (a2 != 642934849) {
                  return result;
                }
                char v5 = 0;
                char v4 = result[37];
                goto LABEL_260;
              }
LABEL_215:
              char v5 = 0;
              char v4 = result[9];
              goto LABEL_260;
            }
            if (a2 != 643969848)
            {
              int v13 = 644232304;
LABEL_141:
              if (a2 != v13) {
                return result;
              }
              goto LABEL_199;
            }
            char v4 = result[3];
            if (v4) {
              char v4 = result[31] != 0;
            }
LABEL_219:
            char v5 = 0;
            goto LABEL_260;
          }
          if (a2 <= 645346161)
          {
            if (a2 != 644624754)
            {
              int v9 = 645279800;
              goto LABEL_125;
            }
LABEL_199:
            char v5 = 0;
            char v4 = result[31];
            goto LABEL_260;
          }
          if (a2 == 645346162) {
            goto LABEL_199;
          }
          unsigned __int16 v12 = 26160;
          goto LABEL_229;
        }
        if (a2 > 645428787)
        {
          if (a2 > 645429041)
          {
            if (a2 != 645429042)
            {
              unsigned __int16 v12 = 30516;
              goto LABEL_229;
            }
            goto LABEL_247;
          }
          if (a2 != 645428788)
          {
            unsigned __int16 v12 = 30512;
            goto LABEL_229;
          }
        }
        else
        {
          if (a2 <= 645428783)
          {
            if (a2 != 645424690)
            {
              unsigned __int16 v12 = 26164;
LABEL_229:
              int v10 = v12 | 0x26780000;
LABEL_230:
              if (a2 != v10) {
                return result;
              }
              goto LABEL_231;
            }
LABEL_247:
            char v5 = 0;
            char v4 = result[55];
            goto LABEL_260;
          }
          if (a2 != 645428784)
          {
            int v26 = 645428786;
            goto LABEL_246;
          }
        }
LABEL_231:
        char v5 = 0;
        char v4 = result[52];
        goto LABEL_260;
      }
      if (a2 > 641230387)
      {
        if (a2 <= 641877824)
        {
          if (a2 <= 641234481)
          {
            if (a2 != 641230388)
            {
              int v9 = 641234480;
              goto LABEL_125;
            }
LABEL_156:
            char v5 = 0;
            char v4 = result[50];
            goto LABEL_260;
          }
          if (a2 != 641234482)
          {
            if (a2 != 641234484) {
              return result;
            }
            goto LABEL_156;
          }
LABEL_180:
          char v5 = 0;
          char v4 = result[49];
          goto LABEL_260;
        }
        if (a2 > 642527335)
        {
          if (a2 == 642527336)
          {
            char v5 = 0;
            char v4 = result[15];
            goto LABEL_260;
          }
          if (a2 != 642527536) {
            return result;
          }
          goto LABEL_215;
        }
        if (a2 != 641877825)
        {
          if (a2 != 642527288) {
            return result;
          }
          char v5 = 0;
          char v4 = result[3];
          goto LABEL_260;
        }
LABEL_177:
        char v5 = 0;
        char v4 = result[25];
        goto LABEL_260;
      }
      if (a2 > 590902831)
      {
        if (a2 <= 641230383)
        {
          if (a2 != 590902832)
          {
            int v13 = 640955504;
            goto LABEL_141;
          }
          goto LABEL_126;
        }
        if (a2 != 641230384)
        {
          if (a2 != 641230386) {
            return result;
          }
          goto LABEL_180;
        }
LABEL_126:
        char v5 = 0;
        char v4 = result[48];
        goto LABEL_260;
      }
      if (a2 != 32)
      {
        if (a2 != 40)
        {
          int v9 = 590898736;
LABEL_125:
          if (a2 != v9) {
            return result;
          }
          goto LABEL_126;
        }
LABEL_248:
        char v4 = result[3];
        char v5 = result[4];
        goto LABEL_260;
      }
LABEL_204:
      char v4 = result[25];
      char v5 = result[26];
      goto LABEL_260;
    }
    if (a2 > 846624120)
    {
      if (a2 > 1278226487)
      {
        if (a2 > 1278226741)
        {
          if (a2 > 1380410944)
          {
            if (a2 == 1380410945)
            {
              char v4 = result[40];
              char v5 = result[41];
            }
            else
            {
              if (a2 != 1380411457) {
                return result;
              }
              char v4 = result[37];
              char v5 = result[38];
            }
            goto LABEL_260;
          }
          if (a2 != 1278226742)
          {
            if (a2 != 1378955371) {
              return result;
            }
            goto LABEL_260;
          }
        }
        else
        {
          if (a2 <= 1278226535)
          {
            if (a2 != 1278226488)
            {
              if (a2 != 1278226534) {
                return result;
              }
              char v4 = result[21];
              char v5 = result[22];
              goto LABEL_260;
            }
            goto LABEL_248;
          }
          if (a2 == 1278226536)
          {
            char v4 = result[15];
            char v5 = result[16];
            goto LABEL_260;
          }
          if (a2 != 1278226736) {
            return result;
          }
        }
        char v4 = result[9];
        char v5 = result[10];
        goto LABEL_260;
      }
      if (a2 <= 875704949)
      {
        if (a2 > 875704437)
        {
          if (a2 == 875704438) {
            goto LABEL_149;
          }
          unsigned __int16 v7 = 12902;
LABEL_148:
          if (a2 != (v7 | 0x34320000)) {
            return result;
          }
LABEL_149:
          if (result[4])
          {
            int v24 = result[7];
            goto LABEL_193;
          }
          goto LABEL_194;
        }
        if (a2 != 846624121)
        {
          unsigned __int16 v7 = 12390;
          goto LABEL_148;
        }
        goto LABEL_222;
      }
      if (a2 > 875836533)
      {
        if (a2 != 875836534)
        {
          if (a2 != 1111970369) {
            return result;
          }
          goto LABEL_204;
        }
        goto LABEL_205;
      }
      if (a2 == 875704950) {
        goto LABEL_149;
      }
      int v16 = 875836518;
LABEL_91:
      if (a2 != v16) {
        return result;
      }
LABEL_205:
      char v4 = result[3];
      if (v4) {
        char v4 = result[6] != 0;
      }
      char v5 = result[4];
      if (!v5) {
        goto LABEL_260;
      }
      int v27 = result[7];
      goto LABEL_239;
    }
    if (a2 > 792225327)
    {
      if (a2 > 796419633)
      {
        if (a2 > 796423729)
        {
          if (a2 == 796423730) {
            goto LABEL_247;
          }
          if (a2 != 846624102) {
            return result;
          }
LABEL_222:
          char v4 = result[46];
          goto LABEL_223;
        }
        if (a2 == 796419634) {
          goto LABEL_247;
        }
        unsigned __int16 v20 = 30256;
      }
      else
      {
        if (a2 <= 792872768)
        {
          if (a2 != 792225328)
          {
            int v9 = 792229424;
            goto LABEL_125;
          }
          goto LABEL_126;
        }
        if (a2 == 792872769) {
          goto LABEL_177;
        }
        unsigned __int16 v20 = 26160;
      }
      int v10 = v20 | 0x2F780000;
      goto LABEL_230;
    }
    if (a2 > 762865199)
    {
      if (a2 > 762869295)
      {
        if (a2 == 762869296) {
          goto LABEL_231;
        }
        unsigned __int16 v15 = 30258;
      }
      else
      {
        if (a2 == 762865200) {
          goto LABEL_231;
        }
        unsigned __int16 v15 = 26162;
      }
      int v26 = v15 | 0x2D780000;
LABEL_246:
      if (a2 != v26) {
        return result;
      }
      goto LABEL_247;
    }
    if (a2 == 758670896 || a2 == 758674992) {
      goto LABEL_126;
    }
    int v25 = 759318337;
LABEL_176:
    if (a2 != v25) {
      return result;
    }
    goto LABEL_177;
  }
  if (a2 > 1953903667)
  {
    if (a2 > 2019964015)
    {
      if (a2 > 2037741170)
      {
        if (a2 > 2088265263)
        {
          if (a2 > 2088269359)
          {
            if (a2 == 2088269360) {
              goto LABEL_231;
            }
            unsigned __int16 v23 = 30258;
          }
          else
          {
            if (a2 == 2088265264) {
              goto LABEL_231;
            }
            unsigned __int16 v23 = 26162;
          }
          int v26 = v23 | 0x7C780000;
          goto LABEL_246;
        }
        if (a2 > 2084075055)
        {
          if (a2 == 2084075056) {
            goto LABEL_126;
          }
          int v25 = 2084718401;
          goto LABEL_176;
        }
        if (a2 != 2037741171)
        {
          int v9 = 2084070960;
          goto LABEL_125;
        }
      }
      else
      {
        if (a2 <= 2021078127)
        {
          if (a2 > 2021077553)
          {
            if (a2 == 2021077554) {
              goto LABEL_235;
            }
            unsigned __int16 v8 = 13364;
            goto LABEL_153;
          }
          if (a2 != 2019964016)
          {
            unsigned __int16 v8 = 12848;
LABEL_153:
            int v11 = v8 | 0x78770000;
            goto LABEL_234;
          }
LABEL_196:
          char v4 = result[31];
          char v5 = result[32];
          goto LABEL_260;
        }
        if (a2 > 2033463605)
        {
          if (a2 == 2033463606)
          {
LABEL_249:
            char v4 = result[34];
            goto LABEL_250;
          }
          int v18 = 2037741158;
        }
        else
        {
          if (a2 == 2021078128) {
            goto LABEL_196;
          }
          int v18 = 2033463352;
        }
        if (a2 != v18) {
          return result;
        }
      }
      char v4 = result[28];
LABEL_223:
      char v5 = result[29];
      goto LABEL_260;
    }
    if (a2 > 2016686639)
    {
      if (a2 > 2016698738)
      {
        if (a2 > 2019963441)
        {
          if (a2 == 2019963442) {
            goto LABEL_235;
          }
          unsigned __int16 v21 = 13364;
        }
        else
        {
          if (a2 == 2016698739) {
            goto LABEL_191;
          }
          unsigned __int16 v21 = 12848;
        }
        int v11 = v21 | 0x78660000;
        goto LABEL_234;
      }
      if (a2 <= 2016687155)
      {
        if (a2 != 2016686640)
        {
          int v11 = 2016686642;
          goto LABEL_234;
        }
        goto LABEL_235;
      }
      if (a2 == 2016687156) {
        goto LABEL_235;
      }
      int v14 = 2016687216;
      goto LABEL_164;
    }
    if (a2 <= 1983013175)
    {
      if (a2 == 1953903668) {
        goto LABEL_235;
      }
      if (a2 == 1982882104) {
        goto LABEL_149;
      }
      if (a2 != 1983000886) {
        return result;
      }
      char v4 = 0;
LABEL_250:
      char v5 = result[35];
      goto LABEL_260;
    }
    if (a2 <= 1999843441)
    {
      if (a2 == 1983013176) {
        goto LABEL_149;
      }
      int v16 = 1983144248;
      goto LABEL_91;
    }
    if (a2 != 1999843442)
    {
      int v6 = 2016567667;
      goto LABEL_190;
    }
    goto LABEL_196;
  }
  if (a2 <= 1915892015)
  {
    if (a2 > 1882468913)
    {
      if (a2 > 1885746227)
      {
        if (a2 > 1886859825)
        {
          if (a2 != 1886859826)
          {
            int v10 = 1886860340;
            goto LABEL_230;
          }
LABEL_218:
          char v4 = 0;
          goto LABEL_219;
        }
        if (a2 == 1885746228) {
          goto LABEL_231;
        }
        int v19 = 1886859824;
      }
      else
      {
        if (a2 <= 1885745711)
        {
          if (a2 != 1882468914)
          {
            int v10 = 1882469428;
            goto LABEL_230;
          }
          goto LABEL_218;
        }
        if (a2 == 1885745712) {
          goto LABEL_218;
        }
        int v19 = 1885745714;
      }
LABEL_183:
      if (a2 != v19) {
        return result;
      }
      goto LABEL_218;
    }
    if (a2 <= 1751528499)
    {
      if (a2 == 1647534392)
      {
        char v4 = result[3];
        if (v4) {
          char v4 = result[31] != 0;
        }
        char v5 = result[4];
        if (!v5) {
          goto LABEL_260;
        }
        int v27 = result[32];
LABEL_239:
        char v5 = v27 != 0;
        goto LABEL_260;
      }
      if (a2 != 1751527984 && a2 != 1751527986) {
        return result;
      }
      goto LABEL_130;
    }
    if (a2 <= 1815491697)
    {
      if (a2 != 1751528500)
      {
        int v14 = 1815162994;
LABEL_164:
        if (a2 != v14) {
          return result;
        }
        goto LABEL_196;
      }
LABEL_130:
      if (result[16])
      {
        int v24 = result[19];
LABEL_193:
        char v5 = v24 != 0;
LABEL_195:
        char v4 = 0;
        goto LABEL_260;
      }
LABEL_194:
      char v5 = 0;
      goto LABEL_195;
    }
    if (a2 != 1815491698)
    {
      int v19 = 1882468912;
      goto LABEL_183;
    }
    goto LABEL_249;
  }
  if (a2 > 1937126451)
  {
    if (a2 > 1952854577)
    {
      if (a2 > 1953903151)
      {
        if (a2 == 1953903152) {
          goto LABEL_235;
        }
        int v11 = 1953903154;
        goto LABEL_234;
      }
      if (a2 == 1952854578) {
        goto LABEL_235;
      }
      unsigned __int16 v22 = 13364;
    }
    else
    {
      if (a2 <= 1949589874)
      {
        if (a2 == 1937126452) {
          goto LABEL_235;
        }
        int v6 = 1949458803;
LABEL_190:
        if (a2 != v6) {
          return result;
        }
LABEL_191:
        if (result[10])
        {
          int v24 = result[13];
          goto LABEL_193;
        }
        goto LABEL_194;
      }
      if (a2 == 1949589875) {
        goto LABEL_191;
      }
      unsigned __int16 v22 = 12848;
    }
    int v11 = v22 | 0x74660000;
    goto LABEL_234;
  }
  if (a2 > 1936077361)
  {
    if (a2 <= 1937125935)
    {
      if (a2 != 1936077362)
      {
        unsigned __int16 v17 = 13364;
LABEL_145:
        int v11 = v17 | 0x73660000;
        goto LABEL_234;
      }
LABEL_235:
      char v4 = result[9];
      if (v4) {
        char v4 = result[12] != 0;
      }
      char v5 = result[10];
      if (!v5) {
        goto LABEL_260;
      }
      int v27 = result[13];
      goto LABEL_239;
    }
    if (a2 == 1937125936) {
      goto LABEL_235;
    }
    int v11 = 1937125938;
LABEL_234:
    if (a2 != v11) {
      return result;
    }
    goto LABEL_235;
  }
  if (a2 > 1932812658)
  {
    if (a2 == 1932812659) {
      goto LABEL_191;
    }
    unsigned __int16 v17 = 12848;
    goto LABEL_145;
  }
  if (a2 != 1915892016)
  {
    int v6 = 1932681587;
    goto LABEL_190;
  }
LABEL_260:
  if (a3) {
    *a3 = v4;
  }
  if (a4) {
    *a4 = v5;
  }
  return result;
}

uint64_t VTMetalTransferSessionComposeImageWithAffineMatrix(const void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, CFTypeRef cf)
{
  int v14 = (void *)MEMORY[0x199706500]();
  if (!a1
    || (CFTypeID v15 = CFGetTypeID(a1), v15 != VTPixelTransferNodeGetTypeID())
    || !a3
    || !cf
    || (CFTypeID v16 = CFGetTypeID(cf), v16 != CVPixelBufferGetTypeID()))
  {
    uint64_t v30 = FigSignalErrorAt();
    goto LABEL_49;
  }
  CFArrayRef v32 = (const __CFArray *)a1;
  context = v14;
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a2 >= 1)
  {
    int v19 = 0;
    CFMutableDictionaryRef v20 = 0;
    unsigned __int16 v21 = 0;
    LODWORD(v22) = a2;
    while (1)
    {
      if (v20) {
        CFRelease(v20);
      }
      uint64_t v22 = (v22 - 1);
      unsigned __int16 v23 = *(const void **)(a3 + 8 * v22);
      if (!v23 || (CFTypeID v24 = CFGetTypeID(v23), v24 != CVPixelBufferGetTypeID()))
      {
        uint64_t v30 = FigSignalErrorAt();
        char v28 = 0;
        CFMutableDictionaryRef v20 = 0;
        goto LABEL_51;
      }
      CFArrayAppendValue(Mutable, *(const void **)(a3 + 8 * v22));
      if (a4) {
        break;
      }
      if (a5) {
        goto LABEL_17;
      }
      FigCFDictionarySetFloat32();
      CFMutableDictionaryRef v20 = 0;
LABEL_24:
      ++v19;
      if ((int)v22 <= 0)
      {
        if (a8) {
          goto LABEL_29;
        }
        CFMutableDictionaryRef v25 = 0;
        int v26 = 0;
        CFMutableDictionaryRef v27 = 0;
        char v28 = 0;
        CFTypeID v29 = 0;
        if (v21) {
          goto LABEL_30;
        }
        goto LABEL_37;
      }
    }
    CFMutableDictionaryRef v20 = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    if (a5)
    {
      if (!v20) {
LABEL_17:
      }
        CFMutableDictionaryRef v20 = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetFloat32();
      FigCFDictionarySetFloat32();
      FigCFDictionarySetFloat32();
      FigCFDictionarySetFloat32();
      FigCFDictionarySetFloat32();
      FigCFDictionarySetFloat32();
    }
    FigCFDictionarySetFloat32();
    if (v20)
    {
      if (!v21)
      {
        unsigned __int16 v21 = CFArrayCreateMutable(v17, 0, MEMORY[0x1E4F1D510]);
        if (v19)
        {
          uint64_t v30 = FigSignalErrorAt();
          char v28 = 0;
LABEL_51:
          CFTypeID v29 = 0;
          CFMutableDictionaryRef v27 = 0;
          if (Mutable) {
            goto LABEL_38;
          }
          goto LABEL_39;
        }
      }
      CFArrayAppendValue(v21, v20);
    }
    goto LABEL_24;
  }
  CFMutableDictionaryRef v20 = 0;
  unsigned __int16 v21 = 0;
  int v26 = 0;
  CFMutableDictionaryRef v27 = 0;
  char v28 = 0;
  CFTypeID v29 = 0;
  if (a8)
  {
LABEL_29:
    CFMutableDictionaryRef v25 = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetFloat();
    FigCFDictionarySetFloat();
    FigCFDictionarySetFloat();
    FigCFDictionarySetFloat();
    if (v21)
    {
LABEL_30:
      char v28 = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(v28, @"SourceAmendments", v21);
      if (!v25)
      {
        CFMutableDictionaryRef v27 = 0;
        CFTypeID v29 = 0;
        int v26 = v21;
        goto LABEL_37;
      }
      if (v28) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
    int v26 = 0;
    CFMutableDictionaryRef v27 = 0;
    char v28 = 0;
    CFTypeID v29 = 0;
    if (v25)
    {
LABEL_34:
      char v28 = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
LABEL_35:
      CFTypeID v29 = CFArrayCreateMutable(v17, 0, MEMORY[0x1E4F1D510]);
      CFArrayAppendValue(v29, v25);
      CFDictionarySetValue(v28, @"DestinationAmendments", v29);
      int v26 = v21;
      CFMutableDictionaryRef v27 = v25;
    }
  }
LABEL_37:
  uint64_t v30 = VTMetalTransferSessionCompositeImageSync(v32, Mutable, cf, v28);
  unsigned __int16 v21 = v26;
  if (Mutable) {
LABEL_38:
  }
    CFRelease(Mutable);
LABEL_39:
  if (v28) {
    CFRelease(v28);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v29) {
    CFRelease(v29);
  }
  int v14 = context;
  if (v27) {
    CFRelease(v27);
  }
  if (v20) {
    CFRelease(v20);
  }
LABEL_49:
  return v30;
}

uint64_t VTMetalTransferSessionFlush(uint64_t a1, CVOptionFlags a2)
{
  char v4 = (void *)MEMORY[0x199706500]();
  uint64_t v5 = VTMetalTransferSessionDoFlush(a1, a2);
  return v5;
}

uint64_t VTMetalTransferSessionDoFlush(uint64_t a1, CVOptionFlags a2)
{
  char v4 = *(__CVMetalTextureCache **)(CMBaseObjectGetDerivedStorage() + 48);
  if (v4) {
    CVMetalTextureCacheFlush(v4, a2);
  }

  return VTPixelTransferNodeBaseDoFlush(a1, a2);
}

BOOL VTMetalTransferSessionIsPixelFormatTypeSupportedOnDestination(int a1)
{
  CFDictionaryRef v2 = (void *)MEMORY[0x199706500]();
  BOOL v4 = a1 != 2033463856 && a1 != 1714696752;
  return v4;
}

uint64_t vtSetPropertyOrArrayOfType(const void **a1, CFTypeRef cf, uint64_t a3, unsigned char *a4)
{
  if (cf)
  {
    if (CFGetTypeID(cf) == a3)
    {
      if (FigCFEqual()) {
        return 0;
      }
      goto LABEL_14;
    }
    CFTypeID TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(cf))
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
      if (Count >= 1)
      {
        CFIndex v11 = Count;
        CFIndex v12 = 0;
        int v13 = (const void *)*MEMORY[0x1E4F1D260];
        while (1)
        {
          CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v12);
          if (ValueAtIndex)
          {
            if (ValueAtIndex != v13 && CFGetTypeID(ValueAtIndex) != a3) {
              break;
            }
          }
          if (v11 == ++v12) {
            goto LABEL_14;
          }
        }
        uint64_t result = 4294954394;
        goto LABEL_17;
      }
LABEL_14:
      CFTypeID v15 = *a1;
      *a1 = cf;
      CFRetain(cf);
      if (v15) {
        CFRelease(v15);
      }
      uint64_t result = 0;
LABEL_17:
      *a4 = 0;
      return result;
    }
    return 4294954394;
  }
  else
  {
    uint64_t result = (uint64_t)*a1;
    if (*a1)
    {
      CFRelease((CFTypeRef)result);
      uint64_t result = 0;
      *a1 = 0;
    }
  }
  return result;
}

uint64_t RegisterVTMTSRenderPassDescriptor()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVTMTSRenderPassDescriptorID = result;
  return result;
}

double vtMTSRenderPassDescriptorInit(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x800uLL);
  uint64_t v2 = 0;
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  do
  {
    *(_OWORD *)(a1 + v2 + 212) = v3;
    uint64_t v4 = a1 + v2 + 212;
    *(_DWORD *)(v4 - 4) = 0;
    *(_OWORD *)(v4 + 16) = v3;
    *(_OWORD *)(v4 + 32) = v3;
    *(_OWORD *)(v4 + 48) = v3;
    *(_OWORD *)(v4 + 64) = v3;
    *(_OWORD *)(v4 + 80) = v3;
    *(void *)(v4 + 96) = -1;
    *(_DWORD *)(v4 + 104) = 0;
    *(unsigned char *)(v4 + 108) = 0;
    *(_WORD *)(v4 + 111) = 0;
    *(unsigned char *)(v4 + 113) = 0;
    *(_DWORD *)(v4 + 128) = 0;
    *(void *)(v4 + 136) = 0;
    *(_DWORD *)(v4 + 144) = 0;
    *(void *)(v4 + 116) = 0;
    v2 += 152;
    *(_WORD *)(v4 + 124) = 0;
  }
  while (v2 != 1216);
  double result = 0.0;
  *(void *)(a1 + 1424) = 0;
  *(void *)(a1 + 1496) = -1;
  *(void *)&long long v6 = -1;
  *((void *)&v6 + 1) = -1;
  *(_OWORD *)(a1 + 1432) = v6;
  *(_OWORD *)(a1 + 1448) = v6;
  *(_OWORD *)(a1 + 1464) = v6;
  *(_OWORD *)(a1 + 1480) = v6;
  *(_DWORD *)(a1 + 1520) = 0;
  *(unsigned char *)(a1 + 1524) = 0;
  *(_DWORD *)(a1 + 1528) = 0;
  *(void *)(a1 + 1536) = 0;
  *(_DWORD *)(a1 + 1544) = 0;
  *(void *)(a1 + 1504) = 0;
  *(void *)(a1 + 1510) = 0;
  return result;
}

void vtMTSRenderPassDescriptorFinalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 24) = 0;
  }

  long long v3 = *(const void **)(a1 + 200);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 200) = 0;
  }

  uint64_t v4 = *(void **)(a1 + 2056);
}

__CFString *vtCopyVTMTSRenderPassDescriptorFormattingDesc(const void *a1)
{
  return vtCopyVTMTSRenderPassDescriptorFormattingDescWithTabCount(a1, 0);
}

uint64_t RegisterVTMTSRenderPassBarrier()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVTMTSRenderPassBarrierID = result;
  return result;
}

__CFString *vtCopyVTMTSRenderPassBarrierFormattingDesc(const void *a1)
{
  return vtCopyVTMTSRenderPassBarrierFormattingDescWithTabCount(a1, 0);
}

void VTMetalTransferSessionFinalize(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x199706500]();
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v4 = *(const void **)(DerivedStorage + 32);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(DerivedStorage + 32) = 0;
    }
    uint64_t v5 = *(const void **)(DerivedStorage + 40);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(DerivedStorage + 40) = 0;
    }
    long long v6 = *(const void **)(DerivedStorage + 56);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(DerivedStorage + 56) = 0;
    }
    unsigned __int16 v7 = *(const void **)(DerivedStorage + 1616);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(DerivedStorage + 1616) = 0;
    }

    *(void *)(DerivedStorage + 1464) = 0;
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    int v9 = *(const void **)(v8 + 48);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(v8 + 48) = 0;
    }
    int v10 = *(const void **)(v8 + 80);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(v8 + 80) = 0;
    }

    *(void *)(v8 + 1480) = 0;
    *(void *)(v8 + 1560) = 0;

    *(void *)(v8 + 1568) = 0;
    *(void *)(v8 + 1576) = 0;

    *(void *)(v8 + 1584) = 0;
    *(void *)(v8 + 1488) = 0;

    *(void *)(v8 + 1504) = 0;
    *(void *)(v8 + 1496) = 0;

    *(void *)(v8 + 152) = 0;
    *(void *)(v8 + 160) = 0;

    *(void *)(v8 + 168) = 0;
    *(void *)(v8 + 176) = 0;

    *(void *)(v8 + 1592) = 0;
    *(void *)(v8 + 1600) = 0;
    CFIndex v11 = *(const void **)(DerivedStorage + 1344);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(DerivedStorage + 1344) = 0;
    }
    CFIndex v12 = *(const void **)(DerivedStorage + 1376);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(DerivedStorage + 1376) = 0;
    }
    int v13 = *(const void **)(DerivedStorage + 1384);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(DerivedStorage + 1384) = 0;
    }
    int v14 = *(const void **)(DerivedStorage + 1392);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(DerivedStorage + 1392) = 0;
    }
    CFTypeID v15 = *(const void **)(DerivedStorage + 1400);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(DerivedStorage + 1400) = 0;
    }
    CFTypeID v16 = *(const void **)(DerivedStorage + 1408);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(DerivedStorage + 1408) = 0;
    }
    CFAllocatorRef v17 = *(const void **)(DerivedStorage + 1416);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(DerivedStorage + 1416) = 0;
    }
    int v18 = *(const void **)(DerivedStorage + 1424);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(DerivedStorage + 1424) = 0;
    }
    int v19 = *(const void **)(DerivedStorage + 1432);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(DerivedStorage + 1432) = 0;
    }
    CFMutableDictionaryRef v20 = *(const void **)(DerivedStorage + 1440);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(DerivedStorage + 1440) = 0;
    }
    unsigned __int16 v21 = *(const void **)(DerivedStorage + 1448);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(DerivedStorage + 1448) = 0;
    }
    uint64_t v22 = *(const void **)(DerivedStorage + 1456);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(DerivedStorage + 1456) = 0;
    }
    unsigned __int16 v23 = *(const void **)(DerivedStorage + 88);
    if (v23)
    {
      CFRelease(v23);
      *(void *)(DerivedStorage + 88) = 0;
    }
    CFTypeID v24 = *(const void **)(DerivedStorage + 96);
    if (v24)
    {
      CFRelease(v24);
      *(void *)(DerivedStorage + 96) = 0;
    }
    CFMutableDictionaryRef v25 = *(const void **)(DerivedStorage + 104);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(DerivedStorage + 104) = 0;
    }
    int v26 = *(const void **)(DerivedStorage + 112);
    if (v26)
    {
      CFRelease(v26);
      *(void *)(DerivedStorage + 112) = 0;
    }
    CFMutableDictionaryRef v27 = *(const void **)(DerivedStorage + 120);
    if (v27)
    {
      CFRelease(v27);
      *(void *)(DerivedStorage + 120) = 0;
    }
    char v28 = *(const void **)(DerivedStorage + 128);
    if (v28)
    {
      CFRelease(v28);
      *(void *)(DerivedStorage + 128) = 0;
    }
    CFTypeID v29 = *(const void **)(DerivedStorage + 136);
    if (v29)
    {
      CFRelease(v29);
      *(void *)(DerivedStorage + 136) = 0;
    }
  }
  VTPixelTransferNodeBaseFinalize();
}

__CFString *VTMetalTransferSessionCopyDebugDescription(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v1, 0);
  long long v3 = (void *)MEMORY[0x199706500]();
  uint64_t DerivedStorage = (const void *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v5 = CFGetAllocator(DerivedStorage);
  CFStringAppendFormat(Mutable, 0, @"<VTMetalTransferSession %p [%p]>{}", DerivedStorage, v5);
  return Mutable;
}

uint64_t VTMetalTransferSessionDoTransfer(const __CFArray *a1, void *a2, uint64_t a3, void *a4)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  unsigned __int16 v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(v6, 0, v7, v8);
  CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(v6, 0, v7, v8);
  FigCFDictionarySetCFIndex();
  FigCFDictionarySetCFIndex();
  FigCFDictionarySetCFIndex();
  FigCFDictionarySetCFIndex();
  CFDictionarySetValue(Mutable, @"SourceAmendments", v10);
  FigCFDictionarySetCFIndex();
  FigCFDictionarySetCFIndex();
  FigCFDictionarySetCFIndex();
  FigCFDictionarySetCFIndex();
  CFDictionarySetValue(Mutable, @"DestinationAmendments", v11);
  uint64_t v12 = VTMetalTransferSessionTransferImageSync(a1, a2, a4, Mutable);
  if (v10) {
    CFRelease(v10);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v12;
}

void dictConcatApplier(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t vtMetalTransferSessionRebuild(uint64_t a1, const __CFArray *a2, const __CFArray *a3, int a4)
{
  bzero(__src, 0x450uLL);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a2) {
    CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
  }
  else {
    CFArrayRef Copy = 0;
  }
  CFArrayRef v10 = CFArrayCreateCopy(v8, a3);
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, 0);
  if (!ValueAtIndex) {
    goto LABEL_579;
  }
  CFDictionaryRef v12 = ValueAtIndex;
  CFTypeID v13 = CFGetTypeID(ValueAtIndex);
  if (v13 != CFDictionaryGetTypeID()) {
    goto LABEL_579;
  }
  *(_WORD *)(DerivedStorage + 64) = 0;
  if (*(void *)(DerivedStorage + 1600))
  {
    if (!*(void *)(DerivedStorage + 1480))
    {
      if (!Copy) {
        goto LABEL_39;
      }
LABEL_31:
      if (CFArrayGetCount(Copy) >= 1)
      {
        CFIndex v29 = 0;
        unsigned int v30 = 1;
        while (1)
        {
          uint64_t v31 = *(void **)(DerivedStorage + 1464);
          CFArrayRef v32 = CFArrayGetCount(Copy) <= v29 ? 0 : CFArrayGetValueAtIndex(Copy, v29);
          uint64_t v33 = vtCheckTextureLimits(v31, (uint64_t)v32);
          if (v33) {
            break;
          }
          CFIndex v29 = v30;
          BOOL v34 = CFArrayGetCount(Copy) <= v30++;
          if (v34) {
            goto LABEL_39;
          }
        }
LABEL_580:
        uint64_t appended = v33;
        goto LABEL_497;
      }
LABEL_39:
      if (v10 && CFArrayGetCount(v10) >= 1)
      {
        CFIndex v35 = 0;
        unsigned int v36 = 1;
        do
        {
          int32x2_t v37 = *(void **)(DerivedStorage + 1464);
          CFArrayRef v38 = CFArrayGetCount(v10) <= v35 ? 0 : CFArrayGetValueAtIndex(v10, v35);
          uint64_t v33 = vtCheckTextureLimits(v37, (uint64_t)v38);
          if (v33) {
            goto LABEL_580;
          }
          CFIndex v35 = v36;
          BOOL v34 = CFArrayGetCount(v10) <= v36++;
        }
        while (!v34);
      }
      CFIndex v39 = *(void **)(DerivedStorage + 1464);
      short float v277 = (unsigned __int8 *)(DerivedStorage + 1633);
      int v271 = *(_DWORD *)(DerivedStorage + 24);
      CFArrayRef v297 = *(const __CFArray **)(DerivedStorage + 80);
      float v298 = (__CFString **)(DerivedStorage + 1344);
      int v40 = *(unsigned __int8 *)(DerivedStorage + 1472);
      memset(v324, 0, 40);
      long long v323 = 0u;
      long long v322 = 0u;
      *(_OWORD *)float v321 = 0u;
      long long v320 = 0u;
      long long v319 = 0u;
      long long v318 = 0u;
      long long v317 = 0u;
      *(_OWORD *)CFDictionaryRef theDict = 0u;
      CFArrayRef theArray = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
      float v301 = v39;
      *(void *)&long long v322 = v39;
      short float v268 = (unsigned char *)(DerivedStorage + 1288);
      *((void *)&v322 + 1) = DerivedStorage + 1288;
      LOBYTE(v324[1]) = v40 == 0;
      pixelFormat[0] = 0;
      FigCFDictionaryGetInt32IfPresent();
      LODWORD(theDict[0]) = pixelFormat[0];
      theDict[1] = v12;
      DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
      DWORD1(v324[0]) = getNativeTextureTypeForPixelFormat((int)theDict[0]);
      getSubsamplingFromPixelDescription(DescriptionWithPixelFormatType, (_DWORD *)v324 + 2, (_DWORD *)v324 + 3);
      *(_OWORD *)((char *)&v324[1] + 4) = xmmword_193E80620;
      CFArrayRef v274 = v10;
      BOOL v42 = FigCFDictionaryGetFloatIfPresent()
         && FigCFDictionaryGetFloatIfPresent()
         && FigCFDictionaryGetFloatIfPresent()
         && FigCFDictionaryGetFloatIfPresent()
         || *(unsigned char *)(DerivedStorage + 1354) == 0;
      BOOL v275 = v42;
      v344[0] = v321[2];
      *(_DWORD *)short float v327 = v321[3];
      LODWORD(v325) = HIDWORD(v320);
      LODWORD(v326) = DWORD2(v320);
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      pixelFormat[0] = v344[0];
      v303[0] = *(_DWORD *)v327;
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      v321[0] = pixelFormat[0];
      v321[1] = v303[0];
      *((void *)&v320 + 1) = __PAIR64__(v325, v326);
      v321[2] = v344[0];
      v321[3] = *(_DWORD *)v327;
      CFArrayRef v270 = Copy;
      uint64_t v276 = DerivedStorage;
      CFAllocatorRef allocator = v8;
      if (v271 == 1)
      {
        if (Copy)
        {
LABEL_61:
          CFDictionaryRef v44 = DescriptionWithPixelFormatType;
          if (CFArrayGetCount(Copy) < 1)
          {
            char v46 = 0;
            CFTypeID v45 = 0;
          }
          else
          {
            CFTypeID v45 = CFArrayGetValueAtIndex(Copy, 0);
            char v46 = 0;
          }
LABEL_68:
          CFArrayRef v48 = theArray;
          long long v314 = 0u;
          uint64_t v315 = 0;
          long long v313 = 0u;
          *(void *)&long long v311 = 0;
          *(_OWORD *)float v310 = 0u;
          long long v309 = 0u;
          long long v307 = 0u;
          memset(v308, 0, sizeof(v308));
          long long v306 = 0u;
          long long v305 = 0u;
          long long v304 = 0u;
          *(_OWORD *)float v303 = 0u;
          HIDWORD(v314) = 1065353216;
          *((void *)&v311 + 1) = v301;
          long long v312 = (unint64_t)v268;
          BYTE8(v307) = 1;
          if (*((void *)&v320 + 1) || v321[0] != v321[2] || v321[1] != v321[3]) {
            BYTE8(v307) = 0;
          }
          if (!v45) {
            goto LABEL_79;
          }
          LOBYTE(v344[0]) = 1;
          pixelFormat[0] = 0;
          FigCFDictionaryGetInt32IfPresent();
          v303[0] = pixelFormat[0];
          CFDictionaryRef v284 = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
          FigCFDictionaryGetBooleanIfPresent();
          FigCFDictionaryGetBooleanIfPresent();
          FigCFDictionaryGetIntIfPresent();
          if (FigCFDictionaryGetBooleanIfPresent() && LOBYTE(v344[0])) {
            BYTE8(v307) = 0;
          }
          if (v284)
          {
            FigCFDictionaryGetBooleanIfPresent();
            CFDictionaryGetValue(v284, (const void *)*MEMORY[0x1E4F249D0]);
            CFDictionaryRef v50 = v44;
            if (FigCFEqual()) {
              LOBYTE(v314) = 0;
            }
          }
          else
          {
LABEL_79:
            CFDictionaryRef v284 = 0;
            CFDictionaryRef v50 = v44;
          }
          if (v50) {
            FigCFDictionaryGetBooleanIfPresent();
          }
          CFDictionaryRef v265 = v50;
          if ((v46 & 1) != 0 || CFArrayGetCount(Copy) < 1) {
            CFDictionaryRef v51 = 0;
          }
          else {
            CFDictionaryRef v51 = (const __CFDictionary *)CFArrayGetValueAtIndex(Copy, 0);
          }
          vtmtsLoadColorFunctionConstantValues(v51, v12, v284, v50, (int *)&v313 + 1, (int *)&v313, (int *)&v312 + 2, (int *)&v313 + 2, (int *)&v323 + 3, (int *)&v323 + 2, (int *)&v323, (int *)v324);
          HIDWORD(v313) = getNativeTextureTypeForPixelFormat(v303[0]);
          getSubsamplingFromPixelDescription(v284, (_DWORD *)&v314 + 1, (_DWORD *)&v314 + 2);
          if ((v46 & 1) != 0 || CFArrayGetCount(Copy) < 1) {
            CFArrayRef v52 = 0;
          }
          else {
            CFArrayRef v52 = CFArrayGetValueAtIndex(Copy, 0);
          }
          vtmtsGetSrcCropDimensions((uint64_t)v52, &v310[2], &v310[3], v310, &v310[1], (int *)&v311, (int *)&v311 + 1, (uint64_t)v308, (unsigned char *)&v307 + 10);
          if (*(float *)v310 != 0.0 || *(float *)&v310[1] != 0.0 || *(void *)&v310[2] != (void)v311) {
            LOBYTE(v315) = 1;
          }
          if ((v46 & 1) != 0 || CFArrayGetCount(Copy) < 1) {
            int v53 = 0;
          }
          else {
            int v53 = CFArrayGetValueAtIndex(Copy, 0);
          }
          *(void *)&v303[2] = v53;
          FigCFDictionaryGetFloatIfPresent();
          CFBooleanRef v54 = (int64x2_t *)&unk_193E80000;
          if (v303[0] == 1647392369 || v303[0] == 1651521076)
          {
            BOOL v286 = 0;
            int v295 = 0;
            int v293 = 0;
            int v55 = 0;
            if (v303[0] == 1647392369) {
              int v56 = 2;
            }
            else {
              int v56 = 4;
            }
            int v272 = v303[0];
            while (1)
            {
              int v282 = v55;
              CFDictionaryRef v57 = objc_msgSend(v301, "newBufferWithLength:options:", 4, 0, v262);
              if (*v298) {
                uint64_t v58 = *v298;
              }
              else {
                uint64_t v58 = @"com.apple.VideoToolbox.VTMetalTransferSession";
              }
              CFTypeRef cf = v57;
              [v57 setLabel:v58];
              uint64_t v59 = (void *)[v301 newBufferWithLength:124 options:0];
              if (*v298) {
                uint64_t v60 = *v298;
              }
              else {
                uint64_t v60 = @"com.apple.VideoToolbox.VTMetalTransferSession";
              }
              float v299 = v59;
              [v59 setLabel:v60];
              long long v352 = v324[0];
              long long v353 = v324[1];
              uint64_t v354 = *(void *)&v324[2];
              long long v348 = v320;
              long long v349 = *(_OWORD *)v321;
              *(_OWORD *)float16x8_t v351 = v323;
              long long v350 = v322;
              *(_OWORD *)float v344 = *(_OWORD *)theDict;
              long long v345 = v317;
              long long v347 = v319;
              long long v346 = v318;
              long long v340 = v312;
              *(_OWORD *)float v341 = v313;
              long long v342 = v314;
              uint64_t v343 = v315;
              long long v336 = v308[1];
              long long v337 = v309;
              long long v338 = *(_OWORD *)v310;
              long long v339 = v311;
              *(_OWORD *)short float v332 = v305;
              long long v333 = v306;
              long long v334 = v307;
              long long v335 = v308[0];
              *(_OWORD *)pixelFormat = *(_OWORD *)v303;
              long long v331 = v304;
              BOOL v329 = 0;
              uint64_t VTMTSRenderPass = vtCreateVTMTSRenderPass();
              *(unsigned char *)(VTMTSRenderPass + 1558) = 0;
              CFArrayRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
              BOOL v63 = v310[2] == v321[0] && v310[3] == v321[1];
              int v64 = !v63;
              BOOL v65 = 1;
              if (!HIDWORD(v315) && !*(_WORD *)((char *)&v315 + 1)) {
                BOOL v65 = BYTE10(v307) != 0;
              }
              if (((1 << v56) & 0x1A) != 0 && (v64 | v65) != 1) {
                break;
              }
              BOOL v67 = (int)VTGetBitsPerComponentFromPixelFormatType((int)theDict[0]) > 12
                 && LODWORD(theDict[0]) != 1380411457;
              int v68 = *(unsigned __int8 *)(DerivedStorage + 1656);
              if (*(unsigned char *)(DerivedStorage + 1656)) {
                int v68 = *(unsigned char *)(DerivedStorage + 1672) != 0;
              }
              BOOL v69 = (v67 & v68) == 0;
              if ((v67 & v68) != 0) {
                int v70 = 1380410945;
              }
              else {
                int v70 = 1380411457;
              }
              v344[0] = v70;
              *((int32x2_t *)&v348 + 1) = vcvt_s32_f32(*(float32x2_t *)&v338);
              DWORD1(v339) = v310[3];
              *(void *)&long long v349 = *(void *)&v310[2];
              *((void *)&v349 + 1) = *(void *)&v310[2];
              uint64_t v71 = 65;
              if (!v69) {
                uint64_t v71 = 105;
              }
              uint64_t v72 = 115;
              if (!v69) {
                uint64_t v72 = 125;
              }
              if (v56 == 2) {
                uint64_t v73 = v71;
              }
              else {
                uint64_t v73 = v72;
              }
              *(void *)short float v332 = v73;
              *(void *)&v332[2] = 0;
              LODWORD(v339) = v310[2];
              LODWORD(v334) = 2;
              LODWORD(v348) = 2;
              v351[0] = DWORD2(v340);
              v351[2] = v341[0];
              LODWORD(v352) = v341[2];
              long long v346 = (unint64_t)v73;
              if (!vtAllocateMetalTextureForList(v301, v310[2], v310[3], v73, v293, v297)) {
                goto LABEL_142;
              }
LABEL_144:
              uint64_t v74 = v346;
              BOOL v280 = (void)v346 == 0;
              int v288 = DWORD2(v345);
              if (!(void)v346)
              {
                uint64_t v75 = vtmtsSetUpProcessingNeeds(v301, v303[0], v344[0], (const __CFDictionary **)&v303[2], *(const __CFDictionary **)&v344[2], v284, v265, &v341[1], v341, (int *)&v340 + 2, v341[2], v351[3], v351[2], v351[0], v352, v298, v268, VTMTSRenderPass + 208, (_DWORD *)&v312 + 3,
                        &v351[1],
                        (uint64_t)cf,
                        (void *)(VTMTSRenderPass + 2056),
                        (unsigned char *)&v307 + 9,
                        &v329);
                if (v75) {
                  goto LABEL_219;
                }
              }
              if ((void)v305)
              {
                uint64_t v76 = 0;
                *(_DWORD *)(VTMTSRenderPass + 208) = v303[0];
                do
                {
                  uint64_t v77 = *((void *)&v305 + v76);
                  if (!v77) {
                    break;
                  }
                  LODWORD(v262) = v76;
                  uint64_t TexDescGlobalSample = vtCreateTexDescGlobalSample((uint64_t)v301, (uint64_t)Mutable, VTMTSRenderPass + 208, v303[0], v77, v307);
                  if (TexDescGlobalSample)
                  {
                    uint64_t appended = TexDescGlobalSample;
                    goto LABEL_217;
                  }
                  ++v76;
                }
                while (v76 != 4);
                int v79 = v76 + v295;
                uint64_t DerivedStorage = v276;
              }
              else
              {
                uint64_t v75 = vtmtsBuildSource(v301, v303, 0, VTMTSRenderPass + 208, Mutable);
                int v79 = v295;
                if (v75) {
                  goto LABEL_219;
                }
              }
              int v285 = v79;
              if (!(void)v346)
              {
                if (Mutable) {
                  int Count = CFArrayGetCount(Mutable);
                }
                else {
                  int Count = 0;
                }
                v344[1] = Count;
                uint64_t v75 = vtmtsBuildDestination(v301, (unsigned int *)v344, *(unsigned __int8 *)(VTMTSRenderPass + 316), VTMTSRenderPass + 208, Mutable, v297);
                if (!v75)
                {
LABEL_166:
                  if (Mutable) {
                    CFTypeRef v87 = CFRetain(Mutable);
                  }
                  else {
                    CFTypeRef v87 = 0;
                  }
                  *(void *)(VTMTSRenderPass + 200) = v87;
                  vtmtsFixUpProcessingShortcuts(VTMTSRenderPass + 208, v329);
                  *(void *)(VTMTSRenderPass + 348) = v313;
                  *(_DWORD *)(VTMTSRenderPass + 340) = DWORD2(v312);
                  *(_DWORD *)(VTMTSRenderPass + 356) = DWORD2(v313);
                  *(void *)(VTMTSRenderPass + 1536) = *(void *)&v351[2];
                  *(_DWORD *)(VTMTSRenderPass + 1528) = v351[0];
                  *(_DWORD *)(VTMTSRenderPass + 1544) = v352;

                  long long v88 = (void *)[v301 newBufferWithLength:512 options:0];
                  *(void *)(VTMTSRenderPass + 64) = v88;
                  if (*v298) {
                    long long v89 = *v298;
                  }
                  else {
                    long long v89 = @"com.apple.VideoToolbox.VTMetalTransferSession";
                  }
                  objc_msgSend(v88, "setLabel:", v89, v262);
                  uint64_t v90 = [*(id *)(VTMTSRenderPass + 64) contents];
                  uint64_t v91 = v90;
                  if (v74)
                  {
                    unsigned __int8 v92 = 0;
                    unsigned __int8 v93 = 0;
                    int v94 = 0;
                    long long v326 = 0uLL;
                    double v95 = 1.0;
                    double v96 = 1.0;
                    long long v325 = 0uLL;
                  }
                  else
                  {
                    long long v326 = *(_OWORD *)((char *)v308 + 8);
                    double v96 = *(double *)v308;
                    double v95 = *((double *)&v308[1] + 1);
                    long long v325 = v309;
                    unsigned __int8 v92 = BYTE1(v315);
                    unsigned __int8 v93 = BYTE2(v315);
                    int v94 = HIDWORD(v315);
                  }
                  CFArrayRef v48 = theArray;
                  if (BYTE10(v307))
                  {
                    int v97 = *(unsigned __int8 *)(VTMTSRenderPass + 323);
                    *(_OWORD *)&v327[8] = v326;
                    *(double *)short float v327 = v96;
                    *(double *)&v327[24] = v95;
                    long long v328 = v325;
                    setupAffine(0, v97, v327, (int)*(float *)v310, (int)*(float *)&v310[1], v310[2], v310[3], v311, DWORD1(v311), v90);
                    *(unsigned char *)(VTMTSRenderPass + 320) = 0;
                  }
                  else
                  {
                    setupRenderRotationAndCrop(v301, v277, v298, 0, v303[0], *(unsigned __int8 *)(DerivedStorage + 1354), v288 == 2, *(unsigned __int8 *)(VTMTSRenderPass + 320), *(unsigned char *)(DerivedStorage + 1353), *(unsigned char *)(VTMTSRenderPass + 323), v92, v93, v94, (int)*(float *)v310, (int)*(float *)&v310[1], v310[2], v310[3], v311, SDWORD1(v311),
                      SDWORD2(v348),
                      SHIDWORD(v348),
                      v349,
                      SDWORD1(v349),
                      SDWORD2(v349),
                      SHIDWORD(v349),
                      (void *)(VTMTSRenderPass + 40),
                      (void *)(VTMTSRenderPass + 48),
                      v90,
                      (id *)(VTMTSRenderPass + 2048));
                  }
                  if (v275)
                  {
                    *(_DWORD *)short float v327 = 0;
                    if ((void)v345)
                    {
                      FigCFDictionaryGetInt32IfPresent();
                      int v98 = *(_DWORD *)v327;
                    }
                    else
                    {
                      int v98 = 0;
                    }
                    setupBackgroundColor(*((float32_t *)&v353 + 1), *((float *)&v353 + 2), *((float *)&v353 + 3), *(float *)&v354, v303[0], *(_DWORD *)(VTMTSRenderPass + 316), SDWORD2(v312), SDWORD2(v313), v98, *(void **)(VTMTSRenderPass + 64));
                    *(unsigned char *)(VTMTSRenderPass + 1559) = 1;
                    *(_DWORD *)(v91 + 64) = HIDWORD(v314);
                  }
                  if (Mutable) {
                    int v99 = CFArrayGetCount(Mutable);
                  }
                  else {
                    int v99 = 0;
                  }
                  if (*(void *)(VTMTSRenderPass + 2048)) {
                    *(_DWORD *)(VTMTSRenderPass + 308) = v99++;
                  }
                  if (*(void *)(VTMTSRenderPass + 2056)) {
                    *(_DWORD *)(VTMTSRenderPass + 312) = v99;
                  }
                  if (*(unsigned char *)(VTMTSRenderPass + 320) && !*(unsigned char *)(VTMTSRenderPass + 324))
                  {
                    BOOL v100 = 0;
                    if (!*(unsigned char *)(VTMTSRenderPass + 1508) && DWORD1(v314) == 1)
                    {
                      BOOL v100 = 0;
                      if (__PAIR64__(DWORD2(v314), 1) == (DWORD2(v352) | 0x100000000)) {
                        BOOL v100 = HIDWORD(v352) == 1;
                      }
                    }
                  }
                  else
                  {
                    BOOL v100 = 0;
                  }
                  if (v288 == 3)
                  {
                    if (!v100)
                    {
                      VTMTSRenderPassDescriptorSetFunctionName(VTMTSRenderPass, @"VTMTSComputeFunction");
                      goto LABEL_205;
                    }
                    VTMTSRenderPassDescriptorSetFunctionName(VTMTSRenderPass, @"VTMTSComputeFunction1x1");
                  }
                  else
                  {
                    if (v288 == 2) {
                      VTMTSRenderPassDescriptorSetFunctionName(VTMTSRenderPass, @"VTMTSFragmentFunction");
                    }
                    if (!v100)
                    {
LABEL_205:
                      int64x2_t v101 = (int64x2_t)xmmword_193E80630;
LABEL_206:
                      *(int64x2_t *)(VTMTSRenderPass + 128) = v101;
                      *(void *)(VTMTSRenderPass + 144) = 1;
                      *(void *)&long long v102 = (int)v349;
                      *((void *)&v102 + 1) = SDWORD1(v349);
                      *(_OWORD *)(VTMTSRenderPass + 104) = v102;
                      *(void *)(VTMTSRenderPass + 120) = 1;
                      HIDWORD(v342) = 1065353216;
                      pixelFormat[0] = v344[0];
                      long long v305 = *(_OWORD *)v332;
                      long long v306 = v333;
                      long long v307 = v334;
                      v308[0] = v335;
                      long long v312 = v340;
                      long long v313 = *(_OWORD *)v341;
                      long long v314 = v342;
                      uint64_t v315 = v343;
                      *(_OWORD *)float v310 = v338;
                      long long v311 = v339;
                      long long v309 = v337;
                      v308[1] = v336;
                      long long v304 = v331;
                      *(_OWORD *)float v303 = *(_OWORD *)pixelFormat;
                      CFArrayAppendValue(theArray, (const void *)VTMTSRenderPass);
                      uint64_t appended = 0;
                      *(void *)(VTMTSRenderPass + 80) = cf;
                      *(void *)(VTMTSRenderPass + 88) = v299;
                      BOOL v286 = v280;
                      float v299 = 0;
                      unsigned int v103 = 0;
LABEL_207:
                      CFRelease((CFTypeRef)VTMTSRenderPass);
                      int v295 = v285;
                      goto LABEL_208;
                    }
                  }
                  int64x2_t v101 = vdupq_n_s64(1uLL);
                  goto LABEL_206;
                }
LABEL_219:
                uint64_t appended = v75;
                int v285 = v295;
                CFArrayRef v48 = theArray;
                unsigned int v103 = (void *)cf;
                goto LABEL_207;
              }
              uint64_t v80 = 0;
              while (1)
              {
                uint64_t v81 = *((void *)&v346 + v80);
                if (!v81)
                {
LABEL_161:
                  v293 += v80;
                  CFArrayRef Copy = v270;
                  CFArrayRef v10 = v274;
                  uint64_t DerivedStorage = v276;
                  CFAllocatorRef v8 = allocator;
                  goto LABEL_166;
                }
                uint64_t v82 = v344[0];
                int v83 = v348;
                int v84 = Mutable ? CFArrayGetCount(Mutable) : 0;
                uint64_t v85 = vtCreateTexDescGlobalWrite((uint64_t)v301, v82, Mutable, VTMTSRenderPass + 1428, v82, v81, v83, v293 + (int)v80, v80, v84, SDWORD2(v352), SHIDWORD(v352));
                if (v85) {
                  break;
                }
                if (++v80 == 4) {
                  goto LABEL_161;
                }
              }
              uint64_t appended = v85;
              CFArrayRef Copy = v270;
              CFArrayRef v10 = v274;
              CFAllocatorRef v8 = allocator;
LABEL_217:
              int v285 = v295;
              uint64_t DerivedStorage = v276;
              CFArrayRef v48 = theArray;
              unsigned int v103 = (void *)cf;
              if (VTMTSRenderPass) {
                goto LABEL_207;
              }
LABEL_208:
              if (Mutable) {
                CFRelease(Mutable);
              }

              CFDictionaryRef v284 = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
              if (!v286)
              {
                MEMORY[0x199705810](&VTMTSRenderPassBarrierGetTypeID_sRegisterVTMTSRenderPassBarrierOnce, RegisterVTMTSRenderPassBarrier);
                uint64_t Instance = (const void *)_CFRuntimeCreateInstance();
                CFArrayAppendValue(v48, Instance);
                if (Instance) {
                  CFRelease(Instance);
                }
              }
              int v56 = 3;
              int v55 = 1;
              if (((v272 == 1647392369) & ~v282) == 0)
              {
                if (!appended)
                {
                  CFBooleanRef v54 = (int64x2_t *)&unk_193E80000;
                  if (v286) {
                    goto LABEL_498;
                  }
                  goto LABEL_226;
                }
LABEL_495:
                if (v48) {
                  CFRelease(v48);
                }
LABEL_497:
                CFArrayRef v48 = 0;
                goto LABEL_571;
              }
            }
            *((void *)&v338 + 1) = *(void *)&v310[2];
LABEL_142:
            v327[0] = 0;
            getKernelTypeCapabilities_source(v277, v303[0], 0, v327);
            if (v327[0])
            {
              DWORD1(v307) = 3;
              DWORD2(v345) = 3;
              *(_DWORD *)(VTMTSRenderPass + 16) = 3;
              FigCFDictionaryGetIntIfPresent();
              *(_DWORD *)(VTMTSRenderPass + 2032) = v56;
              *(unsigned char *)(VTMTSRenderPass + 320) = 1;
              *(unsigned char *)(VTMTSRenderPass + 323) = 0;
            }
            else
            {
              FigSignalErrorAt();
            }
            goto LABEL_144;
          }
          int v293 = 0;
          int v295 = 0;
LABEL_226:
          int64x2_t v263 = v54[99];
          char v105 = 1;
          while (1)
          {
            char v281 = v105;
            uint16x8_t v106 = objc_msgSend(v301, "newBufferWithLength:options:", 4, 0, v262);
            if (*v298) {
              CFTypeID v107 = *v298;
            }
            else {
              CFTypeID v107 = @"com.apple.VideoToolbox.VTMetalTransferSession";
            }
            float16x8_t v289 = v106;
            [v106 setLabel:v107];
            uint32x4_t v108 = (void *)[v301 newBufferWithLength:124 options:0];
            if (*v298) {
              float16x8_t v109 = *v298;
            }
            else {
              float16x8_t v109 = @"com.apple.VideoToolbox.VTMetalTransferSession";
            }
            float16x8_t v287 = v108;
            [v108 setLabel:v109];
            long long v352 = v324[0];
            long long v353 = v324[1];
            uint64_t v354 = *(void *)&v324[2];
            long long v348 = v320;
            long long v349 = *(_OWORD *)v321;
            *(_OWORD *)float16x8_t v351 = v323;
            long long v350 = v322;
            *(_OWORD *)float v344 = *(_OWORD *)theDict;
            long long v345 = v317;
            long long v347 = v319;
            long long v346 = v318;
            long long v340 = v312;
            *(_OWORD *)float v341 = v313;
            long long v342 = v314;
            uint64_t v343 = v315;
            long long v336 = v308[1];
            long long v337 = v309;
            long long v338 = *(_OWORD *)v310;
            long long v339 = v311;
            *(_OWORD *)short float v332 = v305;
            long long v333 = v306;
            long long v334 = v307;
            long long v335 = v308[0];
            *(_OWORD *)pixelFormat = *(_OWORD *)v303;
            long long v331 = v304;
            CFTypeID v110 = &v310[2];
            if (HIDWORD(v315))
            {
              CFTypeID v110 = &v310[2];
              if (HIDWORD(v315) != 180) {
                CFTypeID v110 = &v310[3];
              }
            }
            unsigned int v111 = *v110;
            CFTypeID v112 = &v310[3];
            if (HIDWORD(v315))
            {
              CFTypeID v112 = &v310[3];
              if (HIDWORD(v315) != 180) {
                CFTypeID v112 = &v310[2];
              }
            }
            unsigned int v113 = *v112;
            int v114 = HIDWORD(v315) | BYTE1(v315) | BYTE2(v315);
            BOOL v115 = v114 == 0;
            if (v114) {
              BOOL v116 = 1;
            }
            else {
              BOOL v116 = *(unsigned char *)(DerivedStorage + 1353) != 0;
            }
            BOOL v117 = v111 != 0;
            if (v111 == v321[0]) {
              BOOL v117 = 0;
            }
            BOOL v118 = v113 != 0;
            if (v113 == v321[1]) {
              BOOL v118 = 0;
            }
            BOOL v267 = v116;
            int v119 = v117 && !v116;
            if (BYTE10(v307)) {
              int v120 = 0;
            }
            else {
              int v120 = v119;
            }
            if (BYTE10(v307)) {
              int v121 = 0;
            }
            else {
              int v121 = v118 && !v116;
            }
            if (v113 > v321[1]) {
              int v122 = v121;
            }
            else {
              int v122 = 0;
            }
            BYTE8(v307) = v115;
            LOBYTE(v326) = 0;
            int v283 = *(unsigned __int8 *)(DerivedStorage + 1354);
            if (v111 > v321[0]) {
              int v123 = v120;
            }
            else {
              int v123 = 0;
            }
            cfa = (_DWORD *)vtCreateVTMTSRenderPass();
            cfa[387] = 1;
            if (v271 == 2 && ((_BYTE)v314 || *((float *)&v314 + 3) < 1.0))
            {
              *((unsigned char *)cfa + 1558) = 1;
              BYTE8(v307) = 0;
            }
            int v273 = v122 | v123;
            CFArrayRef v124 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
            if (v120 && v121)
            {
              int v125 = v303[0];
              LODWORD(v349) = v310[2];
              *((void *)&v349 + 1) = __PAIR64__(DWORD1(v349), v310[2]);
              *(void *)&long long v339 = __PAIR64__(DWORD1(v349), v310[2]);
              HIDWORD(v338) = DWORD1(v349);
              *(void *)&long long v338 = 0;
              *((void *)&v348 + 1) = 0;
              *((void *)&v352 + 1) = *(void *)((char *)&v314 + 4);
              LOBYTE(v325) = 0;
              BOOL v329 = 0;
              getKernelTypeCapabilities_source(v277, v303[0], (char *)&v325, (char *)&v329);
              int v126 = 2 * ((_BYTE)v325 != 0);
              if (v329) {
                int v126 = 3;
              }
              if (*(unsigned char *)(DerivedStorage + 1289)) {
                int v127 = 2;
              }
              else {
                int v127 = v126;
              }
              DWORD1(v307) = v127;
              cfa[4] = v127;
              int v269 = v127;
              DWORD2(v345) = v127;
              uint64_t IntermediateScalingFormat = vtmtsGetIntermediateScalingFormat(v277, v125, (int *)pixelFormat, (uint64_t)v332, 1, (int *)&v334);
              uint64_t appended = IntermediateScalingFormat;
              if (v273)
              {
                int v129 = 2;
                LODWORD(v334) = 2;
              }
              else
              {
                int v129 = v334;
              }
              v344[0] = pixelFormat[0];
              LODWORD(v348) = v129;
              uint64_t v132 = (uint64_t)cfa;
              if (IntermediateScalingFormat) {
                goto LABEL_429;
              }
              CFDictionaryRef v134 = CVPixelFormatDescriptionCreateWithPixelFormatType(allocator, pixelFormat[0]);
              if (v134)
              {
                CFDictionaryRef v135 = v134;
                v327[0] = 0;
                FigCFDictionaryGetBooleanIfPresent();
                if (v327[0])
                {
                  CFArrayRef Value = (const __CFArray *)FigCFDictionaryGetValue();
                  if (Value)
                  {
                    CFArrayRef v137 = Value;
                    CFTypeID v138 = CFGetTypeID(Value);
                    if (v138 == CFArrayGetTypeID()) {
                      LODWORD(Value) = CFArrayGetCount(v137);
                    }
                    else {
                      LODWORD(Value) = 0;
                    }
                  }
                  if (Value) {
                    int v139 = Value - 1;
                  }
                  else {
                    int v139 = 0;
                  }
                }
                else
                {
                  int v139 = -1;
                }
                CFRelease(v135);
              }
              else
              {
                FigSignalErrorAt();
                int v139 = -1;
              }
              uint64_t v143 = 0;
              uint64_t v144 = *(void *)v332;
              float v145 = (uint64_t *)&v346;
              do
              {
                int v146 = v349;
                int v147 = DWORD1(v349);
                *float v145 = v144;
                if (v143)
                {
                  if (DWORD2(v352) == 2 && v139 != v143)
                  {
                    int v149 = (int)v349 >= -1 ? v349 + 1 : (int)v349 + 2;
                    int v146 = v149 >> 1;
                    if (HIDWORD(v352) == 2)
                    {
                      if (SDWORD1(v349) >= -1) {
                        int v150 = DWORD1(v349) + 1;
                      }
                      else {
                        int v150 = DWORD1(v349) + 2;
                      }
                      int v147 = v150 >> 1;
                    }
                  }
                }
                uint64_t MetalTextureForList = vtAllocateMetalTextureForList(v301, v146, v147, v144, (v293 + v143), v297);
                if (MetalTextureForList)
                {
                  uint64_t appended = MetalTextureForList;
                  CFArrayRef v10 = v274;
                  goto LABEL_339;
                }
                if (v143 == 3) {
                  goto LABEL_334;
                }
                uint64_t v144 = *(void *)&v332[2 * v143 + 2];
                ++v145;
                ++v143;
              }
              while (v144);
              if ((v143 - 1) <= 2)
              {
                int v152 = 3 - v143;
                if (v143 > 3) {
                  int v152 = 0;
                }
                bzero(v145, (8 * v152 + 8));
              }
LABEL_334:
              int v121 = 0;
              uint64_t v132 = (uint64_t)cfa;
              int v283 = 1;
              *((unsigned char *)cfa + 322) = 1;
              CFArrayRef v10 = v274;
              if (!cfa[4])
              {
LABEL_335:
                uint64_t appended = 4294954391;
LABEL_336:
                CFArrayRef v48 = theArray;
                goto LABEL_429;
              }
            }
            else
            {
              if (v120)
              {
                v327[0] = 0;
                LOBYTE(v325) = 0;
                int v130 = v344[0];
                getKernelTypeCapabilities(v277, v303[0], v344[0], v327, (char *)&v325);
                int v131 = 2 * (v327[0] != 0);
                if ((_BYTE)v325) {
                  int v131 = 3;
                }
                if (*(unsigned char *)(DerivedStorage + 1289)) {
                  int v131 = 2;
                }
                if (v327[0] && *(unsigned char *)(DerivedStorage + 1352)) {
                  int v131 = 2;
                }
                int v120 = 0;
                DWORD1(v307) = v131;
                cfa[4] = v131;
                *((unsigned char *)cfa + 321) = 1;
                LODWORD(v339) = v349;
                DWORD2(v345) = v131;
                DWORD2(v349) = v321[2];
                DWORD2(v338) = v349;
                pixelFormat[0] = v130;
                uint64_t v132 = (uint64_t)cfa;
              }
              else if (v121)
              {
                v327[0] = 0;
                LOBYTE(v325) = 0;
                int v133 = v344[0];
                getKernelTypeCapabilities(v277, v303[0], v344[0], v327, (char *)&v325);
                int v131 = 2 * (v327[0] != 0);
                if ((_BYTE)v325) {
                  int v131 = 3;
                }
                if (*(unsigned char *)(DerivedStorage + 1289)) {
                  int v131 = 2;
                }
                if (v327[0] && *(unsigned char *)(DerivedStorage + 1352)) {
                  int v131 = 2;
                }
                int v120 = 0;
                int v121 = 0;
                DWORD1(v307) = v131;
                cfa[4] = v131;
                *((unsigned char *)cfa + 322) = 1;
                DWORD1(v339) = DWORD1(v349);
                DWORD2(v345) = v131;
                HIDWORD(v349) = DWORD1(v349);
                HIDWORD(v338) = DWORD1(v349);
                pixelFormat[0] = v133;
                uint64_t v132 = (uint64_t)cfa;
              }
              else
              {
                v327[0] = 0;
                LOBYTE(v325) = 0;
                getKernelTypeCapabilities(v277, v303[0], v344[0], v327, (char *)&v325);
                int v131 = 2 * (v327[0] != 0);
                if ((_BYTE)v325) {
                  int v131 = 3;
                }
                if (*(unsigned char *)(DerivedStorage + 1289)) {
                  int v131 = 2;
                }
                if (v327[0] && *(unsigned char *)(DerivedStorage + 1352)) {
                  int v131 = 2;
                }
                BOOL v140 = 0;
                DWORD1(v307) = v131;
                cfa[4] = v131;
                DWORD2(v345) = v131;
                int v141 = v321[0];
                int v142 = v321[1];
                if (v111 == v321[0] && v113 == v321[1])
                {
                  if (*(unsigned char *)(DerivedStorage + 1302)) {
                    BOOL v140 = 0;
                  }
                  else {
                    BOOL v140 = BYTE10(v307) == 0;
                  }
                  int v142 = v113;
                }
                int v120 = 0;
                int v121 = 0;
                uint64_t v132 = (uint64_t)cfa;
                *((unsigned char *)cfa + 320) = v140;
                *((unsigned char *)cfa + 323) = *(unsigned char *)(DerivedStorage + 1303);
                *((void *)&v338 + 1) = __PAIR64__(v142, v141);
              }
              int v269 = v131;
              if (!v131) {
                goto LABEL_335;
              }
            }
            double v154 = (_DWORD *)(v132 + 208);
            if (!v120 && !v121)
            {
              uint64_t v155 = vtmtsSetUpProcessingNeeds(v301, v303[0], v344[0], (const __CFDictionary **)&v303[2], *(const __CFDictionary **)&v344[2], v284, v265, &v341[1], v341, (int *)&v340 + 2, v341[2], v351[3], v351[2], v351[0], v352, v298, v268, v132 + 208, (_DWORD *)&v312 + 3,
                       &v351[1],
                       (uint64_t)v289,
                       (void *)(v132 + 2056),
                       (unsigned char *)&v307 + 9,
                       (BOOL *)&v326);
              if (v155)
              {
                uint64_t appended = v155;
                goto LABEL_336;
              }
            }
            if ((void)v305)
            {
              uint64_t v156 = 0;
              *double v154 = v303[0];
              do
              {
                uint64_t v157 = *((void *)&v305 + v156);
                if (!v157) {
                  break;
                }
                LODWORD(v262) = v156;
                uint64_t v158 = vtCreateTexDescGlobalSample((uint64_t)v301, (uint64_t)v124, (uint64_t)v154, v303[0], v157, v307);
                if (v158)
                {
                  uint64_t appended = v158;
                  goto LABEL_339;
                }
                ++v156;
              }
              while (v156 != 4);
              int v159 = v156 + v295;
              uint64_t v132 = (uint64_t)cfa;
            }
            else
            {
              if ((_BYTE)v326) {
                int v160 = 1;
              }
              else {
                int v160 = v273;
              }
              uint64_t v161 = vtmtsBuildSource(v301, v303, v160, v132 + 208, v124);
              int v159 = v295;
              if (v161)
              {
                uint64_t appended = v161;
                CFArrayRef v48 = theArray;
                goto LABEL_429;
              }
            }
            int v266 = v159;
            if (!(void)v346) {
              break;
            }
            uint64_t v162 = 0;
            uint64_t v163 = v132 + 1428;
            while (1)
            {
              uint64_t v164 = *((void *)&v346 + v162);
              if (!v164)
              {
LABEL_375:
                uint64_t v132 = (uint64_t)cfa;
                v293 += v162;
                CFArrayRef v10 = v274;
                uint64_t DerivedStorage = v276;
                goto LABEL_383;
              }
              uint64_t v165 = v303[0];
              int v166 = v344[0];
              int v167 = v348;
              int v168 = v124 ? CFArrayGetCount(v124) : 0;
              uint64_t v169 = vtCreateTexDescGlobalWrite((uint64_t)v301, v165, v124, v163, v166, v164, v167, v293 + (int)v162, v162, v168, SDWORD2(v352), SHIDWORD(v352));
              if (v169) {
                break;
              }
              if (++v162 == 4) {
                goto LABEL_375;
              }
            }
            uint64_t appended = v169;
            CFArrayRef v10 = v274;
            uint64_t DerivedStorage = v276;
LABEL_339:
            uint64_t v132 = (uint64_t)cfa;
LABEL_340:
            CFArrayRef v48 = theArray;
            if (!v132)
            {
              if (v124) {
                goto LABEL_342;
              }
              goto LABEL_343;
            }
LABEL_429:
            CFRelease((CFTypeRef)v132);
            if (v124) {
LABEL_342:
            }
              CFRelease(v124);
LABEL_343:

            if (appended) {
              goto LABEL_495;
            }
            if (v310[2] != v321[0] || v310[3] != v321[1])
            {
              MEMORY[0x199705810](&VTMTSRenderPassBarrierGetTypeID_sRegisterVTMTSRenderPassBarrierOnce, RegisterVTMTSRenderPassBarrier);
              double v153 = (const void *)_CFRuntimeCreateInstance();
              CFArrayAppendValue(v48, v153);
              if (v153) {
                CFRelease(v153);
              }
              char v105 = 0;
              if (v281) {
                continue;
              }
            }
            goto LABEL_498;
          }
          if (v124) {
            int v170 = CFArrayGetCount(v124);
          }
          else {
            int v170 = 0;
          }
          v344[1] = v170;
          if ((_BYTE)v326) {
            int v171 = 1;
          }
          else {
            int v171 = v273;
          }
          uint64_t v172 = vtmtsBuildDestination(v301, (unsigned int *)v344, v171, (uint64_t)v154, v124, v297);
          if (v172)
          {
            uint64_t appended = v172;
            goto LABEL_340;
          }
LABEL_383:
          if (v124) {
            CFTypeRef v173 = CFRetain(v124);
          }
          else {
            CFTypeRef v173 = 0;
          }
          *(void *)(v132 + 200) = v173;
          vtmtsFixUpProcessingShortcuts((uint64_t)v154, v326);
          *(void *)(v132 + 348) = v313;
          *(_DWORD *)(v132 + 340) = DWORD2(v312);
          *(_DWORD *)(v132 + 356) = DWORD2(v313);
          *(void *)(v132 + 1536) = *(void *)&v351[2];
          *(_DWORD *)(v132 + 1528) = v351[0];
          *(_DWORD *)(v132 + 1544) = v352;

          CFArrayRef v174 = (void *)[v301 newBufferWithLength:512 options:0];
          *(void *)(v132 + 64) = v174;
          if (*v298) {
            int16x8x2_t v175 = *v298;
          }
          else {
            int16x8x2_t v175 = @"com.apple.VideoToolbox.VTMetalTransferSession";
          }
          objc_msgSend(v174, "setLabel:", v175, v262);
          uint64_t v176 = [*(id *)(v132 + 64) contents];
          uint64_t v177 = v176;
          if (BYTE10(v307))
          {
            int v178 = *(unsigned __int8 *)(v132 + 323);
            *(_OWORD *)short float v327 = v308[0];
            *(_OWORD *)&v327[16] = v308[1];
            long long v328 = v309;
            setupAffine(0, v178, v327, (int)*(float *)v310, (int)*(float *)&v310[1], v310[2], v310[3], v311, DWORD1(v311), v176);
            *(unsigned char *)(v132 + 320) = 0;
            CFArrayRef v48 = theArray;
            int v179 = v283;
          }
          else
          {
            CFArrayRef v48 = theArray;
            char v180 = v267 || *(unsigned char *)(DerivedStorage + 1302) != 0;
            int v179 = v283;
            setupRenderRotationAndCrop(v301, v277, v298, 0, v303[0], v283, v269 == 2, *(unsigned __int8 *)(v132 + 320), v180, *(unsigned char *)(v132 + 323), BYTE1(v315), BYTE2(v315), SHIDWORD(v315), (int)*(float *)v310, (int)*(float *)&v310[1], v310[2], v310[3], v311, SDWORD1(v311),
              SDWORD2(v348),
              SHIDWORD(v348),
              v349,
              SDWORD1(v349),
              SDWORD2(v349),
              SHIDWORD(v349),
              (void *)(v132 + 40),
              (void *)(v132 + 48),
              v176,
              (id *)(v132 + 2048));
          }
          BOOL v181 = v271 == 2 || v179 == 0;
          BOOL v182 = v275;
          if (!v181) {
            BOOL v182 = 0;
          }
          if (v182)
          {
            *(_DWORD *)short float v327 = 0;
            if ((void)v345)
            {
              FigCFDictionaryGetInt32IfPresent();
              int v183 = *(_DWORD *)v327;
            }
            else
            {
              int v183 = 0;
            }
            setupBackgroundColor(*((float32_t *)&v353 + 1), *((float *)&v353 + 2), *((float *)&v353 + 3), *(float *)&v354, v303[0], *(_DWORD *)(v132 + 316), SDWORD2(v312), SDWORD2(v313), v183, *(void **)(v132 + 64));
            *(unsigned char *)(v132 + 1559) = 1;
            *(_DWORD *)(v177 + 64) = HIDWORD(v314);
          }
          if (v124) {
            int v184 = CFArrayGetCount(v124);
          }
          else {
            int v184 = 0;
          }
          if (*(void *)(v132 + 2048)) {
            *(_DWORD *)(v132 + 308) = v184++;
          }
          if (*(void *)(v132 + 2056)) {
            *(_DWORD *)(v132 + 312) = v184;
          }
          if (*(unsigned char *)(v132 + 320) && !*(unsigned char *)(v132 + 324))
          {
            BOOL v185 = 0;
            if (!*(unsigned char *)(v132 + 1508) && DWORD1(v314) == 1)
            {
              BOOL v185 = 0;
              if (__PAIR64__(DWORD2(v314), 1) == (DWORD2(v352) | 0x100000000)) {
                BOOL v185 = HIDWORD(v352) == 1;
              }
            }
          }
          else
          {
            BOOL v185 = 0;
          }
          if (v269 == 3)
          {
            if (!v185)
            {
              VTMTSRenderPassDescriptorSetFunctionName(v132, @"VTMTSComputeFunction");
LABEL_427:
              int64x2_t v186 = v263;
              goto LABEL_428;
            }
            VTMTSRenderPassDescriptorSetFunctionName(v132, @"VTMTSComputeFunction1x1");
          }
          else
          {
            if (v269 == 2) {
              VTMTSRenderPassDescriptorSetFunctionName(v132, @"VTMTSFragmentFunction");
            }
            if (!v185) {
              goto LABEL_427;
            }
          }
          int64x2_t v186 = vdupq_n_s64(1uLL);
LABEL_428:
          *(int64x2_t *)(v132 + 128) = v186;
          *(void *)(v132 + 144) = 1;
          int8x8_t v187 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v283 == 0), 0x1FuLL)), *(int8x8_t *)((char *)&v349 + 8), *(int8x8_t *)&v349);
          *(void *)&long long v188 = v187.i32[0];
          *((void *)&v188 + 1) = v187.i32[1];
          *(_OWORD *)(v132 + 104) = v188;
          *(void *)(v132 + 120) = 1;
          HIDWORD(v342) = 1065353216;
          long long v305 = *(_OWORD *)v332;
          long long v306 = v333;
          long long v307 = v334;
          v308[0] = v335;
          *(_OWORD *)float v303 = *(_OWORD *)pixelFormat;
          long long v304 = v331;
          uint64_t v315 = v343;
          long long v313 = *(_OWORD *)v341;
          long long v312 = v340;
          *(_OWORD *)float v310 = v338;
          long long v311 = v339;
          long long v309 = v337;
          v308[1] = v336;
          long long v314 = v342;
          CFArrayAppendValue(v48, (const void *)v132);
          uint64_t appended = 0;
          *(void *)(v132 + 80) = v289;
          *(void *)(v132 + 88) = v287;
          int v295 = v266;
          float16x8_t v287 = 0;
          float16x8_t v289 = 0;
          goto LABEL_429;
        }
LABEL_65:
        CFDictionaryRef v44 = DescriptionWithPixelFormatType;
        CFTypeID v45 = 0;
        char v46 = 1;
        goto LABEL_68;
      }
      if (v271 == 2)
      {
        if (Copy)
        {
          if (CFArrayGetCount(Copy) > 1)
          {
            CFDictionaryRef v264 = DescriptionWithPixelFormatType;
            int v43 = CFArrayGetCount(Copy);
            LOBYTE(v303[0]) = 0;
            LOBYTE(v344[0]) = 0;
            if (CFArrayGetCount(Copy) >= 1) {
              CFArrayGetValueAtIndex(Copy, 0);
            }
            pixelFormat[0] = 0;
            FigCFDictionaryGetInt32IfPresent();
            int v189 = pixelFormat[0];
            pixelFormat[0] = 0;
            FigCFDictionaryGetInt32IfPresent();
            getKernelTypeCapabilities(v277, v189, pixelFormat[0], (char *)v303, (char *)v344);
            if (LOBYTE(v344[0])) {
              int v190 = 3;
            }
            else {
              int v190 = 2 * (LOBYTE(v303[0]) != 0);
            }
            if (*(unsigned char *)(DerivedStorage + 1289)) {
              int v191 = 2;
            }
            else {
              int v191 = v190;
            }
            if (LOBYTE(v303[0]) && *(unsigned char *)(DerivedStorage + 1352)) {
              int v191 = 2;
            }
            if (v43 <= 8)
            {
              CFArrayRef v48 = theArray;
              uint64_t appended = vtmtsAppendCompositePass(v301, v277, Copy, 0, 0, (unsigned int *)theDict, v264, v191, v297, (uint64_t)v298, v268, theArray);
              goto LABEL_494;
            }
            CFIndex v192 = CFArrayGetCount(Copy);
            *(void *)&long long v340 = 0;
            long long v339 = 0u;
            long long v338 = 0u;
            long long v337 = 0u;
            long long v336 = 0u;
            long long v335 = 0u;
            long long v334 = 0u;
            long long v333 = 0u;
            *(_OWORD *)short float v332 = 0u;
            long long v331 = 0u;
            *(_OWORD *)pixelFormat = 0u;
            uint64_t v300 = v192;
            CFArrayRef MutableCopy = CFArrayCreateMutableCopy(v8, v192, Copy);
            uint64_t v194 = vtAllocateMetalTextureForList(v301, v321[2], v321[3], 115, 0, v297);
            if (v194)
            {
              uint64_t appended = v194;
              CFMutableDictionaryRef v294 = 0;
              CFMutableDictionaryRef v195 = 0;
            }
            else
            {
              CFMutableDictionaryRef v195 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (v195)
              {
                FigCFDictionarySetFloat();
                FigCFDictionarySetInt32();
                FigCFDictionarySetInt32();
                FigCFDictionarySetInt32();
                FigCFDictionarySetInt32();
                FigCFDictionarySetInt32();
                FigCFDictionarySetInt32();
                FigCFDictionarySetInt32();
                FigCFDictionarySetFloat();
                FigCFDictionarySetFloat();
                FigCFDictionarySetFloat();
                FigCFDictionarySetFloat();
                FigCFDictionarySetFloat();
                FigCFDictionarySetFloat();
              }
              CFMutableDictionaryRef v196 = CFDictionaryCreateMutableCopy(v8, 0, theDict[1]);
              if (v196) {
                FigCFDictionarySetInt32();
              }
              CFMutableDictionaryRef v294 = v196;
              if (v300 >= 1)
              {
                int v296 = v191;
                long long v197 = 0;
                int v199 = 0;
                CFMutableDictionaryRef cfb = v195;
                CFIndex v200 = v300;
                uint64_t v201 = v300;
                while (1)
                {
                  unint64_t v202 = v200;
                  if (v197) {
                    CFRelease(v197);
                  }
                  if (v200 == v201) {
                    unint64_t v203 = 8;
                  }
                  else {
                    unint64_t v203 = 7;
                  }
                  uint64_t v204 = v201;
                  if ((uint64_t)v203 >= (uint64_t)v202) {
                    unint64_t v205 = v202;
                  }
                  else {
                    unint64_t v205 = v203;
                  }
                  short float v206 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
                  long long v197 = v206;
                  BOOL v63 = v202 == v204;
                  BOOL v207 = v202 != v204;
                  if (!v63) {
                    CFArrayAppendValue(v206, cfb);
                  }
                  do
                  {
                    int v208 = CFArrayGetValueAtIndex(MutableCopy, 0);
                    CFArrayAppendValue(v197, v208);
                    CFArrayRemoveValueAtIndex(MutableCopy, 0);
                    --v205;
                  }
                  while (v205);
                  if (v202 <= v203)
                  {
                    CFRange v210 = (char *)theDict;
                    CFDictionaryRef v211 = v264;
                  }
                  else
                  {
                    long long v338 = v324[0];
                    long long v339 = v324[1];
                    *(void *)&long long v340 = *(void *)&v324[2];
                    long long v334 = v320;
                    long long v335 = *(_OWORD *)v321;
                    long long v337 = v323;
                    long long v336 = v322;
                    pixelFormat[1] = HIDWORD(theDict[0]);
                    long long v331 = v317;
                    long long v333 = v319;
                    *(_OWORD *)short float v332 = v318;
                    pixelFormat[0] = 1380411457;
                    *(void *)&pixelFormat[2] = v294;
                    CFDictionaryRef v209 = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
                    *(void *)&long long v331 = v209;
                    *(void *)short float v332 = 115;
                    LODWORD(v334) = 2;
                    DWORD1(v338) = getNativeTextureTypeForPixelFormat(pixelFormat[0]);
                    getSubsamplingFromPixelDescription(v209, (_DWORD *)&v338 + 2, (_DWORD *)&v338 + 3);
                    CFRange v210 = (char *)pixelFormat;
                    CFDictionaryRef v211 = (const __CFDictionary *)v331;
                  }
                  CFDictionaryRef v198 = (const __CFDictionary *)CFRetain(v211);
                  if (v202 != v300)
                  {
                    *(void *)(v210 + 156) = 0;
                    *(void *)(v210 + 148) = 0;
                  }
                  uint64_t v212 = vtmtsAppendCompositePass(v301, v277, v197, v207, v199, (unsigned int *)v210, v198, v296, v297, (uint64_t)v298, v268, theArray);
                  if (v212) {
                    break;
                  }
                  if (MutableCopy) {
                    CFIndex v200 = CFArrayGetCount(MutableCopy);
                  }
                  else {
                    CFIndex v200 = 0;
                  }
                  CFAllocatorRef v8 = allocator;
                  if (v202 > v203)
                  {
                    MEMORY[0x199705810](&VTMTSRenderPassBarrierGetTypeID_sRegisterVTMTSRenderPassBarrierOnce, RegisterVTMTSRenderPassBarrier);
                    int16x8x2_t v213 = (const void *)_CFRuntimeCreateInstance();
                    CFArrayAppendValue(theArray, v213);
                    if (v213) {
                      CFRelease(v213);
                    }
                  }
                  uint64_t v201 = v300;
                  int v199 = v300 + ~v200;
                  uint64_t DerivedStorage = v276;
                  if (v200 <= 0)
                  {
                    uint64_t appended = 0;
                    CFArrayRef v10 = v274;
                    goto LABEL_483;
                  }
                }
                uint64_t appended = v212;
                CFArrayRef v10 = v274;
                uint64_t DerivedStorage = v276;
LABEL_483:
                CFMutableDictionaryRef v195 = cfb;
                goto LABEL_484;
              }
              uint64_t appended = 0;
            }
            long long v197 = 0;
            CFDictionaryRef v198 = 0;
LABEL_484:
            if (MutableCopy) {
              CFRelease(MutableCopy);
            }
            if (v197) {
              CFRelease(v197);
            }
            if (v198) {
              CFRelease(v198);
            }
            if (v195) {
              CFRelease(v195);
            }
            CFArrayRef v48 = theArray;
            if (v294) {
              CFRelease(v294);
            }
LABEL_494:
            if (!appended) {
              goto LABEL_498;
            }
            goto LABEL_495;
          }
          goto LABEL_61;
        }
        goto LABEL_65;
      }
      uint64_t v47 = FigSignalErrorAt();
      CFArrayRef v48 = theArray;
      if (v47)
      {
        uint64_t appended = v47;
        goto LABEL_571;
      }
LABEL_498:
      if (v48)
      {
        if (CFArrayGetCount(v48) >= 1)
        {
          for (CFIndex i = 0; CFArrayGetCount(v48) > i; ++i)
          {
            float v215 = CFArrayGetValueAtIndex(v48, i);
            if (!v215) {
              continue;
            }
            float v216 = v215;
            CFTypeID v217 = CFGetTypeID(v215);
            MEMORY[0x199705810](&VTMTSRenderPassDescriptorGetTypeID_sRegisterVTMTSRenderPassDescriptorOnce, RegisterVTMTSRenderPassDescriptor);
            if (v217 != sVTMTSRenderPassDescriptorID) {
              continue;
            }
            CFArrayRef v218 = (const __CFArray *)*((void *)v216 + 25);
            if (v218)
            {
              CFIndex v219 = CFArrayGetCount(v218);
              if (v219)
              {
                CFIndex v220 = v219;

                float v221 = (void *)[*(id *)(DerivedStorage + 1464) newBufferWithLength:16 * v220 options:0];
                *((void *)v216 + 9) = v221;
                if (*(void *)(DerivedStorage + 1344)) {
                  float v222 = *(__CFString **)(DerivedStorage + 1344);
                }
                else {
                  float v222 = @"com.apple.VideoToolbox.VTMetalTransferSession";
                }
                objc_msgSend(v221, "setLabel:", v222, v262);
              }
            }
            float v223 = *(void **)(DerivedStorage + 1464);
            float v224 = *(__CFString **)(DerivedStorage + 1344);
            float v225 = *(void **)(DerivedStorage + 1600);
            char v226 = *(unsigned char *)(DerivedStorage + 1317);
            *((unsigned char *)v216 + 1556) = 0;
            *((unsigned char *)v216 + 1557) = v226;
            int v227 = *((_DWORD *)v216 + 4);
            if (v227 == 3)
            {

              *(void *)pixelFormat = 0;
              *(void *)float v303 = 0;
              if (*((_DWORD *)v216 + 4) == 3)
              {
                loadMTLFunctionConstants((unsigned int *)v216 + 52, (id *)pixelFormat);
                float v234 = *(void **)pixelFormat;
                int8x16x2_t v235 = (void *)[v225 newFunctionWithName:*((void *)v216 + 3) constantValues:*(void *)pixelFormat error:v303];
                int16x8x2_t v236 = v235;
                if (v235)
                {
                  if (v224) {
                    float v237 = v224;
                  }
                  else {
                    float v237 = @"com.apple.VideoToolbox.VTMetalTransferSession";
                  }
                  objc_msgSend(v235, "setLabel:", v237, v262);
                  short float v238 = (void *)[v223 newComputePipelineStateWithFunction:v236 error:v303];
                  short float v239 = v238;
                  if (!*(void *)v303)
                  {
                    unint64_t v240 = [v238 threadExecutionWidth];
                    unint64_t v241 = [v239 maxTotalThreadsPerThreadgroup];
                    uint64_t appended = 0;
                    unint64_t v242 = (v240
                          + (unint64_t)(*((void *)v216 + 13) + *((void *)v216 + 16) - 1)
                          / *((void *)v216 + 16)
                          - 1)
                         / v240;
                    unint64_t v243 = v241 / v240
                         + (unint64_t)(*((void *)v216 + 14) + *((void *)v216 + 17) - 1)
                         / *((void *)v216 + 17)
                         - 1;
                    *((void *)v216 + 19) = v240;
                    *((void *)v216 + 20) = v241 / v240;
                    *((void *)v216 + 21) = 1;
                    *((void *)v216 + 22) = v242;
                    *((void *)v216 + 23) = v243 / (v241 / v240);
                    *((void *)v216 + 24) = 1;
                    *((void *)v216 + 7) = v239;
                    goto LABEL_526;
                  }
                }
                else
                {
                  short float v239 = 0;
                }
                uint64_t appended = 4294954394;
              }
              else
              {
                uint64_t appended = FigSignalErrorAt();
                float v234 = 0;
                int16x8x2_t v236 = 0;
LABEL_526:
                short float v239 = 0;
              }

              goto LABEL_546;
            }
            if (v227 != 2) {
              continue;
            }

            *(void *)pixelFormat = 0;
            *(void *)float v303 = 0;
            if (*((_DWORD *)v216 + 4) != 2)
            {
              uint64_t appended = FigSignalErrorAt();
              float v228 = 0;
              float v230 = 0;
              short float v244 = 0;
              id v245 = 0;
              float v229 = 0;
              goto LABEL_545;
            }
            loadMTLFunctionConstants((unsigned int *)v216 + 52, (id *)pixelFormat);
            float v228 = *(void **)pixelFormat;
            float v229 = (void *)[v225 newFunctionWithName:@"VTMTSVertexFunction" constantValues:*(void *)pixelFormat error:v303];
            float v230 = v229;
            if (v229)
            {
              if (v224) {
                float v231 = v224;
              }
              else {
                float v231 = @"com.apple.VideoToolbox.VTMetalTransferSession";
              }
              objc_msgSend(v229, "setLabel:", v231, v262);
              int v232 = *((_DWORD *)v216 + 376);
              if (v232 == 1)
              {
                long long v233 = @"VTMTSFragmentFunction";
              }
              else
              {
                if (v232 != 2)
                {
                  short float v244 = 0;
                  id v245 = 0;
                  float v229 = 0;
                  goto LABEL_543;
                }
                long long v233 = @"VTMTSFragmentFunctionf";
              }
              float v229 = (void *)[v225 newFunctionWithName:v233 constantValues:v228 error:v303];
              short float v244 = v229;
              if (v229)
              {
                [v229 setLabel:v231];
                id v245 = objc_alloc_init(MEMORY[0x1E4F352F0]);
                [v245 setVertexFunction:v230];
                [v245 setFragmentFunction:v244];
                CFArrayRef v246 = (const __CFArray *)*((void *)v216 + 25);
                if (v246)
                {
                  CFIndex v247 = 0;
                  do
                  {
                    if (CFArrayGetCount(v246) <= v247) {
                      break;
                    }
                    short float v248 = CFArrayGetValueAtIndex(*((CFArrayRef *)v216 + 25), v247);
                    if (*((_DWORD *)v248 + 16) == 1) {
                      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v245, "colorAttachments"), "objectAtIndexedSubscript:", *((unsigned int *)v248 + 11)), "setPixelFormat:", v248[4]);
                    }
                    ++v247;
                    CFArrayRef v246 = (const __CFArray *)*((void *)v216 + 25);
                  }
                  while (v246);
                }
                float v229 = (void *)[v223 newRenderPipelineStateWithDescriptor:v245 error:v303];
                if (*(void *)v303)
                {
                  uint64_t appended = 4294954394;
                }
                else
                {
                  uint64_t appended = 0;
                  *((void *)v216 + 4) = v229;
                  float v229 = 0;
                }
                goto LABEL_545;
              }
            }
            else
            {
              short float v244 = 0;
            }
            id v245 = 0;
LABEL_543:
            uint64_t appended = 4294954394;
LABEL_545:

            uint64_t DerivedStorage = v276;
LABEL_546:
            CFArrayRef v10 = v274;
            CFArrayRef v48 = theArray;
            if (appended)
            {
              CFArrayRef Copy = v270;
              goto LABEL_571;
            }
          }
        }
        short float v249 = *(const void **)(DerivedStorage + 1616);
        *(void *)(DerivedStorage + 1616) = v48;
        CFRetain(v48);
        if (v249) {
          CFRelease(v249);
        }
        float v250 = *(const void **)(DerivedStorage + 32);
        CFArrayRef Copy = v270;
        *(void *)(DerivedStorage + 32) = v270;
        if (v270) {
          CFRetain(v270);
        }
        if (v250) {
          CFRelease(v250);
        }
        float v251 = *(const void **)(DerivedStorage + 40);
        *(void *)(DerivedStorage + 40) = v10;
        if (v10) {
          CFRetain(v10);
        }
        if (v251) {
          CFRelease(v251);
        }
      }
      else
      {
        float16x8_t v252 = *(void **)(DerivedStorage + 1560);
        *(void *)(DerivedStorage + 1560) = 0;

        float16x8_t v253 = *(void **)(DerivedStorage + 1568);
        *(void *)(DerivedStorage + 1568) = 0;

        float v254 = *(void **)(DerivedStorage + 1576);
        *(void *)(DerivedStorage + 1576) = 0;

        float v255 = *(void **)(DerivedStorage + 1584);
        *(void *)(DerivedStorage + 1584) = 0;

        float v256 = *(void **)(DerivedStorage + 1504);
        *(void *)(DerivedStorage + 1504) = 0;

        float v257 = *(void **)(DerivedStorage + 1488);
        *(void *)(DerivedStorage + 1488) = 0;

        float v258 = *(void **)(DerivedStorage + 1496);
        *(void *)(DerivedStorage + 1496) = 0;

        float v259 = *(const void **)(DerivedStorage + 32);
        *(void *)(DerivedStorage + 32) = Copy;
        if (Copy) {
          CFRetain(Copy);
        }
        if (v259) {
          CFRelease(v259);
        }
        int16x8x2_t v260 = *(const void **)(DerivedStorage + 40);
        *(void *)(DerivedStorage + 40) = v10;
        if (v10) {
          CFRetain(v10);
        }
        if (v260) {
          CFRelease(v260);
        }
        memcpy((void *)(DerivedStorage + 184), __src, 0x450uLL);
      }
      uint64_t appended = 0;
      *(unsigned char *)(DerivedStorage + 64) = 1;
      goto LABEL_571;
    }
LABEL_25:
    pixelFormat[0] = 0;
    getpid();
    if (proc_can_use_foreground_hw() || pixelFormat[0] == 13)
    {
      CFMutableDictionaryRef v27 = *(void **)(DerivedStorage + 1480);
      if (!a4)
      {
        uint64_t v28 = 1;
LABEL_30:
        [v27 setGPUPriority:v28];
        *(unsigned char *)(DerivedStorage + 1632) = a4;
        if (!Copy) {
          goto LABEL_39;
        }
        goto LABEL_31;
      }
    }
    else
    {
      CFMutableDictionaryRef v27 = *(void **)(DerivedStorage + 1480);
    }
    uint64_t v28 = 2;
    goto LABEL_30;
  }
  *(void *)pixelFormat = 0;
  uint64_t v14 = CMBaseObjectGetDerivedStorage();
  uint64_t v15 = v14;
  CFTypeID v16 = *(void **)(v14 + 1464);
  if ((v16
     || (vtmtsCreateDefaultDevice((void *)(v14 + 1464), (unsigned char *)(v14 + 1472)), (CFTypeID v16 = *(void **)(v15 + 1464)) != 0))
    && (CVMetalTextureCacheCreate(v8, 0, v16, 0, (CVMetalTextureCacheRef *)(v15 + 48)), *(void *)(v15 + 48)))
  {
    id v17 = objc_alloc_init(MEMORY[0x1E4F35300]);
    int v18 = v17;
    if (v17)
    {
      *(void *)(v15 + 144) = 0;
      [v17 setMagFilter:1];
      [v18 setMinFilter:1];
      [v18 setNormalizedCoordinates:0];
      uint64_t v19 = [*(id *)(v15 + 1464) newSamplerStateWithDescriptor:v18];
      *(void *)(v15 + 160) = v19;
      if (v19)
      {
        [v18 setNormalizedCoordinates:1];
        uint64_t v20 = [*(id *)(v15 + 1464) newSamplerStateWithDescriptor:v18];
        *(void *)(v15 + 176) = v20;
        if (v20)
        {
          [v18 setMagFilter:0];
          [v18 setMinFilter:0];
          [v18 setNormalizedCoordinates:0];
          uint64_t v21 = [*(id *)(v15 + 1464) newSamplerStateWithDescriptor:v18];
          *(void *)(v15 + 152) = v21;
          if (v21)
          {
            [v18 setNormalizedCoordinates:1];
            uint64_t v22 = [*(id *)(v15 + 1464) newSamplerStateWithDescriptor:v18];
            *(void *)(v15 + 168) = v22;
            if (v22)
            {
              *(void *)(v15 + 1592) = 0;
              unsigned __int16 v23 = objc_msgSend(*(id *)(v15 + 1464), "newDefaultLibraryWithBundle:error:", objc_msgSend(MEMORY[0x1E4F28B50], "bundleForClass:", objc_opt_class()), pixelFormat);
              *(void *)(v15 + 1600) = v23;
              if (*(void *)(v15 + 1344)) {
                CFTypeID v24 = *(__CFString **)(v15 + 1344);
              }
              else {
                CFTypeID v24 = @"com.apple.VideoToolbox.VTMetalTransferSession";
              }
              [v23 setLabel:v24];
              CFMutableDictionaryRef v25 = (void *)[*(id *)(v15 + 1464) newCommandQueue];
              *(void *)(v15 + 1480) = v25;
              if (*(void *)(v15 + 1344)) {
                int v26 = *(__CFString **)(v15 + 1344);
              }
              else {
                int v26 = @"com.apple.VideoToolbox.VTMetalTransferSession";
              }
              [v25 setLabel:v26];

              if (*(void *)(DerivedStorage + 1480)) {
                goto LABEL_25;
              }
LABEL_579:
              uint64_t v33 = FigSignalErrorAt();
              goto LABEL_580;
            }
          }
        }
      }
    }
  }
  else
  {
    int v18 = 0;
  }

  CFArrayRef v48 = 0;
  uint64_t appended = 4294954392;
LABEL_571:
  if (Copy) {
    CFRelease(Copy);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v48) {
    CFRelease(v48);
  }
  return appended;
}

uint64_t vtCheckTextureLimits(void *a1, uint64_t a2)
{
  if (a1 && a2)
  {
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    [a1 maxTextureWidth2D];
    [a1 maxTextureHeight2D];
  }
  return 0;
}

uint64_t getNativeTextureTypeForPixelFormat(int a1)
{
  uint64_t result = 0;
  if (a1 > 1380410944)
  {
    if (a1 > 2016567666)
    {
      if (a1 <= 2021078067)
      {
        if (a1 > 2019963439)
        {
          if (a1 > 2019964015)
          {
            if (a1 == 2019964016 || a1 == 2021077552) {
              return 5;
            }
            int v3 = 2021077554;
          }
          else
          {
            if (a1 == 2019963440 || a1 == 2019963442) {
              return 5;
            }
            int v3 = 2019963956;
          }
        }
        else
        {
          if (a1 > 2016687155)
          {
            if (a1 == 2016687156 || a1 == 2016687216) {
              return 5;
            }
            unsigned __int16 v5 = 24947;
          }
          else
          {
            if (a1 == 2016567667 || a1 == 2016686640) {
              return 5;
            }
            unsigned __int16 v5 = 12850;
          }
          int v3 = v5 | 0x78340000;
        }
        goto LABEL_132;
      }
      if (a1 > 2084070959)
      {
        if (a1 <= 2088265263)
        {
          if (a1 == 2084070960 || a1 == 2084075056) {
            return 5;
          }
          int v3 = 2084718401;
        }
        else
        {
          if (a1 > 2088269359)
          {
            if (a1 == 2088269360) {
              return 5;
            }
            unsigned __int16 v4 = 30258;
          }
          else
          {
            if (a1 == 2088265264) {
              return 5;
            }
            unsigned __int16 v4 = 26162;
          }
          int v3 = v4 | 0x7C780000;
        }
        goto LABEL_132;
      }
      if (a1 <= 2033463605)
      {
        if (a1 == 2021078068 || a1 == 2021078128) {
          return 5;
        }
        int v3 = 2033463352;
        goto LABEL_132;
      }
      if (a1 != 2033463606)
      {
        if (a1 == 2037741158) {
          return 5;
        }
        int v3 = 2037741171;
        goto LABEL_132;
      }
    }
    else if (a1 <= 1886859823)
    {
      if (a1 > 1882468911)
      {
        if (a1 > 1885745711)
        {
          if (a1 == 1885745712 || a1 == 1885745714) {
            return 5;
          }
          int v3 = 1885746228;
        }
        else
        {
          if (a1 == 1882468912 || a1 == 1882468914) {
            return 5;
          }
          int v3 = 1882469428;
        }
        goto LABEL_132;
      }
      if (a1 <= 1647719520)
      {
        if (a1 != 1380410945 && a1 != 1380411457)
        {
          int v3 = 1647534392;
          goto LABEL_132;
        }
        return 1;
      }
      if (a1 != 1647719521)
      {
        if (a1 == 1815162994) {
          return 5;
        }
        if (a1 != 1815491698) {
          return result;
        }
      }
    }
    else
    {
      if (a1 <= 1949458802)
      {
        if (a1 > 1915892015)
        {
          if (a1 == 1915892016 || a1 == 1932681587) {
            return 5;
          }
          int v3 = 1932812659;
        }
        else
        {
          if (a1 == 1886859824 || a1 == 1886859826) {
            return 5;
          }
          int v3 = 1886860340;
        }
        goto LABEL_132;
      }
      if (a1 <= 1983000885)
      {
        if (a1 == 1949458803 || a1 == 1949589875) {
          return 5;
        }
        int v3 = 1982882104;
        goto LABEL_132;
      }
      if (a1 > 1983144247)
      {
        if (a1 == 1983144248) {
          return 5;
        }
        int v3 = 1999843442;
        goto LABEL_132;
      }
      if (a1 != 1983000886)
      {
        int v3 = 1983013176;
        goto LABEL_132;
      }
    }
    return 4;
  }
  if (a1 > 758670895)
  {
    if (a1 > 796423727)
    {
      if (a1 > 875704933)
      {
        if (a1 > 875836533)
        {
          if (a1 == 875836534 || a1 == 1111970369) {
            return 5;
          }
          int v3 = 1378955371;
        }
        else
        {
          if (a1 == 875704934 || a1 == 875704950) {
            return 5;
          }
          int v3 = 875836518;
        }
      }
      else if (a1 > 846624120)
      {
        if (a1 == 846624121 || a1 == 875704422) {
          return 5;
        }
        int v3 = 875704438;
      }
      else
      {
        if (a1 == 796423728 || a1 == 796423730) {
          return 5;
        }
        int v3 = 846624102;
      }
    }
    else if (a1 > 762869297)
    {
      if (a1 > 792872768)
      {
        if (a1 == 792872769 || a1 == 796419632) {
          return 5;
        }
        int v3 = 796419634;
      }
      else
      {
        if (a1 == 762869298 || a1 == 792225328) {
          return 5;
        }
        int v3 = 792229424;
      }
    }
    else if (a1 > 762865199)
    {
      if (a1 == 762865200 || a1 == 762865202) {
        return 5;
      }
      int v3 = 762869296;
    }
    else
    {
      if (a1 == 758670896 || a1 == 758674992) {
        return 5;
      }
      int v3 = 759318337;
    }
    goto LABEL_132;
  }
  if (a1 <= 644232303)
  {
    if (a1 <= 641234479)
    {
      if (a1 > 640955503)
      {
        if ((a1 - 641230384) > 4 || ((1 << (a1 - 48)) & 0x15) == 0)
        {
          int v3 = 640955504;
          goto LABEL_132;
        }
        return 5;
      }
      if (a1 == 32 || a1 == 590898736) {
        return 5;
      }
      int v3 = 590902832;
LABEL_132:
      if (a1 != v3) {
        return result;
      }
      return 5;
    }
    if (a1 <= 641877824)
    {
      int v6 = -641234480;
      goto LABEL_64;
    }
    if (a1 == 641877825) {
      return 5;
    }
    if (a1 != 642934849)
    {
      int v3 = 643969848;
      goto LABEL_132;
    }
    return 1;
  }
  if (a1 <= 645424687)
  {
    if (a1 > 645279799)
    {
      if (a1 == 645279800) {
        return 5;
      }
      int v3 = 645346162;
    }
    else
    {
      if (a1 == 644232304) {
        return 5;
      }
      int v3 = 644624754;
    }
    goto LABEL_132;
  }
  if ((a1 - 645424688) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0
    || (a1 - 645428784) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0)
  {
    return 5;
  }
  int v6 = -645429040;
LABEL_64:
  unsigned int v7 = a1 + v6;
  if (v7 <= 4 && ((1 << v7) & 0x15) != 0) {
    return 5;
  }
  return result;
}

uint64_t getSubsamplingFromPixelDescription(const __CFDictionary *a1, _DWORD *a2, _DWORD *a3)
{
  int IntIfPresent = FigCFDictionaryGetIntIfPresent();
  uint64_t result = FigCFDictionaryGetIntIfPresent();
  if (a1)
  {
    if (!IntIfPresent && result == 0)
    {
      uint64_t result = (uint64_t)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24EE0]);
      if (result)
      {
        CFArrayRef v9 = (const __CFArray *)result;
        CFTypeID v10 = CFGetTypeID((CFTypeRef)result);
        uint64_t result = CFArrayGetTypeID();
        if (v10 == result)
        {
          uint64_t result = CFArrayGetCount(v9);
          if (result >= 1)
          {
            for (CFIndex i = 0; i < result; ++i)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
              if (ValueAtIndex)
              {
                CFTypeID v13 = CFGetTypeID(ValueAtIndex);
                if (v13 == CFDictionaryGetTypeID())
                {
                  FigCFDictionaryGetIntIfPresent();
                  FigCFDictionaryGetIntIfPresent();
                }
              }
              uint64_t result = CFArrayGetCount(v9);
            }
          }
        }
      }
    }
  }
  *a2 = 1;
  *a3 = 1;
  return result;
}

CFDictionaryRef getCharacteristicsFromPixelDescription(const __CFDictionary *theDict, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (theDict)
  {
    CFDictionaryRef v14 = theDict;
    if (a3) {
      CFDictionaryRef theDict = (const __CFDictionary *)FigCFDictionaryGetBooleanIfPresent();
    }
    if (a2) {
      CFDictionaryRef theDict = (const __CFDictionary *)FigCFDictionaryGetBooleanIfPresent();
    }
    if (a4) {
      CFDictionaryRef theDict = (const __CFDictionary *)FigCFDictionaryGetBooleanIfPresent();
    }
    if (a5)
    {
      CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E4F24E50]);
      CFDictionaryRef theDict = (const __CFDictionary *)FigCFEqual();
      if (theDict)
      {
        int v15 = 1;
      }
      else
      {
        CFDictionaryRef theDict = (const __CFDictionary *)FigCFEqual();
        if (theDict) {
          int v15 = 3;
        }
        else {
          int v15 = 2;
        }
      }
      *a5 = v15;
    }
    if (a6) {
      CFDictionaryRef theDict = (const __CFDictionary *)FigCFDictionaryGetBooleanIfPresent();
    }
    if (a7) {
      CFDictionaryRef theDict = (const __CFDictionary *)FigCFDictionaryGetBooleanIfPresent();
    }
    if (a8)
    {
      return (const __CFDictionary *)FigCFDictionaryGetInt32IfPresent();
    }
  }
  return theDict;
}

void vtmtsLoadColorFunctionConstantValues(const __CFDictionary *a1, const __CFDictionary *a2, CFDictionaryRef theDict, const __CFDictionary *a4, int *a5, int *a6, int *a7, int *a8, int *a9, int *a10, int *a11, int *a12)
{
  CFBooleanRef v54 = 0;
  int v55 = 0;
  __int16 v53 = 0;
  __int16 v52 = 0;
  __int16 v51 = 0;
  CFStringRef v50 = 0;
  CFStringRef yCbCrMatrixString = 0;
  getCharacteristicsFromPixelDescription(theDict, (uint64_t)&v53 + 1, (uint64_t)&v52 + 1, (uint64_t)&v51 + 1, a8, 0, 0, 0);
  getCharacteristicsFromPixelDescription(a4, (uint64_t)&v53, (uint64_t)&v52, (uint64_t)&v51, a12, 0, 0, 0);
  CFArrayRef Value = 0;
  id v17 = (const void *)*MEMORY[0x1E4F24C18];
  if (a1 && v17) {
    CFArrayRef Value = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24C18]);
  }
  int v18 = 0;
  BOOL v19 = (HIBYTE(v52) | HIBYTE(v51)) != 0;
  if (a2 && v17) {
    int v18 = CFDictionaryGetValue(a2, v17);
  }
  VTCreateYCbCrCFStringsAndProvideDefaults(Value, v19, v18, (v52 | v51) != 0, &v50, &yCbCrMatrixString);
  uint64_t v20 = 0;
  uint64_t v21 = (const void *)*MEMORY[0x1E4F24A00];
  if (a1 && v21) {
    uint64_t v20 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24A00]);
  }
  uint64_t v22 = 0;
  unsigned __int16 v23 = (const void *)*MEMORY[0x1E4F24B70];
  BOOL v42 = a7;
  if (a1 && v23) {
    uint64_t v22 = CFDictionaryGetValue(a1, v23);
  }
  CFTypeID v24 = 0;
  CFMutableDictionaryRef v25 = (const void *)*MEMORY[0x1E4F24A90];
  if (a1 && v25) {
    CFTypeID v24 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24A90]);
  }
  CFTypeID v45 = v24;
  int v26 = 0;
  CFMutableDictionaryRef v27 = (const void *)*MEMORY[0x1E4F24BC8];
  unint64_t v46 = (unint64_t)v22;
  if (a1 && v27) {
    int v26 = CFDictionaryGetValue(a1, v27);
  }
  uint64_t v28 = 0;
  CFIndex v29 = (const void *)*MEMORY[0x1E4F24B78];
  CFDictionaryRef v44 = v26;
  if (a1 && v29) {
    uint64_t v28 = CFDictionaryGetValue(a1, v29);
  }
  unsigned int v30 = 0;
  CFStringRef v43 = v50;
  if (a2 && v21) {
    unsigned int v30 = CFDictionaryGetValue(a2, v21);
  }
  uint64_t v31 = 0;
  if (a2 && v23) {
    uint64_t v31 = CFDictionaryGetValue(a2, v23);
  }
  CFArrayRef v32 = 0;
  unint64_t v33 = (unint64_t)v20;
  if (a2 && v25) {
    CFArrayRef v32 = CFDictionaryGetValue(a2, v25);
  }
  BOOL v34 = 0;
  if (a2 && v27) {
    BOOL v34 = CFDictionaryGetValue(a2, v27);
  }
  CFIndex v35 = 0;
  if (a2 && v29) {
    CFIndex v35 = CFDictionaryGetValue(a2, v29);
  }
  VTCreateColorAttachments(v33, v46, v45, v44, v28, v43, 0, (unint64_t)v30, (unint64_t)v31, v32, v34, (uint64_t)v35, 0, 0, 0, &v55, &v54);
  CFStringRef v36 = 0;
  CFDictionaryRef v37 = v55;
  if (v25 && v55)
  {
    CFStringRef v36 = (const __CFString *)CFDictionaryGetValue(v55, v25);
    CFDictionaryRef v37 = v55;
  }
  CFStringRef v38 = 0;
  if (v27 && v37) {
    CFStringRef v38 = (const __CFString *)CFDictionaryGetValue(v37, v27);
  }
  CFStringRef v39 = 0;
  CFDictionaryRef v40 = v54;
  if (v25 && v54)
  {
    CFStringRef v39 = (const __CFString *)CFDictionaryGetValue(v54, v25);
    CFDictionaryRef v40 = v54;
  }
  CFStringRef v41 = 0;
  if (v27 && v40) {
    CFStringRef v41 = (const __CFString *)CFDictionaryGetValue(v40, v27);
  }
  if (a5) {
    *a5 = CVColorPrimariesGetIntegerCodePointForString(v36);
  }
  if (a6) {
    *a6 = CVTransferFunctionGetIntegerCodePointForString(v38);
  }
  if (v42) {
    *BOOL v42 = CVYCbCrMatrixGetIntegerCodePointForString(v50);
  }
  if (a9) {
    *a9 = CVColorPrimariesGetIntegerCodePointForString(v39);
  }
  if (a10) {
    *a10 = CVTransferFunctionGetIntegerCodePointForString(v41);
  }
  if (a11) {
    *a11 = CVYCbCrMatrixGetIntegerCodePointForString(yCbCrMatrixString);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v50) {
    CFRelease(v50);
  }
  if (yCbCrMatrixString) {
    CFRelease(yCbCrMatrixString);
  }
}

uint64_t vtmtsGetSrcCropDimensions(uint64_t result, _DWORD *a2, _DWORD *a3, int *a4, int *a5, int *a6, int *a7, uint64_t a8, unsigned char *a9)
{
  if (a6) {
    int v16 = *a6;
  }
  else {
    int v16 = 0;
  }
  int v23 = v16;
  if (a7) {
    int v17 = *a7;
  }
  else {
    int v17 = 0;
  }
  int v22 = v17;
  int v18 = 0;
  int v19 = 0;
  if (a4) {
    int v19 = *a4;
  }
  int v21 = v19;
  if (a5) {
    int v18 = *a5;
  }
  int v20 = v18;
  if (result)
  {
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetFloat32IfPresent();
    uint64_t result = FigCFDictionaryGetFloat32IfPresent();
    if (a2) {
      *a2 = v23;
    }
    if (a3) {
      *a3 = v22;
    }
    if (a4) {
      *a4 = v21;
    }
    if (a5) {
      *a5 = v20;
    }
    if (a6) {
      *a6 = v23;
    }
    if (a7) {
      *a7 = v22;
    }
    if (a8)
    {
      if (a9)
      {
        *a9 = FigCFDictionaryGetCGFloatIfPresent();
        *a9 = FigCFDictionaryGetCGFloatIfPresent();
        *a9 = FigCFDictionaryGetCGFloatIfPresent();
        *a9 = FigCFDictionaryGetCGFloatIfPresent();
        *a9 = FigCFDictionaryGetCGFloatIfPresent();
        uint64_t result = FigCFDictionaryGetCGFloatIfPresent();
        *a9 = result;
      }
    }
  }
  return result;
}

uint64_t vtmtsAppendCompositePass(void *a1, unsigned __int8 *a2, const __CFArray *a3, int a4, int a5, unsigned int *a6, const __CFDictionary *a7, int a8, const __CFArray *a9, uint64_t a10, unsigned char *a11, __CFArray *a12)
{
  int v15 = (void *)[a1 newBufferWithLength:4 options:0];
  int v16 = v15;
  if (*(void *)a10) {
    int v17 = *(__CFString **)a10;
  }
  else {
    int v17 = @"com.apple.VideoToolbox.VTMetalTransferSession";
  }
  [v15 setLabel:v17];
  BOOL v86 = 0;
  uint64_t VTMTSRenderPass = vtCreateVTMTSRenderPass();
  int v19 = (_DWORD *)VTMTSRenderPass;
  *(_DWORD *)(VTMTSRenderPass + 16) = a8;
  int v66 = a8;
  if (a8 == 3) {
    VTMTSRenderPassDescriptorSetFunctionName(VTMTSRenderPass, @"VTMTSComputeComposite");
  }
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  *((unsigned char *)v19 + 323) = a11[15];
  CFArrayRef theArray = Mutable;
  if (a3)
  {
    unsigned int Count = CFArrayGetCount(a3);
    v19[387] = Count;
    if (Count >= 9)
    {
      uint64_t v41 = FigSignalErrorAt();
      goto LABEL_65;
    }
    CFDataRef v62 = v19 + 387;
  }
  else
  {
    CFDataRef v62 = v19 + 387;
    v19[387] = 0;
  }
  uint64_t v70 = (uint64_t)(v19 + 52);

  int v22 = (void *)[a1 newBufferWithLength:512 options:0];
  *((void *)v19 + 8) = v22;
  if (*(void *)a10) {
    int v23 = *(__CFString **)a10;
  }
  else {
    int v23 = @"com.apple.VideoToolbox.VTMetalTransferSession";
  }
  CFTypeID v24 = a1;
  [v22 setLabel:v23];
  uint64_t v65 = [*((id *)v19 + 8) contents];
  if (v19[387])
  {
    CFIndex v25 = 0;
    uint64_t v60 = v19 + 87;
    uint64_t v59 = v19 + 514;
    CFBooleanRef v54 = v19 + 12;
    int v55 = v19 + 10;
    __int16 v53 = (id *)(v19 + 512);
    int v26 = (_DWORD *)(v65 + 64);
    CFArrayRef v58 = a3;
    BOOL v69 = v19;
    uint64_t v61 = v16;
    do
    {
      *(_OWORD *)int v83 = 0u;
      long long v84 = 0u;
      uint64_t v85 = 0;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      *(_OWORD *)uint64_t v72 = 0u;
      HIDWORD(v84) = 1065353216;
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v25);
      *(void *)&v72[2] = ValueAtIndex;
      WORD4(v76) = 256;
      *((void *)&v81 + 1) = v24;
      *(void *)&long long v82 = a11;
      DWORD1(v76) = v66;
      DWORD2(v73) = v25;
      LODWORD(v71[0]) = 0;
      FigCFDictionaryGetInt32IfPresent();
      v72[0] = v71[0];
      FigCFDictionaryGetFloatIfPresent();
      DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
      if (v72[0] > 1380411456)
      {
        if (v72[0] == 1815162994) {
          goto LABEL_21;
        }
        unsigned __int16 v29 = 26689;
      }
      else
      {
        if (v72[0] == 1111970369) {
          goto LABEL_21;
        }
        unsigned __int16 v29 = 26177;
      }
      if (v72[0] != (v29 | 0x52470000)) {
        goto LABEL_57;
      }
LABEL_21:
      v83[3] = 2;
      getSubsamplingFromPixelDescription(DescriptionWithPixelFormatType, (_DWORD *)&v84 + 1, (_DWORD *)&v84 + 2);
      vtmtsGetSrcCropDimensions((uint64_t)ValueAtIndex, (_DWORD *)&v80 + 2, (_DWORD *)&v80 + 3, (int *)&v80, (int *)&v80 + 1, (int *)&v81, (int *)&v81 + 1, (uint64_t)&v77, (unsigned char *)&v76 + 10);
      if (a3)
      {
        unsigned int v30 = v61;
        uint64_t v31 = v26;
        if (CFArrayGetCount(a3) <= v25) {
          CFDictionaryRef v32 = 0;
        }
        else {
          CFDictionaryRef v32 = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v25);
        }
      }
      else
      {
        uint64_t v31 = v26;
        CFDictionaryRef v32 = 0;
        unsigned int v30 = v61;
      }
      vtmtsLoadColorFunctionConstantValues(v32, *((const __CFDictionary **)a6 + 1), DescriptionWithPixelFormatType, a7, &v83[1], v83, (int *)&v82 + 2, &v83[2], (int *)a6 + 31, (int *)a6 + 30, (int *)a6 + 28, (int *)a6 + 32);
      void *v60 = *(void *)v83;
      int v33 = v72[0];
      v69[85] = DWORD2(v82);
      int v34 = v83[2];
      v69[89] = v83[2];
      int v35 = a6[31];
      v69[385] = v35;
      int v36 = a6[30];
      v69[384] = v36;
      int v37 = a6[28];
      v69[382] = v37;
      int v38 = a6[32];
      v69[386] = v38;
      int v16 = v30;
      uint64_t v52 = (uint64_t)v30;
      CFTypeID v24 = a1;
      uint64_t v39 = vtmtsSetUpProcessingNeeds(a1, v33, *a6, (const __CFDictionary **)&v72[2], *((const __CFDictionary **)a6 + 1), DescriptionWithPixelFormatType, a7, &v83[1], v83, (int *)&v82 + 2, v34, v35, v36, v37, v38, (void *)a10, a11, v70, (_DWORD *)&v82 + 3,
              (int *)a6 + 29,
              v52,
              v59,
              (unsigned char *)&v76 + 9,
              &v86);
      if (v39)
      {
        uint64_t v50 = v39;
        int v19 = v69;
        goto LABEL_58;
      }
      CFDictionaryRef v40 = v31;
      if (!a4 || v25)
      {
        uint64_t v41 = vtmtsBuildSource(a1, v72, 1, v70, theArray);
        a3 = v58;
        int v19 = v69;
        if (v41) {
          goto LABEL_65;
        }
        CFArrayRef Mutable = theArray;
        if (a5)
        {
          if (!theArray || (CFIndex v42 = CFArrayGetCount(theArray), v42 < 2))
          {
LABEL_57:
            uint64_t v50 = FigSignalErrorAt();
            int v16 = v61;
            goto LABEL_58;
          }
          CFStringRef v43 = CFArrayGetValueAtIndex(theArray, v42 - 1);
          v43[5] += a5;
        }
      }
      else
      {
        CFArrayRef Mutable = theArray;
        vtCreateTexDescGlobalSample((uint64_t)a1, (uint64_t)theArray, v70, v72[0], 115, 2);
        a3 = v58;
        int v19 = v69;
      }
      if (BYTE10(v76))
      {
        int v44 = *((unsigned __int8 *)v19 + 323);
        v71[0] = v77;
        v71[1] = v78;
        v71[2] = v79;
        setupAffine(v25, v44, v71, (int)*(float *)&v80, (int)*((float *)&v80 + 1), DWORD2(v80), HIDWORD(v80), v81, DWORD1(v81), v65);
      }
      else
      {
        setupRenderRotationAndCrop(a1, a2, (__CFString **)a10, v25, v72[0], *(unsigned __int8 *)(a10 + 10), v66 == 2, *((unsigned __int8 *)v19 + 320), *(unsigned char *)(a10 + 9), *((unsigned char *)v19 + 323), 0, 0, 0, (int)*(float *)&v80, (int)*((float *)&v80 + 1), SDWORD2(v80), SHIDWORD(v80), v81, SDWORD1(v81),
          *(_OWORD *)(a6 + 18),
          HIDWORD(*((void *)a6 + 9)),
          *((void *)a6 + 10),
          HIDWORD(*(_OWORD *)(a6 + 18)),
          a6[22],
          a6[23],
          v55,
          v54,
          v65,
          v53);
      }
      *((unsigned char *)v19 + 320) = 0;
      if (!v25)
      {
        LODWORD(v71[0]) = 0;
        if (*((void *)a6 + 2))
        {
          FigCFDictionaryGetInt32IfPresent();
          int v45 = v71[0];
        }
        else
        {
          int v45 = 0;
        }
        setupBackgroundColor(*((float32_t *)a6 + 37), *((float *)a6 + 38), *((float *)a6 + 39), *((float *)a6 + 40), v72[0], v19[79], SDWORD2(v82), v83[2], v45, *((void **)v19 + 8));
        *((unsigned char *)v19 + 1559) = 1;
      }
      _DWORD *v40 = HIDWORD(v84);
      int v26 = v40 + 15;
      ++v25;
    }
    while (v25 < (unint64_t)*v62);
  }
  a6[1] = 8;
  uint64_t v46 = *((void *)a6 + 4);
  if (!v46)
  {
    uint64_t v41 = vtmtsBuildDestination(v24, a6, *((unsigned __int8 *)v19 + 316), v70, Mutable, a9);
    if (!v41) {
      goto LABEL_49;
    }
LABEL_65:
    uint64_t v50 = v41;
    goto LABEL_58;
  }
  uint64_t v41 = vtCreateTexDescGlobalWrite((uint64_t)v24, *a6, Mutable, (uint64_t)(v19 + 357), *a6, v46, a6[16], 0, 0, 8, a6[34], a6[35]);
  if (v41) {
    goto LABEL_65;
  }
LABEL_49:
  if ((v19[376] - 3) <= 2) {
    *((unsigned char *)v19 + 1524) = 1;
  }
  if (theArray)
  {
    *((void *)v19 + 25) = CFRetain(theArray);
    v19[356] = v19[79];
    vtmtsFixUpProcessingShortcuts(v70, v86);
    int v47 = CFArrayGetCount(theArray);
  }
  else
  {
    *((void *)v19 + 25) = 0;
    v19[356] = v19[79];
    vtmtsFixUpProcessingShortcuts(v70, v86);
    int v47 = 0;
  }
  if (*((void *)v19 + 257)) {
    v19[78] = v47;
  }
  *(_OWORD *)(v19 + 34) = xmmword_193E80640;
  uint64_t v48 = *((void *)a6 + 10);
  *(void *)&long long v49 = (int)v48;
  *((void *)&v49 + 1) = SHIDWORD(v48);
  *(_OWORD *)(v19 + 26) = v49;
  *(_OWORD *)(v19 + 30) = xmmword_193E80650;
  CFArrayAppendValue(a12, v19);
  uint64_t v50 = 0;
  *((void *)v19 + 10) = v16;
  int v16 = 0;
LABEL_58:
  CFRelease(v19);
  if (theArray) {
    CFRelease(theArray);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v50;
}

uint64_t vtCreateVTMTSRenderPass()
{
  MEMORY[0x199705810](&VTMTSRenderPassDescriptorGetTypeID_sRegisterVTMTSRenderPassDescriptorOnce, RegisterVTMTSRenderPassDescriptor);
  uint64_t result = _CFRuntimeCreateInstance();
  for (uint64_t i = 0; i != 468; i += 52)
  {
    uint64_t v2 = result + i;
    *(_DWORD *)(v2 + 1560) = -1;
    *(unsigned char *)(v2 + 1600) = 0;
    *(void *)(result + i + 1604) = 0x7F7FFFFFFF7FFFFFLL;
  }
  *(void *)(result + 2028) = 0;
  *(_DWORD *)(result + 1552) = 1000;
  return result;
}

uint64_t vtmtsSetUpProcessingNeeds(void *a1, int a2, int a3, const __CFDictionary **a4, const __CFDictionary *a5, CFDictionaryRef theDict, const __CFDictionary *a7, int *a8, int *a9, int *a10, int a11, int a12, int a13, int a14, int a15, void *a16, unsigned char *a17, uint64_t a18, _DWORD *a19, int *a20,uint64_t a21,void *a22,unsigned char *a23,BOOL *a24)
{
  char v26 = 0;
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef theDicta = *a4;
  int v27 = *a8;
  int v100 = *a9;
  int v101 = *a10;
  __int16 v129 = 0;
  __int16 v128 = 0;
  __int16 v127 = 0;
  __int16 v126 = 0;
  int v125 = 1;
  int v124 = 1;
  int v123 = 1;
  int v122 = 1;
  uint64_t v121 = 0;
  int v120 = 0;
  BOOL v29 = a2 != 1751528500 && (a2 & 0xFFFFFFFD) != 1751527984;
  CFTypeRef cf = 0;
  if (a3 != 1751527984 && a3 != 1751527986 && a3 != 1751528500) {
    char v26 = 1;
  }
  if (a21)
  {
    char v103 = v26;
    int v104 = v27;
    BOOL v102 = v29;
    getCharacteristicsFromPixelDescription(theDict, (uint64_t)&v129 + 1, (uint64_t)&v128 + 1, (uint64_t)&v127 + 1, 0, 0, (uint64_t)&v126 + 1, (uint64_t)&v121 + 4);
    getCharacteristicsFromPixelDescription(a7, (uint64_t)&v129, (uint64_t)&v128, (uint64_t)&v127, 0, 0, (uint64_t)&v126, (uint64_t)&v121);
    getSubsamplingFromPixelDescription(theDict, &v125, &v124);
    getSubsamplingFromPixelDescription(a7, &v123, &v122);
    unsigned int v30 = a23;
    CFDictionaryRef v32 = a17;
    uint64_t v31 = a18;
    if (a5 && a17[30] && theDicta)
    {
      uint64_t v33 = 0;
      if (HIBYTE(v128)) {
        int v34 = 8;
      }
      else {
        int v34 = 9;
      }
      int v105 = v34 - ((_BYTE)v128 != 0);
      CFStringRef key = (void *)*MEMORY[0x1E4F24A00];
      unsigned int v111 = (void *)*MEMORY[0x1E4F24B70];
      CFTypeID v110 = (void *)*MEMORY[0x1E4F24A90];
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      float16x8_t v109 = (void *)*MEMORY[0x1E4F24BC8];
      uint16x8_t v106 = (const void *)*MEMORY[0x1E4F1CFD0];
      CFTypeID v107 = (const void *)*MEMORY[0x1E4F1DE90];
      xpc_object_t value = (void *)*MEMORY[0x1E4F1CFC8];
      do
      {
        int v35 = HIBYTE(v128);
        uint64_t v115 = v33;
        uint64_t v147 = 0;
        uint64_t v148 = &v147;
        uint64_t v149 = 0x2020000000;
        int v150 = 0;
        int v36 = CFDictionaryGetValue(theDicta, key);
        int v37 = CFDictionaryGetValue(a5, key);
        int v38 = CFDictionaryGetValue(theDicta, v111);
        uint64_t v39 = CFDictionaryGetValue(a5, v111);
        int v114 = CFDictionaryGetValue(theDicta, v110);
        CFDictionaryRef v40 = CFDictionaryGetValue(a5, v110);
        uint64_t v41 = CFDictionaryGetValue(theDicta, v109);
        CFIndex v42 = CFDictionaryGetValue(a5, v109);
        BOOL v113 = v35 != 0;
        CFTypeRef v145 = 0;
        CFTypeRef v146 = 0;
        CGColorSpaceRef v143 = 0;
        CGColorSpaceRef v144 = 0;
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        CFArrayRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(Mutable, v107, v106);
        CFDictionarySetValue(Mutable, @"kCGPQEETF3DLut", value);
        CFDictionarySetValue(Mutable, @"kCGHLGSceneMapping3DLut", value);
        int v44 = (const void *)a16[4];
        if (v44) {
          CFDictionarySetValue(Mutable, @"kCGPQEOTFOpticalScale", v44);
        }
        int v45 = (const void *)a16[5];
        if (v45) {
          CFDictionarySetValue(Mutable, @"kCGPQInvEOTFOpticalScale", v45);
        }
        uint64_t v46 = (const void *)a16[6];
        if (v46) {
          CFDictionarySetValue(Mutable, @"kCGHLGOETFOpticalScale", v46);
        }
        int v47 = (const void *)a16[7];
        if (v47) {
          CFDictionarySetValue(Mutable, @"kCGHLGInvOETFOpticalScale", v47);
        }
        if ((v36 && v37 || v38 && v39 || v114 && v40 && v41 && v42 && FigCFEqual())
          && FigCFEqual()
          || (int v49 = VTCreateColorAttachments((unint64_t)v36, (unint64_t)v38, v114, v41, 0, 0, 0, (unint64_t)v37, (unint64_t)v39, v40, v42, 0, 0, 0, 0, (__CFDictionary **)&v146, (__CFDictionary **)&v145), (*((_DWORD *)v148 + 6) = v49) != 0)|| (v50 = VTCreateColorSpacesFromDictionaries((CFDictionaryRef)v146, (CFDictionaryRef)v145, &v144, &v143),
              (*((_DWORD *)v148 + 6) = v50) != 0))
        {
          CGColorConversionInfoRef v48 = 0;
        }
        else
        {
          BOOL v51 = (CGColorSpaceIsHDR(v144) || CGColorSpaceIsHDR(v143)) && FigCFEqual() == 0;
          *a24 = v51;
          CGColorConversionInfoRef v48 = CGColorConversionInfoCreateFromList(Mutable, v144, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, v143, 1, 0, 0);
          uint64_t v138 = MEMORY[0x1E4F143A8];
          uint64_t v139 = 3221225472;
          BOOL v140 = __VTPopulateColorPrimariesAndTransferFunctionValuesModern_block_invoke;
          int v141 = &__block_descriptor_40_e132_B92__0_CGColorConversionIteratorData_Iqqqqqq___CGColorTRCData____CGColorMatrixData____CGColorNxMTransformData__8____CFDictionary__84l;
          int v142 = &v120;
          *(void *)int v159 = MEMORY[0x1E4F143A8];
          *(void *)&v159[8] = 3221225472;
          *(void *)&v159[16] = __VTPopulateColorPrimariesAndTransferFunctionValuesModern_block_invoke_2;
          *(void *)&v159[24] = &unk_1E5785EB0;
          int v162 = v105;
          uint64_t v160 = a18 + 1352;
          BOOL v161 = v113;
          *(void *)&v159[32] = &v147;
          uint64_t v130 = MEMORY[0x1E4F143A8];
          uint64_t v131 = 3221225472;
          uint64_t v132 = __VTPopulateColorPrimariesAndTransferFunctionValuesModern_block_invoke_3;
          int v133 = &unk_1E5785ED8;
          int v137 = v105;
          uint64_t v135 = a18 + 1352;
          BOOL v136 = v113;
          CFDictionaryRef v134 = &v147;
          v151.i64[0] = MEMORY[0x1E4F143A8];
          v151.i64[1] = 3221225472;
          int v152 = __VTPopulateColorPrimariesAndTransferFunctionValuesModern_block_invoke_4;
          double v153 = (char *)&unk_1E5785F00;
          int v158 = v105;
          BOOL v155 = v113;
          double v154 = &v147;
          uint64_t v156 = a18 + 1352;
          p_CFTypeRef cf = &cf;
          CGColorConversionInfoIterateFunctionsWithCallbacks();
        }
        if (v146) {
          CFRelease(v146);
        }
        if (v145) {
          CFRelease(v145);
        }
        if (v144) {
          CFRelease(v144);
        }
        if (v143) {
          CFRelease(v143);
        }
        if (v48) {
          CFRelease(v48);
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
        int v52 = *((_DWORD *)v148 + 6);
        _Block_object_dispose(&v147, 8);
        if (!v52 && v120 <= v105)
        {
          unsigned int v30 = a23;
          CFDictionaryRef v32 = a17;
          uint64_t v31 = a18;
          if (cf)
          {
            memset(v159, 0, 36);
            CGColorNxMTransformGetTransform();
            id v55 = objc_alloc_init(MEMORY[0x1E4F35330]);
            [v55 setPixelFormat:125];
            [v55 setTextureType:7];
            [v55 setWidth:*(void *)&v159[20]];
            [v55 setHeight:*(void *)&v159[20]];
            [v55 setDepth:*(void *)&v159[20]];
            [v55 setMipmapLevelCount:1];
            int v56 = (void *)[a1 newTextureWithDescriptor:v55];
            CFDictionaryRef v57 = (char *)malloc_type_malloc(16 * *(void *)&v159[20] * *(void *)&v159[20] * *(void *)&v159[20], 0xE899FA43uLL);
            CFArrayRef v58 = v57;
            uint64_t v59 = *(char **)&v159[20];
            uint64_t v60 = 16 * *(void *)&v159[20];
            if (*(void *)&v159[20])
            {
              uint64_t v61 = 0;
              uint64_t v62 = *(void *)&v159[28] + 8;
              BOOL v63 = v57 + 8;
              do
              {
                int v64 = 0;
                uint64_t v65 = v63;
                int v66 = (_DWORD *)v62;
                do
                {
                  BOOL v67 = v65;
                  int v68 = v66;
                  BOOL v69 = v59;
                  do
                  {
                    *(v67 - 2) = *v68;
                    *(v67 - 1) = *(v68 - 1);
                    *BOOL v67 = *(v68 - 2);
                    v67[1] = 1065353216;
                    v68 += 3;
                    v67 += 4;
                    --v69;
                  }
                  while (v69);
                  ++v64;
                  v66 += 3 * (void)v59;
                  uint64_t v65 = (_DWORD *)((char *)v65 + v60);
                }
                while (v64 != v59);
                ++v61;
                v62 += 12 * (void)v59 * (void)v59;
                v63 += 16 * (void)v59 * (void)v59;
              }
              while (v61 != v59);
            }
            float32x4_t v151 = 0uLL;
            int v152 = 0;
            double v153 = v59;
            double v154 = (uint64_t *)v59;
            BOOL v155 = (BOOL)v59;
            objc_msgSend(v56, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", &v151, 0, 0, v58);
            *a22 = v56;
            if (v58) {
              free(v58);
            }

            unsigned int v30 = a23;
            CFDictionaryRef v32 = a17;
            uint64_t v31 = a18;
          }
          goto LABEL_80;
        }
        for (uint64_t i = 0; i != 468; i += 52)
          *(_DWORD *)(a18 + 1352 + i) = -1;
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        uint64_t v33 = v115 + 1;
      }
      while (v115 != 2);
      unsigned int v30 = a23;
      CFDictionaryRef v32 = a17;
      uint64_t v31 = a18;
      if (v52)
      {
        uint64_t v54 = FigSignalErrorAt();
        goto LABEL_175;
      }
LABEL_80:
      if (v120 >= 1)
      {
        *(unsigned char *)(v31 + 1303) = 1;
        *(_WORD *)(v31 + 128) = 257;
        *unsigned int v30 = 1;
      }
    }
    if (v104 != a12 || v32[26])
    {
      *(unsigned char *)(v31 + 124) = (*(_DWORD *)(v31 + 108) - 3) < 0xFFFFFFFE;
      BOOL v70 = a11 != 2 || HIBYTE(v129) == 0;
      BOOL v71 = v102;
      if (!v70) {
        BOOL v71 = 0;
      }
      *(unsigned char *)(v31 + 126) = v71;
      *(unsigned char *)(v31 + 127) = (HIBYTE(v128) | HIBYTE(v127)) != 0;
      if (v32[30]) {
        goto LABEL_109;
      }
      *(unsigned char *)(v31 + 128) = v100 != 8;
      *(unsigned char *)(v31 + 129) = 1;
LABEL_91:
      *(unsigned char *)(v31 + 1303) = a13 != 8;
LABEL_109:
      *(unsigned char *)(v31 + 1305) = (v128 | v127) != 0;
      BOOL v76 = a15 != 2 || v129 == 0;
      char v77 = v103;
      if (!v76) {
        char v77 = 0;
      }
      *(unsigned char *)(v31 + 1306) = v77;
      *(unsigned char *)(v31 + 1316) = (*(_DWORD *)(v31 + 1296) - 3) < 0xFFFFFFFE;
      goto LABEL_115;
    }
    if (v100 != a13 || v32[25])
    {
      *(unsigned char *)(v31 + 124) = (*(_DWORD *)(v31 + 108) - 3) < 0xFFFFFFFE;
      BOOL v72 = a11 != 2 || HIBYTE(v129) == 0;
      BOOL v73 = v102;
      if (!v72) {
        BOOL v73 = 0;
      }
      *(unsigned char *)(v31 + 126) = v73;
      *(unsigned char *)(v31 + 127) = (HIBYTE(v128) | HIBYTE(v127)) != 0;
      if (v32[30]) {
        goto LABEL_109;
      }
      *(unsigned char *)(v31 + 128) = v100 != 8;
      goto LABEL_91;
    }
    if (v101 != a14 || v32[24])
    {
      *(unsigned char *)(v31 + 124) = (*(_DWORD *)(v31 + 108) - 3) < 0xFFFFFFFE;
      BOOL v74 = a11 != 2 || HIBYTE(v129) == 0;
      BOOL v75 = v102;
      if (!v74) {
        BOOL v75 = 0;
      }
      *(unsigned char *)(v31 + 126) = v75;
      *(unsigned char *)(v31 + 127) = (HIBYTE(v128) | HIBYTE(v127)) != 0;
      goto LABEL_109;
    }
    if (a11 != a15)
    {
      *(unsigned char *)(v31 + 124) = 1;
      BOOL v90 = a11 != 2 || HIBYTE(v129) == 0;
      *(unsigned char *)(v31 + 126) = v90;
      BOOL v92 = a15 != 2 || v129 == 0;
      *(unsigned char *)(v31 + 1306) = v92;
      goto LABEL_161;
    }
    if (a2 == 1751527984 || a2 == 1751528500 || a2 == 1751527986)
    {
      if (a3 == 1751527984 || a3 == 1751527986 || a3 == 1751528500)
      {
        int v86 = a2;
        goto LABEL_162;
      }
      BOOL v96 = a11 != 2 || v129 == 0;
      *(unsigned char *)(v31 + 1306) = v96;
      *(unsigned char *)(v31 + 1316) = (*(_DWORD *)(v31 + 1296) - 3) < 0xFFFFFFFE;
    }
    else
    {
      if (a3 != 1751527984 && a3 != 1751528500)
      {
        int v86 = a2;
        if (a3 != 1751527986)
        {
LABEL_162:
          uint64_t v93 = v31;
          int NativeTextureTypeForPixelFormat = getNativeTextureTypeForPixelFormat(v86);
          if (NativeTextureTypeForPixelFormat != getNativeTextureTypeForPixelFormat(a3)
            || v123 < v125
            || v122 < v124)
          {
            uint64_t v31 = v93;
            *(unsigned char *)(v93 + 124) = (*(_DWORD *)(v93 + 108) - 3) < 0xFFFFFFFE;
            *(unsigned char *)(v93 + 1316) = (*(_DWORD *)(v93 + 1296) - 3) < 0xFFFFFFFE;
            *(unsigned char *)(v93 + 1308) = HIDWORD(v121) != v121;
            unsigned int v30 = a23;
LABEL_115:
            *unsigned int v30 = 1;
            goto LABEL_116;
          }
          unsigned int v30 = a23;
          uint64_t v31 = v93;
          if (HIDWORD(v121) != v121)
          {
            *(unsigned char *)(v93 + 124) = (*(_DWORD *)(v93 + 108) - 3) < 0xFFFFFFFE;
LABEL_161:
            *(unsigned char *)(v31 + 1316) = (*(_DWORD *)(v31 + 1296) - 3) < 0xFFFFFFFE;
          }
LABEL_116:
          int v78 = *(unsigned __int8 *)(v31 + 127);
          if (*(unsigned char *)(v31 + 127))
          {
            long long v79 = (float *)(v31 + 1356);
            if (*(unsigned char *)(v31 + 1305) && !v120)
            {
              *(_DWORD *)(v31 + 1352) = 40;
              int v80 = v121;
              vtmtsPopulateYCbCrToRGBMatrix(v101, a11, SHIDWORD(v121), &v151);
              vtmtsPopulateRGBToYCbCrMatrix(a14, a15, v80, (uint64_t)v159);
              matrixMultiply((float *)v159, v151.f32, v79);
              unsigned int v30 = a23;
              *a23 = 1;
LABEL_123:
              if (v125 <= v123 && v124 <= v122)
              {
                uint64_t v84 = 0;
              }
              else
              {
                uint64_t v84 = 0;
                *unsigned int v30 = 1;
              }
              goto LABEL_127;
            }
            *a19 = 0;
            *(_DWORD *)(v31 + 1352) = 40;
            uint64_t v81 = v31;
            vtmtsPopulateYCbCrToRGBMatrix(v101, a11, SHIDWORD(v121), (float32x4_t *)(v31 + 1356));
            uint64_t v31 = v81;
            int v78 = 1;
            unsigned int v30 = a23;
            *a23 = 1;
          }
          if (*(unsigned char *)(v31 + 1305))
          {
            int v82 = v120 + v78;
            *a20 = v82;
            uint64_t v83 = v31 + 52 * v82;
            *(_DWORD *)(v83 + 1352) = 40;
            vtmtsPopulateRGBToYCbCrMatrix(a14, a15, v121, v83 + 1356);
            unsigned int v30 = a23;
          }
          goto LABEL_123;
        }
      }
      *(unsigned char *)(v31 + 124) = 1;
      BOOL v88 = a11 != 2 || HIBYTE(v129) == 0;
      *(unsigned char *)(v31 + 126) = v88;
    }
    unsigned int v30 = a23;
    goto LABEL_116;
  }
  uint64_t v54 = FigSignalErrorAt();
LABEL_175:
  uint64_t v84 = v54;
LABEL_127:
  if (cf) {
    CFRelease(cf);
  }
  return v84;
}

void sub_193D9D2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a70, 8);
  _Unwind_Resume(a1);
}

uint64_t vtCreateTexDescGlobalSample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (a1 && a3 && (a6 - 3) > 0xFFFFFFFD)
  {
    if (a2)
    {
      if (a5) {
        MTLPixelFormatGetInfoForDevice();
      }
    }
    return 4294954391;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vtmtsBuildSource(void *a1, int *a2, int a3, uint64_t a4, const __CFArray *a5)
{
  int v10 = *a2;
  int EquivalentUncompressedPixelFormat = getEquivalentUncompressedPixelFormat(*a2);
  CFDictionaryRef v12 = (void *)[a1 familyName];
  BOOL v13 = !v12 || ![v12 containsString:@"A8"] || a2[17] != 3;
  DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (DescriptionWithPixelFormatType)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E4F24EE0]);
    if (Value)
    {
      CFArrayRef v16 = Value;
      CFTypeID v17 = CFGetTypeID(Value);
      if (v17 == CFArrayGetTypeID())
      {
        CFArrayGetValueAtIndex(v16, 0);
        FigCFDictionaryGetInt32IfPresent();
      }
    }
  }
  int v18 = *a2;
  if (a4) {
    *(_DWORD *)(a4 + 152 * a2[6]) = v18;
  }
  uint64_t result = 4294954391;
  if (v18 > 1647534391)
  {
    if (v18 > 1953903151)
    {
      if (v18 <= 2019964015)
      {
        if (v18 <= 2016686639)
        {
          if (v18 <= 1983013175)
          {
            if (v18 > 1953903667)
            {
              if (v18 != 1953903668)
              {
                if (v18 != 1983000886) {
                  return result;
                }
                if (!a4) {
                  return 0;
                }
                int v106 = 0;
                uint64_t v54 = 0x100000000;
                uint64_t v55 = 110;
                uint64_t v56 = 60;
LABEL_432:
                v105[1] = v55;
                _OWORD v105[2] = v54;
                v105[0] = v56;
                int v104 = 0;
                v103[2] = 0;
                long long v47 = 0uLL;
LABEL_507:
                *(_OWORD *)char v103 = v47;
                int v102 = 0;
                uint64_t v101 = 0x400000000;
                long long v100 = v47;
LABEL_508:
                *(_OWORD *)int v99 = v47;
                uint64_t v64 = (uint64_t)a2;
                int v36 = 2;
                goto LABEL_509;
              }
            }
            else if (v18 != 1953903152)
            {
              int v21 = 1953903154;
              goto LABEL_429;
            }
LABEL_430:
            if (!a4) {
              return 0;
            }
            int v106 = 0;
            uint64_t v54 = 0x100000001;
            uint64_t v55 = 60;
            uint64_t v56 = 20;
            goto LABEL_432;
          }
          if (v18 <= 1999843441)
          {
            if (v18 == 1983013176 || v18 == 1983144248)
            {
              if (!a4) {
                return 0;
              }
              if (a2[17] == 2 || a3 == 0) {
                int v32 = 1;
              }
              else {
                int v32 = 2;
              }
              int appended = appendSrcTextureDescriptions_4PlaneSample((uint64_t)a2, v32, a4, a5, 10, 30, 10, 0, 0);
LABEL_513:
              int v98 = appended;
              uint64_t result = 0;
              if (!v98) {
                return result;
              }
              return 4294954391;
            }
            return result;
          }
          if (v18 == 1999843442) {
            goto LABEL_297;
          }
          int v57 = 2016567667;
          goto LABEL_291;
        }
        if (v18 <= 2016698738)
        {
          if (v18 <= 2016687155)
          {
            if (v18 != 2016686640)
            {
              if (v18 != 2016686642) {
                return result;
              }
              goto LABEL_397;
            }
LABEL_138:
            if (!a4) {
              return 0;
            }
            if (a2[17] == 2 || a3 == 0) {
              int v36 = 1;
            }
            else {
              int v36 = 2;
            }
            BOOL v42 = !v13;
            if (v13) {
              uint64_t v43 = 505;
            }
            else {
              uint64_t v43 = 0;
            }
            uint64_t v44 = 543;
            goto LABEL_408;
          }
          if (v18 != 2016687156)
          {
            if (v18 != 2016687216) {
              return result;
            }
            goto LABEL_243;
          }
LABEL_386:
          if (!a4) {
            return 0;
          }
          if (a2[17] == 2 || a3 == 0) {
            int v36 = 1;
          }
          else {
            int v36 = 2;
          }
          BOOL v42 = !v13;
          if (v13) {
            uint64_t v43 = 507;
          }
          else {
            uint64_t v43 = 0;
          }
          uint64_t v44 = 545;
          goto LABEL_408;
        }
        if (v18 <= 2019963441)
        {
          if (v18 == 2016698739) {
            goto LABEL_292;
          }
          int v24 = 2019963440;
          goto LABEL_137;
        }
        if (v18 != 2019963442)
        {
          int v59 = 2019963956;
LABEL_385:
          if (v18 != v59) {
            return result;
          }
          goto LABEL_386;
        }
        goto LABEL_397;
      }
      if (v18 > 2037741170)
      {
        if (v18 > 2088265263)
        {
          if (v18 > 2088269359)
          {
            if (v18 == 2088269360) {
              goto LABEL_359;
            }
            unsigned __int16 v49 = 30258;
          }
          else
          {
            if (v18 == 2088265264) {
              goto LABEL_359;
            }
            unsigned __int16 v49 = 26162;
          }
          int v39 = v49 | 0x7C780000;
          goto LABEL_439;
        }
        if (v18 > 2084075055)
        {
          if (v18 == 2084075056) {
            goto LABEL_266;
          }
          int v27 = 2084718401;
LABEL_239:
          if (v18 != v27) {
            return result;
          }
LABEL_310:
          if (!a4) {
            return 0;
          }
          if (a3) {
            int v73 = 2;
          }
          else {
            int v73 = 1;
          }
          if (v10 == EquivalentUncompressedPixelFormat) {
            uint64_t v74 = 123;
          }
          else {
            uint64_t v74 = 0;
          }
          uint64_t v75 = 53;
          if (v10 != EquivalentUncompressedPixelFormat) {
            uint64_t v75 = 0;
          }
          int appended = appendSrcTextureDescriptions((uint64_t)a2, v73, a4, a5, 0, 0, 0, v74, 0, 0, 0, 1, 0, 0, 0, 4, 0, v75, 0,
                       0,
                       0,
                       1,
                       80,
                       0,
                       0,
                       0,
                       0);
          goto LABEL_513;
        }
        if (v18 != 2037741171)
        {
          int v20 = 2084070960;
          goto LABEL_265;
        }
LABEL_322:
        if (a4)
        {
          if (a2[17] == 2 || a3 == 0) {
            int v36 = 1;
          }
          else {
            int v36 = 2;
          }
          if (v13) {
            uint64_t v43 = 501;
          }
          else {
            uint64_t v43 = 0;
          }
          if (v13) {
            uint64_t v51 = 240;
          }
          else {
            uint64_t v51 = 0;
          }
          if (v10 == EquivalentUncompressedPixelFormat) {
            uint64_t v68 = 103;
          }
          else {
            uint64_t v68 = 0;
          }
          uint64_t v77 = 33;
          if (v10 != EquivalentUncompressedPixelFormat) {
            uint64_t v77 = 0;
          }
          uint64_t v78 = 30;
          if (v10 != EquivalentUncompressedPixelFormat) {
            uint64_t v78 = 0;
          }
          int v106 = 0;
          v105[1] = 70;
          _OWORD v105[2] = 0x100000000;
          v105[0] = v78;
          int v104 = 0;
          v103[1] = 53;
          v103[2] = 0x100000000;
          v103[0] = v77;
          int v102 = 0;
          uint64_t v101 = 0x400000000;
          long long v100 = 0u;
          *(_OWORD *)int v99 = 0u;
          goto LABEL_288;
        }
        return 0;
      }
      if (v18 <= 2021078127)
      {
        if (v18 <= 2021077553)
        {
          if (v18 == 2019964016) {
            goto LABEL_243;
          }
          int v24 = 2021077552;
LABEL_137:
          if (v18 != v24) {
            return result;
          }
          goto LABEL_138;
        }
        if (v18 != 2021077554)
        {
          int v59 = 2021078068;
          goto LABEL_385;
        }
LABEL_397:
        if (!a4) {
          return 0;
        }
        if (a2[17] == 2 || a3 == 0) {
          int v36 = 1;
        }
        else {
          int v36 = 2;
        }
        BOOL v42 = !v13;
        if (v13) {
          uint64_t v43 = 506;
        }
        else {
          uint64_t v43 = 0;
        }
        uint64_t v44 = 544;
LABEL_408:
        if (v42) {
          uint64_t v51 = 0;
        }
        else {
          uint64_t v51 = v44;
        }
        int v106 = 0;
        uint64_t v61 = 60;
        uint64_t v62 = 20;
LABEL_412:
        v105[1] = v61;
        _OWORD v105[2] = 0x100000001;
        v105[0] = v62;
        int v104 = 0;
        long long v53 = 0uLL;
        memset(v103, 0, sizeof(v103));
        goto LABEL_413;
      }
      if (v18 <= 2033463605)
      {
        if (v18 != 2021078128)
        {
          if (v18 != 2033463352) {
            return result;
          }
          if (!a4) {
            return 0;
          }
          if (a3) {
            int v36 = 2;
          }
          else {
            int v36 = 1;
          }
          int v37 = 2;
          int v106 = 2;
          long long v38 = 0uLL;
          *(_OWORD *)&v105[1] = 0u;
          v105[0] = 70;
LABEL_458:
          int v104 = v37;
          *(_OWORD *)&v103[1] = v38;
          uint64_t v91 = 53;
LABEL_501:
          v103[0] = v91;
          goto LABEL_502;
        }
        goto LABEL_243;
      }
      if (v18 != 2033463606)
      {
        if (v18 != 2037741158) {
          return result;
        }
        goto LABEL_322;
      }
      if (!a4) {
        return 0;
      }
      int v106 = 2;
LABEL_505:
      long long v47 = 0uLL;
      *(_OWORD *)&v105[1] = 0u;
      uint64_t v48 = 110;
LABEL_506:
      v105[0] = v48;
      int v104 = 0;
      v103[2] = 0;
      goto LABEL_507;
    }
    if (v18 <= 1886859825)
    {
      if (v18 > 1815491697)
      {
        if (v18 <= 1885745711)
        {
          if (v18 <= 1882468913)
          {
            if (v18 != 1815491698)
            {
              int v26 = 1882468912;
              goto LABEL_358;
            }
            if (!a4) {
              return 0;
            }
            int v106 = 0;
            long long v47 = 0uLL;
            *(_OWORD *)&v105[1] = 0u;
            v105[0] = 110;
            int v104 = 0;
            memset(v103, 0, sizeof(v103));
            int v102 = 0;
            uint64_t v101 = 0x100000000;
            long long v100 = 0x35uLL;
            goto LABEL_508;
          }
          if (v18 == 1882468914) {
            goto LABEL_440;
          }
          int v23 = 1882469428;
          goto LABEL_417;
        }
        if (v18 <= 1885746227)
        {
          if (v18 == 1885745712) {
            goto LABEL_359;
          }
          int v39 = 1885745714;
          goto LABEL_439;
        }
        if (v18 != 1885746228)
        {
          int v26 = 1886859824;
LABEL_358:
          if (v18 != v26) {
            return result;
          }
LABEL_359:
          if (a4)
          {
            if (a2[17] == 2 || a3 == 0) {
              int v36 = 1;
            }
            else {
              int v36 = 2;
            }
            BOOL v81 = !v13;
            uint64_t v82 = 546;
LABEL_448:
            if (v81) {
              uint64_t v51 = 0;
            }
            else {
              uint64_t v51 = v82;
            }
            int v106 = 0;
            memset(v105, 0, sizeof(v105));
            int v104 = 0;
            memset(v103, 0, sizeof(v103));
            int v102 = 0;
            uint64_t v101 = 0x400000000;
            long long v100 = 0u;
            *(_OWORD *)int v99 = 0u;
            uint64_t v64 = (uint64_t)a2;
            uint64_t v65 = a4;
            CFArrayRef v66 = a5;
            uint64_t v43 = 0;
            goto LABEL_452;
          }
          return 0;
        }
        goto LABEL_418;
      }
      if (v18 > 1751527983)
      {
        if (v18 > 1751528499)
        {
          if (v18 != 1751528500)
          {
            int v34 = 1815162994;
LABEL_256:
            if (v18 != v34) {
              return result;
            }
            goto LABEL_297;
          }
        }
        else if (v18 != 1751527984 && v18 != 1751527986)
        {
          return result;
        }
        if (!a4) {
          return 0;
        }
        if (a3) {
          int v36 = 2;
        }
        else {
          int v36 = 1;
        }
        int v106 = 0;
        v105[1] = 65;
        _OWORD v105[2] = 0x100000001;
        v105[0] = 25;
        int v104 = 0;
        v103[2] = 0;
        long long v38 = 0uLL;
        goto LABEL_470;
      }
      if (v18 == 1647534392) {
        goto LABEL_297;
      }
      if (v18 == 1647719521)
      {
        if (!a4) {
          return 0;
        }
        if (a3) {
          int v36 = 2;
        }
        else {
          int v36 = 1;
        }
        int v106 = 0;
        long long v38 = 0uLL;
        memset(v105, 0, sizeof(v105));
        int v104 = 0;
        *(_OWORD *)&v103[1] = 0u;
        uint64_t v91 = 103;
        goto LABEL_501;
      }
      if (v18 != 1651521076) {
        return result;
      }
      if (!a4) {
        return 0;
      }
      int v106 = 0;
      goto LABEL_505;
    }
    if (v18 > 1937125935)
    {
      if (v18 > 1949589874)
      {
        if (v18 > 1952854577)
        {
          if (v18 == 1952854578) {
            goto LABEL_430;
          }
          unsigned __int16 v46 = 13364;
        }
        else
        {
          if (v18 == 1949589875) {
            goto LABEL_292;
          }
          unsigned __int16 v46 = 12848;
        }
        int v21 = v46 | 0x74660000;
      }
      else
      {
        if (v18 > 1937126451)
        {
          if (v18 == 1937126452) {
            goto LABEL_430;
          }
          int v57 = 1949458803;
          goto LABEL_291;
        }
        if (v18 == 1937125936) {
          goto LABEL_430;
        }
        int v21 = 1937125938;
      }
    }
    else
    {
      if (v18 <= 1932812658)
      {
        if (v18 <= 1915892015)
        {
          if (v18 == 1886859826) {
            goto LABEL_440;
          }
          int v23 = 1886860340;
          goto LABEL_417;
        }
        if (v18 == 1915892016)
        {
LABEL_453:
          if (!a4) {
            return 0;
          }
          int v37 = 1;
          if (a3) {
            int v36 = 2;
          }
          else {
            int v36 = 1;
          }
          int v106 = 0;
          long long v38 = 0uLL;
          memset(v105, 0, sizeof(v105));
          goto LABEL_458;
        }
        int v57 = 1932681587;
LABEL_291:
        if (v18 != v57) {
          return result;
        }
LABEL_292:
        if (a4)
        {
          int appended = appendSrcTextureDescriptions_4PlaneSample((uint64_t)a2, 2, a4, a5, 20, 60, 20, 0, 0);
          goto LABEL_513;
        }
        return 0;
      }
      if (v18 > 1936077361)
      {
        if (v18 == 1936077362) {
          goto LABEL_430;
        }
        unsigned __int16 v35 = 13364;
      }
      else
      {
        if (v18 == 1932812659) {
          goto LABEL_292;
        }
        unsigned __int16 v35 = 12848;
      }
      int v21 = v35 | 0x73660000;
    }
LABEL_429:
    if (v18 != v21) {
      return result;
    }
    goto LABEL_430;
  }
  if (v18 > 758670895)
  {
    if (v18 <= 875704421)
    {
      if (v18 <= 792229423)
      {
        if (v18 <= 762865201)
        {
          if (v18 <= 759318336)
          {
            if (v18 == 758670896) {
              goto LABEL_266;
            }
            int v20 = 758674992;
            goto LABEL_265;
          }
          if (v18 != 759318337)
          {
            unsigned __int16 v30 = 26160;
            goto LABEL_190;
          }
          goto LABEL_310;
        }
        if (v18 <= 762869297)
        {
          if (v18 != 762865202)
          {
            unsigned __int16 v30 = 30256;
LABEL_190:
            int v26 = v30 | 0x2D780000;
            goto LABEL_358;
          }
LABEL_440:
          if (a4)
          {
            if (a2[17] == 2 || a3 == 0) {
              int v36 = 1;
            }
            else {
              int v36 = 2;
            }
            BOOL v81 = !v13;
            uint64_t v82 = 547;
            goto LABEL_448;
          }
          return 0;
        }
        if (v18 == 762869298) {
          goto LABEL_440;
        }
        int v20 = 792225328;
LABEL_265:
        if (v18 != v20) {
          return result;
        }
LABEL_266:
        if (a4)
        {
          if (a2[17] == 2 || a3 == 0) {
            int v36 = 1;
          }
          else {
            int v36 = 2;
          }
          if (v13) {
            uint64_t v43 = 500;
          }
          else {
            uint64_t v43 = 0;
          }
          if (v13) {
            uint64_t v51 = 540;
          }
          else {
            uint64_t v51 = 0;
          }
          if (v10 == EquivalentUncompressedPixelFormat) {
            uint64_t v68 = 53;
          }
          else {
            uint64_t v68 = 0;
          }
          if (v10 == EquivalentUncompressedPixelFormat) {
            uint64_t v69 = 70;
          }
          else {
            uint64_t v69 = 0;
          }
          uint64_t v70 = 13;
          if (v10 != EquivalentUncompressedPixelFormat) {
            uint64_t v70 = 0;
          }
          int v106 = 0;
          v105[1] = 30;
          _OWORD v105[2] = 0x100000001;
          v105[0] = 10;
          int v104 = 0;
          v103[1] = 33;
          v103[2] = 0x100000001;
          v103[0] = v70;
          int v102 = 2;
          *((void *)&v100 + 1) = 70;
          uint64_t v101 = 0x400000001;
          *(void *)&long long v100 = v69;
          v99[0] = 53;
          v99[1] = 0x200000001;
LABEL_288:
          uint64_t v64 = (uint64_t)a2;
          uint64_t v65 = a4;
          CFArrayRef v66 = a5;
          int v71 = 3;
LABEL_512:
          int appended = appendSrcTextureDescriptions(v64, v36, v65, v66, v43, v51, v71, v68, v99[0], v99[1], SHIDWORD(v99[1]), 0, v100, *((uint64_t *)&v100 + 1), v101, SHIDWORD(v101), v102, v103[0], v103[1],
                       v103[2],
                       SHIDWORD(v103[2]),
                       v104,
                       v105[0],
                       v105[1],
                       v105[2],
                       SHIDWORD(v105[2]),
                       v106);
          goto LABEL_513;
        }
        return 0;
      }
      if (v18 <= 796423727)
      {
        if (v18 <= 796419631)
        {
          if (v18 == 792229424) {
            goto LABEL_266;
          }
          int v27 = 792872769;
          goto LABEL_239;
        }
        if (v18 == 796419632) {
          goto LABEL_359;
        }
        unsigned __int16 v40 = 26162;
        goto LABEL_224;
      }
      if (v18 <= 846624101)
      {
        if (v18 == 796423728) {
          goto LABEL_359;
        }
        unsigned __int16 v40 = 30258;
LABEL_224:
        int v39 = v40 | 0x2F780000;
LABEL_439:
        if (v18 != v39) {
          return result;
        }
        goto LABEL_440;
      }
      if (v18 == 846624102 || v18 == 846624121)
      {
        if (!a4) {
          return 0;
        }
        if (a2[17] == 2 || a3 == 0) {
          int v84 = 1;
        }
        else {
          int v84 = 2;
        }
        if (v13) {
          uint64_t v85 = 562;
        }
        else {
          uint64_t v85 = 0;
        }
        if (v13) {
          uint64_t v86 = 241;
        }
        else {
          uint64_t v86 = 0;
        }
        int appended = appendSrcTextureDescriptions((uint64_t)a2, v84, a4, a5, v85, v86, 3, 103, 0, 0, 0, 0, 0, 0, 0, 4, 0, 33, 53,
                     0,
                     1,
                     0,
                     30,
                     70,
                     0,
                     1,
                     0);
        goto LABEL_513;
      }
      return result;
    }
    if (v18 <= 1278226533)
    {
      if (v18 <= 875836517)
      {
        if (v18 <= 875704933)
        {
          if (v18 == 875704422) {
            goto LABEL_266;
          }
          int v20 = 875704438;
          goto LABEL_265;
        }
        if (v18 == 875704934) {
          goto LABEL_206;
        }
        int v58 = 875704950;
        goto LABEL_205;
      }
      if (v18 <= 1111970368)
      {
        if (v18 == 875836518)
        {
LABEL_163:
          if (!a4) {
            return 0;
          }
          if (a2[17] == 2 || a3 == 0) {
            int v36 = 1;
          }
          else {
            int v36 = 2;
          }
          if (v13) {
            uint64_t v43 = 503;
          }
          else {
            uint64_t v43 = 0;
          }
          if (v13) {
            uint64_t v51 = 542;
          }
          else {
            uint64_t v51 = 0;
          }
          uint64_t v52 = 13;
          if (v10 != EquivalentUncompressedPixelFormat) {
            uint64_t v52 = 0;
          }
          int v106 = 0;
          v105[1] = 30;
          _OWORD v105[2] = 0x100000001;
          v105[0] = 10;
          int v104 = 0;
          v103[2] = 0x100000001;
          v103[0] = v52;
          v103[1] = 33;
          long long v53 = 0uLL;
LABEL_413:
          int v102 = 0;
          uint64_t v101 = 0x400000000;
          long long v100 = v53;
          *(_OWORD *)int v99 = v53;
          uint64_t v64 = (uint64_t)a2;
          uint64_t v65 = a4;
          CFArrayRef v66 = a5;
LABEL_452:
          int v71 = 3;
LABEL_511:
          uint64_t v68 = 0;
          goto LABEL_512;
        }
        int v25 = 875836534;
LABEL_115:
        if (v18 != v25) {
          return result;
        }
        goto LABEL_163;
      }
      if (v18 == 1111970369) {
        goto LABEL_310;
      }
      if (v18 != 1278226488) {
        return result;
      }
      goto LABEL_351;
    }
    if (v18 <= 1378955370)
    {
      if (v18 <= 1278226735)
      {
        if (v18 != 1278226534)
        {
          int v29 = 1278226536;
          goto LABEL_345;
        }
        if (!a4) {
          return result;
        }
        int v106 = 0;
        long long v47 = 0uLL;
        *(_OWORD *)&v105[1] = 0u;
        uint64_t v48 = 55;
        goto LABEL_506;
      }
      if (v18 != 1278226736)
      {
        int v22 = 1278226742;
LABEL_234:
        if (v18 != v22 || !a4) {
          return result;
        }
        int v106 = 0;
        long long v47 = 0uLL;
        *(_OWORD *)&v105[1] = 0u;
        uint64_t v48 = 20;
        goto LABEL_506;
      }
      goto LABEL_459;
    }
    if (v18 <= 1380411456)
    {
      if (v18 != 1378955371)
      {
        if (v18 != 1380410945) {
          return result;
        }
        if (!a4) {
          return 0;
        }
        int v106 = 0;
        long long v47 = 0uLL;
        *(_OWORD *)&v105[1] = 0u;
        uint64_t v48 = 125;
        goto LABEL_506;
      }
      goto LABEL_453;
    }
    if (v18 != 1380411457)
    {
      if (v18 == 1647392369) {
        return appendSrcTextureDescriptions_4PlaneSample((uint64_t)a2, 2, a4, a5, 20, 20, 20, 20, 1);
      }
      return result;
    }
LABEL_464:
    if (!a4) {
      return 0;
    }
    if (a3) {
      int v36 = 2;
    }
    else {
      int v36 = 1;
    }
    int v106 = 0;
    long long v38 = 0uLL;
    *(_OWORD *)&v105[1] = 0u;
    uint64_t v79 = 115;
    goto LABEL_469;
  }
  if (v18 > 642527535)
  {
    if (v18 <= 645424689)
    {
      if (v18 <= 644232303)
      {
        if (v18 <= 642934848)
        {
          if (v18 != 642527536)
          {
            int v22 = 642527542;
            goto LABEL_234;
          }
LABEL_459:
          if (!a4) {
            return result;
          }
          if (a3) {
            int v36 = 2;
          }
          else {
            int v36 = 1;
          }
          int v106 = 0;
          long long v38 = 0uLL;
          *(_OWORD *)&v105[1] = 0u;
          uint64_t v79 = 20;
          goto LABEL_469;
        }
        if (v18 == 642934849) {
          goto LABEL_464;
        }
        int v34 = 643969848;
        goto LABEL_256;
      }
      if (v18 <= 645346161)
      {
        if (v18 != 644232304)
        {
          int v34 = 644624754;
          goto LABEL_256;
        }
LABEL_243:
        if (!a4) {
          return 0;
        }
        if (a2[17] == 2 || a3 == 0) {
          int v36 = 1;
        }
        else {
          int v36 = 2;
        }
        if (v13) {
          uint64_t v43 = 504;
        }
        else {
          uint64_t v43 = 0;
        }
        int v106 = 0;
        *(_OWORD *)&v105[1] = 0u;
        v105[0] = 90;
        int v104 = 0;
        memset(v103, 0, sizeof(v103));
        int v102 = 0;
        uint64_t v101 = 0x400000000;
        long long v100 = 0u;
        *(_OWORD *)int v99 = 0u;
        uint64_t v64 = (uint64_t)a2;
        uint64_t v65 = a4;
        CFArrayRef v66 = a5;
LABEL_510:
        uint64_t v51 = 0;
        int v71 = 0;
        goto LABEL_511;
      }
      if (v18 != 645346162)
      {
        unsigned __int16 v45 = 26160;
        goto LABEL_296;
      }
LABEL_297:
      if (!a4) {
        return 0;
      }
      if (v18 == 1647534392 || v18 == 643969848)
      {
        if (a3) {
          int v72 = 2;
        }
        else {
          int v72 = 1;
        }
        uint64_t result = appendSrcTextureDescriptions((uint64_t)a2, v72, a4, a5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,
                   0,
                   0,
                   0,
                   90,
                   10,
                   1,
                   1,
                   1);
      }
      else
      {
        if (a3) {
          int v92 = 2;
        }
        else {
          int v92 = 1;
        }
        if (v10 == EquivalentUncompressedPixelFormat) {
          uint64_t v93 = 123;
        }
        else {
          uint64_t v93 = 0;
        }
        uint64_t v94 = 53;
        if (v10 != EquivalentUncompressedPixelFormat) {
          uint64_t v94 = 0;
        }
        uint64_t result = appendSrcTextureDescriptions((uint64_t)a2, v92, a4, a5, 0, 0, 0, v93, 0, 0, 0, 1, 0, 0, 0, 4, 0, v94, 0,
                   0,
                   0,
                   1,
                   90,
                   0,
                   0,
                   0,
                   1);
      }
      if (result) {
        return 4294954391;
      }
      return result;
    }
    if (v18 <= 645428787)
    {
      if (v18 > 645428783)
      {
        if (v18 == 645428784) {
          goto LABEL_359;
        }
        int v39 = 645428786;
        goto LABEL_439;
      }
      if (v18 == 645424690) {
        goto LABEL_440;
      }
      unsigned __int16 v28 = 26164;
      goto LABEL_416;
    }
    if (v18 > 645429041)
    {
      if (v18 == 645429042) {
        goto LABEL_440;
      }
      unsigned __int16 v28 = 30516;
LABEL_416:
      int v23 = v28 | 0x26780000;
LABEL_417:
      if (v18 != v23) {
        return result;
      }
      goto LABEL_418;
    }
    if (v18 != 645428788)
    {
      unsigned __int16 v45 = 30512;
LABEL_296:
      int v26 = v45 | 0x26780000;
      goto LABEL_358;
    }
LABEL_418:
    if (a4)
    {
      if (a2[17] == 2 || a3 == 0) {
        int v36 = 1;
      }
      else {
        int v36 = 2;
      }
      BOOL v81 = !v13;
      uint64_t v82 = 548;
      goto LABEL_448;
    }
    return 0;
  }
  if (v18 > 641230385)
  {
    if (v18 <= 641234483)
    {
      if (v18 > 641234479)
      {
        if (v18 == 641234480) {
          goto LABEL_266;
        }
        int v58 = 641234482;
LABEL_205:
        if (v18 != v58) {
          return result;
        }
        goto LABEL_206;
      }
      if (v18 == 641230386)
      {
LABEL_206:
        if (!a4) {
          return 0;
        }
        if (a2[17] == 2 || a3 == 0) {
          int v36 = 1;
        }
        else {
          int v36 = 2;
        }
        if (v13) {
          uint64_t v43 = 502;
        }
        else {
          uint64_t v43 = 0;
        }
        if (v13) {
          uint64_t v51 = 541;
        }
        else {
          uint64_t v51 = 0;
        }
        int v106 = 0;
        uint64_t v61 = 30;
        uint64_t v62 = 10;
        goto LABEL_412;
      }
      int v25 = 641230388;
      goto LABEL_115;
    }
    if (v18 <= 642527287)
    {
      if (v18 != 641234484)
      {
        int v27 = 641877825;
        goto LABEL_239;
      }
      goto LABEL_163;
    }
    if (v18 == 642527288) {
      goto LABEL_351;
    }
    int v29 = 642527336;
LABEL_345:
    if (v18 != v29 || !a4) {
      return result;
    }
    if (a3) {
      int v36 = 2;
    }
    else {
      int v36 = 1;
    }
    int v106 = 0;
    long long v38 = 0uLL;
    *(_OWORD *)&v105[1] = 0u;
    uint64_t v79 = 25;
    goto LABEL_469;
  }
  if (v18 > 590898735)
  {
    if (v18 <= 640955503)
    {
      if (v18 == 590898736) {
        goto LABEL_266;
      }
      int v20 = 590902832;
      goto LABEL_265;
    }
    if (v18 != 640955504)
    {
      int v20 = 641230384;
      goto LABEL_265;
    }
    goto LABEL_243;
  }
  switch(v18)
  {
    case 0:
      if (!a4) {
        return 0;
      }
      uint64_t result = 0;
      if (a3) {
        int v95 = 2;
      }
      else {
        int v95 = 1;
      }
      uint64_t v96 = a4 + 152 * a2[6];
      *(_DWORD *)(v96 + 108) = v95;
      *(unsigned char *)(v96 + 112) = 1;
      *(_WORD *)(v96 + 115) = 0;
      *(unsigned char *)(v96 + 117) = 0;
      *(unsigned char *)(v96 + 124) = 0;
      *(_DWORD *)(v96 + 126) = 0;
      *(unsigned char *)(a4 + 1304) = 0;
      return result;
    case 32:
      if (!a4) {
        return 0;
      }
      if (a3) {
        int v97 = 2;
      }
      else {
        int v97 = 1;
      }
      int appended = appendSrcTextureDescriptions((uint64_t)a2, v97, a4, a5, 0, 0, 0, 123, 0, 0, 0, 2, 0, 0, 0, 4, 0, 53, 0,
                   0,
                   0,
                   2,
                   70,
                   0,
                   0,
                   0,
                   2);
      goto LABEL_513;
    case 40:
LABEL_351:
      if (!a4) {
        return result;
      }
      if (a3) {
        int v36 = 2;
      }
      else {
        int v36 = 1;
      }
      int v106 = 0;
      long long v38 = 0uLL;
      *(_OWORD *)&v105[1] = 0u;
      uint64_t v79 = 10;
LABEL_469:
      v105[0] = v79;
      int v104 = 0;
      v103[2] = 0;
LABEL_470:
      *(_OWORD *)char v103 = v38;
LABEL_502:
      int v102 = 0;
      uint64_t v101 = 0x400000000;
      long long v100 = v38;
      *(_OWORD *)int v99 = v38;
      uint64_t v64 = (uint64_t)a2;
LABEL_509:
      uint64_t v65 = a4;
      CFArrayRef v66 = a5;
      uint64_t v43 = 0;
      goto LABEL_510;
  }
  return result;
}

uint64_t vtCreateTexDescGlobalWrite(uint64_t a1, uint64_t a2, __CFArray *a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, unsigned int a9, int a10, int a11, int a12)
{
  if (a1 && a4 && (a7 - 3) > 0xFFFFFFFD)
  {
    if (!a3 || !returnMetalFormatIfWritable(a1, a2, a6)) {
      return 4294954391;
    }
    MEMORY[0x199705810](&VTMTSTextureDescriptorGetTypeID_sRegisterVTMTSTextureDescriptorOnce, RegisterVTMTSTextureDescriptor);
    uint64_t Instance = _CFRuntimeCreateInstance();
    *(_DWORD *)(Instance + 16) = 3;
    *(_DWORD *)(Instance + 20) = a8;
    *(_DWORD *)(Instance + 24) = 0;
    *(void *)(Instance + 32) = a6;
    *(_DWORD *)(Instance + 40) = 1;
    *(_DWORD *)(Instance + 44) = a10;
    *(_DWORD *)(Instance + 48) = 0;
    *(_DWORD *)(Instance + 60) = a12;
    *(_DWORD *)(Instance + 64) = 0;
    *(_DWORD *)(Instance + 56) = a11;
    CFArrayAppendValue(a3, (const void *)Instance);
    if (a7 == 1)
    {
      int v19 = (_DWORD *)(a4 + 4 * a9 + 40);
    }
    else
    {
      if (a7 != 2)
      {
LABEL_12:
        *(_DWORD *)a4 = a5;
        *(unsigned char *)(a4 + 96) = 0;
        CFRelease((CFTypeRef)Instance);
        return 0;
      }
      int v19 = (_DWORD *)(a4 + 4 * a9 + 64);
    }
    _DWORD *v19 = a10;
    *(_DWORD *)(a4 + 76) = a7;
    goto LABEL_12;
  }

  return FigSignalErrorAt();
}

uint64_t vtmtsBuildDestination(void *a1, unsigned int *a2, int a3, uint64_t a4, __CFArray *a5, const __CFArray *a6)
{
  unsigned int v12 = *a2;
  int EquivalentUncompressedPixelFormat = getEquivalentUncompressedPixelFormat(*a2);
  int v14 = *a2;
  if (a4) {
    *(_DWORD *)(a4 + 1220) = v14;
  }
  uint64_t result = 4294954391;
  if (v14 > 1647719520)
  {
    if (v14 <= 1953903667)
    {
      if (v14 > 1915892015)
      {
        if (v14 <= 1937126451)
        {
          if (v14 <= 1936077361)
          {
            if (v14 <= 1932812658)
            {
              if (v14 == 1915892016) {
                goto LABEL_386;
              }
              int v16 = 1932681587;
              goto LABEL_250;
            }
            if (v14 != 1932812659)
            {
              unsigned __int16 v26 = 12848;
              goto LABEL_170;
            }
LABEL_251:
            if (!a4) {
              return 0;
            }
            uint64_t v99 = 1;
            *(void *)&long long v98 = 0x200000001;
            *((void *)&v98 + 1) = 0x100000001;
            *(void *)&v97[1] = 60;
            *((void *)&v97[1] + 1) = 20;
            *(void *)&v97[0] = 0;
            *((void *)&v97[0] + 1) = 20;
            long long v39 = 0uLL;
            long long v96 = 0u;
            memset(v95, 0, sizeof(v95));
            int v94 = 4;
            *(void *)&long long v93 = 0x200000001;
            *((void *)&v93 + 1) = 0x200000004;
            *(void *)&v92[1] = 110;
            *((void *)&v92[1] + 1) = 110;
            *(void *)&v92[0] = 0;
            *((void *)&v92[0] + 1) = 110;
            long long v91 = 0u;
            goto LABEL_362;
          }
          if (v14 <= 1937125935)
          {
            if (v14 != 1936077362)
            {
              unsigned __int16 v26 = 13364;
LABEL_170:
              int v47 = v26 | 0x73660000;
              goto LABEL_358;
            }
LABEL_359:
            if (!a4) {
              return 0;
            }
            *((void *)&v98 + 1) = 0x100000001;
            uint64_t v99 = 0;
            *(void *)&long long v98 = 1;
            v97[1] = 0x3CuLL;
            *(void *)&v97[0] = 0;
            *((void *)&v97[0] + 1) = 20;
            long long v39 = 0uLL;
            long long v96 = 0u;
            memset(v95, 0, sizeof(v95));
LABEL_361:
            int v94 = 0;
            v92[1] = v39;
            long long v93 = v39;
            long long v91 = v39;
            v92[0] = v39;
LABEL_362:
            *(void *)&v90[16] = 0;
            *(_OWORD *)BOOL v90 = v39;
            int v89 = 0;
            long long v38 = a2;
            int v24 = 2;
            goto LABEL_363;
          }
          if (v14 == 1937125936) {
            goto LABEL_359;
          }
          int v47 = 1937125938;
LABEL_358:
          if (v14 != v47) {
            return result;
          }
          goto LABEL_359;
        }
        if (v14 > 1952854577)
        {
          if (v14 > 1953903151)
          {
            if (v14 == 1953903152) {
              goto LABEL_359;
            }
            int v47 = 1953903154;
            goto LABEL_358;
          }
          if (v14 == 1952854578) {
            goto LABEL_359;
          }
          unsigned __int16 v34 = 13364;
        }
        else
        {
          if (v14 <= 1949589874)
          {
            if (v14 == 1937126452) {
              goto LABEL_359;
            }
            int v16 = 1949458803;
LABEL_250:
            if (v14 != v16) {
              return result;
            }
            goto LABEL_251;
          }
          if (v14 == 1949589875) {
            goto LABEL_251;
          }
          unsigned __int16 v34 = 12848;
        }
        int v47 = v34 | 0x74660000;
        goto LABEL_358;
      }
      if (v14 > 1882468913)
      {
        if (v14 <= 1885746227)
        {
          if (v14 <= 1885745711)
          {
            if (v14 != 1882468914)
            {
              int v19 = 1882469428;
LABEL_203:
              if (v14 != v19) {
                return result;
              }
              if (!a4) {
                return 0;
              }
              if (a3) {
                int v24 = 2;
              }
              else {
                int v24 = 1;
              }
              uint64_t v99 = 0;
              long long v98 = 0u;
              long long v96 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v95, 0, sizeof(v95));
              int v94 = 0;
              long long v93 = 0u;
              long long v91 = 0u;
              memset(v92, 0, sizeof(v92));
              memset(v90, 0, sizeof(v90));
              int v89 = 3;
              long long v38 = a2;
              uint64_t v43 = a4;
              uint64_t v44 = a5;
              int v45 = 1;
              uint64_t v46 = 510;
              int v56 = 3;
LABEL_355:
              uint64_t v79 = 548;
LABEL_457:
              int appended = appendDstTextureDescriptions(v38, v24, v43, v44, v45, v46, v56, v79, v89, *(uint64_t *)v90, *(uint64_t *)&v90[8], *(uint64_t *)&v90[16], v91, SDWORD1(v91), SDWORD2(v91), SHIDWORD(v91), v92[0], SDWORD1(v92[0]), *((uint64_t *)&v92[0] + 1),
                           *(uint64_t *)&v92[1],
                           *((uint64_t *)&v92[1] + 1),
                           v93,
                           SDWORD1(v93),
                           SDWORD2(v93),
                           SHIDWORD(v93),
                           v94,
                           *(uint64_t *)v95,
                           *(uint64_t *)&v95[8],
                           *(uint64_t *)&v95[16],
                           v96,
                           SDWORD1(v96),
                           SDWORD2(v96),
                           SHIDWORD(v96),
                           v97[0],
                           SDWORD1(v97[0]),
                           *((uint64_t *)&v97[0] + 1),
                           *(uint64_t *)&v97[1],
                           *((uint64_t *)&v97[1] + 1),
                           v98,
                           SDWORD1(v98),
                           SDWORD2(v98),
                           SHIDWORD(v98),
                           v99,
                           SHIDWORD(v99));
              goto LABEL_458;
            }
LABEL_374:
            if (!a4) {
              return 0;
            }
            if (a3) {
              int v24 = 2;
            }
            else {
              int v24 = 1;
            }
            uint64_t v99 = 0;
            long long v98 = 0u;
            long long v96 = 0u;
            memset(v97, 0, sizeof(v97));
            memset(v95, 0, sizeof(v95));
            int v94 = 0;
            long long v93 = 0u;
            long long v91 = 0u;
            memset(v92, 0, sizeof(v92));
            memset(v90, 0, sizeof(v90));
            int v89 = 3;
            long long v38 = a2;
            uint64_t v43 = a4;
            uint64_t v44 = a5;
            int v45 = 1;
            uint64_t v46 = 509;
            int v56 = 3;
LABEL_379:
            uint64_t v79 = 547;
            goto LABEL_457;
          }
          if (v14 != 1885745712)
          {
            int v37 = 1885745714;
            goto LABEL_256;
          }
          goto LABEL_262;
        }
        if (v14 > 1886859825)
        {
          if (v14 != 1886859826)
          {
            if (v14 != 1886860340) {
              return result;
            }
            goto LABEL_350;
          }
          goto LABEL_257;
        }
        if (v14 == 1885746228) {
          goto LABEL_350;
        }
        int v29 = 1886859824;
LABEL_150:
        if (v14 != v29) {
          return result;
        }
        goto LABEL_262;
      }
      if (v14 <= 1751528499)
      {
        if (v14 == 1647719521)
        {
          if (!a4) {
            return 0;
          }
          uint64_t v99 = 0;
          long long v35 = 0uLL;
          long long v98 = 0u;
          memset(v97, 0, sizeof(v97));
          *(void *)&long long v96 = 0;
          *((void *)&v96 + 1) = 1;
          *(_OWORD *)&v95[8] = 0u;
          *(void *)int v95 = 103;
LABEL_452:
          int v94 = 0;
          v92[1] = v35;
          long long v93 = v35;
          long long v91 = v35;
          v92[0] = v35;
          *(void *)&v90[16] = 0;
          *(_OWORD *)BOOL v90 = v35;
          int v89 = 0;
          long long v38 = a2;
          int v24 = 2;
          goto LABEL_453;
        }
        if (v14 != 1751527984 && v14 != 1751527986) {
          return result;
        }
LABEL_141:
        if (!a4) {
          return 0;
        }
        if (a3) {
          int v24 = 2;
        }
        else {
          int v24 = 1;
        }
        *((void *)&v98 + 1) = 0x100000001;
        uint64_t v99 = 0;
        *(void *)&long long v98 = 1;
        v97[1] = 0x41uLL;
        *(void *)&v97[0] = 0;
        *((void *)&v97[0] + 1) = 25;
        long long v25 = 0uLL;
        long long v96 = 0u;
        memset(v95, 0, sizeof(v95));
        int v94 = 0;
        goto LABEL_146;
      }
      if (v14 <= 1815491697)
      {
        if (v14 != 1751528500)
        {
          int v23 = 1815162994;
          goto LABEL_366;
        }
        goto LABEL_141;
      }
      if (v14 != 1815491698)
      {
        int v21 = 1882468912;
LABEL_244:
        if (v14 != v21) {
          return result;
        }
        goto LABEL_380;
      }
      if (!a4) {
        return 0;
      }
      *((void *)&v98 + 1) = 1;
      uint64_t v99 = 0;
LABEL_450:
      *(void *)&long long v98 = 0;
      long long v35 = 0uLL;
      v97[1] = 0u;
      uint64_t v36 = 110;
      goto LABEL_451;
    }
    if (v14 > 2019964015)
    {
      if (v14 > 2037741170)
      {
        if (v14 > 2088265263)
        {
          if (v14 <= 2088269359)
          {
            if (v14 != 2088265264)
            {
              int v37 = 2088265266;
              goto LABEL_256;
            }
            goto LABEL_262;
          }
          if (v14 == 2088269360)
          {
LABEL_380:
            if (!a4) {
              return 0;
            }
            if (a3) {
              int v24 = 2;
            }
            else {
              int v24 = 1;
            }
            uint64_t v99 = 0;
            long long v98 = 0u;
            long long v96 = 0u;
            memset(v97, 0, sizeof(v97));
            memset(v95, 0, sizeof(v95));
            int v94 = 0;
            long long v93 = 0u;
            long long v91 = 0u;
            memset(v92, 0, sizeof(v92));
            memset(v90, 0, sizeof(v90));
            int v89 = 3;
            long long v38 = a2;
            uint64_t v43 = a4;
            uint64_t v44 = a5;
            int v45 = 1;
            uint64_t v46 = 508;
            int v56 = 3;
LABEL_385:
            uint64_t v79 = 546;
            goto LABEL_457;
          }
          int v30 = 2088269362;
          goto LABEL_373;
        }
        if (v14 > 2084075055)
        {
          if (v14 == 2084075056) {
            goto LABEL_332;
          }
          int v20 = 2084718401;
          goto LABEL_218;
        }
        if (v14 != 2037741171)
        {
          int v17 = 2084070960;
          goto LABEL_331;
        }
      }
      else
      {
        if (v14 <= 2021078127)
        {
          if (v14 <= 2021077553)
          {
            if (v14 == 2019964016) {
              goto LABEL_159;
            }
            int v18 = 2021077552;
LABEL_115:
            if (v14 != v18) {
              return result;
            }
            goto LABEL_116;
          }
          if (v14 != 2021077554)
          {
            int v49 = 2021078068;
            goto LABEL_316;
          }
          goto LABEL_324;
        }
        if (v14 <= 2033463605)
        {
          if (v14 == 2021078128)
          {
            if (!a4) {
              return 0;
            }
            if (a3) {
              int v24 = 2;
            }
            else {
              int v24 = 1;
            }
            long long v93 = 0uLL;
            *((void *)&v98 + 1) = 0x100000001;
            uint64_t v99 = 0;
            *(void *)&long long v98 = 0;
            v97[1] = 0u;
            *(void *)&v97[0] = 0;
            *((void *)&v97[0] + 1) = 90;
            *(void *)&long long v96 = 0;
            *((void *)&v96 + 1) = 0x100000001;
            *(_OWORD *)&v95[8] = 0u;
            *(void *)int v95 = 53;
            int v94 = 0;
            memset(v92, 0, sizeof(v92));
            *(void *)&long long v91 = 0;
            *((void *)&v91 + 1) = 0x200000004;
            *(_OWORD *)&v90[8] = 0u;
            *(void *)BOOL v90 = 123;
            int v89 = 0;
LABEL_429:
            long long v38 = a2;
            uint64_t v43 = a4;
            uint64_t v44 = a5;
            int v45 = 0;
            uint64_t v46 = 504;
            int v56 = 3;
LABEL_456:
            uint64_t v79 = 0;
            goto LABEL_457;
          }
          if (v14 != 2033463352) {
            return result;
          }
          goto LABEL_405;
        }
        if (v14 == 2033463606)
        {
          if (!a4) {
            return 0;
          }
          *((void *)&v98 + 1) = 1;
          uint64_t v99 = 0x200000000;
          goto LABEL_450;
        }
        if (v14 != 2037741158) {
          return result;
        }
      }
      if (a4)
      {
        if (a3) {
          int v24 = 2;
        }
        else {
          int v24 = 1;
        }
        BOOL v69 = v12 == EquivalentUncompressedPixelFormat;
        uint64_t v70 = 103;
        if (!v69) {
          uint64_t v70 = 0;
        }
        uint64_t v71 = 53;
        if (!v69) {
          uint64_t v71 = 0;
        }
        long long v93 = 0uLL;
        *((void *)&v98 + 1) = 2;
        uint64_t v99 = 0;
        *(void *)&long long v98 = 0;
        v97[1] = 0u;
        *(void *)&v97[0] = 0;
        *((void *)&v97[0] + 1) = 70;
        *(void *)&long long v96 = 0;
        *((void *)&v96 + 1) = 2;
        *(_OWORD *)&v95[8] = 0u;
        int v94 = 0;
        memset(v92, 0, sizeof(v92));
        *(void *)&long long v91 = 0;
        *((void *)&v91 + 1) = 4;
        *(_OWORD *)&v90[8] = 0u;
        int v89 = 0;
        *(void *)int v95 = v71;
        *(void *)BOOL v90 = v70;
        long long v38 = a2;
        uint64_t v43 = a4;
        uint64_t v44 = a5;
        int v45 = 1;
        uint64_t v46 = 501;
        goto LABEL_455;
      }
      return 0;
    }
    if (v14 <= 2016686639)
    {
      if (v14 <= 1983013175)
      {
        if (v14 != 1953903668)
        {
          if (v14 == 1982882104)
          {
            if (!a4) {
              return 0;
            }
            if (a3) {
              int v84 = 2;
            }
            else {
              int v84 = 1;
            }
            if (v12 == EquivalentUncompressedPixelFormat) {
              uint64_t v85 = 53;
            }
            else {
              uint64_t v85 = 0;
            }
            if (v12 == EquivalentUncompressedPixelFormat) {
              uint64_t v86 = 70;
            }
            else {
              uint64_t v86 = 0;
            }
            if (v12 == EquivalentUncompressedPixelFormat) {
              uint64_t v87 = 13;
            }
            else {
              uint64_t v87 = 0;
            }
            int v74 = appendDstTextureDescriptions(a2, v84, a4, a5, 1, 0, 0, 0, 0, v85, 53, 53, 1, 2, 4, 2, 4, 0, v86,
                    70,
                    70,
                    1,
                    2,
                    4,
                    2,
                    4,
                    v87,
                    23,
                    13,
                    1,
                    2,
                    1,
                    1,
                    1,
                    0,
                    10,
                    30,
                    10,
                    1,
                    2,
                    1,
                    1,
                    1,
                    0);
            goto LABEL_345;
          }
          if (v14 != 1983000886) {
            return result;
          }
          if (!a4) {
            return 0;
          }
          *((void *)&v98 + 1) = 2;
          uint64_t v99 = 0;
          *(void *)&long long v98 = 0;
          long long v39 = 0uLL;
          v97[1] = 0u;
          *(void *)&v97[0] = 0;
          *((void *)&v97[0] + 1) = 110;
          *(void *)&long long v96 = 0;
          *((void *)&v96 + 1) = 2;
          *(_OWORD *)&v95[8] = 0u;
          *(void *)int v95 = 103;
          goto LABEL_361;
        }
        goto LABEL_359;
      }
      if (v14 > 1999843441)
      {
        if (v14 == 1999843442) {
          goto LABEL_367;
        }
        int v16 = 2016567667;
        goto LABEL_250;
      }
      if (v14 != 1983013176 && v14 != 1983144248) {
        return result;
      }
      if (!a4) {
        return 0;
      }
      if (a3) {
        int v24 = 2;
      }
      else {
        int v24 = 1;
      }
      *((void *)&v98 + 1) = 0x100000001;
      uint64_t v99 = 1;
      *((void *)&v97[1] + 1) = 10;
      *(void *)&long long v98 = 0x200000001;
      *((void *)&v97[0] + 1) = 10;
      *(void *)&v97[1] = 30;
      *((void *)&v96 + 1) = 0x100000001;
      *(void *)&v97[0] = 1;
      *(void *)&v95[16] = 13;
      *(void *)&long long v96 = 0x200000001;
      *(void *)int v95 = 13;
      *(void *)&v95[8] = 23;
      int v94 = 0;
      long long v25 = 0uLL;
LABEL_146:
      v92[1] = v25;
      long long v93 = v25;
      long long v91 = v25;
      v92[0] = v25;
      *(void *)&v90[16] = 0;
      *(_OWORD *)BOOL v90 = v25;
      int v89 = 0;
      long long v38 = a2;
LABEL_363:
      uint64_t v43 = a4;
      uint64_t v44 = a5;
      int v45 = 1;
LABEL_454:
      uint64_t v46 = 0;
LABEL_455:
      int v56 = 0;
      goto LABEL_456;
    }
    if (v14 > 2016698738)
    {
      if (v14 <= 2019963441)
      {
        if (v14 == 2016698739) {
          goto LABEL_251;
        }
        int v18 = 2019963440;
        goto LABEL_115;
      }
      if (v14 != 2019963442)
      {
        int v49 = 2019963956;
LABEL_316:
        if (v14 != v49) {
          return result;
        }
        goto LABEL_317;
      }
    }
    else
    {
      if (v14 > 2016687155)
      {
        if (v14 != 2016687156)
        {
          int v22 = 2016687216;
          goto LABEL_191;
        }
LABEL_317:
        if (a4)
        {
          if (a3) {
            int v72 = 2;
          }
          else {
            int v72 = 1;
          }
          if (appendDstTextureDescriptions(a2, v72, a4, a5, 1, 507, 3, 545, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
                               110,
                               0,
                               1,
                               0,
                               4,
                               2,
                               0,
                               0,
                               0,
                               0,
                               0,
                               0,
                               0,
                               0,
                               0,
                               0,
                               20,
                               60,
                               0,
                               1,
                               0,
                               1,
                               1,
                               0,
                               0))
            return 4294954391;
          else {
            return 0;
          }
        }
        return 0;
      }
      if (v14 == 2016686640)
      {
LABEL_116:
        if (!a4) {
          return 0;
        }
        if (a3) {
          int v31 = 2;
        }
        else {
          int v31 = 1;
        }
        int v32 = appendDstTextureDescriptions(a2, v31, a4, a5, 1, 505, 3, 543, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
                110,
                0,
                1,
                0,
                4,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                20,
                60,
                0,
                1,
                0,
                1,
                1,
                0,
                0);
LABEL_236:
        if (!v32)
        {
          if (a2[6] == 2 && !*(unsigned char *)(a4 + 1301))
          {
            unint64_t v61 = (int)a2[20];
            unint64_t v62 = (int)a2[21];
            return vtAllocateMetalTextureForList(a1, v61, v62, 30, 0, a6);
          }
          return 0;
        }
        return 4294954391;
      }
      if (v14 != 2016686642) {
        return result;
      }
    }
LABEL_324:
    if (!a4) {
      return 0;
    }
    if (a3) {
      int v73 = 2;
    }
    else {
      int v73 = 1;
    }
    int v74 = appendDstTextureDescriptions(a2, v73, a4, a5, 1, 506, 3, 544, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
            110,
            0,
            1,
            0,
            4,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            20,
            60,
            0,
            1,
            0,
            1,
            1,
            0,
            0);
LABEL_345:
    if (!v74)
    {
      if (a2[6] == 2 && !*(unsigned char *)(a4 + 1301))
      {
        uint64_t result = vtAllocateMetalTextureForList(a1, (int)a2[20], (int)a2[21], 30, 0, a6);
        if (result) {
          return 4294954391;
        }
        return result;
      }
      return 0;
    }
    return 4294954391;
  }
  if (v14 <= 758674991)
  {
    if (v14 > 642527541)
    {
      if (v14 <= 645424691)
      {
        if (v14 <= 644624753)
        {
          if (v14 <= 643969847)
          {
            if (v14 != 642527542)
            {
              if (v14 != 642934849) {
                return result;
              }
LABEL_396:
              if (a4)
              {
                if (a3) {
                  int v24 = 2;
                }
                else {
                  int v24 = 1;
                }
                *((void *)&v98 + 1) = 1;
                uint64_t v99 = 0;
                *(void *)&long long v98 = 0;
                long long v63 = 0uLL;
                v97[1] = 0u;
                uint64_t v64 = 115;
LABEL_401:
                *(void *)&v97[0] = 0;
                *((void *)&v97[0] + 1) = v64;
LABEL_402:
                long long v96 = v63;
                *(void *)&v95[16] = 0;
                *(_OWORD *)int v95 = v63;
LABEL_403:
                int v94 = 0;
                v92[1] = v63;
                long long v93 = v63;
                long long v91 = v63;
                v92[0] = v63;
                *(void *)&v90[16] = 0;
                *(_OWORD *)BOOL v90 = v63;
LABEL_404:
                int v89 = 0;
LABEL_421:
                long long v38 = a2;
LABEL_453:
                uint64_t v43 = a4;
                uint64_t v44 = a5;
                int v45 = 0;
                goto LABEL_454;
              }
              return 0;
            }
            goto LABEL_214;
          }
          if (v14 != 643969848)
          {
            if (v14 != 644232304) {
              return result;
            }
LABEL_159:
            if (a4)
            {
              if (a3) {
                int v24 = 2;
              }
              else {
                int v24 = 1;
              }
              BOOL v40 = v12 == EquivalentUncompressedPixelFormat;
              uint64_t v41 = 123;
              if (!v40) {
                uint64_t v41 = 0;
              }
              uint64_t v42 = 53;
              if (!v40) {
                uint64_t v42 = 0;
              }
              long long v93 = 0uLL;
              *((void *)&v98 + 1) = 0x100000001;
              uint64_t v99 = 0;
              *(void *)&long long v98 = 0;
              v97[1] = 0u;
              *(void *)&v97[0] = 0;
              *((void *)&v97[0] + 1) = 90;
              *(void *)&long long v96 = 0;
              *((void *)&v96 + 1) = 0x100000001;
              *(_OWORD *)&v95[8] = 0u;
              int v94 = 0;
              memset(v92, 0, sizeof(v92));
              *(void *)&long long v91 = 0;
              *((void *)&v91 + 1) = 0x200000004;
              *(_OWORD *)&v90[8] = 0u;
              int v89 = 0;
              *(void *)int v95 = v42;
              *(void *)BOOL v90 = v41;
              long long v38 = a2;
              uint64_t v43 = a4;
              uint64_t v44 = a5;
              int v45 = 0;
              uint64_t v46 = 504;
              goto LABEL_455;
            }
            return 0;
          }
LABEL_367:
          if (!a4) {
            return 0;
          }
          if (v14 > 1815162993)
          {
            if (v14 == 1999843442) {
              goto LABEL_413;
            }
            int v80 = 1815162994;
          }
          else
          {
            if (v14 == 644624754) {
              goto LABEL_413;
            }
            int v80 = 645346162;
          }
          if (v14 != v80)
          {
            if (a3) {
              int v24 = 2;
            }
            else {
              int v24 = 1;
            }
            *((void *)&v98 + 1) = 0x100000001;
            uint64_t v99 = 0x100000000;
            *(void *)&long long v98 = 1;
            v97[1] = 0xAuLL;
            *(void *)&v97[0] = 0;
            *((void *)&v97[0] + 1) = 90;
            long long v63 = 0uLL;
            goto LABEL_402;
          }
LABEL_413:
          if (a3) {
            int v24 = 2;
          }
          else {
            int v24 = 1;
          }
          BOOL v81 = v12 == EquivalentUncompressedPixelFormat;
          uint64_t v82 = 123;
          if (!v81) {
            uint64_t v82 = 0;
          }
          uint64_t v83 = 53;
          if (!v81) {
            uint64_t v83 = 0;
          }
          long long v93 = 0uLL;
          *((void *)&v98 + 1) = 1;
          uint64_t v99 = 0x100000000;
          *(void *)&long long v98 = 0;
          v97[1] = 0u;
          *(void *)&v97[0] = 0x100000000;
          *((void *)&v97[0] + 1) = 90;
          *(void *)&long long v96 = 0;
          *((void *)&v96 + 1) = 1;
          *(_OWORD *)&v95[8] = 0u;
          int v94 = 0;
          memset((char *)v92 + 8, 0, 24);
          *((void *)&v91 + 1) = 4;
          *(void *)&v92[0] = 0x100000000;
          *(void *)&long long v91 = 0;
          *(_OWORD *)&v90[8] = 0u;
          int v89 = 0;
          *(void *)int v95 = v83;
          *(void *)BOOL v90 = v82;
          goto LABEL_421;
        }
        if (v14 <= 645424687)
        {
          if (v14 == 644624754) {
            goto LABEL_367;
          }
          int v23 = 645346162;
          goto LABEL_366;
        }
        if (v14 != 645424688)
        {
          unsigned __int16 v33 = 26162;
          goto LABEL_255;
        }
        goto LABEL_262;
      }
      if (v14 <= 645429039)
      {
        if (v14 <= 645428785)
        {
          if (v14 != 645424692)
          {
            int v21 = 645428784;
            goto LABEL_244;
          }
          goto LABEL_350;
        }
        if (v14 != 645428786)
        {
          int v19 = 645428788;
          goto LABEL_203;
        }
        goto LABEL_374;
      }
      if (v14 <= 645429043)
      {
        if (v14 != 645429040)
        {
          unsigned __int16 v33 = 30514;
LABEL_255:
          int v37 = v33 | 0x26780000;
LABEL_256:
          if (v14 != v37) {
            return result;
          }
          goto LABEL_257;
        }
        goto LABEL_262;
      }
      if (v14 != 645429044)
      {
        int v17 = 758670896;
LABEL_331:
        if (v14 != v17) {
          return result;
        }
        goto LABEL_332;
      }
LABEL_350:
      if (!a4) {
        return 0;
      }
      if (a3) {
        int v24 = 2;
      }
      else {
        int v24 = 1;
      }
      uint64_t v99 = 0;
      long long v98 = 0u;
      long long v96 = 0u;
      memset(v97, 0, sizeof(v97));
      memset(v95, 0, sizeof(v95));
      int v94 = 0;
      long long v93 = 0u;
      long long v91 = 0u;
      memset(v92, 0, sizeof(v92));
      memset(v90, 0, sizeof(v90));
      int v89 = 3;
      long long v38 = a2;
      uint64_t v43 = a4;
      uint64_t v44 = a5;
      int v45 = 1;
      uint64_t v46 = 0;
      int v56 = 0;
      goto LABEL_355;
    }
    if (v14 > 641230387)
    {
      if (v14 <= 641877824)
      {
        if (v14 <= 641234481)
        {
          if (v14 != 641230388)
          {
            int v17 = 641234480;
            goto LABEL_331;
          }
          goto LABEL_178;
        }
        if (v14 != 641234482)
        {
          int v27 = 641234484;
LABEL_177:
          if (v14 != v27) {
            return result;
          }
          goto LABEL_178;
        }
        goto LABEL_223;
      }
      if (v14 <= 642527335)
      {
        if (v14 != 641877825)
        {
          int v28 = 642527288;
          goto LABEL_271;
        }
        goto LABEL_277;
      }
      if (v14 != 642527336)
      {
        if (v14 != 642527536) {
          return result;
        }
        goto LABEL_299;
      }
LABEL_391:
      if (a4)
      {
        if (a3) {
          int v24 = 2;
        }
        else {
          int v24 = 1;
        }
        *((void *)&v98 + 1) = 1;
        uint64_t v99 = 0;
        *(void *)&long long v98 = 0;
        long long v63 = 0uLL;
        v97[1] = 0u;
        uint64_t v64 = 25;
        goto LABEL_401;
      }
      return 0;
    }
    if (v14 > 590902831)
    {
      if (v14 <= 641230383)
      {
        if (v14 != 590902832)
        {
          int v22 = 640955504;
LABEL_191:
          if (v14 != v22) {
            return result;
          }
          if (!a4) {
            return 0;
          }
          if (a3) {
            int v24 = 2;
          }
          else {
            int v24 = 1;
          }
          BOOL v53 = v12 == EquivalentUncompressedPixelFormat;
          uint64_t v54 = 123;
          if (!v53) {
            uint64_t v54 = 0;
          }
          uint64_t v55 = 53;
          if (!v53) {
            uint64_t v55 = 0;
          }
          long long v93 = 0uLL;
          *((void *)&v98 + 1) = 0x100000001;
          uint64_t v99 = 0;
          *(void *)&long long v98 = 0;
          v97[1] = 0u;
          *(void *)&v97[0] = 0;
          *((void *)&v97[0] + 1) = 90;
          *(void *)&long long v96 = 0;
          *((void *)&v96 + 1) = 0x100000001;
          *(_OWORD *)&v95[8] = 0u;
          int v94 = 0;
          memset(v92, 0, sizeof(v92));
          *(void *)&long long v91 = 0;
          *((void *)&v91 + 1) = 0x200000004;
          *(_OWORD *)&v90[8] = 0u;
          int v89 = 0;
          *(void *)int v95 = v55;
          *(void *)BOOL v90 = v54;
          goto LABEL_429;
        }
LABEL_332:
        if (!a4) {
          return 0;
        }
        if (a3) {
          int v75 = 2;
        }
        else {
          int v75 = 1;
        }
        if (v12 == EquivalentUncompressedPixelFormat) {
          uint64_t v76 = 53;
        }
        else {
          uint64_t v76 = 0;
        }
        if (v12 == EquivalentUncompressedPixelFormat) {
          uint64_t v77 = 70;
        }
        else {
          uint64_t v77 = 0;
        }
        uint64_t v78 = 13;
        if (v12 != EquivalentUncompressedPixelFormat) {
          uint64_t v78 = 0;
        }
        int v74 = appendDstTextureDescriptions(a2, v75, a4, a5, 1, 500, 3, 540, 3, v76, 53, 0, 1, 0, 4, 2, 0, 0, v77,
                70,
                0,
                1,
                0,
                4,
                2,
                0,
                v78,
                23,
                0,
                1,
                0,
                1,
                1,
                0,
                0,
                10,
                30,
                0,
                1,
                0,
                1,
                1,
                0,
                0);
        goto LABEL_345;
      }
      if (v14 == 641230384) {
        goto LABEL_332;
      }
      int v48 = 641230386;
      goto LABEL_222;
    }
    if (v14 != 32)
    {
      if (v14 != 40)
      {
        int v17 = 590898736;
        goto LABEL_331;
      }
LABEL_272:
      if (a4)
      {
        if (a3) {
          int v24 = 2;
        }
        else {
          int v24 = 1;
        }
        *((void *)&v98 + 1) = 1;
        uint64_t v99 = 0;
        *(void *)&long long v98 = 0;
        long long v63 = 0uLL;
        v97[1] = 0u;
        uint64_t v64 = 10;
        goto LABEL_401;
      }
      return 0;
    }
LABEL_405:
    if (a4)
    {
      if (a3) {
        int v24 = 2;
      }
      else {
        int v24 = 1;
      }
      long long v93 = 0uLL;
      *((void *)&v98 + 1) = 1;
      uint64_t v99 = 0x200000000;
      *(void *)&long long v98 = 0;
      v97[1] = 0u;
      *(void *)&v97[0] = 0x200000000;
      *((void *)&v97[0] + 1) = 70;
      *(void *)&long long v96 = 0;
      *((void *)&v96 + 1) = 1;
      *(_OWORD *)&v95[8] = 0u;
      *(void *)int v95 = 53;
      int v94 = 0;
      memset((char *)v92 + 8, 0, 24);
      *((void *)&v91 + 1) = 4;
      *(void *)&v92[0] = 0x200000000;
      *(void *)&long long v91 = 0;
      *(_OWORD *)&v90[8] = 0u;
      *(void *)BOOL v90 = 123;
      goto LABEL_404;
    }
    return 0;
  }
  if (v14 <= 875704421)
  {
    if (v14 > 792229423)
    {
      if (v14 <= 796423727)
      {
        if (v14 <= 796419631)
        {
          if (v14 == 792229424) {
            goto LABEL_332;
          }
          int v20 = 792872769;
LABEL_218:
          if (v14 != v20) {
            return result;
          }
          goto LABEL_277;
        }
        if (v14 != 796419632)
        {
          int v37 = 796419634;
          goto LABEL_256;
        }
LABEL_262:
        if (!a4) {
          return 0;
        }
        if (a3) {
          int v24 = 2;
        }
        else {
          int v24 = 1;
        }
        uint64_t v99 = 0;
        long long v98 = 0u;
        long long v96 = 0u;
        memset(v97, 0, sizeof(v97));
        memset(v95, 0, sizeof(v95));
        int v94 = 0;
        long long v93 = 0u;
        long long v91 = 0u;
        memset(v92, 0, sizeof(v92));
        memset(v90, 0, sizeof(v90));
        int v89 = 3;
        long long v38 = a2;
        uint64_t v43 = a4;
        uint64_t v44 = a5;
        int v45 = 1;
        uint64_t v46 = 0;
        int v56 = 0;
        goto LABEL_385;
      }
      if (v14 > 846624101)
      {
        if (v14 != 846624102 && v14 != 846624121) {
          return result;
        }
        if (a4)
        {
          if (a3) {
            int v24 = 2;
          }
          else {
            int v24 = 1;
          }
          long long v93 = 0uLL;
          *((void *)&v98 + 1) = 2;
          uint64_t v99 = 0;
          *(void *)&long long v98 = 0;
          v97[1] = 0u;
          *(void *)&v97[0] = 0;
          *((void *)&v97[0] + 1) = 70;
          *(void *)&long long v96 = 0;
          *((void *)&v96 + 1) = 2;
          *(_OWORD *)&v95[8] = 0u;
          *(void *)int v95 = 53;
          int v94 = 0;
          memset(v92, 0, sizeof(v92));
          *(void *)&long long v91 = 0;
          *((void *)&v91 + 1) = 4;
          *(_OWORD *)&v90[8] = 0u;
          *(void *)BOOL v90 = 103;
          int v89 = 0;
          long long v38 = a2;
          uint64_t v43 = a4;
          uint64_t v44 = a5;
          int v45 = 1;
          uint64_t v46 = 562;
          goto LABEL_455;
        }
        return 0;
      }
      if (v14 == 796423728) {
        goto LABEL_380;
      }
      int v30 = 796423730;
LABEL_373:
      if (v14 != v30) {
        return result;
      }
      goto LABEL_374;
    }
    if (v14 > 762865201)
    {
      if (v14 > 762869297)
      {
        if (v14 == 762869298) {
          goto LABEL_374;
        }
        int v17 = 792225328;
        goto LABEL_331;
      }
      if (v14 != 762865202)
      {
        int v21 = 762869296;
        goto LABEL_244;
      }
LABEL_257:
      if (!a4) {
        return 0;
      }
      if (a3) {
        int v24 = 2;
      }
      else {
        int v24 = 1;
      }
      uint64_t v99 = 0;
      long long v98 = 0u;
      long long v96 = 0u;
      memset(v97, 0, sizeof(v97));
      memset(v95, 0, sizeof(v95));
      int v94 = 0;
      long long v93 = 0u;
      long long v91 = 0u;
      memset(v92, 0, sizeof(v92));
      memset(v90, 0, sizeof(v90));
      int v89 = 3;
      long long v38 = a2;
      uint64_t v43 = a4;
      uint64_t v44 = a5;
      int v45 = 1;
      uint64_t v46 = 0;
      int v56 = 0;
      goto LABEL_379;
    }
    if (v14 == 758674992) {
      goto LABEL_332;
    }
    if (v14 == 759318337) {
      goto LABEL_277;
    }
    int v29 = 762865200;
    goto LABEL_150;
  }
  if (v14 > 1278226533)
  {
    if (v14 <= 1378955370)
    {
      if (v14 > 1278226735)
      {
        if (v14 != 1278226736)
        {
          if (v14 != 1278226742) {
            return result;
          }
LABEL_214:
          if (!a4) {
            return 0;
          }
          *((void *)&v98 + 1) = 1;
          uint64_t v99 = 0;
          *(void *)&long long v98 = 0;
          long long v35 = 0uLL;
          v97[1] = 0u;
          uint64_t v36 = 20;
          goto LABEL_451;
        }
LABEL_299:
        if (a4)
        {
          if (a3) {
            int v24 = 2;
          }
          else {
            int v24 = 1;
          }
          *((void *)&v98 + 1) = 1;
          uint64_t v99 = 0;
          *(void *)&long long v98 = 0;
          long long v63 = 0uLL;
          v97[1] = 0u;
          uint64_t v64 = 20;
          goto LABEL_401;
        }
        return 0;
      }
      if (v14 != 1278226534)
      {
        if (v14 != 1278226536) {
          return result;
        }
        goto LABEL_391;
      }
      if (!a4) {
        return 0;
      }
      *((void *)&v98 + 1) = 1;
      uint64_t v99 = 0;
      *(void *)&long long v98 = 0;
      long long v35 = 0uLL;
      v97[1] = 0u;
      uint64_t v36 = 55;
LABEL_451:
      *(void *)&v97[0] = 0;
      *((void *)&v97[0] + 1) = v36;
      long long v96 = v35;
      *(void *)&v95[16] = 0;
      *(_OWORD *)int v95 = v35;
      goto LABEL_452;
    }
    if (v14 <= 1380411456)
    {
      if (v14 != 1378955371)
      {
        if (v14 != 1380410945) {
          return result;
        }
        if (!a4) {
          return 0;
        }
        *((void *)&v98 + 1) = 1;
        uint64_t v99 = 0;
        *(void *)&long long v98 = 0;
        long long v35 = 0uLL;
        v97[1] = 0u;
        uint64_t v36 = 125;
        goto LABEL_451;
      }
LABEL_386:
      if (a4)
      {
        if (a3) {
          int v24 = 2;
        }
        else {
          int v24 = 1;
        }
        uint64_t v99 = 0;
        long long v63 = 0uLL;
        long long v98 = 0u;
        memset((char *)v97 + 8, 0, 24);
        *((void *)&v96 + 1) = 1;
        *(void *)&v97[0] = 0x100000000;
        *(void *)&long long v96 = 0;
        *(_OWORD *)&v95[8] = 0u;
        *(void *)int v95 = 53;
        goto LABEL_403;
      }
      return 0;
    }
    if (v14 == 1380411457) {
      goto LABEL_396;
    }
    int v23 = 1647534392;
LABEL_366:
    if (v14 != v23) {
      return result;
    }
    goto LABEL_367;
  }
  if (v14 <= 875836517)
  {
    if (v14 <= 875704933)
    {
      if (v14 != 875704422)
      {
        int v17 = 875704438;
        goto LABEL_331;
      }
      goto LABEL_332;
    }
    if (v14 == 875704934)
    {
LABEL_223:
      if (!a4) {
        return 0;
      }
      if (a3) {
        int v57 = 2;
      }
      else {
        int v57 = 1;
      }
      if (v12 == EquivalentUncompressedPixelFormat) {
        uint64_t v58 = 53;
      }
      else {
        uint64_t v58 = 0;
      }
      if (v12 == EquivalentUncompressedPixelFormat) {
        uint64_t v59 = 70;
      }
      else {
        uint64_t v59 = 0;
      }
      uint64_t v60 = 13;
      if (v12 != EquivalentUncompressedPixelFormat) {
        uint64_t v60 = 0;
      }
      int v32 = appendDstTextureDescriptions(a2, v57, a4, a5, 1, 502, 3, 541, 3, v58, 53, 0, 1, 0, 4, 2, 0, 0, v59,
              70,
              0,
              1,
              0,
              4,
              2,
              0,
              v60,
              23,
              0,
              1,
              0,
              1,
              1,
              0,
              0,
              10,
              30,
              0,
              1,
              0,
              1,
              1,
              0,
              0);
      goto LABEL_236;
    }
    int v48 = 875704950;
LABEL_222:
    if (v14 != v48) {
      return result;
    }
    goto LABEL_223;
  }
  if (v14 > 1111970368)
  {
    if (v14 != 1111970369)
    {
      int v28 = 1278226488;
LABEL_271:
      if (v14 != v28) {
        return result;
      }
      goto LABEL_272;
    }
LABEL_277:
    if (!a4) {
      return 0;
    }
    if (a3) {
      int v65 = 2;
    }
    else {
      int v65 = 1;
    }
    BOOL v66 = v12 == EquivalentUncompressedPixelFormat;
    uint64_t v67 = 123;
    if (!v66) {
      uint64_t v67 = 0;
    }
    uint64_t v68 = 53;
    if (!v66) {
      uint64_t v68 = 0;
    }
    int appended = appendDstTextureDescriptions(a2, v65, a4, a5, 0, 0, 0, 80, 0, v67, 0, 0, 0, 0, 4, 0, 0, 1, 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 (unsigned __int128)0 >> 96,
                 0,
                 v68,
                 0,
                 0,
                 0,
                 0,
                 1,
                 0,
                 0,
                 1,
                 80,
                 0,
                 0,
                 0,
                 0,
                 1,
                 0,
                 0,
                 0);
    goto LABEL_458;
  }
  if (v14 != 875836518)
  {
    int v27 = 875836534;
    goto LABEL_177;
  }
LABEL_178:
  if (!a4) {
    return 0;
  }
  if (a3) {
    int v50 = 2;
  }
  else {
    int v50 = 1;
  }
  BOOL v40 = v12 == EquivalentUncompressedPixelFormat;
  uint64_t v51 = 13;
  if (!v40) {
    uint64_t v51 = 0;
  }
  int appended = appendDstTextureDescriptions(a2, v50, a4, a5, 1, 503, 3, 542, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               v51,
               23,
               0,
               1,
               0,
               1,
               1,
               0,
               0,
               10,
               30,
               0,
               1,
               0,
               1,
               1,
               0,
               0);
LABEL_458:
  int v88 = appended;
  uint64_t result = 0;
  if (v88) {
    return 4294954391;
  }
  return result;
}