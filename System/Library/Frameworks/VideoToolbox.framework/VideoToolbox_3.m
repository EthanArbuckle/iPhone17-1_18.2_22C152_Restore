uint64_t vt_CopyAvg_sv44_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unsigned char *v38;
  unsigned int v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned char *v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned char *v47;
  unsigned int v48;
  unint64_t v49;
  unsigned __int8 *v50;
  unsigned char *v51;
  unsigned int v52;

  v9 = *(void *)(a2 + 32);
  v8 = *(void *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23) {
    v22 = v23;
  }
  v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    v24 = v19 - v18;
  }
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v13 + 2 * v11;
    v28 = *a8;
    v29 = a8[2];
    if (v13 >= v8) {
      v30 = 0;
    }
    else {
      v30 = *a4;
    }
    v31 = v27 + v30;
    v32 = a7[2] + v29 * v18 + v16;
    v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(unsigned char *)(v32 + i) = -1;
          *(unsigned char *)(v33 + i) = *(unsigned char *)(v31 + 2 * i + 1);
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(void *)(a2 + 32);
    v12 = *(void *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12) {
    v35 = v12;
  }
  else {
    v35 = 0;
  }
  if (v22 < v10) {
    v10 = 0;
  }
  v36 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      v37 = v15 + 8;
      v39 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v21[1] = v39;
      v38 = v21 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v21;
    }
    if (v22 != v10)
    {
      v40 = 0;
      v41 = v37 + 4;
      do
      {
        v42 = &v38[v40];
        v43 = (*(v41 - 1) + v41[3] + v41[v14 - 1] + v41[v14 + 3] + 2) >> 2;
        *v42 = (*(v41 - 3) + v41[1] + v41[v14 - 3] + v41[v14 + 1] + 2) >> 2;
        v42[1] = v43;
        v40 += 2;
        v41 += 8;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    v44 = 0;
    v45 = v24 - v35;
    do
    {
      v46 = v15;
      v47 = v21;
      if (v9)
      {
        v46 = v15 + 8;
        v48 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v21[1] = v48;
        v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        v49 = 0;
        v50 = v46 + 4;
        do
        {
          v51 = &v47[v49];
          v52 = (*(v50 - 1) + v50[3] + v50[v14 - 1] + v50[v14 + 3] + 2) >> 2;
          *v51 = (*(v50 - 3) + v50[1] + v50[v14 - 3] + v50[v14 + 1] + 2) >> 2;
          v51[1] = v52;
          v49 += 2;
          v50 += 8;
        }
        while (v49 < v36);
      }
      v15 += 2 * v14;
      v21 += v20;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  uint64_t v15 = a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    if (v13 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v27 + v30;
    uint64_t v32 = a7[2] + v29 * v18 + v16;
    uint64_t v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(unsigned char *)(v32 + i) = -1;
          *(unsigned char *)(v33 + i) = *(unsigned char *)(v31 + 2 * i + 1);
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      char v39 = *(unsigned char *)(v15 + 3);
      uint64_t v37 = v15 + 8;
      unsigned char *v21 = *(unsigned char *)(v15 + 1);
      v21[1] = v39;
      v38 = v21 + 2;
    }
    else
    {
      uint64_t v37 = v15;
      v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        v41 = &v38[v40];
        char v42 = *(unsigned char *)(v37 + 3);
        unsigned char *v41 = *(unsigned char *)(v37 + 1);
        v41[1] = v42;
        v40 += 2;
        v37 += 8;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v24 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      uint64_t v46 = v15;
      v47 = v21;
      if (v9)
      {
        char v48 = *(unsigned char *)(v15 + 3);
        uint64_t v46 = v15 + 8;
        unsigned char *v21 = *(unsigned char *)(v15 + 1);
        v21[1] = v48;
        v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          v50 = &v47[v49];
          char v51 = *(unsigned char *)(v46 + 3);
          unsigned char *v50 = *(unsigned char *)(v46 + 1);
          v50[1] = v51;
          v49 += 2;
          v46 += 8;
        }
        while (v49 < v36);
      }
      v15 += v45;
      v21 += v20;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_sf44_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = a3[1] + v12 * v15 + 4 * v16;
    uint64_t v18 = *a3 + *a4 * v15 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          v21 = (_WORD *)(v14 + 2 * v19);
          unsigned int v22 = 57344 * *(unsigned __int16 *)(v17 + v19) / 0xFFFF;
          unsigned int v23 = 57344 * *(unsigned __int16 *)(v17 + v19 + 2) / 0xFFFF;
          unsigned int v24 = 56064 * *(unsigned __int16 *)(v18 + 2 * i) / 0xFFFF;
          _WORD *v21 = -1;
          v21[1] = v24 + 4096;
          v21[2] = v22 + 4096;
          v21[3] = v23 + 4096;
          v19 += 4;
        }
      }
      v18 += v11;
      v14 += v13;
      v17 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_sf44_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = a3[1] + v12 * v15 + 4 * v16;
    uint64_t v18 = *a3 + *a4 * v15 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          v21 = (unsigned char *)(v14 + v19);
          unint64_t v22 = (16777473 * (unint64_t)(224 * *(unsigned __int16 *)(v17 + v19))) >> 40;
          unint64_t v23 = (16777473 * (unint64_t)(224 * *(unsigned __int16 *)(v17 + v19 + 2))) >> 40;
          unint64_t v24 = (16777473 * (unint64_t)(219 * *(unsigned __int16 *)(v18 + 2 * i))) >> 40;
          unsigned char *v21 = -1;
          v21[1] = v24 + 16;
          v21[2] = v22 + 16;
          v21[3] = v23 + 16;
          v19 += 4;
        }
      }
      v18 += v11;
      v14 += v13;
      v17 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a8;
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v14 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          unint64_t v22 = (_WORD *)(v16 + v20);
          unint64_t v23 = (unsigned __int16 *)(v19 + 2 * i);
          unsigned int v24 = (57344 * *(unsigned __int16 *)(v18 + v20 + 2) / 0xFFFF
               + 57344 * *(unsigned __int16 *)(v18 + v20 + 6) / 0xFFFF
               + 8193) >> 1;
          unsigned int v25 = 56064 * *v23 / 0xFFFF;
          LODWORD(v23) = 56064 * v23[1] / 0xFFFF;
          *unint64_t v22 = (57344 * *(unsigned __int16 *)(v18 + v20) / 0xFFFF
                + 57344 * *(unsigned __int16 *)(v18 + v20 + 4) / 0xFFFF
                + 8193) >> 1;
          v22[1] = v25 + 4096;
          v22[2] = v24;
          v22[3] = (_WORD)v23 + 4096;
          v20 += 8;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          unint64_t v22 = (_WORD *)(v16 + v20);
          unint64_t v23 = (unsigned __int16 *)(v19 + 2 * i);
          unsigned int v24 = 57344 * *(unsigned __int16 *)(v18 + v20 + 2) / 0xFFFF;
          unsigned int v25 = 56064 * *v23 / 0xFFFF;
          LODWORD(v23) = 56064 * v23[1] / 0xFFFF;
          *unint64_t v22 = 57344 * *(unsigned __int16 *)(v18 + v20) / 0xFFFF + 4096;
          v22[1] = v25 + 4096;
          v22[2] = v24 + 4096;
          v22[3] = (_WORD)v23 + 4096;
          v20 += 8;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = (unsigned char *)(*a7 + *a8 * *(void *)(a6 + 40) + v10);
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        unint64_t v22 = v16;
        do
        {
          unint64_t v23 = (unsigned __int16 *)(v19 + 2 * v21);
          unsigned int v24 = ((((16777473 * (unint64_t)(224 * *(unsigned __int16 *)(v18 + v20 + 2))) >> 32) >> 8)
               + (((16777473 * (unint64_t)(224 * *(unsigned __int16 *)(v18 + v20 + 6))) >> 32) >> 8)
               + 33) >> 1;
          unint64_t v25 = (16777473 * (unint64_t)(219 * *v23)) >> 40;
          unint64_t v26 = (16777473 * (unint64_t)(219 * v23[1])) >> 40;
          *unint64_t v22 = ((((16777473 * (unint64_t)(224 * *(unsigned __int16 *)(v18 + v20))) >> 32) >> 8)
                + (((16777473
                                 * (unint64_t)(224 * *(unsigned __int16 *)(v18 + v20 + 4))) >> 32) >> 8)
                + 33) >> 1;
          v22[1] = v25 + 16;
          v22[2] = v24;
          v22[3] = v26 + 16;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = (unsigned char *)(*a7 + *a8 * *(void *)(a6 + 40) + v10);
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        unint64_t v22 = v16;
        do
        {
          unint64_t v23 = (unsigned __int16 *)(v19 + 2 * v21);
          unint64_t v24 = (16777473 * (unint64_t)(224 * *(unsigned __int16 *)(v18 + v20 + 2))) >> 40;
          unint64_t v25 = (16777473 * (unint64_t)(219 * *v23)) >> 40;
          unint64_t v26 = (16777473 * (unint64_t)(219 * v23[1])) >> 40;
          *unint64_t v22 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *(unsigned __int16 *)(v18 + v20))) >> 32) >> 8)
               + 16;
          v22[1] = v25 + 16;
          v22[2] = v24 + 16;
          v22[3] = v26 + 16;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v15 + 2 * v14;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = 56064 * *(unsigned __int16 *)(v24 + 2 * i) / 0xFFFF + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v26 = v8 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      int v34 = v13[1];
      uint64_t v32 = v13 + 2;
      *uint64_t v17 = 57344 * *v13 / 0xFFFF + 4096;
      v17[1] = 57344 * v34 / 0xFFFFu + 4096;
      uint64_t v33 = v17 + 2;
    }
    else
    {
      uint64_t v32 = v13;
      uint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        int v37 = *v32;
        int v38 = v32[1];
        v32 += 2;
        *uint64_t v33 = 57344 * v37 / 0xFFFFu + 4096;
        v33[1] = 57344 * v38 / 0xFFFFu + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      unsigned int v39 = 57344 * v32[1];
      *uint64_t v33 = 57344 * *v32 / 0xFFFF + 4096;
      v33[1] = v39 / 0xFFFF + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v11 - v27;
    do
    {
      char v42 = v13;
      unint64_t v43 = v17;
      if (v28)
      {
        int v44 = v13[1];
        char v42 = v13 + 2;
        *uint64_t v17 = 57344 * *v13 / 0xFFFF + 4096;
        v17[1] = 57344 * v44 / 0xFFFFu + 4096;
        unint64_t v43 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v30;
        do
        {
          int v47 = *v42;
          int v48 = v42[1];
          v42 += 2;
          *unint64_t v43 = 57344 * v47 / 0xFFFFu + 4096;
          v43[1] = 57344 * v48 / 0xFFFFu + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v30;
      }
      if (v45 + v29 < v10)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *unint64_t v43 = 57344 * v49 / 0xFFFFu + 4096;
        v43[1] = 57344 * v50 / 0xFFFFu + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v26 < v11)
  {
    if (v28)
    {
      int v51 = *v13;
      int v52 = v13[1];
      v13 += 2;
      *uint64_t v17 = 57344 * v51 / 0xFFFFu + 4096;
      v17[1] = 57344 * v52 / 0xFFFFu + 4096;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v30;
      do
      {
        int v54 = *v13;
        int v55 = v13[1];
        v13 += 2;
        *uint64_t v17 = 57344 * v54 / 0xFFFFu + 4096;
        v17[1] = 57344 * v55 / 0xFFFFu + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v31 + v29 < v10)
    {
      unsigned int v56 = 57344 * v13[1];
      *uint64_t v17 = 57344 * *v13 / 0xFFFF + 4096;
      v17[1] = v56 / 0xFFFF + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf44_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = 56064 * *(unsigned __int16 *)(v23 + 2 * i) / 0xFFFF + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1];
      unint64_t v31 = v13 + 2;
      *uint64_t v17 = 57344 * *v13 / 0xFFFF + 4096;
      v17[1] = 57344 * v33 / 0xFFFFu + 4096;
      uint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31;
        int v37 = v31[1];
        v31 += 2;
        *uint64_t v32 = 57344 * v36 / 0xFFFFu + 4096;
        v32[1] = 57344 * v37 / 0xFFFFu + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      unsigned int v38 = 57344 * v31[1];
      *uint64_t v32 = 57344 * *v31 / 0xFFFF + 4096;
      v32[1] = v38 / 0xFFFF + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v18 - v26;
    do
    {
      uint64_t v41 = v13;
      char v42 = v17;
      if (v27)
      {
        int v43 = v13[1];
        uint64_t v41 = v13 + 2;
        *uint64_t v17 = 57344 * *v13 / 0xFFFF + 4096;
        v17[1] = 57344 * v43 / 0xFFFFu + 4096;
        char v42 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v29;
        do
        {
          int v46 = *v41;
          int v47 = v41[1];
          v41 += 2;
          *char v42 = 57344 * v46 / 0xFFFFu + 4096;
          v42[1] = 57344 * v47 / 0xFFFFu + 4096;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v29;
      }
      if (v44 + v28 < v10)
      {
        int v48 = *v41;
        int v49 = v41[1];
        *char v42 = 57344 * v48 / 0xFFFFu + 4096;
        v42[1] = 57344 * v49 / 0xFFFFu + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v25 < v18)
  {
    if (v27)
    {
      int v50 = *v13;
      int v51 = v13[1];
      v13 += 2;
      *uint64_t v17 = 57344 * v50 / 0xFFFFu + 4096;
      v17[1] = 57344 * v51 / 0xFFFFu + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v29;
      do
      {
        int v53 = *v13;
        int v54 = v13[1];
        v13 += 2;
        *uint64_t v17 = 57344 * v53 / 0xFFFFu + 4096;
        v17[1] = 57344 * v54 / 0xFFFFu + 4096;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v30 + v28 < v10)
    {
      unsigned int v55 = 57344 * v13[1];
      *uint64_t v17 = 57344 * *v13 / 0xFFFF + 4096;
      v17[1] = v55 / 0xFFFF + 4096;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 56064 * *(unsigned __int16 *)(v30 + 2 * i) / 0xFFFF + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v32 = v12 & 1;
  if (v9 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v36 = v14 + 4;
      unsigned int v38 = (57344 * v14[1] / 0xFFFF + 57344 * v14[3] / 0xFFFF + 8193) >> 1;
      _WORD *v21 = (57344 * *v14 / 0xFFFF + 57344 * v14[2] / 0xFFFF + 8193) >> 1;
      v21[1] = v38;
      int v37 = v21 + 2;
    }
    else
    {
      int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        uint64_t v40 = &v37[v39];
        unsigned int v41 = (57344 * v36[1] / 0xFFFF + 57344 * v36[3] / 0xFFFF + 8193) >> 1;
        *uint64_t v40 = (57344 * *v36 / 0xFFFF + 57344 * v36[2] / 0xFFFF + 8193) >> 1;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v9 - v33;
    do
    {
      unint64_t v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        unint64_t v44 = v14 + 4;
        unsigned int v46 = (57344 * v14[1] / 0xFFFF + 57344 * v14[3] / 0xFFFF + 8193) >> 1;
        _WORD *v21 = (57344 * *v14 / 0xFFFF + 57344 * v14[2] / 0xFFFF + 8193) >> 1;
        v21[1] = v46;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          unsigned int v49 = (57344 * v44[1] / 0xFFFF + 57344 * v44[3] / 0xFFFF + 8193) >> 1;
          *int v48 = (57344 * *v44 / 0xFFFF + 57344 * v44[2] / 0xFFFF + 8193) >> 1;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if (v34)
    {
      int v50 = *v14;
      int v51 = v14[1];
      int v52 = v14[2];
      int v53 = v14[3];
      v14 += 4;
      _WORD *v21 = (57344 * v50 / 0xFFFFu + 57344 * v52 / 0xFFFFu + 8193) >> 1;
      v21[1] = (57344 * v51 / 0xFFFFu + 57344 * v53 / 0xFFFFu + 8193) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        unsigned int v55 = &v21[v54];
        unsigned int v56 = (57344 * v14[1] / 0xFFFF + 57344 * v14[3] / 0xFFFF + 8193) >> 1;
        *unsigned int v55 = (57344 * *v14 / 0xFFFF + 57344 * v14[2] / 0xFFFF + 8193) >> 1;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 56064 * *(unsigned __int16 *)(v30 + 2 * i) / 0xFFFF + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v38 = v14[1];
      int v36 = v14 + 4;
      _WORD *v21 = 57344 * *v14 / 0xFFFF + 4096;
      v21[1] = 57344 * v38 / 0xFFFFu + 4096;
      int v37 = v21 + 2;
    }
    else
    {
      int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        uint64_t v40 = &v37[v39];
        unsigned int v41 = 57344 * v36[1] / 0xFFFF;
        *uint64_t v40 = 57344 * *v36 / 0xFFFF + 4096;
        v40[1] = v41 + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      unint64_t v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v46 = v14[1];
        unint64_t v44 = v14 + 4;
        _WORD *v21 = 57344 * *v14 / 0xFFFF + 4096;
        v21[1] = 57344 * v46 / 0xFFFFu + 4096;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          unsigned int v49 = 57344 * v44[1] / 0xFFFF;
          *int v48 = 57344 * *v44 / 0xFFFF + 4096;
          v48[1] = v49 + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = *v14;
      int v51 = v14[1];
      v14 += 4;
      _WORD *v21 = 57344 * v50 / 0xFFFFu + 4096;
      v21[1] = 57344 * v51 / 0xFFFFu + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unsigned int v54 = 57344 * v14[1] / 0xFFFF;
        *int v53 = 57344 * *v14 / 0xFFFF + 4096;
        v53[1] = v54 + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 56064 * *(unsigned __int16 *)(v28 + 2 * i) / 0xFFFF + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unsigned int v36 = (57344 * v14[1] / 0xFFFF + 57344 * v14[3] / 0xFFFF + 8193) >> 1;
      _WORD *v21 = (57344 * *v14 / 0xFFFF + 57344 * v14[2] / 0xFFFF + 8193) >> 1;
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = (57344 * v34[1] / 0xFFFF + 57344 * v34[3] / 0xFFFF + 8193) >> 1;
        _WORD *v38 = (57344 * *v34 / 0xFFFF + 57344 * v34[2] / 0xFFFF + 8193) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        unsigned int v44 = (57344 * v14[1] / 0xFFFF + 57344 * v14[3] / 0xFFFF + 8193) >> 1;
        _WORD *v21 = (57344 * *v14 / 0xFFFF + 57344 * v14[2] / 0xFFFF + 8193) >> 1;
        v21[1] = v44;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = (57344 * v42[1] / 0xFFFF + 57344 * v42[3] / 0xFFFF + 8193) >> 1;
          *int v46 = (57344 * *v42 / 0xFFFF + 57344 * v42[2] / 0xFFFF + 8193) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      int v50 = v14[2];
      int v51 = v14[3];
      v14 += 4;
      _WORD *v21 = (57344 * v48 / 0xFFFFu + 57344 * v50 / 0xFFFFu + 8193) >> 1;
      v21[1] = (57344 * v49 / 0xFFFFu + 57344 * v51 / 0xFFFFu + 8193) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unsigned int v54 = (57344 * v14[1] / 0xFFFF + 57344 * v14[3] / 0xFFFF + 8193) >> 1;
        *int v53 = (57344 * *v14 / 0xFFFF + 57344 * v14[2] / 0xFFFF + 8193) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 56064 * *(unsigned __int16 *)(v28 + 2 * i) / 0xFFFF + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1];
      char v34 = v14 + 4;
      _WORD *v21 = 57344 * *v14 / 0xFFFF + 4096;
      v21[1] = 57344 * v36 / 0xFFFFu + 4096;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = 57344 * v34[1] / 0xFFFF;
        _WORD *v38 = 57344 * *v34 / 0xFFFF + 4096;
        v38[1] = v39 + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1];
        unint64_t v42 = v14 + 4;
        _WORD *v21 = 57344 * *v14 / 0xFFFF + 4096;
        v21[1] = 57344 * v44 / 0xFFFFu + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = 57344 * v42[1] / 0xFFFF;
          *int v46 = 57344 * *v42 / 0xFFFF + 4096;
          v46[1] = v47 + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      v14 += 4;
      _WORD *v21 = 57344 * v48 / 0xFFFFu + 4096;
      v21[1] = 57344 * v49 / 0xFFFFu + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unsigned int v52 = 57344 * v14[1] / 0xFFFF;
        *int v51 = 57344 * *v14 / 0xFFFF + 4096;
        v51[1] = v52 + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = 2 * v14;
  uint64_t v17 = a8[1];
  uint64_t v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v19) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v21 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v21 = *(void *)(a2 + 24);
  }
  if (v21)
  {
    unint64_t v53 = v21;
    uint64_t v54 = a4[1];
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = (char *)(*a7 + *a8 * v15 + v16);
    uint64_t v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    unint64_t v21 = v53;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v54;
  }
  unint64_t v26 = v11 & 1;
  if (v21 >= v26) {
    uint64_t v27 = v11 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v8;
  if (v20 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v29 = v20 - v9;
  if (v11)
  {
    if (v28)
    {
      unint64_t v30 = v13 + 4;
      unsigned int v32 = (v13[1] + v13[3] + 1) >> 1;
      *uint64_t v18 = (*v13 + v13[2] + 1) >> 1;
      v18[1] = v32;
      uint64_t v31 = v18 + 2;
    }
    else
    {
      unint64_t v30 = v13;
      uint64_t v31 = v18;
    }
    if (v20 != v9)
    {
      unint64_t v33 = 0;
      do
      {
        char v34 = &v31[v33];
        unsigned int v35 = (v30[1] + v30[3] + 1) >> 1;
        *char v34 = (*v30 + v30[2] + 1) >> 1;
        v34[1] = v35;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    unint64_t v36 = 0;
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v36 = v21 - v27;
    do
    {
      int v38 = v13;
      unsigned int v39 = v18;
      if (v28)
      {
        int v38 = v13 + 4;
        unsigned int v40 = (v13[1] + v13[3] + 1) >> 1;
        *uint64_t v18 = (*v13 + v13[2] + 1) >> 1;
        v18[1] = v40;
        unsigned int v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        unint64_t v41 = 0;
        do
        {
          unint64_t v42 = &v39[v41];
          unsigned int v43 = (v38[1] + v38[3] + 1) >> 1;
          *unint64_t v42 = (*v38 + v38[2] + 1) >> 1;
          v42[1] = v43;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if (v28)
    {
      int v44 = *v13;
      int v45 = v13[1];
      int v46 = v13[2];
      int v47 = v13[3];
      v13 += 4;
      *uint64_t v18 = (v44 + v46 + 1) >> 1;
      v18[1] = (v45 + v47 + 1) >> 1;
      v18 += 2;
    }
    if (v20 != v9)
    {
      unint64_t v48 = 0;
      do
      {
        int v49 = &v18[v48];
        unsigned int v50 = (v13[1] + v13[3] + 1) >> 1;
        *int v49 = (*v13 + v13[2] + 1) >> 1;
        v49[1] = v50;
        v48 += 2;
        v13 += 4;
      }
      while (v48 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (int *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = 2 * v14;
  uint64_t v17 = a8[1];
  uint64_t v18 = (int *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v19) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v21 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v21 = *(void *)(a2 + 24);
  }
  if (v21)
  {
    unint64_t v45 = v21;
    uint64_t v46 = a4[1];
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = (char *)(*a7 + *a8 * v15 + v16);
    uint64_t v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    unint64_t v21 = v45;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v46;
  }
  unint64_t v26 = v11 & 1;
  if (v21 >= v26) {
    uint64_t v27 = v11 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v8;
  if (v20 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v29 = v20 - v9;
  if (v11)
  {
    unint64_t v30 = v13;
    if (v28)
    {
      unint64_t v30 = v13 + 2;
      *uint64_t v18 = *v13;
      uint64_t v31 = v18 + 1;
    }
    else
    {
      uint64_t v31 = v18;
    }
    if (v20 != v9)
    {
      unint64_t v32 = 0;
      do
      {
        int v33 = *v30;
        v30 += 2;
        v31[v32 / 2] = v33;
        v32 += 2;
      }
      while (v32 < v29);
    }
    uint64_t v13 = (int *)((char *)v13 + v12);
    uint64_t v18 = (int *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    unint64_t v34 = 0;
  }
  else
  {
    uint64_t v35 = 0;
    unint64_t v34 = v21 - v27;
    do
    {
      unint64_t v36 = v13;
      uint64_t v37 = v18;
      if (v28)
      {
        unint64_t v36 = v13 + 2;
        *uint64_t v18 = *v13;
        uint64_t v37 = v18 + 1;
      }
      if (v20 != v9)
      {
        unint64_t v38 = 0;
        do
        {
          int v39 = *v36;
          v36 += 2;
          v37[v38 / 2] = v39;
          v38 += 2;
        }
        while (v38 < v29);
      }
      uint64_t v13 = (int *)((char *)v13 + v12);
      uint64_t v18 = (int *)((char *)v18 + v17);
      ++v35;
    }
    while (v35 != v34);
  }
  if (v34 + v26 < v21)
  {
    if (v28)
    {
      int v40 = *v13;
      v13 += 2;
      *v18++ = v40;
    }
    if (v20 != v9)
    {
      unint64_t v41 = 0;
      do
      {
        int v42 = *v13;
        v13 += 2;
        v18[v41 / 2] = v42;
        v41 += 2;
      }
      while (v41 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 56064 * *(unsigned __int16 *)(v32 + 2 * i) / 0xFFFF + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      int v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v40 = *v39;
      int v41 = v39[1];
      uint64_t v37 = v15 + 4;
      unsigned int v42 = (57344 * v15[1] / 0xFFFF
           + 57344 * v15[3] / 0xFFFF
           + 57344 * *(unsigned __int16 *)((char *)v15 + v14 + 2) / 0xFFFF
           + 57344 * v41 / 0xFFFFu
           + 16386) >> 2;
      *uint64_t v22 = (57344 * *v15 / 0xFFFF
            + 57344 * v15[2] / 0xFFFF
            + 57344 * *(unsigned __int16 *)((char *)v15 + v14) / 0xFFFF
            + 57344 * v40 / 0xFFFFu
            + 16386) >> 2;
      v22[1] = v42;
      unint64_t v38 = v22 + 2;
    }
    else
    {
      uint64_t v37 = v15;
      unint64_t v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      int v44 = v37 + 2;
      do
      {
        unsigned int v45 = 57344 * *(v44 - 1) / 0xFFFF
            + 57344 * v44[1] / 0xFFFF
            + 57344 * *(unsigned __int16 *)((char *)v44 + v14 - 2) / 0xFFFF
            + 57344 * *(unsigned __int16 *)((char *)v44 + v14 + 2) / 0xFFFF
            + 16386;
        uint64_t v46 = &v38[v43];
        *uint64_t v46 = (57344 * *(v44 - 2) / 0xFFFF
              + 57344 * *v44 / 0xFFFF
              + 57344 * *(unsigned __int16 *)((char *)v44 + v14 - 4) / 0xFFFF
              + 57344 * *(unsigned __int16 *)((char *)v44 + v14) / 0xFFFF
              + 16386) >> 2;
        v46[1] = v45 >> 2;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      int v49 = v15;
      unsigned int v50 = v22;
      if (v9)
      {
        int v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v52 = *v51;
        int v53 = v51[1];
        int v49 = v15 + 4;
        unsigned int v54 = (57344 * v15[1] / 0xFFFF
             + 57344 * v15[3] / 0xFFFF
             + 57344 * *(unsigned __int16 *)((char *)v15 + v14 + 2) / 0xFFFF
             + 57344 * v53 / 0xFFFFu
             + 16386) >> 2;
        *uint64_t v22 = (57344 * *v15 / 0xFFFF
              + 57344 * v15[2] / 0xFFFF
              + 57344 * *(unsigned __int16 *)((char *)v15 + v14) / 0xFFFF
              + 57344 * v52 / 0xFFFFu
              + 16386) >> 2;
        v22[1] = v54;
        unsigned int v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v55 = 0;
        unsigned int v56 = v49 + 2;
        do
        {
          unsigned int v57 = 57344 * *(v56 - 1) / 0xFFFF
              + 57344 * v56[1] / 0xFFFF
              + 57344 * *(unsigned __int16 *)((char *)v56 + v14 - 2) / 0xFFFF
              + 57344 * *(unsigned __int16 *)((char *)v56 + v14 + 2) / 0xFFFF
              + 16386;
          v58 = &v50[v55];
          _WORD *v58 = (57344 * *(v56 - 2) / 0xFFFF
                + 57344 * *v56 / 0xFFFF
                + 57344 * *(unsigned __int16 *)((char *)v56 + v14 - 4) / 0xFFFF
                + 57344 * *(unsigned __int16 *)((char *)v56 + v14) / 0xFFFF
                + 16386) >> 2;
          v58[1] = v57 >> 2;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      uint64_t v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 56064 * *(unsigned __int16 *)(v32 + 2 * i) / 0xFFFF + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      int v39 = v15[1];
      uint64_t v37 = v15 + 4;
      *uint64_t v22 = 57344 * *v15 / 0xFFFF + 4096;
      v22[1] = 57344 * v39 / 0xFFFFu + 4096;
      unint64_t v38 = v22 + 2;
    }
    else
    {
      uint64_t v37 = v15;
      unint64_t v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unsigned int v42 = 57344 * v37[1] / 0xFFFF;
        _WORD *v41 = 57344 * *v37 / 0xFFFF + 4096;
        v41[1] = v42 + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      uint64_t v46 = v15;
      unint64_t v47 = v22;
      if (v9)
      {
        int v48 = v15[1];
        uint64_t v46 = v15 + 4;
        *uint64_t v22 = 57344 * *v15 / 0xFFFF + 4096;
        v22[1] = 57344 * v48 / 0xFFFFu + 4096;
        unint64_t v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unsigned int v50 = &v47[v49];
          unsigned int v51 = 57344 * v46[1] / 0xFFFF;
          _WORD *v50 = 57344 * *v46 / 0xFFFF + 4096;
          v50[1] = v51 + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      uint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  else {
    unint64_t v25 = v14 - v13;
  }
  if (v25)
  {
    unint64_t v59 = v25;
    uint64_t v60 = a8[1];
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    uint64_t v30 = (char *)(*a7 + v27 * v18 + v20);
    uint64_t v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    unint64_t v25 = v59;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
    uint64_t v21 = v60;
  }
  if (v25 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      uint64_t v37 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      int v38 = *v37;
      int v39 = v37[1];
      uint64_t v35 = v16 + 4;
      unsigned int v40 = (v16[1] + v16[3] + *(unsigned __int16 *)((char *)v16 + v15 + 2) + v39 + 2) >> 2;
      *uint64_t v22 = (*v16 + v16[2] + *(unsigned __int16 *)((char *)v16 + v15) + v38 + 2) >> 2;
      v22[1] = v40;
      unint64_t v36 = v22 + 2;
    }
    else
    {
      uint64_t v35 = v16;
      unint64_t v36 = v22;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      unsigned int v42 = v35 + 2;
      do
      {
        unint64_t v43 = &v36[v41];
        unsigned int v44 = (*(v42 - 1)
             + v42[1]
             + *(unsigned __int16 *)((char *)v42 + v15 - 2)
             + *(unsigned __int16 *)((char *)v42 + v15 + 2)
             + 2) >> 2;
        *unint64_t v43 = (*(v42 - 2)
              + *v42
              + *(unsigned __int16 *)((char *)v42 + v15 - 4)
              + *(unsigned __int16 *)((char *)v42 + v15)
              + 2) >> 2;
        v43[1] = v44;
        v41 += 2;
        v42 += 4;
      }
      while (v41 < v34);
    }
    v16 += v15;
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v25 - v33;
    do
    {
      unint64_t v47 = v16;
      int v48 = v22;
      if (v8)
      {
        unint64_t v49 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        int v50 = *v49;
        int v51 = v49[1];
        unint64_t v47 = v16 + 4;
        unsigned int v52 = (v16[1] + v16[3] + *(unsigned __int16 *)((char *)v16 + v15 + 2) + v51 + 2) >> 2;
        *uint64_t v22 = (*v16 + v16[2] + *(unsigned __int16 *)((char *)v16 + v15) + v50 + 2) >> 2;
        v22[1] = v52;
        int v48 = v22 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v53 = 0;
        unsigned int v54 = v47 + 2;
        do
        {
          unint64_t v55 = &v48[v53];
          unsigned int v56 = (*(v54 - 1)
               + v54[1]
               + *(unsigned __int16 *)((char *)v54 + v15 - 2)
               + *(unsigned __int16 *)((char *)v54 + v15 + 2)
               + 2) >> 2;
          *unint64_t v55 = (*(v54 - 2)
                + *v54
                + *(unsigned __int16 *)((char *)v54 + v15 - 4)
                + *(unsigned __int16 *)((char *)v54 + v15)
                + 2) >> 2;
          v55[1] = v56;
          v53 += 2;
          v54 += 4;
        }
        while (v53 < v34);
      }
      v16 += v15;
      uint64_t v22 = (_WORD *)((char *)v22 + v21);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (int *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v18 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (int *)(a7[1] + ((unint64_t)(v20 * v17) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v22) {
    unint64_t v23 = v22;
  }
  else {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  unint64_t v24 = v18 - v17;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v18 - v17) {
    unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v24)
  {
    unint64_t v46 = v24;
    uint64_t v47 = a4[1];
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    if (v13 >= v9) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v27);
    uint64_t v29 = (char *)(*a7 + v26 * v17 + v19);
    uint64_t v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, 2 * v23);
      v28 += v25;
      v29 += v26;
    }
    while (!__CFADD__(v30++, 1));
    unint64_t v24 = v46;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
    uint64_t v14 = v47;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v23 - v10;
  if (v12)
  {
    unint64_t v34 = v15;
    if (v8)
    {
      unint64_t v34 = v15 + 2;
      int *v21 = *v15;
      uint64_t v35 = v21 + 1;
    }
    else
    {
      uint64_t v35 = v21;
    }
    if (v23 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        int v37 = *v34;
        v34 += 2;
        v35[v36 / 2] = v37;
        v36 += 2;
      }
      while (v36 < v33);
    }
    uint64_t v15 = (int *)((char *)v15 + 2 * v14);
    uint64_t v21 = (int *)((char *)v21 + v20);
  }
  if (v24 != v32)
  {
    unint64_t v38 = 0;
    unint64_t v39 = v24 - v32;
    do
    {
      unsigned int v40 = v15;
      unint64_t v41 = v21;
      if (v8)
      {
        unsigned int v40 = v15 + 2;
        int *v21 = *v15;
        unint64_t v41 = v21 + 1;
      }
      if (v23 != v10)
      {
        unint64_t v42 = 0;
        do
        {
          int v43 = *v40;
          v40 += 2;
          v41[v42 / 2] = v43;
          v42 += 2;
        }
        while (v42 < v33);
      }
      uint64_t v15 = (int *)((char *)v15 + 2 * v14);
      uint64_t v21 = (int *)((char *)v21 + v20);
      v38 += 2;
    }
    while (v38 < v39);
  }
  return 0;
}

uint64_t vt_Copy_sf44_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v24 + 2 * i))) >> 32) >> 12)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  unint64_t v26 = v8 & 1;
  if (v17 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      int v34 = v12[1];
      unint64_t v32 = v12 + 2;
      *uint64_t v16 = 16 * (((268439553 * (unint64_t)(3584 * *v12)) >> 32) >> 12) + 4096;
      v16[1] = 16 * ((268439553 * (unint64_t)(3584 * v34)) >> 44) + 4096;
      unint64_t v33 = v16 + 2;
    }
    else
    {
      unint64_t v32 = v12;
      unint64_t v33 = v16;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        int v37 = *v32;
        int v38 = v32[1];
        v32 += 2;
        *unint64_t v33 = 16 * (((268439553 * (unint64_t)(3584 * v37)) >> 32) >> 12) + 4096;
        v33[1] = 16 * ((268439553 * (unint64_t)(3584 * v38)) >> 44) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      int v39 = *v32;
      int v40 = v32[1];
      *unint64_t v33 = 16 * (((268439553 * (unint64_t)(3584 * v39)) >> 32) >> 12) + 4096;
      v33[1] = 16 * (((268439553 * (unint64_t)(3584 * v40)) >> 32) >> 12) + 4096;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v17 - v27;
    do
    {
      int v43 = v12;
      unsigned int v44 = v16;
      if (v28)
      {
        int v45 = v12[1];
        int v43 = v12 + 2;
        *uint64_t v16 = 16 * (((268439553 * (unint64_t)(3584 * *v12)) >> 32) >> 12) + 4096;
        v16[1] = 16 * ((268439553 * (unint64_t)(3584 * v45)) >> 44) + 4096;
        unsigned int v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          int v48 = *v43;
          int v49 = v43[1];
          v43 += 2;
          *unsigned int v44 = 16 * (((268439553 * (unint64_t)(3584 * v48)) >> 32) >> 12) + 4096;
          v44[1] = 16 * ((268439553 * (unint64_t)(3584 * v49)) >> 44) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        int v50 = *v43;
        int v51 = v43[1];
        *unsigned int v44 = 16 * (((268439553 * (unint64_t)(3584 * v50)) >> 32) >> 12) + 4096;
        v44[1] = 16 * (((268439553 * (unint64_t)(3584 * v51)) >> 32) >> 12) + 4096;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if (v28)
    {
      int v52 = *v12;
      int v53 = v12[1];
      v12 += 2;
      *uint64_t v16 = 16 * (((268439553 * (unint64_t)(3584 * v52)) >> 32) >> 12) + 4096;
      v16[1] = 16 * ((268439553 * (unint64_t)(3584 * v53)) >> 44) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        int v55 = *v12;
        int v56 = v12[1];
        v12 += 2;
        *uint64_t v16 = 16 * (((268439553 * (unint64_t)(3584 * v55)) >> 32) >> 12) + 4096;
        v16[1] = 16 * ((268439553 * (unint64_t)(3584 * v56)) >> 44) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      int v57 = *v12;
      int v58 = v12[1];
      *uint64_t v16 = 16 * (((268439553 * (unint64_t)(3584 * v57)) >> 32) >> 12) + 4096;
      v16[1] = 16 * (((268439553 * (unint64_t)(3584 * v58)) >> 32) >> 12) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf44_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v23 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1];
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = 16 * (((268439553 * (unint64_t)(3584 * *v13)) >> 32) >> 12) + 4096;
      v17[1] = 16 * ((268439553 * (unint64_t)(3584 * v33)) >> 44) + 4096;
      unint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      unint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31;
        int v37 = v31[1];
        v31 += 2;
        *unint64_t v32 = 16 * (((268439553 * (unint64_t)(3584 * v36)) >> 32) >> 12) + 4096;
        v32[1] = 16 * ((268439553 * (unint64_t)(3584 * v37)) >> 44) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      int v38 = *v31;
      int v39 = v31[1];
      *unint64_t v32 = 16 * (((268439553 * (unint64_t)(3584 * v38)) >> 32) >> 12) + 4096;
      v32[1] = 16 * (((268439553 * (unint64_t)(3584 * v39)) >> 32) >> 12) + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      int v43 = v17;
      if (v27)
      {
        int v44 = v13[1];
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = 16 * (((268439553 * (unint64_t)(3584 * *v13)) >> 32) >> 12) + 4096;
        v17[1] = 16 * ((268439553 * (unint64_t)(3584 * v44)) >> 44) + 4096;
        int v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          int v47 = *v42;
          int v48 = v42[1];
          v42 += 2;
          *int v43 = 16 * (((268439553 * (unint64_t)(3584 * v47)) >> 32) >> 12) + 4096;
          v43[1] = 16 * ((268439553 * (unint64_t)(3584 * v48)) >> 44) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *int v43 = 16 * (((268439553 * (unint64_t)(3584 * v49)) >> 32) >> 12) + 4096;
        v43[1] = 16 * (((268439553 * (unint64_t)(3584 * v50)) >> 32) >> 12) + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      int v51 = *v13;
      int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = 16 * (((268439553 * (unint64_t)(3584 * v51)) >> 32) >> 12) + 4096;
      v17[1] = 16 * ((268439553 * (unint64_t)(3584 * v52)) >> 44) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        int v54 = *v13;
        int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = 16 * (((268439553 * (unint64_t)(3584 * v54)) >> 32) >> 12) + 4096;
        v17[1] = 16 * ((268439553 * (unint64_t)(3584 * v55)) >> 44) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      int v56 = *v13;
      int v57 = v13[1];
      *unint64_t v17 = 16 * (((268439553 * (unint64_t)(3584 * v56)) >> 32) >> 12) + 4096;
      v17[1] = 16 * (((268439553 * (unint64_t)(3584 * v57)) >> 32) >> 12) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf44_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v23 + 2 * i))) >> 32) >> 12);
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1];
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = 16 * (((268439553 * (unint64_t)(4095 * *v13)) >> 32) >> 12);
      v17[1] = 16 * ((268439553 * (unint64_t)(4095 * v33)) >> 44);
      unint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      unint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31;
        int v37 = v31[1];
        v31 += 2;
        *unint64_t v32 = 16 * (((268439553 * (unint64_t)(4095 * v36)) >> 32) >> 12);
        v32[1] = 16 * ((268439553 * (unint64_t)(4095 * v37)) >> 44);
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      int v38 = *v31;
      int v39 = v31[1];
      *unint64_t v32 = 16 * (((268439553 * (unint64_t)(4095 * v38)) >> 32) >> 12);
      v32[1] = 16 * (((268439553 * (unint64_t)(4095 * v39)) >> 32) >> 12);
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      int v43 = v17;
      if (v27)
      {
        int v44 = v13[1];
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = 16 * (((268439553 * (unint64_t)(4095 * *v13)) >> 32) >> 12);
        v17[1] = 16 * ((268439553 * (unint64_t)(4095 * v44)) >> 44);
        int v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          int v47 = *v42;
          int v48 = v42[1];
          v42 += 2;
          *int v43 = 16 * (((268439553 * (unint64_t)(4095 * v47)) >> 32) >> 12);
          v43[1] = 16 * ((268439553 * (unint64_t)(4095 * v48)) >> 44);
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *int v43 = 16 * (((268439553 * (unint64_t)(4095 * v49)) >> 32) >> 12);
        v43[1] = 16 * (((268439553 * (unint64_t)(4095 * v50)) >> 32) >> 12);
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      int v51 = *v13;
      int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = 16 * (((268439553 * (unint64_t)(4095 * v51)) >> 32) >> 12);
      v17[1] = 16 * ((268439553 * (unint64_t)(4095 * v52)) >> 44);
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        int v54 = *v13;
        int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = 16 * (((268439553 * (unint64_t)(4095 * v54)) >> 32) >> 12);
        v17[1] = 16 * ((268439553 * (unint64_t)(4095 * v55)) >> 44);
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      int v56 = *v13;
      int v57 = v13[1];
      *unint64_t v17 = 16 * (((268439553 * (unint64_t)(4095 * v56)) >> 32) >> 12);
      v17[1] = 16 * (((268439553 * (unint64_t)(4095 * v57)) >> 32) >> 12);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v30 + 2 * i))) >> 32) >> 12)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v32 = v12 & 1;
  if (v9 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v36 = v14 + 4;
      unsigned int v38 = (((268439553 * (unint64_t)(3584 * v14[3])) >> 32) >> 12)
          + (((268439553 * (unint64_t)(3584 * v14[1])) >> 32) >> 12);
      _WORD *v21 = (8
            * ((((268439553 * (unint64_t)(3584 * v14[2])) >> 32) >> 12)
             + (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12))
            + 4104) & 0xFFF0;
      v21[1] = (8 * v38 + 4104) & 0xFFF0;
      int v37 = v21 + 2;
    }
    else
    {
      int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unsigned int v41 = (((268439553 * (unint64_t)(3584 * v36[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v36[1])) >> 32) >> 12);
        *unint64_t v40 = (8
              * (((268439553 * (unint64_t)(3584 * v36[2])) >> 44)
               + (((268439553 * (unint64_t)(3584 * *v36)) >> 32) >> 12))
              + 4104) & 0xFFF0;
        v40[1] = (8 * v41 + 4104) & 0xFFF0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v9 - v33;
    do
    {
      int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v44 = v14 + 4;
        unsigned int v46 = (((268439553 * (unint64_t)(3584 * v14[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v14[1])) >> 32) >> 12);
        _WORD *v21 = (8
              * (((268439553 * (unint64_t)(3584 * v14[2])) >> 44)
               + (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12))
              + 4104) & 0xFFF0;
        v21[1] = (8 * v46 + 4104) & 0xFFF0;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          unsigned int v49 = (((268439553 * (unint64_t)(3584 * v44[3])) >> 32) >> 12)
              + (((268439553 * (unint64_t)(3584 * v44[1])) >> 32) >> 12);
          *int v48 = (8
                * (((268439553 * (unint64_t)(3584 * v44[2])) >> 44)
                 + (((268439553 * (unint64_t)(3584 * *v44)) >> 32) >> 12))
                + 4104) & 0xFFF0;
          v48[1] = (8 * v49 + 4104) & 0xFFF0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if (v34)
    {
      int v50 = *v14;
      int v51 = v14[1];
      int v52 = v14[2];
      int v53 = v14[3];
      v14 += 4;
      _WORD *v21 = (8
            * ((((268439553 * (unint64_t)(3584 * v52)) >> 32) >> 12)
             + (((268439553 * (unint64_t)(3584 * v50)) >> 32) >> 12))
            + 4104) & 0xFFF0;
      v21[1] = (8
              * ((((268439553 * (unint64_t)(3584 * v53)) >> 32) >> 12)
               + (((268439553 * (unint64_t)(3584 * v51)) >> 32) >> 12))
              + 4104) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        int v55 = &v21[v54];
        unsigned int v56 = (((268439553 * (unint64_t)(3584 * v14[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v14[1])) >> 32) >> 12);
        *int v55 = (8
              * (((268439553 * (unint64_t)(3584 * v14[2])) >> 44)
               + (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12))
              + 4104) & 0xFFF0;
        v55[1] = (8 * v56 + 4104) & 0xFFF0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v30 + 2 * i))) >> 32) >> 12)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v38 = v14[1];
      int v36 = v14 + 4;
      _WORD *v21 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
      v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v38)) >> 44) + 4096;
      int v37 = v21 + 2;
    }
    else
    {
      int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unint64_t v41 = (268439553 * (unint64_t)(3584 * v36[1])) >> 44;
        *unint64_t v40 = 16 * (((268439553 * (unint64_t)(3584 * *v36)) >> 32) >> 12) + 4096;
        v40[1] = 16 * v41 + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v46 = v14[1];
        int v44 = v14 + 4;
        _WORD *v21 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
        v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v46)) >> 44) + 4096;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          unint64_t v49 = (268439553 * (unint64_t)(3584 * v44[1])) >> 44;
          *int v48 = 16 * (((268439553 * (unint64_t)(3584 * *v44)) >> 32) >> 12) + 4096;
          v48[1] = 16 * v49 + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = *v14;
      int v51 = v14[1];
      v14 += 4;
      _WORD *v21 = 16 * (((268439553 * (unint64_t)(3584 * v50)) >> 32) >> 12) + 4096;
      v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v51)) >> 44) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unint64_t v54 = (268439553 * (unint64_t)(3584 * v14[1])) >> 44;
        *int v53 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
        v53[1] = 16 * v54 + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unsigned int v36 = (((268439553 * (unint64_t)(3584 * v14[3])) >> 32) >> 12)
          + (((268439553 * (unint64_t)(3584 * v14[1])) >> 32) >> 12);
      _WORD *v21 = (8
            * ((((268439553 * (unint64_t)(3584 * v14[2])) >> 32) >> 12)
             + (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12))
            + 4104) & 0xFFF0;
      v21[1] = (8 * v36 + 4104) & 0xFFF0;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = (((268439553 * (unint64_t)(3584 * v34[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v34[1])) >> 32) >> 12);
        _WORD *v38 = (8
              * (((268439553 * (unint64_t)(3584 * v34[2])) >> 44)
               + (((268439553 * (unint64_t)(3584 * *v34)) >> 32) >> 12))
              + 4104) & 0xFFF0;
        v38[1] = (8 * v39 + 4104) & 0xFFF0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        unsigned int v44 = (((268439553 * (unint64_t)(3584 * v14[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v14[1])) >> 32) >> 12);
        _WORD *v21 = (8
              * (((268439553 * (unint64_t)(3584 * v14[2])) >> 44)
               + (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12))
              + 4104) & 0xFFF0;
        v21[1] = (8 * v44 + 4104) & 0xFFF0;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = (((268439553 * (unint64_t)(3584 * v42[3])) >> 32) >> 12)
              + (((268439553 * (unint64_t)(3584 * v42[1])) >> 32) >> 12);
          *int v46 = (8
                * (((268439553 * (unint64_t)(3584 * v42[2])) >> 44)
                 + (((268439553 * (unint64_t)(3584 * *v42)) >> 32) >> 12))
                + 4104) & 0xFFF0;
          v46[1] = (8 * v47 + 4104) & 0xFFF0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      int v50 = v14[2];
      int v51 = v14[3];
      v14 += 4;
      _WORD *v21 = (8
            * ((((268439553 * (unint64_t)(3584 * v50)) >> 32) >> 12)
             + (((268439553 * (unint64_t)(3584 * v48)) >> 32) >> 12))
            + 4104) & 0xFFF0;
      v21[1] = (8
              * ((((268439553 * (unint64_t)(3584 * v51)) >> 32) >> 12)
               + (((268439553 * (unint64_t)(3584 * v49)) >> 32) >> 12))
              + 4104) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unsigned int v54 = (((268439553 * (unint64_t)(3584 * v14[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v14[1])) >> 32) >> 12);
        *int v53 = (8
              * (((268439553 * (unint64_t)(3584 * v14[2])) >> 44)
               + (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12))
              + 4104) & 0xFFF0;
        v53[1] = (8 * v54 + 4104) & 0xFFF0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1];
      char v34 = v14 + 4;
      _WORD *v21 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
      v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v36)) >> 44) + 4096;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (268439553 * (unint64_t)(3584 * v34[1])) >> 44;
        _WORD *v38 = 16 * (((268439553 * (unint64_t)(3584 * *v34)) >> 32) >> 12) + 4096;
        v38[1] = 16 * v39 + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1];
        unint64_t v42 = v14 + 4;
        _WORD *v21 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
        v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v44)) >> 44) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unint64_t v47 = (268439553 * (unint64_t)(3584 * v42[1])) >> 44;
          *int v46 = 16 * (((268439553 * (unint64_t)(3584 * *v42)) >> 32) >> 12) + 4096;
          v46[1] = 16 * v47 + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      v14 += 4;
      _WORD *v21 = 16 * (((268439553 * (unint64_t)(3584 * v48)) >> 32) >> 12) + 4096;
      v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v49)) >> 44) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unint64_t v52 = (268439553 * (unint64_t)(3584 * v14[1])) >> 44;
        *int v51 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
        v51[1] = 16 * v52 + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 12);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unsigned int v36 = (((268439553 * (unint64_t)(4095 * v14[3])) >> 32) >> 12)
          + (((268439553 * (unint64_t)(4095 * v14[1])) >> 32) >> 12);
      _WORD *v21 = (8
            * (((268439553 * (unint64_t)(4095 * v14[2])) >> 44)
             + (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12))
            + 8) & 0xFFF0;
      v21[1] = (8 * v36 + 8) & 0xFFF0;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = (((268439553 * (unint64_t)(4095 * v34[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * v34[1])) >> 32) >> 12);
        _WORD *v38 = (8
              * (((268439553 * (unint64_t)(4095 * v34[2])) >> 44)
               + (((268439553 * (unint64_t)(4095 * *v34)) >> 32) >> 12))
              + 8) & 0xFFF0;
        v38[1] = (8 * v39 + 8) & 0xFFF0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        unsigned int v44 = (((268439553 * (unint64_t)(4095 * v14[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * v14[1])) >> 32) >> 12);
        _WORD *v21 = (8
              * (((268439553 * (unint64_t)(4095 * v14[2])) >> 44)
               + (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12))
              + 8) & 0xFFF0;
        v21[1] = (8 * v44 + 8) & 0xFFF0;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = (((268439553 * (unint64_t)(4095 * v42[3])) >> 32) >> 12)
              + (((268439553 * (unint64_t)(4095 * v42[1])) >> 32) >> 12);
          *int v46 = (8
                * (((268439553 * (unint64_t)(4095 * v42[2])) >> 44)
                 + (((268439553 * (unint64_t)(4095 * *v42)) >> 32) >> 12))
                + 8) & 0xFFF0;
          v46[1] = (8 * v47 + 8) & 0xFFF0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      int v50 = v14[2];
      int v51 = v14[3];
      v14 += 4;
      _WORD *v21 = (8
            * (((268439553 * (unint64_t)(4095 * v50)) >> 44)
             + (((268439553 * (unint64_t)(4095 * v48)) >> 32) >> 12))
            + 8) & 0xFFF0;
      v21[1] = (8
              * ((((268439553 * (unint64_t)(4095 * v51)) >> 32) >> 12)
               + (((268439553 * (unint64_t)(4095 * v49)) >> 32) >> 12))
              + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unsigned int v54 = (((268439553 * (unint64_t)(4095 * v14[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * v14[1])) >> 32) >> 12);
        *int v53 = (8
              * (((268439553 * (unint64_t)(4095 * v14[2])) >> 44)
               + (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12))
              + 8) & 0xFFF0;
        v53[1] = (8 * v54 + 8) & 0xFFF0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 12);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1];
      char v34 = v14 + 4;
      _WORD *v21 = 16 * (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12);
      v21[1] = 16 * ((268439553 * (unint64_t)(4095 * v36)) >> 44);
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (268439553 * (unint64_t)(4095 * v34[1])) >> 44;
        _WORD *v38 = 16 * (((268439553 * (unint64_t)(4095 * *v34)) >> 32) >> 12);
        v38[1] = 16 * v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1];
        unint64_t v42 = v14 + 4;
        _WORD *v21 = 16 * (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12);
        v21[1] = 16 * ((268439553 * (unint64_t)(4095 * v44)) >> 44);
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unint64_t v47 = (268439553 * (unint64_t)(4095 * v42[1])) >> 44;
          *int v46 = 16 * (((268439553 * (unint64_t)(4095 * *v42)) >> 32) >> 12);
          v46[1] = 16 * v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      v14 += 4;
      _WORD *v21 = 16 * (((268439553 * (unint64_t)(4095 * v48)) >> 32) >> 12);
      v21[1] = 16 * ((268439553 * (unint64_t)(4095 * v49)) >> 44);
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unint64_t v52 = (268439553 * (unint64_t)(4095 * v14[1])) >> 44;
        *int v51 = 16 * (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12);
        v51[1] = 16 * v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      unint64_t v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v40 = *v39;
      int v41 = v39[1];
      unint64_t v37 = v15 + 4;
      unsigned int v42 = (((268439553
                           * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 12)
          + (((268439553 * (unint64_t)(3584 * v15[1])) >> 32) >> 12)
          + (((268439553 * (unint64_t)(3584 * v15[3])) >> 32) >> 12)
          + (((268439553 * (unint64_t)(3584 * v41)) >> 32) >> 12);
      *unint64_t v22 = (4
            * ((((268439553
                              * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 12)
             + (((268439553 * (unint64_t)(3584 * *v15)) >> 32) >> 12)
             + ((268439553 * (unint64_t)(3584 * v15[2])) >> 44)
             + ((268439553 * (unint64_t)(3584 * v40)) >> 44))
            + 4104) & 0xFFF0;
      v22[1] = (4 * v42 + 4104) & 0xFFF0;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      int v44 = v37 + 2;
      do
      {
        unint64_t v45 = &v38[v43];
        unsigned int v46 = (((268439553
                             * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v44 + v14 - 2))) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * *(v44 - 1))) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v44[1])) >> 32) >> 12)
            + (((268439553
                             * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v44 + v14 + 2))) >> 32) >> 12);
        *unint64_t v45 = (4
              * (((268439553 * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v44 + v14 - 4))) >> 44)
               + (((268439553 * (unint64_t)(3584 * *(v44 - 2))) >> 32) >> 12)
               + ((268439553 * (unint64_t)(3584 * *v44)) >> 44)
               + ((268439553 * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v44 + v14))) >> 44))
              + 4104) & 0xFFF0;
        v45[1] = (4 * v46 + 4104) & 0xFFF0;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      int v49 = v15;
      unint64_t v50 = v22;
      if (v9)
      {
        int v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v52 = *v51;
        int v53 = v51[1];
        int v49 = v15 + 4;
        unsigned int v54 = (((268439553
                             * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v15[1])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v15[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v53)) >> 32) >> 12);
        *unint64_t v22 = (4
              * (((268439553 * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v15 + v14))) >> 44)
               + (((268439553 * (unint64_t)(3584 * *v15)) >> 32) >> 12)
               + ((268439553 * (unint64_t)(3584 * v15[2])) >> 44)
               + ((268439553 * (unint64_t)(3584 * v52)) >> 44))
              + 4104) & 0xFFF0;
        v22[1] = (4 * v54 + 4104) & 0xFFF0;
        unint64_t v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v55 = 0;
        unsigned int v56 = v49 + 2;
        do
        {
          int v57 = &v50[v55];
          unsigned int v58 = (((268439553
                               * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v56 + v14 - 2))) >> 32) >> 12)
              + (((268439553 * (unint64_t)(3584 * *(v56 - 1))) >> 32) >> 12)
              + (((268439553 * (unint64_t)(3584 * v56[1])) >> 32) >> 12)
              + (((268439553
                               * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v56 + v14 + 2))) >> 32) >> 12);
          *int v57 = (4
                * (((268439553 * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v56 + v14 - 4))) >> 44)
                 + (((268439553 * (unint64_t)(3584 * *(v56 - 2))) >> 32) >> 12)
                 + ((268439553 * (unint64_t)(3584 * *v56)) >> 44)
                 + ((268439553 * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v56 + v14))) >> 44))
                + 4104) & 0xFFF0;
          v57[1] = (4 * v58 + 4104) & 0xFFF0;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      int v39 = v15[1];
      unint64_t v37 = v15 + 4;
      *unint64_t v22 = 16 * (((268439553 * (unint64_t)(3584 * *v15)) >> 32) >> 12) + 4096;
      v22[1] = 16 * ((268439553 * (unint64_t)(3584 * v39)) >> 44) + 4096;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (268439553 * (unint64_t)(3584 * v37[1])) >> 44;
        _WORD *v41 = 16 * (((268439553 * (unint64_t)(3584 * *v37)) >> 32) >> 12) + 4096;
        v41[1] = 16 * v42 + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v22;
      if (v9)
      {
        int v48 = v15[1];
        unsigned int v46 = v15 + 4;
        *unint64_t v22 = 16 * (((268439553 * (unint64_t)(3584 * *v15)) >> 32) >> 12) + 4096;
        v22[1] = 16 * ((268439553 * (unint64_t)(3584 * v48)) >> 44) + 4096;
        unint64_t v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          unint64_t v51 = (268439553 * (unint64_t)(3584 * v46[1])) >> 44;
          _WORD *v50 = 16 * (((268439553 * (unint64_t)(3584 * *v46)) >> 32) >> 12) + 4096;
          v50[1] = 16 * v51 + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 12);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      int v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v40 = *v39;
      int v41 = v39[1];
      unint64_t v37 = v15 + 4;
      unsigned int v42 = (((268439553
                           * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 12)
          + (((268439553 * (unint64_t)(4095 * v15[1])) >> 32) >> 12)
          + (((268439553 * (unint64_t)(4095 * v15[3])) >> 32) >> 12)
          + (((268439553 * (unint64_t)(4095 * v41)) >> 32) >> 12);
      *unint64_t v22 = (4
            * (((268439553 * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v15 + v14))) >> 44)
             + (((268439553 * (unint64_t)(4095 * *v15)) >> 32) >> 12)
             + ((268439553 * (unint64_t)(4095 * v15[2])) >> 44)
             + ((268439553 * (unint64_t)(4095 * v40)) >> 44))
            + 8) & 0xFFF0;
      v22[1] = (4 * v42 + 8) & 0xFFF0;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      unint64_t v44 = v37 + 2;
      do
      {
        uint64_t v45 = &v38[v43];
        unsigned int v46 = (((268439553
                             * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v44 + v14 - 2))) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * *(v44 - 1))) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * v44[1])) >> 32) >> 12)
            + (((268439553
                             * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v44 + v14 + 2))) >> 32) >> 12);
        *uint64_t v45 = (4
              * (((268439553 * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v44 + v14 - 4))) >> 44)
               + (((268439553 * (unint64_t)(4095 * *(v44 - 2))) >> 32) >> 12)
               + ((268439553 * (unint64_t)(4095 * *v44)) >> 44)
               + ((268439553 * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v44 + v14))) >> 44))
              + 8) & 0xFFF0;
        v45[1] = (4 * v46 + 8) & 0xFFF0;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      unint64_t v49 = v15;
      unint64_t v50 = v22;
      if (v9)
      {
        unint64_t v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v52 = *v51;
        int v53 = v51[1];
        unint64_t v49 = v15 + 4;
        unsigned int v54 = (((268439553
                             * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * v15[1])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * v15[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * v53)) >> 32) >> 12);
        *unint64_t v22 = (4
              * (((268439553 * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v15 + v14))) >> 44)
               + (((268439553 * (unint64_t)(4095 * *v15)) >> 32) >> 12)
               + ((268439553 * (unint64_t)(4095 * v15[2])) >> 44)
               + ((268439553 * (unint64_t)(4095 * v52)) >> 44))
              + 8) & 0xFFF0;
        v22[1] = (4 * v54 + 8) & 0xFFF0;
        unint64_t v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v55 = 0;
        unsigned int v56 = v49 + 2;
        do
        {
          int v57 = &v50[v55];
          unsigned int v58 = (((268439553
                               * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v56 + v14 - 2))) >> 32) >> 12)
              + (((268439553 * (unint64_t)(4095 * *(v56 - 1))) >> 32) >> 12)
              + (((268439553 * (unint64_t)(4095 * v56[1])) >> 32) >> 12)
              + (((268439553
                               * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v56 + v14 + 2))) >> 32) >> 12);
          *int v57 = (4
                * (((268439553 * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v56 + v14 - 4))) >> 44)
                 + (((268439553 * (unint64_t)(4095 * *(v56 - 2))) >> 32) >> 12)
                 + ((268439553 * (unint64_t)(4095 * *v56)) >> 44)
                 + ((268439553 * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v56 + v14))) >> 44))
                + 8) & 0xFFF0;
          v57[1] = (4 * v58 + 8) & 0xFFF0;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 12);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      int v39 = v15[1];
      unint64_t v37 = v15 + 4;
      *unint64_t v22 = 16 * (((268439553 * (unint64_t)(4095 * *v15)) >> 32) >> 12);
      v22[1] = 16 * ((268439553 * (unint64_t)(4095 * v39)) >> 44);
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (268439553 * (unint64_t)(4095 * v37[1])) >> 44;
        _WORD *v41 = 16 * (((268439553 * (unint64_t)(4095 * *v37)) >> 32) >> 12);
        v41[1] = 16 * v42;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v22;
      if (v9)
      {
        int v48 = v15[1];
        unsigned int v46 = v15 + 4;
        *unint64_t v22 = 16 * (((268439553 * (unint64_t)(4095 * *v15)) >> 32) >> 12);
        v22[1] = 16 * ((268439553 * (unint64_t)(4095 * v48)) >> 44);
        unint64_t v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          unint64_t v51 = (268439553 * (unint64_t)(4095 * v46[1])) >> 44;
          _WORD *v50 = 16 * (((268439553 * (unint64_t)(4095 * *v46)) >> 32) >> 12);
          v50[1] = 16 * v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_sf44_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v24 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  unint64_t v26 = v8 & 1;
  if (v17 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      int v34 = v12[1];
      uint64_t v32 = v12 + 2;
      *uint64_t v16 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v12)) >> 32) >> 10) << 6)
           + 4096;
      v16[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v34)) >> 42) << 6) + 4096;
      uint64_t v33 = v16 + 2;
    }
    else
    {
      uint64_t v32 = v12;
      uint64_t v33 = v16;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        int v37 = *v32;
        int v38 = v32[1];
        v32 += 2;
        *uint64_t v33 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v37)) >> 32) >> 10) << 6)
             + 4096;
        v33[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v38)) >> 42) << 6) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      int v39 = *v32;
      int v40 = v32[1];
      *uint64_t v33 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v39)) >> 32) >> 10) << 6)
           + 4096;
      v33[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v40)) >> 32) >> 10) << 6)
             + 4096;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v17 - v27;
    do
    {
      unint64_t v43 = v12;
      unint64_t v44 = v16;
      if (v28)
      {
        int v45 = v12[1];
        unint64_t v43 = v12 + 2;
        *uint64_t v16 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v12)) >> 32) >> 10) << 6)
             + 4096;
        v16[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v45)) >> 42) << 6) + 4096;
        unint64_t v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          int v48 = *v43;
          int v49 = v43[1];
          v43 += 2;
          *unint64_t v44 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v48)) >> 32) >> 10) << 6)
               + 4096;
          v44[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v49)) >> 42) << 6) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        int v50 = *v43;
        int v51 = v43[1];
        *unint64_t v44 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v50)) >> 32) >> 10) << 6)
             + 4096;
        v44[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v51)) >> 32) >> 10) << 6)
               + 4096;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if (v28)
    {
      int v52 = *v12;
      int v53 = v12[1];
      v12 += 2;
      *uint64_t v16 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v52)) >> 32) >> 10) << 6)
           + 4096;
      v16[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v53)) >> 42) << 6) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        int v55 = *v12;
        int v56 = v12[1];
        v12 += 2;
        *uint64_t v16 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v55)) >> 32) >> 10) << 6)
             + 4096;
        v16[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v56)) >> 42) << 6) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      int v57 = *v12;
      int v58 = v12[1];
      *uint64_t v16 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v57)) >> 32) >> 10) << 6)
           + 4096;
      v16[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v58)) >> 32) >> 10) << 6)
             + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf44_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v23 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1];
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v13)) >> 32) >> 10) << 6)
           + 4096;
      v17[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v33)) >> 42) << 6) + 4096;
      uint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31;
        int v37 = v31[1];
        v31 += 2;
        *uint64_t v32 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v36)) >> 32) >> 10) << 6)
             + 4096;
        v32[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v37)) >> 42) << 6) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      int v38 = *v31;
      int v39 = v31[1];
      *uint64_t v32 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v38)) >> 32) >> 10) << 6)
           + 4096;
      v32[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v39)) >> 32) >> 10) << 6)
             + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        int v44 = v13[1];
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v13)) >> 32) >> 10) << 6)
             + 4096;
        v17[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v44)) >> 42) << 6) + 4096;
        unint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          int v47 = *v42;
          int v48 = v42[1];
          v42 += 2;
          *unint64_t v43 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v47)) >> 32) >> 10) << 6)
               + 4096;
          v43[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v48)) >> 42) << 6) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *unint64_t v43 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v49)) >> 32) >> 10) << 6)
             + 4096;
        v43[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v50)) >> 32) >> 10) << 6)
               + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      int v51 = *v13;
      int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v51)) >> 32) >> 10) << 6)
           + 4096;
      v17[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v52)) >> 42) << 6) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        int v54 = *v13;
        int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v54)) >> 32) >> 10) << 6)
             + 4096;
        v17[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v55)) >> 42) << 6) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      int v56 = *v13;
      int v57 = v13[1];
      *unint64_t v17 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v56)) >> 32) >> 10) << 6)
           + 4096;
      v17[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v57)) >> 32) >> 10) << 6)
             + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf44_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v23 + 2 * i))) >> 32) >> 10) << 6;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1];
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v13)) >> 32) >> 10) << 6;
      v17[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v33)) >> 42) << 6;
      uint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31;
        int v37 = v31[1];
        v31 += 2;
        *uint64_t v32 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v36)) >> 32) >> 10) << 6;
        v32[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v37)) >> 42) << 6;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      int v38 = *v31;
      int v39 = v31[1];
      *uint64_t v32 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v38)) >> 32) >> 10) << 6;
      v32[1] = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v39)) >> 32) >> 10) << 6;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        int v44 = v13[1];
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v13)) >> 32) >> 10) << 6;
        v17[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v44)) >> 42) << 6;
        unint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          int v47 = *v42;
          int v48 = v42[1];
          v42 += 2;
          *unint64_t v43 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v47)) >> 32) >> 10) << 6;
          v43[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v48)) >> 42) << 6;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *unint64_t v43 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v49)) >> 32) >> 10) << 6;
        v43[1] = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v50)) >> 32) >> 10) << 6;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      int v51 = *v13;
      int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v51)) >> 32) >> 10) << 6;
      v17[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v52)) >> 42) << 6;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        int v54 = *v13;
        int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v54)) >> 32) >> 10) << 6;
        v17[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v55)) >> 42) << 6;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      int v56 = *v13;
      int v57 = v13[1];
      *unint64_t v17 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v56)) >> 32) >> 10) << 6;
      v17[1] = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v57)) >> 32) >> 10) << 6;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v30 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v32 = v12 & 1;
  if (v9 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v36 = v14 + 4;
      unsigned int v38 = (((67109889 * (unint64_t)(896 * v14[3])) >> 32) >> 10)
          + (((67109889 * (unint64_t)(896 * v14[1])) >> 32) >> 10);
      _WORD *v21 = (32
            * ((((67109889 * (unint64_t)(896 * v14[2])) >> 32) >> 10)
             + (((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10))
            + 4128) & 0xFFC0;
      v21[1] = (32 * v38 + 4128) & 0xFFC0;
      int v37 = v21 + 2;
    }
    else
    {
      int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unsigned int v41 = (((67109889 * (unint64_t)(896 * v36[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v36[1])) >> 32) >> 10);
        *unint64_t v40 = (32
              * (((67109889 * (unint64_t)(896 * v36[2])) >> 42)
               + (((67109889 * (unint64_t)(896 * *v36)) >> 32) >> 10))
              + 4128) & 0xFFC0;
        v40[1] = (32 * v41 + 4128) & 0xFFC0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v9 - v33;
    do
    {
      int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v44 = v14 + 4;
        unsigned int v46 = (((67109889 * (unint64_t)(896 * v14[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v14[1])) >> 32) >> 10);
        _WORD *v21 = (32
              * (((67109889 * (unint64_t)(896 * v14[2])) >> 42)
               + (((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10))
              + 4128) & 0xFFC0;
        v21[1] = (32 * v46 + 4128) & 0xFFC0;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          unsigned int v49 = (((67109889 * (unint64_t)(896 * v44[3])) >> 32) >> 10)
              + (((67109889 * (unint64_t)(896 * v44[1])) >> 32) >> 10);
          *int v48 = (32
                * (((67109889 * (unint64_t)(896 * v44[2])) >> 42)
                 + (((67109889 * (unint64_t)(896 * *v44)) >> 32) >> 10))
                + 4128) & 0xFFC0;
          v48[1] = (32 * v49 + 4128) & 0xFFC0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if (v34)
    {
      int v50 = *v14;
      int v51 = v14[1];
      int v52 = v14[2];
      int v53 = v14[3];
      v14 += 4;
      _WORD *v21 = (32
            * ((((67109889 * (unint64_t)(896 * v52)) >> 32) >> 10)
             + (((67109889 * (unint64_t)(896 * v50)) >> 32) >> 10))
            + 4128) & 0xFFC0;
      v21[1] = (32
              * ((((67109889 * (unint64_t)(896 * v53)) >> 32) >> 10)
               + (((67109889 * (unint64_t)(896 * v51)) >> 32) >> 10))
              + 4128) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        int v55 = &v21[v54];
        unsigned int v56 = (((67109889 * (unint64_t)(896 * v14[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v14[1])) >> 32) >> 10);
        *int v55 = (32
              * (((67109889 * (unint64_t)(896 * v14[2])) >> 42)
               + (((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10))
              + 4128) & 0xFFC0;
        v55[1] = (32 * v56 + 4128) & 0xFFC0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v30 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v38 = v14[1];
      int v36 = v14 + 4;
      _WORD *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v38)) >> 42) << 6) + 4096;
      int v37 = v21 + 2;
    }
    else
    {
      int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unint64_t v41 = (67109889 * (unint64_t)(896 * v36[1])) >> 42;
        *unint64_t v40 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v36)) >> 32) >> 10) << 6)
             + 4096;
        v40[1] = ((_WORD)v41 << 6) + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v46 = v14[1];
        int v44 = v14 + 4;
        _WORD *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
             + 4096;
        v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v46)) >> 42) << 6) + 4096;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          unint64_t v49 = (67109889 * (unint64_t)(896 * v44[1])) >> 42;
          *int v48 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v44)) >> 32) >> 10) << 6)
               + 4096;
          v48[1] = ((_WORD)v49 << 6) + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = *v14;
      int v51 = v14[1];
      v14 += 4;
      _WORD *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v50)) >> 32) >> 10) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v51)) >> 42) << 6) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unint64_t v54 = (67109889 * (unint64_t)(896 * v14[1])) >> 42;
        *int v53 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
             + 4096;
        v53[1] = ((_WORD)v54 << 6) + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unsigned int v36 = (((67109889 * (unint64_t)(896 * v14[3])) >> 32) >> 10)
          + (((67109889 * (unint64_t)(896 * v14[1])) >> 32) >> 10);
      _WORD *v21 = (32
            * ((((67109889 * (unint64_t)(896 * v14[2])) >> 32) >> 10)
             + (((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10))
            + 4128) & 0xFFC0;
      v21[1] = (32 * v36 + 4128) & 0xFFC0;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = (((67109889 * (unint64_t)(896 * v34[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v34[1])) >> 32) >> 10);
        _WORD *v38 = (32
              * (((67109889 * (unint64_t)(896 * v34[2])) >> 42)
               + (((67109889 * (unint64_t)(896 * *v34)) >> 32) >> 10))
              + 4128) & 0xFFC0;
        v38[1] = (32 * v39 + 4128) & 0xFFC0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        unsigned int v44 = (((67109889 * (unint64_t)(896 * v14[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v14[1])) >> 32) >> 10);
        _WORD *v21 = (32
              * (((67109889 * (unint64_t)(896 * v14[2])) >> 42)
               + (((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10))
              + 4128) & 0xFFC0;
        v21[1] = (32 * v44 + 4128) & 0xFFC0;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = (((67109889 * (unint64_t)(896 * v42[3])) >> 32) >> 10)
              + (((67109889 * (unint64_t)(896 * v42[1])) >> 32) >> 10);
          *int v46 = (32
                * (((67109889 * (unint64_t)(896 * v42[2])) >> 42)
                 + (((67109889 * (unint64_t)(896 * *v42)) >> 32) >> 10))
                + 4128) & 0xFFC0;
          v46[1] = (32 * v47 + 4128) & 0xFFC0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      int v50 = v14[2];
      int v51 = v14[3];
      v14 += 4;
      _WORD *v21 = (32
            * ((((67109889 * (unint64_t)(896 * v50)) >> 32) >> 10)
             + (((67109889 * (unint64_t)(896 * v48)) >> 32) >> 10))
            + 4128) & 0xFFC0;
      v21[1] = (32
              * ((((67109889 * (unint64_t)(896 * v51)) >> 32) >> 10)
               + (((67109889 * (unint64_t)(896 * v49)) >> 32) >> 10))
              + 4128) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unsigned int v54 = (((67109889 * (unint64_t)(896 * v14[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v14[1])) >> 32) >> 10);
        *int v53 = (32
              * (((67109889 * (unint64_t)(896 * v14[2])) >> 42)
               + (((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10))
              + 4128) & 0xFFC0;
        v53[1] = (32 * v54 + 4128) & 0xFFC0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1];
      char v34 = v14 + 4;
      _WORD *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v36)) >> 42) << 6) + 4096;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (67109889 * (unint64_t)(896 * v34[1])) >> 42;
        _WORD *v38 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v34)) >> 32) >> 10) << 6)
             + 4096;
        v38[1] = ((_WORD)v39 << 6) + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1];
        unint64_t v42 = v14 + 4;
        _WORD *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
             + 4096;
        v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v44)) >> 42) << 6) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unint64_t v47 = (67109889 * (unint64_t)(896 * v42[1])) >> 42;
          *int v46 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v42)) >> 32) >> 10) << 6)
               + 4096;
          v46[1] = ((_WORD)v47 << 6) + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      v14 += 4;
      _WORD *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v48)) >> 32) >> 10) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v49)) >> 42) << 6) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unint64_t v52 = (67109889 * (unint64_t)(896 * v14[1])) >> 42;
        *int v51 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
             + 4096;
        v51[1] = ((_WORD)v52 << 6) + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 10) << 6;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unsigned int v36 = (((67109889 * (unint64_t)(1023 * v14[3])) >> 32) >> 10)
          + (((67109889 * (unint64_t)(1023 * v14[1])) >> 32) >> 10);
      _WORD *v21 = (32
            * (((67109889 * (unint64_t)(1023 * v14[2])) >> 42)
             + (((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10))
            + 32) & 0xFFC0;
      v21[1] = (32 * v36 + 32) & 0xFFC0;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = (((67109889 * (unint64_t)(1023 * v34[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * v34[1])) >> 32) >> 10);
        _WORD *v38 = (32
              * (((67109889 * (unint64_t)(1023 * v34[2])) >> 42)
               + (((67109889 * (unint64_t)(1023 * *v34)) >> 32) >> 10))
              + 32) & 0xFFC0;
        v38[1] = (32 * v39 + 32) & 0xFFC0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        unsigned int v44 = (((67109889 * (unint64_t)(1023 * v14[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * v14[1])) >> 32) >> 10);
        _WORD *v21 = (32
              * (((67109889 * (unint64_t)(1023 * v14[2])) >> 42)
               + (((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10))
              + 32) & 0xFFC0;
        v21[1] = (32 * v44 + 32) & 0xFFC0;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = (((67109889 * (unint64_t)(1023 * v42[3])) >> 32) >> 10)
              + (((67109889 * (unint64_t)(1023 * v42[1])) >> 32) >> 10);
          *int v46 = (32
                * (((67109889 * (unint64_t)(1023 * v42[2])) >> 42)
                 + (((67109889 * (unint64_t)(1023 * *v42)) >> 32) >> 10))
                + 32) & 0xFFC0;
          v46[1] = (32 * v47 + 32) & 0xFFC0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      int v50 = v14[2];
      int v51 = v14[3];
      v14 += 4;
      _WORD *v21 = (32
            * (((67109889 * (unint64_t)(1023 * v50)) >> 42)
             + (((67109889 * (unint64_t)(1023 * v48)) >> 32) >> 10))
            + 32) & 0xFFC0;
      v21[1] = (32
              * ((((67109889 * (unint64_t)(1023 * v51)) >> 32) >> 10)
               + (((67109889 * (unint64_t)(1023 * v49)) >> 32) >> 10))
              + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unsigned int v54 = (((67109889 * (unint64_t)(1023 * v14[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * v14[1])) >> 32) >> 10);
        *int v53 = (32
              * (((67109889 * (unint64_t)(1023 * v14[2])) >> 42)
               + (((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10))
              + 32) & 0xFFC0;
        v53[1] = (32 * v54 + 32) & 0xFFC0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 10) << 6;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1];
      char v34 = v14 + 4;
      _WORD *v21 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10) << 6;
      v21[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v36)) >> 42) << 6;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (67109889 * (unint64_t)(1023 * v34[1])) >> 42;
        _WORD *v38 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v34)) >> 32) >> 10) << 6;
        v38[1] = (_WORD)v39 << 6;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1];
        unint64_t v42 = v14 + 4;
        _WORD *v21 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10) << 6;
        v21[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v44)) >> 42) << 6;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unint64_t v47 = (67109889 * (unint64_t)(1023 * v42[1])) >> 42;
          *int v46 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v42)) >> 32) >> 10) << 6;
          v46[1] = (_WORD)v47 << 6;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      v14 += 4;
      _WORD *v21 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v48)) >> 32) >> 10) << 6;
      v21[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v49)) >> 42) << 6;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unint64_t v52 = (67109889 * (unint64_t)(1023 * v14[1])) >> 42;
        *int v51 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10) << 6;
        v51[1] = (_WORD)v52 << 6;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      unint64_t v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v40 = *v39;
      int v41 = v39[1];
      unint64_t v37 = v15 + 4;
      unsigned int v42 = (((67109889
                           * (unint64_t)(896 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 10)
          + (((67109889 * (unint64_t)(896 * v15[1])) >> 32) >> 10)
          + (((67109889 * (unint64_t)(896 * v15[3])) >> 32) >> 10)
          + (((67109889 * (unint64_t)(896 * v41)) >> 32) >> 10);
      *unint64_t v22 = (16
            * ((((67109889
                              * (unint64_t)(896 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 10)
             + (((67109889 * (unint64_t)(896 * *v15)) >> 32) >> 10)
             + ((67109889 * (unint64_t)(896 * v15[2])) >> 42)
             + ((67109889 * (unint64_t)(896 * v40)) >> 42))
            + 4128) & 0xFFC0;
      v22[1] = (16 * v42 + 4128) & 0xFFC0;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      int v44 = v37 + 2;
      do
      {
        unint64_t v45 = &v38[v43];
        unsigned int v46 = (((67109889
                             * (unint64_t)(896 * *(unsigned __int16 *)((char *)v44 + v14 - 2))) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * *(v44 - 1))) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v44[1])) >> 32) >> 10)
            + (((67109889
                             * (unint64_t)(896 * *(unsigned __int16 *)((char *)v44 + v14 + 2))) >> 32) >> 10);
        *unint64_t v45 = (16
              * (((67109889 * (unint64_t)(896 * *(unsigned __int16 *)((char *)v44 + v14 - 4))) >> 42)
               + (((67109889 * (unint64_t)(896 * *(v44 - 2))) >> 32) >> 10)
               + ((67109889 * (unint64_t)(896 * *v44)) >> 42)
               + ((67109889 * (unint64_t)(896 * *(unsigned __int16 *)((char *)v44 + v14))) >> 42))
              + 4128) & 0xFFC0;
        v45[1] = (16 * v46 + 4128) & 0xFFC0;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      int v49 = v15;
      unint64_t v50 = v22;
      if (v9)
      {
        int v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v52 = *v51;
        int v53 = v51[1];
        int v49 = v15 + 4;
        unsigned int v54 = (((67109889
                             * (unint64_t)(896 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v15[1])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v15[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v53)) >> 32) >> 10);
        *unint64_t v22 = (16
              * (((67109889 * (unint64_t)(896 * *(unsigned __int16 *)((char *)v15 + v14))) >> 42)
               + (((67109889 * (unint64_t)(896 * *v15)) >> 32) >> 10)
               + ((67109889 * (unint64_t)(896 * v15[2])) >> 42)
               + ((67109889 * (unint64_t)(896 * v52)) >> 42))
              + 4128) & 0xFFC0;
        v22[1] = (16 * v54 + 4128) & 0xFFC0;
        unint64_t v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v55 = 0;
        unsigned int v56 = v49 + 2;
        do
        {
          int v57 = &v50[v55];
          unsigned int v58 = (((67109889
                               * (unint64_t)(896 * *(unsigned __int16 *)((char *)v56 + v14 - 2))) >> 32) >> 10)
              + (((67109889 * (unint64_t)(896 * *(v56 - 1))) >> 32) >> 10)
              + (((67109889 * (unint64_t)(896 * v56[1])) >> 32) >> 10)
              + (((67109889
                               * (unint64_t)(896 * *(unsigned __int16 *)((char *)v56 + v14 + 2))) >> 32) >> 10);
          *int v57 = (16
                * (((67109889 * (unint64_t)(896 * *(unsigned __int16 *)((char *)v56 + v14 - 4))) >> 42)
                 + (((67109889 * (unint64_t)(896 * *(v56 - 2))) >> 32) >> 10)
                 + ((67109889 * (unint64_t)(896 * *v56)) >> 42)
                 + ((67109889 * (unint64_t)(896 * *(unsigned __int16 *)((char *)v56 + v14))) >> 42))
                + 4128) & 0xFFC0;
          v57[1] = (16 * v58 + 4128) & 0xFFC0;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      int v39 = v15[1];
      unint64_t v37 = v15 + 4;
      *unint64_t v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v15)) >> 32) >> 10) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v39)) >> 42) << 6) + 4096;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (67109889 * (unint64_t)(896 * v37[1])) >> 42;
        _WORD *v41 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v37)) >> 32) >> 10) << 6)
             + 4096;
        v41[1] = ((_WORD)v42 << 6) + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v22;
      if (v9)
      {
        int v48 = v15[1];
        unsigned int v46 = v15 + 4;
        *unint64_t v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v15)) >> 32) >> 10) << 6)
             + 4096;
        v22[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v48)) >> 42) << 6) + 4096;
        unint64_t v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          unint64_t v51 = (67109889 * (unint64_t)(896 * v46[1])) >> 42;
          _WORD *v50 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v46)) >> 32) >> 10) << 6)
               + 4096;
          v50[1] = ((_WORD)v51 << 6) + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 10) << 6;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      int v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v40 = *v39;
      int v41 = v39[1];
      unint64_t v37 = v15 + 4;
      unsigned int v42 = (((67109889
                           * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 10)
          + (((67109889 * (unint64_t)(1023 * v15[1])) >> 32) >> 10)
          + (((67109889 * (unint64_t)(1023 * v15[3])) >> 32) >> 10)
          + (((67109889 * (unint64_t)(1023 * v41)) >> 32) >> 10);
      *unint64_t v22 = (16
            * (((67109889 * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v15 + v14))) >> 42)
             + (((67109889 * (unint64_t)(1023 * *v15)) >> 32) >> 10)
             + ((67109889 * (unint64_t)(1023 * v15[2])) >> 42)
             + ((67109889 * (unint64_t)(1023 * v40)) >> 42))
            + 32) & 0xFFC0;
      v22[1] = (16 * v42 + 32) & 0xFFC0;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      unint64_t v44 = v37 + 2;
      do
      {
        uint64_t v45 = &v38[v43];
        unsigned int v46 = (((67109889
                             * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v44 + v14 - 2))) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * *(v44 - 1))) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * v44[1])) >> 32) >> 10)
            + (((67109889
                             * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v44 + v14 + 2))) >> 32) >> 10);
        *uint64_t v45 = (16
              * (((67109889 * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v44 + v14 - 4))) >> 42)
               + (((67109889 * (unint64_t)(1023 * *(v44 - 2))) >> 32) >> 10)
               + ((67109889 * (unint64_t)(1023 * *v44)) >> 42)
               + ((67109889 * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v44 + v14))) >> 42))
              + 32) & 0xFFC0;
        v45[1] = (16 * v46 + 32) & 0xFFC0;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      unint64_t v49 = v15;
      unint64_t v50 = v22;
      if (v9)
      {
        unint64_t v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v52 = *v51;
        int v53 = v51[1];
        unint64_t v49 = v15 + 4;
        unsigned int v54 = (((67109889
                             * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * v15[1])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * v15[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * v53)) >> 32) >> 10);
        *unint64_t v22 = (16
              * (((67109889 * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v15 + v14))) >> 42)
               + (((67109889 * (unint64_t)(1023 * *v15)) >> 32) >> 10)
               + ((67109889 * (unint64_t)(1023 * v15[2])) >> 42)
               + ((67109889 * (unint64_t)(1023 * v52)) >> 42))
              + 32) & 0xFFC0;
        v22[1] = (16 * v54 + 32) & 0xFFC0;
        unint64_t v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v55 = 0;
        unsigned int v56 = v49 + 2;
        do
        {
          int v57 = &v50[v55];
          unsigned int v58 = (((67109889
                               * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v56 + v14 - 2))) >> 32) >> 10)
              + (((67109889 * (unint64_t)(1023 * *(v56 - 1))) >> 32) >> 10)
              + (((67109889 * (unint64_t)(1023 * v56[1])) >> 32) >> 10)
              + (((67109889
                               * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v56 + v14 + 2))) >> 32) >> 10);
          *int v57 = (16
                * (((67109889 * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v56 + v14 - 4))) >> 42)
                 + (((67109889 * (unint64_t)(1023 * *(v56 - 2))) >> 32) >> 10)
                 + ((67109889 * (unint64_t)(1023 * *v56)) >> 42)
                 + ((67109889 * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v56 + v14))) >> 42))
                + 32) & 0xFFC0;
          v57[1] = (16 * v58 + 32) & 0xFFC0;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 10) << 6;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      int v39 = v15[1];
      unint64_t v37 = v15 + 4;
      *unint64_t v22 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v15)) >> 32) >> 10) << 6;
      v22[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v39)) >> 42) << 6;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (67109889 * (unint64_t)(1023 * v37[1])) >> 42;
        _WORD *v41 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v37)) >> 32) >> 10) << 6;
        v41[1] = (_WORD)v42 << 6;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v22;
      if (v9)
      {
        int v48 = v15[1];
        unsigned int v46 = v15 + 4;
        *unint64_t v22 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v15)) >> 32) >> 10) << 6;
        v22[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v48)) >> 42) << 6;
        unint64_t v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          unint64_t v51 = (67109889 * (unint64_t)(1023 * v46[1])) >> 42;
          _WORD *v50 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v46)) >> 32) >> 10) << 6;
          v50[1] = (_WORD)v51 << 6;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_sf44_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v15 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v14 + 2 * v15);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v14;
    uint64_t v22 = *a7 + *a8 * v14;
    uint64_t v23 = *a4;
    uint64_t v24 = v21 + v15;
    uint64_t v25 = v22 + v15;
    uint64_t v26 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(unsigned char *)(v24 + i) = -1;
          *(unsigned char *)(v25 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v26 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v26 += v23;
      v25 += v19;
      v24 += v20;
      ++v18;
    }
    while (v18 != v11);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v28 = v8 & 1;
  if (v11 >= v28) {
    uint64_t v29 = v8 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  char v30 = v9;
  unint64_t v31 = v9 & 1;
  if (v10 >= v31) {
    uint64_t v32 = v9 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  unint64_t v33 = v10 - v32;
  if (v8)
  {
    if (v9)
    {
      int v36 = v13[1];
      char v34 = v13 + 2;
      *uint64_t v17 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v13)) >> 32) >> 8) + 16;
      v17[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v36)) >> 32) >> 8) + 16;
      uint64_t v35 = v17 + 2;
    }
    else
    {
      char v34 = v13;
      uint64_t v35 = v17;
    }
    if (v10 == v32)
    {
      unint64_t v37 = 0;
    }
    else
    {
      unint64_t v38 = v10 - v32;
      do
      {
        int v39 = *v34;
        int v40 = v34[1];
        v34 += 2;
        *uint64_t v35 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v39)) >> 32) >> 8) + 16;
        v35[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v40)) >> 32) >> 8) + 16;
        v35 += 2;
        --v38;
      }
      while (v38);
      unint64_t v37 = v10 - v32;
    }
    if (v37 + v31 < v10)
    {
      int v41 = *v34;
      int v42 = v34[1];
      *uint64_t v35 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v41)) >> 32) >> 8) + 16;
      v35[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v42)) >> 32) >> 8) + 16;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 += v16;
  }
  if (v11 == v29)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v11 - v29;
    do
    {
      uint64_t v45 = v13;
      unsigned int v46 = v17;
      if (v30)
      {
        int v47 = v13[1];
        uint64_t v45 = v13 + 2;
        *uint64_t v17 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v13)) >> 32) >> 8) + 16;
        v17[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v47)) >> 32) >> 8) + 16;
        unsigned int v46 = v17 + 2;
      }
      if (v10 == v32)
      {
        unint64_t v48 = 0;
      }
      else
      {
        unint64_t v49 = v10 - v32;
        do
        {
          int v50 = *v45;
          int v51 = v45[1];
          v45 += 2;
          *unsigned int v46 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v50)) >> 32) >> 8) + 16;
          v46[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v51)) >> 32) >> 8) + 16;
          v46 += 2;
          --v49;
        }
        while (v49);
        unint64_t v48 = v10 - v32;
      }
      if (v48 + v31 < v10)
      {
        int v52 = *v45;
        int v53 = v45[1];
        *unsigned int v46 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v52)) >> 32) >> 8) + 16;
        v46[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v53)) >> 32) >> 8) + 16;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 += v16;
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v11)
  {
    if (v30)
    {
      int v54 = *v13;
      int v55 = v13[1];
      v13 += 2;
      *uint64_t v17 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v54)) >> 32) >> 8) + 16;
      v17[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v55)) >> 32) >> 8) + 16;
      v17 += 2;
    }
    if (v10 == v32)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v56 = v10 - v32;
      do
      {
        int v57 = *v13;
        int v58 = v13[1];
        v13 += 2;
        *uint64_t v17 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v57)) >> 32) >> 8) + 16;
        v17[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v58)) >> 32) >> 8) + 16;
        v17 += 2;
        --v56;
      }
      while (v56);
    }
    if (v33 + v31 < v10)
    {
      int v59 = *v13;
      int v60 = v13[1];
      *uint64_t v17 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v59)) >> 32) >> 8) + 16;
      v17[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v60)) >> 32) >> 8) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf44_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (unsigned char *)(a7[1] + v15 * v13 + 2 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v13 + v14;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(unsigned char *)(v21 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v22 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v17);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v24 = v8 & 1;
  if (v17 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    uint64_t v28 = v9 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v9)
    {
      int v32 = v12[1];
      char v30 = v12 + 2;
      *uint64_t v16 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v12)) >> 32) >> 8) + 16;
      v16[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v32)) >> 32) >> 8) + 16;
      unint64_t v31 = v16 + 2;
    }
    else
    {
      char v30 = v12;
      unint64_t v31 = v16;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        int v35 = *v30;
        int v36 = v30[1];
        v30 += 2;
        *unint64_t v31 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v35)) >> 32) >> 8) + 16;
        v31[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v36)) >> 32) >> 8) + 16;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      int v37 = *v30;
      int v38 = v30[1];
      *unint64_t v31 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v37)) >> 32) >> 8) + 16;
      v31[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v38)) >> 32) >> 8) + 16;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 += v15;
  }
  if (v17 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v17 - v25;
    do
    {
      int v41 = v12;
      int v42 = v16;
      if (v26)
      {
        int v43 = v12[1];
        int v41 = v12 + 2;
        *uint64_t v16 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v12)) >> 32) >> 8) + 16;
        v16[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v43)) >> 32) >> 8) + 16;
        int v42 = v16 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          int v46 = *v41;
          int v47 = v41[1];
          v41 += 2;
          *int v42 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v46)) >> 32) >> 8) + 16;
          v42[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v47)) >> 32) >> 8) + 16;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        int v48 = *v41;
        int v49 = v41[1];
        *int v42 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v48)) >> 32) >> 8) + 16;
        v42[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v49)) >> 32) >> 8) + 16;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 += v15;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v17)
  {
    if (v26)
    {
      int v50 = *v12;
      int v51 = v12[1];
      v12 += 2;
      *uint64_t v16 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v50)) >> 32) >> 8) + 16;
      v16[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v51)) >> 32) >> 8) + 16;
      v16 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        int v53 = *v12;
        int v54 = v12[1];
        v12 += 2;
        *uint64_t v16 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v53)) >> 32) >> 8) + 16;
        v16[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v54)) >> 32) >> 8) + 16;
        v16 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      int v55 = *v12;
      int v56 = v12[1];
      *uint64_t v16 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v55)) >> 32) >> 8) + 16;
      v16[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v56)) >> 32) >> 8) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf44_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (unsigned char *)(a7[1] + v16 * v15 + 2 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v15 + v14;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(unsigned char *)(v21 + i) = *(_WORD *)(v22 + 2 * i);
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v24 = v8 & 1;
  if (v11 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v26)
    {
      char v30 = v13 + 2;
      __int16 v32 = (unsigned __int16)v13[1] / 0x101u;
      *unint64_t v17 = (unsigned __int16)*v13 / 0x101u;
      v17[1] = v32;
      unint64_t v31 = v17 + 2;
    }
    else
    {
      char v30 = v13;
      unint64_t v31 = v17;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        __int16 v35 = *v30;
        __int16 v36 = v30[1];
        v30 += 2;
        *unint64_t v31 = v35;
        v31[1] = v36;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      __int16 v37 = (unsigned __int16)*v30 / 0x101u;
      __int16 v38 = (unsigned __int16)v30[1] / 0x101u;
      *unint64_t v31 = v37;
      v31[1] = v38;
    }
    uint64_t v13 = (__int16 *)((char *)v13 + v12);
    v17 += v16;
  }
  if (v11 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v11 - v25;
    do
    {
      int v41 = v13;
      int v42 = v17;
      if (v26)
      {
        int v41 = v13 + 2;
        __int16 v43 = (unsigned __int16)v13[1] / 0x101u;
        *unint64_t v17 = *v13;
        v17[1] = v43;
        int v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          __int16 v46 = *v41;
          __int16 v47 = v41[1];
          v41 += 2;
          *int v42 = v46;
          v42[1] = v47;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        __int16 v48 = (unsigned __int16)*v41 / 0x101u;
        __int16 v49 = (unsigned __int16)v41[1] / 0x101u;
        *int v42 = v48;
        v42[1] = v49;
      }
      uint64_t v13 = (__int16 *)((char *)v13 + v12);
      v17 += v16;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if (v26)
    {
      __int16 v50 = *v13;
      __int16 v51 = v13[1];
      v13 += 2;
      *unint64_t v17 = v50;
      v17[1] = v51;
      v17 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        __int16 v53 = *v13;
        __int16 v54 = v13[1];
        v13 += 2;
        *unint64_t v17 = v53;
        v17[1] = v54;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      __int16 v55 = (unsigned __int16)*v13 / 0x101u;
      __int16 v56 = (unsigned __int16)v13[1] / 0x101u;
      *unint64_t v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v19 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v9 >= *(void *)(a6 + 24)) {
    unint64_t v9 = *(void *)(a6 + 24);
  }
  if (v9)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v16;
    uint64_t v24 = *a7 + *a8 * v16;
    uint64_t v25 = *a4;
    uint64_t v26 = v23 + v15;
    uint64_t v27 = v24 + v15;
    uint64_t v28 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v26 + i) = -1;
          *(unsigned char *)(v27 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v9);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v8 & 1;
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v19 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v19 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      unsigned int v36 = ((((16777473 * (unint64_t)(224 * v14[1])) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v14[3])) >> 32) >> 8)
           + 33) >> 1;
      *uint64_t v18 = ((((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v14[2])) >> 32) >> 8)
            + 33) >> 1;
      v18[1] = v36;
      __int16 v35 = v18 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      __int16 v35 = v18;
    }
    if (v19 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        __int16 v38 = &v35[v37];
        unsigned int v39 = ((((16777473 * (unint64_t)(224 * v34[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v34[3])) >> 32) >> 8)
             + 33) >> 1;
        unsigned char *v38 = ((((16777473 * (unint64_t)(224 * *v34)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v34[2])) >> 32) >> 8)
              + 33) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v18 += v17;
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      int v42 = v14;
      __int16 v43 = v18;
      if (v32)
      {
        int v42 = v14 + 4;
        unsigned int v44 = ((((16777473 * (unint64_t)(224 * v14[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v14[3])) >> 32) >> 8)
             + 33) >> 1;
        *uint64_t v18 = ((((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v14[2])) >> 32) >> 8)
              + 33) >> 1;
        v18[1] = v44;
        __int16 v43 = v18 + 2;
      }
      if (v19 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          unsigned int v47 = ((((16777473 * (unint64_t)(224 * v42[1])) >> 32) >> 8)
               + (((16777473 * (unint64_t)(224 * v42[3])) >> 32) >> 8)
               + 33) >> 1;
          *__int16 v46 = ((((16777473 * (unint64_t)(224 * *v42)) >> 32) >> 8)
                + (((16777473 * (unint64_t)(224 * v42[2])) >> 32) >> 8)
                + 33) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      int v50 = v14[2];
      int v51 = v14[3];
      v14 += 4;
      *uint64_t v18 = ((((16777473 * (unint64_t)(224 * v48)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v50)) >> 32) >> 8)
            + 33) >> 1;
      v18[1] = ((((16777473 * (unint64_t)(224 * v49)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v51)) >> 32) >> 8)
              + 33) >> 1;
      v18 += 2;
    }
    if (v19 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        __int16 v53 = &v18[v52];
        unsigned int v54 = ((((16777473 * (unint64_t)(224 * v14[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v14[3])) >> 32) >> 8)
             + 33) >> 1;
        *__int16 v53 = ((((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v14[2])) >> 32) >> 8)
              + 33) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v19 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v16;
    uint64_t v24 = *a7 + *a8 * v16;
    uint64_t v25 = *a4;
    uint64_t v26 = v23 + v15;
    uint64_t v27 = v24 + v15;
    uint64_t v28 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v26 + i) = -1;
          *(unsigned char *)(v27 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v19 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v19 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1];
      unint64_t v34 = v14 + 4;
      *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v36)) >> 32) >> 8) + 16;
      __int16 v35 = v18 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      __int16 v35 = v18;
    }
    if (v19 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        __int16 v38 = &v35[v37];
        unint64_t v39 = (16777473 * (unint64_t)(224 * v34[1])) >> 40;
        unsigned char *v38 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v34)) >> 32) >> 8) + 16;
        v38[1] = v39 + 16;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v18 += v17;
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      int v42 = v14;
      __int16 v43 = v18;
      if (v32)
      {
        int v44 = v14[1];
        int v42 = v14 + 4;
        *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v44)) >> 32) >> 8) + 16;
        __int16 v43 = v18 + 2;
      }
      if (v19 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          unint64_t v47 = (16777473 * (unint64_t)(224 * v42[1])) >> 40;
          *__int16 v46 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v42)) >> 32) >> 8) + 16;
          v46[1] = v47 + 16;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      v14 += 4;
      *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v48)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v49)) >> 32) >> 8) + 16;
      v18 += 2;
    }
    if (v19 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v18[v50];
        unint64_t v52 = (16777473 * (unint64_t)(224 * v14[1])) >> 40;
        *int v51 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v51[1] = v52 + 16;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v27 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v9);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v8 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v9 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v8;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      unint64_t v33 = v14 + 4;
      unsigned int v35 = ((((16777473 * (unint64_t)(224 * v14[1])) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v14[3])) >> 32) >> 8)
           + 33) >> 1;
      *uint64_t v20 = ((((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v14[2])) >> 32) >> 8)
            + 33) >> 1;
      v20[1] = v35;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        unsigned int v38 = ((((16777473 * (unint64_t)(224 * v33[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v33[3])) >> 32) >> 8)
             + 33) >> 1;
        *unint64_t v37 = ((((16777473 * (unint64_t)(224 * *v33)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v33[2])) >> 32) >> 8)
              + 33) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v9 - v30;
    do
    {
      uint64_t v41 = v14;
      int v42 = v20;
      if (v31)
      {
        uint64_t v41 = v14 + 4;
        unsigned int v43 = ((((16777473 * (unint64_t)(224 * v14[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v14[3])) >> 32) >> 8)
             + 33) >> 1;
        *uint64_t v20 = ((((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v14[2])) >> 32) >> 8)
              + 33) >> 1;
        v20[1] = v43;
        int v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          unsigned int v46 = ((((16777473 * (unint64_t)(224 * v41[1])) >> 32) >> 8)
               + (((16777473 * (unint64_t)(224 * v41[3])) >> 32) >> 8)
               + 33) >> 1;
          *unint64_t v45 = ((((16777473 * (unint64_t)(224 * *v41)) >> 32) >> 8)
                + (((16777473 * (unint64_t)(224 * v41[2])) >> 32) >> 8)
                + 33) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v9)
  {
    if (v31)
    {
      int v47 = *v14;
      int v48 = v14[1];
      int v49 = v14[2];
      int v50 = v14[3];
      v14 += 4;
      *uint64_t v20 = ((((16777473 * (unint64_t)(224 * v47)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v49)) >> 32) >> 8)
            + 33) >> 1;
      v20[1] = ((((16777473 * (unint64_t)(224 * v48)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v50)) >> 32) >> 8)
              + 33) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v51 = 0;
      do
      {
        unint64_t v52 = &v20[v51];
        unsigned int v53 = ((((16777473 * (unint64_t)(224 * v14[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v14[3])) >> 32) >> 8)
             + 33) >> 1;
        *unint64_t v52 = ((((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v14[2])) >> 32) >> 8)
              + 33) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v27 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      int v35 = v14[1];
      unint64_t v33 = v14 + 4;
      *uint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
      v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v35)) >> 32) >> 8) + 16;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        unint64_t v38 = (16777473 * (unint64_t)(224 * v33[1])) >> 40;
        *unint64_t v37 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v33)) >> 32) >> 8) + 16;
        v37[1] = v38 + 16;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v30;
    do
    {
      uint64_t v41 = v14;
      int v42 = v20;
      if (v31)
      {
        int v43 = v14[1];
        uint64_t v41 = v14 + 4;
        *uint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v43)) >> 32) >> 8) + 16;
        int v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          unint64_t v46 = (16777473 * (unint64_t)(224 * v41[1])) >> 40;
          *unint64_t v45 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v41)) >> 32) >> 8) + 16;
          v45[1] = v46 + 16;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if (v31)
    {
      int v47 = *v14;
      int v48 = v14[1];
      v14 += 4;
      *uint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v47)) >> 32) >> 8) + 16;
      v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v48)) >> 32) >> 8) + 16;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v49 = 0;
      do
      {
        int v50 = &v20[v49];
        unint64_t v51 = (16777473 * (unint64_t)(224 * v14[1])) >> 40;
        unsigned char *v50 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v50[1] = v51 + 16;
        v49 += 2;
        v14 += 4;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = *(_WORD *)(v27 + 2 * i);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      unint64_t v33 = v14 + 4;
      unsigned int v35 = (v14[1] / 0x101u + v14[3] / 0x101u + 1) >> 1;
      *uint64_t v20 = (*v14 / 0x101u + v14[2] / 0x101u + 1) >> 1;
      v20[1] = v35;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        unsigned int v38 = (v33[1] / 0x101u + v33[3] / 0x101u + 1) >> 1;
        *unint64_t v37 = (*v33 / 0x101u + v33[2] / 0x101u + 1) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v30;
    do
    {
      uint64_t v41 = v14;
      int v42 = v20;
      if (v31)
      {
        uint64_t v41 = v14 + 4;
        unsigned int v43 = (v14[1] / 0x101u + v14[3] / 0x101u + 1) >> 1;
        *uint64_t v20 = (*v14 / 0x101u + v14[2] / 0x101u + 1) >> 1;
        v20[1] = v43;
        int v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          unsigned int v46 = (v41[1] / 0x101u + v41[3] / 0x101u + 1) >> 1;
          *unint64_t v45 = (*v41 / 0x101u + v41[2] / 0x101u + 1) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if (v31)
    {
      int v47 = *v14;
      int v48 = v14[1];
      int v49 = v14[2];
      int v50 = v14[3];
      v14 += 4;
      *uint64_t v20 = (((65281 * v47) >> 24) + ((65281 * v49) >> 24) + 1) >> 1;
      v20[1] = (((65281 * v48) >> 24) + ((65281 * v50) >> 24) + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v51 = 0;
      do
      {
        unint64_t v52 = &v20[v51];
        unsigned int v53 = (v14[1] / 0x101u + v14[3] / 0x101u + 1) >> 1;
        *unint64_t v52 = (*v14 / 0x101u + v14[2] / 0x101u + 1) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = *(_WORD *)(v27 + 2 * i);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      unint64_t v33 = v14 + 4;
      __int16 v35 = v14[1] / 0x101u;
      *uint64_t v20 = *v14 / 0x101u;
      v20[1] = v35;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        __int16 v38 = v33[1] / 0x101u;
        *unint64_t v37 = *v33;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v30;
    do
    {
      uint64_t v41 = v14;
      int v42 = v20;
      if (v31)
      {
        uint64_t v41 = v14 + 4;
        __int16 v43 = v14[1] / 0x101u;
        *uint64_t v20 = *v14;
        v20[1] = v43;
        int v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          __int16 v46 = v41[1] / 0x101u;
          *unint64_t v45 = *v41;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if (v31)
    {
      __int16 v47 = *v14;
      __int16 v48 = v14[1];
      v14 += 4;
      *uint64_t v20 = v47;
      v20[1] = v48;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v49 = 0;
      do
      {
        int v50 = &v20[v49];
        __int16 v51 = v14[1] / 0x101u;
        unsigned char *v50 = *v14;
        v50[1] = v51;
        v49 += 2;
        v14 += 4;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    if (v13 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v27 + v30;
    uint64_t v32 = a7[2] + v29 * v18 + v16;
    uint64_t v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(unsigned char *)(v32 + i) = -1;
          *(unsigned char *)(v33 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v31 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      unint64_t v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v40 = *v39;
      int v41 = v39[1];
      unint64_t v37 = v15 + 4;
      unsigned int v42 = ((((16777473 * (unint64_t)(224 * v15[1])) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v15[3])) >> 32) >> 8)
           + (((16777473
                            * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v41)) >> 32) >> 8)
           + 66) >> 2;
      unsigned char *v21 = ((((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v15[2])) >> 32) >> 8)
            + (((16777473
                             * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v40)) >> 32) >> 8)
            + 66) >> 2;
      v21[1] = v42;
      __int16 v38 = v21 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      __int16 v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v43 = 0;
      unint64_t v44 = v37 + 2;
      do
      {
        unint64_t v45 = &v38[v43];
        unsigned int v46 = ((((16777473 * (unint64_t)(224 * *(v44 - 1))) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v44[1])) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v44 + v14 - 2))) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v44 + v14 + 2))) >> 32) >> 8)
             + 66) >> 2;
        *unint64_t v45 = ((((16777473 * (unint64_t)(224 * *(v44 - 2))) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * *v44)) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v44 + v14 - 4))) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v44 + v14))) >> 32) >> 8)
              + 66) >> 2;
        v45[1] = v46;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v24 - v35;
    do
    {
      unint64_t v49 = v15;
      int v50 = v21;
      if (v9)
      {
        __int16 v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v52 = *v51;
        int v53 = v51[1];
        unint64_t v49 = v15 + 4;
        unsigned int v54 = ((((16777473 * (unint64_t)(224 * v15[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v15[3])) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v53)) >> 32) >> 8)
             + 66) >> 2;
        unsigned char *v21 = ((((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v15[2])) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v52)) >> 32) >> 8)
              + 66) >> 2;
        v21[1] = v54;
        int v50 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v55 = 0;
        __int16 v56 = v49 + 2;
        do
        {
          int v57 = &v50[v55];
          unsigned int v58 = ((((16777473 * (unint64_t)(224 * *(v56 - 1))) >> 32) >> 8)
               + (((16777473 * (unint64_t)(224 * v56[1])) >> 32) >> 8)
               + (((16777473
                                * (unint64_t)(224 * *(unsigned __int16 *)((char *)v56 + v14 - 2))) >> 32) >> 8)
               + (((16777473
                                * (unint64_t)(224 * *(unsigned __int16 *)((char *)v56 + v14 + 2))) >> 32) >> 8)
               + 66) >> 2;
          *int v57 = ((((16777473 * (unint64_t)(224 * *(v56 - 2))) >> 32) >> 8)
                + (((16777473 * (unint64_t)(224 * *v56)) >> 32) >> 8)
                + (((16777473
                                 * (unint64_t)(224 * *(unsigned __int16 *)((char *)v56 + v14 - 4))) >> 32) >> 8)
                + (((16777473
                                 * (unint64_t)(224 * *(unsigned __int16 *)((char *)v56 + v14))) >> 32) >> 8)
                + 66) >> 2;
          v57[1] = v58;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      v21 += v20;
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    if (v13 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v27 + v30;
    uint64_t v32 = a7[2] + v29 * v18 + v16;
    uint64_t v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(unsigned char *)(v32 + i) = -1;
          *(unsigned char *)(v33 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v31 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      int v39 = v15[1];
      unint64_t v37 = v15 + 4;
      unsigned char *v21 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8) + 16;
      v21[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v39)) >> 32) >> 8) + 16;
      __int16 v38 = v21 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      __int16 v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (16777473 * (unint64_t)(224 * v37[1])) >> 40;
        unsigned char *v41 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v37)) >> 32) >> 8) + 16;
        v41[1] = v42 + 16;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v24 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v21;
      if (v9)
      {
        int v48 = v15[1];
        unsigned int v46 = v15 + 4;
        unsigned char *v21 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8) + 16;
        v21[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v48)) >> 32) >> 8) + 16;
        unint64_t v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          int v50 = &v47[v49];
          unint64_t v51 = (16777473 * (unint64_t)(224 * v46[1])) >> 40;
          unsigned char *v50 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v46)) >> 32) >> 8) + 16;
          v50[1] = v51 + 16;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      v21 += v20;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v29 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v36 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v37 = *v36;
      int v38 = v36[1];
      unint64_t v34 = v15 + 4;
      unsigned int v39 = ((((16777473 * (unint64_t)(224 * v15[1])) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v15[3])) >> 32) >> 8)
           + (((16777473
                            * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v38)) >> 32) >> 8)
           + 66) >> 2;
      unsigned char *v21 = ((((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v15[2])) >> 32) >> 8)
            + (((16777473
                             * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v37)) >> 32) >> 8)
            + 66) >> 2;
      v21[1] = v39;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v40 = 0;
      int v41 = v34 + 2;
      do
      {
        unint64_t v42 = &v35[v40];
        unsigned int v43 = ((((16777473 * (unint64_t)(224 * *(v41 - 1))) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v41[1])) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v41 + v14 - 2))) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v41 + v14 + 2))) >> 32) >> 8)
             + 66) >> 2;
        *unint64_t v42 = ((((16777473 * (unint64_t)(224 * *(v41 - 2))) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * *v41)) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v41 + v14 - 4))) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v41 + v14))) >> 32) >> 8)
              + 66) >> 2;
        v42[1] = v43;
        v40 += 2;
        v41 += 4;
      }
      while (v40 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v24 - v32;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v21;
      if (v8)
      {
        int v48 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v49 = *v48;
        int v50 = v48[1];
        unsigned int v46 = v15 + 4;
        unsigned int v51 = ((((16777473 * (unint64_t)(224 * v15[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v15[3])) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v50)) >> 32) >> 8)
             + 66) >> 2;
        unsigned char *v21 = ((((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v15[2])) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v49)) >> 32) >> 8)
              + 66) >> 2;
        v21[1] = v51;
        unint64_t v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v52 = 0;
        int v53 = v46 + 2;
        do
        {
          unsigned int v54 = &v47[v52];
          unsigned int v55 = ((((16777473 * (unint64_t)(224 * *(v53 - 1))) >> 32) >> 8)
               + (((16777473 * (unint64_t)(224 * v53[1])) >> 32) >> 8)
               + (((16777473
                                * (unint64_t)(224 * *(unsigned __int16 *)((char *)v53 + v14 - 2))) >> 32) >> 8)
               + (((16777473
                                * (unint64_t)(224 * *(unsigned __int16 *)((char *)v53 + v14 + 2))) >> 32) >> 8)
               + 66) >> 2;
          *unsigned int v54 = ((((16777473 * (unint64_t)(224 * *(v53 - 2))) >> 32) >> 8)
                + (((16777473 * (unint64_t)(224 * *v53)) >> 32) >> 8)
                + (((16777473
                                 * (unint64_t)(224 * *(unsigned __int16 *)((char *)v53 + v14 - 4))) >> 32) >> 8)
                + (((16777473
                                 * (unint64_t)(224 * *(unsigned __int16 *)((char *)v53 + v14))) >> 32) >> 8)
                + 66) >> 2;
          v54[1] = v55;
          v52 += 2;
          v53 += 4;
        }
        while (v52 < v33);
      }
      v15 += v14;
      v21 += v20;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v29 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      int v36 = v15[1];
      unint64_t v34 = v15 + 4;
      unsigned char *v21 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8) + 16;
      v21[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v36)) >> 32) >> 8) + 16;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (16777473 * (unint64_t)(224 * v34[1])) >> 40;
        unsigned char *v38 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v34)) >> 32) >> 8) + 16;
        v38[1] = v39 + 16;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v40 = 0;
    unint64_t v41 = v24 - v32;
    uint64_t v42 = 2 * v14;
    do
    {
      unsigned int v43 = v15;
      unint64_t v44 = v21;
      if (v8)
      {
        int v45 = v15[1];
        unsigned int v43 = v15 + 4;
        unsigned char *v21 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8) + 16;
        v21[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v45)) >> 32) >> 8) + 16;
        unint64_t v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          unint64_t v47 = &v44[v46];
          unint64_t v48 = (16777473 * (unint64_t)(224 * v43[1])) >> 40;
          unsigned char *v47 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v43)) >> 32) >> 8) + 16;
          v47[1] = v48 + 16;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v33);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v42);
      v21 += v20;
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = *(_WORD *)(v29 + 2 * i);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      int v36 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v37 = *v36;
      int v38 = v36[1];
      unint64_t v34 = v15 + 4;
      unsigned int v39 = (v15[1] / 0x101u
           + *(unsigned __int16 *)((char *)v15 + v14 + 2) / 0x101u
           + v15[3] / 0x101u
           + ((65281 * v38) >> 24)
           + 2) >> 2;
      unsigned char *v21 = (*v15 / 0x101u
            + *(unsigned __int16 *)((char *)v15 + v14) / 0x101u
            + v15[2] / 0x101u
            + ((65281 * v37) >> 24)
            + 2) >> 2;
      v21[1] = v39;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v40 = 0;
      unint64_t v41 = v34 + 2;
      do
      {
        uint64_t v42 = &v35[v40];
        unsigned int v43 = (*(v41 - 1) / 0x101u
             + *(unsigned __int16 *)((char *)v41 + v14 - 2) / 0x101u
             + v41[1] / 0x101u
             + *(unsigned __int16 *)((char *)v41 + v14 + 2) / 0x101u
             + 2) >> 2;
        *uint64_t v42 = (*(v41 - 2) / 0x101u
              + *(unsigned __int16 *)((char *)v41 + v14 - 4) / 0x101u
              + *v41 / 0x101u
              + *(unsigned __int16 *)((char *)v41 + v14) / 0x101u
              + 2) >> 2;
        v42[1] = v43;
        v40 += 2;
        v41 += 4;
      }
      while (v40 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v24 - v32;
    do
    {
      unint64_t v46 = v15;
      unint64_t v47 = v21;
      if (v8)
      {
        unint64_t v48 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v49 = *v48;
        int v50 = v48[1];
        unint64_t v46 = v15 + 4;
        unsigned int v51 = (v15[1] / 0x101u
             + *(unsigned __int16 *)((char *)v15 + v14 + 2) / 0x101u
             + v15[3] / 0x101u
             + ((65281 * v50) >> 24)
             + 2) >> 2;
        unsigned char *v21 = (*v15 / 0x101u
              + *(unsigned __int16 *)((char *)v15 + v14) / 0x101u
              + v15[2] / 0x101u
              + ((65281 * v49) >> 24)
              + 2) >> 2;
        v21[1] = v51;
        unint64_t v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v52 = 0;
        int v53 = v46 + 2;
        do
        {
          unsigned int v54 = &v47[v52];
          unsigned int v55 = (*(v53 - 1) / 0x101u
               + *(unsigned __int16 *)((char *)v53 + v14 - 2) / 0x101u
               + v53[1] / 0x101u
               + *(unsigned __int16 *)((char *)v53 + v14 + 2) / 0x101u
               + 2) >> 2;
          *unsigned int v54 = (*(v53 - 2) / 0x101u
                + *(unsigned __int16 *)((char *)v53 + v14 - 4) / 0x101u
                + *v53 / 0x101u
                + *(unsigned __int16 *)((char *)v53 + v14) / 0x101u
                + 2) >> 2;
          v54[1] = v55;
          v52 += 2;
          v53 += 4;
        }
        while (v52 < v33);
      }
      v15 += v14;
      v21 += v20;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (_WORD *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = *(_WORD *)(v29 + 2 * i);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v34 = v15 + 4;
      __int16 v36 = v15[1] / 0x101u;
      unsigned char *v21 = *v15 / 0x101u;
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        __int16 v39 = v34[1] / 0x101u;
        unsigned char *v38 = *v34;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v40 = 0;
    unint64_t v41 = v24 - v32;
    uint64_t v42 = 2 * v14;
    do
    {
      unsigned int v43 = v15;
      unint64_t v44 = v21;
      if (v8)
      {
        unsigned int v43 = v15 + 4;
        __int16 v45 = v15[1] / 0x101u;
        unsigned char *v21 = *v15;
        v21[1] = v45;
        unint64_t v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          unint64_t v47 = &v44[v46];
          __int16 v48 = v43[1] / 0x101u;
          unsigned char *v47 = *v43;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v33);
      }
      unint64_t v15 = (_WORD *)((char *)v15 + v42);
      v21 += v20;
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * v11;
    if (v13 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    unint64_t v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v33 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v40 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v41 = *v40;
      int v42 = v40[1];
      unint64_t v37 = v15 + 4;
      unsigned int v43 = ((((16777473 * (unint64_t)(224 * v15[1])) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v15[3])) >> 32) >> 8)
           + (((16777473
                            * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v42)) >> 32) >> 8)
           + 66) >> 2;
      *unint64_t v22 = ((((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v15[2])) >> 32) >> 8)
            + (((16777473
                             * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v41)) >> 32) >> 8)
            + 66) >> 2;
      int v38 = v22 + 1;
      *unint64_t v23 = v43;
      __int16 v39 = v23 + 1;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
      __int16 v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v44 = 0;
      __int16 v45 = v37 + 2;
      do
      {
        unsigned int v46 = (((16777473 * (unint64_t)(224 * *(v45 - 1))) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v45[1])) >> 32) >> 8)
            + (((16777473
                             * (unint64_t)(224 * *(unsigned __int16 *)((char *)v45 + v14 - 2))) >> 32) >> 8)
            + (((16777473
                             * (unint64_t)(224 * *(unsigned __int16 *)((char *)v45 + v14 + 2))) >> 32) >> 8)
            + 66;
        *v38++ = ((((16777473 * (unint64_t)(224 * *(v45 - 2))) >> 32) >> 8)
                + (((16777473 * (unint64_t)(224 * *v45)) >> 32) >> 8)
                + (((16777473
                                 * (unint64_t)(224 * *(unsigned __int16 *)((char *)v45 + v14 - 4))) >> 32) >> 8)
                + (((16777473
                                 * (unint64_t)(224 * *(unsigned __int16 *)((char *)v45 + v14))) >> 32) >> 8)
                + 66) >> 2;
        *v39++ = v46 >> 2;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v36);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      int v49 = v15;
      int v50 = v22;
      unsigned int v51 = v23;
      if (v8)
      {
        unint64_t v52 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v53 = *v52;
        int v54 = v52[1];
        int v49 = v15 + 4;
        unsigned int v55 = ((((16777473 * (unint64_t)(224 * v15[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v15[3])) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v54)) >> 32) >> 8)
             + 66) >> 2;
        *unint64_t v22 = ((((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v15[2])) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v53)) >> 32) >> 8)
              + 66) >> 2;
        int v50 = v22 + 1;
        *unint64_t v23 = v55;
        unsigned int v51 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v56 = 0;
        int v57 = v49 + 2;
        do
        {
          unsigned int v58 = (((16777473 * (unint64_t)(224 * *(v57 - 1))) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v57[1])) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v57 + v14 - 2))) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v57 + v14 + 2))) >> 32) >> 8)
              + 66;
          *v50++ = ((((16777473 * (unint64_t)(224 * *(v57 - 2))) >> 32) >> 8)
                  + (((16777473 * (unint64_t)(224 * *v57)) >> 32) >> 8)
                  + (((16777473
                                   * (unint64_t)(224 * *(unsigned __int16 *)((char *)v57 + v14 - 4))) >> 32) >> 8)
                  + (((16777473
                                   * (unint64_t)(224 * *(unsigned __int16 *)((char *)v57 + v14))) >> 32) >> 8)
                  + 66) >> 2;
          *v51++ = v58 >> 2;
          v56 += 2;
          v57 += 4;
        }
        while (v56 < v36);
      }
      v15 += v14;
      v22 += v20;
      v23 += v21;
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * v11;
    if (v13 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    unint64_t v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v33 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      int v40 = v15[1];
      unint64_t v37 = v15 + 4;
      *unint64_t v22 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8) + 16;
      int v38 = v22 + 1;
      *unint64_t v23 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v40)) >> 32) >> 8) + 16;
      __int16 v39 = v23 + 1;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
      __int16 v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unint64_t v42 = (16777473 * (unint64_t)(224 * v37[1])) >> 40;
        *v38++ = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v37)) >> 32) >> 8) + 16;
        *v39++ = v42 + 16;
        v41 += 2;
        v37 += 4;
      }
      while (v41 < v36);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v22;
      unint64_t v48 = v23;
      if (v8)
      {
        unsigned int v46 = v15 + 4;
        unint64_t v49 = (16777473 * (unint64_t)(224 * v15[1])) >> 40;
        *unint64_t v22 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8) + 16;
        unint64_t v47 = v22 + 1;
        *unint64_t v23 = v49 + 16;
        unint64_t v48 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v50 = 0;
        do
        {
          unint64_t v51 = (16777473 * (unint64_t)(224 * v46[1])) >> 40;
          *v47++ = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v46)) >> 32) >> 8) + 16;
          *v48++ = v51 + 16;
          v50 += 2;
          v46 += 4;
        }
        while (v50 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 += v20;
      v23 += v21;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * v11;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    unint64_t v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v34 + i) = *(_WORD *)(v33 + 2 * i);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v41 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v42 = *v41;
      int v43 = v41[1];
      int v38 = v15 + 4;
      unsigned int v44 = (v15[1] / 0x101u
           + *(unsigned __int16 *)((char *)v15 + v14 + 2) / 0x101u
           + v15[3] / 0x101u
           + ((65281 * v43) >> 24)
           + 2) >> 2;
      *unint64_t v22 = (*v15 / 0x101u
            + *(unsigned __int16 *)((char *)v15 + v14) / 0x101u
            + v15[2] / 0x101u
            + ((65281 * v42) >> 24)
            + 2) >> 2;
      __int16 v39 = v22 + 1;
      *unint64_t v23 = v44;
      int v40 = v23 + 1;
    }
    else
    {
      int v38 = v15;
      __int16 v39 = v22;
      int v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v45 = 0;
      unsigned int v46 = v38 + 2;
      do
      {
        unsigned int v47 = *(v46 - 1) / 0x101u
            + *(unsigned __int16 *)((char *)v46 + v14 - 2) / 0x101u
            + v46[1] / 0x101u
            + *(unsigned __int16 *)((char *)v46 + v14 + 2) / 0x101u
            + 2;
        *v39++ = (*(v46 - 2) / 0x101u
                + *(unsigned __int16 *)((char *)v46 + v14 - 4) / 0x101u
                + *v46 / 0x101u
                + *(unsigned __int16 *)((char *)v46 + v14) / 0x101u
                + 2) >> 2;
        *v40++ = v47 >> 2;
        v45 += 2;
        v46 += 4;
      }
      while (v45 < v37);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v26 - v36;
    do
    {
      unint64_t v50 = v15;
      unint64_t v51 = v22;
      unint64_t v52 = v23;
      if (v8)
      {
        int v53 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v54 = *v53;
        int v55 = v53[1];
        unint64_t v50 = v15 + 4;
        unsigned int v56 = (v15[1] / 0x101u
             + *(unsigned __int16 *)((char *)v15 + v14 + 2) / 0x101u
             + v15[3] / 0x101u
             + ((65281 * v55) >> 24)
             + 2) >> 2;
        *unint64_t v22 = (*v15 / 0x101u
              + *(unsigned __int16 *)((char *)v15 + v14) / 0x101u
              + v15[2] / 0x101u
              + ((65281 * v54) >> 24)
              + 2) >> 2;
        unint64_t v51 = v22 + 1;
        *unint64_t v23 = v56;
        unint64_t v52 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v57 = 0;
        unsigned int v58 = v50 + 2;
        do
        {
          unsigned int v59 = *(v58 - 1) / 0x101u
              + *(unsigned __int16 *)((char *)v58 + v14 - 2) / 0x101u
              + v58[1] / 0x101u
              + *(unsigned __int16 *)((char *)v58 + v14 + 2) / 0x101u
              + 2;
          *v51++ = (*(v58 - 2) / 0x101u
                  + *(unsigned __int16 *)((char *)v58 + v14 - 4) / 0x101u
                  + *v58 / 0x101u
                  + *(unsigned __int16 *)((char *)v58 + v14) / 0x101u
                  + 2) >> 2;
          *v52++ = v59 >> 2;
          v57 += 2;
          v58 += 4;
        }
        while (v57 < v37);
      }
      v15 += v14;
      v22 += v20;
      v23 += v21;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (_WORD *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * v11;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    unint64_t v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v34 + i) = *(_WORD *)(v33 + 2 * i);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      int v38 = v15 + 4;
      __int16 v41 = v15[1] / 0x101u;
      *unint64_t v22 = *v15 / 0x101u;
      __int16 v39 = v22 + 1;
      *unint64_t v23 = v41;
      int v40 = v23 + 1;
    }
    else
    {
      int v38 = v15;
      __int16 v39 = v22;
      int v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v42 = 0;
      do
      {
        __int16 v43 = v38[1];
        *v39++ = *v38;
        *v40++ = v43;
        v42 += 2;
        v38 += 4;
      }
      while (v42 < v37);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v36;
    uint64_t v46 = 2 * v14;
    do
    {
      unsigned int v47 = v15;
      unint64_t v48 = v22;
      unint64_t v49 = v23;
      if (v8)
      {
        unsigned int v47 = v15 + 4;
        __int16 v50 = v15[1] / 0x101u;
        *unint64_t v22 = *v15;
        unint64_t v48 = v22 + 1;
        *unint64_t v23 = v50;
        unint64_t v49 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v51 = 0;
        do
        {
          __int16 v52 = v47[1];
          *v48++ = *v47;
          *v49++ = v52;
          v51 += 2;
          v47 += 4;
        }
        while (v51 < v37);
      }
      unint64_t v15 = (_WORD *)((char *)v15 + v46);
      v22 += v20;
      v23 += v21;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_Copy_s2as_y416(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2]) {
    unint64_t v9 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v10 = a6[3];
  }
  else {
    uint64_t v10 = a2[3];
  }
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v13 = a4[1];
    uint64_t v12 = a4[2];
    uint64_t v14 = *a4;
    uint64_t v15 = *a8;
    uint64_t v16 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v17 = a2[5];
    uint64_t v18 = *a3;
    uint64_t v19 = a3[1] + v13 * v17;
    uint64_t v20 = a3[2] + v12 * v17;
    uint64_t v21 = v18 + *a4 * v17;
    unint64_t v22 = (__int16 *)(v19 + 2 * v8);
    uint64_t v23 = v20 + 2 * v8;
    uint64_t v24 = v21 + 2 * v8;
    do
    {
      if (v9)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        __int16 v27 = 0;
        __int16 v28 = 0;
        uint64_t v29 = v22;
        do
        {
          if ((v26 & 1) == 0)
          {
            __int16 v28 = *v29;
            __int16 v27 = v29[1];
            v29 += 2;
          }
          __int16 v30 = *(_WORD *)(v24 + 2 * v26);
          uint64_t v31 = (_WORD *)(v16 + v25);
          *uint64_t v31 = *(_WORD *)(v23 + 2 * v26);
          v31[1] = v30;
          v31[2] = v28;
          v31[3] = v27;
          ++v26;
          v25 += 8;
        }
        while (v9 != v26);
      }
      v24 += v14;
      v16 += v15;
      unint64_t v22 = (__int16 *)((char *)v22 + v13);
      v23 += v12;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_s2as_y408(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2]) {
    unint64_t v9 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v10 = a6[3];
  }
  else {
    uint64_t v10 = a2[3];
  }
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v13 = a4[1];
    uint64_t v12 = a4[2];
    uint64_t v14 = *a4;
    uint64_t v15 = *a8;
    uint64_t v16 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v17 = a2[5];
    uint64_t v18 = *a3;
    uint64_t v19 = a3[1] + v13 * v17;
    uint64_t v20 = a3[2] + v12 * v17;
    uint64_t v21 = v18 + *a4 * v17;
    uint64_t v22 = v19 + 2 * v8;
    uint64_t v23 = v20 + 2 * v8;
    uint64_t v24 = v21 + 2 * v8;
    do
    {
      if (v9)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        char v27 = 0;
        char v28 = 0;
        uint64_t v29 = v22;
        do
        {
          if ((v26 & 1) == 0)
          {
            char v28 = *(unsigned char *)(v29 + 1);
            char v27 = *(unsigned char *)(v29 + 3);
            v29 += 4;
          }
          __int16 v30 = (unsigned char *)(v16 + v25);
          char v31 = *(unsigned char *)(v24 + 2 * v26 + 1);
          *__int16 v30 = *(_WORD *)(v23 + 2 * v26);
          v30[1] = v31;
          v30[2] = v28;
          v30[3] = v27;
          ++v26;
          v25 += 4;
        }
        while (v9 != v26);
      }
      v24 += v14;
      v16 += v15;
      v22 += v13;
      v23 += v12;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_sv22_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a8;
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    unint64_t v18 = a3[1] + v14 * v17 + ((2 * v9) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (__int16 *)(v18 + 2 * i);
          uint64_t v23 = (__int16 *)(v19 + 2 * i);
          __int16 v24 = *v22;
          LOWORD(v22) = v22[1];
          __int16 v25 = *v23;
          LOWORD(v23) = v23[1];
          uint64_t v26 = (_WORD *)(v16 + v20);
          *uint64_t v26 = v24;
          v26[1] = v25;
          v26[2] = (_WORD)v22;
          v26[3] = (_WORD)v23;
          v20 += 8;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_sv22_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a8;
    uint64_t v16 = (unsigned char *)(*a7 + *a8 * *(void *)(a6 + 40) + v10);
    uint64_t v17 = *(void *)(a2 + 40);
    unint64_t v18 = a3[1] + v14 * v17 + ((2 * v9) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        unint64_t v20 = 0;
        uint64_t v21 = v16;
        do
        {
          unint64_t v22 = v18 + 2 * v20;
          uint64_t v23 = v19 + 2 * v20;
          char v24 = *(unsigned char *)(v22 + 1);
          LOBYTE(v22) = *(unsigned char *)(v22 + 3);
          char v25 = *(unsigned char *)(v23 + 1);
          LOBYTE(v23) = *(unsigned char *)(v23 + 3);
          unsigned char *v21 = v24;
          v21[1] = v25;
          v21[2] = v22;
          v21[3] = v23;
          v21 += 4;
          v20 += 2;
        }
        while (v20 < v11);
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_s2as_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a4[1];
  unint64_t v11 = (int *)(a3[1] + v10 * v9 + 2 * (v8 & 0xFFFFFFFE));
  uint64_t v12 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v14 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v16 = a8[1];
  uint64_t v17 = (int *)(a7[1] + v16 * v13 + 4 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= v14) {
    unint64_t v18 = v14;
  }
  else {
    unint64_t v18 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (a2[3] >= v15) {
    unint64_t v19 = v15;
  }
  else {
    unint64_t v19 = a2[3];
  }
  if (v19)
  {
    uint64_t v51 = a8[1];
    uint64_t v53 = a4[1];
    uint64_t v20 = 2 * (v8 & 0xFFFFFFFE);
    uint64_t v55 = a8[2];
    uint64_t v56 = *a8;
    uint64_t v21 = (char *)(a7[2] + v55 * v13 + 2 * v12);
    unint64_t v22 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    uint64_t v23 = a4[2];
    char v24 = (char *)(a3[2] + v23 * v9 + v20);
    uint64_t v25 = *a4;
    uint64_t v26 = (char *)(*a3 + *a4 * v9 + v20);
    unint64_t v54 = v18;
    size_t v27 = 2 * v18;
    unint64_t v52 = v19;
    do
    {
      memcpy(v22, v26, v27);
      memcpy(v21, v24, v27);
      v26 += v25;
      v22 += v56;
      v24 += v23;
      v21 += v55;
      --v19;
    }
    while (v19);
    uint64_t v16 = v51;
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    uint64_t v10 = v53;
    unint64_t v18 = v54;
    unint64_t v19 = v52;
  }
  unint64_t v28 = v9 & 1;
  if (v19 >= v28) {
    uint64_t v29 = v9 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  char v30 = v8;
  unint64_t v31 = v18 >> 1;
  uint64_t v32 = v8 & 1;
  if (v18 >> 1 >= (v18 - v32) >> 1) {
    unint64_t v31 = (v18 - v32) >> 1;
  }
  if (v9)
  {
    uint64_t v33 = v11;
    if (v30)
    {
      uint64_t v33 = v11 + 1;
      *uint64_t v17 = *v11;
      unint64_t v34 = v17 + 1;
      if (v31)
      {
LABEL_19:
        uint64_t v35 = -(uint64_t)v31;
        do
        {
          int v36 = *v33++;
          *v34++ = v36;
          BOOL v37 = __CFADD__(v35++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v31;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v34 = v17;
      if (v31) {
        goto LABEL_19;
      }
    }
    uint64_t v38 = 0;
LABEL_25:
    if ((v38 | (unint64_t)v32) < v18) {
      *unint64_t v34 = *v33;
    }
    unint64_t v11 = (int *)((char *)v11 + v10);
    uint64_t v17 = (int *)((char *)v17 + v16);
  }
  if (v19 == v29)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v19 - v29;
    do
    {
      __int16 v41 = (__int16 *)v11;
      unint64_t v42 = v17;
      if (v30)
      {
        __int16 v41 = (__int16 *)(v11 + 1);
        *uint64_t v17 = *v11;
        unint64_t v42 = v17 + 1;
      }
      if (v31)
      {
        uint64_t v43 = -(uint64_t)v31;
        do
        {
          __int16 v44 = *v41;
          __int16 v45 = v41[1];
          v41 += 2;
          *(_WORD *)unint64_t v42 = v44;
          *((_WORD *)v42 + 1) = v45;
          *((_WORD *)v42 + 2) = v44;
          *((_WORD *)v42 + 3) = v45;
          v42 += 2;
          BOOL v37 = __CFADD__(v43++, 1);
        }
        while (!v37);
      }
      if ((v32 | (2 * v31)) < v18) {
        *unint64_t v42 = *(_DWORD *)v41;
      }
      unint64_t v11 = (int *)((char *)v11 + v10);
      uint64_t v17 = (int *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v28 < v19)
  {
    if (v30)
    {
      int v46 = *v11++;
      *v17++ = v46;
    }
    if (v31)
    {
      uint64_t v47 = -(uint64_t)v31;
      do
      {
        int v48 = *v11++;
        *v17++ = v48;
        BOOL v37 = __CFADD__(v47++, 1);
      }
      while (!v37);
      v31 *= 2;
    }
    if ((v31 | v32) < v18) {
      *uint64_t v17 = *v11;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a4[1];
  unint64_t v11 = (int *)(a3[1] + v10 * v9 + 2 * (v8 & 0xFFFFFFFE));
  uint64_t v12 = a6[4];
  uint64_t v13 = a6[5];
  uint64_t v14 = a8[1];
  unint64_t v15 = (int *)(a7[1] + v14 * v13 + 4 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2]) {
    unint64_t v16 = a6[2];
  }
  else {
    unint64_t v16 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v47 = a4[1];
    unint64_t v48 = v16;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    unint64_t v22 = (char *)(*a3 + *a4 * v9 + 2 * (v8 & 0xFFFFFFFE));
    size_t v23 = 2 * v16;
    unint64_t v46 = v17;
    do
    {
      memcpy(v21, v22, v23);
      v22 += v19;
      v21 += v20;
      --v17;
    }
    while (v17);
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    uint64_t v10 = v47;
    unint64_t v16 = v48;
    unint64_t v17 = v46;
  }
  unint64_t v24 = v9 & 1;
  if (v17 >= v24) {
    uint64_t v25 = v9 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v8;
  unint64_t v27 = v16 >> 1;
  uint64_t v28 = v8 & 1;
  if (v16 >> 1 >= (v16 - v28) >> 1) {
    unint64_t v27 = (v16 - v28) >> 1;
  }
  if (v9)
  {
    uint64_t v29 = v11;
    if (v26)
    {
      uint64_t v29 = v11 + 1;
      *unint64_t v15 = *v11;
      char v30 = v15 + 1;
      if (v27)
      {
LABEL_19:
        uint64_t v31 = -(uint64_t)v27;
        do
        {
          int v32 = *v29++;
          *v30++ = v32;
          BOOL v33 = __CFADD__(v31++, 1);
        }
        while (!v33);
        uint64_t v34 = 2 * v27;
        goto LABEL_25;
      }
    }
    else
    {
      char v30 = v15;
      if (v27) {
        goto LABEL_19;
      }
    }
    uint64_t v34 = 0;
LABEL_25:
    if ((v34 | (unint64_t)v28) < v16) {
      *char v30 = *v29;
    }
    unint64_t v11 = (int *)((char *)v11 + v10);
    unint64_t v15 = (int *)((char *)v15 + v14);
  }
  if (v17 == v25)
  {
    unint64_t v35 = 0;
  }
  else
  {
    uint64_t v36 = 0;
    unint64_t v35 = v17 - v25;
    do
    {
      BOOL v37 = (__int16 *)v11;
      uint64_t v38 = v15;
      if (v26)
      {
        BOOL v37 = (__int16 *)(v11 + 1);
        *unint64_t v15 = *v11;
        uint64_t v38 = v15 + 1;
      }
      if (v27)
      {
        uint64_t v39 = -(uint64_t)v27;
        do
        {
          __int16 v40 = *v37;
          __int16 v41 = v37[1];
          v37 += 2;
          *(_WORD *)uint64_t v38 = v40;
          *((_WORD *)v38 + 1) = v41;
          *((_WORD *)v38 + 2) = v40;
          *((_WORD *)v38 + 3) = v41;
          v38 += 2;
          BOOL v33 = __CFADD__(v39++, 1);
        }
        while (!v33);
      }
      if ((v28 | (2 * v27)) < v16) {
        int *v38 = *(_DWORD *)v37;
      }
      unint64_t v11 = (int *)((char *)v11 + v10);
      unint64_t v15 = (int *)((char *)v15 + v14);
      ++v36;
    }
    while (v36 != v35);
  }
  if (v35 + v24 < v17)
  {
    if (v26)
    {
      int v42 = *v11++;
      *v15++ = v42;
    }
    if (v27)
    {
      uint64_t v43 = -(uint64_t)v27;
      do
      {
        int v44 = *v11++;
        *v15++ = v44;
        BOOL v33 = __CFADD__(v43++, 1);
      }
      while (!v33);
      v27 *= 2;
    }
    if ((v27 | v28) < v16) {
      *unint64_t v15 = *v11;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  unint64_t v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17) {
    unint64_t v20 = v17;
  }
  if (v10 >= v16) {
    unint64_t v21 = v16;
  }
  else {
    unint64_t v21 = v10;
  }
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          unsigned int v28 = *(unsigned __int16 *)(v26 + 2 * i);
          if (v28 >= 0xEB00) {
            unsigned int v28 = 60160;
          }
          if (v28 <= 0x1000) {
            unsigned int v28 = 4096;
          }
          *(_WORD *)(v25 + 2 * i) = (-268431360 - v28 + (v28 << 16)) / 0xDB00;
        }
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  unint64_t v29 = v8 & 1;
  if (v21 >= v29) {
    uint64_t v30 = v8 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v20 >> 1;
  uint64_t v33 = v9 & 1;
  if (v20 >> 1 >= (v20 - v33) >> 1) {
    unint64_t v32 = (v20 - v33) >> 1;
  }
  if (v8)
  {
    if (v31)
    {
      unsigned int v41 = *v13;
      unsigned int v42 = v13[1];
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        unsigned int v41 = 4096;
      }
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      uint64_t v34 = v13 + 2;
      *uint64_t v19 = (613566757 * (unint64_t)((-268431360 - v41 + (v41 << 16)) >> 13)) >> 32;
      v19[1] = (613566757 * (unint64_t)((-268431360 - v43 + (v43 << 16)) >> 13)) >> 32;
      unint64_t v35 = v19 + 2;
      if (v32) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v34 = v13;
      unint64_t v35 = v19;
      if (v32)
      {
LABEL_24:
        uint64_t v36 = -(uint64_t)v32;
        do
        {
          unsigned int v37 = *v34;
          unsigned int v38 = v34[1];
          if (v37 >= 0xF000) {
            unsigned int v37 = 61440;
          }
          if (v37 <= 0x1000) {
            unsigned int v37 = 4096;
          }
          if (v38 >= 0xF000) {
            unsigned int v38 = 61440;
          }
          if (v38 <= 0x1000) {
            unsigned int v38 = 4096;
          }
          v34 += 2;
          *unint64_t v35 = (613566757 * (unint64_t)((-268431360 - v37 + (v37 << 16)) >> 13)) >> 32;
          v35[1] = (613566757 * (unint64_t)((-268431360 - v38 + (v38 << 16)) >> 13)) >> 32;
          v35 += 2;
          BOOL v39 = __CFADD__(v36++, 1);
        }
        while (!v39);
        uint64_t v40 = 2 * v32;
        goto LABEL_47;
      }
    }
    uint64_t v40 = 0;
LABEL_47:
    if ((v40 | (unint64_t)v33) < v20)
    {
      unsigned int v44 = *v34;
      unsigned int v45 = v34[1];
      if (v44 >= 0xF000) {
        unsigned int v44 = 61440;
      }
      if (v44 <= 0x1000) {
        unsigned int v44 = 4096;
      }
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        unsigned int v45 = 4096;
      }
      *unint64_t v35 = (613566757 * (unint64_t)((-268431360 - v44 + (v44 << 16)) >> 13)) >> 32;
      v35[1] = (613566757 * (unint64_t)((-268431360 - v45 + (v45 << 16)) >> 13)) >> 32;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v30)
  {
    unint64_t v46 = 0;
  }
  else
  {
    uint64_t v47 = 0;
    unint64_t v46 = v21 - v30;
    int32x2_t v48 = vdup_n_s32(0xF0001000);
    uint32x2_t v49 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      __int16 v50 = v13;
      uint64_t v51 = (int16x4_t *)v19;
      if (v31)
      {
        unsigned int v52 = *v13;
        unsigned int v53 = v13[1];
        if (v52 >= 0xF000) {
          unsigned int v52 = 61440;
        }
        if (v52 <= 0x1000) {
          unsigned int v52 = 4096;
        }
        if (v53 >= 0xF000) {
          unsigned int v53 = 61440;
        }
        if (v53 <= 0x1000) {
          int v54 = 4096;
        }
        else {
          int v54 = v53;
        }
        __int16 v50 = v13 + 2;
        *uint64_t v19 = (613566757 * (unint64_t)((-268431360 - v52 + (v52 << 16)) >> 13)) >> 32;
        v19[1] = (613566757 * (unint64_t)((-268431360 - v54 + (v54 << 16)) >> 13)) >> 32;
        uint64_t v51 = (int16x4_t *)(v19 + 2);
      }
      if (v32)
      {
        uint64_t v55 = -(uint64_t)v32;
        do
        {
          uint64_t v56 = v50 + 2;
          v57.i32[0] = *v50;
          v57.i32[1] = v50[1];
          int32x4_t v58 = (int32x4_t)vshrq_n_u64(vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v48, (int32x2_t)vmax_u32(vmin_u32(v57, (uint32x2_t)0xF0000000F000), (uint32x2_t)0x100000001000), (int32x2_t)0xFFFF0000FFFFLL), 0xDuLL), v49), 0x20uLL);
          *v51++ = vmovn_s32(vuzp1q_s32(v58, v58));
          v50 += 2;
          BOOL v39 = __CFADD__(v55++, 1);
        }
        while (!v39);
      }
      else
      {
        uint64_t v56 = v50;
      }
      if ((v33 | (2 * v32)) < v20)
      {
        unsigned int v59 = *v56;
        unsigned int v60 = v56[1];
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          unsigned int v59 = 4096;
        }
        if (v60 >= 0xF000) {
          unsigned int v60 = 61440;
        }
        if (v60 <= 0x1000) {
          unsigned int v60 = 4096;
        }
        v51->i16[0] = (613566757 * (unint64_t)((-268431360 - v59 + (v59 << 16)) >> 13)) >> 32;
        v51->i16[1] = (613566757 * (unint64_t)((-268431360 - v60 + (v60 << 16)) >> 13)) >> 32;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v47;
    }
    while (v47 != v46);
  }
  if (v46 + v29 < v21)
  {
    if (v31)
    {
      unsigned int v61 = *v13;
      unsigned int v62 = v13[1];
      if (v61 >= 0xF000) {
        unsigned int v61 = 61440;
      }
      if (v61 <= 0x1000) {
        unsigned int v61 = 4096;
      }
      if (v62 >= 0xF000) {
        unsigned int v62 = 61440;
      }
      if (v62 <= 0x1000) {
        unsigned int v62 = 4096;
      }
      v13 += 2;
      *uint64_t v19 = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
      v19[1] = (613566757 * (unint64_t)((-268431360 - v62 + (v62 << 16)) >> 13)) >> 32;
      v19 += 2;
    }
    if (v32)
    {
      uint64_t v63 = -(uint64_t)v32;
      do
      {
        unsigned int v64 = *v13;
        unsigned int v65 = v13[1];
        if (v64 >= 0xF000) {
          unsigned int v64 = 61440;
        }
        if (v64 <= 0x1000) {
          unsigned int v64 = 4096;
        }
        if (v65 >= 0xF000) {
          unsigned int v65 = 61440;
        }
        if (v65 <= 0x1000) {
          unsigned int v65 = 4096;
        }
        v13 += 2;
        *uint64_t v19 = (613566757 * (unint64_t)((-268431360 - v64 + (v64 << 16)) >> 13)) >> 32;
        v19[1] = (613566757 * (unint64_t)((-268431360 - v65 + (v65 << 16)) >> 13)) >> 32;
        v19 += 2;
        BOOL v39 = __CFADD__(v63++, 1);
      }
      while (!v39);
      v32 *= 2;
    }
    if ((v32 | v33) < v20)
    {
      unsigned int v66 = *v13;
      unsigned int v67 = v13[1];
      if (v66 >= 0xF000) {
        unsigned int v66 = 61440;
      }
      if (v66 <= 0x1000) {
        unsigned int v66 = 4096;
      }
      if (v67 >= 0xF000) {
        unsigned int v67 = 61440;
      }
      if (v67 <= 0x1000) {
        unsigned int v67 = 4096;
      }
      *uint64_t v19 = (613566757 * (unint64_t)((-268431360 - v66 + (v66 << 16)) >> 13)) >> 32;
      v19[1] = (613566757 * (unint64_t)((-268431360 - v67 + (v67 << 16)) >> 13)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v19;
    uint64_t v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v29 = *(unsigned __int16 *)(v27 + 2 * i);
          if (v29 >= 0xEB00) {
            unsigned int v29 = 60160;
          }
          if (v29 <= 0x1000) {
            unsigned int v29 = 4096;
          }
          *(_WORD *)(v26 + 2 * i) = (-268431360 - v29 + (v29 << 16)) / 0xDB00;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  unint64_t v33 = v22 >> 1;
  if (v22 >> 1 >= (v22 - v10) >> 1) {
    unint64_t v33 = (v22 - v10) >> 1;
  }
  if (v12)
  {
    if (v32)
    {
      unsigned int v36 = *v14;
      if (v36 >= 0xF000) {
        unsigned int v36 = 61440;
      }
      if (v36 <= 0x1000) {
        int v37 = 4096;
      }
      else {
        int v37 = v36;
      }
      if (v14[1] >= 0xF000u) {
        unsigned int v38 = 61440;
      }
      else {
        unsigned int v38 = v14[1];
      }
      if (v38 <= 0x1000) {
        int v39 = 4096;
      }
      else {
        int v39 = v38;
      }
      uint64_t v34 = v14 + 2;
      _WORD *v21 = (613566757 * (unint64_t)((-268431360 - v37 + (v37 << 16)) >> 13)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-268431360 - v39 + (v39 << 16)) >> 13)) >> 32;
      unint64_t v35 = v21 + 2;
      if (!v33) {
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v34 = v14;
      unint64_t v35 = v21;
      if (!v33)
      {
LABEL_48:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_49;
      }
    }
    uint64_t v40 = -(uint64_t)v33;
    do
    {
      unsigned int v41 = *v34;
      unsigned int v42 = v34[1];
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        unsigned int v41 = 4096;
      }
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        unsigned int v42 = 4096;
      }
      *unint64_t v35 = (613566757 * (unint64_t)((-268431360 - v41 + (v41 << 16)) >> 13)) >> 32;
      v35[1] = (613566757 * (unint64_t)((-268431360 - v42 + (v42 << 16)) >> 13)) >> 32;
      v34 += 2;
      v35 += 2;
      BOOL v43 = __CFADD__(v40++, 1);
    }
    while (!v43);
    goto LABEL_48;
  }
LABEL_49:
  if (v8 == v31)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v31;
    do
    {
      unint64_t v46 = v14;
      uint64_t v47 = v21;
      if (v32)
      {
        unsigned int v48 = *v14;
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          int v49 = 4096;
        }
        else {
          int v49 = v48;
        }
        if (v14[1] >= 0xF000u) {
          unsigned int v50 = 61440;
        }
        else {
          unsigned int v50 = v14[1];
        }
        if (v50 <= 0x1000) {
          int v51 = 4096;
        }
        else {
          int v51 = v50;
        }
        unint64_t v46 = v14 + 2;
        _WORD *v21 = (613566757 * (unint64_t)((-268431360 - v49 + (v49 << 16)) >> 13)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-268431360 - v51 + (v51 << 16)) >> 13)) >> 32;
        uint64_t v47 = v21 + 2;
      }
      if (v33)
      {
        uint64_t v52 = -(uint64_t)v33;
        do
        {
          unsigned int v53 = *v46;
          unsigned int v54 = v46[1];
          if (v53 >= 0xF000) {
            unsigned int v53 = 61440;
          }
          if (v53 <= 0x1000) {
            unsigned int v53 = 4096;
          }
          if (v54 >= 0xF000) {
            unsigned int v54 = 61440;
          }
          if (v54 <= 0x1000) {
            unsigned int v54 = 4096;
          }
          _WORD *v47 = (613566757 * (unint64_t)((-268431360 - v53 + (v53 << 16)) >> 13)) >> 32;
          v47[1] = (613566757 * (unint64_t)((-268431360 - v54 + (v54 << 16)) >> 13)) >> 32;
          v46 += 2;
          v47 += 2;
          BOOL v43 = __CFADD__(v52++, 1);
        }
        while (!v43);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v30 < v8)
  {
    if (v32)
    {
      unsigned int v55 = *v14;
      unsigned int v56 = v14[1];
      if (v55 >= 0xF000) {
        unsigned int v55 = 61440;
      }
      if (v55 <= 0x1000) {
        unsigned int v55 = 4096;
      }
      if (v56 >= 0xF000) {
        unsigned int v56 = 61440;
      }
      if (v56 <= 0x1000) {
        unsigned int v56 = 4096;
      }
      v14 += 2;
      _WORD *v21 = (613566757 * (unint64_t)((-268431360 - v55 + (v55 << 16)) >> 13)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-268431360 - v56 + (v56 << 16)) >> 13)) >> 32;
      v21 += 2;
    }
    if (v33)
    {
      uint64_t v57 = -(uint64_t)v33;
      do
      {
        unsigned int v58 = *v14;
        unsigned int v59 = v14[1];
        if (v58 >= 0xF000) {
          unsigned int v58 = 61440;
        }
        if (v58 <= 0x1000) {
          unsigned int v58 = 4096;
        }
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          unsigned int v59 = 4096;
        }
        _WORD *v21 = (613566757 * (unint64_t)((-268431360 - v58 + (v58 << 16)) >> 13)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-268431360 - v59 + (v59 << 16)) >> 13)) >> 32;
        v14 += 2;
        v21 += 2;
        BOOL v43 = __CFADD__(v57++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  unint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  }
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  else {
    unint64_t v24 = v13 - v12;
  }
  if (v24)
  {
    unint64_t v54 = v23;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    if (v12 >= v9) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    unsigned int v28 = (char *)(*a3 + *a4 * v12 + v14 + v27);
    unsigned int v29 = (char *)(*a7 + v26 * v19 + 2 * v17);
    size_t v30 = 2 * v23;
    unint64_t v56 = v24;
    uint64_t v31 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v30);
      v28 += v25;
      v29 += v26;
      BOOL v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    unint64_t v24 = v56;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
    unint64_t v23 = v54;
  }
  if (v24 >= v11) {
    unint64_t v33 = v11;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v23 >> 1 >= (v23 - v10) >> 1) {
    unint64_t v34 = (v23 - v10) >> 1;
  }
  else {
    unint64_t v34 = v23 >> 1;
  }
  if (v11)
  {
    if (v8)
    {
      unint64_t v35 = v16 + 2;
      unsigned int v37 = (v16[1] + *(unsigned __int16 *)((char *)v16 + v15 + 2) + 1) >> 1;
      *unint64_t v22 = (*v16 + *(unsigned __int16 *)((char *)v16 + v15) + 1) >> 1;
      v22[1] = v37;
      unsigned int v36 = v22 + 2;
      if (!v34)
      {
LABEL_29:
        v16 += v15;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v35 = v16;
      unsigned int v36 = v22;
      if (!v34) {
        goto LABEL_29;
      }
    }
    uint64_t v38 = -(uint64_t)v34;
    do
    {
      int v39 = *v35;
      int v40 = v35[1];
      int v41 = *(unsigned __int16 *)((char *)v35 + v15);
      int v42 = *(unsigned __int16 *)((char *)v35 + v15 + 2);
      v35 += 2;
      *unsigned int v36 = (v39 + v41 + 1) >> 1;
      v36[1] = (v40 + v42 + 1) >> 1;
      v36 += 2;
      BOOL v32 = __CFADD__(v38++, 1);
    }
    while (!v32);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v33)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v24 - v33;
    do
    {
      uint64_t v45 = v16;
      unint64_t v46 = v22;
      if (v8)
      {
        uint64_t v45 = v16 + 2;
        unsigned int v47 = (v16[1] + *(unsigned __int16 *)((char *)v16 + v15 + 2) + 1) >> 1;
        *unint64_t v22 = (*v16 + *(unsigned __int16 *)((char *)v16 + v15) + 1) >> 1;
        v22[1] = v47;
        unint64_t v46 = v22 + 2;
      }
      if (v34)
      {
        uint64_t v48 = -(uint64_t)v34;
        do
        {
          int v49 = *v45;
          int v50 = v45[1];
          int v51 = *(unsigned __int16 *)((char *)v45 + v15);
          int v52 = *(unsigned __int16 *)((char *)v45 + v15 + 2);
          v45 += 2;
          *unint64_t v46 = (v49 + v51 + 1) >> 1;
          v46[1] = (v50 + v52 + 1) >> 1;
          v46 += 2;
          BOOL v32 = __CFADD__(v48++, 1);
        }
        while (!v32);
      }
      v16 += v15;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = v9 & 1;
  uint64_t v12 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v13 = v10 & 1;
  unint64_t v14 = v13 + v10;
  uint64_t v15 = (*(_DWORD *)(a2 + 24) + v10) & 0xFFFFFFFE;
  uint64_t v16 = 2 * (v11 + v9);
  uint64_t v17 = a4[1];
  uint64_t v18 = (int *)(a3[1] + v17 * (v13 + v10) + (v16 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v19 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v20 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v21 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v22 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v23 = 2 * v19;
  uint64_t v24 = a8[1];
  uint64_t v25 = (int *)(a7[1] + ((unint64_t)(v24 * v21) >> 1) + ((2 * v19) & 0x7FFFFFFFFFFFFFFELL));
  if (v12 - (v11 + v9) >= (unint64_t)(v20 - v19)) {
    unint64_t v26 = v20 - v19;
  }
  else {
    unint64_t v26 = v12 - (v11 + v9);
  }
  unint64_t v27 = v15 - v14;
  if (v15 - v14 >= v22 - v21) {
    unint64_t v27 = v22 - v21;
  }
  if (v27)
  {
    unint64_t v50 = v27;
    uint64_t v51 = a4[1];
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    if (v14 >= v10) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = (char *)(*a3 + *a4 * v14 + v16 + v30);
    BOOL v32 = (char *)(*a7 + v29 * v21 + v23);
    unint64_t v49 = v26;
    size_t v33 = 2 * v26;
    uint64_t v34 = -(uint64_t)v27;
    do
    {
      memcpy(v32, v31, v33);
      v31 += v28;
      v32 += v29;
      BOOL v35 = __CFADD__(v34++, 1);
    }
    while (!v35);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v13 = *(void *)(a2 + 40) & 1;
    uint64_t v11 = v9 & 1;
    unint64_t v27 = v50;
    uint64_t v17 = v51;
    unint64_t v26 = v49;
  }
  if (v27 >= v13) {
    unint64_t v36 = v13;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v26 >> 1 >= (v26 - v11) >> 1) {
    unint64_t v37 = (v26 - v11) >> 1;
  }
  else {
    unint64_t v37 = v26 >> 1;
  }
  if (v13)
  {
    uint64_t v38 = v18;
    if (v9)
    {
      uint64_t v38 = v18 + 1;
      *uint64_t v25 = *v18;
      int v39 = v25 + 1;
      if (!v37)
      {
LABEL_28:
        uint64_t v18 = (int *)((char *)v18 + 2 * v17);
        uint64_t v25 = (int *)((char *)v25 + v24);
        goto LABEL_29;
      }
    }
    else
    {
      int v39 = v25;
      if (!v37) {
        goto LABEL_28;
      }
    }
    uint64_t v40 = -(uint64_t)v37;
    do
    {
      int v41 = *v38++;
      *v39++ = v41;
      BOOL v35 = __CFADD__(v40++, 1);
    }
    while (!v35);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    unint64_t v42 = 0;
    unint64_t v43 = v27 - v36;
    do
    {
      unint64_t v44 = v18;
      uint64_t v45 = v25;
      if (v9)
      {
        unint64_t v44 = v18 + 1;
        *uint64_t v25 = *v18;
        uint64_t v45 = v25 + 1;
      }
      if (v37)
      {
        uint64_t v46 = -(uint64_t)v37;
        do
        {
          int v47 = *v44++;
          *v45++ = v47;
          BOOL v35 = __CFADD__(v46++, 1);
        }
        while (!v35);
      }
      uint64_t v18 = (int *)((char *)v18 + 2 * v17);
      uint64_t v25 = (int *)((char *)v25 + v24);
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = 2 * v10;
  uint64_t v16 = a4[1];
  uint64_t v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v20 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v21 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v22 = 2 * v18;
  uint64_t v23 = a8[1];
  uint64_t v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v25 = v11 - v10;
  if (v25 >= v19 - v18) {
    unint64_t v26 = v19 - v18;
  }
  else {
    unint64_t v26 = v25;
  }
  unint64_t v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20) {
    unint64_t v27 = v21 - v20;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v15 + v32;
    uint64_t v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(_WORD *)(v34 + 2 * i) = (-268431360 - v36 + (v36 << 16)) / 0xDB00;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  unint64_t v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v26 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v42 = *v17;
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      if (v17[1] >= 0xF000u) {
        unsigned int v44 = 61440;
      }
      else {
        unsigned int v44 = v17[1];
      }
      if (v44 <= 0x1000) {
        int v45 = 4096;
      }
      else {
        int v45 = v44;
      }
      if (*(unsigned __int16 *)((char *)v17 + v16) >= 0xF000u) {
        unsigned int v46 = 61440;
      }
      else {
        unsigned int v46 = *(unsigned __int16 *)((char *)v17 + v16);
      }
      if (v46 <= 0x1000) {
        int v47 = 4096;
      }
      else {
        int v47 = v46;
      }
      if (*(unsigned __int16 *)((char *)v17 + v16 + 2) >= 0xF000u) {
        unsigned int v48 = 61440;
      }
      else {
        unsigned int v48 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
      }
      if (v48 <= 0x1000) {
        int v49 = 4096;
      }
      else {
        int v49 = v48;
      }
      uint64_t v40 = v17 + 2;
      *uint64_t v24 = (((613566757 * (unint64_t)((-268431360 - v43 + (v43 << 16)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32)
                          + 1) >> 1;
      v24[1] = (((613566757 * (unint64_t)((-268431360 - v45 + (v45 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v49 + (v49 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
      int v41 = v24 + 2;
      if (!v39) {
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v40 = v17;
      int v41 = v24;
      if (!v39)
      {
LABEL_72:
        v17 += v16;
        uint64_t v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_73;
      }
    }
    uint64_t v50 = -(uint64_t)v39;
    do
    {
      unsigned int v51 = *v40;
      unsigned int v52 = v40[1];
      unsigned int v53 = *(unsigned __int16 *)((char *)v40 + v16);
      unsigned int v54 = *(unsigned __int16 *)((char *)v40 + v16 + 2);
      if (v51 >= 0xF000) {
        unsigned int v51 = 61440;
      }
      if (v51 <= 0x1000) {
        unsigned int v51 = 4096;
      }
      if (v52 >= 0xF000) {
        unsigned int v52 = 61440;
      }
      if (v52 <= 0x1000) {
        unsigned int v52 = 4096;
      }
      if (v53 >= 0xF000) {
        unsigned int v53 = 61440;
      }
      if (v53 <= 0x1000) {
        unsigned int v53 = 4096;
      }
      if (v54 >= 0xF000) {
        unsigned int v54 = 61440;
      }
      if (v54 <= 0x1000) {
        unsigned int v54 = 4096;
      }
      v40 += 2;
      _WORD *v41 = (((613566757 * (unint64_t)((-268431360 - v51 + (v51 << 16)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-268431360 - v53 + (v53 << 16)) >> 13)) >> 32)
                          + 1) >> 1;
      v41[1] = (((613566757 * (unint64_t)((-268431360 - v52 + (v52 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v54 + (v54 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
      v41 += 2;
      BOOL v55 = __CFADD__(v50++, 1);
    }
    while (!v55);
    goto LABEL_72;
  }
LABEL_73:
  if (v27 != v37)
  {
    unint64_t v56 = 0;
    unint64_t v57 = v27 - v37;
    do
    {
      unsigned int v58 = v17;
      unsigned int v59 = v24;
      if (v9)
      {
        unsigned int v60 = *v17;
        if (v60 >= 0xF000) {
          unsigned int v60 = 61440;
        }
        if (v60 <= 0x1000) {
          int v61 = 4096;
        }
        else {
          int v61 = v60;
        }
        if (v17[1] >= 0xF000u) {
          unsigned int v62 = 61440;
        }
        else {
          unsigned int v62 = v17[1];
        }
        if (v62 <= 0x1000) {
          int v63 = 4096;
        }
        else {
          int v63 = v62;
        }
        if (*(unsigned __int16 *)((char *)v17 + v16) >= 0xF000u) {
          unsigned int v64 = 61440;
        }
        else {
          unsigned int v64 = *(unsigned __int16 *)((char *)v17 + v16);
        }
        if (v64 <= 0x1000) {
          int v65 = 4096;
        }
        else {
          int v65 = v64;
        }
        if (*(unsigned __int16 *)((char *)v17 + v16 + 2) >= 0xF000u) {
          unsigned int v66 = 61440;
        }
        else {
          unsigned int v66 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
        }
        if (v66 <= 0x1000) {
          int v67 = 4096;
        }
        else {
          int v67 = v66;
        }
        unsigned int v58 = v17 + 2;
        *uint64_t v24 = (((613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v65 + (v65 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
        v24[1] = (((613566757 * (unint64_t)((-268431360 - v63 + (v63 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v67 + (v67 << 16)) >> 13)) >> 32)
                              + 1) >> 1;
        unsigned int v59 = v24 + 2;
      }
      if (v39)
      {
        uint64_t v68 = -(uint64_t)v39;
        do
        {
          unsigned int v69 = *v58;
          unsigned int v70 = v58[1];
          unsigned int v71 = *(unsigned __int16 *)((char *)v58 + v16);
          unsigned int v72 = *(unsigned __int16 *)((char *)v58 + v16 + 2);
          if (v69 >= 0xF000) {
            unsigned int v69 = 61440;
          }
          if (v69 <= 0x1000) {
            unsigned int v69 = 4096;
          }
          if (v70 >= 0xF000) {
            unsigned int v70 = 61440;
          }
          if (v70 <= 0x1000) {
            unsigned int v70 = 4096;
          }
          if (v71 >= 0xF000) {
            unsigned int v71 = 61440;
          }
          if (v71 <= 0x1000) {
            unsigned int v71 = 4096;
          }
          if (v72 >= 0xF000) {
            unsigned int v72 = 61440;
          }
          if (v72 <= 0x1000) {
            unsigned int v72 = 4096;
          }
          v58 += 2;
          *unsigned int v59 = (((613566757 * (unint64_t)((-268431360 - v69 + (v69 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v71 + (v71 << 16)) >> 13)) >> 32)
                              + 1) >> 1;
          v59[1] = (((613566757 * (unint64_t)((-268431360 - v70 + (v70 << 16)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-268431360 - v72 + (v72 << 16)) >> 13)) >> 32)
                                + 1) >> 1;
          v59 += 2;
          BOOL v55 = __CFADD__(v68++, 1);
        }
        while (!v55);
      }
      v17 += v16;
      uint64_t v24 = (_WORD *)((char *)v24 + v23);
      v56 += 2;
    }
    while (v56 < v57);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = 2 * v10;
  uint64_t v16 = a4[1];
  uint64_t v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v20 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v21 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v22 = 2 * v18;
  uint64_t v23 = a8[1];
  uint64_t v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v25 = v11 - v10;
  if (v25 >= v19 - v18) {
    unint64_t v26 = v19 - v18;
  }
  else {
    unint64_t v26 = v25;
  }
  unint64_t v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20) {
    unint64_t v27 = v21 - v20;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v15 + v32;
    uint64_t v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(_WORD *)(v34 + 2 * i) = (-268431360 - v36 + (v36 << 16)) / 0xDB00;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  unint64_t v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v26 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v42 = *v17;
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      if (v17[1] >= 0xF000u) {
        unsigned int v44 = 61440;
      }
      else {
        unsigned int v44 = v17[1];
      }
      if (v44 <= 0x1000) {
        int v45 = 4096;
      }
      else {
        int v45 = v44;
      }
      uint64_t v40 = v17 + 2;
      *uint64_t v24 = (613566757 * (unint64_t)((-268431360 - v43 + (v43 << 16)) >> 13)) >> 32;
      v24[1] = (613566757 * (unint64_t)((-268431360 - v45 + (v45 << 16)) >> 13)) >> 32;
      int v41 = v24 + 2;
      if (!v39) {
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v40 = v17;
      int v41 = v24;
      if (!v39)
      {
LABEL_52:
        v17 += v16;
        uint64_t v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_53;
      }
    }
    uint64_t v46 = -(uint64_t)v39;
    do
    {
      unsigned int v47 = *v40;
      unsigned int v48 = v40[1];
      if (v47 >= 0xF000) {
        unsigned int v47 = 61440;
      }
      if (v47 <= 0x1000) {
        unsigned int v47 = 4096;
      }
      if (v48 >= 0xF000) {
        unsigned int v48 = 61440;
      }
      if (v48 <= 0x1000) {
        unsigned int v48 = 4096;
      }
      _WORD *v41 = (613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32;
      v41[1] = (613566757 * (unint64_t)((-268431360 - v48 + (v48 << 16)) >> 13)) >> 32;
      v40 += 2;
      v41 += 2;
      BOOL v49 = __CFADD__(v46++, 1);
    }
    while (!v49);
    goto LABEL_52;
  }
LABEL_53:
  if (v27 != v37)
  {
    unint64_t v50 = 0;
    unint64_t v51 = v27 - v37;
    uint64_t v52 = 2 * v16;
    do
    {
      unsigned int v53 = v17;
      unsigned int v54 = v24;
      if (v9)
      {
        unsigned int v55 = *v17;
        if (v55 >= 0xF000) {
          unsigned int v55 = 61440;
        }
        if (v55 <= 0x1000) {
          int v56 = 4096;
        }
        else {
          int v56 = v55;
        }
        if (v17[1] >= 0xF000u) {
          unsigned int v57 = 61440;
        }
        else {
          unsigned int v57 = v17[1];
        }
        if (v57 <= 0x1000) {
          int v58 = 4096;
        }
        else {
          int v58 = v57;
        }
        unsigned int v53 = v17 + 2;
        *uint64_t v24 = (613566757 * (unint64_t)((-268431360 - v56 + (v56 << 16)) >> 13)) >> 32;
        v24[1] = (613566757 * (unint64_t)((-268431360 - v58 + (v58 << 16)) >> 13)) >> 32;
        unsigned int v54 = v24 + 2;
      }
      if (v39)
      {
        uint64_t v59 = -(uint64_t)v39;
        do
        {
          unsigned int v60 = *v53;
          unsigned int v61 = v53[1];
          if (v60 >= 0xF000) {
            unsigned int v60 = 61440;
          }
          if (v60 <= 0x1000) {
            unsigned int v60 = 4096;
          }
          if (v61 >= 0xF000) {
            unsigned int v61 = 61440;
          }
          if (v61 <= 0x1000) {
            unsigned int v61 = 4096;
          }
          *unsigned int v54 = (613566757 * (unint64_t)((-268431360 - v60 + (v60 << 16)) >> 13)) >> 32;
          v54[1] = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
          v53 += 2;
          v54 += 2;
          BOOL v49 = __CFADD__(v59++, 1);
        }
        while (!v49);
      }
      uint64_t v17 = (unsigned __int16 *)((char *)v17 + v52);
      uint64_t v24 = (_WORD *)((char *)v24 + v23);
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_Copy_s2as_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  unint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  unint64_t v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2]) {
    unint64_t v18 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v10 = a6[3];
  }
  if (v10)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14;
    uint64_t v23 = *a7 + *a8 * v14;
    uint64_t v24 = *a4;
    uint64_t v25 = 2 * (v9 & 0xFFFFFFFE);
    uint64_t v26 = a4[2];
    uint64_t v27 = v22 + 2 * v15;
    uint64_t v28 = v23 + 2 * v15;
    uint64_t v29 = a3[2] + v26 * v8 + v25;
    uint64_t v30 = *a3 + v24 * v8 + v25;
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v29 + 2 * i);
          *(_WORD *)(v28 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFF0;
        }
      }
      v30 += v24;
      v28 += v20;
      v29 += v26;
      v27 += v21;
      ++v19;
    }
    while (v19 != v10);
  }
  unint64_t v32 = v8 & 1;
  if (v10 >= v32) {
    uint64_t v33 = v8 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  unint64_t v35 = v18 >> 1;
  uint64_t v36 = v9 & 1;
  if (v18 >> 1 >= (v18 - v36) >> 1) {
    unint64_t v35 = (v18 - v36) >> 1;
  }
  if (v8)
  {
    if (v34)
    {
      unint64_t v37 = v13 + 2;
      __int16 v44 = v13[1] & 0xFFF0;
      *uint64_t v17 = *v13 & 0xFFF0;
      v17[1] = v44;
      unint64_t v38 = v17 + 2;
      if (v35)
      {
LABEL_19:
        uint64_t v39 = -(uint64_t)v35;
        do
        {
          __int16 v40 = *v37;
          __int16 v41 = v37[1];
          v37 += 2;
          _WORD *v38 = v40 & 0xFFF0;
          v38[1] = v41 & 0xFFF0;
          v38 += 2;
          BOOL v42 = __CFADD__(v39++, 1);
        }
        while (!v42);
        uint64_t v43 = 2 * v35;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v37 = v13;
      unint64_t v38 = v17;
      if (v35) {
        goto LABEL_19;
      }
    }
    uint64_t v43 = 0;
LABEL_25:
    if ((v43 | (unint64_t)v36) < v18)
    {
      __int16 v45 = *v37 & 0xFFF0;
      __int16 v46 = v37[1] & 0xFFF0;
      _WORD *v38 = v45;
      v38[1] = v46;
    }
    unint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v10 == v33)
  {
    unint64_t v47 = 0;
  }
  else
  {
    uint64_t v48 = 0;
    unint64_t v47 = v10 - v33;
    do
    {
      BOOL v49 = v13;
      unint64_t v50 = (int16x4_t *)v17;
      if (v34)
      {
        BOOL v49 = v13 + 2;
        __int16 v51 = v13[1] & 0xFFF0;
        *uint64_t v17 = *v13 & 0xFFF0;
        v17[1] = v51;
        unint64_t v50 = (int16x4_t *)(v17 + 2);
      }
      if (v35)
      {
        uint64_t v52 = -(uint64_t)v35;
        do
        {
          unsigned int v53 = v49 + 2;
          v54.i32[0] = *v49 & 0xFFF0;
          v54.i32[1] = v49[1] & 0xFFF0;
          *v50++ = vuzp1_s16(v54, v54);
          v49 += 2;
          BOOL v42 = __CFADD__(v52++, 1);
        }
        while (!v42);
      }
      else
      {
        unsigned int v53 = v49;
      }
      if ((v36 | (2 * v35)) < v18)
      {
        __int16 v55 = *v53 & 0xFFF0;
        __int16 v56 = v53[1] & 0xFFF0;
        v50->i16[0] = v55;
        v50->i16[1] = v56;
      }
      unint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v48;
    }
    while (v48 != v47);
  }
  if (v47 + v32 < v10)
  {
    if (v34)
    {
      __int16 v57 = *v13;
      __int16 v58 = v13[1];
      v13 += 2;
      *uint64_t v17 = v57 & 0xFFF0;
      v17[1] = v58 & 0xFFF0;
      v17 += 2;
    }
    if (v35)
    {
      uint64_t v59 = -(uint64_t)v35;
      do
      {
        __int16 v60 = *v13;
        __int16 v61 = v13[1];
        v13 += 2;
        *uint64_t v17 = v60 & 0xFFF0;
        v17[1] = v61 & 0xFFF0;
        v17 += 2;
        BOOL v42 = __CFADD__(v59++, 1);
      }
      while (!v42);
      uint64_t v62 = 2 * v35;
    }
    else
    {
      uint64_t v62 = 0;
    }
    if ((v62 | (unint64_t)v36) < v18)
    {
      __int16 v63 = *v13 & 0xFFF0;
      __int16 v64 = v13[1] & 0xFFF0;
      *uint64_t v17 = v63;
      v17[1] = v64;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  unint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  unint64_t v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17) {
    unint64_t v20 = v17;
  }
  if (v10 >= v16) {
    unint64_t v10 = v16;
  }
  if (v10)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v25 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
          *(_WORD *)(v24 + 2 * i) = *(_WORD *)(v25 + 2 * i) & 0xFFF0;
      }
      v25 += v22;
      v24 += v23;
      ++v21;
    }
    while (v21 != v10);
  }
  unint64_t v27 = v8 & 1;
  if (v10 >= v27) {
    uint64_t v28 = v8 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v9;
  unint64_t v30 = v20 >> 1;
  uint64_t v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1) {
    unint64_t v30 = (v20 - v31) >> 1;
  }
  if (v8)
  {
    if (v29)
    {
      unint64_t v32 = v13 + 2;
      __int16 v39 = v13[1] & 0xFFF0;
      *uint64_t v19 = *v13 & 0xFFF0;
      v19[1] = v39;
      uint64_t v33 = v19 + 2;
      if (v30)
      {
LABEL_19:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          __int16 v35 = *v32;
          __int16 v36 = v32[1];
          v32 += 2;
          *uint64_t v33 = v35 & 0xFFF0;
          v33[1] = v36 & 0xFFF0;
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v32 = v13;
      uint64_t v33 = v19;
      if (v30) {
        goto LABEL_19;
      }
    }
    uint64_t v38 = 0;
LABEL_25:
    if ((v38 | (unint64_t)v31) < v20)
    {
      __int16 v40 = *v32 & 0xFFF0;
      __int16 v41 = v32[1] & 0xFFF0;
      *uint64_t v33 = v40;
      v33[1] = v41;
    }
    unint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v10 == v28)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v10 - v28;
    do
    {
      __int16 v44 = v13;
      __int16 v45 = (int16x4_t *)v19;
      if (v29)
      {
        __int16 v44 = v13 + 2;
        __int16 v46 = v13[1] & 0xFFF0;
        *uint64_t v19 = *v13 & 0xFFF0;
        v19[1] = v46;
        __int16 v45 = (int16x4_t *)(v19 + 2);
      }
      if (v30)
      {
        uint64_t v47 = -(uint64_t)v30;
        do
        {
          uint64_t v48 = v44 + 2;
          v49.i32[0] = *v44 & 0xFFF0;
          v49.i32[1] = v44[1] & 0xFFF0;
          *v45++ = vuzp1_s16(v49, v49);
          v44 += 2;
          BOOL v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      else
      {
        uint64_t v48 = v44;
      }
      if ((v31 | (2 * v30)) < v20)
      {
        __int16 v50 = *v48 & 0xFFF0;
        __int16 v51 = v48[1] & 0xFFF0;
        v45->i16[0] = v50;
        v45->i16[1] = v51;
      }
      unint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v10)
  {
    if (v29)
    {
      __int16 v52 = *v13;
      __int16 v53 = v13[1];
      v13 += 2;
      *uint64_t v19 = v52 & 0xFFF0;
      v19[1] = v53 & 0xFFF0;
      v19 += 2;
    }
    if (v30)
    {
      uint64_t v54 = -(uint64_t)v30;
      do
      {
        __int16 v55 = *v13;
        __int16 v56 = v13[1];
        v13 += 2;
        *uint64_t v19 = v55 & 0xFFF0;
        v19[1] = v56 & 0xFFF0;
        v19 += 2;
        BOOL v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      uint64_t v57 = 2 * v30;
    }
    else
    {
      uint64_t v57 = 0;
    }
    if ((v57 | (unint64_t)v31) < v20)
    {
      __int16 v58 = *v13 & 0xFFF0;
      __int16 v59 = v13[1] & 0xFFF0;
      *uint64_t v19 = v58;
      v19[1] = v59;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  unint64_t v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17) {
    unint64_t v20 = v17;
  }
  if (v10 >= v16) {
    unint64_t v21 = v16;
  }
  else {
    unint64_t v21 = v10;
  }
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          unsigned int v28 = *(unsigned __int16 *)(v26 + 2 * i);
          if (v28 >= 0xEB00) {
            unsigned int v28 = 60160;
          }
          if (v28 <= 0x1000) {
            unsigned int v28 = 4096;
          }
          *(_WORD *)(v25 + 2 * i) = 16 * ((-16773120 - v28 + (v28 << 12)) / 0xDB00);
        }
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  unint64_t v29 = v8 & 1;
  if (v21 >= v29) {
    uint64_t v30 = v8 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v20 >> 1;
  uint64_t v33 = v9 & 1;
  if (v20 >> 1 >= (v20 - v33) >> 1) {
    unint64_t v32 = (v20 - v33) >> 1;
  }
  if (v8)
  {
    if (v31)
    {
      unsigned int v41 = *v13;
      unsigned int v42 = v13[1];
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        unsigned int v41 = 4096;
      }
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      uint64_t v34 = v13 + 2;
      *uint64_t v19 = 16 * ((613566757 * (unint64_t)((-16773120 - v41 + (v41 << 12)) >> 13)) >> 32);
      v19[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v43 + (v43 << 12)) >> 13)) >> 32);
      __int16 v35 = v19 + 2;
      if (v32) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v34 = v13;
      __int16 v35 = v19;
      if (v32)
      {
LABEL_24:
        uint64_t v36 = -(uint64_t)v32;
        do
        {
          unsigned int v37 = *v34;
          unsigned int v38 = v34[1];
          if (v37 >= 0xF000) {
            unsigned int v37 = 61440;
          }
          if (v37 <= 0x1000) {
            unsigned int v37 = 4096;
          }
          if (v38 >= 0xF000) {
            unsigned int v38 = 61440;
          }
          if (v38 <= 0x1000) {
            unsigned int v38 = 4096;
          }
          v34 += 2;
          *__int16 v35 = 16 * ((613566757 * (unint64_t)((-16773120 - v37 + (v37 << 12)) >> 13)) >> 32);
          v35[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v38 + (v38 << 12)) >> 13)) >> 32);
          v35 += 2;
          BOOL v39 = __CFADD__(v36++, 1);
        }
        while (!v39);
        uint64_t v40 = 2 * v32;
        goto LABEL_47;
      }
    }
    uint64_t v40 = 0;
LABEL_47:
    if ((v40 | (unint64_t)v33) < v20)
    {
      unsigned int v44 = *v34;
      unsigned int v45 = v34[1];
      if (v44 >= 0xF000) {
        unsigned int v44 = 61440;
      }
      if (v44 <= 0x1000) {
        unsigned int v44 = 4096;
      }
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        unsigned int v45 = 4096;
      }
      *__int16 v35 = 16 * ((613566757 * (unint64_t)((-16773120 - v44 + (v44 << 12)) >> 13)) >> 32);
      v35[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v45 + (v45 << 12)) >> 13)) >> 32);
    }
    unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v30)
  {
    unint64_t v46 = 0;
  }
  else
  {
    uint64_t v47 = 0;
    unint64_t v46 = v21 - v30;
    int32x2_t v48 = vdup_n_s32(0xFF001000);
    uint32x2_t v49 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      __int16 v50 = v13;
      __int16 v51 = (int16x4_t *)v19;
      if (v31)
      {
        unsigned int v52 = *v13;
        unsigned int v53 = v13[1];
        if (v52 >= 0xF000) {
          unsigned int v52 = 61440;
        }
        if (v52 <= 0x1000) {
          unsigned int v52 = 4096;
        }
        if (v53 >= 0xF000) {
          unsigned int v53 = 61440;
        }
        if (v53 <= 0x1000) {
          int v54 = 4096;
        }
        else {
          int v54 = v53;
        }
        __int16 v50 = v13 + 2;
        *uint64_t v19 = 16 * ((613566757 * (unint64_t)((-16773120 - v52 + (v52 << 12)) >> 13)) >> 32);
        v19[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v54 + (v54 << 12)) >> 13)) >> 32);
        __int16 v51 = (int16x4_t *)(v19 + 2);
      }
      if (v32)
      {
        uint64_t v55 = -(uint64_t)v32;
        do
        {
          __int16 v56 = v50 + 2;
          v57.i32[0] = *v50;
          v57.i32[1] = v50[1];
          int16x4_t v58 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v48, (int32x2_t)vmax_u32(vmin_u32(v57, (uint32x2_t)0xF0000000F000), (uint32x2_t)0x100000001000), (int32x2_t)0xF0000000FLL), 0xDuLL), v49), 0x20uLL), 4uLL);
          *v51++ = vuzp1_s16(v58, v58);
          v50 += 2;
          BOOL v39 = __CFADD__(v55++, 1);
        }
        while (!v39);
      }
      else
      {
        __int16 v56 = v50;
      }
      if ((v33 | (2 * v32)) < v20)
      {
        unsigned int v59 = *v56;
        unsigned int v60 = v56[1];
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          unsigned int v59 = 4096;
        }
        if (v60 >= 0xF000) {
          unsigned int v60 = 61440;
        }
        if (v60 <= 0x1000) {
          unsigned int v60 = 4096;
        }
        v51->i16[0] = 16 * ((613566757 * (unint64_t)((-16773120 - v59 + (v59 << 12)) >> 13)) >> 32);
        v51->i16[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v60 + (v60 << 12)) >> 13)) >> 32);
      }
      unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v47;
    }
    while (v47 != v46);
  }
  if (v46 + v29 < v21)
  {
    if (v31)
    {
      unsigned int v61 = *v13;
      unsigned int v62 = v13[1];
      if (v61 >= 0xF000) {
        unsigned int v61 = 61440;
      }
      if (v61 <= 0x1000) {
        unsigned int v61 = 4096;
      }
      if (v62 >= 0xF000) {
        unsigned int v62 = 61440;
      }
      if (v62 <= 0x1000) {
        unsigned int v62 = 4096;
      }
      v13 += 2;
      *uint64_t v19 = 16 * ((613566757 * (unint64_t)((-16773120 - v61 + (v61 << 12)) >> 13)) >> 32);
      v19[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v62 + (v62 << 12)) >> 13)) >> 32);
      v19 += 2;
    }
    if (v32)
    {
      uint64_t v63 = -(uint64_t)v32;
      do
      {
        unsigned int v64 = *v13;
        unsigned int v65 = v13[1];
        if (v64 >= 0xF000) {
          unsigned int v64 = 61440;
        }
        if (v64 <= 0x1000) {
          unsigned int v64 = 4096;
        }
        if (v65 >= 0xF000) {
          unsigned int v65 = 61440;
        }
        if (v65 <= 0x1000) {
          unsigned int v65 = 4096;
        }
        v13 += 2;
        *uint64_t v19 = 16 * ((613566757 * (unint64_t)((-16773120 - v64 + (v64 << 12)) >> 13)) >> 32);
        v19[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v65 + (v65 << 12)) >> 13)) >> 32);
        v19 += 2;
        BOOL v39 = __CFADD__(v63++, 1);
      }
      while (!v39);
      v32 *= 2;
    }
    if ((v32 | v33) < v20)
    {
      unsigned int v66 = *v13;
      unsigned int v67 = v13[1];
      if (v66 >= 0xF000) {
        unsigned int v66 = 61440;
      }
      if (v66 <= 0x1000) {
        unsigned int v66 = 4096;
      }
      if (v67 >= 0xF000) {
        unsigned int v67 = 61440;
      }
      if (v67 <= 0x1000) {
        unsigned int v67 = 4096;
      }
      *uint64_t v19 = 16 * ((613566757 * (unint64_t)((-16773120 - v66 + (v66 << 12)) >> 13)) >> 32);
      v19[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v67 + (v67 << 12)) >> 13)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_s2as_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = 2 * (v10 + v9);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v15;
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) >= v16 - v15) {
    unint64_t v21 = v16 - v15;
  }
  else {
    unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v17;
    uint64_t v26 = *a7 + *a8 * v17;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v18;
    uint64_t v30 = v26 + v18;
    uint64_t v31 = a3[2] + v28 * v11 + v12;
    uint64_t v32 = *a3 + v27 * v11 + v12;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFF0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v11 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v11 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  unint64_t v37 = v21 >> 1;
  unint64_t v38 = (v21 - v10) >> 1;
  if (v37 >= v38) {
    unint64_t v37 = v38;
  }
  if (v11)
  {
    if (v36)
    {
      BOOL v39 = v14 + 2;
      __int16 v41 = v14[1] & 0xFFF0;
      *unint64_t v20 = *v14 & 0xFFF0;
      v20[1] = v41;
      uint64_t v40 = v20 + 2;
      if (!v37)
      {
LABEL_25:
        uint64_t v14 = (_WORD *)((char *)v14 + v13);
        unint64_t v20 = (_WORD *)((char *)v20 + v19);
        goto LABEL_26;
      }
    }
    else
    {
      BOOL v39 = v14;
      uint64_t v40 = v20;
      if (!v37) {
        goto LABEL_25;
      }
    }
    uint64_t v42 = -(uint64_t)v37;
    do
    {
      __int16 v43 = v39[1] & 0xFFF0;
      *uint64_t v40 = *v39 & 0xFFF0;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v35)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v8 - v35;
    do
    {
      uint64_t v47 = v14;
      int32x2_t v48 = v20;
      if (v36)
      {
        uint64_t v47 = v14 + 2;
        __int16 v49 = v14[1] & 0xFFF0;
        *unint64_t v20 = *v14 & 0xFFF0;
        v20[1] = v49;
        int32x2_t v48 = v20 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          __int16 v51 = v47[1] & 0xFFF0;
          *int32x2_t v48 = *v47 & 0xFFF0;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          BOOL v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      unint64_t v20 = (_WORD *)((char *)v20 + v19);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v34 < v8)
  {
    if (v36)
    {
      __int16 v52 = *v14;
      __int16 v53 = v14[1];
      v14 += 2;
      *unint64_t v20 = v52 & 0xFFF0;
      v20[1] = v53 & 0xFFF0;
      v20 += 2;
    }
    if (v37)
    {
      uint64_t v54 = -(uint64_t)v37;
      do
      {
        __int16 v55 = v14[1] & 0xFFF0;
        *unint64_t v20 = *v14 & 0xFFF0;
        v20[1] = v55;
        v14 += 2;
        v20 += 2;
        BOOL v44 = __CFADD__(v54++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v19;
    uint64_t v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = *(_WORD *)(v27 + 2 * i) & 0xFFF0;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v22 >> 1;
  unint64_t v33 = (v22 - v10) >> 1;
  if (v32 >= v33) {
    unint64_t v32 = v33;
  }
  if (v12)
  {
    if (v31)
    {
      unint64_t v34 = v14 + 2;
      __int16 v36 = v14[1] & 0xFFF0;
      _WORD *v21 = *v14 & 0xFFF0;
      v21[1] = v36;
      uint64_t v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        uint64_t v14 = (_WORD *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
      if (!v32) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = -(uint64_t)v32;
    do
    {
      __int16 v38 = v34[1] & 0xFFF0;
      *uint64_t v35 = *v34 & 0xFFF0;
      v35[1] = v38;
      v34 += 2;
      v35 += 2;
      BOOL v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v30;
    do
    {
      uint64_t v42 = v14;
      __int16 v43 = v21;
      if (v31)
      {
        uint64_t v42 = v14 + 2;
        __int16 v44 = v14[1] & 0xFFF0;
        _WORD *v21 = *v14 & 0xFFF0;
        v21[1] = v44;
        __int16 v43 = v21 + 2;
      }
      if (v32)
      {
        uint64_t v45 = -(uint64_t)v32;
        do
        {
          __int16 v46 = v42[1] & 0xFFF0;
          *__int16 v43 = *v42 & 0xFFF0;
          v43[1] = v46;
          v42 += 2;
          v43 += 2;
          BOOL v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if (v31)
    {
      __int16 v47 = *v14;
      __int16 v48 = v14[1];
      v14 += 2;
      _WORD *v21 = v47 & 0xFFF0;
      v21[1] = v48 & 0xFFF0;
      v21 += 2;
    }
    if (v32)
    {
      uint64_t v49 = -(uint64_t)v32;
      do
      {
        __int16 v50 = v14[1] & 0xFFF0;
        _WORD *v21 = *v14 & 0xFFF0;
        v21[1] = v50;
        v14 += 2;
        v21 += 2;
        BOOL v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v19;
    uint64_t v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v29 = *(unsigned __int16 *)(v27 + 2 * i);
          if (v29 >= 0xEB00) {
            unsigned int v29 = 60160;
          }
          if (v29 <= 0x1000) {
            unsigned int v29 = 4096;
          }
          *(_WORD *)(v26 + 2 * i) = 16 * ((-16773120 - v29 + (v29 << 12)) / 0xDB00);
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  unint64_t v33 = v22 >> 1;
  if (v22 >> 1 >= (v22 - v10) >> 1) {
    unint64_t v33 = (v22 - v10) >> 1;
  }
  if (v12)
  {
    if (v32)
    {
      unsigned int v36 = *v14;
      if (v36 >= 0xF000) {
        unsigned int v36 = 61440;
      }
      if (v36 <= 0x1000) {
        int v37 = 4096;
      }
      else {
        int v37 = v36;
      }
      if (v14[1] >= 0xF000u) {
        unsigned int v38 = 61440;
      }
      else {
        unsigned int v38 = v14[1];
      }
      if (v38 <= 0x1000) {
        int v39 = 4096;
      }
      else {
        int v39 = v38;
      }
      unint64_t v34 = v14 + 2;
      _WORD *v21 = 16 * ((613566757 * (unint64_t)((-16773120 - v37 + (v37 << 12)) >> 13)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v39 + (v39 << 12)) >> 13)) >> 32);
      uint64_t v35 = v21 + 2;
      if (!v33) {
        goto LABEL_48;
      }
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
      if (!v33)
      {
LABEL_48:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_49;
      }
    }
    uint64_t v40 = -(uint64_t)v33;
    do
    {
      unsigned int v41 = *v34;
      unsigned int v42 = v34[1];
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        unsigned int v41 = 4096;
      }
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        unsigned int v42 = 4096;
      }
      *uint64_t v35 = 16 * ((613566757 * (unint64_t)((-16773120 - v41 + (v41 << 12)) >> 13)) >> 32);
      v35[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v42 + (v42 << 12)) >> 13)) >> 32);
      v34 += 2;
      v35 += 2;
      BOOL v43 = __CFADD__(v40++, 1);
    }
    while (!v43);
    goto LABEL_48;
  }
LABEL_49:
  if (v8 == v31)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v31;
    do
    {
      __int16 v46 = v14;
      __int16 v47 = v21;
      if (v32)
      {
        unsigned int v48 = *v14;
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          int v49 = 4096;
        }
        else {
          int v49 = v48;
        }
        if (v14[1] >= 0xF000u) {
          unsigned int v50 = 61440;
        }
        else {
          unsigned int v50 = v14[1];
        }
        if (v50 <= 0x1000) {
          int v51 = 4096;
        }
        else {
          int v51 = v50;
        }
        __int16 v46 = v14 + 2;
        _WORD *v21 = 16 * ((613566757 * (unint64_t)((-16773120 - v49 + (v49 << 12)) >> 13)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v51 + (v51 << 12)) >> 13)) >> 32);
        __int16 v47 = v21 + 2;
      }
      if (v33)
      {
        uint64_t v52 = -(uint64_t)v33;
        do
        {
          unsigned int v53 = *v46;
          unsigned int v54 = v46[1];
          if (v53 >= 0xF000) {
            unsigned int v53 = 61440;
          }
          if (v53 <= 0x1000) {
            unsigned int v53 = 4096;
          }
          if (v54 >= 0xF000) {
            unsigned int v54 = 61440;
          }
          if (v54 <= 0x1000) {
            unsigned int v54 = 4096;
          }
          _WORD *v47 = 16 * ((613566757 * (unint64_t)((-16773120 - v53 + (v53 << 12)) >> 13)) >> 32);
          v47[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v54 + (v54 << 12)) >> 13)) >> 32);
          v46 += 2;
          v47 += 2;
          BOOL v43 = __CFADD__(v52++, 1);
        }
        while (!v43);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v30 < v8)
  {
    if (v32)
    {
      unsigned int v55 = *v14;
      unsigned int v56 = v14[1];
      if (v55 >= 0xF000) {
        unsigned int v55 = 61440;
      }
      if (v55 <= 0x1000) {
        unsigned int v55 = 4096;
      }
      if (v56 >= 0xF000) {
        unsigned int v56 = 61440;
      }
      if (v56 <= 0x1000) {
        unsigned int v56 = 4096;
      }
      v14 += 2;
      _WORD *v21 = 16 * ((613566757 * (unint64_t)((-16773120 - v55 + (v55 << 12)) >> 13)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v56 + (v56 << 12)) >> 13)) >> 32);
      v21 += 2;
    }
    if (v33)
    {
      uint64_t v57 = -(uint64_t)v33;
      do
      {
        unsigned int v58 = *v14;
        unsigned int v59 = v14[1];
        if (v58 >= 0xF000) {
          unsigned int v58 = 61440;
        }
        if (v58 <= 0x1000) {
          unsigned int v58 = 4096;
        }
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          unsigned int v59 = 4096;
        }
        _WORD *v21 = 16 * ((613566757 * (unint64_t)((-16773120 - v58 + (v58 << 12)) >> 13)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v59 + (v59 << 12)) >> 13)) >> 32);
        v14 += 2;
        v21 += 2;
        BOOL v43 = __CFADD__(v57++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = 2 * v10;
  uint64_t v16 = a4[1];
  uint64_t v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v9) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v20 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v21 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v22 = 2 * v18;
  uint64_t v23 = a8[1];
  uint64_t v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v25 = v11 - v10;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  unint64_t v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20) {
    unint64_t v27 = v21 - v20;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v15 + v32;
    uint64_t v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFF0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v26 - (v8 & 1);
  if (v26 >> 1 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v26 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      int v39 = v17 + 2;
      int v41 = (*(unsigned __int16 *)((char *)v17 + v16 + 2) >> 4) + (v17[1] >> 4);
      *uint64_t v24 = (8 * ((*(unsigned __int16 *)((char *)v17 + v16) >> 4) + (*v17 >> 4)) + 8) & 0xFFF0;
      v24[1] = (8 * v41 + 8) & 0xFFF0;
      uint64_t v40 = v24 + 2;
      if (!v38)
      {
LABEL_28:
        v17 += v16;
        uint64_t v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      int v39 = v17;
      uint64_t v40 = v24;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v42 = -(uint64_t)v38;
    do
    {
      unsigned int v43 = *v39;
      unsigned int v44 = v39[1];
      unsigned int v45 = *(unsigned __int16 *)((char *)v39 + v16);
      unsigned int v46 = *(unsigned __int16 *)((char *)v39 + v16 + 2);
      v39 += 2;
      *uint64_t v40 = (8 * ((v45 >> 4) + (v43 >> 4)) + 8) & 0xFFF0;
      v40[1] = (8 * ((v46 >> 4) + (v44 >> 4)) + 8) & 0xFFF0;
      v40 += 2;
      BOOL v47 = __CFADD__(v42++, 1);
    }
    while (!v47);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v27 - v36;
    do
    {
      unsigned int v50 = v17;
      int v51 = v24;
      if (v8)
      {
        unsigned int v50 = v17 + 2;
        int v52 = (*(unsigned __int16 *)((char *)v17 + v16 + 2) >> 4) + (v17[1] >> 4);
        *uint64_t v24 = (8 * ((*(unsigned __int16 *)((char *)v17 + v16) >> 4) + (*v17 >> 4)) + 8) & 0xFFF0;
        v24[1] = (8 * v52 + 8) & 0xFFF0;
        int v51 = v24 + 2;
      }
      if (v38)
      {
        uint64_t v53 = -(uint64_t)v38;
        do
        {
          unsigned int v54 = *v50;
          unsigned int v55 = v50[1];
          unsigned int v56 = *(unsigned __int16 *)((char *)v50 + v16);
          unsigned int v57 = *(unsigned __int16 *)((char *)v50 + v16 + 2);
          v50 += 2;
          *int v51 = (8 * ((v56 >> 4) + (v54 >> 4)) + 8) & 0xFFF0;
          v51[1] = (8 * ((v57 >> 4) + (v55 >> 4)) + 8) & 0xFFF0;
          v51 += 2;
          BOOL v47 = __CFADD__(v53++, 1);
        }
        while (!v47);
      }
      v17 += v16;
      uint64_t v24 = (_WORD *)((char *)v24 + v23);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = 2 * v10;
  uint64_t v16 = a4[1];
  uint64_t v17 = (_WORD *)(a3[1] + v16 * (v12 + v9) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v20 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v21 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v22 = 2 * v18;
  uint64_t v23 = a8[1];
  uint64_t v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v25 = v11 - v10;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  unint64_t v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20) {
    unint64_t v27 = v21 - v20;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v15 + v32;
    uint64_t v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFF0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v26 - (v8 & 1);
  if (v26 >> 1 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v26 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      int v39 = v17 + 2;
      __int16 v41 = v17[1] & 0xFFF0;
      *uint64_t v24 = *v17 & 0xFFF0;
      v24[1] = v41;
      uint64_t v40 = v24 + 2;
      if (!v38)
      {
LABEL_28:
        v17 += v16;
        uint64_t v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      int v39 = v17;
      uint64_t v40 = v24;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v42 = -(uint64_t)v38;
    do
    {
      __int16 v43 = v39[1] & 0xFFF0;
      *uint64_t v40 = *v39 & 0xFFF0;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v27 - v36;
    uint64_t v47 = 2 * v16;
    do
    {
      unint64_t v48 = v17;
      unint64_t v49 = v24;
      if (v8)
      {
        unint64_t v48 = v17 + 2;
        __int16 v50 = v17[1] & 0xFFF0;
        *uint64_t v24 = *v17 & 0xFFF0;
        v24[1] = v50;
        unint64_t v49 = v24 + 2;
      }
      if (v38)
      {
        uint64_t v51 = -(uint64_t)v38;
        do
        {
          __int16 v52 = v48[1] & 0xFFF0;
          *unint64_t v49 = *v48 & 0xFFF0;
          v49[1] = v52;
          v48 += 2;
          v49 += 2;
          BOOL v44 = __CFADD__(v51++, 1);
        }
        while (!v44);
      }
      uint64_t v17 = (_WORD *)((char *)v17 + v47);
      uint64_t v24 = (_WORD *)((char *)v24 + v23);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = 2 * v10;
  uint64_t v16 = a4[1];
  uint64_t v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v20 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v21 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v22 = 2 * v18;
  uint64_t v23 = a8[1];
  uint64_t v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v25 = v11 - v10;
  if (v25 >= v19 - v18) {
    unint64_t v26 = v19 - v18;
  }
  else {
    unint64_t v26 = v25;
  }
  unint64_t v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20) {
    unint64_t v27 = v21 - v20;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v15 + v32;
    uint64_t v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(_WORD *)(v34 + 2 * i) = 16 * ((-16773120 - v36 + (v36 << 12)) / 0xDB00);
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  unint64_t v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v26 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v42 = *v17;
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      if (v17[1] >= 0xF000u) {
        unsigned int v44 = 61440;
      }
      else {
        unsigned int v44 = v17[1];
      }
      if (v44 <= 0x1000) {
        int v45 = 4096;
      }
      else {
        int v45 = v44;
      }
      if (*(unsigned __int16 *)((char *)v17 + v16) >= 0xF000u) {
        unsigned int v46 = 61440;
      }
      else {
        unsigned int v46 = *(unsigned __int16 *)((char *)v17 + v16);
      }
      if (v46 <= 0x1000) {
        int v47 = 4096;
      }
      else {
        int v47 = v46;
      }
      if (*(unsigned __int16 *)((char *)v17 + v16 + 2) >= 0xF000u) {
        unsigned int v48 = 61440;
      }
      else {
        unsigned int v48 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
      }
      if (v48 <= 0x1000) {
        int v49 = 4096;
      }
      else {
        int v49 = v48;
      }
      uint64_t v40 = v17 + 2;
      *uint64_t v24 = (8
            * (((613566757 * (unint64_t)((-16773120 - v47 + (v47 << 12)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-16773120 - v43 + (v43 << 12)) >> 13)) >> 32))
            + 8) & 0xFFF0;
      v24[1] = (8
              * (((613566757 * (unint64_t)((-16773120 - v49 + (v49 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v45 + (v45 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
      __int16 v41 = v24 + 2;
      if (!v39) {
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v40 = v17;
      __int16 v41 = v24;
      if (!v39)
      {
LABEL_72:
        v17 += v16;
        uint64_t v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_73;
      }
    }
    uint64_t v50 = -(uint64_t)v39;
    do
    {
      unsigned int v51 = *v40;
      unsigned int v52 = v40[1];
      unsigned int v53 = *(unsigned __int16 *)((char *)v40 + v16);
      unsigned int v54 = *(unsigned __int16 *)((char *)v40 + v16 + 2);
      if (v51 >= 0xF000) {
        unsigned int v51 = 61440;
      }
      if (v51 <= 0x1000) {
        unsigned int v51 = 4096;
      }
      if (v52 >= 0xF000) {
        unsigned int v52 = 61440;
      }
      if (v52 <= 0x1000) {
        unsigned int v52 = 4096;
      }
      if (v53 >= 0xF000) {
        unsigned int v53 = 61440;
      }
      if (v53 <= 0x1000) {
        unsigned int v53 = 4096;
      }
      if (v54 >= 0xF000) {
        unsigned int v54 = 61440;
      }
      if (v54 <= 0x1000) {
        unsigned int v54 = 4096;
      }
      v40 += 2;
      _WORD *v41 = (8
            * (((613566757 * (unint64_t)((-16773120 - v53 + (v53 << 12)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-16773120 - v51 + (v51 << 12)) >> 13)) >> 32))
            + 8) & 0xFFF0;
      v41[1] = (8
              * (((613566757 * (unint64_t)((-16773120 - v54 + (v54 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v52 + (v52 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
      v41 += 2;
      BOOL v55 = __CFADD__(v50++, 1);
    }
    while (!v55);
    goto LABEL_72;
  }
LABEL_73:
  if (v27 != v37)
  {
    unint64_t v56 = 0;
    unint64_t v57 = v27 - v37;
    do
    {
      unsigned int v58 = v17;
      unsigned int v59 = v24;
      if (v9)
      {
        unsigned int v60 = *v17;
        if (v60 >= 0xF000) {
          unsigned int v60 = 61440;
        }
        if (v60 <= 0x1000) {
          int v61 = 4096;
        }
        else {
          int v61 = v60;
        }
        if (v17[1] >= 0xF000u) {
          unsigned int v62 = 61440;
        }
        else {
          unsigned int v62 = v17[1];
        }
        if (v62 <= 0x1000) {
          int v63 = 4096;
        }
        else {
          int v63 = v62;
        }
        if (*(unsigned __int16 *)((char *)v17 + v16) >= 0xF000u) {
          unsigned int v64 = 61440;
        }
        else {
          unsigned int v64 = *(unsigned __int16 *)((char *)v17 + v16);
        }
        if (v64 <= 0x1000) {
          int v65 = 4096;
        }
        else {
          int v65 = v64;
        }
        if (*(unsigned __int16 *)((char *)v17 + v16 + 2) >= 0xF000u) {
          unsigned int v66 = 61440;
        }
        else {
          unsigned int v66 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
        }
        if (v66 <= 0x1000) {
          int v67 = 4096;
        }
        else {
          int v67 = v66;
        }
        unsigned int v58 = v17 + 2;
        *uint64_t v24 = (8
              * (((613566757 * (unint64_t)((-16773120 - v65 + (v65 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v61 + (v61 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
        v24[1] = (8
                * (((613566757 * (unint64_t)((-16773120 - v67 + (v67 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v63 + (v63 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
        unsigned int v59 = v24 + 2;
      }
      if (v39)
      {
        uint64_t v68 = -(uint64_t)v39;
        do
        {
          unsigned int v69 = *v58;
          unsigned int v70 = v58[1];
          unsigned int v71 = *(unsigned __int16 *)((char *)v58 + v16);
          unsigned int v72 = *(unsigned __int16 *)((char *)v58 + v16 + 2);
          if (v69 >= 0xF000) {
            unsigned int v69 = 61440;
          }
          if (v69 <= 0x1000) {
            unsigned int v69 = 4096;
          }
          if (v70 >= 0xF000) {
            unsigned int v70 = 61440;
          }
          if (v70 <= 0x1000) {
            unsigned int v70 = 4096;
          }
          if (v71 >= 0xF000) {
            unsigned int v71 = 61440;
          }
          if (v71 <= 0x1000) {
            unsigned int v71 = 4096;
          }
          if (v72 >= 0xF000) {
            unsigned int v72 = 61440;
          }
          if (v72 <= 0x1000) {
            unsigned int v72 = 4096;
          }
          v58 += 2;
          *unsigned int v59 = (8
                * (((613566757 * (unint64_t)((-16773120 - v71 + (v71 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v69 + (v69 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
          v59[1] = (8
                  * (((613566757 * (unint64_t)((-16773120 - v72 + (v72 << 12)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-16773120 - v70 + (v70 << 12)) >> 13)) >> 32))
                  + 8) & 0xFFF0;
          v59 += 2;
          BOOL v55 = __CFADD__(v68++, 1);
        }
        while (!v55);
      }
      v17 += v16;
      uint64_t v24 = (_WORD *)((char *)v24 + v23);
      v56 += 2;
    }
    while (v56 < v57);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = 2 * v10;
  uint64_t v16 = a4[1];
  uint64_t v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v20 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v21 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v22 = 2 * v18;
  uint64_t v23 = a8[1];
  uint64_t v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v25 = v11 - v10;
  if (v25 >= v19 - v18) {
    unint64_t v26 = v19 - v18;
  }
  else {
    unint64_t v26 = v25;
  }
  unint64_t v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20) {
    unint64_t v27 = v21 - v20;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v15 + v32;
    uint64_t v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(_WORD *)(v34 + 2 * i) = 16 * ((-16773120 - v36 + (v36 << 12)) / 0xDB00);
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  unint64_t v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v26 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v42 = *v17;
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      if (v17[1] >= 0xF000u) {
        unsigned int v44 = 61440;
      }
      else {
        unsigned int v44 = v17[1];
      }
      if (v44 <= 0x1000) {
        int v45 = 4096;
      }
      else {
        int v45 = v44;
      }
      uint64_t v40 = v17 + 2;
      *uint64_t v24 = 16 * ((613566757 * (unint64_t)((-16773120 - v43 + (v43 << 12)) >> 13)) >> 32);
      v24[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v45 + (v45 << 12)) >> 13)) >> 32);
      __int16 v41 = v24 + 2;
      if (!v39) {
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v40 = v17;
      __int16 v41 = v24;
      if (!v39)
      {
LABEL_52:
        v17 += v16;
        uint64_t v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_53;
      }
    }
    uint64_t v46 = -(uint64_t)v39;
    do
    {
      unsigned int v47 = *v40;
      unsigned int v48 = v40[1];
      if (v47 >= 0xF000) {
        unsigned int v47 = 61440;
      }
      if (v47 <= 0x1000) {
        unsigned int v47 = 4096;
      }
      if (v48 >= 0xF000) {
        unsigned int v48 = 61440;
      }
      if (v48 <= 0x1000) {
        unsigned int v48 = 4096;
      }
      _WORD *v41 = 16 * ((613566757 * (unint64_t)((-16773120 - v47 + (v47 << 12)) >> 13)) >> 32);
      v41[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v48 + (v48 << 12)) >> 13)) >> 32);
      v40 += 2;
      v41 += 2;
      BOOL v49 = __CFADD__(v46++, 1);
    }
    while (!v49);
    goto LABEL_52;
  }
LABEL_53:
  if (v27 != v37)
  {
    unint64_t v50 = 0;
    unint64_t v51 = v27 - v37;
    uint64_t v52 = 2 * v16;
    do
    {
      unsigned int v53 = v17;
      unsigned int v54 = v24;
      if (v9)
      {
        unsigned int v55 = *v17;
        if (v55 >= 0xF000) {
          unsigned int v55 = 61440;
        }
        if (v55 <= 0x1000) {
          int v56 = 4096;
        }
        else {
          int v56 = v55;
        }
        if (v17[1] >= 0xF000u) {
          unsigned int v57 = 61440;
        }
        else {
          unsigned int v57 = v17[1];
        }
        if (v57 <= 0x1000) {
          int v58 = 4096;
        }
        else {
          int v58 = v57;
        }
        unsigned int v53 = v17 + 2;
        *uint64_t v24 = 16 * ((613566757 * (unint64_t)((-16773120 - v56 + (v56 << 12)) >> 13)) >> 32);
        v24[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v58 + (v58 << 12)) >> 13)) >> 32);
        unsigned int v54 = v24 + 2;
      }
      if (v39)
      {
        uint64_t v59 = -(uint64_t)v39;
        do
        {
          unsigned int v60 = *v53;
          unsigned int v61 = v53[1];
          if (v60 >= 0xF000) {
            unsigned int v60 = 61440;
          }
          if (v60 <= 0x1000) {
            unsigned int v60 = 4096;
          }
          if (v61 >= 0xF000) {
            unsigned int v61 = 61440;
          }
          if (v61 <= 0x1000) {
            unsigned int v61 = 4096;
          }
          *unsigned int v54 = 16 * ((613566757 * (unint64_t)((-16773120 - v60 + (v60 << 12)) >> 13)) >> 32);
          v54[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v61 + (v61 << 12)) >> 13)) >> 32);
          v53 += 2;
          v54 += 2;
          BOOL v49 = __CFADD__(v59++, 1);
        }
        while (!v49);
      }
      uint64_t v17 = (unsigned __int16 *)((char *)v17 + v52);
      uint64_t v24 = (_WORD *)((char *)v24 + v23);
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_Copy_s2as_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  unint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  unint64_t v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2]) {
    unint64_t v18 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v10 = a6[3];
  }
  if (v10)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14;
    uint64_t v23 = *a7 + *a8 * v14;
    uint64_t v24 = *a4;
    uint64_t v25 = 2 * (v9 & 0xFFFFFFFE);
    uint64_t v26 = a4[2];
    uint64_t v27 = v22 + 2 * v15;
    uint64_t v28 = v23 + 2 * v15;
    uint64_t v29 = a3[2] + v26 * v8 + v25;
    uint64_t v30 = *a3 + v24 * v8 + v25;
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v29 + 2 * i);
          *(_WORD *)(v28 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v24;
      v28 += v20;
      v29 += v26;
      v27 += v21;
      ++v19;
    }
    while (v19 != v10);
  }
  unint64_t v32 = v8 & 1;
  if (v10 >= v32) {
    uint64_t v33 = v8 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  unint64_t v35 = v18 >> 1;
  uint64_t v36 = v9 & 1;
  if (v18 >> 1 >= (v18 - v36) >> 1) {
    unint64_t v35 = (v18 - v36) >> 1;
  }
  if (v8)
  {
    if (v34)
    {
      unint64_t v37 = v13 + 2;
      __int16 v44 = v13[1] & 0xFFC0;
      *uint64_t v17 = *v13 & 0xFFC0;
      v17[1] = v44;
      unint64_t v38 = v17 + 2;
      if (v35)
      {
LABEL_19:
        uint64_t v39 = -(uint64_t)v35;
        do
        {
          __int16 v40 = *v37;
          __int16 v41 = v37[1];
          v37 += 2;
          _WORD *v38 = v40 & 0xFFC0;
          v38[1] = v41 & 0xFFC0;
          v38 += 2;
          BOOL v42 = __CFADD__(v39++, 1);
        }
        while (!v42);
        uint64_t v43 = 2 * v35;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v37 = v13;
      unint64_t v38 = v17;
      if (v35) {
        goto LABEL_19;
      }
    }
    uint64_t v43 = 0;
LABEL_25:
    if ((v43 | (unint64_t)v36) < v18)
    {
      __int16 v45 = *v37 & 0xFFC0;
      __int16 v46 = v37[1] & 0xFFC0;
      _WORD *v38 = v45;
      v38[1] = v46;
    }
    unint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v10 == v33)
  {
    unint64_t v47 = 0;
  }
  else
  {
    uint64_t v48 = 0;
    unint64_t v47 = v10 - v33;
    do
    {
      BOOL v49 = v13;
      unint64_t v50 = (int16x4_t *)v17;
      if (v34)
      {
        BOOL v49 = v13 + 2;
        __int16 v51 = v13[1] & 0xFFC0;
        *uint64_t v17 = *v13 & 0xFFC0;
        v17[1] = v51;
        unint64_t v50 = (int16x4_t *)(v17 + 2);
      }
      if (v35)
      {
        uint64_t v52 = -(uint64_t)v35;
        do
        {
          unsigned int v53 = v49 + 2;
          v54.i32[0] = *v49 & 0xFFC0;
          v54.i32[1] = v49[1] & 0xFFC0;
          *v50++ = vuzp1_s16(v54, v54);
          v49 += 2;
          BOOL v42 = __CFADD__(v52++, 1);
        }
        while (!v42);
      }
      else
      {
        unsigned int v53 = v49;
      }
      if ((v36 | (2 * v35)) < v18)
      {
        __int16 v55 = *v53 & 0xFFC0;
        __int16 v56 = v53[1] & 0xFFC0;
        v50->i16[0] = v55;
        v50->i16[1] = v56;
      }
      unint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v48;
    }
    while (v48 != v47);
  }
  if (v47 + v32 < v10)
  {
    if (v34)
    {
      __int16 v57 = *v13;
      __int16 v58 = v13[1];
      v13 += 2;
      *uint64_t v17 = v57 & 0xFFC0;
      v17[1] = v58 & 0xFFC0;
      v17 += 2;
    }
    if (v35)
    {
      uint64_t v59 = -(uint64_t)v35;
      do
      {
        __int16 v60 = *v13;
        __int16 v61 = v13[1];
        v13 += 2;
        *uint64_t v17 = v60 & 0xFFC0;
        v17[1] = v61 & 0xFFC0;
        v17 += 2;
        BOOL v42 = __CFADD__(v59++, 1);
      }
      while (!v42);
      uint64_t v62 = 2 * v35;
    }
    else
    {
      uint64_t v62 = 0;
    }
    if ((v62 | (unint64_t)v36) < v18)
    {
      __int16 v63 = *v13 & 0xFFC0;
      __int16 v64 = v13[1] & 0xFFC0;
      *uint64_t v17 = v63;
      v17[1] = v64;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  unint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  unint64_t v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17) {
    unint64_t v20 = v17;
  }
  if (v10 >= v16) {
    unint64_t v10 = v16;
  }
  if (v10)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v25 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
          *(_WORD *)(v24 + 2 * i) = *(_WORD *)(v25 + 2 * i) & 0xFFC0;
      }
      v25 += v22;
      v24 += v23;
      ++v21;
    }
    while (v21 != v10);
  }
  unint64_t v27 = v8 & 1;
  if (v10 >= v27) {
    uint64_t v28 = v8 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v9;
  unint64_t v30 = v20 >> 1;
  uint64_t v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1) {
    unint64_t v30 = (v20 - v31) >> 1;
  }
  if (v8)
  {
    if (v29)
    {
      unint64_t v32 = v13 + 2;
      __int16 v39 = v13[1] & 0xFFC0;
      *uint64_t v19 = *v13 & 0xFFC0;
      v19[1] = v39;
      uint64_t v33 = v19 + 2;
      if (v30)
      {
LABEL_19:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          __int16 v35 = *v32;
          __int16 v36 = v32[1];
          v32 += 2;
          *uint64_t v33 = v35 & 0xFFC0;
          v33[1] = v36 & 0xFFC0;
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v32 = v13;
      uint64_t v33 = v19;
      if (v30) {
        goto LABEL_19;
      }
    }
    uint64_t v38 = 0;
LABEL_25:
    if ((v38 | (unint64_t)v31) < v20)
    {
      __int16 v40 = *v32 & 0xFFC0;
      __int16 v41 = v32[1] & 0xFFC0;
      *uint64_t v33 = v40;
      v33[1] = v41;
    }
    unint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v10 == v28)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v10 - v28;
    do
    {
      __int16 v44 = v13;
      __int16 v45 = (int16x4_t *)v19;
      if (v29)
      {
        __int16 v44 = v13 + 2;
        __int16 v46 = v13[1] & 0xFFC0;
        *uint64_t v19 = *v13 & 0xFFC0;
        v19[1] = v46;
        __int16 v45 = (int16x4_t *)(v19 + 2);
      }
      if (v30)
      {
        uint64_t v47 = -(uint64_t)v30;
        do
        {
          uint64_t v48 = v44 + 2;
          v49.i32[0] = *v44 & 0xFFC0;
          v49.i32[1] = v44[1] & 0xFFC0;
          *v45++ = vuzp1_s16(v49, v49);
          v44 += 2;
          BOOL v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      else
      {
        uint64_t v48 = v44;
      }
      if ((v31 | (2 * v30)) < v20)
      {
        __int16 v50 = *v48 & 0xFFC0;
        __int16 v51 = v48[1] & 0xFFC0;
        v45->i16[0] = v50;
        v45->i16[1] = v51;
      }
      unint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v10)
  {
    if (v29)
    {
      __int16 v52 = *v13;
      __int16 v53 = v13[1];
      v13 += 2;
      *uint64_t v19 = v52 & 0xFFC0;
      v19[1] = v53 & 0xFFC0;
      v19 += 2;
    }
    if (v30)
    {
      uint64_t v54 = -(uint64_t)v30;
      do
      {
        __int16 v55 = *v13;
        __int16 v56 = v13[1];
        v13 += 2;
        *uint64_t v19 = v55 & 0xFFC0;
        v19[1] = v56 & 0xFFC0;
        v19 += 2;
        BOOL v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      uint64_t v57 = 2 * v30;
    }
    else
    {
      uint64_t v57 = 0;
    }
    if ((v57 | (unint64_t)v31) < v20)
    {
      __int16 v58 = *v13 & 0xFFC0;
      __int16 v59 = v13[1] & 0xFFC0;
      *uint64_t v19 = v58;
      v19[1] = v59;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  unint64_t v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17) {
    unint64_t v20 = v17;
  }
  if (v10 >= v16) {
    unint64_t v21 = v16;
  }
  else {
    unint64_t v21 = v10;
  }
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          unsigned int v28 = *(unsigned __int16 *)(v26 + 2 * i);
          if (v28 >= 0xEB00) {
            unsigned int v28 = 60160;
          }
          if (v28 <= 0x1000) {
            unsigned int v28 = 4096;
          }
          *(_WORD *)(v25 + 2 * i) = (unsigned __int16)((-4190208 - v28 + (v28 << 10)) / 0xDB00) << 6;
        }
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  unint64_t v29 = v8 & 1;
  if (v21 >= v29) {
    uint64_t v30 = v8 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v20 >> 1;
  uint64_t v33 = v9 & 1;
  if (v20 >> 1 >= (v20 - v33) >> 1) {
    unint64_t v32 = (v20 - v33) >> 1;
  }
  if (v8)
  {
    if (v31)
    {
      unsigned int v41 = *v13;
      unsigned int v42 = v13[1];
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        unsigned int v41 = 4096;
      }
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      uint64_t v34 = v13 + 2;
      *uint64_t v19 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v41 + (v41 << 10)) >> 13)) >> 32) << 6;
      v19[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v43 + (v43 << 10)) >> 13)) >> 32) << 6;
      __int16 v35 = v19 + 2;
      if (v32) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v34 = v13;
      __int16 v35 = v19;
      if (v32)
      {
LABEL_24:
        uint64_t v36 = -(uint64_t)v32;
        do
        {
          unsigned int v37 = *v34;
          unsigned int v38 = v34[1];
          if (v37 >= 0xF000) {
            unsigned int v37 = 61440;
          }
          if (v37 <= 0x1000) {
            unsigned int v37 = 4096;
          }
          if (v38 >= 0xF000) {
            unsigned int v38 = 61440;
          }
          if (v38 <= 0x1000) {
            unsigned int v38 = 4096;
          }
          v34 += 2;
          *__int16 v35 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v37 + (v37 << 10)) >> 13)) >> 32) << 6;
          v35[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v38 + (v38 << 10)) >> 13)) >> 32) << 6;
          v35 += 2;
          BOOL v39 = __CFADD__(v36++, 1);
        }
        while (!v39);
        uint64_t v40 = 2 * v32;
        goto LABEL_47;
      }
    }
    uint64_t v40 = 0;
LABEL_47:
    if ((v40 | (unint64_t)v33) < v20)
    {
      unsigned int v44 = *v34;
      unsigned int v45 = v34[1];
      if (v44 >= 0xF000) {
        unsigned int v44 = 61440;
      }
      if (v44 <= 0x1000) {
        unsigned int v44 = 4096;
      }
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        unsigned int v45 = 4096;
      }
      *__int16 v35 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v44 + (v44 << 10)) >> 13)) >> 32) << 6;
      v35[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v45 + (v45 << 10)) >> 13)) >> 32) << 6;
    }
    unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v30)
  {
    unint64_t v46 = 0;
  }
  else
  {
    uint64_t v47 = 0;
    unint64_t v46 = v21 - v30;
    int32x2_t v48 = vdup_n_s32(0xFFC01000);
    uint32x2_t v49 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      __int16 v50 = v13;
      __int16 v51 = (int16x4_t *)v19;
      if (v31)
      {
        unsigned int v52 = *v13;
        unsigned int v53 = v13[1];
        if (v52 >= 0xF000) {
          unsigned int v52 = 61440;
        }
        if (v52 <= 0x1000) {
          unsigned int v52 = 4096;
        }
        if (v53 >= 0xF000) {
          unsigned int v53 = 61440;
        }
        if (v53 <= 0x1000) {
          int v54 = 4096;
        }
        else {
          int v54 = v53;
        }
        __int16 v50 = v13 + 2;
        *uint64_t v19 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v52 + (v52 << 10)) >> 13)) >> 32) << 6;
        v19[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v54 + (v54 << 10)) >> 13)) >> 32) << 6;
        __int16 v51 = (int16x4_t *)(v19 + 2);
      }
      if (v32)
      {
        uint64_t v55 = -(uint64_t)v32;
        do
        {
          __int16 v56 = v50 + 2;
          v57.i32[0] = *v50;
          v57.i32[1] = v50[1];
          int16x4_t v58 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v48, (int32x2_t)vmax_u32(vmin_u32(v57, (uint32x2_t)0xF0000000F000), (uint32x2_t)0x100000001000), (int32x2_t)0x300000003), 0xDuLL), v49), 0x20uLL), 6uLL);
          *v51++ = vuzp1_s16(v58, v58);
          v50 += 2;
          BOOL v39 = __CFADD__(v55++, 1);
        }
        while (!v39);
      }
      else
      {
        __int16 v56 = v50;
      }
      if ((v33 | (2 * v32)) < v20)
      {
        unsigned int v59 = *v56;
        unsigned int v60 = v56[1];
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          unsigned int v59 = 4096;
        }
        if (v60 >= 0xF000) {
          unsigned int v60 = 61440;
        }
        if (v60 <= 0x1000) {
          unsigned int v60 = 4096;
        }
        v51->i16[0] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v59 + (v59 << 10)) >> 13)) >> 32) << 6;
        v51->i16[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v60 + (v60 << 10)) >> 13)) >> 32) << 6;
      }
      unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v47;
    }
    while (v47 != v46);
  }
  if (v46 + v29 < v21)
  {
    if (v31)
    {
      unsigned int v61 = *v13;
      unsigned int v62 = v13[1];
      if (v61 >= 0xF000) {
        unsigned int v61 = 61440;
      }
      if (v61 <= 0x1000) {
        unsigned int v61 = 4096;
      }
      if (v62 >= 0xF000) {
        unsigned int v62 = 61440;
      }
      if (v62 <= 0x1000) {
        unsigned int v62 = 4096;
      }
      v13 += 2;
      *uint64_t v19 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v61 + (v61 << 10)) >> 13)) >> 32) << 6;
      v19[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v62 + (v62 << 10)) >> 13)) >> 32) << 6;
      v19 += 2;
    }
    if (v32)
    {
      uint64_t v63 = -(uint64_t)v32;
      do
      {
        unsigned int v64 = *v13;
        unsigned int v65 = v13[1];
        if (v64 >= 0xF000) {
          unsigned int v64 = 61440;
        }
        if (v64 <= 0x1000) {
          unsigned int v64 = 4096;
        }
        if (v65 >= 0xF000) {
          unsigned int v65 = 61440;
        }
        if (v65 <= 0x1000) {
          unsigned int v65 = 4096;
        }
        v13 += 2;
        *uint64_t v19 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v64 + (v64 << 10)) >> 13)) >> 32) << 6;
        v19[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v65 + (v65 << 10)) >> 13)) >> 32) << 6;
        v19 += 2;
        BOOL v39 = __CFADD__(v63++, 1);
      }
      while (!v39);
      v32 *= 2;
    }
    if ((v32 | v33) < v20)
    {
      unsigned int v66 = *v13;
      unsigned int v67 = v13[1];
      if (v66 >= 0xF000) {
        unsigned int v66 = 61440;
      }
      if (v66 <= 0x1000) {
        unsigned int v66 = 4096;
      }
      if (v67 >= 0xF000) {
        unsigned int v67 = 61440;
      }
      if (v67 <= 0x1000) {
        unsigned int v67 = 4096;
      }
      *uint64_t v19 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v66 + (v66 << 10)) >> 13)) >> 32) << 6;
      v19[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v67 + (v67 << 10)) >> 13)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_s2as_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = 2 * (v10 + v9);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v15;
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) >= v16 - v15) {
    unint64_t v21 = v16 - v15;
  }
  else {
    unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v17;
    uint64_t v26 = *a7 + *a8 * v17;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v18;
    uint64_t v30 = v26 + v18;
    uint64_t v31 = a3[2] + v28 * v11 + v12;
    uint64_t v32 = *a3 + v27 * v11 + v12;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v11 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v11 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  unint64_t v37 = v21 >> 1;
  unint64_t v38 = (v21 - v10) >> 1;
  if (v37 >= v38) {
    unint64_t v37 = v38;
  }
  if (v11)
  {
    if (v36)
    {
      BOOL v39 = v14 + 2;
      __int16 v41 = v14[1] & 0xFFC0;
      *unint64_t v20 = *v14 & 0xFFC0;
      v20[1] = v41;
      uint64_t v40 = v20 + 2;
      if (!v37)
      {
LABEL_25:
        uint64_t v14 = (_WORD *)((char *)v14 + v13);
        unint64_t v20 = (_WORD *)((char *)v20 + v19);
        goto LABEL_26;
      }
    }
    else
    {
      BOOL v39 = v14;
      uint64_t v40 = v20;
      if (!v37) {
        goto LABEL_25;
      }
    }
    uint64_t v42 = -(uint64_t)v37;
    do
    {
      __int16 v43 = v39[1] & 0xFFC0;
      *uint64_t v40 = *v39 & 0xFFC0;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v35)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v8 - v35;
    do
    {
      uint64_t v47 = v14;
      int32x2_t v48 = v20;
      if (v36)
      {
        uint64_t v47 = v14 + 2;
        __int16 v49 = v14[1] & 0xFFC0;
        *unint64_t v20 = *v14 & 0xFFC0;
        v20[1] = v49;
        int32x2_t v48 = v20 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          __int16 v51 = v47[1] & 0xFFC0;
          *int32x2_t v48 = *v47 & 0xFFC0;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          BOOL v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      unint64_t v20 = (_WORD *)((char *)v20 + v19);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v34 < v8)
  {
    if (v36)
    {
      __int16 v52 = *v14;
      __int16 v53 = v14[1];
      v14 += 2;
      *unint64_t v20 = v52 & 0xFFC0;
      v20[1] = v53 & 0xFFC0;
      v20 += 2;
    }
    if (v37)
    {
      uint64_t v54 = -(uint64_t)v37;
      do
      {
        __int16 v55 = v14[1] & 0xFFC0;
        *unint64_t v20 = *v14 & 0xFFC0;
        v20[1] = v55;
        v14 += 2;
        v20 += 2;
        BOOL v44 = __CFADD__(v54++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v19;
    uint64_t v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = *(_WORD *)(v27 + 2 * i) & 0xFFC0;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v22 >> 1;
  unint64_t v33 = (v22 - v10) >> 1;
  if (v32 >= v33) {
    unint64_t v32 = v33;
  }
  if (v12)
  {
    if (v31)
    {
      unint64_t v34 = v14 + 2;
      __int16 v36 = v14[1] & 0xFFC0;
      _WORD *v21 = *v14 & 0xFFC0;
      v21[1] = v36;
      uint64_t v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        uint64_t v14 = (_WORD *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
      if (!v32) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = -(uint64_t)v32;
    do
    {
      __int16 v38 = v34[1] & 0xFFC0;
      *uint64_t v35 = *v34 & 0xFFC0;
      v35[1] = v38;
      v34 += 2;
      v35 += 2;
      BOOL v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v30;
    do
    {
      uint64_t v42 = v14;
      __int16 v43 = v21;
      if (v31)
      {
        uint64_t v42 = v14 + 2;
        __int16 v44 = v14[1] & 0xFFC0;
        _WORD *v21 = *v14 & 0xFFC0;
        v21[1] = v44;
        __int16 v43 = v21 + 2;
      }
      if (v32)
      {
        uint64_t v45 = -(uint64_t)v32;
        do
        {
          __int16 v46 = v42[1] & 0xFFC0;
          *__int16 v43 = *v42 & 0xFFC0;
          v43[1] = v46;
          v42 += 2;
          v43 += 2;
          BOOL v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if (v31)
    {
      __int16 v47 = *v14;
      __int16 v48 = v14[1];
      v14 += 2;
      _WORD *v21 = v47 & 0xFFC0;
      v21[1] = v48 & 0xFFC0;
      v21 += 2;
    }
    if (v32)
    {
      uint64_t v49 = -(uint64_t)v32;
      do
      {
        __int16 v50 = v14[1] & 0xFFC0;
        _WORD *v21 = *v14 & 0xFFC0;
        v21[1] = v50;
        v14 += 2;
        v21 += 2;
        BOOL v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v19;
    uint64_t v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v29 = *(unsigned __int16 *)(v27 + 2 * i);
          if (v29 >= 0xEB00) {
            unsigned int v29 = 60160;
          }
          if (v29 <= 0x1000) {
            unsigned int v29 = 4096;
          }
          *(_WORD *)(v26 + 2 * i) = (unsigned __int16)((-4190208 - v29 + (v29 << 10)) / 0xDB00) << 6;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  unint64_t v33 = v22 >> 1;
  if (v22 >> 1 >= (v22 - v10) >> 1) {
    unint64_t v33 = (v22 - v10) >> 1;
  }
  if (v12)
  {
    if (v32)
    {
      unsigned int v36 = *v14;
      if (v36 >= 0xF000) {
        unsigned int v36 = 61440;
      }
      if (v36 <= 0x1000) {
        int v37 = 4096;
      }
      else {
        int v37 = v36;
      }
      if (v14[1] >= 0xF000u) {
        unsigned int v38 = 61440;
      }
      else {
        unsigned int v38 = v14[1];
      }
      if (v38 <= 0x1000) {
        int v39 = 4096;
      }
      else {
        int v39 = v38;
      }
      unint64_t v34 = v14 + 2;
      _WORD *v21 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v37 + (v37 << 10)) >> 13)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v39 + (v39 << 10)) >> 13)) >> 32) << 6;
      uint64_t v35 = v21 + 2;
      if (!v33) {
        goto LABEL_48;
      }
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
      if (!v33)
      {
LABEL_48:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_49;
      }
    }
    uint64_t v40 = -(uint64_t)v33;
    do
    {
      unsigned int v41 = *v34;
      unsigned int v42 = v34[1];
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        unsigned int v41 = 4096;
      }
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        unsigned int v42 = 4096;
      }
      *uint64_t v35 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v41 + (v41 << 10)) >> 13)) >> 32) << 6;
      v35[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v42 + (v42 << 10)) >> 13)) >> 32) << 6;
      v34 += 2;
      v35 += 2;
      BOOL v43 = __CFADD__(v40++, 1);
    }
    while (!v43);
    goto LABEL_48;
  }
LABEL_49:
  if (v8 == v31)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v31;
    do
    {
      __int16 v46 = v14;
      __int16 v47 = v21;
      if (v32)
      {
        unsigned int v48 = *v14;
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          int v49 = 4096;
        }
        else {
          int v49 = v48;
        }
        if (v14[1] >= 0xF000u) {
          unsigned int v50 = 61440;
        }
        else {
          unsigned int v50 = v14[1];
        }
        if (v50 <= 0x1000) {
          int v51 = 4096;
        }
        else {
          int v51 = v50;
        }
        __int16 v46 = v14 + 2;
        _WORD *v21 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v49 + (v49 << 10)) >> 13)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v51 + (v51 << 10)) >> 13)) >> 32) << 6;
        __int16 v47 = v21 + 2;
      }
      if (v33)
      {
        uint64_t v52 = -(uint64_t)v33;
        do
        {
          unsigned int v53 = *v46;
          unsigned int v54 = v46[1];
          if (v53 >= 0xF000) {
            unsigned int v53 = 61440;
          }
          if (v53 <= 0x1000) {
            unsigned int v53 = 4096;
          }
          if (v54 >= 0xF000) {
            unsigned int v54 = 61440;
          }
          if (v54 <= 0x1000) {
            unsigned int v54 = 4096;
          }
          _WORD *v47 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v53 + (v53 << 10)) >> 13)) >> 32) << 6;
          v47[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v54 + (v54 << 10)) >> 13)) >> 32) << 6;
          v46 += 2;
          v47 += 2;
          BOOL v43 = __CFADD__(v52++, 1);
        }
        while (!v43);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v30 < v8)
  {
    if (v32)
    {
      unsigned int v55 = *v14;
      unsigned int v56 = v14[1];
      if (v55 >= 0xF000) {
        unsigned int v55 = 61440;
      }
      if (v55 <= 0x1000) {
        unsigned int v55 = 4096;
      }
      if (v56 >= 0xF000) {
        unsigned int v56 = 61440;
      }
      if (v56 <= 0x1000) {
        unsigned int v56 = 4096;
      }
      v14 += 2;
      _WORD *v21 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v55 + (v55 << 10)) >> 13)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v56 + (v56 << 10)) >> 13)) >> 32) << 6;
      v21 += 2;
    }
    if (v33)
    {
      uint64_t v57 = -(uint64_t)v33;
      do
      {
        unsigned int v58 = *v14;
        unsigned int v59 = v14[1];
        if (v58 >= 0xF000) {
          unsigned int v58 = 61440;
        }
        if (v58 <= 0x1000) {
          unsigned int v58 = 4096;
        }
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          unsigned int v59 = 4096;
        }
        _WORD *v21 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v58 + (v58 << 10)) >> 13)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v59 + (v59 << 10)) >> 13)) >> 32) << 6;
        v14 += 2;
        v21 += 2;
        BOOL v43 = __CFADD__(v57++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = 2 * v10;
  uint64_t v16 = a4[1];
  uint64_t v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v9) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v20 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v21 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v22 = 2 * v18;
  uint64_t v23 = a8[1];
  uint64_t v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v25 = v11 - v10;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  unint64_t v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20) {
    unint64_t v27 = v21 - v20;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v15 + v32;
    uint64_t v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v26 - (v8 & 1);
  if (v26 >> 1 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v26 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      int v39 = v17 + 2;
      int v41 = (*(unsigned __int16 *)((char *)v17 + v16 + 2) >> 6) + (v17[1] >> 6);
      *uint64_t v24 = (32 * ((*(unsigned __int16 *)((char *)v17 + v16) >> 6) + (*v17 >> 6)) + 32) & 0xFFC0;
      v24[1] = (32 * v41 + 32) & 0xFFC0;
      uint64_t v40 = v24 + 2;
      if (!v38)
      {
LABEL_28:
        v17 += v16;
        uint64_t v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      int v39 = v17;
      uint64_t v40 = v24;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v42 = -(uint64_t)v38;
    do
    {
      unsigned int v43 = *v39;
      unsigned int v44 = v39[1];
      unsigned int v45 = *(unsigned __int16 *)((char *)v39 + v16);
      unsigned int v46 = *(unsigned __int16 *)((char *)v39 + v16 + 2);
      v39 += 2;
      *uint64_t v40 = (32 * ((v45 >> 6) + (v43 >> 6)) + 32) & 0xFFC0;
      v40[1] = (32 * ((v46 >> 6) + (v44 >> 6)) + 32) & 0xFFC0;
      v40 += 2;
      BOOL v47 = __CFADD__(v42++, 1);
    }
    while (!v47);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v27 - v36;
    do
    {
      unsigned int v50 = v17;
      int v51 = v24;
      if (v8)
      {
        unsigned int v50 = v17 + 2;
        int v52 = (*(unsigned __int16 *)((char *)v17 + v16 + 2) >> 6) + (v17[1] >> 6);
        *uint64_t v24 = (32 * ((*(unsigned __int16 *)((char *)v17 + v16) >> 6) + (*v17 >> 6)) + 32) & 0xFFC0;
        v24[1] = (32 * v52 + 32) & 0xFFC0;
        int v51 = v24 + 2;
      }
      if (v38)
      {
        uint64_t v53 = -(uint64_t)v38;
        do
        {
          unsigned int v54 = *v50;
          unsigned int v55 = v50[1];
          unsigned int v56 = *(unsigned __int16 *)((char *)v50 + v16);
          unsigned int v57 = *(unsigned __int16 *)((char *)v50 + v16 + 2);
          v50 += 2;
          *int v51 = (32 * ((v56 >> 6) + (v54 >> 6)) + 32) & 0xFFC0;
          v51[1] = (32 * ((v57 >> 6) + (v55 >> 6)) + 32) & 0xFFC0;
          v51 += 2;
          BOOL v47 = __CFADD__(v53++, 1);
        }
        while (!v47);
      }
      v17 += v16;
      uint64_t v24 = (_WORD *)((char *)v24 + v23);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = 2 * v10;
  uint64_t v16 = a4[1];
  uint64_t v17 = (_WORD *)(a3[1] + v16 * (v12 + v9) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v20 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v21 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v22 = 2 * v18;
  uint64_t v23 = a8[1];
  uint64_t v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v25 = v11 - v10;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  unint64_t v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20) {
    unint64_t v27 = v21 - v20;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v15 + v32;
    uint64_t v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v26 - (v8 & 1);
  if (v26 >> 1 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v26 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      int v39 = v17 + 2;
      __int16 v41 = v17[1] & 0xFFC0;
      *uint64_t v24 = *v17 & 0xFFC0;
      v24[1] = v41;
      uint64_t v40 = v24 + 2;
      if (!v38)
      {
LABEL_28:
        v17 += v16;
        uint64_t v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      int v39 = v17;
      uint64_t v40 = v24;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v42 = -(uint64_t)v38;
    do
    {
      __int16 v43 = v39[1] & 0xFFC0;
      *uint64_t v40 = *v39 & 0xFFC0;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v27 - v36;
    uint64_t v47 = 2 * v16;
    do
    {
      unint64_t v48 = v17;
      unint64_t v49 = v24;
      if (v8)
      {
        unint64_t v48 = v17 + 2;
        __int16 v50 = v17[1] & 0xFFC0;
        *uint64_t v24 = *v17 & 0xFFC0;
        v24[1] = v50;
        unint64_t v49 = v24 + 2;
      }
      if (v38)
      {
        uint64_t v51 = -(uint64_t)v38;
        do
        {
          __int16 v52 = v48[1] & 0xFFC0;
          *unint64_t v49 = *v48 & 0xFFC0;
          v49[1] = v52;
          v48 += 2;
          v49 += 2;
          BOOL v44 = __CFADD__(v51++, 1);
        }
        while (!v44);
      }
      uint64_t v17 = (_WORD *)((char *)v17 + v47);
      uint64_t v24 = (_WORD *)((char *)v24 + v23);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = 2 * v10;
  uint64_t v16 = a4[1];
  uint64_t v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v20 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v21 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v22 = 2 * v18;
  uint64_t v23 = a8[1];
  uint64_t v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v25 = v11 - v10;
  if (v25 >= v19 - v18) {
    unint64_t v26 = v19 - v18;
  }
  else {
    unint64_t v26 = v25;
  }
  unint64_t v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20) {
    unint64_t v27 = v21 - v20;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v15 + v32;
    uint64_t v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(_WORD *)(v34 + 2 * i) = (unsigned __int16)((-4190208 - v36 + (v36 << 10)) / 0xDB00) << 6;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  unint64_t v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v26 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v42 = *v17;
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      if (v17[1] >= 0xF000u) {
        unsigned int v44 = 61440;
      }
      else {
        unsigned int v44 = v17[1];
      }
      if (v44 <= 0x1000) {
        int v45 = 4096;
      }
      else {
        int v45 = v44;
      }
      if (*(unsigned __int16 *)((char *)v17 + v16) >= 0xF000u) {
        unsigned int v46 = 61440;
      }
      else {
        unsigned int v46 = *(unsigned __int16 *)((char *)v17 + v16);
      }
      if (v46 <= 0x1000) {
        int v47 = 4096;
      }
      else {
        int v47 = v46;
      }
      if (*(unsigned __int16 *)((char *)v17 + v16 + 2) >= 0xF000u) {
        unsigned int v48 = 61440;
      }
      else {
        unsigned int v48 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
      }
      if (v48 <= 0x1000) {
        int v49 = 4096;
      }
      else {
        int v49 = v48;
      }
      uint64_t v40 = v17 + 2;
      *uint64_t v24 = (32
            * (((613566757 * (unint64_t)((-4190208 - v47 + (v47 << 10)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-4190208 - v43 + (v43 << 10)) >> 13)) >> 32))
            + 32) & 0xFFC0;
      v24[1] = (32
              * (((613566757 * (unint64_t)((-4190208 - v49 + (v49 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v45 + (v45 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
      __int16 v41 = v24 + 2;
      if (!v39) {
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v40 = v17;
      __int16 v41 = v24;
      if (!v39)
      {
LABEL_72:
        v17 += v16;
        uint64_t v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_73;
      }
    }
    uint64_t v50 = -(uint64_t)v39;
    do
    {
      unsigned int v51 = *v40;
      unsigned int v52 = v40[1];
      unsigned int v53 = *(unsigned __int16 *)((char *)v40 + v16);
      unsigned int v54 = *(unsigned __int16 *)((char *)v40 + v16 + 2);
      if (v51 >= 0xF000) {
        unsigned int v51 = 61440;
      }
      if (v51 <= 0x1000) {
        unsigned int v51 = 4096;
      }
      if (v52 >= 0xF000) {
        unsigned int v52 = 61440;
      }
      if (v52 <= 0x1000) {
        unsigned int v52 = 4096;
      }
      if (v53 >= 0xF000) {
        unsigned int v53 = 61440;
      }
      if (v53 <= 0x1000) {
        unsigned int v53 = 4096;
      }
      if (v54 >= 0xF000) {
        unsigned int v54 = 61440;
      }
      if (v54 <= 0x1000) {
        unsigned int v54 = 4096;
      }
      v40 += 2;
      _WORD *v41 = (32
            * (((613566757 * (unint64_t)((-4190208 - v53 + (v53 << 10)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-4190208 - v51 + (v51 << 10)) >> 13)) >> 32))
            + 32) & 0xFFC0;
      v41[1] = (32
              * (((613566757 * (unint64_t)((-4190208 - v54 + (v54 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v52 + (v52 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
      v41 += 2;
      BOOL v55 = __CFADD__(v50++, 1);
    }
    while (!v55);
    goto LABEL_72;
  }
LABEL_73:
  if (v27 != v37)
  {
    unint64_t v56 = 0;
    unint64_t v57 = v27 - v37;
    do
    {
      unsigned int v58 = v17;
      unsigned int v59 = v24;
      if (v9)
      {
        unsigned int v60 = *v17;
        if (v60 >= 0xF000) {
          unsigned int v60 = 61440;
        }
        if (v60 <= 0x1000) {
          int v61 = 4096;
        }
        else {
          int v61 = v60;
        }
        if (v17[1] >= 0xF000u) {
          unsigned int v62 = 61440;
        }
        else {
          unsigned int v62 = v17[1];
        }
        if (v62 <= 0x1000) {
          int v63 = 4096;
        }
        else {
          int v63 = v62;
        }
        if (*(unsigned __int16 *)((char *)v17 + v16) >= 0xF000u) {
          unsigned int v64 = 61440;
        }
        else {
          unsigned int v64 = *(unsigned __int16 *)((char *)v17 + v16);
        }
        if (v64 <= 0x1000) {
          int v65 = 4096;
        }
        else {
          int v65 = v64;
        }
        if (*(unsigned __int16 *)((char *)v17 + v16 + 2) >= 0xF000u) {
          unsigned int v66 = 61440;
        }
        else {
          unsigned int v66 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
        }
        if (v66 <= 0x1000) {
          int v67 = 4096;
        }
        else {
          int v67 = v66;
        }
        unsigned int v58 = v17 + 2;
        *uint64_t v24 = (32
              * (((613566757 * (unint64_t)((-4190208 - v65 + (v65 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v61 + (v61 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
        v24[1] = (32
                * (((613566757 * (unint64_t)((-4190208 - v67 + (v67 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v63 + (v63 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
        unsigned int v59 = v24 + 2;
      }
      if (v39)
      {
        uint64_t v68 = -(uint64_t)v39;
        do
        {
          unsigned int v69 = *v58;
          unsigned int v70 = v58[1];
          unsigned int v71 = *(unsigned __int16 *)((char *)v58 + v16);
          unsigned int v72 = *(unsigned __int16 *)((char *)v58 + v16 + 2);
          if (v69 >= 0xF000) {
            unsigned int v69 = 61440;
          }
          if (v69 <= 0x1000) {
            unsigned int v69 = 4096;
          }
          if (v70 >= 0xF000) {
            unsigned int v70 = 61440;
          }
          if (v70 <= 0x1000) {
            unsigned int v70 = 4096;
          }
          if (v71 >= 0xF000) {
            unsigned int v71 = 61440;
          }
          if (v71 <= 0x1000) {
            unsigned int v71 = 4096;
          }
          if (v72 >= 0xF000) {
            unsigned int v72 = 61440;
          }
          if (v72 <= 0x1000) {
            unsigned int v72 = 4096;
          }
          v58 += 2;
          *unsigned int v59 = (32
                * (((613566757 * (unint64_t)((-4190208 - v71 + (v71 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v69 + (v69 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
          v59[1] = (32
                  * (((613566757 * (unint64_t)((-4190208 - v72 + (v72 << 10)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-4190208 - v70 + (v70 << 10)) >> 13)) >> 32))
                  + 32) & 0xFFC0;
          v59 += 2;
          BOOL v55 = __CFADD__(v68++, 1);
        }
        while (!v55);
      }
      v17 += v16;
      uint64_t v24 = (_WORD *)((char *)v24 + v23);
      v56 += 2;
    }
    while (v56 < v57);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = 2 * v10;
  uint64_t v16 = a4[1];
  uint64_t v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v20 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v21 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v22 = 2 * v18;
  uint64_t v23 = a8[1];
  uint64_t v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v25 = v11 - v10;
  if (v25 >= v19 - v18) {
    unint64_t v26 = v19 - v18;
  }
  else {
    unint64_t v26 = v25;
  }
  unint64_t v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20) {
    unint64_t v27 = v21 - v20;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v15 + v32;
    uint64_t v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(_WORD *)(v34 + 2 * i) = (unsigned __int16)((-4190208 - v36 + (v36 << 10)) / 0xDB00) << 6;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  unint64_t v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v26 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v42 = *v17;
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      if (v17[1] >= 0xF000u) {
        unsigned int v44 = 61440;
      }
      else {
        unsigned int v44 = v17[1];
      }
      if (v44 <= 0x1000) {
        int v45 = 4096;
      }
      else {
        int v45 = v44;
      }
      uint64_t v40 = v17 + 2;
      *uint64_t v24 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v43 + (v43 << 10)) >> 13)) >> 32) << 6;
      v24[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v45 + (v45 << 10)) >> 13)) >> 32) << 6;
      __int16 v41 = v24 + 2;
      if (!v39) {
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v40 = v17;
      __int16 v41 = v24;
      if (!v39)
      {
LABEL_52:
        v17 += v16;
        uint64_t v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_53;
      }
    }
    uint64_t v46 = -(uint64_t)v39;
    do
    {
      unsigned int v47 = *v40;
      unsigned int v48 = v40[1];
      if (v47 >= 0xF000) {
        unsigned int v47 = 61440;
      }
      if (v47 <= 0x1000) {
        unsigned int v47 = 4096;
      }
      if (v48 >= 0xF000) {
        unsigned int v48 = 61440;
      }
      if (v48 <= 0x1000) {
        unsigned int v48 = 4096;
      }
      _WORD *v41 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v47 + (v47 << 10)) >> 13)) >> 32) << 6;
      v41[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v48 + (v48 << 10)) >> 13)) >> 32) << 6;
      v40 += 2;
      v41 += 2;
      BOOL v49 = __CFADD__(v46++, 1);
    }
    while (!v49);
    goto LABEL_52;
  }
LABEL_53:
  if (v27 != v37)
  {
    unint64_t v50 = 0;
    unint64_t v51 = v27 - v37;
    uint64_t v52 = 2 * v16;
    do
    {
      unsigned int v53 = v17;
      unsigned int v54 = v24;
      if (v9)
      {
        unsigned int v55 = *v17;
        if (v55 >= 0xF000) {
          unsigned int v55 = 61440;
        }
        if (v55 <= 0x1000) {
          int v56 = 4096;
        }
        else {
          int v56 = v55;
        }
        if (v17[1] >= 0xF000u) {
          unsigned int v57 = 61440;
        }
        else {
          unsigned int v57 = v17[1];
        }
        if (v57 <= 0x1000) {
          int v58 = 4096;
        }
        else {
          int v58 = v57;
        }
        unsigned int v53 = v17 + 2;
        *uint64_t v24 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v56 + (v56 << 10)) >> 13)) >> 32) << 6;
        v24[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v58 + (v58 << 10)) >> 13)) >> 32) << 6;
        unsigned int v54 = v24 + 2;
      }
      if (v39)
      {
        uint64_t v59 = -(uint64_t)v39;
        do
        {
          unsigned int v60 = *v53;
          unsigned int v61 = v53[1];
          if (v60 >= 0xF000) {
            unsigned int v60 = 61440;
          }
          if (v60 <= 0x1000) {
            unsigned int v60 = 4096;
          }
          if (v61 >= 0xF000) {
            unsigned int v61 = 61440;
          }
          if (v61 <= 0x1000) {
            unsigned int v61 = 4096;
          }
          *unsigned int v54 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v60 + (v60 << 10)) >> 13)) >> 32) << 6;
          v54[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v61 + (v61 << 10)) >> 13)) >> 32) << 6;
          v53 += 2;
          v54 += 2;
          BOOL v49 = __CFADD__(v59++, 1);
        }
        while (!v49);
      }
      uint64_t v17 = (unsigned __int16 *)((char *)v17 + v52);
      uint64_t v24 = (_WORD *)((char *)v24 + v23);
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_Copy_s2as_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  uint64_t v12 = a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE);
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v13 + 2 * v14);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  if (v10 >= v15) {
    unint64_t v10 = v15;
  }
  if (v10)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v13;
    uint64_t v24 = *a7 + *a8 * v13;
    uint64_t v25 = *a4;
    uint64_t v26 = 2 * (a2[4] & 0xFFFFFFFELL);
    uint64_t v27 = a4[2];
    uint64_t v28 = v23 + v14;
    uint64_t v29 = v24 + v14;
    uint64_t v30 = a3[2] + v27 * v8 + v26;
    uint64_t v31 = *a3 + v25 * v8 + v26;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v28 + i) = *(_WORD *)(v30 + 2 * i);
          *(unsigned char *)(v29 + i) = *(unsigned char *)(v31 + 2 * i + 1);
        }
      }
      v31 += v25;
      v29 += v21;
      v30 += v27;
      v28 += v22;
      ++v20;
    }
    while (v20 != v10);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v33 = v8 & 1;
  if (v10 >= v33) {
    uint64_t v34 = v8 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  char v35 = v9;
  unint64_t v36 = v19 >> 1;
  uint64_t v37 = v9 & 1;
  if (v19 >> 1 >= (v19 - v37) >> 1) {
    unint64_t v36 = (v19 - v37) >> 1;
  }
  if (v8)
  {
    if (v35)
    {
      char v45 = *(unsigned char *)(v12 + 3);
      uint64_t v38 = v12 + 4;
      *uint64_t v18 = *(unsigned char *)(v12 + 1);
      v18[1] = v45;
      unint64_t v39 = v18 + 2;
      if (v36)
      {
LABEL_20:
        uint64_t v40 = -(uint64_t)v36;
        do
        {
          char v41 = *(unsigned char *)(v38 + 1);
          char v42 = *(unsigned char *)(v38 + 3);
          v38 += 4;
          *unint64_t v39 = v41;
          v39[1] = v42;
          v39 += 2;
          BOOL v43 = __CFADD__(v40++, 1);
        }
        while (!v43);
        uint64_t v44 = 2 * v36;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v38 = v12;
      unint64_t v39 = v18;
      if (v36) {
        goto LABEL_20;
      }
    }
    uint64_t v44 = 0;
LABEL_26:
    if ((v44 | (unint64_t)v37) < v19)
    {
      char v46 = *(unsigned char *)(v38 + 1);
      char v47 = *(unsigned char *)(v38 + 3);
      *unint64_t v39 = v46;
      v39[1] = v47;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v10 == v34)
  {
    unint64_t v48 = 0;
  }
  else
  {
    uint64_t v49 = 0;
    unint64_t v48 = v10 - v34;
    do
    {
      uint64_t v50 = v12;
      unint64_t v51 = v18;
      if (v35)
      {
        char v52 = *(unsigned char *)(v12 + 3);
        uint64_t v50 = v12 + 4;
        *uint64_t v18 = *(unsigned char *)(v12 + 1);
        v18[1] = v52;
        unint64_t v51 = v18 + 2;
      }
      if (v36)
      {
        uint64_t v53 = -(uint64_t)v36;
        do
        {
          char v54 = *(unsigned char *)(v50 + 1);
          char v55 = *(unsigned char *)(v50 + 3);
          v50 += 4;
          *unint64_t v51 = v54;
          v51[1] = v55;
          v51[2] = v54;
          v51[3] = v55;
          v51 += 4;
          BOOL v43 = __CFADD__(v53++, 1);
        }
        while (!v43);
      }
      if ((v37 | (2 * v36)) < v19)
      {
        char v56 = *(unsigned char *)(v50 + 1);
        char v57 = *(unsigned char *)(v50 + 3);
        *unint64_t v51 = v56;
        v51[1] = v57;
      }
      v12 += v11;
      v18 += v17;
      ++v49;
    }
    while (v49 != v48);
  }
  if (v48 + v33 < v10)
  {
    if (v35)
    {
      char v58 = *(unsigned char *)(v12 + 1);
      char v59 = *(unsigned char *)(v12 + 3);
      v12 += 4;
      *uint64_t v18 = v58;
      v18[1] = v59;
      v18 += 2;
    }
    if (v36)
    {
      uint64_t v60 = -(uint64_t)v36;
      do
      {
        char v61 = *(unsigned char *)(v12 + 1);
        char v62 = *(unsigned char *)(v12 + 3);
        v12 += 4;
        *uint64_t v18 = v61;
        v18[1] = v62;
        v18 += 2;
        BOOL v43 = __CFADD__(v60++, 1);
      }
      while (!v43);
      uint64_t v63 = 2 * v36;
    }
    else
    {
      uint64_t v63 = 0;
    }
    if ((v63 | (unint64_t)v37) < v19)
    {
      char v64 = *(unsigned char *)(v12 + 1);
      char v65 = *(unsigned char *)(v12 + 3);
      *uint64_t v18 = v64;
      v18[1] = v65;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  uint64_t v12 = a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE);
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v13 + 2 * v14);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  if (v10 >= v15) {
    unint64_t v10 = v15;
  }
  if (v10)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v13 + v14;
    uint64_t v24 = *a3 + *a4 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
          *(unsigned char *)(v23 + i) = *(unsigned char *)(v24 + 2 * i + 1);
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v10);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v26 = v8 & 1;
  if (v10 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v19 >> 1;
  uint64_t v30 = v9 & 1;
  if (v19 >> 1 >= (v19 - v30) >> 1) {
    unint64_t v29 = (v19 - v30) >> 1;
  }
  if (v8)
  {
    if (v28)
    {
      char v38 = *(unsigned char *)(v12 + 3);
      uint64_t v31 = v12 + 4;
      *uint64_t v18 = *(unsigned char *)(v12 + 1);
      v18[1] = v38;
      uint64_t v32 = v18 + 2;
      if (v29)
      {
LABEL_20:
        uint64_t v33 = -(uint64_t)v29;
        do
        {
          char v34 = *(unsigned char *)(v31 + 1);
          char v35 = *(unsigned char *)(v31 + 3);
          v31 += 4;
          *uint64_t v32 = v34;
          v32[1] = v35;
          v32 += 2;
          BOOL v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        uint64_t v37 = 2 * v29;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v31 = v12;
      uint64_t v32 = v18;
      if (v29) {
        goto LABEL_20;
      }
    }
    uint64_t v37 = 0;
LABEL_26:
    if ((v37 | (unint64_t)v30) < v19)
    {
      char v39 = *(unsigned char *)(v31 + 1);
      char v40 = *(unsigned char *)(v31 + 3);
      *uint64_t v32 = v39;
      v32[1] = v40;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v10 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v10 - v27;
    do
    {
      uint64_t v43 = v12;
      uint64_t v44 = v18;
      if (v28)
      {
        char v45 = *(unsigned char *)(v12 + 3);
        uint64_t v43 = v12 + 4;
        *uint64_t v18 = *(unsigned char *)(v12 + 1);
        v18[1] = v45;
        uint64_t v44 = v18 + 2;
      }
      if (v29)
      {
        uint64_t v46 = -(uint64_t)v29;
        do
        {
          char v47 = *(unsigned char *)(v43 + 1);
          char v48 = *(unsigned char *)(v43 + 3);
          v43 += 4;
          *uint64_t v44 = v47;
          v44[1] = v48;
          v44[2] = v47;
          v44[3] = v48;
          v44 += 4;
          BOOL v36 = __CFADD__(v46++, 1);
        }
        while (!v36);
      }
      if ((v30 | (2 * v29)) < v19)
      {
        char v49 = *(unsigned char *)(v43 + 1);
        char v50 = *(unsigned char *)(v43 + 3);
        *uint64_t v44 = v49;
        v44[1] = v50;
      }
      v12 += v11;
      v18 += v17;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v10)
  {
    if (v28)
    {
      char v51 = *(unsigned char *)(v12 + 1);
      char v52 = *(unsigned char *)(v12 + 3);
      v12 += 4;
      *uint64_t v18 = v51;
      v18[1] = v52;
      v18 += 2;
    }
    if (v29)
    {
      uint64_t v53 = -(uint64_t)v29;
      do
      {
        char v54 = *(unsigned char *)(v12 + 1);
        char v55 = *(unsigned char *)(v12 + 3);
        v12 += 4;
        *uint64_t v18 = v54;
        v18[1] = v55;
        v18 += 2;
        BOOL v36 = __CFADD__(v53++, 1);
      }
      while (!v36);
      uint64_t v56 = 2 * v29;
    }
    else
    {
      uint64_t v56 = 0;
    }
    if ((v56 | (unint64_t)v30) < v19)
    {
      char v57 = *(unsigned char *)(v12 + 1);
      char v58 = *(unsigned char *)(v12 + 3);
      *uint64_t v18 = v57;
      v18[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v10 = a4[1];
  uint64_t v11 = (unsigned __int16 *)(a3[1] + v10 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v12 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v15 = a6[2];
  unint64_t v14 = a6[3];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v13 + 2 * v12);
  unint64_t v18 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v18 >= v15) {
    unint64_t v18 = v15;
  }
  if (a2[3] >= v14) {
    unint64_t v19 = v14;
  }
  else {
    unint64_t v19 = a2[3];
  }
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v13 + v12;
    uint64_t v24 = *a3 + *a4 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          unsigned int v26 = *(unsigned __int16 *)(v24 + 2 * i);
          if (v26 >= 0xEB00) {
            unsigned int v26 = 60160;
          }
          if (v26 <= 0x1000) {
            unsigned int v26 = 4096;
          }
          *(unsigned char *)(v23 + i) = (-1044480 - v26 + (v26 << 8)) / 0xDB00;
        }
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v27 = v8 & 1;
  if (v19 >= v27) {
    uint64_t v28 = v8 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v9;
  unint64_t v30 = v18 >> 1;
  uint64_t v31 = v9 & 1;
  if (v18 >> 1 >= (v18 - v31) >> 1) {
    unint64_t v30 = (v18 - v31) >> 1;
  }
  if (v8)
  {
    if (v29)
    {
      unsigned int v39 = *v11;
      unsigned int v40 = v11[1];
      if (v39 >= 0xF000) {
        unsigned int v39 = 61440;
      }
      if (v39 <= 0x1000) {
        unsigned int v39 = 4096;
      }
      if (v40 >= 0xF000) {
        unsigned int v40 = 61440;
      }
      if (v40 <= 0x1000) {
        int v41 = 4096;
      }
      else {
        int v41 = v40;
      }
      uint64_t v32 = v11 + 2;
      *uint64_t v17 = (613566757 * (unint64_t)((-1044480 - v39 + (v39 << 8)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1044480 - v41 + (v41 << 8)) >> 13)) >> 32;
      uint64_t v33 = v17 + 2;
      if (v30) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v32 = v11;
      uint64_t v33 = v17;
      if (v30)
      {
LABEL_25:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          unsigned int v35 = *v32;
          unsigned int v36 = v32[1];
          if (v35 >= 0xF000) {
            unsigned int v35 = 61440;
          }
          if (v35 <= 0x1000) {
            unsigned int v35 = 4096;
          }
          if (v36 >= 0xF000) {
            unsigned int v36 = 61440;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          v32 += 2;
          *uint64_t v33 = (613566757 * (unint64_t)((-1044480 - v35 + (v35 << 8)) >> 13)) >> 32;
          v33[1] = (613566757 * (unint64_t)((-1044480 - v36 + (v36 << 8)) >> 13)) >> 32;
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_48;
      }
    }
    uint64_t v38 = 0;
LABEL_48:
    if ((v38 | (unint64_t)v31) < v18)
    {
      unsigned int v42 = *v32;
      unsigned int v43 = v32[1];
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        unsigned int v42 = 4096;
      }
      if (v43 >= 0xF000) {
        unsigned int v43 = 61440;
      }
      if (v43 <= 0x1000) {
        unsigned int v43 = 4096;
      }
      *uint64_t v33 = (613566757 * (unint64_t)((-1044480 - v42 + (v42 << 8)) >> 13)) >> 32;
      v33[1] = (613566757 * (unint64_t)((-1044480 - v43 + (v43 << 8)) >> 13)) >> 32;
    }
    uint64_t v11 = (unsigned __int16 *)((char *)v11 + v10);
    v17 += v16;
  }
  if (v19 == v28)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v19 - v28;
    do
    {
      uint64_t v46 = v11;
      char v47 = v17;
      if (v29)
      {
        unsigned int v48 = *v11;
        unsigned int v49 = v11[1];
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          unsigned int v48 = 4096;
        }
        if (v49 >= 0xF000) {
          unsigned int v49 = 61440;
        }
        if (v49 <= 0x1000) {
          int v50 = 4096;
        }
        else {
          int v50 = v49;
        }
        uint64_t v46 = v11 + 2;
        *uint64_t v17 = (613566757 * (unint64_t)((-1044480 - v48 + (v48 << 8)) >> 13)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1044480 - v50 + (v50 << 8)) >> 13)) >> 32;
        char v47 = v17 + 2;
      }
      if (v30)
      {
        uint64_t v51 = -(uint64_t)v30;
        do
        {
          unsigned int v52 = *v46;
          unsigned int v53 = v46[1];
          if (v52 >= 0xF000) {
            unsigned int v52 = 61440;
          }
          if (v52 <= 0x1000) {
            unsigned int v52 = 4096;
          }
          if (v53 >= 0xF000) {
            unsigned int v53 = 61440;
          }
          if (v53 <= 0x1000) {
            unsigned int v53 = 4096;
          }
          unint64_t v54 = (613566757 * (unint64_t)((-1044480 - v52 + (v52 << 8)) >> 13)) >> 32;
          unint64_t v55 = (613566757 * (unint64_t)((-1044480 - v53 + (v53 << 8)) >> 13)) >> 32;
          unsigned char *v47 = v54;
          v47[1] = v55;
          v46 += 2;
          v47[2] = v54;
          v47[3] = v55;
          v47 += 4;
          BOOL v37 = __CFADD__(v51++, 1);
        }
        while (!v37);
      }
      if ((v31 | (2 * v30)) < v18)
      {
        unsigned int v56 = *v46;
        unsigned int v57 = v46[1];
        if (v56 >= 0xF000) {
          unsigned int v56 = 61440;
        }
        if (v56 <= 0x1000) {
          unsigned int v56 = 4096;
        }
        if (v57 >= 0xF000) {
          unsigned int v57 = 61440;
        }
        if (v57 <= 0x1000) {
          unsigned int v57 = 4096;
        }
        unsigned char *v47 = (613566757 * (unint64_t)((-1044480 - v56 + (v56 << 8)) >> 13)) >> 32;
        v47[1] = (613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32;
      }
      uint64_t v11 = (unsigned __int16 *)((char *)v11 + v10);
      v17 += v16;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v27 < v19)
  {
    if (v29)
    {
      unsigned int v58 = *v11;
      unsigned int v59 = v11[1];
      if (v58 >= 0xF000) {
        unsigned int v58 = 61440;
      }
      if (v58 <= 0x1000) {
        unsigned int v58 = 4096;
      }
      if (v59 >= 0xF000) {
        unsigned int v59 = 61440;
      }
      if (v59 <= 0x1000) {
        unsigned int v59 = 4096;
      }
      v11 += 2;
      *uint64_t v17 = (613566757 * (unint64_t)((-1044480 - v58 + (v58 << 8)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32;
      v17 += 2;
    }
    if (v30)
    {
      uint64_t v60 = -(uint64_t)v30;
      do
      {
        unsigned int v61 = *v11;
        unsigned int v62 = v11[1];
        if (v61 >= 0xF000) {
          unsigned int v61 = 61440;
        }
        if (v61 <= 0x1000) {
          unsigned int v61 = 4096;
        }
        if (v62 >= 0xF000) {
          unsigned int v62 = 61440;
        }
        if (v62 <= 0x1000) {
          unsigned int v62 = 4096;
        }
        v11 += 2;
        *uint64_t v17 = (613566757 * (unint64_t)((-1044480 - v61 + (v61 << 8)) >> 13)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1044480 - v62 + (v62 << 8)) >> 13)) >> 32;
        v17 += 2;
        BOOL v37 = __CFADD__(v60++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v18)
    {
      unsigned int v63 = *v11;
      unsigned int v64 = v11[1];
      if (v63 >= 0xF000) {
        unsigned int v63 = 61440;
      }
      if (v63 <= 0x1000) {
        unsigned int v63 = 4096;
      }
      if (v64 >= 0xF000) {
        unsigned int v64 = 61440;
      }
      if (v64 <= 0x1000) {
        unsigned int v64 = 4096;
      }
      *uint64_t v17 = (613566757 * (unint64_t)((-1044480 - v63 + (v63 << 8)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1044480 - v64 + (v64 << 8)) >> 13)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_s2as_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = 2 * (v10 + v9);
  uint64_t v13 = a4[1];
  unint64_t v14 = a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = a8[1];
  unint64_t v19 = (unsigned char *)(a7[1] + v18 * v17 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v20 >= v16 - v15) {
    unint64_t v20 = v16 - v15;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a8;
    uint64_t v23 = a8[2];
    uint64_t v24 = a7[2] + v23 * v17;
    uint64_t v25 = *a7 + *a8 * v17;
    uint64_t v26 = *a4;
    uint64_t v27 = a4[2];
    uint64_t v28 = v24 + v15;
    uint64_t v29 = v25 + v15;
    uint64_t v30 = a3[2] + v27 * v11 + v12;
    uint64_t v31 = *a3 + v26 * v11 + v12;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(unsigned char *)(v28 + i) = *(_WORD *)(v30 + 2 * i);
          *(unsigned char *)(v29 + i) = *(unsigned char *)(v31 + 2 * i + 1);
        }
      }
      v31 += v26;
      v29 += v22;
      v30 += v27;
      v28 += v23;
      ++v21;
    }
    while (v21 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v10 = v9 & 1;
  }
  unint64_t v33 = v11 & 1;
  if (v8 >= v33) {
    uint64_t v34 = v11 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  unint64_t v35 = v20 >> 1;
  unint64_t v36 = v20 - v10;
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  if (v11)
  {
    if (v9)
    {
      char v40 = *(unsigned char *)(v14 + 3);
      unint64_t v38 = v14 + 4;
      *unint64_t v19 = *(unsigned char *)(v14 + 1);
      v19[1] = v40;
      unsigned int v39 = v19 + 2;
      if (!v37)
      {
LABEL_26:
        v14 += v13;
        v19 += v18;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v38 = v14;
      unsigned int v39 = v19;
      if (!v37) {
        goto LABEL_26;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      char v42 = *(unsigned char *)(v38 + 3);
      *unsigned int v39 = *(unsigned char *)(v38 + 1);
      v39[1] = v42;
      v39 += 2;
      v38 += 4;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v34)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v34;
    do
    {
      unint64_t v46 = v14;
      char v47 = v19;
      if (v9)
      {
        char v48 = *(unsigned char *)(v14 + 3);
        unint64_t v46 = v14 + 4;
        *unint64_t v19 = *(unsigned char *)(v14 + 1);
        v19[1] = v48;
        char v47 = v19 + 2;
      }
      if (v37)
      {
        uint64_t v49 = -(uint64_t)v37;
        do
        {
          char v50 = *(unsigned char *)(v46 + 3);
          unsigned char *v47 = *(unsigned char *)(v46 + 1);
          v47[1] = v50;
          v47 += 2;
          v46 += 4;
          BOOL v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      v19 += v18;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if (v9)
    {
      char v51 = *(unsigned char *)(v14 + 1);
      char v52 = *(unsigned char *)(v14 + 3);
      v14 += 4;
      *unint64_t v19 = v51;
      v19[1] = v52;
      v19 += 2;
    }
    if (v37)
    {
      uint64_t v53 = -(uint64_t)v37;
      do
      {
        char v54 = *(unsigned char *)(v14 + 3);
        *unint64_t v19 = *(unsigned char *)(v14 + 1);
        v19[1] = v54;
        v19 += 2;
        v14 += 4;
        BOOL v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = 2 * (v10 + v9);
  uint64_t v13 = a4[1];
  unint64_t v14 = a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  unint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16) {
    unint64_t v21 = v17 - v16;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v18 + v16;
    uint64_t v26 = *a3 + *a4 * v11 + v12;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v25 + i) = *(unsigned char *)(v26 + 2 * i + 1);
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v10 = v9 & 1;
  }
  unint64_t v28 = v11 & 1;
  if (v8 >= v28) {
    uint64_t v29 = v11 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  unint64_t v30 = v21 >> 1;
  unint64_t v31 = v21 - v10;
  if (v30 >= v31 >> 1) {
    unint64_t v32 = v31 >> 1;
  }
  else {
    unint64_t v32 = v30;
  }
  if (v11)
  {
    if (v9)
    {
      char v35 = *(unsigned char *)(v14 + 3);
      unint64_t v33 = v14 + 4;
      *unint64_t v20 = *(unsigned char *)(v14 + 1);
      v20[1] = v35;
      uint64_t v34 = v20 + 2;
      if (!v32)
      {
LABEL_26:
        v14 += v13;
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v33 = v14;
      uint64_t v34 = v20;
      if (!v32) {
        goto LABEL_26;
      }
    }
    uint64_t v36 = -(uint64_t)v32;
    do
    {
      char v37 = *(unsigned char *)(v33 + 3);
      *uint64_t v34 = *(unsigned char *)(v33 + 1);
      v34[1] = v37;
      v34 += 2;
      v33 += 4;
      BOOL v38 = __CFADD__(v36++, 1);
    }
    while (!v38);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v29)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v29;
    do
    {
      unint64_t v41 = v14;
      char v42 = v20;
      if (v9)
      {
        char v43 = *(unsigned char *)(v14 + 3);
        unint64_t v41 = v14 + 4;
        *unint64_t v20 = *(unsigned char *)(v14 + 1);
        v20[1] = v43;
        char v42 = v20 + 2;
      }
      if (v32)
      {
        uint64_t v44 = -(uint64_t)v32;
        do
        {
          char v45 = *(unsigned char *)(v41 + 3);
          *char v42 = *(unsigned char *)(v41 + 1);
          v42[1] = v45;
          v42 += 2;
          v41 += 4;
          BOOL v38 = __CFADD__(v44++, 1);
        }
        while (!v38);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v28 < v8)
  {
    if (v9)
    {
      char v46 = *(unsigned char *)(v14 + 1);
      char v47 = *(unsigned char *)(v14 + 3);
      v14 += 4;
      *unint64_t v20 = v46;
      v20[1] = v47;
      v20 += 2;
    }
    if (v32)
    {
      uint64_t v48 = -(uint64_t)v32;
      do
      {
        char v49 = *(unsigned char *)(v14 + 3);
        *unint64_t v20 = *(unsigned char *)(v14 + 1);
        v20[1] = v49;
        v20 += 2;
        v14 += 4;
        BOOL v38 = __CFADD__(v48++, 1);
      }
      while (!v38);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = 2 * (v10 + v9);
  uint64_t v13 = a4[1];
  unint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  unint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16) {
    unint64_t v21 = v17 - v16;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v18 + v16;
    uint64_t v26 = *a3 + v23 * v11 + v12;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v28 = *(unsigned __int16 *)(v26 + 2 * i);
          if (v28 >= 0xEB00) {
            unsigned int v28 = 60160;
          }
          if (v28 <= 0x1000) {
            unsigned int v28 = 4096;
          }
          *(unsigned char *)(v25 + i) = (-1044480 - v28 + (v28 << 8)) / 0xDB00;
        }
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v11 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v11 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  unint64_t v31 = v21 >> 1;
  unint64_t v32 = v21 - v10;
  if (v31 >= v32 >> 1) {
    unint64_t v33 = v32 >> 1;
  }
  else {
    unint64_t v33 = v31;
  }
  if (v11)
  {
    if (v9)
    {
      unsigned int v36 = *v14;
      if (v36 >= 0xF000) {
        unsigned int v36 = 61440;
      }
      if (v36 <= 0x1000) {
        int v37 = 4096;
      }
      else {
        int v37 = v36;
      }
      if (v14[1] >= 0xF000u) {
        unsigned int v38 = 61440;
      }
      else {
        unsigned int v38 = v14[1];
      }
      if (v38 <= 0x1000) {
        int v39 = 4096;
      }
      else {
        int v39 = v38;
      }
      uint64_t v34 = v14 + 2;
      *unint64_t v20 = (613566757 * (unint64_t)((-1044480 - v37 + (v37 << 8)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-1044480 - v39 + (v39 << 8)) >> 13)) >> 32;
      char v35 = v20 + 2;
      if (!v33) {
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t v34 = v14;
      char v35 = v20;
      if (!v33)
      {
LABEL_49:
        unint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_50;
      }
    }
    uint64_t v40 = -(uint64_t)v33;
    do
    {
      unsigned int v41 = *v34;
      unsigned int v42 = v34[1];
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        unsigned int v41 = 4096;
      }
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        unsigned int v42 = 4096;
      }
      *char v35 = (613566757 * (unint64_t)((-1044480 - v41 + (v41 << 8)) >> 13)) >> 32;
      v35[1] = (613566757 * (unint64_t)((-1044480 - v42 + (v42 << 8)) >> 13)) >> 32;
      v35 += 2;
      v34 += 2;
      BOOL v43 = __CFADD__(v40++, 1);
    }
    while (!v43);
    goto LABEL_49;
  }
LABEL_50:
  if (v8 == v30)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v30;
    do
    {
      char v46 = v14;
      char v47 = v20;
      if (v9)
      {
        unsigned int v48 = *v14;
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          int v49 = 4096;
        }
        else {
          int v49 = v48;
        }
        if (v14[1] >= 0xF000u) {
          unsigned int v50 = 61440;
        }
        else {
          unsigned int v50 = v14[1];
        }
        if (v50 <= 0x1000) {
          int v51 = 4096;
        }
        else {
          int v51 = v50;
        }
        char v46 = v14 + 2;
        *unint64_t v20 = (613566757 * (unint64_t)((-1044480 - v49 + (v49 << 8)) >> 13)) >> 32;
        v20[1] = (613566757 * (unint64_t)((-1044480 - v51 + (v51 << 8)) >> 13)) >> 32;
        char v47 = v20 + 2;
      }
      if (v33)
      {
        uint64_t v52 = -(uint64_t)v33;
        do
        {
          unsigned int v53 = *v46;
          unsigned int v54 = v46[1];
          if (v53 >= 0xF000) {
            unsigned int v53 = 61440;
          }
          if (v53 <= 0x1000) {
            unsigned int v53 = 4096;
          }
          if (v54 >= 0xF000) {
            unsigned int v54 = 61440;
          }
          if (v54 <= 0x1000) {
            unsigned int v54 = 4096;
          }
          unsigned char *v47 = (613566757 * (unint64_t)((-1044480 - v53 + (v53 << 8)) >> 13)) >> 32;
          v47[1] = (613566757 * (unint64_t)((-1044480 - v54 + (v54 << 8)) >> 13)) >> 32;
          v47 += 2;
          v46 += 2;
          BOOL v43 = __CFADD__(v52++, 1);
        }
        while (!v43);
      }
      unint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v29 < v8)
  {
    if (v9)
    {
      unsigned int v55 = *v14;
      unsigned int v56 = v14[1];
      if (v55 >= 0xF000) {
        unsigned int v55 = 61440;
      }
      if (v55 <= 0x1000) {
        unsigned int v55 = 4096;
      }
      if (v56 >= 0xF000) {
        unsigned int v56 = 61440;
      }
      if (v56 <= 0x1000) {
        unsigned int v56 = 4096;
      }
      v14 += 2;
      *unint64_t v20 = (613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-1044480 - v56 + (v56 << 8)) >> 13)) >> 32;
      v20 += 2;
    }
    if (v33)
    {
      uint64_t v57 = -(uint64_t)v33;
      do
      {
        unsigned int v58 = *v14;
        unsigned int v59 = v14[1];
        if (v58 >= 0xF000) {
          unsigned int v58 = 61440;
        }
        if (v58 <= 0x1000) {
          unsigned int v58 = 4096;
        }
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          unsigned int v59 = 4096;
        }
        *unint64_t v20 = (613566757 * (unint64_t)((-1044480 - v58 + (v58 << 8)) >> 13)) >> 32;
        v20[1] = (613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32;
        v20 += 2;
        v14 += 2;
        BOOL v43 = __CFADD__(v57++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_s2as_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  unint64_t v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    if (v12 >= v8) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = *a3 + *a4 * v12 + v14 + v29;
    uint64_t v31 = a4[2];
    uint64_t v32 = a7[2] + v28 * v19 + v17;
    uint64_t v33 = *a7 + v27 * v19 + v17;
    uint64_t v34 = a3[2] + v31 * v12 + v14;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(unsigned char *)(v32 + i) = *(_WORD *)(v34 + 2 * i);
          *(unsigned char *)(v33 + i) = *(unsigned char *)(v30 + 2 * i + 1);
        }
      }
      v30 += v26;
      v33 += v27;
      v34 += v31;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v36 = v11;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v23 >> 1;
  unint64_t v38 = v23 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v9)
    {
      unint64_t v40 = v16 + 4;
      unsigned int v42 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
      *uint64_t v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
      v22[1] = v42;
      unsigned int v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v40 = v16;
      unsigned int v41 = v22;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      int v44 = *(unsigned __int8 *)(v40 + 1);
      int v45 = *(unsigned __int8 *)(v40 + 3);
      int v46 = *(unsigned __int8 *)(v40 + v15 + 1);
      int v47 = *(unsigned __int8 *)(v40 + v15 + 3);
      v40 += 4;
      unsigned char *v41 = (v44 + v46 + 1) >> 1;
      v41[1] = (v45 + v47 + 1) >> 1;
      v41 += 2;
      BOOL v48 = __CFADD__(v43++, 1);
    }
    while (!v48);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    unint64_t v49 = 0;
    unint64_t v50 = v24 - v36;
    do
    {
      unint64_t v51 = v16;
      uint64_t v52 = v22;
      if (v9)
      {
        unint64_t v51 = v16 + 4;
        unsigned int v53 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
        *uint64_t v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
        v22[1] = v53;
        uint64_t v52 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v54 = -(uint64_t)v39;
        do
        {
          int v55 = *(unsigned __int8 *)(v51 + 1);
          int v56 = *(unsigned __int8 *)(v51 + 3);
          int v57 = *(unsigned __int8 *)(v51 + v15 + 1);
          int v58 = *(unsigned __int8 *)(v51 + v15 + 3);
          v51 += 4;
          *uint64_t v52 = (v55 + v57 + 1) >> 1;
          v52[1] = (v56 + v58 + 1) >> 1;
          v52 += 2;
          BOOL v48 = __CFADD__(v54++, 1);
        }
        while (!v48);
      }
      v16 += 2 * v15;
      v22 += v21;
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_CopyDec_s2as_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  unint64_t v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    if (v12 >= v8) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = *a3 + *a4 * v12 + v14 + v29;
    uint64_t v31 = a4[2];
    uint64_t v32 = a7[2] + v28 * v19 + v17;
    uint64_t v33 = *a7 + v27 * v19 + v17;
    uint64_t v34 = a3[2] + v31 * v12 + v14;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(unsigned char *)(v32 + i) = *(_WORD *)(v34 + 2 * i);
          *(unsigned char *)(v33 + i) = *(unsigned char *)(v30 + 2 * i + 1);
        }
      }
      v30 += v26;
      v33 += v27;
      v34 += v31;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v36 = v11;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v23 >> 1;
  unint64_t v38 = v23 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v9)
    {
      char v42 = *(unsigned char *)(v16 + 3);
      unint64_t v40 = v16 + 4;
      *uint64_t v22 = *(unsigned char *)(v16 + 1);
      v22[1] = v42;
      unsigned int v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v40 = v16;
      unsigned int v41 = v22;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      char v44 = *(unsigned char *)(v40 + 3);
      unsigned char *v41 = *(unsigned char *)(v40 + 1);
      v41[1] = v44;
      v41 += 2;
      v40 += 4;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    unint64_t v46 = 0;
    unint64_t v47 = v24 - v36;
    uint64_t v48 = 2 * v15;
    do
    {
      unint64_t v49 = v16;
      unint64_t v50 = v22;
      if (v9)
      {
        char v51 = *(unsigned char *)(v16 + 3);
        unint64_t v49 = v16 + 4;
        *uint64_t v22 = *(unsigned char *)(v16 + 1);
        v22[1] = v51;
        unint64_t v50 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v52 = -(uint64_t)v39;
        do
        {
          char v53 = *(unsigned char *)(v49 + 3);
          unsigned char *v50 = *(unsigned char *)(v49 + 1);
          v50[1] = v53;
          v50 += 2;
          v49 += 4;
          BOOL v45 = __CFADD__(v52++, 1);
        }
        while (!v45);
      }
      v16 += v48;
      v22 += v21;
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  unint64_t v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v12 >= v8) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v12 + v14 + v28;
    uint64_t v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(unsigned char *)(v30 + i) = *(unsigned char *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v32 = v11;
  }
  else {
    unint64_t v32 = 0;
  }
  unint64_t v33 = v23 >> 1;
  unint64_t v34 = v23 - v10;
  if (v33 >= v34 >> 1) {
    unint64_t v35 = v34 >> 1;
  }
  else {
    unint64_t v35 = v33;
  }
  if (v11)
  {
    if (v9)
    {
      unint64_t v36 = v16 + 4;
      unsigned int v38 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
      *uint64_t v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
      v22[1] = v38;
      unint64_t v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v22;
      if (!v35) {
        goto LABEL_29;
      }
    }
    uint64_t v39 = -(uint64_t)v35;
    do
    {
      int v40 = *(unsigned __int8 *)(v36 + 1);
      int v41 = *(unsigned __int8 *)(v36 + 3);
      int v42 = *(unsigned __int8 *)(v36 + v15 + 1);
      int v43 = *(unsigned __int8 *)(v36 + v15 + 3);
      v36 += 4;
      *unint64_t v37 = (v40 + v42 + 1) >> 1;
      v37[1] = (v41 + v43 + 1) >> 1;
      v37 += 2;
      BOOL v44 = __CFADD__(v39++, 1);
    }
    while (!v44);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v24 - v32;
    do
    {
      unint64_t v47 = v16;
      uint64_t v48 = v22;
      if (v9)
      {
        unint64_t v47 = v16 + 4;
        unsigned int v49 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
        *uint64_t v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
        v22[1] = v49;
        uint64_t v48 = v22 + 2;
      }
      if (v35)
      {
        uint64_t v50 = -(uint64_t)v35;
        do
        {
          int v51 = *(unsigned __int8 *)(v47 + 1);
          int v52 = *(unsigned __int8 *)(v47 + 3);
          int v53 = *(unsigned __int8 *)(v47 + v15 + 1);
          int v54 = *(unsigned __int8 *)(v47 + v15 + 3);
          v47 += 4;
          *uint64_t v48 = (v51 + v53 + 1) >> 1;
          v48[1] = (v52 + v54 + 1) >> 1;
          v48 += 2;
          BOOL v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      v16 += 2 * v15;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  unint64_t v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v12 >= v8) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v12 + v14 + v28;
    uint64_t v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(unsigned char *)(v30 + i) = *(unsigned char *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v32 = v11;
  }
  else {
    unint64_t v32 = 0;
  }
  unint64_t v33 = v23 >> 1;
  unint64_t v34 = v23 - v10;
  if (v33 >= v34 >> 1) {
    unint64_t v35 = v34 >> 1;
  }
  else {
    unint64_t v35 = v33;
  }
  if (v11)
  {
    if (v9)
    {
      char v38 = *(unsigned char *)(v16 + 3);
      unint64_t v36 = v16 + 4;
      *uint64_t v22 = *(unsigned char *)(v16 + 1);
      v22[1] = v38;
      unint64_t v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v22;
      if (!v35) {
        goto LABEL_29;
      }
    }
    uint64_t v39 = -(uint64_t)v35;
    do
    {
      char v40 = *(unsigned char *)(v36 + 3);
      *unint64_t v37 = *(unsigned char *)(v36 + 1);
      v37[1] = v40;
      v37 += 2;
      v36 += 4;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    unint64_t v42 = 0;
    unint64_t v43 = v24 - v32;
    uint64_t v44 = 2 * v15;
    do
    {
      unint64_t v45 = v16;
      unint64_t v46 = v22;
      if (v9)
      {
        char v47 = *(unsigned char *)(v16 + 3);
        unint64_t v45 = v16 + 4;
        *uint64_t v22 = *(unsigned char *)(v16 + 1);
        v22[1] = v47;
        unint64_t v46 = v22 + 2;
      }
      if (v35)
      {
        uint64_t v48 = -(uint64_t)v35;
        do
        {
          char v49 = *(unsigned char *)(v45 + 3);
          *unint64_t v46 = *(unsigned char *)(v45 + 1);
          v46[1] = v49;
          v46 += 2;
          v45 += 4;
          BOOL v41 = __CFADD__(v48++, 1);
        }
        while (!v41);
      }
      v16 += v44;
      v22 += v21;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  unint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v23 >= v18 - v17) {
    unint64_t v23 = v18 - v17;
  }
  unint64_t v24 = v13 - v12;
  unint64_t v25 = v20 - v19;
  if (v13 - v12 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    BOOL v27 = v12 >= v9;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v27) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          unsigned int v35 = *(unsigned __int16 *)(v32 + 2 * i);
          if (v35 >= 0xEB00) {
            unsigned int v35 = 60160;
          }
          if (v35 <= 0x1000) {
            unsigned int v35 = 4096;
          }
          *(unsigned char *)(v33 + i) = (-1044480 - v35 + (v35 << 8)) / 0xDB00;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v24 >= v11) {
    unint64_t v36 = v11;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v23 >> 1;
  unint64_t v38 = v23 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v8)
    {
      unsigned int v42 = *v16;
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      if (v16[1] >= 0xF000u) {
        unsigned int v44 = 61440;
      }
      else {
        unsigned int v44 = v16[1];
      }
      if (v44 <= 0x1000) {
        int v45 = 4096;
      }
      else {
        int v45 = v44;
      }
      if (*(unsigned __int16 *)((char *)v16 + v15) >= 0xF000u) {
        unsigned int v46 = 61440;
      }
      else {
        unsigned int v46 = *(unsigned __int16 *)((char *)v16 + v15);
      }
      if (v46 <= 0x1000) {
        int v47 = 4096;
      }
      else {
        int v47 = v46;
      }
      if (*(unsigned __int16 *)((char *)v16 + v15 + 2) >= 0xF000u) {
        unsigned int v48 = 61440;
      }
      else {
        unsigned int v48 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      }
      if (v48 <= 0x1000) {
        int v49 = 4096;
      }
      else {
        int v49 = v48;
      }
      char v40 = v16 + 2;
      *uint64_t v22 = (((613566757 * (unint64_t)((-1044480 - v43 + (v43 << 8)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-1044480 - v47 + (v47 << 8)) >> 13)) >> 32)
                          + 1) >> 1;
      v22[1] = (((613566757 * (unint64_t)((-1044480 - v45 + (v45 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v49 + (v49 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
      BOOL v41 = v22 + 2;
      if (!v39) {
        goto LABEL_72;
      }
    }
    else
    {
      char v40 = v16;
      BOOL v41 = v22;
      if (!v39)
      {
LABEL_72:
        v16 += v15;
        v22 += v21;
        goto LABEL_73;
      }
    }
    uint64_t v50 = -(uint64_t)v39;
    do
    {
      unsigned int v51 = *v40;
      unsigned int v52 = v40[1];
      unsigned int v53 = *(unsigned __int16 *)((char *)v40 + v15);
      unsigned int v54 = *(unsigned __int16 *)((char *)v40 + v15 + 2);
      if (v51 >= 0xF000) {
        unsigned int v51 = 61440;
      }
      if (v51 <= 0x1000) {
        unsigned int v51 = 4096;
      }
      if (v52 >= 0xF000) {
        unsigned int v52 = 61440;
      }
      if (v52 <= 0x1000) {
        unsigned int v52 = 4096;
      }
      if (v53 >= 0xF000) {
        unsigned int v53 = 61440;
      }
      if (v53 <= 0x1000) {
        unsigned int v53 = 4096;
      }
      if (v54 >= 0xF000) {
        unsigned int v54 = 61440;
      }
      if (v54 <= 0x1000) {
        unsigned int v54 = 4096;
      }
      v40 += 2;
      unsigned char *v41 = (((613566757 * (unint64_t)((-1044480 - v51 + (v51 << 8)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-1044480 - v53 + (v53 << 8)) >> 13)) >> 32)
                          + 1) >> 1;
      v41[1] = (((613566757 * (unint64_t)((-1044480 - v52 + (v52 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v54 + (v54 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
      v41 += 2;
      BOOL v27 = __CFADD__(v50++, 1);
    }
    while (!v27);
    goto LABEL_72;
  }
LABEL_73:
  if (v24 != v36)
  {
    unint64_t v55 = 0;
    unint64_t v56 = v24 - v36;
    do
    {
      int v57 = v16;
      int v58 = v22;
      if (v8)
      {
        unsigned int v59 = *v16;
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          int v60 = 4096;
        }
        else {
          int v60 = v59;
        }
        if (v16[1] >= 0xF000u) {
          unsigned int v61 = 61440;
        }
        else {
          unsigned int v61 = v16[1];
        }
        if (v61 <= 0x1000) {
          int v62 = 4096;
        }
        else {
          int v62 = v61;
        }
        if (*(unsigned __int16 *)((char *)v16 + v15) >= 0xF000u) {
          unsigned int v63 = 61440;
        }
        else {
          unsigned int v63 = *(unsigned __int16 *)((char *)v16 + v15);
        }
        if (v63 <= 0x1000) {
          int v64 = 4096;
        }
        else {
          int v64 = v63;
        }
        if (*(unsigned __int16 *)((char *)v16 + v15 + 2) >= 0xF000u) {
          unsigned int v65 = 61440;
        }
        else {
          unsigned int v65 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        }
        if (v65 <= 0x1000) {
          int v66 = 4096;
        }
        else {
          int v66 = v65;
        }
        int v57 = v16 + 2;
        *uint64_t v22 = (((613566757 * (unint64_t)((-1044480 - v60 + (v60 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v64 + (v64 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
        v22[1] = (((613566757 * (unint64_t)((-1044480 - v62 + (v62 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v66 + (v66 << 8)) >> 13)) >> 32)
                              + 1) >> 1;
        int v58 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v67 = -(uint64_t)v39;
        do
        {
          unsigned int v68 = *v57;
          unsigned int v69 = v57[1];
          unsigned int v70 = *(unsigned __int16 *)((char *)v57 + v15);
          unsigned int v71 = *(unsigned __int16 *)((char *)v57 + v15 + 2);
          if (v68 >= 0xF000) {
            unsigned int v68 = 61440;
          }
          if (v68 <= 0x1000) {
            unsigned int v68 = 4096;
          }
          if (v69 >= 0xF000) {
            unsigned int v69 = 61440;
          }
          if (v69 <= 0x1000) {
            unsigned int v69 = 4096;
          }
          if (v70 >= 0xF000) {
            unsigned int v70 = 61440;
          }
          if (v70 <= 0x1000) {
            unsigned int v70 = 4096;
          }
          if (v71 >= 0xF000) {
            unsigned int v71 = 61440;
          }
          if (v71 <= 0x1000) {
            unsigned int v71 = 4096;
          }
          v57 += 2;
          unsigned char *v58 = (((613566757 * (unint64_t)((-1044480 - v68 + (v68 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v70 + (v70 << 8)) >> 13)) >> 32)
                              + 1) >> 1;
          v58[1] = (((613566757 * (unint64_t)((-1044480 - v69 + (v69 << 8)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-1044480 - v71 + (v71 << 8)) >> 13)) >> 32)
                                + 1) >> 1;
          v58 += 2;
          BOOL v27 = __CFADD__(v67++, 1);
        }
        while (!v27);
      }
      v16 += v15;
      v22 += v21;
      v55 += 2;
    }
    while (v55 < v56);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  unint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v23 >= v18 - v17) {
    unint64_t v23 = v18 - v17;
  }
  unint64_t v24 = v13 - v12;
  unint64_t v25 = v20 - v19;
  if (v13 - v12 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    BOOL v27 = v12 >= v9;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v27) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          unsigned int v35 = *(unsigned __int16 *)(v32 + 2 * i);
          if (v35 >= 0xEB00) {
            unsigned int v35 = 60160;
          }
          if (v35 <= 0x1000) {
            unsigned int v35 = 4096;
          }
          *(unsigned char *)(v33 + i) = (-1044480 - v35 + (v35 << 8)) / 0xDB00;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v24 >= v11) {
    unint64_t v36 = v11;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v23 >> 1;
  unint64_t v38 = v23 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v8)
    {
      unsigned int v42 = *v16;
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      if (v16[1] >= 0xF000u) {
        unsigned int v44 = 61440;
      }
      else {
        unsigned int v44 = v16[1];
      }
      if (v44 <= 0x1000) {
        int v45 = 4096;
      }
      else {
        int v45 = v44;
      }
      char v40 = v16 + 2;
      *uint64_t v22 = (613566757 * (unint64_t)((-1044480 - v43 + (v43 << 8)) >> 13)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-1044480 - v45 + (v45 << 8)) >> 13)) >> 32;
      BOOL v41 = v22 + 2;
      if (!v39) {
        goto LABEL_52;
      }
    }
    else
    {
      char v40 = v16;
      BOOL v41 = v22;
      if (!v39)
      {
LABEL_52:
        v16 += v15;
        v22 += v21;
        goto LABEL_53;
      }
    }
    uint64_t v46 = -(uint64_t)v39;
    do
    {
      unsigned int v47 = *v40;
      unsigned int v48 = v40[1];
      if (v47 >= 0xF000) {
        unsigned int v47 = 61440;
      }
      if (v47 <= 0x1000) {
        unsigned int v47 = 4096;
      }
      if (v48 >= 0xF000) {
        unsigned int v48 = 61440;
      }
      if (v48 <= 0x1000) {
        unsigned int v48 = 4096;
      }
      unsigned char *v41 = (613566757 * (unint64_t)((-1044480 - v47 + (v47 << 8)) >> 13)) >> 32;
      v41[1] = (613566757 * (unint64_t)((-1044480 - v48 + (v48 << 8)) >> 13)) >> 32;
      v41 += 2;
      v40 += 2;
      BOOL v27 = __CFADD__(v46++, 1);
    }
    while (!v27);
    goto LABEL_52;
  }
LABEL_53:
  if (v24 != v36)
  {
    unint64_t v49 = 0;
    unint64_t v50 = v24 - v36;
    uint64_t v51 = 2 * v15;
    do
    {
      unsigned int v52 = v16;
      unsigned int v53 = v22;
      if (v8)
      {
        unsigned int v54 = *v16;
        if (v54 >= 0xF000) {
          unsigned int v54 = 61440;
        }
        if (v54 <= 0x1000) {
          int v55 = 4096;
        }
        else {
          int v55 = v54;
        }
        if (v16[1] >= 0xF000u) {
          unsigned int v56 = 61440;
        }
        else {
          unsigned int v56 = v16[1];
        }
        if (v56 <= 0x1000) {
          int v57 = 4096;
        }
        else {
          int v57 = v56;
        }
        unsigned int v52 = v16 + 2;
        *uint64_t v22 = (613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32;
        v22[1] = (613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32;
        unsigned int v53 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v58 = -(uint64_t)v39;
        do
        {
          unsigned int v59 = *v52;
          unsigned int v60 = v52[1];
          if (v59 >= 0xF000) {
            unsigned int v59 = 61440;
          }
          if (v59 <= 0x1000) {
            unsigned int v59 = 4096;
          }
          if (v60 >= 0xF000) {
            unsigned int v60 = 61440;
          }
          if (v60 <= 0x1000) {
            unsigned int v60 = 4096;
          }
          *unsigned int v53 = (613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32;
          v53[1] = (613566757 * (unint64_t)((-1044480 - v60 + (v60 << 8)) >> 13)) >> 32;
          v53 += 2;
          v52 += 2;
          BOOL v27 = __CFADD__(v58++, 1);
        }
        while (!v27);
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v16 + v51);
      v22 += v21;
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  unint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  unint64_t v16 = a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  unint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  unint64_t v26 = v13 - v12;
  unint64_t v27 = v20 - v19;
  if (v13 - v12 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v12;
    if (v12 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v14 + v32;
    unint64_t v34 = *a7 + v30 * v19 + v17;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(unsigned char *)(v34 + i) = *(unsigned char *)(v33 + 2 * i + 1);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v26 >= v11) {
    unint64_t v36 = v11;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v25 >> 1;
  unint64_t v38 = v25 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v8)
    {
      unint64_t v40 = v16 + 4;
      unsigned int v43 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
      *unint64_t v23 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
      BOOL v41 = v23 + 1;
      *unint64_t v24 = v43;
      unsigned int v42 = v24 + 1;
      if (!v39)
      {
LABEL_29:
        v16 += 2 * v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v40 = v16;
      BOOL v41 = v23;
      unsigned int v42 = v24;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v44 = -(uint64_t)v39;
    do
    {
      int v45 = *(unsigned __int8 *)(v40 + 1);
      int v46 = *(unsigned __int8 *)(v40 + 3);
      int v47 = *(unsigned __int8 *)(v40 + v15 + 1);
      int v48 = *(unsigned __int8 *)(v40 + v15 + 3);
      v40 += 4;
      *v41++ = (v45 + v47 + 1) >> 1;
      *v42++ = (v46 + v48 + 1) >> 1;
      BOOL v49 = __CFADD__(v44++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v36)
  {
    unint64_t v50 = 0;
    unint64_t v51 = v26 - v36;
    do
    {
      unint64_t v52 = v16;
      unsigned int v53 = v23;
      unsigned int v54 = v24;
      if (v8)
      {
        unint64_t v52 = v16 + 4;
        unsigned int v55 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
        *unint64_t v23 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
        unsigned int v53 = v23 + 1;
        *unint64_t v24 = v55;
        unsigned int v54 = v24 + 1;
      }
      if (v39)
      {
        uint64_t v56 = -(uint64_t)v39;
        do
        {
          int v57 = *(unsigned __int8 *)(v52 + 1);
          int v58 = *(unsigned __int8 *)(v52 + 3);
          int v59 = *(unsigned __int8 *)(v52 + v15 + 1);
          int v60 = *(unsigned __int8 *)(v52 + v15 + 3);
          v52 += 4;
          *v53++ = (v57 + v59 + 1) >> 1;
          *v54++ = (v58 + v60 + 1) >> 1;
          BOOL v49 = __CFADD__(v56++, 1);
        }
        while (!v49);
      }
      v16 += 2 * v15;
      v23 += v21;
      v24 += v22;
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  unint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  unint64_t v16 = a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  uint64_t v23 = a7[2];
  unint64_t v24 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  }
  unint64_t v27 = v13 - v12;
  unint64_t v28 = v20 - v19;
  if (v13 - v12 >= v28) {
    unint64_t v27 = v28;
  }
  if (v27)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + v30 * v12;
    if (v12 >= v9) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v30;
    }
    uint64_t v34 = v32 + v14 + v33;
    unint64_t v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
          *(unsigned char *)(v35 + i) = *(unsigned char *)(v34 + 2 * i + 1);
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v27 >= v11) {
    unint64_t v37 = v11;
  }
  else {
    unint64_t v37 = 0;
  }
  unint64_t v38 = v26 >> 1;
  unint64_t v39 = v26 - v10;
  if (v38 >= v39 >> 1) {
    unint64_t v40 = v39 >> 1;
  }
  else {
    unint64_t v40 = v38;
  }
  if (v11)
  {
    if (v8)
    {
      char v44 = *(unsigned char *)(v16 + 3);
      unint64_t v41 = v16 + 4;
      *unint64_t v24 = *(unsigned char *)(v16 + 1);
      unsigned int v42 = v24 + 1;
      *unint64_t v25 = v44;
      unsigned int v43 = v25 + 1;
      if (!v40)
      {
LABEL_29:
        v16 += 2 * v15;
        v24 += v21;
        v25 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v41 = v16;
      unsigned int v42 = v24;
      unsigned int v43 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v40) {
        goto LABEL_29;
      }
    }
    uint64_t v45 = -(uint64_t)v40;
    do
    {
      char v46 = *(unsigned char *)(v41 + 3);
      *v42++ = *(unsigned char *)(v41 + 1);
      *v43++ = v46;
      v41 += 4;
      BOOL v47 = __CFADD__(v45++, 1);
    }
    while (!v47);
    goto LABEL_29;
  }
LABEL_30:
  if (v27 != v37)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v27 - v37;
    uint64_t v50 = 2 * v15;
    do
    {
      unint64_t v51 = v16;
      unint64_t v52 = v24;
      unsigned int v53 = v25;
      if (v8)
      {
        char v54 = *(unsigned char *)(v16 + 3);
        unint64_t v51 = v16 + 4;
        *unint64_t v24 = *(unsigned char *)(v16 + 1);
        unint64_t v52 = v24 + 1;
        *unint64_t v25 = v54;
        unsigned int v53 = v25 + 1;
      }
      if (v40)
      {
        uint64_t v55 = -(uint64_t)v40;
        do
        {
          char v56 = *(unsigned char *)(v51 + 3);
          *v52++ = *(unsigned char *)(v51 + 1);
          *v53++ = v56;
          v51 += 4;
          BOOL v47 = __CFADD__(v55++, 1);
        }
        while (!v47);
      }
      v16 += v50;
      v24 += v21;
      v25 += v22;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  uint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v25 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  unint64_t v26 = v13 - v12;
  unint64_t v27 = v20 - v19;
  if (v13 - v12 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    BOOL v29 = v12 >= v8;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + v30 * v12;
    if (v29) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v30;
    }
    uint64_t v34 = v32 + v14 + v33;
    unint64_t v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          unsigned int v37 = *(unsigned __int16 *)(v34 + 2 * i);
          if (v37 >= 0xEB00) {
            unsigned int v37 = 60160;
          }
          if (v37 <= 0x1000) {
            unsigned int v37 = 4096;
          }
          *(unsigned char *)(v35 + i) = (-1044480 - v37 + (v37 << 8)) / 0xDB00;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v26 >= v11) {
    unint64_t v38 = v11;
  }
  else {
    unint64_t v38 = 0;
  }
  unint64_t v39 = v25 >> 1;
  unint64_t v40 = v25 - v10;
  if (v39 >= v40 >> 1) {
    unint64_t v41 = v40 >> 1;
  }
  else {
    unint64_t v41 = v39;
  }
  if (v11)
  {
    if (v9)
    {
      unsigned int v45 = *v16;
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        int v46 = 4096;
      }
      else {
        int v46 = v45;
      }
      if (v16[1] >= 0xF000u) {
        unsigned int v47 = 61440;
      }
      else {
        unsigned int v47 = v16[1];
      }
      if (v47 <= 0x1000) {
        int v48 = 4096;
      }
      else {
        int v48 = v47;
      }
      if (*(unsigned __int16 *)((char *)v16 + v15) >= 0xF000u) {
        unsigned int v49 = 61440;
      }
      else {
        unsigned int v49 = *(unsigned __int16 *)((char *)v16 + v15);
      }
      if (v49 <= 0x1000) {
        int v50 = 4096;
      }
      else {
        int v50 = v49;
      }
      if (*(unsigned __int16 *)((char *)v16 + v15 + 2) >= 0xF000u) {
        unsigned int v51 = 61440;
      }
      else {
        unsigned int v51 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      }
      if (v51 <= 0x1000) {
        int v52 = 4096;
      }
      else {
        int v52 = v51;
      }
      unsigned int v42 = v16 + 2;
      unsigned int v53 = (((613566757 * (unint64_t)((-1044480 - v48 + (v48 << 8)) >> 13)) >> 32)
                         + ((613566757 * (unint64_t)((-1044480 - v52 + (v52 << 8)) >> 13)) >> 32)
                         + 1) >> 1;
      *uint64_t v23 = (((613566757 * (unint64_t)((-1044480 - v46 + (v46 << 8)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-1044480 - v50 + (v50 << 8)) >> 13)) >> 32)
                          + 1) >> 1;
      unsigned int v43 = v23 + 1;
      *unint64_t v24 = v53;
      char v44 = v24 + 1;
      if (!v41) {
        goto LABEL_72;
      }
    }
    else
    {
      unsigned int v42 = v16;
      unsigned int v43 = v23;
      char v44 = v24;
      if (!v41)
      {
LABEL_72:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_73;
      }
    }
    uint64_t v54 = -(uint64_t)v41;
    do
    {
      unsigned int v55 = *v42;
      unsigned int v56 = v42[1];
      unsigned int v57 = *(unsigned __int16 *)((char *)v42 + v15);
      unsigned int v58 = *(unsigned __int16 *)((char *)v42 + v15 + 2);
      if (v55 >= 0xF000) {
        unsigned int v55 = 61440;
      }
      if (v55 <= 0x1000) {
        unsigned int v55 = 4096;
      }
      if (v56 >= 0xF000) {
        unsigned int v56 = 61440;
      }
      if (v56 <= 0x1000) {
        unsigned int v56 = 4096;
      }
      if (v57 >= 0xF000) {
        unsigned int v57 = 61440;
      }
      if (v57 <= 0x1000) {
        unsigned int v57 = 4096;
      }
      if (v58 >= 0xF000) {
        unsigned int v58 = 61440;
      }
      if (v58 <= 0x1000) {
        unsigned int v58 = 4096;
      }
      v42 += 2;
      *v43++ = (((613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
      *v44++ = (((613566757 * (unint64_t)((-1044480 - v56 + (v56 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v58 + (v58 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
      BOOL v29 = __CFADD__(v54++, 1);
    }
    while (!v29);
    goto LABEL_72;
  }
LABEL_73:
  if (v26 != v38)
  {
    unint64_t v59 = 0;
    unint64_t v60 = v26 - v38;
    do
    {
      unsigned int v61 = v16;
      int v62 = v23;
      unsigned int v63 = v24;
      if (v9)
      {
        unsigned int v64 = *v16;
        if (v64 >= 0xF000) {
          unsigned int v64 = 61440;
        }
        if (v64 <= 0x1000) {
          int v65 = 4096;
        }
        else {
          int v65 = v64;
        }
        if (v16[1] >= 0xF000u) {
          unsigned int v66 = 61440;
        }
        else {
          unsigned int v66 = v16[1];
        }
        if (v66 <= 0x1000) {
          int v67 = 4096;
        }
        else {
          int v67 = v66;
        }
        if (*(unsigned __int16 *)((char *)v16 + v15) >= 0xF000u) {
          unsigned int v68 = 61440;
        }
        else {
          unsigned int v68 = *(unsigned __int16 *)((char *)v16 + v15);
        }
        if (v68 <= 0x1000) {
          int v69 = 4096;
        }
        else {
          int v69 = v68;
        }
        if (*(unsigned __int16 *)((char *)v16 + v15 + 2) >= 0xF000u) {
          unsigned int v70 = 61440;
        }
        else {
          unsigned int v70 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        }
        if (v70 <= 0x1000) {
          int v71 = 4096;
        }
        else {
          int v71 = v70;
        }
        unsigned int v61 = v16 + 2;
        unsigned int v72 = (((613566757 * (unint64_t)((-1044480 - v65 + (v65 << 8)) >> 13)) >> 32)
                           + ((613566757 * (unint64_t)((-1044480 - v69 + (v69 << 8)) >> 13)) >> 32)
                           + 1) >> 1;
        unsigned int v73 = (((613566757 * (unint64_t)((-1044480 - v67 + (v67 << 8)) >> 13)) >> 32)
                           + ((613566757 * (unint64_t)((-1044480 - v71 + (v71 << 8)) >> 13)) >> 32)
                           + 1) >> 1;
        *uint64_t v23 = v72;
        int v62 = v23 + 1;
        *unint64_t v24 = v73;
        unsigned int v63 = v24 + 1;
      }
      if (v41)
      {
        uint64_t v74 = -(uint64_t)v41;
        do
        {
          unsigned int v75 = *v61;
          unsigned int v76 = v61[1];
          unsigned int v77 = *(unsigned __int16 *)((char *)v61 + v15);
          unsigned int v78 = *(unsigned __int16 *)((char *)v61 + v15 + 2);
          if (v75 >= 0xF000) {
            unsigned int v75 = 61440;
          }
          if (v75 <= 0x1000) {
            unsigned int v75 = 4096;
          }
          if (v76 >= 0xF000) {
            unsigned int v76 = 61440;
          }
          if (v76 <= 0x1000) {
            unsigned int v76 = 4096;
          }
          if (v77 >= 0xF000) {
            unsigned int v77 = 61440;
          }
          if (v77 <= 0x1000) {
            unsigned int v77 = 4096;
          }
          if (v78 >= 0xF000) {
            unsigned int v78 = 61440;
          }
          if (v78 <= 0x1000) {
            unsigned int v78 = 4096;
          }
          v61 += 2;
          *v62++ = (((613566757 * (unint64_t)((-1044480 - v75 + (v75 << 8)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-1044480 - v77 + (v77 << 8)) >> 13)) >> 32)
                                + 1) >> 1;
          *v63++ = (((613566757 * (unint64_t)((-1044480 - v76 + (v76 << 8)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-1044480 - v78 + (v78 << 8)) >> 13)) >> 32)
                                + 1) >> 1;
          BOOL v29 = __CFADD__(v74++, 1);
        }
        while (!v29);
      }
      v16 += v15;
      v23 += v21;
      v24 += v22;
      v59 += 2;
    }
    while (v59 < v60);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  uint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v25 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  unint64_t v26 = v13 - v12;
  unint64_t v27 = v20 - v19;
  if (v13 - v12 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    BOOL v29 = v12 >= v8;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + v30 * v12;
    if (v29) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v30;
    }
    uint64_t v34 = v32 + v14 + v33;
    unint64_t v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          unsigned int v37 = *(unsigned __int16 *)(v34 + 2 * i);
          if (v37 >= 0xEB00) {
            unsigned int v37 = 60160;
          }
          if (v37 <= 0x1000) {
            unsigned int v37 = 4096;
          }
          *(unsigned char *)(v35 + i) = (-1044480 - v37 + (v37 << 8)) / 0xDB00;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v26 >= v11) {
    unint64_t v38 = v11;
  }
  else {
    unint64_t v38 = 0;
  }
  unint64_t v39 = v25 >> 1;
  unint64_t v40 = v25 - v10;
  if (v39 >= v40 >> 1) {
    unint64_t v41 = v40 >> 1;
  }
  else {
    unint64_t v41 = v39;
  }
  if (v11)
  {
    if (v9)
    {
      unsigned int v45 = *v16;
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        int v46 = 4096;
      }
      else {
        int v46 = v45;
      }
      if (v16[1] >= 0xF000u) {
        unsigned int v47 = 61440;
      }
      else {
        unsigned int v47 = v16[1];
      }
      if (v47 <= 0x1000) {
        int v48 = 4096;
      }
      else {
        int v48 = v47;
      }
      unsigned int v42 = v16 + 2;
      unint64_t v49 = (613566757 * (unint64_t)((-1044480 - v48 + (v48 << 8)) >> 13)) >> 32;
      *uint64_t v23 = (613566757 * (unint64_t)((-1044480 - v46 + (v46 << 8)) >> 13)) >> 32;
      unsigned int v43 = v23 + 1;
      *unint64_t v24 = v49;
      char v44 = v24 + 1;
      if (!v41) {
        goto LABEL_52;
      }
    }
    else
    {
      unsigned int v42 = v16;
      unsigned int v43 = v23;
      char v44 = v24;
      if (!v41)
      {
LABEL_52:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_53;
      }
    }
    uint64_t v50 = -(uint64_t)v41;
    do
    {
      unsigned int v51 = *v42;
      unsigned int v52 = v42[1];
      if (v51 >= 0xF000) {
        unsigned int v51 = 61440;
      }
      if (v51 <= 0x1000) {
        unsigned int v51 = 4096;
      }
      if (v52 >= 0xF000) {
        unsigned int v52 = 61440;
      }
      if (v52 <= 0x1000) {
        unsigned int v52 = 4096;
      }
      *v43++ = (613566757 * (unint64_t)((-1044480 - v51 + (v51 << 8)) >> 13)) >> 32;
      *v44++ = (613566757 * (unint64_t)((-1044480 - v52 + (v52 << 8)) >> 13)) >> 32;
      v42 += 2;
      BOOL v29 = __CFADD__(v50++, 1);
    }
    while (!v29);
    goto LABEL_52;
  }
LABEL_53:
  if (v26 != v38)
  {
    unint64_t v53 = 0;
    unint64_t v54 = v26 - v38;
    uint64_t v55 = 2 * v15;
    do
    {
      unsigned int v56 = v16;
      unsigned int v57 = v23;
      unsigned int v58 = v24;
      if (v9)
      {
        unsigned int v59 = *v16;
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          int v60 = 4096;
        }
        else {
          int v60 = v59;
        }
        if (v16[1] >= 0xF000u) {
          unsigned int v61 = 61440;
        }
        else {
          unsigned int v61 = v16[1];
        }
        if (v61 <= 0x1000) {
          int v62 = 4096;
        }
        else {
          int v62 = v61;
        }
        unsigned int v56 = v16 + 2;
        unint64_t v63 = (613566757 * (unint64_t)((-1044480 - v62 + (v62 << 8)) >> 13)) >> 32;
        *uint64_t v23 = (613566757 * (unint64_t)((-1044480 - v60 + (v60 << 8)) >> 13)) >> 32;
        unsigned int v57 = v23 + 1;
        *unint64_t v24 = v63;
        unsigned int v58 = v24 + 1;
      }
      if (v41)
      {
        uint64_t v64 = -(uint64_t)v41;
        do
        {
          unsigned int v65 = *v56;
          unsigned int v66 = v56[1];
          if (v65 >= 0xF000) {
            unsigned int v65 = 61440;
          }
          if (v65 <= 0x1000) {
            unsigned int v65 = 4096;
          }
          if (v66 >= 0xF000) {
            unsigned int v66 = 61440;
          }
          if (v66 <= 0x1000) {
            unsigned int v66 = 4096;
          }
          *v57++ = (613566757 * (unint64_t)((-1044480 - v65 + (v65 << 8)) >> 13)) >> 32;
          *v58++ = (613566757 * (unint64_t)((-1044480 - v66 + (v66 << 8)) >> 13)) >> 32;
          v56 += 2;
          BOOL v29 = __CFADD__(v64++, 1);
        }
        while (!v29);
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v16 + v55);
      v23 += v21;
      v24 += v22;
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_Copy_sv22_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2]) {
    unint64_t v9 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v10 = a6[3];
  }
  else {
    uint64_t v10 = a2[3];
  }
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[5];
    uint64_t v17 = a3[1] + v14 * v16 + 2 * v8;
    uint64_t v18 = *a3 + *a4 * v16 + 2 * v8;
    do
    {
      if (v9)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        __int16 v21 = 0;
        __int16 v22 = 0;
        uint64_t v23 = (__int16 *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            __int16 v22 = *v23;
            __int16 v21 = v23[1];
            v23 += 2;
          }
          __int16 v24 = *(_WORD *)(v18 + 2 * v20);
          unint64_t v25 = (_WORD *)(v15 + v19);
          *unint64_t v25 = -1;
          v25[1] = v24;
          v25[2] = v22;
          v25[3] = v21;
          ++v20;
          v19 += 8;
        }
        while (v9 != v20);
      }
      v18 += v13;
      v15 += v12;
      v17 += v14;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_sv22_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2]) {
    unint64_t v9 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v10 = a6[3];
  }
  else {
    uint64_t v10 = a2[3];
  }
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[5];
    uint64_t v17 = a3[1] + v14 * v16 + 2 * v8;
    uint64_t v18 = *a3 + *a4 * v16 + 2 * v8;
    do
    {
      if (v9)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        char v21 = 0;
        char v22 = 0;
        uint64_t v23 = v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            char v22 = *(unsigned char *)(v23 + 1);
            char v21 = *(unsigned char *)(v23 + 3);
            v23 += 4;
          }
          char v24 = *(unsigned char *)(v18 + 2 * v20 + 1);
          unint64_t v25 = (unsigned char *)(v15 + v19);
          *unint64_t v25 = -1;
          v25[1] = v24;
          v25[2] = v22;
          v25[3] = v21;
          ++v20;
          v19 += 4;
        }
        while (v9 != v20);
      }
      v18 += v13;
      v15 += v12;
      v17 += v14;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_sv22_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a4[1];
  uint64_t v11 = (int *)(a3[1] + v10 * v9 + 2 * (v8 & 0xFFFFFFFE));
  uint64_t v12 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v14 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v16 = a8[1];
  uint64_t v17 = (int *)(a7[1] + v16 * v13 + 4 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= v14) {
    unint64_t v18 = v14;
  }
  else {
    unint64_t v18 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (a2[3] >= v15) {
    unint64_t v19 = v15;
  }
  else {
    unint64_t v19 = a2[3];
  }
  if (v19)
  {
    uint64_t v50 = a8[1];
    uint64_t v52 = a4[1];
    unint64_t v53 = v18;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = (char *)(a7[2] + v22 * v13 + 2 * v12);
    char v24 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    unint64_t v25 = (char *)(*a3 + *a4 * v9 + 2 * (v8 & 0xFFFFFFFE));
    size_t v26 = 2 * v18;
    unint64_t v51 = v19;
    do
    {
      memcpy(v24, v25, v26);
      memset(v23, 255, v26);
      v25 += v20;
      v24 += v21;
      v23 += v22;
      --v19;
    }
    while (v19);
    uint64_t v16 = v50;
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    uint64_t v10 = v52;
    unint64_t v18 = v53;
    unint64_t v19 = v51;
  }
  unint64_t v27 = v9 & 1;
  if (v19 >= v27) {
    uint64_t v28 = v9 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v8;
  unint64_t v30 = v18 >> 1;
  uint64_t v31 = v8 & 1;
  if (v18 >> 1 >= (v18 - v31) >> 1) {
    unint64_t v30 = (v18 - v31) >> 1;
  }
  if (v9)
  {
    uint64_t v32 = v11;
    if (v29)
    {
      uint64_t v32 = v11 + 1;
      *uint64_t v17 = *v11;
      uint64_t v33 = v17 + 1;
      if (v30)
      {
LABEL_19:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          int v35 = *v32++;
          *v33++ = v35;
          BOOL v36 = __CFADD__(v34++, 1);
        }
        while (!v36);
        uint64_t v37 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v33 = v17;
      if (v30) {
        goto LABEL_19;
      }
    }
    uint64_t v37 = 0;
LABEL_25:
    if ((v37 | (unint64_t)v31) < v18) {
      *uint64_t v33 = *v32;
    }
    uint64_t v11 = (int *)((char *)v11 + v10);
    uint64_t v17 = (int *)((char *)v17 + v16);
  }
  if (v19 == v28)
  {
    unint64_t v38 = 0;
  }
  else
  {
    uint64_t v39 = 0;
    unint64_t v38 = v19 - v28;
    do
    {
      unint64_t v40 = (__int16 *)v11;
      unint64_t v41 = v17;
      if (v29)
      {
        unint64_t v40 = (__int16 *)(v11 + 1);
        *uint64_t v17 = *v11;
        unint64_t v41 = v17 + 1;
      }
      if (v30)
      {
        uint64_t v42 = -(uint64_t)v30;
        do
        {
          __int16 v43 = *v40;
          __int16 v44 = v40[1];
          v40 += 2;
          *(_WORD *)unint64_t v41 = v43;
          *((_WORD *)v41 + 1) = v44;
          *((_WORD *)v41 + 2) = v43;
          *((_WORD *)v41 + 3) = v44;
          v41 += 2;
          BOOL v36 = __CFADD__(v42++, 1);
        }
        while (!v36);
      }
      if ((v31 | (2 * v30)) < v18) {
        int *v41 = *(_DWORD *)v40;
      }
      uint64_t v11 = (int *)((char *)v11 + v10);
      uint64_t v17 = (int *)((char *)v17 + v16);
      ++v39;
    }
    while (v39 != v38);
  }
  if (v38 + v27 < v19)
  {
    if (v29)
    {
      int v45 = *v11++;
      *v17++ = v45;
    }
    if (v30)
    {
      uint64_t v46 = -(uint64_t)v30;
      do
      {
        int v47 = *v11++;
        *v17++ = v47;
        BOOL v36 = __CFADD__(v46++, 1);
      }
      while (!v36);
      v30 *= 2;
    }
    if ((v30 | v31) < v18) {
      *uint64_t v17 = *v11;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = a4[1];
  uint64_t v12 = (int *)(a3[1] + v11 * v10 + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = 2 * v13;
  uint64_t v17 = a8[1];
  unint64_t v18 = (int *)(a7[1] + v17 * v15 + ((2 * v13) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v19 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8);
  if (v19 >= v14 - v13) {
    unint64_t v19 = v14 - v13;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v20 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v20 = *(void *)(a2 + 24);
  }
  if (v20)
  {
    uint64_t v49 = a8[1];
    unint64_t v50 = v20;
    uint64_t v51 = a4[1];
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = a8[2];
    char v24 = (char *)(a7[2] + v23 * v15 + v16);
    unint64_t v25 = (char *)(*a7 + *a8 * v15 + v16);
    size_t v26 = (char *)(*a3 + *a4 * v10 + 2 * (v9 + v8));
    unint64_t v47 = v19;
    size_t v27 = 2 * v19;
    do
    {
      memcpy(v25, v26, v27);
      memset(v24, 255, v27);
      v26 += v21;
      v25 += v22;
      v24 += v23;
      --v20;
    }
    while (v20);
    uint64_t v17 = v49;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v10 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
    unint64_t v20 = v50;
    uint64_t v11 = v51;
    unint64_t v19 = v47;
  }
  unint64_t v28 = v10 & 1;
  if (v20 >= v28) {
    uint64_t v29 = v10 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  char v30 = v8;
  unint64_t v31 = v19 >> 1;
  if (v19 >> 1 >= (v19 - v9) >> 1) {
    unint64_t v31 = (v19 - v9) >> 1;
  }
  if (v10)
  {
    uint64_t v32 = v12;
    if (v30)
    {
      uint64_t v32 = v12 + 1;
      *unint64_t v18 = *v12;
      uint64_t v33 = v18 + 1;
      if (!v31)
      {
LABEL_23:
        uint64_t v12 = (int *)((char *)v12 + v11);
        unint64_t v18 = (int *)((char *)v18 + v17);
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v33 = v18;
      if (!v31) {
        goto LABEL_23;
      }
    }
    uint64_t v34 = -(uint64_t)v31;
    do
    {
      int v35 = *v32++;
      *v33++ = v35;
      BOOL v36 = __CFADD__(v34++, 1);
    }
    while (!v36);
    goto LABEL_23;
  }
LABEL_24:
  if (v20 == v29)
  {
    unint64_t v37 = 0;
  }
  else
  {
    uint64_t v38 = 0;
    unint64_t v37 = v20 - v29;
    do
    {
      uint64_t v39 = v12;
      unint64_t v40 = v18;
      if (v30)
      {
        uint64_t v39 = v12 + 1;
        *unint64_t v18 = *v12;
        unint64_t v40 = v18 + 1;
      }
      if (v31)
      {
        uint64_t v41 = -(uint64_t)v31;
        do
        {
          int v42 = *v39++;
          *v40++ = v42;
          BOOL v36 = __CFADD__(v41++, 1);
        }
        while (!v36);
      }
      uint64_t v12 = (int *)((char *)v12 + v11);
      unint64_t v18 = (int *)((char *)v18 + v17);
      ++v38;
    }
    while (v38 != v37);
  }
  if (v37 + v28 < v20)
  {
    if (v30)
    {
      int v43 = *v12++;
      *v18++ = v43;
    }
    if (v31)
    {
      uint64_t v44 = -(uint64_t)v31;
      do
      {
        int v45 = *v12++;
        *v18++ = v45;
        BOOL v36 = __CFADD__(v44++, 1);
      }
      while (!v36);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  uint64_t v12 = (__int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v13 + 4 * v14);
  unint64_t v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2]) {
    unint64_t v17 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v10 = a6[3];
  }
  if (v10)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v13;
    uint64_t v22 = *a7 + *a8 * v13;
    uint64_t v23 = *a4;
    uint64_t v24 = v21 + 2 * v14;
    uint64_t v25 = v22 + 2 * v14;
    uint64_t v26 = *a3 + v23 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          *(_WORD *)(v24 + 2 * i) = -1;
          *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v26 + 2 * i) & 0xFFF0;
        }
      }
      v26 += v23;
      v25 += v19;
      v24 += v20;
      ++v18;
    }
    while (v18 != v10);
  }
  unint64_t v28 = v8 & 1;
  if (v10 >= v28) {
    uint64_t v29 = v8 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  char v30 = v9;
  unint64_t v31 = v17 >> 1;
  uint64_t v32 = v9 & 1;
  if (v17 >> 1 >= (v17 - v32) >> 1) {
    unint64_t v31 = (v17 - v32) >> 1;
  }
  if (v8)
  {
    if (v30)
    {
      uint64_t v33 = v12 + 2;
      __int16 v40 = v12[1] & 0xFFF0;
      *uint64_t v16 = *v12 & 0xFFF0;
      v16[1] = v40;
      uint64_t v34 = v16 + 2;
      if (v31)
      {
LABEL_19:
        uint64_t v35 = -(uint64_t)v31;
        do
        {
          __int16 v36 = *v33;
          __int16 v37 = v33[1];
          v33 += 2;
          *uint64_t v34 = v36 & 0xFFF0;
          v34[1] = v37 & 0xFFF0;
          v34 += 2;
          BOOL v38 = __CFADD__(v35++, 1);
        }
        while (!v38);
        uint64_t v39 = 2 * v31;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v33 = v12;
      uint64_t v34 = v16;
      if (v31) {
        goto LABEL_19;
      }
    }
    uint64_t v39 = 0;
LABEL_25:
    if ((v39 | (unint64_t)v32) < v17)
    {
      __int16 v41 = *v33 & 0xFFF0;
      __int16 v42 = v33[1] & 0xFFF0;
      *uint64_t v34 = v41;
      v34[1] = v42;
    }
    uint64_t v12 = (__int16 *)((char *)v12 + v11);
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v29)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v10 - v29;
    do
    {
      int v45 = v12;
      uint64_t v46 = (int16x4_t *)v16;
      if (v30)
      {
        int v45 = v12 + 2;
        __int16 v47 = v12[1] & 0xFFF0;
        *uint64_t v16 = *v12 & 0xFFF0;
        v16[1] = v47;
        uint64_t v46 = (int16x4_t *)(v16 + 2);
      }
      if (v31)
      {
        uint64_t v48 = -(uint64_t)v31;
        do
        {
          uint64_t v49 = v45 + 2;
          v50.i32[0] = *v45 & 0xFFF0;
          v50.i32[1] = v45[1] & 0xFFF0;
          *v46++ = vuzp1_s16(v50, v50);
          v45 += 2;
          BOOL v38 = __CFADD__(v48++, 1);
        }
        while (!v38);
      }
      else
      {
        uint64_t v49 = v45;
      }
      if ((v32 | (2 * v31)) < v17)
      {
        __int16 v51 = *v49 & 0xFFF0;
        __int16 v52 = v49[1] & 0xFFF0;
        v46->i16[0] = v51;
        v46->i16[1] = v52;
      }
      uint64_t v12 = (__int16 *)((char *)v12 + v11);
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v10)
  {
    if (v30)
    {
      __int16 v53 = *v12;
      __int16 v54 = v12[1];
      v12 += 2;
      *uint64_t v16 = v53 & 0xFFF0;
      v16[1] = v54 & 0xFFF0;
      v16 += 2;
    }
    if (v31)
    {
      uint64_t v55 = -(uint64_t)v31;
      do
      {
        __int16 v56 = *v12;
        __int16 v57 = v12[1];
        v12 += 2;
        *uint64_t v16 = v56 & 0xFFF0;
        v16[1] = v57 & 0xFFF0;
        v16 += 2;
        BOOL v38 = __CFADD__(v55++, 1);
      }
      while (!v38);
      uint64_t v58 = 2 * v31;
    }
    else
    {
      uint64_t v58 = 0;
    }
    if ((v58 | (unint64_t)v32) < v17)
    {
      __int16 v59 = *v12 & 0xFFF0;
      __int16 v60 = v12[1] & 0xFFF0;
      *uint64_t v16 = v59;
      v16[1] = v60;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = a7[2] + v26 * v18 + v19;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = -1;
          *(_WORD *)(v28 + 2 * i) = *(_WORD *)(v29 + 2 * i) & 0xFFF0;
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v22 >> 1;
  unint64_t v35 = (v22 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      __int16 v36 = v14 + 2;
      __int16 v38 = v14[1] & 0xFFF0;
      _WORD *v21 = *v14 & 0xFFF0;
      v21[1] = v38;
      __int16 v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        uint64_t v14 = (_WORD *)((char *)v14 + v13);
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      __int16 v36 = v14;
      __int16 v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      __int16 v40 = v36[1] & 0xFFF0;
      *__int16 v37 = *v36 & 0xFFF0;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      uint64_t v44 = v14;
      int v45 = v21;
      if (v33)
      {
        uint64_t v44 = v14 + 2;
        __int16 v46 = v14[1] & 0xFFF0;
        _WORD *v21 = *v14 & 0xFFF0;
        v21[1] = v46;
        int v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          __int16 v48 = v44[1] & 0xFFF0;
          *int v45 = *v44 & 0xFFF0;
          v45[1] = v48;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      __int16 v49 = *v14;
      __int16 v50 = v14[1];
      v14 += 2;
      _WORD *v21 = v49 & 0xFFF0;
      v21[1] = v50 & 0xFFF0;
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        __int16 v52 = v14[1] & 0xFFF0;
        _WORD *v21 = *v14 & 0xFFF0;
        v21[1] = v52;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  uint64_t v12 = (__int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v13 + 4 * v14);
  unint64_t v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2]) {
    unint64_t v17 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v10 = a6[3];
  }
  if (v10)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v13;
    uint64_t v22 = *a7 + *a8 * v13;
    uint64_t v23 = *a4;
    uint64_t v24 = v21 + 2 * v14;
    uint64_t v25 = v22 + 2 * v14;
    uint64_t v26 = *a3 + v23 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          *(_WORD *)(v24 + 2 * i) = -1;
          *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v26 + 2 * i) & 0xFFC0;
        }
      }
      v26 += v23;
      v25 += v19;
      v24 += v20;
      ++v18;
    }
    while (v18 != v10);
  }
  unint64_t v28 = v8 & 1;
  if (v10 >= v28) {
    uint64_t v29 = v8 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  char v30 = v9;
  unint64_t v31 = v17 >> 1;
  uint64_t v32 = v9 & 1;
  if (v17 >> 1 >= (v17 - v32) >> 1) {
    unint64_t v31 = (v17 - v32) >> 1;
  }
  if (v8)
  {
    if (v30)
    {
      char v33 = v12 + 2;
      __int16 v40 = v12[1] & 0xFFC0;
      *uint64_t v16 = *v12 & 0xFFC0;
      v16[1] = v40;
      unint64_t v34 = v16 + 2;
      if (v31)
      {
LABEL_19:
        uint64_t v35 = -(uint64_t)v31;
        do
        {
          __int16 v36 = *v33;
          __int16 v37 = v33[1];
          v33 += 2;
          *unint64_t v34 = v36 & 0xFFC0;
          v34[1] = v37 & 0xFFC0;
          v34 += 2;
          BOOL v38 = __CFADD__(v35++, 1);
        }
        while (!v38);
        uint64_t v39 = 2 * v31;
        goto LABEL_25;
      }
    }
    else
    {
      char v33 = v12;
      unint64_t v34 = v16;
      if (v31) {
        goto LABEL_19;
      }
    }
    uint64_t v39 = 0;
LABEL_25:
    if ((v39 | (unint64_t)v32) < v17)
    {
      __int16 v41 = *v33 & 0xFFC0;
      __int16 v42 = v33[1] & 0xFFC0;
      *unint64_t v34 = v41;
      v34[1] = v42;
    }
    uint64_t v12 = (__int16 *)((char *)v12 + v11);
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v29)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v10 - v29;
    do
    {
      int v45 = v12;
      __int16 v46 = (int16x4_t *)v16;
      if (v30)
      {
        int v45 = v12 + 2;
        __int16 v47 = v12[1] & 0xFFC0;
        *uint64_t v16 = *v12 & 0xFFC0;
        v16[1] = v47;
        __int16 v46 = (int16x4_t *)(v16 + 2);
      }
      if (v31)
      {
        uint64_t v48 = -(uint64_t)v31;
        do
        {
          __int16 v49 = v45 + 2;
          v50.i32[0] = *v45 & 0xFFC0;
          v50.i32[1] = v45[1] & 0xFFC0;
          *v46++ = vuzp1_s16(v50, v50);
          v45 += 2;
          BOOL v38 = __CFADD__(v48++, 1);
        }
        while (!v38);
      }
      else
      {
        __int16 v49 = v45;
      }
      if ((v32 | (2 * v31)) < v17)
      {
        __int16 v51 = *v49 & 0xFFC0;
        __int16 v52 = v49[1] & 0xFFC0;
        v46->i16[0] = v51;
        v46->i16[1] = v52;
      }
      uint64_t v12 = (__int16 *)((char *)v12 + v11);
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v10)
  {
    if (v30)
    {
      __int16 v53 = *v12;
      __int16 v54 = v12[1];
      v12 += 2;
      *uint64_t v16 = v53 & 0xFFC0;
      v16[1] = v54 & 0xFFC0;
      v16 += 2;
    }
    if (v31)
    {
      uint64_t v55 = -(uint64_t)v31;
      do
      {
        __int16 v56 = *v12;
        __int16 v57 = v12[1];
        v12 += 2;
        *uint64_t v16 = v56 & 0xFFC0;
        v16[1] = v57 & 0xFFC0;
        v16 += 2;
        BOOL v38 = __CFADD__(v55++, 1);
      }
      while (!v38);
      uint64_t v58 = 2 * v31;
    }
    else
    {
      uint64_t v58 = 0;
    }
    if ((v58 | (unint64_t)v32) < v17)
    {
      __int16 v59 = *v12 & 0xFFC0;
      __int16 v60 = v12[1] & 0xFFC0;
      *uint64_t v16 = v59;
      v16[1] = v60;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = a7[2] + v26 * v18 + v19;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = -1;
          *(_WORD *)(v28 + 2 * i) = *(_WORD *)(v29 + 2 * i) & 0xFFC0;
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v22 >> 1;
  unint64_t v35 = (v22 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      __int16 v36 = v14 + 2;
      __int16 v38 = v14[1] & 0xFFC0;
      _WORD *v21 = *v14 & 0xFFC0;
      v21[1] = v38;
      __int16 v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        uint64_t v14 = (_WORD *)((char *)v14 + v13);
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      __int16 v36 = v14;
      __int16 v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      __int16 v40 = v36[1] & 0xFFC0;
      *__int16 v37 = *v36 & 0xFFC0;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      uint64_t v44 = v14;
      int v45 = v21;
      if (v33)
      {
        uint64_t v44 = v14 + 2;
        __int16 v46 = v14[1] & 0xFFC0;
        _WORD *v21 = *v14 & 0xFFC0;
        v21[1] = v46;
        int v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          __int16 v48 = v44[1] & 0xFFC0;
          *int v45 = *v44 & 0xFFC0;
          v45[1] = v48;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      __int16 v49 = *v14;
      __int16 v50 = v14[1];
      v14 += 2;
      _WORD *v21 = v49 & 0xFFC0;
      v21[1] = v50 & 0xFFC0;
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        __int16 v52 = v14[1] & 0xFFC0;
        _WORD *v21 = *v14 & 0xFFC0;
        v21[1] = v52;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  uint64_t v12 = a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE);
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v13 + 2 * v14);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  if (v10 >= v15) {
    unint64_t v10 = v15;
  }
  if (v10)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v13;
    uint64_t v24 = *a7 + *a8 * v13;
    uint64_t v25 = *a4;
    uint64_t v26 = v23 + v14;
    uint64_t v27 = v24 + v14;
    uint64_t v28 = *a3 + v25 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v26 + i) = -1;
          *(unsigned char *)(v27 + i) = *(unsigned char *)(v28 + 2 * i + 1);
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v10);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v30 = v8 & 1;
  if (v10 >= v30) {
    uint64_t v31 = v8 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  unint64_t v33 = v19 >> 1;
  uint64_t v34 = v9 & 1;
  if (v19 >> 1 >= (v19 - v34) >> 1) {
    unint64_t v33 = (v19 - v34) >> 1;
  }
  if (v8)
  {
    if (v32)
    {
      char v42 = *(unsigned char *)(v12 + 3);
      uint64_t v35 = v12 + 4;
      *uint64_t v18 = *(unsigned char *)(v12 + 1);
      v18[1] = v42;
      __int16 v36 = v18 + 2;
      if (v33)
      {
LABEL_20:
        uint64_t v37 = -(uint64_t)v33;
        do
        {
          char v38 = *(unsigned char *)(v35 + 1);
          char v39 = *(unsigned char *)(v35 + 3);
          v35 += 4;
          *__int16 v36 = v38;
          v36[1] = v39;
          v36 += 2;
          BOOL v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        uint64_t v41 = 2 * v33;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v35 = v12;
      __int16 v36 = v18;
      if (v33) {
        goto LABEL_20;
      }
    }
    uint64_t v41 = 0;
LABEL_26:
    if ((v41 | (unint64_t)v34) < v19)
    {
      char v43 = *(unsigned char *)(v35 + 1);
      char v44 = *(unsigned char *)(v35 + 3);
      *__int16 v36 = v43;
      v36[1] = v44;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v10 == v31)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v10 - v31;
    do
    {
      uint64_t v47 = v12;
      __int16 v48 = v18;
      if (v32)
      {
        char v49 = *(unsigned char *)(v12 + 3);
        uint64_t v47 = v12 + 4;
        *uint64_t v18 = *(unsigned char *)(v12 + 1);
        v18[1] = v49;
        __int16 v48 = v18 + 2;
      }
      if (v33)
      {
        uint64_t v50 = -(uint64_t)v33;
        do
        {
          char v51 = *(unsigned char *)(v47 + 1);
          char v52 = *(unsigned char *)(v47 + 3);
          v47 += 4;
          *__int16 v48 = v51;
          v48[1] = v52;
          v48[2] = v51;
          v48[3] = v52;
          v48 += 4;
          BOOL v40 = __CFADD__(v50++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v19)
      {
        char v53 = *(unsigned char *)(v47 + 1);
        char v54 = *(unsigned char *)(v47 + 3);
        *__int16 v48 = v53;
        v48[1] = v54;
      }
      v12 += v11;
      v18 += v17;
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v10)
  {
    if (v32)
    {
      char v55 = *(unsigned char *)(v12 + 1);
      char v56 = *(unsigned char *)(v12 + 3);
      v12 += 4;
      *uint64_t v18 = v55;
      v18[1] = v56;
      v18 += 2;
    }
    if (v33)
    {
      uint64_t v57 = -(uint64_t)v33;
      do
      {
        char v58 = *(unsigned char *)(v12 + 1);
        char v59 = *(unsigned char *)(v12 + 3);
        v12 += 4;
        *uint64_t v18 = v58;
        v18[1] = v59;
        v18 += 2;
        BOOL v40 = __CFADD__(v57++, 1);
      }
      while (!v40);
      uint64_t v60 = 2 * v33;
    }
    else
    {
      uint64_t v60 = 0;
    }
    if ((v60 | (unint64_t)v34) < v19)
    {
      char v61 = *(unsigned char *)(v12 + 1);
      char v62 = *(unsigned char *)(v12 + 3);
      *uint64_t v18 = v61;
      v18[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = 2 * (v10 + v9);
  uint64_t v13 = a4[1];
  unint64_t v14 = a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16) {
    unint64_t v21 = v17 - v16;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = a8[2];
    uint64_t v26 = a7[2] + v25 * v18 + v16;
    uint64_t v27 = *a7 + *a8 * v18 + v16;
    uint64_t v28 = *a3 + v23 * v11 + v12;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v26 + i) = -1;
          *(unsigned char *)(v27 + i) = *(unsigned char *)(v28 + 2 * i + 1);
        }
      }
      v28 += v23;
      v27 += v24;
      v26 += v25;
      ++v22;
    }
    while (v22 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v10 = v9 & 1;
  }
  unint64_t v30 = v11 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v11 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  unint64_t v32 = v21 >> 1;
  unint64_t v33 = v21 - v10;
  if (v32 >= v33 >> 1) {
    unint64_t v34 = v33 >> 1;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v11)
  {
    if (v9)
    {
      char v37 = *(unsigned char *)(v14 + 3);
      unint64_t v35 = v14 + 4;
      *uint64_t v20 = *(unsigned char *)(v14 + 1);
      v20[1] = v37;
      __int16 v36 = v20 + 2;
      if (!v34)
      {
LABEL_26:
        v14 += v13;
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v35 = v14;
      __int16 v36 = v20;
      if (!v34) {
        goto LABEL_26;
      }
    }
    uint64_t v38 = -(uint64_t)v34;
    do
    {
      char v39 = *(unsigned char *)(v35 + 3);
      *__int16 v36 = *(unsigned char *)(v35 + 1);
      v36[1] = v39;
      v36 += 2;
      v35 += 4;
      BOOL v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v31)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v8 - v31;
    do
    {
      unint64_t v43 = v14;
      char v44 = v20;
      if (v9)
      {
        char v45 = *(unsigned char *)(v14 + 3);
        unint64_t v43 = v14 + 4;
        *uint64_t v20 = *(unsigned char *)(v14 + 1);
        v20[1] = v45;
        char v44 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v46 = -(uint64_t)v34;
        do
        {
          char v47 = *(unsigned char *)(v43 + 3);
          *char v44 = *(unsigned char *)(v43 + 1);
          v44[1] = v47;
          v44 += 2;
          v43 += 4;
          BOOL v40 = __CFADD__(v46++, 1);
        }
        while (!v40);
      }
      v14 += v13;
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v30 < v8)
  {
    if (v9)
    {
      char v48 = *(unsigned char *)(v14 + 1);
      char v49 = *(unsigned char *)(v14 + 3);
      v14 += 4;
      *uint64_t v20 = v48;
      v20[1] = v49;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v50 = -(uint64_t)v34;
      do
      {
        char v51 = *(unsigned char *)(v14 + 3);
        *uint64_t v20 = *(unsigned char *)(v14 + 1);
        v20[1] = v51;
        v20 += 2;
        v14 += 4;
        BOOL v40 = __CFADD__(v50++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  unint64_t v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    BOOL v27 = v12 >= v8;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = *a3 + *a4 * v12;
    if (v27) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = a7[2] + v29 * v19 + v17;
    uint64_t v34 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(unsigned char *)(v33 + i) = -1;
          *(unsigned char *)(v34 + i) = *(unsigned char *)(v32 + 2 * i + 1);
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v36 = v11;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v23 >> 1;
  unint64_t v38 = v23 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v9)
    {
      unint64_t v40 = v16 + 4;
      unsigned int v42 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
      *uint64_t v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
      v22[1] = v42;
      unint64_t v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v40 = v16;
      unint64_t v41 = v22;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      int v44 = *(unsigned __int8 *)(v40 + 1);
      int v45 = *(unsigned __int8 *)(v40 + 3);
      int v46 = *(unsigned __int8 *)(v40 + v15 + 1);
      int v47 = *(unsigned __int8 *)(v40 + v15 + 3);
      v40 += 4;
      unsigned char *v41 = (v44 + v46 + 1) >> 1;
      v41[1] = (v45 + v47 + 1) >> 1;
      v41 += 2;
      BOOL v27 = __CFADD__(v43++, 1);
    }
    while (!v27);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v24 - v36;
    do
    {
      unint64_t v50 = v16;
      char v51 = v22;
      if (v9)
      {
        unint64_t v50 = v16 + 4;
        unsigned int v52 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
        *uint64_t v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
        v22[1] = v52;
        char v51 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v53 = -(uint64_t)v39;
        do
        {
          int v54 = *(unsigned __int8 *)(v50 + 1);
          int v55 = *(unsigned __int8 *)(v50 + 3);
          int v56 = *(unsigned __int8 *)(v50 + v15 + 1);
          int v57 = *(unsigned __int8 *)(v50 + v15 + 3);
          v50 += 4;
          *char v51 = (v54 + v56 + 1) >> 1;
          v51[1] = (v55 + v57 + 1) >> 1;
          v51 += 2;
          BOOL v27 = __CFADD__(v53++, 1);
        }
        while (!v27);
      }
      v16 += 2 * v15;
      v22 += v21;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  unint64_t v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    BOOL v27 = v12 >= v8;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = *a3 + *a4 * v12;
    if (v27) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = a7[2] + v29 * v19 + v17;
    uint64_t v34 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(unsigned char *)(v33 + i) = -1;
          *(unsigned char *)(v34 + i) = *(unsigned char *)(v32 + 2 * i + 1);
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v36 = v11;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v23 >> 1;
  unint64_t v38 = v23 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v9)
    {
      char v42 = *(unsigned char *)(v16 + 3);
      unint64_t v40 = v16 + 4;
      *uint64_t v22 = *(unsigned char *)(v16 + 1);
      v22[1] = v42;
      unint64_t v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v40 = v16;
      unint64_t v41 = v22;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      char v44 = *(unsigned char *)(v40 + 3);
      unsigned char *v41 = *(unsigned char *)(v40 + 1);
      v41[1] = v44;
      v41 += 2;
      v40 += 4;
      BOOL v27 = __CFADD__(v43++, 1);
    }
    while (!v27);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v24 - v36;
    uint64_t v47 = 2 * v15;
    do
    {
      unint64_t v48 = v16;
      unint64_t v49 = v22;
      if (v9)
      {
        char v50 = *(unsigned char *)(v16 + 3);
        unint64_t v48 = v16 + 4;
        *uint64_t v22 = *(unsigned char *)(v16 + 1);
        v22[1] = v50;
        unint64_t v49 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v51 = -(uint64_t)v39;
        do
        {
          char v52 = *(unsigned char *)(v48 + 3);
          *unint64_t v49 = *(unsigned char *)(v48 + 1);
          v49[1] = v52;
          v49 += 2;
          v48 += 4;
          BOOL v27 = __CFADD__(v51++, 1);
        }
        while (!v27);
      }
      v16 += v47;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_Copy_sv20_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[5] & 0xFFFFFFFELL;
  unint64_t v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  uint64_t v10 = a2[3] + a2[5];
  unint64_t v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a8;
    uint64_t v17 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v18 = a3[1] + v15 * (v9 >> 1) + 2 * v8;
    uint64_t v19 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        __int16 v22 = 0;
        __int16 v23 = 0;
        unint64_t v24 = (__int16 *)v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            __int16 v23 = *v24;
            __int16 v22 = v24[1];
            v24 += 2;
          }
          __int16 v25 = *(_WORD *)(v19 + 2 * v21);
          uint64_t v26 = (_WORD *)(v17 + v20);
          *uint64_t v26 = -1;
          v26[1] = v25;
          v26[2] = v23;
          v26[3] = v22;
          ++v21;
          v20 += 8;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_sv20_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[5] & 0xFFFFFFFELL;
  unint64_t v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  uint64_t v10 = a2[3] + a2[5];
  unint64_t v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a8;
    uint64_t v17 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v18 = a3[1] + v15 * (v9 >> 1) + 2 * v8;
    uint64_t v19 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        char v22 = 0;
        char v23 = 0;
        uint64_t v24 = v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            char v23 = *(unsigned char *)(v24 + 1);
            char v22 = *(unsigned char *)(v24 + 3);
            v24 += 4;
          }
          char v25 = *(unsigned char *)(v19 + 2 * v21 + 1);
          uint64_t v26 = (unsigned char *)(v17 + v20);
          *uint64_t v26 = -1;
          v26[1] = v25;
          v26[2] = v23;
          v26[3] = v22;
          ++v21;
          v20 += 4;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_sv20_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40) & 0xFFFFFFFELL;
  uint64_t v11 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v12 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v12 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11) {
    unint64_t v12 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  }
  uint64_t v10 = *(void *)(a2 + 24) + *(void *)(a2 + 40);
  unint64_t v13 = v10 - v9 + (v10 & 1);
  if (v13 >= *(void *)(a6 + 24)) {
    unint64_t v13 = *(void *)(a6 + 24);
  }
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *a4;
    uint64_t v16 = a4[1];
    uint64_t v17 = *a8;
    uint64_t v18 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v11;
    unint64_t v19 = a3[1] + v16 * (v9 >> 1) + ((2 * v8) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v20 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v12)
      {
        uint64_t v21 = 0;
        for (unint64_t i = 0; i < v12; i += 2)
        {
          char v23 = (__int16 *)(v19 + 2 * i);
          uint64_t v24 = (__int16 *)(v20 + 2 * i);
          __int16 v25 = *v23;
          LOWORD(v23) = v23[1];
          __int16 v26 = *v24;
          LOWORD(v24) = v24[1];
          BOOL v27 = (_WORD *)(v18 + v21);
          *BOOL v27 = v25;
          v27[1] = v26;
          v27[2] = (_WORD)v23;
          v27[3] = (_WORD)v24;
          v21 += 8;
        }
      }
      v20 += v15;
      v18 += v17;
      v19 += (v14++ << 63 >> 63) & v16;
    }
    while (v14 != v13);
  }
  return 0;
}

uint64_t vt_Copy_sv20_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40) & 0xFFFFFFFELL;
  uint64_t v11 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v12 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v12 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11) {
    unint64_t v12 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  }
  uint64_t v10 = *(void *)(a2 + 24) + *(void *)(a2 + 40);
  unint64_t v13 = v10 - v9 + (v10 & 1);
  if (v13 >= *(void *)(a6 + 24)) {
    unint64_t v13 = *(void *)(a6 + 24);
  }
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *a4;
    uint64_t v16 = a4[1];
    uint64_t v17 = *a8;
    uint64_t v18 = (unsigned char *)(*a7 + *a8 * *(void *)(a6 + 40) + v11);
    unint64_t v19 = a3[1] + v16 * (v9 >> 1) + ((2 * v8) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v20 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v12)
      {
        unint64_t v21 = 0;
        char v22 = v18;
        do
        {
          unint64_t v23 = v19 + 2 * v21;
          uint64_t v24 = v20 + 2 * v21;
          char v25 = *(unsigned char *)(v23 + 1);
          LOBYTE(v23) = *(unsigned char *)(v23 + 3);
          char v26 = *(unsigned char *)(v24 + 1);
          LOBYTE(v24) = *(unsigned char *)(v24 + 3);
          *char v22 = v25;
          v22[1] = v26;
          v22[2] = v23;
          v22[3] = v24;
          v22 += 4;
          v21 += 2;
        }
        while (v21 < v12);
      }
      v20 += v15;
      v18 += v17;
      v19 += (v14++ << 63 >> 63) & v16;
    }
    while (v14 != v13);
  }
  return 0;
}

uint64_t vt_Copy_sv20_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  unint64_t v10 = v9 & 0xFFFFFFFE;
  unint64_t v11 = a2[3] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = a3[1] + v12 * (v9 >> 1) + 2 * (v8 & 0xFFFFFFFE);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v16 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = a7[1] + v17 * v15 + 4 * v14;
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2]) {
    unint64_t v19 = a6[2];
  }
  else {
    unint64_t v19 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (v11 - v10 + (v11 & 1) >= v16) {
    unint64_t v20 = v16;
  }
  else {
    unint64_t v20 = v11 - v10 + (v11 & 1);
  }
  if (v20)
  {
    uint64_t v61 = a4[1];
    unint64_t v62 = v19;
    uint64_t v21 = 2 * (v8 & 0xFFFFFFFE);
    uint64_t v22 = *a3 + *a4 * v10;
    uint64_t v63 = *a4;
    if (v10 >= v9) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = *a4;
    }
    uint64_t v24 = (char *)(v22 + v21 + v23);
    uint64_t v25 = a8[2];
    char v26 = (char *)(a7[2] + v25 * v15 + 2 * v14);
    uint64_t v27 = *a8;
    uint64_t v28 = (char *)(*a7 + *a8 * v15 + 2 * v14);
    size_t v29 = 2 * v19;
    unint64_t v60 = v20;
    uint64_t v30 = -(uint64_t)v20;
    do
    {
      memcpy(v28, v24, v29);
      memset(v26, 255, v29);
      v24 += v63;
      v28 += v27;
      v26 += v25;
      BOOL v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    unint64_t v20 = v60;
    uint64_t v8 = a2[4];
    unint64_t v9 = a2[5];
    uint64_t v12 = v61;
    unint64_t v19 = v62;
  }
  uint64_t v32 = v9 & 1;
  unint64_t v33 = (v20 - v32) >> 1;
  if (v20 >> 1 < v33) {
    unint64_t v33 = v20 >> 1;
  }
  char v34 = v8;
  unint64_t v35 = v19 >> 1;
  uint64_t v36 = v8 & 1;
  if (v19 >> 1 >= (v19 - v36) >> 1) {
    unint64_t v35 = (v19 - v36) >> 1;
  }
  if (v9)
  {
    unint64_t v37 = (int *)v13;
    if (v34)
    {
      unint64_t v37 = (int *)(v13 + 4);
      *(_DWORD *)uint64_t v18 = *(_DWORD *)v13;
      unint64_t v38 = (_DWORD *)(v18 + 4);
      if (v35)
      {
LABEL_22:
        uint64_t v39 = -(uint64_t)v35;
        do
        {
          int v40 = *v37++;
          *v38++ = v40;
          BOOL v31 = __CFADD__(v39++, 1);
        }
        while (!v31);
        uint64_t v41 = 2 * v35;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v38 = (_DWORD *)v18;
      if (v35) {
        goto LABEL_22;
      }
    }
    uint64_t v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v36) < v19) {
      _DWORD *v38 = *v37;
    }
    v13 += v12;
    v18 += v17;
  }
  if (v33)
  {
    for (uint64_t i = 0; i != v33; ++i)
    {
      uint64_t v43 = (__int16 *)v13;
      char v44 = (_WORD *)v18;
      if (v34)
      {
        __int16 v45 = *(_WORD *)v13;
        __int16 v46 = *(_WORD *)(v13 + 2);
        uint64_t v43 = (__int16 *)(v13 + 4);
        *(_WORD *)uint64_t v18 = *(_WORD *)v13;
        *(_WORD *)(v18 + 2) = v46;
        uint64_t v47 = (_WORD *)(v18 + v17);
        _WORD *v47 = v45;
        v47[1] = v46;
        char v44 = (_WORD *)(v18 + 4);
      }
      if (v35)
      {
        uint64_t v48 = -(uint64_t)v35;
        do
        {
          __int16 v49 = *v43;
          __int16 v50 = v43[1];
          v43 += 2;
          *char v44 = v49;
          v44[1] = v50;
          v44[2] = v49;
          v44[3] = v50;
          uint64_t v51 = (_WORD *)((char *)v44 + v17);
          *uint64_t v51 = v49;
          v51[1] = v50;
          v51[2] = v49;
          v51[3] = v50;
          v44 += 4;
          BOOL v31 = __CFADD__(v48++, 1);
        }
        while (!v31);
      }
      if ((v36 | (2 * v35)) < v19)
      {
        __int16 v52 = *v43;
        __int16 v53 = v43[1];
        *char v44 = v52;
        v44[1] = v53;
        int v54 = (_WORD *)((char *)v44 + v17);
        *int v54 = v52;
        v54[1] = v53;
      }
      v13 += v12;
      v18 += 2 * v17;
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v20)
  {
    if (v34)
    {
      int v55 = *(_DWORD *)v13;
      v13 += 4;
      *(_DWORD *)uint64_t v18 = v55;
      v18 += 4;
    }
    if (v35)
    {
      uint64_t v56 = -(uint64_t)v35;
      do
      {
        int v57 = *(_DWORD *)v13;
        v13 += 4;
        *(_DWORD *)uint64_t v18 = v57;
        v18 += 4;
        BOOL v31 = __CFADD__(v56++, 1);
      }
      while (!v31);
      v35 *= 2;
    }
    if ((v35 | v36) < v19) {
      *(_DWORD *)uint64_t v18 = *(_DWORD *)v13;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  unint64_t v10 = v9 & 0xFFFFFFFE;
  unint64_t v11 = a2[3] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = a3[1] + v12 * (v9 >> 1) + 2 * (v8 & 0xFFFFFFFE);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v16 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = a7[1] + v17 * v15 + 4 * v14;
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2]) {
    unint64_t v19 = a6[2];
  }
  else {
    unint64_t v19 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (v11 - v10 + (v11 & 1) >= v16) {
    unint64_t v20 = v16;
  }
  else {
    unint64_t v20 = v11 - v10 + (v11 & 1);
  }
  if (v20)
  {
    unint64_t v59 = v20;
    uint64_t v21 = *a4;
    uint64_t v22 = 2 * (v8 & 0xFFFFFFFE);
    uint64_t v23 = *a8;
    uint64_t v24 = *a3 + *a4 * v10;
    if (v10 >= v9) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = *a4;
    }
    char v26 = (char *)(v24 + v22 + v25);
    uint64_t v27 = (char *)(*a7 + v23 * v15 + 2 * v14);
    unint64_t v60 = v19;
    size_t v28 = 2 * v19;
    uint64_t v29 = -(uint64_t)v20;
    do
    {
      memcpy(v27, v26, v28);
      v26 += v21;
      v27 += v23;
      BOOL v30 = __CFADD__(v29++, 1);
    }
    while (!v30);
    unint64_t v20 = v59;
    uint64_t v8 = a2[4];
    unint64_t v9 = a2[5];
    unint64_t v19 = v60;
  }
  uint64_t v31 = v9 & 1;
  unint64_t v32 = (v20 - v31) >> 1;
  if (v20 >> 1 < v32) {
    unint64_t v32 = v20 >> 1;
  }
  char v33 = v8;
  unint64_t v34 = v19 >> 1;
  uint64_t v35 = v8 & 1;
  if (v19 >> 1 >= (v19 - v35) >> 1) {
    unint64_t v34 = (v19 - v35) >> 1;
  }
  if (v9)
  {
    uint64_t v36 = (int *)v13;
    if (v33)
    {
      uint64_t v36 = (int *)(v13 + 4);
      *(_DWORD *)uint64_t v18 = *(_DWORD *)v13;
      unint64_t v37 = (_DWORD *)(v18 + 4);
      if (v34)
      {
LABEL_22:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          int v39 = *v36++;
          *v37++ = v39;
          BOOL v30 = __CFADD__(v38++, 1);
        }
        while (!v30);
        uint64_t v40 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v37 = (_DWORD *)v18;
      if (v34) {
        goto LABEL_22;
      }
    }
    uint64_t v40 = 0;
LABEL_28:
    if ((v40 | (unint64_t)v35) < v19) {
      *unint64_t v37 = *v36;
    }
    v13 += v12;
    v18 += v17;
  }
  if (v32)
  {
    for (uint64_t i = 0; i != v32; ++i)
    {
      char v42 = (__int16 *)v13;
      uint64_t v43 = (_WORD *)v18;
      if (v33)
      {
        __int16 v44 = *(_WORD *)v13;
        __int16 v45 = *(_WORD *)(v13 + 2);
        char v42 = (__int16 *)(v13 + 4);
        *(_WORD *)uint64_t v18 = *(_WORD *)v13;
        *(_WORD *)(v18 + 2) = v45;
        __int16 v46 = (_WORD *)(v18 + v17);
        *__int16 v46 = v44;
        v46[1] = v45;
        uint64_t v43 = (_WORD *)(v18 + 4);
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          __int16 v48 = *v42;
          __int16 v49 = v42[1];
          v42 += 2;
          *uint64_t v43 = v48;
          v43[1] = v49;
          v43[2] = v48;
          v43[3] = v49;
          __int16 v50 = (_WORD *)((char *)v43 + v17);
          _WORD *v50 = v48;
          v50[1] = v49;
          v50[2] = v48;
          v50[3] = v49;
          v43 += 4;
          BOOL v30 = __CFADD__(v47++, 1);
        }
        while (!v30);
      }
      if ((v35 | (2 * v34)) < v19)
      {
        __int16 v51 = *v42;
        __int16 v52 = v42[1];
        *uint64_t v43 = v51;
        v43[1] = v52;
        __int16 v53 = (_WORD *)((char *)v43 + v17);
        *__int16 v53 = v51;
        v53[1] = v52;
      }
      v13 += v12;
      v18 += 2 * v17;
    }
    v32 *= 2;
  }
  if ((v32 | v31) < v20)
  {
    if (v33)
    {
      int v54 = *(_DWORD *)v13;
      v13 += 4;
      *(_DWORD *)uint64_t v18 = v54;
      v18 += 4;
    }
    if (v34)
    {
      uint64_t v55 = -(uint64_t)v34;
      do
      {
        int v56 = *(_DWORD *)v13;
        v13 += 4;
        *(_DWORD *)uint64_t v18 = v56;
        v18 += 4;
        BOOL v30 = __CFADD__(v55++, 1);
      }
      while (!v30);
      v34 *= 2;
    }
    if ((v34 | v35) < v19) {
      *(_DWORD *)uint64_t v18 = *(_DWORD *)v13;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v18 = a6[3];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17) {
    unint64_t v21 = v17;
  }
  if (v12 - v11 + (v12 & 1) >= v18) {
    unint64_t v22 = v18;
  }
  else {
    unint64_t v22 = v12 - v11 + (v12 & 1);
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    uint64_t v28 = *a8;
    uint64_t v29 = v25 + v27;
    uint64_t v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v32 = *(unsigned __int16 *)(v29 + 2 * i);
          if (v32 >= 0xEB00) {
            unsigned int v32 = 60160;
          }
          if (v32 <= 0x1000) {
            unsigned int v32 = 4096;
          }
          *(_WORD *)(v30 + 2 * i) = (-268431360 - v32 + (v32 << 16)) / 0xDB00;
        }
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v33 = v8 & 1;
  unint64_t v34 = (v22 - v33) >> 1;
  if (v22 >> 1 < v34) {
    unint64_t v34 = v22 >> 1;
  }
  char v35 = v9;
  unint64_t v36 = v21 >> 1;
  uint64_t v37 = v9 & 1;
  if (v21 >> 1 >= (v21 - v37) >> 1) {
    unint64_t v36 = (v21 - v37) >> 1;
  }
  if (v8)
  {
    if (v35)
    {
      unsigned int v45 = *v14;
      unsigned int v46 = v14[1];
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        unsigned int v45 = 4096;
      }
      if (v46 >= 0xF000) {
        unsigned int v46 = 61440;
      }
      if (v46 <= 0x1000) {
        int v47 = 4096;
      }
      else {
        int v47 = v46;
      }
      uint64_t v38 = v14 + 2;
      *unint64_t v20 = (613566757 * (unint64_t)((-268431360 - v45 + (v45 << 16)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32;
      int v39 = v20 + 2;
      if (v36) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v38 = v14;
      int v39 = v20;
      if (v36)
      {
LABEL_26:
        uint64_t v40 = -(uint64_t)v36;
        do
        {
          unsigned int v41 = *v38;
          unsigned int v42 = v38[1];
          if (v41 >= 0xF000) {
            unsigned int v41 = 61440;
          }
          if (v41 <= 0x1000) {
            unsigned int v41 = 4096;
          }
          if (v42 >= 0xF000) {
            unsigned int v42 = 61440;
          }
          if (v42 <= 0x1000) {
            unsigned int v42 = 4096;
          }
          v38 += 2;
          *int v39 = (613566757 * (unint64_t)((-268431360 - v41 + (v41 << 16)) >> 13)) >> 32;
          v39[1] = (613566757 * (unint64_t)((-268431360 - v42 + (v42 << 16)) >> 13)) >> 32;
          v39 += 2;
          BOOL v43 = __CFADD__(v40++, 1);
        }
        while (!v43);
        uint64_t v44 = 2 * v36;
        goto LABEL_49;
      }
    }
    uint64_t v44 = 0;
LABEL_49:
    if ((v44 | (unint64_t)v37) < v21)
    {
      unsigned int v48 = *v38;
      unsigned int v49 = v38[1];
      if (v48 >= 0xF000) {
        unsigned int v48 = 61440;
      }
      if (v48 <= 0x1000) {
        unsigned int v48 = 4096;
      }
      if (v49 >= 0xF000) {
        unsigned int v49 = 61440;
      }
      if (v49 <= 0x1000) {
        unsigned int v49 = 4096;
      }
      *int v39 = (613566757 * (unint64_t)((-268431360 - v48 + (v48 << 16)) >> 13)) >> 32;
      v39[1] = (613566757 * (unint64_t)((-268431360 - v49 + (v49 << 16)) >> 13)) >> 32;
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      __int16 v51 = v14;
      __int16 v52 = v20;
      if (v35)
      {
        unsigned int v53 = *v14;
        unsigned int v54 = v14[1];
        if (v53 >= 0xF000) {
          unsigned int v53 = 61440;
        }
        if (v53 <= 0x1000) {
          unsigned int v53 = 4096;
        }
        if (v54 >= 0xF000) {
          unsigned int v54 = 61440;
        }
        if (v54 <= 0x1000) {
          int v55 = 4096;
        }
        else {
          int v55 = v54;
        }
        __int16 v51 = v14 + 2;
        unint64_t v56 = (613566757 * (unint64_t)((-268431360 - v53 + (v53 << 16)) >> 13)) >> 32;
        unint64_t v57 = (613566757 * (unint64_t)((-268431360 - v55 + (v55 << 16)) >> 13)) >> 32;
        *unint64_t v20 = v56;
        v20[1] = v57;
        char v58 = (_WORD *)((char *)v20 + v19);
        _WORD *v58 = v56;
        v58[1] = v57;
        __int16 v52 = v20 + 2;
      }
      if (v36)
      {
        uint64_t v59 = -(uint64_t)v36;
        do
        {
          unsigned int v60 = *v51;
          unsigned int v61 = v51[1];
          if (v60 >= 0xF000) {
            unsigned int v60 = 61440;
          }
          if (v60 <= 0x1000) {
            unsigned int v60 = 4096;
          }
          if (v61 >= 0xF000) {
            unsigned int v61 = 61440;
          }
          if (v61 <= 0x1000) {
            unsigned int v61 = 4096;
          }
          unint64_t v62 = (613566757 * (unint64_t)((-268431360 - v60 + (v60 << 16)) >> 13)) >> 32;
          *__int16 v52 = v62;
          unint64_t v63 = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
          v52[1] = v63;
          v52[2] = v62;
          v52[3] = v63;
          uint64_t v64 = (_WORD *)((char *)v52 + v19);
          *uint64_t v64 = v62;
          v64[1] = v63;
          v51 += 2;
          v64[2] = v62;
          v64[3] = v63;
          v52 += 4;
          BOOL v43 = __CFADD__(v59++, 1);
        }
        while (!v43);
      }
      if ((v37 | (2 * v36)) < v21)
      {
        unsigned int v65 = *v51;
        unsigned int v66 = v51[1];
        if (v65 >= 0xF000) {
          unsigned int v65 = 61440;
        }
        if (v65 <= 0x1000) {
          unsigned int v65 = 4096;
        }
        if (v66 >= 0xF000) {
          unsigned int v66 = 61440;
        }
        if (v66 <= 0x1000) {
          unsigned int v66 = 4096;
        }
        unint64_t v67 = (613566757 * (unint64_t)((-268431360 - v65 + (v65 << 16)) >> 13)) >> 32;
        unint64_t v68 = (613566757 * (unint64_t)((-268431360 - v66 + (v66 << 16)) >> 13)) >> 32;
        *__int16 v52 = v67;
        v52[1] = v68;
        int v69 = (_WORD *)((char *)v52 + v19);
        *int v69 = v67;
        v69[1] = v68;
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v70 = 2 * v34;
  }
  else
  {
    uint64_t v70 = 0;
  }
  if ((v70 | (unint64_t)v33) < v22)
  {
    if (v35)
    {
      unsigned int v71 = *v14;
      unsigned int v72 = v14[1];
      if (v71 >= 0xF000) {
        unsigned int v71 = 61440;
      }
      if (v71 <= 0x1000) {
        unsigned int v71 = 4096;
      }
      if (v72 >= 0xF000) {
        unsigned int v72 = 61440;
      }
      if (v72 <= 0x1000) {
        unsigned int v72 = 4096;
      }
      v14 += 2;
      *unint64_t v20 = (613566757 * (unint64_t)((-268431360 - v71 + (v71 << 16)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-268431360 - v72 + (v72 << 16)) >> 13)) >> 32;
      v20 += 2;
    }
    if (v36)
    {
      uint64_t v73 = -(uint64_t)v36;
      do
      {
        unsigned int v74 = *v14;
        unsigned int v75 = v14[1];
        if (v74 >= 0xF000) {
          unsigned int v74 = 61440;
        }
        if (v74 <= 0x1000) {
          unsigned int v74 = 4096;
        }
        if (v75 >= 0xF000) {
          unsigned int v75 = 61440;
        }
        if (v75 <= 0x1000) {
          unsigned int v75 = 4096;
        }
        v14 += 2;
        *unint64_t v20 = (613566757 * (unint64_t)((-268431360 - v74 + (v74 << 16)) >> 13)) >> 32;
        v20[1] = (613566757 * (unint64_t)((-268431360 - v75 + (v75 << 16)) >> 13)) >> 32;
        v20 += 2;
        BOOL v43 = __CFADD__(v73++, 1);
      }
      while (!v43);
      v36 *= 2;
    }
    if ((v36 | v37) < v21)
    {
      unsigned int v76 = *v14;
      unsigned int v77 = v14[1];
      if (v76 >= 0xF000) {
        unsigned int v76 = 61440;
      }
      if (v76 <= 0x1000) {
        unsigned int v76 = 4096;
      }
      if (v77 >= 0xF000) {
        unsigned int v77 = 61440;
      }
      if (v77 <= 0x1000) {
        unsigned int v77 = 4096;
      }
      *unint64_t v20 = (613566757 * (unint64_t)((-268431360 - v76 + (v76 << 16)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-268431360 - v77 + (v77 << 16)) >> 13)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  unint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = v10 & 0xFFFFFFFE;
  unint64_t v12 = *(void *)(a2 + 24) + v10;
  uint64_t v13 = 2 * (v9 + v8);
  uint64_t v14 = a4[1];
  uint64_t v15 = (int *)(a3[1] + v14 * (v10 >> 1) + (v13 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v16;
  uint64_t v19 = a8[1];
  unint64_t v20 = (int *)(a7[1] + v19 * v17 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) < v21) {
    unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8);
  }
  if (v12 - v11 + (v12 & 1) >= *(void *)(a6 + 24)) {
    unint64_t v22 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v22 = v12 - v11 + (v12 & 1);
  }
  if (v22)
  {
    unint64_t v52 = v21;
    uint64_t v23 = *a3 + *a4 * v11;
    uint64_t v55 = a4[1];
    uint64_t v56 = *a4;
    if (v11 >= v10) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = *a4;
    }
    uint64_t v25 = (char *)(v23 + v13 + v24);
    uint64_t v26 = a8[2];
    uint64_t v27 = (char *)(a7[2] + v26 * v17 + v18);
    uint64_t v28 = *a8;
    uint64_t v29 = (char *)(*a7 + *a8 * v17 + v18);
    size_t v30 = 2 * v21;
    unint64_t v54 = v22;
    uint64_t v31 = -(uint64_t)v22;
    do
    {
      memcpy(v29, v25, v30);
      memset(v27, 255, v30);
      v25 += v56;
      v29 += v28;
      v27 += v26;
      BOOL v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    unint64_t v22 = v54;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
    uint64_t v14 = v55;
    unint64_t v21 = v52;
  }
  uint64_t v33 = v10 & 1;
  if (v22 >> 1 >= (v22 - v33) >> 1) {
    unint64_t v34 = (v22 - (v10 & 1)) >> 1;
  }
  else {
    unint64_t v34 = v22 >> 1;
  }
  char v35 = v8;
  unint64_t v36 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1) {
    unint64_t v36 = (v21 - v9) >> 1;
  }
  if (v10)
  {
    uint64_t v37 = v15;
    if (v35)
    {
      uint64_t v37 = v15 + 1;
      *unint64_t v20 = *v15;
      uint64_t v38 = v20 + 1;
      if (!v36)
      {
LABEL_27:
        uint64_t v15 = (int *)((char *)v15 + v14);
        unint64_t v20 = (int *)((char *)v20 + v19);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v38 = v20;
      if (!v36) {
        goto LABEL_27;
      }
    }
    uint64_t v39 = -(uint64_t)v36;
    do
    {
      int v40 = *v37++;
      *v38++ = v40;
      BOOL v32 = __CFADD__(v39++, 1);
    }
    while (!v32);
    goto LABEL_27;
  }
LABEL_28:
  if (v34)
  {
    for (uint64_t i = 0; i != v34; ++i)
    {
      unsigned int v42 = (__int16 *)v15;
      BOOL v43 = (__int16 *)v20;
      if (v35)
      {
        unsigned int v42 = (__int16 *)(v15 + 1);
        *unint64_t v20 = *v15;
        BOOL v43 = (__int16 *)(v20 + 1);
      }
      if (v36)
      {
        uint64_t v44 = -(uint64_t)v36;
        do
        {
          __int16 v45 = *v42;
          __int16 v46 = v42[1];
          *BOOL v43 = *v42;
          v43[1] = v46;
          int v47 = (__int16 *)((char *)v43 + v19);
          _WORD *v47 = v45;
          v47[1] = v46;
          v43 += 2;
          v42 += 2;
          BOOL v32 = __CFADD__(v44++, 1);
        }
        while (!v32);
      }
      uint64_t v15 = (int *)((char *)v15 + v14);
      unint64_t v20 = (int *)((char *)v20 + 2 * v19);
    }
    v34 *= 2;
  }
  if ((v34 | v33) < v22)
  {
    if (v35)
    {
      int v48 = *v15++;
      *v20++ = v48;
    }
    if (v36)
    {
      uint64_t v49 = -(uint64_t)v36;
      do
      {
        int v50 = *v15++;
        *v20++ = v50;
        BOOL v32 = __CFADD__(v49++, 1);
      }
      while (!v32);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  unint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = v10 & 0xFFFFFFFE;
  unint64_t v12 = *(void *)(a2 + 24) + v10;
  uint64_t v13 = 2 * (v9 + v8);
  uint64_t v14 = a4[1];
  uint64_t v15 = (int *)(a3[1] + v14 * (v10 >> 1) + (v13 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v16;
  uint64_t v19 = a8[1];
  unint64_t v20 = (int *)(a7[1] + v19 * v17 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) < v21) {
    unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8);
  }
  if (v12 - v11 + (v12 & 1) >= *(void *)(a6 + 24)) {
    unint64_t v22 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v22 = v12 - v11 + (v12 & 1);
  }
  if (v22)
  {
    unint64_t v51 = v21;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v10) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = (char *)(v25 + v13 + v26);
    uint64_t v28 = (char *)(*a7 + v24 * v17 + v18);
    size_t v29 = 2 * v21;
    unint64_t v53 = v22;
    uint64_t v30 = -(uint64_t)v22;
    do
    {
      memcpy(v28, v27, v29);
      v27 += v23;
      v28 += v24;
      BOOL v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    unint64_t v22 = v53;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
    unint64_t v21 = v51;
  }
  uint64_t v32 = v10 & 1;
  if (v22 >> 1 >= (v22 - v32) >> 1) {
    unint64_t v33 = (v22 - (v10 & 1)) >> 1;
  }
  else {
    unint64_t v33 = v22 >> 1;
  }
  char v34 = v8;
  unint64_t v35 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1) {
    unint64_t v35 = (v21 - v9) >> 1;
  }
  if (v10)
  {
    unint64_t v36 = v15;
    if (v34)
    {
      unint64_t v36 = v15 + 1;
      *unint64_t v20 = *v15;
      uint64_t v37 = v20 + 1;
      if (!v35)
      {
LABEL_27:
        uint64_t v15 = (int *)((char *)v15 + v14);
        unint64_t v20 = (int *)((char *)v20 + v19);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v37 = v20;
      if (!v35) {
        goto LABEL_27;
      }
    }
    uint64_t v38 = -(uint64_t)v35;
    do
    {
      int v39 = *v36++;
      *v37++ = v39;
      BOOL v31 = __CFADD__(v38++, 1);
    }
    while (!v31);
    goto LABEL_27;
  }
LABEL_28:
  if (v33)
  {
    for (uint64_t i = 0; i != v33; ++i)
    {
      unsigned int v41 = (__int16 *)v15;
      unsigned int v42 = (__int16 *)v20;
      if (v34)
      {
        unsigned int v41 = (__int16 *)(v15 + 1);
        *unint64_t v20 = *v15;
        unsigned int v42 = (__int16 *)(v20 + 1);
      }
      if (v35)
      {
        uint64_t v43 = -(uint64_t)v35;
        do
        {
          __int16 v44 = *v41;
          __int16 v45 = v41[1];
          *unsigned int v42 = *v41;
          v42[1] = v45;
          __int16 v46 = (__int16 *)((char *)v42 + v19);
          *__int16 v46 = v44;
          v46[1] = v45;
          v42 += 2;
          v41 += 2;
          BOOL v31 = __CFADD__(v43++, 1);
        }
        while (!v31);
      }
      uint64_t v15 = (int *)((char *)v15 + v14);
      unint64_t v20 = (int *)((char *)v20 + 2 * v19);
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v22)
  {
    if (v34)
    {
      int v47 = *v15++;
      *v20++ = v47;
    }
    if (v35)
    {
      uint64_t v48 = -(uint64_t)v35;
      do
      {
        int v49 = *v15++;
        *v20++ = v49;
        BOOL v31 = __CFADD__(v48++, 1);
      }
      while (!v31);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a8;
    uint64_t v30 = v27 + 2 * (v9 + v8) + v28;
    uint64_t v31 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          unsigned int v33 = *(unsigned __int16 *)(v30 + 2 * i);
          if (v33 >= 0xEB00) {
            unsigned int v33 = 60160;
          }
          if (v33 <= 0x1000) {
            unsigned int v33 = 4096;
          }
          *(_WORD *)(v31 + 2 * i) = (-268431360 - v33 + (v33 << 16)) / 0xDB00;
        }
      }
      v30 += v26;
      v31 += v29;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v34 = v11 & 1;
  if (v24 >> 1 >= (v24 - v34) >> 1) {
    unint64_t v35 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v35 = v24 >> 1;
  }
  char v36 = v8;
  unint64_t v37 = v23 >> 1;
  if (v23 >> 1 >= (v23 - v9) >> 1) {
    unint64_t v37 = (v23 - v9) >> 1;
  }
  if (v11)
  {
    if (v36)
    {
      unsigned int v40 = *v15;
      if (v40 >= 0xF000) {
        unsigned int v40 = 61440;
      }
      if (v40 <= 0x1000) {
        int v41 = 4096;
      }
      else {
        int v41 = v40;
      }
      if (v15[1] >= 0xF000u) {
        unsigned int v42 = 61440;
      }
      else {
        unsigned int v42 = v15[1];
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      uint64_t v38 = v15 + 2;
      *unint64_t v22 = (613566757 * (unint64_t)((-268431360 - v41 + (v41 << 16)) >> 13)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-268431360 - v43 + (v43 << 16)) >> 13)) >> 32;
      int v39 = v22 + 2;
      if (!v37) {
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v38 = v15;
      int v39 = v22;
      if (!v37)
      {
LABEL_51:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_52;
      }
    }
    uint64_t v44 = -(uint64_t)v37;
    do
    {
      unsigned int v45 = *v38;
      unsigned int v46 = v38[1];
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        unsigned int v45 = 4096;
      }
      if (v46 >= 0xF000) {
        unsigned int v46 = 61440;
      }
      if (v46 <= 0x1000) {
        unsigned int v46 = 4096;
      }
      *int v39 = (613566757 * (unint64_t)((-268431360 - v45 + (v45 << 16)) >> 13)) >> 32;
      v39[1] = (613566757 * (unint64_t)((-268431360 - v46 + (v46 << 16)) >> 13)) >> 32;
      v38 += 2;
      v39 += 2;
      BOOL v47 = __CFADD__(v44++, 1);
    }
    while (!v47);
    goto LABEL_51;
  }
LABEL_52:
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      int v49 = v15;
      int v50 = v22;
      if (v36)
      {
        unsigned int v51 = *v15;
        if (v51 >= 0xF000) {
          unsigned int v51 = 61440;
        }
        if (v51 <= 0x1000) {
          int v52 = 4096;
        }
        else {
          int v52 = v51;
        }
        if (v15[1] >= 0xF000u) {
          unsigned int v53 = 61440;
        }
        else {
          unsigned int v53 = v15[1];
        }
        if (v53 <= 0x1000) {
          int v54 = 4096;
        }
        else {
          int v54 = v53;
        }
        int v49 = v15 + 2;
        *unint64_t v22 = (613566757 * (unint64_t)((-268431360 - v52 + (v52 << 16)) >> 13)) >> 32;
        v22[1] = (613566757 * (unint64_t)((-268431360 - v54 + (v54 << 16)) >> 13)) >> 32;
        int v50 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v55 = -(uint64_t)v37;
        do
        {
          unsigned int v56 = *v49;
          unsigned int v57 = v49[1];
          if (v56 >= 0xF000) {
            unsigned int v56 = 61440;
          }
          if (v56 <= 0x1000) {
            unsigned int v56 = 4096;
          }
          if (v57 >= 0xF000) {
            unsigned int v57 = 61440;
          }
          if (v57 <= 0x1000) {
            unsigned int v57 = 4096;
          }
          unint64_t v58 = (613566757 * (unint64_t)((-268431360 - v56 + (v56 << 16)) >> 13)) >> 32;
          unint64_t v59 = (613566757 * (unint64_t)((-268431360 - v57 + (v57 << 16)) >> 13)) >> 32;
          _WORD *v50 = v58;
          v50[1] = v59;
          unsigned int v60 = (_WORD *)((char *)v50 + v21);
          *unsigned int v60 = v58;
          v60[1] = v59;
          v50 += 2;
          v49 += 2;
          BOOL v47 = __CFADD__(v55++, 1);
        }
        while (!v47);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v61 = 2 * v35;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | (unint64_t)v34) < v24)
  {
    if (v36)
    {
      unsigned int v62 = *v15;
      unsigned int v63 = v15[1];
      if (v62 >= 0xF000) {
        unsigned int v62 = 61440;
      }
      if (v62 <= 0x1000) {
        unsigned int v62 = 4096;
      }
      if (v63 >= 0xF000) {
        unsigned int v63 = 61440;
      }
      if (v63 <= 0x1000) {
        unsigned int v63 = 4096;
      }
      v15 += 2;
      *unint64_t v22 = (613566757 * (unint64_t)((-268431360 - v62 + (v62 << 16)) >> 13)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-268431360 - v63 + (v63 << 16)) >> 13)) >> 32;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v64 = -(uint64_t)v37;
      do
      {
        unsigned int v65 = *v15;
        unsigned int v66 = v15[1];
        if (v65 >= 0xF000) {
          unsigned int v65 = 61440;
        }
        if (v65 <= 0x1000) {
          unsigned int v65 = 4096;
        }
        if (v66 >= 0xF000) {
          unsigned int v66 = 61440;
        }
        if (v66 <= 0x1000) {
          unsigned int v66 = 4096;
        }
        *unint64_t v22 = (613566757 * (unint64_t)((-268431360 - v65 + (v65 << 16)) >> 13)) >> 32;
        v22[1] = (613566757 * (unint64_t)((-268431360 - v66 + (v66 << 16)) >> 13)) >> 32;
        v15 += 2;
        v22 += 2;
        BOOL v47 = __CFADD__(v64++, 1);
      }
      while (!v47);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = 2 * v10;
  uint64_t v16 = a4[1];
  uint64_t v17 = (unsigned __int16 *)(a3[1] + v16 * ((v12 + v8) >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v20 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v21 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v22 = 2 * v18;
  uint64_t v23 = a8[1];
  unint64_t v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v25 = v11 - v10;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  unint64_t v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20) {
    unint64_t v27 = v21 - v20;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v15 + v32;
    uint64_t v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(_WORD *)(v34 + 2 * i) = (-268431360 - v36 + (v36 << 16)) / 0xDB00;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  unint64_t v37 = v27 >> 1;
  unint64_t v38 = v27 - v12;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  unint64_t v40 = v26 - (v9 & 1);
  if (v26 >> 1 >= v40 >> 1) {
    unint64_t v41 = v40 >> 1;
  }
  else {
    unint64_t v41 = v26 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v44 = *v17;
      if (v44 >= 0xF000) {
        unsigned int v44 = 61440;
      }
      if (v44 <= 0x1000) {
        int v45 = 4096;
      }
      else {
        int v45 = v44;
      }
      if (v17[1] >= 0xF000u) {
        unsigned int v46 = 61440;
      }
      else {
        unsigned int v46 = v17[1];
      }
      if (v46 <= 0x1000) {
        int v47 = 4096;
      }
      else {
        int v47 = v46;
      }
      unsigned int v42 = v17 + 2;
      *unint64_t v24 = (613566757 * (unint64_t)((-268431360 - v45 + (v45 << 16)) >> 13)) >> 32;
      v24[1] = (613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32;
      int v43 = v24 + 2;
      if (!v41) {
        goto LABEL_51;
      }
    }
    else
    {
      unsigned int v42 = v17;
      int v43 = v24;
      if (!v41)
      {
LABEL_51:
        uint64_t v17 = (unsigned __int16 *)((char *)v17 + v16);
        unint64_t v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_52;
      }
    }
    uint64_t v48 = -(uint64_t)v41;
    do
    {
      unsigned int v49 = *v42;
      unsigned int v50 = v42[1];
      if (v49 >= 0xF000) {
        unsigned int v49 = 61440;
      }
      if (v49 <= 0x1000) {
        unsigned int v49 = 4096;
      }
      if (v50 >= 0xF000) {
        unsigned int v50 = 61440;
      }
      if (v50 <= 0x1000) {
        unsigned int v50 = 4096;
      }
      *int v43 = (613566757 * (unint64_t)((-268431360 - v49 + (v49 << 16)) >> 13)) >> 32;
      v43[1] = (613566757 * (unint64_t)((-268431360 - v50 + (v50 << 16)) >> 13)) >> 32;
      v42 += 2;
      v43 += 2;
      BOOL v51 = __CFADD__(v48++, 1);
    }
    while (!v51);
    goto LABEL_51;
  }
LABEL_52:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      unsigned int v53 = v17;
      int v54 = v24;
      if (v9)
      {
        unsigned int v55 = *v17;
        if (v55 >= 0xF000) {
          unsigned int v55 = 61440;
        }
        if (v55 <= 0x1000) {
          int v56 = 4096;
        }
        else {
          int v56 = v55;
        }
        if (v17[1] >= 0xF000u) {
          unsigned int v57 = 61440;
        }
        else {
          unsigned int v57 = v17[1];
        }
        if (v57 <= 0x1000) {
          int v58 = 4096;
        }
        else {
          int v58 = v57;
        }
        unsigned int v53 = v17 + 2;
        *unint64_t v24 = (613566757 * (unint64_t)((-268431360 - v56 + (v56 << 16)) >> 13)) >> 32;
        v24[1] = (613566757 * (unint64_t)((-268431360 - v58 + (v58 << 16)) >> 13)) >> 32;
        int v54 = v24 + 2;
      }
      if (v41)
      {
        uint64_t v59 = -(uint64_t)v41;
        do
        {
          unsigned int v60 = *v53;
          unsigned int v61 = v53[1];
          if (v60 >= 0xF000) {
            unsigned int v60 = 61440;
          }
          if (v60 <= 0x1000) {
            unsigned int v60 = 4096;
          }
          if (v61 >= 0xF000) {
            unsigned int v61 = 61440;
          }
          if (v61 <= 0x1000) {
            unsigned int v61 = 4096;
          }
          *int v54 = (613566757 * (unint64_t)((-268431360 - v60 + (v60 << 16)) >> 13)) >> 32;
          v54[1] = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
          v53 += 2;
          v54 += 2;
          BOOL v51 = __CFADD__(v59++, 1);
        }
        while (!v51);
      }
      uint64_t v17 = (unsigned __int16 *)((char *)v17 + v16);
      unint64_t v24 = (_WORD *)((char *)v24 + v23);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (__int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v18 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17) {
    unint64_t v21 = v17;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v18) {
    unint64_t v22 = v18;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = v25 + v27;
    uint64_t v31 = a7[2] + v29 * v16 + 2 * v15;
    uint64_t v32 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(_WORD *)(v31 + 2 * i) = -1;
          *(_WORD *)(v32 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFF0;
        }
      }
      v30 += v24;
      v32 += v28;
      v31 += v29;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v34 = v8 & 1;
  unint64_t v35 = (v22 - v34) >> 1;
  if (v22 >> 1 < v35) {
    unint64_t v35 = v22 >> 1;
  }
  char v36 = v9;
  unint64_t v37 = v21 >> 1;
  uint64_t v38 = v9 & 1;
  if (v21 >> 1 >= (v21 - v38) >> 1) {
    unint64_t v37 = (v21 - v38) >> 1;
  }
  if (v8)
  {
    if (v36)
    {
      unint64_t v39 = v14 + 2;
      __int16 v46 = v14[1] & 0xFFF0;
      *uint64_t v20 = *v14 & 0xFFF0;
      v20[1] = v46;
      unint64_t v40 = v20 + 2;
      if (v37)
      {
LABEL_21:
        uint64_t v41 = -(uint64_t)v37;
        do
        {
          __int16 v42 = *v39;
          __int16 v43 = v39[1];
          v39 += 2;
          *unint64_t v40 = v42 & 0xFFF0;
          v40[1] = v43 & 0xFFF0;
          v40 += 2;
          BOOL v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        uint64_t v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v39 = v14;
      unint64_t v40 = v20;
      if (v37) {
        goto LABEL_21;
      }
    }
    uint64_t v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v21)
    {
      __int16 v47 = *v39 & 0xFFF0;
      __int16 v48 = v39[1] & 0xFFF0;
      *unint64_t v40 = v47;
      v40[1] = v48;
    }
    uint64_t v14 = (__int16 *)((char *)v14 + v13);
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      unsigned int v50 = v14;
      BOOL v51 = v20;
      if (v36)
      {
        unsigned int v50 = v14 + 2;
        __int16 v52 = *v14 & 0xFFF0;
        __int16 v53 = v14[1] & 0xFFF0;
        *uint64_t v20 = v52;
        v20[1] = v53;
        int v54 = (_WORD *)((char *)v20 + v19);
        *int v54 = v52;
        v54[1] = v53;
        BOOL v51 = v20 + 2;
      }
      if (v37)
      {
        uint64_t v55 = -(uint64_t)v37;
        do
        {
          __int16 v56 = *v50;
          __int16 v57 = v50[1];
          v50 += 2;
          v56 &= 0xFFF0u;
          v57 &= 0xFFF0u;
          *BOOL v51 = v56;
          v51[1] = v57;
          v51[2] = v56;
          v51[3] = v57;
          int v58 = (_WORD *)((char *)v51 + v19);
          _WORD *v58 = v56;
          v58[1] = v57;
          v58[2] = v56;
          v58[3] = v57;
          v51 += 4;
          BOOL v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v21)
      {
        __int16 v59 = *v50 & 0xFFF0;
        __int16 v60 = v50[1] & 0xFFF0;
        *BOOL v51 = v59;
        v51[1] = v60;
        unsigned int v61 = (_WORD *)((char *)v51 + v19);
        *unsigned int v61 = v59;
        v61[1] = v60;
      }
      uint64_t v14 = (__int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v62 = 2 * v35;
  }
  else
  {
    uint64_t v62 = 0;
  }
  if ((v62 | (unint64_t)v34) < v22)
  {
    if (v36)
    {
      __int16 v63 = *v14;
      __int16 v64 = v14[1];
      v14 += 2;
      *uint64_t v20 = v63 & 0xFFF0;
      v20[1] = v64 & 0xFFF0;
      v20 += 2;
    }
    if (v37)
    {
      uint64_t v65 = -(uint64_t)v37;
      do
      {
        __int16 v66 = *v14;
        __int16 v67 = v14[1];
        v14 += 2;
        *uint64_t v20 = v66 & 0xFFF0;
        v20[1] = v67 & 0xFFF0;
        v20 += 2;
        BOOL v44 = __CFADD__(v65++, 1);
      }
      while (!v44);
      uint64_t v68 = 2 * v37;
    }
    else
    {
      uint64_t v68 = 0;
    }
    if ((v68 | (unint64_t)v38) < v21)
    {
      __int16 v69 = *v14 & 0xFFF0;
      __int16 v70 = v14[1] & 0xFFF0;
      *uint64_t v20 = v69;
      v20[1] = v70;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (__int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + 2 * (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFF0;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v31 = v8 & 1;
  unint64_t v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      char v36 = v14 + 2;
      __int16 v43 = v14[1] & 0xFFF0;
      *uint64_t v20 = *v14 & 0xFFF0;
      v20[1] = v43;
      unint64_t v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          __int16 v39 = *v36;
          __int16 v40 = v36[1];
          v36 += 2;
          *unint64_t v37 = v39 & 0xFFF0;
          v37[1] = v40 & 0xFFF0;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      char v36 = v14;
      unint64_t v37 = v20;
      if (v34) {
        goto LABEL_21;
      }
    }
    uint64_t v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      __int16 v44 = *v36 & 0xFFF0;
      __int16 v45 = v36[1] & 0xFFF0;
      *unint64_t v37 = v44;
      v37[1] = v45;
    }
    uint64_t v14 = (__int16 *)((char *)v14 + v13);
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      __int16 v47 = v14;
      __int16 v48 = v20;
      if (v33)
      {
        __int16 v47 = v14 + 2;
        __int16 v49 = *v14 & 0xFFF0;
        __int16 v50 = v14[1] & 0xFFF0;
        *uint64_t v20 = v49;
        v20[1] = v50;
        BOOL v51 = (_WORD *)((char *)v20 + v19);
        *BOOL v51 = v49;
        v51[1] = v50;
        __int16 v48 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v52 = -(uint64_t)v34;
        do
        {
          __int16 v53 = *v47;
          __int16 v54 = v47[1];
          v47 += 2;
          v53 &= 0xFFF0u;
          v54 &= 0xFFF0u;
          *__int16 v48 = v53;
          v48[1] = v54;
          v48[2] = v53;
          v48[3] = v54;
          uint64_t v55 = (_WORD *)((char *)v48 + v19);
          *uint64_t v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          BOOL v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        __int16 v56 = *v47 & 0xFFF0;
        __int16 v57 = v47[1] & 0xFFF0;
        *__int16 v48 = v56;
        v48[1] = v57;
        int v58 = (_WORD *)((char *)v48 + v19);
        _WORD *v58 = v56;
        v58[1] = v57;
      }
      uint64_t v14 = (__int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v59 = 2 * v32;
  }
  else
  {
    uint64_t v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v22)
  {
    if (v33)
    {
      __int16 v60 = *v14;
      __int16 v61 = v14[1];
      v14 += 2;
      *uint64_t v20 = v60 & 0xFFF0;
      v20[1] = v61 & 0xFFF0;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v62 = -(uint64_t)v34;
      do
      {
        __int16 v63 = *v14;
        __int16 v64 = v14[1];
        v14 += 2;
        *uint64_t v20 = v63 & 0xFFF0;
        v20[1] = v64 & 0xFFF0;
        v20 += 2;
        BOOL v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      uint64_t v65 = 2 * v34;
    }
    else
    {
      uint64_t v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v21)
    {
      __int16 v66 = *v14 & 0xFFF0;
      __int16 v67 = v14[1] & 0xFFF0;
      *uint64_t v20 = v66;
      v20[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v18 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17) {
    unint64_t v21 = v17;
  }
  if (v12 - v11 + (v12 & 1) >= v18) {
    unint64_t v22 = v18;
  }
  else {
    unint64_t v22 = v12 - v11 + (v12 & 1);
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    uint64_t v28 = *a8;
    uint64_t v29 = v25 + v27;
    uint64_t v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v32 = *(unsigned __int16 *)(v29 + 2 * i);
          if (v32 >= 0xEB00) {
            unsigned int v32 = 60160;
          }
          if (v32 <= 0x1000) {
            unsigned int v32 = 4096;
          }
          *(_WORD *)(v30 + 2 * i) = 16 * ((-16773120 - v32 + (v32 << 12)) / 0xDB00);
        }
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v33 = v8 & 1;
  unint64_t v34 = (v22 - v33) >> 1;
  if (v22 >> 1 < v34) {
    unint64_t v34 = v22 >> 1;
  }
  char v35 = v9;
  unint64_t v36 = v21 >> 1;
  uint64_t v37 = v9 & 1;
  if (v21 >> 1 >= (v21 - v37) >> 1) {
    unint64_t v36 = (v21 - v37) >> 1;
  }
  if (v8)
  {
    if (v35)
    {
      unsigned int v45 = *v14;
      unsigned int v46 = v14[1];
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        unsigned int v45 = 4096;
      }
      if (v46 >= 0xF000) {
        unsigned int v46 = 61440;
      }
      if (v46 <= 0x1000) {
        int v47 = 4096;
      }
      else {
        int v47 = v46;
      }
      uint64_t v38 = v14 + 2;
      *uint64_t v20 = 16 * ((613566757 * (unint64_t)((-16773120 - v45 + (v45 << 12)) >> 13)) >> 32);
      v20[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v47 + (v47 << 12)) >> 13)) >> 32);
      __int16 v39 = v20 + 2;
      if (v36) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v38 = v14;
      __int16 v39 = v20;
      if (v36)
      {
LABEL_26:
        uint64_t v40 = -(uint64_t)v36;
        do
        {
          unsigned int v41 = *v38;
          unsigned int v42 = v38[1];
          if (v41 >= 0xF000) {
            unsigned int v41 = 61440;
          }
          if (v41 <= 0x1000) {
            unsigned int v41 = 4096;
          }
          if (v42 >= 0xF000) {
            unsigned int v42 = 61440;
          }
          if (v42 <= 0x1000) {
            unsigned int v42 = 4096;
          }
          v38 += 2;
          *__int16 v39 = 16 * ((613566757 * (unint64_t)((-16773120 - v41 + (v41 << 12)) >> 13)) >> 32);
          v39[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v42 + (v42 << 12)) >> 13)) >> 32);
          v39 += 2;
          BOOL v43 = __CFADD__(v40++, 1);
        }
        while (!v43);
        uint64_t v44 = 2 * v36;
        goto LABEL_49;
      }
    }
    uint64_t v44 = 0;
LABEL_49:
    if ((v44 | (unint64_t)v37) < v21)
    {
      unsigned int v48 = *v38;
      unsigned int v49 = v38[1];
      if (v48 >= 0xF000) {
        unsigned int v48 = 61440;
      }
      if (v48 <= 0x1000) {
        unsigned int v48 = 4096;
      }
      if (v49 >= 0xF000) {
        unsigned int v49 = 61440;
      }
      if (v49 <= 0x1000) {
        unsigned int v49 = 4096;
      }
      *__int16 v39 = 16 * ((613566757 * (unint64_t)((-16773120 - v48 + (v48 << 12)) >> 13)) >> 32);
      v39[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v49 + (v49 << 12)) >> 13)) >> 32);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      BOOL v51 = v14;
      uint64_t v52 = v20;
      if (v35)
      {
        unsigned int v53 = *v14;
        unsigned int v54 = v14[1];
        if (v53 >= 0xF000) {
          unsigned int v53 = 61440;
        }
        if (v53 <= 0x1000) {
          unsigned int v53 = 4096;
        }
        if (v54 >= 0xF000) {
          unsigned int v54 = 61440;
        }
        if (v54 <= 0x1000) {
          int v55 = 4096;
        }
        else {
          int v55 = v54;
        }
        BOOL v51 = v14 + 2;
        int v56 = 16 * ((613566757 * (unint64_t)((-16773120 - v53 + (v53 << 12)) >> 13)) >> 32);
        *uint64_t v20 = v56;
        int v57 = 16 * ((613566757 * (unint64_t)((-16773120 - v55 + (v55 << 12)) >> 13)) >> 32);
        v20[1] = v57;
        int v58 = (_WORD *)((char *)v20 + v19);
        _WORD *v58 = v56;
        v58[1] = v57;
        uint64_t v52 = v20 + 2;
      }
      if (v36)
      {
        uint64_t v59 = -(uint64_t)v36;
        do
        {
          unsigned int v60 = *v51;
          unsigned int v61 = v51[1];
          if (v60 >= 0xF000) {
            unsigned int v60 = 61440;
          }
          if (v60 <= 0x1000) {
            unsigned int v60 = 4096;
          }
          if (v61 >= 0xF000) {
            unsigned int v61 = 61440;
          }
          if (v61 <= 0x1000) {
            unsigned int v61 = 4096;
          }
          int v62 = 16 * ((613566757 * (unint64_t)((-16773120 - v60 + (v60 << 12)) >> 13)) >> 32);
          *uint64_t v52 = v62;
          int v63 = 16 * ((613566757 * (unint64_t)((-16773120 - v61 + (v61 << 12)) >> 13)) >> 32);
          v52[1] = v63;
          v52[2] = v62;
          v52[3] = v63;
          __int16 v64 = (_WORD *)((char *)v52 + v19);
          *__int16 v64 = v62;
          v64[1] = v63;
          v51 += 2;
          v64[2] = v62;
          v64[3] = v63;
          v52 += 4;
          BOOL v43 = __CFADD__(v59++, 1);
        }
        while (!v43);
      }
      if ((v37 | (2 * v36)) < v21)
      {
        unsigned int v65 = *v51;
        unsigned int v66 = v51[1];
        if (v65 >= 0xF000) {
          unsigned int v65 = 61440;
        }
        if (v65 <= 0x1000) {
          unsigned int v65 = 4096;
        }
        if (v66 >= 0xF000) {
          unsigned int v66 = 61440;
        }
        if (v66 <= 0x1000) {
          unsigned int v66 = 4096;
        }
        int v67 = 16 * ((613566757 * (unint64_t)((-16773120 - v65 + (v65 << 12)) >> 13)) >> 32);
        *uint64_t v52 = v67;
        int v68 = 16 * ((613566757 * (unint64_t)((-16773120 - v66 + (v66 << 12)) >> 13)) >> 32);
        v52[1] = v68;
        __int16 v69 = (_WORD *)((char *)v52 + v19);
        *__int16 v69 = v67;
        v69[1] = v68;
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v70 = 2 * v34;
  }
  else
  {
    uint64_t v70 = 0;
  }
  if ((v70 | (unint64_t)v33) < v22)
  {
    if (v35)
    {
      unsigned int v71 = *v14;
      unsigned int v72 = v14[1];
      if (v71 >= 0xF000) {
        unsigned int v71 = 61440;
      }
      if (v71 <= 0x1000) {
        unsigned int v71 = 4096;
      }
      if (v72 >= 0xF000) {
        unsigned int v72 = 61440;
      }
      if (v72 <= 0x1000) {
        unsigned int v72 = 4096;
      }
      v14 += 2;
      *uint64_t v20 = 16 * ((613566757 * (unint64_t)((-16773120 - v71 + (v71 << 12)) >> 13)) >> 32);
      v20[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v72 + (v72 << 12)) >> 13)) >> 32);
      v20 += 2;
    }
    if (v36)
    {
      uint64_t v73 = -(uint64_t)v36;
      do
      {
        unsigned int v74 = *v14;
        unsigned int v75 = v14[1];
        if (v74 >= 0xF000) {
          unsigned int v74 = 61440;
        }
        if (v74 <= 0x1000) {
          unsigned int v74 = 4096;
        }
        if (v75 >= 0xF000) {
          unsigned int v75 = 61440;
        }
        if (v75 <= 0x1000) {
          unsigned int v75 = 4096;
        }
        v14 += 2;
        *uint64_t v20 = 16 * ((613566757 * (unint64_t)((-16773120 - v74 + (v74 << 12)) >> 13)) >> 32);
        v20[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v75 + (v75 << 12)) >> 13)) >> 32);
        v20 += 2;
        BOOL v43 = __CFADD__(v73++, 1);
      }
      while (!v43);
      v36 *= 2;
    }
    if ((v36 | v37) < v21)
    {
      unsigned int v76 = *v14;
      unsigned int v77 = v14[1];
      if (v76 >= 0xF000) {
        unsigned int v76 = 61440;
      }
      if (v76 <= 0x1000) {
        unsigned int v76 = 4096;
      }
      if (v77 >= 0xF000) {
        unsigned int v77 = 61440;
      }
      if (v77 <= 0x1000) {
        unsigned int v77 = 4096;
      }
      *uint64_t v20 = 16 * ((613566757 * (unint64_t)((-16773120 - v76 + (v76 << 12)) >> 13)) >> 32);
      v20[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v77 + (v77 << 12)) >> 13)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (_WORD *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = v26;
    }
    uint64_t v29 = 2 * (v9 + v8) + v28;
    uint64_t v30 = *a8;
    uint64_t v31 = a8[2];
    uint64_t v32 = v27 + v29;
    uint64_t v33 = a7[2] + v31 * v19 + v20;
    uint64_t v34 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v33 + 2 * i) = -1;
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFF0;
        }
      }
      v32 += v26;
      v34 += v30;
      v33 += v31;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v36 = v11 & 1;
  if (v24 >> 1 >= (v24 - v36) >> 1) {
    unint64_t v37 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v37 = v24 >> 1;
  }
  char v38 = v8;
  unint64_t v39 = v23 >> 1;
  unint64_t v40 = (v23 - v9) >> 1;
  if (v39 >= v40) {
    unint64_t v39 = v40;
  }
  if (v11)
  {
    if (v38)
    {
      unsigned int v41 = v15 + 2;
      __int16 v43 = v15[1] & 0xFFF0;
      *unint64_t v22 = *v15 & 0xFFF0;
      v22[1] = v43;
      unsigned int v42 = v22 + 2;
      if (!v39)
      {
LABEL_28:
        uint64_t v15 = (_WORD *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v41 = v15;
      unsigned int v42 = v22;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v44 = -(uint64_t)v39;
    do
    {
      __int16 v45 = v41[1] & 0xFFF0;
      *unsigned int v42 = *v41 & 0xFFF0;
      v42[1] = v45;
      v41 += 2;
      v42 += 2;
      BOOL v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      unsigned int v48 = v15;
      unsigned int v49 = v22;
      if (v38)
      {
        unsigned int v48 = v15 + 2;
        __int16 v50 = v15[1] & 0xFFF0;
        *unint64_t v22 = *v15 & 0xFFF0;
        v22[1] = v50;
        unsigned int v49 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v51 = -(uint64_t)v39;
        do
        {
          __int16 v52 = *v48 & 0xFFF0;
          __int16 v53 = v48[1] & 0xFFF0;
          *unsigned int v49 = v52;
          v49[1] = v53;
          unsigned int v54 = (_WORD *)((char *)v49 + v21);
          *unsigned int v54 = v52;
          v54[1] = v53;
          v49 += 2;
          v48 += 2;
          BOOL v46 = __CFADD__(v51++, 1);
        }
        while (!v46);
      }
      uint64_t v15 = (_WORD *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v55 = 2 * v37;
  }
  else
  {
    uint64_t v55 = 0;
  }
  if ((v55 | (unint64_t)v36) < v24)
  {
    if (v38)
    {
      __int16 v56 = *v15;
      __int16 v57 = v15[1];
      v15 += 2;
      *unint64_t v22 = v56 & 0xFFF0;
      v22[1] = v57 & 0xFFF0;
      v22 += 2;
    }
    if (v39)
    {
      uint64_t v58 = -(uint64_t)v39;
      do
      {
        __int16 v59 = v15[1] & 0xFFF0;
        *unint64_t v22 = *v15 & 0xFFF0;
        v22[1] = v59;
        v15 += 2;
        v22 += 2;
        BOOL v46 = __CFADD__(v58++, 1);
      }
      while (!v46);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (_WORD *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + 2 * (v9 + v8) + v29;
    uint64_t v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFF0;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1) {
    unint64_t v34 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v34 = v24 >> 1;
  }
  char v35 = v8;
  unint64_t v36 = v23 >> 1;
  unint64_t v37 = (v23 - v9) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v11)
  {
    if (v35)
    {
      char v38 = v15 + 2;
      __int16 v40 = v15[1] & 0xFFF0;
      *unint64_t v22 = *v15 & 0xFFF0;
      v22[1] = v40;
      unint64_t v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        uint64_t v15 = (_WORD *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      char v38 = v15;
      unint64_t v39 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      __int16 v42 = v38[1] & 0xFFF0;
      *unint64_t v39 = *v38 & 0xFFF0;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      __int16 v45 = v15;
      BOOL v46 = v22;
      if (v35)
      {
        __int16 v45 = v15 + 2;
        __int16 v47 = v15[1] & 0xFFF0;
        *unint64_t v22 = *v15 & 0xFFF0;
        v22[1] = v47;
        BOOL v46 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v48 = -(uint64_t)v36;
        do
        {
          __int16 v49 = *v45 & 0xFFF0;
          __int16 v50 = v45[1] & 0xFFF0;
          *BOOL v46 = v49;
          v46[1] = v50;
          uint64_t v51 = (_WORD *)((char *)v46 + v21);
          *uint64_t v51 = v49;
          v51[1] = v50;
          v46 += 2;
          v45 += 2;
          BOOL v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      uint64_t v15 = (_WORD *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v52 = 2 * v34;
  }
  else
  {
    uint64_t v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if (v35)
    {
      __int16 v53 = *v15;
      __int16 v54 = v15[1];
      v15 += 2;
      *unint64_t v22 = v53 & 0xFFF0;
      v22[1] = v54 & 0xFFF0;
      v22 += 2;
    }
    if (v36)
    {
      uint64_t v55 = -(uint64_t)v36;
      do
      {
        __int16 v56 = v15[1] & 0xFFF0;
        *unint64_t v22 = *v15 & 0xFFF0;
        v22[1] = v56;
        v15 += 2;
        v22 += 2;
        BOOL v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a8;
    uint64_t v30 = v27 + 2 * (v9 + v8) + v28;
    uint64_t v31 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          unsigned int v33 = *(unsigned __int16 *)(v30 + 2 * i);
          if (v33 >= 0xEB00) {
            unsigned int v33 = 60160;
          }
          if (v33 <= 0x1000) {
            unsigned int v33 = 4096;
          }
          *(_WORD *)(v31 + 2 * i) = 16 * ((-16773120 - v33 + (v33 << 12)) / 0xDB00);
        }
      }
      v30 += v26;
      v31 += v29;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v34 = v11 & 1;
  if (v24 >> 1 >= (v24 - v34) >> 1) {
    unint64_t v35 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v35 = v24 >> 1;
  }
  char v36 = v8;
  unint64_t v37 = v23 >> 1;
  if (v23 >> 1 >= (v23 - v9) >> 1) {
    unint64_t v37 = (v23 - v9) >> 1;
  }
  if (v11)
  {
    if (v36)
    {
      unsigned int v40 = *v15;
      if (v40 >= 0xF000) {
        unsigned int v40 = 61440;
      }
      if (v40 <= 0x1000) {
        int v41 = 4096;
      }
      else {
        int v41 = v40;
      }
      if (v15[1] >= 0xF000u) {
        unsigned int v42 = 61440;
      }
      else {
        unsigned int v42 = v15[1];
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      char v38 = v15 + 2;
      *unint64_t v22 = 16 * ((613566757 * (unint64_t)((-16773120 - v41 + (v41 << 12)) >> 13)) >> 32);
      v22[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v43 + (v43 << 12)) >> 13)) >> 32);
      unint64_t v39 = v22 + 2;
      if (!v37) {
        goto LABEL_51;
      }
    }
    else
    {
      char v38 = v15;
      unint64_t v39 = v22;
      if (!v37)
      {
LABEL_51:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_52;
      }
    }
    uint64_t v44 = -(uint64_t)v37;
    do
    {
      unsigned int v45 = *v38;
      unsigned int v46 = v38[1];
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        unsigned int v45 = 4096;
      }
      if (v46 >= 0xF000) {
        unsigned int v46 = 61440;
      }
      if (v46 <= 0x1000) {
        unsigned int v46 = 4096;
      }
      *unint64_t v39 = 16 * ((613566757 * (unint64_t)((-16773120 - v45 + (v45 << 12)) >> 13)) >> 32);
      v39[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v46 + (v46 << 12)) >> 13)) >> 32);
      v38 += 2;
      v39 += 2;
      BOOL v47 = __CFADD__(v44++, 1);
    }
    while (!v47);
    goto LABEL_51;
  }
LABEL_52:
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      __int16 v49 = v15;
      __int16 v50 = v22;
      if (v36)
      {
        unsigned int v51 = *v15;
        if (v51 >= 0xF000) {
          unsigned int v51 = 61440;
        }
        if (v51 <= 0x1000) {
          int v52 = 4096;
        }
        else {
          int v52 = v51;
        }
        if (v15[1] >= 0xF000u) {
          unsigned int v53 = 61440;
        }
        else {
          unsigned int v53 = v15[1];
        }
        if (v53 <= 0x1000) {
          int v54 = 4096;
        }
        else {
          int v54 = v53;
        }
        __int16 v49 = v15 + 2;
        *unint64_t v22 = 16 * ((613566757 * (unint64_t)((-16773120 - v52 + (v52 << 12)) >> 13)) >> 32);
        v22[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v54 + (v54 << 12)) >> 13)) >> 32);
        __int16 v50 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v55 = -(uint64_t)v37;
        do
        {
          unsigned int v56 = *v49;
          unsigned int v57 = v49[1];
          if (v56 >= 0xF000) {
            unsigned int v56 = 61440;
          }
          if (v56 <= 0x1000) {
            unsigned int v56 = 4096;
          }
          if (v57 >= 0xF000) {
            unsigned int v57 = 61440;
          }
          if (v57 <= 0x1000) {
            unsigned int v57 = 4096;
          }
          int v58 = 16 * ((613566757 * (unint64_t)((-16773120 - v56 + (v56 << 12)) >> 13)) >> 32);
          _WORD *v50 = v58;
          int v59 = 16 * ((613566757 * (unint64_t)((-16773120 - v57 + (v57 << 12)) >> 13)) >> 32);
          v50[1] = v59;
          unsigned int v60 = (_WORD *)((char *)v50 + v21);
          *unsigned int v60 = v58;
          v60[1] = v59;
          v50 += 2;
          v49 += 2;
          BOOL v47 = __CFADD__(v55++, 1);
        }
        while (!v47);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v61 = 2 * v35;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | (unint64_t)v34) < v24)
  {
    if (v36)
    {
      unsigned int v62 = *v15;
      unsigned int v63 = v15[1];
      if (v62 >= 0xF000) {
        unsigned int v62 = 61440;
      }
      if (v62 <= 0x1000) {
        unsigned int v62 = 4096;
      }
      if (v63 >= 0xF000) {
        unsigned int v63 = 61440;
      }
      if (v63 <= 0x1000) {
        unsigned int v63 = 4096;
      }
      v15 += 2;
      *unint64_t v22 = 16 * ((613566757 * (unint64_t)((-16773120 - v62 + (v62 << 12)) >> 13)) >> 32);
      v22[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v63 + (v63 << 12)) >> 13)) >> 32);
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v64 = -(uint64_t)v37;
      do
      {
        unsigned int v65 = *v15;
        unsigned int v66 = v15[1];
        if (v65 >= 0xF000) {
          unsigned int v65 = 61440;
        }
        if (v65 <= 0x1000) {
          unsigned int v65 = 4096;
        }
        if (v66 >= 0xF000) {
          unsigned int v66 = 61440;
        }
        if (v66 <= 0x1000) {
          unsigned int v66 = 4096;
        }
        *unint64_t v22 = 16 * ((613566757 * (unint64_t)((-16773120 - v65 + (v65 << 12)) >> 13)) >> 32);
        v22[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v66 + (v66 << 12)) >> 13)) >> 32);
        v15 += 2;
        v22 += 2;
        BOOL v47 = __CFADD__(v64++, 1);
      }
      while (!v47);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = 2 * v10;
  uint64_t v16 = a4[1];
  uint64_t v17 = (_WORD *)(a3[1] + v16 * ((v12 + v9) >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v20 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v21 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v22 = 2 * v18;
  uint64_t v23 = a8[1];
  unint64_t v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v25 = v11 - v10;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  unint64_t v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20) {
    unint64_t v27 = v21 - v20;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v15 + v32;
    uint64_t v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFF0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  unint64_t v36 = v27 >> 1;
  unint64_t v37 = v27 - v12;
  if (v36 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v36;
  }
  unint64_t v39 = v26 - (v8 & 1);
  if (v26 >> 1 >= v39 >> 1) {
    unint64_t v40 = v39 >> 1;
  }
  else {
    unint64_t v40 = v26 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      int v41 = v17 + 2;
      __int16 v43 = v17[1] & 0xFFF0;
      *unint64_t v24 = *v17 & 0xFFF0;
      v24[1] = v43;
      unsigned int v42 = v24 + 2;
      if (!v40)
      {
LABEL_28:
        uint64_t v17 = (_WORD *)((char *)v17 + v16);
        unint64_t v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      int v41 = v17;
      unsigned int v42 = v24;
      if (!v40) {
        goto LABEL_28;
      }
    }
    uint64_t v44 = -(uint64_t)v40;
    do
    {
      __int16 v45 = v41[1] & 0xFFF0;
      *unsigned int v42 = *v41 & 0xFFF0;
      v42[1] = v45;
      v41 += 2;
      v42 += 2;
      BOOL v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v38)
  {
    for (uint64_t j = 0; j != v38; ++j)
    {
      uint64_t v48 = v17;
      __int16 v49 = v24;
      if (v8)
      {
        uint64_t v48 = v17 + 2;
        __int16 v50 = v17[1] & 0xFFF0;
        *unint64_t v24 = *v17 & 0xFFF0;
        v24[1] = v50;
        __int16 v49 = v24 + 2;
      }
      if (v40)
      {
        uint64_t v51 = -(uint64_t)v40;
        do
        {
          __int16 v52 = v48[1] & 0xFFF0;
          *__int16 v49 = *v48 & 0xFFF0;
          v49[1] = v52;
          v48 += 2;
          v49 += 2;
          BOOL v46 = __CFADD__(v51++, 1);
        }
        while (!v46);
      }
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      unint64_t v24 = (_WORD *)((char *)v24 + v23);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = 2 * v10;
  uint64_t v16 = a4[1];
  uint64_t v17 = (unsigned __int16 *)(a3[1] + v16 * ((v12 + v8) >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v20 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v21 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v22 = 2 * v18;
  uint64_t v23 = a8[1];
  unint64_t v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v25 = v11 - v10;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  unint64_t v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20) {
    unint64_t v27 = v21 - v20;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v15 + v32;
    uint64_t v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(_WORD *)(v34 + 2 * i) = 16 * ((-16773120 - v36 + (v36 << 12)) / 0xDB00);
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  unint64_t v37 = v27 >> 1;
  unint64_t v38 = v27 - v12;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  unint64_t v40 = v26 - (v9 & 1);
  if (v26 >> 1 >= v40 >> 1) {
    unint64_t v41 = v40 >> 1;
  }
  else {
    unint64_t v41 = v26 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v44 = *v17;
      if (v44 >= 0xF000) {
        unsigned int v44 = 61440;
      }
      if (v44 <= 0x1000) {
        int v45 = 4096;
      }
      else {
        int v45 = v44;
      }
      if (v17[1] >= 0xF000u) {
        unsigned int v46 = 61440;
      }
      else {
        unsigned int v46 = v17[1];
      }
      if (v46 <= 0x1000) {
        int v47 = 4096;
      }
      else {
        int v47 = v46;
      }
      unsigned int v42 = v17 + 2;
      *unint64_t v24 = 16 * ((613566757 * (unint64_t)((-16773120 - v45 + (v45 << 12)) >> 13)) >> 32);
      v24[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v47 + (v47 << 12)) >> 13)) >> 32);
      __int16 v43 = v24 + 2;
      if (!v41) {
        goto LABEL_51;
      }
    }
    else
    {
      unsigned int v42 = v17;
      __int16 v43 = v24;
      if (!v41)
      {
LABEL_51:
        uint64_t v17 = (unsigned __int16 *)((char *)v17 + v16);
        unint64_t v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_52;
      }
    }
    uint64_t v48 = -(uint64_t)v41;
    do
    {
      unsigned int v49 = *v42;
      unsigned int v50 = v42[1];
      if (v49 >= 0xF000) {
        unsigned int v49 = 61440;
      }
      if (v49 <= 0x1000) {
        unsigned int v49 = 4096;
      }
      if (v50 >= 0xF000) {
        unsigned int v50 = 61440;
      }
      if (v50 <= 0x1000) {
        unsigned int v50 = 4096;
      }
      *__int16 v43 = 16 * ((613566757 * (unint64_t)((-16773120 - v49 + (v49 << 12)) >> 13)) >> 32);
      v43[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v50 + (v50 << 12)) >> 13)) >> 32);
      v42 += 2;
      v43 += 2;
      BOOL v51 = __CFADD__(v48++, 1);
    }
    while (!v51);
    goto LABEL_51;
  }
LABEL_52:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      unsigned int v53 = v17;
      int v54 = v24;
      if (v9)
      {
        unsigned int v55 = *v17;
        if (v55 >= 0xF000) {
          unsigned int v55 = 61440;
        }
        if (v55 <= 0x1000) {
          int v56 = 4096;
        }
        else {
          int v56 = v55;
        }
        if (v17[1] >= 0xF000u) {
          unsigned int v57 = 61440;
        }
        else {
          unsigned int v57 = v17[1];
        }
        if (v57 <= 0x1000) {
          int v58 = 4096;
        }
        else {
          int v58 = v57;
        }
        unsigned int v53 = v17 + 2;
        *unint64_t v24 = 16 * ((613566757 * (unint64_t)((-16773120 - v56 + (v56 << 12)) >> 13)) >> 32);
        v24[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v58 + (v58 << 12)) >> 13)) >> 32);
        int v54 = v24 + 2;
      }
      if (v41)
      {
        uint64_t v59 = -(uint64_t)v41;
        do
        {
          unsigned int v60 = *v53;
          unsigned int v61 = v53[1];
          if (v60 >= 0xF000) {
            unsigned int v60 = 61440;
          }
          if (v60 <= 0x1000) {
            unsigned int v60 = 4096;
          }
          if (v61 >= 0xF000) {
            unsigned int v61 = 61440;
          }
          if (v61 <= 0x1000) {
            unsigned int v61 = 4096;
          }
          *int v54 = 16 * ((613566757 * (unint64_t)((-16773120 - v60 + (v60 << 12)) >> 13)) >> 32);
          v54[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v61 + (v61 << 12)) >> 13)) >> 32);
          v53 += 2;
          v54 += 2;
          BOOL v51 = __CFADD__(v59++, 1);
        }
        while (!v51);
      }
      uint64_t v17 = (unsigned __int16 *)((char *)v17 + v16);
      unint64_t v24 = (_WORD *)((char *)v24 + v23);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (__int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v18 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17) {
    unint64_t v21 = v17;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v18) {
    unint64_t v22 = v18;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = v25 + v27;
    uint64_t v31 = a7[2] + v29 * v16 + 2 * v15;
    uint64_t v32 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(_WORD *)(v31 + 2 * i) = -1;
          *(_WORD *)(v32 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v24;
      v32 += v28;
      v31 += v29;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v34 = v8 & 1;
  unint64_t v35 = (v22 - v34) >> 1;
  if (v22 >> 1 < v35) {
    unint64_t v35 = v22 >> 1;
  }
  char v36 = v9;
  unint64_t v37 = v21 >> 1;
  uint64_t v38 = v9 & 1;
  if (v21 >> 1 >= (v21 - v38) >> 1) {
    unint64_t v37 = (v21 - v38) >> 1;
  }
  if (v8)
  {
    if (v36)
    {
      unint64_t v39 = v14 + 2;
      __int16 v46 = v14[1] & 0xFFC0;
      *uint64_t v20 = *v14 & 0xFFC0;
      v20[1] = v46;
      unint64_t v40 = v20 + 2;
      if (v37)
      {
LABEL_21:
        uint64_t v41 = -(uint64_t)v37;
        do
        {
          __int16 v42 = *v39;
          __int16 v43 = v39[1];
          v39 += 2;
          *unint64_t v40 = v42 & 0xFFC0;
          v40[1] = v43 & 0xFFC0;
          v40 += 2;
          BOOL v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        uint64_t v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v39 = v14;
      unint64_t v40 = v20;
      if (v37) {
        goto LABEL_21;
      }
    }
    uint64_t v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v21)
    {
      __int16 v47 = *v39 & 0xFFC0;
      __int16 v48 = v39[1] & 0xFFC0;
      *unint64_t v40 = v47;
      v40[1] = v48;
    }
    uint64_t v14 = (__int16 *)((char *)v14 + v13);
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      unsigned int v50 = v14;
      BOOL v51 = v20;
      if (v36)
      {
        unsigned int v50 = v14 + 2;
        __int16 v52 = *v14 & 0xFFC0;
        __int16 v53 = v14[1] & 0xFFC0;
        *uint64_t v20 = v52;
        v20[1] = v53;
        int v54 = (_WORD *)((char *)v20 + v19);
        *int v54 = v52;
        v54[1] = v53;
        BOOL v51 = v20 + 2;
      }
      if (v37)
      {
        uint64_t v55 = -(uint64_t)v37;
        do
        {
          __int16 v56 = *v50;
          __int16 v57 = v50[1];
          v50 += 2;
          v56 &= 0xFFC0u;
          v57 &= 0xFFC0u;
          *BOOL v51 = v56;
          v51[1] = v57;
          v51[2] = v56;
          v51[3] = v57;
          int v58 = (_WORD *)((char *)v51 + v19);
          _WORD *v58 = v56;
          v58[1] = v57;
          v58[2] = v56;
          v58[3] = v57;
          v51 += 4;
          BOOL v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v21)
      {
        __int16 v59 = *v50 & 0xFFC0;
        __int16 v60 = v50[1] & 0xFFC0;
        *BOOL v51 = v59;
        v51[1] = v60;
        unsigned int v61 = (_WORD *)((char *)v51 + v19);
        *unsigned int v61 = v59;
        v61[1] = v60;
      }
      uint64_t v14 = (__int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v62 = 2 * v35;
  }
  else
  {
    uint64_t v62 = 0;
  }
  if ((v62 | (unint64_t)v34) < v22)
  {
    if (v36)
    {
      __int16 v63 = *v14;
      __int16 v64 = v14[1];
      v14 += 2;
      *uint64_t v20 = v63 & 0xFFC0;
      v20[1] = v64 & 0xFFC0;
      v20 += 2;
    }
    if (v37)
    {
      uint64_t v65 = -(uint64_t)v37;
      do
      {
        __int16 v66 = *v14;
        __int16 v67 = v14[1];
        v14 += 2;
        *uint64_t v20 = v66 & 0xFFC0;
        v20[1] = v67 & 0xFFC0;
        v20 += 2;
        BOOL v44 = __CFADD__(v65++, 1);
      }
      while (!v44);
      uint64_t v68 = 2 * v37;
    }
    else
    {
      uint64_t v68 = 0;
    }
    if ((v68 | (unint64_t)v38) < v21)
    {
      __int16 v69 = *v14 & 0xFFC0;
      __int16 v70 = v14[1] & 0xFFC0;
      *uint64_t v20 = v69;
      v20[1] = v70;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (__int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + 2 * (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v31 = v8 & 1;
  unint64_t v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      char v36 = v14 + 2;
      __int16 v43 = v14[1] & 0xFFC0;
      *uint64_t v20 = *v14 & 0xFFC0;
      v20[1] = v43;
      unint64_t v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          __int16 v39 = *v36;
          __int16 v40 = v36[1];
          v36 += 2;
          *unint64_t v37 = v39 & 0xFFC0;
          v37[1] = v40 & 0xFFC0;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      char v36 = v14;
      unint64_t v37 = v20;
      if (v34) {
        goto LABEL_21;
      }
    }
    uint64_t v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      __int16 v44 = *v36 & 0xFFC0;
      __int16 v45 = v36[1] & 0xFFC0;
      *unint64_t v37 = v44;
      v37[1] = v45;
    }
    uint64_t v14 = (__int16 *)((char *)v14 + v13);
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      __int16 v47 = v14;
      __int16 v48 = v20;
      if (v33)
      {
        __int16 v47 = v14 + 2;
        __int16 v49 = *v14 & 0xFFC0;
        __int16 v50 = v14[1] & 0xFFC0;
        *uint64_t v20 = v49;
        v20[1] = v50;
        BOOL v51 = (_WORD *)((char *)v20 + v19);
        *BOOL v51 = v49;
        v51[1] = v50;
        __int16 v48 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v52 = -(uint64_t)v34;
        do
        {
          __int16 v53 = *v47;
          __int16 v54 = v47[1];
          v47 += 2;
          v53 &= 0xFFC0u;
          v54 &= 0xFFC0u;
          *__int16 v48 = v53;
          v48[1] = v54;
          v48[2] = v53;
          v48[3] = v54;
          uint64_t v55 = (_WORD *)((char *)v48 + v19);
          *uint64_t v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          BOOL v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        __int16 v56 = *v47 & 0xFFC0;
        __int16 v57 = v47[1] & 0xFFC0;
        *__int16 v48 = v56;
        v48[1] = v57;
        int v58 = (_WORD *)((char *)v48 + v19);
        _WORD *v58 = v56;
        v58[1] = v57;
      }
      uint64_t v14 = (__int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v59 = 2 * v32;
  }
  else
  {
    uint64_t v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v22)
  {
    if (v33)
    {
      __int16 v60 = *v14;
      __int16 v61 = v14[1];
      v14 += 2;
      *uint64_t v20 = v60 & 0xFFC0;
      v20[1] = v61 & 0xFFC0;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v62 = -(uint64_t)v34;
      do
      {
        __int16 v63 = *v14;
        __int16 v64 = v14[1];
        v14 += 2;
        *uint64_t v20 = v63 & 0xFFC0;
        v20[1] = v64 & 0xFFC0;
        v20 += 2;
        BOOL v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      uint64_t v65 = 2 * v34;
    }
    else
    {
      uint64_t v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v21)
    {
      __int16 v66 = *v14 & 0xFFC0;
      __int16 v67 = v14[1] & 0xFFC0;
      *uint64_t v20 = v66;
      v20[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v18 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17) {
    unint64_t v21 = v17;
  }
  if (v12 - v11 + (v12 & 1) >= v18) {
    unint64_t v22 = v18;
  }
  else {
    unint64_t v22 = v12 - v11 + (v12 & 1);
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    uint64_t v28 = *a8;
    uint64_t v29 = v25 + v27;
    uint64_t v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v32 = *(unsigned __int16 *)(v29 + 2 * i);
          if (v32 >= 0xEB00) {
            unsigned int v32 = 60160;
          }
          if (v32 <= 0x1000) {
            unsigned int v32 = 4096;
          }
          *(_WORD *)(v30 + 2 * i) = (unsigned __int16)((-4190208 - v32 + (v32 << 10)) / 0xDB00) << 6;
        }
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v33 = v8 & 1;
  unint64_t v34 = (v22 - v33) >> 1;
  if (v22 >> 1 < v34) {
    unint64_t v34 = v22 >> 1;
  }
  char v35 = v9;
  unint64_t v36 = v21 >> 1;
  uint64_t v37 = v9 & 1;
  if (v21 >> 1 >= (v21 - v37) >> 1) {
    unint64_t v36 = (v21 - v37) >> 1;
  }
  if (v8)
  {
    if (v35)
    {
      unsigned int v45 = *v14;
      unsigned int v46 = v14[1];
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        unsigned int v45 = 4096;
      }
      if (v46 >= 0xF000) {
        unsigned int v46 = 61440;
      }
      if (v46 <= 0x1000) {
        int v47 = 4096;
      }
      else {
        int v47 = v46;
      }
      uint64_t v38 = v14 + 2;
      *uint64_t v20 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v45 + (v45 << 10)) >> 13)) >> 32) << 6;
      v20[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v47 + (v47 << 10)) >> 13)) >> 32) << 6;
      __int16 v39 = v20 + 2;
      if (v36) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v38 = v14;
      __int16 v39 = v20;
      if (v36)
      {
LABEL_26:
        uint64_t v40 = -(uint64_t)v36;
        do
        {
          unsigned int v41 = *v38;
          unsigned int v42 = v38[1];
          if (v41 >= 0xF000) {
            unsigned int v41 = 61440;
          }
          if (v41 <= 0x1000) {
            unsigned int v41 = 4096;
          }
          if (v42 >= 0xF000) {
            unsigned int v42 = 61440;
          }
          if (v42 <= 0x1000) {
            unsigned int v42 = 4096;
          }
          v38 += 2;
          *__int16 v39 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v41 + (v41 << 10)) >> 13)) >> 32) << 6;
          v39[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v42 + (v42 << 10)) >> 13)) >> 32) << 6;
          v39 += 2;
          BOOL v43 = __CFADD__(v40++, 1);
        }
        while (!v43);
        uint64_t v44 = 2 * v36;
        goto LABEL_49;
      }
    }
    uint64_t v44 = 0;
LABEL_49:
    if ((v44 | (unint64_t)v37) < v21)
    {
      unsigned int v48 = *v38;
      unsigned int v49 = v38[1];
      if (v48 >= 0xF000) {
        unsigned int v48 = 61440;
      }
      if (v48 <= 0x1000) {
        unsigned int v48 = 4096;
      }
      if (v49 >= 0xF000) {
        unsigned int v49 = 61440;
      }
      if (v49 <= 0x1000) {
        unsigned int v49 = 4096;
      }
      *__int16 v39 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v48 + (v48 << 10)) >> 13)) >> 32) << 6;
      v39[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v49 + (v49 << 10)) >> 13)) >> 32) << 6;
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      BOOL v51 = v14;
      uint64_t v52 = v20;
      if (v35)
      {
        unsigned int v53 = *v14;
        unsigned int v54 = v14[1];
        if (v53 >= 0xF000) {
          unsigned int v53 = 61440;
        }
        if (v53 <= 0x1000) {
          unsigned int v53 = 4096;
        }
        if (v54 >= 0xF000) {
          unsigned int v54 = 61440;
        }
        if (v54 <= 0x1000) {
          int v55 = 4096;
        }
        else {
          int v55 = v54;
        }
        BOOL v51 = v14 + 2;
        int v56 = (613566757 * (unint64_t)((-4190208 - v53 + (v53 << 10)) >> 13)) >> 32 << 6;
        *uint64_t v20 = v56;
        int v57 = (613566757 * (unint64_t)((-4190208 - v55 + (v55 << 10)) >> 13)) >> 32 << 6;
        v20[1] = v57;
        int v58 = (_WORD *)((char *)v20 + v19);
        _WORD *v58 = v56;
        v58[1] = v57;
        uint64_t v52 = v20 + 2;
      }
      if (v36)
      {
        uint64_t v59 = -(uint64_t)v36;
        do
        {
          unsigned int v60 = *v51;
          unsigned int v61 = v51[1];
          if (v60 >= 0xF000) {
            unsigned int v60 = 61440;
          }
          if (v60 <= 0x1000) {
            unsigned int v60 = 4096;
          }
          if (v61 >= 0xF000) {
            unsigned int v61 = 61440;
          }
          if (v61 <= 0x1000) {
            unsigned int v61 = 4096;
          }
          int v62 = (613566757 * (unint64_t)((-4190208 - v60 + (v60 << 10)) >> 13)) >> 32 << 6;
          *uint64_t v52 = v62;
          int v63 = (613566757 * (unint64_t)((-4190208 - v61 + (v61 << 10)) >> 13)) >> 32 << 6;
          v52[1] = v63;
          v52[2] = v62;
          v52[3] = v63;
          __int16 v64 = (_WORD *)((char *)v52 + v19);
          *__int16 v64 = v62;
          v64[1] = v63;
          v51 += 2;
          v64[2] = v62;
          v64[3] = v63;
          v52 += 4;
          BOOL v43 = __CFADD__(v59++, 1);
        }
        while (!v43);
      }
      if ((v37 | (2 * v36)) < v21)
      {
        unsigned int v65 = *v51;
        unsigned int v66 = v51[1];
        if (v65 >= 0xF000) {
          unsigned int v65 = 61440;
        }
        if (v65 <= 0x1000) {
          unsigned int v65 = 4096;
        }
        if (v66 >= 0xF000) {
          unsigned int v66 = 61440;
        }
        if (v66 <= 0x1000) {
          unsigned int v66 = 4096;
        }
        int v67 = (613566757 * (unint64_t)((-4190208 - v65 + (v65 << 10)) >> 13)) >> 32 << 6;
        *uint64_t v52 = v67;
        int v68 = (613566757 * (unint64_t)((-4190208 - v66 + (v66 << 10)) >> 13)) >> 32 << 6;
        v52[1] = v68;
        __int16 v69 = (_WORD *)((char *)v52 + v19);
        *__int16 v69 = v67;
        v69[1] = v68;
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v70 = 2 * v34;
  }
  else
  {
    uint64_t v70 = 0;
  }
  if ((v70 | (unint64_t)v33) < v22)
  {
    if (v35)
    {
      unsigned int v71 = *v14;
      unsigned int v72 = v14[1];
      if (v71 >= 0xF000) {
        unsigned int v71 = 61440;
      }
      if (v71 <= 0x1000) {
        unsigned int v71 = 4096;
      }
      if (v72 >= 0xF000) {
        unsigned int v72 = 61440;
      }
      if (v72 <= 0x1000) {
        unsigned int v72 = 4096;
      }
      v14 += 2;
      *uint64_t v20 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v71 + (v71 << 10)) >> 13)) >> 32) << 6;
      v20[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v72 + (v72 << 10)) >> 13)) >> 32) << 6;
      v20 += 2;
    }
    if (v36)
    {
      uint64_t v73 = -(uint64_t)v36;
      do
      {
        unsigned int v74 = *v14;
        unsigned int v75 = v14[1];
        if (v74 >= 0xF000) {
          unsigned int v74 = 61440;
        }
        if (v74 <= 0x1000) {
          unsigned int v74 = 4096;
        }
        if (v75 >= 0xF000) {
          unsigned int v75 = 61440;
        }
        if (v75 <= 0x1000) {
          unsigned int v75 = 4096;
        }
        v14 += 2;
        *uint64_t v20 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v74 + (v74 << 10)) >> 13)) >> 32) << 6;
        v20[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v75 + (v75 << 10)) >> 13)) >> 32) << 6;
        v20 += 2;
        BOOL v43 = __CFADD__(v73++, 1);
      }
      while (!v43);
      v36 *= 2;
    }
    if ((v36 | v37) < v21)
    {
      unsigned int v76 = *v14;
      unsigned int v77 = v14[1];
      if (v76 >= 0xF000) {
        unsigned int v76 = 61440;
      }
      if (v76 <= 0x1000) {
        unsigned int v76 = 4096;
      }
      if (v77 >= 0xF000) {
        unsigned int v77 = 61440;
      }
      if (v77 <= 0x1000) {
        unsigned int v77 = 4096;
      }
      *uint64_t v20 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v76 + (v76 << 10)) >> 13)) >> 32) << 6;
      v20[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v77 + (v77 << 10)) >> 13)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (_WORD *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = v26;
    }
    uint64_t v29 = 2 * (v9 + v8) + v28;
    uint64_t v30 = *a8;
    uint64_t v31 = a8[2];
    uint64_t v32 = v27 + v29;
    uint64_t v33 = a7[2] + v31 * v19 + v20;
    uint64_t v34 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v33 + 2 * i) = -1;
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v26;
      v34 += v30;
      v33 += v31;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v36 = v11 & 1;
  if (v24 >> 1 >= (v24 - v36) >> 1) {
    unint64_t v37 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v37 = v24 >> 1;
  }
  char v38 = v8;
  unint64_t v39 = v23 >> 1;
  unint64_t v40 = (v23 - v9) >> 1;
  if (v39 >= v40) {
    unint64_t v39 = v40;
  }
  if (v11)
  {
    if (v38)
    {
      unsigned int v41 = v15 + 2;
      __int16 v43 = v15[1] & 0xFFC0;
      *unint64_t v22 = *v15 & 0xFFC0;
      v22[1] = v43;
      unsigned int v42 = v22 + 2;
      if (!v39)
      {
LABEL_28:
        uint64_t v15 = (_WORD *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v41 = v15;
      unsigned int v42 = v22;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v44 = -(uint64_t)v39;
    do
    {
      __int16 v45 = v41[1] & 0xFFC0;
      *unsigned int v42 = *v41 & 0xFFC0;
      v42[1] = v45;
      v41 += 2;
      v42 += 2;
      BOOL v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      unsigned int v48 = v15;
      unsigned int v49 = v22;
      if (v38)
      {
        unsigned int v48 = v15 + 2;
        __int16 v50 = v15[1] & 0xFFC0;
        *unint64_t v22 = *v15 & 0xFFC0;
        v22[1] = v50;
        unsigned int v49 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v51 = -(uint64_t)v39;
        do
        {
          __int16 v52 = *v48 & 0xFFC0;
          __int16 v53 = v48[1] & 0xFFC0;
          *unsigned int v49 = v52;
          v49[1] = v53;
          unsigned int v54 = (_WORD *)((char *)v49 + v21);
          *unsigned int v54 = v52;
          v54[1] = v53;
          v49 += 2;
          v48 += 2;
          BOOL v46 = __CFADD__(v51++, 1);
        }
        while (!v46);
      }
      uint64_t v15 = (_WORD *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v55 = 2 * v37;
  }
  else
  {
    uint64_t v55 = 0;
  }
  if ((v55 | (unint64_t)v36) < v24)
  {
    if (v38)
    {
      __int16 v56 = *v15;
      __int16 v57 = v15[1];
      v15 += 2;
      *unint64_t v22 = v56 & 0xFFC0;
      v22[1] = v57 & 0xFFC0;
      v22 += 2;
    }
    if (v39)
    {
      uint64_t v58 = -(uint64_t)v39;
      do
      {
        __int16 v59 = v15[1] & 0xFFC0;
        *unint64_t v22 = *v15 & 0xFFC0;
        v22[1] = v59;
        v15 += 2;
        v22 += 2;
        BOOL v46 = __CFADD__(v58++, 1);
      }
      while (!v46);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (_WORD *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + 2 * (v9 + v8) + v29;
    uint64_t v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1) {
    unint64_t v34 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v34 = v24 >> 1;
  }
  char v35 = v8;
  unint64_t v36 = v23 >> 1;
  unint64_t v37 = (v23 - v9) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v11)
  {
    if (v35)
    {
      char v38 = v15 + 2;
      __int16 v40 = v15[1] & 0xFFC0;
      *unint64_t v22 = *v15 & 0xFFC0;
      v22[1] = v40;
      unint64_t v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        uint64_t v15 = (_WORD *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      char v38 = v15;
      unint64_t v39 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      __int16 v42 = v38[1] & 0xFFC0;
      *unint64_t v39 = *v38 & 0xFFC0;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      __int16 v45 = v15;
      BOOL v46 = v22;
      if (v35)
      {
        __int16 v45 = v15 + 2;
        __int16 v47 = v15[1] & 0xFFC0;
        *unint64_t v22 = *v15 & 0xFFC0;
        v22[1] = v47;
        BOOL v46 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v48 = -(uint64_t)v36;
        do
        {
          __int16 v49 = *v45 & 0xFFC0;
          __int16 v50 = v45[1] & 0xFFC0;
          *BOOL v46 = v49;
          v46[1] = v50;
          uint64_t v51 = (_WORD *)((char *)v46 + v21);
          *uint64_t v51 = v49;
          v51[1] = v50;
          v46 += 2;
          v45 += 2;
          BOOL v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      uint64_t v15 = (_WORD *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v52 = 2 * v34;
  }
  else
  {
    uint64_t v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if (v35)
    {
      __int16 v53 = *v15;
      __int16 v54 = v15[1];
      v15 += 2;
      *unint64_t v22 = v53 & 0xFFC0;
      v22[1] = v54 & 0xFFC0;
      v22 += 2;
    }
    if (v36)
    {
      uint64_t v55 = -(uint64_t)v36;
      do
      {
        __int16 v56 = v15[1] & 0xFFC0;
        *unint64_t v22 = *v15 & 0xFFC0;
        v22[1] = v56;
        v15 += 2;
        v22 += 2;
        BOOL v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a8;
    uint64_t v30 = v27 + 2 * (v9 + v8) + v28;
    uint64_t v31 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          unsigned int v33 = *(unsigned __int16 *)(v30 + 2 * i);
          if (v33 >= 0xEB00) {
            unsigned int v33 = 60160;
          }
          if (v33 <= 0x1000) {
            unsigned int v33 = 4096;
          }
          *(_WORD *)(v31 + 2 * i) = (unsigned __int16)((-4190208 - v33 + (v33 << 10)) / 0xDB00) << 6;
        }
      }
      v30 += v26;
      v31 += v29;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v34 = v11 & 1;
  if (v24 >> 1 >= (v24 - v34) >> 1) {
    unint64_t v35 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v35 = v24 >> 1;
  }
  char v36 = v8;
  unint64_t v37 = v23 >> 1;
  if (v23 >> 1 >= (v23 - v9) >> 1) {
    unint64_t v37 = (v23 - v9) >> 1;
  }
  if (v11)
  {
    if (v36)
    {
      unsigned int v40 = *v15;
      if (v40 >= 0xF000) {
        unsigned int v40 = 61440;
      }
      if (v40 <= 0x1000) {
        int v41 = 4096;
      }
      else {
        int v41 = v40;
      }
      if (v15[1] >= 0xF000u) {
        unsigned int v42 = 61440;
      }
      else {
        unsigned int v42 = v15[1];
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      char v38 = v15 + 2;
      *unint64_t v22 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v41 + (v41 << 10)) >> 13)) >> 32) << 6;
      v22[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v43 + (v43 << 10)) >> 13)) >> 32) << 6;
      unint64_t v39 = v22 + 2;
      if (!v37) {
        goto LABEL_51;
      }
    }
    else
    {
      char v38 = v15;
      unint64_t v39 = v22;
      if (!v37)
      {
LABEL_51:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_52;
      }
    }
    uint64_t v44 = -(uint64_t)v37;
    do
    {
      unsigned int v45 = *v38;
      unsigned int v46 = v38[1];
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        unsigned int v45 = 4096;
      }
      if (v46 >= 0xF000) {
        unsigned int v46 = 61440;
      }
      if (v46 <= 0x1000) {
        unsigned int v46 = 4096;
      }
      *unint64_t v39 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v45 + (v45 << 10)) >> 13)) >> 32) << 6;
      v39[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v46 + (v46 << 10)) >> 13)) >> 32) << 6;
      v38 += 2;
      v39 += 2;
      BOOL v47 = __CFADD__(v44++, 1);
    }
    while (!v47);
    goto LABEL_51;
  }
LABEL_52:
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      __int16 v49 = v15;
      __int16 v50 = v22;
      if (v36)
      {
        unsigned int v51 = *v15;
        if (v51 >= 0xF000) {
          unsigned int v51 = 61440;
        }
        if (v51 <= 0x1000) {
          int v52 = 4096;
        }
        else {
          int v52 = v51;
        }
        if (v15[1] >= 0xF000u) {
          unsigned int v53 = 61440;
        }
        else {
          unsigned int v53 = v15[1];
        }
        if (v53 <= 0x1000) {
          int v54 = 4096;
        }
        else {
          int v54 = v53;
        }
        __int16 v49 = v15 + 2;
        *unint64_t v22 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v52 + (v52 << 10)) >> 13)) >> 32) << 6;
        v22[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v54 + (v54 << 10)) >> 13)) >> 32) << 6;
        __int16 v50 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v55 = -(uint64_t)v37;
        do
        {
          unsigned int v56 = *v49;
          unsigned int v57 = v49[1];
          if (v56 >= 0xF000) {
            unsigned int v56 = 61440;
          }
          if (v56 <= 0x1000) {
            unsigned int v56 = 4096;
          }
          if (v57 >= 0xF000) {
            unsigned int v57 = 61440;
          }
          if (v57 <= 0x1000) {
            unsigned int v57 = 4096;
          }
          int v58 = (613566757 * (unint64_t)((-4190208 - v56 + (v56 << 10)) >> 13)) >> 32 << 6;
          _WORD *v50 = v58;
          int v59 = (613566757 * (unint64_t)((-4190208 - v57 + (v57 << 10)) >> 13)) >> 32 << 6;
          v50[1] = v59;
          unsigned int v60 = (_WORD *)((char *)v50 + v21);
          *unsigned int v60 = v58;
          v60[1] = v59;
          v50 += 2;
          v49 += 2;
          BOOL v47 = __CFADD__(v55++, 1);
        }
        while (!v47);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v61 = 2 * v35;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | (unint64_t)v34) < v24)
  {
    if (v36)
    {
      unsigned int v62 = *v15;
      unsigned int v63 = v15[1];
      if (v62 >= 0xF000) {
        unsigned int v62 = 61440;
      }
      if (v62 <= 0x1000) {
        unsigned int v62 = 4096;
      }
      if (v63 >= 0xF000) {
        unsigned int v63 = 61440;
      }
      if (v63 <= 0x1000) {
        unsigned int v63 = 4096;
      }
      v15 += 2;
      *unint64_t v22 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v62 + (v62 << 10)) >> 13)) >> 32) << 6;
      v22[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v63 + (v63 << 10)) >> 13)) >> 32) << 6;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v64 = -(uint64_t)v37;
      do
      {
        unsigned int v65 = *v15;
        unsigned int v66 = v15[1];
        if (v65 >= 0xF000) {
          unsigned int v65 = 61440;
        }
        if (v65 <= 0x1000) {
          unsigned int v65 = 4096;
        }
        if (v66 >= 0xF000) {
          unsigned int v66 = 61440;
        }
        if (v66 <= 0x1000) {
          unsigned int v66 = 4096;
        }
        *unint64_t v22 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v65 + (v65 << 10)) >> 13)) >> 32) << 6;
        v22[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v66 + (v66 << 10)) >> 13)) >> 32) << 6;
        v15 += 2;
        v22 += 2;
        BOOL v47 = __CFADD__(v64++, 1);
      }
      while (!v47);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = 2 * v10;
  uint64_t v16 = a4[1];
  uint64_t v17 = (_WORD *)(a3[1] + v16 * ((v12 + v9) >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v20 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v21 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v22 = 2 * v18;
  uint64_t v23 = a8[1];
  unint64_t v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v25 = v11 - v10;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  unint64_t v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20) {
    unint64_t v27 = v21 - v20;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v15 + v32;
    uint64_t v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  unint64_t v36 = v27 >> 1;
  unint64_t v37 = v27 - v12;
  if (v36 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v36;
  }
  unint64_t v39 = v26 - (v8 & 1);
  if (v26 >> 1 >= v39 >> 1) {
    unint64_t v40 = v39 >> 1;
  }
  else {
    unint64_t v40 = v26 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      int v41 = v17 + 2;
      __int16 v43 = v17[1] & 0xFFC0;
      *unint64_t v24 = *v17 & 0xFFC0;
      v24[1] = v43;
      unsigned int v42 = v24 + 2;
      if (!v40)
      {
LABEL_28:
        uint64_t v17 = (_WORD *)((char *)v17 + v16);
        unint64_t v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      int v41 = v17;
      unsigned int v42 = v24;
      if (!v40) {
        goto LABEL_28;
      }
    }
    uint64_t v44 = -(uint64_t)v40;
    do
    {
      __int16 v45 = v41[1] & 0xFFC0;
      *unsigned int v42 = *v41 & 0xFFC0;
      v42[1] = v45;
      v41 += 2;
      v42 += 2;
      BOOL v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v38)
  {
    for (uint64_t j = 0; j != v38; ++j)
    {
      uint64_t v48 = v17;
      __int16 v49 = v24;
      if (v8)
      {
        uint64_t v48 = v17 + 2;
        __int16 v50 = v17[1] & 0xFFC0;
        *unint64_t v24 = *v17 & 0xFFC0;
        v24[1] = v50;
        __int16 v49 = v24 + 2;
      }
      if (v40)
      {
        uint64_t v51 = -(uint64_t)v40;
        do
        {
          __int16 v52 = v48[1] & 0xFFC0;
          *__int16 v49 = *v48 & 0xFFC0;
          v49[1] = v52;
          v48 += 2;
          v49 += 2;
          BOOL v46 = __CFADD__(v51++, 1);
        }
        while (!v46);
      }
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      unint64_t v24 = (_WORD *)((char *)v24 + v23);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = 2 * v10;
  uint64_t v16 = a4[1];
  uint64_t v17 = (unsigned __int16 *)(a3[1] + v16 * ((v12 + v8) >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v20 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v21 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v22 = 2 * v18;
  uint64_t v23 = a8[1];
  unint64_t v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v25 = v11 - v10;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  unint64_t v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20) {
    unint64_t v27 = v21 - v20;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v15 + v32;
    uint64_t v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(_WORD *)(v34 + 2 * i) = (unsigned __int16)((-4190208 - v36 + (v36 << 10)) / 0xDB00) << 6;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  unint64_t v37 = v27 >> 1;
  unint64_t v38 = v27 - v12;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  unint64_t v40 = v26 - (v9 & 1);
  if (v26 >> 1 >= v40 >> 1) {
    unint64_t v41 = v40 >> 1;
  }
  else {
    unint64_t v41 = v26 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v44 = *v17;
      if (v44 >= 0xF000) {
        unsigned int v44 = 61440;
      }
      if (v44 <= 0x1000) {
        int v45 = 4096;
      }
      else {
        int v45 = v44;
      }
      if (v17[1] >= 0xF000u) {
        unsigned int v46 = 61440;
      }
      else {
        unsigned int v46 = v17[1];
      }
      if (v46 <= 0x1000) {
        int v47 = 4096;
      }
      else {
        int v47 = v46;
      }
      unsigned int v42 = v17 + 2;
      *unint64_t v24 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v45 + (v45 << 10)) >> 13)) >> 32) << 6;
      v24[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v47 + (v47 << 10)) >> 13)) >> 32) << 6;
      __int16 v43 = v24 + 2;
      if (!v41) {
        goto LABEL_51;
      }
    }
    else
    {
      unsigned int v42 = v17;
      __int16 v43 = v24;
      if (!v41)
      {
LABEL_51:
        uint64_t v17 = (unsigned __int16 *)((char *)v17 + v16);
        unint64_t v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_52;
      }
    }
    uint64_t v48 = -(uint64_t)v41;
    do
    {
      unsigned int v49 = *v42;
      unsigned int v50 = v42[1];
      if (v49 >= 0xF000) {
        unsigned int v49 = 61440;
      }
      if (v49 <= 0x1000) {
        unsigned int v49 = 4096;
      }
      if (v50 >= 0xF000) {
        unsigned int v50 = 61440;
      }
      if (v50 <= 0x1000) {
        unsigned int v50 = 4096;
      }
      *__int16 v43 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v49 + (v49 << 10)) >> 13)) >> 32) << 6;
      v43[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v50 + (v50 << 10)) >> 13)) >> 32) << 6;
      v42 += 2;
      v43 += 2;
      BOOL v51 = __CFADD__(v48++, 1);
    }
    while (!v51);
    goto LABEL_51;
  }
LABEL_52:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      unsigned int v53 = v17;
      int v54 = v24;
      if (v9)
      {
        unsigned int v55 = *v17;
        if (v55 >= 0xF000) {
          unsigned int v55 = 61440;
        }
        if (v55 <= 0x1000) {
          int v56 = 4096;
        }
        else {
          int v56 = v55;
        }
        if (v17[1] >= 0xF000u) {
          unsigned int v57 = 61440;
        }
        else {
          unsigned int v57 = v17[1];
        }
        if (v57 <= 0x1000) {
          int v58 = 4096;
        }
        else {
          int v58 = v57;
        }
        unsigned int v53 = v17 + 2;
        *unint64_t v24 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v56 + (v56 << 10)) >> 13)) >> 32) << 6;
        v24[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v58 + (v58 << 10)) >> 13)) >> 32) << 6;
        int v54 = v24 + 2;
      }
      if (v41)
      {
        uint64_t v59 = -(uint64_t)v41;
        do
        {
          unsigned int v60 = *v53;
          unsigned int v61 = v53[1];
          if (v60 >= 0xF000) {
            unsigned int v60 = 61440;
          }
          if (v60 <= 0x1000) {
            unsigned int v60 = 4096;
          }
          if (v61 >= 0xF000) {
            unsigned int v61 = 61440;
          }
          if (v61 <= 0x1000) {
            unsigned int v61 = 4096;
          }
          *int v54 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v60 + (v60 << 10)) >> 13)) >> 32) << 6;
          v54[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v61 + (v61 << 10)) >> 13)) >> 32) << 6;
          v53 += 2;
          v54 += 2;
          BOOL v51 = __CFADD__(v59++, 1);
        }
        while (!v51);
      }
      uint64_t v17 = (unsigned __int16 *)((char *)v17 + v16);
      unint64_t v24 = (_WORD *)((char *)v24 + v23);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  unint64_t v10 = v8 & 0xFFFFFFFE;
  uint64_t v11 = a4[1];
  uint64_t v12 = a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v14 + 2 * v13);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  unint64_t v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15) {
    unint64_t v20 = v15;
  }
  if (v20)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a4;
    BOOL v23 = v10 >= v8;
    uint64_t v24 = *a8;
    uint64_t v25 = a8[2];
    uint64_t v26 = *a3 + *a4 * v10;
    if (v23) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + 2 * (a2[4] & 0xFFFFFFFELL) + v27;
    uint64_t v29 = a7[2] + v25 * v14 + v13;
    uint64_t v30 = *a7 + v24 * v14 + v13;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v29 + i) = -1;
          *(unsigned char *)(v30 + i) = *(unsigned char *)(v28 + 2 * i + 1);
        }
      }
      v28 += v22;
      v30 += v24;
      v29 += v25;
      ++v21;
    }
    while (v21 != v20);
    uint64_t v9 = a2[4];
    unint64_t v8 = a2[5];
  }
  uint64_t v32 = v8 & 1;
  unint64_t v33 = (v20 - v32) >> 1;
  if (v20 >> 1 < v33) {
    unint64_t v33 = v20 >> 1;
  }
  char v34 = v9;
  unint64_t v35 = v19 >> 1;
  uint64_t v36 = v9 & 1;
  if (v19 >> 1 >= (v19 - v36) >> 1) {
    unint64_t v35 = (v19 - v36) >> 1;
  }
  if (v8)
  {
    if (v34)
    {
      char v43 = *(unsigned char *)(v12 + 3);
      uint64_t v37 = v12 + 4;
      *uint64_t v18 = *(unsigned char *)(v12 + 1);
      v18[1] = v43;
      unint64_t v38 = v18 + 2;
      if (v35)
      {
LABEL_22:
        uint64_t v39 = -(uint64_t)v35;
        do
        {
          char v40 = *(unsigned char *)(v37 + 1);
          char v41 = *(unsigned char *)(v37 + 3);
          v37 += 4;
          unsigned char *v38 = v40;
          v38[1] = v41;
          v38 += 2;
          BOOL v23 = __CFADD__(v39++, 1);
        }
        while (!v23);
        uint64_t v42 = 2 * v35;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v37 = v12;
      unint64_t v38 = v18;
      if (v35) {
        goto LABEL_22;
      }
    }
    uint64_t v42 = 0;
LABEL_28:
    if ((v42 | (unint64_t)v36) < v19)
    {
      char v44 = *(unsigned char *)(v37 + 1);
      char v45 = *(unsigned char *)(v37 + 3);
      unsigned char *v38 = v44;
      v38[1] = v45;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v33)
  {
    for (uint64_t j = 0; j != v33; ++j)
    {
      uint64_t v47 = v12;
      uint64_t v48 = v18;
      if (v34)
      {
        char v49 = *(unsigned char *)(v12 + 1);
        char v50 = *(unsigned char *)(v12 + 3);
        uint64_t v47 = v12 + 4;
        *uint64_t v18 = v49;
        v18[1] = v50;
        BOOL v51 = &v18[v17];
        *BOOL v51 = v49;
        v51[1] = v50;
        uint64_t v48 = v18 + 2;
      }
      if (v35)
      {
        uint64_t v52 = -(uint64_t)v35;
        do
        {
          char v53 = *(unsigned char *)(v47 + 1);
          char v54 = *(unsigned char *)(v47 + 3);
          v47 += 4;
          *uint64_t v48 = v53;
          v48[1] = v54;
          v48[2] = v53;
          v48[3] = v54;
          unsigned int v55 = &v48[v17 + 1];
          *(v55 - 1) = v53;
          *unsigned int v55 = v54;
          v55[1] = v53;
          v55[2] = v54;
          v48 += 4;
          BOOL v23 = __CFADD__(v52++, 1);
        }
        while (!v23);
      }
      if ((v36 | (2 * v35)) < v19)
      {
        char v56 = *(unsigned char *)(v47 + 1);
        char v57 = *(unsigned char *)(v47 + 3);
        *uint64_t v48 = v56;
        v48[1] = v57;
        int v58 = &v48[v17];
        unsigned char *v58 = v56;
        v58[1] = v57;
      }
      v12 += v11;
      v18 += 2 * v17;
    }
    uint64_t v59 = 2 * v33;
  }
  else
  {
    uint64_t v59 = 0;
  }
  if ((v59 | (unint64_t)v32) < v20)
  {
    if (v34)
    {
      char v60 = *(unsigned char *)(v12 + 1);
      char v61 = *(unsigned char *)(v12 + 3);
      v12 += 4;
      *uint64_t v18 = v60;
      v18[1] = v61;
      v18 += 2;
    }
    if (v35)
    {
      uint64_t v62 = -(uint64_t)v35;
      do
      {
        char v63 = *(unsigned char *)(v12 + 1);
        char v64 = *(unsigned char *)(v12 + 3);
        v12 += 4;
        *uint64_t v18 = v63;
        v18[1] = v64;
        v18 += 2;
        BOOL v23 = __CFADD__(v62++, 1);
      }
      while (!v23);
      uint64_t v65 = 2 * v35;
    }
    else
    {
      uint64_t v65 = 0;
    }
    if ((v65 | (unint64_t)v36) < v19)
    {
      char v66 = *(unsigned char *)(v12 + 1);
      char v67 = *(unsigned char *)(v12 + 3);
      *uint64_t v18 = v66;
      v18[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  unint64_t v10 = v8 & 0xFFFFFFFE;
  uint64_t v11 = a4[1];
  uint64_t v12 = a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v14 + 2 * v13);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  unint64_t v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15) {
    unint64_t v20 = v15;
  }
  if (v20)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = *a3 + *a4 * v10;
    if (v10 >= v8) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = *a4;
    }
    uint64_t v26 = v24 + 2 * (a2[4] & 0xFFFFFFFELL) + v25;
    uint64_t v27 = *a7 + v23 * v14 + v13;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
          *(unsigned char *)(v27 + i) = *(unsigned char *)(v26 + 2 * i + 1);
      }
      v26 += v22;
      v27 += v23;
      ++v21;
    }
    while (v21 != v20);
    uint64_t v9 = a2[4];
    unint64_t v8 = a2[5];
  }
  uint64_t v29 = v8 & 1;
  unint64_t v30 = (v20 - v29) >> 1;
  if (v20 >> 1 < v30) {
    unint64_t v30 = v20 >> 1;
  }
  char v31 = v9;
  unint64_t v32 = v19 >> 1;
  uint64_t v33 = v9 & 1;
  if (v19 >> 1 >= (v19 - v33) >> 1) {
    unint64_t v32 = (v19 - v33) >> 1;
  }
  if (v8)
  {
    if (v31)
    {
      char v41 = *(unsigned char *)(v12 + 3);
      uint64_t v34 = v12 + 4;
      *uint64_t v18 = *(unsigned char *)(v12 + 1);
      v18[1] = v41;
      unint64_t v35 = v18 + 2;
      if (v32)
      {
LABEL_22:
        uint64_t v36 = -(uint64_t)v32;
        do
        {
          char v37 = *(unsigned char *)(v34 + 1);
          char v38 = *(unsigned char *)(v34 + 3);
          v34 += 4;
          *unint64_t v35 = v37;
          v35[1] = v38;
          v35 += 2;
          BOOL v39 = __CFADD__(v36++, 1);
        }
        while (!v39);
        uint64_t v40 = 2 * v32;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v34 = v12;
      unint64_t v35 = v18;
      if (v32) {
        goto LABEL_22;
      }
    }
    uint64_t v40 = 0;
LABEL_28:
    if ((v40 | (unint64_t)v33) < v19)
    {
      char v42 = *(unsigned char *)(v34 + 1);
      char v43 = *(unsigned char *)(v34 + 3);
      *unint64_t v35 = v42;
      v35[1] = v43;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v30)
  {
    for (uint64_t j = 0; j != v30; ++j)
    {
      uint64_t v45 = v12;
      unsigned int v46 = v18;
      if (v31)
      {
        char v47 = *(unsigned char *)(v12 + 1);
        char v48 = *(unsigned char *)(v12 + 3);
        uint64_t v45 = v12 + 4;
        *uint64_t v18 = v47;
        v18[1] = v48;
        char v49 = &v18[v17];
        *char v49 = v47;
        v49[1] = v48;
        unsigned int v46 = v18 + 2;
      }
      if (v32)
      {
        uint64_t v50 = -(uint64_t)v32;
        do
        {
          char v51 = *(unsigned char *)(v45 + 1);
          char v52 = *(unsigned char *)(v45 + 3);
          v45 += 4;
          *unsigned int v46 = v51;
          v46[1] = v52;
          v46[2] = v51;
          v46[3] = v52;
          char v53 = &v46[v17 + 1];
          *(v53 - 1) = v51;
          *char v53 = v52;
          v53[1] = v51;
          v53[2] = v52;
          v46 += 4;
          BOOL v39 = __CFADD__(v50++, 1);
        }
        while (!v39);
      }
      if ((v33 | (2 * v32)) < v19)
      {
        char v54 = *(unsigned char *)(v45 + 1);
        char v55 = *(unsigned char *)(v45 + 3);
        *unsigned int v46 = v54;
        v46[1] = v55;
        char v56 = &v46[v17];
        *char v56 = v54;
        v56[1] = v55;
      }
      v12 += v11;
      v18 += 2 * v17;
    }
    uint64_t v57 = 2 * v30;
  }
  else
  {
    uint64_t v57 = 0;
  }
  if ((v57 | (unint64_t)v29) < v20)
  {
    if (v31)
    {
      char v58 = *(unsigned char *)(v12 + 1);
      char v59 = *(unsigned char *)(v12 + 3);
      v12 += 4;
      *uint64_t v18 = v58;
      v18[1] = v59;
      v18 += 2;
    }
    if (v32)
    {
      uint64_t v60 = -(uint64_t)v32;
      do
      {
        char v61 = *(unsigned char *)(v12 + 1);
        char v62 = *(unsigned char *)(v12 + 3);
        v12 += 4;
        *uint64_t v18 = v61;
        v18[1] = v62;
        v18 += 2;
        BOOL v39 = __CFADD__(v60++, 1);
      }
      while (!v39);
      uint64_t v63 = 2 * v32;
    }
    else
    {
      uint64_t v63 = 0;
    }
    if ((v63 | (unint64_t)v33) < v19)
    {
      char v64 = *(unsigned char *)(v12 + 1);
      char v65 = *(unsigned char *)(v12 + 3);
      *uint64_t v18 = v64;
      v18[1] = v65;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  unint64_t v10 = v8 & 0xFFFFFFFE;
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v14 + 2 * v13);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  unint64_t v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15) {
    unint64_t v20 = v15;
  }
  if (v20)
  {
    uint64_t v21 = 0;
    BOOL v22 = v10 >= v8;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a3 + *a4 * v10;
    if (v22) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = v25 + 2 * (a2[4] & 0xFFFFFFFELL) + v26;
    uint64_t v28 = *a7 + v24 * v14 + v13;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v27 + 2 * i);
          if (v30 >= 0xEB00) {
            unsigned int v30 = 60160;
          }
          if (v30 <= 0x1000) {
            unsigned int v30 = 4096;
          }
          *(unsigned char *)(v28 + i) = (-1044480 - v30 + (v30 << 8)) / 0xDB00;
        }
      }
      v27 += v23;
      v28 += v24;
      ++v21;
    }
    while (v21 != v20);
    uint64_t v9 = a2[4];
    unint64_t v8 = a2[5];
  }
  uint64_t v31 = v8 & 1;
  unint64_t v32 = (v20 - v31) >> 1;
  if (v20 >> 1 < v32) {
    unint64_t v32 = v20 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v19 >> 1;
  uint64_t v35 = v9 & 1;
  if (v19 >> 1 >= (v19 - v35) >> 1) {
    unint64_t v34 = (v19 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      unsigned int v42 = *v12;
      unsigned int v43 = v12[1];
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        unsigned int v42 = 4096;
      }
      if (v43 >= 0xF000) {
        unsigned int v43 = 61440;
      }
      if (v43 <= 0x1000) {
        int v44 = 4096;
      }
      else {
        int v44 = v43;
      }
      uint64_t v36 = v12 + 2;
      *uint64_t v18 = (613566757 * (unint64_t)((-1044480 - v42 + (v42 << 8)) >> 13)) >> 32;
      v18[1] = (613566757 * (unint64_t)((-1044480 - v44 + (v44 << 8)) >> 13)) >> 32;
      char v37 = v18 + 2;
      if (v34) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v36 = v12;
      char v37 = v18;
      if (v34)
      {
LABEL_26:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          unsigned int v39 = *v36;
          unsigned int v40 = v36[1];
          if (v39 >= 0xF000) {
            unsigned int v39 = 61440;
          }
          if (v39 <= 0x1000) {
            unsigned int v39 = 4096;
          }
          if (v40 >= 0xF000) {
            unsigned int v40 = 61440;
          }
          if (v40 <= 0x1000) {
            unsigned int v40 = 4096;
          }
          v36 += 2;
          *char v37 = (613566757 * (unint64_t)((-1044480 - v39 + (v39 << 8)) >> 13)) >> 32;
          v37[1] = (613566757 * (unint64_t)((-1044480 - v40 + (v40 << 8)) >> 13)) >> 32;
          v37 += 2;
          BOOL v22 = __CFADD__(v38++, 1);
        }
        while (!v22);
        uint64_t v41 = 2 * v34;
        goto LABEL_49;
      }
    }
    uint64_t v41 = 0;
LABEL_49:
    if ((v41 | (unint64_t)v35) < v19)
    {
      unsigned int v45 = *v36;
      unsigned int v46 = v36[1];
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        unsigned int v45 = 4096;
      }
      if (v46 >= 0xF000) {
        unsigned int v46 = 61440;
      }
      if (v46 <= 0x1000) {
        unsigned int v46 = 4096;
      }
      *char v37 = (613566757 * (unint64_t)((-1044480 - v45 + (v45 << 8)) >> 13)) >> 32;
      v37[1] = (613566757 * (unint64_t)((-1044480 - v46 + (v46 << 8)) >> 13)) >> 32;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      char v48 = v12;
      char v49 = v18;
      if (v33)
      {
        unsigned int v50 = *v12;
        unsigned int v51 = v12[1];
        if (v50 >= 0xF000) {
          unsigned int v50 = 61440;
        }
        if (v50 <= 0x1000) {
          unsigned int v50 = 4096;
        }
        if (v51 >= 0xF000) {
          unsigned int v51 = 61440;
        }
        if (v51 <= 0x1000) {
          int v52 = 4096;
        }
        else {
          int v52 = v51;
        }
        char v48 = v12 + 2;
        unint64_t v53 = (613566757 * (unint64_t)((-1044480 - v50 + (v50 << 8)) >> 13)) >> 32;
        unint64_t v54 = (613566757 * (unint64_t)((-1044480 - v52 + (v52 << 8)) >> 13)) >> 32;
        *uint64_t v18 = v53;
        v18[1] = v54;
        char v55 = &v18[v17];
        *char v55 = v53;
        v55[1] = v54;
        char v49 = v18 + 2;
      }
      if (v34)
      {
        uint64_t v56 = -(uint64_t)v34;
        do
        {
          unsigned int v57 = *v48;
          unsigned int v58 = v48[1];
          if (v57 >= 0xF000) {
            unsigned int v57 = 61440;
          }
          if (v57 <= 0x1000) {
            unsigned int v57 = 4096;
          }
          if (v58 >= 0xF000) {
            unsigned int v58 = 61440;
          }
          if (v58 <= 0x1000) {
            unsigned int v58 = 4096;
          }
          unint64_t v59 = (613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32;
          *char v49 = v59;
          unint64_t v60 = (613566757 * (unint64_t)((-1044480 - v58 + (v58 << 8)) >> 13)) >> 32;
          v49[1] = v60;
          v49[2] = v59;
          v49[3] = v60;
          char v61 = &v49[v17 + 1];
          *(v61 - 1) = v59;
          *char v61 = v60;
          v48 += 2;
          v61[1] = v59;
          v61[2] = v60;
          v49 += 4;
          BOOL v22 = __CFADD__(v56++, 1);
        }
        while (!v22);
      }
      if ((v35 | (2 * v34)) < v19)
      {
        unsigned int v62 = *v48;
        unsigned int v63 = v48[1];
        if (v62 >= 0xF000) {
          unsigned int v62 = 61440;
        }
        if (v62 <= 0x1000) {
          unsigned int v62 = 4096;
        }
        if (v63 >= 0xF000) {
          unsigned int v63 = 61440;
        }
        if (v63 <= 0x1000) {
          unsigned int v63 = 4096;
        }
        unint64_t v64 = (613566757 * (unint64_t)((-1044480 - v62 + (v62 << 8)) >> 13)) >> 32;
        unint64_t v65 = (613566757 * (unint64_t)((-1044480 - v63 + (v63 << 8)) >> 13)) >> 32;
        *char v49 = v64;
        v49[1] = v65;
        char v66 = &v49[v17];
        *char v66 = v64;
        v66[1] = v65;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += 2 * v17;
    }
    uint64_t v67 = 2 * v32;
  }
  else
  {
    uint64_t v67 = 0;
  }
  if ((v67 | (unint64_t)v31) < v20)
  {
    if (v33)
    {
      unsigned int v68 = *v12;
      unsigned int v69 = v12[1];
      if (v68 >= 0xF000) {
        unsigned int v68 = 61440;
      }
      if (v68 <= 0x1000) {
        unsigned int v68 = 4096;
      }
      if (v69 >= 0xF000) {
        unsigned int v69 = 61440;
      }
      if (v69 <= 0x1000) {
        unsigned int v69 = 4096;
      }
      v12 += 2;
      *uint64_t v18 = (613566757 * (unint64_t)((-1044480 - v68 + (v68 << 8)) >> 13)) >> 32;
      v18[1] = (613566757 * (unint64_t)((-1044480 - v69 + (v69 << 8)) >> 13)) >> 32;
      v18 += 2;
    }
    if (v34)
    {
      uint64_t v70 = -(uint64_t)v34;
      do
      {
        unsigned int v71 = *v12;
        unsigned int v72 = v12[1];
        if (v71 >= 0xF000) {
          unsigned int v71 = 61440;
        }
        if (v71 <= 0x1000) {
          unsigned int v71 = 4096;
        }
        if (v72 >= 0xF000) {
          unsigned int v72 = 61440;
        }
        if (v72 <= 0x1000) {
          unsigned int v72 = 4096;
        }
        v12 += 2;
        *uint64_t v18 = (613566757 * (unint64_t)((-1044480 - v71 + (v71 << 8)) >> 13)) >> 32;
        v18[1] = (613566757 * (unint64_t)((-1044480 - v72 + (v72 << 8)) >> 13)) >> 32;
        v18 += 2;
        BOOL v22 = __CFADD__(v70++, 1);
      }
      while (!v22);
      uint64_t v73 = 2 * v34;
    }
    else
    {
      uint64_t v73 = 0;
    }
    if ((v73 | (unint64_t)v35) < v19)
    {
      unsigned int v74 = *v12;
      unsigned int v75 = v12[1];
      if (v74 >= 0xF000) {
        unsigned int v74 = 61440;
      }
      if (v74 <= 0x1000) {
        unsigned int v74 = 4096;
      }
      if (v75 >= 0xF000) {
        unsigned int v75 = 61440;
      }
      if (v75 <= 0x1000) {
        unsigned int v75 = 4096;
      }
      *uint64_t v18 = (613566757 * (unint64_t)((-1044480 - v74 + (v74 << 8)) >> 13)) >> 32;
      v18[1] = (613566757 * (unint64_t)((-1044480 - v75 + (v75 << 8)) >> 13)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  unint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = v10 & 0xFFFFFFFE;
  uint64_t v12 = 2 * (v9 + v8);
  uint64_t v13 = a4[1];
  unint64_t v14 = a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  unint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16) {
    unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8);
  }
  unint64_t v22 = *(void *)(a2 + 24) + v10 - v11 + ((*(void *)(a2 + 24) + v10) & 1);
  if (v22 >= v15) {
    unint64_t v22 = v15;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    BOOL v25 = v11 >= v10;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = *a3 + *a4 * v11;
    if (v25) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + v12 + v29;
    uint64_t v31 = a7[2] + v27 * v18 + v16;
    uint64_t v32 = *a7 + v26 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v31 + i) = -1;
          *(unsigned char *)(v32 + i) = *(unsigned char *)(v30 + 2 * i + 1);
        }
      }
      v30 += v24;
      v32 += v26;
      v31 += v27;
      ++v23;
    }
    while (v23 != v22);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
  }
  unint64_t v34 = v22 >> 1;
  uint64_t v35 = v10 & 1;
  if (v22 >> 1 >= (v22 - v35) >> 1) {
    unint64_t v34 = (v22 - (v10 & 1)) >> 1;
  }
  unint64_t v36 = v21 >> 1;
  unint64_t v37 = v21 - v9;
  if (v36 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v36;
  }
  if (v10)
  {
    if (v8)
    {
      char v41 = *(unsigned char *)(v14 + 3);
      unint64_t v39 = v14 + 4;
      *unint64_t v20 = *(unsigned char *)(v14 + 1);
      v20[1] = v41;
      unsigned int v40 = v20 + 2;
      if (!v38)
      {
LABEL_28:
        v14 += v13;
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v39 = v14;
      unsigned int v40 = v20;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v42 = -(uint64_t)v38;
    do
    {
      char v43 = *(unsigned char *)(v39 + 3);
      *unsigned int v40 = *(unsigned char *)(v39 + 1);
      v40[1] = v43;
      v40 += 2;
      v39 += 4;
      BOOL v25 = __CFADD__(v42++, 1);
    }
    while (!v25);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      unint64_t v45 = v14;
      unsigned int v46 = v20;
      if (v8)
      {
        char v47 = *(unsigned char *)(v14 + 3);
        unint64_t v45 = v14 + 4;
        *unint64_t v20 = *(unsigned char *)(v14 + 1);
        v20[1] = v47;
        unsigned int v46 = v20 + 2;
      }
      if (v38)
      {
        uint64_t v48 = -(uint64_t)v38;
        do
        {
          char v49 = *(unsigned char *)(v45 + 1);
          char v50 = *(unsigned char *)(v45 + 3);
          *unsigned int v46 = v49;
          v46[1] = v50;
          unsigned int v51 = &v46[v19];
          *unsigned int v51 = v49;
          v51[1] = v50;
          v46 += 2;
          v45 += 4;
          BOOL v25 = __CFADD__(v48++, 1);
        }
        while (!v25);
      }
      v14 += v13;
      v20 += 2 * v19;
    }
    uint64_t v52 = 2 * v34;
  }
  else
  {
    uint64_t v52 = 0;
  }
  if ((v52 | (unint64_t)v35) < v22)
  {
    if (v8)
    {
      char v53 = *(unsigned char *)(v14 + 1);
      char v54 = *(unsigned char *)(v14 + 3);
      v14 += 4;
      *unint64_t v20 = v53;
      v20[1] = v54;
      v20 += 2;
    }
    if (v38)
    {
      uint64_t v55 = -(uint64_t)v38;
      do
      {
        char v56 = *(unsigned char *)(v14 + 3);
        *unint64_t v20 = *(unsigned char *)(v14 + 1);
        v20[1] = v56;
        v20 += 2;
        v14 += 4;
        BOOL v25 = __CFADD__(v55++, 1);
      }
      while (!v25);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  unint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = v10 & 0xFFFFFFFE;
  uint64_t v12 = 2 * (v9 + v8);
  uint64_t v13 = a4[1];
  unint64_t v14 = a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  unint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16) {
    unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8);
  }
  unint64_t v22 = *(void *)(a2 + 24) + v10 - v11 + ((*(void *)(a2 + 24) + v10) & 1);
  if (v22 >= v15) {
    unint64_t v22 = v15;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    if (v11 >= v10) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = *a3 + *a4 * v11 + v12 + v26;
    uint64_t v28 = *a7 + v25 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v28 + i) = *(unsigned char *)(v27 + 2 * i + 1);
      }
      v27 += v24;
      v28 += v25;
      ++v23;
    }
    while (v23 != v22);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
  }
  unint64_t v30 = v22 >> 1;
  uint64_t v31 = v10 & 1;
  if (v22 >> 1 >= (v22 - v31) >> 1) {
    unint64_t v30 = (v22 - (v10 & 1)) >> 1;
  }
  unint64_t v32 = v21 >> 1;
  unint64_t v33 = v21 - v9;
  if (v32 >= v33 >> 1) {
    unint64_t v34 = v33 >> 1;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v10)
  {
    if (v8)
    {
      char v37 = *(unsigned char *)(v14 + 3);
      unint64_t v35 = v14 + 4;
      *unint64_t v20 = *(unsigned char *)(v14 + 1);
      v20[1] = v37;
      unint64_t v36 = v20 + 2;
      if (!v34)
      {
LABEL_28:
        v14 += v13;
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v35 = v14;
      unint64_t v36 = v20;
      if (!v34) {
        goto LABEL_28;
      }
    }
    uint64_t v38 = -(uint64_t)v34;
    do
    {
      char v39 = *(unsigned char *)(v35 + 3);
      *unint64_t v36 = *(unsigned char *)(v35 + 1);
      v36[1] = v39;
      v36 += 2;
      v35 += 4;
      BOOL v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_28;
  }
LABEL_29:
  if (v30)
  {
    for (uint64_t j = 0; j != v30; ++j)
    {
      unint64_t v42 = v14;
      char v43 = v20;
      if (v8)
      {
        char v44 = *(unsigned char *)(v14 + 3);
        unint64_t v42 = v14 + 4;
        *unint64_t v20 = *(unsigned char *)(v14 + 1);
        v20[1] = v44;
        char v43 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v45 = -(uint64_t)v34;
        do
        {
          char v46 = *(unsigned char *)(v42 + 1);
          char v47 = *(unsigned char *)(v42 + 3);
          *char v43 = v46;
          v43[1] = v47;
          uint64_t v48 = &v43[v19];
          *uint64_t v48 = v46;
          v48[1] = v47;
          v43 += 2;
          v42 += 4;
          BOOL v40 = __CFADD__(v45++, 1);
        }
        while (!v40);
      }
      v14 += v13;
      v20 += 2 * v19;
    }
    uint64_t v49 = 2 * v30;
  }
  else
  {
    uint64_t v49 = 0;
  }
  if ((v49 | (unint64_t)v31) < v22)
  {
    if (v8)
    {
      char v50 = *(unsigned char *)(v14 + 1);
      char v51 = *(unsigned char *)(v14 + 3);
      v14 += 4;
      *unint64_t v20 = v50;
      v20[1] = v51;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v52 = -(uint64_t)v34;
      do
      {
        char v53 = *(unsigned char *)(v14 + 3);
        *unint64_t v20 = *(unsigned char *)(v14 + 1);
        v20[1] = v53;
        v20 += 2;
        v14 += 4;
        BOOL v40 = __CFADD__(v52++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  unint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = v10 & 0xFFFFFFFE;
  uint64_t v12 = 2 * (v9 + v8);
  uint64_t v13 = a4[1];
  unint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  unint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16) {
    unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8);
  }
  unint64_t v22 = *(void *)(a2 + 24) + v10 - v11 + ((*(void *)(a2 + 24) + v10) & 1);
  if (v22 >= v15) {
    unint64_t v22 = v15;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    BOOL v24 = v11 >= v10;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a3 + *a4 * v11;
    if (v24) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = v27 + v12 + v28;
    uint64_t v30 = *a7 + v26 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v32 = *(unsigned __int16 *)(v29 + 2 * i);
          if (v32 >= 0xEB00) {
            unsigned int v32 = 60160;
          }
          if (v32 <= 0x1000) {
            unsigned int v32 = 4096;
          }
          *(unsigned char *)(v30 + i) = (-1044480 - v32 + (v32 << 8)) / 0xDB00;
        }
      }
      v29 += v25;
      v30 += v26;
      ++v23;
    }
    while (v23 != v22);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
  }
  unint64_t v33 = v22 >> 1;
  uint64_t v34 = v10 & 1;
  if (v22 >> 1 >= (v22 - v34) >> 1) {
    unint64_t v33 = (v22 - (v10 & 1)) >> 1;
  }
  unint64_t v35 = v21 >> 1;
  unint64_t v36 = v21 - v9;
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  if (v10)
  {
    if (v8)
    {
      unsigned int v40 = *v14;
      if (v40 >= 0xF000) {
        unsigned int v40 = 61440;
      }
      if (v40 <= 0x1000) {
        int v41 = 4096;
      }
      else {
        int v41 = v40;
      }
      if (v14[1] >= 0xF000u) {
        unsigned int v42 = 61440;
      }
      else {
        unsigned int v42 = v14[1];
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      uint64_t v38 = v14 + 2;
      *unint64_t v20 = (613566757 * (unint64_t)((-1044480 - v41 + (v41 << 8)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-1044480 - v43 + (v43 << 8)) >> 13)) >> 32;
      char v39 = v20 + 2;
      if (!v37) {
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v38 = v14;
      char v39 = v20;
      if (!v37)
      {
LABEL_51:
        unint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_52;
      }
    }
    uint64_t v44 = -(uint64_t)v37;
    do
    {
      unsigned int v45 = *v38;
      unsigned int v46 = v38[1];
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        unsigned int v45 = 4096;
      }
      if (v46 >= 0xF000) {
        unsigned int v46 = 61440;
      }
      if (v46 <= 0x1000) {
        unsigned int v46 = 4096;
      }
      *char v39 = (613566757 * (unint64_t)((-1044480 - v45 + (v45 << 8)) >> 13)) >> 32;
      v39[1] = (613566757 * (unint64_t)((-1044480 - v46 + (v46 << 8)) >> 13)) >> 32;
      v39 += 2;
      v38 += 2;
      BOOL v24 = __CFADD__(v44++, 1);
    }
    while (!v24);
    goto LABEL_51;
  }
LABEL_52:
  if (v33)
  {
    for (uint64_t j = 0; j != v33; ++j)
    {
      uint64_t v48 = v14;
      uint64_t v49 = v20;
      if (v8)
      {
        unsigned int v50 = *v14;
        if (v50 >= 0xF000) {
          unsigned int v50 = 61440;
        }
        if (v50 <= 0x1000) {
          int v51 = 4096;
        }
        else {
          int v51 = v50;
        }
        if (v14[1] >= 0xF000u) {
          unsigned int v52 = 61440;
        }
        else {
          unsigned int v52 = v14[1];
        }
        if (v52 <= 0x1000) {
          int v53 = 4096;
        }
        else {
          int v53 = v52;
        }
        uint64_t v48 = v14 + 2;
        *unint64_t v20 = (613566757 * (unint64_t)((-1044480 - v51 + (v51 << 8)) >> 13)) >> 32;
        v20[1] = (613566757 * (unint64_t)((-1044480 - v53 + (v53 << 8)) >> 13)) >> 32;
        uint64_t v49 = v20 + 2;
      }
      if (v37)
      {
        uint64_t v54 = -(uint64_t)v37;
        do
        {
          unsigned int v55 = *v48;
          unsigned int v56 = v48[1];
          if (v55 >= 0xF000) {
            unsigned int v55 = 61440;
          }
          if (v55 <= 0x1000) {
            unsigned int v55 = 4096;
          }
          if (v56 >= 0xF000) {
            unsigned int v56 = 61440;
          }
          if (v56 <= 0x1000) {
            unsigned int v56 = 4096;
          }
          unint64_t v57 = (613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32;
          unint64_t v58 = (613566757 * (unint64_t)((-1044480 - v56 + (v56 << 8)) >> 13)) >> 32;
          *uint64_t v49 = v57;
          v49[1] = v58;
          unint64_t v59 = &v49[v19];
          *unint64_t v59 = v57;
          v59[1] = v58;
          v49 += 2;
          v48 += 2;
          BOOL v24 = __CFADD__(v54++, 1);
        }
        while (!v24);
      }
      unint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += 2 * v19;
    }
    uint64_t v60 = 2 * v33;
  }
  else
  {
    uint64_t v60 = 0;
  }
  if ((v60 | (unint64_t)v34) < v22)
  {
    if (v8)
    {
      unsigned int v61 = *v14;
      unsigned int v62 = v14[1];
      if (v61 >= 0xF000) {
        unsigned int v61 = 61440;
      }
      if (v61 <= 0x1000) {
        unsigned int v61 = 4096;
      }
      if (v62 >= 0xF000) {
        unsigned int v62 = 61440;
      }
      if (v62 <= 0x1000) {
        unsigned int v62 = 4096;
      }
      v14 += 2;
      *unint64_t v20 = (613566757 * (unint64_t)((-1044480 - v61 + (v61 << 8)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-1044480 - v62 + (v62 << 8)) >> 13)) >> 32;
      v20 += 2;
    }
    if (v37)
    {
      uint64_t v63 = -(uint64_t)v37;
      do
      {
        unsigned int v64 = *v14;
        unsigned int v65 = v14[1];
        if (v64 >= 0xF000) {
          unsigned int v64 = 61440;
        }
        if (v64 <= 0x1000) {
          unsigned int v64 = 4096;
        }
        if (v65 >= 0xF000) {
          unsigned int v65 = 61440;
        }
        if (v65 <= 0x1000) {
          unsigned int v65 = 4096;
        }
        *unint64_t v20 = (613566757 * (unint64_t)((-1044480 - v64 + (v64 << 8)) >> 13)) >> 32;
        v20[1] = (613566757 * (unint64_t)((-1044480 - v65 + (v65 << 8)) >> 13)) >> 32;
        v20 += 2;
        v14 += 2;
        BOOL v24 = __CFADD__(v63++, 1);
      }
      while (!v24);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  unint64_t v16 = a3[1] + v15 * ((v11 + v9) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  }
  unint64_t v24 = v13 - v12;
  unint64_t v25 = v20 - v19;
  if (v13 - v12 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    BOOL v28 = v12 >= v9;
    uint64_t v29 = *a8;
    uint64_t v30 = a8[2];
    uint64_t v31 = *a3 + *a4 * v12;
    if (v28) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v31 + v14 + v32;
    uint64_t v34 = a7[2] + v30 * v19 + v17;
    uint64_t v35 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(unsigned char *)(v34 + i) = -1;
          *(unsigned char *)(v35 + i) = *(unsigned char *)(v33 + 2 * i + 1);
        }
      }
      v33 += v27;
      v35 += v29;
      v34 += v30;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  unint64_t v37 = v24 >> 1;
  unint64_t v38 = v24 - v11;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  unint64_t v40 = v23 >> 1;
  unint64_t v41 = v23 - v10;
  if (v40 >= v41 >> 1) {
    unint64_t v42 = v41 >> 1;
  }
  else {
    unint64_t v42 = v40;
  }
  if (v11)
  {
    if (v8)
    {
      char v45 = *(unsigned char *)(v16 + 3);
      unint64_t v43 = v16 + 4;
      *unint64_t v22 = *(unsigned char *)(v16 + 1);
      v22[1] = v45;
      uint64_t v44 = v22 + 2;
      if (!v42)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v43 = v16;
      uint64_t v44 = v22;
      if (!v42) {
        goto LABEL_29;
      }
    }
    uint64_t v46 = -(uint64_t)v42;
    do
    {
      char v47 = *(unsigned char *)(v43 + 3);
      *uint64_t v44 = *(unsigned char *)(v43 + 1);
      v44[1] = v47;
      v44 += 2;
      v43 += 4;
      BOOL v28 = __CFADD__(v46++, 1);
    }
    while (!v28);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      unint64_t v49 = v16;
      unsigned int v50 = v22;
      if (v8)
      {
        char v51 = *(unsigned char *)(v16 + 3);
        unint64_t v49 = v16 + 4;
        *unint64_t v22 = *(unsigned char *)(v16 + 1);
        v22[1] = v51;
        unsigned int v50 = v22 + 2;
      }
      if (v42)
      {
        uint64_t v52 = -(uint64_t)v42;
        do
        {
          char v53 = *(unsigned char *)(v49 + 3);
          unsigned char *v50 = *(unsigned char *)(v49 + 1);
          v50[1] = v53;
          v50 += 2;
          v49 += 4;
          BOOL v28 = __CFADD__(v52++, 1);
        }
        while (!v28);
      }
      v16 += v15;
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  unint64_t v16 = a3[1] + v15 * ((v11 + v9) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  }
  unint64_t v24 = v13 - v12;
  unint64_t v25 = v20 - v19;
  if (v13 - v12 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v14 + v30;
    uint64_t v32 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(unsigned char *)(v32 + i) = *(unsigned char *)(v31 + 2 * i + 1);
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  unint64_t v34 = v24 >> 1;
  unint64_t v35 = v24 - v11;
  if (v34 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v34;
  }
  unint64_t v37 = v23 >> 1;
  unint64_t v38 = v23 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v8)
    {
      char v42 = *(unsigned char *)(v16 + 3);
      unint64_t v40 = v16 + 4;
      *unint64_t v22 = *(unsigned char *)(v16 + 1);
      v22[1] = v42;
      unint64_t v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v40 = v16;
      unint64_t v41 = v22;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      char v44 = *(unsigned char *)(v40 + 3);
      unsigned char *v41 = *(unsigned char *)(v40 + 1);
      v41[1] = v44;
      v41 += 2;
      v40 += 4;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      unint64_t v47 = v16;
      uint64_t v48 = v22;
      if (v8)
      {
        char v49 = *(unsigned char *)(v16 + 3);
        unint64_t v47 = v16 + 4;
        *unint64_t v22 = *(unsigned char *)(v16 + 1);
        v22[1] = v49;
        uint64_t v48 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          char v51 = *(unsigned char *)(v47 + 3);
          *uint64_t v48 = *(unsigned char *)(v47 + 1);
          v48[1] = v51;
          v48 += 2;
          v47 += 4;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 += v15;
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v8) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v24 = v13 - v12;
  unint64_t v25 = v20 - v19;
  if (v13 - v12 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    BOOL v27 = v12 >= v8;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v27) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          unsigned int v35 = *(unsigned __int16 *)(v32 + 2 * i);
          if (v35 >= 0xEB00) {
            unsigned int v35 = 60160;
          }
          if (v35 <= 0x1000) {
            unsigned int v35 = 4096;
          }
          *(unsigned char *)(v33 + i) = (-1044480 - v35 + (v35 << 8)) / 0xDB00;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  unint64_t v36 = v24 >> 1;
  unint64_t v37 = v24 - v11;
  if (v36 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v36;
  }
  unint64_t v39 = v23 >> 1;
  unint64_t v40 = v23 - v10;
  if (v39 >= v40 >> 1) {
    unint64_t v41 = v40 >> 1;
  }
  else {
    unint64_t v41 = v39;
  }
  if (v11)
  {
    if (v9)
    {
      unsigned int v44 = *v16;
      if (v44 >= 0xF000) {
        unsigned int v44 = 61440;
      }
      if (v44 <= 0x1000) {
        int v45 = 4096;
      }
      else {
        int v45 = v44;
      }
      if (v16[1] >= 0xF000u) {
        unsigned int v46 = 61440;
      }
      else {
        unsigned int v46 = v16[1];
      }
      if (v46 <= 0x1000) {
        int v47 = 4096;
      }
      else {
        int v47 = v46;
      }
      char v42 = v16 + 2;
      *unint64_t v22 = (613566757 * (unint64_t)((-1044480 - v45 + (v45 << 8)) >> 13)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-1044480 - v47 + (v47 << 8)) >> 13)) >> 32;
      uint64_t v43 = v22 + 2;
      if (!v41) {
        goto LABEL_52;
      }
    }
    else
    {
      char v42 = v16;
      uint64_t v43 = v22;
      if (!v41)
      {
LABEL_52:
        unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        v22 += v21;
        goto LABEL_53;
      }
    }
    uint64_t v48 = -(uint64_t)v41;
    do
    {
      unsigned int v49 = *v42;
      unsigned int v50 = v42[1];
      if (v49 >= 0xF000) {
        unsigned int v49 = 61440;
      }
      if (v49 <= 0x1000) {
        unsigned int v49 = 4096;
      }
      if (v50 >= 0xF000) {
        unsigned int v50 = 61440;
      }
      if (v50 <= 0x1000) {
        unsigned int v50 = 4096;
      }
      *uint64_t v43 = (613566757 * (unint64_t)((-1044480 - v49 + (v49 << 8)) >> 13)) >> 32;
      v43[1] = (613566757 * (unint64_t)((-1044480 - v50 + (v50 << 8)) >> 13)) >> 32;
      v43 += 2;
      v42 += 2;
      BOOL v27 = __CFADD__(v48++, 1);
    }
    while (!v27);
    goto LABEL_52;
  }
LABEL_53:
  if (v38)
  {
    for (uint64_t j = 0; j != v38; ++j)
    {
      uint64_t v52 = v16;
      char v53 = v22;
      if (v9)
      {
        unsigned int v54 = *v16;
        if (v54 >= 0xF000) {
          unsigned int v54 = 61440;
        }
        if (v54 <= 0x1000) {
          int v55 = 4096;
        }
        else {
          int v55 = v54;
        }
        if (v16[1] >= 0xF000u) {
          unsigned int v56 = 61440;
        }
        else {
          unsigned int v56 = v16[1];
        }
        if (v56 <= 0x1000) {
          int v57 = 4096;
        }
        else {
          int v57 = v56;
        }
        uint64_t v52 = v16 + 2;
        *unint64_t v22 = (613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32;
        v22[1] = (613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32;
        char v53 = v22 + 2;
      }
      if (v41)
      {
        uint64_t v58 = -(uint64_t)v41;
        do
        {
          unsigned int v59 = *v52;
          unsigned int v60 = v52[1];
          if (v59 >= 0xF000) {
            unsigned int v59 = 61440;
          }
          if (v59 <= 0x1000) {
            unsigned int v59 = 4096;
          }
          if (v60 >= 0xF000) {
            unsigned int v60 = 61440;
          }
          if (v60 <= 0x1000) {
            unsigned int v60 = 4096;
          }
          *char v53 = (613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32;
          v53[1] = (613566757 * (unint64_t)((-1044480 - v60 + (v60 << 8)) >> 13)) >> 32;
          v53 += 2;
          v52 += 2;
          BOOL v27 = __CFADD__(v58++, 1);
        }
        while (!v27);
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  unint64_t v16 = a3[1] + v15 * ((v11 + v8) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  uint64_t v23 = a7[2];
  unint64_t v24 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v27 = v13 - v12;
  unint64_t v28 = v20 - v19;
  if (v13 - v12 >= v28) {
    unint64_t v27 = v28;
  }
  if (v27)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    uint64_t v34 = v32 + v14 + v33;
    unint64_t v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
          *(unsigned char *)(v35 + i) = *(unsigned char *)(v34 + 2 * i + 1);
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  unint64_t v37 = v27 >> 1;
  unint64_t v38 = v27 - v11;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  unint64_t v40 = v26 >> 1;
  unint64_t v41 = v26 - v10;
  if (v40 >= v41 >> 1) {
    unint64_t v42 = v41 >> 1;
  }
  else {
    unint64_t v42 = v40;
  }
  if (v11)
  {
    if (v9)
    {
      char v46 = *(unsigned char *)(v16 + 3);
      unint64_t v43 = v16 + 4;
      *unint64_t v24 = *(unsigned char *)(v16 + 1);
      unsigned int v44 = v24 + 1;
      *unint64_t v25 = v46;
      int v45 = v25 + 1;
      if (!v42)
      {
LABEL_29:
        v16 += v15;
        v24 += v21;
        v25 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v43 = v16;
      unsigned int v44 = v24;
      int v45 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v42) {
        goto LABEL_29;
      }
    }
    uint64_t v47 = -(uint64_t)v42;
    do
    {
      char v48 = *(unsigned char *)(v43 + 3);
      *v44++ = *(unsigned char *)(v43 + 1);
      *v45++ = v48;
      v43 += 4;
      BOOL v49 = __CFADD__(v47++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      unint64_t v51 = v16;
      uint64_t v52 = v24;
      char v53 = v25;
      if (v9)
      {
        char v54 = *(unsigned char *)(v16 + 3);
        unint64_t v51 = v16 + 4;
        *unint64_t v24 = *(unsigned char *)(v16 + 1);
        uint64_t v52 = v24 + 1;
        *unint64_t v25 = v54;
        char v53 = v25 + 1;
      }
      if (v42)
      {
        uint64_t v55 = -(uint64_t)v42;
        do
        {
          char v56 = *(unsigned char *)(v51 + 3);
          *v52++ = *(unsigned char *)(v51 + 1);
          *v53++ = v56;
          v51 += 4;
          BOOL v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      v16 += v15;
      v24 += v21;
      v25 += v22;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v9) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  uint64_t v23 = a7[2];
  unint64_t v24 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  }
  unint64_t v27 = v13 - v12;
  unint64_t v28 = v20 - v19;
  if (v13 - v12 >= v28) {
    unint64_t v27 = v28;
  }
  if (v27)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + v30 * v12;
    if (v12 >= v9) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v30;
    }
    uint64_t v34 = v32 + v14 + v33;
    unint64_t v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          unsigned int v37 = *(unsigned __int16 *)(v34 + 2 * i);
          if (v37 >= 0xEB00) {
            unsigned int v37 = 60160;
          }
          if (v37 <= 0x1000) {
            unsigned int v37 = 4096;
          }
          *(unsigned char *)(v35 + i) = (-1044480 - v37 + (v37 << 8)) / 0xDB00;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  unint64_t v38 = v27 >> 1;
  unint64_t v39 = v27 - v11;
  if (v38 >= v39 >> 1) {
    unint64_t v40 = v39 >> 1;
  }
  else {
    unint64_t v40 = v38;
  }
  unint64_t v41 = v26 >> 1;
  unint64_t v42 = v26 - v10;
  if (v41 >= v42 >> 1) {
    unint64_t v43 = v42 >> 1;
  }
  else {
    unint64_t v43 = v41;
  }
  if (v11)
  {
    if (v8)
    {
      unsigned int v47 = *v16;
      if (v47 >= 0xF000) {
        unsigned int v47 = 61440;
      }
      if (v47 <= 0x1000) {
        int v48 = 4096;
      }
      else {
        int v48 = v47;
      }
      if (v16[1] >= 0xF000u) {
        unsigned int v49 = 61440;
      }
      else {
        unsigned int v49 = v16[1];
      }
      if (v49 <= 0x1000) {
        int v50 = 4096;
      }
      else {
        int v50 = v49;
      }
      unsigned int v44 = v16 + 2;
      unint64_t v51 = (613566757 * (unint64_t)((-1044480 - v50 + (v50 << 8)) >> 13)) >> 32;
      *unint64_t v24 = (613566757 * (unint64_t)((-1044480 - v48 + (v48 << 8)) >> 13)) >> 32;
      int v45 = v24 + 1;
      *unint64_t v25 = v51;
      char v46 = v25 + 1;
      if (!v43) {
        goto LABEL_52;
      }
    }
    else
    {
      unsigned int v44 = v16;
      int v45 = v24;
      char v46 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v43)
      {
LABEL_52:
        unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        v24 += v21;
        v25 += v22;
        goto LABEL_53;
      }
    }
    uint64_t v52 = -(uint64_t)v43;
    do
    {
      unsigned int v53 = *v44;
      unsigned int v54 = v44[1];
      if (v53 >= 0xF000) {
        unsigned int v53 = 61440;
      }
      if (v53 <= 0x1000) {
        unsigned int v53 = 4096;
      }
      if (v54 >= 0xF000) {
        unsigned int v54 = 61440;
      }
      if (v54 <= 0x1000) {
        unsigned int v54 = 4096;
      }
      *v45++ = (613566757 * (unint64_t)((-1044480 - v53 + (v53 << 8)) >> 13)) >> 32;
      *v46++ = (613566757 * (unint64_t)((-1044480 - v54 + (v54 << 8)) >> 13)) >> 32;
      v44 += 2;
      BOOL v55 = __CFADD__(v52++, 1);
    }
    while (!v55);
    goto LABEL_52;
  }
LABEL_53:
  if (v40)
  {
    for (uint64_t j = 0; j != v40; ++j)
    {
      int v57 = v16;
      uint64_t v58 = v24;
      unsigned int v59 = v25;
      if (v8)
      {
        unsigned int v60 = *v16;
        if (v60 >= 0xF000) {
          unsigned int v60 = 61440;
        }
        if (v60 <= 0x1000) {
          int v61 = 4096;
        }
        else {
          int v61 = v60;
        }
        if (v16[1] >= 0xF000u) {
          unsigned int v62 = 61440;
        }
        else {
          unsigned int v62 = v16[1];
        }
        if (v62 <= 0x1000) {
          int v63 = 4096;
        }
        else {
          int v63 = v62;
        }
        int v57 = v16 + 2;
        unint64_t v64 = (613566757 * (unint64_t)((-1044480 - v63 + (v63 << 8)) >> 13)) >> 32;
        *unint64_t v24 = (613566757 * (unint64_t)((-1044480 - v61 + (v61 << 8)) >> 13)) >> 32;
        uint64_t v58 = v24 + 1;
        *unint64_t v25 = v64;
        unsigned int v59 = v25 + 1;
      }
      if (v43)
      {
        uint64_t v65 = -(uint64_t)v43;
        do
        {
          unsigned int v66 = *v57;
          unsigned int v67 = v57[1];
          if (v66 >= 0xF000) {
            unsigned int v66 = 61440;
          }
          if (v66 <= 0x1000) {
            unsigned int v66 = 4096;
          }
          if (v67 >= 0xF000) {
            unsigned int v67 = 61440;
          }
          if (v67 <= 0x1000) {
            unsigned int v67 = 4096;
          }
          *v58++ = (613566757 * (unint64_t)((-1044480 - v66 + (v66 << 8)) >> 13)) >> 32;
          *v59++ = (613566757 * (unint64_t)((-1044480 - v67 + (v67 << 8)) >> 13)) >> 32;
          v57 += 2;
          BOOL v55 = __CFADD__(v65++, 1);
        }
        while (!v55);
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      v24 += v21;
      v25 += v22;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2]) {
    unint64_t v9 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v10 = a6[3];
  }
  else {
    uint64_t v10 = a2[3];
  }
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a4;
    uint64_t v13 = a4[1];
    uint64_t v14 = *a8;
    uint64_t v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[5];
    uint64_t v17 = a3[1] + v13 * v16 + 2 * v8;
    uint64_t v18 = *a3 + *a4 * v16 + 2 * v8;
    do
    {
      if (v9)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        LOWORD(v21) = 0;
        LOWORD(v22) = 0;
        uint64_t v23 = (unsigned __int16 *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            int v24 = *v23;
            int v25 = v23[1];
            v23 += 2;
            unsigned int v22 = 57344 * v24 / 0xFFFFu + 4096;
            unsigned int v21 = 57344 * v25 / 0xFFFFu + 4096;
          }
          unint64_t v26 = (_WORD *)(v15 + v19);
          unsigned int v27 = 56064 * *(unsigned __int16 *)(v18 + 2 * v20) / 0xFFFF;
          *unint64_t v26 = -1;
          v26[1] = v27 + 4096;
          v26[2] = v22;
          v26[3] = v21;
          ++v20;
          v19 += 8;
        }
        while (v9 != v20);
      }
      v18 += v12;
      v15 += v14;
      v17 += v13;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_sf22_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2]) {
    unint64_t v9 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v10 = a6[3];
  }
  else {
    uint64_t v10 = a2[3];
  }
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a4;
    uint64_t v13 = a4[1];
    uint64_t v14 = *a8;
    uint64_t v15 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[5];
    uint64_t v17 = a3[1] + v13 * v16 + 2 * v8;
    uint64_t v18 = *a3 + *a4 * v16 + 2 * v8;
    do
    {
      if (v9)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        LOBYTE(v21) = 0;
        LOBYTE(v22) = 0;
        uint64_t v23 = (unsigned __int16 *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            int v24 = *v23;
            int v25 = v23[1];
            v23 += 2;
            unsigned int v22 = (((16777473 * (unint64_t)(224 * v24)) >> 32) >> 8) + 16;
            unsigned int v21 = (((16777473 * (unint64_t)(224 * v25)) >> 32) >> 8) + 16;
          }
          unint64_t v26 = (unsigned char *)(v15 + v19);
          unint64_t v27 = (16777473 * (unint64_t)(219 * *(unsigned __int16 *)(v18 + 2 * v20))) >> 40;
          *unint64_t v26 = -1;
          v26[1] = v27 + 16;
          v26[2] = v22;
          v26[3] = v21;
          ++v20;
          v19 += 4;
        }
        while (v9 != v20);
      }
      v18 += v12;
      v15 += v14;
      v17 += v13;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_sf22_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a8;
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    unint64_t v18 = a3[1] + v14 * v17 + ((2 * v9) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          unsigned int v22 = (_WORD *)(v16 + v20);
          uint64_t v23 = (unsigned __int16 *)(v18 + 2 * i);
          int v24 = (unsigned __int16 *)(v19 + 2 * i);
          int v25 = *v23;
          LODWORD(v23) = 57344 * v23[1] / 0xFFFF;
          unsigned int v26 = 56064 * *v24 / 0xFFFF;
          LODWORD(v24) = 56064 * v24[1] / 0xFFFF;
          *unsigned int v22 = 57344 * v25 / 0xFFFFu + 4096;
          v22[1] = v26 + 4096;
          v22[2] = (_WORD)v23 + 4096;
          v22[3] = (_WORD)v24 + 4096;
          v20 += 8;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_sf22_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a8;
    uint64_t v16 = (unsigned char *)(*a7 + *a8 * *(void *)(a6 + 40) + v10);
    uint64_t v17 = *(void *)(a2 + 40);
    unint64_t v18 = a3[1] + v14 * v17 + ((2 * v9) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        unint64_t v20 = 0;
        unsigned int v21 = v16;
        do
        {
          unsigned int v22 = (unsigned __int16 *)(v18 + 2 * v20);
          uint64_t v23 = (unsigned __int16 *)(v19 + 2 * v20);
          int v24 = *v22;
          unint64_t v25 = (16777473 * (unint64_t)(224 * v22[1])) >> 40;
          unint64_t v26 = (16777473 * (unint64_t)(219 * *v23)) >> 40;
          unint64_t v27 = (16777473 * (unint64_t)(219 * v23[1])) >> 40;
          unsigned char *v21 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v24)) >> 32) >> 8) + 16;
          v21[1] = v26 + 16;
          v21[2] = v25 + 16;
          v21[3] = v27 + 16;
          v21 += 4;
          v20 += 2;
        }
        while (v20 < v11);
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_sf22_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  unint64_t v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2]) {
    unint64_t v17 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v10 = a6[3];
  }
  if (v10)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = 56064 * *(unsigned __int16 *)(v24 + 2 * i) / 0xFFFF + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v10);
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v17 >> 1;
  uint64_t v29 = v9 & 1;
  if (v17 >> 1 >= (v17 - v29) >> 1) {
    unint64_t v28 = (v17 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v12[1];
      uint64_t v30 = v12 + 2;
      *uint64_t v16 = 57344 * *v12 / 0xFFFF + 4096;
      v16[1] = 57344 * v37 / 0xFFFFu + 4096;
      uint64_t v31 = v16 + 2;
      if (v28)
      {
LABEL_19:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30;
          int v34 = v30[1];
          v30 += 2;
          *uint64_t v31 = 57344 * v33 / 0xFFFFu + 4096;
          v31[1] = 57344 * v34 / 0xFFFFu + 4096;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v30 = v12;
      uint64_t v31 = v16;
      if (v28) {
        goto LABEL_19;
      }
    }
    uint64_t v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v17)
    {
      unsigned int v38 = 57344 * v30[1];
      *uint64_t v31 = 57344 * *v30 / 0xFFFF + 4096;
      v31[1] = v38 / 0xFFFF + 4096;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v26)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v10 - v26;
    do
    {
      unint64_t v41 = v12;
      unint64_t v42 = v16;
      if (v27)
      {
        int v43 = v12[1];
        unint64_t v41 = v12 + 2;
        *uint64_t v16 = 57344 * *v12 / 0xFFFF + 4096;
        v16[1] = 57344 * v43 / 0xFFFFu + 4096;
        unint64_t v42 = v16 + 2;
      }
      if (v28)
      {
        uint64_t v44 = -(uint64_t)v28;
        do
        {
          int v45 = v41[1];
          unsigned int v46 = 57344 * *v41 / 0xFFFF + 4096;
          *unint64_t v42 = 57344 * *v41 / 0xFFFF + 4096;
          unsigned int v47 = 57344 * v45 / 0xFFFFu + 4096;
          v42[1] = v47;
          v41 += 2;
          v42[2] = v46;
          v42[3] = v47;
          v42 += 4;
          BOOL v35 = __CFADD__(v44++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v17)
      {
        int v48 = *v41;
        int v49 = v41[1];
        *unint64_t v42 = 57344 * v48 / 0xFFFFu + 4096;
        v42[1] = 57344 * v49 / 0xFFFFu + 4096;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + (v8 & 1) < v10)
  {
    if (v27)
    {
      int v50 = *v12;
      int v51 = v12[1];
      v12 += 2;
      *uint64_t v16 = 57344 * v50 / 0xFFFFu + 4096;
      v16[1] = 57344 * v51 / 0xFFFFu + 4096;
      v16 += 2;
    }
    if (v28)
    {
      uint64_t v52 = -(uint64_t)v28;
      do
      {
        int v53 = *v12;
        int v54 = v12[1];
        v12 += 2;
        *uint64_t v16 = 57344 * v53 / 0xFFFFu + 4096;
        v16[1] = 57344 * v54 / 0xFFFFu + 4096;
        v16 += 2;
        BOOL v35 = __CFADD__(v52++, 1);
      }
      while (!v35);
      uint64_t v55 = 2 * v28;
    }
    else
    {
      uint64_t v55 = 0;
    }
    if ((v55 | (unint64_t)v29) < v17)
    {
      unsigned int v56 = 57344 * v12[1];
      *uint64_t v16 = 57344 * *v12 / 0xFFFF + 4096;
      v16[1] = v56 / 0xFFFF + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  unint64_t v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17) {
    unint64_t v20 = v17;
  }
  if (v10 >= v16) {
    unint64_t v21 = v16;
  }
  else {
    unint64_t v21 = v10;
  }
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
          *(_WORD *)(v25 + 2 * i) = 56064 * *(unsigned __int16 *)(v26 + 2 * i) / 0xFFFF + 4096;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  if (v21 >= (v8 & 1u)) {
    uint64_t v28 = v8 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v9;
  unint64_t v30 = v20 >> 1;
  uint64_t v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1) {
    unint64_t v30 = (v20 - v31) >> 1;
  }
  if (v8)
  {
    if (v29)
    {
      int v39 = v13[1];
      uint64_t v32 = v13 + 2;
      *uint64_t v19 = 57344 * *v13 / 0xFFFF + 4096;
      v19[1] = 57344 * v39 / 0xFFFFu + 4096;
      int v33 = v19 + 2;
      if (v30)
      {
LABEL_20:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          int v35 = *v32;
          int v36 = v32[1];
          v32 += 2;
          *int v33 = 57344 * v35 / 0xFFFFu + 4096;
          v33[1] = 57344 * v36 / 0xFFFFu + 4096;
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v32 = v13;
      int v33 = v19;
      if (v30) {
        goto LABEL_20;
      }
    }
    uint64_t v38 = 0;
LABEL_26:
    if ((v38 | (unint64_t)v31) < v20)
    {
      unsigned int v40 = 57344 * v32[1];
      *int v33 = 57344 * *v32 / 0xFFFF + 4096;
      v33[1] = v40 / 0xFFFF + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v28)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v21 - v28;
    do
    {
      int v43 = v13;
      uint64_t v44 = v19;
      if (v29)
      {
        int v45 = v13[1];
        int v43 = v13 + 2;
        *uint64_t v19 = 57344 * *v13 / 0xFFFF + 4096;
        v19[1] = 57344 * v45 / 0xFFFFu + 4096;
        uint64_t v44 = v19 + 2;
      }
      if (v30)
      {
        uint64_t v46 = -(uint64_t)v30;
        do
        {
          int v47 = v43[1];
          unsigned int v48 = 57344 * *v43 / 0xFFFF + 4096;
          *uint64_t v44 = 57344 * *v43 / 0xFFFF + 4096;
          unsigned int v49 = 57344 * v47 / 0xFFFFu + 4096;
          v44[1] = v49;
          v43 += 2;
          v44[2] = v48;
          v44[3] = v49;
          v44 += 4;
          BOOL v37 = __CFADD__(v46++, 1);
        }
        while (!v37);
      }
      if ((v31 | (2 * v30)) < v20)
      {
        int v50 = *v43;
        int v51 = v43[1];
        *uint64_t v44 = 57344 * v50 / 0xFFFFu + 4096;
        v44[1] = 57344 * v51 / 0xFFFFu + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + (v8 & 1) < v21)
  {
    if (v29)
    {
      int v52 = *v13;
      int v53 = v13[1];
      v13 += 2;
      *uint64_t v19 = 57344 * v52 / 0xFFFFu + 4096;
      v19[1] = 57344 * v53 / 0xFFFFu + 4096;
      v19 += 2;
    }
    if (v30)
    {
      uint64_t v54 = -(uint64_t)v30;
      do
      {
        int v55 = *v13;
        int v56 = v13[1];
        v13 += 2;
        *uint64_t v19 = 57344 * v55 / 0xFFFFu + 4096;
        v19[1] = 57344 * v56 / 0xFFFFu + 4096;
        v19 += 2;
        BOOL v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v20)
    {
      unsigned int v57 = 57344 * v13[1];
      *uint64_t v19 = 57344 * *v13 / 0xFFFF + 4096;
      v19[1] = v57 / 0xFFFF + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a4[1];
  uint64_t v11 = (int *)(a3[1] + v10 * v9 + 2 * (v8 & 0xFFFFFFFE));
  uint64_t v12 = a6[4];
  uint64_t v13 = a6[5];
  uint64_t v14 = a8[1];
  uint64_t v15 = (int *)(a7[1] + v14 * v13 + 4 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2]) {
    unint64_t v16 = a6[2];
  }
  else {
    unint64_t v16 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v47 = a4[1];
    unint64_t v48 = v16;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    unint64_t v21 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    uint64_t v22 = (char *)(*a3 + *a4 * v9 + 2 * (v8 & 0xFFFFFFFE));
    size_t v23 = 2 * v16;
    unint64_t v46 = v17;
    do
    {
      memcpy(v21, v22, v23);
      v22 += v19;
      v21 += v20;
      --v17;
    }
    while (v17);
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    uint64_t v10 = v47;
    unint64_t v16 = v48;
    unint64_t v17 = v46;
  }
  unint64_t v24 = v9 & 1;
  if (v17 >= v24) {
    uint64_t v25 = v9 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v8;
  unint64_t v27 = v16 >> 1;
  uint64_t v28 = v8 & 1;
  if (v16 >> 1 >= (v16 - v28) >> 1) {
    unint64_t v27 = (v16 - v28) >> 1;
  }
  if (v9)
  {
    char v29 = v11;
    if (v26)
    {
      char v29 = v11 + 1;
      *uint64_t v15 = *v11;
      unint64_t v30 = v15 + 1;
      if (v27)
      {
LABEL_19:
        uint64_t v31 = -(uint64_t)v27;
        do
        {
          int v32 = *v29++;
          *v30++ = v32;
          BOOL v33 = __CFADD__(v31++, 1);
        }
        while (!v33);
        uint64_t v34 = 2 * v27;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v30 = v15;
      if (v27) {
        goto LABEL_19;
      }
    }
    uint64_t v34 = 0;
LABEL_25:
    if ((v34 | (unint64_t)v28) < v16) {
      *unint64_t v30 = *v29;
    }
    uint64_t v11 = (int *)((char *)v11 + v10);
    uint64_t v15 = (int *)((char *)v15 + v14);
  }
  if (v17 == v25)
  {
    unint64_t v35 = 0;
  }
  else
  {
    uint64_t v36 = 0;
    unint64_t v35 = v17 - v25;
    do
    {
      BOOL v37 = (__int16 *)v11;
      uint64_t v38 = v15;
      if (v26)
      {
        BOOL v37 = (__int16 *)(v11 + 1);
        *uint64_t v15 = *v11;
        uint64_t v38 = v15 + 1;
      }
      if (v27)
      {
        uint64_t v39 = -(uint64_t)v27;
        do
        {
          __int16 v40 = *v37;
          __int16 v41 = v37[1];
          v37 += 2;
          *(_WORD *)uint64_t v38 = v40;
          *((_WORD *)v38 + 1) = v41;
          *((_WORD *)v38 + 2) = v40;
          *((_WORD *)v38 + 3) = v41;
          v38 += 2;
          BOOL v33 = __CFADD__(v39++, 1);
        }
        while (!v33);
      }
      if ((v28 | (2 * v27)) < v16) {
        int *v38 = *(_DWORD *)v37;
      }
      uint64_t v11 = (int *)((char *)v11 + v10);
      uint64_t v15 = (int *)((char *)v15 + v14);
      ++v36;
    }
    while (v36 != v35);
  }
  if (v35 + v24 < v17)
  {
    if (v26)
    {
      int v42 = *v11++;
      *v15++ = v42;
    }
    if (v27)
    {
      uint64_t v43 = -(uint64_t)v27;
      do
      {
        int v44 = *v11++;
        *v15++ = v44;
        BOOL v33 = __CFADD__(v43++, 1);
      }
      while (!v33);
      v27 *= 2;
    }
    if ((v27 | v28) < v16) {
      *uint64_t v15 = *v11;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = a7[2] + v26 * v18 + v19;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = -1;
          *(_WORD *)(v28 + 2 * i) = 56064 * *(unsigned __int16 *)(v29 + 2 * i) / 0xFFFF + 4096;
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v22 >> 1;
  unint64_t v35 = (v22 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      int v38 = v14[1];
      uint64_t v36 = v14 + 2;
      _WORD *v21 = 57344 * *v14 / 0xFFFF + 4096;
      v21[1] = 57344 * v38 / 0xFFFFu + 4096;
      BOOL v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v36 = v14;
      BOOL v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      unsigned int v40 = 57344 * v36[1] / 0xFFFF;
      *BOOL v37 = 57344 * *v36 / 0xFFFF + 4096;
      v37[1] = v40 + 4096;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      int v44 = v14;
      int v45 = v21;
      if (v33)
      {
        int v46 = v14[1];
        int v44 = v14 + 2;
        _WORD *v21 = 57344 * *v14 / 0xFFFF + 4096;
        v21[1] = 57344 * v46 / 0xFFFFu + 4096;
        int v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          unsigned int v48 = 57344 * v44[1] / 0xFFFF;
          *int v45 = 57344 * *v44 / 0xFFFF + 4096;
          v45[1] = v48 + 4096;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      int v49 = *v14;
      int v50 = v14[1];
      v14 += 2;
      _WORD *v21 = 57344 * v49 / 0xFFFFu + 4096;
      v21[1] = 57344 * v50 / 0xFFFFu + 4096;
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        unsigned int v52 = 57344 * v14[1] / 0xFFFF;
        _WORD *v21 = 57344 * *v14 / 0xFFFF + 4096;
        v21[1] = v52 + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v19;
    uint64_t v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = 56064 * *(unsigned __int16 *)(v27 + 2 * i) / 0xFFFF + 4096;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v22 >> 1;
  unint64_t v33 = (v22 - v10) >> 1;
  if (v32 >= v33) {
    unint64_t v32 = v33;
  }
  if (v12)
  {
    if (v31)
    {
      int v36 = v14[1];
      unint64_t v34 = v14 + 2;
      _WORD *v21 = 57344 * *v14 / 0xFFFF + 4096;
      v21[1] = 57344 * v36 / 0xFFFFu + 4096;
      unint64_t v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v34 = v14;
      unint64_t v35 = v21;
      if (!v32) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = -(uint64_t)v32;
    do
    {
      unsigned int v38 = 57344 * v34[1] / 0xFFFF;
      *unint64_t v35 = 57344 * *v34 / 0xFFFF + 4096;
      v35[1] = v38 + 4096;
      v34 += 2;
      v35 += 2;
      BOOL v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v30;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v31)
      {
        int v44 = v14[1];
        unint64_t v42 = v14 + 2;
        _WORD *v21 = 57344 * *v14 / 0xFFFF + 4096;
        v21[1] = 57344 * v44 / 0xFFFFu + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v32)
      {
        uint64_t v45 = -(uint64_t)v32;
        do
        {
          unsigned int v46 = 57344 * v42[1] / 0xFFFF;
          *uint64_t v43 = 57344 * *v42 / 0xFFFF + 4096;
          v43[1] = v46 + 4096;
          v42 += 2;
          v43 += 2;
          BOOL v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if (v31)
    {
      int v47 = *v14;
      int v48 = v14[1];
      v14 += 2;
      _WORD *v21 = 57344 * v47 / 0xFFFFu + 4096;
      v21[1] = 57344 * v48 / 0xFFFFu + 4096;
      v21 += 2;
    }
    if (v32)
    {
      uint64_t v49 = -(uint64_t)v32;
      do
      {
        unsigned int v50 = 57344 * v14[1] / 0xFFFF;
        _WORD *v21 = 57344 * *v14 / 0xFFFF + 4096;
        v21[1] = v50 + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf22_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 56064 * *(unsigned __int16 *)(v32 + 2 * i) / 0xFFFF + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      unsigned int v38 = v16 + 2;
      unsigned int v40 = (57344 * v16[1] / 0xFFFF
           + 8193
           + 57344 * *(unsigned __int16 *)((char *)v16 + v15 + 2) / 0xFFFF) >> 1;
      *uint64_t v23 = (57344 * *v16 / 0xFFFF
            + 8193
            + 57344 * *(unsigned __int16 *)((char *)v16 + v15) / 0xFFFF) >> 1;
      v23[1] = v40;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unsigned int v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      int v42 = *v38;
      int v43 = v38[1];
      int v44 = *(unsigned __int16 *)((char *)v38 + v15);
      int v45 = *(unsigned __int16 *)((char *)v38 + v15 + 2);
      v38 += 2;
      *BOOL v39 = (57344 * v42 / 0xFFFFu + 8193 + 57344 * v44 / 0xFFFFu) >> 1;
      v39[1] = (57344 * v43 / 0xFFFFu + 8193 + 57344 * v45 / 0xFFFFu) >> 1;
      v39 += 2;
      BOOL v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      uint64_t v49 = v16;
      unsigned int v50 = v23;
      if (v9)
      {
        uint64_t v49 = v16 + 2;
        unsigned int v51 = (57344 * v16[1] / 0xFFFF
             + 8193
             + 57344 * *(unsigned __int16 *)((char *)v16 + v15 + 2) / 0xFFFF) >> 1;
        *uint64_t v23 = (57344 * *v16 / 0xFFFF
              + 8193
              + 57344 * *(unsigned __int16 *)((char *)v16 + v15) / 0xFFFF) >> 1;
        v23[1] = v51;
        unsigned int v50 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v52 = -(uint64_t)v37;
        do
        {
          int v53 = *v49;
          int v54 = v49[1];
          int v55 = *(unsigned __int16 *)((char *)v49 + v15);
          int v56 = *(unsigned __int16 *)((char *)v49 + v15 + 2);
          v49 += 2;
          _WORD *v50 = (57344 * v53 / 0xFFFFu + 8193 + 57344 * v55 / 0xFFFFu) >> 1;
          v50[1] = (57344 * v54 / 0xFFFFu + 8193 + 57344 * v56 / 0xFFFFu) >> 1;
          v50 += 2;
          BOOL v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += v15;
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf22_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 56064 * *(unsigned __int16 *)(v32 + 2 * i) / 0xFFFF + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v40 = v16[1];
      unsigned int v38 = v16 + 2;
      *uint64_t v23 = 57344 * *v16 / 0xFFFF + 4096;
      v23[1] = 57344 * v40 / 0xFFFFu + 4096;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unsigned int v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      unsigned int v42 = 57344 * v38[1] / 0xFFFF;
      *BOOL v39 = 57344 * *v38 / 0xFFFF + 4096;
      v39[1] = v42 + 4096;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v35;
    uint64_t v46 = 2 * v15;
    do
    {
      unint64_t v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1];
        unint64_t v47 = v16 + 2;
        *uint64_t v23 = 57344 * *v16 / 0xFFFF + 4096;
        v23[1] = 57344 * v49 / 0xFFFFu + 4096;
        unint64_t v48 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          unsigned int v51 = 57344 * v47[1] / 0xFFFF;
          *unint64_t v48 = 57344 * *v47 / 0xFFFF + 4096;
          v48[1] = v51 + 4096;
          v47 += 2;
          v48 += 2;
          BOOL v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v46);
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf22_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  unint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  }
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  else {
    unint64_t v24 = v13 - v12;
  }
  if (v24)
  {
    unint64_t v54 = v23;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    if (v12 >= v9) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = (char *)(*a3 + *a4 * v12 + v14 + v27);
    uint64_t v29 = (char *)(*a7 + v26 * v19 + 2 * v17);
    size_t v30 = 2 * v23;
    unint64_t v56 = v24;
    uint64_t v31 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v30);
      v28 += v25;
      v29 += v26;
      BOOL v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    unint64_t v24 = v56;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
    unint64_t v23 = v54;
  }
  if (v24 >= v11) {
    unint64_t v33 = v11;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v23 >> 1 >= (v23 - v10) >> 1) {
    unint64_t v34 = (v23 - v10) >> 1;
  }
  else {
    unint64_t v34 = v23 >> 1;
  }
  if (v11)
  {
    if (v8)
    {
      uint64_t v35 = v16 + 2;
      unsigned int v37 = (v16[1] + *(unsigned __int16 *)((char *)v16 + v15 + 2) + 1) >> 1;
      *uint64_t v22 = (*v16 + *(unsigned __int16 *)((char *)v16 + v15) + 1) >> 1;
      v22[1] = v37;
      unint64_t v36 = v22 + 2;
      if (!v34)
      {
LABEL_29:
        v16 += v15;
        uint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v35 = v16;
      unint64_t v36 = v22;
      if (!v34) {
        goto LABEL_29;
      }
    }
    uint64_t v38 = -(uint64_t)v34;
    do
    {
      int v39 = *v35;
      int v40 = v35[1];
      int v41 = *(unsigned __int16 *)((char *)v35 + v15);
      int v42 = *(unsigned __int16 *)((char *)v35 + v15 + 2);
      v35 += 2;
      *unint64_t v36 = (v39 + v41 + 1) >> 1;
      v36[1] = (v40 + v42 + 1) >> 1;
      v36 += 2;
      BOOL v32 = __CFADD__(v38++, 1);
    }
    while (!v32);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v33)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v24 - v33;
    do
    {
      unint64_t v45 = v16;
      uint64_t v46 = v22;
      if (v8)
      {
        unint64_t v45 = v16 + 2;
        unsigned int v47 = (v16[1] + *(unsigned __int16 *)((char *)v16 + v15 + 2) + 1) >> 1;
        *uint64_t v22 = (*v16 + *(unsigned __int16 *)((char *)v16 + v15) + 1) >> 1;
        v22[1] = v47;
        uint64_t v46 = v22 + 2;
      }
      if (v34)
      {
        uint64_t v48 = -(uint64_t)v34;
        do
        {
          int v49 = *v45;
          int v50 = v45[1];
          int v51 = *(unsigned __int16 *)((char *)v45 + v15);
          int v52 = *(unsigned __int16 *)((char *)v45 + v15 + 2);
          v45 += 2;
          *uint64_t v46 = (v49 + v51 + 1) >> 1;
          v46[1] = (v50 + v52 + 1) >> 1;
          v46 += 2;
          BOOL v32 = __CFADD__(v48++, 1);
        }
        while (!v32);
      }
      v16 += v15;
      uint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyDec_sf22_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = v9 & 1;
  uint64_t v12 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v13 = v10 & 1;
  unint64_t v14 = v13 + v10;
  uint64_t v15 = (*(_DWORD *)(a2 + 24) + v10) & 0xFFFFFFFE;
  uint64_t v16 = 2 * (v11 + v9);
  uint64_t v17 = a4[1];
  uint64_t v18 = (int *)(a3[1] + v17 * (v13 + v10) + (v16 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v19 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v20 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v21 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v22 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v23 = 2 * v19;
  uint64_t v24 = a8[1];
  uint64_t v25 = (int *)(a7[1] + ((unint64_t)(v24 * v21) >> 1) + ((2 * v19) & 0x7FFFFFFFFFFFFFFELL));
  if (v12 - (v11 + v9) >= (unint64_t)(v20 - v19)) {
    unint64_t v26 = v20 - v19;
  }
  else {
    unint64_t v26 = v12 - (v11 + v9);
  }
  unint64_t v27 = v15 - v14;
  if (v15 - v14 >= v22 - v21) {
    unint64_t v27 = v22 - v21;
  }
  if (v27)
  {
    unint64_t v50 = v27;
    uint64_t v51 = a4[1];
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    if (v14 >= v10) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = (char *)(*a3 + *a4 * v14 + v16 + v30);
    BOOL v32 = (char *)(*a7 + v29 * v21 + v23);
    unint64_t v49 = v26;
    size_t v33 = 2 * v26;
    uint64_t v34 = -(uint64_t)v27;
    do
    {
      memcpy(v32, v31, v33);
      v31 += v28;
      v32 += v29;
      BOOL v35 = __CFADD__(v34++, 1);
    }
    while (!v35);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v13 = *(void *)(a2 + 40) & 1;
    uint64_t v11 = v9 & 1;
    unint64_t v27 = v50;
    uint64_t v17 = v51;
    unint64_t v26 = v49;
  }
  if (v27 >= v13) {
    unint64_t v36 = v13;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v26 >> 1 >= (v26 - v11) >> 1) {
    unint64_t v37 = (v26 - v11) >> 1;
  }
  else {
    unint64_t v37 = v26 >> 1;
  }
  if (v13)
  {
    uint64_t v38 = v18;
    if (v9)
    {
      uint64_t v38 = v18 + 1;
      *uint64_t v25 = *v18;
      int v39 = v25 + 1;
      if (!v37)
      {
LABEL_28:
        uint64_t v18 = (int *)((char *)v18 + 2 * v17);
        uint64_t v25 = (int *)((char *)v25 + v24);
        goto LABEL_29;
      }
    }
    else
    {
      int v39 = v25;
      if (!v37) {
        goto LABEL_28;
      }
    }
    uint64_t v40 = -(uint64_t)v37;
    do
    {
      int v41 = *v38++;
      *v39++ = v41;
      BOOL v35 = __CFADD__(v40++, 1);
    }
    while (!v35);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    unint64_t v42 = 0;
    unint64_t v43 = v27 - v36;
    do
    {
      unint64_t v44 = v18;
      unint64_t v45 = v25;
      if (v9)
      {
        unint64_t v44 = v18 + 1;
        *uint64_t v25 = *v18;
        unint64_t v45 = v25 + 1;
      }
      if (v37)
      {
        uint64_t v46 = -(uint64_t)v37;
        do
        {
          int v47 = *v44++;
          *v45++ = v47;
          BOOL v35 = __CFADD__(v46++, 1);
        }
        while (!v35);
      }
      uint64_t v18 = (int *)((char *)v18 + 2 * v17);
      uint64_t v25 = (int *)((char *)v25 + v24);
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_Copy_sf22_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  unint64_t v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2]) {
    unint64_t v17 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v10 = a6[3];
  }
  if (v10)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v24 + 2 * i))) >> 32) >> 12)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v10);
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v17 >> 1;
  uint64_t v29 = v9 & 1;
  if (v17 >> 1 >= (v17 - v29) >> 1) {
    unint64_t v28 = (v17 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v12[1];
      uint64_t v30 = v12 + 2;
      *uint64_t v16 = 16 * (((268439553 * (unint64_t)(3584 * *v12)) >> 32) >> 12) + 4096;
      v16[1] = 16 * ((268439553 * (unint64_t)(3584 * v37)) >> 44) + 4096;
      uint64_t v31 = v16 + 2;
      if (v28)
      {
LABEL_19:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30;
          int v34 = v30[1];
          v30 += 2;
          *uint64_t v31 = 16 * (((268439553 * (unint64_t)(3584 * v33)) >> 32) >> 12) + 4096;
          v31[1] = 16 * ((268439553 * (unint64_t)(3584 * v34)) >> 44) + 4096;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v30 = v12;
      uint64_t v31 = v16;
      if (v28) {
        goto LABEL_19;
      }
    }
    uint64_t v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v17)
    {
      int v38 = *v30;
      int v39 = v30[1];
      *uint64_t v31 = 16 * (((268439553 * (unint64_t)(3584 * v38)) >> 32) >> 12) + 4096;
      v31[1] = 16 * (((268439553 * (unint64_t)(3584 * v39)) >> 32) >> 12) + 4096;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v10 - v26;
    do
    {
      unint64_t v42 = v12;
      unint64_t v43 = v16;
      if (v27)
      {
        int v44 = v12[1];
        unint64_t v42 = v12 + 2;
        *uint64_t v16 = 16 * (((268439553 * (unint64_t)(3584 * *v12)) >> 32) >> 12) + 4096;
        v16[1] = 16 * ((268439553 * (unint64_t)(3584 * v44)) >> 44) + 4096;
        unint64_t v43 = v16 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          int v46 = v42[1];
          unsigned int v47 = 16 * (((268439553 * (unint64_t)(3584 * *v42)) >> 32) >> 12) + 4096;
          *unint64_t v43 = 16 * (((268439553 * (unint64_t)(3584 * *v42)) >> 32) >> 12) + 4096;
          unsigned int v48 = 16 * (((268439553 * (unint64_t)(3584 * v46)) >> 32) >> 12) + 4096;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v17)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *unint64_t v43 = 16 * (((268439553 * (unint64_t)(3584 * v49)) >> 32) >> 12) + 4096;
        v43[1] = 16 * (((268439553 * (unint64_t)(3584 * v50)) >> 32) >> 12) + 4096;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if (v27)
    {
      int v51 = *v12;
      int v52 = v12[1];
      v12 += 2;
      *uint64_t v16 = 16 * (((268439553 * (unint64_t)(3584 * v51)) >> 32) >> 12) + 4096;
      v16[1] = 16 * ((268439553 * (unint64_t)(3584 * v52)) >> 44) + 4096;
      v16 += 2;
    }
    if (v28)
    {
      uint64_t v53 = -(uint64_t)v28;
      do
      {
        int v54 = *v12;
        int v55 = v12[1];
        v12 += 2;
        *uint64_t v16 = 16 * (((268439553 * (unint64_t)(3584 * v54)) >> 32) >> 12) + 4096;
        v16[1] = 16 * ((268439553 * (unint64_t)(3584 * v55)) >> 44) + 4096;
        v16 += 2;
        BOOL v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      uint64_t v56 = 2 * v28;
    }
    else
    {
      uint64_t v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v17)
    {
      int v57 = *v12;
      int v58 = v12[1];
      *uint64_t v16 = 16 * (((268439553 * (unint64_t)(3584 * v57)) >> 32) >> 12) + 4096;
      v16[1] = 16 * (((268439553 * (unint64_t)(3584 * v58)) >> 32) >> 12) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  unint64_t v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17) {
    unint64_t v20 = v17;
  }
  if (v10 >= v16) {
    unint64_t v21 = v16;
  }
  else {
    unint64_t v21 = v10;
  }
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
          *(_WORD *)(v25 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v26 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  if (v21 >= (v8 & 1u)) {
    uint64_t v28 = v8 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v9;
  unint64_t v30 = v20 >> 1;
  uint64_t v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1) {
    unint64_t v30 = (v20 - v31) >> 1;
  }
  if (v8)
  {
    if (v29)
    {
      int v39 = v13[1];
      uint64_t v32 = v13 + 2;
      *uint64_t v19 = 16 * (((268439553 * (unint64_t)(3584 * *v13)) >> 32) >> 12) + 4096;
      v19[1] = 16 * ((268439553 * (unint64_t)(3584 * v39)) >> 44) + 4096;
      int v33 = v19 + 2;
      if (v30)
      {
LABEL_20:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          int v35 = *v32;
          int v36 = v32[1];
          v32 += 2;
          *int v33 = 16 * (((268439553 * (unint64_t)(3584 * v35)) >> 32) >> 12) + 4096;
          v33[1] = 16 * ((268439553 * (unint64_t)(3584 * v36)) >> 44) + 4096;
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v32 = v13;
      int v33 = v19;
      if (v30) {
        goto LABEL_20;
      }
    }
    uint64_t v38 = 0;
LABEL_26:
    if ((v38 | (unint64_t)v31) < v20)
    {
      int v40 = *v32;
      int v41 = v32[1];
      *int v33 = 16 * (((268439553 * (unint64_t)(3584 * v40)) >> 32) >> 12) + 4096;
      v33[1] = 16 * (((268439553 * (unint64_t)(3584 * v41)) >> 32) >> 12) + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v28)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v21 - v28;
    do
    {
      int v44 = v13;
      uint64_t v45 = v19;
      if (v29)
      {
        int v46 = v13[1];
        int v44 = v13 + 2;
        *uint64_t v19 = 16 * (((268439553 * (unint64_t)(3584 * *v13)) >> 32) >> 12) + 4096;
        v19[1] = 16 * ((268439553 * (unint64_t)(3584 * v46)) >> 44) + 4096;
        uint64_t v45 = v19 + 2;
      }
      if (v30)
      {
        uint64_t v47 = -(uint64_t)v30;
        do
        {
          int v48 = v44[1];
          unsigned int v49 = 16 * (((268439553 * (unint64_t)(3584 * *v44)) >> 32) >> 12) + 4096;
          *uint64_t v45 = 16 * (((268439553 * (unint64_t)(3584 * *v44)) >> 32) >> 12) + 4096;
          unsigned int v50 = 16 * (((268439553 * (unint64_t)(3584 * v48)) >> 32) >> 12) + 4096;
          v45[1] = v50;
          v44 += 2;
          v45[2] = v49;
          v45[3] = v50;
          v45 += 4;
          BOOL v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      if ((v31 | (2 * v30)) < v20)
      {
        int v51 = *v44;
        int v52 = v44[1];
        *uint64_t v45 = 16 * (((268439553 * (unint64_t)(3584 * v51)) >> 32) >> 12) + 4096;
        v45[1] = 16 * (((268439553 * (unint64_t)(3584 * v52)) >> 32) >> 12) + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + (v8 & 1) < v21)
  {
    if (v29)
    {
      int v53 = *v13;
      int v54 = v13[1];
      v13 += 2;
      *uint64_t v19 = 16 * (((268439553 * (unint64_t)(3584 * v53)) >> 32) >> 12) + 4096;
      v19[1] = 16 * ((268439553 * (unint64_t)(3584 * v54)) >> 44) + 4096;
      v19 += 2;
    }
    if (v30)
    {
      uint64_t v55 = -(uint64_t)v30;
      do
      {
        int v56 = *v13;
        int v57 = v13[1];
        v13 += 2;
        *uint64_t v19 = 16 * (((268439553 * (unint64_t)(3584 * v56)) >> 32) >> 12) + 4096;
        v19[1] = 16 * ((268439553 * (unint64_t)(3584 * v57)) >> 44) + 4096;
        v19 += 2;
        BOOL v37 = __CFADD__(v55++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v20)
    {
      int v58 = *v13;
      int v59 = v13[1];
      *uint64_t v19 = 16 * (((268439553 * (unint64_t)(3584 * v58)) >> 32) >> 12) + 4096;
      v19[1] = 16 * (((268439553 * (unint64_t)(3584 * v59)) >> 32) >> 12) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  unint64_t v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17) {
    unint64_t v20 = v17;
  }
  if (v10 >= v16) {
    unint64_t v21 = v16;
  }
  else {
    unint64_t v21 = v10;
  }
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
          *(_WORD *)(v25 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v26 + 2 * i))) >> 32) >> 12);
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  if (v21 >= (v8 & 1u)) {
    uint64_t v28 = v8 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v9;
  unint64_t v30 = v20 >> 1;
  uint64_t v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1) {
    unint64_t v30 = (v20 - v31) >> 1;
  }
  if (v8)
  {
    if (v29)
    {
      int v39 = v13[1];
      uint64_t v32 = v13 + 2;
      *uint64_t v19 = 16 * (((268439553 * (unint64_t)(4095 * *v13)) >> 32) >> 12);
      v19[1] = 16 * ((268439553 * (unint64_t)(4095 * v39)) >> 44);
      int v33 = v19 + 2;
      if (v30)
      {
LABEL_20:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          int v35 = *v32;
          int v36 = v32[1];
          v32 += 2;
          *int v33 = 16 * (((268439553 * (unint64_t)(4095 * v35)) >> 32) >> 12);
          v33[1] = 16 * ((268439553 * (unint64_t)(4095 * v36)) >> 44);
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v32 = v13;
      int v33 = v19;
      if (v30) {
        goto LABEL_20;
      }
    }
    uint64_t v38 = 0;
LABEL_26:
    if ((v38 | (unint64_t)v31) < v20)
    {
      int v40 = *v32;
      int v41 = v32[1];
      *int v33 = 16 * (((268439553 * (unint64_t)(4095 * v40)) >> 32) >> 12);
      v33[1] = 16 * (((268439553 * (unint64_t)(4095 * v41)) >> 32) >> 12);
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v28)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v21 - v28;
    do
    {
      int v44 = v13;
      uint64_t v45 = v19;
      if (v29)
      {
        int v46 = v13[1];
        int v44 = v13 + 2;
        *uint64_t v19 = 16 * (((268439553 * (unint64_t)(4095 * *v13)) >> 32) >> 12);
        v19[1] = 16 * ((268439553 * (unint64_t)(4095 * v46)) >> 44);
        uint64_t v45 = v19 + 2;
      }
      if (v30)
      {
        uint64_t v47 = -(uint64_t)v30;
        do
        {
          int v48 = v44[1];
          unsigned int v49 = 16 * (((268439553 * (unint64_t)(4095 * *v44)) >> 32) >> 12);
          *uint64_t v45 = 16 * (((268439553 * (unint64_t)(4095 * *v44)) >> 32) >> 12);
          unsigned int v50 = 16 * (((268439553 * (unint64_t)(4095 * v48)) >> 32) >> 12);
          v45[1] = v50;
          v44 += 2;
          v45[2] = v49;
          v45[3] = v50;
          v45 += 4;
          BOOL v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      if ((v31 | (2 * v30)) < v20)
      {
        int v51 = *v44;
        int v52 = v44[1];
        *uint64_t v45 = 16 * (((268439553 * (unint64_t)(4095 * v51)) >> 32) >> 12);
        v45[1] = 16 * (((268439553 * (unint64_t)(4095 * v52)) >> 32) >> 12);
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + (v8 & 1) < v21)
  {
    if (v29)
    {
      int v53 = *v13;
      int v54 = v13[1];
      v13 += 2;
      *uint64_t v19 = 16 * (((268439553 * (unint64_t)(4095 * v53)) >> 32) >> 12);
      v19[1] = 16 * ((268439553 * (unint64_t)(4095 * v54)) >> 44);
      v19 += 2;
    }
    if (v30)
    {
      uint64_t v55 = -(uint64_t)v30;
      do
      {
        int v56 = *v13;
        int v57 = v13[1];
        v13 += 2;
        *uint64_t v19 = 16 * (((268439553 * (unint64_t)(4095 * v56)) >> 32) >> 12);
        v19[1] = 16 * ((268439553 * (unint64_t)(4095 * v57)) >> 44);
        v19 += 2;
        BOOL v37 = __CFADD__(v55++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v20)
    {
      int v58 = *v13;
      int v59 = v13[1];
      *uint64_t v19 = 16 * (((268439553 * (unint64_t)(4095 * v58)) >> 32) >> 12);
      v19[1] = 16 * (((268439553 * (unint64_t)(4095 * v59)) >> 32) >> 12);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = a7[2] + v26 * v18 + v19;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = -1;
          *(_WORD *)(v28 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v29 + 2 * i))) >> 32) >> 12)
                                  + 4096;
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v22 >> 1;
  unint64_t v35 = (v22 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      int v38 = v14[1];
      int v36 = v14 + 2;
      _WORD *v21 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
      v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v38)) >> 44) + 4096;
      BOOL v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      int v36 = v14;
      BOOL v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      unint64_t v40 = (268439553 * (unint64_t)(3584 * v36[1])) >> 44;
      *BOOL v37 = 16 * (((268439553 * (unint64_t)(3584 * *v36)) >> 32) >> 12) + 4096;
      v37[1] = 16 * v40 + 4096;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      int v44 = v14;
      uint64_t v45 = v21;
      if (v33)
      {
        int v46 = v14[1];
        int v44 = v14 + 2;
        _WORD *v21 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
        v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v46)) >> 44) + 4096;
        uint64_t v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          unint64_t v48 = (268439553 * (unint64_t)(3584 * v44[1])) >> 44;
          *uint64_t v45 = 16 * (((268439553 * (unint64_t)(3584 * *v44)) >> 32) >> 12) + 4096;
          v45[1] = 16 * v48 + 4096;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      int v49 = *v14;
      int v50 = v14[1];
      v14 += 2;
      _WORD *v21 = 16 * (((268439553 * (unint64_t)(3584 * v49)) >> 32) >> 12) + 4096;
      v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v50)) >> 44) + 4096;
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        unint64_t v52 = (268439553 * (unint64_t)(3584 * v14[1])) >> 44;
        _WORD *v21 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
        v21[1] = 16 * v52 + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v19;
    uint64_t v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v27 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v22 >> 1;
  unint64_t v33 = (v22 - v10) >> 1;
  if (v32 >= v33) {
    unint64_t v32 = v33;
  }
  if (v12)
  {
    if (v31)
    {
      int v36 = v14[1];
      unint64_t v34 = v14 + 2;
      _WORD *v21 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
      v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v36)) >> 44) + 4096;
      unint64_t v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v34 = v14;
      unint64_t v35 = v21;
      if (!v32) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = -(uint64_t)v32;
    do
    {
      unint64_t v38 = (268439553 * (unint64_t)(3584 * v34[1])) >> 44;
      *unint64_t v35 = 16 * (((268439553 * (unint64_t)(3584 * *v34)) >> 32) >> 12) + 4096;
      v35[1] = 16 * v38 + 4096;
      v34 += 2;
      v35 += 2;
      BOOL v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v30;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v31)
      {
        int v44 = v14[1];
        unint64_t v42 = v14 + 2;
        _WORD *v21 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
        v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v44)) >> 44) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v32)
      {
        uint64_t v45 = -(uint64_t)v32;
        do
        {
          unint64_t v46 = (268439553 * (unint64_t)(3584 * v42[1])) >> 44;
          *uint64_t v43 = 16 * (((268439553 * (unint64_t)(3584 * *v42)) >> 32) >> 12) + 4096;
          v43[1] = 16 * v46 + 4096;
          v42 += 2;
          v43 += 2;
          BOOL v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if (v31)
    {
      int v47 = *v14;
      int v48 = v14[1];
      v14 += 2;
      _WORD *v21 = 16 * (((268439553 * (unint64_t)(3584 * v47)) >> 32) >> 12) + 4096;
      v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v48)) >> 44) + 4096;
      v21 += 2;
    }
    if (v32)
    {
      uint64_t v49 = -(uint64_t)v32;
      do
      {
        unint64_t v50 = (268439553 * (unint64_t)(3584 * v14[1])) >> 44;
        _WORD *v21 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
        v21[1] = 16 * v50 + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v19;
    uint64_t v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v27 + 2 * i))) >> 32) >> 12);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v22 >> 1;
  unint64_t v33 = (v22 - v10) >> 1;
  if (v32 >= v33) {
    unint64_t v32 = v33;
  }
  if (v12)
  {
    if (v31)
    {
      int v36 = v14[1];
      unint64_t v34 = v14 + 2;
      _WORD *v21 = 16 * (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12);
      v21[1] = 16 * ((268439553 * (unint64_t)(4095 * v36)) >> 44);
      unint64_t v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v34 = v14;
      unint64_t v35 = v21;
      if (!v32) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = -(uint64_t)v32;
    do
    {
      unint64_t v38 = (268439553 * (unint64_t)(4095 * v34[1])) >> 44;
      *unint64_t v35 = 16 * (((268439553 * (unint64_t)(4095 * *v34)) >> 32) >> 12);
      v35[1] = 16 * v38;
      v34 += 2;
      v35 += 2;
      BOOL v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v30;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v31)
      {
        int v44 = v14[1];
        unint64_t v42 = v14 + 2;
        _WORD *v21 = 16 * (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12);
        v21[1] = 16 * ((268439553 * (unint64_t)(4095 * v44)) >> 44);
        uint64_t v43 = v21 + 2;
      }
      if (v32)
      {
        uint64_t v45 = -(uint64_t)v32;
        do
        {
          unint64_t v46 = (268439553 * (unint64_t)(4095 * v42[1])) >> 44;
          *uint64_t v43 = 16 * (((268439553 * (unint64_t)(4095 * *v42)) >> 32) >> 12);
          v43[1] = 16 * v46;
          v42 += 2;
          v43 += 2;
          BOOL v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if (v31)
    {
      int v47 = *v14;
      int v48 = v14[1];
      v14 += 2;
      _WORD *v21 = 16 * (((268439553 * (unint64_t)(4095 * v47)) >> 32) >> 12);
      v21[1] = 16 * ((268439553 * (unint64_t)(4095 * v48)) >> 44);
      v21 += 2;
    }
    if (v32)
    {
      uint64_t v49 = -(uint64_t)v32;
      do
      {
        unint64_t v50 = (268439553 * (unint64_t)(4095 * v14[1])) >> 44;
        _WORD *v21 = 16 * (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12);
        v21[1] = 16 * v50;
        v14 += 2;
        v21 += 2;
        BOOL v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf22_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      unint64_t v38 = v16 + 2;
      unsigned int v40 = (((268439553
                           * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v16 + v15 + 2))) >> 32) >> 12)
          + (((268439553 * (unint64_t)(3584 * v16[1])) >> 32) >> 12);
      *uint64_t v23 = (8
            * ((((268439553
                              * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v16 + v15))) >> 32) >> 12)
             + (((268439553 * (unint64_t)(3584 * *v16)) >> 32) >> 12))
            + 4104) & 0xFFF0;
      v23[1] = (8 * v40 + 4104) & 0xFFF0;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      int v42 = *v38;
      int v43 = v38[1];
      int v44 = *(unsigned __int16 *)((char *)v38 + v15);
      int v45 = *(unsigned __int16 *)((char *)v38 + v15 + 2);
      v38 += 2;
      *BOOL v39 = (8
            * (((268439553 * (unint64_t)(3584 * v44)) >> 44)
             + (((268439553 * (unint64_t)(3584 * v42)) >> 32) >> 12))
            + 4104) & 0xFFF0;
      v39[1] = (8
              * ((((268439553 * (unint64_t)(3584 * v45)) >> 32) >> 12)
               + (((268439553 * (unint64_t)(3584 * v43)) >> 32) >> 12))
              + 4104) & 0xFFF0;
      v39 += 2;
      BOOL v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      uint64_t v49 = v16;
      unint64_t v50 = v23;
      if (v9)
      {
        uint64_t v49 = v16 + 2;
        unsigned int v51 = (((268439553
                             * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v16 + v15 + 2))) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v16[1])) >> 32) >> 12);
        *uint64_t v23 = (8
              * (((268439553 * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v16 + v15))) >> 44)
               + (((268439553 * (unint64_t)(3584 * *v16)) >> 32) >> 12))
              + 4104) & 0xFFF0;
        v23[1] = (8 * v51 + 4104) & 0xFFF0;
        unint64_t v50 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v52 = -(uint64_t)v37;
        do
        {
          int v53 = *v49;
          int v54 = v49[1];
          int v55 = *(unsigned __int16 *)((char *)v49 + v15);
          int v56 = *(unsigned __int16 *)((char *)v49 + v15 + 2);
          v49 += 2;
          _WORD *v50 = (8
                * (((268439553 * (unint64_t)(3584 * v55)) >> 44)
                 + (((268439553 * (unint64_t)(3584 * v53)) >> 32) >> 12))
                + 4104) & 0xFFF0;
          v50[1] = (8
                  * ((((268439553 * (unint64_t)(3584 * v56)) >> 32) >> 12)
                   + (((268439553 * (unint64_t)(3584 * v54)) >> 32) >> 12))
                  + 4104) & 0xFFF0;
          v50 += 2;
          BOOL v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += v15;
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf22_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v40 = v16[1];
      unint64_t v38 = v16 + 2;
      *uint64_t v23 = 16 * (((268439553 * (unint64_t)(3584 * *v16)) >> 32) >> 12) + 4096;
      v23[1] = 16 * ((268439553 * (unint64_t)(3584 * v40)) >> 44) + 4096;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      unint64_t v42 = (268439553 * (unint64_t)(3584 * v38[1])) >> 44;
      *BOOL v39 = 16 * (((268439553 * (unint64_t)(3584 * *v38)) >> 32) >> 12) + 4096;
      v39[1] = 16 * v42 + 4096;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v35;
    uint64_t v46 = 2 * v15;
    do
    {
      unint64_t v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1];
        unint64_t v47 = v16 + 2;
        *uint64_t v23 = 16 * (((268439553 * (unint64_t)(3584 * *v16)) >> 32) >> 12) + 4096;
        v23[1] = 16 * ((268439553 * (unint64_t)(3584 * v49)) >> 44) + 4096;
        unint64_t v48 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          unint64_t v51 = (268439553 * (unint64_t)(3584 * v47[1])) >> 44;
          *unint64_t v48 = 16 * (((268439553 * (unint64_t)(3584 * *v47)) >> 32) >> 12) + 4096;
          v48[1] = 16 * v51 + 4096;
          v47 += 2;
          v48 += 2;
          BOOL v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v46);
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf22_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 12);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      unint64_t v38 = v16 + 2;
      unsigned int v40 = (((268439553
                           * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v16 + v15 + 2))) >> 32) >> 12)
          + (((268439553 * (unint64_t)(4095 * v16[1])) >> 32) >> 12);
      *uint64_t v23 = (8
            * (((268439553 * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v16 + v15))) >> 44)
             + (((268439553 * (unint64_t)(4095 * *v16)) >> 32) >> 12))
            + 8) & 0xFFF0;
      v23[1] = (8 * v40 + 8) & 0xFFF0;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      int v42 = *v38;
      int v43 = v38[1];
      int v44 = *(unsigned __int16 *)((char *)v38 + v15);
      int v45 = *(unsigned __int16 *)((char *)v38 + v15 + 2);
      v38 += 2;
      *BOOL v39 = (8
            * (((268439553 * (unint64_t)(4095 * v44)) >> 44)
             + (((268439553 * (unint64_t)(4095 * v42)) >> 32) >> 12))
            + 8) & 0xFFF0;
      v39[1] = (8
              * ((((268439553 * (unint64_t)(4095 * v45)) >> 32) >> 12)
               + (((268439553 * (unint64_t)(4095 * v43)) >> 32) >> 12))
              + 8) & 0xFFF0;
      v39 += 2;
      BOOL v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      int v49 = v16;
      uint64_t v50 = v23;
      if (v9)
      {
        int v49 = v16 + 2;
        unsigned int v51 = (((268439553
                             * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v16 + v15 + 2))) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * v16[1])) >> 32) >> 12);
        *uint64_t v23 = (8
              * (((268439553 * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v16 + v15))) >> 44)
               + (((268439553 * (unint64_t)(4095 * *v16)) >> 32) >> 12))
              + 8) & 0xFFF0;
        v23[1] = (8 * v51 + 8) & 0xFFF0;
        uint64_t v50 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v52 = -(uint64_t)v37;
        do
        {
          int v53 = *v49;
          int v54 = v49[1];
          int v55 = *(unsigned __int16 *)((char *)v49 + v15);
          int v56 = *(unsigned __int16 *)((char *)v49 + v15 + 2);
          v49 += 2;
          _WORD *v50 = (8
                * (((268439553 * (unint64_t)(4095 * v55)) >> 44)
                 + (((268439553 * (unint64_t)(4095 * v53)) >> 32) >> 12))
                + 8) & 0xFFF0;
          v50[1] = (8
                  * ((((268439553 * (unint64_t)(4095 * v56)) >> 32) >> 12)
                   + (((268439553 * (unint64_t)(4095 * v54)) >> 32) >> 12))
                  + 8) & 0xFFF0;
          v50 += 2;
          BOOL v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += v15;
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf22_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 12);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v40 = v16[1];
      unint64_t v38 = v16 + 2;
      *uint64_t v23 = 16 * (((268439553 * (unint64_t)(4095 * *v16)) >> 32) >> 12);
      v23[1] = 16 * ((268439553 * (unint64_t)(4095 * v40)) >> 44);
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      unint64_t v42 = (268439553 * (unint64_t)(4095 * v38[1])) >> 44;
      *BOOL v39 = 16 * (((268439553 * (unint64_t)(4095 * *v38)) >> 32) >> 12);
      v39[1] = 16 * v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v35;
    uint64_t v46 = 2 * v15;
    do
    {
      unint64_t v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1];
        unint64_t v47 = v16 + 2;
        *uint64_t v23 = 16 * (((268439553 * (unint64_t)(4095 * *v16)) >> 32) >> 12);
        v23[1] = 16 * ((268439553 * (unint64_t)(4095 * v49)) >> 44);
        unint64_t v48 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          unint64_t v51 = (268439553 * (unint64_t)(4095 * v47[1])) >> 44;
          *unint64_t v48 = 16 * (((268439553 * (unint64_t)(4095 * *v47)) >> 32) >> 12);
          v48[1] = 16 * v51;
          v47 += 2;
          v48 += 2;
          BOOL v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v46);
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_Copy_sf22_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  unint64_t v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2]) {
    unint64_t v17 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v10 = a6[3];
  }
  if (v10)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v24 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v10);
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v17 >> 1;
  uint64_t v29 = v9 & 1;
  if (v17 >> 1 >= (v17 - v29) >> 1) {
    unint64_t v28 = (v17 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v12[1];
      uint64_t v30 = v12 + 2;
      *uint64_t v16 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v12)) >> 32) >> 10) << 6)
           + 4096;
      v16[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v37)) >> 42) << 6) + 4096;
      uint64_t v31 = v16 + 2;
      if (v28)
      {
LABEL_19:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30;
          int v34 = v30[1];
          v30 += 2;
          *uint64_t v31 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v33)) >> 32) >> 10) << 6)
               + 4096;
          v31[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v34)) >> 42) << 6) + 4096;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v30 = v12;
      uint64_t v31 = v16;
      if (v28) {
        goto LABEL_19;
      }
    }
    uint64_t v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v17)
    {
      int v38 = *v30;
      int v39 = v30[1];
      *uint64_t v31 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v38)) >> 32) >> 10) << 6)
           + 4096;
      v31[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v39)) >> 32) >> 10) << 6)
             + 4096;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v10 - v26;
    do
    {
      unint64_t v42 = v12;
      BOOL v43 = v16;
      if (v27)
      {
        int v44 = v12[1];
        unint64_t v42 = v12 + 2;
        *uint64_t v16 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v12)) >> 32) >> 10) << 6)
             + 4096;
        v16[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v44)) >> 42) << 6) + 4096;
        BOOL v43 = v16 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          int v46 = v42[1];
          unsigned int v47 = (((67109889 * (unint64_t)(896 * *v42)) >> 32) >> 10 << 6) + 4096;
          *BOOL v43 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v42)) >> 32) >> 10) << 6)
               + 4096;
          unsigned int v48 = (((67109889 * (unint64_t)(896 * v46)) >> 32) >> 10 << 6) + 4096;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v17)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *BOOL v43 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v49)) >> 32) >> 10) << 6)
             + 4096;
        v43[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v50)) >> 32) >> 10) << 6)
               + 4096;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if (v27)
    {
      int v51 = *v12;
      int v52 = v12[1];
      v12 += 2;
      *uint64_t v16 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v51)) >> 32) >> 10) << 6)
           + 4096;
      v16[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v52)) >> 42) << 6) + 4096;
      v16 += 2;
    }
    if (v28)
    {
      uint64_t v53 = -(uint64_t)v28;
      do
      {
        int v54 = *v12;
        int v55 = v12[1];
        v12 += 2;
        *uint64_t v16 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v54)) >> 32) >> 10) << 6)
             + 4096;
        v16[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v55)) >> 42) << 6) + 4096;
        v16 += 2;
        BOOL v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      uint64_t v56 = 2 * v28;
    }
    else
    {
      uint64_t v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v17)
    {
      int v57 = *v12;
      int v58 = v12[1];
      *uint64_t v16 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v57)) >> 32) >> 10) << 6)
           + 4096;
      v16[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v58)) >> 32) >> 10) << 6)
             + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  unint64_t v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17) {
    unint64_t v20 = v17;
  }
  if (v10 >= v16) {
    unint64_t v21 = v16;
  }
  else {
    unint64_t v21 = v10;
  }
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
          *(_WORD *)(v25 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v26 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  if (v21 >= (v8 & 1u)) {
    uint64_t v28 = v8 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v9;
  unint64_t v30 = v20 >> 1;
  uint64_t v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1) {
    unint64_t v30 = (v20 - v31) >> 1;
  }
  if (v8)
  {
    if (v29)
    {
      int v39 = v13[1];
      uint64_t v32 = v13 + 2;
      *uint64_t v19 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v13)) >> 32) >> 10) << 6)
           + 4096;
      v19[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v39)) >> 42) << 6) + 4096;
      int v33 = v19 + 2;
      if (v30)
      {
LABEL_20:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          int v35 = *v32;
          int v36 = v32[1];
          v32 += 2;
          *int v33 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v35)) >> 32) >> 10) << 6)
               + 4096;
          v33[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v36)) >> 42) << 6) + 4096;
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v32 = v13;
      int v33 = v19;
      if (v30) {
        goto LABEL_20;
      }
    }
    uint64_t v38 = 0;
LABEL_26:
    if ((v38 | (unint64_t)v31) < v20)
    {
      int v40 = *v32;
      int v41 = v32[1];
      *int v33 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v40)) >> 32) >> 10) << 6)
           + 4096;
      v33[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v41)) >> 32) >> 10) << 6)
             + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v28)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v21 - v28;
    do
    {
      int v44 = v13;
      uint64_t v45 = v19;
      if (v29)
      {
        int v46 = v13[1];
        int v44 = v13 + 2;
        *uint64_t v19 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v13)) >> 32) >> 10) << 6)
             + 4096;
        v19[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v46)) >> 42) << 6) + 4096;
        uint64_t v45 = v19 + 2;
      }
      if (v30)
      {
        uint64_t v47 = -(uint64_t)v30;
        do
        {
          int v48 = v44[1];
          unsigned int v49 = (((67109889 * (unint64_t)(896 * *v44)) >> 32) >> 10 << 6) + 4096;
          *uint64_t v45 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v44)) >> 32) >> 10) << 6)
               + 4096;
          unsigned int v50 = (((67109889 * (unint64_t)(896 * v48)) >> 32) >> 10 << 6) + 4096;
          v45[1] = v50;
          v44 += 2;
          v45[2] = v49;
          v45[3] = v50;
          v45 += 4;
          BOOL v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      if ((v31 | (2 * v30)) < v20)
      {
        int v51 = *v44;
        int v52 = v44[1];
        *uint64_t v45 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v51)) >> 32) >> 10) << 6)
             + 4096;
        v45[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v52)) >> 32) >> 10) << 6)
               + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + (v8 & 1) < v21)
  {
    if (v29)
    {
      int v53 = *v13;
      int v54 = v13[1];
      v13 += 2;
      *uint64_t v19 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v53)) >> 32) >> 10) << 6)
           + 4096;
      v19[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v54)) >> 42) << 6) + 4096;
      v19 += 2;
    }
    if (v30)
    {
      uint64_t v55 = -(uint64_t)v30;
      do
      {
        int v56 = *v13;
        int v57 = v13[1];
        v13 += 2;
        *uint64_t v19 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v56)) >> 32) >> 10) << 6)
             + 4096;
        v19[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v57)) >> 42) << 6) + 4096;
        v19 += 2;
        BOOL v37 = __CFADD__(v55++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v20)
    {
      int v58 = *v13;
      int v59 = v13[1];
      *uint64_t v19 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v58)) >> 32) >> 10) << 6)
           + 4096;
      v19[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v59)) >> 32) >> 10) << 6)
             + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  unint64_t v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17) {
    unint64_t v20 = v17;
  }
  if (v10 >= v16) {
    unint64_t v21 = v16;
  }
  else {
    unint64_t v21 = v10;
  }
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
          *(_WORD *)(v25 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v26 + 2 * i))) >> 32) >> 10) << 6;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  if (v21 >= (v8 & 1u)) {
    uint64_t v28 = v8 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v9;
  unint64_t v30 = v20 >> 1;
  uint64_t v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1) {
    unint64_t v30 = (v20 - v31) >> 1;
  }
  if (v8)
  {
    if (v29)
    {
      int v39 = v13[1];
      uint64_t v32 = v13 + 2;
      *uint64_t v19 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v13)) >> 32) >> 10) << 6;
      v19[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v39)) >> 42) << 6;
      int v33 = v19 + 2;
      if (v30)
      {
LABEL_20:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          int v35 = *v32;
          int v36 = v32[1];
          v32 += 2;
          *int v33 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v35)) >> 32) >> 10) << 6;
          v33[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v36)) >> 42) << 6;
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v32 = v13;
      int v33 = v19;
      if (v30) {
        goto LABEL_20;
      }
    }
    uint64_t v38 = 0;
LABEL_26:
    if ((v38 | (unint64_t)v31) < v20)
    {
      int v40 = *v32;
      int v41 = v32[1];
      *int v33 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v40)) >> 32) >> 10) << 6;
      v33[1] = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v41)) >> 32) >> 10) << 6;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v28)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v21 - v28;
    do
    {
      int v44 = v13;
      uint64_t v45 = v19;
      if (v29)
      {
        int v46 = v13[1];
        int v44 = v13 + 2;
        *uint64_t v19 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v13)) >> 32) >> 10) << 6;
        v19[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v46)) >> 42) << 6;
        uint64_t v45 = v19 + 2;
      }
      if (v30)
      {
        uint64_t v47 = -(uint64_t)v30;
        do
        {
          int v48 = v44[1];
          unsigned int v49 = ((67109889 * (unint64_t)(1023 * *v44)) >> 32) >> 10 << 6;
          *uint64_t v45 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v44)) >> 32) >> 10) << 6;
          unsigned int v50 = ((67109889 * (unint64_t)(1023 * v48)) >> 32) >> 10 << 6;
          v45[1] = v50;
          v44 += 2;
          v45[2] = v49;
          v45[3] = v50;
          v45 += 4;
          BOOL v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      if ((v31 | (2 * v30)) < v20)
      {
        int v51 = *v44;
        int v52 = v44[1];
        *uint64_t v45 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v51)) >> 32) >> 10) << 6;
        v45[1] = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v52)) >> 32) >> 10) << 6;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + (v8 & 1) < v21)
  {
    if (v29)
    {
      int v53 = *v13;
      int v54 = v13[1];
      v13 += 2;
      *uint64_t v19 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v53)) >> 32) >> 10) << 6;
      v19[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v54)) >> 42) << 6;
      v19 += 2;
    }
    if (v30)
    {
      uint64_t v55 = -(uint64_t)v30;
      do
      {
        int v56 = *v13;
        int v57 = v13[1];
        v13 += 2;
        *uint64_t v19 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v56)) >> 32) >> 10) << 6;
        v19[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v57)) >> 42) << 6;
        v19 += 2;
        BOOL v37 = __CFADD__(v55++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v20)
    {
      int v58 = *v13;
      int v59 = v13[1];
      *uint64_t v19 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v58)) >> 32) >> 10) << 6;
      v19[1] = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v59)) >> 32) >> 10) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = a7[2] + v26 * v18 + v19;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = -1;
          *(_WORD *)(v28 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v29 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v22 >> 1;
  unint64_t v35 = (v22 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      int v38 = v14[1];
      int v36 = v14 + 2;
      _WORD *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v38)) >> 42) << 6) + 4096;
      BOOL v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      int v36 = v14;
      BOOL v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      unint64_t v40 = (67109889 * (unint64_t)(896 * v36[1])) >> 42;
      *BOOL v37 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v36)) >> 32) >> 10) << 6)
           + 4096;
      v37[1] = ((_WORD)v40 << 6) + 4096;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      int v44 = v14;
      uint64_t v45 = v21;
      if (v33)
      {
        int v46 = v14[1];
        int v44 = v14 + 2;
        _WORD *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
             + 4096;
        v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v46)) >> 42) << 6) + 4096;
        uint64_t v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          unint64_t v48 = (67109889 * (unint64_t)(896 * v44[1])) >> 42;
          *uint64_t v45 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v44)) >> 32) >> 10) << 6)
               + 4096;
          v45[1] = ((_WORD)v48 << 6) + 4096;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      int v49 = *v14;
      int v50 = v14[1];
      v14 += 2;
      _WORD *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v49)) >> 32) >> 10) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v50)) >> 42) << 6) + 4096;
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        unint64_t v52 = (67109889 * (unint64_t)(896 * v14[1])) >> 42;
        _WORD *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
             + 4096;
        v21[1] = ((_WORD)v52 << 6) + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v19;
    uint64_t v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v27 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v22 >> 1;
  unint64_t v33 = (v22 - v10) >> 1;
  if (v32 >= v33) {
    unint64_t v32 = v33;
  }
  if (v12)
  {
    if (v31)
    {
      int v36 = v14[1];
      unint64_t v34 = v14 + 2;
      _WORD *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v36)) >> 42) << 6) + 4096;
      unint64_t v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v34 = v14;
      unint64_t v35 = v21;
      if (!v32) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = -(uint64_t)v32;
    do
    {
      unint64_t v38 = (67109889 * (unint64_t)(896 * v34[1])) >> 42;
      *unint64_t v35 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v34)) >> 32) >> 10) << 6)
           + 4096;
      v35[1] = ((_WORD)v38 << 6) + 4096;
      v34 += 2;
      v35 += 2;
      BOOL v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v30;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v31)
      {
        int v44 = v14[1];
        unint64_t v42 = v14 + 2;
        _WORD *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
             + 4096;
        v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v44)) >> 42) << 6) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v32)
      {
        uint64_t v45 = -(uint64_t)v32;
        do
        {
          unint64_t v46 = (67109889 * (unint64_t)(896 * v42[1])) >> 42;
          *uint64_t v43 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v42)) >> 32) >> 10) << 6)
               + 4096;
          v43[1] = ((_WORD)v46 << 6) + 4096;
          v42 += 2;
          v43 += 2;
          BOOL v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if (v31)
    {
      int v47 = *v14;
      int v48 = v14[1];
      v14 += 2;
      _WORD *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v47)) >> 32) >> 10) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v48)) >> 42) << 6) + 4096;
      v21 += 2;
    }
    if (v32)
    {
      uint64_t v49 = -(uint64_t)v32;
      do
      {
        unint64_t v50 = (67109889 * (unint64_t)(896 * v14[1])) >> 42;
        _WORD *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
             + 4096;
        v21[1] = ((_WORD)v50 << 6) + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v19;
    uint64_t v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v27 + 2 * i))) >> 32) >> 10) << 6;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v22 >> 1;
  unint64_t v33 = (v22 - v10) >> 1;
  if (v32 >= v33) {
    unint64_t v32 = v33;
  }
  if (v12)
  {
    if (v31)
    {
      int v36 = v14[1];
      unint64_t v34 = v14 + 2;
      _WORD *v21 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10) << 6;
      v21[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v36)) >> 42) << 6;
      unint64_t v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v34 = v14;
      unint64_t v35 = v21;
      if (!v32) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = -(uint64_t)v32;
    do
    {
      unint64_t v38 = (67109889 * (unint64_t)(1023 * v34[1])) >> 42;
      *unint64_t v35 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v34)) >> 32) >> 10) << 6;
      v35[1] = (_WORD)v38 << 6;
      v34 += 2;
      v35 += 2;
      BOOL v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v30;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v31)
      {
        int v44 = v14[1];
        unint64_t v42 = v14 + 2;
        _WORD *v21 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10) << 6;
        v21[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v44)) >> 42) << 6;
        uint64_t v43 = v21 + 2;
      }
      if (v32)
      {
        uint64_t v45 = -(uint64_t)v32;
        do
        {
          unint64_t v46 = (67109889 * (unint64_t)(1023 * v42[1])) >> 42;
          *uint64_t v43 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v42)) >> 32) >> 10) << 6;
          v43[1] = (_WORD)v46 << 6;
          v42 += 2;
          v43 += 2;
          BOOL v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if (v31)
    {
      int v47 = *v14;
      int v48 = v14[1];
      v14 += 2;
      _WORD *v21 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v47)) >> 32) >> 10) << 6;
      v21[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v48)) >> 42) << 6;
      v21 += 2;
    }
    if (v32)
    {
      uint64_t v49 = -(uint64_t)v32;
      do
      {
        unint64_t v50 = (67109889 * (unint64_t)(1023 * v14[1])) >> 42;
        _WORD *v21 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10) << 6;
        v21[1] = (_WORD)v50 << 6;
        v14 += 2;
        v21 += 2;
        BOOL v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf22_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      unint64_t v38 = v16 + 2;
      unsigned int v40 = (((67109889
                           * (unint64_t)(896 * *(unsigned __int16 *)((char *)v16 + v15 + 2))) >> 32) >> 10)
          + (((67109889 * (unint64_t)(896 * v16[1])) >> 32) >> 10);
      *uint64_t v23 = (32
            * ((((67109889
                              * (unint64_t)(896 * *(unsigned __int16 *)((char *)v16 + v15))) >> 32) >> 10)
             + (((67109889 * (unint64_t)(896 * *v16)) >> 32) >> 10))
            + 4128) & 0xFFC0;
      v23[1] = (32 * v40 + 4128) & 0xFFC0;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      int v42 = *v38;
      int v43 = v38[1];
      int v44 = *(unsigned __int16 *)((char *)v38 + v15);
      int v45 = *(unsigned __int16 *)((char *)v38 + v15 + 2);
      v38 += 2;
      *BOOL v39 = (32
            * (((67109889 * (unint64_t)(896 * v44)) >> 42)
             + (((67109889 * (unint64_t)(896 * v42)) >> 32) >> 10))
            + 4128) & 0xFFC0;
      v39[1] = (32
              * ((((67109889 * (unint64_t)(896 * v45)) >> 32) >> 10)
               + (((67109889 * (unint64_t)(896 * v43)) >> 32) >> 10))
              + 4128) & 0xFFC0;
      v39 += 2;
      BOOL v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      uint64_t v49 = v16;
      unint64_t v50 = v23;
      if (v9)
      {
        uint64_t v49 = v16 + 2;
        unsigned int v51 = (((67109889
                             * (unint64_t)(896 * *(unsigned __int16 *)((char *)v16 + v15 + 2))) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v16[1])) >> 32) >> 10);
        *uint64_t v23 = (32
              * (((67109889 * (unint64_t)(896 * *(unsigned __int16 *)((char *)v16 + v15))) >> 42)
               + (((67109889 * (unint64_t)(896 * *v16)) >> 32) >> 10))
              + 4128) & 0xFFC0;
        v23[1] = (32 * v51 + 4128) & 0xFFC0;
        unint64_t v50 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v52 = -(uint64_t)v37;
        do
        {
          int v53 = *v49;
          int v54 = v49[1];
          int v55 = *(unsigned __int16 *)((char *)v49 + v15);
          int v56 = *(unsigned __int16 *)((char *)v49 + v15 + 2);
          v49 += 2;
          _WORD *v50 = (32
                * (((67109889 * (unint64_t)(896 * v55)) >> 42)
                 + (((67109889 * (unint64_t)(896 * v53)) >> 32) >> 10))
                + 4128) & 0xFFC0;
          v50[1] = (32
                  * ((((67109889 * (unint64_t)(896 * v56)) >> 32) >> 10)
                   + (((67109889 * (unint64_t)(896 * v54)) >> 32) >> 10))
                  + 4128) & 0xFFC0;
          v50 += 2;
          BOOL v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += v15;
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf22_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v40 = v16[1];
      unint64_t v38 = v16 + 2;
      *uint64_t v23 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v16)) >> 32) >> 10) << 6)
           + 4096;
      v23[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v40)) >> 42) << 6) + 4096;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      unint64_t v42 = (67109889 * (unint64_t)(896 * v38[1])) >> 42;
      *BOOL v39 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v38)) >> 32) >> 10) << 6)
           + 4096;
      v39[1] = ((_WORD)v42 << 6) + 4096;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v35;
    uint64_t v46 = 2 * v15;
    do
    {
      unint64_t v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1];
        unint64_t v47 = v16 + 2;
        *uint64_t v23 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v16)) >> 32) >> 10) << 6)
             + 4096;
        v23[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v49)) >> 42) << 6) + 4096;
        unint64_t v48 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          unint64_t v51 = (67109889 * (unint64_t)(896 * v47[1])) >> 42;
          *unint64_t v48 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v47)) >> 32) >> 10) << 6)
               + 4096;
          v48[1] = ((_WORD)v51 << 6) + 4096;
          v47 += 2;
          v48 += 2;
          BOOL v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v46);
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf22_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 10) << 6;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      unint64_t v38 = v16 + 2;
      unsigned int v40 = (((67109889
                           * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v16 + v15 + 2))) >> 32) >> 10)
          + (((67109889 * (unint64_t)(1023 * v16[1])) >> 32) >> 10);
      *uint64_t v23 = (32
            * (((67109889 * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v16 + v15))) >> 42)
             + (((67109889 * (unint64_t)(1023 * *v16)) >> 32) >> 10))
            + 32) & 0xFFC0;
      v23[1] = (32 * v40 + 32) & 0xFFC0;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      int v42 = *v38;
      int v43 = v38[1];
      int v44 = *(unsigned __int16 *)((char *)v38 + v15);
      int v45 = *(unsigned __int16 *)((char *)v38 + v15 + 2);
      v38 += 2;
      *BOOL v39 = (32
            * (((67109889 * (unint64_t)(1023 * v44)) >> 42)
             + (((67109889 * (unint64_t)(1023 * v42)) >> 32) >> 10))
            + 32) & 0xFFC0;
      v39[1] = (32
              * ((((67109889 * (unint64_t)(1023 * v45)) >> 32) >> 10)
               + (((67109889 * (unint64_t)(1023 * v43)) >> 32) >> 10))
              + 32) & 0xFFC0;
      v39 += 2;
      BOOL v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      int v49 = v16;
      uint64_t v50 = v23;
      if (v9)
      {
        int v49 = v16 + 2;
        unsigned int v51 = (((67109889
                             * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v16 + v15 + 2))) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * v16[1])) >> 32) >> 10);
        *uint64_t v23 = (32
              * (((67109889 * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v16 + v15))) >> 42)
               + (((67109889 * (unint64_t)(1023 * *v16)) >> 32) >> 10))
              + 32) & 0xFFC0;
        v23[1] = (32 * v51 + 32) & 0xFFC0;
        uint64_t v50 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v52 = -(uint64_t)v37;
        do
        {
          int v53 = *v49;
          int v54 = v49[1];
          int v55 = *(unsigned __int16 *)((char *)v49 + v15);
          int v56 = *(unsigned __int16 *)((char *)v49 + v15 + 2);
          v49 += 2;
          _WORD *v50 = (32
                * (((67109889 * (unint64_t)(1023 * v55)) >> 42)
                 + (((67109889 * (unint64_t)(1023 * v53)) >> 32) >> 10))
                + 32) & 0xFFC0;
          v50[1] = (32
                  * ((((67109889 * (unint64_t)(1023 * v56)) >> 32) >> 10)
                   + (((67109889 * (unint64_t)(1023 * v54)) >> 32) >> 10))
                  + 32) & 0xFFC0;
          v50 += 2;
          BOOL v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += v15;
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf22_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 10) << 6;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v40 = v16[1];
      unint64_t v38 = v16 + 2;
      *uint64_t v23 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v16)) >> 32) >> 10) << 6;
      v23[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v40)) >> 42) << 6;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      unint64_t v42 = (67109889 * (unint64_t)(1023 * v38[1])) >> 42;
      *BOOL v39 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v38)) >> 32) >> 10) << 6;
      v39[1] = (_WORD)v42 << 6;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v35;
    uint64_t v46 = 2 * v15;
    do
    {
      unint64_t v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1];
        unint64_t v47 = v16 + 2;
        *uint64_t v23 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v16)) >> 32) >> 10) << 6;
        v23[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v49)) >> 42) << 6;
        unint64_t v48 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          unint64_t v51 = (67109889 * (unint64_t)(1023 * v47[1])) >> 42;
          *unint64_t v48 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v47)) >> 32) >> 10) << 6;
          v48[1] = (_WORD)v51 << 6;
          v47 += 2;
          v48 += 2;
          BOOL v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v46);
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_Copy_sf22_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v13 + 2 * v14);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  if (v10 >= v15) {
    unint64_t v10 = v15;
  }
  if (v10)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v13;
    uint64_t v24 = *a7 + *a8 * v13;
    uint64_t v25 = *a4;
    uint64_t v26 = v23 + v14;
    uint64_t v27 = v24 + v14;
    uint64_t v28 = *a3 + v25 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v26 + i) = -1;
          *(unsigned char *)(v27 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v10);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v30 = v8 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v19 >> 1;
  uint64_t v33 = v9 & 1;
  if (v19 >> 1 >= (v19 - v33) >> 1) {
    unint64_t v32 = (v19 - v33) >> 1;
  }
  if (v8)
  {
    if (v31)
    {
      int v41 = v12[1];
      unint64_t v34 = v12 + 2;
      *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v12)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v41)) >> 32) >> 8) + 16;
      uint64_t v35 = v18 + 2;
      if (v32)
      {
LABEL_20:
        uint64_t v36 = -(uint64_t)v32;
        do
        {
          int v37 = *v34;
          int v38 = v34[1];
          v34 += 2;
          *uint64_t v35 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v37)) >> 32) >> 8) + 16;
          v35[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v38)) >> 32) >> 8) + 16;
          v35 += 2;
          BOOL v39 = __CFADD__(v36++, 1);
        }
        while (!v39);
        uint64_t v40 = 2 * v32;
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v34 = v12;
      uint64_t v35 = v18;
      if (v32) {
        goto LABEL_20;
      }
    }
    uint64_t v40 = 0;
LABEL_26:
    if ((v40 | (unint64_t)v33) < v19)
    {
      int v42 = *v34;
      int v43 = v34[1];
      *uint64_t v35 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v42)) >> 32) >> 8) + 16;
      v35[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v43)) >> 32) >> 8) + 16;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v10 == v30)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v10 - v30;
    do
    {
      uint64_t v46 = v12;
      unint64_t v47 = v18;
      if (v31)
      {
        int v48 = v12[1];
        uint64_t v46 = v12 + 2;
        *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v12)) >> 32) >> 8) + 16;
        v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v48)) >> 32) >> 8) + 16;
        unint64_t v47 = v18 + 2;
      }
      if (v32)
      {
        uint64_t v49 = -(uint64_t)v32;
        do
        {
          int v50 = v46[1];
          unsigned int v51 = (((16777473 * (unint64_t)(224 * *v46)) >> 32) >> 8) + 16;
          unsigned char *v47 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v46)) >> 32) >> 8) + 16;
          unsigned int v52 = (((16777473 * (unint64_t)(224 * v50)) >> 32) >> 8) + 16;
          v47[1] = v52;
          v46 += 2;
          v47[2] = v51;
          v47[3] = v52;
          v47 += 4;
          BOOL v39 = __CFADD__(v49++, 1);
        }
        while (!v39);
      }
      if ((v33 | (2 * v32)) < v19)
      {
        int v53 = *v46;
        int v54 = v46[1];
        unsigned char *v47 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v53)) >> 32) >> 8) + 16;
        v47[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v54)) >> 32) >> 8) + 16;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += v17;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + (v8 & 1) < v10)
  {
    if (v31)
    {
      int v55 = *v12;
      int v56 = v12[1];
      v12 += 2;
      *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v55)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v56)) >> 32) >> 8) + 16;
      v18 += 2;
    }
    if (v32)
    {
      uint64_t v57 = -(uint64_t)v32;
      do
      {
        int v58 = *v12;
        int v59 = v12[1];
        v12 += 2;
        *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v58)) >> 32) >> 8) + 16;
        v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v59)) >> 32) >> 8) + 16;
        v18 += 2;
        BOOL v39 = __CFADD__(v57++, 1);
      }
      while (!v39);
      uint64_t v60 = 2 * v32;
    }
    else
    {
      uint64_t v60 = 0;
    }
    if ((v60 | (unint64_t)v33) < v19)
    {
      int v61 = *v12;
      int v62 = v12[1];
      *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v61)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v62)) >> 32) >> 8) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v13 + 2 * v14);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  if (v10 >= v15) {
    unint64_t v10 = v15;
  }
  if (v10)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v13 + v14;
    uint64_t v24 = *a3 + *a4 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
          *(unsigned char *)(v23 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v24 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v10);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v19 >> 1;
  uint64_t v29 = v9 & 1;
  if (v19 >> 1 >= (v19 - v29) >> 1) {
    unint64_t v28 = (v19 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v12[1];
      uint64_t v30 = v12 + 2;
      *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v12)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v37)) >> 32) >> 8) + 16;
      char v31 = v18 + 2;
      if (v28)
      {
LABEL_20:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30;
          int v34 = v30[1];
          v30 += 2;
          *char v31 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v33)) >> 32) >> 8) + 16;
          v31[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v34)) >> 32) >> 8) + 16;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v30 = v12;
      char v31 = v18;
      if (v28) {
        goto LABEL_20;
      }
    }
    uint64_t v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v19)
    {
      int v38 = *v30;
      int v39 = v30[1];
      *char v31 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v38)) >> 32) >> 8) + 16;
      v31[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v39)) >> 32) >> 8) + 16;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v10 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v10 - v26;
    do
    {
      int v42 = v12;
      int v43 = v18;
      if (v27)
      {
        int v44 = v12[1];
        int v42 = v12 + 2;
        *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v12)) >> 32) >> 8) + 16;
        v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v44)) >> 32) >> 8) + 16;
        int v43 = v18 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          int v46 = v42[1];
          unsigned int v47 = (((16777473 * (unint64_t)(224 * *v42)) >> 32) >> 8) + 16;
          *int v43 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v42)) >> 32) >> 8) + 16;
          unsigned int v48 = (((16777473 * (unint64_t)(224 * v46)) >> 32) >> 8) + 16;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v19)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *int v43 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v49)) >> 32) >> 8) + 16;
        v43[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v50)) >> 32) >> 8) + 16;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if (v27)
    {
      int v51 = *v12;
      int v52 = v12[1];
      v12 += 2;
      *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v51)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v52)) >> 32) >> 8) + 16;
      v18 += 2;
    }
    if (v28)
    {
      uint64_t v53 = -(uint64_t)v28;
      do
      {
        int v54 = *v12;
        int v55 = v12[1];
        v12 += 2;
        *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v54)) >> 32) >> 8) + 16;
        v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v55)) >> 32) >> 8) + 16;
        v18 += 2;
        BOOL v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      uint64_t v56 = 2 * v28;
    }
    else
    {
      uint64_t v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v19)
    {
      int v57 = *v12;
      int v58 = v12[1];
      *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v57)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v58)) >> 32) >> 8) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  unint64_t v12 = (__int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v13 + 2 * v14);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  if (v10 >= v15) {
    unint64_t v10 = v15;
  }
  if (v10)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v13 + v14;
    uint64_t v24 = *a3 + *a4 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
          *(unsigned char *)(v23 + i) = *(_WORD *)(v24 + 2 * i);
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v10);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v19 >> 1;
  uint64_t v29 = v9 & 1;
  if (v19 >> 1 >= (v19 - v29) >> 1) {
    unint64_t v28 = (v19 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      uint64_t v30 = v12 + 2;
      __int16 v37 = (unsigned __int16)v12[1] / 0x101u;
      *uint64_t v18 = (unsigned __int16)*v12 / 0x101u;
      v18[1] = v37;
      char v31 = v18 + 2;
      if (v28)
      {
LABEL_20:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          __int16 v33 = *v30;
          __int16 v34 = v30[1];
          v30 += 2;
          *char v31 = v33;
          v31[1] = v34;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v30 = v12;
      char v31 = v18;
      if (v28) {
        goto LABEL_20;
      }
    }
    uint64_t v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v19)
    {
      __int16 v38 = (unsigned __int16)*v30 / 0x101u;
      __int16 v39 = (unsigned __int16)v30[1] / 0x101u;
      *char v31 = v38;
      v31[1] = v39;
    }
    unint64_t v12 = (__int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v10 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v10 - v26;
    do
    {
      int v42 = v12;
      int v43 = v18;
      if (v27)
      {
        int v42 = v12 + 2;
        __int16 v44 = (unsigned __int16)v12[1] / 0x101u;
        *uint64_t v18 = *v12;
        v18[1] = v44;
        int v43 = v18 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          __int16 v46 = (unsigned __int16)*v42 / 0x101u;
          __int16 v47 = (unsigned __int16)v42[1] / 0x101u;
          *int v43 = *v42;
          v43[1] = v47;
          v42 += 2;
          v43[2] = v46;
          v43[3] = v47;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v19)
      {
        __int16 v48 = (unsigned __int16)*v42 / 0x101u;
        __int16 v49 = (unsigned __int16)v42[1] / 0x101u;
        *int v43 = v48;
        v43[1] = v49;
      }
      unint64_t v12 = (__int16 *)((char *)v12 + v11);
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if (v27)
    {
      __int16 v50 = *v12;
      __int16 v51 = v12[1];
      v12 += 2;
      *uint64_t v18 = v50;
      v18[1] = v51;
      v18 += 2;
    }
    if (v28)
    {
      uint64_t v52 = -(uint64_t)v28;
      do
      {
        __int16 v53 = *v12;
        __int16 v54 = v12[1];
        v12 += 2;
        *uint64_t v18 = v53;
        v18[1] = v54;
        v18 += 2;
        BOOL v35 = __CFADD__(v52++, 1);
      }
      while (!v35);
      uint64_t v55 = 2 * v28;
    }
    else
    {
      uint64_t v55 = 0;
    }
    if ((v55 | (unint64_t)v29) < v19)
    {
      __int16 v56 = (unsigned __int16)*v12 / 0x101u;
      __int16 v57 = (unsigned __int16)v12[1] / 0x101u;
      *uint64_t v18 = v56;
      v18[1] = v57;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = 2 * (v10 + v9);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16) {
    unint64_t v21 = v17 - v16;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = *a4;
    uint64_t v26 = a7[2] + v24 * v18 + v16;
    uint64_t v27 = *a7 + *a8 * v18 + v16;
    uint64_t v28 = *a3 + v25 * v11 + v12;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v26 + i) = -1;
          *(unsigned char *)(v27 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v23;
      v26 += v24;
      ++v22;
    }
    while (v22 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v10 = v9 & 1;
  }
  unint64_t v30 = v11 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v11 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  unint64_t v32 = v21 >> 1;
  unint64_t v33 = v21 - v10;
  if (v32 >= v33 >> 1) {
    unint64_t v34 = v33 >> 1;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v11)
  {
    if (v9)
    {
      int v37 = v14[1];
      BOOL v35 = v14 + 2;
      *uint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
      v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v37)) >> 32) >> 8) + 16;
      uint64_t v36 = v20 + 2;
      if (!v34)
      {
LABEL_26:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      BOOL v35 = v14;
      uint64_t v36 = v20;
      if (!v34) {
        goto LABEL_26;
      }
    }
    uint64_t v38 = -(uint64_t)v34;
    do
    {
      unint64_t v39 = (16777473 * (unint64_t)(224 * v35[1])) >> 40;
      *uint64_t v36 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v35)) >> 32) >> 8) + 16;
      v36[1] = v39 + 16;
      v36 += 2;
      v35 += 2;
      BOOL v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v31)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v8 - v31;
    do
    {
      int v43 = v14;
      __int16 v44 = v20;
      if (v9)
      {
        int v45 = v14[1];
        int v43 = v14 + 2;
        *uint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v45)) >> 32) >> 8) + 16;
        __int16 v44 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v46 = -(uint64_t)v34;
        do
        {
          unint64_t v47 = (16777473 * (unint64_t)(224 * v43[1])) >> 40;
          *__int16 v44 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v43)) >> 32) >> 8) + 16;
          v44[1] = v47 + 16;
          v44 += 2;
          v43 += 2;
          BOOL v40 = __CFADD__(v46++, 1);
        }
        while (!v40);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v30 < v8)
  {
    if (v9)
    {
      int v48 = *v14;
      int v49 = v14[1];
      v14 += 2;
      *uint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v48)) >> 32) >> 8) + 16;
      v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v49)) >> 32) >> 8) + 16;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v50 = -(uint64_t)v34;
      do
      {
        unint64_t v51 = (16777473 * (unint64_t)(224 * v14[1])) >> 40;
        *uint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v20[1] = v51 + 16;
        v20 += 2;
        v14 += 2;
        BOOL v40 = __CFADD__(v50++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = 2 * (v10 + v9);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16) {
    unint64_t v21 = v17 - v16;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v18 + v16;
    uint64_t v26 = *a3 + *a4 * v11 + v12;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v25 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v26 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v10 = v9 & 1;
  }
  unint64_t v28 = v11 & 1;
  if (v8 >= v28) {
    uint64_t v29 = v11 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  unint64_t v30 = v21 >> 1;
  unint64_t v31 = v21 - v10;
  if (v30 >= v31 >> 1) {
    unint64_t v32 = v31 >> 1;
  }
  else {
    unint64_t v32 = v30;
  }
  if (v11)
  {
    if (v9)
    {
      int v35 = v14[1];
      unint64_t v33 = v14 + 2;
      *uint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
      v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v35)) >> 32) >> 8) + 16;
      unint64_t v34 = v20 + 2;
      if (!v32)
      {
LABEL_26:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
      if (!v32) {
        goto LABEL_26;
      }
    }
    uint64_t v36 = -(uint64_t)v32;
    do
    {
      unint64_t v37 = (16777473 * (unint64_t)(224 * v33[1])) >> 40;
      *unint64_t v34 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v33)) >> 32) >> 8) + 16;
      v34[1] = v37 + 16;
      v34 += 2;
      v33 += 2;
      BOOL v38 = __CFADD__(v36++, 1);
    }
    while (!v38);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v29)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v29;
    do
    {
      unint64_t v41 = v14;
      uint64_t v42 = v20;
      if (v9)
      {
        int v43 = v14[1];
        unint64_t v41 = v14 + 2;
        *uint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v43)) >> 32) >> 8) + 16;
        uint64_t v42 = v20 + 2;
      }
      if (v32)
      {
        uint64_t v44 = -(uint64_t)v32;
        do
        {
          unint64_t v45 = (16777473 * (unint64_t)(224 * v41[1])) >> 40;
          *uint64_t v42 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v41)) >> 32) >> 8) + 16;
          v42[1] = v45 + 16;
          v42 += 2;
          v41 += 2;
          BOOL v38 = __CFADD__(v44++, 1);
        }
        while (!v38);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v28 < v8)
  {
    if (v9)
    {
      int v46 = *v14;
      int v47 = v14[1];
      v14 += 2;
      *uint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v46)) >> 32) >> 8) + 16;
      v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v47)) >> 32) >> 8) + 16;
      v20 += 2;
    }
    if (v32)
    {
      uint64_t v48 = -(uint64_t)v32;
      do
      {
        unint64_t v49 = (16777473 * (unint64_t)(224 * v14[1])) >> 40;
        *uint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v20[1] = v49 + 16;
        v20 += 2;
        v14 += 2;
        BOOL v38 = __CFADD__(v48++, 1);
      }
      while (!v38);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf22_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = 2 * (v10 + v9);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16) {
    unint64_t v21 = v17 - v16;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v18 + v16;
    uint64_t v26 = *a3 + *a4 * v11 + v12;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v25 + i) = *(_WORD *)(v26 + 2 * i);
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v10 = v9 & 1;
  }
  unint64_t v28 = v11 & 1;
  if (v8 >= v28) {
    uint64_t v29 = v11 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  unint64_t v30 = v21 >> 1;
  unint64_t v31 = v21 - v10;
  if (v30 >= v31 >> 1) {
    unint64_t v32 = v31 >> 1;
  }
  else {
    unint64_t v32 = v30;
  }
  if (v11)
  {
    if (v9)
    {
      unint64_t v33 = v14 + 2;
      __int16 v35 = v14[1] / 0x101u;
      *uint64_t v20 = *v14 / 0x101u;
      v20[1] = v35;
      unint64_t v34 = v20 + 2;
      if (!v32)
      {
LABEL_26:
        uint64_t v14 = (_WORD *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
      if (!v32) {
        goto LABEL_26;
      }
    }
    uint64_t v36 = -(uint64_t)v32;
    do
    {
      __int16 v37 = v33[1] / 0x101u;
      *unint64_t v34 = *v33;
      v34[1] = v37;
      v34 += 2;
      v33 += 2;
      BOOL v38 = __CFADD__(v36++, 1);
    }
    while (!v38);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v29)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v29;
    do
    {
      unint64_t v41 = v14;
      uint64_t v42 = v20;
      if (v9)
      {
        unint64_t v41 = v14 + 2;
        __int16 v43 = v14[1] / 0x101u;
        *uint64_t v20 = *v14;
        v20[1] = v43;
        uint64_t v42 = v20 + 2;
      }
      if (v32)
      {
        uint64_t v44 = -(uint64_t)v32;
        do
        {
          __int16 v45 = v41[1] / 0x101u;
          *uint64_t v42 = *v41;
          v42[1] = v45;
          v42 += 2;
          v41 += 2;
          BOOL v38 = __CFADD__(v44++, 1);
        }
        while (!v38);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v28 < v8)
  {
    if (v9)
    {
      __int16 v46 = *v14;
      __int16 v47 = v14[1];
      v14 += 2;
      *uint64_t v20 = v46;
      v20[1] = v47;
      v20 += 2;
    }
    if (v32)
    {
      uint64_t v48 = -(uint64_t)v32;
      do
      {
        __int16 v49 = v14[1] / 0x101u;
        *uint64_t v20 = *v14;
        v20[1] = v49;
        v20 += 2;
        v14 += 2;
        BOOL v38 = __CFADD__(v48++, 1);
      }
      while (!v38);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf22_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v23 >= v18 - v17) {
    unint64_t v23 = v18 - v17;
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    BOOL v27 = v12 >= v8;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = *a3 + *a4 * v12;
    if (v27) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = a7[2] + v29 * v19 + v17;
    uint64_t v34 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(unsigned char *)(v33 + i) = -1;
          *(unsigned char *)(v34 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v36 = v11;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v23 >> 1;
  unint64_t v38 = v23 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v9)
    {
      uint64_t v40 = v16 + 2;
      unsigned int v42 = ((((16777473 * (unint64_t)(224 * v16[1])) >> 32) >> 8)
           + (((16777473
                            * (unint64_t)(224 * *(unsigned __int16 *)((char *)v16 + v15 + 2))) >> 32) >> 8)
           + 33) >> 1;
      *uint64_t v22 = ((((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8)
            + (((16777473
                             * (unint64_t)(224 * *(unsigned __int16 *)((char *)v16 + v15))) >> 32) >> 8)
            + 33) >> 1;
      v22[1] = v42;
      unint64_t v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v40 = v16;
      unint64_t v41 = v22;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      int v44 = *v40;
      int v45 = v40[1];
      int v46 = *(unsigned __int16 *)((char *)v40 + v15);
      int v47 = *(unsigned __int16 *)((char *)v40 + v15 + 2);
      v40 += 2;
      unsigned char *v41 = ((((16777473 * (unint64_t)(224 * v44)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v46)) >> 32) >> 8)
            + 33) >> 1;
      v41[1] = ((((16777473 * (unint64_t)(224 * v45)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v47)) >> 32) >> 8)
              + 33) >> 1;
      v41 += 2;
      BOOL v27 = __CFADD__(v43++, 1);
    }
    while (!v27);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v24 - v36;
    do
    {
      uint64_t v50 = v16;
      unint64_t v51 = v22;
      if (v9)
      {
        uint64_t v50 = v16 + 2;
        unsigned int v52 = ((((16777473 * (unint64_t)(224 * v16[1])) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v16 + v15 + 2))) >> 32) >> 8)
             + 33) >> 1;
        *uint64_t v22 = ((((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v16 + v15))) >> 32) >> 8)
              + 33) >> 1;
        v22[1] = v52;
        unint64_t v51 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v53 = -(uint64_t)v39;
        do
        {
          int v54 = *v50;
          int v55 = v50[1];
          int v56 = *(unsigned __int16 *)((char *)v50 + v15);
          int v57 = *(unsigned __int16 *)((char *)v50 + v15 + 2);
          v50 += 2;
          *unint64_t v51 = ((((16777473 * (unint64_t)(224 * v54)) >> 32) >> 8)
                + (((16777473 * (unint64_t)(224 * v56)) >> 32) >> 8)
                + 33) >> 1;
          v51[1] = ((((16777473 * (unint64_t)(224 * v55)) >> 32) >> 8)
                  + (((16777473 * (unint64_t)(224 * v57)) >> 32) >> 8)
                  + 33) >> 1;
          v51 += 2;
          BOOL v27 = __CFADD__(v53++, 1);
        }
        while (!v27);
      }
      v16 += v15;
      v22 += v21;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_sf22_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    BOOL v27 = v12 >= v8;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = *a3 + *a4 * v12;
    if (v27) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = a7[2] + v29 * v19 + v17;
    uint64_t v34 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(unsigned char *)(v33 + i) = -1;
          *(unsigned char *)(v34 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v36 = v11;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v23 >> 1;
  unint64_t v38 = v23 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v9)
    {
      int v42 = v16[1];
      uint64_t v40 = v16 + 2;
      *uint64_t v22 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8) + 16;
      v22[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v42)) >> 32) >> 8) + 16;
      unint64_t v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v40 = v16;
      unint64_t v41 = v22;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      unint64_t v44 = (16777473 * (unint64_t)(224 * v40[1])) >> 40;
      unsigned char *v41 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v40)) >> 32) >> 8) + 16;
      v41[1] = v44 + 16;
      v41 += 2;
      v40 += 2;
      BOOL v27 = __CFADD__(v43++, 1);
    }
    while (!v27);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v24 - v36;
    uint64_t v47 = 2 * v15;
    do
    {
      unint64_t v48 = v16;
      unint64_t v49 = v22;
      if (v9)
      {
        int v50 = v16[1];
        unint64_t v48 = v16 + 2;
        *uint64_t v22 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8) + 16;
        v22[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v50)) >> 32) >> 8) + 16;
        unint64_t v49 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v51 = -(uint64_t)v39;
        do
        {
          unint64_t v52 = (16777473 * (unint64_t)(224 * v48[1])) >> 40;
          *unint64_t v49 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v48)) >> 32) >> 8) + 16;
          v49[1] = v52 + 16;
          v49 += 2;
          v48 += 2;
          BOOL v27 = __CFADD__(v51++, 1);
        }
        while (!v27);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v47);
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf22_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v23 >= v18 - v17) {
    unint64_t v23 = v18 - v17;
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v12 >= v8) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v12 + v14 + v28;
    uint64_t v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(unsigned char *)(v30 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v29 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v32 = v11;
  }
  else {
    unint64_t v32 = 0;
  }
  unint64_t v33 = v23 >> 1;
  unint64_t v34 = v23 - v10;
  if (v33 >= v34 >> 1) {
    unint64_t v35 = v34 >> 1;
  }
  else {
    unint64_t v35 = v33;
  }
  if (v11)
  {
    if (v9)
    {
      unint64_t v36 = v16 + 2;
      unsigned int v38 = ((((16777473 * (unint64_t)(224 * v16[1])) >> 32) >> 8)
           + (((16777473
                            * (unint64_t)(224 * *(unsigned __int16 *)((char *)v16 + v15 + 2))) >> 32) >> 8)
           + 33) >> 1;
      *uint64_t v22 = ((((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8)
            + (((16777473
                             * (unint64_t)(224 * *(unsigned __int16 *)((char *)v16 + v15))) >> 32) >> 8)
            + 33) >> 1;
      v22[1] = v38;
      unint64_t v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v22;
      if (!v35) {
        goto LABEL_29;
      }
    }
    uint64_t v39 = -(uint64_t)v35;
    do
    {
      int v40 = *v36;
      int v41 = v36[1];
      int v42 = *(unsigned __int16 *)((char *)v36 + v15);
      int v43 = *(unsigned __int16 *)((char *)v36 + v15 + 2);
      v36 += 2;
      *unint64_t v37 = ((((16777473 * (unint64_t)(224 * v40)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v42)) >> 32) >> 8)
            + 33) >> 1;
      v37[1] = ((((16777473 * (unint64_t)(224 * v41)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v43)) >> 32) >> 8)
              + 33) >> 1;
      v37 += 2;
      BOOL v44 = __CFADD__(v39++, 1);
    }
    while (!v44);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v24 - v32;
    do
    {
      uint64_t v47 = v16;
      unint64_t v48 = v22;
      if (v9)
      {
        uint64_t v47 = v16 + 2;
        unsigned int v49 = ((((16777473 * (unint64_t)(224 * v16[1])) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v16 + v15 + 2))) >> 32) >> 8)
             + 33) >> 1;
        *uint64_t v22 = ((((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v16 + v15))) >> 32) >> 8)
              + 33) >> 1;
        v22[1] = v49;
        unint64_t v48 = v22 + 2;
      }
      if (v35)
      {
        uint64_t v50 = -(uint64_t)v35;
        do
        {
          int v51 = *v47;
          int v52 = v47[1];
          int v53 = *(unsigned __int16 *)((char *)v47 + v15);
          int v54 = *(unsigned __int16 *)((char *)v47 + v15 + 2);
          v47 += 2;
          *unint64_t v48 = ((((16777473 * (unint64_t)(224 * v51)) >> 32) >> 8)
                + (((16777473 * (unint64_t)(224 * v53)) >> 32) >> 8)
                + 33) >> 1;
          v48[1] = ((((16777473 * (unint64_t)(224 * v52)) >> 32) >> 8)
                  + (((16777473 * (unint64_t)(224 * v54)) >> 32) >> 8)
                  + 33) >> 1;
          v48 += 2;
          BOOL v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      v16 += v15;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_sf22_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v12 >= v8) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v12 + v14 + v28;
    uint64_t v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(unsigned char *)(v30 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v29 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v32 = v11;
  }
  else {
    unint64_t v32 = 0;
  }
  unint64_t v33 = v23 >> 1;
  unint64_t v34 = v23 - v10;
  if (v33 >= v34 >> 1) {
    unint64_t v35 = v34 >> 1;
  }
  else {
    unint64_t v35 = v33;
  }
  if (v11)
  {
    if (v9)
    {
      int v38 = v16[1];
      unint64_t v36 = v16 + 2;
      *uint64_t v22 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8) + 16;
      v22[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v38)) >> 32) >> 8) + 16;
      unint64_t v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v22;
      if (!v35) {
        goto LABEL_29;
      }
    }
    uint64_t v39 = -(uint64_t)v35;
    do
    {
      unint64_t v40 = (16777473 * (unint64_t)(224 * v36[1])) >> 40;
      *unint64_t v37 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v36)) >> 32) >> 8) + 16;
      v37[1] = v40 + 16;
      v37 += 2;
      v36 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    unint64_t v42 = 0;
    unint64_t v43 = v24 - v32;
    uint64_t v44 = 2 * v15;
    do
    {
      unint64_t v45 = v16;
      unint64_t v46 = v22;
      if (v9)
      {
        int v47 = v16[1];
        unint64_t v45 = v16 + 2;
        *uint64_t v22 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8) + 16;
        v22[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v47)) >> 32) >> 8) + 16;
        unint64_t v46 = v22 + 2;
      }
      if (v35)
      {
        uint64_t v48 = -(uint64_t)v35;
        do
        {
          unint64_t v49 = (16777473 * (unint64_t)(224 * v45[1])) >> 40;
          *unint64_t v46 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v45)) >> 32) >> 8) + 16;
          v46[1] = v49 + 16;
          v46 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v48++, 1);
        }
        while (!v41);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v44);
      v22 += v21;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf22_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v23 >= v18 - v17) {
    unint64_t v23 = v18 - v17;
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v12 >= v8) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v12 + v14 + v28;
    uint64_t v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(unsigned char *)(v30 + i) = *(_WORD *)(v29 + 2 * i);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v32 = v11;
  }
  else {
    unint64_t v32 = 0;
  }
  unint64_t v33 = v23 >> 1;
  unint64_t v34 = v23 - v10;
  if (v33 >= v34 >> 1) {
    unint64_t v35 = v34 >> 1;
  }
  else {
    unint64_t v35 = v33;
  }
  if (v11)
  {
    if (v9)
    {
      unint64_t v36 = v16 + 2;
      unsigned int v38 = (v16[1] / 0x101u + *(unsigned __int16 *)((char *)v16 + v15 + 2) / 0x101u + 1) >> 1;
      *uint64_t v22 = (*v16 / 0x101u + *(unsigned __int16 *)((char *)v16 + v15) / 0x101u + 1) >> 1;
      v22[1] = v38;
      unint64_t v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v22;
      if (!v35) {
        goto LABEL_29;
      }
    }
    uint64_t v39 = -(uint64_t)v35;
    do
    {
      int v40 = *v36;
      int v41 = v36[1];
      int v42 = *(unsigned __int16 *)((char *)v36 + v15);
      int v43 = *(unsigned __int16 *)((char *)v36 + v15 + 2);
      v36 += 2;
      *unint64_t v37 = (((65281 * v40) >> 24) + ((65281 * v42) >> 24) + 1) >> 1;
      v37[1] = (((65281 * v41) >> 24) + ((65281 * v43) >> 24) + 1) >> 1;
      v37 += 2;
      BOOL v44 = __CFADD__(v39++, 1);
    }
    while (!v44);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v24 - v32;
    do
    {
      int v47 = v16;
      uint64_t v48 = v22;
      if (v9)
      {
        int v47 = v16 + 2;
        unsigned int v49 = (v16[1] / 0x101u + *(unsigned __int16 *)((char *)v16 + v15 + 2) / 0x101u + 1) >> 1;
        *uint64_t v22 = (*v16 / 0x101u + *(unsigned __int16 *)((char *)v16 + v15) / 0x101u + 1) >> 1;
        v22[1] = v49;
        uint64_t v48 = v22 + 2;
      }
      if (v35)
      {
        uint64_t v50 = -(uint64_t)v35;
        do
        {
          int v51 = *v47;
          int v52 = v47[1];
          int v53 = *(unsigned __int16 *)((char *)v47 + v15);
          int v54 = *(unsigned __int16 *)((char *)v47 + v15 + 2);
          v47 += 2;
          *uint64_t v48 = (((65281 * v51) >> 24) + ((65281 * v53) >> 24) + 1) >> 1;
          v48[1] = (((65281 * v52) >> 24) + ((65281 * v54) >> 24) + 1) >> 1;
          v48 += 2;
          BOOL v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      v16 += v15;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_sf22_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v12 >= v8) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v12 + v14 + v28;
    uint64_t v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(unsigned char *)(v30 + i) = *(_WORD *)(v29 + 2 * i);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v32 = v11;
  }
  else {
    unint64_t v32 = 0;
  }
  unint64_t v33 = v23 >> 1;
  unint64_t v34 = v23 - v10;
  if (v33 >= v34 >> 1) {
    unint64_t v35 = v34 >> 1;
  }
  else {
    unint64_t v35 = v33;
  }
  if (v11)
  {
    if (v9)
    {
      unint64_t v36 = v16 + 2;
      __int16 v38 = v16[1] / 0x101u;
      *uint64_t v22 = *v16 / 0x101u;
      v22[1] = v38;
      unint64_t v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v22;
      if (!v35) {
        goto LABEL_29;
      }
    }
    uint64_t v39 = -(uint64_t)v35;
    do
    {
      __int16 v40 = v36[1] / 0x101u;
      *unint64_t v37 = *v36;
      v37[1] = v40;
      v37 += 2;
      v36 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    unint64_t v42 = 0;
    unint64_t v43 = v24 - v32;
    uint64_t v44 = 2 * v15;
    do
    {
      unint64_t v45 = v16;
      unint64_t v46 = v22;
      if (v9)
      {
        unint64_t v45 = v16 + 2;
        __int16 v47 = v16[1] / 0x101u;
        *uint64_t v22 = *v16;
        v22[1] = v47;
        unint64_t v46 = v22 + 2;
      }
      if (v35)
      {
        uint64_t v48 = -(uint64_t)v35;
        do
        {
          __int16 v49 = v45[1] / 0x101u;
          *unint64_t v46 = *v45;
          v46[1] = v49;
          v46 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v48++, 1);
        }
        while (!v41);
      }
      uint64_t v16 = (_WORD *)((char *)v16 + v44);
      v22 += v21;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf22_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  unint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  unint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    unint64_t v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(unsigned char *)(v33 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v26 >= v11) {
    unint64_t v35 = v11;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v25 >> 1;
  unint64_t v37 = v25 - v10;
  if (v36 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v36;
  }
  if (v11)
  {
    if (v8)
    {
      uint64_t v39 = v16 + 2;
      unsigned int v42 = ((((16777473 * (unint64_t)(224 * v16[1])) >> 32) >> 8)
           + (((16777473
                            * (unint64_t)(224 * *(unsigned __int16 *)((char *)v16 + v15 + 2))) >> 32) >> 8)
           + 33) >> 1;
      *unint64_t v23 = ((((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8)
            + (((16777473
                             * (unint64_t)(224 * *(unsigned __int16 *)((char *)v16 + v15))) >> 32) >> 8)
            + 33) >> 1;
      __int16 v40 = v23 + 1;
      *unint64_t v24 = v42;
      BOOL v41 = v24 + 1;
      if (!v38)
      {
LABEL_29:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v39 = v16;
      __int16 v40 = v23;
      BOOL v41 = v24;
      if (!v38) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v38;
    do
    {
      int v44 = *v39;
      int v45 = v39[1];
      int v46 = *(unsigned __int16 *)((char *)v39 + v15);
      int v47 = *(unsigned __int16 *)((char *)v39 + v15 + 2);
      v39 += 2;
      *v40++ = ((((16777473 * (unint64_t)(224 * v44)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v46)) >> 32) >> 8)
              + 33) >> 1;
      *v41++ = ((((16777473 * (unint64_t)(224 * v45)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v47)) >> 32) >> 8)
              + 33) >> 1;
      BOOL v48 = __CFADD__(v43++, 1);
    }
    while (!v48);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v49 = 0;
    unint64_t v50 = v26 - v35;
    do
    {
      int v51 = v16;
      int v52 = v23;
      int v53 = v24;
      if (v8)
      {
        int v51 = v16 + 2;
        unsigned int v54 = ((((16777473 * (unint64_t)(224 * v16[1])) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v16 + v15 + 2))) >> 32) >> 8)
             + 33) >> 1;
        *unint64_t v23 = ((((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v16 + v15))) >> 32) >> 8)
              + 33) >> 1;
        int v52 = v23 + 1;
        *unint64_t v24 = v54;
        int v53 = v24 + 1;
      }
      if (v38)
      {
        uint64_t v55 = -(uint64_t)v38;
        do
        {
          int v56 = *v51;
          int v57 = v51[1];
          int v58 = *(unsigned __int16 *)((char *)v51 + v15);
          int v59 = *(unsigned __int16 *)((char *)v51 + v15 + 2);
          v51 += 2;
          *v52++ = ((((16777473 * (unint64_t)(224 * v56)) >> 32) >> 8)
                  + (((16777473 * (unint64_t)(224 * v58)) >> 32) >> 8)
                  + 33) >> 1;
          *v53++ = ((((16777473 * (unint64_t)(224 * v57)) >> 32) >> 8)
                  + (((16777473 * (unint64_t)(224 * v59)) >> 32) >> 8)
                  + 33) >> 1;
          BOOL v48 = __CFADD__(v55++, 1);
        }
        while (!v48);
      }
      v16 += v15;
      v23 += v21;
      v24 += v22;
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_CopyDec_sf22_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  unint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  unint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    unint64_t v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(unsigned char *)(v33 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v26 >= v11) {
    unint64_t v35 = v11;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v25 >> 1;
  unint64_t v37 = v25 - v10;
  if (v36 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v36;
  }
  if (v11)
  {
    if (v8)
    {
      int v42 = v16[1];
      uint64_t v39 = v16 + 2;
      *unint64_t v23 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8) + 16;
      __int16 v40 = v23 + 1;
      *unint64_t v24 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v42)) >> 32) >> 8) + 16;
      BOOL v41 = v24 + 1;
      if (!v38)
      {
LABEL_29:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v39 = v16;
      __int16 v40 = v23;
      BOOL v41 = v24;
      if (!v38) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v38;
    do
    {
      uint64_t v44 = 3758153952 * v39[1];
      *v40++ = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v39)) >> 32) >> 8) + 16;
      *v41++ = BYTE5(v44) + 16;
      v39 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v46 = 0;
    unint64_t v47 = v26 - v35;
    uint64_t v48 = 2 * v15;
    do
    {
      unint64_t v49 = v16;
      unint64_t v50 = v23;
      int v51 = v24;
      if (v8)
      {
        unint64_t v49 = v16 + 2;
        unint64_t v52 = (16777473 * (unint64_t)(224 * v16[1])) >> 40;
        *unint64_t v23 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8) + 16;
        unint64_t v50 = v23 + 1;
        *unint64_t v24 = v52 + 16;
        int v51 = v24 + 1;
      }
      if (v38)
      {
        uint64_t v53 = -(uint64_t)v38;
        do
        {
          uint64_t v54 = 3758153952 * v49[1];
          *v50++ = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v49)) >> 32) >> 8) + 16;
          *v51++ = BYTE5(v54) + 16;
          v49 += 2;
          BOOL v45 = __CFADD__(v53++, 1);
        }
        while (!v45);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v48);
      v23 += v21;
      v24 += v22;
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf22_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  unint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  unint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  unint64_t v26 = v13 - v12;
  unint64_t v27 = v20 - v19;
  if (v13 - v12 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v12;
    if (v12 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v14 + v32;
    unint64_t v34 = *a7 + v30 * v19 + v17;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(unsigned char *)(v34 + i) = *(_WORD *)(v33 + 2 * i);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v26 >= v11) {
    unint64_t v36 = v11;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v25 >> 1;
  unint64_t v38 = v25 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v8)
    {
      __int16 v40 = v16 + 2;
      unsigned int v43 = (v16[1] / 0x101u + *(unsigned __int16 *)((char *)v16 + v15 + 2) / 0x101u + 1) >> 1;
      *unint64_t v23 = (*v16 / 0x101u + *(unsigned __int16 *)((char *)v16 + v15) / 0x101u + 1) >> 1;
      BOOL v41 = v23 + 1;
      *unint64_t v24 = v43;
      int v42 = v24 + 1;
      if (!v39)
      {
LABEL_29:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      __int16 v40 = v16;
      BOOL v41 = v23;
      int v42 = v24;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v44 = -(uint64_t)v39;
    do
    {
      int v45 = *v40;
      int v46 = v40[1];
      int v47 = *(unsigned __int16 *)((char *)v40 + v15);
      int v48 = *(unsigned __int16 *)((char *)v40 + v15 + 2);
      v40 += 2;
      *v41++ = (((65281 * v45) >> 24) + ((65281 * v47) >> 24) + 1) >> 1;
      *v42++ = (((65281 * v46) >> 24) + ((65281 * v48) >> 24) + 1) >> 1;
      BOOL v49 = __CFADD__(v44++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v36)
  {
    unint64_t v50 = 0;
    unint64_t v51 = v26 - v36;
    do
    {
      unint64_t v52 = v16;
      uint64_t v53 = v23;
      uint64_t v54 = v24;
      if (v8)
      {
        unint64_t v52 = v16 + 2;
        unsigned int v55 = (v16[1] / 0x101u + *(unsigned __int16 *)((char *)v16 + v15 + 2) / 0x101u + 1) >> 1;
        *unint64_t v23 = (*v16 / 0x101u + *(unsigned __int16 *)((char *)v16 + v15) / 0x101u + 1) >> 1;
        uint64_t v53 = v23 + 1;
        *unint64_t v24 = v55;
        uint64_t v54 = v24 + 1;
      }
      if (v39)
      {
        uint64_t v56 = -(uint64_t)v39;
        do
        {
          int v57 = *v52;
          int v58 = v52[1];
          int v59 = *(unsigned __int16 *)((char *)v52 + v15);
          int v60 = *(unsigned __int16 *)((char *)v52 + v15 + 2);
          v52 += 2;
          *v53++ = (((65281 * v57) >> 24) + ((65281 * v59) >> 24) + 1) >> 1;
          *v54++ = (((65281 * v58) >> 24) + ((65281 * v60) >> 24) + 1) >> 1;
          BOOL v49 = __CFADD__(v56++, 1);
        }
        while (!v49);
      }
      v16 += v15;
      v23 += v21;
      v24 += v22;
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_CopyDec_sf22_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  unint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  uint64_t v23 = a7[2];
  unint64_t v24 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  }
  unint64_t v27 = v13 - v12;
  unint64_t v28 = v20 - v19;
  if (v13 - v12 >= v28) {
    unint64_t v27 = v28;
  }
  if (v27)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + v30 * v12;
    if (v12 >= v9) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v30;
    }
    uint64_t v34 = v32 + v14 + v33;
    unint64_t v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
          *(unsigned char *)(v35 + i) = *(_WORD *)(v34 + 2 * i);
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v27 >= v11) {
    unint64_t v37 = v11;
  }
  else {
    unint64_t v37 = 0;
  }
  unint64_t v38 = v26 >> 1;
  unint64_t v39 = v26 - v10;
  if (v38 >= v39 >> 1) {
    unint64_t v40 = v39 >> 1;
  }
  else {
    unint64_t v40 = v38;
  }
  if (v11)
  {
    if (v8)
    {
      BOOL v41 = v16 + 2;
      __int16 v44 = v16[1] / 0x101u;
      *unint64_t v24 = *v16 / 0x101u;
      int v42 = v24 + 1;
      *unint64_t v25 = v44;
      unsigned int v43 = v25 + 1;
      if (!v40)
      {
LABEL_29:
        v16 += v15;
        v24 += v21;
        v25 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      BOOL v41 = v16;
      int v42 = v24;
      unsigned int v43 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v40) {
        goto LABEL_29;
      }
    }
    uint64_t v45 = -(uint64_t)v40;
    do
    {
      __int16 v46 = v41[1] / 0x101u;
      *v42++ = *v41;
      *v43++ = v46;
      v41 += 2;
      BOOL v47 = __CFADD__(v45++, 1);
    }
    while (!v47);
    goto LABEL_29;
  }
LABEL_30:
  if (v27 != v37)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v27 - v37;
    uint64_t v50 = 2 * v15;
    do
    {
      unint64_t v51 = v16;
      unint64_t v52 = v24;
      uint64_t v53 = v25;
      if (v8)
      {
        unint64_t v51 = v16 + 2;
        __int16 v54 = v16[1] / 0x101u;
        *unint64_t v24 = *v16;
        unint64_t v52 = v24 + 1;
        *unint64_t v25 = v54;
        uint64_t v53 = v25 + 1;
      }
      if (v40)
      {
        uint64_t v55 = -(uint64_t)v40;
        do
        {
          __int16 v56 = v51[1] / 0x101u;
          *v52++ = *v51;
          *v53++ = v56;
          v51 += 2;
          BOOL v47 = __CFADD__(v55++, 1);
        }
        while (!v47);
      }
      uint64_t v16 = (_WORD *)((char *)v16 + v50);
      v24 += v21;
      v25 += v22;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_Copy_sf20_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[5] & 0xFFFFFFFELL;
  unint64_t v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  uint64_t v10 = a2[3] + a2[5];
  unint64_t v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a8;
    uint64_t v17 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v18 = a3[1] + v15 * (v9 >> 1) + 2 * v8;
    uint64_t v19 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        LOWORD(v22) = 0;
        LOWORD(v23) = 0;
        unint64_t v24 = (unsigned __int16 *)v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            int v25 = *v24;
            int v26 = v24[1];
            v24 += 2;
            unsigned int v23 = 57344 * v25 / 0xFFFFu + 4096;
            unsigned int v22 = 57344 * v26 / 0xFFFFu + 4096;
          }
          unint64_t v27 = (_WORD *)(v17 + v20);
          unsigned int v28 = 56064 * *(unsigned __int16 *)(v19 + 2 * v21) / 0xFFFF;
          *unint64_t v27 = -1;
          v27[1] = v28 + 4096;
          v27[2] = v23;
          v27[3] = v22;
          ++v21;
          v20 += 8;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_sf20_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[5] & 0xFFFFFFFELL;
  unint64_t v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  uint64_t v10 = a2[3] + a2[5];
  unint64_t v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a8;
    uint64_t v17 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v18 = a3[1] + v15 * (v9 >> 1) + 2 * v8;
    uint64_t v19 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        LOBYTE(v22) = 0;
        LOBYTE(v23) = 0;
        unint64_t v24 = (unsigned __int16 *)v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            int v25 = *v24;
            int v26 = v24[1];
            v24 += 2;
            unsigned int v23 = (((16777473 * (unint64_t)(224 * v25)) >> 32) >> 8) + 16;
            unsigned int v22 = (((16777473 * (unint64_t)(224 * v26)) >> 32) >> 8) + 16;
          }
          unint64_t v27 = (unsigned char *)(v17 + v20);
          unint64_t v28 = (16777473 * (unint64_t)(219 * *(unsigned __int16 *)(v19 + 2 * v21))) >> 40;
          *unint64_t v27 = -1;
          v27[1] = v28 + 16;
          v27[2] = v23;
          v27[3] = v22;
          ++v21;
          v20 += 4;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_sf20_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40) & 0xFFFFFFFELL;
  uint64_t v11 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v12 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v12 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11) {
    unint64_t v12 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  }
  uint64_t v10 = *(void *)(a2 + 24) + *(void *)(a2 + 40);
  unint64_t v13 = v10 - v9 + (v10 & 1);
  if (v13 >= *(void *)(a6 + 24)) {
    unint64_t v13 = *(void *)(a6 + 24);
  }
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *a4;
    uint64_t v16 = a4[1];
    uint64_t v17 = *a8;
    uint64_t v18 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v11;
    unint64_t v19 = a3[1] + v16 * (v9 >> 1) + ((2 * v8) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v20 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v12)
      {
        uint64_t v21 = 0;
        for (unint64_t i = 0; i < v12; i += 2)
        {
          unsigned int v23 = (_WORD *)(v18 + v21);
          unint64_t v24 = (unsigned __int16 *)(v19 + 2 * i);
          int v25 = (unsigned __int16 *)(v20 + 2 * i);
          int v26 = *v24;
          LODWORD(v24) = 57344 * v24[1] / 0xFFFF;
          unsigned int v27 = 56064 * *v25 / 0xFFFF;
          LODWORD(v25) = 56064 * v25[1] / 0xFFFF;
          *unsigned int v23 = 57344 * v26 / 0xFFFFu + 4096;
          v23[1] = v27 + 4096;
          v23[2] = (_WORD)v24 + 4096;
          v23[3] = (_WORD)v25 + 4096;
          v21 += 8;
        }
      }
      v20 += v15;
      v18 += v17;
      v19 += (v14++ << 63 >> 63) & v16;
    }
    while (v14 != v13);
  }
  return 0;
}

uint64_t vt_Copy_sf20_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40) & 0xFFFFFFFELL;
  uint64_t v11 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v12 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v12 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11) {
    unint64_t v12 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  }
  uint64_t v10 = *(void *)(a2 + 24) + *(void *)(a2 + 40);
  unint64_t v13 = v10 - v9 + (v10 & 1);
  if (v13 >= *(void *)(a6 + 24)) {
    unint64_t v13 = *(void *)(a6 + 24);
  }
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *a4;
    uint64_t v16 = a4[1];
    uint64_t v17 = *a8;
    uint64_t v18 = (unsigned char *)(*a7 + *a8 * *(void *)(a6 + 40) + v11);
    unint64_t v19 = a3[1] + v16 * (v9 >> 1) + ((2 * v8) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v20 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v12)
      {
        unint64_t v21 = 0;
        unsigned int v22 = v18;
        do
        {
          unsigned int v23 = (unsigned __int16 *)(v19 + 2 * v21);
          unint64_t v24 = (unsigned __int16 *)(v20 + 2 * v21);
          int v25 = *v23;
          unint64_t v26 = (16777473 * (unint64_t)(224 * v23[1])) >> 40;
          unint64_t v27 = (16777473 * (unint64_t)(219 * *v24)) >> 40;
          unint64_t v28 = (16777473 * (unint64_t)(219 * v24[1])) >> 40;
          *unsigned int v22 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v25)) >> 32) >> 8) + 16;
          v22[1] = v27 + 16;
          v22[2] = v26 + 16;
          v22[3] = v28 + 16;
          v22 += 4;
          v21 += 2;
        }
        while (v21 < v12);
      }
      v20 += v15;
      v18 += v17;
      v19 += (v14++ << 63 >> 63) & v16;
    }
    while (v14 != v13);
  }
  return 0;
}

uint64_t vt_Copy_sf20_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  unint64_t v12 = v8 & 0xFFFFFFFE;
  uint64_t v13 = v10 + v8;
  uint64_t v14 = (v10 + v8) & 1;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  unint64_t v19 = a6[2];
  unint64_t v20 = a6[3];
  uint64_t v21 = a8[1];
  unsigned int v22 = (_WORD *)(a7[1] + v21 * v18 + 4 * v17);
  unint64_t v23 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v23 >= v19) {
    unint64_t v23 = v19;
  }
  unint64_t v24 = v13 - v12 + v14;
  if (v24 >= v20) {
    unint64_t v24 = v20;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + 2 * (v9 & 0xFFFFFFFE) + v30;
    uint64_t v32 = a7[2] + v28 * v18 + 2 * v17;
    uint64_t v33 = *a7 + v27 * v18 + 2 * v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = 56064 * *(unsigned __int16 *)(v31 + 2 * i) / 0xFFFF + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  unint64_t v35 = (v24 - (v8 & 1)) >> 1;
  if (v24 >> 1 < v35) {
    unint64_t v35 = v24 >> 1;
  }
  char v36 = v9;
  unint64_t v37 = v23 >> 1;
  uint64_t v38 = v9 & 1;
  if (v23 >> 1 >= (v23 - v38) >> 1) {
    unint64_t v37 = (v23 - v38) >> 1;
  }
  if (v8)
  {
    if (v36)
    {
      int v46 = v16[1];
      unint64_t v39 = v16 + 2;
      *unsigned int v22 = 57344 * *v16 / 0xFFFF + 4096;
      v22[1] = 57344 * v46 / 0xFFFFu + 4096;
      unint64_t v40 = v22 + 2;
      if (v37)
      {
LABEL_21:
        uint64_t v41 = -(uint64_t)v37;
        do
        {
          int v42 = *v39;
          int v43 = v39[1];
          v39 += 2;
          *unint64_t v40 = 57344 * v42 / 0xFFFFu + 4096;
          v40[1] = 57344 * v43 / 0xFFFFu + 4096;
          v40 += 2;
          BOOL v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        uint64_t v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v39 = v16;
      unint64_t v40 = v22;
      if (v37) {
        goto LABEL_21;
      }
    }
    uint64_t v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v23)
    {
      unsigned int v47 = 57344 * v39[1];
      *unint64_t v40 = 57344 * *v39 / 0xFFFF + 4096;
      v40[1] = v47 / 0xFFFF + 4096;
    }
    uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
    unsigned int v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      unint64_t v49 = v16;
      uint64_t v50 = v22;
      if (v36)
      {
        unint64_t v49 = v16 + 2;
        unsigned int v51 = 57344 * v16[1] / 0xFFFF;
        __int16 v52 = 57344 * *v16 / 0xFFFF + 4096;
        *unsigned int v22 = v52;
        LOWORD(v51) = v51 + 4096;
        v22[1] = v51;
        uint64_t v53 = (_WORD *)((char *)v22 + v21);
        *uint64_t v53 = v52;
        v53[1] = v51;
        uint64_t v50 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v54 = -(uint64_t)v37;
        do
        {
          unsigned int v55 = 57344 * v49[1];
          unsigned int v56 = 57344 * *v49 / 0xFFFF + 4096;
          _WORD *v50 = 57344 * *v49 / 0xFFFF + 4096;
          unsigned int v57 = v55 / 0xFFFF + 4096;
          v50[1] = v57;
          v50[2] = v56;
          v50[3] = v57;
          int v58 = (_WORD *)((char *)v50 + v21);
          _WORD *v58 = v56;
          v58[1] = v57;
          v49 += 2;
          v58[2] = v56;
          v58[3] = v57;
          v50 += 4;
          BOOL v44 = __CFADD__(v54++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v23)
      {
        int v59 = *v49;
        int v60 = v49[1];
        unsigned int v61 = 57344 * v59 / 0xFFFFu + 4096;
        _WORD *v50 = v61;
        unsigned int v62 = 57344 * v60 / 0xFFFFu + 4096;
        v50[1] = v62;
        int v63 = (_WORD *)((char *)v50 + v21);
        *int v63 = v61;
        v63[1] = v62;
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
    uint64_t v64 = 2 * v35;
  }
  else
  {
    uint64_t v64 = 0;
  }
  if ((v64 | v8 & 1) < v24)
  {
    if (v36)
    {
      int v65 = *v16;
      int v66 = v16[1];
      v16 += 2;
      *unsigned int v22 = 57344 * v65 / 0xFFFFu + 4096;
      v22[1] = 57344 * v66 / 0xFFFFu + 4096;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v67 = -(uint64_t)v37;
      do
      {
        int v68 = *v16;
        int v69 = v16[1];
        v16 += 2;
        *unsigned int v22 = 57344 * v68 / 0xFFFFu + 4096;
        v22[1] = 57344 * v69 / 0xFFFFu + 4096;
        v22 += 2;
        BOOL v44 = __CFADD__(v67++, 1);
      }
      while (!v44);
      uint64_t v70 = 2 * v37;
    }
    else
    {
      uint64_t v70 = 0;
    }
    if ((v70 | (unint64_t)v38) < v23)
    {
      unsigned int v71 = 57344 * v16[1];
      *unsigned int v22 = 57344 * *v16 / 0xFFFF + 4096;
      v22[1] = v71 / 0xFFFF + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    uint64_t v28 = *a8;
    uint64_t v29 = v25 + v27;
    uint64_t v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v30 + 2 * i) = 56064 * *(unsigned __int16 *)(v29 + 2 * i) / 0xFFFF + 4096;
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      int v43 = v14[1];
      char v36 = v14 + 2;
      *unint64_t v20 = 57344 * *v14 / 0xFFFF + 4096;
      v20[1] = 57344 * v43 / 0xFFFFu + 4096;
      unint64_t v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          int v39 = *v36;
          int v40 = v36[1];
          v36 += 2;
          *unint64_t v37 = 57344 * v39 / 0xFFFFu + 4096;
          v37[1] = 57344 * v40 / 0xFFFFu + 4096;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      char v36 = v14;
      unint64_t v37 = v20;
      if (v34) {
        goto LABEL_21;
      }
    }
    uint64_t v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      unsigned int v44 = 57344 * v36[1];
      *unint64_t v37 = 57344 * *v36 / 0xFFFF + 4096;
      v37[1] = v44 / 0xFFFF + 4096;
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      int v46 = v14;
      unsigned int v47 = v20;
      if (v33)
      {
        int v46 = v14 + 2;
        unsigned int v48 = 57344 * v14[1] / 0xFFFF;
        __int16 v49 = 57344 * *v14 / 0xFFFF + 4096;
        *unint64_t v20 = v49;
        LOWORD(v48) = v48 + 4096;
        v20[1] = v48;
        uint64_t v50 = (_WORD *)((char *)v20 + v19);
        _WORD *v50 = v49;
        v50[1] = v48;
        unsigned int v47 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v51 = -(uint64_t)v34;
        do
        {
          unsigned int v52 = 57344 * v46[1];
          unsigned int v53 = 57344 * *v46 / 0xFFFF + 4096;
          _WORD *v47 = 57344 * *v46 / 0xFFFF + 4096;
          unsigned int v54 = v52 / 0xFFFF + 4096;
          v47[1] = v54;
          v47[2] = v53;
          v47[3] = v54;
          unsigned int v55 = (_WORD *)((char *)v47 + v19);
          *unsigned int v55 = v53;
          v55[1] = v54;
          v46 += 2;
          v55[2] = v53;
          v55[3] = v54;
          v47 += 4;
          BOOL v41 = __CFADD__(v51++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        int v56 = *v46;
        int v57 = v46[1];
        unsigned int v58 = 57344 * v56 / 0xFFFFu + 4096;
        _WORD *v47 = v58;
        unsigned int v59 = 57344 * v57 / 0xFFFFu + 4096;
        v47[1] = v59;
        int v60 = (_WORD *)((char *)v47 + v19);
        *int v60 = v58;
        v60[1] = v59;
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v61 = 2 * v32;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if (v33)
    {
      int v62 = *v14;
      int v63 = v14[1];
      v14 += 2;
      *unint64_t v20 = 57344 * v62 / 0xFFFFu + 4096;
      v20[1] = 57344 * v63 / 0xFFFFu + 4096;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v64 = -(uint64_t)v34;
      do
      {
        int v65 = *v14;
        int v66 = v14[1];
        v14 += 2;
        *unint64_t v20 = 57344 * v65 / 0xFFFFu + 4096;
        v20[1] = 57344 * v66 / 0xFFFFu + 4096;
        v20 += 2;
        BOOL v41 = __CFADD__(v64++, 1);
      }
      while (!v41);
      uint64_t v67 = 2 * v34;
    }
    else
    {
      uint64_t v67 = 0;
    }
    if ((v67 | (unint64_t)v35) < v21)
    {
      unsigned int v68 = 57344 * v14[1];
      *unint64_t v20 = 57344 * *v14 / 0xFFFF + 4096;
      v20[1] = v68 / 0xFFFF + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  unint64_t v10 = v9 & 0xFFFFFFFE;
  unint64_t v11 = a2[3] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = a3[1] + v12 * (v9 >> 1) + 2 * (v8 & 0xFFFFFFFE);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v16 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = a7[1] + v17 * v15 + 4 * v14;
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2]) {
    unint64_t v19 = a6[2];
  }
  else {
    unint64_t v19 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (v11 - v10 + (v11 & 1) >= v16) {
    unint64_t v20 = v16;
  }
  else {
    unint64_t v20 = v11 - v10 + (v11 & 1);
  }
  if (v20)
  {
    unint64_t v59 = v20;
    uint64_t v21 = *a4;
    uint64_t v22 = 2 * (v8 & 0xFFFFFFFE);
    uint64_t v23 = *a8;
    uint64_t v24 = *a3 + *a4 * v10;
    if (v10 >= v9) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = *a4;
    }
    uint64_t v26 = (char *)(v24 + v22 + v25);
    uint64_t v27 = (char *)(*a7 + v23 * v15 + 2 * v14);
    unint64_t v60 = v19;
    size_t v28 = 2 * v19;
    uint64_t v29 = -(uint64_t)v20;
    do
    {
      memcpy(v27, v26, v28);
      v26 += v21;
      v27 += v23;
      BOOL v30 = __CFADD__(v29++, 1);
    }
    while (!v30);
    unint64_t v20 = v59;
    uint64_t v8 = a2[4];
    unint64_t v9 = a2[5];
    unint64_t v19 = v60;
  }
  uint64_t v31 = v9 & 1;
  unint64_t v32 = (v20 - v31) >> 1;
  if (v20 >> 1 < v32) {
    unint64_t v32 = v20 >> 1;
  }
  char v33 = v8;
  unint64_t v34 = v19 >> 1;
  uint64_t v35 = v8 & 1;
  if (v19 >> 1 >= (v19 - v35) >> 1) {
    unint64_t v34 = (v19 - v35) >> 1;
  }
  if (v9)
  {
    char v36 = (int *)v13;
    if (v33)
    {
      char v36 = (int *)(v13 + 4);
      *(_DWORD *)uint64_t v18 = *(_DWORD *)v13;
      unint64_t v37 = (_DWORD *)(v18 + 4);
      if (v34)
      {
LABEL_22:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          int v39 = *v36++;
          *v37++ = v39;
          BOOL v30 = __CFADD__(v38++, 1);
        }
        while (!v30);
        uint64_t v40 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v37 = (_DWORD *)v18;
      if (v34) {
        goto LABEL_22;
      }
    }
    uint64_t v40 = 0;
LABEL_28:
    if ((v40 | (unint64_t)v35) < v19) {
      *unint64_t v37 = *v36;
    }
    v13 += v12;
    v18 += v17;
  }
  if (v32)
  {
    for (uint64_t i = 0; i != v32; ++i)
    {
      uint64_t v42 = (__int16 *)v13;
      int v43 = (_WORD *)v18;
      if (v33)
      {
        __int16 v44 = *(_WORD *)v13;
        __int16 v45 = *(_WORD *)(v13 + 2);
        uint64_t v42 = (__int16 *)(v13 + 4);
        *(_WORD *)uint64_t v18 = *(_WORD *)v13;
        *(_WORD *)(v18 + 2) = v45;
        int v46 = (_WORD *)(v18 + v17);
        *int v46 = v44;
        v46[1] = v45;
        int v43 = (_WORD *)(v18 + 4);
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          __int16 v48 = *v42;
          __int16 v49 = v42[1];
          v42 += 2;
          *int v43 = v48;
          v43[1] = v49;
          v43[2] = v48;
          v43[3] = v49;
          uint64_t v50 = (_WORD *)((char *)v43 + v17);
          _WORD *v50 = v48;
          v50[1] = v49;
          v50[2] = v48;
          v50[3] = v49;
          v43 += 4;
          BOOL v30 = __CFADD__(v47++, 1);
        }
        while (!v30);
      }
      if ((v35 | (2 * v34)) < v19)
      {
        __int16 v51 = *v42;
        __int16 v52 = v42[1];
        *int v43 = v51;
        v43[1] = v52;
        unsigned int v53 = (_WORD *)((char *)v43 + v17);
        *unsigned int v53 = v51;
        v53[1] = v52;
      }
      v13 += v12;
      v18 += 2 * v17;
    }
    v32 *= 2;
  }
  if ((v32 | v31) < v20)
  {
    if (v33)
    {
      int v54 = *(_DWORD *)v13;
      v13 += 4;
      *(_DWORD *)uint64_t v18 = v54;
      v18 += 4;
    }
    if (v34)
    {
      uint64_t v55 = -(uint64_t)v34;
      do
      {
        int v56 = *(_DWORD *)v13;
        v13 += 4;
        *(_DWORD *)uint64_t v18 = v56;
        v18 += 4;
        BOOL v30 = __CFADD__(v55++, 1);
      }
      while (!v30);
      v34 *= 2;
    }
    if ((v34 | v35) < v19) {
      *(_DWORD *)uint64_t v18 = *(_DWORD *)v13;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = *a3 + v26 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = v26;
    }
    uint64_t v31 = v29 + 2 * (v9 + v8) + v30;
    uint64_t v32 = a7[2] + v28 * v19 + v20;
    uint64_t v33 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = 56064 * *(unsigned __int16 *)(v31 + 2 * i) / 0xFFFF + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v35 = v11 & 1;
  if (v24 >> 1 >= (v24 - v35) >> 1) {
    unint64_t v36 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  char v37 = v8;
  unint64_t v38 = v23 >> 1;
  unint64_t v39 = (v23 - v9) >> 1;
  if (v38 >= v39) {
    unint64_t v38 = v39;
  }
  if (v11)
  {
    if (v37)
    {
      int v42 = v15[1];
      uint64_t v40 = v15 + 2;
      *uint64_t v22 = 57344 * *v15 / 0xFFFF + 4096;
      v22[1] = 57344 * v42 / 0xFFFFu + 4096;
      BOOL v41 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        uint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v40 = v15;
      BOOL v41 = v22;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v38;
    do
    {
      unsigned int v44 = 57344 * v40[1] / 0xFFFF;
      _WORD *v41 = 57344 * *v40 / 0xFFFF + 4096;
      v41[1] = v44 + 4096;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      uint64_t v47 = v15;
      __int16 v48 = v22;
      if (v37)
      {
        int v49 = v15[1];
        uint64_t v47 = v15 + 2;
        *uint64_t v22 = 57344 * *v15 / 0xFFFF + 4096;
        v22[1] = 57344 * v49 / 0xFFFFu + 4096;
        __int16 v48 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v50 = -(uint64_t)v38;
        do
        {
          unsigned int v51 = 57344 * v47[1] / 0xFFFF;
          unsigned int v52 = 57344 * *v47 / 0xFFFF + 4096;
          *__int16 v48 = 57344 * *v47 / 0xFFFF + 4096;
          LOWORD(v51) = v51 + 4096;
          v48[1] = v51;
          unsigned int v53 = (_WORD *)((char *)v48 + v21);
          *unsigned int v53 = v52;
          v53[1] = v51;
          v48 += 2;
          v47 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v54 = 2 * v36;
  }
  else
  {
    uint64_t v54 = 0;
  }
  if ((v54 | (unint64_t)v35) < v24)
  {
    if (v37)
    {
      int v55 = *v15;
      int v56 = v15[1];
      v15 += 2;
      *uint64_t v22 = 57344 * v55 / 0xFFFFu + 4096;
      v22[1] = 57344 * v56 / 0xFFFFu + 4096;
      v22 += 2;
    }
    if (v38)
    {
      uint64_t v57 = -(uint64_t)v38;
      do
      {
        unsigned int v58 = 57344 * v15[1] / 0xFFFF;
        *uint64_t v22 = 57344 * *v15 / 0xFFFF + 4096;
        v22[1] = v58 + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v45 = __CFADD__(v57++, 1);
      }
      while (!v45);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + 2 * (v9 + v8) + v29;
    uint64_t v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = 56064 * *(unsigned __int16 *)(v30 + 2 * i) / 0xFFFF + 4096;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1) {
    unint64_t v34 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v34 = v24 >> 1;
  }
  char v35 = v8;
  unint64_t v36 = v23 >> 1;
  unint64_t v37 = (v23 - v9) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v11)
  {
    if (v35)
    {
      int v40 = v15[1];
      unint64_t v38 = v15 + 2;
      *uint64_t v22 = 57344 * *v15 / 0xFFFF + 4096;
      v22[1] = 57344 * v40 / 0xFFFFu + 4096;
      unint64_t v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        uint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v38 = v15;
      unint64_t v39 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      unsigned int v42 = 57344 * v38[1] / 0xFFFF;
      *unint64_t v39 = 57344 * *v38 / 0xFFFF + 4096;
      v39[1] = v42 + 4096;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      BOOL v45 = v15;
      int v46 = v22;
      if (v35)
      {
        int v47 = v15[1];
        BOOL v45 = v15 + 2;
        *uint64_t v22 = 57344 * *v15 / 0xFFFF + 4096;
        v22[1] = 57344 * v47 / 0xFFFFu + 4096;
        int v46 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v48 = -(uint64_t)v36;
        do
        {
          unsigned int v49 = 57344 * v45[1] / 0xFFFF;
          unsigned int v50 = 57344 * *v45 / 0xFFFF + 4096;
          *int v46 = 57344 * *v45 / 0xFFFF + 4096;
          LOWORD(v49) = v49 + 4096;
          v46[1] = v49;
          unsigned int v51 = (_WORD *)((char *)v46 + v21);
          *unsigned int v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          BOOL v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v52 = 2 * v34;
  }
  else
  {
    uint64_t v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if (v35)
    {
      int v53 = *v15;
      int v54 = v15[1];
      v15 += 2;
      *uint64_t v22 = 57344 * v53 / 0xFFFFu + 4096;
      v22[1] = 57344 * v54 / 0xFFFFu + 4096;
      v22 += 2;
    }
    if (v36)
    {
      uint64_t v55 = -(uint64_t)v36;
      do
      {
        unsigned int v56 = 57344 * v15[1] / 0xFFFF;
        *uint64_t v22 = 57344 * *v15 / 0xFFFF + 4096;
        v22[1] = v56 + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  unint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = v10 & 0xFFFFFFFE;
  unint64_t v12 = *(void *)(a2 + 24) + v10;
  uint64_t v13 = 2 * (v9 + v8);
  uint64_t v14 = a4[1];
  uint64_t v15 = (int *)(a3[1] + v14 * (v10 >> 1) + (v13 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v16;
  uint64_t v19 = a8[1];
  uint64_t v20 = (int *)(a7[1] + v19 * v17 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) < v21) {
    unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8);
  }
  if (v12 - v11 + (v12 & 1) >= *(void *)(a6 + 24)) {
    unint64_t v22 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v22 = v12 - v11 + (v12 & 1);
  }
  if (v22)
  {
    unint64_t v51 = v21;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v10) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = (char *)(v25 + v13 + v26);
    uint64_t v28 = (char *)(*a7 + v24 * v17 + v18);
    size_t v29 = 2 * v21;
    unint64_t v53 = v22;
    uint64_t v30 = -(uint64_t)v22;
    do
    {
      memcpy(v28, v27, v29);
      v27 += v23;
      v28 += v24;
      BOOL v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    unint64_t v22 = v53;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
    unint64_t v21 = v51;
  }
  uint64_t v32 = v10 & 1;
  if (v22 >> 1 >= (v22 - v32) >> 1) {
    unint64_t v33 = (v22 - (v10 & 1)) >> 1;
  }
  else {
    unint64_t v33 = v22 >> 1;
  }
  char v34 = v8;
  unint64_t v35 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1) {
    unint64_t v35 = (v21 - v9) >> 1;
  }
  if (v10)
  {
    unint64_t v36 = v15;
    if (v34)
    {
      unint64_t v36 = v15 + 1;
      *uint64_t v20 = *v15;
      unint64_t v37 = v20 + 1;
      if (!v35)
      {
LABEL_27:
        uint64_t v15 = (int *)((char *)v15 + v14);
        uint64_t v20 = (int *)((char *)v20 + v19);
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v37 = v20;
      if (!v35) {
        goto LABEL_27;
      }
    }
    uint64_t v38 = -(uint64_t)v35;
    do
    {
      int v39 = *v36++;
      *v37++ = v39;
      BOOL v31 = __CFADD__(v38++, 1);
    }
    while (!v31);
    goto LABEL_27;
  }
LABEL_28:
  if (v33)
  {
    for (uint64_t i = 0; i != v33; ++i)
    {
      uint64_t v41 = (__int16 *)v15;
      unsigned int v42 = (__int16 *)v20;
      if (v34)
      {
        uint64_t v41 = (__int16 *)(v15 + 1);
        *uint64_t v20 = *v15;
        unsigned int v42 = (__int16 *)(v20 + 1);
      }
      if (v35)
      {
        uint64_t v43 = -(uint64_t)v35;
        do
        {
          __int16 v44 = *v41;
          __int16 v45 = v41[1];
          *unsigned int v42 = *v41;
          v42[1] = v45;
          int v46 = (__int16 *)((char *)v42 + v19);
          *int v46 = v44;
          v46[1] = v45;
          v42 += 2;
          v41 += 2;
          BOOL v31 = __CFADD__(v43++, 1);
        }
        while (!v31);
      }
      uint64_t v15 = (int *)((char *)v15 + v14);
      uint64_t v20 = (int *)((char *)v20 + 2 * v19);
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v22)
  {
    if (v34)
    {
      int v47 = *v15++;
      *v20++ = v47;
    }
    if (v35)
    {
      uint64_t v48 = -(uint64_t)v35;
      do
      {
        int v49 = *v15++;
        *v20++ = v49;
        BOOL v31 = __CFADD__(v48++, 1);
      }
      while (!v31);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v18 - v17) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 56064 * *(unsigned __int16 *)(v32 + 2 * i) / 0xFFFF + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v35 = v26 >> 1;
  unint64_t v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v42 = v16[1];
      int v40 = v16 + 2;
      *uint64_t v23 = 57344 * *v16 / 0xFFFF + 4096;
      v23[1] = 57344 * v42 / 0xFFFFu + 4096;
      uint64_t v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      int v40 = v16;
      uint64_t v41 = v23;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      unsigned int v44 = 57344 * v40[1] / 0xFFFF;
      _WORD *v41 = 57344 * *v40 / 0xFFFF + 4096;
      v41[1] = v44 + 4096;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      int v47 = v16;
      uint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1];
        int v47 = v16 + 2;
        *uint64_t v23 = 57344 * *v16 / 0xFFFF + 4096;
        v23[1] = 57344 * v49 / 0xFFFFu + 4096;
        uint64_t v48 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          unsigned int v51 = 57344 * v47[1] / 0xFFFF;
          *uint64_t v48 = 57344 * *v47 / 0xFFFF + 4096;
          v48[1] = v51 + 4096;
          v47 += 2;
          v48 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  unint64_t v12 = v8 & 0xFFFFFFFE;
  uint64_t v13 = v10 + v8;
  uint64_t v14 = (v10 + v8) & 1;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  unint64_t v19 = a6[2];
  unint64_t v20 = a6[3];
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + v21 * v18 + 4 * v17);
  unint64_t v23 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v23 >= v19) {
    unint64_t v23 = v19;
  }
  unint64_t v24 = v13 - v12 + v14;
  if (v24 >= v20) {
    unint64_t v24 = v20;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + 2 * (v9 & 0xFFFFFFFE) + v30;
    uint64_t v32 = a7[2] + v28 * v18 + 2 * v17;
    uint64_t v33 = *a7 + v27 * v18 + 2 * v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v31 + 2 * i))) >> 32) >> 12)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  unint64_t v35 = (v24 - (v8 & 1)) >> 1;
  if (v24 >> 1 < v35) {
    unint64_t v35 = v24 >> 1;
  }
  char v36 = v9;
  unint64_t v37 = v23 >> 1;
  uint64_t v38 = v9 & 1;
  if (v23 >> 1 >= (v23 - v38) >> 1) {
    unint64_t v37 = (v23 - v38) >> 1;
  }
  if (v8)
  {
    if (v36)
    {
      int v46 = v16[1];
      unint64_t v39 = v16 + 2;
      *uint64_t v22 = 16 * (((268439553 * (unint64_t)(3584 * *v16)) >> 32) >> 12) + 4096;
      v22[1] = 16 * ((268439553 * (unint64_t)(3584 * v46)) >> 44) + 4096;
      int v40 = v22 + 2;
      if (v37)
      {
LABEL_21:
        uint64_t v41 = -(uint64_t)v37;
        do
        {
          int v42 = *v39;
          int v43 = v39[1];
          v39 += 2;
          *int v40 = 16 * (((268439553 * (unint64_t)(3584 * v42)) >> 32) >> 12) + 4096;
          v40[1] = 16 * ((268439553 * (unint64_t)(3584 * v43)) >> 44) + 4096;
          v40 += 2;
          BOOL v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        uint64_t v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v39 = v16;
      int v40 = v22;
      if (v37) {
        goto LABEL_21;
      }
    }
    uint64_t v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v23)
    {
      int v47 = *v39;
      int v48 = v39[1];
      *int v40 = 16 * (((268439553 * (unint64_t)(3584 * v47)) >> 32) >> 12) + 4096;
      v40[1] = 16 * (((268439553 * (unint64_t)(3584 * v48)) >> 32) >> 12) + 4096;
    }
    uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      uint64_t v50 = v16;
      unsigned int v51 = v22;
      if (v36)
      {
        uint64_t v50 = v16 + 2;
        unint64_t v52 = (268439553 * (unint64_t)(3584 * v16[1])) >> 44;
        __int16 v53 = 16 * (((268439553 * (unint64_t)(3584 * *v16)) >> 32) >> 12) + 4096;
        *uint64_t v22 = v53;
        LOWORD(v52) = 16 * v52 + 4096;
        v22[1] = v52;
        int v54 = (_WORD *)((char *)v22 + v21);
        *int v54 = v53;
        v54[1] = v52;
        unsigned int v51 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v55 = -(uint64_t)v37;
        do
        {
          unint64_t v56 = 962087357952 * v50[1];
          unsigned int v57 = 16 * (((268439553 * (unint64_t)(3584 * *v50)) >> 32) >> 12) + 4096;
          *unsigned int v51 = 16 * (((268439553 * (unint64_t)(3584 * *v50)) >> 32) >> 12) + 4096;
          LODWORD(v56) = 16 * (v56 >> 44) + 4096;
          v51[1] = v56;
          v51[2] = v57;
          v51[3] = v56;
          unsigned int v58 = (_WORD *)((char *)v51 + v21);
          _WORD *v58 = v57;
          v58[1] = v56;
          v50 += 2;
          v58[2] = v57;
          v58[3] = v56;
          v51 += 4;
          BOOL v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v23)
      {
        int v59 = *v50;
        int v60 = v50[1];
        unsigned int v61 = 16 * (((268439553 * (unint64_t)(3584 * v59)) >> 32) >> 12) + 4096;
        *unsigned int v51 = v61;
        unsigned int v62 = 16 * (((268439553 * (unint64_t)(3584 * v60)) >> 32) >> 12) + 4096;
        v51[1] = v62;
        int v63 = (_WORD *)((char *)v51 + v21);
        *int v63 = v61;
        v63[1] = v62;
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
    uint64_t v64 = 2 * v35;
  }
  else
  {
    uint64_t v64 = 0;
  }
  if ((v64 | v8 & 1) < v24)
  {
    if (v36)
    {
      int v65 = *v16;
      int v66 = v16[1];
      v16 += 2;
      *uint64_t v22 = 16 * (((268439553 * (unint64_t)(3584 * v65)) >> 32) >> 12) + 4096;
      v22[1] = 16 * ((268439553 * (unint64_t)(3584 * v66)) >> 44) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v67 = -(uint64_t)v37;
      do
      {
        int v68 = *v16;
        int v69 = v16[1];
        v16 += 2;
        *uint64_t v22 = 16 * (((268439553 * (unint64_t)(3584 * v68)) >> 32) >> 12) + 4096;
        v22[1] = 16 * ((268439553 * (unint64_t)(3584 * v69)) >> 44) + 4096;
        v22 += 2;
        BOOL v44 = __CFADD__(v67++, 1);
      }
      while (!v44);
      uint64_t v70 = 2 * v37;
    }
    else
    {
      uint64_t v70 = 0;
    }
    if ((v70 | (unint64_t)v38) < v23)
    {
      int v71 = *v16;
      int v72 = v16[1];
      *uint64_t v22 = 16 * (((268439553 * (unint64_t)(3584 * v71)) >> 32) >> 12) + 4096;
      v22[1] = 16 * (((268439553 * (unint64_t)(3584 * v72)) >> 32) >> 12) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    uint64_t v28 = *a8;
    uint64_t v29 = v25 + v27;
    uint64_t v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v30 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v29 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      int v43 = v14[1];
      char v36 = v14 + 2;
      *unint64_t v20 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
      v20[1] = 16 * ((268439553 * (unint64_t)(3584 * v43)) >> 44) + 4096;
      unint64_t v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          int v39 = *v36;
          int v40 = v36[1];
          v36 += 2;
          *unint64_t v37 = 16 * (((268439553 * (unint64_t)(3584 * v39)) >> 32) >> 12) + 4096;
          v37[1] = 16 * ((268439553 * (unint64_t)(3584 * v40)) >> 44) + 4096;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      char v36 = v14;
      unint64_t v37 = v20;
      if (v34) {
        goto LABEL_21;
      }
    }
    uint64_t v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      int v44 = *v36;
      int v45 = v36[1];
      *unint64_t v37 = 16 * (((268439553 * (unint64_t)(3584 * v44)) >> 32) >> 12) + 4096;
      v37[1] = 16 * (((268439553 * (unint64_t)(3584 * v45)) >> 32) >> 12) + 4096;
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      int v47 = v14;
      int v48 = v20;
      if (v33)
      {
        int v47 = v14 + 2;
        unint64_t v49 = (268439553 * (unint64_t)(3584 * v14[1])) >> 44;
        __int16 v50 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
        *unint64_t v20 = v50;
        LOWORD(v49) = 16 * v49 + 4096;
        v20[1] = v49;
        unsigned int v51 = (_WORD *)((char *)v20 + v19);
        *unsigned int v51 = v50;
        v51[1] = v49;
        int v48 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v52 = -(uint64_t)v34;
        do
        {
          unint64_t v53 = 962087357952 * v47[1];
          unsigned int v54 = 16 * (((268439553 * (unint64_t)(3584 * *v47)) >> 32) >> 12) + 4096;
          *int v48 = 16 * (((268439553 * (unint64_t)(3584 * *v47)) >> 32) >> 12) + 4096;
          LODWORD(v53) = 16 * (v53 >> 44) + 4096;
          v48[1] = v53;
          v48[2] = v54;
          v48[3] = v53;
          uint64_t v55 = (_WORD *)((char *)v48 + v19);
          *uint64_t v55 = v54;
          v55[1] = v53;
          v47 += 2;
          v55[2] = v54;
          v55[3] = v53;
          v48 += 4;
          BOOL v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        int v56 = *v47;
        int v57 = v47[1];
        unsigned int v58 = 16 * (((268439553 * (unint64_t)(3584 * v56)) >> 32) >> 12) + 4096;
        *int v48 = v58;
        unsigned int v59 = 16 * (((268439553 * (unint64_t)(3584 * v57)) >> 32) >> 12) + 4096;
        v48[1] = v59;
        int v60 = (_WORD *)((char *)v48 + v19);
        *int v60 = v58;
        v60[1] = v59;
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v61 = 2 * v32;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if (v33)
    {
      int v62 = *v14;
      int v63 = v14[1];
      v14 += 2;
      *unint64_t v20 = 16 * (((268439553 * (unint64_t)(3584 * v62)) >> 32) >> 12) + 4096;
      v20[1] = 16 * ((268439553 * (unint64_t)(3584 * v63)) >> 44) + 4096;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v64 = -(uint64_t)v34;
      do
      {
        int v65 = *v14;
        int v66 = v14[1];
        v14 += 2;
        *unint64_t v20 = 16 * (((268439553 * (unint64_t)(3584 * v65)) >> 32) >> 12) + 4096;
        v20[1] = 16 * ((268439553 * (unint64_t)(3584 * v66)) >> 44) + 4096;
        v20 += 2;
        BOOL v41 = __CFADD__(v64++, 1);
      }
      while (!v41);
      uint64_t v67 = 2 * v34;
    }
    else
    {
      uint64_t v67 = 0;
    }
    if ((v67 | (unint64_t)v35) < v21)
    {
      int v68 = *v14;
      int v69 = v14[1];
      *unint64_t v20 = 16 * (((268439553 * (unint64_t)(3584 * v68)) >> 32) >> 12) + 4096;
      v20[1] = 16 * (((268439553 * (unint64_t)(3584 * v69)) >> 32) >> 12) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + 2 * (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 12);
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v31 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v31) {
    unint64_t v31 = v22 >> 1;
  }
  char v32 = v9;
  unint64_t v33 = v21 >> 1;
  uint64_t v34 = v9 & 1;
  if (v21 >> 1 >= (v21 - v34) >> 1) {
    unint64_t v33 = (v21 - v34) >> 1;
  }
  if (v8)
  {
    if (v32)
    {
      int v42 = v14[1];
      uint64_t v35 = v14 + 2;
      *unint64_t v20 = 16 * (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12);
      v20[1] = 16 * ((268439553 * (unint64_t)(4095 * v42)) >> 44);
      char v36 = v20 + 2;
      if (v33)
      {
LABEL_21:
        uint64_t v37 = -(uint64_t)v33;
        do
        {
          int v38 = *v35;
          int v39 = v35[1];
          v35 += 2;
          *char v36 = 16 * (((268439553 * (unint64_t)(4095 * v38)) >> 32) >> 12);
          v36[1] = 16 * ((268439553 * (unint64_t)(4095 * v39)) >> 44);
          v36 += 2;
          BOOL v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        uint64_t v41 = 2 * v33;
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v35 = v14;
      char v36 = v20;
      if (v33) {
        goto LABEL_21;
      }
    }
    uint64_t v41 = 0;
LABEL_27:
    if ((v41 | (unint64_t)v34) < v21)
    {
      int v43 = *v35;
      int v44 = v35[1];
      *char v36 = 16 * (((268439553 * (unint64_t)(4095 * v43)) >> 32) >> 12);
      v36[1] = 16 * (((268439553 * (unint64_t)(4095 * v44)) >> 32) >> 12);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v31)
  {
    for (uint64_t j = 0; j != v31; ++j)
    {
      int v46 = v14;
      int v47 = v20;
      if (v32)
      {
        int v46 = v14 + 2;
        unint64_t v48 = (268439553 * (unint64_t)(4095 * v14[1])) >> 44;
        unsigned int v49 = 16 * (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12);
        *unint64_t v20 = v49;
        LOWORD(v48) = 16 * v48;
        v20[1] = v48;
        __int16 v50 = (_WORD *)((char *)v20 + v19);
        _WORD *v50 = v49;
        v50[1] = v48;
        int v47 = v20 + 2;
      }
      if (v33)
      {
        uint64_t v51 = -(uint64_t)v33;
        do
        {
          unsigned int v52 = 4095 * v46[1];
          unsigned int v53 = 16 * (((268439553 * (unint64_t)(4095 * *v46)) >> 32) >> 12);
          _WORD *v47 = 16 * (((268439553 * (unint64_t)(4095 * *v46)) >> 32) >> 12);
          unsigned int v54 = 16 * (((268439553 * (unint64_t)v52) >> 32) >> 12);
          v47[1] = v54;
          v47[2] = v53;
          v47[3] = v54;
          v46 += 2;
          uint64_t v55 = (_WORD *)((char *)v47 + v19);
          *uint64_t v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v47 += 4;
          BOOL v40 = __CFADD__(v51++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v21)
      {
        int v56 = *v46;
        int v57 = v46[1];
        unsigned int v58 = 16 * (((268439553 * (unint64_t)(4095 * v56)) >> 32) >> 12);
        _WORD *v47 = v58;
        unsigned int v59 = 16 * (((268439553 * (unint64_t)(4095 * v57)) >> 32) >> 12);
        v47[1] = v59;
        int v60 = (_WORD *)((char *)v47 + v19);
        *int v60 = v58;
        v60[1] = v59;
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v61 = 2 * v31;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if (v32)
    {
      int v62 = *v14;
      int v63 = v14[1];
      v14 += 2;
      *unint64_t v20 = 16 * (((268439553 * (unint64_t)(4095 * v62)) >> 32) >> 12);
      v20[1] = 16 * ((268439553 * (unint64_t)(4095 * v63)) >> 44);
      v20 += 2;
    }
    if (v33)
    {
      uint64_t v64 = -(uint64_t)v33;
      do
      {
        int v65 = *v14;
        int v66 = v14[1];
        v14 += 2;
        *unint64_t v20 = 16 * (((268439553 * (unint64_t)(4095 * v65)) >> 32) >> 12);
        v20[1] = 16 * ((268439553 * (unint64_t)(4095 * v66)) >> 44);
        v20 += 2;
        BOOL v40 = __CFADD__(v64++, 1);
      }
      while (!v40);
      uint64_t v67 = 2 * v33;
    }
    else
    {
      uint64_t v67 = 0;
    }
    if ((v67 | (unint64_t)v34) < v21)
    {
      int v68 = *v14;
      int v69 = v14[1];
      *unint64_t v20 = 16 * (((268439553 * (unint64_t)(4095 * v68)) >> 32) >> 12);
      v20[1] = 16 * (((268439553 * (unint64_t)(4095 * v69)) >> 32) >> 12);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = *a3 + v26 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = v26;
    }
    uint64_t v31 = v29 + 2 * (v9 + v8) + v30;
    uint64_t v32 = a7[2] + v28 * v19 + v20;
    uint64_t v33 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v31 + 2 * i))) >> 32) >> 12)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v35 = v11 & 1;
  if (v24 >> 1 >= (v24 - v35) >> 1) {
    unint64_t v36 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  char v37 = v8;
  unint64_t v38 = v23 >> 1;
  unint64_t v39 = (v23 - v9) >> 1;
  if (v38 >= v39) {
    unint64_t v38 = v39;
  }
  if (v11)
  {
    if (v37)
    {
      int v42 = v15[1];
      BOOL v40 = v15 + 2;
      *unint64_t v22 = 16 * (((268439553 * (unint64_t)(3584 * *v15)) >> 32) >> 12) + 4096;
      v22[1] = 16 * ((268439553 * (unint64_t)(3584 * v42)) >> 44) + 4096;
      uint64_t v41 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      BOOL v40 = v15;
      uint64_t v41 = v22;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v38;
    do
    {
      unint64_t v44 = (268439553 * (unint64_t)(3584 * v40[1])) >> 44;
      _WORD *v41 = 16 * (((268439553 * (unint64_t)(3584 * *v40)) >> 32) >> 12) + 4096;
      v41[1] = 16 * v44 + 4096;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      int v47 = v15;
      unint64_t v48 = v22;
      if (v37)
      {
        int v49 = v15[1];
        int v47 = v15 + 2;
        *unint64_t v22 = 16 * (((268439553 * (unint64_t)(3584 * *v15)) >> 32) >> 12) + 4096;
        v22[1] = 16 * ((268439553 * (unint64_t)(3584 * v49)) >> 44) + 4096;
        unint64_t v48 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v50 = -(uint64_t)v38;
        do
        {
          unint64_t v51 = (268439553 * (unint64_t)(3584 * v47[1])) >> 44;
          unsigned int v52 = 16 * (((268439553 * (unint64_t)(3584 * *v47)) >> 32) >> 12) + 4096;
          *unint64_t v48 = 16 * (((268439553 * (unint64_t)(3584 * *v47)) >> 32) >> 12) + 4096;
          LOWORD(v51) = 16 * v51 + 4096;
          v48[1] = v51;
          unsigned int v53 = (_WORD *)((char *)v48 + v21);
          *unsigned int v53 = v52;
          v53[1] = v51;
          v48 += 2;
          v47 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v54 = 2 * v36;
  }
  else
  {
    uint64_t v54 = 0;
  }
  if ((v54 | (unint64_t)v35) < v24)
  {
    if (v37)
    {
      int v55 = *v15;
      int v56 = v15[1];
      v15 += 2;
      *unint64_t v22 = 16 * (((268439553 * (unint64_t)(3584 * v55)) >> 32) >> 12) + 4096;
      v22[1] = 16 * ((268439553 * (unint64_t)(3584 * v56)) >> 44) + 4096;
      v22 += 2;
    }
    if (v38)
    {
      uint64_t v57 = -(uint64_t)v38;
      do
      {
        unint64_t v58 = (268439553 * (unint64_t)(3584 * v15[1])) >> 44;
        *unint64_t v22 = 16 * (((268439553 * (unint64_t)(3584 * *v15)) >> 32) >> 12) + 4096;
        v22[1] = 16 * v58 + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v45 = __CFADD__(v57++, 1);
      }
      while (!v45);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + 2 * (v9 + v8) + v29;
    uint64_t v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v30 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1) {
    unint64_t v34 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v34 = v24 >> 1;
  }
  char v35 = v8;
  unint64_t v36 = v23 >> 1;
  unint64_t v37 = (v23 - v9) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v11)
  {
    if (v35)
    {
      int v40 = v15[1];
      unint64_t v38 = v15 + 2;
      *unint64_t v22 = 16 * (((268439553 * (unint64_t)(3584 * *v15)) >> 32) >> 12) + 4096;
      v22[1] = 16 * ((268439553 * (unint64_t)(3584 * v40)) >> 44) + 4096;
      unint64_t v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v38 = v15;
      unint64_t v39 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      unint64_t v42 = (268439553 * (unint64_t)(3584 * v38[1])) >> 44;
      *unint64_t v39 = 16 * (((268439553 * (unint64_t)(3584 * *v38)) >> 32) >> 12) + 4096;
      v39[1] = 16 * v42 + 4096;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      BOOL v45 = v15;
      int v46 = v22;
      if (v35)
      {
        int v47 = v15[1];
        BOOL v45 = v15 + 2;
        *unint64_t v22 = 16 * (((268439553 * (unint64_t)(3584 * *v15)) >> 32) >> 12) + 4096;
        v22[1] = 16 * ((268439553 * (unint64_t)(3584 * v47)) >> 44) + 4096;
        int v46 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v48 = -(uint64_t)v36;
        do
        {
          unint64_t v49 = (268439553 * (unint64_t)(3584 * v45[1])) >> 44;
          unsigned int v50 = 16 * (((268439553 * (unint64_t)(3584 * *v45)) >> 32) >> 12) + 4096;
          *int v46 = 16 * (((268439553 * (unint64_t)(3584 * *v45)) >> 32) >> 12) + 4096;
          LOWORD(v49) = 16 * v49 + 4096;
          v46[1] = v49;
          unint64_t v51 = (_WORD *)((char *)v46 + v21);
          *unint64_t v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          BOOL v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v52 = 2 * v34;
  }
  else
  {
    uint64_t v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if (v35)
    {
      int v53 = *v15;
      int v54 = v15[1];
      v15 += 2;
      *unint64_t v22 = 16 * (((268439553 * (unint64_t)(3584 * v53)) >> 32) >> 12) + 4096;
      v22[1] = 16 * ((268439553 * (unint64_t)(3584 * v54)) >> 44) + 4096;
      v22 += 2;
    }
    if (v36)
    {
      uint64_t v55 = -(uint64_t)v36;
      do
      {
        unint64_t v56 = (268439553 * (unint64_t)(3584 * v15[1])) >> 44;
        *unint64_t v22 = 16 * (((268439553 * (unint64_t)(3584 * *v15)) >> 32) >> 12) + 4096;
        v22[1] = 16 * v56 + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + 2 * (v9 + v8) + v29;
    uint64_t v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v30 + 2 * i))) >> 32) >> 12);
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1) {
    unint64_t v34 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v34 = v24 >> 1;
  }
  char v35 = v8;
  unint64_t v36 = v23 >> 1;
  unint64_t v37 = (v23 - v9) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v11)
  {
    if (v35)
    {
      int v40 = v15[1];
      unint64_t v38 = v15 + 2;
      *unint64_t v22 = 16 * (((268439553 * (unint64_t)(4095 * *v15)) >> 32) >> 12);
      v22[1] = 16 * ((268439553 * (unint64_t)(4095 * v40)) >> 44);
      unint64_t v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v38 = v15;
      unint64_t v39 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      unint64_t v42 = (268439553 * (unint64_t)(4095 * v38[1])) >> 44;
      *unint64_t v39 = 16 * (((268439553 * (unint64_t)(4095 * *v38)) >> 32) >> 12);
      v39[1] = 16 * v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      BOOL v45 = v15;
      int v46 = v22;
      if (v35)
      {
        int v47 = v15[1];
        BOOL v45 = v15 + 2;
        *unint64_t v22 = 16 * (((268439553 * (unint64_t)(4095 * *v15)) >> 32) >> 12);
        v22[1] = 16 * ((268439553 * (unint64_t)(4095 * v47)) >> 44);
        int v46 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v48 = -(uint64_t)v36;
        do
        {
          unint64_t v49 = (268439553 * (unint64_t)(4095 * v45[1])) >> 44;
          unsigned int v50 = 16 * (((268439553 * (unint64_t)(4095 * *v45)) >> 32) >> 12);
          *int v46 = 16 * (((268439553 * (unint64_t)(4095 * *v45)) >> 32) >> 12);
          LOWORD(v49) = 16 * v49;
          v46[1] = v49;
          unint64_t v51 = (_WORD *)((char *)v46 + v21);
          *unint64_t v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          BOOL v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v52 = 2 * v34;
  }
  else
  {
    uint64_t v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if (v35)
    {
      int v53 = *v15;
      int v54 = v15[1];
      v15 += 2;
      *unint64_t v22 = 16 * (((268439553 * (unint64_t)(4095 * v53)) >> 32) >> 12);
      v22[1] = 16 * ((268439553 * (unint64_t)(4095 * v54)) >> 44);
      v22 += 2;
    }
    if (v36)
    {
      uint64_t v55 = -(uint64_t)v36;
      do
      {
        unint64_t v56 = (268439553 * (unint64_t)(4095 * v15[1])) >> 44;
        *unint64_t v22 = 16 * (((268439553 * (unint64_t)(4095 * *v15)) >> 32) >> 12);
        v22[1] = 16 * v56;
        v15 += 2;
        v22 += 2;
        BOOL v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v18 - v17) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v35 = v26 >> 1;
  unint64_t v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v42 = v16[1];
      int v40 = v16 + 2;
      *unint64_t v23 = 16 * (((268439553 * (unint64_t)(3584 * *v16)) >> 32) >> 12) + 4096;
      v23[1] = 16 * ((268439553 * (unint64_t)(3584 * v42)) >> 44) + 4096;
      uint64_t v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      int v40 = v16;
      uint64_t v41 = v23;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      unint64_t v44 = (268439553 * (unint64_t)(3584 * v40[1])) >> 44;
      _WORD *v41 = 16 * (((268439553 * (unint64_t)(3584 * *v40)) >> 32) >> 12) + 4096;
      v41[1] = 16 * v44 + 4096;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      int v47 = v16;
      uint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1];
        int v47 = v16 + 2;
        *unint64_t v23 = 16 * (((268439553 * (unint64_t)(3584 * *v16)) >> 32) >> 12) + 4096;
        v23[1] = 16 * ((268439553 * (unint64_t)(3584 * v49)) >> 44) + 4096;
        uint64_t v48 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          unint64_t v51 = (268439553 * (unint64_t)(3584 * v47[1])) >> 44;
          *uint64_t v48 = 16 * (((268439553 * (unint64_t)(3584 * *v47)) >> 32) >> 12) + 4096;
          v48[1] = 16 * v51 + 4096;
          v47 += 2;
          v48 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v18 - v17) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 12);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v35 = v26 >> 1;
  unint64_t v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v42 = v16[1];
      int v40 = v16 + 2;
      *unint64_t v23 = 16 * (((268439553 * (unint64_t)(4095 * *v16)) >> 32) >> 12);
      v23[1] = 16 * ((268439553 * (unint64_t)(4095 * v42)) >> 44);
      uint64_t v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      int v40 = v16;
      uint64_t v41 = v23;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      unint64_t v44 = (268439553 * (unint64_t)(4095 * v40[1])) >> 44;
      _WORD *v41 = 16 * (((268439553 * (unint64_t)(4095 * *v40)) >> 32) >> 12);
      v41[1] = 16 * v44;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      int v47 = v16;
      uint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1];
        int v47 = v16 + 2;
        *unint64_t v23 = 16 * (((268439553 * (unint64_t)(4095 * *v16)) >> 32) >> 12);
        v23[1] = 16 * ((268439553 * (unint64_t)(4095 * v49)) >> 44);
        uint64_t v48 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          unint64_t v51 = (268439553 * (unint64_t)(4095 * v47[1])) >> 44;
          *uint64_t v48 = 16 * (((268439553 * (unint64_t)(4095 * *v47)) >> 32) >> 12);
          v48[1] = 16 * v51;
          v47 += 2;
          v48 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  unint64_t v12 = v8 & 0xFFFFFFFE;
  uint64_t v13 = v10 + v8;
  uint64_t v14 = (v10 + v8) & 1;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  unint64_t v19 = a6[2];
  unint64_t v20 = a6[3];
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + v21 * v18 + 4 * v17);
  unint64_t v23 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v23 >= v19) {
    unint64_t v23 = v19;
  }
  unint64_t v24 = v13 - v12 + v14;
  if (v24 >= v20) {
    unint64_t v24 = v20;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + 2 * (v9 & 0xFFFFFFFE) + v30;
    uint64_t v32 = a7[2] + v28 * v18 + 2 * v17;
    uint64_t v33 = *a7 + v27 * v18 + 2 * v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v31 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  unint64_t v35 = (v24 - (v8 & 1)) >> 1;
  if (v24 >> 1 < v35) {
    unint64_t v35 = v24 >> 1;
  }
  char v36 = v9;
  unint64_t v37 = v23 >> 1;
  uint64_t v38 = v9 & 1;
  if (v23 >> 1 >= (v23 - v38) >> 1) {
    unint64_t v37 = (v23 - v38) >> 1;
  }
  if (v8)
  {
    if (v36)
    {
      int v46 = v16[1];
      unint64_t v39 = v16 + 2;
      *uint64_t v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v16)) >> 32) >> 10) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v46)) >> 42) << 6) + 4096;
      int v40 = v22 + 2;
      if (v37)
      {
LABEL_21:
        uint64_t v41 = -(uint64_t)v37;
        do
        {
          int v42 = *v39;
          int v43 = v39[1];
          v39 += 2;
          *int v40 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v42)) >> 32) >> 10) << 6)
               + 4096;
          v40[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v43)) >> 42) << 6) + 4096;
          v40 += 2;
          BOOL v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        uint64_t v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v39 = v16;
      int v40 = v22;
      if (v37) {
        goto LABEL_21;
      }
    }
    uint64_t v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v23)
    {
      int v47 = *v39;
      int v48 = v39[1];
      *int v40 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v47)) >> 32) >> 10) << 6)
           + 4096;
      v40[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v48)) >> 32) >> 10) << 6)
             + 4096;
    }
    unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      uint64_t v50 = v16;
      unint64_t v51 = v22;
      if (v36)
      {
        uint64_t v50 = v16 + 2;
        unint64_t v52 = (67109889 * (unint64_t)(896 * v16[1])) >> 42;
        __int16 v53 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v16)) >> 32) >> 10) << 6)
            + 4096;
        *uint64_t v22 = v53;
        LOWORD(v52) = ((_WORD)v52 << 6) + 4096;
        v22[1] = v52;
        int v54 = (_WORD *)((char *)v22 + v21);
        *int v54 = v53;
        v54[1] = v52;
        unint64_t v51 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v55 = -(uint64_t)v37;
        do
        {
          unint64_t v56 = 60130460544 * v50[1];
          unsigned int v57 = (((67109889 * (unint64_t)(896 * *v50)) >> 32) >> 10 << 6) + 4096;
          *unint64_t v51 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v50)) >> 32) >> 10) << 6)
               + 4096;
          LODWORD(v56) = (v56 >> 42 << 6) + 4096;
          v51[1] = v56;
          v51[2] = v57;
          v51[3] = v56;
          unint64_t v58 = (_WORD *)((char *)v51 + v21);
          _WORD *v58 = v57;
          v58[1] = v56;
          v50 += 2;
          v58[2] = v57;
          v58[3] = v56;
          v51 += 4;
          BOOL v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v23)
      {
        int v59 = *v50;
        int v60 = v50[1];
        unsigned int v61 = (((67109889 * (unint64_t)(896 * v59)) >> 32) >> 10 << 6) + 4096;
        *unint64_t v51 = v61;
        unsigned int v62 = (((67109889 * (unint64_t)(896 * v60)) >> 32) >> 10 << 6) + 4096;
        v51[1] = v62;
        int v63 = (_WORD *)((char *)v51 + v21);
        *int v63 = v61;
        v63[1] = v62;
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
    uint64_t v64 = 2 * v35;
  }
  else
  {
    uint64_t v64 = 0;
  }
  if ((v64 | v8 & 1) < v24)
  {
    if (v36)
    {
      int v65 = *v16;
      int v66 = v16[1];
      v16 += 2;
      *uint64_t v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v65)) >> 32) >> 10) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v66)) >> 42) << 6) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v67 = -(uint64_t)v37;
      do
      {
        int v68 = *v16;
        int v69 = v16[1];
        v16 += 2;
        *uint64_t v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v68)) >> 32) >> 10) << 6)
             + 4096;
        v22[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v69)) >> 42) << 6) + 4096;
        v22 += 2;
        BOOL v44 = __CFADD__(v67++, 1);
      }
      while (!v44);
      uint64_t v70 = 2 * v37;
    }
    else
    {
      uint64_t v70 = 0;
    }
    if ((v70 | (unint64_t)v38) < v23)
    {
      int v71 = *v16;
      int v72 = v16[1];
      *uint64_t v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v71)) >> 32) >> 10) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v72)) >> 32) >> 10) << 6)
             + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    uint64_t v28 = *a8;
    uint64_t v29 = v25 + v27;
    uint64_t v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v30 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v29 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      int v43 = v14[1];
      char v36 = v14 + 2;
      *unint64_t v20 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
           + 4096;
      v20[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v43)) >> 42) << 6) + 4096;
      unint64_t v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          int v39 = *v36;
          int v40 = v36[1];
          v36 += 2;
          *unint64_t v37 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v39)) >> 32) >> 10) << 6)
               + 4096;
          v37[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v40)) >> 42) << 6) + 4096;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      char v36 = v14;
      unint64_t v37 = v20;
      if (v34) {
        goto LABEL_21;
      }
    }
    uint64_t v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      int v44 = *v36;
      int v45 = v36[1];
      *unint64_t v37 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v44)) >> 32) >> 10) << 6)
           + 4096;
      v37[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v45)) >> 32) >> 10) << 6)
             + 4096;
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      int v47 = v14;
      int v48 = v20;
      if (v33)
      {
        int v47 = v14 + 2;
        unint64_t v49 = (67109889 * (unint64_t)(896 * v14[1])) >> 42;
        __int16 v50 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
            + 4096;
        *unint64_t v20 = v50;
        LOWORD(v49) = ((_WORD)v49 << 6) + 4096;
        v20[1] = v49;
        unint64_t v51 = (_WORD *)((char *)v20 + v19);
        *unint64_t v51 = v50;
        v51[1] = v49;
        int v48 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v52 = -(uint64_t)v34;
        do
        {
          unint64_t v53 = 60130460544 * v47[1];
          unsigned int v54 = (((67109889 * (unint64_t)(896 * *v47)) >> 32) >> 10 << 6) + 4096;
          *int v48 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v47)) >> 32) >> 10) << 6)
               + 4096;
          LODWORD(v53) = (v53 >> 42 << 6) + 4096;
          v48[1] = v53;
          v48[2] = v54;
          v48[3] = v53;
          uint64_t v55 = (_WORD *)((char *)v48 + v19);
          *uint64_t v55 = v54;
          v55[1] = v53;
          v47 += 2;
          v55[2] = v54;
          v55[3] = v53;
          v48 += 4;
          BOOL v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        int v56 = *v47;
        int v57 = v47[1];
        unsigned int v58 = (((67109889 * (unint64_t)(896 * v56)) >> 32) >> 10 << 6) + 4096;
        *int v48 = v58;
        unsigned int v59 = (((67109889 * (unint64_t)(896 * v57)) >> 32) >> 10 << 6) + 4096;
        v48[1] = v59;
        int v60 = (_WORD *)((char *)v48 + v19);
        *int v60 = v58;
        v60[1] = v59;
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v61 = 2 * v32;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if (v33)
    {
      int v62 = *v14;
      int v63 = v14[1];
      v14 += 2;
      *unint64_t v20 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v62)) >> 32) >> 10) << 6)
           + 4096;
      v20[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v63)) >> 42) << 6) + 4096;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v64 = -(uint64_t)v34;
      do
      {
        int v65 = *v14;
        int v66 = v14[1];
        v14 += 2;
        *unint64_t v20 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v65)) >> 32) >> 10) << 6)
             + 4096;
        v20[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v66)) >> 42) << 6) + 4096;
        v20 += 2;
        BOOL v41 = __CFADD__(v64++, 1);
      }
      while (!v41);
      uint64_t v67 = 2 * v34;
    }
    else
    {
      uint64_t v67 = 0;
    }
    if ((v67 | (unint64_t)v35) < v21)
    {
      int v68 = *v14;
      int v69 = v14[1];
      *unint64_t v20 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v68)) >> 32) >> 10) << 6)
           + 4096;
      v20[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v69)) >> 32) >> 10) << 6)
             + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + 2 * (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 10) << 6;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v31 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v31) {
    unint64_t v31 = v22 >> 1;
  }
  char v32 = v9;
  unint64_t v33 = v21 >> 1;
  uint64_t v34 = v9 & 1;
  if (v21 >> 1 >= (v21 - v34) >> 1) {
    unint64_t v33 = (v21 - v34) >> 1;
  }
  if (v8)
  {
    if (v32)
    {
      int v42 = v14[1];
      uint64_t v35 = v14 + 2;
      *unint64_t v20 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10) << 6;
      v20[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v42)) >> 42) << 6;
      char v36 = v20 + 2;
      if (v33)
      {
LABEL_21:
        uint64_t v37 = -(uint64_t)v33;
        do
        {
          int v38 = *v35;
          int v39 = v35[1];
          v35 += 2;
          *char v36 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v38)) >> 32) >> 10) << 6;
          v36[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v39)) >> 42) << 6;
          v36 += 2;
          BOOL v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        uint64_t v41 = 2 * v33;
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v35 = v14;
      char v36 = v20;
      if (v33) {
        goto LABEL_21;
      }
    }
    uint64_t v41 = 0;
LABEL_27:
    if ((v41 | (unint64_t)v34) < v21)
    {
      int v43 = *v35;
      int v44 = v35[1];
      *char v36 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v43)) >> 32) >> 10) << 6;
      v36[1] = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v44)) >> 32) >> 10) << 6;
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v31)
  {
    for (uint64_t j = 0; j != v31; ++j)
    {
      int v46 = v14;
      int v47 = v20;
      if (v32)
      {
        int v46 = v14 + 2;
        unint64_t v48 = (67109889 * (unint64_t)(1023 * v14[1])) >> 42;
        unsigned int v49 = ((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10 << 6;
        *unint64_t v20 = v49;
        LOWORD(v48) = (_WORD)v48 << 6;
        v20[1] = v48;
        __int16 v50 = (_WORD *)((char *)v20 + v19);
        _WORD *v50 = v49;
        v50[1] = v48;
        int v47 = v20 + 2;
      }
      if (v33)
      {
        uint64_t v51 = -(uint64_t)v33;
        do
        {
          unsigned int v52 = 1023 * v46[1];
          unsigned int v53 = ((67109889 * (unint64_t)(1023 * *v46)) >> 32) >> 10 << 6;
          _WORD *v47 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v46)) >> 32) >> 10) << 6;
          unsigned int v54 = ((67109889 * (unint64_t)v52) >> 32) >> 10 << 6;
          v47[1] = v54;
          v47[2] = v53;
          v47[3] = v54;
          v46 += 2;
          uint64_t v55 = (_WORD *)((char *)v47 + v19);
          *uint64_t v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v47 += 4;
          BOOL v40 = __CFADD__(v51++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v21)
      {
        int v56 = *v46;
        int v57 = v46[1];
        unsigned int v58 = ((67109889 * (unint64_t)(1023 * v56)) >> 32) >> 10 << 6;
        _WORD *v47 = v58;
        unsigned int v59 = ((67109889 * (unint64_t)(1023 * v57)) >> 32) >> 10 << 6;
        v47[1] = v59;
        int v60 = (_WORD *)((char *)v47 + v19);
        *int v60 = v58;
        v60[1] = v59;
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v61 = 2 * v31;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if (v32)
    {
      int v62 = *v14;
      int v63 = v14[1];
      v14 += 2;
      *unint64_t v20 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v62)) >> 32) >> 10) << 6;
      v20[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v63)) >> 42) << 6;
      v20 += 2;
    }
    if (v33)
    {
      uint64_t v64 = -(uint64_t)v33;
      do
      {
        int v65 = *v14;
        int v66 = v14[1];
        v14 += 2;
        *unint64_t v20 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v65)) >> 32) >> 10) << 6;
        v20[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v66)) >> 42) << 6;
        v20 += 2;
        BOOL v40 = __CFADD__(v64++, 1);
      }
      while (!v40);
      uint64_t v67 = 2 * v33;
    }
    else
    {
      uint64_t v67 = 0;
    }
    if ((v67 | (unint64_t)v34) < v21)
    {
      int v68 = *v14;
      int v69 = v14[1];
      *unint64_t v20 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v68)) >> 32) >> 10) << 6;
      v20[1] = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v69)) >> 32) >> 10) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = *a3 + v26 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = v26;
    }
    uint64_t v31 = v29 + 2 * (v9 + v8) + v30;
    uint64_t v32 = a7[2] + v28 * v19 + v20;
    uint64_t v33 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v31 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v35 = v11 & 1;
  if (v24 >> 1 >= (v24 - v35) >> 1) {
    unint64_t v36 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  char v37 = v8;
  unint64_t v38 = v23 >> 1;
  unint64_t v39 = (v23 - v9) >> 1;
  if (v38 >= v39) {
    unint64_t v38 = v39;
  }
  if (v11)
  {
    if (v37)
    {
      int v42 = v15[1];
      BOOL v40 = v15 + 2;
      *unint64_t v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v15)) >> 32) >> 10) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v42)) >> 42) << 6) + 4096;
      uint64_t v41 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      BOOL v40 = v15;
      uint64_t v41 = v22;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v38;
    do
    {
      unint64_t v44 = (67109889 * (unint64_t)(896 * v40[1])) >> 42;
      _WORD *v41 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v40)) >> 32) >> 10) << 6)
           + 4096;
      v41[1] = ((_WORD)v44 << 6) + 4096;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      int v47 = v15;
      unint64_t v48 = v22;
      if (v37)
      {
        int v49 = v15[1];
        int v47 = v15 + 2;
        *unint64_t v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v15)) >> 32) >> 10) << 6)
             + 4096;
        v22[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v49)) >> 42) << 6) + 4096;
        unint64_t v48 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v50 = -(uint64_t)v38;
        do
        {
          unint64_t v51 = (67109889 * (unint64_t)(896 * v47[1])) >> 42;
          unsigned int v52 = (((67109889 * (unint64_t)(896 * *v47)) >> 32) >> 10 << 6) + 4096;
          *unint64_t v48 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v47)) >> 32) >> 10) << 6)
               + 4096;
          LOWORD(v51) = ((_WORD)v51 << 6) + 4096;
          v48[1] = v51;
          unsigned int v53 = (_WORD *)((char *)v48 + v21);
          *unsigned int v53 = v52;
          v53[1] = v51;
          v48 += 2;
          v47 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v54 = 2 * v36;
  }
  else
  {
    uint64_t v54 = 0;
  }
  if ((v54 | (unint64_t)v35) < v24)
  {
    if (v37)
    {
      int v55 = *v15;
      int v56 = v15[1];
      v15 += 2;
      *unint64_t v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v55)) >> 32) >> 10) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v56)) >> 42) << 6) + 4096;
      v22 += 2;
    }
    if (v38)
    {
      uint64_t v57 = -(uint64_t)v38;
      do
      {
        unint64_t v58 = (67109889 * (unint64_t)(896 * v15[1])) >> 42;
        *unint64_t v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v15)) >> 32) >> 10) << 6)
             + 4096;
        v22[1] = ((_WORD)v58 << 6) + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v45 = __CFADD__(v57++, 1);
      }
      while (!v45);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + 2 * (v9 + v8) + v29;
    uint64_t v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v30 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1) {
    unint64_t v34 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v34 = v24 >> 1;
  }
  char v35 = v8;
  unint64_t v36 = v23 >> 1;
  unint64_t v37 = (v23 - v9) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v11)
  {
    if (v35)
    {
      int v40 = v15[1];
      unint64_t v38 = v15 + 2;
      *unint64_t v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v15)) >> 32) >> 10) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v40)) >> 42) << 6) + 4096;
      unint64_t v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v38 = v15;
      unint64_t v39 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      unint64_t v42 = (67109889 * (unint64_t)(896 * v38[1])) >> 42;
      *unint64_t v39 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v38)) >> 32) >> 10) << 6)
           + 4096;
      v39[1] = ((_WORD)v42 << 6) + 4096;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      BOOL v45 = v15;
      int v46 = v22;
      if (v35)
      {
        int v47 = v15[1];
        BOOL v45 = v15 + 2;
        *unint64_t v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v15)) >> 32) >> 10) << 6)
             + 4096;
        v22[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v47)) >> 42) << 6) + 4096;
        int v46 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v48 = -(uint64_t)v36;
        do
        {
          unint64_t v49 = (67109889 * (unint64_t)(896 * v45[1])) >> 42;
          unsigned int v50 = (((67109889 * (unint64_t)(896 * *v45)) >> 32) >> 10 << 6) + 4096;
          *int v46 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v45)) >> 32) >> 10) << 6)
               + 4096;
          LOWORD(v49) = ((_WORD)v49 << 6) + 4096;
          v46[1] = v49;
          unint64_t v51 = (_WORD *)((char *)v46 + v21);
          *unint64_t v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          BOOL v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v52 = 2 * v34;
  }
  else
  {
    uint64_t v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if (v35)
    {
      int v53 = *v15;
      int v54 = v15[1];
      v15 += 2;
      *unint64_t v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v53)) >> 32) >> 10) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v54)) >> 42) << 6) + 4096;
      v22 += 2;
    }
    if (v36)
    {
      uint64_t v55 = -(uint64_t)v36;
      do
      {
        unint64_t v56 = (67109889 * (unint64_t)(896 * v15[1])) >> 42;
        *unint64_t v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v15)) >> 32) >> 10) << 6)
             + 4096;
        v22[1] = ((_WORD)v56 << 6) + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + 2 * (v9 + v8) + v29;
    uint64_t v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v30 + 2 * i))) >> 32) >> 10) << 6;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1) {
    unint64_t v34 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v34 = v24 >> 1;
  }
  char v35 = v8;
  unint64_t v36 = v23 >> 1;
  unint64_t v37 = (v23 - v9) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v11)
  {
    if (v35)
    {
      int v40 = v15[1];
      unint64_t v38 = v15 + 2;
      *unint64_t v22 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v15)) >> 32) >> 10) << 6;
      v22[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v40)) >> 42) << 6;
      unint64_t v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v38 = v15;
      unint64_t v39 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      unint64_t v42 = (67109889 * (unint64_t)(1023 * v38[1])) >> 42;
      *unint64_t v39 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v38)) >> 32) >> 10) << 6;
      v39[1] = (_WORD)v42 << 6;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      BOOL v45 = v15;
      int v46 = v22;
      if (v35)
      {
        int v47 = v15[1];
        BOOL v45 = v15 + 2;
        *unint64_t v22 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v15)) >> 32) >> 10) << 6;
        v22[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v47)) >> 42) << 6;
        int v46 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v48 = -(uint64_t)v36;
        do
        {
          unint64_t v49 = (67109889 * (unint64_t)(1023 * v45[1])) >> 42;
          unsigned int v50 = ((67109889 * (unint64_t)(1023 * *v45)) >> 32) >> 10 << 6;
          *int v46 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v45)) >> 32) >> 10) << 6;
          LOWORD(v49) = (_WORD)v49 << 6;
          v46[1] = v49;
          unint64_t v51 = (_WORD *)((char *)v46 + v21);
          *unint64_t v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          BOOL v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v52 = 2 * v34;
  }
  else
  {
    uint64_t v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if (v35)
    {
      int v53 = *v15;
      int v54 = v15[1];
      v15 += 2;
      *unint64_t v22 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v53)) >> 32) >> 10) << 6;
      v22[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v54)) >> 42) << 6;
      v22 += 2;
    }
    if (v36)
    {
      uint64_t v55 = -(uint64_t)v36;
      do
      {
        unint64_t v56 = (67109889 * (unint64_t)(1023 * v15[1])) >> 42;
        *unint64_t v22 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v15)) >> 32) >> 10) << 6;
        v22[1] = (_WORD)v56 << 6;
        v15 += 2;
        v22 += 2;
        BOOL v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v18 - v17) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v35 = v26 >> 1;
  unint64_t v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v42 = v16[1];
      int v40 = v16 + 2;
      *unint64_t v23 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v16)) >> 32) >> 10) << 6)
           + 4096;
      v23[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v42)) >> 42) << 6) + 4096;
      uint64_t v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      int v40 = v16;
      uint64_t v41 = v23;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      unint64_t v44 = (67109889 * (unint64_t)(896 * v40[1])) >> 42;
      _WORD *v41 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v40)) >> 32) >> 10) << 6)
           + 4096;
      v41[1] = ((_WORD)v44 << 6) + 4096;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      int v47 = v16;
      uint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1];
        int v47 = v16 + 2;
        *unint64_t v23 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v16)) >> 32) >> 10) << 6)
             + 4096;
        v23[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v49)) >> 42) << 6) + 4096;
        uint64_t v48 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          unint64_t v51 = (67109889 * (unint64_t)(896 * v47[1])) >> 42;
          *uint64_t v48 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v47)) >> 32) >> 10) << 6)
               + 4096;
          v48[1] = ((_WORD)v51 << 6) + 4096;
          v47 += 2;
          v48 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v18 - v17) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 10) << 6;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v35 = v26 >> 1;
  unint64_t v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v42 = v16[1];
      int v40 = v16 + 2;
      *unint64_t v23 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v16)) >> 32) >> 10) << 6;
      v23[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v42)) >> 42) << 6;
      uint64_t v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      int v40 = v16;
      uint64_t v41 = v23;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      unint64_t v44 = (67109889 * (unint64_t)(1023 * v40[1])) >> 42;
      _WORD *v41 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v40)) >> 32) >> 10) << 6;
      v41[1] = (_WORD)v44 << 6;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      int v47 = v16;
      uint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1];
        int v47 = v16 + 2;
        *unint64_t v23 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v16)) >> 32) >> 10) << 6;
        v23[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v49)) >> 42) << 6;
        uint64_t v48 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          unint64_t v51 = (67109889 * (unint64_t)(1023 * v47[1])) >> 42;
          *uint64_t v48 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v47)) >> 32) >> 10) << 6;
          v48[1] = (_WORD)v51 << 6;
          v47 += 2;
          v48 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  unint64_t v10 = v8 & 0xFFFFFFFE;
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v14 + 2 * v13);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  unint64_t v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15) {
    unint64_t v20 = v15;
  }
  if (v20)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a4;
    BOOL v23 = v10 >= v8;
    uint64_t v24 = *a8;
    uint64_t v25 = a8[2];
    uint64_t v26 = *a3 + *a4 * v10;
    if (v23) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + 2 * (a2[4] & 0xFFFFFFFELL) + v27;
    uint64_t v29 = a7[2] + v25 * v14 + v13;
    uint64_t v30 = *a7 + v24 * v14 + v13;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v29 + i) = -1;
          *(unsigned char *)(v30 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v28 += v22;
      v30 += v24;
      v29 += v25;
      ++v21;
    }
    while (v21 != v20);
    uint64_t v9 = a2[4];
    unint64_t v8 = a2[5];
  }
  unint64_t v32 = (v20 - (v8 & 1)) >> 1;
  if (v20 >> 1 < v32) {
    unint64_t v32 = v20 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v19 >> 1;
  uint64_t v35 = v9 & 1;
  if (v19 >> 1 >= (v19 - v35) >> 1) {
    unint64_t v34 = (v19 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      int v42 = v12[1];
      unint64_t v36 = v12 + 2;
      *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v12)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v42)) >> 32) >> 8) + 16;
      unint64_t v37 = v18 + 2;
      if (v34)
      {
LABEL_22:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          int v39 = *v36;
          int v40 = v36[1];
          v36 += 2;
          *unint64_t v37 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v39)) >> 32) >> 8) + 16;
          v37[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v40)) >> 32) >> 8) + 16;
          v37 += 2;
          BOOL v23 = __CFADD__(v38++, 1);
        }
        while (!v23);
        uint64_t v41 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v36 = v12;
      unint64_t v37 = v18;
      if (v34) {
        goto LABEL_22;
      }
    }
    uint64_t v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v35) < v19)
    {
      int v43 = *v36;
      int v44 = v36[1];
      *unint64_t v37 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v43)) >> 32) >> 8) + 16;
      v37[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v44)) >> 32) >> 8) + 16;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      int v46 = v12;
      int v47 = v18;
      if (v33)
      {
        int v46 = v12 + 2;
        unint64_t v48 = (16777473 * (unint64_t)(224 * v12[1])) >> 40;
        char v49 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v12)) >> 32) >> 8) + 16;
        *uint64_t v18 = v49;
        LOBYTE(v48) = v48 + 16;
        v18[1] = v48;
        uint64_t v50 = &v18[v17];
        unsigned char *v50 = v49;
        v50[1] = v48;
        int v47 = v18 + 2;
      }
      if (v34)
      {
        uint64_t v51 = -(uint64_t)v34;
        do
        {
          unsigned int v52 = 224 * v46[1];
          unsigned int v53 = (((16777473 * (unint64_t)(224 * *v46)) >> 32) >> 8) + 16;
          unsigned char *v47 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v46)) >> 32) >> 8) + 16;
          unsigned int v54 = (((16777473 * (unint64_t)v52) >> 32) >> 8) + 16;
          v47[1] = v54;
          v47[2] = v53;
          v47[3] = v54;
          uint64_t v55 = &v47[v17 + 1];
          *(v55 - 1) = v53;
          *uint64_t v55 = v54;
          v46 += 2;
          v55[1] = v53;
          v55[2] = v54;
          v47 += 4;
          BOOL v23 = __CFADD__(v51++, 1);
        }
        while (!v23);
      }
      if ((v35 | (2 * v34)) < v19)
      {
        int v56 = *v46;
        int v57 = v46[1];
        unsigned int v58 = (((16777473 * (unint64_t)(224 * v56)) >> 32) >> 8) + 16;
        unsigned char *v47 = v58;
        unsigned int v59 = (((16777473 * (unint64_t)(224 * v57)) >> 32) >> 8) + 16;
        v47[1] = v59;
        int v60 = &v47[v17];
        *int v60 = v58;
        v60[1] = v59;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += 2 * v17;
    }
    uint64_t v61 = 2 * v32;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | v8 & 1) < v20)
  {
    if (v33)
    {
      int v62 = *v12;
      int v63 = v12[1];
      v12 += 2;
      *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v62)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v63)) >> 32) >> 8) + 16;
      v18 += 2;
    }
    if (v34)
    {
      uint64_t v64 = -(uint64_t)v34;
      do
      {
        int v65 = *v12;
        int v66 = v12[1];
        v12 += 2;
        *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v65)) >> 32) >> 8) + 16;
        v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v66)) >> 32) >> 8) + 16;
        v18 += 2;
        BOOL v23 = __CFADD__(v64++, 1);
      }
      while (!v23);
      uint64_t v67 = 2 * v34;
    }
    else
    {
      uint64_t v67 = 0;
    }
    if ((v67 | (unint64_t)v35) < v19)
    {
      int v68 = *v12;
      int v69 = v12[1];
      *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v68)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v69)) >> 32) >> 8) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  unint64_t v10 = v8 & 0xFFFFFFFE;
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v14 + 2 * v13);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  unint64_t v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15) {
    unint64_t v20 = v15;
  }
  if (v20)
  {
    uint64_t v21 = 0;
    BOOL v22 = v10 >= v8;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a3 + *a4 * v10;
    if (v22) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = v25 + 2 * (a2[4] & 0xFFFFFFFELL) + v26;
    uint64_t v28 = *a7 + v24 * v14 + v13;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
          *(unsigned char *)(v28 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v27 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v27 += v23;
      v28 += v24;
      ++v21;
    }
    while (v21 != v20);
    uint64_t v9 = a2[4];
    unint64_t v8 = a2[5];
  }
  unint64_t v30 = (v20 - (v8 & 1)) >> 1;
  if (v20 >> 1 < v30) {
    unint64_t v30 = v20 >> 1;
  }
  char v31 = v9;
  unint64_t v32 = v19 >> 1;
  uint64_t v33 = v9 & 1;
  if (v19 >> 1 >= (v19 - v33) >> 1) {
    unint64_t v32 = (v19 - v33) >> 1;
  }
  if (v8)
  {
    if (v31)
    {
      int v40 = v12[1];
      unint64_t v34 = v12 + 2;
      *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v12)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v40)) >> 32) >> 8) + 16;
      uint64_t v35 = v18 + 2;
      if (v32)
      {
LABEL_22:
        uint64_t v36 = -(uint64_t)v32;
        do
        {
          int v37 = *v34;
          int v38 = v34[1];
          v34 += 2;
          *uint64_t v35 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v37)) >> 32) >> 8) + 16;
          v35[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v38)) >> 32) >> 8) + 16;
          v35 += 2;
          BOOL v22 = __CFADD__(v36++, 1);
        }
        while (!v22);
        uint64_t v39 = 2 * v32;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v34 = v12;
      uint64_t v35 = v18;
      if (v32) {
        goto LABEL_22;
      }
    }
    uint64_t v39 = 0;
LABEL_28:
    if ((v39 | (unint64_t)v33) < v19)
    {
      int v41 = *v34;
      int v42 = v34[1];
      *uint64_t v35 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v41)) >> 32) >> 8) + 16;
      v35[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v42)) >> 32) >> 8) + 16;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v30)
  {
    for (uint64_t j = 0; j != v30; ++j)
    {
      int v44 = v12;
      BOOL v45 = v18;
      if (v31)
      {
        int v44 = v12 + 2;
        unint64_t v46 = (16777473 * (unint64_t)(224 * v12[1])) >> 40;
        char v47 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v12)) >> 32) >> 8) + 16;
        *uint64_t v18 = v47;
        LOBYTE(v46) = v46 + 16;
        v18[1] = v46;
        unint64_t v48 = &v18[v17];
        *unint64_t v48 = v47;
        v48[1] = v46;
        BOOL v45 = v18 + 2;
      }
      if (v32)
      {
        uint64_t v49 = -(uint64_t)v32;
        do
        {
          unsigned int v50 = 224 * v44[1];
          unsigned int v51 = (((16777473 * (unint64_t)(224 * *v44)) >> 32) >> 8) + 16;
          *BOOL v45 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v44)) >> 32) >> 8) + 16;
          unsigned int v52 = (((16777473 * (unint64_t)v50) >> 32) >> 8) + 16;
          v45[1] = v52;
          v45[2] = v51;
          v45[3] = v52;
          unsigned int v53 = &v45[v17 + 1];
          *(v53 - 1) = v51;
          *unsigned int v53 = v52;
          v44 += 2;
          v53[1] = v51;
          v53[2] = v52;
          v45 += 4;
          BOOL v22 = __CFADD__(v49++, 1);
        }
        while (!v22);
      }
      if ((v33 | (2 * v32)) < v19)
      {
        int v54 = *v44;
        int v55 = v44[1];
        unsigned int v56 = (((16777473 * (unint64_t)(224 * v54)) >> 32) >> 8) + 16;
        *BOOL v45 = v56;
        unsigned int v57 = (((16777473 * (unint64_t)(224 * v55)) >> 32) >> 8) + 16;
        v45[1] = v57;
        unsigned int v58 = &v45[v17];
        unsigned char *v58 = v56;
        v58[1] = v57;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += 2 * v17;
    }
    uint64_t v59 = 2 * v30;
  }
  else
  {
    uint64_t v59 = 0;
  }
  if ((v59 | v8 & 1) < v20)
  {
    if (v31)
    {
      int v60 = *v12;
      int v61 = v12[1];
      v12 += 2;
      *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v60)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v61)) >> 32) >> 8) + 16;
      v18 += 2;
    }
    if (v32)
    {
      uint64_t v62 = -(uint64_t)v32;
      do
      {
        int v63 = *v12;
        int v64 = v12[1];
        v12 += 2;
        *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v63)) >> 32) >> 8) + 16;
        v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v64)) >> 32) >> 8) + 16;
        v18 += 2;
        BOOL v22 = __CFADD__(v62++, 1);
      }
      while (!v22);
      uint64_t v65 = 2 * v32;
    }
    else
    {
      uint64_t v65 = 0;
    }
    if ((v65 | (unint64_t)v33) < v19)
    {
      int v66 = *v12;
      int v67 = v12[1];
      *uint64_t v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v66)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v67)) >> 32) >> 8) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  unint64_t v10 = v8 & 0xFFFFFFFE;
  uint64_t v11 = a4[1];
  unint64_t v12 = (__int16 *)(a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v14 + 2 * v13);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  unint64_t v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15) {
    unint64_t v20 = v15;
  }
  if (v20)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = *a3 + *a4 * v10;
    if (v10 >= v8) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = *a4;
    }
    uint64_t v26 = v24 + 2 * (a2[4] & 0xFFFFFFFELL) + v25;
    uint64_t v27 = *a7 + v23 * v14 + v13;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
          *(unsigned char *)(v27 + i) = *(_WORD *)(v26 + 2 * i);
      }
      v26 += v22;
      v27 += v23;
      ++v21;
    }
    while (v21 != v20);
    uint64_t v9 = a2[4];
    unint64_t v8 = a2[5];
  }
  unint64_t v29 = (v20 - (v8 & 1)) >> 1;
  if (v20 >> 1 < v29) {
    unint64_t v29 = v20 >> 1;
  }
  char v30 = v9;
  unint64_t v31 = v19 >> 1;
  uint64_t v32 = v9 & 1;
  if (v19 >> 1 >= (v19 - v32) >> 1) {
    unint64_t v31 = (v19 - v32) >> 1;
  }
  if (v8)
  {
    if (v30)
    {
      uint64_t v33 = v12 + 2;
      __int16 v40 = (unsigned __int16)v12[1] / 0x101u;
      *uint64_t v18 = (unsigned __int16)*v12 / 0x101u;
      v18[1] = v40;
      unint64_t v34 = v18 + 2;
      if (v31)
      {
LABEL_22:
        uint64_t v35 = -(uint64_t)v31;
        do
        {
          __int16 v36 = *v33;
          __int16 v37 = v33[1];
          v33 += 2;
          *unint64_t v34 = v36;
          v34[1] = v37;
          v34 += 2;
          BOOL v38 = __CFADD__(v35++, 1);
        }
        while (!v38);
        uint64_t v39 = 2 * v31;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v33 = v12;
      unint64_t v34 = v18;
      if (v31) {
        goto LABEL_22;
      }
    }
    uint64_t v39 = 0;
LABEL_28:
    if ((v39 | (unint64_t)v32) < v19)
    {
      __int16 v41 = (unsigned __int16)*v33 / 0x101u;
      __int16 v42 = (unsigned __int16)v33[1] / 0x101u;
      *unint64_t v34 = v41;
      v34[1] = v42;
    }
    unint64_t v12 = (__int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v29)
  {
    for (uint64_t j = 0; j != v29; ++j)
    {
      int v44 = v12;
      BOOL v45 = v18;
      if (v30)
      {
        int v44 = v12 + 2;
        __int16 v46 = (unsigned __int16)*v12 / 0x101u;
        __int16 v47 = (unsigned __int16)v12[1] / 0x101u;
        *uint64_t v18 = v46;
        v18[1] = v47;
        unint64_t v48 = &v18[v17];
        *unint64_t v48 = v46;
        v48[1] = v47;
        BOOL v45 = v18 + 2;
      }
      if (v31)
      {
        uint64_t v49 = -(uint64_t)v31;
        do
        {
          int v50 = (unsigned __int16)v44[1];
          __int16 v51 = (unsigned __int16)*v44 / 0x101u;
          *BOOL v45 = *v44;
          unsigned int v52 = (65281 * v50) >> 24;
          v45[1] = v52;
          v44 += 2;
          v45[2] = v51;
          v45[3] = v52;
          unsigned int v53 = &v45[v17 + 1];
          *(v53 - 1) = v51;
          *unsigned int v53 = v52;
          v53[1] = v51;
          v53[2] = v52;
          v45 += 4;
          BOOL v38 = __CFADD__(v49++, 1);
        }
        while (!v38);
      }
      if ((v32 | (2 * v31)) < v19)
      {
        __int16 v54 = (unsigned __int16)*v44 / 0x101u;
        __int16 v55 = (unsigned __int16)v44[1] / 0x101u;
        *BOOL v45 = v54;
        v45[1] = v55;
        unsigned int v56 = &v45[v17];
        *unsigned int v56 = v54;
        v56[1] = v55;
      }
      unint64_t v12 = (__int16 *)((char *)v12 + v11);
      v18 += 2 * v17;
    }
    uint64_t v57 = 2 * v29;
  }
  else
  {
    uint64_t v57 = 0;
  }
  if ((v57 | v8 & 1) < v20)
  {
    if (v30)
    {
      __int16 v58 = *v12;
      __int16 v59 = v12[1];
      v12 += 2;
      *uint64_t v18 = v58;
      v18[1] = v59;
      v18 += 2;
    }
    if (v31)
    {
      uint64_t v60 = -(uint64_t)v31;
      do
      {
        __int16 v61 = *v12;
        __int16 v62 = v12[1];
        v12 += 2;
        *uint64_t v18 = v61;
        v18[1] = v62;
        v18 += 2;
        BOOL v38 = __CFADD__(v60++, 1);
      }
      while (!v38);
      uint64_t v63 = 2 * v31;
    }
    else
    {
      uint64_t v63 = 0;
    }
    if ((v63 | (unint64_t)v32) < v19)
    {
      __int16 v64 = (unsigned __int16)*v12 / 0x101u;
      __int16 v65 = (unsigned __int16)v12[1] / 0x101u;
      *uint64_t v18 = v64;
      v18[1] = v65;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  unint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = v10 & 0xFFFFFFFE;
  uint64_t v12 = 2 * (v9 + v8);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  unint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16) {
    unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8);
  }
  unint64_t v22 = *(void *)(a2 + 24) + v10 - v11 + ((*(void *)(a2 + 24) + v10) & 1);
  if (v22 >= v15) {
    unint64_t v22 = v15;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    BOOL v25 = v11 >= v10;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = *a3 + *a4 * v11;
    if (v25) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + v12 + v29;
    uint64_t v31 = a7[2] + v27 * v18 + v16;
    uint64_t v32 = *a7 + v26 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v31 + i) = -1;
          *(unsigned char *)(v32 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v30 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v30 += v24;
      v32 += v26;
      v31 += v27;
      ++v23;
    }
    while (v23 != v22);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
  }
  unint64_t v34 = v22 >> 1;
  uint64_t v35 = v10 & 1;
  if (v22 >> 1 >= (v22 - v35) >> 1) {
    unint64_t v34 = (v22 - (v10 & 1)) >> 1;
  }
  unint64_t v36 = v21 >> 1;
  unint64_t v37 = v21 - v9;
  if (v36 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v36;
  }
  if (v10)
  {
    if (v8)
    {
      int v41 = v14[1];
      uint64_t v39 = v14 + 2;
      *unint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
      v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v41)) >> 32) >> 8) + 16;
      __int16 v40 = v20 + 2;
      if (!v38)
      {
LABEL_28:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v39 = v14;
      __int16 v40 = v20;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v42 = -(uint64_t)v38;
    do
    {
      unint64_t v43 = (16777473 * (unint64_t)(224 * v39[1])) >> 40;
      *__int16 v40 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v39)) >> 32) >> 8) + 16;
      v40[1] = v43 + 16;
      v40 += 2;
      v39 += 2;
      BOOL v25 = __CFADD__(v42++, 1);
    }
    while (!v25);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      BOOL v45 = v14;
      __int16 v46 = v20;
      if (v8)
      {
        int v47 = v14[1];
        BOOL v45 = v14 + 2;
        *unint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v47)) >> 32) >> 8) + 16;
        __int16 v46 = v20 + 2;
      }
      if (v38)
      {
        uint64_t v48 = -(uint64_t)v38;
        do
        {
          unint64_t v49 = (16777473 * (unint64_t)(224 * v45[1])) >> 40;
          unsigned int v50 = (((16777473 * (unint64_t)(224 * *v45)) >> 32) >> 8) + 16;
          *__int16 v46 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v45)) >> 32) >> 8) + 16;
          LOBYTE(v49) = v49 + 16;
          v46[1] = v49;
          __int16 v51 = &v46[v19];
          *__int16 v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          BOOL v25 = __CFADD__(v48++, 1);
        }
        while (!v25);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += 2 * v19;
    }
    uint64_t v52 = 2 * v34;
  }
  else
  {
    uint64_t v52 = 0;
  }
  if ((v52 | (unint64_t)v35) < v22)
  {
    if (v8)
    {
      int v53 = *v14;
      int v54 = v14[1];
      v14 += 2;
      *unint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v53)) >> 32) >> 8) + 16;
      v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v54)) >> 32) >> 8) + 16;
      v20 += 2;
    }
    if (v38)
    {
      uint64_t v55 = -(uint64_t)v38;
      do
      {
        unint64_t v56 = (16777473 * (unint64_t)(224 * v14[1])) >> 40;
        *unint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v20[1] = v56 + 16;
        v20 += 2;
        v14 += 2;
        BOOL v25 = __CFADD__(v55++, 1);
      }
      while (!v25);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  unint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = v10 & 0xFFFFFFFE;
  uint64_t v12 = 2 * (v9 + v8);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  unint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16) {
    unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8);
  }
  unint64_t v22 = *(void *)(a2 + 24) + v10 - v11 + ((*(void *)(a2 + 24) + v10) & 1);
  if (v22 >= v15) {
    unint64_t v22 = v15;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    if (v11 >= v10) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = *a3 + *a4 * v11 + v12 + v26;
    uint64_t v28 = *a7 + v25 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v28 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v27 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v27 += v24;
      v28 += v25;
      ++v23;
    }
    while (v23 != v22);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
  }
  unint64_t v30 = v22 >> 1;
  uint64_t v31 = v10 & 1;
  if (v22 >> 1 >= (v22 - v31) >> 1) {
    unint64_t v30 = (v22 - (v10 & 1)) >> 1;
  }
  unint64_t v32 = v21 >> 1;
  unint64_t v33 = v21 - v9;
  if (v32 >= v33 >> 1) {
    unint64_t v34 = v33 >> 1;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v10)
  {
    if (v8)
    {
      int v37 = v14[1];
      uint64_t v35 = v14 + 2;
      *unint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
      v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v37)) >> 32) >> 8) + 16;
      unint64_t v36 = v20 + 2;
      if (!v34)
      {
LABEL_28:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v35 = v14;
      unint64_t v36 = v20;
      if (!v34) {
        goto LABEL_28;
      }
    }
    uint64_t v38 = -(uint64_t)v34;
    do
    {
      unint64_t v39 = (16777473 * (unint64_t)(224 * v35[1])) >> 40;
      *unint64_t v36 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v35)) >> 32) >> 8) + 16;
      v36[1] = v39 + 16;
      v36 += 2;
      v35 += 2;
      BOOL v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_28;
  }
LABEL_29:
  if (v30)
  {
    for (uint64_t j = 0; j != v30; ++j)
    {
      uint64_t v42 = v14;
      unint64_t v43 = v20;
      if (v8)
      {
        int v44 = v14[1];
        uint64_t v42 = v14 + 2;
        *unint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v44)) >> 32) >> 8) + 16;
        unint64_t v43 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v45 = -(uint64_t)v34;
        do
        {
          unint64_t v46 = (16777473 * (unint64_t)(224 * v42[1])) >> 40;
          unsigned int v47 = (((16777473 * (unint64_t)(224 * *v42)) >> 32) >> 8) + 16;
          *unint64_t v43 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v42)) >> 32) >> 8) + 16;
          LOBYTE(v46) = v46 + 16;
          v43[1] = v46;
          uint64_t v48 = &v43[v19];
          *uint64_t v48 = v47;
          v48[1] = v46;
          v43 += 2;
          v42 += 2;
          BOOL v40 = __CFADD__(v45++, 1);
        }
        while (!v40);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += 2 * v19;
    }
    uint64_t v49 = 2 * v30;
  }
  else
  {
    uint64_t v49 = 0;
  }
  if ((v49 | (unint64_t)v31) < v22)
  {
    if (v8)
    {
      int v50 = *v14;
      int v51 = v14[1];
      v14 += 2;
      *unint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v50)) >> 32) >> 8) + 16;
      v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v51)) >> 32) >> 8) + 16;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v52 = -(uint64_t)v34;
      do
      {
        unint64_t v53 = (16777473 * (unint64_t)(224 * v14[1])) >> 40;
        *unint64_t v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v20[1] = v53 + 16;
        v20 += 2;
        v14 += 2;
        BOOL v40 = __CFADD__(v52++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  unint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = v10 & 0xFFFFFFFE;
  uint64_t v12 = 2 * (v9 + v8);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  unint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16) {
    unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8);
  }
  unint64_t v22 = *(void *)(a2 + 24) + v10 - v11 + ((*(void *)(a2 + 24) + v10) & 1);
  if (v22 >= v15) {
    unint64_t v22 = v15;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    if (v11 >= v10) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = *a3 + *a4 * v11 + v12 + v26;
    uint64_t v28 = *a7 + v25 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v28 + i) = *(_WORD *)(v27 + 2 * i);
      }
      v27 += v24;
      v28 += v25;
      ++v23;
    }
    while (v23 != v22);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
  }
  unint64_t v30 = v22 >> 1;
  uint64_t v31 = v10 & 1;
  if (v22 >> 1 >= (v22 - v31) >> 1) {
    unint64_t v30 = (v22 - (v10 & 1)) >> 1;
  }
  unint64_t v32 = v21 >> 1;
  unint64_t v33 = v21 - v9;
  if (v32 >= v33 >> 1) {
    unint64_t v34 = v33 >> 1;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v10)
  {
    if (v8)
    {
      uint64_t v35 = v14 + 2;
      __int16 v37 = v14[1] / 0x101u;
      *unint64_t v20 = *v14 / 0x101u;
      v20[1] = v37;
      unint64_t v36 = v20 + 2;
      if (!v34)
      {
LABEL_28:
        uint64_t v14 = (_WORD *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v35 = v14;
      unint64_t v36 = v20;
      if (!v34) {
        goto LABEL_28;
      }
    }
    uint64_t v38 = -(uint64_t)v34;
    do
    {
      __int16 v39 = v35[1] / 0x101u;
      *unint64_t v36 = *v35;
      v36[1] = v39;
      v36 += 2;
      v35 += 2;
      BOOL v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_28;
  }
LABEL_29:
  if (v30)
  {
    for (uint64_t j = 0; j != v30; ++j)
    {
      uint64_t v42 = v14;
      unint64_t v43 = v20;
      if (v8)
      {
        uint64_t v42 = v14 + 2;
        __int16 v44 = v14[1] / 0x101u;
        *unint64_t v20 = *v14;
        v20[1] = v44;
        unint64_t v43 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v45 = -(uint64_t)v34;
        do
        {
          __int16 v46 = *v42 / 0x101u;
          __int16 v47 = v42[1] / 0x101u;
          *unint64_t v43 = *v42;
          v43[1] = v47;
          uint64_t v48 = &v43[v19];
          *uint64_t v48 = v46;
          v48[1] = v47;
          v43 += 2;
          v42 += 2;
          BOOL v40 = __CFADD__(v45++, 1);
        }
        while (!v40);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      v20 += 2 * v19;
    }
    uint64_t v49 = 2 * v30;
  }
  else
  {
    uint64_t v49 = 0;
  }
  if ((v49 | (unint64_t)v31) < v22)
  {
    if (v8)
    {
      __int16 v50 = *v14;
      __int16 v51 = v14[1];
      v14 += 2;
      *unint64_t v20 = v50;
      v20[1] = v51;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v52 = -(uint64_t)v34;
      do
      {
        __int16 v53 = v14[1] / 0x101u;
        *unint64_t v20 = *v14;
        v20[1] = v53;
        v20 += 2;
        v14 += 2;
        BOOL v40 = __CFADD__(v52++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v9) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  }
  unint64_t v24 = v13 - v12;
  unint64_t v25 = v20 - v19;
  if (v13 - v12 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    BOOL v28 = v12 >= v9;
    uint64_t v29 = *a8;
    uint64_t v30 = a8[2];
    uint64_t v31 = *a3 + *a4 * v12;
    if (v28) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v31 + v14 + v32;
    uint64_t v34 = a7[2] + v30 * v19 + v17;
    uint64_t v35 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(unsigned char *)(v34 + i) = -1;
          *(unsigned char *)(v35 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v33 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v33 += v27;
      v35 += v29;
      v34 += v30;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  unint64_t v37 = v24 >> 1;
  unint64_t v38 = v24 - v11;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  unint64_t v40 = v23 >> 1;
  unint64_t v41 = v23 - v10;
  if (v40 >= v41 >> 1) {
    unint64_t v42 = v41 >> 1;
  }
  else {
    unint64_t v42 = v40;
  }
  if (v11)
  {
    if (v8)
    {
      int v45 = v16[1];
      unint64_t v43 = v16 + 2;
      *unint64_t v22 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8) + 16;
      v22[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v45)) >> 32) >> 8) + 16;
      __int16 v44 = v22 + 2;
      if (!v42)
      {
LABEL_29:
        uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v43 = v16;
      __int16 v44 = v22;
      if (!v42) {
        goto LABEL_29;
      }
    }
    uint64_t v46 = -(uint64_t)v42;
    do
    {
      unint64_t v47 = (16777473 * (unint64_t)(224 * v43[1])) >> 40;
      *__int16 v44 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v43)) >> 32) >> 8) + 16;
      v44[1] = v47 + 16;
      v44 += 2;
      v43 += 2;
      BOOL v28 = __CFADD__(v46++, 1);
    }
    while (!v28);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      uint64_t v49 = v16;
      __int16 v50 = v22;
      if (v8)
      {
        int v51 = v16[1];
        uint64_t v49 = v16 + 2;
        *unint64_t v22 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8) + 16;
        v22[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v51)) >> 32) >> 8) + 16;
        __int16 v50 = v22 + 2;
      }
      if (v42)
      {
        uint64_t v52 = -(uint64_t)v42;
        do
        {
          unint64_t v53 = (16777473 * (unint64_t)(224 * v49[1])) >> 40;
          unsigned char *v50 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v49)) >> 32) >> 8) + 16;
          v50[1] = v53 + 16;
          v50 += 2;
          v49 += 2;
          BOOL v28 = __CFADD__(v52++, 1);
        }
        while (!v28);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v9) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  }
  unint64_t v24 = v13 - v12;
  unint64_t v25 = v20 - v19;
  if (v13 - v12 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v14 + v30;
    uint64_t v32 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(unsigned char *)(v32 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v31 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  unint64_t v34 = v24 >> 1;
  unint64_t v35 = v24 - v11;
  if (v34 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v34;
  }
  unint64_t v37 = v23 >> 1;
  unint64_t v38 = v23 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v8)
    {
      int v42 = v16[1];
      unint64_t v40 = v16 + 2;
      *unint64_t v22 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8) + 16;
      v22[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v42)) >> 32) >> 8) + 16;
      unint64_t v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v40 = v16;
      unint64_t v41 = v22;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      unint64_t v44 = (16777473 * (unint64_t)(224 * v40[1])) >> 40;
      unsigned char *v41 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v40)) >> 32) >> 8) + 16;
      v41[1] = v44 + 16;
      v41 += 2;
      v40 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      unint64_t v47 = v16;
      uint64_t v48 = v22;
      if (v8)
      {
        int v49 = v16[1];
        unint64_t v47 = v16 + 2;
        *unint64_t v22 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8) + 16;
        v22[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v49)) >> 32) >> 8) + 16;
        uint64_t v48 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          unint64_t v51 = (16777473 * (unint64_t)(224 * v47[1])) >> 40;
          *uint64_t v48 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v47)) >> 32) >> 8) + 16;
          v48[1] = v51 + 16;
          v48 += 2;
          v47 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * ((v11 + v9) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  }
  unint64_t v24 = v13 - v12;
  unint64_t v25 = v20 - v19;
  if (v13 - v12 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v14 + v30;
    uint64_t v32 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(unsigned char *)(v32 + i) = *(_WORD *)(v31 + 2 * i);
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  unint64_t v34 = v24 >> 1;
  unint64_t v35 = v24 - v11;
  if (v34 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v34;
  }
  unint64_t v37 = v23 >> 1;
  unint64_t v38 = v23 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v8)
    {
      unint64_t v40 = v16 + 2;
      __int16 v42 = v16[1] / 0x101u;
      *unint64_t v22 = *v16 / 0x101u;
      v22[1] = v42;
      unint64_t v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        uint64_t v16 = (_WORD *)((char *)v16 + v15);
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v40 = v16;
      unint64_t v41 = v22;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      __int16 v44 = v40[1] / 0x101u;
      unsigned char *v41 = *v40;
      v41[1] = v44;
      v41 += 2;
      v40 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      unint64_t v47 = v16;
      uint64_t v48 = v22;
      if (v8)
      {
        unint64_t v47 = v16 + 2;
        __int16 v49 = v16[1] / 0x101u;
        *unint64_t v22 = *v16;
        v22[1] = v49;
        uint64_t v48 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          __int16 v51 = v47[1] / 0x101u;
          *uint64_t v48 = *v47;
          v48[1] = v51;
          v48 += 2;
          v47 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v8) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  uint64_t v23 = a7[2];
  unint64_t v24 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v27 = v13 - v12;
  unint64_t v28 = v20 - v19;
  if (v13 - v12 >= v28) {
    unint64_t v27 = v28;
  }
  if (v27)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    uint64_t v34 = v32 + v14 + v33;
    unint64_t v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
          *(unsigned char *)(v35 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v34 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  unint64_t v37 = v27 >> 1;
  unint64_t v38 = v27 - v11;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  unint64_t v40 = v26 >> 1;
  unint64_t v41 = v26 - v10;
  if (v40 >= v41 >> 1) {
    unint64_t v42 = v41 >> 1;
  }
  else {
    unint64_t v42 = v40;
  }
  if (v11)
  {
    if (v9)
    {
      int v46 = v16[1];
      uint64_t v43 = v16 + 2;
      *unint64_t v24 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8) + 16;
      __int16 v44 = v24 + 1;
      *unint64_t v25 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v46)) >> 32) >> 8) + 16;
      BOOL v45 = v25 + 1;
      if (!v42)
      {
LABEL_29:
        uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        v24 += v21;
        v25 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v43 = v16;
      __int16 v44 = v24;
      BOOL v45 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v42) {
        goto LABEL_29;
      }
    }
    uint64_t v47 = -(uint64_t)v42;
    do
    {
      uint64_t v48 = 3758153952 * v43[1];
      *v44++ = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v43)) >> 32) >> 8) + 16;
      *v45++ = BYTE5(v48) + 16;
      v43 += 2;
      BOOL v49 = __CFADD__(v47++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      __int16 v51 = v16;
      uint64_t v52 = v24;
      unint64_t v53 = v25;
      if (v9)
      {
        __int16 v51 = v16 + 2;
        unint64_t v54 = (16777473 * (unint64_t)(224 * v16[1])) >> 40;
        *unint64_t v24 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v16)) >> 32) >> 8) + 16;
        uint64_t v52 = v24 + 1;
        *unint64_t v25 = v54 + 16;
        unint64_t v53 = v25 + 1;
      }
      if (v42)
      {
        uint64_t v55 = -(uint64_t)v42;
        do
        {
          uint64_t v56 = 3758153952 * v51[1];
          *v52++ = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v51)) >> 32) >> 8) + 16;
          *v53++ = BYTE5(v56) + 16;
          v51 += 2;
          BOOL v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      v24 += v21;
      v25 += v22;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf20_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * ((v11 + v8) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  uint64_t v23 = a7[2];
  unint64_t v24 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v27 = v13 - v12;
  unint64_t v28 = v20 - v19;
  if (v13 - v12 >= v28) {
    unint64_t v27 = v28;
  }
  if (v27)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    uint64_t v34 = v32 + v14 + v33;
    unint64_t v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
          *(unsigned char *)(v35 + i) = *(_WORD *)(v34 + 2 * i);
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  unint64_t v37 = v27 >> 1;
  unint64_t v38 = v27 - v11;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  unint64_t v40 = v26 >> 1;
  unint64_t v41 = v26 - v10;
  if (v40 >= v41 >> 1) {
    unint64_t v42 = v41 >> 1;
  }
  else {
    unint64_t v42 = v40;
  }
  if (v11)
  {
    if (v9)
    {
      uint64_t v43 = v16 + 2;
      __int16 v46 = v16[1] / 0x101u;
      *unint64_t v24 = *v16 / 0x101u;
      __int16 v44 = v24 + 1;
      *unint64_t v25 = v46;
      BOOL v45 = v25 + 1;
      if (!v42)
      {
LABEL_29:
        uint64_t v16 = (_WORD *)((char *)v16 + v15);
        v24 += v21;
        v25 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v43 = v16;
      __int16 v44 = v24;
      BOOL v45 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v42) {
        goto LABEL_29;
      }
    }
    uint64_t v47 = -(uint64_t)v42;
    do
    {
      __int16 v48 = v43[1] / 0x101u;
      *v44++ = *v43;
      *v45++ = v48;
      v43 += 2;
      BOOL v49 = __CFADD__(v47++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      __int16 v51 = v16;
      uint64_t v52 = v24;
      unint64_t v53 = v25;
      if (v9)
      {
        __int16 v51 = v16 + 2;
        __int16 v54 = v16[1] / 0x101u;
        *unint64_t v24 = *v16;
        uint64_t v52 = v24 + 1;
        *unint64_t v25 = v54;
        unint64_t v53 = v25 + 1;
      }
      if (v42)
      {
        uint64_t v55 = -(uint64_t)v42;
        do
        {
          __int16 v56 = v51[1] / 0x101u;
          *v52++ = *v51;
          *v53++ = v56;
          v51 += 2;
          BOOL v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      v24 += v21;
      v25 += v22;
    }
  }
  return 0;
}

uint64_t vt_Copy_t4as_y416(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a4[1];
    uint64_t v11 = a4[2];
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[4];
    uint64_t v17 = a2[5];
    uint64_t v18 = *a3;
    uint64_t v19 = a3[1] + v12 * v17;
    uint64_t v20 = a3[2] + v11 * v17;
    uint64_t v21 = v18 + *a4 * v17;
    uint64_t v22 = v19 + 4 * v16;
    uint64_t v23 = v20 + 2 * v16;
    uint64_t v24 = v21 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v25 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          unint64_t v27 = (_WORD *)(v15 + 2 * v25);
          __int16 v28 = *(_WORD *)(v22 + v25) & 0xFFF0;
          __int16 v29 = *(_WORD *)(v22 + v25 + 2) & 0xFFF0;
          __int16 v30 = *(_WORD *)(v24 + 2 * i) & 0xFFF0;
          *unint64_t v27 = *(_WORD *)(v23 + 2 * i);
          v27[1] = v30;
          v27[2] = v28;
          v27[3] = v29;
          v25 += 4;
        }
      }
      v24 += v13;
      v15 += v14;
      v22 += v12;
      v23 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_t4as_y408(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a4[1];
    uint64_t v11 = a4[2];
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[4];
    uint64_t v17 = a2[5];
    uint64_t v18 = *a3;
    uint64_t v19 = a3[1] + v12 * v17;
    uint64_t v20 = a3[2] + v11 * v17;
    uint64_t v21 = v18 + *a4 * v17;
    uint64_t v22 = v19 + 4 * v16;
    uint64_t v23 = v20 + 2 * v16;
    uint64_t v24 = v21 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v25 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          unint64_t v27 = (unsigned char *)(v15 + v25);
          char v28 = *(unsigned char *)(v22 + v25 + 1);
          char v29 = *(unsigned char *)(v22 + v25 + 3);
          char v30 = *(unsigned char *)(v24 + 2 * i + 1);
          *unint64_t v27 = *(_WORD *)(v23 + 2 * i);
          v27[1] = v30;
          v27[2] = v28;
          v27[3] = v29;
          v25 += 4;
        }
      }
      v24 += v13;
      v15 += v14;
      v22 += v12;
      v23 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (_WORD *)(v16 + v20);
          uint64_t v23 = (_WORD *)(v19 + 2 * i);
          unsigned int v24 = ((*(_WORD *)(v18 + v20 + 6) & 0xFFF0) + (*(_WORD *)(v18 + v20 + 2) & 0xFFF0u)) >> 1;
          __int16 v25 = *v23 & 0xFFF0;
          LOWORD(v23) = v23[1] & 0xFFF0;
          *uint64_t v22 = ((*(_WORD *)(v18 + v20 + 4) & 0xFFF0) + (*(_WORD *)(v18 + v20) & 0xFFF0u)) >> 1;
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = (_WORD)v23;
          v20 += 8;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (_WORD *)(v16 + v20);
          uint64_t v23 = (_WORD *)(v19 + 2 * i);
          __int16 v24 = *(_WORD *)(v18 + v20 + 2) & 0xFFF0;
          __int16 v25 = *v23 & 0xFFF0;
          LOWORD(v23) = v23[1] & 0xFFF0;
          *uint64_t v22 = *(_WORD *)(v18 + v20) & 0xFFF0;
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = (_WORD)v23;
          v20 += 8;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = (unsigned char *)(*a7 + *a8 * *(void *)(a6 + 40) + v10);
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        uint64_t v22 = v16;
        do
        {
          uint64_t v23 = v19 + 2 * v21;
          unsigned int v24 = (*(unsigned __int8 *)(v18 + v20 + 3) + *(unsigned __int8 *)(v18 + v20 + 7) + 1) >> 1;
          char v25 = *(unsigned char *)(v23 + 1);
          LOBYTE(v23) = *(unsigned char *)(v23 + 3);
          *uint64_t v22 = (*(unsigned __int8 *)(v18 + v20 + 1) + *(unsigned __int8 *)(v18 + v20 + 5) + 1) >> 1;
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = v23;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = (unsigned char *)(*a7 + *a8 * *(void *)(a6 + 40) + v10);
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        uint64_t v22 = v16;
        do
        {
          uint64_t v23 = v19 + 2 * v21;
          char v24 = *(unsigned char *)(v18 + v20 + 3);
          char v25 = *(unsigned char *)(v23 + 1);
          LOBYTE(v23) = *(unsigned char *)(v23 + 3);
          *uint64_t v22 = *(unsigned char *)(v18 + v20 + 1);
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = v23;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_t4as_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (_WORD *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v15 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v14;
    uint64_t v22 = *a7 + *a8 * v14;
    uint64_t v23 = *a4;
    uint64_t v24 = a4[2];
    uint64_t v25 = v21 + 2 * v15;
    uint64_t v26 = v22 + 2 * v15;
    uint64_t v27 = a3[2] + v24 * v8 + 2 * v9;
    uint64_t v28 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v27 + 2 * i);
          *(_WORD *)(v26 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFF0;
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v30 = v8 & 1;
  if (v11 >= v30) {
    uint64_t v31 = v8 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  unint64_t v33 = v9 & 1;
  if (v10 >= v33) {
    unint64_t v34 = v33;
  }
  else {
    unint64_t v34 = 0;
  }
  unint64_t v35 = v10 - v34;
  if (v8)
  {
    if (v32)
    {
      __int16 v38 = v13[1] & 0xFFF0;
      unint64_t v36 = v13 + 2;
      *uint64_t v17 = *v13 & 0xFFF0;
      v17[1] = v38;
      unint64_t v37 = v17 + 2;
    }
    else
    {
      unint64_t v36 = v13;
      unint64_t v37 = v17;
    }
    if (v10 == v34)
    {
      unint64_t v39 = 0;
    }
    else
    {
      unint64_t v40 = v10 - v34;
      do
      {
        __int16 v41 = *v36 & 0xFFF0;
        __int16 v42 = v36[1] & 0xFFF0;
        v36 += 2;
        *unint64_t v37 = v41;
        v37[1] = v42;
        v37 += 2;
        --v40;
      }
      while (v40);
      unint64_t v39 = v10 - v34;
    }
    if (v39 + v33 < v10)
    {
      __int16 v43 = *v36 & 0xFFF0;
      __int16 v44 = v36[1] & 0xFFF0;
      *unint64_t v37 = v43;
      v37[1] = v44;
    }
    uint64_t v13 = (_WORD *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v31)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v11 - v31;
    do
    {
      uint64_t v47 = v13;
      __int16 v48 = v17;
      if (v32)
      {
        __int16 v49 = v13[1] & 0xFFF0;
        uint64_t v47 = v13 + 2;
        *uint64_t v17 = *v13 & 0xFFF0;
        v17[1] = v49;
        __int16 v48 = v17 + 2;
      }
      if (v10 == v34)
      {
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v51 = v10 - v34;
        do
        {
          __int16 v52 = *v47 & 0xFFF0;
          __int16 v53 = v47[1] & 0xFFF0;
          v47 += 2;
          *__int16 v48 = v52;
          v48[1] = v53;
          v48 += 2;
          --v51;
        }
        while (v51);
        unint64_t v50 = v10 - v34;
      }
      if (v50 + v33 < v10)
      {
        __int16 v54 = *v47 & 0xFFF0;
        __int16 v55 = v47[1] & 0xFFF0;
        *__int16 v48 = v54;
        v48[1] = v55;
      }
      uint64_t v13 = (_WORD *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v11)
  {
    if (v32)
    {
      __int16 v56 = *v13 & 0xFFF0;
      __int16 v57 = v13[1] & 0xFFF0;
      v13 += 2;
      *uint64_t v17 = v56;
      v17[1] = v57;
      v17 += 2;
    }
    if (v10 == v34)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v58 = v10 - v34;
      do
      {
        __int16 v59 = *v13 & 0xFFF0;
        __int16 v60 = v13[1] & 0xFFF0;
        v13 += 2;
        *uint64_t v17 = v59;
        v17[1] = v60;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v35 + v33 < v10)
    {
      __int16 v61 = *v13 & 0xFFF0;
      __int16 v62 = v13[1] & 0xFFF0;
      *uint64_t v17 = v61;
      v17[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_Copy_tv44_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (_WORD *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(_WORD *)(v22 + 2 * i) & 0xFFF0;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v24 = v8 & 1;
  if (v11 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v26)
    {
      __int16 v32 = v13[1] & 0xFFF0;
      unint64_t v30 = v13 + 2;
      *uint64_t v17 = *v13 & 0xFFF0;
      v17[1] = v32;
      uint64_t v31 = v17 + 2;
    }
    else
    {
      unint64_t v30 = v13;
      uint64_t v31 = v17;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        __int16 v35 = *v30 & 0xFFF0;
        __int16 v36 = v30[1] & 0xFFF0;
        v30 += 2;
        *uint64_t v31 = v35;
        v31[1] = v36;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      __int16 v37 = *v30 & 0xFFF0;
      __int16 v38 = v30[1] & 0xFFF0;
      *uint64_t v31 = v37;
      v31[1] = v38;
    }
    uint64_t v13 = (_WORD *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v11 - v25;
    do
    {
      __int16 v41 = v13;
      __int16 v42 = v17;
      if (v26)
      {
        __int16 v43 = v13[1] & 0xFFF0;
        __int16 v41 = v13 + 2;
        *uint64_t v17 = *v13 & 0xFFF0;
        v17[1] = v43;
        __int16 v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          __int16 v46 = *v41 & 0xFFF0;
          __int16 v47 = v41[1] & 0xFFF0;
          v41 += 2;
          *__int16 v42 = v46;
          v42[1] = v47;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        __int16 v48 = *v41 & 0xFFF0;
        __int16 v49 = v41[1] & 0xFFF0;
        *__int16 v42 = v48;
        v42[1] = v49;
      }
      uint64_t v13 = (_WORD *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if (v26)
    {
      __int16 v50 = *v13 & 0xFFF0;
      __int16 v51 = v13[1] & 0xFFF0;
      v13 += 2;
      *uint64_t v17 = v50;
      v17[1] = v51;
      v17 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        __int16 v53 = *v13 & 0xFFF0;
        __int16 v54 = v13[1] & 0xFFF0;
        v13 += 2;
        *uint64_t v17 = v53;
        v17[1] = v54;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      __int16 v55 = *v13 & 0xFFF0;
      __int16 v56 = v13[1] & 0xFFF0;
      *uint64_t v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_tv44_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v25 = *(unsigned __int16 *)(v23 + 2 * i) >> 4;
          if (v25 >= 0xEB0) {
            unsigned int v25 = 3760;
          }
          if (v25 <= 0x100) {
            unsigned int v25 = 256;
          }
          *(_WORD *)(v22 + 2 * i) = (-16776960 - v25 + (v25 << 16)) / 0xDB0;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v26 = v8 & 1;
  if (v18 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      unsigned int v34 = *v13;
      int v35 = v34 >> 4;
      unsigned int v36 = v13[1];
      if (v34 >> 4 >= 0xF00) {
        int v35 = 3840;
      }
      if (v34 >= 0x1000) {
        int v37 = v35;
      }
      else {
        int v37 = 256;
      }
      if (v36 >> 4 >= 0xF00) {
        int v38 = 3840;
      }
      else {
        int v38 = v36 >> 4;
      }
      if (v36 >= 0x1000) {
        int v39 = v38;
      }
      else {
        int v39 = 256;
      }
      __int16 v32 = v13 + 2;
      *uint64_t v17 = (613566757 * (unint64_t)((-16776960 - v37 + (v37 << 16)) >> 9)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-16776960 - v39 + (v39 << 16)) >> 9)) >> 32;
      unint64_t v33 = v17 + 2;
    }
    else
    {
      __int16 v32 = v13;
      unint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v40 = 0;
    }
    else
    {
      unint64_t v41 = v10 - v30;
      do
      {
        unsigned int v42 = *v32;
        int v43 = v42 >> 4;
        unsigned int v44 = v32[1];
        if (v42 >> 4 >= 0xF00) {
          int v43 = 3840;
        }
        if (v42 >= 0x1000) {
          int v45 = v43;
        }
        else {
          int v45 = 256;
        }
        if (v44 >> 4 >= 0xF00) {
          int v46 = 3840;
        }
        else {
          int v46 = v44 >> 4;
        }
        if (v44 < 0x1000) {
          int v46 = 256;
        }
        v32 += 2;
        *unint64_t v33 = (613566757 * (unint64_t)((-16776960 - v45 + (v45 << 16)) >> 9)) >> 32;
        v33[1] = (613566757 * (unint64_t)((-16776960 - v46 + (v46 << 16)) >> 9)) >> 32;
        v33 += 2;
        --v41;
      }
      while (v41);
      unint64_t v40 = v10 - v30;
    }
    if (v40 + v29 < v10)
    {
      unsigned int v47 = *v32;
      int v48 = v47 >> 4;
      unsigned int v49 = v32[1];
      unsigned int v50 = v49 >> 4;
      if (v47 >> 4 >= 0xF00) {
        int v48 = 3840;
      }
      if (v47 < 0x1000) {
        int v48 = 256;
      }
      if (v50 >= 0xF00) {
        unsigned int v50 = 3840;
      }
      if (v49 >= 0x1000) {
        int v51 = v50;
      }
      else {
        int v51 = 256;
      }
      *unint64_t v33 = (613566757 * (unint64_t)((-16776960 - v48 + (v48 << 16)) >> 9)) >> 32;
      v33[1] = (613566757 * (unint64_t)((-16776960 - v51 + (v51 << 16)) >> 9)) >> 32;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    unint64_t v52 = 0;
  }
  else
  {
    uint64_t v53 = 0;
    unint64_t v52 = v18 - v27;
    do
    {
      __int16 v54 = v13;
      __int16 v55 = v17;
      if (v28)
      {
        unsigned int v56 = *v13;
        int v57 = v56 >> 4;
        unsigned int v58 = v13[1];
        if (v56 >> 4 >= 0xF00) {
          int v57 = 3840;
        }
        if (v56 >= 0x1000) {
          int v59 = v57;
        }
        else {
          int v59 = 256;
        }
        if (v58 >> 4 >= 0xF00) {
          int v60 = 3840;
        }
        else {
          int v60 = v58 >> 4;
        }
        if (v58 >= 0x1000) {
          int v61 = v60;
        }
        else {
          int v61 = 256;
        }
        __int16 v54 = v13 + 2;
        *uint64_t v17 = (613566757 * (unint64_t)((-16776960 - v59 + (v59 << 16)) >> 9)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-16776960 - v61 + (v61 << 16)) >> 9)) >> 32;
        __int16 v55 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v62 = 0;
      }
      else
      {
        unint64_t v63 = v10 - v30;
        do
        {
          unsigned int v64 = *v54;
          int v65 = v64 >> 4;
          unsigned int v66 = v54[1];
          if (v64 >> 4 >= 0xF00) {
            int v65 = 3840;
          }
          if (v64 >= 0x1000) {
            int v67 = v65;
          }
          else {
            int v67 = 256;
          }
          if (v66 >> 4 >= 0xF00) {
            int v68 = 3840;
          }
          else {
            int v68 = v66 >> 4;
          }
          if (v66 < 0x1000) {
            int v68 = 256;
          }
          v54 += 2;
          *__int16 v55 = (613566757 * (unint64_t)((-16776960 - v67 + (v67 << 16)) >> 9)) >> 32;
          v55[1] = (613566757 * (unint64_t)((-16776960 - v68 + (v68 << 16)) >> 9)) >> 32;
          v55 += 2;
          --v63;
        }
        while (v63);
        unint64_t v62 = v10 - v30;
      }
      if (v62 + v29 < v10)
      {
        unsigned int v69 = *v54;
        int v70 = v69 >> 4;
        unsigned int v71 = v54[1];
        if (v69 >> 4 >= 0xF00) {
          int v70 = 3840;
        }
        if (v69 >= 0x1000) {
          int v72 = v70;
        }
        else {
          int v72 = 256;
        }
        if (v71 >> 4 >= 0xF00) {
          int v73 = 3840;
        }
        else {
          int v73 = v71 >> 4;
        }
        if (v71 >= 0x1000) {
          int v74 = v73;
        }
        else {
          int v74 = 256;
        }
        *__int16 v55 = (613566757 * (unint64_t)((-16776960 - v72 + (v72 << 16)) >> 9)) >> 32;
        v55[1] = (613566757 * (unint64_t)((-16776960 - v74 + (v74 << 16)) >> 9)) >> 32;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v53;
    }
    while (v53 != v52);
  }
  if (v52 + v26 < v18)
  {
    if (v28)
    {
      unsigned int v75 = *v13;
      int v76 = v75 >> 4;
      unsigned int v77 = v13[1];
      unsigned int v78 = v77 >> 4;
      if (v75 >> 4 >= 0xF00) {
        int v76 = 3840;
      }
      if (v75 < 0x1000) {
        int v76 = 256;
      }
      if (v78 >= 0xF00) {
        unsigned int v78 = 3840;
      }
      if (v77 >= 0x1000) {
        int v79 = v78;
      }
      else {
        int v79 = 256;
      }
      v13 += 2;
      *uint64_t v17 = (613566757 * (unint64_t)((-16776960 - v76 + (v76 << 16)) >> 9)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-16776960 - v79 + (v79 << 16)) >> 9)) >> 32;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v80 = v10 - v30;
      do
      {
        unsigned int v81 = *v13;
        int v82 = v81 >> 4;
        unsigned int v83 = v13[1];
        if (v81 >> 4 >= 0xF00) {
          int v82 = 3840;
        }
        if (v81 >= 0x1000) {
          int v84 = v82;
        }
        else {
          int v84 = 256;
        }
        if (v83 >> 4 >= 0xF00) {
          int v85 = 3840;
        }
        else {
          int v85 = v83 >> 4;
        }
        if (v83 < 0x1000) {
          int v85 = 256;
        }
        v13 += 2;
        *uint64_t v17 = (613566757 * (unint64_t)((-16776960 - v84 + (v84 << 16)) >> 9)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-16776960 - v85 + (v85 << 16)) >> 9)) >> 32;
        v17 += 2;
        --v80;
      }
      while (v80);
    }
    if (v31 + v29 < v10)
    {
      unsigned int v86 = *v13;
      int v87 = v86 >> 4;
      unsigned int v88 = v13[1];
      unsigned int v89 = v88 >> 4;
      if (v86 >> 4 >= 0xF00) {
        int v87 = 3840;
      }
      if (v86 < 0x1000) {
        int v87 = 256;
      }
      if (v89 >= 0xF00) {
        unsigned int v89 = 3840;
      }
      if (v88 >= 0x1000) {
        int v90 = v89;
      }
      else {
        int v90 = 256;
      }
      *uint64_t v17 = (613566757 * (unint64_t)((-16776960 - v87 + (v87 << 16)) >> 9)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-16776960 - v90 + (v90 << 16)) >> 9)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_t4as_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21) {
    unint64_t v20 = v21;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v16;
    uint64_t v26 = *a7 + *a8 * v16;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v17;
    uint64_t v30 = v26 + v17;
    uint64_t v31 = a3[2] + v28 * v12 + 2 * v11;
    uint64_t v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFF0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v12 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v12 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  if (v20 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v20 - v10;
  if (v12)
  {
    if (v36)
    {
      int v38 = v14 + 4;
      unsigned int v40 = ((v14[3] & 0xFFF0) + (v14[1] & 0xFFF0u)) >> 1;
      *uint64_t v19 = ((v14[2] & 0xFFF0) + (*v14 & 0xFFF0u)) >> 1;
      v19[1] = v40;
      int v39 = v19 + 2;
    }
    else
    {
      int v38 = v14;
      int v39 = v19;
    }
    if (v20 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        unsigned int v43 = ((v38[3] & 0xFFF0) + (v38[1] & 0xFFF0u)) >> 1;
        *unsigned int v42 = ((v38[2] & 0xFFF0) + (*v38 & 0xFFF0u)) >> 1;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v35;
    do
    {
      int v46 = v14;
      unsigned int v47 = v19;
      if (v36)
      {
        int v46 = v14 + 4;
        unsigned int v48 = ((v14[3] & 0xFFF0) + (v14[1] & 0xFFF0u)) >> 1;
        *uint64_t v19 = ((v14[2] & 0xFFF0) + (*v14 & 0xFFF0u)) >> 1;
        v19[1] = v48;
        unsigned int v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unsigned int v50 = &v47[v49];
          unsigned int v51 = ((v46[3] & 0xFFF0) + (v46[1] & 0xFFF0u)) >> 1;
          _WORD *v50 = ((v46[2] & 0xFFF0) + (*v46 & 0xFFF0u)) >> 1;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if (v36)
    {
      int v52 = *v14 & 0xFFF0;
      int v53 = v14[1] & 0xFFF0;
      int v54 = v14[2] & 0xFFF0;
      int v55 = v14[3] & 0xFFF0;
      v14 += 4;
      *uint64_t v19 = (v54 + v52) >> 1;
      v19[1] = (v55 + v53) >> 1;
      v19 += 2;
    }
    if (v20 != v10)
    {
      unint64_t v56 = 0;
      do
      {
        int v57 = &v19[v56];
        unsigned int v58 = ((v14[3] & 0xFFF0) + (v14[1] & 0xFFF0u)) >> 1;
        *int v57 = ((v14[2] & 0xFFF0) + (*v14 & 0xFFF0u)) >> 1;
        v57[1] = v58;
        v56 += 2;
        v14 += 4;
      }
      while (v56 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_t4as_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21) {
    unint64_t v20 = v21;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v16;
    uint64_t v26 = *a7 + *a8 * v16;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v17;
    uint64_t v30 = v26 + v17;
    uint64_t v31 = a3[2] + v28 * v12 + 2 * v11;
    uint64_t v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFF0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v12 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v12 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  if (v20 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v20 - v10;
  if (v12)
  {
    if (v36)
    {
      __int16 v40 = v14[1] & 0xFFF0;
      int v38 = v14 + 4;
      *uint64_t v19 = *v14 & 0xFFF0;
      v19[1] = v40;
      int v39 = v19 + 2;
    }
    else
    {
      int v38 = v14;
      int v39 = v19;
    }
    if (v20 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        __int16 v43 = v38[1] & 0xFFF0;
        *unsigned int v42 = *v38 & 0xFFF0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v35;
    do
    {
      int v46 = v14;
      unsigned int v47 = v19;
      if (v36)
      {
        __int16 v48 = v14[1] & 0xFFF0;
        int v46 = v14 + 4;
        *uint64_t v19 = *v14 & 0xFFF0;
        v19[1] = v48;
        unsigned int v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unsigned int v50 = &v47[v49];
          __int16 v51 = v46[1] & 0xFFF0;
          _WORD *v50 = *v46 & 0xFFF0;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if (v36)
    {
      __int16 v52 = *v14 & 0xFFF0;
      __int16 v53 = v14[1] & 0xFFF0;
      v14 += 4;
      *uint64_t v19 = v52;
      v19[1] = v53;
      v19 += 2;
    }
    if (v20 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        int v55 = &v19[v54];
        __int16 v56 = v14[1] & 0xFFF0;
        *int v55 = *v14 & 0xFFF0;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFF0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      unsigned int v36 = ((v14[3] & 0xFFF0) + (v14[1] & 0xFFF0u)) >> 1;
      _WORD *v21 = ((v14[2] & 0xFFF0) + (*v14 & 0xFFF0u)) >> 1;
      v21[1] = v36;
      uint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = ((v34[3] & 0xFFF0) + (v34[1] & 0xFFF0u)) >> 1;
        _WORD *v38 = ((v34[2] & 0xFFF0) + (*v34 & 0xFFF0u)) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unsigned int v42 = v14;
      __int16 v43 = v21;
      if (v32)
      {
        unsigned int v42 = v14 + 4;
        unsigned int v44 = ((v14[3] & 0xFFF0) + (v14[1] & 0xFFF0u)) >> 1;
        _WORD *v21 = ((v14[2] & 0xFFF0) + (*v14 & 0xFFF0u)) >> 1;
        v21[1] = v44;
        __int16 v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = ((v42[3] & 0xFFF0) + (v42[1] & 0xFFF0u)) >> 1;
          *int v46 = ((v42[2] & 0xFFF0) + (*v42 & 0xFFF0u)) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 & 0xFFF0;
      int v49 = v14[1] & 0xFFF0;
      int v50 = v14[2] & 0xFFF0;
      int v51 = v14[3] & 0xFFF0;
      v14 += 4;
      _WORD *v21 = (v50 + v48) >> 1;
      v21[1] = (v51 + v49) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        __int16 v53 = &v21[v52];
        unsigned int v54 = ((v14[3] & 0xFFF0) + (v14[1] & 0xFFF0u)) >> 1;
        *__int16 v53 = ((v14[2] & 0xFFF0) + (*v14 & 0xFFF0u)) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFF0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      __int16 v36 = v14[1] & 0xFFF0;
      unint64_t v34 = v14 + 4;
      _WORD *v21 = *v14 & 0xFFF0;
      v21[1] = v36;
      uint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        __int16 v39 = v34[1] & 0xFFF0;
        _WORD *v38 = *v34 & 0xFFF0;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      unsigned int v42 = v14;
      __int16 v43 = v21;
      if (v32)
      {
        __int16 v44 = v14[1] & 0xFFF0;
        unsigned int v42 = v14 + 4;
        _WORD *v21 = *v14 & 0xFFF0;
        v21[1] = v44;
        __int16 v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          __int16 v47 = v42[1] & 0xFFF0;
          *int v46 = *v42 & 0xFFF0;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      __int16 v48 = *v14 & 0xFFF0;
      __int16 v49 = v14[1] & 0xFFF0;
      v14 += 4;
      _WORD *v21 = v48;
      v21[1] = v49;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        __int16 v52 = v14[1] & 0xFFF0;
        *int v51 = *v14 & 0xFFF0;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i) >> 4;
          if (v30 >= 0xEB0) {
            unsigned int v30 = 3760;
          }
          if (v30 <= 0x100) {
            unsigned int v30 = 256;
          }
          *(_WORD *)(v27 + 2 * i) = (-16776960 - v30 + (v30 << 16)) / 0xDB0;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      int v38 = v37 >> 4;
      unsigned int v39 = v14[1];
      unsigned int v40 = v39 >> 4;
      if (v37 >> 4 >= 0xF00) {
        int v38 = 3840;
      }
      if (v37 < 0x1000) {
        int v38 = 256;
      }
      if (v40 >= 0xF00) {
        unsigned int v40 = 3840;
      }
      if (v39 >= 0x1000) {
        int v41 = v40;
      }
      else {
        int v41 = 256;
      }
      unsigned int v42 = v14[2];
      int v43 = v42 >> 4;
      unsigned int v44 = v14[3];
      if (v42 >> 4 >= 0xF00) {
        int v43 = 3840;
      }
      if (v42 >= 0x1000) {
        int v45 = v43;
      }
      else {
        int v45 = 256;
      }
      if (v44 >> 4 >= 0xF00) {
        int v46 = 3840;
      }
      else {
        int v46 = v44 >> 4;
      }
      if (v44 < 0x1000) {
        int v46 = 256;
      }
      uint64_t v35 = v14 + 4;
      _WORD *v21 = (((613566757 * (unint64_t)((-16776960 - v38 + (v38 << 16)) >> 9)) >> 32)
                          + ((613566757 * (unint64_t)((-16776960 - v45 + (v45 << 16)) >> 9)) >> 32)
                          + 1) >> 1;
      v21[1] = (((613566757 * (unint64_t)((-16776960 - v41 + (v41 << 16)) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((-16776960 - v46 + (v46 << 16)) >> 9)) >> 32)
                            + 1) >> 1;
      __int16 v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v47 = 0;
      do
      {
        __int16 v48 = &v36[v47];
        unsigned int v49 = *v35;
        int v50 = v49 >> 4;
        unsigned int v51 = v35[1];
        if (v49 >> 4 >= 0xF00) {
          int v50 = 3840;
        }
        if (v49 >= 0x1000) {
          int v52 = v50;
        }
        else {
          int v52 = 256;
        }
        if (v51 >> 4 >= 0xF00) {
          int v53 = 3840;
        }
        else {
          int v53 = v51 >> 4;
        }
        if (v51 < 0x1000) {
          int v53 = 256;
        }
        unsigned int v54 = v35[2];
        int v55 = v54 >> 4;
        unsigned int v56 = v35[3];
        if (v54 >> 4 >= 0xF00) {
          int v55 = 3840;
        }
        if (v54 >= 0x1000) {
          int v57 = v55;
        }
        else {
          int v57 = 256;
        }
        if (v56 >> 4 >= 0xF00) {
          int v58 = 3840;
        }
        else {
          int v58 = v56 >> 4;
        }
        if (v56 < 0x1000) {
          int v58 = 256;
        }
        *__int16 v48 = (((613566757 * (unint64_t)((-16776960 - v52 + (v52 << 16)) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((-16776960 - v57 + (v57 << 16)) >> 9)) >> 32)
                            + 1) >> 1;
        v48[1] = (((613566757 * (unint64_t)((-16776960 - v53 + (v53 << 16)) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((-16776960 - v58 + (v58 << 16)) >> 9)) >> 32)
                              + 1) >> 1;
        v47 += 2;
        v35 += 4;
      }
      while (v47 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v59 = 0;
  }
  else
  {
    uint64_t v60 = 0;
    unint64_t v59 = v9 - v32;
    do
    {
      int v61 = v14;
      unint64_t v62 = v21;
      if (v33)
      {
        unsigned int v63 = *v14;
        int v64 = v63 >> 4;
        unsigned int v65 = v14[1];
        if (v63 >> 4 >= 0xF00) {
          int v64 = 3840;
        }
        if (v63 < 0x1000) {
          int v64 = 256;
        }
        if (v65 >> 4 >= 0xF00) {
          int v66 = 3840;
        }
        else {
          int v66 = v65 >> 4;
        }
        if (v65 >= 0x1000) {
          int v67 = v66;
        }
        else {
          int v67 = 256;
        }
        unsigned int v68 = v14[2];
        int v69 = v68 >> 4;
        unsigned int v70 = v14[3];
        if (v68 >> 4 >= 0xF00) {
          int v69 = 3840;
        }
        if (v68 < 0x1000) {
          int v69 = 256;
        }
        if (v70 >> 4 >= 0xF00) {
          int v71 = 3840;
        }
        else {
          int v71 = v70 >> 4;
        }
        if (v70 >= 0x1000) {
          int v72 = v71;
        }
        else {
          int v72 = 256;
        }
        int v61 = v14 + 4;
        _WORD *v21 = (((613566757 * (unint64_t)((-16776960 - v64 + (v64 << 16)) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((-16776960 - v69 + (v69 << 16)) >> 9)) >> 32)
                            + 1) >> 1;
        v21[1] = (((613566757 * (unint64_t)((-16776960 - v67 + (v67 << 16)) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((-16776960 - v72 + (v72 << 16)) >> 9)) >> 32)
                              + 1) >> 1;
        unint64_t v62 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v73 = 0;
        do
        {
          int v74 = &v62[v73];
          unsigned int v75 = *v61;
          int v76 = v75 >> 4;
          unsigned int v77 = v61[1];
          if (v75 >> 4 >= 0xF00) {
            int v76 = 3840;
          }
          if (v75 >= 0x1000) {
            int v78 = v76;
          }
          else {
            int v78 = 256;
          }
          if (v77 >> 4 >= 0xF00) {
            int v79 = 3840;
          }
          else {
            int v79 = v77 >> 4;
          }
          if (v77 < 0x1000) {
            int v79 = 256;
          }
          unsigned int v80 = v61[2];
          int v81 = v80 >> 4;
          unsigned int v82 = v61[3];
          if (v80 >> 4 >= 0xF00) {
            int v81 = 3840;
          }
          if (v80 >= 0x1000) {
            int v83 = v81;
          }
          else {
            int v83 = 256;
          }
          if (v82 >> 4 >= 0xF00) {
            int v84 = 3840;
          }
          else {
            int v84 = v82 >> 4;
          }
          if (v82 < 0x1000) {
            int v84 = 256;
          }
          *int v74 = (((613566757 * (unint64_t)((-16776960 - v78 + (v78 << 16)) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((-16776960 - v83 + (v83 << 16)) >> 9)) >> 32)
                              + 1) >> 1;
          v74[1] = (((613566757 * (unint64_t)((-16776960 - v79 + (v79 << 16)) >> 9)) >> 32)
                                + ((613566757 * (unint64_t)((-16776960 - v84 + (v84 << 16)) >> 9)) >> 32)
                                + 1) >> 1;
          v73 += 2;
          v61 += 4;
        }
        while (v73 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v60;
    }
    while (v60 != v59);
  }
  if (v59 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v85 = *v14;
      int v86 = v85 >> 4;
      unsigned int v87 = v14[1];
      unsigned int v88 = v87 >> 4;
      if (v85 >> 4 >= 0xF00) {
        int v86 = 3840;
      }
      if (v85 < 0x1000) {
        int v86 = 256;
      }
      if (v88 >= 0xF00) {
        unsigned int v88 = 3840;
      }
      if (v87 >= 0x1000) {
        int v89 = v88;
      }
      else {
        int v89 = 256;
      }
      unsigned int v90 = v14[2];
      int v91 = v90 >> 4;
      unsigned int v92 = v14[3];
      if (v90 >> 4 >= 0xF00) {
        int v91 = 3840;
      }
      if (v90 >= 0x1000) {
        int v93 = v91;
      }
      else {
        int v93 = 256;
      }
      if (v92 >> 4 >= 0xF00) {
        int v94 = 3840;
      }
      else {
        int v94 = v92 >> 4;
      }
      if (v92 >= 0x1000) {
        int v95 = v94;
      }
      else {
        int v95 = 256;
      }
      v14 += 4;
      _WORD *v21 = (((613566757 * (unint64_t)((-16776960 - v86 + (v86 << 16)) >> 9)) >> 32)
                          + ((613566757 * (unint64_t)((-16776960 - v93 + (v93 << 16)) >> 9)) >> 32)
                          + 1) >> 1;
      v21[1] = (((613566757 * (unint64_t)((-16776960 - v89 + (v89 << 16)) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((-16776960 - v95 + (v95 << 16)) >> 9)) >> 32)
                            + 1) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v96 = 0;
      do
      {
        v97 = &v21[v96];
        unsigned int v98 = *v14;
        int v99 = v98 >> 4;
        unsigned int v100 = v14[1];
        if (v98 >> 4 >= 0xF00) {
          int v99 = 3840;
        }
        if (v98 >= 0x1000) {
          int v101 = v99;
        }
        else {
          int v101 = 256;
        }
        if (v100 >> 4 >= 0xF00) {
          int v102 = 3840;
        }
        else {
          int v102 = v100 >> 4;
        }
        if (v100 < 0x1000) {
          int v102 = 256;
        }
        unsigned int v103 = v14[2];
        int v104 = v103 >> 4;
        unsigned int v105 = v14[3];
        if (v103 >> 4 >= 0xF00) {
          int v104 = 3840;
        }
        if (v103 >= 0x1000) {
          int v106 = v104;
        }
        else {
          int v106 = 256;
        }
        if (v105 >> 4 >= 0xF00) {
          int v107 = 3840;
        }
        else {
          int v107 = v105 >> 4;
        }
        if (v105 < 0x1000) {
          int v107 = 256;
        }
        _WORD *v97 = (((613566757 * (unint64_t)((-16776960 - v101 + (v101 << 16)) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((-16776960 - v106 + (v106 << 16)) >> 9)) >> 32)
                            + 1) >> 1;
        v97[1] = (((613566757 * (unint64_t)((-16776960 - v102 + (v102 << 16)) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((-16776960 - v107 + (v107 << 16)) >> 9)) >> 32)
                              + 1) >> 1;
        v96 += 2;
        v14 += 4;
      }
      while (v96 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i) >> 4;
          if (v30 >= 0xEB0) {
            unsigned int v30 = 3760;
          }
          if (v30 <= 0x100) {
            unsigned int v30 = 256;
          }
          *(_WORD *)(v27 + 2 * i) = (-16776960 - v30 + (v30 << 16)) / 0xDB0;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      int v38 = v37 >> 4;
      unsigned int v39 = v14[1];
      unsigned int v40 = v39 >> 4;
      if (v37 >> 4 >= 0xF00) {
        int v38 = 3840;
      }
      if (v37 < 0x1000) {
        int v38 = 256;
      }
      if (v40 >= 0xF00) {
        unsigned int v40 = 3840;
      }
      if (v39 >= 0x1000) {
        int v41 = v40;
      }
      else {
        int v41 = 256;
      }
      uint64_t v35 = v14 + 4;
      _WORD *v21 = (613566757 * (unint64_t)((-16776960 - v38 + (v38 << 16)) >> 9)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-16776960 - v41 + (v41 << 16)) >> 9)) >> 32;
      __int16 v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v42 = 0;
      do
      {
        int v43 = &v36[v42];
        unsigned int v44 = *v35;
        int v45 = v44 >> 4;
        unsigned int v46 = v35[1];
        if (v44 >> 4 >= 0xF00) {
          int v45 = 3840;
        }
        if (v44 >= 0x1000) {
          int v47 = v45;
        }
        else {
          int v47 = 256;
        }
        if (v46 >> 4 >= 0xF00) {
          int v48 = 3840;
        }
        else {
          int v48 = v46 >> 4;
        }
        if (v46 < 0x1000) {
          int v48 = 256;
        }
        *int v43 = (613566757 * (unint64_t)((-16776960 - v47 + (v47 << 16)) >> 9)) >> 32;
        v43[1] = (613566757 * (unint64_t)((-16776960 - v48 + (v48 << 16)) >> 9)) >> 32;
        v42 += 2;
        v35 += 4;
      }
      while (v42 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v49 = 0;
  }
  else
  {
    uint64_t v50 = 0;
    unint64_t v49 = v9 - v32;
    do
    {
      unsigned int v51 = v14;
      int v52 = v21;
      if (v33)
      {
        unsigned int v53 = *v14;
        int v54 = v53 >> 4;
        unsigned int v55 = v14[1];
        if (v53 >> 4 >= 0xF00) {
          int v54 = 3840;
        }
        if (v53 < 0x1000) {
          int v54 = 256;
        }
        if (v55 >> 4 >= 0xF00) {
          int v56 = 3840;
        }
        else {
          int v56 = v55 >> 4;
        }
        if (v55 >= 0x1000) {
          int v57 = v56;
        }
        else {
          int v57 = 256;
        }
        unsigned int v51 = v14 + 4;
        _WORD *v21 = (613566757 * (unint64_t)((-16776960 - v54 + (v54 << 16)) >> 9)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-16776960 - v57 + (v57 << 16)) >> 9)) >> 32;
        int v52 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v58 = 0;
        do
        {
          unint64_t v59 = &v52[v58];
          unsigned int v60 = *v51;
          int v61 = v60 >> 4;
          unsigned int v62 = v51[1];
          if (v60 >> 4 >= 0xF00) {
            int v61 = 3840;
          }
          if (v60 >= 0x1000) {
            int v63 = v61;
          }
          else {
            int v63 = 256;
          }
          if (v62 >> 4 >= 0xF00) {
            int v64 = 3840;
          }
          else {
            int v64 = v62 >> 4;
          }
          if (v62 < 0x1000) {
            int v64 = 256;
          }
          *unint64_t v59 = (613566757 * (unint64_t)((-16776960 - v63 + (v63 << 16)) >> 9)) >> 32;
          v59[1] = (613566757 * (unint64_t)((-16776960 - v64 + (v64 << 16)) >> 9)) >> 32;
          v58 += 2;
          v51 += 4;
        }
        while (v58 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v50;
    }
    while (v50 != v49);
  }
  if (v49 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v65 = *v14;
      int v66 = v65 >> 4;
      unsigned int v67 = v14[1];
      unsigned int v68 = v67 >> 4;
      if (v65 >> 4 >= 0xF00) {
        int v66 = 3840;
      }
      if (v65 < 0x1000) {
        int v66 = 256;
      }
      if (v68 >= 0xF00) {
        unsigned int v68 = 3840;
      }
      if (v67 >= 0x1000) {
        int v69 = v68;
      }
      else {
        int v69 = 256;
      }
      v14 += 4;
      _WORD *v21 = (613566757 * (unint64_t)((-16776960 - v66 + (v66 << 16)) >> 9)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-16776960 - v69 + (v69 << 16)) >> 9)) >> 32;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v70 = 0;
      do
      {
        int v71 = &v21[v70];
        unsigned int v72 = *v14;
        int v73 = v72 >> 4;
        unsigned int v74 = v14[1];
        if (v72 >> 4 >= 0xF00) {
          int v73 = 3840;
        }
        if (v72 >= 0x1000) {
          int v75 = v73;
        }
        else {
          int v75 = 256;
        }
        if (v74 >> 4 >= 0xF00) {
          int v76 = 3840;
        }
        else {
          int v76 = v74 >> 4;
        }
        if (v74 < 0x1000) {
          int v76 = 256;
        }
        *int v71 = (613566757 * (unint64_t)((-16776960 - v75 + (v75 << 16)) >> 9)) >> 32;
        v71[1] = (613566757 * (unint64_t)((-16776960 - v76 + (v76 << 16)) >> 9)) >> 32;
        v70 += 2;
        v14 += 4;
      }
      while (v70 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * (v10 + v8);
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFF0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    int v38 = v16;
    if (v8)
    {
      unsigned int v40 = (_WORD *)((char *)v16 + v15 + 4);
      int v38 = v16 + 4;
      v41.i32[0] = *v16 & 0xFFF0;
      v41.i32[1] = v16[1] & 0xFFF0;
      v42.i32[0] = *(_WORD *)((char *)v16 + v15) & 0xFFF0;
      v42.i32[1] = *(_WORD *)((char *)v16 + v15 + 2) & 0xFFF0;
      v43.i32[0] = v16[2] & 0xFFF0;
      v43.i32[1] = v16[3] & 0xFFF0;
      v44.i32[0] = *v40 & 0xFFF0;
      v44.i32[1] = v40[1] & 0xFFF0;
      uint32x2_t v45 = vshr_n_u32((uint32x2_t)vadd_s32(vadd_s32(v42, vadd_s32(v41, v43)), v44), 2uLL);
      v23[1] = v45.i16[2];
      *unint64_t v23 = v45.i16[0];
      unsigned int v39 = v23 + 2;
    }
    else
    {
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v46 = 0;
      do
      {
        int v47 = &v38[2 * v46];
        int v48 = (_WORD *)((char *)&v38[2 * v46] + v15);
        v49.i32[0] = *v47 & 0xFFF0;
        v49.i32[1] = v47[1] & 0xFFF0;
        v50.i32[0] = *v48 & 0xFFF0;
        v50.i32[1] = v48[1] & 0xFFF0;
        v51.i32[0] = v47[2] & 0xFFF0;
        v51.i32[1] = v47[3] & 0xFFF0;
        v52.i32[0] = v48[2] & 0xFFF0;
        v52.i32[1] = v48[3] & 0xFFF0;
        uint32x2_t v53 = vshr_n_u32((uint32x2_t)vadd_s32(vadd_s32(v50, v49), vadd_s32(v51, v52)), 2uLL);
        v39[1] = v53.i16[2];
        *unsigned int v39 = v53.i16[0];
        v39 += 2;
        v46 += 2;
      }
      while (v46 < v37);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    unint64_t v54 = 0;
    unint64_t v55 = v27 - v36;
    do
    {
      int v56 = v16;
      int v57 = v23;
      if (v8)
      {
        unint64_t v58 = (_WORD *)((char *)v16 + v15 + 4);
        int v56 = v16 + 4;
        v59.i32[0] = *v16 & 0xFFF0;
        v59.i32[1] = v16[1] & 0xFFF0;
        v60.i32[0] = *(_WORD *)((char *)v16 + v15) & 0xFFF0;
        v60.i32[1] = *(_WORD *)((char *)v16 + v15 + 2) & 0xFFF0;
        v61.i32[0] = v16[2] & 0xFFF0;
        v61.i32[1] = v16[3] & 0xFFF0;
        v62.i32[0] = *v58 & 0xFFF0;
        v62.i32[1] = v58[1] & 0xFFF0;
        uint32x2_t v63 = vshr_n_u32((uint32x2_t)vadd_s32(vadd_s32(v60, vadd_s32(v59, v61)), v62), 2uLL);
        v23[1] = v63.i16[2];
        *unint64_t v23 = v63.i16[0];
        int v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v64 = 0;
        do
        {
          unsigned int v65 = &v56[2 * v64];
          int v66 = (_WORD *)((char *)&v56[2 * v64] + v15);
          v67.i32[0] = *v65 & 0xFFF0;
          v67.i32[1] = v65[1] & 0xFFF0;
          v68.i32[0] = *v66 & 0xFFF0;
          v68.i32[1] = v66[1] & 0xFFF0;
          v69.i32[0] = v65[2] & 0xFFF0;
          v69.i32[1] = v65[3] & 0xFFF0;
          v70.i32[0] = v66[2] & 0xFFF0;
          v70.i32[1] = v66[3] & 0xFFF0;
          uint32x2_t v71 = vshr_n_u32((uint32x2_t)vadd_s32(vadd_s32(v68, v67), vadd_s32(v69, v70)), 2uLL);
          v57[1] = v71.i16[2];
          *int v57 = v71.i16[0];
          v57 += 2;
          v64 += 2;
        }
        while (v64 < v37);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * (v10 + v9);
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFF0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      __int16 v40 = v16[1] & 0xFFF0;
      int v38 = v16 + 4;
      *unint64_t v23 = *v16 & 0xFFF0;
      v23[1] = v40;
      unsigned int v39 = v23 + 2;
    }
    else
    {
      int v38 = v16;
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        int32x2_t v42 = &v39[v41];
        __int16 v43 = v38[1] & 0xFFF0;
        *int32x2_t v42 = *v38 & 0xFFF0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v27 - v36;
    uint64_t v46 = 2 * v15;
    do
    {
      int v47 = v16;
      int v48 = v23;
      if (v9)
      {
        __int16 v49 = v16[1] & 0xFFF0;
        int v47 = v16 + 4;
        *unint64_t v23 = *v16 & 0xFFF0;
        v23[1] = v49;
        int v48 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v50 = 0;
        do
        {
          int32x2_t v51 = &v48[v50];
          __int16 v52 = v47[1] & 0xFFF0;
          *int32x2_t v51 = *v47 & 0xFFF0;
          v51[1] = v52;
          v50 += 2;
          v47 += 4;
        }
        while (v50 < v37);
      }
      uint64_t v16 = (_WORD *)((char *)v16 + v46);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v153 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v153 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v14 - v13;
  unint64_t v26 = v20 - v19;
  if (v25 < v20 - v19) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    uint64_t v30 = *a8;
    if (v13 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v29 + v31;
    uint64_t v33 = *a7 + v30 * v19 + v21;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          unsigned int v35 = *(unsigned __int16 *)(v32 + 2 * i) >> 4;
          if (v35 >= 0xEB0) {
            unsigned int v35 = 3760;
          }
          if (v35 <= 0x100) {
            unsigned int v35 = 256;
          }
          *(_WORD *)(v33 + 2 * i) = (-16776960 - v35 + (v35 << 16)) / 0xDB0;
        }
      }
      v32 += v28;
      v33 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v23 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v40 = *v16;
      int v41 = v40 >> 4;
      unsigned int v42 = v16[1];
      unsigned int v43 = v42 >> 4;
      unsigned int v44 = *(unsigned __int16 *)((char *)v16 + v15);
      unsigned int v45 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v40 >> 4 >= 0xF00) {
        int v41 = 3840;
      }
      if (v40 < 0x1000) {
        int v41 = 256;
      }
      if (v43 >= 0xF00) {
        unsigned int v43 = 3840;
      }
      if (v42 < 0x1000) {
        unsigned int v43 = 256;
      }
      if (v44 >> 4 >= 0xF00) {
        int v46 = 3840;
      }
      else {
        int v46 = v44 >> 4;
      }
      if (v44 >= 0x1000) {
        int v47 = v46;
      }
      else {
        int v47 = 256;
      }
      if (v45 >> 4 >= 0xF00) {
        int v48 = 3840;
      }
      else {
        int v48 = v45 >> 4;
      }
      if (v45 >= 0x1000) {
        int v49 = v48;
      }
      else {
        int v49 = 256;
      }
      unsigned int v50 = v16[2];
      int v51 = v50 >> 4;
      unsigned int v52 = v16[3];
      uint32x2_t v53 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      unsigned int v54 = *v53;
      unsigned int v55 = v53[1];
      if (v50 >> 4 >= 0xF00) {
        int v51 = 3840;
      }
      if (v50 >= 0x1000) {
        int v56 = v51;
      }
      else {
        int v56 = 256;
      }
      if (v52 >> 4 >= 0xF00) {
        int v57 = 3840;
      }
      else {
        int v57 = v52 >> 4;
      }
      if (v52 < 0x1000) {
        int v57 = 256;
      }
      if (v54 >> 4 >= 0xF00) {
        int v58 = 3840;
      }
      else {
        int v58 = v54 >> 4;
      }
      unsigned int v59 = -16776960 - v41 + (v41 << 16);
      if (v54 < 0x1000) {
        int v58 = 256;
      }
      unint64_t v60 = (613566757 * (unint64_t)(v59 >> 9)) >> 32;
      if (v55 >> 4 >= 0xF00) {
        int v61 = 3840;
      }
      else {
        int v61 = v55 >> 4;
      }
      if (v55 >= 0x1000) {
        int v62 = v61;
      }
      else {
        int v62 = 256;
      }
      int v38 = v16 + 4;
      *uint64_t v22 = (v60
                          + ((613566757 * (unint64_t)((-16776960 - v56 + (v56 << 16)) >> 9)) >> 32)
                          + ((613566757 * (unint64_t)((-16776960 - v47 + (v47 << 16)) >> 9)) >> 32)
                          + ((613566757 * (unint64_t)((-16776960 - v58 + (v58 << 16)) >> 9)) >> 32)
                          + 2) >> 2;
      v22[1] = (((613566757 * (unint64_t)((-16776960 - v43 + (v43 << 16)) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((-16776960 - v57 + (v57 << 16)) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((-16776960 - v49 + (v49 << 16)) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((-16776960 - v62 + (v62 << 16)) >> 9)) >> 32)
                            + 2) >> 2;
      unsigned int v39 = v22 + 2;
    }
    else
    {
      int v38 = v16;
      unsigned int v39 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v63 = 0;
      unint64_t v64 = v38 + 2;
      do
      {
        unsigned int v65 = &v39[v63];
        unsigned int v66 = *(v64 - 2);
        int v67 = v66 >> 4;
        unsigned int v68 = *(v64 - 1);
        unsigned int v69 = v68 >> 4;
        int32x2_t v70 = (unsigned __int16 *)((char *)v64 + v15);
        unsigned int v71 = *(unsigned __int16 *)((char *)v64 + v15 - 4);
        unsigned int v72 = *(unsigned __int16 *)((char *)v64 + v15 - 2);
        if (v66 >> 4 >= 0xF00) {
          int v67 = 3840;
        }
        if (v66 >= 0x1000) {
          int v73 = v67;
        }
        else {
          int v73 = 256;
        }
        unsigned int v74 = v72 >> 4;
        if (v69 >= 0xF00) {
          unsigned int v69 = 3840;
        }
        if (v68 >= 0x1000) {
          int v75 = v69;
        }
        else {
          int v75 = 256;
        }
        if (v71 >> 4 >= 0xF00) {
          int v76 = 3840;
        }
        else {
          int v76 = v71 >> 4;
        }
        if (v71 < 0x1000) {
          int v76 = 256;
        }
        if (v74 >= 0xF00) {
          unsigned int v74 = 3840;
        }
        unsigned int v77 = *v64;
        unsigned int v78 = v77 >> 4;
        BOOL v79 = v72 >= 0x1000;
        unsigned int v80 = v64[1];
        unsigned int v81 = v80 >> 4;
        unsigned int v82 = *v70;
        unsigned int v83 = v82 >> 4;
        unsigned int v84 = v70[1];
        if (!v79) {
          unsigned int v74 = 256;
        }
        if (v78 >= 0xF00) {
          unsigned int v78 = 3840;
        }
        if (v77 >= 0x1000) {
          int v85 = v78;
        }
        else {
          int v85 = 256;
        }
        unsigned int v86 = v84 >> 4;
        if (v81 >= 0xF00) {
          unsigned int v81 = 3840;
        }
        if (v80 >= 0x1000) {
          int v87 = v81;
        }
        else {
          int v87 = 256;
        }
        if (v83 >= 0xF00) {
          unsigned int v83 = 3840;
        }
        unint64_t v88 = (613566757 * (unint64_t)((-16776960 - v73 + (v73 << 16)) >> 9)) >> 32;
        if (v82 >= 0x1000) {
          int v89 = v83;
        }
        else {
          int v89 = 256;
        }
        unint64_t v90 = 613566757 * ((-16776960 - v75 + (v75 << 16)) >> 9);
        if (v86 >= 0xF00) {
          unsigned int v86 = 3840;
        }
        unint64_t v91 = HIDWORD(v90);
        unint64_t v92 = (613566757 * (unint64_t)((-16776960 - v76 + (v76 << 16)) >> 9)) >> 32;
        uint64_t v93 = 613566757 * ((-16776960 - v74 + (v74 << 16)) >> 9);
        if (v84 >= 0x1000) {
          int v94 = v86;
        }
        else {
          int v94 = 256;
        }
        *unsigned int v65 = (v88
                            + ((613566757 * (unint64_t)((-16776960 - v85 + (v85 << 16)) >> 9)) >> 32)
                            + v92
                            + ((613566757 * (unint64_t)((-16776960 - v89 + (v89 << 16)) >> 9)) >> 32)
                            + 2) >> 2;
        v65[1] = (v91
                              + ((613566757 * (unint64_t)((-16776960 - v87 + (v87 << 16)) >> 9)) >> 32)
                              + HIDWORD(v93)
                              + ((613566757 * (unint64_t)((-16776960 - v94 + (v94 << 16)) >> 9)) >> 32)
                              + 2) >> 2;
        v63 += 2;
        v64 += 4;
      }
      while (v63 < v37);
    }
    v16 += v15;
    uint64_t v22 = (_WORD *)((char *)v22 + v153);
  }
  if (v26 != v36)
  {
    unint64_t v95 = 0;
    unint64_t v96 = v26 - v36;
    do
    {
      v97 = v16;
      unsigned int v98 = v22;
      if (v8)
      {
        unsigned int v99 = *v16;
        int v100 = v99 >> 4;
        unsigned int v101 = v16[1];
        unsigned int v102 = *(unsigned __int16 *)((char *)v16 + v15);
        unsigned int v103 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v99 >> 4 >= 0xF00) {
          int v100 = 3840;
        }
        if (v99 >= 0x1000) {
          int v104 = v100;
        }
        else {
          int v104 = 256;
        }
        if (v101 >> 4 >= 0xF00) {
          int v105 = 3840;
        }
        else {
          int v105 = v101 >> 4;
        }
        if (v101 < 0x1000) {
          int v105 = 256;
        }
        if (v102 >> 4 >= 0xF00) {
          int v106 = 3840;
        }
        else {
          int v106 = v102 >> 4;
        }
        if (v102 >= 0x1000) {
          int v107 = v106;
        }
        else {
          int v107 = 256;
        }
        if (v103 >> 4 >= 0xF00) {
          int v108 = 3840;
        }
        else {
          int v108 = v103 >> 4;
        }
        if (v103 >= 0x1000) {
          int v109 = v108;
        }
        else {
          int v109 = 256;
        }
        unsigned int v110 = v16[2];
        int v111 = v110 >> 4;
        unsigned int v112 = v16[3];
        v113 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        unsigned int v114 = *v113;
        unsigned int v115 = v113[1];
        if (v110 >> 4 >= 0xF00) {
          int v111 = 3840;
        }
        if (v110 >= 0x1000) {
          int v116 = v111;
        }
        else {
          int v116 = 256;
        }
        if (v112 >> 4 >= 0xF00) {
          int v117 = 3840;
        }
        else {
          int v117 = v112 >> 4;
        }
        if (v112 < 0x1000) {
          int v117 = 256;
        }
        if (v114 >> 4 >= 0xF00) {
          int v118 = 3840;
        }
        else {
          int v118 = v114 >> 4;
        }
        unsigned int v119 = -16776960 - v104 + (v104 << 16);
        if (v114 < 0x1000) {
          int v118 = 256;
        }
        unint64_t v120 = (613566757 * (unint64_t)(v119 >> 9)) >> 32;
        if (v115 >> 4 >= 0xF00) {
          int v121 = 3840;
        }
        else {
          int v121 = v115 >> 4;
        }
        if (v115 < 0x1000) {
          int v121 = 256;
        }
        v97 = v16 + 4;
        *uint64_t v22 = (v120
                            + ((613566757 * (unint64_t)((-16776960 - v116 + (v116 << 16)) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((-16776960 - v107 + (v107 << 16)) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((-16776960 - v118 + (v118 << 16)) >> 9)) >> 32)
                            + 2) >> 2;
        v22[1] = (((613566757 * (unint64_t)((-16776960 - v105 + (v105 << 16)) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((-16776960 - v117 + (v117 << 16)) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((-16776960 - v109 + (v109 << 16)) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((-16776960 - v121 + (v121 << 16)) >> 9)) >> 32)
                              + 2) >> 2;
        unsigned int v98 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v122 = 0;
        v123 = v97 + 2;
        do
        {
          v124 = &v98[v122];
          unsigned int v125 = *(v123 - 2);
          int v126 = v125 >> 4;
          unsigned int v127 = *(v123 - 1);
          unsigned int v128 = v127 >> 4;
          v129 = (unsigned __int16 *)((char *)v123 + v15);
          unsigned int v130 = *(unsigned __int16 *)((char *)v123 + v15 - 4);
          unsigned int v131 = *(unsigned __int16 *)((char *)v123 + v15 - 2);
          if (v125 >> 4 >= 0xF00) {
            int v126 = 3840;
          }
          if (v125 >= 0x1000) {
            int v132 = v126;
          }
          else {
            int v132 = 256;
          }
          unsigned int v133 = v131 >> 4;
          if (v128 >= 0xF00) {
            unsigned int v128 = 3840;
          }
          if (v127 >= 0x1000) {
            int v134 = v128;
          }
          else {
            int v134 = 256;
          }
          if (v130 >> 4 >= 0xF00) {
            int v135 = 3840;
          }
          else {
            int v135 = v130 >> 4;
          }
          if (v130 < 0x1000) {
            int v135 = 256;
          }
          if (v133 >= 0xF00) {
            unsigned int v133 = 3840;
          }
          unsigned int v136 = *v123;
          unsigned int v137 = v136 >> 4;
          BOOL v79 = v131 >= 0x1000;
          unsigned int v138 = v123[1];
          unsigned int v139 = v138 >> 4;
          unsigned int v140 = *v129;
          unsigned int v141 = v140 >> 4;
          unsigned int v142 = v129[1];
          if (!v79) {
            unsigned int v133 = 256;
          }
          if (v137 >= 0xF00) {
            unsigned int v137 = 3840;
          }
          if (v136 >= 0x1000) {
            int v143 = v137;
          }
          else {
            int v143 = 256;
          }
          unsigned int v144 = v142 >> 4;
          if (v139 >= 0xF00) {
            unsigned int v139 = 3840;
          }
          if (v138 >= 0x1000) {
            int v145 = v139;
          }
          else {
            int v145 = 256;
          }
          if (v141 >= 0xF00) {
            unsigned int v141 = 3840;
          }
          unint64_t v146 = (613566757 * (unint64_t)((-16776960 - v132 + (v132 << 16)) >> 9)) >> 32;
          if (v140 < 0x1000) {
            unsigned int v141 = 256;
          }
          unint64_t v147 = 613566757 * ((-16776960 - v134 + (v134 << 16)) >> 9);
          if (v144 >= 0xF00) {
            unsigned int v144 = 3840;
          }
          unint64_t v148 = HIDWORD(v147);
          unint64_t v149 = (613566757 * (unint64_t)((-16776960 - v135 + (v135 << 16)) >> 9)) >> 32;
          uint64_t v150 = 613566757 * ((-16776960 - v133 + (v133 << 16)) >> 9);
          if (v142 >= 0x1000) {
            int v151 = v144;
          }
          else {
            int v151 = 256;
          }
          _WORD *v124 = (v146
                               + ((613566757 * (unint64_t)((-16776960 - v143 + (v143 << 16)) >> 9)) >> 32)
                               + v149
                               + ((613566757 * (unint64_t)((-16776960 - v141 + (v141 << 16)) >> 9)) >> 32)
                               + 2) >> 2;
          v124[1] = (v148
                                 + ((613566757 * (unint64_t)((-16776960 - v145 + (v145 << 16)) >> 9)) >> 32)
                                 + HIDWORD(v150)
                                 + ((613566757 * (unint64_t)((-16776960 - v151 + (v151 << 16)) >> 9)) >> 32)
                                 + 2) >> 2;
          v122 += 2;
          v123 += 4;
        }
        while (v122 < v37);
      }
      v16 += v15;
      uint64_t v22 = (_WORD *)((char *)v22 + v153);
      v95 += 2;
    }
    while (v95 < v96);
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * (v10 + v9);
    uint64_t v31 = *a8;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v30 + v32;
    uint64_t v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 4;
          if (v36 >= 0xEB0) {
            unsigned int v36 = 3760;
          }
          if (v36 <= 0x100) {
            unsigned int v36 = 256;
          }
          *(_WORD *)(v34 + 2 * i) = (-16776960 - v36 + (v36 << 16)) / 0xDB0;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      unsigned int v41 = *v16;
      int v42 = v41 >> 4;
      unsigned int v43 = v16[1];
      unsigned int v44 = v43 >> 4;
      if (v41 >> 4 >= 0xF00) {
        int v42 = 3840;
      }
      if (v41 < 0x1000) {
        int v42 = 256;
      }
      if (v44 >= 0xF00) {
        unsigned int v44 = 3840;
      }
      if (v43 >= 0x1000) {
        int v45 = v44;
      }
      else {
        int v45 = 256;
      }
      unsigned int v39 = v16 + 4;
      *unint64_t v23 = (613566757 * (unint64_t)((-16776960 - v42 + (v42 << 16)) >> 9)) >> 32;
      v23[1] = (613566757 * (unint64_t)((-16776960 - v45 + (v45 << 16)) >> 9)) >> 32;
      unsigned int v40 = v23 + 2;
    }
    else
    {
      unsigned int v39 = v16;
      unsigned int v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v46 = 0;
      do
      {
        int v47 = &v40[v46];
        unsigned int v48 = *v39;
        int v49 = v48 >> 4;
        unsigned int v50 = v39[1];
        if (v48 >> 4 >= 0xF00) {
          int v49 = 3840;
        }
        if (v48 >= 0x1000) {
          int v51 = v49;
        }
        else {
          int v51 = 256;
        }
        if (v50 >> 4 >= 0xF00) {
          int v52 = 3840;
        }
        else {
          int v52 = v50 >> 4;
        }
        if (v50 < 0x1000) {
          int v52 = 256;
        }
        _WORD *v47 = (613566757 * (unint64_t)((-16776960 - v51 + (v51 << 16)) >> 9)) >> 32;
        v47[1] = (613566757 * (unint64_t)((-16776960 - v52 + (v52 << 16)) >> 9)) >> 32;
        v46 += 2;
        v39 += 4;
      }
      while (v46 < v38);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    unint64_t v53 = 0;
    unint64_t v54 = v27 - v37;
    uint64_t v55 = 2 * v15;
    do
    {
      int v56 = v16;
      int v57 = v23;
      if (v9)
      {
        unsigned int v58 = *v16;
        int v59 = v58 >> 4;
        unsigned int v60 = v16[1];
        if (v58 >> 4 >= 0xF00) {
          int v59 = 3840;
        }
        if (v58 < 0x1000) {
          int v59 = 256;
        }
        if (v60 >> 4 >= 0xF00) {
          int v61 = 3840;
        }
        else {
          int v61 = v60 >> 4;
        }
        if (v60 >= 0x1000) {
          int v62 = v61;
        }
        else {
          int v62 = 256;
        }
        int v56 = v16 + 4;
        *unint64_t v23 = (613566757 * (unint64_t)((-16776960 - v59 + (v59 << 16)) >> 9)) >> 32;
        v23[1] = (613566757 * (unint64_t)((-16776960 - v62 + (v62 << 16)) >> 9)) >> 32;
        int v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v63 = 0;
        do
        {
          unint64_t v64 = &v57[v63];
          unsigned int v65 = *v56;
          int v66 = v65 >> 4;
          unsigned int v67 = v56[1];
          if (v65 >> 4 >= 0xF00) {
            int v66 = 3840;
          }
          if (v65 >= 0x1000) {
            int v68 = v66;
          }
          else {
            int v68 = 256;
          }
          if (v67 >> 4 >= 0xF00) {
            int v69 = 3840;
          }
          else {
            int v69 = v67 >> 4;
          }
          if (v67 < 0x1000) {
            int v69 = 256;
          }
          *unint64_t v64 = (613566757 * (unint64_t)((-16776960 - v68 + (v68 << 16)) >> 9)) >> 32;
          v64[1] = (613566757 * (unint64_t)((-16776960 - v69 + (v69 << 16)) >> 9)) >> 32;
          v63 += 2;
          v56 += 4;
        }
        while (v63 < v38);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v55);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_Copy_tv44_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v25 = *(unsigned __int16 *)(v23 + 2 * i) >> 4;
          if (v25 >= 0xEB0) {
            unsigned int v25 = 3760;
          }
          if (v25 <= 0x100) {
            unsigned int v25 = 256;
          }
          *(_WORD *)(v22 + 2 * i) = 16 * ((-1048320 - v25 + (v25 << 12)) / 0xDB0);
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v26 = v8 & 1;
  if (v18 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      unsigned int v34 = *v13;
      int v35 = v34 >> 4;
      unsigned int v36 = v13[1];
      if (v34 >> 4 >= 0xF00) {
        int v35 = 3840;
      }
      if (v34 >= 0x1000) {
        int v37 = v35;
      }
      else {
        int v37 = 256;
      }
      if (v36 >> 4 >= 0xF00) {
        int v38 = 3840;
      }
      else {
        int v38 = v36 >> 4;
      }
      if (v36 >= 0x1000) {
        int v39 = v38;
      }
      else {
        int v39 = 256;
      }
      uint64_t v32 = v13 + 2;
      *uint64_t v17 = 16 * ((613566757 * (unint64_t)((-1048320 - v37 + (v37 << 12)) >> 9)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v39 + (v39 << 12)) >> 9)) >> 32);
      uint64_t v33 = v17 + 2;
    }
    else
    {
      uint64_t v32 = v13;
      uint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v40 = 0;
    }
    else
    {
      unint64_t v41 = v10 - v30;
      do
      {
        unsigned int v42 = *v32;
        int v43 = v42 >> 4;
        unsigned int v44 = v32[1];
        if (v42 >> 4 >= 0xF00) {
          int v43 = 3840;
        }
        if (v42 >= 0x1000) {
          int v45 = v43;
        }
        else {
          int v45 = 256;
        }
        if (v44 >> 4 >= 0xF00) {
          int v46 = 3840;
        }
        else {
          int v46 = v44 >> 4;
        }
        if (v44 < 0x1000) {
          int v46 = 256;
        }
        v32 += 2;
        *uint64_t v33 = 16 * ((613566757 * (unint64_t)((-1048320 - v45 + (v45 << 12)) >> 9)) >> 32);
        v33[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v46 + (v46 << 12)) >> 9)) >> 32);
        v33 += 2;
        --v41;
      }
      while (v41);
      unint64_t v40 = v10 - v30;
    }
    if (v40 + v29 < v10)
    {
      unsigned int v47 = *v32;
      int v48 = v47 >> 4;
      unsigned int v49 = v32[1];
      unsigned int v50 = v49 >> 4;
      if (v47 >> 4 >= 0xF00) {
        int v48 = 3840;
      }
      if (v47 < 0x1000) {
        int v48 = 256;
      }
      if (v50 >= 0xF00) {
        unsigned int v50 = 3840;
      }
      if (v49 >= 0x1000) {
        int v51 = v50;
      }
      else {
        int v51 = 256;
      }
      *uint64_t v33 = 16 * ((613566757 * (unint64_t)((-1048320 - v48 + (v48 << 12)) >> 9)) >> 32);
      v33[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v51 + (v51 << 12)) >> 9)) >> 32);
    }
    unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    unint64_t v52 = 0;
  }
  else
  {
    uint64_t v53 = 0;
    unint64_t v52 = v18 - v27;
    do
    {
      unint64_t v54 = v13;
      uint64_t v55 = v17;
      if (v28)
      {
        unsigned int v56 = *v13;
        int v57 = v56 >> 4;
        unsigned int v58 = v13[1];
        if (v56 >> 4 >= 0xF00) {
          int v57 = 3840;
        }
        if (v56 >= 0x1000) {
          int v59 = v57;
        }
        else {
          int v59 = 256;
        }
        if (v58 >> 4 >= 0xF00) {
          int v60 = 3840;
        }
        else {
          int v60 = v58 >> 4;
        }
        if (v58 >= 0x1000) {
          int v61 = v60;
        }
        else {
          int v61 = 256;
        }
        unint64_t v54 = v13 + 2;
        *uint64_t v17 = 16 * ((613566757 * (unint64_t)((-1048320 - v59 + (v59 << 12)) >> 9)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v61 + (v61 << 12)) >> 9)) >> 32);
        uint64_t v55 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v62 = 0;
      }
      else
      {
        unint64_t v63 = v10 - v30;
        do
        {
          unsigned int v64 = *v54;
          int v65 = v64 >> 4;
          unsigned int v66 = v54[1];
          if (v64 >> 4 >= 0xF00) {
            int v65 = 3840;
          }
          if (v64 >= 0x1000) {
            int v67 = v65;
          }
          else {
            int v67 = 256;
          }
          if (v66 >> 4 >= 0xF00) {
            int v68 = 3840;
          }
          else {
            int v68 = v66 >> 4;
          }
          if (v66 < 0x1000) {
            int v68 = 256;
          }
          v54 += 2;
          *uint64_t v55 = 16 * ((613566757 * (unint64_t)((-1048320 - v67 + (v67 << 12)) >> 9)) >> 32);
          v55[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v68 + (v68 << 12)) >> 9)) >> 32);
          v55 += 2;
          --v63;
        }
        while (v63);
        unint64_t v62 = v10 - v30;
      }
      if (v62 + v29 < v10)
      {
        unsigned int v69 = *v54;
        int v70 = v69 >> 4;
        unsigned int v71 = v54[1];
        if (v69 >> 4 >= 0xF00) {
          int v70 = 3840;
        }
        if (v69 >= 0x1000) {
          int v72 = v70;
        }
        else {
          int v72 = 256;
        }
        if (v71 >> 4 >= 0xF00) {
          int v73 = 3840;
        }
        else {
          int v73 = v71 >> 4;
        }
        if (v71 >= 0x1000) {
          int v74 = v73;
        }
        else {
          int v74 = 256;
        }
        *uint64_t v55 = 16 * ((613566757 * (unint64_t)((-1048320 - v72 + (v72 << 12)) >> 9)) >> 32);
        v55[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v74 + (v74 << 12)) >> 9)) >> 32);
      }
      unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v53;
    }
    while (v53 != v52);
  }
  if (v52 + v26 < v18)
  {
    if (v28)
    {
      unsigned int v75 = *v13;
      int v76 = v75 >> 4;
      unsigned int v77 = v13[1];
      unsigned int v78 = v77 >> 4;
      if (v75 >> 4 >= 0xF00) {
        int v76 = 3840;
      }
      if (v75 < 0x1000) {
        int v76 = 256;
      }
      if (v78 >= 0xF00) {
        unsigned int v78 = 3840;
      }
      if (v77 >= 0x1000) {
        int v79 = v78;
      }
      else {
        int v79 = 256;
      }
      v13 += 2;
      *uint64_t v17 = 16 * ((613566757 * (unint64_t)((-1048320 - v76 + (v76 << 12)) >> 9)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v79 + (v79 << 12)) >> 9)) >> 32);
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v80 = v10 - v30;
      do
      {
        unsigned int v81 = *v13;
        int v82 = v81 >> 4;
        unsigned int v83 = v13[1];
        if (v81 >> 4 >= 0xF00) {
          int v82 = 3840;
        }
        if (v81 >= 0x1000) {
          int v84 = v82;
        }
        else {
          int v84 = 256;
        }
        if (v83 >> 4 >= 0xF00) {
          int v85 = 3840;
        }
        else {
          int v85 = v83 >> 4;
        }
        if (v83 < 0x1000) {
          int v85 = 256;
        }
        v13 += 2;
        *uint64_t v17 = 16 * ((613566757 * (unint64_t)((-1048320 - v84 + (v84 << 12)) >> 9)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v85 + (v85 << 12)) >> 9)) >> 32);
        v17 += 2;
        --v80;
      }
      while (v80);
    }
    if (v31 + v29 < v10)
    {
      unsigned int v86 = *v13;
      int v87 = v86 >> 4;
      unsigned int v88 = v13[1];
      unsigned int v89 = v88 >> 4;
      if (v86 >> 4 >= 0xF00) {
        int v87 = 3840;
      }
      if (v86 < 0x1000) {
        int v87 = 256;
      }
      if (v89 >= 0xF00) {
        unsigned int v89 = 3840;
      }
      if (v88 >= 0x1000) {
        int v90 = v89;
      }
      else {
        int v90 = 256;
      }
      *uint64_t v17 = 16 * ((613566757 * (unint64_t)((-1048320 - v87 + (v87 << 12)) >> 9)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v90 + (v90 << 12)) >> 9)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_t4as_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  unint64_t v14 = *(void *)(a6 + 24);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v15;
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v21) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= v14) {
    unint64_t v23 = v14;
  }
  else {
    unint64_t v23 = *(void *)(a2 + 24);
  }
  if (v23)
  {
    uint64_t v58 = a8[1];
    uint64_t v60 = a4[1];
    uint64_t v62 = a8[2];
    uint64_t v63 = *a8;
    unint64_t v24 = (char *)(a7[2] + v62 * v17 + v18);
    unsigned int v25 = (char *)(*a7 + *a8 * v17 + v18);
    uint64_t v26 = a4[2];
    uint64_t v27 = (char *)(a3[2] + v26 * v11 + 2 * v10);
    uint64_t v28 = *a4;
    unint64_t v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    unint64_t v61 = v22;
    size_t v30 = 2 * v22;
    unint64_t v59 = v23;
    do
    {
      memcpy(v25, v29, v30);
      memcpy(v24, v27, v30);
      v29 += v28;
      v25 += v63;
      v27 += v26;
      v24 += v62;
      --v23;
    }
    while (v23);
    uint64_t v19 = v58;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v60;
    unint64_t v22 = v61;
    unint64_t v23 = v59;
  }
  unint64_t v31 = v11 & 1;
  if (v23 >= v31) {
    uint64_t v32 = v11 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v34 = v22 - v9;
  if (v11)
  {
    if (v33)
    {
      int v35 = v13 + 4;
      int v37 = (v13[3] >> 4) + (v13[1] >> 4);
      *uint64_t v20 = (8 * ((v13[2] >> 4) + (*v13 >> 4)) + 8) & 0xFFF0;
      v20[1] = (8 * v37 + 8) & 0xFFF0;
      unsigned int v36 = v20 + 2;
    }
    else
    {
      int v35 = v13;
      unsigned int v36 = v20;
    }
    if (v22 != v9)
    {
      unint64_t v38 = 0;
      do
      {
        int v39 = &v36[v38];
        int v40 = ((unsigned __int16)v35[3] >> 4) + ((unsigned __int16)v35[1] >> 4);
        *int v39 = (8 * ((v35[2] >> 4) + (*v35 >> 4)) + 8) & 0xFFF0;
        v39[1] = (8 * v40 + 8) & 0xFFF0;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v23 - v32;
    do
    {
      int v43 = v13;
      unsigned int v44 = v20;
      if (v33)
      {
        int v43 = v13 + 4;
        int v45 = (v13[3] >> 4) + (v13[1] >> 4);
        *uint64_t v20 = (8 * ((v13[2] >> 4) + (*v13 >> 4)) + 8) & 0xFFF0;
        v20[1] = (8 * v45 + 8) & 0xFFF0;
        unsigned int v44 = v20 + 2;
      }
      if (v22 != v9)
      {
        unint64_t v46 = 0;
        do
        {
          unsigned int v47 = &v44[v46];
          int v48 = ((unsigned __int16)v43[3] >> 4) + ((unsigned __int16)v43[1] >> 4);
          _WORD *v47 = (8 * ((v43[2] >> 4) + (*v43 >> 4)) + 8) & 0xFFF0;
          v47[1] = (8 * v48 + 8) & 0xFFF0;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v20 = (_WORD *)((char *)v20 + v19);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v23)
  {
    if (v33)
    {
      unsigned int v49 = *v13;
      unsigned int v50 = v13[1];
      int v51 = v13[2] >> 4;
      int v52 = v13[3] >> 4;
      v13 += 4;
      *uint64_t v20 = (8 * (v51 + (v49 >> 4)) + 8) & 0xFFF0;
      v20[1] = (8 * (v52 + (v50 >> 4)) + 8) & 0xFFF0;
      v20 += 2;
    }
    if (v22 != v9)
    {
      unint64_t v53 = 0;
      do
      {
        unint64_t v54 = &v20[v53];
        int v55 = (v13[3] >> 4) + (v13[1] >> 4);
        *unint64_t v54 = (8 * ((v13[2] >> 4) + (*v13 >> 4)) + 8) & 0xFFF0;
        v54[1] = (8 * v55 + 8) & 0xFFF0;
        v53 += 2;
        v13 += 4;
      }
      while (v53 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_t4as_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  unint64_t v13 = (_WORD *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  unint64_t v14 = *(void *)(a6 + 24);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v15;
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v21) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= v14) {
    unint64_t v23 = v14;
  }
  else {
    unint64_t v23 = *(void *)(a2 + 24);
  }
  if (v23)
  {
    uint64_t v56 = a8[1];
    uint64_t v58 = a4[1];
    uint64_t v60 = a8[2];
    uint64_t v61 = *a8;
    unint64_t v24 = (char *)(a7[2] + v60 * v17 + v18);
    unsigned int v25 = (char *)(*a7 + *a8 * v17 + v18);
    uint64_t v26 = a4[2];
    uint64_t v27 = (char *)(a3[2] + v26 * v11 + 2 * v10);
    uint64_t v28 = *a4;
    unint64_t v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    unint64_t v59 = v22;
    size_t v30 = 2 * v22;
    unint64_t v57 = v23;
    do
    {
      memcpy(v25, v29, v30);
      memcpy(v24, v27, v30);
      v29 += v28;
      v25 += v61;
      v27 += v26;
      v24 += v60;
      --v23;
    }
    while (v23);
    uint64_t v19 = v56;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v58;
    unint64_t v22 = v59;
    unint64_t v23 = v57;
  }
  unint64_t v31 = v11 & 1;
  if (v23 >= v31) {
    uint64_t v32 = v11 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v34 = v22 - v9;
  if (v11)
  {
    if (v33)
    {
      __int16 v37 = v13[1] & 0xFFF0;
      int v35 = v13 + 4;
      *uint64_t v20 = *v13 & 0xFFF0;
      v20[1] = v37;
      unsigned int v36 = v20 + 2;
    }
    else
    {
      int v35 = v13;
      unsigned int v36 = v20;
    }
    if (v22 != v9)
    {
      unint64_t v38 = 0;
      do
      {
        int v39 = &v36[v38];
        __int16 v40 = v35[1] & 0xFFF0;
        *int v39 = *v35 & 0xFFF0;
        v39[1] = v40;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    unint64_t v13 = (_WORD *)((char *)v13 + v12);
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v23 - v32;
    do
    {
      int v43 = v13;
      unsigned int v44 = v20;
      if (v33)
      {
        __int16 v45 = v13[1] & 0xFFF0;
        int v43 = v13 + 4;
        *uint64_t v20 = *v13 & 0xFFF0;
        v20[1] = v45;
        unsigned int v44 = v20 + 2;
      }
      if (v22 != v9)
      {
        unint64_t v46 = 0;
        do
        {
          unsigned int v47 = &v44[v46];
          __int16 v48 = v43[1] & 0xFFF0;
          _WORD *v47 = *v43 & 0xFFF0;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      unint64_t v13 = (_WORD *)((char *)v13 + v12);
      uint64_t v20 = (_WORD *)((char *)v20 + v19);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v23)
  {
    if (v33)
    {
      __int16 v49 = *v13 & 0xFFF0;
      __int16 v50 = v13[1] & 0xFFF0;
      v13 += 4;
      *uint64_t v20 = v49;
      v20[1] = v50;
      v20 += 2;
    }
    if (v22 != v9)
    {
      unint64_t v51 = 0;
      do
      {
        int v52 = &v20[v51];
        __int16 v53 = v13[1] & 0xFFF0;
        *int v52 = *v13 & 0xFFF0;
        v52[1] = v53;
        v51 += 2;
        v13 += 4;
      }
      while (v51 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = 2 * v14;
  uint64_t v17 = a8[1];
  uint64_t v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v19) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v21 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v21 = *(void *)(a2 + 24);
  }
  if (v21)
  {
    unint64_t v53 = v21;
    uint64_t v54 = a4[1];
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    unint64_t v24 = (char *)(*a7 + *a8 * v15 + v16);
    unsigned int v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    unint64_t v21 = v53;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v54;
  }
  unint64_t v26 = v11 & 1;
  if (v21 >= v26) {
    uint64_t v27 = v11 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v8;
  if (v20 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v29 = v20 - v9;
  if (v11)
  {
    if (v28)
    {
      size_t v30 = v13 + 4;
      int v32 = (v13[3] >> 4) + (v13[1] >> 4);
      *uint64_t v18 = (8 * ((v13[2] >> 4) + (*v13 >> 4)) + 8) & 0xFFF0;
      v18[1] = (8 * v32 + 8) & 0xFFF0;
      unint64_t v31 = v18 + 2;
    }
    else
    {
      size_t v30 = v13;
      unint64_t v31 = v18;
    }
    if (v20 != v9)
    {
      unint64_t v33 = 0;
      do
      {
        unint64_t v34 = &v31[v33];
        int v35 = ((unsigned __int16)v30[3] >> 4) + ((unsigned __int16)v30[1] >> 4);
        *unint64_t v34 = (8 * ((v30[2] >> 4) + (*v30 >> 4)) + 8) & 0xFFF0;
        v34[1] = (8 * v35 + 8) & 0xFFF0;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    unint64_t v36 = 0;
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v36 = v21 - v27;
    do
    {
      unint64_t v38 = v13;
      int v39 = v18;
      if (v28)
      {
        unint64_t v38 = v13 + 4;
        int v40 = (v13[3] >> 4) + (v13[1] >> 4);
        *uint64_t v18 = (8 * ((v13[2] >> 4) + (*v13 >> 4)) + 8) & 0xFFF0;
        v18[1] = (8 * v40 + 8) & 0xFFF0;
        int v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        unint64_t v41 = 0;
        do
        {
          uint64_t v42 = &v39[v41];
          int v43 = ((unsigned __int16)v38[3] >> 4) + ((unsigned __int16)v38[1] >> 4);
          *uint64_t v42 = (8 * ((v38[2] >> 4) + (*v38 >> 4)) + 8) & 0xFFF0;
          v42[1] = (8 * v43 + 8) & 0xFFF0;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if (v28)
    {
      unsigned int v44 = *v13;
      unsigned int v45 = v13[1];
      int v46 = v13[2] >> 4;
      int v47 = v13[3] >> 4;
      v13 += 4;
      *uint64_t v18 = (8 * (v46 + (v44 >> 4)) + 8) & 0xFFF0;
      v18[1] = (8 * (v47 + (v45 >> 4)) + 8) & 0xFFF0;
      v18 += 2;
    }
    if (v20 != v9)
    {
      unint64_t v48 = 0;
      do
      {
        __int16 v49 = &v18[v48];
        int v50 = (v13[3] >> 4) + (v13[1] >> 4);
        *__int16 v49 = (8 * ((v13[2] >> 4) + (*v13 >> 4)) + 8) & 0xFFF0;
        v49[1] = (8 * v50 + 8) & 0xFFF0;
        v48 += 2;
        v13 += 4;
      }
      while (v48 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  unint64_t v13 = (_WORD *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = 2 * v14;
  uint64_t v17 = a8[1];
  uint64_t v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v19) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v21 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v21 = *(void *)(a2 + 24);
  }
  if (v21)
  {
    unint64_t v51 = v21;
    uint64_t v52 = a4[1];
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    unint64_t v24 = (char *)(*a7 + *a8 * v15 + v16);
    unsigned int v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    unint64_t v21 = v51;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v52;
  }
  unint64_t v26 = v11 & 1;
  if (v21 >= v26) {
    uint64_t v27 = v11 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v8;
  if (v20 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v29 = v20 - v9;
  if (v11)
  {
    if (v28)
    {
      __int16 v32 = v13[1] & 0xFFF0;
      size_t v30 = v13 + 4;
      *uint64_t v18 = *v13 & 0xFFF0;
      v18[1] = v32;
      unint64_t v31 = v18 + 2;
    }
    else
    {
      size_t v30 = v13;
      unint64_t v31 = v18;
    }
    if (v20 != v9)
    {
      unint64_t v33 = 0;
      do
      {
        unint64_t v34 = &v31[v33];
        __int16 v35 = v30[1] & 0xFFF0;
        *unint64_t v34 = *v30 & 0xFFF0;
        v34[1] = v35;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    unint64_t v13 = (_WORD *)((char *)v13 + v12);
    uint64_t v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    unint64_t v36 = 0;
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v36 = v21 - v27;
    do
    {
      unint64_t v38 = v13;
      int v39 = v18;
      if (v28)
      {
        __int16 v40 = v13[1] & 0xFFF0;
        unint64_t v38 = v13 + 4;
        *uint64_t v18 = *v13 & 0xFFF0;
        v18[1] = v40;
        int v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        unint64_t v41 = 0;
        do
        {
          uint64_t v42 = &v39[v41];
          __int16 v43 = v38[1] & 0xFFF0;
          *uint64_t v42 = *v38 & 0xFFF0;
          v42[1] = v43;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      unint64_t v13 = (_WORD *)((char *)v13 + v12);
      uint64_t v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if (v28)
    {
      __int16 v44 = *v13 & 0xFFF0;
      __int16 v45 = v13[1] & 0xFFF0;
      v13 += 4;
      *uint64_t v18 = v44;
      v18[1] = v45;
      v18 += 2;
    }
    if (v20 != v9)
    {
      unint64_t v46 = 0;
      do
      {
        int v47 = &v18[v46];
        __int16 v48 = v13[1] & 0xFFF0;
        _WORD *v47 = *v13 & 0xFFF0;
        v47[1] = v48;
        v46 += 2;
        v13 += 4;
      }
      while (v46 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i) >> 4;
          if (v30 >= 0xEB0) {
            unsigned int v30 = 3760;
          }
          if (v30 <= 0x100) {
            unsigned int v30 = 256;
          }
          *(_WORD *)(v27 + 2 * i) = 16 * ((-1048320 - v30 + (v30 << 12)) / 0xDB0);
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      int v38 = v37 >> 4;
      unsigned int v39 = v14[1];
      unsigned int v40 = v39 >> 4;
      if (v37 >> 4 >= 0xF00) {
        int v38 = 3840;
      }
      if (v37 < 0x1000) {
        int v38 = 256;
      }
      if (v40 >= 0xF00) {
        unsigned int v40 = 3840;
      }
      if (v39 >= 0x1000) {
        int v41 = v40;
      }
      else {
        int v41 = 256;
      }
      unsigned int v42 = v14[2];
      int v43 = v42 >> 4;
      unsigned int v44 = v14[3];
      if (v42 >> 4 >= 0xF00) {
        int v43 = 3840;
      }
      if (v42 >= 0x1000) {
        int v45 = v43;
      }
      else {
        int v45 = 256;
      }
      if (v44 >> 4 >= 0xF00) {
        int v46 = 3840;
      }
      else {
        int v46 = v44 >> 4;
      }
      if (v44 < 0x1000) {
        int v46 = 256;
      }
      __int16 v35 = v14 + 4;
      _WORD *v21 = (8
            * (((613566757 * (unint64_t)((-1048320 - v45 + (v45 << 12)) >> 9)) >> 32)
             + ((613566757 * (unint64_t)((-1048320 - v38 + (v38 << 12)) >> 9)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((613566757 * (unint64_t)((-1048320 - v46 + (v46 << 12)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-1048320 - v41 + (v41 << 12)) >> 9)) >> 32))
              + 8) & 0xFFF0;
      unint64_t v36 = v21 + 2;
    }
    else
    {
      __int16 v35 = v14;
      unint64_t v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v47 = 0;
      do
      {
        __int16 v48 = &v36[v47];
        unsigned int v49 = *v35;
        int v50 = v49 >> 4;
        unsigned int v51 = v35[1];
        if (v49 >> 4 >= 0xF00) {
          int v50 = 3840;
        }
        if (v49 >= 0x1000) {
          int v52 = v50;
        }
        else {
          int v52 = 256;
        }
        if (v51 >> 4 >= 0xF00) {
          int v53 = 3840;
        }
        else {
          int v53 = v51 >> 4;
        }
        if (v51 < 0x1000) {
          int v53 = 256;
        }
        unsigned int v54 = v35[2];
        int v55 = v54 >> 4;
        unsigned int v56 = v35[3];
        if (v54 >> 4 >= 0xF00) {
          int v55 = 3840;
        }
        if (v54 >= 0x1000) {
          int v57 = v55;
        }
        else {
          int v57 = 256;
        }
        if (v56 >> 4 >= 0xF00) {
          int v58 = 3840;
        }
        else {
          int v58 = v56 >> 4;
        }
        if (v56 < 0x1000) {
          int v58 = 256;
        }
        *__int16 v48 = (8
              * (((613566757 * (unint64_t)((-1048320 - v57 + (v57 << 12)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-1048320 - v52 + (v52 << 12)) >> 9)) >> 32))
              + 8) & 0xFFF0;
        v48[1] = (8
                * (((613566757 * (unint64_t)((-1048320 - v58 + (v58 << 12)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-1048320 - v53 + (v53 << 12)) >> 9)) >> 32))
                + 8) & 0xFFF0;
        v47 += 2;
        v35 += 4;
      }
      while (v47 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v59 = 0;
  }
  else
  {
    uint64_t v60 = 0;
    unint64_t v59 = v9 - v32;
    do
    {
      uint64_t v61 = v14;
      uint64_t v62 = v21;
      if (v33)
      {
        unsigned int v63 = *v14;
        int v64 = v63 >> 4;
        unsigned int v65 = v14[1];
        if (v63 >> 4 >= 0xF00) {
          int v64 = 3840;
        }
        if (v63 < 0x1000) {
          int v64 = 256;
        }
        if (v65 >> 4 >= 0xF00) {
          int v66 = 3840;
        }
        else {
          int v66 = v65 >> 4;
        }
        if (v65 >= 0x1000) {
          int v67 = v66;
        }
        else {
          int v67 = 256;
        }
        unsigned int v68 = v14[2];
        int v69 = v68 >> 4;
        unsigned int v70 = v14[3];
        if (v68 >> 4 >= 0xF00) {
          int v69 = 3840;
        }
        if (v68 < 0x1000) {
          int v69 = 256;
        }
        if (v70 >> 4 >= 0xF00) {
          int v71 = 3840;
        }
        else {
          int v71 = v70 >> 4;
        }
        if (v70 >= 0x1000) {
          int v72 = v71;
        }
        else {
          int v72 = 256;
        }
        uint64_t v61 = v14 + 4;
        _WORD *v21 = (8
              * (((613566757 * (unint64_t)((-1048320 - v69 + (v69 << 12)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-1048320 - v64 + (v64 << 12)) >> 9)) >> 32))
              + 8) & 0xFFF0;
        v21[1] = (8
                * (((613566757 * (unint64_t)((-1048320 - v72 + (v72 << 12)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-1048320 - v67 + (v67 << 12)) >> 9)) >> 32))
                + 8) & 0xFFF0;
        uint64_t v62 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v73 = 0;
        do
        {
          int v74 = &v62[v73];
          unsigned int v75 = *v61;
          int v76 = v75 >> 4;
          unsigned int v77 = v61[1];
          if (v75 >> 4 >= 0xF00) {
            int v76 = 3840;
          }
          if (v75 >= 0x1000) {
            int v78 = v76;
          }
          else {
            int v78 = 256;
          }
          if (v77 >> 4 >= 0xF00) {
            int v79 = 3840;
          }
          else {
            int v79 = v77 >> 4;
          }
          if (v77 < 0x1000) {
            int v79 = 256;
          }
          unsigned int v80 = v61[2];
          int v81 = v80 >> 4;
          unsigned int v82 = v61[3];
          if (v80 >> 4 >= 0xF00) {
            int v81 = 3840;
          }
          if (v80 >= 0x1000) {
            int v83 = v81;
          }
          else {
            int v83 = 256;
          }
          if (v82 >> 4 >= 0xF00) {
            int v84 = 3840;
          }
          else {
            int v84 = v82 >> 4;
          }
          if (v82 < 0x1000) {
            int v84 = 256;
          }
          *int v74 = (8
                * (((613566757 * (unint64_t)((-1048320 - v83 + (v83 << 12)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-1048320 - v78 + (v78 << 12)) >> 9)) >> 32))
                + 8) & 0xFFF0;
          v74[1] = (8
                  * (((613566757 * (unint64_t)((-1048320 - v84 + (v84 << 12)) >> 9)) >> 32)
                   + ((613566757 * (unint64_t)((-1048320 - v79 + (v79 << 12)) >> 9)) >> 32))
                  + 8) & 0xFFF0;
          v73 += 2;
          v61 += 4;
        }
        while (v73 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v60;
    }
    while (v60 != v59);
  }
  if (v59 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v85 = *v14;
      int v86 = v85 >> 4;
      unsigned int v87 = v14[1];
      unsigned int v88 = v87 >> 4;
      if (v85 >> 4 >= 0xF00) {
        int v86 = 3840;
      }
      if (v85 < 0x1000) {
        int v86 = 256;
      }
      if (v88 >= 0xF00) {
        unsigned int v88 = 3840;
      }
      if (v87 >= 0x1000) {
        int v89 = v88;
      }
      else {
        int v89 = 256;
      }
      unsigned int v90 = v14[2];
      int v91 = v90 >> 4;
      unsigned int v92 = v14[3];
      if (v90 >> 4 >= 0xF00) {
        int v91 = 3840;
      }
      if (v90 >= 0x1000) {
        int v93 = v91;
      }
      else {
        int v93 = 256;
      }
      if (v92 >> 4 >= 0xF00) {
        int v94 = 3840;
      }
      else {
        int v94 = v92 >> 4;
      }
      if (v92 >= 0x1000) {
        int v95 = v94;
      }
      else {
        int v95 = 256;
      }
      v14 += 4;
      _WORD *v21 = (8
            * (((613566757 * (unint64_t)((-1048320 - v93 + (v93 << 12)) >> 9)) >> 32)
             + ((613566757 * (unint64_t)((-1048320 - v86 + (v86 << 12)) >> 9)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((613566757 * (unint64_t)((-1048320 - v95 + (v95 << 12)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-1048320 - v89 + (v89 << 12)) >> 9)) >> 32))
              + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v96 = 0;
      do
      {
        v97 = &v21[v96];
        unsigned int v98 = *v14;
        int v99 = v98 >> 4;
        unsigned int v100 = v14[1];
        if (v98 >> 4 >= 0xF00) {
          int v99 = 3840;
        }
        if (v98 >= 0x1000) {
          int v101 = v99;
        }
        else {
          int v101 = 256;
        }
        if (v100 >> 4 >= 0xF00) {
          int v102 = 3840;
        }
        else {
          int v102 = v100 >> 4;
        }
        if (v100 < 0x1000) {
          int v102 = 256;
        }
        unsigned int v103 = v14[2];
        int v104 = v103 >> 4;
        unsigned int v105 = v14[3];
        if (v103 >> 4 >= 0xF00) {
          int v104 = 3840;
        }
        if (v103 >= 0x1000) {
          int v106 = v104;
        }
        else {
          int v106 = 256;
        }
        if (v105 >> 4 >= 0xF00) {
          int v107 = 3840;
        }
        else {
          int v107 = v105 >> 4;
        }
        if (v105 < 0x1000) {
          int v107 = 256;
        }
        _WORD *v97 = (8
              * (((613566757 * (unint64_t)((-1048320 - v106 + (v106 << 12)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-1048320 - v101 + (v101 << 12)) >> 9)) >> 32))
              + 8) & 0xFFF0;
        v97[1] = (8
                * (((613566757 * (unint64_t)((-1048320 - v107 + (v107 << 12)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-1048320 - v102 + (v102 << 12)) >> 9)) >> 32))
                + 8) & 0xFFF0;
        v96 += 2;
        v14 += 4;
      }
      while (v96 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i) >> 4;
          if (v30 >= 0xEB0) {
            unsigned int v30 = 3760;
          }
          if (v30 <= 0x100) {
            unsigned int v30 = 256;
          }
          *(_WORD *)(v27 + 2 * i) = 16 * ((-1048320 - v30 + (v30 << 12)) / 0xDB0);
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      int v38 = v37 >> 4;
      unsigned int v39 = v14[1];
      unsigned int v40 = v39 >> 4;
      if (v37 >> 4 >= 0xF00) {
        int v38 = 3840;
      }
      if (v37 < 0x1000) {
        int v38 = 256;
      }
      if (v40 >= 0xF00) {
        unsigned int v40 = 3840;
      }
      if (v39 >= 0x1000) {
        int v41 = v40;
      }
      else {
        int v41 = 256;
      }
      __int16 v35 = v14 + 4;
      _WORD *v21 = 16 * ((613566757 * (unint64_t)((-1048320 - v38 + (v38 << 12)) >> 9)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v41 + (v41 << 12)) >> 9)) >> 32);
      unint64_t v36 = v21 + 2;
    }
    else
    {
      __int16 v35 = v14;
      unint64_t v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v42 = 0;
      do
      {
        int v43 = &v36[v42];
        unsigned int v44 = *v35;
        int v45 = v44 >> 4;
        unsigned int v46 = v35[1];
        if (v44 >> 4 >= 0xF00) {
          int v45 = 3840;
        }
        if (v44 >= 0x1000) {
          int v47 = v45;
        }
        else {
          int v47 = 256;
        }
        if (v46 >> 4 >= 0xF00) {
          int v48 = 3840;
        }
        else {
          int v48 = v46 >> 4;
        }
        if (v46 < 0x1000) {
          int v48 = 256;
        }
        *int v43 = 16 * ((613566757 * (unint64_t)((-1048320 - v47 + (v47 << 12)) >> 9)) >> 32);
        v43[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v48 + (v48 << 12)) >> 9)) >> 32);
        v42 += 2;
        v35 += 4;
      }
      while (v42 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v49 = 0;
  }
  else
  {
    uint64_t v50 = 0;
    unint64_t v49 = v9 - v32;
    do
    {
      unsigned int v51 = v14;
      int v52 = v21;
      if (v33)
      {
        unsigned int v53 = *v14;
        int v54 = v53 >> 4;
        unsigned int v55 = v14[1];
        if (v53 >> 4 >= 0xF00) {
          int v54 = 3840;
        }
        if (v53 < 0x1000) {
          int v54 = 256;
        }
        if (v55 >> 4 >= 0xF00) {
          int v56 = 3840;
        }
        else {
          int v56 = v55 >> 4;
        }
        if (v55 >= 0x1000) {
          int v57 = v56;
        }
        else {
          int v57 = 256;
        }
        unsigned int v51 = v14 + 4;
        _WORD *v21 = 16 * ((613566757 * (unint64_t)((-1048320 - v54 + (v54 << 12)) >> 9)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v57 + (v57 << 12)) >> 9)) >> 32);
        int v52 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v58 = 0;
        do
        {
          unint64_t v59 = &v52[v58];
          unsigned int v60 = *v51;
          int v61 = v60 >> 4;
          unsigned int v62 = v51[1];
          if (v60 >> 4 >= 0xF00) {
            int v61 = 3840;
          }
          if (v60 >= 0x1000) {
            int v63 = v61;
          }
          else {
            int v63 = 256;
          }
          if (v62 >> 4 >= 0xF00) {
            int v64 = 3840;
          }
          else {
            int v64 = v62 >> 4;
          }
          if (v62 < 0x1000) {
            int v64 = 256;
          }
          *unint64_t v59 = 16 * ((613566757 * (unint64_t)((-1048320 - v63 + (v63 << 12)) >> 9)) >> 32);
          v59[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v64 + (v64 << 12)) >> 9)) >> 32);
          v58 += 2;
          v51 += 4;
        }
        while (v58 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v50;
    }
    while (v50 != v49);
  }
  if (v49 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v65 = *v14;
      int v66 = v65 >> 4;
      unsigned int v67 = v14[1];
      unsigned int v68 = v67 >> 4;
      if (v65 >> 4 >= 0xF00) {
        int v66 = 3840;
      }
      if (v65 < 0x1000) {
        int v66 = 256;
      }
      if (v68 >= 0xF00) {
        unsigned int v68 = 3840;
      }
      if (v67 >= 0x1000) {
        int v69 = v68;
      }
      else {
        int v69 = 256;
      }
      v14 += 4;
      _WORD *v21 = 16 * ((613566757 * (unint64_t)((-1048320 - v66 + (v66 << 12)) >> 9)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v69 + (v69 << 12)) >> 9)) >> 32);
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v70 = 0;
      do
      {
        int v71 = &v21[v70];
        unsigned int v72 = *v14;
        int v73 = v72 >> 4;
        unsigned int v74 = v14[1];
        if (v72 >> 4 >= 0xF00) {
          int v73 = 3840;
        }
        if (v72 >= 0x1000) {
          int v75 = v73;
        }
        else {
          int v75 = 256;
        }
        if (v74 >> 4 >= 0xF00) {
          int v76 = 3840;
        }
        else {
          int v76 = v74 >> 4;
        }
        if (v74 < 0x1000) {
          int v76 = 256;
        }
        *int v71 = 16 * ((613566757 * (unint64_t)((-1048320 - v75 + (v75 << 12)) >> 9)) >> 32);
        v71[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v76 + (v76 << 12)) >> 9)) >> 32);
        v70 += 2;
        v14 += 4;
      }
      while (v70 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  else {
    unint64_t v25 = v14 - v13;
  }
  if (v25)
  {
    unint64_t v59 = v25;
    uint64_t v60 = a8[1];
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    unint64_t v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    unsigned int v30 = (char *)(*a7 + v27 * v18 + v20);
    uint64_t v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    unint64_t v25 = v59;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
    uint64_t v21 = v60;
  }
  if (v25 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v37 = (_WORD *)((char *)v16 + v15 + 4);
      unsigned int v38 = *v37;
      unsigned int v39 = v37[1];
      __int16 v35 = v16 + 4;
      int v40 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4)
          + ((unsigned __int16)v16[1] >> 4)
          + ((unsigned __int16)v16[3] >> 4)
          + (v39 >> 4);
      *unint64_t v22 = (4 * ((*(_WORD *)((char *)v16 + v15) >> 4) + (*v16 >> 4) + (v16[2] >> 4) + (v38 >> 4)) + 8) & 0xFFF0;
      v22[1] = (4 * v40 + 8) & 0xFFF0;
      unint64_t v36 = v22 + 2;
    }
    else
    {
      __int16 v35 = v16;
      unint64_t v36 = v22;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      unint64_t v42 = v35 + 2;
      do
      {
        int v43 = &v36[v41];
        int v44 = (*(unsigned __int16 *)((char *)v42 + v15 - 2) >> 4)
            + ((unsigned __int16)*(v42 - 1) >> 4)
            + ((unsigned __int16)v42[1] >> 4)
            + (*(unsigned __int16 *)((char *)v42 + v15 + 2) >> 4);
        *int v43 = (4
              * ((*(_WORD *)((char *)v42 + v15 - 4) >> 4)
               + (*(v42 - 2) >> 4)
               + (*v42 >> 4)
               + (*(_WORD *)((char *)v42 + v15) >> 4))
              + 8) & 0xFFF0;
        v43[1] = (4 * v44 + 8) & 0xFFF0;
        v41 += 2;
        v42 += 4;
      }
      while (v41 < v34);
    }
    v16 += v15;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v25 - v33;
    do
    {
      int v47 = v16;
      int v48 = v22;
      if (v8)
      {
        unint64_t v49 = (_WORD *)((char *)v16 + v15 + 4);
        unsigned int v50 = *v49;
        unsigned int v51 = v49[1];
        int v47 = v16 + 4;
        int v52 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4)
            + ((unsigned __int16)v16[1] >> 4)
            + ((unsigned __int16)v16[3] >> 4)
            + (v51 >> 4);
        *unint64_t v22 = (4 * ((*(_WORD *)((char *)v16 + v15) >> 4) + (*v16 >> 4) + (v16[2] >> 4) + (v50 >> 4)) + 8) & 0xFFF0;
        v22[1] = (4 * v52 + 8) & 0xFFF0;
        int v48 = v22 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v53 = 0;
        int v54 = v47 + 2;
        do
        {
          unsigned int v55 = &v48[v53];
          int v56 = (*(unsigned __int16 *)((char *)v54 + v15 - 2) >> 4)
              + ((unsigned __int16)*(v54 - 1) >> 4)
              + ((unsigned __int16)v54[1] >> 4)
              + (*(unsigned __int16 *)((char *)v54 + v15 + 2) >> 4);
          *unsigned int v55 = (4
                * ((*(_WORD *)((char *)v54 + v15 - 4) >> 4)
                 + (*(v54 - 2) >> 4)
                 + (*v54 >> 4)
                 + (*(_WORD *)((char *)v54 + v15) >> 4))
                + 8) & 0xFFF0;
          v55[1] = (4 * v56 + 8) & 0xFFF0;
          v53 += 2;
          v54 += 4;
        }
        while (v53 < v34);
      }
      v16 += v15;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  else {
    unint64_t v25 = v14 - v13;
  }
  if (v25)
  {
    unint64_t v51 = v25;
    uint64_t v52 = a4[1];
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    unint64_t v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    unsigned int v30 = (char *)(*a7 + v27 * v18 + v20);
    uint64_t v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    unint64_t v25 = v51;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
    uint64_t v15 = v52;
  }
  if (v25 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      __int16 v37 = v16[1] & 0xFFF0;
      __int16 v35 = v16 + 4;
      *unint64_t v22 = *v16 & 0xFFF0;
      v22[1] = v37;
      unint64_t v36 = v22 + 2;
    }
    else
    {
      __int16 v35 = v16;
      unint64_t v36 = v22;
    }
    if (v24 != v10)
    {
      unint64_t v38 = 0;
      do
      {
        unsigned int v39 = &v36[v38];
        __int16 v40 = v35[1] & 0xFFF0;
        *unsigned int v39 = *v35 & 0xFFF0;
        v39[1] = v40;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    v16 += v15;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    unint64_t v41 = 0;
    unint64_t v42 = v25 - v33;
    do
    {
      int v43 = v16;
      int v44 = v22;
      if (v8)
      {
        __int16 v45 = v16[1] & 0xFFF0;
        int v43 = v16 + 4;
        *unint64_t v22 = *v16 & 0xFFF0;
        v22[1] = v45;
        int v44 = v22 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          int v47 = &v44[v46];
          __int16 v48 = v43[1] & 0xFFF0;
          _WORD *v47 = *v43 & 0xFFF0;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      v16 += v15;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v142 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v142 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v14 - v13;
  unint64_t v26 = v20 - v19;
  if (v25 < v20 - v19) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    uint64_t v30 = *a8;
    if (v13 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v29 + v31;
    uint64_t v33 = *a7 + v30 * v19 + v21;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          unsigned int v35 = *(unsigned __int16 *)(v32 + 2 * i) >> 4;
          if (v35 >= 0xEB0) {
            unsigned int v35 = 3760;
          }
          if (v35 <= 0x100) {
            unsigned int v35 = 256;
          }
          *(_WORD *)(v33 + 2 * i) = 16 * ((-1048320 - v35 + (v35 << 12)) / 0xDB0);
        }
      }
      v32 += v28;
      v33 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v23 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v40 = *v16;
      int v41 = v40 >> 4;
      unsigned int v42 = v16[1];
      unsigned int v43 = v42 >> 4;
      unsigned int v44 = *(unsigned __int16 *)((char *)v16 + v15);
      unsigned int v45 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v40 >> 4 >= 0xF00) {
        int v41 = 3840;
      }
      if (v40 < 0x1000) {
        int v41 = 256;
      }
      if (v43 >= 0xF00) {
        unsigned int v43 = 3840;
      }
      if (v42 < 0x1000) {
        unsigned int v43 = 256;
      }
      if (v44 >> 4 >= 0xF00) {
        int v46 = 3840;
      }
      else {
        int v46 = v44 >> 4;
      }
      if (v44 >= 0x1000) {
        int v47 = v46;
      }
      else {
        int v47 = 256;
      }
      if (v45 >> 4 >= 0xF00) {
        int v48 = 3840;
      }
      else {
        int v48 = v45 >> 4;
      }
      if (v45 >= 0x1000) {
        int v49 = v48;
      }
      else {
        int v49 = 256;
      }
      unsigned int v50 = v16[2];
      int v51 = v50 >> 4;
      unsigned int v52 = v16[3];
      unint64_t v53 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      unsigned int v54 = *v53;
      unsigned int v55 = v53[1];
      if (v50 >> 4 >= 0xF00) {
        int v51 = 3840;
      }
      if (v50 >= 0x1000) {
        int v56 = v51;
      }
      else {
        int v56 = 256;
      }
      if (v52 >> 4 >= 0xF00) {
        int v57 = 3840;
      }
      else {
        int v57 = v52 >> 4;
      }
      if (v52 < 0x1000) {
        int v57 = 256;
      }
      if (v54 >> 4 >= 0xF00) {
        int v58 = 3840;
      }
      else {
        int v58 = v54 >> 4;
      }
      if (v54 < 0x1000) {
        int v58 = 256;
      }
      unsigned int v59 = -1048320 - v41 + (v41 << 12);
      if (v55 >> 4 >= 0xF00) {
        int v60 = 3840;
      }
      else {
        int v60 = v55 >> 4;
      }
      if (v55 >= 0x1000) {
        int v61 = v60;
      }
      else {
        int v61 = 256;
      }
      unint64_t v38 = v16 + 4;
      *unint64_t v22 = (4
            * (((613566757 * (unint64_t)((-1048320 - v47 + (v47 << 12)) >> 9)) >> 32)
             + ((613566757 * (unint64_t)(v59 >> 9)) >> 32)
             + ((613566757 * (unint64_t)((-1048320 - v56 + (v56 << 12)) >> 9)) >> 32)
             + ((613566757 * (unint64_t)((-1048320 - v58 + (v58 << 12)) >> 9)) >> 32))
            + 8) & 0xFFF0;
      v22[1] = (4
              * (((613566757 * (unint64_t)((-1048320 - v49 + (v49 << 12)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-1048320 - v43 + (v43 << 12)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-1048320 - v57 + (v57 << 12)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-1048320 - v61 + (v61 << 12)) >> 9)) >> 32))
              + 8) & 0xFFF0;
      unsigned int v39 = v22 + 2;
    }
    else
    {
      unint64_t v38 = v16;
      unsigned int v39 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v62 = 0;
      int v63 = v38 + 2;
      do
      {
        int v64 = &v39[v62];
        unsigned int v65 = *(v63 - 2);
        int v66 = v65 >> 4;
        unsigned int v67 = *(v63 - 1);
        unsigned int v68 = (unsigned __int16 *)((char *)v63 + v15);
        unsigned int v69 = *(unsigned __int16 *)((char *)v63 + v15 - 4);
        unsigned int v70 = *(unsigned __int16 *)((char *)v63 + v15 - 2);
        if (v65 >> 4 >= 0xF00) {
          int v66 = 3840;
        }
        if (v65 >= 0x1000) {
          int v71 = v66;
        }
        else {
          int v71 = 256;
        }
        if (v67 >> 4 >= 0xF00) {
          int v72 = 3840;
        }
        else {
          int v72 = v67 >> 4;
        }
        if (v67 < 0x1000) {
          int v72 = 256;
        }
        if (v69 >> 4 >= 0xF00) {
          int v73 = 3840;
        }
        else {
          int v73 = v69 >> 4;
        }
        if (v69 < 0x1000) {
          int v73 = 256;
        }
        if (v70 >> 4 >= 0xF00) {
          int v74 = 3840;
        }
        else {
          int v74 = v70 >> 4;
        }
        BOOL v75 = v70 >= 0x1000;
        unsigned int v76 = *v63;
        unsigned int v77 = v76 >> 4;
        unsigned int v78 = v63[1];
        if (!v75) {
          int v74 = 256;
        }
        unsigned int v79 = *v68;
        unsigned int v80 = v68[1];
        if (v77 >= 0xF00) {
          unsigned int v77 = 3840;
        }
        if (v76 >= 0x1000) {
          int v81 = v77;
        }
        else {
          int v81 = 256;
        }
        if (v78 >> 4 >= 0xF00) {
          int v82 = 3840;
        }
        else {
          int v82 = v78 >> 4;
        }
        BOOL v75 = v78 >= 0x1000;
        unsigned int v83 = v80 >> 4;
        if (!v75) {
          int v82 = 256;
        }
        if (v79 >> 4 >= 0xF00) {
          int v84 = 3840;
        }
        else {
          int v84 = v79 >> 4;
        }
        if (v79 < 0x1000) {
          int v84 = 256;
        }
        unint64_t v85 = (613566757 * (unint64_t)((-1048320 - v71 + (v71 << 12)) >> 9)) >> 32;
        if (v83 >= 0xF00) {
          unsigned int v83 = 3840;
        }
        unint64_t v86 = (613566757 * (unint64_t)((-1048320 - v72 + (v72 << 12)) >> 9)) >> 32;
        unint64_t v87 = (613566757 * (unint64_t)((-1048320 - v73 + (v73 << 12)) >> 9)) >> 32;
        if (v80 >= 0x1000) {
          int v88 = v83;
        }
        else {
          int v88 = 256;
        }
        *int v64 = (4
              * (v87
               + v85
               + ((613566757 * (unint64_t)((-1048320 - v81 + (v81 << 12)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-1048320 - v84 + (v84 << 12)) >> 9)) >> 32))
              + 8) & 0xFFF0;
        v64[1] = (4
                * (((613566757 * (unint64_t)((-1048320 - v74 + (v74 << 12)) >> 9)) >> 32)
                 + v86
                 + ((613566757 * (unint64_t)((-1048320 - v82 + (v82 << 12)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-1048320 - v88 + (v88 << 12)) >> 9)) >> 32))
                + 8) & 0xFFF0;
        v62 += 2;
        v63 += 4;
      }
      while (v62 < v37);
    }
    v16 += v15;
    unint64_t v22 = (_WORD *)((char *)v22 + v142);
  }
  if (v26 != v36)
  {
    unint64_t v89 = 0;
    unint64_t v90 = v26 - v36;
    do
    {
      int v91 = v16;
      unsigned int v92 = v22;
      if (v8)
      {
        unsigned int v93 = *v16;
        int v94 = v93 >> 4;
        unsigned int v95 = v16[1];
        unsigned int v96 = *(unsigned __int16 *)((char *)v16 + v15);
        unsigned int v97 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v93 >> 4 >= 0xF00) {
          int v94 = 3840;
        }
        if (v93 >= 0x1000) {
          int v98 = v94;
        }
        else {
          int v98 = 256;
        }
        if (v95 >> 4 >= 0xF00) {
          int v99 = 3840;
        }
        else {
          int v99 = v95 >> 4;
        }
        if (v95 < 0x1000) {
          int v99 = 256;
        }
        if (v96 >> 4 >= 0xF00) {
          int v100 = 3840;
        }
        else {
          int v100 = v96 >> 4;
        }
        if (v96 >= 0x1000) {
          int v101 = v100;
        }
        else {
          int v101 = 256;
        }
        if (v97 >> 4 >= 0xF00) {
          int v102 = 3840;
        }
        else {
          int v102 = v97 >> 4;
        }
        if (v97 >= 0x1000) {
          int v103 = v102;
        }
        else {
          int v103 = 256;
        }
        unsigned int v104 = v16[2];
        int v105 = v104 >> 4;
        unsigned int v106 = v16[3];
        int v107 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        unsigned int v108 = *v107;
        unsigned int v109 = v107[1];
        if (v104 >> 4 >= 0xF00) {
          int v105 = 3840;
        }
        if (v104 >= 0x1000) {
          int v110 = v105;
        }
        else {
          int v110 = 256;
        }
        if (v106 >> 4 >= 0xF00) {
          int v111 = 3840;
        }
        else {
          int v111 = v106 >> 4;
        }
        if (v106 < 0x1000) {
          int v111 = 256;
        }
        if (v108 >> 4 >= 0xF00) {
          int v112 = 3840;
        }
        else {
          int v112 = v108 >> 4;
        }
        if (v108 < 0x1000) {
          int v112 = 256;
        }
        unsigned int v113 = -1048320 - v98 + (v98 << 12);
        if (v109 >> 4 >= 0xF00) {
          int v114 = 3840;
        }
        else {
          int v114 = v109 >> 4;
        }
        if (v109 < 0x1000) {
          int v114 = 256;
        }
        int v91 = v16 + 4;
        *unint64_t v22 = (4
              * (((613566757 * (unint64_t)((-1048320 - v101 + (v101 << 12)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)(v113 >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-1048320 - v110 + (v110 << 12)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-1048320 - v112 + (v112 << 12)) >> 9)) >> 32))
              + 8) & 0xFFF0;
        v22[1] = (4
                * (((613566757 * (unint64_t)((-1048320 - v103 + (v103 << 12)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-1048320 - v99 + (v99 << 12)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-1048320 - v111 + (v111 << 12)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-1048320 - v114 + (v114 << 12)) >> 9)) >> 32))
                + 8) & 0xFFF0;
        unsigned int v92 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v115 = 0;
        int v116 = v91 + 2;
        do
        {
          int v117 = &v92[v115];
          unsigned int v118 = *(v116 - 2);
          int v119 = v118 >> 4;
          unsigned int v120 = *(v116 - 1);
          int v121 = (unsigned __int16 *)((char *)v116 + v15);
          unsigned int v122 = *(unsigned __int16 *)((char *)v116 + v15 - 4);
          unsigned int v123 = *(unsigned __int16 *)((char *)v116 + v15 - 2);
          if (v118 >> 4 >= 0xF00) {
            int v119 = 3840;
          }
          if (v118 >= 0x1000) {
            int v124 = v119;
          }
          else {
            int v124 = 256;
          }
          if (v120 >> 4 >= 0xF00) {
            int v125 = 3840;
          }
          else {
            int v125 = v120 >> 4;
          }
          if (v120 < 0x1000) {
            int v125 = 256;
          }
          if (v122 >> 4 >= 0xF00) {
            int v126 = 3840;
          }
          else {
            int v126 = v122 >> 4;
          }
          if (v122 < 0x1000) {
            int v126 = 256;
          }
          if (v123 >> 4 >= 0xF00) {
            int v127 = 3840;
          }
          else {
            int v127 = v123 >> 4;
          }
          BOOL v75 = v123 >= 0x1000;
          unsigned int v128 = *v116;
          unsigned int v129 = v128 >> 4;
          unsigned int v130 = v116[1];
          if (!v75) {
            int v127 = 256;
          }
          unsigned int v131 = *v121;
          unsigned int v132 = v131 >> 4;
          unsigned int v133 = v121[1];
          if (v129 >= 0xF00) {
            unsigned int v129 = 3840;
          }
          if (v128 >= 0x1000) {
            int v134 = v129;
          }
          else {
            int v134 = 256;
          }
          if (v130 >> 4 >= 0xF00) {
            int v135 = 3840;
          }
          else {
            int v135 = v130 >> 4;
          }
          BOOL v75 = v130 >= 0x1000;
          unsigned int v136 = v133 >> 4;
          if (!v75) {
            int v135 = 256;
          }
          if (v132 >= 0xF00) {
            unsigned int v132 = 3840;
          }
          if (v131 < 0x1000) {
            unsigned int v132 = 256;
          }
          unint64_t v137 = (613566757 * (unint64_t)((-1048320 - v124 + (v124 << 12)) >> 9)) >> 32;
          if (v136 >= 0xF00) {
            unsigned int v136 = 3840;
          }
          unint64_t v138 = (613566757 * (unint64_t)((-1048320 - v125 + (v125 << 12)) >> 9)) >> 32;
          unint64_t v139 = (613566757 * (unint64_t)((-1048320 - v126 + (v126 << 12)) >> 9)) >> 32;
          if (v133 >= 0x1000) {
            int v140 = v136;
          }
          else {
            int v140 = 256;
          }
          *int v117 = (4
                 * (v139
                  + v137
                  + ((613566757 * (unint64_t)((-1048320 - v134 + (v134 << 12)) >> 9)) >> 32)
                  + ((613566757 * (unint64_t)((-1048320 - v132 + (v132 << 12)) >> 9)) >> 32))
                 + 8) & 0xFFF0;
          v117[1] = (4
                   * (((613566757 * (unint64_t)((-1048320 - v127 + (v127 << 12)) >> 9)) >> 32)
                    + v138
                    + ((613566757 * (unint64_t)((-1048320 - v135 + (v135 << 12)) >> 9)) >> 32)
                    + ((613566757 * (unint64_t)((-1048320 - v140 + (v140 << 12)) >> 9)) >> 32))
                   + 8) & 0xFFF0;
          v115 += 2;
          v116 += 4;
        }
        while (v115 < v37);
      }
      v16 += v15;
      unint64_t v22 = (_WORD *)((char *)v22 + v142);
      v89 += 2;
    }
    while (v89 < v90);
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    uint64_t v31 = *a8;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v30 + v32;
    uint64_t v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 4;
          if (v36 >= 0xEB0) {
            unsigned int v36 = 3760;
          }
          if (v36 <= 0x100) {
            unsigned int v36 = 256;
          }
          *(_WORD *)(v34 + 2 * i) = 16 * ((-1048320 - v36 + (v36 << 12)) / 0xDB0);
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v41 = *v16;
      int v42 = v41 >> 4;
      unsigned int v43 = v16[1];
      unsigned int v44 = v43 >> 4;
      if (v41 >> 4 >= 0xF00) {
        int v42 = 3840;
      }
      if (v41 < 0x1000) {
        int v42 = 256;
      }
      if (v44 >= 0xF00) {
        unsigned int v44 = 3840;
      }
      if (v43 >= 0x1000) {
        int v45 = v44;
      }
      else {
        int v45 = 256;
      }
      unsigned int v39 = v16 + 4;
      *unint64_t v23 = 16 * ((613566757 * (unint64_t)((-1048320 - v42 + (v42 << 12)) >> 9)) >> 32);
      v23[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v45 + (v45 << 12)) >> 9)) >> 32);
      unsigned int v40 = v23 + 2;
    }
    else
    {
      unsigned int v39 = v16;
      unsigned int v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v46 = 0;
      do
      {
        int v47 = &v40[v46];
        unsigned int v48 = *v39;
        int v49 = v48 >> 4;
        unsigned int v50 = v39[1];
        if (v48 >> 4 >= 0xF00) {
          int v49 = 3840;
        }
        if (v48 >= 0x1000) {
          int v51 = v49;
        }
        else {
          int v51 = 256;
        }
        if (v50 >> 4 >= 0xF00) {
          int v52 = 3840;
        }
        else {
          int v52 = v50 >> 4;
        }
        if (v50 < 0x1000) {
          int v52 = 256;
        }
        _WORD *v47 = 16 * ((613566757 * (unint64_t)((-1048320 - v51 + (v51 << 12)) >> 9)) >> 32);
        v47[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v52 + (v52 << 12)) >> 9)) >> 32);
        v46 += 2;
        v39 += 4;
      }
      while (v46 < v38);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    unint64_t v53 = 0;
    unint64_t v54 = v27 - v37;
    uint64_t v55 = 2 * v15;
    do
    {
      int v56 = v16;
      int v57 = v23;
      if (v8)
      {
        unsigned int v58 = *v16;
        int v59 = v58 >> 4;
        unsigned int v60 = v16[1];
        if (v58 >> 4 >= 0xF00) {
          int v59 = 3840;
        }
        if (v58 < 0x1000) {
          int v59 = 256;
        }
        if (v60 >> 4 >= 0xF00) {
          int v61 = 3840;
        }
        else {
          int v61 = v60 >> 4;
        }
        if (v60 >= 0x1000) {
          int v62 = v61;
        }
        else {
          int v62 = 256;
        }
        int v56 = v16 + 4;
        *unint64_t v23 = 16 * ((613566757 * (unint64_t)((-1048320 - v59 + (v59 << 12)) >> 9)) >> 32);
        v23[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v62 + (v62 << 12)) >> 9)) >> 32);
        int v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v63 = 0;
        do
        {
          int v64 = &v57[v63];
          unsigned int v65 = *v56;
          int v66 = v65 >> 4;
          unsigned int v67 = v56[1];
          if (v65 >> 4 >= 0xF00) {
            int v66 = 3840;
          }
          if (v65 >= 0x1000) {
            int v68 = v66;
          }
          else {
            int v68 = 256;
          }
          if (v67 >> 4 >= 0xF00) {
            int v69 = 3840;
          }
          else {
            int v69 = v67 >> 4;
          }
          if (v67 < 0x1000) {
            int v69 = 256;
          }
          *int v64 = 16 * ((613566757 * (unint64_t)((-1048320 - v68 + (v68 << 12)) >> 9)) >> 32);
          v64[1] = 16 * ((613566757 * (unint64_t)((-1048320 - v69 + (v69 << 12)) >> 9)) >> 32);
          v63 += 2;
          v56 += 4;
        }
        while (v63 < v38);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v55);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_Copy_t4as_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v15 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v14;
    uint64_t v22 = *a7 + *a8 * v14;
    uint64_t v23 = *a4;
    uint64_t v24 = a4[2];
    uint64_t v25 = v21 + 2 * v15;
    uint64_t v26 = v22 + 2 * v15;
    uint64_t v27 = a3[2] + v24 * v8 + 2 * v9;
    uint64_t v28 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v27 + 2 * i);
          *(_WORD *)(v26 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v30 = v8 & 1;
  if (v11 >= v30) {
    uint64_t v31 = v8 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  unint64_t v33 = v9 & 1;
  if (v10 >= v33) {
    unint64_t v34 = v33;
  }
  else {
    unint64_t v34 = 0;
  }
  unint64_t v35 = v10 - v34;
  if (v8)
  {
    if (v32)
    {
      unsigned int v36 = v13 + 2;
      __int16 v38 = v13[1] & 0xFFC0;
      *uint64_t v17 = *v13 & 0xFFC0;
      v17[1] = v38;
      unint64_t v37 = v17 + 2;
    }
    else
    {
      unsigned int v36 = v13;
      unint64_t v37 = v17;
    }
    if (v10 == v34)
    {
      unint64_t v39 = 0;
    }
    else
    {
      unint64_t v40 = v10 - v34;
      do
      {
        __int16 v41 = *v36;
        __int16 v42 = v36[1];
        v36 += 2;
        *unint64_t v37 = v41 & 0xFFC0;
        v37[1] = v42 & 0xFFC0;
        v37 += 2;
        --v40;
      }
      while (v40);
      unint64_t v39 = v10 - v34;
    }
    if (v39 + v33 < v10)
    {
      __int16 v43 = *v36 & 0xFFC0;
      __int16 v44 = v36[1] & 0xFFC0;
      *unint64_t v37 = v43;
      v37[1] = v44;
    }
    unint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v31)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v11 - v31;
    do
    {
      int v47 = v13;
      unsigned int v48 = v17;
      if (v32)
      {
        int v47 = v13 + 2;
        __int16 v49 = v13[1] & 0xFFC0;
        *uint64_t v17 = *v13 & 0xFFC0;
        v17[1] = v49;
        unsigned int v48 = v17 + 2;
      }
      if (v10 == v34)
      {
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v51 = v10 - v34;
        do
        {
          __int16 v52 = *v47;
          __int16 v53 = v47[1];
          v47 += 2;
          *unsigned int v48 = v52 & 0xFFC0;
          v48[1] = v53 & 0xFFC0;
          v48 += 2;
          --v51;
        }
        while (v51);
        unint64_t v50 = v10 - v34;
      }
      if (v50 + v33 < v10)
      {
        __int16 v54 = *v47 & 0xFFC0;
        __int16 v55 = v47[1] & 0xFFC0;
        *unsigned int v48 = v54;
        v48[1] = v55;
      }
      unint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v11)
  {
    if (v32)
    {
      __int16 v56 = *v13;
      __int16 v57 = v13[1];
      v13 += 2;
      *uint64_t v17 = v56 & 0xFFC0;
      v17[1] = v57 & 0xFFC0;
      v17 += 2;
    }
    if (v10 == v34)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v58 = v10 - v34;
      do
      {
        __int16 v59 = *v13;
        __int16 v60 = v13[1];
        v13 += 2;
        *uint64_t v17 = v59 & 0xFFC0;
        v17[1] = v60 & 0xFFC0;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v35 + v33 < v10)
    {
      __int16 v61 = *v13 & 0xFFC0;
      __int16 v62 = v13[1] & 0xFFC0;
      *uint64_t v17 = v61;
      v17[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_Copy_tv44_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(_WORD *)(v22 + 2 * i) & 0xFFC0;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v24 = v8 & 1;
  if (v11 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v26)
    {
      unint64_t v30 = v13 + 2;
      __int16 v32 = v13[1] & 0xFFC0;
      *uint64_t v17 = *v13 & 0xFFC0;
      v17[1] = v32;
      uint64_t v31 = v17 + 2;
    }
    else
    {
      unint64_t v30 = v13;
      uint64_t v31 = v17;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        __int16 v35 = *v30;
        __int16 v36 = v30[1];
        v30 += 2;
        *uint64_t v31 = v35 & 0xFFC0;
        v31[1] = v36 & 0xFFC0;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      __int16 v37 = *v30 & 0xFFC0;
      __int16 v38 = v30[1] & 0xFFC0;
      *uint64_t v31 = v37;
      v31[1] = v38;
    }
    unint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v11 - v25;
    do
    {
      __int16 v41 = v13;
      __int16 v42 = v17;
      if (v26)
      {
        __int16 v41 = v13 + 2;
        __int16 v43 = v13[1] & 0xFFC0;
        *uint64_t v17 = *v13 & 0xFFC0;
        v17[1] = v43;
        __int16 v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          __int16 v46 = *v41;
          __int16 v47 = v41[1];
          v41 += 2;
          *__int16 v42 = v46 & 0xFFC0;
          v42[1] = v47 & 0xFFC0;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        __int16 v48 = *v41 & 0xFFC0;
        __int16 v49 = v41[1] & 0xFFC0;
        *__int16 v42 = v48;
        v42[1] = v49;
      }
      unint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if (v26)
    {
      __int16 v50 = *v13;
      __int16 v51 = v13[1];
      v13 += 2;
      *uint64_t v17 = v50 & 0xFFC0;
      v17[1] = v51 & 0xFFC0;
      v17 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        __int16 v53 = *v13;
        __int16 v54 = v13[1];
        v13 += 2;
        *uint64_t v17 = v53 & 0xFFC0;
        v17[1] = v54 & 0xFFC0;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      __int16 v55 = *v13 & 0xFFC0;
      __int16 v56 = v13[1] & 0xFFC0;
      *uint64_t v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_tv44_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v25 = *(unsigned __int16 *)(v23 + 2 * i) >> 4;
          if (v25 >= 0xEB0) {
            unsigned int v25 = 3760;
          }
          if (v25 <= 0x100) {
            unsigned int v25 = 256;
          }
          *(_WORD *)(v22 + 2 * i) = (unsigned __int16)((-261888 - v25 + (v25 << 10)) / 0xDB0) << 6;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v26 = v8 & 1;
  if (v18 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      unsigned int v34 = *v13;
      int v35 = v34 >> 4;
      unsigned int v36 = v13[1];
      if (v34 >> 4 >= 0xF00) {
        int v35 = 3840;
      }
      if (v34 >= 0x1000) {
        int v37 = v35;
      }
      else {
        int v37 = 256;
      }
      if (v36 >> 4 >= 0xF00) {
        int v38 = 3840;
      }
      else {
        int v38 = v36 >> 4;
      }
      if (v36 >= 0x1000) {
        int v39 = v38;
      }
      else {
        int v39 = 256;
      }
      __int16 v32 = v13 + 2;
      *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v37 + (v37 << 10)) >> 9)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v39 + (v39 << 10)) >> 9)) >> 32) << 6;
      unint64_t v33 = v17 + 2;
    }
    else
    {
      __int16 v32 = v13;
      unint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v40 = 0;
    }
    else
    {
      unint64_t v41 = v10 - v30;
      do
      {
        unsigned int v42 = *v32;
        int v43 = v42 >> 4;
        unsigned int v44 = v32[1];
        if (v42 >> 4 >= 0xF00) {
          int v43 = 3840;
        }
        if (v42 >= 0x1000) {
          int v45 = v43;
        }
        else {
          int v45 = 256;
        }
        if (v44 >> 4 >= 0xF00) {
          int v46 = 3840;
        }
        else {
          int v46 = v44 >> 4;
        }
        if (v44 < 0x1000) {
          int v46 = 256;
        }
        v32 += 2;
        *unint64_t v33 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v45 + (v45 << 10)) >> 9)) >> 32) << 6;
        v33[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v46 + (v46 << 10)) >> 9)) >> 32) << 6;
        v33 += 2;
        --v41;
      }
      while (v41);
      unint64_t v40 = v10 - v30;
    }
    if (v40 + v29 < v10)
    {
      unsigned int v47 = *v32;
      int v48 = v47 >> 4;
      unsigned int v49 = v32[1];
      unsigned int v50 = v49 >> 4;
      if (v47 >> 4 >= 0xF00) {
        int v48 = 3840;
      }
      if (v47 < 0x1000) {
        int v48 = 256;
      }
      if (v50 >= 0xF00) {
        unsigned int v50 = 3840;
      }
      if (v49 >= 0x1000) {
        int v51 = v50;
      }
      else {
        int v51 = 256;
      }
      *unint64_t v33 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v48 + (v48 << 10)) >> 9)) >> 32) << 6;
      v33[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v51 + (v51 << 10)) >> 9)) >> 32) << 6;
    }
    unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    unint64_t v52 = 0;
  }
  else
  {
    uint64_t v53 = 0;
    unint64_t v52 = v18 - v27;
    do
    {
      __int16 v54 = v13;
      __int16 v55 = v17;
      if (v28)
      {
        unsigned int v56 = *v13;
        int v57 = v56 >> 4;
        unsigned int v58 = v13[1];
        if (v56 >> 4 >= 0xF00) {
          int v57 = 3840;
        }
        if (v56 >= 0x1000) {
          int v59 = v57;
        }
        else {
          int v59 = 256;
        }
        if (v58 >> 4 >= 0xF00) {
          int v60 = 3840;
        }
        else {
          int v60 = v58 >> 4;
        }
        if (v58 >= 0x1000) {
          int v61 = v60;
        }
        else {
          int v61 = 256;
        }
        __int16 v54 = v13 + 2;
        *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v59 + (v59 << 10)) >> 9)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v61 + (v61 << 10)) >> 9)) >> 32) << 6;
        __int16 v55 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v62 = 0;
      }
      else
      {
        unint64_t v63 = v10 - v30;
        do
        {
          unsigned int v64 = *v54;
          int v65 = v64 >> 4;
          unsigned int v66 = v54[1];
          if (v64 >> 4 >= 0xF00) {
            int v65 = 3840;
          }
          if (v64 >= 0x1000) {
            int v67 = v65;
          }
          else {
            int v67 = 256;
          }
          if (v66 >> 4 >= 0xF00) {
            int v68 = 3840;
          }
          else {
            int v68 = v66 >> 4;
          }
          if (v66 < 0x1000) {
            int v68 = 256;
          }
          v54 += 2;
          *__int16 v55 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v67 + (v67 << 10)) >> 9)) >> 32) << 6;
          v55[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v68 + (v68 << 10)) >> 9)) >> 32) << 6;
          v55 += 2;
          --v63;
        }
        while (v63);
        unint64_t v62 = v10 - v30;
      }
      if (v62 + v29 < v10)
      {
        unsigned int v69 = *v54;
        int v70 = v69 >> 4;
        unsigned int v71 = v54[1];
        if (v69 >> 4 >= 0xF00) {
          int v70 = 3840;
        }
        if (v69 >= 0x1000) {
          int v72 = v70;
        }
        else {
          int v72 = 256;
        }
        if (v71 >> 4 >= 0xF00) {
          int v73 = 3840;
        }
        else {
          int v73 = v71 >> 4;
        }
        if (v71 >= 0x1000) {
          int v74 = v73;
        }
        else {
          int v74 = 256;
        }
        *__int16 v55 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v72 + (v72 << 10)) >> 9)) >> 32) << 6;
        v55[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v74 + (v74 << 10)) >> 9)) >> 32) << 6;
      }
      unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v53;
    }
    while (v53 != v52);
  }
  if (v52 + v26 < v18)
  {
    if (v28)
    {
      unsigned int v75 = *v13;
      int v76 = v75 >> 4;
      unsigned int v77 = v13[1];
      unsigned int v78 = v77 >> 4;
      if (v75 >> 4 >= 0xF00) {
        int v76 = 3840;
      }
      if (v75 < 0x1000) {
        int v76 = 256;
      }
      if (v78 >= 0xF00) {
        unsigned int v78 = 3840;
      }
      if (v77 >= 0x1000) {
        int v79 = v78;
      }
      else {
        int v79 = 256;
      }
      v13 += 2;
      *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v76 + (v76 << 10)) >> 9)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v79 + (v79 << 10)) >> 9)) >> 32) << 6;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v80 = v10 - v30;
      do
      {
        unsigned int v81 = *v13;
        int v82 = v81 >> 4;
        unsigned int v83 = v13[1];
        if (v81 >> 4 >= 0xF00) {
          int v82 = 3840;
        }
        if (v81 >= 0x1000) {
          int v84 = v82;
        }
        else {
          int v84 = 256;
        }
        if (v83 >> 4 >= 0xF00) {
          int v85 = 3840;
        }
        else {
          int v85 = v83 >> 4;
        }
        if (v83 < 0x1000) {
          int v85 = 256;
        }
        v13 += 2;
        *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v84 + (v84 << 10)) >> 9)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v85 + (v85 << 10)) >> 9)) >> 32) << 6;
        v17 += 2;
        --v80;
      }
      while (v80);
    }
    if (v31 + v29 < v10)
    {
      unsigned int v86 = *v13;
      int v87 = v86 >> 4;
      unsigned int v88 = v13[1];
      unsigned int v89 = v88 >> 4;
      if (v86 >> 4 >= 0xF00) {
        int v87 = 3840;
      }
      if (v86 < 0x1000) {
        int v87 = 256;
      }
      if (v89 >= 0xF00) {
        unsigned int v89 = 3840;
      }
      if (v88 >= 0x1000) {
        int v90 = v89;
      }
      else {
        int v90 = 256;
      }
      *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v87 + (v87 << 10)) >> 9)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v90 + (v90 << 10)) >> 9)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_t4as_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21) {
    unint64_t v20 = v21;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v16;
    uint64_t v26 = *a7 + *a8 * v16;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v17;
    uint64_t v30 = v26 + v17;
    uint64_t v31 = a3[2] + v28 * v12 + 2 * v11;
    uint64_t v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v12 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v12 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  if (v20 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v20 - v10;
  if (v12)
  {
    if (v36)
    {
      int v38 = v14 + 4;
      int v40 = (v14[3] >> 6) + (v14[1] >> 6);
      *uint64_t v19 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
      v19[1] = (32 * v40 + 32) & 0xFFC0;
      int v39 = v19 + 2;
    }
    else
    {
      int v38 = v14;
      int v39 = v19;
    }
    if (v20 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        int v43 = ((unsigned __int16)v38[3] >> 6) + ((unsigned __int16)v38[1] >> 6);
        *unsigned int v42 = (32 * ((v38[2] >> 6) + (*v38 >> 6)) + 32) & 0xFFC0;
        v42[1] = (32 * v43 + 32) & 0xFFC0;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v35;
    do
    {
      int v46 = v14;
      unsigned int v47 = v19;
      if (v36)
      {
        int v46 = v14 + 4;
        int v48 = (v14[3] >> 6) + (v14[1] >> 6);
        *uint64_t v19 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v19[1] = (32 * v48 + 32) & 0xFFC0;
        unsigned int v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unsigned int v50 = &v47[v49];
          int v51 = ((unsigned __int16)v46[3] >> 6) + ((unsigned __int16)v46[1] >> 6);
          _WORD *v50 = (32 * ((v46[2] >> 6) + (*v46 >> 6)) + 32) & 0xFFC0;
          v50[1] = (32 * v51 + 32) & 0xFFC0;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if (v36)
    {
      unsigned int v52 = *v14;
      unsigned int v53 = v14[1];
      unsigned int v54 = v14[2];
      unsigned int v55 = v14[3];
      v14 += 4;
      *uint64_t v19 = (32 * ((v54 >> 6) + (v52 >> 6)) + 32) & 0xFFC0;
      v19[1] = (32 * ((v55 >> 6) + (v53 >> 6)) + 32) & 0xFFC0;
      v19 += 2;
    }
    if (v20 != v10)
    {
      unint64_t v56 = 0;
      do
      {
        int v57 = &v19[v56];
        int v58 = (v14[3] >> 6) + (v14[1] >> 6);
        *int v57 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v57[1] = (32 * v58 + 32) & 0xFFC0;
        v56 += 2;
        v14 += 4;
      }
      while (v56 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_t4as_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21) {
    unint64_t v20 = v21;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v16;
    uint64_t v26 = *a7 + *a8 * v16;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v17;
    uint64_t v30 = v26 + v17;
    uint64_t v31 = a3[2] + v28 * v12 + 2 * v11;
    uint64_t v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v12 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v12 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  if (v20 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v20 - v10;
  if (v12)
  {
    if (v36)
    {
      int v38 = v14 + 4;
      __int16 v40 = v14[1] & 0xFFC0;
      *uint64_t v19 = *v14 & 0xFFC0;
      v19[1] = v40;
      int v39 = v19 + 2;
    }
    else
    {
      int v38 = v14;
      int v39 = v19;
    }
    if (v20 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        __int16 v43 = v38[1] & 0xFFC0;
        *unsigned int v42 = *v38 & 0xFFC0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v35;
    do
    {
      int v46 = v14;
      unsigned int v47 = v19;
      if (v36)
      {
        int v46 = v14 + 4;
        __int16 v48 = v14[1] & 0xFFC0;
        *uint64_t v19 = *v14 & 0xFFC0;
        v19[1] = v48;
        unsigned int v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unsigned int v50 = &v47[v49];
          __int16 v51 = v46[1] & 0xFFC0;
          _WORD *v50 = *v46 & 0xFFC0;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if (v36)
    {
      __int16 v52 = *v14;
      __int16 v53 = v14[1];
      v14 += 4;
      *uint64_t v19 = v52 & 0xFFC0;
      v19[1] = v53 & 0xFFC0;
      v19 += 2;
    }
    if (v20 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        unsigned int v55 = &v19[v54];
        __int16 v56 = v14[1] & 0xFFC0;
        *unsigned int v55 = *v14 & 0xFFC0;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      int v36 = (v14[3] >> 6) + (v14[1] >> 6);
      _WORD *v21 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
      v21[1] = (32 * v36 + 32) & 0xFFC0;
      uint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        int v39 = ((unsigned __int16)v34[3] >> 6) + ((unsigned __int16)v34[1] >> 6);
        _WORD *v38 = (32 * ((v34[2] >> 6) + (*v34 >> 6)) + 32) & 0xFFC0;
        v38[1] = (32 * v39 + 32) & 0xFFC0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unsigned int v42 = v14;
      __int16 v43 = v21;
      if (v32)
      {
        unsigned int v42 = v14 + 4;
        int v44 = (v14[3] >> 6) + (v14[1] >> 6);
        _WORD *v21 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v21[1] = (32 * v44 + 32) & 0xFFC0;
        __int16 v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          int v47 = ((unsigned __int16)v42[3] >> 6) + ((unsigned __int16)v42[1] >> 6);
          *int v46 = (32 * ((v42[2] >> 6) + (*v42 >> 6)) + 32) & 0xFFC0;
          v46[1] = (32 * v47 + 32) & 0xFFC0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v48 = *v14;
      unsigned int v49 = v14[1];
      unsigned int v50 = v14[2];
      unsigned int v51 = v14[3];
      v14 += 4;
      _WORD *v21 = (32 * ((v50 >> 6) + (v48 >> 6)) + 32) & 0xFFC0;
      v21[1] = (32 * ((v51 >> 6) + (v49 >> 6)) + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        __int16 v53 = &v21[v52];
        int v54 = (v14[3] >> 6) + (v14[1] >> 6);
        *__int16 v53 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v53[1] = (32 * v54 + 32) & 0xFFC0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      __int16 v36 = v14[1] & 0xFFC0;
      _WORD *v21 = *v14 & 0xFFC0;
      v21[1] = v36;
      uint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        __int16 v39 = v34[1] & 0xFFC0;
        _WORD *v38 = *v34 & 0xFFC0;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      unsigned int v42 = v14;
      __int16 v43 = v21;
      if (v32)
      {
        unsigned int v42 = v14 + 4;
        __int16 v44 = v14[1] & 0xFFC0;
        _WORD *v21 = *v14 & 0xFFC0;
        v21[1] = v44;
        __int16 v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          __int16 v47 = v42[1] & 0xFFC0;
          *int v46 = *v42 & 0xFFC0;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      __int16 v48 = *v14;
      __int16 v49 = v14[1];
      v14 += 4;
      _WORD *v21 = v48 & 0xFFC0;
      v21[1] = v49 & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        unsigned int v51 = &v21[v50];
        __int16 v52 = v14[1] & 0xFFC0;
        *unsigned int v51 = *v14 & 0xFFC0;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i) >> 4;
          if (v30 >= 0xEB0) {
            unsigned int v30 = 3760;
          }
          if (v30 <= 0x100) {
            unsigned int v30 = 256;
          }
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)((-261888 - v30 + (v30 << 10)) / 0xDB0) << 6;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      int v38 = v37 >> 4;
      unsigned int v39 = v14[1];
      unsigned int v40 = v39 >> 4;
      if (v37 >> 4 >= 0xF00) {
        int v38 = 3840;
      }
      if (v37 < 0x1000) {
        int v38 = 256;
      }
      if (v40 >= 0xF00) {
        unsigned int v40 = 3840;
      }
      if (v39 >= 0x1000) {
        int v41 = v40;
      }
      else {
        int v41 = 256;
      }
      unsigned int v42 = v14[2];
      int v43 = v42 >> 4;
      unsigned int v44 = v14[3];
      if (v42 >> 4 >= 0xF00) {
        int v43 = 3840;
      }
      if (v42 >= 0x1000) {
        int v45 = v43;
      }
      else {
        int v45 = 256;
      }
      if (v44 >> 4 >= 0xF00) {
        int v46 = 3840;
      }
      else {
        int v46 = v44 >> 4;
      }
      if (v44 < 0x1000) {
        int v46 = 256;
      }
      uint64_t v35 = v14 + 4;
      _WORD *v21 = (32
            * (((613566757 * (unint64_t)((-261888 - v45 + (v45 << 10)) >> 9)) >> 32)
             + ((613566757 * (unint64_t)((-261888 - v38 + (v38 << 10)) >> 9)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((613566757 * (unint64_t)((-261888 - v46 + (v46 << 10)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-261888 - v41 + (v41 << 10)) >> 9)) >> 32))
              + 32) & 0xFFC0;
      __int16 v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v47 = 0;
      do
      {
        __int16 v48 = &v36[v47];
        unsigned int v49 = *v35;
        int v50 = v49 >> 4;
        unsigned int v51 = v35[1];
        if (v49 >> 4 >= 0xF00) {
          int v50 = 3840;
        }
        if (v49 >= 0x1000) {
          int v52 = v50;
        }
        else {
          int v52 = 256;
        }
        if (v51 >> 4 >= 0xF00) {
          int v53 = 3840;
        }
        else {
          int v53 = v51 >> 4;
        }
        if (v51 < 0x1000) {
          int v53 = 256;
        }
        unsigned int v54 = v35[2];
        int v55 = v54 >> 4;
        unsigned int v56 = v35[3];
        if (v54 >> 4 >= 0xF00) {
          int v55 = 3840;
        }
        if (v54 >= 0x1000) {
          int v57 = v55;
        }
        else {
          int v57 = 256;
        }
        if (v56 >> 4 >= 0xF00) {
          int v58 = 3840;
        }
        else {
          int v58 = v56 >> 4;
        }
        if (v56 < 0x1000) {
          int v58 = 256;
        }
        *__int16 v48 = (32
              * (((613566757 * (unint64_t)((-261888 - v57 + (v57 << 10)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-261888 - v52 + (v52 << 10)) >> 9)) >> 32))
              + 32) & 0xFFC0;
        v48[1] = (32
                * (((613566757 * (unint64_t)((-261888 - v58 + (v58 << 10)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-261888 - v53 + (v53 << 10)) >> 9)) >> 32))
                + 32) & 0xFFC0;
        v47 += 2;
        v35 += 4;
      }
      while (v47 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v59 = 0;
  }
  else
  {
    uint64_t v60 = 0;
    unint64_t v59 = v9 - v32;
    do
    {
      int v61 = v14;
      unint64_t v62 = v21;
      if (v33)
      {
        unsigned int v63 = *v14;
        int v64 = v63 >> 4;
        unsigned int v65 = v14[1];
        if (v63 >> 4 >= 0xF00) {
          int v64 = 3840;
        }
        if (v63 < 0x1000) {
          int v64 = 256;
        }
        if (v65 >> 4 >= 0xF00) {
          int v66 = 3840;
        }
        else {
          int v66 = v65 >> 4;
        }
        if (v65 >= 0x1000) {
          int v67 = v66;
        }
        else {
          int v67 = 256;
        }
        unsigned int v68 = v14[2];
        int v69 = v68 >> 4;
        unsigned int v70 = v14[3];
        if (v68 >> 4 >= 0xF00) {
          int v69 = 3840;
        }
        if (v68 < 0x1000) {
          int v69 = 256;
        }
        if (v70 >> 4 >= 0xF00) {
          int v71 = 3840;
        }
        else {
          int v71 = v70 >> 4;
        }
        if (v70 >= 0x1000) {
          int v72 = v71;
        }
        else {
          int v72 = 256;
        }
        int v61 = v14 + 4;
        _WORD *v21 = (32
              * (((613566757 * (unint64_t)((-261888 - v69 + (v69 << 10)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-261888 - v64 + (v64 << 10)) >> 9)) >> 32))
              + 32) & 0xFFC0;
        v21[1] = (32
                * (((613566757 * (unint64_t)((-261888 - v72 + (v72 << 10)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-261888 - v67 + (v67 << 10)) >> 9)) >> 32))
                + 32) & 0xFFC0;
        unint64_t v62 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v73 = 0;
        do
        {
          int v74 = &v62[v73];
          unsigned int v75 = *v61;
          int v76 = v75 >> 4;
          unsigned int v77 = v61[1];
          if (v75 >> 4 >= 0xF00) {
            int v76 = 3840;
          }
          if (v75 >= 0x1000) {
            int v78 = v76;
          }
          else {
            int v78 = 256;
          }
          if (v77 >> 4 >= 0xF00) {
            int v79 = 3840;
          }
          else {
            int v79 = v77 >> 4;
          }
          if (v77 < 0x1000) {
            int v79 = 256;
          }
          unsigned int v80 = v61[2];
          int v81 = v80 >> 4;
          unsigned int v82 = v61[3];
          if (v80 >> 4 >= 0xF00) {
            int v81 = 3840;
          }
          if (v80 >= 0x1000) {
            int v83 = v81;
          }
          else {
            int v83 = 256;
          }
          if (v82 >> 4 >= 0xF00) {
            int v84 = 3840;
          }
          else {
            int v84 = v82 >> 4;
          }
          if (v82 < 0x1000) {
            int v84 = 256;
          }
          *int v74 = (32
                * (((613566757 * (unint64_t)((-261888 - v83 + (v83 << 10)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-261888 - v78 + (v78 << 10)) >> 9)) >> 32))
                + 32) & 0xFFC0;
          v74[1] = (32
                  * (((613566757 * (unint64_t)((-261888 - v84 + (v84 << 10)) >> 9)) >> 32)
                   + ((613566757 * (unint64_t)((-261888 - v79 + (v79 << 10)) >> 9)) >> 32))
                  + 32) & 0xFFC0;
          v73 += 2;
          v61 += 4;
        }
        while (v73 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v60;
    }
    while (v60 != v59);
  }
  if (v59 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v85 = *v14;
      int v86 = v85 >> 4;
      unsigned int v87 = v14[1];
      unsigned int v88 = v87 >> 4;
      if (v85 >> 4 >= 0xF00) {
        int v86 = 3840;
      }
      if (v85 < 0x1000) {
        int v86 = 256;
      }
      if (v88 >= 0xF00) {
        unsigned int v88 = 3840;
      }
      if (v87 >= 0x1000) {
        int v89 = v88;
      }
      else {
        int v89 = 256;
      }
      unsigned int v90 = v14[2];
      int v91 = v90 >> 4;
      unsigned int v92 = v14[3];
      if (v90 >> 4 >= 0xF00) {
        int v91 = 3840;
      }
      if (v90 >= 0x1000) {
        int v93 = v91;
      }
      else {
        int v93 = 256;
      }
      if (v92 >> 4 >= 0xF00) {
        int v94 = 3840;
      }
      else {
        int v94 = v92 >> 4;
      }
      if (v92 >= 0x1000) {
        int v95 = v94;
      }
      else {
        int v95 = 256;
      }
      v14 += 4;
      _WORD *v21 = (32
            * (((613566757 * (unint64_t)((-261888 - v93 + (v93 << 10)) >> 9)) >> 32)
             + ((613566757 * (unint64_t)((-261888 - v86 + (v86 << 10)) >> 9)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((613566757 * (unint64_t)((-261888 - v95 + (v95 << 10)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-261888 - v89 + (v89 << 10)) >> 9)) >> 32))
              + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v96 = 0;
      do
      {
        unsigned int v97 = &v21[v96];
        unsigned int v98 = *v14;
        int v99 = v98 >> 4;
        unsigned int v100 = v14[1];
        if (v98 >> 4 >= 0xF00) {
          int v99 = 3840;
        }
        if (v98 >= 0x1000) {
          int v101 = v99;
        }
        else {
          int v101 = 256;
        }
        if (v100 >> 4 >= 0xF00) {
          int v102 = 3840;
        }
        else {
          int v102 = v100 >> 4;
        }
        if (v100 < 0x1000) {
          int v102 = 256;
        }
        unsigned int v103 = v14[2];
        int v104 = v103 >> 4;
        unsigned int v105 = v14[3];
        if (v103 >> 4 >= 0xF00) {
          int v104 = 3840;
        }
        if (v103 >= 0x1000) {
          int v106 = v104;
        }
        else {
          int v106 = 256;
        }
        if (v105 >> 4 >= 0xF00) {
          int v107 = 3840;
        }
        else {
          int v107 = v105 >> 4;
        }
        if (v105 < 0x1000) {
          int v107 = 256;
        }
        _WORD *v97 = (32
              * (((613566757 * (unint64_t)((-261888 - v106 + (v106 << 10)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-261888 - v101 + (v101 << 10)) >> 9)) >> 32))
              + 32) & 0xFFC0;
        v97[1] = (32
                * (((613566757 * (unint64_t)((-261888 - v107 + (v107 << 10)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-261888 - v102 + (v102 << 10)) >> 9)) >> 32))
                + 32) & 0xFFC0;
        v96 += 2;
        v14 += 4;
      }
      while (v96 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i) >> 4;
          if (v30 >= 0xEB0) {
            unsigned int v30 = 3760;
          }
          if (v30 <= 0x100) {
            unsigned int v30 = 256;
          }
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)((-261888 - v30 + (v30 << 10)) / 0xDB0) << 6;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      int v38 = v37 >> 4;
      unsigned int v39 = v14[1];
      unsigned int v40 = v39 >> 4;
      if (v37 >> 4 >= 0xF00) {
        int v38 = 3840;
      }
      if (v37 < 0x1000) {
        int v38 = 256;
      }
      if (v40 >= 0xF00) {
        unsigned int v40 = 3840;
      }
      if (v39 >= 0x1000) {
        int v41 = v40;
      }
      else {
        int v41 = 256;
      }
      uint64_t v35 = v14 + 4;
      _WORD *v21 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v38 + (v38 << 10)) >> 9)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v41 + (v41 << 10)) >> 9)) >> 32) << 6;
      __int16 v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v42 = 0;
      do
      {
        int v43 = &v36[v42];
        unsigned int v44 = *v35;
        int v45 = v44 >> 4;
        unsigned int v46 = v35[1];
        if (v44 >> 4 >= 0xF00) {
          int v45 = 3840;
        }
        if (v44 >= 0x1000) {
          int v47 = v45;
        }
        else {
          int v47 = 256;
        }
        if (v46 >> 4 >= 0xF00) {
          int v48 = 3840;
        }
        else {
          int v48 = v46 >> 4;
        }
        if (v46 < 0x1000) {
          int v48 = 256;
        }
        *int v43 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v47 + (v47 << 10)) >> 9)) >> 32) << 6;
        v43[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v48 + (v48 << 10)) >> 9)) >> 32) << 6;
        v42 += 2;
        v35 += 4;
      }
      while (v42 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v49 = 0;
  }
  else
  {
    uint64_t v50 = 0;
    unint64_t v49 = v9 - v32;
    do
    {
      unsigned int v51 = v14;
      int v52 = v21;
      if (v33)
      {
        unsigned int v53 = *v14;
        int v54 = v53 >> 4;
        unsigned int v55 = v14[1];
        if (v53 >> 4 >= 0xF00) {
          int v54 = 3840;
        }
        if (v53 < 0x1000) {
          int v54 = 256;
        }
        if (v55 >> 4 >= 0xF00) {
          int v56 = 3840;
        }
        else {
          int v56 = v55 >> 4;
        }
        if (v55 >= 0x1000) {
          int v57 = v56;
        }
        else {
          int v57 = 256;
        }
        unsigned int v51 = v14 + 4;
        _WORD *v21 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v54 + (v54 << 10)) >> 9)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v57 + (v57 << 10)) >> 9)) >> 32) << 6;
        int v52 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v58 = 0;
        do
        {
          unint64_t v59 = &v52[v58];
          unsigned int v60 = *v51;
          int v61 = v60 >> 4;
          unsigned int v62 = v51[1];
          if (v60 >> 4 >= 0xF00) {
            int v61 = 3840;
          }
          if (v60 >= 0x1000) {
            int v63 = v61;
          }
          else {
            int v63 = 256;
          }
          if (v62 >> 4 >= 0xF00) {
            int v64 = 3840;
          }
          else {
            int v64 = v62 >> 4;
          }
          if (v62 < 0x1000) {
            int v64 = 256;
          }
          *unint64_t v59 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v63 + (v63 << 10)) >> 9)) >> 32) << 6;
          v59[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v64 + (v64 << 10)) >> 9)) >> 32) << 6;
          v58 += 2;
          v51 += 4;
        }
        while (v58 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v50;
    }
    while (v50 != v49);
  }
  if (v49 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v65 = *v14;
      int v66 = v65 >> 4;
      unsigned int v67 = v14[1];
      unsigned int v68 = v67 >> 4;
      if (v65 >> 4 >= 0xF00) {
        int v66 = 3840;
      }
      if (v65 < 0x1000) {
        int v66 = 256;
      }
      if (v68 >= 0xF00) {
        unsigned int v68 = 3840;
      }
      if (v67 >= 0x1000) {
        int v69 = v68;
      }
      else {
        int v69 = 256;
      }
      v14 += 4;
      _WORD *v21 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v66 + (v66 << 10)) >> 9)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v69 + (v69 << 10)) >> 9)) >> 32) << 6;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v70 = 0;
      do
      {
        int v71 = &v21[v70];
        unsigned int v72 = *v14;
        int v73 = v72 >> 4;
        unsigned int v74 = v14[1];
        if (v72 >> 4 >= 0xF00) {
          int v73 = 3840;
        }
        if (v72 >= 0x1000) {
          int v75 = v73;
        }
        else {
          int v75 = 256;
        }
        if (v74 >> 4 >= 0xF00) {
          int v76 = 3840;
        }
        else {
          int v76 = v74 >> 4;
        }
        if (v74 < 0x1000) {
          int v76 = 256;
        }
        *int v71 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v75 + (v75 << 10)) >> 9)) >> 32) << 6;
        v71[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v76 + (v76 << 10)) >> 9)) >> 32) << 6;
        v70 += 2;
        v14 += 4;
      }
      while (v70 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * (v10 + v8);
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v40 = (_WORD *)((char *)v16 + v15 + 4);
      unsigned int v41 = *v40;
      unsigned int v42 = v40[1];
      int v38 = v16 + 4;
      int v43 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6)
          + ((unsigned __int16)v16[1] >> 6)
          + ((unsigned __int16)v16[3] >> 6)
          + (v42 >> 6);
      *unint64_t v23 = (16 * ((*(_WORD *)((char *)v16 + v15) >> 6) + (*v16 >> 6) + (v16[2] >> 6) + (v41 >> 6)) + 32) & 0xFFC0;
      v23[1] = (16 * v43 + 32) & 0xFFC0;
      unsigned int v39 = v23 + 2;
    }
    else
    {
      int v38 = v16;
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v44 = 0;
      int v45 = v38 + 2;
      do
      {
        unsigned int v46 = &v39[v44];
        int v47 = (*(unsigned __int16 *)((char *)v45 + v15 - 2) >> 6)
            + ((unsigned __int16)*(v45 - 1) >> 6)
            + ((unsigned __int16)v45[1] >> 6)
            + (*(unsigned __int16 *)((char *)v45 + v15 + 2) >> 6);
        *unsigned int v46 = (16
              * ((*(_WORD *)((char *)v45 + v15 - 4) >> 6)
               + (*(v45 - 2) >> 6)
               + (*v45 >> 6)
               + (*(_WORD *)((char *)v45 + v15) >> 6))
              + 32) & 0xFFC0;
        v46[1] = (16 * v47 + 32) & 0xFFC0;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v37);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v27 - v36;
    do
    {
      uint64_t v50 = v16;
      unsigned int v51 = v23;
      if (v8)
      {
        int v52 = (_WORD *)((char *)v16 + v15 + 4);
        unsigned int v53 = *v52;
        unsigned int v54 = v52[1];
        uint64_t v50 = v16 + 4;
        int v55 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6)
            + ((unsigned __int16)v16[1] >> 6)
            + ((unsigned __int16)v16[3] >> 6)
            + (v54 >> 6);
        *unint64_t v23 = (16 * ((*(_WORD *)((char *)v16 + v15) >> 6) + (*v16 >> 6) + (v16[2] >> 6) + (v53 >> 6)) + 32) & 0xFFC0;
        v23[1] = (16 * v55 + 32) & 0xFFC0;
        unsigned int v51 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v56 = 0;
        int v57 = v50 + 2;
        do
        {
          unint64_t v58 = &v51[v56];
          int v59 = (*(unsigned __int16 *)((char *)v57 + v15 - 2) >> 6)
              + ((unsigned __int16)*(v57 - 1) >> 6)
              + ((unsigned __int16)v57[1] >> 6)
              + (*(unsigned __int16 *)((char *)v57 + v15 + 2) >> 6);
          _WORD *v58 = (16
                * ((*(_WORD *)((char *)v57 + v15 - 4) >> 6)
                 + (*(v57 - 2) >> 6)
                 + (*v57 >> 6)
                 + (*(_WORD *)((char *)v57 + v15) >> 6))
                + 32) & 0xFFC0;
          v58[1] = (16 * v59 + 32) & 0xFFC0;
          v56 += 2;
          v57 += 4;
        }
        while (v56 < v37);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * (v10 + v9);
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      int v38 = v16 + 4;
      __int16 v40 = v16[1] & 0xFFC0;
      *unint64_t v23 = *v16 & 0xFFC0;
      v23[1] = v40;
      unsigned int v39 = v23 + 2;
    }
    else
    {
      int v38 = v16;
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        __int16 v43 = v38[1] & 0xFFC0;
        *unsigned int v42 = *v38 & 0xFFC0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v27 - v36;
    uint64_t v46 = 2 * v15;
    do
    {
      int v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        int v47 = v16 + 4;
        __int16 v49 = v16[1] & 0xFFC0;
        *unint64_t v23 = *v16 & 0xFFC0;
        v23[1] = v49;
        unint64_t v48 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v50 = 0;
        do
        {
          unsigned int v51 = &v48[v50];
          __int16 v52 = v47[1] & 0xFFC0;
          *unsigned int v51 = *v47 & 0xFFC0;
          v51[1] = v52;
          v50 += 2;
          v47 += 4;
        }
        while (v50 < v37);
      }
      uint64_t v16 = (_WORD *)((char *)v16 + v46);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v142 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v142 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v14 - v13;
  unint64_t v26 = v20 - v19;
  if (v25 < v20 - v19) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    uint64_t v30 = *a8;
    if (v13 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v29 + v31;
    uint64_t v33 = *a7 + v30 * v19 + v21;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          unsigned int v35 = *(unsigned __int16 *)(v32 + 2 * i) >> 4;
          if (v35 >= 0xEB0) {
            unsigned int v35 = 3760;
          }
          if (v35 <= 0x100) {
            unsigned int v35 = 256;
          }
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)((-261888 - v35 + (v35 << 10)) / 0xDB0) << 6;
        }
      }
      v32 += v28;
      v33 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v23 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v40 = *v16;
      int v41 = v40 >> 4;
      unsigned int v42 = v16[1];
      unsigned int v43 = v42 >> 4;
      unsigned int v44 = *(unsigned __int16 *)((char *)v16 + v15);
      unsigned int v45 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v40 >> 4 >= 0xF00) {
        int v41 = 3840;
      }
      if (v40 < 0x1000) {
        int v41 = 256;
      }
      if (v43 >= 0xF00) {
        unsigned int v43 = 3840;
      }
      if (v42 < 0x1000) {
        unsigned int v43 = 256;
      }
      if (v44 >> 4 >= 0xF00) {
        int v46 = 3840;
      }
      else {
        int v46 = v44 >> 4;
      }
      if (v44 >= 0x1000) {
        int v47 = v46;
      }
      else {
        int v47 = 256;
      }
      if (v45 >> 4 >= 0xF00) {
        int v48 = 3840;
      }
      else {
        int v48 = v45 >> 4;
      }
      if (v45 >= 0x1000) {
        int v49 = v48;
      }
      else {
        int v49 = 256;
      }
      unsigned int v50 = v16[2];
      int v51 = v50 >> 4;
      unsigned int v52 = v16[3];
      unsigned int v53 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      unsigned int v54 = *v53;
      unsigned int v55 = v53[1];
      if (v50 >> 4 >= 0xF00) {
        int v51 = 3840;
      }
      if (v50 >= 0x1000) {
        int v56 = v51;
      }
      else {
        int v56 = 256;
      }
      if (v52 >> 4 >= 0xF00) {
        int v57 = 3840;
      }
      else {
        int v57 = v52 >> 4;
      }
      if (v52 < 0x1000) {
        int v57 = 256;
      }
      if (v54 >> 4 >= 0xF00) {
        int v58 = 3840;
      }
      else {
        int v58 = v54 >> 4;
      }
      if (v54 < 0x1000) {
        int v58 = 256;
      }
      unsigned int v59 = -261888 - v41 + (v41 << 10);
      if (v55 >> 4 >= 0xF00) {
        int v60 = 3840;
      }
      else {
        int v60 = v55 >> 4;
      }
      if (v55 >= 0x1000) {
        int v61 = v60;
      }
      else {
        int v61 = 256;
      }
      int v38 = v16 + 4;
      *uint64_t v22 = (16
            * (((613566757 * (unint64_t)((-261888 - v47 + (v47 << 10)) >> 9)) >> 32)
             + ((613566757 * (unint64_t)(v59 >> 9)) >> 32)
             + ((613566757 * (unint64_t)((-261888 - v56 + (v56 << 10)) >> 9)) >> 32)
             + ((613566757 * (unint64_t)((-261888 - v58 + (v58 << 10)) >> 9)) >> 32))
            + 32) & 0xFFC0;
      v22[1] = (16
              * (((613566757 * (unint64_t)((-261888 - v49 + (v49 << 10)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-261888 - v43 + (v43 << 10)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-261888 - v57 + (v57 << 10)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-261888 - v61 + (v61 << 10)) >> 9)) >> 32))
              + 32) & 0xFFC0;
      unsigned int v39 = v22 + 2;
    }
    else
    {
      int v38 = v16;
      unsigned int v39 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v62 = 0;
      int v63 = v38 + 2;
      do
      {
        int v64 = &v39[v62];
        unsigned int v65 = *(v63 - 2);
        int v66 = v65 >> 4;
        unsigned int v67 = *(v63 - 1);
        unsigned int v68 = (unsigned __int16 *)((char *)v63 + v15);
        unsigned int v69 = *(unsigned __int16 *)((char *)v63 + v15 - 4);
        unsigned int v70 = *(unsigned __int16 *)((char *)v63 + v15 - 2);
        if (v65 >> 4 >= 0xF00) {
          int v66 = 3840;
        }
        if (v65 >= 0x1000) {
          int v71 = v66;
        }
        else {
          int v71 = 256;
        }
        if (v67 >> 4 >= 0xF00) {
          int v72 = 3840;
        }
        else {
          int v72 = v67 >> 4;
        }
        if (v67 < 0x1000) {
          int v72 = 256;
        }
        if (v69 >> 4 >= 0xF00) {
          int v73 = 3840;
        }
        else {
          int v73 = v69 >> 4;
        }
        if (v69 < 0x1000) {
          int v73 = 256;
        }
        if (v70 >> 4 >= 0xF00) {
          int v74 = 3840;
        }
        else {
          int v74 = v70 >> 4;
        }
        BOOL v75 = v70 >= 0x1000;
        unsigned int v76 = *v63;
        unsigned int v77 = v76 >> 4;
        unsigned int v78 = v63[1];
        if (!v75) {
          int v74 = 256;
        }
        unsigned int v79 = *v68;
        unsigned int v80 = v68[1];
        if (v77 >= 0xF00) {
          unsigned int v77 = 3840;
        }
        if (v76 >= 0x1000) {
          int v81 = v77;
        }
        else {
          int v81 = 256;
        }
        if (v78 >> 4 >= 0xF00) {
          int v82 = 3840;
        }
        else {
          int v82 = v78 >> 4;
        }
        BOOL v75 = v78 >= 0x1000;
        unsigned int v83 = v80 >> 4;
        if (!v75) {
          int v82 = 256;
        }
        if (v79 >> 4 >= 0xF00) {
          int v84 = 3840;
        }
        else {
          int v84 = v79 >> 4;
        }
        if (v79 < 0x1000) {
          int v84 = 256;
        }
        unint64_t v85 = (613566757 * (unint64_t)((-261888 - v71 + (v71 << 10)) >> 9)) >> 32;
        if (v83 >= 0xF00) {
          unsigned int v83 = 3840;
        }
        unint64_t v86 = (613566757 * (unint64_t)((-261888 - v72 + (v72 << 10)) >> 9)) >> 32;
        unint64_t v87 = (613566757 * (unint64_t)((-261888 - v73 + (v73 << 10)) >> 9)) >> 32;
        if (v80 >= 0x1000) {
          int v88 = v83;
        }
        else {
          int v88 = 256;
        }
        *int v64 = (16
              * (v87
               + v85
               + ((613566757 * (unint64_t)((-261888 - v81 + (v81 << 10)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-261888 - v84 + (v84 << 10)) >> 9)) >> 32))
              + 32) & 0xFFC0;
        v64[1] = (16
                * (((613566757 * (unint64_t)((-261888 - v74 + (v74 << 10)) >> 9)) >> 32)
                 + v86
                 + ((613566757 * (unint64_t)((-261888 - v82 + (v82 << 10)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-261888 - v88 + (v88 << 10)) >> 9)) >> 32))
                + 32) & 0xFFC0;
        v62 += 2;
        v63 += 4;
      }
      while (v62 < v37);
    }
    v16 += v15;
    uint64_t v22 = (_WORD *)((char *)v22 + v142);
  }
  if (v26 != v36)
  {
    unint64_t v89 = 0;
    unint64_t v90 = v26 - v36;
    do
    {
      int v91 = v16;
      unsigned int v92 = v22;
      if (v8)
      {
        unsigned int v93 = *v16;
        int v94 = v93 >> 4;
        unsigned int v95 = v16[1];
        unsigned int v96 = *(unsigned __int16 *)((char *)v16 + v15);
        unsigned int v97 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v93 >> 4 >= 0xF00) {
          int v94 = 3840;
        }
        if (v93 >= 0x1000) {
          int v98 = v94;
        }
        else {
          int v98 = 256;
        }
        if (v95 >> 4 >= 0xF00) {
          int v99 = 3840;
        }
        else {
          int v99 = v95 >> 4;
        }
        if (v95 < 0x1000) {
          int v99 = 256;
        }
        if (v96 >> 4 >= 0xF00) {
          int v100 = 3840;
        }
        else {
          int v100 = v96 >> 4;
        }
        if (v96 >= 0x1000) {
          int v101 = v100;
        }
        else {
          int v101 = 256;
        }
        if (v97 >> 4 >= 0xF00) {
          int v102 = 3840;
        }
        else {
          int v102 = v97 >> 4;
        }
        if (v97 >= 0x1000) {
          int v103 = v102;
        }
        else {
          int v103 = 256;
        }
        unsigned int v104 = v16[2];
        int v105 = v104 >> 4;
        unsigned int v106 = v16[3];
        int v107 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        unsigned int v108 = *v107;
        unsigned int v109 = v107[1];
        if (v104 >> 4 >= 0xF00) {
          int v105 = 3840;
        }
        if (v104 >= 0x1000) {
          int v110 = v105;
        }
        else {
          int v110 = 256;
        }
        if (v106 >> 4 >= 0xF00) {
          int v111 = 3840;
        }
        else {
          int v111 = v106 >> 4;
        }
        if (v106 < 0x1000) {
          int v111 = 256;
        }
        if (v108 >> 4 >= 0xF00) {
          int v112 = 3840;
        }
        else {
          int v112 = v108 >> 4;
        }
        if (v108 < 0x1000) {
          int v112 = 256;
        }
        unsigned int v113 = -261888 - v98 + (v98 << 10);
        if (v109 >> 4 >= 0xF00) {
          int v114 = 3840;
        }
        else {
          int v114 = v109 >> 4;
        }
        if (v109 < 0x1000) {
          int v114 = 256;
        }
        int v91 = v16 + 4;
        *uint64_t v22 = (16
              * (((613566757 * (unint64_t)((-261888 - v101 + (v101 << 10)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)(v113 >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-261888 - v110 + (v110 << 10)) >> 9)) >> 32)
               + ((613566757 * (unint64_t)((-261888 - v112 + (v112 << 10)) >> 9)) >> 32))
              + 32) & 0xFFC0;
        v22[1] = (16
                * (((613566757 * (unint64_t)((-261888 - v103 + (v103 << 10)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-261888 - v99 + (v99 << 10)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-261888 - v111 + (v111 << 10)) >> 9)) >> 32)
                 + ((613566757 * (unint64_t)((-261888 - v114 + (v114 << 10)) >> 9)) >> 32))
                + 32) & 0xFFC0;
        unsigned int v92 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v115 = 0;
        int v116 = v91 + 2;
        do
        {
          int v117 = &v92[v115];
          unsigned int v118 = *(v116 - 2);
          int v119 = v118 >> 4;
          unsigned int v120 = *(v116 - 1);
          int v121 = (unsigned __int16 *)((char *)v116 + v15);
          unsigned int v122 = *(unsigned __int16 *)((char *)v116 + v15 - 4);
          unsigned int v123 = *(unsigned __int16 *)((char *)v116 + v15 - 2);
          if (v118 >> 4 >= 0xF00) {
            int v119 = 3840;
          }
          if (v118 >= 0x1000) {
            int v124 = v119;
          }
          else {
            int v124 = 256;
          }
          if (v120 >> 4 >= 0xF00) {
            int v125 = 3840;
          }
          else {
            int v125 = v120 >> 4;
          }
          if (v120 < 0x1000) {
            int v125 = 256;
          }
          if (v122 >> 4 >= 0xF00) {
            int v126 = 3840;
          }
          else {
            int v126 = v122 >> 4;
          }
          if (v122 < 0x1000) {
            int v126 = 256;
          }
          if (v123 >> 4 >= 0xF00) {
            int v127 = 3840;
          }
          else {
            int v127 = v123 >> 4;
          }
          BOOL v75 = v123 >= 0x1000;
          unsigned int v128 = *v116;
          unsigned int v129 = v128 >> 4;
          unsigned int v130 = v116[1];
          if (!v75) {
            int v127 = 256;
          }
          unsigned int v131 = *v121;
          unsigned int v132 = v131 >> 4;
          unsigned int v133 = v121[1];
          if (v129 >= 0xF00) {
            unsigned int v129 = 3840;
          }
          if (v128 >= 0x1000) {
            int v134 = v129;
          }
          else {
            int v134 = 256;
          }
          if (v130 >> 4 >= 0xF00) {
            int v135 = 3840;
          }
          else {
            int v135 = v130 >> 4;
          }
          BOOL v75 = v130 >= 0x1000;
          unsigned int v136 = v133 >> 4;
          if (!v75) {
            int v135 = 256;
          }
          if (v132 >= 0xF00) {
            unsigned int v132 = 3840;
          }
          if (v131 < 0x1000) {
            unsigned int v132 = 256;
          }
          unint64_t v137 = (613566757 * (unint64_t)((-261888 - v124 + (v124 << 10)) >> 9)) >> 32;
          if (v136 >= 0xF00) {
            unsigned int v136 = 3840;
          }
          unint64_t v138 = (613566757 * (unint64_t)((-261888 - v125 + (v125 << 10)) >> 9)) >> 32;
          unint64_t v139 = (613566757 * (unint64_t)((-261888 - v126 + (v126 << 10)) >> 9)) >> 32;
          if (v133 >= 0x1000) {
            int v140 = v136;
          }
          else {
            int v140 = 256;
          }
          *int v117 = (16
                 * (v139
                  + v137
                  + ((613566757 * (unint64_t)((-261888 - v134 + (v134 << 10)) >> 9)) >> 32)
                  + ((613566757 * (unint64_t)((-261888 - v132 + (v132 << 10)) >> 9)) >> 32))
                 + 32) & 0xFFC0;
          v117[1] = (16
                   * (((613566757 * (unint64_t)((-261888 - v127 + (v127 << 10)) >> 9)) >> 32)
                    + v138
                    + ((613566757 * (unint64_t)((-261888 - v135 + (v135 << 10)) >> 9)) >> 32)
                    + ((613566757 * (unint64_t)((-261888 - v140 + (v140 << 10)) >> 9)) >> 32))
                   + 32) & 0xFFC0;
          v115 += 2;
          v116 += 4;
        }
        while (v115 < v37);
      }
      v16 += v15;
      uint64_t v22 = (_WORD *)((char *)v22 + v142);
      v89 += 2;
    }
    while (v89 < v90);
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    uint64_t v31 = *a8;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v30 + v32;
    uint64_t v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 4;
          if (v36 >= 0xEB0) {
            unsigned int v36 = 3760;
          }
          if (v36 <= 0x100) {
            unsigned int v36 = 256;
          }
          *(_WORD *)(v34 + 2 * i) = (unsigned __int16)((-261888 - v36 + (v36 << 10)) / 0xDB0) << 6;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v41 = *v16;
      int v42 = v41 >> 4;
      unsigned int v43 = v16[1];
      unsigned int v44 = v43 >> 4;
      if (v41 >> 4 >= 0xF00) {
        int v42 = 3840;
      }
      if (v41 < 0x1000) {
        int v42 = 256;
      }
      if (v44 >= 0xF00) {
        unsigned int v44 = 3840;
      }
      if (v43 >= 0x1000) {
        int v45 = v44;
      }
      else {
        int v45 = 256;
      }
      unsigned int v39 = v16 + 4;
      *unint64_t v23 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v42 + (v42 << 10)) >> 9)) >> 32) << 6;
      v23[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v45 + (v45 << 10)) >> 9)) >> 32) << 6;
      unsigned int v40 = v23 + 2;
    }
    else
    {
      unsigned int v39 = v16;
      unsigned int v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v46 = 0;
      do
      {
        int v47 = &v40[v46];
        unsigned int v48 = *v39;
        int v49 = v48 >> 4;
        unsigned int v50 = v39[1];
        if (v48 >> 4 >= 0xF00) {
          int v49 = 3840;
        }
        if (v48 >= 0x1000) {
          int v51 = v49;
        }
        else {
          int v51 = 256;
        }
        if (v50 >> 4 >= 0xF00) {
          int v52 = 3840;
        }
        else {
          int v52 = v50 >> 4;
        }
        if (v50 < 0x1000) {
          int v52 = 256;
        }
        _WORD *v47 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v51 + (v51 << 10)) >> 9)) >> 32) << 6;
        v47[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v52 + (v52 << 10)) >> 9)) >> 32) << 6;
        v46 += 2;
        v39 += 4;
      }
      while (v46 < v38);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    unint64_t v53 = 0;
    unint64_t v54 = v27 - v37;
    uint64_t v55 = 2 * v15;
    do
    {
      int v56 = v16;
      int v57 = v23;
      if (v8)
      {
        unsigned int v58 = *v16;
        int v59 = v58 >> 4;
        unsigned int v60 = v16[1];
        if (v58 >> 4 >= 0xF00) {
          int v59 = 3840;
        }
        if (v58 < 0x1000) {
          int v59 = 256;
        }
        if (v60 >> 4 >= 0xF00) {
          int v61 = 3840;
        }
        else {
          int v61 = v60 >> 4;
        }
        if (v60 >= 0x1000) {
          int v62 = v61;
        }
        else {
          int v62 = 256;
        }
        int v56 = v16 + 4;
        *unint64_t v23 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v59 + (v59 << 10)) >> 9)) >> 32) << 6;
        v23[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v62 + (v62 << 10)) >> 9)) >> 32) << 6;
        int v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v63 = 0;
        do
        {
          int v64 = &v57[v63];
          unsigned int v65 = *v56;
          int v66 = v65 >> 4;
          unsigned int v67 = v56[1];
          if (v65 >> 4 >= 0xF00) {
            int v66 = 3840;
          }
          if (v65 >= 0x1000) {
            int v68 = v66;
          }
          else {
            int v68 = 256;
          }
          if (v67 >> 4 >= 0xF00) {
            int v69 = 3840;
          }
          else {
            int v69 = v67 >> 4;
          }
          if (v67 < 0x1000) {
            int v69 = 256;
          }
          *int v64 = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v68 + (v68 << 10)) >> 9)) >> 32) << 6;
          v64[1] = (unsigned __int16)((613566757 * (unint64_t)((-261888 - v69 + (v69 << 10)) >> 9)) >> 32) << 6;
          v63 += 2;
          v56 += 4;
        }
        while (v63 < v38);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v55);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_Copy_t4as_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = a3[1] + v12 * v8 + 4 * v9;
  uint64_t v15 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v14 + 2 * v15);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v14;
    uint64_t v22 = *a7 + *a8 * v14;
    uint64_t v23 = *a4;
    uint64_t v24 = a4[2];
    uint64_t v25 = v21 + v15;
    uint64_t v26 = v22 + v15;
    uint64_t v27 = a3[2] + v24 * v8 + 2 * v9;
    uint64_t v28 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(unsigned char *)(v25 + i) = *(_WORD *)(v27 + 2 * i);
          *(unsigned char *)(v26 + i) = *(unsigned char *)(v28 + 2 * i + 1);
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v30 = v8 & 1;
  if (v11 >= v30) {
    uint64_t v31 = v8 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  unint64_t v32 = v9 & 1;
  if (v10 >= v32) {
    uint64_t v33 = v9 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  unint64_t v34 = v10 - v33;
  if (v8)
  {
    if (v9)
    {
      char v37 = *(unsigned char *)(v13 + 3);
      uint64_t v35 = v13 + 4;
      *uint64_t v17 = *(unsigned char *)(v13 + 1);
      v17[1] = v37;
      unsigned int v36 = v17 + 2;
    }
    else
    {
      uint64_t v35 = v13;
      unsigned int v36 = v17;
    }
    if (v10 == v33)
    {
      unint64_t v38 = 0;
    }
    else
    {
      unint64_t v39 = v10 - v33;
      do
      {
        char v40 = *(unsigned char *)(v35 + 1);
        char v41 = *(unsigned char *)(v35 + 3);
        v35 += 4;
        *unsigned int v36 = v40;
        v36[1] = v41;
        v36 += 2;
        --v39;
      }
      while (v39);
      unint64_t v38 = v10 - v33;
    }
    if (v38 + v32 < v10)
    {
      char v42 = *(unsigned char *)(v35 + 1);
      char v43 = *(unsigned char *)(v35 + 3);
      *unsigned int v36 = v42;
      v36[1] = v43;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v31)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v11 - v31;
    do
    {
      uint64_t v46 = v13;
      int v47 = v17;
      if (v9)
      {
        char v48 = *(unsigned char *)(v13 + 3);
        uint64_t v46 = v13 + 4;
        *uint64_t v17 = *(unsigned char *)(v13 + 1);
        v17[1] = v48;
        int v47 = v17 + 2;
      }
      if (v10 == v33)
      {
        unint64_t v49 = 0;
      }
      else
      {
        unint64_t v50 = v10 - v33;
        do
        {
          char v51 = *(unsigned char *)(v46 + 1);
          char v52 = *(unsigned char *)(v46 + 3);
          v46 += 4;
          unsigned char *v47 = v51;
          v47[1] = v52;
          v47 += 2;
          --v50;
        }
        while (v50);
        unint64_t v49 = v10 - v33;
      }
      if (v49 + v32 < v10)
      {
        char v53 = *(unsigned char *)(v46 + 1);
        char v54 = *(unsigned char *)(v46 + 3);
        unsigned char *v47 = v53;
        v47[1] = v54;
      }
      v13 += v12;
      v17 += v16;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v30 < v11)
  {
    if (v9)
    {
      char v55 = *(unsigned char *)(v13 + 1);
      char v56 = *(unsigned char *)(v13 + 3);
      v13 += 4;
      *uint64_t v17 = v55;
      v17[1] = v56;
      v17 += 2;
    }
    if (v10 == v33)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v57 = v10 - v33;
      do
      {
        char v58 = *(unsigned char *)(v13 + 1);
        char v59 = *(unsigned char *)(v13 + 3);
        v13 += 4;
        *uint64_t v17 = v58;
        v17[1] = v59;
        v17 += 2;
        --v57;
      }
      while (v57);
    }
    if (v34 + v32 < v10)
    {
      char v60 = *(unsigned char *)(v13 + 1);
      char v61 = *(unsigned char *)(v13 + 3);
      *uint64_t v17 = v60;
      v17[1] = v61;
    }
  }
  return 0;
}

uint64_t vt_Copy_tv44_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = a3[1] + v12 * v8 + 4 * v9;
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v15 + 2 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v15 + v14;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(unsigned char *)(v21 + i) = *(unsigned char *)(v22 + 2 * i + 1);
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v24 = v8 & 1;
  if (v11 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v26)
    {
      char v32 = *(unsigned char *)(v13 + 3);
      uint64_t v30 = v13 + 4;
      *uint64_t v17 = *(unsigned char *)(v13 + 1);
      v17[1] = v32;
      uint64_t v31 = v17 + 2;
    }
    else
    {
      uint64_t v30 = v13;
      uint64_t v31 = v17;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        char v35 = *(unsigned char *)(v30 + 1);
        char v36 = *(unsigned char *)(v30 + 3);
        v30 += 4;
        *uint64_t v31 = v35;
        v31[1] = v36;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      char v37 = *(unsigned char *)(v30 + 1);
      char v38 = *(unsigned char *)(v30 + 3);
      *uint64_t v31 = v37;
      v31[1] = v38;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v11 - v25;
    do
    {
      uint64_t v41 = v13;
      char v42 = v17;
      if (v26)
      {
        char v43 = *(unsigned char *)(v13 + 3);
        uint64_t v41 = v13 + 4;
        *uint64_t v17 = *(unsigned char *)(v13 + 1);
        v17[1] = v43;
        char v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          char v46 = *(unsigned char *)(v41 + 1);
          char v47 = *(unsigned char *)(v41 + 3);
          v41 += 4;
          *char v42 = v46;
          v42[1] = v47;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        char v48 = *(unsigned char *)(v41 + 1);
        char v49 = *(unsigned char *)(v41 + 3);
        *char v42 = v48;
        v42[1] = v49;
      }
      v13 += v12;
      v17 += v16;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if (v26)
    {
      char v50 = *(unsigned char *)(v13 + 1);
      char v51 = *(unsigned char *)(v13 + 3);
      v13 += 4;
      *uint64_t v17 = v50;
      v17[1] = v51;
      v17 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        char v53 = *(unsigned char *)(v13 + 1);
        char v54 = *(unsigned char *)(v13 + 3);
        v13 += 4;
        *uint64_t v17 = v53;
        v17[1] = v54;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      char v55 = *(unsigned char *)(v13 + 1);
      char v56 = *(unsigned char *)(v13 + 3);
      *uint64_t v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_tv44_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v15 = a6[3];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v14 + 2 * v13);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] < v15) {
    unint64_t v15 = a2[3];
  }
  if (v15)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a3 + *a4 * v8 + 2 * v9;
    uint64_t v22 = *a7 + *a8 * v14 + v13;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v24 = *(unsigned __int16 *)(v21 + 2 * i) >> 4;
          if (v24 >= 0xEB0) {
            unsigned int v24 = 3760;
          }
          if (v24 <= 0x100) {
            unsigned int v24 = 256;
          }
          *(unsigned char *)(v22 + i) = (255 * v24 - 65280) / 0xDB0;
        }
      }
      v21 += v19;
      v22 += v20;
      ++v18;
    }
    while (v18 != v15);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v25 = v8 & 1;
  if (v15 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    uint64_t v29 = v9 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v9)
    {
      unsigned int v33 = *v12;
      int v34 = v33 >> 4;
      unsigned int v35 = v12[1];
      if (v33 >> 4 >= 0xF00) {
        int v34 = 3840;
      }
      if (v33 >= 0x1000) {
        int v36 = v34;
      }
      else {
        int v36 = 256;
      }
      if (v35 >> 4 >= 0xF00) {
        int v37 = 3840;
      }
      else {
        int v37 = v35 >> 4;
      }
      if (v35 >= 0x1000) {
        int v38 = v37;
      }
      else {
        int v38 = 256;
      }
      uint64_t v31 = v12 + 2;
      *uint64_t v17 = (613566757 * (unint64_t)((255 * v36 - 65280) >> 9)) >> 32;
      v17[1] = (613566757 * (unint64_t)((255 * v38 - 65280) >> 9)) >> 32;
      char v32 = v17 + 2;
    }
    else
    {
      uint64_t v31 = v12;
      char v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v39 = 0;
    }
    else
    {
      unint64_t v40 = v10 - v29;
      do
      {
        unsigned int v41 = *v31;
        int v42 = v41 >> 4;
        unsigned int v43 = v31[1];
        if (v41 >> 4 >= 0xF00) {
          int v42 = 3840;
        }
        if (v41 >= 0x1000) {
          int v44 = v42;
        }
        else {
          int v44 = 256;
        }
        if (v43 >> 4 >= 0xF00) {
          int v45 = 3840;
        }
        else {
          int v45 = v43 >> 4;
        }
        if (v43 < 0x1000) {
          int v45 = 256;
        }
        v31 += 2;
        *char v32 = (613566757 * (unint64_t)((255 * v44 - 65280) >> 9)) >> 32;
        v32[1] = (613566757 * (unint64_t)((255 * v45 - 65280) >> 9)) >> 32;
        v32 += 2;
        --v40;
      }
      while (v40);
      unint64_t v39 = v10 - v29;
    }
    if (v39 + v28 < v10)
    {
      unsigned int v46 = *v31;
      int v47 = v46 >> 4;
      unsigned int v48 = v31[1];
      unsigned int v49 = v48 >> 4;
      if (v46 >> 4 >= 0xF00) {
        int v47 = 3840;
      }
      if (v46 < 0x1000) {
        int v47 = 256;
      }
      if (v49 >= 0xF00) {
        unsigned int v49 = 3840;
      }
      if (v48 >= 0x1000) {
        int v50 = v49;
      }
      else {
        int v50 = 256;
      }
      *char v32 = (613566757 * (unint64_t)((255 * v47 - 65280) >> 9)) >> 32;
      v32[1] = (613566757 * (unint64_t)((255 * v50 - 65280) >> 9)) >> 32;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v17 += v16;
  }
  if (v15 == v26)
  {
    unint64_t v51 = 0;
  }
  else
  {
    uint64_t v52 = 0;
    unint64_t v51 = v15 - v26;
    do
    {
      char v53 = v12;
      char v54 = v17;
      if (v27)
      {
        unsigned int v55 = *v12;
        int v56 = v55 >> 4;
        unsigned int v57 = v12[1];
        if (v55 >> 4 >= 0xF00) {
          int v56 = 3840;
        }
        if (v55 >= 0x1000) {
          int v58 = v56;
        }
        else {
          int v58 = 256;
        }
        if (v57 >> 4 >= 0xF00) {
          int v59 = 3840;
        }
        else {
          int v59 = v57 >> 4;
        }
        if (v57 >= 0x1000) {
          int v60 = v59;
        }
        else {
          int v60 = 256;
        }
        char v53 = v12 + 2;
        *uint64_t v17 = (613566757 * (unint64_t)((255 * v58 - 65280) >> 9)) >> 32;
        v17[1] = (613566757 * (unint64_t)((255 * v60 - 65280) >> 9)) >> 32;
        char v54 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v61 = 0;
      }
      else
      {
        unint64_t v62 = v10 - v29;
        do
        {
          unsigned int v63 = *v53;
          int v64 = v63 >> 4;
          unsigned int v65 = v53[1];
          if (v63 >> 4 >= 0xF00) {
            int v64 = 3840;
          }
          if (v63 >= 0x1000) {
            int v66 = v64;
          }
          else {
            int v66 = 256;
          }
          if (v65 >> 4 >= 0xF00) {
            int v67 = 3840;
          }
          else {
            int v67 = v65 >> 4;
          }
          if (v65 < 0x1000) {
            int v67 = 256;
          }
          v53 += 2;
          *char v54 = (613566757 * (unint64_t)((255 * v66 - 65280) >> 9)) >> 32;
          v54[1] = (613566757 * (unint64_t)((255 * v67 - 65280) >> 9)) >> 32;
          v54 += 2;
          --v62;
        }
        while (v62);
        unint64_t v61 = v10 - v29;
      }
      if (v61 + v28 < v10)
      {
        unsigned int v68 = *v53;
        int v69 = v68 >> 4;
        unsigned int v70 = v53[1];
        if (v68 >> 4 >= 0xF00) {
          int v69 = 3840;
        }
        if (v68 >= 0x1000) {
          int v71 = v69;
        }
        else {
          int v71 = 256;
        }
        if (v70 >> 4 >= 0xF00) {
          int v72 = 3840;
        }
        else {
          int v72 = v70 >> 4;
        }
        if (v70 >= 0x1000) {
          int v73 = v72;
        }
        else {
          int v73 = 256;
        }
        *char v54 = (613566757 * (unint64_t)((255 * v71 - 65280) >> 9)) >> 32;
        v54[1] = (613566757 * (unint64_t)((255 * v73 - 65280) >> 9)) >> 32;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v17 += v16;
      ++v52;
    }
    while (v52 != v51);
  }
  if (v51 + v25 < v15)
  {
    if (v27)
    {
      unsigned int v74 = *v12;
      int v75 = v74 >> 4;
      unsigned int v76 = v12[1];
      unsigned int v77 = v76 >> 4;
      if (v74 >> 4 >= 0xF00) {
        int v75 = 3840;
      }
      if (v74 < 0x1000) {
        int v75 = 256;
      }
      if (v77 >= 0xF00) {
        unsigned int v77 = 3840;
      }
      if (v76 >= 0x1000) {
        int v78 = v77;
      }
      else {
        int v78 = 256;
      }
      v12 += 2;
      *uint64_t v17 = (613566757 * (unint64_t)((255 * v75 - 65280) >> 9)) >> 32;
      v17[1] = (613566757 * (unint64_t)((255 * v78 - 65280) >> 9)) >> 32;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v79 = v10 - v29;
      do
      {
        unsigned int v80 = *v12;
        int v81 = v80 >> 4;
        unsigned int v82 = v12[1];
        if (v80 >> 4 >= 0xF00) {
          int v81 = 3840;
        }
        if (v80 >= 0x1000) {
          int v83 = v81;
        }
        else {
          int v83 = 256;
        }
        if (v82 >> 4 >= 0xF00) {
          int v84 = 3840;
        }
        else {
          int v84 = v82 >> 4;
        }
        if (v82 < 0x1000) {
          int v84 = 256;
        }
        v12 += 2;
        *uint64_t v17 = (613566757 * (unint64_t)((255 * v83 - 65280) >> 9)) >> 32;
        v17[1] = (613566757 * (unint64_t)((255 * v84 - 65280) >> 9)) >> 32;
        v17 += 2;
        --v79;
      }
      while (v79);
    }
    if (v30 + v28 < v10)
    {
      unsigned int v85 = *v12;
      int v86 = v85 >> 4;
      unsigned int v87 = v12[1];
      unsigned int v88 = v87 >> 4;
      if (v85 >> 4 >= 0xF00) {
        int v86 = 3840;
      }
      if (v85 < 0x1000) {
        int v86 = 256;
      }
      if (v88 >= 0xF00) {
        unsigned int v88 = 3840;
      }
      if (v87 >= 0x1000) {
        int v89 = v88;
      }
      else {
        int v89 = 256;
      }
      *uint64_t v17 = (613566757 * (unint64_t)((255 * v86 - 65280) >> 9)) >> 32;
      v17[1] = (613566757 * (unint64_t)((255 * v89 - 65280) >> 9)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_t4as_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v19 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v16;
    uint64_t v24 = *a7 + *a8 * v16;
    uint64_t v25 = *a4;
    uint64_t v26 = a4[2];
    uint64_t v27 = v23 + v15;
    uint64_t v28 = v24 + v15;
    uint64_t v29 = a3[2] + v26 * v12 + 2 * v11;
    uint64_t v30 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v27 + i) = *(_WORD *)(v29 + 2 * i);
          *(unsigned char *)(v28 + i) = *(unsigned char *)(v30 + 2 * i + 1);
        }
      }
      v30 += v25;
      v28 += v21;
      v29 += v26;
      v27 += v22;
      ++v20;
    }
    while (v20 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v19 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v19 - v10;
  if (v12)
  {
    if (v34)
    {
      int v36 = v14 + 8;
      unsigned int v38 = (v14[3] + v14[7] + 1) >> 1;
      *uint64_t v18 = (v14[1] + v14[5] + 1) >> 1;
      v18[1] = v38;
      int v37 = v18 + 2;
    }
    else
    {
      int v36 = v14;
      int v37 = v18;
    }
    if (v19 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unsigned int v41 = (v36[3] + v36[7] + 1) >> 1;
        *unint64_t v40 = (v36[1] + v36[5] + 1) >> 1;
        v40[1] = v41;
        v39 += 2;
        v36 += 8;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v18 += v17;
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      int v44 = v14;
      int v45 = v18;
      if (v34)
      {
        int v44 = v14 + 8;
        unsigned int v46 = (v14[3] + v14[7] + 1) >> 1;
        *uint64_t v18 = (v14[1] + v14[5] + 1) >> 1;
        v18[1] = v46;
        int v45 = v18 + 2;
      }
      if (v19 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          unsigned int v48 = &v45[v47];
          unsigned int v49 = (v44[3] + v44[7] + 1) >> 1;
          *unsigned int v48 = (v44[1] + v44[5] + 1) >> 1;
          v48[1] = v49;
          v47 += 2;
          v44 += 8;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v18 += v17;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = v14[1];
      int v51 = v14[3];
      int v52 = v14[5];
      int v53 = v14[7];
      v14 += 8;
      *uint64_t v18 = (v50 + v52 + 1) >> 1;
      v18[1] = (v51 + v53 + 1) >> 1;
      v18 += 2;
    }
    if (v19 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        unsigned int v55 = &v18[v54];
        unsigned int v56 = (v14[3] + v14[7] + 1) >> 1;
        *unsigned int v55 = (v14[1] + v14[5] + 1) >> 1;
        v55[1] = v56;
        v54 += 2;
        v14 += 8;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_t4as_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = a3[1] + v13 * v12 + 4 * (v10 + v9);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v19 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v16;
    uint64_t v24 = *a7 + *a8 * v16;
    uint64_t v25 = *a4;
    uint64_t v26 = a4[2];
    uint64_t v27 = v23 + v15;
    uint64_t v28 = v24 + v15;
    uint64_t v29 = a3[2] + v26 * v12 + 2 * v11;
    uint64_t v30 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v27 + i) = *(_WORD *)(v29 + 2 * i);
          *(unsigned char *)(v28 + i) = *(unsigned char *)(v30 + 2 * i + 1);
        }
      }
      v30 += v25;
      v28 += v21;
      v29 += v26;
      v27 += v22;
      ++v20;
    }
    while (v20 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v19 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v19 - v10;
  if (v12)
  {
    if (v34)
    {
      char v38 = *(unsigned char *)(v14 + 3);
      uint64_t v36 = v14 + 8;
      *uint64_t v18 = *(unsigned char *)(v14 + 1);
      v18[1] = v38;
      int v37 = v18 + 2;
    }
    else
    {
      uint64_t v36 = v14;
      int v37 = v18;
    }
    if (v19 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        char v41 = *(unsigned char *)(v36 + 3);
        *unint64_t v40 = *(unsigned char *)(v36 + 1);
        v40[1] = v41;
        v39 += 2;
        v36 += 8;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v18 += v17;
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      uint64_t v44 = v14;
      int v45 = v18;
      if (v34)
      {
        char v46 = *(unsigned char *)(v14 + 3);
        uint64_t v44 = v14 + 8;
        *uint64_t v18 = *(unsigned char *)(v14 + 1);
        v18[1] = v46;
        int v45 = v18 + 2;
      }
      if (v19 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          unsigned int v48 = &v45[v47];
          char v49 = *(unsigned char *)(v44 + 3);
          *unsigned int v48 = *(unsigned char *)(v44 + 1);
          v48[1] = v49;
          v47 += 2;
          v44 += 8;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v18 += v17;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      char v50 = *(unsigned char *)(v14 + 1);
      char v51 = *(unsigned char *)(v14 + 3);
      v14 += 8;
      *uint64_t v18 = v50;
      v18[1] = v51;
      v18 += 2;
    }
    if (v19 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v18[v52];
        char v54 = *(unsigned char *)(v14 + 3);
        *int v53 = *(unsigned char *)(v14 + 1);
        v53[1] = v54;
        v52 += 2;
        v14 += 8;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = *(unsigned char *)(v27 + 2 * i + 1);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      uint64_t v33 = v14 + 8;
      unsigned int v35 = (v14[3] + v14[7] + 1) >> 1;
      *uint64_t v20 = (v14[1] + v14[5] + 1) >> 1;
      v20[1] = v35;
      char v34 = v20 + 2;
    }
    else
    {
      uint64_t v33 = v14;
      char v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        int v37 = &v34[v36];
        unsigned int v38 = (v33[3] + v33[7] + 1) >> 1;
        *int v37 = (v33[1] + v33[5] + 1) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 8;
      }
      while (v36 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v30;
    do
    {
      char v41 = v14;
      unint64_t v42 = v20;
      if (v31)
      {
        char v41 = v14 + 8;
        unsigned int v43 = (v14[3] + v14[7] + 1) >> 1;
        *uint64_t v20 = (v14[1] + v14[5] + 1) >> 1;
        v20[1] = v43;
        unint64_t v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          int v45 = &v42[v44];
          unsigned int v46 = (v41[3] + v41[7] + 1) >> 1;
          *int v45 = (v41[1] + v41[5] + 1) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 8;
        }
        while (v44 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if (v31)
    {
      int v47 = v14[1];
      int v48 = v14[3];
      int v49 = v14[5];
      int v50 = v14[7];
      v14 += 8;
      *uint64_t v20 = (v47 + v49 + 1) >> 1;
      v20[1] = (v48 + v50 + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v51 = 0;
      do
      {
        unint64_t v52 = &v20[v51];
        unsigned int v53 = (v14[3] + v14[7] + 1) >> 1;
        *unint64_t v52 = (v14[1] + v14[5] + 1) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 8;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = a3[1] + v13 * v12 + 4 * (v10 + v9);
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = *(unsigned char *)(v27 + 2 * i + 1);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      char v35 = *(unsigned char *)(v14 + 3);
      uint64_t v33 = v14 + 8;
      *uint64_t v20 = *(unsigned char *)(v14 + 1);
      v20[1] = v35;
      char v34 = v20 + 2;
    }
    else
    {
      uint64_t v33 = v14;
      char v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        int v37 = &v34[v36];
        char v38 = *(unsigned char *)(v33 + 3);
        *int v37 = *(unsigned char *)(v33 + 1);
        v37[1] = v38;
        v36 += 2;
        v33 += 8;
      }
      while (v36 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v30;
    do
    {
      uint64_t v41 = v14;
      unint64_t v42 = v20;
      if (v31)
      {
        char v43 = *(unsigned char *)(v14 + 3);
        uint64_t v41 = v14 + 8;
        *uint64_t v20 = *(unsigned char *)(v14 + 1);
        v20[1] = v43;
        unint64_t v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          int v45 = &v42[v44];
          char v46 = *(unsigned char *)(v41 + 3);
          *int v45 = *(unsigned char *)(v41 + 1);
          v45[1] = v46;
          v44 += 2;
          v41 += 8;
        }
        while (v44 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if (v31)
    {
      char v47 = *(unsigned char *)(v14 + 1);
      char v48 = *(unsigned char *)(v14 + 3);
      v14 += 8;
      *uint64_t v20 = v47;
      v20[1] = v48;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v49 = 0;
      do
      {
        int v50 = &v20[v49];
        char v51 = *(unsigned char *)(v14 + 3);
        unsigned char *v50 = *(unsigned char *)(v14 + 1);
        v50[1] = v51;
        v49 += 2;
        v14 += 8;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v12 + 2 * v11;
    uint64_t v27 = *a7 + *a8 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v29 = *(unsigned __int16 *)(v26 + 2 * i) >> 4;
          if (v29 >= 0xEB0) {
            unsigned int v29 = 3760;
          }
          if (v29 <= 0x100) {
            unsigned int v29 = 256;
          }
          *(unsigned char *)(v27 + i) = (255 * v29 - 65280) / 0xDB0;
        }
      }
      v26 += v24;
      v27 += v25;
      ++v23;
    }
    while (v23 != v9);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v8 & 1;
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v21 - v10;
  if (v12)
  {
    if (v32)
    {
      unsigned int v36 = *v14;
      int v37 = v36 >> 4;
      unsigned int v38 = v14[1];
      unsigned int v39 = v38 >> 4;
      if (v36 >> 4 >= 0xF00) {
        int v37 = 3840;
      }
      if (v36 < 0x1000) {
        int v37 = 256;
      }
      if (v39 >= 0xF00) {
        unsigned int v39 = 3840;
      }
      if (v38 >= 0x1000) {
        int v40 = v39;
      }
      else {
        int v40 = 256;
      }
      unsigned int v41 = v14[2];
      int v42 = v41 >> 4;
      unsigned int v43 = v14[3];
      if (v41 >> 4 >= 0xF00) {
        int v42 = 3840;
      }
      if (v41 >= 0x1000) {
        int v44 = v42;
      }
      else {
        int v44 = 256;
      }
      if (v43 >> 4 >= 0xF00) {
        int v45 = 3840;
      }
      else {
        int v45 = v43 >> 4;
      }
      if (v43 < 0x1000) {
        int v45 = 256;
      }
      char v34 = v14 + 4;
      *uint64_t v20 = (((613566757 * (unint64_t)((255 * v37 - 65280) >> 9)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v44 - 65280) >> 9)) >> 32)
                          + 1) >> 1;
      v20[1] = (((613566757 * (unint64_t)((255 * v40 - 65280) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v45 - 65280) >> 9)) >> 32)
                            + 1) >> 1;
      char v35 = v20 + 2;
    }
    else
    {
      char v34 = v14;
      char v35 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v46 = 0;
      do
      {
        char v47 = &v35[v46];
        unsigned int v48 = *v34;
        int v49 = v48 >> 4;
        unsigned int v50 = v34[1];
        if (v48 >> 4 >= 0xF00) {
          int v49 = 3840;
        }
        if (v48 >= 0x1000) {
          int v51 = v49;
        }
        else {
          int v51 = 256;
        }
        if (v50 >> 4 >= 0xF00) {
          int v52 = 3840;
        }
        else {
          int v52 = v50 >> 4;
        }
        if (v50 < 0x1000) {
          int v52 = 256;
        }
        unsigned int v53 = v34[2];
        int v54 = v53 >> 4;
        unsigned int v55 = v34[3];
        if (v53 >> 4 >= 0xF00) {
          int v54 = 3840;
        }
        if (v53 >= 0x1000) {
          int v56 = v54;
        }
        else {
          int v56 = 256;
        }
        if (v55 >> 4 >= 0xF00) {
          int v57 = 3840;
        }
        else {
          int v57 = v55 >> 4;
        }
        if (v55 < 0x1000) {
          int v57 = 256;
        }
        unsigned char *v47 = (((613566757 * (unint64_t)((255 * v51 - 65280) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v56 - 65280) >> 9)) >> 32)
                            + 1) >> 1;
        v47[1] = (((613566757 * (unint64_t)((255 * v52 - 65280) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v57 - 65280) >> 9)) >> 32)
                              + 1) >> 1;
        v46 += 2;
        v34 += 4;
      }
      while (v46 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v31)
  {
    unint64_t v58 = 0;
  }
  else
  {
    uint64_t v59 = 0;
    unint64_t v58 = v9 - v31;
    do
    {
      int v60 = v14;
      unint64_t v61 = v20;
      if (v32)
      {
        unsigned int v62 = *v14;
        int v63 = v62 >> 4;
        unsigned int v64 = v14[1];
        if (v62 >> 4 >= 0xF00) {
          int v63 = 3840;
        }
        if (v62 < 0x1000) {
          int v63 = 256;
        }
        if (v64 >> 4 >= 0xF00) {
          int v65 = 3840;
        }
        else {
          int v65 = v64 >> 4;
        }
        if (v64 >= 0x1000) {
          int v66 = v65;
        }
        else {
          int v66 = 256;
        }
        unsigned int v67 = v14[2];
        int v68 = v67 >> 4;
        unsigned int v69 = v14[3];
        if (v67 >> 4 >= 0xF00) {
          int v68 = 3840;
        }
        if (v67 < 0x1000) {
          int v68 = 256;
        }
        if (v69 >> 4 >= 0xF00) {
          int v70 = 3840;
        }
        else {
          int v70 = v69 >> 4;
        }
        if (v69 >= 0x1000) {
          int v71 = v70;
        }
        else {
          int v71 = 256;
        }
        int v60 = v14 + 4;
        *uint64_t v20 = (((613566757 * (unint64_t)((255 * v63 - 65280) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v68 - 65280) >> 9)) >> 32)
                            + 1) >> 1;
        v20[1] = (((613566757 * (unint64_t)((255 * v66 - 65280) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v71 - 65280) >> 9)) >> 32)
                              + 1) >> 1;
        unint64_t v61 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v72 = 0;
        do
        {
          int v73 = &v61[v72];
          unsigned int v74 = *v60;
          int v75 = v74 >> 4;
          unsigned int v76 = v60[1];
          if (v74 >> 4 >= 0xF00) {
            int v75 = 3840;
          }
          if (v74 >= 0x1000) {
            int v77 = v75;
          }
          else {
            int v77 = 256;
          }
          if (v76 >> 4 >= 0xF00) {
            int v78 = 3840;
          }
          else {
            int v78 = v76 >> 4;
          }
          if (v76 < 0x1000) {
            int v78 = 256;
          }
          unsigned int v79 = v60[2];
          int v80 = v79 >> 4;
          unsigned int v81 = v60[3];
          if (v79 >> 4 >= 0xF00) {
            int v80 = 3840;
          }
          if (v79 >= 0x1000) {
            int v82 = v80;
          }
          else {
            int v82 = 256;
          }
          if (v81 >> 4 >= 0xF00) {
            int v83 = 3840;
          }
          else {
            int v83 = v81 >> 4;
          }
          if (v81 < 0x1000) {
            int v83 = 256;
          }
          *int v73 = (((613566757 * (unint64_t)((255 * v77 - 65280) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v82 - 65280) >> 9)) >> 32)
                              + 1) >> 1;
          v73[1] = (((613566757 * (unint64_t)((255 * v78 - 65280) >> 9)) >> 32)
                                + ((613566757 * (unint64_t)((255 * v83 - 65280) >> 9)) >> 32)
                                + 1) >> 1;
          v72 += 2;
          v60 += 4;
        }
        while (v72 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v59;
    }
    while (v59 != v58);
  }
  if (v58 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v84 = *v14;
      int v85 = v84 >> 4;
      unsigned int v86 = v14[1];
      unsigned int v87 = v86 >> 4;
      if (v84 >> 4 >= 0xF00) {
        int v85 = 3840;
      }
      if (v84 < 0x1000) {
        int v85 = 256;
      }
      if (v87 >= 0xF00) {
        unsigned int v87 = 3840;
      }
      if (v86 >= 0x1000) {
        int v88 = v87;
      }
      else {
        int v88 = 256;
      }
      unsigned int v89 = v14[2];
      int v90 = v89 >> 4;
      unsigned int v91 = v14[3];
      if (v89 >> 4 >= 0xF00) {
        int v90 = 3840;
      }
      if (v89 >= 0x1000) {
        int v92 = v90;
      }
      else {
        int v92 = 256;
      }
      if (v91 >> 4 >= 0xF00) {
        int v93 = 3840;
      }
      else {
        int v93 = v91 >> 4;
      }
      if (v91 >= 0x1000) {
        int v94 = v93;
      }
      else {
        int v94 = 256;
      }
      v14 += 4;
      *uint64_t v20 = (((613566757 * (unint64_t)((255 * v85 - 65280) >> 9)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v92 - 65280) >> 9)) >> 32)
                          + 1) >> 1;
      v20[1] = (((613566757 * (unint64_t)((255 * v88 - 65280) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v94 - 65280) >> 9)) >> 32)
                            + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v95 = 0;
      do
      {
        unsigned int v96 = &v20[v95];
        unsigned int v97 = *v14;
        int v98 = v97 >> 4;
        unsigned int v99 = v14[1];
        if (v97 >> 4 >= 0xF00) {
          int v98 = 3840;
        }
        if (v97 >= 0x1000) {
          int v100 = v98;
        }
        else {
          int v100 = 256;
        }
        if (v99 >> 4 >= 0xF00) {
          int v101 = 3840;
        }
        else {
          int v101 = v99 >> 4;
        }
        if (v99 < 0x1000) {
          int v101 = 256;
        }
        unsigned int v102 = v14[2];
        int v103 = v102 >> 4;
        unsigned int v104 = v14[3];
        if (v102 >> 4 >= 0xF00) {
          int v103 = 3840;
        }
        if (v102 >= 0x1000) {
          int v105 = v103;
        }
        else {
          int v105 = 256;
        }
        if (v104 >> 4 >= 0xF00) {
          int v106 = 3840;
        }
        else {
          int v106 = v104 >> 4;
        }
        if (v104 < 0x1000) {
          int v106 = 256;
        }
        *unsigned int v96 = (((613566757 * (unint64_t)((255 * v100 - 65280) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v105 - 65280) >> 9)) >> 32)
                            + 1) >> 1;
        v96[1] = (((613566757 * (unint64_t)((255 * v101 - 65280) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v106 - 65280) >> 9)) >> 32)
                              + 1) >> 1;
        v95 += 2;
        v14 += 4;
      }
      while (v95 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v12 + 2 * v11;
    uint64_t v27 = *a7 + *a8 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v29 = *(unsigned __int16 *)(v26 + 2 * i) >> 4;
          if (v29 >= 0xEB0) {
            unsigned int v29 = 3760;
          }
          if (v29 <= 0x100) {
            unsigned int v29 = 256;
          }
          *(unsigned char *)(v27 + i) = (255 * v29 - 65280) / 0xDB0;
        }
      }
      v26 += v24;
      v27 += v25;
      ++v23;
    }
    while (v23 != v9);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v8 & 1;
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v21 - v10;
  if (v12)
  {
    if (v32)
    {
      unsigned int v36 = *v14;
      int v37 = v36 >> 4;
      unsigned int v38 = v14[1];
      unsigned int v39 = v38 >> 4;
      if (v36 >> 4 >= 0xF00) {
        int v37 = 3840;
      }
      if (v36 < 0x1000) {
        int v37 = 256;
      }
      if (v39 >= 0xF00) {
        unsigned int v39 = 3840;
      }
      if (v38 >= 0x1000) {
        int v40 = v39;
      }
      else {
        int v40 = 256;
      }
      char v34 = v14 + 4;
      *uint64_t v20 = (613566757 * (unint64_t)((255 * v37 - 65280) >> 9)) >> 32;
      v20[1] = (613566757 * (unint64_t)((255 * v40 - 65280) >> 9)) >> 32;
      char v35 = v20 + 2;
    }
    else
    {
      char v34 = v14;
      char v35 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        int v42 = &v35[v41];
        unsigned int v43 = *v34;
        int v44 = v43 >> 4;
        unsigned int v45 = v34[1];
        if (v43 >> 4 >= 0xF00) {
          int v44 = 3840;
        }
        if (v43 >= 0x1000) {
          int v46 = v44;
        }
        else {
          int v46 = 256;
        }
        if (v45 >> 4 >= 0xF00) {
          int v47 = 3840;
        }
        else {
          int v47 = v45 >> 4;
        }
        if (v45 < 0x1000) {
          int v47 = 256;
        }
        *int v42 = (613566757 * (unint64_t)((255 * v46 - 65280) >> 9)) >> 32;
        v42[1] = (613566757 * (unint64_t)((255 * v47 - 65280) >> 9)) >> 32;
        v41 += 2;
        v34 += 4;
      }
      while (v41 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v31)
  {
    unint64_t v48 = 0;
  }
  else
  {
    uint64_t v49 = 0;
    unint64_t v48 = v9 - v31;
    do
    {
      unsigned int v50 = v14;
      int v51 = v20;
      if (v32)
      {
        unsigned int v52 = *v14;
        int v53 = v52 >> 4;
        unsigned int v54 = v14[1];
        if (v52 >> 4 >= 0xF00) {
          int v53 = 3840;
        }
        if (v52 < 0x1000) {
          int v53 = 256;
        }
        if (v54 >> 4 >= 0xF00) {
          int v55 = 3840;
        }
        else {
          int v55 = v54 >> 4;
        }
        if (v54 >= 0x1000) {
          int v56 = v55;
        }
        else {
          int v56 = 256;
        }
        unsigned int v50 = v14 + 4;
        *uint64_t v20 = (613566757 * (unint64_t)((255 * v53 - 65280) >> 9)) >> 32;
        v20[1] = (613566757 * (unint64_t)((255 * v56 - 65280) >> 9)) >> 32;
        int v51 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v57 = 0;
        do
        {
          unint64_t v58 = &v51[v57];
          unsigned int v59 = *v50;
          int v60 = v59 >> 4;
          unsigned int v61 = v50[1];
          if (v59 >> 4 >= 0xF00) {
            int v60 = 3840;
          }
          if (v59 >= 0x1000) {
            int v62 = v60;
          }
          else {
            int v62 = 256;
          }
          if (v61 >> 4 >= 0xF00) {
            int v63 = 3840;
          }
          else {
            int v63 = v61 >> 4;
          }
          if (v61 < 0x1000) {
            int v63 = 256;
          }
          unsigned char *v58 = (613566757 * (unint64_t)((255 * v62 - 65280) >> 9)) >> 32;
          v58[1] = (613566757 * (unint64_t)((255 * v63 - 65280) >> 9)) >> 32;
          v57 += 2;
          v50 += 4;
        }
        while (v57 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v49;
    }
    while (v49 != v48);
  }
  if (v48 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v64 = *v14;
      int v65 = v64 >> 4;
      unsigned int v66 = v14[1];
      unsigned int v67 = v66 >> 4;
      if (v64 >> 4 >= 0xF00) {
        int v65 = 3840;
      }
      if (v64 < 0x1000) {
        int v65 = 256;
      }
      if (v67 >= 0xF00) {
        unsigned int v67 = 3840;
      }
      if (v66 >= 0x1000) {
        int v68 = v67;
      }
      else {
        int v68 = 256;
      }
      v14 += 4;
      *uint64_t v20 = (613566757 * (unint64_t)((255 * v65 - 65280) >> 9)) >> 32;
      v20[1] = (613566757 * (unint64_t)((255 * v68 - 65280) >> 9)) >> 32;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v69 = 0;
      do
      {
        int v70 = &v20[v69];
        unsigned int v71 = *v14;
        int v72 = v71 >> 4;
        unsigned int v73 = v14[1];
        if (v71 >> 4 >= 0xF00) {
          int v72 = 3840;
        }
        if (v71 >= 0x1000) {
          int v74 = v72;
        }
        else {
          int v74 = 256;
        }
        if (v73 >> 4 >= 0xF00) {
          int v75 = 3840;
        }
        else {
          int v75 = v73 >> 4;
        }
        if (v73 < 0x1000) {
          int v75 = 256;
        }
        *int v70 = (613566757 * (unint64_t)((255 * v74 - 65280) >> 9)) >> 32;
        v70[1] = (613566757 * (unint64_t)((255 * v75 - 65280) >> 9)) >> 32;
        v69 += 2;
        v14 += 4;
      }
      while (v69 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_t4as_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v18 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + ((unint64_t)(v19 * v17) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v21 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v16) {
    unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  }
  unint64_t v22 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  if (v22 >= v18 - v17) {
    unint64_t v22 = v18 - v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    if (v13 >= v9) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = *a3 + *a4 * v13 + 2 * v11 + v27;
    uint64_t v29 = a4[2];
    uint64_t v30 = a7[2] + v26 * v17 + v16;
    uint64_t v31 = *a7 + v25 * v17 + v16;
    uint64_t v32 = a3[2] + v29 * v13 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v30 + i) = *(_WORD *)(v32 + 2 * i);
          *(unsigned char *)(v31 + i) = *(unsigned char *)(v28 + 2 * i + 1);
        }
      }
      v28 += v24;
      v31 += v25;
      v32 += v29;
      v30 += v26;
      ++v23;
    }
    while (v23 != v22);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v22 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v21 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v36 = v15 + 8;
      unsigned int v38 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *uint64_t v20 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v20[1] = v38;
      int v37 = v20 + 2;
    }
    else
    {
      unsigned int v36 = v15;
      int v37 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v39 = 0;
      int v40 = v36 + 4;
      do
      {
        unint64_t v41 = &v37[v39];
        unsigned int v42 = (*(v40 - 1) + v40[3] + v40[v14 - 1] + v40[v14 + 3] + 2) >> 2;
        unsigned char *v41 = (*(v40 - 3) + v40[1] + v40[v14 - 3] + v40[v14 + 1] + 2) >> 2;
        v41[1] = v42;
        v39 += 2;
        v40 += 8;
      }
      while (v39 < v35);
    }
    v15 += 2 * v14;
    v20 += v19;
  }
  if (v22 != v34)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v22 - v34;
    do
    {
      unsigned int v45 = v15;
      int v46 = v20;
      if (v8)
      {
        unsigned int v45 = v15 + 8;
        unsigned int v47 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *uint64_t v20 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v20[1] = v47;
        int v46 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v48 = 0;
        uint64_t v49 = v45 + 4;
        do
        {
          unsigned int v50 = &v46[v48];
          unsigned int v51 = (*(v49 - 1) + v49[3] + v49[v14 - 1] + v49[v14 + 3] + 2) >> 2;
          unsigned char *v50 = (*(v49 - 3) + v49[1] + v49[v14 - 3] + v49[v14 + 1] + 2) >> 2;
          v50[1] = v51;
          v48 += 2;
          v49 += 8;
        }
        while (v48 < v35);
      }
      v15 += 2 * v14;
      v20 += v19;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyDec_t4as_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v18 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + ((unint64_t)(v19 * v17) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v21 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v16) {
    unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  }
  unint64_t v22 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  if (v22 >= v18 - v17) {
    unint64_t v22 = v18 - v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    if (v13 >= v9) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = *a3 + *a4 * v13 + 2 * v11 + v27;
    uint64_t v29 = a4[2];
    uint64_t v30 = a7[2] + v26 * v17 + v16;
    uint64_t v31 = *a7 + v25 * v17 + v16;
    uint64_t v32 = a3[2] + v29 * v13 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v30 + i) = *(_WORD *)(v32 + 2 * i);
          *(unsigned char *)(v31 + i) = *(unsigned char *)(v28 + 2 * i + 1);
        }
      }
      v28 += v24;
      v31 += v25;
      v32 += v29;
      v30 += v26;
      ++v23;
    }
    while (v23 != v22);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v22 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v21 - v10;
  if (v12)
  {
    if (v8)
    {
      char v38 = *(unsigned char *)(v15 + 3);
      uint64_t v36 = v15 + 8;
      *uint64_t v20 = *(unsigned char *)(v15 + 1);
      v20[1] = v38;
      int v37 = v20 + 2;
    }
    else
    {
      uint64_t v36 = v15;
      int v37 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        int v40 = &v37[v39];
        char v41 = *(unsigned char *)(v36 + 3);
        *int v40 = *(unsigned char *)(v36 + 1);
        v40[1] = v41;
        v39 += 2;
        v36 += 8;
      }
      while (v39 < v35);
    }
    v15 += 2 * v14;
    v20 += v19;
  }
  if (v22 != v34)
  {
    unint64_t v42 = 0;
    unint64_t v43 = v22 - v34;
    uint64_t v44 = 2 * v14;
    do
    {
      uint64_t v45 = v15;
      int v46 = v20;
      if (v8)
      {
        char v47 = *(unsigned char *)(v15 + 3);
        uint64_t v45 = v15 + 8;
        *uint64_t v20 = *(unsigned char *)(v15 + 1);
        v20[1] = v47;
        int v46 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v48 = 0;
        do
        {
          uint64_t v49 = &v46[v48];
          char v50 = *(unsigned char *)(v45 + 3);
          *uint64_t v49 = *(unsigned char *)(v45 + 1);
          v49[1] = v50;
          v48 += 2;
          v45 += 8;
        }
        while (v48 < v35);
      }
      v15 += v44;
      v20 += v19;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = *(unsigned char *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v34 = v15 + 8;
      unsigned int v36 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      unsigned char *v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      char v38 = v34 + 4;
      do
      {
        unint64_t v39 = &v35[v37];
        unsigned int v40 = (*(v38 - 1) + v38[3] + v38[v14 - 1] + v38[v14 + 3] + 2) >> 2;
        *unint64_t v39 = (*(v38 - 3) + v38[1] + v38[v14 - 3] + v38[v14 + 1] + 2) >> 2;
        v39[1] = v40;
        v37 += 2;
        v38 += 8;
      }
      while (v37 < v33);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v41 = 0;
    unint64_t v42 = v24 - v32;
    do
    {
      unint64_t v43 = v15;
      uint64_t v44 = v21;
      if (v8)
      {
        unint64_t v43 = v15 + 8;
        unsigned int v45 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        unsigned char *v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v21[1] = v45;
        uint64_t v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v46 = 0;
        char v47 = v43 + 4;
        do
        {
          unint64_t v48 = &v44[v46];
          unsigned int v49 = (*(v47 - 1) + v47[3] + v47[v14 - 1] + v47[v14 + 3] + 2) >> 2;
          *unint64_t v48 = (*(v47 - 3) + v47[1] + v47[v14 - 3] + v47[v14 + 1] + 2) >> 2;
          v48[1] = v49;
          v46 += 2;
          v47 += 8;
        }
        while (v46 < v33);
      }
      v15 += 2 * v14;
      v21 += v20;
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = *(unsigned char *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      char v36 = *(unsigned char *)(v15 + 3);
      uint64_t v34 = v15 + 8;
      unsigned char *v21 = *(unsigned char *)(v15 + 1);
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      uint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        char v38 = &v35[v37];
        char v39 = *(unsigned char *)(v34 + 3);
        unsigned char *v38 = *(unsigned char *)(v34 + 1);
        v38[1] = v39;
        v37 += 2;
        v34 += 8;
      }
      while (v37 < v33);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v40 = 0;
    unint64_t v41 = v24 - v32;
    uint64_t v42 = 2 * v14;
    do
    {
      uint64_t v43 = v15;
      uint64_t v44 = v21;
      if (v8)
      {
        char v45 = *(unsigned char *)(v15 + 3);
        uint64_t v43 = v15 + 8;
        unsigned char *v21 = *(unsigned char *)(v15 + 1);
        v21[1] = v45;
        uint64_t v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          char v47 = &v44[v46];
          char v48 = *(unsigned char *)(v43 + 3);
          unsigned char *v47 = *(unsigned char *)(v43 + 1);
          v47[1] = v48;
          v46 += 2;
          v43 += 8;
        }
        while (v46 < v33);
      }
      v15 += v42;
      v21 += v20;
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v140 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + ((unint64_t)(v140 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  unint64_t v23 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v24 = v19 - v18;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  if (v23)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v28 = *a8;
    if (v13 >= v9) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v27 + v29;
    uint64_t v31 = *a7 + v28 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v33 = *(unsigned __int16 *)(v30 + 2 * i) >> 4;
          if (v33 >= 0xEB0) {
            unsigned int v33 = 3760;
          }
          if (v33 <= 0x100) {
            unsigned int v33 = 256;
          }
          *(unsigned char *)(v31 + i) = (255 * v33 - 65280) / 0xDB0;
        }
      }
      v30 += v26;
      v31 += v28;
      ++v25;
    }
    while (v25 != v23);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v23 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v21 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v38 = *v15;
      int v39 = v38 >> 4;
      unsigned int v40 = v15[1];
      unsigned int v41 = v40 >> 4;
      unsigned int v42 = *(unsigned __int16 *)((char *)v15 + v14);
      unsigned int v43 = *(unsigned __int16 *)((char *)v15 + v14 + 2);
      if (v38 >> 4 >= 0xF00) {
        int v39 = 3840;
      }
      if (v38 < 0x1000) {
        int v39 = 256;
      }
      if (v41 >= 0xF00) {
        unsigned int v41 = 3840;
      }
      if (v40 < 0x1000) {
        unsigned int v41 = 256;
      }
      if (v42 >> 4 >= 0xF00) {
        int v44 = 3840;
      }
      else {
        int v44 = v42 >> 4;
      }
      if (v42 >= 0x1000) {
        int v45 = v44;
      }
      else {
        int v45 = 256;
      }
      if (v43 >> 4 >= 0xF00) {
        int v46 = 3840;
      }
      else {
        int v46 = v43 >> 4;
      }
      if (v43 >= 0x1000) {
        int v47 = v46;
      }
      else {
        int v47 = 256;
      }
      unsigned int v48 = v15[2];
      int v49 = v48 >> 4;
      unsigned int v50 = v15[3];
      unsigned int v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      unsigned int v52 = *v51;
      unsigned int v53 = v51[1];
      if (v48 >> 4 >= 0xF00) {
        int v49 = 3840;
      }
      if (v48 >= 0x1000) {
        int v54 = v49;
      }
      else {
        int v54 = 256;
      }
      if (v50 >> 4 >= 0xF00) {
        int v55 = 3840;
      }
      else {
        int v55 = v50 >> 4;
      }
      if (v50 < 0x1000) {
        int v55 = 256;
      }
      if (v52 >> 4 >= 0xF00) {
        int v56 = 3840;
      }
      else {
        int v56 = v52 >> 4;
      }
      if (v52 < 0x1000) {
        int v56 = 256;
      }
      if (v53 >> 4 >= 0xF00) {
        int v57 = 3840;
      }
      else {
        int v57 = v53 >> 4;
      }
      if (v53 >= 0x1000) {
        int v58 = v57;
      }
      else {
        int v58 = 256;
      }
      char v36 = v15 + 4;
      *uint64_t v20 = (((613566757 * (unint64_t)((255 * v39 - 65280) >> 9)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v54 - 65280) >> 9)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v45 - 65280) >> 9)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v56 - 65280) >> 9)) >> 32)
                          + 2) >> 2;
      v20[1] = (((613566757 * (unint64_t)((255 * v41 - 65280) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v55 - 65280) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v47 - 65280) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v58 - 65280) >> 9)) >> 32)
                            + 2) >> 2;
      unint64_t v37 = v20 + 2;
    }
    else
    {
      char v36 = v15;
      unint64_t v37 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v59 = 0;
      int v60 = v36 + 2;
      do
      {
        unsigned int v61 = *(v60 - 2);
        int v62 = v61 >> 4;
        unsigned int v63 = *(v60 - 1);
        unsigned int v64 = (unsigned __int16 *)((char *)v60 + v14);
        unsigned int v65 = *(unsigned __int16 *)((char *)v60 + v14 - 4);
        unsigned int v66 = *(unsigned __int16 *)((char *)v60 + v14 - 2);
        if (v61 >> 4 >= 0xF00) {
          int v62 = 3840;
        }
        if (v61 < 0x1000) {
          int v62 = 256;
        }
        if (v63 >> 4 >= 0xF00) {
          int v67 = 3840;
        }
        else {
          int v67 = v63 >> 4;
        }
        if (v63 >= 0x1000) {
          int v68 = v67;
        }
        else {
          int v68 = 256;
        }
        if (v65 >> 4 >= 0xF00) {
          int v69 = 3840;
        }
        else {
          int v69 = v65 >> 4;
        }
        if (v65 >= 0x1000) {
          int v70 = v69;
        }
        else {
          int v70 = 256;
        }
        if (v66 >> 4 >= 0xF00) {
          int v71 = 3840;
        }
        else {
          int v71 = v66 >> 4;
        }
        BOOL v72 = v66 >= 0x1000;
        unsigned int v73 = *v60;
        unsigned int v74 = v73 >> 4;
        unsigned int v75 = v60[1];
        if (v72) {
          int v76 = v71;
        }
        else {
          int v76 = 256;
        }
        unsigned int v77 = *v64;
        unsigned int v78 = v64[1];
        if (v74 >= 0xF00) {
          unsigned int v74 = 3840;
        }
        if (v73 >= 0x1000) {
          int v79 = v74;
        }
        else {
          int v79 = 256;
        }
        if (v75 >> 4 >= 0xF00) {
          int v80 = 3840;
        }
        else {
          int v80 = v75 >> 4;
        }
        if (v75 < 0x1000) {
          int v80 = 256;
        }
        if (v77 >> 4 >= 0xF00) {
          int v81 = 3840;
        }
        else {
          int v81 = v77 >> 4;
        }
        if (v77 < 0x1000) {
          int v81 = 256;
        }
        int v82 = &v37[v59];
        unint64_t v83 = (613566757 * (unint64_t)((255 * v62 - 65280) >> 9)) >> 32;
        unint64_t v84 = 613566757 * ((255 * v68 - 65280) >> 9);
        if (v78 >> 4 >= 0xF00) {
          int v85 = 3840;
        }
        else {
          int v85 = v78 >> 4;
        }
        unint64_t v86 = HIDWORD(v84);
        if (v78 < 0x1000) {
          int v85 = 256;
        }
        *int v82 = (v83
                            + ((613566757 * (unint64_t)((255 * v79 - 65280) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v70 - 65280) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v81 - 65280) >> 9)) >> 32)
                            + 2) >> 2;
        v82[1] = (v86
                              + ((613566757 * (unint64_t)((255 * v80 - 65280) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v76 - 65280) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v85 - 65280) >> 9)) >> 32)
                              + 2) >> 2;
        v59 += 2;
        v60 += 4;
      }
      while (v59 < v35);
    }
    v15 += v14;
    v20 += v140;
  }
  if (v23 != v34)
  {
    unint64_t v87 = 0;
    unint64_t v88 = v23 - v34;
    do
    {
      unsigned int v89 = v15;
      int v90 = v20;
      if (v8)
      {
        unsigned int v91 = *v15;
        int v92 = v91 >> 4;
        unsigned int v93 = v15[1];
        unsigned int v94 = *(unsigned __int16 *)((char *)v15 + v14);
        unsigned int v95 = *(unsigned __int16 *)((char *)v15 + v14 + 2);
        if (v91 >> 4 >= 0xF00) {
          int v92 = 3840;
        }
        if (v91 >= 0x1000) {
          int v96 = v92;
        }
        else {
          int v96 = 256;
        }
        if (v93 >> 4 >= 0xF00) {
          int v97 = 3840;
        }
        else {
          int v97 = v93 >> 4;
        }
        if (v93 < 0x1000) {
          int v97 = 256;
        }
        if (v94 >> 4 >= 0xF00) {
          int v98 = 3840;
        }
        else {
          int v98 = v94 >> 4;
        }
        if (v94 >= 0x1000) {
          int v99 = v98;
        }
        else {
          int v99 = 256;
        }
        if (v95 >> 4 >= 0xF00) {
          int v100 = 3840;
        }
        else {
          int v100 = v95 >> 4;
        }
        if (v95 >= 0x1000) {
          int v101 = v100;
        }
        else {
          int v101 = 256;
        }
        unsigned int v102 = v15[2];
        int v103 = v102 >> 4;
        unsigned int v104 = v15[3];
        int v105 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        unsigned int v106 = *v105;
        unsigned int v107 = v105[1];
        if (v102 >> 4 >= 0xF00) {
          int v103 = 3840;
        }
        if (v102 >= 0x1000) {
          int v108 = v103;
        }
        else {
          int v108 = 256;
        }
        if (v104 >> 4 >= 0xF00) {
          int v109 = 3840;
        }
        else {
          int v109 = v104 >> 4;
        }
        if (v104 < 0x1000) {
          int v109 = 256;
        }
        if (v106 >> 4 >= 0xF00) {
          int v110 = 3840;
        }
        else {
          int v110 = v106 >> 4;
        }
        if (v106 < 0x1000) {
          int v110 = 256;
        }
        if (v107 >> 4 >= 0xF00) {
          int v111 = 3840;
        }
        else {
          int v111 = v107 >> 4;
        }
        if (v107 < 0x1000) {
          int v111 = 256;
        }
        unsigned int v89 = v15 + 4;
        *uint64_t v20 = (((613566757 * (unint64_t)((255 * v96 - 65280) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v108 - 65280) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v99 - 65280) >> 9)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v110 - 65280) >> 9)) >> 32)
                            + 2) >> 2;
        v20[1] = (((613566757 * (unint64_t)((255 * v97 - 65280) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v109 - 65280) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v101 - 65280) >> 9)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v111 - 65280) >> 9)) >> 32)
                              + 2) >> 2;
        int v90 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v112 = 0;
        unsigned int v113 = v89 + 2;
        do
        {
          unsigned int v114 = *(v113 - 2);
          int v115 = v114 >> 4;
          unsigned int v116 = *(v113 - 1);
          int v117 = (unsigned __int16 *)((char *)v113 + v14);
          unsigned int v118 = *(unsigned __int16 *)((char *)v113 + v14 - 4);
          unsigned int v119 = *(unsigned __int16 *)((char *)v113 + v14 - 2);
          if (v114 >> 4 >= 0xF00) {
            int v115 = 3840;
          }
          if (v114 < 0x1000) {
            int v115 = 256;
          }
          if (v116 >> 4 >= 0xF00) {
            int v120 = 3840;
          }
          else {
            int v120 = v116 >> 4;
          }
          if (v116 >= 0x1000) {
            int v121 = v120;
          }
          else {
            int v121 = 256;
          }
          if (v118 >> 4 >= 0xF00) {
            int v122 = 3840;
          }
          else {
            int v122 = v118 >> 4;
          }
          if (v118 >= 0x1000) {
            int v123 = v122;
          }
          else {
            int v123 = 256;
          }
          if (v119 >> 4 >= 0xF00) {
            int v124 = 3840;
          }
          else {
            int v124 = v119 >> 4;
          }
          BOOL v72 = v119 >= 0x1000;
          unsigned int v125 = *v113;
          unsigned int v126 = v125 >> 4;
          unsigned int v127 = v113[1];
          if (v72) {
            int v128 = v124;
          }
          else {
            int v128 = 256;
          }
          unsigned int v129 = *v117;
          unsigned int v130 = v117[1];
          unsigned int v131 = v130 >> 4;
          if (v126 >= 0xF00) {
            unsigned int v126 = 3840;
          }
          if (v125 >= 0x1000) {
            int v132 = v126;
          }
          else {
            int v132 = 256;
          }
          if (v127 >> 4 >= 0xF00) {
            int v133 = 3840;
          }
          else {
            int v133 = v127 >> 4;
          }
          if (v127 < 0x1000) {
            int v133 = 256;
          }
          if (v129 >> 4 >= 0xF00) {
            int v134 = 3840;
          }
          else {
            int v134 = v129 >> 4;
          }
          if (v129 < 0x1000) {
            int v134 = 256;
          }
          int v135 = &v90[v112];
          unint64_t v136 = (613566757 * (unint64_t)((255 * v115 - 65280) >> 9)) >> 32;
          unint64_t v137 = 613566757 * ((255 * v121 - 65280) >> 9);
          if (v131 >= 0xF00) {
            unsigned int v131 = 3840;
          }
          unint64_t v138 = HIDWORD(v137);
          if (v130 < 0x1000) {
            unsigned int v131 = 256;
          }
          *int v135 = (v136
                               + ((613566757 * (unint64_t)((255 * v132 - 65280) >> 9)) >> 32)
                               + ((613566757 * (unint64_t)((255 * v123 - 65280) >> 9)) >> 32)
                               + ((613566757 * (unint64_t)((255 * v134 - 65280) >> 9)) >> 32)
                               + 2) >> 2;
          v135[1] = (v138
                                 + ((613566757 * (unint64_t)((255 * v133 - 65280) >> 9)) >> 32)
                                 + ((613566757 * (unint64_t)((255 * v128 - 65280) >> 9)) >> 32)
                                 + ((613566757 * (unint64_t)((255 * v131 - 65280) >> 9)) >> 32)
                                 + 2) >> 2;
          v112 += 2;
          v113 += 4;
        }
        while (v112 < v35);
      }
      v15 += v14;
      v20 += v140;
      v87 += 2;
    }
    while (v87 < v88);
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v25 = v19 - v18;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v29 = *a8;
    if (v13 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v28 + v30;
    uint64_t v32 = *a7 + v29 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v34 = *(unsigned __int16 *)(v31 + 2 * i) >> 4;
          if (v34 >= 0xEB0) {
            unsigned int v34 = 3760;
          }
          if (v34 <= 0x100) {
            unsigned int v34 = 256;
          }
          *(unsigned char *)(v32 + i) = (255 * v34 - 65280) / 0xDB0;
        }
      }
      v31 += v27;
      v32 += v29;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v39 = *v15;
      int v40 = v39 >> 4;
      unsigned int v41 = v15[1];
      unsigned int v42 = v41 >> 4;
      if (v39 >> 4 >= 0xF00) {
        int v40 = 3840;
      }
      if (v39 < 0x1000) {
        int v40 = 256;
      }
      if (v42 >= 0xF00) {
        unsigned int v42 = 3840;
      }
      if (v41 >= 0x1000) {
        int v43 = v42;
      }
      else {
        int v43 = 256;
      }
      unint64_t v37 = v15 + 4;
      unsigned char *v21 = (613566757 * (unint64_t)((255 * v40 - 65280) >> 9)) >> 32;
      v21[1] = (613566757 * (unint64_t)((255 * v43 - 65280) >> 9)) >> 32;
      unsigned int v38 = v21 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      unsigned int v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v44 = 0;
      do
      {
        int v45 = &v38[v44];
        unsigned int v46 = *v37;
        int v47 = v46 >> 4;
        unsigned int v48 = v37[1];
        if (v46 >> 4 >= 0xF00) {
          int v47 = 3840;
        }
        if (v46 >= 0x1000) {
          int v49 = v47;
        }
        else {
          int v49 = 256;
        }
        if (v48 >> 4 >= 0xF00) {
          int v50 = 3840;
        }
        else {
          int v50 = v48 >> 4;
        }
        if (v48 < 0x1000) {
          int v50 = 256;
        }
        *int v45 = (613566757 * (unint64_t)((255 * v49 - 65280) >> 9)) >> 32;
        v45[1] = (613566757 * (unint64_t)((255 * v50 - 65280) >> 9)) >> 32;
        v44 += 2;
        v37 += 4;
      }
      while (v44 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    unint64_t v51 = 0;
    unint64_t v52 = v24 - v35;
    uint64_t v53 = 2 * v14;
    do
    {
      int v54 = v15;
      int v55 = v21;
      if (v8)
      {
        unsigned int v56 = *v15;
        int v57 = v56 >> 4;
        unsigned int v58 = v15[1];
        if (v56 >> 4 >= 0xF00) {
          int v57 = 3840;
        }
        if (v56 < 0x1000) {
          int v57 = 256;
        }
        if (v58 >> 4 >= 0xF00) {
          int v59 = 3840;
        }
        else {
          int v59 = v58 >> 4;
        }
        if (v58 >= 0x1000) {
          int v60 = v59;
        }
        else {
          int v60 = 256;
        }
        int v54 = v15 + 4;
        unsigned char *v21 = (613566757 * (unint64_t)((255 * v57 - 65280) >> 9)) >> 32;
        v21[1] = (613566757 * (unint64_t)((255 * v60 - 65280) >> 9)) >> 32;
        int v55 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v61 = 0;
        do
        {
          int v62 = &v55[v61];
          unsigned int v63 = *v54;
          int v64 = v63 >> 4;
          unsigned int v65 = v54[1];
          if (v63 >> 4 >= 0xF00) {
            int v64 = 3840;
          }
          if (v63 >= 0x1000) {
            int v66 = v64;
          }
          else {
            int v66 = 256;
          }
          if (v65 >> 4 >= 0xF00) {
            int v67 = 3840;
          }
          else {
            int v67 = v65 >> 4;
          }
          if (v65 < 0x1000) {
            int v67 = 256;
          }
          *int v62 = (613566757 * (unint64_t)((255 * v66 - 65280) >> 9)) >> 32;
          v62[1] = (613566757 * (unint64_t)((255 * v67 - 65280) >> 9)) >> 32;
          v61 += 2;
          v54 += 4;
        }
        while (v61 < v36);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v53);
      v21 += v20;
      v51 += 2;
    }
    while (v51 < v52);
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * v11;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    unint64_t v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v34 + i) = *(unsigned char *)(v33 + 2 * i + 1);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v38 = v15 + 8;
      unsigned int v41 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *unint64_t v22 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      unsigned int v39 = v22 + 1;
      *unint64_t v23 = v41;
      int v40 = v23 + 1;
    }
    else
    {
      unsigned int v38 = v15;
      unsigned int v39 = v22;
      int v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v42 = 0;
      int v43 = v38 + 4;
      do
      {
        unsigned int v44 = *(v43 - 1) + v43[3] + v43[v14 - 1] + v43[v14 + 3] + 2;
        *v39++ = (*(v43 - 3) + v43[1] + v43[v14 - 3] + v43[v14 + 1] + 2) >> 2;
        *v40++ = v44 >> 2;
        v42 += 2;
        v43 += 8;
      }
      while (v42 < v37);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v26 - v36;
    do
    {
      int v47 = v15;
      unsigned int v48 = v22;
      int v49 = v23;
      if (v8)
      {
        int v47 = v15 + 8;
        unsigned int v50 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *unint64_t v22 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        unsigned int v48 = v22 + 1;
        *unint64_t v23 = v50;
        int v49 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v51 = 0;
        unint64_t v52 = v47 + 4;
        do
        {
          unsigned int v53 = *(v52 - 1) + v52[3] + v52[v14 - 1] + v52[v14 + 3] + 2;
          *v48++ = (*(v52 - 3) + v52[1] + v52[v14 - 3] + v52[v14 + 1] + 2) >> 2;
          *v49++ = v53 >> 2;
          v51 += 2;
          v52 += 8;
        }
        while (v51 < v37);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  uint64_t v15 = a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9);
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * v11;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    unint64_t v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v34 + i) = *(unsigned char *)(v33 + 2 * i + 1);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      char v41 = *(unsigned char *)(v15 + 3);
      uint64_t v38 = v15 + 8;
      *unint64_t v22 = *(unsigned char *)(v15 + 1);
      unsigned int v39 = v22 + 1;
      *unint64_t v23 = v41;
      int v40 = v23 + 1;
    }
    else
    {
      uint64_t v38 = v15;
      unsigned int v39 = v22;
      int v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v42 = 0;
      do
      {
        char v43 = *(unsigned char *)(v38 + 3);
        *v39++ = *(unsigned char *)(v38 + 1);
        *v40++ = v43;
        v42 += 2;
        v38 += 8;
      }
      while (v42 < v37);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v36;
    uint64_t v46 = 2 * v14;
    do
    {
      uint64_t v47 = v15;
      unsigned int v48 = v22;
      int v49 = v23;
      if (v9)
      {
        char v50 = *(unsigned char *)(v15 + 3);
        uint64_t v47 = v15 + 8;
        *unint64_t v22 = *(unsigned char *)(v15 + 1);
        unsigned int v48 = v22 + 1;
        *unint64_t v23 = v50;
        int v49 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v51 = 0;
        do
        {
          char v52 = *(unsigned char *)(v47 + 3);
          *v48++ = *(unsigned char *)(v47 + 1);
          *v49++ = v52;
          v51 += 2;
          v47 += 8;
        }
        while (v51 < v37);
      }
      v15 += v46;
      v22 += v20;
      v23 += v21;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (__int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v31 = *a8;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v30 + v32;
    unint64_t v34 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 4;
          if (v36 >= 0xEB0) {
            unsigned int v36 = 3760;
          }
          if (v36 <= 0x100) {
            unsigned int v36 = 256;
          }
          *(unsigned char *)(v34 + i) = (255 * v36 - 65280) / 0xDB0;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v39 = v15 + 4;
      v42.i16[0] = *v15;
      v42.i16[1] = *(__int16 *)((char *)v15 + v14);
      v42.i16[2] = v15[2];
      char v43 = (__int16 *)((char *)v15 + v14 + 4);
      v42.i16[3] = *v43;
      v44.i64[0] = 0xFE000000FELL;
      v44.i64[1] = 0xFE000000FELL;
      v45.i64[0] = 0xFE000000FELL;
      v45.i64[1] = 0xFE000000FELL;
      uint32x4_t v46 = vshrq_n_u32(vmlal_u16(v45, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v42), (int8x8_t)0x100010001000100, (int8x8_t)vmin_u16(vshr_n_u16(v42, 4uLL), (uint16x4_t)0xF000F000F000F00)), (uint16x4_t)0xFF00FF00FF00FFLL), 9uLL);
      uint32x4_t v47 = (uint32x4_t)vdupq_n_s32(0x24924925u);
      v48.i16[0] = v15[1];
      v48.i16[1] = *(__int16 *)((char *)v15 + v14 + 2);
      v48.i16[2] = v15[3];
      v48.i16[3] = v43[1];
      uint32x4_t v49 = vshrq_n_u32(vmlal_u16(v44, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v48), (int8x8_t)0x100010001000100, (int8x8_t)vmin_u16(vshr_n_u16(v48, 4uLL), (uint16x4_t)0xF000F000F000F00)), (uint16x4_t)0xFF00FF00FF00FFLL), 9uLL);
      *unint64_t v22 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v46.i8, *(uint32x2_t *)v47.i8), (int32x4_t)vmull_high_u32(v46, v47)))+ 2) >> 2;
      int v40 = v22 + 1;
      *unint64_t v23 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v49.i8, *(uint32x2_t *)v47.i8), (int32x4_t)vmull_high_u32(v49, v47)))+ 2) >> 2;
      char v41 = v23 + 1;
    }
    else
    {
      unsigned int v39 = v15;
      int v40 = v22;
      char v41 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v50 = 0;
      unint64_t v51 = v39 + 2;
      uint32x4_t v52 = (uint32x4_t)vdupq_n_s32(0x24924925u);
      do
      {
        v53.i16[0] = *(v51 - 2);
        v53.i16[1] = *(__int16 *)((char *)v51 + v14 - 4);
        v53.i16[2] = *v51;
        v53.i16[3] = *(__int16 *)((char *)v51 + v14);
        v54.i64[0] = 0xFE000000FELL;
        v54.i64[1] = 0xFE000000FELL;
        uint32x4_t v55 = vmlal_u16(v54, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v53), (int8x8_t)0x100010001000100, (int8x8_t)vmin_u16(vshr_n_u16(v53, 4uLL), (uint16x4_t)0xF000F000F000F00)), (uint16x4_t)0xFF00FF00FF00FFLL);
        v53.i16[0] = *(v51 - 1);
        v53.i16[1] = *(__int16 *)((char *)v51 + v14 - 2);
        v53.i16[2] = v51[1];
        uint32x4_t v56 = vshrq_n_u32(v55, 9uLL);
        v53.i16[3] = *(__int16 *)((char *)v51 + v14 + 2);
        v57.i64[0] = 0xFE000000FELL;
        v57.i64[1] = 0xFE000000FELL;
        uint32x4_t v58 = vshrq_n_u32(vmlal_u16(v57, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v53), (int8x8_t)0x100010001000100, (int8x8_t)vmin_u16(vshr_n_u16(v53, 4uLL), (uint16x4_t)0xF000F000F000F00)), (uint16x4_t)0xFF00FF00FF00FFLL), 9uLL);
        *v40++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v56.i8, *(uint32x2_t *)v52.i8), (int32x4_t)vmull_high_u32(v56, v52)))+ 2) >> 2;
        *v41++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v58.i8, *(uint32x2_t *)v52.i8), (int32x4_t)vmull_high_u32(v58, v52)))+ 2) >> 2;
        v50 += 2;
        v51 += 4;
      }
      while (v50 < v38);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v37)
  {
    unint64_t v59 = 0;
    unint64_t v60 = v26 - v37;
    uint32x4_t v61 = (uint32x4_t)vdupq_n_s32(0x24924925u);
    do
    {
      int v62 = v15;
      unsigned int v63 = v22;
      int v64 = v23;
      if (v8)
      {
        v65.i16[0] = *v15;
        v65.i16[1] = *(__int16 *)((char *)v15 + v14);
        v65.i16[2] = v15[2];
        int v66 = (__int16 *)((char *)v15 + v14 + 4);
        v65.i16[3] = *v66;
        int v62 = v15 + 4;
        v67.i64[0] = 0xFE000000FELL;
        v67.i64[1] = 0xFE000000FELL;
        uint32x4_t v68 = vshrq_n_u32(vmlal_u16(v67, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v65), (int8x8_t)0x100010001000100, (int8x8_t)vmin_u16(vshr_n_u16(v65, 4uLL), (uint16x4_t)0xF000F000F000F00)), (uint16x4_t)0xFF00FF00FF00FFLL), 9uLL);
        v67.i16[0] = v15[1];
        v67.i16[1] = *(__int16 *)((char *)v15 + v14 + 2);
        v67.i16[2] = v15[3];
        v67.i16[3] = v66[1];
        v69.i64[0] = 0xFE000000FELL;
        v69.i64[1] = 0xFE000000FELL;
        uint32x4_t v70 = vshrq_n_u32(vmlal_u16(v69, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, *(uint16x4_t *)v67.i8), (int8x8_t)0x100010001000100, (int8x8_t)vmin_u16(vshr_n_u16(*(uint16x4_t *)v67.i8, 4uLL), (uint16x4_t)0xF000F000F000F00)), (uint16x4_t)0xFF00FF00FF00FFLL), 9uLL);
        *unint64_t v22 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v68.i8, *(uint32x2_t *)v61.i8), (int32x4_t)vmull_high_u32(v68, v61)))+ 2) >> 2;
        unsigned int v63 = v22 + 1;
        *unint64_t v23 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v70.i8, *(uint32x2_t *)v61.i8), (int32x4_t)vmull_high_u32(v70, v61)))+ 2) >> 2;
        int v64 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v71 = 0;
        BOOL v72 = v62 + 2;
        do
        {
          v73.i16[0] = *(v72 - 2);
          v73.i16[1] = *(__int16 *)((char *)v72 + v14 - 4);
          v73.i16[2] = *v72;
          v73.i16[3] = *(__int16 *)((char *)v72 + v14);
          v74.i64[0] = 0xFE000000FELL;
          v74.i64[1] = 0xFE000000FELL;
          uint32x4_t v75 = vmlal_u16(v74, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v73), (int8x8_t)0x100010001000100, (int8x8_t)vmin_u16(vshr_n_u16(v73, 4uLL), (uint16x4_t)0xF000F000F000F00)), (uint16x4_t)0xFF00FF00FF00FFLL);
          v73.i16[0] = *(v72 - 1);
          v73.i16[1] = *(__int16 *)((char *)v72 + v14 - 2);
          v73.i16[2] = v72[1];
          uint32x4_t v76 = vshrq_n_u32(v75, 9uLL);
          v73.i16[3] = *(__int16 *)((char *)v72 + v14 + 2);
          v77.i64[0] = 0xFE000000FELL;
          v77.i64[1] = 0xFE000000FELL;
          uint32x4_t v78 = vshrq_n_u32(vmlal_u16(v77, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v73), (int8x8_t)0x100010001000100, (int8x8_t)vmin_u16(vshr_n_u16(v73, 4uLL), (uint16x4_t)0xF000F000F000F00)), (uint16x4_t)0xFF00FF00FF00FFLL), 9uLL);
          *v63++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v76.i8, *(uint32x2_t *)v61.i8), (int32x4_t)vmull_high_u32(v76, v61)))+ 2) >> 2;
          *v64++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v78.i8, *(uint32x2_t *)v61.i8), (int32x4_t)vmull_high_u32(v78, v61)))+ 2) >> 2;
          v71 += 2;
          v72 += 4;
        }
        while (v71 < v38);
      }
      v15 += v14;
      v22 += v20;
      v23 += v21;
      v59 += 2;
    }
    while (v59 < v60);
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v31 = *a8;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v30 + v32;
    unint64_t v34 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 4;
          if (v36 >= 0xEB0) {
            unsigned int v36 = 3760;
          }
          if (v36 <= 0x100) {
            unsigned int v36 = 256;
          }
          *(unsigned char *)(v34 + i) = (255 * v36 - 65280) / 0xDB0;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v42 = *v15;
      int v43 = v42 >> 4;
      unsigned int v44 = v15[1];
      unsigned int v45 = v44 >> 4;
      if (v42 >> 4 >= 0xF00) {
        int v43 = 3840;
      }
      if (v42 < 0x1000) {
        int v43 = 256;
      }
      if (v45 >= 0xF00) {
        unsigned int v45 = 3840;
      }
      if (v44 >= 0x1000) {
        int v46 = v45;
      }
      else {
        int v46 = 256;
      }
      unsigned int v39 = v15 + 4;
      *unint64_t v22 = (613566757 * (unint64_t)((255 * v43 - 65280) >> 9)) >> 32;
      int v40 = v22 + 1;
      *unint64_t v23 = (613566757 * (unint64_t)((255 * v46 - 65280) >> 9)) >> 32;
      char v41 = v23 + 1;
    }
    else
    {
      unsigned int v39 = v15;
      int v40 = v22;
      char v41 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v47 = 0;
      do
      {
        unsigned int v48 = *v39;
        int v49 = v48 >> 4;
        unsigned int v50 = v39[1];
        if (v48 >> 4 >= 0xF00) {
          int v49 = 3840;
        }
        if (v48 >= 0x1000) {
          int v51 = v49;
        }
        else {
          int v51 = 256;
        }
        if (v50 >> 4 >= 0xF00) {
          int v52 = 3840;
        }
        else {
          int v52 = v50 >> 4;
        }
        if (v50 < 0x1000) {
          int v52 = 256;
        }
        *v40++ = (613566757 * (unint64_t)((255 * v51 - 65280) >> 9)) >> 32;
        *v41++ = (613566757 * (unint64_t)((255 * v52 - 65280) >> 9)) >> 32;
        v47 += 2;
        v39 += 4;
      }
      while (v47 < v38);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v37)
  {
    unint64_t v53 = 0;
    unint64_t v54 = v26 - v37;
    uint64_t v55 = 2 * v14;
    do
    {
      uint32x4_t v56 = v15;
      uint32x4_t v57 = v22;
      uint32x4_t v58 = v23;
      if (v8)
      {
        unsigned int v59 = *v15;
        int v60 = v59 >> 4;
        unsigned int v61 = v15[1];
        if (v59 >> 4 >= 0xF00) {
          int v60 = 3840;
        }
        if (v59 < 0x1000) {
          int v60 = 256;
        }
        if (v61 >> 4 >= 0xF00) {
          int v62 = 3840;
        }
        else {
          int v62 = v61 >> 4;
        }
        if (v61 >= 0x1000) {
          int v63 = v62;
        }
        else {
          int v63 = 256;
        }
        uint32x4_t v56 = v15 + 4;
        *unint64_t v22 = (613566757 * (unint64_t)((255 * v60 - 65280) >> 9)) >> 32;
        uint32x4_t v57 = v22 + 1;
        *unint64_t v23 = (613566757 * (unint64_t)((255 * v63 - 65280) >> 9)) >> 32;
        uint32x4_t v58 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v64 = 0;
        do
        {
          unsigned int v65 = *v56;
          int v66 = v65 >> 4;
          unsigned int v67 = v56[1];
          if (v65 >> 4 >= 0xF00) {
            int v66 = 3840;
          }
          if (v65 >= 0x1000) {
            int v68 = v66;
          }
          else {
            int v68 = 256;
          }
          if (v67 >> 4 >= 0xF00) {
            int v69 = 3840;
          }
          else {
            int v69 = v67 >> 4;
          }
          if (v67 < 0x1000) {
            int v69 = 256;
          }
          *v57++ = (613566757 * (unint64_t)((255 * v68 - 65280) >> 9)) >> 32;
          *v58++ = (613566757 * (unint64_t)((255 * v69 - 65280) >> 9)) >> 32;
          v64 += 2;
          v56 += 4;
        }
        while (v64 < v38);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v55);
      v22 += v20;
      v23 += v21;
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_Copy_tv44_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = *a3 + *a4 * v15;
    uint64_t v18 = a3[1] + v12 * v15 + 4 * v16;
    uint64_t v19 = v17 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v20 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          unint64_t v22 = (_WORD *)(v14 + 2 * v20);
          __int16 v23 = *(_WORD *)(v18 + v20) & 0xFFF0;
          __int16 v24 = *(_WORD *)(v18 + v20 + 2) & 0xFFF0;
          __int16 v25 = *(_WORD *)(v19 + 2 * i) & 0xFFF0;
          *unint64_t v22 = -1;
          v22[1] = v25;
          v22[2] = v23;
          v22[3] = v24;
          v20 += 4;
        }
      }
      v19 += v11;
      v14 += v13;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_tv44_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = *a3 + *a4 * v15;
    uint64_t v18 = a3[1] + v12 * v15 + 4 * v16;
    uint64_t v19 = v17 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v20 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          unint64_t v22 = (unsigned char *)(v14 + v20);
          char v23 = *(unsigned char *)(v18 + v20 + 1);
          char v24 = *(unsigned char *)(v18 + v20 + 3);
          char v25 = *(unsigned char *)(v19 + 2 * i + 1);
          *unint64_t v22 = -1;
          v22[1] = v25;
          v22[2] = v23;
          v22[3] = v24;
          v20 += 4;
        }
      }
      v19 += v11;
      v14 += v13;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_tv44_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (_WORD *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v15 + 2 * v14;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(_WORD *)(v24 + 2 * i) & 0xFFF0;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v26 = v8 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      __int16 v34 = v13[1] & 0xFFF0;
      uint64_t v32 = v13 + 2;
      *uint64_t v17 = *v13 & 0xFFF0;
      v17[1] = v34;
      uint64_t v33 = v17 + 2;
    }
    else
    {
      uint64_t v32 = v13;
      uint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        __int16 v37 = *v32 & 0xFFF0;
        __int16 v38 = v32[1] & 0xFFF0;
        v32 += 2;
        *uint64_t v33 = v37;
        v33[1] = v38;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      __int16 v39 = *v32 & 0xFFF0;
      __int16 v40 = v32[1] & 0xFFF0;
      *uint64_t v33 = v39;
      v33[1] = v40;
    }
    uint64_t v13 = (_WORD *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v11 - v27;
    do
    {
      int v43 = v13;
      unsigned int v44 = v17;
      if (v28)
      {
        __int16 v45 = v13[1] & 0xFFF0;
        int v43 = v13 + 2;
        *uint64_t v17 = *v13 & 0xFFF0;
        v17[1] = v45;
        unsigned int v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          __int16 v48 = *v43 & 0xFFF0;
          __int16 v49 = v43[1] & 0xFFF0;
          v43 += 2;
          *unsigned int v44 = v48;
          v44[1] = v49;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        __int16 v50 = *v43 & 0xFFF0;
        __int16 v51 = v43[1] & 0xFFF0;
        *unsigned int v44 = v50;
        v44[1] = v51;
      }
      uint64_t v13 = (_WORD *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if (v28)
    {
      __int16 v52 = *v13 & 0xFFF0;
      __int16 v53 = v13[1] & 0xFFF0;
      v13 += 2;
      *uint64_t v17 = v52;
      v17[1] = v53;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        __int16 v55 = *v13 & 0xFFF0;
        __int16 v56 = v13[1] & 0xFFF0;
        v13 += 2;
        *uint64_t v17 = v55;
        v17[1] = v56;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      __int16 v57 = *v13 & 0xFFF0;
      __int16 v58 = v13[1] & 0xFFF0;
      *uint64_t v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFF0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unint64_t v36 = v14 + 4;
      unsigned int v38 = ((v14[3] & 0xFFF0) + (v14[1] & 0xFFF0u)) >> 1;
      _WORD *v21 = ((v14[2] & 0xFFF0) + (*v14 & 0xFFF0u)) >> 1;
      v21[1] = v38;
      __int16 v37 = v21 + 2;
    }
    else
    {
      unint64_t v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        __int16 v40 = &v37[v39];
        unsigned int v41 = ((v36[3] & 0xFFF0) + (v36[1] & 0xFFF0u)) >> 1;
        *__int16 v40 = ((v36[2] & 0xFFF0) + (*v36 & 0xFFF0u)) >> 1;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      unsigned int v44 = v14;
      __int16 v45 = v21;
      if (v34)
      {
        unsigned int v44 = v14 + 4;
        unsigned int v46 = ((v14[3] & 0xFFF0) + (v14[1] & 0xFFF0u)) >> 1;
        _WORD *v21 = ((v14[2] & 0xFFF0) + (*v14 & 0xFFF0u)) >> 1;
        v21[1] = v46;
        __int16 v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          unsigned int v49 = ((v44[3] & 0xFFF0) + (v44[1] & 0xFFF0u)) >> 1;
          *__int16 v48 = ((v44[2] & 0xFFF0) + (*v44 & 0xFFF0u)) >> 1;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = *v14 & 0xFFF0;
      int v51 = v14[1] & 0xFFF0;
      int v52 = v14[2] & 0xFFF0;
      int v53 = v14[3] & 0xFFF0;
      v14 += 4;
      _WORD *v21 = (v52 + v50) >> 1;
      v21[1] = (v53 + v51) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        __int16 v55 = &v21[v54];
        unsigned int v56 = ((v14[3] & 0xFFF0) + (v14[1] & 0xFFF0u)) >> 1;
        *__int16 v55 = ((v14[2] & 0xFFF0) + (*v14 & 0xFFF0u)) >> 1;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFF0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      __int16 v38 = v14[1] & 0xFFF0;
      unint64_t v36 = v14 + 4;
      _WORD *v21 = *v14 & 0xFFF0;
      v21[1] = v38;
      __int16 v37 = v21 + 2;
    }
    else
    {
      unint64_t v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        __int16 v40 = &v37[v39];
        __int16 v41 = v36[1] & 0xFFF0;
        *__int16 v40 = *v36 & 0xFFF0;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      unsigned int v44 = v14;
      __int16 v45 = v21;
      if (v34)
      {
        __int16 v46 = v14[1] & 0xFFF0;
        unsigned int v44 = v14 + 4;
        _WORD *v21 = *v14 & 0xFFF0;
        v21[1] = v46;
        __int16 v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          __int16 v49 = v44[1] & 0xFFF0;
          *__int16 v48 = *v44 & 0xFFF0;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      __int16 v50 = *v14 & 0xFFF0;
      __int16 v51 = v14[1] & 0xFFF0;
      v14 += 4;
      _WORD *v21 = v50;
      v21[1] = v51;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        __int16 v54 = v14[1] & 0xFFF0;
        *int v53 = *v14 & 0xFFF0;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_Copy_tv44_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a4[1];
  uint64_t v11 = (_WORD *)(a3[1] + v10 * v9 + 4 * v8);
  uint64_t v12 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v14 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v13 + 4 * v12);
  if (a2[2] >= v14) {
    unint64_t v18 = v14;
  }
  else {
    unint64_t v18 = a2[2];
  }
  if (a2[3] >= v15) {
    unint64_t v19 = v15;
  }
  else {
    unint64_t v19 = a2[3];
  }
  if (v19)
  {
    uint64_t v61 = a8[1];
    uint64_t v62 = a4[1];
    unint64_t v63 = v19;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    unint64_t v23 = (char *)(a7[2] + v22 * v13 + 2 * v12);
    uint64_t v24 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    uint64_t v25 = (char *)(*a3 + *a4 * v9 + 2 * v8);
    unint64_t v64 = v18;
    size_t v26 = 2 * v18;
    do
    {
      memcpy(v24, v25, v26);
      memset(v23, 255, v26);
      v25 += v20;
      v24 += v21;
      v23 += v22;
      --v19;
    }
    while (v19);
    uint64_t v16 = v61;
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    unint64_t v19 = v63;
    unint64_t v18 = v64;
    uint64_t v10 = v62;
  }
  unint64_t v27 = v9 & 1;
  if (v19 >= v27) {
    uint64_t v28 = v9 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v8;
  unint64_t v30 = v8 & 1;
  if (v18 >= v30) {
    unint64_t v31 = v30;
  }
  else {
    unint64_t v31 = 0;
  }
  unint64_t v32 = v18 - v31;
  if (v9)
  {
    if (v29)
    {
      __int16 v35 = v11[1] & 0xFFF0;
      uint64_t v33 = v11 + 2;
      *uint64_t v17 = *v11 & 0xFFF0;
      v17[1] = v35;
      char v34 = v17 + 2;
    }
    else
    {
      uint64_t v33 = v11;
      char v34 = v17;
    }
    if (v18 == v31)
    {
      unint64_t v36 = 0;
    }
    else
    {
      unint64_t v37 = v18 - v31;
      do
      {
        __int16 v38 = *v33 & 0xFFF0;
        __int16 v39 = v33[1] & 0xFFF0;
        v33 += 2;
        *char v34 = v38;
        v34[1] = v39;
        v34 += 2;
        --v37;
      }
      while (v37);
      unint64_t v36 = v18 - v31;
    }
    if (v36 + v30 < v18)
    {
      __int16 v40 = *v33 & 0xFFF0;
      __int16 v41 = v33[1] & 0xFFF0;
      *char v34 = v40;
      v34[1] = v41;
    }
    uint64_t v11 = (_WORD *)((char *)v11 + v10);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v28)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v19 - v28;
    do
    {
      unsigned int v44 = v11;
      __int16 v45 = v17;
      if (v29)
      {
        __int16 v46 = v11[1] & 0xFFF0;
        unsigned int v44 = v11 + 2;
        *uint64_t v17 = *v11 & 0xFFF0;
        v17[1] = v46;
        __int16 v45 = v17 + 2;
      }
      if (v18 == v31)
      {
        unint64_t v47 = 0;
      }
      else
      {
        unint64_t v48 = v18 - v31;
        do
        {
          __int16 v49 = *v44 & 0xFFF0;
          __int16 v50 = v44[1] & 0xFFF0;
          v44 += 2;
          *__int16 v45 = v49;
          v45[1] = v50;
          v45 += 2;
          --v48;
        }
        while (v48);
        unint64_t v47 = v18 - v31;
      }
      if (v47 + v30 < v18)
      {
        __int16 v51 = *v44 & 0xFFF0;
        __int16 v52 = v44[1] & 0xFFF0;
        *__int16 v45 = v51;
        v45[1] = v52;
      }
      uint64_t v11 = (_WORD *)((char *)v11 + v10);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v19)
  {
    if (v29)
    {
      __int16 v53 = *v11 & 0xFFF0;
      __int16 v54 = v11[1] & 0xFFF0;
      v11 += 2;
      *uint64_t v17 = v53;
      v17[1] = v54;
      v17 += 2;
    }
    if (v18 == v31)
    {
      unint64_t v32 = 0;
    }
    else
    {
      unint64_t v55 = v18 - v31;
      do
      {
        __int16 v56 = *v11 & 0xFFF0;
        __int16 v57 = v11[1] & 0xFFF0;
        v11 += 2;
        *uint64_t v17 = v56;
        v17[1] = v57;
        v17 += 2;
        --v55;
      }
      while (v55);
    }
    if (v32 + v30 < v18)
    {
      __int16 v58 = v11[1] & 0xFFF0;
      *uint64_t v17 = *v11 & 0xFFF0;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  unint64_t v14 = *(void *)(a6 + 24);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v15;
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v21) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= v14) {
    unint64_t v23 = v14;
  }
  else {
    unint64_t v23 = *(void *)(a2 + 24);
  }
  if (v23)
  {
    uint64_t v58 = a8[1];
    uint64_t v60 = a4[1];
    unint64_t v61 = v22;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    unint64_t v27 = (char *)(a7[2] + v26 * v17 + v18);
    uint64_t v28 = (char *)(*a7 + *a8 * v17 + v18);
    char v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    size_t v30 = 2 * v22;
    unint64_t v59 = v23;
    do
    {
      memcpy(v28, v29, v30);
      memset(v27, 255, v30);
      v29 += v24;
      v28 += v25;
      v27 += v26;
      --v23;
    }
    while (v23);
    uint64_t v19 = v58;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v60;
    unint64_t v22 = v61;
    unint64_t v23 = v59;
  }
  unint64_t v31 = v11 & 1;
  if (v23 >= v31) {
    uint64_t v32 = v11 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v34 = v22 - v9;
  if (v11)
  {
    if (v33)
    {
      __int16 v35 = v13 + 4;
      int v37 = (v13[3] >> 4) + (v13[1] >> 4);
      *uint64_t v20 = (8 * ((v13[2] >> 4) + (*v13 >> 4)) + 8) & 0xFFF0;
      v20[1] = (8 * v37 + 8) & 0xFFF0;
      unint64_t v36 = v20 + 2;
    }
    else
    {
      __int16 v35 = v13;
      unint64_t v36 = v20;
    }
    if (v22 != v9)
    {
      unint64_t v38 = 0;
      do
      {
        __int16 v39 = &v36[v38];
        int v40 = ((unsigned __int16)v35[3] >> 4) + ((unsigned __int16)v35[1] >> 4);
        *__int16 v39 = (8 * ((v35[2] >> 4) + (*v35 >> 4)) + 8) & 0xFFF0;
        v39[1] = (8 * v40 + 8) & 0xFFF0;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v23 - v32;
    do
    {
      uint64_t v43 = v13;
      unsigned int v44 = v20;
      if (v33)
      {
        uint64_t v43 = v13 + 4;
        int v45 = (v13[3] >> 4) + (v13[1] >> 4);
        *uint64_t v20 = (8 * ((v13[2] >> 4) + (*v13 >> 4)) + 8) & 0xFFF0;
        v20[1] = (8 * v45 + 8) & 0xFFF0;
        unsigned int v44 = v20 + 2;
      }
      if (v22 != v9)
      {
        unint64_t v46 = 0;
        do
        {
          unint64_t v47 = &v44[v46];
          int v48 = ((unsigned __int16)v43[3] >> 4) + ((unsigned __int16)v43[1] >> 4);
          _WORD *v47 = (8 * ((v43[2] >> 4) + (*v43 >> 4)) + 8) & 0xFFF0;
          v47[1] = (8 * v48 + 8) & 0xFFF0;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v20 = (_WORD *)((char *)v20 + v19);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v23)
  {
    if (v33)
    {
      unsigned int v49 = *v13;
      unsigned int v50 = v13[1];
      int v51 = v13[2] >> 4;
      int v52 = v13[3] >> 4;
      v13 += 4;
      *uint64_t v20 = (8 * (v51 + (v49 >> 4)) + 8) & 0xFFF0;
      v20[1] = (8 * (v52 + (v50 >> 4)) + 8) & 0xFFF0;
      v20 += 2;
    }
    if (v22 != v9)
    {
      unint64_t v53 = 0;
      do
      {
        __int16 v54 = &v20[v53];
        int v55 = (v13[3] >> 4) + (v13[1] >> 4);
        *__int16 v54 = (8 * ((v13[2] >> 4) + (*v13 >> 4)) + 8) & 0xFFF0;
        v54[1] = (8 * v55 + 8) & 0xFFF0;
        v53 += 2;
        v13 += 4;
      }
      while (v53 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (_WORD *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  unint64_t v14 = *(void *)(a6 + 24);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v15;
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v21) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= v14) {
    unint64_t v23 = v14;
  }
  else {
    unint64_t v23 = *(void *)(a2 + 24);
  }
  if (v23)
  {
    uint64_t v56 = a8[1];
    uint64_t v58 = a4[1];
    unint64_t v59 = v22;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    unint64_t v27 = (char *)(a7[2] + v26 * v17 + v18);
    uint64_t v28 = (char *)(*a7 + *a8 * v17 + v18);
    char v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    size_t v30 = 2 * v22;
    unint64_t v57 = v23;
    do
    {
      memcpy(v28, v29, v30);
      memset(v27, 255, v30);
      v29 += v24;
      v28 += v25;
      v27 += v26;
      --v23;
    }
    while (v23);
    uint64_t v19 = v56;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v58;
    unint64_t v22 = v59;
    unint64_t v23 = v57;
  }
  unint64_t v31 = v11 & 1;
  if (v23 >= v31) {
    uint64_t v32 = v11 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v34 = v22 - v9;
  if (v11)
  {
    if (v33)
    {
      __int16 v37 = v13[1] & 0xFFF0;
      __int16 v35 = v13 + 4;
      *uint64_t v20 = *v13 & 0xFFF0;
      v20[1] = v37;
      unint64_t v36 = v20 + 2;
    }
    else
    {
      __int16 v35 = v13;
      unint64_t v36 = v20;
    }
    if (v22 != v9)
    {
      unint64_t v38 = 0;
      do
      {
        __int16 v39 = &v36[v38];
        __int16 v40 = v35[1] & 0xFFF0;
        *__int16 v39 = *v35 & 0xFFF0;
        v39[1] = v40;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    uint64_t v13 = (_WORD *)((char *)v13 + v12);
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v23 - v32;
    do
    {
      uint64_t v43 = v13;
      unsigned int v44 = v20;
      if (v33)
      {
        __int16 v45 = v13[1] & 0xFFF0;
        uint64_t v43 = v13 + 4;
        *uint64_t v20 = *v13 & 0xFFF0;
        v20[1] = v45;
        unsigned int v44 = v20 + 2;
      }
      if (v22 != v9)
      {
        unint64_t v46 = 0;
        do
        {
          unint64_t v47 = &v44[v46];
          __int16 v48 = v43[1] & 0xFFF0;
          _WORD *v47 = *v43 & 0xFFF0;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      uint64_t v13 = (_WORD *)((char *)v13 + v12);
      uint64_t v20 = (_WORD *)((char *)v20 + v19);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v23)
  {
    if (v33)
    {
      __int16 v49 = *v13 & 0xFFF0;
      __int16 v50 = v13[1] & 0xFFF0;
      v13 += 4;
      *uint64_t v20 = v49;
      v20[1] = v50;
      v20 += 2;
    }
    if (v22 != v9)
    {
      unint64_t v51 = 0;
      do
      {
        int v52 = &v20[v51];
        __int16 v53 = v13[1] & 0xFFF0;
        *int v52 = *v13 & 0xFFF0;
        v52[1] = v53;
        v51 += 2;
        v13 += 4;
      }
      while (v51 < v34);
    }
  }
  return 0;
}

uint64_t vt_Copy_tv44_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v15 + 2 * v14;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(_WORD *)(v24 + 2 * i) & 0xFFC0;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v26 = v8 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      uint64_t v32 = v13 + 2;
      __int16 v34 = v13[1] & 0xFFC0;
      *uint64_t v17 = *v13 & 0xFFC0;
      v17[1] = v34;
      char v33 = v17 + 2;
    }
    else
    {
      uint64_t v32 = v13;
      char v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        __int16 v37 = *v32;
        __int16 v38 = v32[1];
        v32 += 2;
        *char v33 = v37 & 0xFFC0;
        v33[1] = v38 & 0xFFC0;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      __int16 v39 = *v32 & 0xFFC0;
      __int16 v40 = v32[1] & 0xFFC0;
      *char v33 = v39;
      v33[1] = v40;
    }
    uint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v11 - v27;
    do
    {
      uint64_t v43 = v13;
      unsigned int v44 = v17;
      if (v28)
      {
        uint64_t v43 = v13 + 2;
        __int16 v45 = v13[1] & 0xFFC0;
        *uint64_t v17 = *v13 & 0xFFC0;
        v17[1] = v45;
        unsigned int v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          __int16 v48 = *v43;
          __int16 v49 = v43[1];
          v43 += 2;
          *unsigned int v44 = v48 & 0xFFC0;
          v44[1] = v49 & 0xFFC0;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        __int16 v50 = *v43 & 0xFFC0;
        __int16 v51 = v43[1] & 0xFFC0;
        *unsigned int v44 = v50;
        v44[1] = v51;
      }
      uint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if (v28)
    {
      __int16 v52 = *v13;
      __int16 v53 = v13[1];
      v13 += 2;
      *uint64_t v17 = v52 & 0xFFC0;
      v17[1] = v53 & 0xFFC0;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        __int16 v55 = *v13;
        __int16 v56 = v13[1];
        v13 += 2;
        *uint64_t v17 = v55 & 0xFFC0;
        v17[1] = v56 & 0xFFC0;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      __int16 v57 = *v13 & 0xFFC0;
      __int16 v58 = v13[1] & 0xFFC0;
      *uint64_t v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unint64_t v36 = v14 + 4;
      int v38 = (v14[3] >> 6) + (v14[1] >> 6);
      _WORD *v21 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
      v21[1] = (32 * v38 + 32) & 0xFFC0;
      __int16 v37 = v21 + 2;
    }
    else
    {
      unint64_t v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        __int16 v40 = &v37[v39];
        int v41 = ((unsigned __int16)v36[3] >> 6) + ((unsigned __int16)v36[1] >> 6);
        *__int16 v40 = (32 * ((v36[2] >> 6) + (*v36 >> 6)) + 32) & 0xFFC0;
        v40[1] = (32 * v41 + 32) & 0xFFC0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      unsigned int v44 = v14;
      __int16 v45 = v21;
      if (v34)
      {
        unsigned int v44 = v14 + 4;
        int v46 = (v14[3] >> 6) + (v14[1] >> 6);
        _WORD *v21 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v21[1] = (32 * v46 + 32) & 0xFFC0;
        __int16 v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          int v49 = ((unsigned __int16)v44[3] >> 6) + ((unsigned __int16)v44[1] >> 6);
          *__int16 v48 = (32 * ((v44[2] >> 6) + (*v44 >> 6)) + 32) & 0xFFC0;
          v48[1] = (32 * v49 + 32) & 0xFFC0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      unsigned int v50 = *v14;
      unsigned int v51 = v14[1];
      unsigned int v52 = v14[2];
      unsigned int v53 = v14[3];
      v14 += 4;
      _WORD *v21 = (32 * ((v52 >> 6) + (v50 >> 6)) + 32) & 0xFFC0;
      v21[1] = (32 * ((v53 >> 6) + (v51 >> 6)) + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        __int16 v55 = &v21[v54];
        int v56 = (v14[3] >> 6) + (v14[1] >> 6);
        *__int16 v55 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v55[1] = (32 * v56 + 32) & 0xFFC0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unint64_t v36 = v14 + 4;
      __int16 v38 = v14[1] & 0xFFC0;
      _WORD *v21 = *v14 & 0xFFC0;
      v21[1] = v38;
      __int16 v37 = v21 + 2;
    }
    else
    {
      unint64_t v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        __int16 v40 = &v37[v39];
        __int16 v41 = v36[1] & 0xFFC0;
        *__int16 v40 = *v36 & 0xFFC0;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      unsigned int v44 = v14;
      __int16 v45 = v21;
      if (v34)
      {
        unsigned int v44 = v14 + 4;
        __int16 v46 = v14[1] & 0xFFC0;
        _WORD *v21 = *v14 & 0xFFC0;
        v21[1] = v46;
        __int16 v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          __int16 v49 = v44[1] & 0xFFC0;
          *__int16 v48 = *v44 & 0xFFC0;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      __int16 v50 = *v14;
      __int16 v51 = v14[1];
      v14 += 4;
      _WORD *v21 = v50 & 0xFFC0;
      v21[1] = v51 & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        unsigned int v53 = &v21[v52];
        __int16 v54 = v14[1] & 0xFFC0;
        *unsigned int v53 = *v14 & 0xFFC0;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_Copy_tv44_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = a3[1] + v12 * v8 + 4 * v9;
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v15 + 2 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v15 + v14;
    uint64_t v23 = *a7 + *a8 * v15 + v14;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(unsigned char *)(v22 + i) = -1;
          *(unsigned char *)(v23 + i) = *(unsigned char *)(v24 + 2 * i + 1);
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v26 = v8 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    uint64_t v29 = v9 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v9)
    {
      char v33 = *(unsigned char *)(v13 + 3);
      uint64_t v31 = v13 + 4;
      *uint64_t v17 = *(unsigned char *)(v13 + 1);
      v17[1] = v33;
      unint64_t v32 = v17 + 2;
    }
    else
    {
      uint64_t v31 = v13;
      unint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        char v36 = *(unsigned char *)(v31 + 1);
        char v37 = *(unsigned char *)(v31 + 3);
        v31 += 4;
        *unint64_t v32 = v36;
        v32[1] = v37;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      char v38 = *(unsigned char *)(v31 + 1);
      char v39 = *(unsigned char *)(v31 + 3);
      *unint64_t v32 = v38;
      v32[1] = v39;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v27)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v11 - v27;
    do
    {
      uint64_t v42 = v13;
      uint64_t v43 = v17;
      if (v9)
      {
        char v44 = *(unsigned char *)(v13 + 3);
        uint64_t v42 = v13 + 4;
        *uint64_t v17 = *(unsigned char *)(v13 + 1);
        v17[1] = v44;
        uint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          char v47 = *(unsigned char *)(v42 + 1);
          char v48 = *(unsigned char *)(v42 + 3);
          v42 += 4;
          *uint64_t v43 = v47;
          v43[1] = v48;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        char v49 = *(unsigned char *)(v42 + 1);
        char v50 = *(unsigned char *)(v42 + 3);
        *uint64_t v43 = v49;
        v43[1] = v50;
      }
      v13 += v12;
      v17 += v16;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v26 < v11)
  {
    if (v9)
    {
      char v51 = *(unsigned char *)(v13 + 1);
      char v52 = *(unsigned char *)(v13 + 3);
      v13 += 4;
      *uint64_t v17 = v51;
      v17[1] = v52;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        char v54 = *(unsigned char *)(v13 + 1);
        char v55 = *(unsigned char *)(v13 + 3);
        v13 += 4;
        *uint64_t v17 = v54;
        v17[1] = v55;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      char v56 = *(unsigned char *)(v13 + 1);
      char v57 = *(unsigned char *)(v13 + 3);
      *uint64_t v17 = v56;
      v17[1] = v57;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = a7[2] + v26 * v18 + v16;
    uint64_t v28 = *a7 + *a8 * v18 + v16;
    uint64_t v29 = *a3 + v24 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v27 + i) = -1;
          *(unsigned char *)(v28 + i) = *(unsigned char *)(v29 + 2 * i + 1);
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v21 - v10;
  if (v12)
  {
    if (v33)
    {
      unint64_t v35 = v14 + 8;
      unsigned int v37 = (v14[3] + v14[7] + 1) >> 1;
      *uint64_t v20 = (v14[1] + v14[5] + 1) >> 1;
      v20[1] = v37;
      char v36 = v20 + 2;
    }
    else
    {
      unint64_t v35 = v14;
      char v36 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v38 = 0;
      do
      {
        char v39 = &v36[v38];
        unsigned int v40 = (v35[3] + v35[7] + 1) >> 1;
        *char v39 = (v35[1] + v35[5] + 1) >> 1;
        v39[1] = v40;
        v38 += 2;
        v35 += 8;
      }
      while (v38 < v34);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v32)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v8 - v32;
    do
    {
      uint64_t v43 = v14;
      char v44 = v20;
      if (v33)
      {
        uint64_t v43 = v14 + 8;
        unsigned int v45 = (v14[3] + v14[7] + 1) >> 1;
        *uint64_t v20 = (v14[1] + v14[5] + 1) >> 1;
        v20[1] = v45;
        char v44 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          char v47 = &v44[v46];
          unsigned int v48 = (v43[3] + v43[7] + 1) >> 1;
          unsigned char *v47 = (v43[1] + v43[5] + 1) >> 1;
          v47[1] = v48;
          v46 += 2;
          v43 += 8;
        }
        while (v46 < v34);
      }
      v14 += v13;
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v8)
  {
    if (v33)
    {
      int v49 = v14[1];
      int v50 = v14[3];
      int v51 = v14[5];
      int v52 = v14[7];
      v14 += 8;
      *uint64_t v20 = (v49 + v51 + 1) >> 1;
      v20[1] = (v50 + v52 + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v53 = 0;
      do
      {
        char v54 = &v20[v53];
        unsigned int v55 = (v14[3] + v14[7] + 1) >> 1;
        *char v54 = (v14[1] + v14[5] + 1) >> 1;
        v54[1] = v55;
        v53 += 2;
        v14 += 8;
      }
      while (v53 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = a3[1] + v13 * v12 + 4 * (v10 + v9);
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = a7[2] + v26 * v18 + v16;
    uint64_t v28 = *a7 + *a8 * v18 + v16;
    uint64_t v29 = *a3 + v24 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v27 + i) = -1;
          *(unsigned char *)(v28 + i) = *(unsigned char *)(v29 + 2 * i + 1);
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v21 - v10;
  if (v12)
  {
    if (v33)
    {
      char v37 = *(unsigned char *)(v14 + 3);
      uint64_t v35 = v14 + 8;
      *uint64_t v20 = *(unsigned char *)(v14 + 1);
      v20[1] = v37;
      char v36 = v20 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      char v36 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v38 = 0;
      do
      {
        char v39 = &v36[v38];
        char v40 = *(unsigned char *)(v35 + 3);
        *char v39 = *(unsigned char *)(v35 + 1);
        v39[1] = v40;
        v38 += 2;
        v35 += 8;
      }
      while (v38 < v34);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v32)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v8 - v32;
    do
    {
      uint64_t v43 = v14;
      char v44 = v20;
      if (v33)
      {
        char v45 = *(unsigned char *)(v14 + 3);
        uint64_t v43 = v14 + 8;
        *uint64_t v20 = *(unsigned char *)(v14 + 1);
        v20[1] = v45;
        char v44 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          char v47 = &v44[v46];
          char v48 = *(unsigned char *)(v43 + 3);
          unsigned char *v47 = *(unsigned char *)(v43 + 1);
          v47[1] = v48;
          v46 += 2;
          v43 += 8;
        }
        while (v46 < v34);
      }
      v14 += v13;
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v8)
  {
    if (v33)
    {
      char v49 = *(unsigned char *)(v14 + 1);
      char v50 = *(unsigned char *)(v14 + 3);
      v14 += 8;
      *uint64_t v20 = v49;
      v20[1] = v50;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v51 = 0;
      do
      {
        int v52 = &v20[v51];
        char v53 = *(unsigned char *)(v14 + 3);
        *int v52 = *(unsigned char *)(v14 + 1);
        v52[1] = v53;
        v51 += 2;
        v14 += 8;
      }
      while (v51 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tv44_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    if (v13 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v27 + v30;
    uint64_t v32 = a7[2] + v29 * v18 + v16;
    uint64_t v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(unsigned char *)(v32 + i) = -1;
          *(unsigned char *)(v33 + i) = *(unsigned char *)(v31 + 2 * i + 1);
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      char v37 = v15 + 8;
      unsigned int v39 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      unsigned char *v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v21[1] = v39;
      unint64_t v38 = v21 + 2;
    }
    else
    {
      char v37 = v15;
      unint64_t v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v40 = 0;
      unint64_t v41 = v37 + 4;
      do
      {
        uint64_t v42 = &v38[v40];
        unsigned int v43 = (*(v41 - 1) + v41[3] + v41[v14 - 1] + v41[v14 + 3] + 2) >> 2;
        *uint64_t v42 = (*(v41 - 3) + v41[1] + v41[v14 - 3] + v41[v14 + 1] + 2) >> 2;
        v42[1] = v43;
        v40 += 2;
        v41 += 8;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v24 - v35;
    do
    {
      unint64_t v46 = v15;
      char v47 = v21;
      if (v9)
      {
        unint64_t v46 = v15 + 8;
        unsigned int v48 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        unsigned char *v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v21[1] = v48;
        char v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v49 = 0;
        char v50 = v46 + 4;
        do
        {
          unint64_t v51 = &v47[v49];
          unsigned int v52 = (*(v50 - 1) + v50[3] + v50[v14 - 1] + v50[v14 + 3] + 2) >> 2;
          *unint64_t v51 = (*(v50 - 3) + v50[1] + v50[v14 - 3] + v50[v14 + 1] + 2) >> 2;
          v51[1] = v52;
          v49 += 2;
          v50 += 8;
        }
        while (v49 < v36);
      }
      v15 += 2 * v14;
      v21 += v20;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyDec_tv44_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  uint64_t v15 = a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    if (v13 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v27 + v30;
    uint64_t v32 = a7[2] + v29 * v18 + v16;
    uint64_t v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(unsigned char *)(v32 + i) = -1;
          *(unsigned char *)(v33 + i) = *(unsigned char *)(v31 + 2 * i + 1);
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      char v39 = *(unsigned char *)(v15 + 3);
      uint64_t v37 = v15 + 8;
      unsigned char *v21 = *(unsigned char *)(v15 + 1);
      v21[1] = v39;
      unint64_t v38 = v21 + 2;
    }
    else
    {
      uint64_t v37 = v15;
      unint64_t v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        unint64_t v41 = &v38[v40];
        char v42 = *(unsigned char *)(v37 + 3);
        unsigned char *v41 = *(unsigned char *)(v37 + 1);
        v41[1] = v42;
        v40 += 2;
        v37 += 8;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v24 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      uint64_t v46 = v15;
      char v47 = v21;
      if (v9)
      {
        char v48 = *(unsigned char *)(v15 + 3);
        uint64_t v46 = v15 + 8;
        unsigned char *v21 = *(unsigned char *)(v15 + 1);
        v21[1] = v48;
        char v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          char v50 = &v47[v49];
          char v51 = *(unsigned char *)(v46 + 3);
          unsigned char *v50 = *(unsigned char *)(v46 + 1);
          v50[1] = v51;
          v49 += 2;
          v46 += 8;
        }
        while (v49 < v36);
      }
      v15 += v45;
      v21 += v20;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_tf44_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = a3[1] + v12 * v15 + 4 * v16;
    uint64_t v18 = *a3 + *a4 * v15 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          unint64_t v21 = (_WORD *)(v14 + 2 * v19);
          unint64_t v22 = (268501009 * (unint64_t)(57344 * (*(unsigned __int16 *)(v17 + v19) >> 4))) >> 40;
          unint64_t v23 = (268501009 * (unint64_t)(57344 * (*(unsigned __int16 *)(v17 + v19 + 2) >> 4))) >> 40;
          unint64_t v24 = (268501009 * (unint64_t)(56064 * (*(unsigned __int16 *)(v18 + 2 * i) >> 4))) >> 40;
          _WORD *v21 = -1;
          v21[1] = v24 + 4096;
          v21[2] = v22 + 4096;
          v21[3] = v23 + 4096;
          v19 += 4;
        }
      }
      v18 += v11;
      v14 += v13;
      v17 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_tf44_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = a3[1] + v12 * v15 + 4 * v16;
    uint64_t v18 = *a3 + *a4 * v15 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          unint64_t v21 = (unsigned char *)(v14 + v19);
          unint64_t v22 = (1048833 * (unint64_t)(224 * (*(unsigned __int16 *)(v17 + v19) >> 4))) >> 32;
          unint64_t v23 = (1048833 * (unint64_t)(224 * (*(unsigned __int16 *)(v17 + v19 + 2) >> 4))) >> 32;
          unint64_t v24 = (1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v18 + 2 * i) >> 4))) >> 32;
          unsigned char *v21 = -1;
          v21[1] = v24 + 16;
          v21[2] = v22 + 16;
          v21[3] = v23 + 16;
          v19 += 4;
        }
      }
      v18 += v11;
      v14 += v13;
      v17 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a8;
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v14 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          unint64_t v22 = (_WORD *)(v16 + v20);
          unint64_t v23 = (unsigned __int16 *)(v19 + 2 * i);
          unsigned int v24 = ((((268501009 * (unint64_t)(57344 * (*(unsigned __int16 *)(v18 + v20 + 2) >> 4))) >> 32) >> 8)
               + (((268501009 * (unint64_t)(57344 * (*(unsigned __int16 *)(v18 + v20 + 6) >> 4))) >> 32) >> 8)
               + 8193) >> 1;
          unint64_t v25 = (268501009 * (unint64_t)(56064 * (*v23 >> 4))) >> 40;
          unint64_t v26 = (268501009 * (unint64_t)(56064 * (v23[1] >> 4))) >> 40;
          *unint64_t v22 = ((((268501009 * (unint64_t)(57344 * (*(unsigned __int16 *)(v18 + v20) >> 4))) >> 32) >> 8)
                + (((268501009 * (unint64_t)(57344 * (*(unsigned __int16 *)(v18 + v20 + 4) >> 4))) >> 32) >> 8)
                + 8193) >> 1;
          v22[1] = v25 + 4096;
          v22[2] = v24;
          v22[3] = v26 + 4096;
          v20 += 8;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_v216(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t *a13)
{
  unint64_t v13 = *(void *)(a7 + 24);
  uint64_t v14 = (*(void *)(a7 + 32) & 1) + *(void *)(a7 + 32);
  uint64_t v15 = (*(void *)(a11 + 32) & 1) + *(void *)(a11 + 32);
  unint64_t v16 = ((*(_DWORD *)(a7 + 16) + *(void *)(a7 + 32)) & 0xFFFFFFFE) - v14;
  if (v16 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v16 = ((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v13 >= *(void *)(a11 + 24)) {
    unint64_t v13 = *(void *)(a11 + 24);
  }
  if (v13)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a13;
    uint64_t v19 = *a9;
    uint64_t v20 = a9[1];
    uint64_t v21 = *a12 + *a13 * *(void *)(a11 + 40) + 2 * v15;
    uint64_t v22 = *(void *)(a7 + 40);
    uint64_t v23 = a8[1] + v20 * v22 + 4 * v14;
    uint64_t v24 = *a8 + *a9 * v22 + 2 * v14;
    uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0x100101u);
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        uint64_t v28 = (double *)v21;
        do
        {
          uint64_t v29 = (__int16 *)(v23 + 4 * v27);
          a4.i16[0] = *v29;
          a5.i16[0] = *(_WORD *)(v24 + v26);
          a5.i16[2] = *(_WORD *)(v24 + v26 + 2);
          a4.i16[2] = v29[1];
          int32x4_t v30 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 4uLL), (uint16x4_t)0xDB00DB00E000E000);
          int32x4_t v31 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v30.i8, *(uint32x2_t *)v25.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v30, v25));
          *(int16x4_t *)v30.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v31, (uint32x4_t)vsubq_s32(v30, v31), 1uLL), 0xBuLL), (int16x4_t)0x1000100010001000);
          a5 = vrev32_s16(*(int16x4_t *)v30.i8);
          a4 = vuzp1_s16(*(int16x4_t *)v30.i8, a5);
          *v28++ = *(double *)&a4;
          v27 += 2;
          v26 += 4;
        }
        while (v27 < v16);
      }
      v24 += v19;
      v21 += v18;
      v23 += v20;
      ++v17;
    }
    while (v17 != v13);
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    unint64_t v16 = (unsigned char *)(*a7 + *a8 * *(void *)(a6 + 40) + v10);
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        uint64_t v22 = v16;
        do
        {
          uint64_t v23 = (unsigned __int16 *)(v19 + 2 * v21);
          unsigned int v24 = (((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)(v18 + v20 + 2) >> 4))) >> 32)
                             + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)(v18 + v20 + 6) >> 4))) >> 32)
                             + 33) >> 1;
          unint64_t v25 = (1048833 * (unint64_t)(219 * (*v23 >> 4))) >> 32;
          unint64_t v26 = (1048833 * (unint64_t)(219 * (v23[1] >> 4))) >> 32;
          *uint64_t v22 = (((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)(v18 + v20) >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)(v18 + v20 + 4) >> 4))) >> 32)
                              + 33) >> 1;
          v22[1] = v25 + 16;
          v22[2] = v24;
          v22[3] = v26 + 16;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_2vuy(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t *a13)
{
  unint64_t v13 = *(void *)(a7 + 24);
  uint64_t v14 = (*(void *)(a7 + 32) & 1) + *(void *)(a7 + 32);
  uint64_t v15 = (*(void *)(a11 + 32) & 1) + *(void *)(a11 + 32);
  unint64_t v16 = ((*(_DWORD *)(a7 + 16) + *(void *)(a7 + 32)) & 0xFFFFFFFE) - v14;
  if (v16 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v16 = ((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v13 >= *(void *)(a11 + 24)) {
    unint64_t v13 = *(void *)(a11 + 24);
  }
  if (v13)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a13;
    uint64_t v19 = *a9;
    uint64_t v20 = a9[1];
    uint64_t v21 = *a12 + *a13 * *(void *)(a11 + 40) + v15;
    uint64_t v22 = *(void *)(a7 + 40);
    uint64_t v23 = a8[1] + v20 * v22 + 4 * v14;
    uint64_t v24 = *a8 + *a9 * v22 + 2 * v14;
    uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0x100101u);
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        for (unint64_t i = 0; i < v16; i += 2)
        {
          uint64_t v28 = (__int16 *)(v23 + 4 * i);
          a4.i16[0] = *v28;
          a4.i16[2] = v28[1];
          a5.i16[0] = *(_WORD *)(v24 + v26);
          a5.i16[2] = *(_WORD *)(v24 + v26 + 2);
          int32x4_t v29 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 4uLL), (uint16x4_t)0xDB00DB00E000E0);
          int32x4_t v30 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v29.i8, *(uint32x2_t *)v25.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v29, v25));
          int16x8_t v31 = (int16x8_t)vsubq_s32(v29, v30);
          *(int16x4_t *)v31.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v30, (uint32x4_t)v31, 1uLL), 0xBuLL), (int16x4_t)0x10001000100010);
          a5 = vrev32_s16(*(int16x4_t *)v31.i8);
          *(int16x4_t *)v31.i8 = vuzp1_s16(*(int16x4_t *)v31.i8, a5);
          a4 = (int16x4_t)vmovn_s16(v31);
          *(_DWORD *)(v21 + v26) = a4.i32[0];
          v26 += 4;
        }
      }
      v24 += v19;
      v21 += v18;
      v23 += v20;
      ++v17;
    }
    while (v17 != v13);
  }
  return 0;
}

uint64_t vt_Copy_tf44_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  unint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = (((268501009
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v24 + 2 * i) >> 4))) >> 32) >> 8)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  unint64_t v26 = v8 & 1;
  if (v17 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      int v34 = v12[1] >> 4;
      uint64_t v32 = v12 + 2;
      *unint64_t v16 = (((268501009 * (unint64_t)(57344 * (*v12 >> 4))) >> 32) >> 8) + 4096;
      v16[1] = (((268501009 * (unint64_t)(57344 * v34)) >> 32) >> 8) + 4096;
      uint64_t v33 = v16 + 2;
    }
    else
    {
      uint64_t v32 = v12;
      uint64_t v33 = v16;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        int v37 = *v32 >> 4;
        int v38 = v32[1] >> 4;
        v32 += 2;
        *uint64_t v33 = (((268501009 * (unint64_t)(57344 * v37)) >> 32) >> 8) + 4096;
        v33[1] = (((268501009 * (unint64_t)(57344 * v38)) >> 32) >> 8) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      int v39 = *v32 >> 4;
      int v40 = v32[1] >> 4;
      *uint64_t v33 = (((268501009 * (unint64_t)(57344 * v39)) >> 32) >> 8) + 4096;
      v33[1] = (((268501009 * (unint64_t)(57344 * v40)) >> 32) >> 8) + 4096;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    unint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v17 - v27;
    do
    {
      unint64_t v43 = v12;
      unint64_t v44 = v16;
      if (v28)
      {
        int v45 = v12[1] >> 4;
        unint64_t v43 = v12 + 2;
        *unint64_t v16 = (((268501009 * (unint64_t)(57344 * (*v12 >> 4))) >> 32) >> 8) + 4096;
        v16[1] = (((268501009 * (unint64_t)(57344 * v45)) >> 32) >> 8) + 4096;
        unint64_t v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          int v48 = *v43 >> 4;
          int v49 = v43[1] >> 4;
          v43 += 2;
          *unint64_t v44 = (((268501009 * (unint64_t)(57344 * v48)) >> 32) >> 8) + 4096;
          v44[1] = (((268501009 * (unint64_t)(57344 * v49)) >> 32) >> 8) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        int v50 = *v43 >> 4;
        int v51 = v43[1] >> 4;
        *unint64_t v44 = (((268501009 * (unint64_t)(57344 * v50)) >> 32) >> 8) + 4096;
        v44[1] = (((268501009 * (unint64_t)(57344 * v51)) >> 32) >> 8) + 4096;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      unint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if (v28)
    {
      int v52 = *v12 >> 4;
      int v53 = v12[1] >> 4;
      v12 += 2;
      *unint64_t v16 = (((268501009 * (unint64_t)(57344 * v52)) >> 32) >> 8) + 4096;
      v16[1] = (((268501009 * (unint64_t)(57344 * v53)) >> 32) >> 8) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        int v55 = *v12 >> 4;
        int v56 = v12[1] >> 4;
        v12 += 2;
        *unint64_t v16 = (((268501009 * (unint64_t)(57344 * v55)) >> 32) >> 8) + 4096;
        v16[1] = (((268501009 * (unint64_t)(57344 * v56)) >> 32) >> 8) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      int v57 = *v12 >> 4;
      int v58 = v12[1] >> 4;
      *unint64_t v16 = (((268501009 * (unint64_t)(57344 * v57)) >> 32) >> 8) + 4096;
      v16[1] = (((268501009 * (unint64_t)(57344 * v58)) >> 32) >> 8) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf44_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = (((268501009
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v23 + 2 * i) >> 4))) >> 32) >> 8)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1] >> 4;
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = (((268501009 * (unint64_t)(57344 * (*v13 >> 4))) >> 32) >> 8) + 4096;
      v17[1] = (((268501009 * (unint64_t)(57344 * v33)) >> 32) >> 8) + 4096;
      uint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31 >> 4;
        int v37 = v31[1] >> 4;
        v31 += 2;
        *uint64_t v32 = (((268501009 * (unint64_t)(57344 * v36)) >> 32) >> 8) + 4096;
        v32[1] = (((268501009 * (unint64_t)(57344 * v37)) >> 32) >> 8) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      int v38 = *v31 >> 4;
      int v39 = v31[1] >> 4;
      *uint64_t v32 = (((268501009 * (unint64_t)(57344 * v38)) >> 32) >> 8) + 4096;
      v32[1] = (((268501009 * (unint64_t)(57344 * v39)) >> 32) >> 8) + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        int v44 = v13[1] >> 4;
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = (((268501009 * (unint64_t)(57344 * (*v13 >> 4))) >> 32) >> 8) + 4096;
        v17[1] = (((268501009 * (unint64_t)(57344 * v44)) >> 32) >> 8) + 4096;
        unint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          int v47 = *v42 >> 4;
          int v48 = v42[1] >> 4;
          v42 += 2;
          *unint64_t v43 = (((268501009 * (unint64_t)(57344 * v47)) >> 32) >> 8) + 4096;
          v43[1] = (((268501009 * (unint64_t)(57344 * v48)) >> 32) >> 8) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        int v49 = *v42 >> 4;
        int v50 = v42[1] >> 4;
        *unint64_t v43 = (((268501009 * (unint64_t)(57344 * v49)) >> 32) >> 8) + 4096;
        v43[1] = (((268501009 * (unint64_t)(57344 * v50)) >> 32) >> 8) + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      int v51 = *v13 >> 4;
      int v52 = v13[1] >> 4;
      v13 += 2;
      *unint64_t v17 = (((268501009 * (unint64_t)(57344 * v51)) >> 32) >> 8) + 4096;
      v17[1] = (((268501009 * (unint64_t)(57344 * v52)) >> 32) >> 8) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        int v54 = *v13 >> 4;
        int v55 = v13[1] >> 4;
        v13 += 2;
        *unint64_t v17 = (((268501009 * (unint64_t)(57344 * v54)) >> 32) >> 8) + 4096;
        v17[1] = (((268501009 * (unint64_t)(57344 * v55)) >> 32) >> 8) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      int v56 = *v13 >> 4;
      int v57 = v13[1] >> 4;
      *unint64_t v17 = (((268501009 * (unint64_t)(57344 * v56)) >> 32) >> 8) + 4096;
      v17[1] = (((268501009 * (unint64_t)(57344 * v57)) >> 32) >> 8) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf44_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = ((268501009
                                                  * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v23 + 2 * i) >> 4))) >> 32) >> 8;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      unsigned int v33 = v13[1];
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = ((268501009 * (unint64_t)(0xFFFF * (*v13 >> 4))) >> 32) >> 8;
      v17[1] = ((268501009 * (unint64_t)(0xFFFF * (v33 >> 4))) >> 32) >> 8;
      uint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        unsigned int v36 = *v31;
        unsigned int v37 = v31[1];
        v31 += 2;
        *uint64_t v32 = ((268501009 * (unint64_t)(0xFFFF * (v36 >> 4))) >> 32) >> 8;
        v32[1] = ((268501009 * (unint64_t)(0xFFFF * (v37 >> 4))) >> 32) >> 8;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      unsigned int v38 = *v31;
      unsigned int v39 = v31[1];
      *uint64_t v32 = ((268501009 * (unint64_t)(0xFFFF * (v38 >> 4))) >> 32) >> 8;
      v32[1] = ((268501009 * (unint64_t)(0xFFFF * (v39 >> 4))) >> 32) >> 8;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        unsigned int v44 = v13[1];
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = ((268501009 * (unint64_t)(0xFFFF * (*v13 >> 4))) >> 32) >> 8;
        v17[1] = ((268501009 * (unint64_t)(0xFFFF * (v44 >> 4))) >> 32) >> 8;
        unint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          unsigned int v47 = *v42;
          unsigned int v48 = v42[1];
          v42 += 2;
          *unint64_t v43 = ((268501009 * (unint64_t)(0xFFFF * (v47 >> 4))) >> 32) >> 8;
          v43[1] = ((268501009 * (unint64_t)(0xFFFF * (v48 >> 4))) >> 32) >> 8;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        unsigned int v49 = *v42;
        unint64_t v50 = (268501009 * (unint64_t)(0xFFFF * (v42[1] >> 4))) >> 40;
        *unint64_t v43 = ((268501009 * (unint64_t)(0xFFFF * (v49 >> 4))) >> 32) >> 8;
        v43[1] = v50;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      unsigned int v51 = *v13;
      unsigned int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = ((268501009 * (unint64_t)(0xFFFF * (v51 >> 4))) >> 32) >> 8;
      v17[1] = ((268501009 * (unint64_t)(0xFFFF * (v52 >> 4))) >> 32) >> 8;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        unsigned int v54 = *v13;
        unsigned int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = ((268501009 * (unint64_t)(0xFFFF * (v54 >> 4))) >> 32) >> 8;
        v17[1] = ((268501009 * (unint64_t)(0xFFFF * (v55 >> 4))) >> 32) >> 8;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      unsigned int v56 = *v13;
      unsigned int v57 = v13[1];
      *unint64_t v17 = ((268501009 * (unint64_t)(0xFFFF * (v56 >> 4))) >> 32) >> 8;
      v17[1] = ((268501009 * (unint64_t)(0xFFFF * (v57 >> 4))) >> 32) >> 8;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = (((268501009
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v30 + 2 * i) >> 4))) >> 32) >> 8)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v32 = v12 & 1;
  if (v9 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unsigned int v36 = v14 + 4;
      unsigned int v38 = ((((268501009 * (unint64_t)(57344 * (v14[1] >> 4))) >> 32) >> 8)
           + (((268501009 * (unint64_t)(57344 * (v14[3] >> 4))) >> 32) >> 8)
           + 8193) >> 1;
      _WORD *v21 = ((((268501009 * (unint64_t)(57344 * (*v14 >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(57344 * (v14[2] >> 4))) >> 32) >> 8)
            + 8193) >> 1;
      v21[1] = v38;
      unsigned int v37 = v21 + 2;
    }
    else
    {
      unsigned int v36 = v14;
      unsigned int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unsigned int v41 = ((((268501009 * (unint64_t)(57344 * (v36[1] >> 4))) >> 32) >> 8)
             + (((268501009 * (unint64_t)(57344 * (v36[3] >> 4))) >> 32) >> 8)
             + 8193) >> 1;
        *unint64_t v40 = ((((268501009 * (unint64_t)(57344 * (*v36 >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(57344 * (v36[2] >> 4))) >> 32) >> 8)
              + 8193) >> 1;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v9 - v33;
    do
    {
      unsigned int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        unsigned int v44 = v14 + 4;
        unsigned int v46 = ((((268501009 * (unint64_t)(57344 * (v14[1] >> 4))) >> 32) >> 8)
             + (((268501009 * (unint64_t)(57344 * (v14[3] >> 4))) >> 32) >> 8)
             + 8193) >> 1;
        _WORD *v21 = ((((268501009 * (unint64_t)(57344 * (*v14 >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(57344 * (v14[2] >> 4))) >> 32) >> 8)
              + 8193) >> 1;
        v21[1] = v46;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          unsigned int v48 = &v45[v47];
          unsigned int v49 = ((((268501009 * (unint64_t)(57344 * (v44[1] >> 4))) >> 32) >> 8)
               + (((268501009 * (unint64_t)(57344 * (v44[3] >> 4))) >> 32) >> 8)
               + 8193) >> 1;
          *unsigned int v48 = ((((268501009 * (unint64_t)(57344 * (*v44 >> 4))) >> 32) >> 8)
                + (((268501009 * (unint64_t)(57344 * (v44[2] >> 4))) >> 32) >> 8)
                + 8193) >> 1;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if (v34)
    {
      int v50 = *v14 >> 4;
      int v51 = v14[1] >> 4;
      int v52 = v14[2] >> 4;
      int v53 = v14[3] >> 4;
      v14 += 4;
      _WORD *v21 = ((((268501009 * (unint64_t)(57344 * v50)) >> 32) >> 8)
            + (((268501009 * (unint64_t)(57344 * v52)) >> 32) >> 8)
            + 8193) >> 1;
      v21[1] = ((((268501009 * (unint64_t)(57344 * v51)) >> 32) >> 8)
              + (((268501009 * (unint64_t)(57344 * v53)) >> 32) >> 8)
              + 8193) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        unsigned int v55 = &v21[v54];
        unsigned int v56 = ((((268501009 * (unint64_t)(57344 * (v14[1] >> 4))) >> 32) >> 8)
             + (((268501009 * (unint64_t)(57344 * (v14[3] >> 4))) >> 32) >> 8)
             + 8193) >> 1;
        *unsigned int v55 = ((((268501009 * (unint64_t)(57344 * (*v14 >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(57344 * (v14[2] >> 4))) >> 32) >> 8)
              + 8193) >> 1;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = (((268501009
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v30 + 2 * i) >> 4))) >> 32) >> 8)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v38 = v14[1] >> 4;
      unsigned int v36 = v14 + 4;
      _WORD *v21 = (((268501009 * (unint64_t)(57344 * (*v14 >> 4))) >> 32) >> 8) + 4096;
      v21[1] = (((268501009 * (unint64_t)(57344 * v38)) >> 32) >> 8) + 4096;
      unsigned int v37 = v21 + 2;
    }
    else
    {
      unsigned int v36 = v14;
      unsigned int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unint64_t v41 = (268501009 * (unint64_t)(57344 * (v36[1] >> 4))) >> 40;
        *unint64_t v40 = (((268501009 * (unint64_t)(57344 * (*v36 >> 4))) >> 32) >> 8) + 4096;
        v40[1] = v41 + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      unsigned int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v46 = v14[1] >> 4;
        unsigned int v44 = v14 + 4;
        _WORD *v21 = (((268501009 * (unint64_t)(57344 * (*v14 >> 4))) >> 32) >> 8) + 4096;
        v21[1] = (((268501009 * (unint64_t)(57344 * v46)) >> 32) >> 8) + 4096;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          unsigned int v48 = &v45[v47];
          unint64_t v49 = (268501009 * (unint64_t)(57344 * (v44[1] >> 4))) >> 40;
          *unsigned int v48 = (((268501009 * (unint64_t)(57344 * (*v44 >> 4))) >> 32) >> 8) + 4096;
          v48[1] = v49 + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = *v14 >> 4;
      int v51 = v14[1] >> 4;
      v14 += 4;
      _WORD *v21 = (((268501009 * (unint64_t)(57344 * v50)) >> 32) >> 8) + 4096;
      v21[1] = (((268501009 * (unint64_t)(57344 * v51)) >> 32) >> 8) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unint64_t v54 = (268501009 * (unint64_t)(57344 * (v14[1] >> 4))) >> 40;
        *int v53 = (((268501009 * (unint64_t)(57344 * (*v14 >> 4))) >> 32) >> 8) + 4096;
        v53[1] = v54 + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (((268501009
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32) >> 8)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unsigned int v36 = ((((268501009 * (unint64_t)(57344 * (v14[1] >> 4))) >> 32) >> 8)
           + (((268501009 * (unint64_t)(57344 * (v14[3] >> 4))) >> 32) >> 8)
           + 8193) >> 1;
      _WORD *v21 = ((((268501009 * (unint64_t)(57344 * (*v14 >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(57344 * (v14[2] >> 4))) >> 32) >> 8)
            + 8193) >> 1;
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = ((((268501009 * (unint64_t)(57344 * (v34[1] >> 4))) >> 32) >> 8)
             + (((268501009 * (unint64_t)(57344 * (v34[3] >> 4))) >> 32) >> 8)
             + 8193) >> 1;
        _WORD *v38 = ((((268501009 * (unint64_t)(57344 * (*v34 >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(57344 * (v34[2] >> 4))) >> 32) >> 8)
              + 8193) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        unsigned int v44 = ((((268501009 * (unint64_t)(57344 * (v14[1] >> 4))) >> 32) >> 8)
             + (((268501009 * (unint64_t)(57344 * (v14[3] >> 4))) >> 32) >> 8)
             + 8193) >> 1;
        _WORD *v21 = ((((268501009 * (unint64_t)(57344 * (*v14 >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(57344 * (v14[2] >> 4))) >> 32) >> 8)
              + 8193) >> 1;
        v21[1] = v44;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = ((((268501009 * (unint64_t)(57344 * (v42[1] >> 4))) >> 32) >> 8)
               + (((268501009 * (unint64_t)(57344 * (v42[3] >> 4))) >> 32) >> 8)
               + 8193) >> 1;
          *int v46 = ((((268501009 * (unint64_t)(57344 * (*v42 >> 4))) >> 32) >> 8)
                + (((268501009 * (unint64_t)(57344 * (v42[2] >> 4))) >> 32) >> 8)
                + 8193) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 >> 4;
      int v49 = v14[1] >> 4;
      int v50 = v14[2] >> 4;
      int v51 = v14[3] >> 4;
      v14 += 4;
      _WORD *v21 = ((((268501009 * (unint64_t)(57344 * v48)) >> 32) >> 8)
            + (((268501009 * (unint64_t)(57344 * v50)) >> 32) >> 8)
            + 8193) >> 1;
      v21[1] = ((((268501009 * (unint64_t)(57344 * v49)) >> 32) >> 8)
              + (((268501009 * (unint64_t)(57344 * v51)) >> 32) >> 8)
              + 8193) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unsigned int v54 = ((((268501009 * (unint64_t)(57344 * (v14[1] >> 4))) >> 32) >> 8)
             + (((268501009 * (unint64_t)(57344 * (v14[3] >> 4))) >> 32) >> 8)
             + 8193) >> 1;
        *int v53 = ((((268501009 * (unint64_t)(57344 * (*v14 >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(57344 * (v14[2] >> 4))) >> 32) >> 8)
              + 8193) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (((268501009
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32) >> 8)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1] >> 4;
      char v34 = v14 + 4;
      _WORD *v21 = (((268501009 * (unint64_t)(57344 * (*v14 >> 4))) >> 32) >> 8) + 4096;
      v21[1] = (((268501009 * (unint64_t)(57344 * v36)) >> 32) >> 8) + 4096;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (268501009 * (unint64_t)(57344 * (v34[1] >> 4))) >> 40;
        _WORD *v38 = (((268501009 * (unint64_t)(57344 * (*v34 >> 4))) >> 32) >> 8) + 4096;
        v38[1] = v39 + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1] >> 4;
        unint64_t v42 = v14 + 4;
        _WORD *v21 = (((268501009 * (unint64_t)(57344 * (*v14 >> 4))) >> 32) >> 8) + 4096;
        v21[1] = (((268501009 * (unint64_t)(57344 * v44)) >> 32) >> 8) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unint64_t v47 = (268501009 * (unint64_t)(57344 * (v42[1] >> 4))) >> 40;
          *int v46 = (((268501009 * (unint64_t)(57344 * (*v42 >> 4))) >> 32) >> 8) + 4096;
          v46[1] = v47 + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 >> 4;
      int v49 = v14[1] >> 4;
      v14 += 4;
      _WORD *v21 = (((268501009 * (unint64_t)(57344 * v48)) >> 32) >> 8) + 4096;
      v21[1] = (((268501009 * (unint64_t)(57344 * v49)) >> 32) >> 8) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unint64_t v52 = (268501009 * (unint64_t)(57344 * (v14[1] >> 4))) >> 40;
        *int v51 = (((268501009 * (unint64_t)(57344 * (*v14 >> 4))) >> 32) >> 8) + 4096;
        v51[1] = v52 + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((268501009
                                                  * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32) >> 8;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unsigned int v36 = ((((268501009 * (unint64_t)(0xFFFF * (v14[1] >> 4))) >> 32) >> 8)
           + (((268501009 * (unint64_t)(0xFFFF * (v14[3] >> 4))) >> 32) >> 8)
           + 1) >> 1;
      _WORD *v21 = ((((268501009 * (unint64_t)(0xFFFF * (*v14 >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(0xFFFF * (v14[2] >> 4))) >> 32) >> 8)
            + 1) >> 1;
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = ((((268501009 * (unint64_t)(0xFFFF * (v34[1] >> 4))) >> 32) >> 8)
             + (((268501009 * (unint64_t)(0xFFFF * (v34[3] >> 4))) >> 32) >> 8)
             + 1) >> 1;
        _WORD *v38 = ((((268501009 * (unint64_t)(0xFFFF * (*v34 >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(0xFFFF * (v34[2] >> 4))) >> 32) >> 8)
              + 1) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        unsigned int v44 = ((((268501009 * (unint64_t)(0xFFFF * (v14[1] >> 4))) >> 32) >> 8)
             + (((268501009 * (unint64_t)(0xFFFF * (v14[3] >> 4))) >> 32) >> 8)
             + 1) >> 1;
        _WORD *v21 = ((((268501009 * (unint64_t)(0xFFFF * (*v14 >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(0xFFFF * (v14[2] >> 4))) >> 32) >> 8)
              + 1) >> 1;
        v21[1] = v44;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = ((((268501009 * (unint64_t)(0xFFFF * (v42[1] >> 4))) >> 32) >> 8)
               + (((268501009 * (unint64_t)(0xFFFF * (v42[3] >> 4))) >> 32) >> 8)
               + 1) >> 1;
          *int v46 = ((((268501009 * (unint64_t)(0xFFFF * (*v42 >> 4))) >> 32) >> 8)
                + (((268501009 * (unint64_t)(0xFFFF * (v42[2] >> 4))) >> 32) >> 8)
                + 1) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v48 = *v14;
      unsigned int v49 = v14[1];
      unsigned int v50 = v14[2];
      unsigned int v51 = v14[3];
      v14 += 4;
      _WORD *v21 = ((((268501009 * (unint64_t)(0xFFFF * (v48 >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(0xFFFF * (v50 >> 4))) >> 32) >> 8)
            + 1) >> 1;
      v21[1] = ((((268501009 * (unint64_t)(0xFFFF * (v49 >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(0xFFFF * (v51 >> 4))) >> 32) >> 8)
              + 1) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unsigned int v54 = ((((268501009 * (unint64_t)(0xFFFF * (v14[1] >> 4))) >> 32) >> 8)
             + (((268501009 * (unint64_t)(0xFFFF * (v14[3] >> 4))) >> 32) >> 8)
             + 1) >> 1;
        *int v53 = ((((268501009 * (unint64_t)(0xFFFF * (*v14 >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(0xFFFF * (v14[2] >> 4))) >> 32) >> 8)
              + 1) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((268501009
                                                  * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32) >> 8;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unsigned int v36 = v14[1];
      char v34 = v14 + 4;
      _WORD *v21 = ((268501009 * (unint64_t)(0xFFFF * (*v14 >> 4))) >> 32) >> 8;
      v21[1] = ((268501009 * (unint64_t)(0xFFFF * (v36 >> 4))) >> 32) >> 8;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = v34[1];
        _WORD *v38 = ((268501009 * (unint64_t)(0xFFFF * (*v34 >> 4))) >> 32) >> 8;
        v38[1] = ((268501009 * (unint64_t)(0xFFFF * (v39 >> 4))) >> 32) >> 8;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unsigned int v44 = v14[1];
        unint64_t v42 = v14 + 4;
        _WORD *v21 = ((268501009 * (unint64_t)(0xFFFF * (*v14 >> 4))) >> 32) >> 8;
        v21[1] = ((268501009 * (unint64_t)(0xFFFF * (v44 >> 4))) >> 32) >> 8;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = v42[1];
          *int v46 = ((268501009 * (unint64_t)(0xFFFF * (*v42 >> 4))) >> 32) >> 8;
          v46[1] = ((268501009 * (unint64_t)(0xFFFF * (v47 >> 4))) >> 32) >> 8;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v48 = *v14;
      unsigned int v49 = v14[1];
      v14 += 4;
      _WORD *v21 = ((268501009 * (unint64_t)(0xFFFF * (v48 >> 4))) >> 32) >> 8;
      v21[1] = ((268501009 * (unint64_t)(0xFFFF * (v49 >> 4))) >> 32) >> 8;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        unsigned int v51 = &v21[v50];
        unsigned int v52 = v14[1];
        *unsigned int v51 = ((268501009 * (unint64_t)(0xFFFF * (*v14 >> 4))) >> 32) >> 8;
        v51[1] = ((268501009 * (unint64_t)(0xFFFF * (v52 >> 4))) >> 32) >> 8;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (((268501009
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 8)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      unsigned int v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v40 = *v39 >> 4;
      int v41 = v39[1] >> 4;
      unint64_t v37 = v15 + 4;
      unsigned int v42 = (((268501009 * (unint64_t)(57344 * (v15[1] >> 4))) >> 32) >> 8)
          + (((268501009 * (unint64_t)(57344 * (v15[3] >> 4))) >> 32) >> 8)
          + (((268501009 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32) >> 8)
          + (((268501009 * (unint64_t)(57344 * v41)) >> 32) >> 8)
          + 16386;
      *unint64_t v22 = ((((268501009 * (unint64_t)(57344 * (*v15 >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(57344 * (v15[2] >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(57344 * v40)) >> 32) >> 8)
            + 16386) >> 2;
      v22[1] = v42 >> 2;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      unsigned int v44 = v37 + 2;
      do
      {
        unsigned int v45 = (((268501009 * (unint64_t)(57344 * (*(v44 - 1) >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(57344 * (v44[1] >> 4))) >> 32) >> 8)
            + (((268501009
                             * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v44 + v14 - 2) >> 4))) >> 32) >> 8)
            + (((268501009
                             * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v44 + v14 + 2) >> 4))) >> 32) >> 8)
            + 16386;
        int v46 = &v38[v43];
        *int v46 = ((((268501009 * (unint64_t)(57344 * (*(v44 - 2) >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(57344 * (*v44 >> 4))) >> 32) >> 8)
              + (((268501009
                               * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v44 + v14 - 4) >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v44 + v14) >> 4))) >> 32) >> 8)
              + 16386) >> 2;
        v46[1] = v45 >> 2;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      unsigned int v49 = v15;
      unint64_t v50 = v22;
      if (v9)
      {
        unsigned int v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v52 = *v51 >> 4;
        int v53 = v51[1] >> 4;
        unsigned int v49 = v15 + 4;
        unsigned int v54 = (((268501009 * (unint64_t)(57344 * (v15[1] >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(57344 * (v15[3] >> 4))) >> 32) >> 8)
            + (((268501009
                             * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(57344 * v53)) >> 32) >> 8)
            + 16386;
        *unint64_t v22 = ((((268501009 * (unint64_t)(57344 * (*v15 >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(57344 * (v15[2] >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(57344 * v52)) >> 32) >> 8)
              + 16386) >> 2;
        v22[1] = v54 >> 2;
        unint64_t v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v55 = 0;
        unsigned int v56 = v49 + 2;
        do
        {
          unsigned int v57 = (((268501009 * (unint64_t)(57344 * (*(v56 - 1) >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(57344 * (v56[1] >> 4))) >> 32) >> 8)
              + (((268501009
                               * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v56 + v14 - 2) >> 4))) >> 32) >> 8)
              + (((268501009
                               * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v56 + v14 + 2) >> 4))) >> 32) >> 8)
              + 16386;
          int v58 = &v50[v55];
          _WORD *v58 = ((((268501009 * (unint64_t)(57344 * (*(v56 - 2) >> 4))) >> 32) >> 8)
                + (((268501009 * (unint64_t)(57344 * (*v56 >> 4))) >> 32) >> 8)
                + (((268501009
                                 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v56 + v14 - 4) >> 4))) >> 32) >> 8)
                + (((268501009
                                 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v56 + v14) >> 4))) >> 32) >> 8)
                + 16386) >> 2;
          v58[1] = v57 >> 2;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (((268501009
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 8)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      int v39 = v15[1] >> 4;
      unint64_t v37 = v15 + 4;
      *unint64_t v22 = (((268501009 * (unint64_t)(57344 * (*v15 >> 4))) >> 32) >> 8) + 4096;
      v22[1] = (((268501009 * (unint64_t)(57344 * v39)) >> 32) >> 8) + 4096;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (268501009 * (unint64_t)(57344 * (v37[1] >> 4))) >> 40;
        _WORD *v41 = (((268501009 * (unint64_t)(57344 * (*v37 >> 4))) >> 32) >> 8) + 4096;
        v41[1] = v42 + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      int v46 = v15;
      unint64_t v47 = v22;
      if (v9)
      {
        int v48 = v15[1] >> 4;
        int v46 = v15 + 4;
        *unint64_t v22 = (((268501009 * (unint64_t)(57344 * (*v15 >> 4))) >> 32) >> 8) + 4096;
        v22[1] = (((268501009 * (unint64_t)(57344 * v48)) >> 32) >> 8) + 4096;
        unint64_t v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          unint64_t v51 = (268501009 * (unint64_t)(57344 * (v46[1] >> 4))) >> 40;
          _WORD *v50 = (((268501009 * (unint64_t)(57344 * (*v46 >> 4))) >> 32) >> 8) + 4096;
          v50[1] = v51 + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * v10);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v62 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + ((unint64_t)(v62 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - v10;
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = v13 - v12;
  unint64_t v25 = v19 - v18;
  if (v24 < v19 - v18) {
    unint64_t v25 = v24;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12 + 2 * v10;
    if (v12 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v32 + 2 * i) = ((268501009
                                                  * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v31 + 2 * i) >> 4))) >> 32) >> 8;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v8 & 1)) {
    uint64_t v34 = v8 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v9 = v9;
  if (v22 >= (v9 & 1u)) {
    uint64_t v35 = v9 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v22 - v35;
  if (v8)
  {
    uint64_t v37 = v34;
    if (v9)
    {
      unint64_t v40 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      unsigned int v41 = *v40;
      unsigned int v42 = v40[1];
      int v38 = v15 + 4;
      unsigned int v43 = (((268501009 * (unint64_t)(0xFFFF * (v15[1] >> 4))) >> 32) >> 8)
          + (((268501009 * (unint64_t)(0xFFFF * (v15[3] >> 4))) >> 32) >> 8)
          + (((268501009 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32) >> 8)
          + (((268501009 * (unint64_t)(0xFFFF * (v42 >> 4))) >> 32) >> 8)
          + 2;
      _WORD *v21 = ((((268501009 * (unint64_t)(0xFFFF * (*v15 >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(0xFFFF * (v15[2] >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(0xFFFF * (v41 >> 4))) >> 32) >> 8)
            + 2) >> 2;
      v21[1] = v43 >> 2;
      int v39 = v21 + 2;
    }
    else
    {
      int v38 = v15;
      int v39 = v21;
    }
    if (v22 != v35)
    {
      unint64_t v44 = 0;
      uint64_t v45 = v38 + 2;
      do
      {
        unsigned int v46 = (((268501009 * (unint64_t)(0xFFFF * (*(v45 - 1) >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(0xFFFF * (v45[1] >> 4))) >> 32) >> 8)
            + (((268501009
                             * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v45 + v14 - 2) >> 4))) >> 32) >> 8)
            + (((268501009
                             * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v45 + v14 + 2) >> 4))) >> 32) >> 8)
            + 2;
        unint64_t v47 = &v39[v44];
        _WORD *v47 = ((((268501009 * (unint64_t)(0xFFFF * (*(v45 - 2) >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(0xFFFF * (*v45 >> 4))) >> 32) >> 8)
              + (((268501009
                               * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v45 + v14 - 4) >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v45 + v14) >> 4))) >> 32) >> 8)
              + 2) >> 2;
        v47[1] = v46 >> 2;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v36);
    }
    v15 += v14;
    uint64_t v21 = (_WORD *)((char *)v21 + v62);
    uint64_t v34 = v37;
  }
  if (v25 != v34)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v25 - v34;
    do
    {
      unint64_t v50 = v15;
      unint64_t v51 = v21;
      uint64_t v52 = v9;
      if (v9)
      {
        int v53 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        unsigned int v54 = *v53;
        unsigned int v55 = v53[1];
        unint64_t v50 = v15 + 4;
        unsigned int v56 = (((268501009 * (unint64_t)(0xFFFF * (v15[1] >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(0xFFFF * (v15[3] >> 4))) >> 32) >> 8)
            + (((268501009
                             * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32) >> 8)
            + (((268501009 * (unint64_t)(0xFFFF * (v55 >> 4))) >> 32) >> 8)
            + 2;
        _WORD *v21 = ((((268501009 * (unint64_t)(0xFFFF * (*v15 >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(0xFFFF * (v15[2] >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(0xFFFF * (v54 >> 4))) >> 32) >> 8)
              + 2) >> 2;
        v21[1] = v56 >> 2;
        unint64_t v51 = v21 + 2;
      }
      if (v22 != v35)
      {
        unint64_t v57 = 0;
        int v58 = v50 + 2;
        do
        {
          unsigned int v59 = (((268501009 * (unint64_t)(0xFFFF * (*(v58 - 1) >> 4))) >> 32) >> 8)
              + (((268501009 * (unint64_t)(0xFFFF * (v58[1] >> 4))) >> 32) >> 8)
              + (((268501009
                               * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v58 + v14 - 2) >> 4))) >> 32) >> 8)
              + (((268501009
                               * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v58 + v14 + 2) >> 4))) >> 32) >> 8)
              + 2;
          uint64_t v60 = &v51[v57];
          *uint64_t v60 = ((((268501009 * (unint64_t)(0xFFFF * (*(v58 - 2) >> 4))) >> 32) >> 8)
                + (((268501009 * (unint64_t)(0xFFFF * (*v58 >> 4))) >> 32) >> 8)
                + (((268501009
                                 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v58 + v14 - 4) >> 4))) >> 32) >> 8)
                + (((268501009
                                 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v58 + v14) >> 4))) >> 32) >> 8)
                + 2) >> 2;
          v60[1] = v59 >> 2;
          v57 += 2;
          v58 += 4;
        }
        while (v57 < v36);
      }
      v15 += v14;
      uint64_t v21 = (_WORD *)((char *)v21 + v62);
      v48 += 2;
      uint64_t v9 = v52;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((268501009
                                                  * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      unsigned int v39 = v15[1];
      uint64_t v37 = v15 + 4;
      *unint64_t v22 = ((268501009 * (unint64_t)(0xFFFF * (*v15 >> 4))) >> 32) >> 8;
      v22[1] = ((268501009 * (unint64_t)(0xFFFF * (v39 >> 4))) >> 32) >> 8;
      int v38 = v22 + 2;
    }
    else
    {
      uint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        unsigned int v41 = &v38[v40];
        unsigned int v42 = v37[1];
        _WORD *v41 = ((268501009 * (unint64_t)(0xFFFF * (*v37 >> 4))) >> 32) >> 8;
        v41[1] = ((268501009 * (unint64_t)(0xFFFF * (v42 >> 4))) >> 32) >> 8;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v22;
      if (v9)
      {
        unsigned int v48 = v15[1];
        unsigned int v46 = v15 + 4;
        *unint64_t v22 = ((268501009 * (unint64_t)(0xFFFF * (*v15 >> 4))) >> 32) >> 8;
        v22[1] = ((268501009 * (unint64_t)(0xFFFF * (v48 >> 4))) >> 32) >> 8;
        unint64_t v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          unsigned int v51 = v46[1];
          _WORD *v50 = ((268501009 * (unint64_t)(0xFFFF * (*v46 >> 4))) >> 32) >> 8;
          v50[1] = ((268501009 * (unint64_t)(0xFFFF * (v51 >> 4))) >> 32) >> 8;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_tf44_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = 16
                                  * (((8390657
                                                   * (unint64_t)(3504 * (*(unsigned __int16 *)(v24 + 2 * i) >> 4))) >> 32) >> 3)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  unint64_t v26 = v8 & 1;
  if (v17 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      int v34 = v12[1] >> 4;
      uint64_t v32 = v12 + 2;
      *uint64_t v16 = 16 * (((8390657 * (unint64_t)(3584 * (*v12 >> 4))) >> 32) >> 3) + 4096;
      v16[1] = 16 * ((8390657 * (unint64_t)(3584 * v34)) >> 35) + 4096;
      uint64_t v33 = v16 + 2;
    }
    else
    {
      uint64_t v32 = v12;
      uint64_t v33 = v16;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        int v37 = *v32 >> 4;
        int v38 = v32[1] >> 4;
        v32 += 2;
        *uint64_t v33 = 16 * (((8390657 * (unint64_t)(3584 * v37)) >> 32) >> 3) + 4096;
        v33[1] = 16 * ((8390657 * (unint64_t)(3584 * v38)) >> 35) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      int v39 = *v32 >> 4;
      int v40 = v32[1] >> 4;
      *uint64_t v33 = 16 * (((8390657 * (unint64_t)(3584 * v39)) >> 32) >> 3) + 4096;
      v33[1] = 16 * (((8390657 * (unint64_t)(3584 * v40)) >> 32) >> 3) + 4096;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v17 - v27;
    do
    {
      unint64_t v43 = v12;
      unint64_t v44 = v16;
      if (v28)
      {
        int v45 = v12[1] >> 4;
        unint64_t v43 = v12 + 2;
        *uint64_t v16 = 16 * (((8390657 * (unint64_t)(3584 * (*v12 >> 4))) >> 32) >> 3) + 4096;
        v16[1] = 16 * ((8390657 * (unint64_t)(3584 * v45)) >> 35) + 4096;
        unint64_t v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          int v48 = *v43 >> 4;
          int v49 = v43[1] >> 4;
          v43 += 2;
          *unint64_t v44 = 16 * (((8390657 * (unint64_t)(3584 * v48)) >> 32) >> 3) + 4096;
          v44[1] = 16 * ((8390657 * (unint64_t)(3584 * v49)) >> 35) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        int v50 = *v43 >> 4;
        int v51 = v43[1] >> 4;
        *unint64_t v44 = 16 * (((8390657 * (unint64_t)(3584 * v50)) >> 32) >> 3) + 4096;
        v44[1] = 16 * (((8390657 * (unint64_t)(3584 * v51)) >> 32) >> 3) + 4096;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if (v28)
    {
      int v52 = *v12 >> 4;
      int v53 = v12[1] >> 4;
      v12 += 2;
      *uint64_t v16 = 16 * (((8390657 * (unint64_t)(3584 * v52)) >> 32) >> 3) + 4096;
      v16[1] = 16 * ((8390657 * (unint64_t)(3584 * v53)) >> 35) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        int v55 = *v12 >> 4;
        int v56 = v12[1] >> 4;
        v12 += 2;
        *uint64_t v16 = 16 * (((8390657 * (unint64_t)(3584 * v55)) >> 32) >> 3) + 4096;
        v16[1] = 16 * ((8390657 * (unint64_t)(3584 * v56)) >> 35) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      int v57 = *v12 >> 4;
      int v58 = v12[1] >> 4;
      *uint64_t v16 = 16 * (((8390657 * (unint64_t)(3584 * v57)) >> 32) >> 3) + 4096;
      v16[1] = 16 * (((8390657 * (unint64_t)(3584 * v58)) >> 32) >> 3) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf44_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = 16
                                  * (((8390657
                                                   * (unint64_t)(3504 * (*(unsigned __int16 *)(v23 + 2 * i) >> 4))) >> 32) >> 3)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1] >> 4;
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = 16 * (((8390657 * (unint64_t)(3584 * (*v13 >> 4))) >> 32) >> 3) + 4096;
      v17[1] = 16 * ((8390657 * (unint64_t)(3584 * v33)) >> 35) + 4096;
      uint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31 >> 4;
        int v37 = v31[1] >> 4;
        v31 += 2;
        *uint64_t v32 = 16 * (((8390657 * (unint64_t)(3584 * v36)) >> 32) >> 3) + 4096;
        v32[1] = 16 * ((8390657 * (unint64_t)(3584 * v37)) >> 35) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      int v38 = *v31 >> 4;
      int v39 = v31[1] >> 4;
      *uint64_t v32 = 16 * (((8390657 * (unint64_t)(3584 * v38)) >> 32) >> 3) + 4096;
      v32[1] = 16 * (((8390657 * (unint64_t)(3584 * v39)) >> 32) >> 3) + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        int v44 = v13[1] >> 4;
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = 16 * (((8390657 * (unint64_t)(3584 * (*v13 >> 4))) >> 32) >> 3) + 4096;
        v17[1] = 16 * ((8390657 * (unint64_t)(3584 * v44)) >> 35) + 4096;
        unint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          int v47 = *v42 >> 4;
          int v48 = v42[1] >> 4;
          v42 += 2;
          *unint64_t v43 = 16 * (((8390657 * (unint64_t)(3584 * v47)) >> 32) >> 3) + 4096;
          v43[1] = 16 * ((8390657 * (unint64_t)(3584 * v48)) >> 35) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        int v49 = *v42 >> 4;
        int v50 = v42[1] >> 4;
        *unint64_t v43 = 16 * (((8390657 * (unint64_t)(3584 * v49)) >> 32) >> 3) + 4096;
        v43[1] = 16 * (((8390657 * (unint64_t)(3584 * v50)) >> 32) >> 3) + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      int v51 = *v13 >> 4;
      int v52 = v13[1] >> 4;
      v13 += 2;
      *unint64_t v17 = 16 * (((8390657 * (unint64_t)(3584 * v51)) >> 32) >> 3) + 4096;
      v17[1] = 16 * ((8390657 * (unint64_t)(3584 * v52)) >> 35) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        int v54 = *v13 >> 4;
        int v55 = v13[1] >> 4;
        v13 += 2;
        *unint64_t v17 = 16 * (((8390657 * (unint64_t)(3584 * v54)) >> 32) >> 3) + 4096;
        v17[1] = 16 * ((8390657 * (unint64_t)(3584 * v55)) >> 35) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      int v56 = *v13 >> 4;
      int v57 = v13[1] >> 4;
      *unint64_t v17 = 16 * (((8390657 * (unint64_t)(3584 * v56)) >> 32) >> 3) + 4096;
      v17[1] = 16 * (((8390657 * (unint64_t)(3584 * v57)) >> 32) >> 3) + 4096;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 16
                                  * (((8390657
                                                   * (unint64_t)(3504 * (*(unsigned __int16 *)(v30 + 2 * i) >> 4))) >> 32) >> 3)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v32 = v12 & 1;
  if (v9 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v36 = v14 + 4;
      unsigned int v38 = (((8390657 * (unint64_t)(3584 * (v14[3] >> 4))) >> 32) >> 3)
          + (((8390657 * (unint64_t)(3584 * (v14[1] >> 4))) >> 32) >> 3);
      _WORD *v21 = (8
            * ((((8390657 * (unint64_t)(3584 * (v14[2] >> 4))) >> 32) >> 3)
             + (((8390657 * (unint64_t)(3584 * (*v14 >> 4))) >> 32) >> 3))
            + 4104) & 0xFFF0;
      v21[1] = (8 * v38 + 4104) & 0xFFF0;
      int v37 = v21 + 2;
    }
    else
    {
      int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unsigned int v41 = (((8390657 * (unint64_t)(3584 * (v36[3] >> 4))) >> 32) >> 3)
            + (((8390657 * (unint64_t)(3584 * (v36[1] >> 4))) >> 32) >> 3);
        *unint64_t v40 = (8
              * (((8390657 * (unint64_t)(3584 * (v36[2] >> 4))) >> 35)
               + (((8390657 * (unint64_t)(3584 * (*v36 >> 4))) >> 32) >> 3))
              + 4104) & 0xFFF0;
        v40[1] = (8 * v41 + 4104) & 0xFFF0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v9 - v33;
    do
    {
      int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v44 = v14 + 4;
        unsigned int v46 = (((8390657 * (unint64_t)(3584 * (v14[3] >> 4))) >> 32) >> 3)
            + (((8390657 * (unint64_t)(3584 * (v14[1] >> 4))) >> 32) >> 3);
        _WORD *v21 = (8
              * (((8390657 * (unint64_t)(3584 * (v14[2] >> 4))) >> 35)
               + (((8390657 * (unint64_t)(3584 * (*v14 >> 4))) >> 32) >> 3))
              + 4104) & 0xFFF0;
        v21[1] = (8 * v46 + 4104) & 0xFFF0;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          unsigned int v49 = (((8390657 * (unint64_t)(3584 * (v44[3] >> 4))) >> 32) >> 3)
              + (((8390657 * (unint64_t)(3584 * (v44[1] >> 4))) >> 32) >> 3);
          *int v48 = (8
                * (((8390657 * (unint64_t)(3584 * (v44[2] >> 4))) >> 35)
                 + (((8390657 * (unint64_t)(3584 * (*v44 >> 4))) >> 32) >> 3))
                + 4104) & 0xFFF0;
          v48[1] = (8 * v49 + 4104) & 0xFFF0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if (v34)
    {
      int v50 = *v14 >> 4;
      int v51 = v14[1] >> 4;
      int v52 = v14[2] >> 4;
      int v53 = v14[3] >> 4;
      v14 += 4;
      _WORD *v21 = (8
            * ((((8390657 * (unint64_t)(3584 * v52)) >> 32) >> 3)
             + (((8390657 * (unint64_t)(3584 * v50)) >> 32) >> 3))
            + 4104) & 0xFFF0;
      v21[1] = (8
              * ((((8390657 * (unint64_t)(3584 * v53)) >> 32) >> 3)
               + (((8390657 * (unint64_t)(3584 * v51)) >> 32) >> 3))
              + 4104) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        int v55 = &v21[v54];
        unsigned int v56 = (((8390657 * (unint64_t)(3584 * (v14[3] >> 4))) >> 32) >> 3)
            + (((8390657 * (unint64_t)(3584 * (v14[1] >> 4))) >> 32) >> 3);
        *int v55 = (8
              * (((8390657 * (unint64_t)(3584 * (v14[2] >> 4))) >> 35)
               + (((8390657 * (unint64_t)(3584 * (*v14 >> 4))) >> 32) >> 3))
              + 4104) & 0xFFF0;
        v55[1] = (8 * v56 + 4104) & 0xFFF0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 16
                                  * (((8390657
                                                   * (unint64_t)(3504 * (*(unsigned __int16 *)(v30 + 2 * i) >> 4))) >> 32) >> 3)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v38 = v14[1] >> 4;
      int v36 = v14 + 4;
      _WORD *v21 = 16 * (((8390657 * (unint64_t)(3584 * (*v14 >> 4))) >> 32) >> 3) + 4096;
      v21[1] = 16 * ((8390657 * (unint64_t)(3584 * v38)) >> 35) + 4096;
      int v37 = v21 + 2;
    }
    else
    {
      int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unint64_t v41 = (8390657 * (unint64_t)(3584 * (v36[1] >> 4))) >> 35;
        *unint64_t v40 = 16 * (((8390657 * (unint64_t)(3584 * (*v36 >> 4))) >> 32) >> 3) + 4096;
        v40[1] = 16 * v41 + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v46 = v14[1] >> 4;
        int v44 = v14 + 4;
        _WORD *v21 = 16 * (((8390657 * (unint64_t)(3584 * (*v14 >> 4))) >> 32) >> 3) + 4096;
        v21[1] = 16 * ((8390657 * (unint64_t)(3584 * v46)) >> 35) + 4096;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          unint64_t v49 = (8390657 * (unint64_t)(3584 * (v44[1] >> 4))) >> 35;
          *int v48 = 16 * (((8390657 * (unint64_t)(3584 * (*v44 >> 4))) >> 32) >> 3) + 4096;
          v48[1] = 16 * v49 + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = *v14 >> 4;
      int v51 = v14[1] >> 4;
      v14 += 4;
      _WORD *v21 = 16 * (((8390657 * (unint64_t)(3584 * v50)) >> 32) >> 3) + 4096;
      v21[1] = 16 * ((8390657 * (unint64_t)(3584 * v51)) >> 35) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unint64_t v54 = (8390657 * (unint64_t)(3584 * (v14[1] >> 4))) >> 35;
        *int v53 = 16 * (((8390657 * (unint64_t)(3584 * (*v14 >> 4))) >> 32) >> 3) + 4096;
        v53[1] = 16 * v54 + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * (((8390657
                                                   * (unint64_t)(3504 * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32) >> 3)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unsigned int v36 = (((8390657 * (unint64_t)(3584 * (v14[3] >> 4))) >> 32) >> 3)
          + (((8390657 * (unint64_t)(3584 * (v14[1] >> 4))) >> 32) >> 3);
      _WORD *v21 = (8
            * ((((8390657 * (unint64_t)(3584 * (v14[2] >> 4))) >> 32) >> 3)
             + (((8390657 * (unint64_t)(3584 * (*v14 >> 4))) >> 32) >> 3))
            + 4104) & 0xFFF0;
      v21[1] = (8 * v36 + 4104) & 0xFFF0;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = (((8390657 * (unint64_t)(3584 * (v34[3] >> 4))) >> 32) >> 3)
            + (((8390657 * (unint64_t)(3584 * (v34[1] >> 4))) >> 32) >> 3);
        _WORD *v38 = (8
              * (((8390657 * (unint64_t)(3584 * (v34[2] >> 4))) >> 35)
               + (((8390657 * (unint64_t)(3584 * (*v34 >> 4))) >> 32) >> 3))
              + 4104) & 0xFFF0;
        v38[1] = (8 * v39 + 4104) & 0xFFF0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        unsigned int v44 = (((8390657 * (unint64_t)(3584 * (v14[3] >> 4))) >> 32) >> 3)
            + (((8390657 * (unint64_t)(3584 * (v14[1] >> 4))) >> 32) >> 3);
        _WORD *v21 = (8
              * (((8390657 * (unint64_t)(3584 * (v14[2] >> 4))) >> 35)
               + (((8390657 * (unint64_t)(3584 * (*v14 >> 4))) >> 32) >> 3))
              + 4104) & 0xFFF0;
        v21[1] = (8 * v44 + 4104) & 0xFFF0;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = (((8390657 * (unint64_t)(3584 * (v42[3] >> 4))) >> 32) >> 3)
              + (((8390657 * (unint64_t)(3584 * (v42[1] >> 4))) >> 32) >> 3);
          *int v46 = (8
                * (((8390657 * (unint64_t)(3584 * (v42[2] >> 4))) >> 35)
                 + (((8390657 * (unint64_t)(3584 * (*v42 >> 4))) >> 32) >> 3))
                + 4104) & 0xFFF0;
          v46[1] = (8 * v47 + 4104) & 0xFFF0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 >> 4;
      int v49 = v14[1] >> 4;
      int v50 = v14[2] >> 4;
      int v51 = v14[3] >> 4;
      v14 += 4;
      _WORD *v21 = (8
            * ((((8390657 * (unint64_t)(3584 * v50)) >> 32) >> 3)
             + (((8390657 * (unint64_t)(3584 * v48)) >> 32) >> 3))
            + 4104) & 0xFFF0;
      v21[1] = (8
              * ((((8390657 * (unint64_t)(3584 * v51)) >> 32) >> 3)
               + (((8390657 * (unint64_t)(3584 * v49)) >> 32) >> 3))
              + 4104) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unsigned int v54 = (((8390657 * (unint64_t)(3584 * (v14[3] >> 4))) >> 32) >> 3)
            + (((8390657 * (unint64_t)(3584 * (v14[1] >> 4))) >> 32) >> 3);
        *int v53 = (8
              * (((8390657 * (unint64_t)(3584 * (v14[2] >> 4))) >> 35)
               + (((8390657 * (unint64_t)(3584 * (*v14 >> 4))) >> 32) >> 3))
              + 4104) & 0xFFF0;
        v53[1] = (8 * v54 + 4104) & 0xFFF0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * (((8390657
                                                   * (unint64_t)(3504 * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32) >> 3)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1] >> 4;
      char v34 = v14 + 4;
      _WORD *v21 = 16 * (((8390657 * (unint64_t)(3584 * (*v14 >> 4))) >> 32) >> 3) + 4096;
      v21[1] = 16 * ((8390657 * (unint64_t)(3584 * v36)) >> 35) + 4096;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (8390657 * (unint64_t)(3584 * (v34[1] >> 4))) >> 35;
        _WORD *v38 = 16 * (((8390657 * (unint64_t)(3584 * (*v34 >> 4))) >> 32) >> 3) + 4096;
        v38[1] = 16 * v39 + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1] >> 4;
        unint64_t v42 = v14 + 4;
        _WORD *v21 = 16 * (((8390657 * (unint64_t)(3584 * (*v14 >> 4))) >> 32) >> 3) + 4096;
        v21[1] = 16 * ((8390657 * (unint64_t)(3584 * v44)) >> 35) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unint64_t v47 = (8390657 * (unint64_t)(3584 * (v42[1] >> 4))) >> 35;
          *int v46 = 16 * (((8390657 * (unint64_t)(3584 * (*v42 >> 4))) >> 32) >> 3) + 4096;
          v46[1] = 16 * v47 + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 >> 4;
      int v49 = v14[1] >> 4;
      v14 += 4;
      _WORD *v21 = 16 * (((8390657 * (unint64_t)(3584 * v48)) >> 32) >> 3) + 4096;
      v21[1] = 16 * ((8390657 * (unint64_t)(3584 * v49)) >> 35) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unint64_t v52 = (8390657 * (unint64_t)(3584 * (v14[1] >> 4))) >> 35;
        *int v51 = 16 * (((8390657 * (unint64_t)(3584 * (*v14 >> 4))) >> 32) >> 3) + 4096;
        v51[1] = 16 * v52 + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = 2 * v14;
  uint64_t v17 = a8[1];
  uint64_t v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v19) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v21 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v21 = *(void *)(a2 + 24);
  }
  if (v21)
  {
    unint64_t v53 = v21;
    uint64_t v54 = a4[1];
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = (char *)(*a7 + *a8 * v15 + v16);
    uint64_t v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    unint64_t v21 = v53;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v54;
  }
  unint64_t v26 = v11 & 1;
  if (v21 >= v26) {
    uint64_t v27 = v11 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v8;
  if (v20 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v29 = v20 - v9;
  if (v11)
  {
    if (v28)
    {
      unint64_t v30 = v13 + 4;
      int v32 = (v13[3] >> 4) + (v13[1] >> 4);
      *uint64_t v18 = (8 * ((v13[2] >> 4) + (*v13 >> 4)) + 8) & 0xFFF0;
      v18[1] = (8 * v32 + 8) & 0xFFF0;
      uint64_t v31 = v18 + 2;
    }
    else
    {
      unint64_t v30 = v13;
      uint64_t v31 = v18;
    }
    if (v20 != v9)
    {
      unint64_t v33 = 0;
      do
      {
        char v34 = &v31[v33];
        int v35 = ((unsigned __int16)v30[3] >> 4) + ((unsigned __int16)v30[1] >> 4);
        *char v34 = (8 * ((v30[2] >> 4) + (*v30 >> 4)) + 8) & 0xFFF0;
        v34[1] = (8 * v35 + 8) & 0xFFF0;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    unint64_t v36 = 0;
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v36 = v21 - v27;
    do
    {
      int v38 = v13;
      unint64_t v39 = v18;
      if (v28)
      {
        int v38 = v13 + 4;
        int v40 = (v13[3] >> 4) + (v13[1] >> 4);
        *uint64_t v18 = (8 * ((v13[2] >> 4) + (*v13 >> 4)) + 8) & 0xFFF0;
        v18[1] = (8 * v40 + 8) & 0xFFF0;
        unint64_t v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        unint64_t v41 = 0;
        do
        {
          unint64_t v42 = &v39[v41];
          int v43 = ((unsigned __int16)v38[3] >> 4) + ((unsigned __int16)v38[1] >> 4);
          *unint64_t v42 = (8 * ((v38[2] >> 4) + (*v38 >> 4)) + 8) & 0xFFF0;
          v42[1] = (8 * v43 + 8) & 0xFFF0;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if (v28)
    {
      unsigned int v44 = *v13;
      unsigned int v45 = v13[1];
      int v46 = v13[2] >> 4;
      int v47 = v13[3] >> 4;
      v13 += 4;
      *uint64_t v18 = (8 * (v46 + (v44 >> 4)) + 8) & 0xFFF0;
      v18[1] = (8 * (v47 + (v45 >> 4)) + 8) & 0xFFF0;
      v18 += 2;
    }
    if (v20 != v9)
    {
      unint64_t v48 = 0;
      do
      {
        int v49 = &v18[v48];
        int v50 = (v13[3] >> 4) + (v13[1] >> 4);
        *int v49 = (8 * ((v13[2] >> 4) + (*v13 >> 4)) + 8) & 0xFFF0;
        v49[1] = (8 * v50 + 8) & 0xFFF0;
        v48 += 2;
        v13 += 4;
      }
      while (v48 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (_WORD *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = 2 * v14;
  uint64_t v17 = a8[1];
  uint64_t v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v19) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v21 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v21 = *(void *)(a2 + 24);
  }
  if (v21)
  {
    unint64_t v51 = v21;
    uint64_t v52 = a4[1];
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = (char *)(*a7 + *a8 * v15 + v16);
    uint64_t v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    unint64_t v21 = v51;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v52;
  }
  unint64_t v26 = v11 & 1;
  if (v21 >= v26) {
    uint64_t v27 = v11 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v8;
  if (v20 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v29 = v20 - v9;
  if (v11)
  {
    if (v28)
    {
      __int16 v32 = v13[1] & 0xFFF0;
      unint64_t v30 = v13 + 4;
      *uint64_t v18 = *v13 & 0xFFF0;
      v18[1] = v32;
      uint64_t v31 = v18 + 2;
    }
    else
    {
      unint64_t v30 = v13;
      uint64_t v31 = v18;
    }
    if (v20 != v9)
    {
      unint64_t v33 = 0;
      do
      {
        char v34 = &v31[v33];
        __int16 v35 = v30[1] & 0xFFF0;
        *char v34 = *v30 & 0xFFF0;
        v34[1] = v35;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    uint64_t v13 = (_WORD *)((char *)v13 + v12);
    uint64_t v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    unint64_t v36 = 0;
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v36 = v21 - v27;
    do
    {
      int v38 = v13;
      unint64_t v39 = v18;
      if (v28)
      {
        __int16 v40 = v13[1] & 0xFFF0;
        int v38 = v13 + 4;
        *uint64_t v18 = *v13 & 0xFFF0;
        v18[1] = v40;
        unint64_t v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        unint64_t v41 = 0;
        do
        {
          unint64_t v42 = &v39[v41];
          __int16 v43 = v38[1] & 0xFFF0;
          *unint64_t v42 = *v38 & 0xFFF0;
          v42[1] = v43;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      uint64_t v13 = (_WORD *)((char *)v13 + v12);
      uint64_t v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if (v28)
    {
      __int16 v44 = *v13 & 0xFFF0;
      __int16 v45 = v13[1] & 0xFFF0;
      v13 += 4;
      *uint64_t v18 = v44;
      v18[1] = v45;
      v18 += 2;
    }
    if (v20 != v9)
    {
      unint64_t v46 = 0;
      do
      {
        int v47 = &v18[v46];
        __int16 v48 = v13[1] & 0xFFF0;
        _WORD *v47 = *v13 & 0xFFF0;
        v47[1] = v48;
        v46 += 2;
        v13 += 4;
      }
      while (v46 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((8390657
                                                   * (unint64_t)(3504 * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 3)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      unint64_t v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v40 = *v39 >> 4;
      int v41 = v39[1] >> 4;
      uint64_t v37 = v15 + 4;
      unsigned int v42 = (((8390657 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32) >> 3)
          + (((8390657 * (unint64_t)(3584 * (v15[1] >> 4))) >> 32) >> 3)
          + (((8390657 * (unint64_t)(3584 * (v15[3] >> 4))) >> 32) >> 3)
          + (((8390657 * (unint64_t)(3584 * v41)) >> 32) >> 3);
      *uint64_t v22 = (4
            * ((((8390657 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32) >> 3)
             + (((8390657 * (unint64_t)(3584 * (*v15 >> 4))) >> 32) >> 3)
             + (((8390657 * (unint64_t)(3584 * (v15[2] >> 4))) >> 32) >> 3)
             + ((8390657 * (unint64_t)(3584 * v40)) >> 35))
            + 4104) & 0xFFF0;
      v22[1] = (4 * v42 + 4104) & 0xFFF0;
      int v38 = v22 + 2;
    }
    else
    {
      uint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      __int16 v44 = v37 + 2;
      do
      {
        unsigned int v45 = (((8390657 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v44 + v14 - 2) >> 4))) >> 32) >> 3)
            + (((8390657 * (unint64_t)(3584 * (*(v44 - 1) >> 4))) >> 32) >> 3)
            + (((8390657 * (unint64_t)(3584 * (v44[1] >> 4))) >> 32) >> 3)
            + (((8390657 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v44 + v14 + 2) >> 4))) >> 32) >> 3);
        unint64_t v46 = &v38[v43];
        *unint64_t v46 = (4
              * ((((8390657
                                * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v44 + v14 - 4) >> 4))) >> 32) >> 3)
               + (((8390657 * (unint64_t)(3584 * (*(v44 - 2) >> 4))) >> 32) >> 3)
               + ((8390657 * (unint64_t)(3584 * (*v44 >> 4))) >> 35)
               + ((8390657 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v44 + v14) >> 4))) >> 35))
              + 4104) & 0xFFF0;
        v46[1] = (4 * v45 + 4104) & 0xFFF0;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      int v49 = v15;
      int v50 = v22;
      if (v9)
      {
        unint64_t v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v52 = *v51 >> 4;
        int v53 = v51[1] >> 4;
        int v49 = v15 + 4;
        unsigned int v54 = (((8390657 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32) >> 3)
            + (((8390657 * (unint64_t)(3584 * (v15[1] >> 4))) >> 32) >> 3)
            + (((8390657 * (unint64_t)(3584 * (v15[3] >> 4))) >> 32) >> 3)
            + (((8390657 * (unint64_t)(3584 * v53)) >> 32) >> 3);
        *uint64_t v22 = (4
              * (((8390657 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 35)
               + (((8390657 * (unint64_t)(3584 * (*v15 >> 4))) >> 32) >> 3)
               + (((8390657 * (unint64_t)(3584 * (v15[2] >> 4))) >> 32) >> 3)
               + ((8390657 * (unint64_t)(3584 * v52)) >> 35))
              + 4104) & 0xFFF0;
        v22[1] = (4 * v54 + 4104) & 0xFFF0;
        int v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v55 = 0;
        unsigned int v56 = v49 + 2;
        do
        {
          unsigned int v57 = (((8390657 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v56 + v14 - 2) >> 4))) >> 32) >> 3)
              + (((8390657 * (unint64_t)(3584 * (*(v56 - 1) >> 4))) >> 32) >> 3)
              + (((8390657 * (unint64_t)(3584 * (v56[1] >> 4))) >> 32) >> 3)
              + (((8390657 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v56 + v14 + 2) >> 4))) >> 32) >> 3);
          int v58 = &v50[v55];
          _WORD *v58 = (4
                * ((((8390657
                                  * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v56 + v14 - 4) >> 4))) >> 32) >> 3)
                 + (((8390657 * (unint64_t)(3584 * (*(v56 - 2) >> 4))) >> 32) >> 3)
                 + ((8390657 * (unint64_t)(3584 * (*v56 >> 4))) >> 35)
                 + ((8390657 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v56 + v14) >> 4))) >> 35))
                + 4104) & 0xFFF0;
          v58[1] = (4 * v57 + 4104) & 0xFFF0;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      uint64_t v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((8390657
                                                   * (unint64_t)(3504 * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 3)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      int v39 = v15[1] >> 4;
      uint64_t v37 = v15 + 4;
      *uint64_t v22 = 16 * (((8390657 * (unint64_t)(3584 * (*v15 >> 4))) >> 32) >> 3) + 4096;
      v22[1] = 16 * ((8390657 * (unint64_t)(3584 * v39)) >> 35) + 4096;
      int v38 = v22 + 2;
    }
    else
    {
      uint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (8390657 * (unint64_t)(3584 * (v37[1] >> 4))) >> 35;
        _WORD *v41 = 16 * (((8390657 * (unint64_t)(3584 * (*v37 >> 4))) >> 32) >> 3) + 4096;
        v41[1] = 16 * v42 + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unint64_t v46 = v15;
      unint64_t v47 = v22;
      if (v9)
      {
        int v48 = v15[1] >> 4;
        unint64_t v46 = v15 + 4;
        *uint64_t v22 = 16 * (((8390657 * (unint64_t)(3584 * (*v15 >> 4))) >> 32) >> 3) + 4096;
        v22[1] = 16 * ((8390657 * (unint64_t)(3584 * v48)) >> 35) + 4096;
        unint64_t v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          int v50 = &v47[v49];
          unint64_t v51 = (8390657 * (unint64_t)(3584 * (v46[1] >> 4))) >> 35;
          _WORD *v50 = 16 * (((8390657 * (unint64_t)(3584 * (*v46 >> 4))) >> 32) >> 3) + 4096;
          v50[1] = 16 * v51 + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      uint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  else {
    unint64_t v25 = v14 - v13;
  }
  if (v25)
  {
    unint64_t v59 = v25;
    uint64_t v60 = a8[1];
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    uint64_t v30 = (char *)(*a7 + v27 * v18 + v20);
    uint64_t v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    unint64_t v25 = v59;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
    uint64_t v21 = v60;
  }
  if (v25 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      uint64_t v37 = (_WORD *)((char *)v16 + v15 + 4);
      unsigned int v38 = *v37;
      unsigned int v39 = v37[1];
      uint64_t v35 = v16 + 4;
      int v40 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4)
          + ((unsigned __int16)v16[1] >> 4)
          + ((unsigned __int16)v16[3] >> 4)
          + (v39 >> 4);
      *uint64_t v22 = (4 * ((*(_WORD *)((char *)v16 + v15) >> 4) + (*v16 >> 4) + (v16[2] >> 4) + (v38 >> 4)) + 8) & 0xFFF0;
      v22[1] = (4 * v40 + 8) & 0xFFF0;
      unint64_t v36 = v22 + 2;
    }
    else
    {
      uint64_t v35 = v16;
      unint64_t v36 = v22;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      unint64_t v42 = v35 + 2;
      do
      {
        unint64_t v43 = &v36[v41];
        int v44 = (*(unsigned __int16 *)((char *)v42 + v15 - 2) >> 4)
            + ((unsigned __int16)*(v42 - 1) >> 4)
            + ((unsigned __int16)v42[1] >> 4)
            + (*(unsigned __int16 *)((char *)v42 + v15 + 2) >> 4);
        *unint64_t v43 = (4
              * ((*(_WORD *)((char *)v42 + v15 - 4) >> 4)
               + (*(v42 - 2) >> 4)
               + (*v42 >> 4)
               + (*(_WORD *)((char *)v42 + v15) >> 4))
              + 8) & 0xFFF0;
        v43[1] = (4 * v44 + 8) & 0xFFF0;
        v41 += 2;
        v42 += 4;
      }
      while (v41 < v34);
    }
    v16 += v15;
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v25 - v33;
    do
    {
      unint64_t v47 = v16;
      int v48 = v22;
      if (v8)
      {
        unint64_t v49 = (_WORD *)((char *)v16 + v15 + 4);
        unsigned int v50 = *v49;
        unsigned int v51 = v49[1];
        unint64_t v47 = v16 + 4;
        int v52 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4)
            + ((unsigned __int16)v16[1] >> 4)
            + ((unsigned __int16)v16[3] >> 4)
            + (v51 >> 4);
        *uint64_t v22 = (4 * ((*(_WORD *)((char *)v16 + v15) >> 4) + (*v16 >> 4) + (v16[2] >> 4) + (v50 >> 4)) + 8) & 0xFFF0;
        v22[1] = (4 * v52 + 8) & 0xFFF0;
        int v48 = v22 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v53 = 0;
        unsigned int v54 = v47 + 2;
        do
        {
          unint64_t v55 = &v48[v53];
          int v56 = (*(unsigned __int16 *)((char *)v54 + v15 - 2) >> 4)
              + ((unsigned __int16)*(v54 - 1) >> 4)
              + ((unsigned __int16)v54[1] >> 4)
              + (*(unsigned __int16 *)((char *)v54 + v15 + 2) >> 4);
          *unint64_t v55 = (4
                * ((*(_WORD *)((char *)v54 + v15 - 4) >> 4)
                 + (*(v54 - 2) >> 4)
                 + (*v54 >> 4)
                 + (*(_WORD *)((char *)v54 + v15) >> 4))
                + 8) & 0xFFF0;
          v55[1] = (4 * v56 + 8) & 0xFFF0;
          v53 += 2;
          v54 += 4;
        }
        while (v53 < v34);
      }
      v16 += v15;
      uint64_t v22 = (_WORD *)((char *)v22 + v21);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  else {
    unint64_t v25 = v14 - v13;
  }
  if (v25)
  {
    unint64_t v51 = v25;
    uint64_t v52 = a4[1];
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    uint64_t v30 = (char *)(*a7 + v27 * v18 + v20);
    uint64_t v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    unint64_t v25 = v51;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
    uint64_t v15 = v52;
  }
  if (v25 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      __int16 v37 = v16[1] & 0xFFF0;
      uint64_t v35 = v16 + 4;
      *uint64_t v22 = *v16 & 0xFFF0;
      v22[1] = v37;
      unint64_t v36 = v22 + 2;
    }
    else
    {
      uint64_t v35 = v16;
      unint64_t v36 = v22;
    }
    if (v24 != v10)
    {
      unint64_t v38 = 0;
      do
      {
        unsigned int v39 = &v36[v38];
        __int16 v40 = v35[1] & 0xFFF0;
        *unsigned int v39 = *v35 & 0xFFF0;
        v39[1] = v40;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    v16 += v15;
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    unint64_t v41 = 0;
    unint64_t v42 = v25 - v33;
    do
    {
      unint64_t v43 = v16;
      int v44 = v22;
      if (v8)
      {
        __int16 v45 = v16[1] & 0xFFF0;
        unint64_t v43 = v16 + 4;
        *uint64_t v22 = *v16 & 0xFFF0;
        v22[1] = v45;
        int v44 = v22 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          unint64_t v47 = &v44[v46];
          __int16 v48 = v43[1] & 0xFFF0;
          _WORD *v47 = *v43 & 0xFFF0;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      v16 += v15;
      uint64_t v22 = (_WORD *)((char *)v22 + v21);
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_Copy_tf44_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((unsigned __int16)(((4195329
                                                                      * (unint64_t)(876
                                                                                         * (*(unsigned __int16 *)(v24 + 2 * i) >> 4))) >> 32) >> 2) << 6)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  unint64_t v26 = v8 & 1;
  if (v17 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      int v34 = v12[1] >> 4;
      uint64_t v32 = v12 + 2;
      *uint64_t v16 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v12 >> 4))) >> 32) >> 2) << 6)
           + 4096;
      v16[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v34)) >> 34) << 6) + 4096;
      unint64_t v33 = v16 + 2;
    }
    else
    {
      uint64_t v32 = v12;
      unint64_t v33 = v16;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        int v37 = *v32 >> 4;
        int v38 = v32[1] >> 4;
        v32 += 2;
        *unint64_t v33 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v37)) >> 32) >> 2) << 6)
             + 4096;
        v33[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v38)) >> 34) << 6) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      int v39 = *v32 >> 4;
      int v40 = v32[1] >> 4;
      *unint64_t v33 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v39)) >> 32) >> 2) << 6)
           + 4096;
      v33[1] = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v40)) >> 32) >> 2) << 6)
             + 4096;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v17 - v27;
    do
    {
      unint64_t v43 = v12;
      int v44 = v16;
      if (v28)
      {
        int v45 = v12[1] >> 4;
        unint64_t v43 = v12 + 2;
        *uint64_t v16 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v12 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v16[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v45)) >> 34) << 6) + 4096;
        int v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          int v48 = *v43 >> 4;
          int v49 = v43[1] >> 4;
          v43 += 2;
          *int v44 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v48)) >> 32) >> 2) << 6)
               + 4096;
          v44[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v49)) >> 34) << 6) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        int v50 = *v43 >> 4;
        int v51 = v43[1] >> 4;
        *int v44 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v50)) >> 32) >> 2) << 6)
             + 4096;
        v44[1] = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v51)) >> 32) >> 2) << 6)
               + 4096;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if (v28)
    {
      int v52 = *v12 >> 4;
      int v53 = v12[1] >> 4;
      v12 += 2;
      *uint64_t v16 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v52)) >> 32) >> 2) << 6)
           + 4096;
      v16[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v53)) >> 34) << 6) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        int v55 = *v12 >> 4;
        int v56 = v12[1] >> 4;
        v12 += 2;
        *uint64_t v16 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v55)) >> 32) >> 2) << 6)
             + 4096;
        v16[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v56)) >> 34) << 6) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      int v57 = *v12 >> 4;
      int v58 = v12[1] >> 4;
      *uint64_t v16 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v57)) >> 32) >> 2) << 6)
           + 4096;
      v16[1] = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v58)) >> 32) >> 2) << 6)
             + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf44_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = ((unsigned __int16)(((4195329
                                                                      * (unint64_t)(876
                                                                                         * (*(unsigned __int16 *)(v23 + 2 * i) >> 4))) >> 32) >> 2) << 6)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1] >> 4;
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v13 >> 4))) >> 32) >> 2) << 6)
           + 4096;
      v17[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v33)) >> 34) << 6) + 4096;
      uint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31 >> 4;
        int v37 = v31[1] >> 4;
        v31 += 2;
        *uint64_t v32 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v36)) >> 32) >> 2) << 6)
             + 4096;
        v32[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v37)) >> 34) << 6) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      int v38 = *v31 >> 4;
      int v39 = v31[1] >> 4;
      *uint64_t v32 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v38)) >> 32) >> 2) << 6)
           + 4096;
      v32[1] = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v39)) >> 32) >> 2) << 6)
             + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        int v44 = v13[1] >> 4;
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v13 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v17[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v44)) >> 34) << 6) + 4096;
        unint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          int v47 = *v42 >> 4;
          int v48 = v42[1] >> 4;
          v42 += 2;
          *unint64_t v43 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v47)) >> 32) >> 2) << 6)
               + 4096;
          v43[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v48)) >> 34) << 6) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        int v49 = *v42 >> 4;
        int v50 = v42[1] >> 4;
        *unint64_t v43 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v49)) >> 32) >> 2) << 6)
             + 4096;
        v43[1] = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v50)) >> 32) >> 2) << 6)
               + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      int v51 = *v13 >> 4;
      int v52 = v13[1] >> 4;
      v13 += 2;
      *unint64_t v17 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v51)) >> 32) >> 2) << 6)
           + 4096;
      v17[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v52)) >> 34) << 6) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        int v54 = *v13 >> 4;
        int v55 = v13[1] >> 4;
        v13 += 2;
        *unint64_t v17 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v54)) >> 32) >> 2) << 6)
             + 4096;
        v17[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v55)) >> 34) << 6) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      int v56 = *v13 >> 4;
      int v57 = v13[1] >> 4;
      *unint64_t v17 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v56)) >> 32) >> 2) << 6)
           + 4096;
      v17[1] = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v57)) >> 32) >> 2) << 6)
             + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf44_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = (unsigned __int16)(((4195329
                                                                     * (unint64_t)(1023
                                                                                        * (*(unsigned __int16 *)(v23 + 2 * i) >> 4))) >> 32) >> 2) << 6;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      unsigned int v33 = v13[1];
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v13 >> 4))) >> 32) >> 2) << 6;
      v17[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v33 >> 4))) >> 34) << 6;
      uint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        unsigned int v36 = *v31;
        unsigned int v37 = v31[1];
        v31 += 2;
        *uint64_t v32 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v36 >> 4))) >> 32) >> 2) << 6;
        v32[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v37 >> 4))) >> 34) << 6;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      unsigned int v38 = *v31;
      unsigned int v39 = v31[1];
      *uint64_t v32 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v38 >> 4))) >> 32) >> 2) << 6;
      v32[1] = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v39 >> 4))) >> 32) >> 2) << 6;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        unsigned int v44 = v13[1];
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v13 >> 4))) >> 32) >> 2) << 6;
        v17[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v44 >> 4))) >> 34) << 6;
        unint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          unsigned int v47 = *v42;
          unsigned int v48 = v42[1];
          v42 += 2;
          *unint64_t v43 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v47 >> 4))) >> 32) >> 2) << 6;
          v43[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v48 >> 4))) >> 34) << 6;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        unsigned int v49 = *v42;
        unsigned int v50 = v42[1];
        *unint64_t v43 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v49 >> 4))) >> 32) >> 2) << 6;
        v43[1] = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v50 >> 4))) >> 32) >> 2) << 6;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      unsigned int v51 = *v13;
      unsigned int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v51 >> 4))) >> 32) >> 2) << 6;
      v17[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v52 >> 4))) >> 34) << 6;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        unsigned int v54 = *v13;
        unsigned int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v54 >> 4))) >> 32) >> 2) << 6;
        v17[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v55 >> 4))) >> 34) << 6;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      unsigned int v56 = *v13;
      unsigned int v57 = v13[1];
      *unint64_t v17 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v56 >> 4))) >> 32) >> 2) << 6;
      v17[1] = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v57 >> 4))) >> 32) >> 2) << 6;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)(((4195329
                                                                      * (unint64_t)(876
                                                                                         * (*(unsigned __int16 *)(v30 + 2 * i) >> 4))) >> 32) >> 2) << 6)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v32 = v12 & 1;
  if (v9 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unsigned int v36 = v14 + 4;
      unsigned int v38 = (((4195329 * (unint64_t)(896 * (v14[3] >> 4))) >> 32) >> 2)
          + (((4195329 * (unint64_t)(896 * (v14[1] >> 4))) >> 32) >> 2);
      _WORD *v21 = (32
            * ((((4195329 * (unint64_t)(896 * (v14[2] >> 4))) >> 32) >> 2)
             + (((4195329 * (unint64_t)(896 * (*v14 >> 4))) >> 32) >> 2))
            + 4128) & 0xFFC0;
      v21[1] = (32 * v38 + 4128) & 0xFFC0;
      unsigned int v37 = v21 + 2;
    }
    else
    {
      unsigned int v36 = v14;
      unsigned int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unsigned int v41 = (((4195329 * (unint64_t)(896 * (v36[3] >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(896 * (v36[1] >> 4))) >> 32) >> 2);
        *unint64_t v40 = (32
              * (((4195329 * (unint64_t)(896 * (v36[2] >> 4))) >> 34)
               + (((4195329 * (unint64_t)(896 * (*v36 >> 4))) >> 32) >> 2))
              + 4128) & 0xFFC0;
        v40[1] = (32 * v41 + 4128) & 0xFFC0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v9 - v33;
    do
    {
      unsigned int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        unsigned int v44 = v14 + 4;
        unsigned int v46 = (((4195329 * (unint64_t)(896 * (v14[3] >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(896 * (v14[1] >> 4))) >> 32) >> 2);
        _WORD *v21 = (32
              * (((4195329 * (unint64_t)(896 * (v14[2] >> 4))) >> 34)
               + (((4195329 * (unint64_t)(896 * (*v14 >> 4))) >> 32) >> 2))
              + 4128) & 0xFFC0;
        v21[1] = (32 * v46 + 4128) & 0xFFC0;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          unsigned int v48 = &v45[v47];
          unsigned int v49 = (((4195329 * (unint64_t)(896 * (v44[3] >> 4))) >> 32) >> 2)
              + (((4195329 * (unint64_t)(896 * (v44[1] >> 4))) >> 32) >> 2);
          *unsigned int v48 = (32
                * (((4195329 * (unint64_t)(896 * (v44[2] >> 4))) >> 34)
                 + (((4195329 * (unint64_t)(896 * (*v44 >> 4))) >> 32) >> 2))
                + 4128) & 0xFFC0;
          v48[1] = (32 * v49 + 4128) & 0xFFC0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if (v34)
    {
      int v50 = *v14 >> 4;
      int v51 = v14[1] >> 4;
      int v52 = v14[2] >> 4;
      int v53 = v14[3] >> 4;
      v14 += 4;
      _WORD *v21 = (32
            * ((((4195329 * (unint64_t)(896 * v52)) >> 32) >> 2)
             + (((4195329 * (unint64_t)(896 * v50)) >> 32) >> 2))
            + 4128) & 0xFFC0;
      v21[1] = (32
              * ((((4195329 * (unint64_t)(896 * v53)) >> 32) >> 2)
               + (((4195329 * (unint64_t)(896 * v51)) >> 32) >> 2))
              + 4128) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        unsigned int v55 = &v21[v54];
        unsigned int v56 = (((4195329 * (unint64_t)(896 * (v14[3] >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(896 * (v14[1] >> 4))) >> 32) >> 2);
        *unsigned int v55 = (32
              * (((4195329 * (unint64_t)(896 * (v14[2] >> 4))) >> 34)
               + (((4195329 * (unint64_t)(896 * (*v14 >> 4))) >> 32) >> 2))
              + 4128) & 0xFFC0;
        v55[1] = (32 * v56 + 4128) & 0xFFC0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)(((4195329
                                                                      * (unint64_t)(876
                                                                                         * (*(unsigned __int16 *)(v30 + 2 * i) >> 4))) >> 32) >> 2) << 6)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v38 = v14[1] >> 4;
      unsigned int v36 = v14 + 4;
      _WORD *v21 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v14 >> 4))) >> 32) >> 2) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v38)) >> 34) << 6) + 4096;
      unsigned int v37 = v21 + 2;
    }
    else
    {
      unsigned int v36 = v14;
      unsigned int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unint64_t v41 = (4195329 * (unint64_t)(896 * (v36[1] >> 4))) >> 34;
        *unint64_t v40 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v36 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v40[1] = ((_WORD)v41 << 6) + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      unsigned int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v46 = v14[1] >> 4;
        unsigned int v44 = v14 + 4;
        _WORD *v21 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v14 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v21[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v46)) >> 34) << 6) + 4096;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          unsigned int v48 = &v45[v47];
          unint64_t v49 = (4195329 * (unint64_t)(896 * (v44[1] >> 4))) >> 34;
          *unsigned int v48 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v44 >> 4))) >> 32) >> 2) << 6)
               + 4096;
          v48[1] = ((_WORD)v49 << 6) + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = *v14 >> 4;
      int v51 = v14[1] >> 4;
      v14 += 4;
      _WORD *v21 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v50)) >> 32) >> 2) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v51)) >> 34) << 6) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unint64_t v54 = (4195329 * (unint64_t)(896 * (v14[1] >> 4))) >> 34;
        *int v53 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v14 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v53[1] = ((_WORD)v54 << 6) + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((unsigned __int16)(((4195329
                                                                      * (unint64_t)(876
                                                                                         * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32) >> 2) << 6)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unsigned int v36 = (((4195329 * (unint64_t)(896 * (v14[3] >> 4))) >> 32) >> 2)
          + (((4195329 * (unint64_t)(896 * (v14[1] >> 4))) >> 32) >> 2);
      _WORD *v21 = (32
            * ((((4195329 * (unint64_t)(896 * (v14[2] >> 4))) >> 32) >> 2)
             + (((4195329 * (unint64_t)(896 * (*v14 >> 4))) >> 32) >> 2))
            + 4128) & 0xFFC0;
      v21[1] = (32 * v36 + 4128) & 0xFFC0;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = (((4195329 * (unint64_t)(896 * (v34[3] >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(896 * (v34[1] >> 4))) >> 32) >> 2);
        _WORD *v38 = (32
              * (((4195329 * (unint64_t)(896 * (v34[2] >> 4))) >> 34)
               + (((4195329 * (unint64_t)(896 * (*v34 >> 4))) >> 32) >> 2))
              + 4128) & 0xFFC0;
        v38[1] = (32 * v39 + 4128) & 0xFFC0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        unsigned int v44 = (((4195329 * (unint64_t)(896 * (v14[3] >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(896 * (v14[1] >> 4))) >> 32) >> 2);
        _WORD *v21 = (32
              * (((4195329 * (unint64_t)(896 * (v14[2] >> 4))) >> 34)
               + (((4195329 * (unint64_t)(896 * (*v14 >> 4))) >> 32) >> 2))
              + 4128) & 0xFFC0;
        v21[1] = (32 * v44 + 4128) & 0xFFC0;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = (((4195329 * (unint64_t)(896 * (v42[3] >> 4))) >> 32) >> 2)
              + (((4195329 * (unint64_t)(896 * (v42[1] >> 4))) >> 32) >> 2);
          *int v46 = (32
                * (((4195329 * (unint64_t)(896 * (v42[2] >> 4))) >> 34)
                 + (((4195329 * (unint64_t)(896 * (*v42 >> 4))) >> 32) >> 2))
                + 4128) & 0xFFC0;
          v46[1] = (32 * v47 + 4128) & 0xFFC0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 >> 4;
      int v49 = v14[1] >> 4;
      int v50 = v14[2] >> 4;
      int v51 = v14[3] >> 4;
      v14 += 4;
      _WORD *v21 = (32
            * ((((4195329 * (unint64_t)(896 * v50)) >> 32) >> 2)
             + (((4195329 * (unint64_t)(896 * v48)) >> 32) >> 2))
            + 4128) & 0xFFC0;
      v21[1] = (32
              * ((((4195329 * (unint64_t)(896 * v51)) >> 32) >> 2)
               + (((4195329 * (unint64_t)(896 * v49)) >> 32) >> 2))
              + 4128) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unsigned int v54 = (((4195329 * (unint64_t)(896 * (v14[3] >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(896 * (v14[1] >> 4))) >> 32) >> 2);
        *int v53 = (32
              * (((4195329 * (unint64_t)(896 * (v14[2] >> 4))) >> 34)
               + (((4195329 * (unint64_t)(896 * (*v14 >> 4))) >> 32) >> 2))
              + 4128) & 0xFFC0;
        v53[1] = (32 * v54 + 4128) & 0xFFC0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((unsigned __int16)(((4195329
                                                                      * (unint64_t)(876
                                                                                         * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32) >> 2) << 6)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1] >> 4;
      char v34 = v14 + 4;
      _WORD *v21 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v14 >> 4))) >> 32) >> 2) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v36)) >> 34) << 6) + 4096;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (4195329 * (unint64_t)(896 * (v34[1] >> 4))) >> 34;
        _WORD *v38 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v34 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v38[1] = ((_WORD)v39 << 6) + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1] >> 4;
        unint64_t v42 = v14 + 4;
        _WORD *v21 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v14 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v21[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v44)) >> 34) << 6) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unint64_t v47 = (4195329 * (unint64_t)(896 * (v42[1] >> 4))) >> 34;
          *int v46 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v42 >> 4))) >> 32) >> 2) << 6)
               + 4096;
          v46[1] = ((_WORD)v47 << 6) + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 >> 4;
      int v49 = v14[1] >> 4;
      v14 += 4;
      _WORD *v21 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * v48)) >> 32) >> 2) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v49)) >> 34) << 6) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unint64_t v52 = (4195329 * (unint64_t)(896 * (v14[1] >> 4))) >> 34;
        *int v51 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v14 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v51[1] = ((_WORD)v52 << 6) + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)(((4195329
                                                                     * (unint64_t)(1023
                                                                                        * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32) >> 2) << 6;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unint64_t v36 = (4195329 * (unint64_t)(1023 * (v14[1] >> 4))) >> 34;
      unsigned int v37 = 1023 * (v14[3] >> 4);
      _WORD *v21 = (32
            * (((4195329 * (unint64_t)(1023 * (v14[2] >> 4))) >> 34)
             + (((4195329 * (unint64_t)(1023 * (*v14 >> 4))) >> 32) >> 2))
            + 32) & 0xFFC0;
      v21[1] = (32 * ((((4195329 * (unint64_t)v37) >> 32) >> 2) + v36) + 32) & 0xFFC0;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v38 = 0;
      do
      {
        unint64_t v39 = &v35[v38];
        unsigned int v40 = (((4195329 * (unint64_t)(1023 * (v34[3] >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(1023 * (v34[1] >> 4))) >> 32) >> 2);
        *unint64_t v39 = (32
              * (((4195329 * (unint64_t)(1023 * (v34[2] >> 4))) >> 34)
               + (((4195329 * (unint64_t)(1023 * (*v34 >> 4))) >> 32) >> 2))
              + 32) & 0xFFC0;
        v39[1] = (32 * v40 + 32) & 0xFFC0;
        v38 += 2;
        v34 += 4;
      }
      while (v38 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v9 - v31;
    do
    {
      uint64_t v43 = v14;
      int v44 = v21;
      if (v32)
      {
        uint64_t v43 = v14 + 4;
        unsigned int v45 = (((4195329 * (unint64_t)(1023 * (v14[3] >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(1023 * (v14[1] >> 4))) >> 32) >> 2);
        _WORD *v21 = (32
              * (((4195329 * (unint64_t)(1023 * (v14[2] >> 4))) >> 34)
               + (((4195329 * (unint64_t)(1023 * (*v14 >> 4))) >> 32) >> 2))
              + 32) & 0xFFC0;
        v21[1] = (32 * v45 + 32) & 0xFFC0;
        int v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          unint64_t v47 = &v44[v46];
          unsigned int v48 = (((4195329 * (unint64_t)(1023 * (v43[3] >> 4))) >> 32) >> 2)
              + (((4195329 * (unint64_t)(1023 * (v43[1] >> 4))) >> 32) >> 2);
          _WORD *v47 = (32
                * (((4195329 * (unint64_t)(1023 * (v43[2] >> 4))) >> 34)
                 + (((4195329 * (unint64_t)(1023 * (*v43 >> 4))) >> 32) >> 2))
                + 32) & 0xFFC0;
          v47[1] = (32 * v48 + 32) & 0xFFC0;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v49 = *v14;
      unsigned int v50 = v14[1];
      unsigned int v51 = v14[2];
      unsigned int v52 = v14[3];
      v14 += 4;
      _WORD *v21 = (32
            * (((4195329 * (unint64_t)(1023 * (v51 >> 4))) >> 34)
             + (((4195329 * (unint64_t)(1023 * (v49 >> 4))) >> 32) >> 2))
            + 32) & 0xFFC0;
      v21[1] = (32
              * ((((4195329 * (unint64_t)(1023 * (v52 >> 4))) >> 32) >> 2)
               + ((4195329 * (unint64_t)(1023 * (v50 >> 4))) >> 34))
              + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v53 = 0;
      do
      {
        unsigned int v54 = &v21[v53];
        unsigned int v55 = (((4195329 * (unint64_t)(1023 * (v14[3] >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(1023 * (v14[1] >> 4))) >> 32) >> 2);
        *unsigned int v54 = (32
              * (((4195329 * (unint64_t)(1023 * (v14[2] >> 4))) >> 34)
               + (((4195329 * (unint64_t)(1023 * (*v14 >> 4))) >> 32) >> 2))
              + 32) & 0xFFC0;
        v54[1] = (32 * v55 + 32) & 0xFFC0;
        v53 += 2;
        v14 += 4;
      }
      while (v53 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)(((4195329
                                                                     * (unint64_t)(1023
                                                                                        * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32) >> 2) << 6;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unsigned int v36 = v14[1];
      char v34 = v14 + 4;
      _WORD *v21 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v14 >> 4))) >> 32) >> 2) << 6;
      v21[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v36 >> 4))) >> 34) << 6;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v38 = &v35[v37];
        unint64_t v39 = (4195329 * (unint64_t)(1023 * (v34[1] >> 4))) >> 34;
        _WORD *v38 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v34 >> 4))) >> 32) >> 2) << 6;
        v38[1] = (_WORD)v39 << 6;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      uint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unsigned int v44 = v14[1];
        uint64_t v42 = v14 + 4;
        _WORD *v21 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v14 >> 4))) >> 32) >> 2) << 6;
        v21[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v44 >> 4))) >> 34) << 6;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          unint64_t v46 = &v43[v45];
          unint64_t v47 = (4195329 * (unint64_t)(1023 * (v42[1] >> 4))) >> 34;
          *unint64_t v46 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v42 >> 4))) >> 32) >> 2) << 6;
          v46[1] = (_WORD)v47 << 6;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v48 = *v14;
      unsigned int v49 = v14[1];
      v14 += 4;
      _WORD *v21 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (v48 >> 4))) >> 32) >> 2) << 6;
      v21[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v49 >> 4))) >> 34) << 6;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        unsigned int v51 = &v21[v50];
        unint64_t v52 = (4195329 * (unint64_t)(1023 * (v14[1] >> 4))) >> 34;
        *unsigned int v51 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v14 >> 4))) >> 32) >> 2) << 6;
        v51[1] = (_WORD)v52 << 6;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((4195329
                                                                      * (unint64_t)(876
                                                                                         * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 2) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      unint64_t v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v40 = *v39 >> 4;
      int v41 = v39[1] >> 4;
      unint64_t v37 = v15 + 4;
      unsigned int v42 = (((4195329 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32) >> 2)
          + (((4195329 * (unint64_t)(896 * (v15[1] >> 4))) >> 32) >> 2)
          + (((4195329 * (unint64_t)(896 * (v15[3] >> 4))) >> 32) >> 2)
          + (((4195329 * (unint64_t)(896 * v41)) >> 32) >> 2);
      *unint64_t v22 = (16
            * ((((4195329 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32) >> 2)
             + (((4195329 * (unint64_t)(896 * (*v15 >> 4))) >> 32) >> 2)
             + (((4195329 * (unint64_t)(896 * (v15[2] >> 4))) >> 32) >> 2)
             + ((4195329 * (unint64_t)(896 * v40)) >> 34))
            + 4128) & 0xFFC0;
      v22[1] = (16 * v42 + 4128) & 0xFFC0;
      unint64_t v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      unint64_t v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      unsigned int v44 = v37 + 2;
      do
      {
        unsigned int v45 = (((4195329 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v44 + v14 - 2) >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(896 * (*(v44 - 1) >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(896 * (v44[1] >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v44 + v14 + 2) >> 4))) >> 32) >> 2);
        unint64_t v46 = &v38[v43];
        *unint64_t v46 = (16
              * ((((4195329 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v44 + v14 - 4) >> 4))) >> 32) >> 2)
               + (((4195329 * (unint64_t)(896 * (*(v44 - 2) >> 4))) >> 32) >> 2)
               + ((4195329 * (unint64_t)(896 * (*v44 >> 4))) >> 34)
               + ((4195329 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v44 + v14) >> 4))) >> 34))
              + 4128) & 0xFFC0;
        v46[1] = (16 * v45 + 4128) & 0xFFC0;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      unsigned int v49 = v15;
      unint64_t v50 = v22;
      if (v9)
      {
        unsigned int v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v52 = *v51 >> 4;
        int v53 = v51[1] >> 4;
        unsigned int v49 = v15 + 4;
        unsigned int v54 = (((4195329 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(896 * (v15[1] >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(896 * (v15[3] >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(896 * v53)) >> 32) >> 2);
        *unint64_t v22 = (16
              * (((4195329 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 34)
               + (((4195329 * (unint64_t)(896 * (*v15 >> 4))) >> 32) >> 2)
               + (((4195329 * (unint64_t)(896 * (v15[2] >> 4))) >> 32) >> 2)
               + ((4195329 * (unint64_t)(896 * v52)) >> 34))
              + 4128) & 0xFFC0;
        v22[1] = (16 * v54 + 4128) & 0xFFC0;
        unint64_t v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v55 = 0;
        unsigned int v56 = v49 + 2;
        do
        {
          unsigned int v57 = (((4195329 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v56 + v14 - 2) >> 4))) >> 32) >> 2)
              + (((4195329 * (unint64_t)(896 * (*(v56 - 1) >> 4))) >> 32) >> 2)
              + (((4195329 * (unint64_t)(896 * (v56[1] >> 4))) >> 32) >> 2)
              + (((4195329 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v56 + v14 + 2) >> 4))) >> 32) >> 2);
          int v58 = &v50[v55];
          _WORD *v58 = (16
                * ((((4195329
                                  * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v56 + v14 - 4) >> 4))) >> 32) >> 2)
                 + (((4195329 * (unint64_t)(896 * (*(v56 - 2) >> 4))) >> 32) >> 2)
                 + ((4195329 * (unint64_t)(896 * (*v56 >> 4))) >> 34)
                 + ((4195329 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v56 + v14) >> 4))) >> 34))
                + 4128) & 0xFFC0;
          v58[1] = (16 * v57 + 4128) & 0xFFC0;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((4195329
                                                                      * (unint64_t)(876
                                                                                         * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 2) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      int v39 = v15[1] >> 4;
      unint64_t v37 = v15 + 4;
      *unint64_t v22 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v15 >> 4))) >> 32) >> 2) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v39)) >> 34) << 6) + 4096;
      unint64_t v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      unint64_t v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (4195329 * (unint64_t)(896 * (v37[1] >> 4))) >> 34;
        _WORD *v41 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v37 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v41[1] = ((_WORD)v42 << 6) + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unint64_t v46 = v15;
      unint64_t v47 = v22;
      if (v9)
      {
        int v48 = v15[1] >> 4;
        unint64_t v46 = v15 + 4;
        *unint64_t v22 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v15 >> 4))) >> 32) >> 2) << 6)
             + 4096;
        v22[1] = ((unsigned __int16)((4195329 * (unint64_t)(896 * v48)) >> 34) << 6) + 4096;
        unint64_t v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          unint64_t v51 = (4195329 * (unint64_t)(896 * (v46[1] >> 4))) >> 34;
          _WORD *v50 = ((unsigned __int16)(((4195329 * (unint64_t)(896 * (*v46 >> 4))) >> 32) >> 2) << 6)
               + 4096;
          v50[1] = ((_WORD)v51 << 6) + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * v10);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v62 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + ((unint64_t)(v62 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - v10;
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = v13 - v12;
  unint64_t v25 = v19 - v18;
  if (v24 < v19 - v18) {
    unint64_t v25 = v24;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12 + 2 * v10;
    if (v12 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v32 + 2 * i) = (unsigned __int16)(((4195329
                                                                     * (unint64_t)(1023
                                                                                        * (*(unsigned __int16 *)(v31 + 2 * i) >> 4))) >> 32) >> 2) << 6;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v8 & 1)) {
    uint64_t v34 = v8 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v9 = v9;
  if (v22 >= (v9 & 1u)) {
    uint64_t v35 = v9 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v22 - v35;
  if (v8)
  {
    uint64_t v37 = v34;
    if (v9)
    {
      unint64_t v40 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      unsigned int v41 = *v40;
      unsigned int v42 = v40[1];
      unint64_t v38 = v15 + 4;
      unsigned int v43 = (((4195329 * (unint64_t)(1023 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32) >> 2)
          + (((4195329 * (unint64_t)(1023 * (v15[1] >> 4))) >> 32) >> 2)
          + (((4195329 * (unint64_t)(1023 * (v15[3] >> 4))) >> 32) >> 2);
      _WORD *v21 = (16
            * ((((4195329 * (unint64_t)(1023 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32) >> 2)
             + (((4195329 * (unint64_t)(1023 * (*v15 >> 4))) >> 32) >> 2)
             + ((4195329 * (unint64_t)(1023 * (v15[2] >> 4))) >> 34)
             + ((4195329 * (unint64_t)(1023 * (v41 >> 4))) >> 34))
            + 32) & 0xFFC0;
      v21[1] = (16 * (v43 + (((4195329 * (unint64_t)(1023 * (v42 >> 4))) >> 32) >> 2)) + 32) & 0xFFC0;
      int v39 = v21 + 2;
    }
    else
    {
      unint64_t v38 = v15;
      int v39 = v21;
    }
    if (v22 != v35)
    {
      unint64_t v44 = 0;
      uint64_t v45 = v38 + 2;
      do
      {
        unsigned int v46 = (((4195329 * (unint64_t)(1023 * (*(unsigned __int16 *)((char *)v45 + v14 - 2) >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(1023 * (*(v45 - 1) >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(1023 * (v45[1] >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(1023 * (*(unsigned __int16 *)((char *)v45 + v14 + 2) >> 4))) >> 32) >> 2);
        unint64_t v47 = &v39[v44];
        _WORD *v47 = (16
              * ((((4195329
                                * (unint64_t)(1023 * (*(unsigned __int16 *)((char *)v45 + v14 - 4) >> 4))) >> 32) >> 2)
               + (((4195329 * (unint64_t)(1023 * (*(v45 - 2) >> 4))) >> 32) >> 2)
               + ((4195329 * (unint64_t)(1023 * (*v45 >> 4))) >> 34)
               + (((4195329 * (unint64_t)(1023 * (*(unsigned __int16 *)((char *)v45 + v14) >> 4))) >> 32) >> 2))
              + 32) & 0xFFC0;
        v47[1] = (16 * v46 + 32) & 0xFFC0;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v36);
    }
    v15 += v14;
    uint64_t v21 = (_WORD *)((char *)v21 + v62);
    uint64_t v34 = v37;
  }
  if (v25 != v34)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v25 - v34;
    do
    {
      unint64_t v50 = v15;
      unint64_t v51 = v21;
      uint64_t v52 = v9;
      if (v9)
      {
        int v53 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        unsigned int v54 = *v53;
        unsigned int v55 = v53[1];
        unint64_t v50 = v15 + 4;
        unsigned int v56 = (((4195329 * (unint64_t)(1023 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(1023 * (v15[1] >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(1023 * (v15[3] >> 4))) >> 32) >> 2)
            + (((4195329 * (unint64_t)(1023 * (v55 >> 4))) >> 32) >> 2);
        _WORD *v21 = (16
              * ((((4195329 * (unint64_t)(1023 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32) >> 2)
               + (((4195329 * (unint64_t)(1023 * (*v15 >> 4))) >> 32) >> 2)
               + (((4195329 * (unint64_t)(1023 * (v15[2] >> 4))) >> 32) >> 2)
               + ((4195329 * (unint64_t)(1023 * (v54 >> 4))) >> 34))
              + 32) & 0xFFC0;
        v21[1] = (16 * v56 + 32) & 0xFFC0;
        unint64_t v51 = v21 + 2;
      }
      if (v22 != v35)
      {
        unint64_t v57 = 0;
        int v58 = v50 + 2;
        do
        {
          unsigned int v59 = (((4195329 * (unint64_t)(1023 * (*(unsigned __int16 *)((char *)v58 + v14 - 2) >> 4))) >> 32) >> 2)
              + (((4195329 * (unint64_t)(1023 * (*(v58 - 1) >> 4))) >> 32) >> 2)
              + (((4195329 * (unint64_t)(1023 * (v58[1] >> 4))) >> 32) >> 2)
              + (((4195329 * (unint64_t)(1023 * (*(unsigned __int16 *)((char *)v58 + v14 + 2) >> 4))) >> 32) >> 2);
          uint64_t v60 = &v51[v57];
          *uint64_t v60 = (16
                * ((((4195329
                                  * (unint64_t)(1023 * (*(unsigned __int16 *)((char *)v58 + v14 - 4) >> 4))) >> 32) >> 2)
                 + (((4195329 * (unint64_t)(1023 * (*(v58 - 2) >> 4))) >> 32) >> 2)
                 + ((4195329 * (unint64_t)(1023 * (*v58 >> 4))) >> 34)
                 + (((4195329 * (unint64_t)(1023 * (*(unsigned __int16 *)((char *)v58 + v14) >> 4))) >> 32) >> 2))
                + 32) & 0xFFC0;
          v60[1] = (16 * v59 + 32) & 0xFFC0;
          v57 += 2;
          v58 += 4;
        }
        while (v57 < v36);
      }
      v15 += v14;
      uint64_t v21 = (_WORD *)((char *)v21 + v62);
      v48 += 2;
      uint64_t v9 = v52;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)(((4195329
                                                                     * (unint64_t)(1023
                                                                                        * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32) >> 2) << 6;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      unsigned int v39 = v15[1];
      uint64_t v37 = v15 + 4;
      *unint64_t v22 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v15 >> 4))) >> 32) >> 2) << 6;
      v22[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v39 >> 4))) >> 34) << 6;
      unint64_t v38 = v22 + 2;
    }
    else
    {
      uint64_t v37 = v15;
      unint64_t v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        unsigned int v41 = &v38[v40];
        unint64_t v42 = (4195329 * (unint64_t)(1023 * (v37[1] >> 4))) >> 34;
        _WORD *v41 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v37 >> 4))) >> 32) >> 2) << 6;
        v41[1] = (_WORD)v42 << 6;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v22;
      if (v9)
      {
        unsigned int v48 = v15[1];
        unsigned int v46 = v15 + 4;
        *unint64_t v22 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v15 >> 4))) >> 32) >> 2) << 6;
        v22[1] = (unsigned __int16)((4195329 * (unint64_t)(1023 * (v48 >> 4))) >> 34) << 6;
        unint64_t v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          unint64_t v51 = (4195329 * (unint64_t)(1023 * (v46[1] >> 4))) >> 34;
          _WORD *v50 = (unsigned __int16)(((4195329 * (unint64_t)(1023 * (*v46 >> 4))) >> 32) >> 2) << 6;
          v50[1] = (_WORD)v51 << 6;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_tf44_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v15 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v14 + 2 * v15);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v14;
    uint64_t v22 = *a7 + *a8 * v14;
    uint64_t v23 = *a4;
    uint64_t v24 = v21 + v15;
    uint64_t v25 = v22 + v15;
    uint64_t v26 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(unsigned char *)(v24 + i) = -1;
          *(unsigned char *)(v25 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v26 + 2 * i) >> 4))) >> 32)
                              + 16;
        }
      }
      v26 += v23;
      v25 += v19;
      v24 += v20;
      ++v18;
    }
    while (v18 != v11);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v28 = v8 & 1;
  if (v11 >= v28) {
    uint64_t v29 = v8 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  char v30 = v9;
  unint64_t v31 = v9 & 1;
  if (v10 >= v31) {
    uint64_t v32 = v9 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  unint64_t v33 = v10 - v32;
  if (v8)
  {
    if (v9)
    {
      int v36 = v13[1] >> 4;
      uint64_t v34 = v13 + 2;
      *uint64_t v17 = ((1048833 * (unint64_t)(224 * (*v13 >> 4))) >> 32) + 16;
      v17[1] = ((1048833 * (unint64_t)(224 * v36)) >> 32) + 16;
      uint64_t v35 = v17 + 2;
    }
    else
    {
      uint64_t v34 = v13;
      uint64_t v35 = v17;
    }
    if (v10 == v32)
    {
      unint64_t v37 = 0;
    }
    else
    {
      unint64_t v38 = v10 - v32;
      do
      {
        int v39 = *v34 >> 4;
        int v40 = v34[1] >> 4;
        v34 += 2;
        *uint64_t v35 = ((1048833 * (unint64_t)(224 * v39)) >> 32) + 16;
        v35[1] = ((1048833 * (unint64_t)(224 * v40)) >> 32) + 16;
        v35 += 2;
        --v38;
      }
      while (v38);
      unint64_t v37 = v10 - v32;
    }
    if (v37 + v31 < v10)
    {
      int v41 = *v34 >> 4;
      int v42 = v34[1] >> 4;
      *uint64_t v35 = ((1048833 * (unint64_t)(224 * v41)) >> 32) + 16;
      v35[1] = ((1048833 * (unint64_t)(224 * v42)) >> 32) + 16;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 += v16;
  }
  if (v11 == v29)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v11 - v29;
    do
    {
      uint64_t v45 = v13;
      unsigned int v46 = v17;
      if (v30)
      {
        int v47 = v13[1] >> 4;
        uint64_t v45 = v13 + 2;
        *uint64_t v17 = ((1048833 * (unint64_t)(224 * (*v13 >> 4))) >> 32) + 16;
        v17[1] = ((1048833 * (unint64_t)(224 * v47)) >> 32) + 16;
        unsigned int v46 = v17 + 2;
      }
      if (v10 == v32)
      {
        unint64_t v48 = 0;
      }
      else
      {
        unint64_t v49 = v10 - v32;
        do
        {
          int v50 = *v45 >> 4;
          int v51 = v45[1] >> 4;
          v45 += 2;
          *unsigned int v46 = ((1048833 * (unint64_t)(224 * v50)) >> 32) + 16;
          v46[1] = ((1048833 * (unint64_t)(224 * v51)) >> 32) + 16;
          v46 += 2;
          --v49;
        }
        while (v49);
        unint64_t v48 = v10 - v32;
      }
      if (v48 + v31 < v10)
      {
        int v52 = *v45 >> 4;
        int v53 = v45[1] >> 4;
        *unsigned int v46 = ((1048833 * (unint64_t)(224 * v52)) >> 32) + 16;
        v46[1] = ((1048833 * (unint64_t)(224 * v53)) >> 32) + 16;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 += v16;
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v11)
  {
    if (v30)
    {
      int v54 = *v13 >> 4;
      int v55 = v13[1] >> 4;
      v13 += 2;
      *uint64_t v17 = ((1048833 * (unint64_t)(224 * v54)) >> 32) + 16;
      v17[1] = ((1048833 * (unint64_t)(224 * v55)) >> 32) + 16;
      v17 += 2;
    }
    if (v10 == v32)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v56 = v10 - v32;
      do
      {
        int v57 = *v13 >> 4;
        int v58 = v13[1] >> 4;
        v13 += 2;
        *uint64_t v17 = ((1048833 * (unint64_t)(224 * v57)) >> 32) + 16;
        v17[1] = ((1048833 * (unint64_t)(224 * v58)) >> 32) + 16;
        v17 += 2;
        --v56;
      }
      while (v56);
    }
    if (v33 + v31 < v10)
    {
      int v59 = *v13 >> 4;
      int v60 = v13[1] >> 4;
      *uint64_t v17 = ((1048833 * (unint64_t)(224 * v59)) >> 32) + 16;
      v17[1] = ((1048833 * (unint64_t)(224 * v60)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf44_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (unsigned char *)(a7[1] + v15 * v13 + 2 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v13 + v14;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(unsigned char *)(v21 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v22 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v17);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v24 = v8 & 1;
  if (v17 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    uint64_t v28 = v9 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v9)
    {
      int v32 = v12[1] >> 4;
      char v30 = v12 + 2;
      *uint64_t v16 = ((1048833 * (unint64_t)(224 * (*v12 >> 4))) >> 32) + 16;
      v16[1] = ((1048833 * (unint64_t)(224 * v32)) >> 32) + 16;
      unint64_t v31 = v16 + 2;
    }
    else
    {
      char v30 = v12;
      unint64_t v31 = v16;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        int v35 = *v30 >> 4;
        int v36 = v30[1] >> 4;
        v30 += 2;
        *unint64_t v31 = ((1048833 * (unint64_t)(224 * v35)) >> 32) + 16;
        v31[1] = ((1048833 * (unint64_t)(224 * v36)) >> 32) + 16;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      int v37 = *v30 >> 4;
      int v38 = v30[1] >> 4;
      *unint64_t v31 = ((1048833 * (unint64_t)(224 * v37)) >> 32) + 16;
      v31[1] = ((1048833 * (unint64_t)(224 * v38)) >> 32) + 16;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 += v15;
  }
  if (v17 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v17 - v25;
    do
    {
      int v41 = v12;
      int v42 = v16;
      if (v26)
      {
        int v43 = v12[1] >> 4;
        int v41 = v12 + 2;
        *uint64_t v16 = ((1048833 * (unint64_t)(224 * (*v12 >> 4))) >> 32) + 16;
        v16[1] = ((1048833 * (unint64_t)(224 * v43)) >> 32) + 16;
        int v42 = v16 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          int v46 = *v41 >> 4;
          int v47 = v41[1] >> 4;
          v41 += 2;
          *int v42 = ((1048833 * (unint64_t)(224 * v46)) >> 32) + 16;
          v42[1] = ((1048833 * (unint64_t)(224 * v47)) >> 32) + 16;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        int v48 = *v41 >> 4;
        int v49 = v41[1] >> 4;
        *int v42 = ((1048833 * (unint64_t)(224 * v48)) >> 32) + 16;
        v42[1] = ((1048833 * (unint64_t)(224 * v49)) >> 32) + 16;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 += v15;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v17)
  {
    if (v26)
    {
      int v50 = *v12 >> 4;
      int v51 = v12[1] >> 4;
      v12 += 2;
      *uint64_t v16 = ((1048833 * (unint64_t)(224 * v50)) >> 32) + 16;
      v16[1] = ((1048833 * (unint64_t)(224 * v51)) >> 32) + 16;
      v16 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        int v53 = *v12 >> 4;
        int v54 = v12[1] >> 4;
        v12 += 2;
        *uint64_t v16 = ((1048833 * (unint64_t)(224 * v53)) >> 32) + 16;
        v16[1] = ((1048833 * (unint64_t)(224 * v54)) >> 32) + 16;
        v16 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      int v55 = *v12 >> 4;
      int v56 = v12[1] >> 4;
      *uint64_t v16 = ((1048833 * (unint64_t)(224 * v55)) >> 32) + 16;
      v16[1] = ((1048833 * (unint64_t)(224 * v56)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_tf44_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (unsigned char *)(a7[1] + v15 * v13 + 2 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v13 + v14;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(unsigned char *)(v21 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v22 + 2 * i) >> 4))) >> 32;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v17);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v24 = v8 & 1;
  if (v17 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    uint64_t v28 = v9 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v9)
    {
      unsigned int v32 = v12[1];
      char v30 = v12 + 2;
      *uint64_t v16 = (1048833 * (unint64_t)(255 * (*v12 >> 4))) >> 32;
      v16[1] = (1048833 * (unint64_t)(255 * (v32 >> 4))) >> 32;
      unint64_t v31 = v16 + 2;
    }
    else
    {
      char v30 = v12;
      unint64_t v31 = v16;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        unsigned int v35 = *v30;
        unsigned int v36 = v30[1];
        v30 += 2;
        *unint64_t v31 = (1048833 * (unint64_t)(255 * (v35 >> 4))) >> 32;
        v31[1] = (1048833 * (unint64_t)(255 * (v36 >> 4))) >> 32;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      unsigned int v37 = *v30;
      unsigned int v38 = v30[1];
      *unint64_t v31 = (1048833 * (unint64_t)(255 * (v37 >> 4))) >> 32;
      v31[1] = (1048833 * (unint64_t)(255 * (v38 >> 4))) >> 32;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 += v15;
  }
  if (v17 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v17 - v25;
    do
    {
      int v41 = v12;
      int v42 = v16;
      if (v26)
      {
        unsigned int v43 = v12[1];
        int v41 = v12 + 2;
        *uint64_t v16 = (1048833 * (unint64_t)(255 * (*v12 >> 4))) >> 32;
        v16[1] = (1048833 * (unint64_t)(255 * (v43 >> 4))) >> 32;
        int v42 = v16 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          unsigned int v46 = *v41;
          unsigned int v47 = v41[1];
          v41 += 2;
          *int v42 = (1048833 * (unint64_t)(255 * (v46 >> 4))) >> 32;
          v42[1] = (1048833 * (unint64_t)(255 * (v47 >> 4))) >> 32;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        unsigned int v48 = *v41;
        unint64_t v49 = (1048833 * (unint64_t)(255 * (v41[1] >> 4))) >> 32;
        *int v42 = (1048833 * (unint64_t)(255 * (v48 >> 4))) >> 32;
        v42[1] = v49;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 += v15;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v17)
  {
    if (v26)
    {
      unsigned int v50 = *v12;
      unsigned int v51 = v12[1];
      v12 += 2;
      *uint64_t v16 = (1048833 * (unint64_t)(255 * (v50 >> 4))) >> 32;
      v16[1] = (1048833 * (unint64_t)(255 * (v51 >> 4))) >> 32;
      v16 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        unsigned int v53 = *v12;
        unsigned int v54 = v12[1];
        v12 += 2;
        *uint64_t v16 = (1048833 * (unint64_t)(255 * (v53 >> 4))) >> 32;
        v16[1] = (1048833 * (unint64_t)(255 * (v54 >> 4))) >> 32;
        v16 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      unsigned int v55 = *v12;
      unsigned int v56 = v12[1];
      *uint64_t v16 = (1048833 * (unint64_t)(255 * (v55 >> 4))) >> 32;
      v16[1] = (1048833 * (unint64_t)(255 * (v56 >> 4))) >> 32;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v19 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v9 >= *(void *)(a6 + 24)) {
    unint64_t v9 = *(void *)(a6 + 24);
  }
  if (v9)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v16;
    uint64_t v24 = *a7 + *a8 * v16;
    uint64_t v25 = *a4;
    uint64_t v26 = v23 + v15;
    uint64_t v27 = v24 + v15;
    uint64_t v28 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v26 + i) = -1;
          *(unsigned char *)(v27 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v9);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v8 & 1;
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v19 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v19 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      unsigned int v36 = (((1048833 * (unint64_t)(224 * (v14[1] >> 4))) >> 32)
                         + ((1048833 * (unint64_t)(224 * (v14[3] >> 4))) >> 32)
                         + 33) >> 1;
      *uint64_t v18 = (((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(224 * (v14[2] >> 4))) >> 32)
                          + 33) >> 1;
      v18[1] = v36;
      unsigned int v35 = v18 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      unsigned int v35 = v18;
    }
    if (v19 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unsigned int v38 = &v35[v37];
        unsigned int v39 = (((1048833 * (unint64_t)(224 * (v34[1] >> 4))) >> 32)
                           + ((1048833 * (unint64_t)(224 * (v34[3] >> 4))) >> 32)
                           + 33) >> 1;
        unsigned char *v38 = (((1048833 * (unint64_t)(224 * (*v34 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (v34[2] >> 4))) >> 32)
                            + 33) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v18 += v17;
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      int v42 = v14;
      unsigned int v43 = v18;
      if (v32)
      {
        int v42 = v14 + 4;
        unsigned int v44 = (((1048833 * (unint64_t)(224 * (v14[1] >> 4))) >> 32)
                           + ((1048833 * (unint64_t)(224 * (v14[3] >> 4))) >> 32)
                           + 33) >> 1;
        *uint64_t v18 = (((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (v14[2] >> 4))) >> 32)
                            + 33) >> 1;
        v18[1] = v44;
        unsigned int v43 = v18 + 2;
      }
      if (v19 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          unsigned int v46 = &v43[v45];
          unsigned int v47 = (((1048833 * (unint64_t)(224 * (v42[1] >> 4))) >> 32)
                             + ((1048833 * (unint64_t)(224 * (v42[3] >> 4))) >> 32)
                             + 33) >> 1;
          *unsigned int v46 = (((1048833 * (unint64_t)(224 * (*v42 >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(224 * (v42[2] >> 4))) >> 32)
                              + 33) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 >> 4;
      int v49 = v14[1] >> 4;
      int v50 = v14[2] >> 4;
      int v51 = v14[3] >> 4;
      v14 += 4;
      *uint64_t v18 = (((1048833 * (unint64_t)(224 * v48)) >> 32)
                          + ((1048833 * (unint64_t)(224 * v50)) >> 32)
                          + 33) >> 1;
      v18[1] = (((1048833 * (unint64_t)(224 * v49)) >> 32)
                            + ((1048833 * (unint64_t)(224 * v51)) >> 32)
                            + 33) >> 1;
      v18 += 2;
    }
    if (v19 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        unsigned int v53 = &v18[v52];
        unsigned int v54 = (((1048833 * (unint64_t)(224 * (v14[1] >> 4))) >> 32)
                           + ((1048833 * (unint64_t)(224 * (v14[3] >> 4))) >> 32)
                           + 33) >> 1;
        *unsigned int v53 = (((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (v14[2] >> 4))) >> 32)
                            + 33) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v19 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v16;
    uint64_t v24 = *a7 + *a8 * v16;
    uint64_t v25 = *a4;
    uint64_t v26 = v23 + v15;
    uint64_t v27 = v24 + v15;
    uint64_t v28 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v26 + i) = -1;
          *(unsigned char *)(v27 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v19 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v19 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1] >> 4;
      unint64_t v34 = v14 + 4;
      *uint64_t v18 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
      v18[1] = ((1048833 * (unint64_t)(224 * v36)) >> 32) + 16;
      unsigned int v35 = v18 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      unsigned int v35 = v18;
    }
    if (v19 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unsigned int v38 = &v35[v37];
        unint64_t v39 = (1048833 * (unint64_t)(224 * (v34[1] >> 4))) >> 32;
        unsigned char *v38 = ((1048833 * (unint64_t)(224 * (*v34 >> 4))) >> 32) + 16;
        v38[1] = v39 + 16;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v18 += v17;
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      int v42 = v14;
      unsigned int v43 = v18;
      if (v32)
      {
        int v44 = v14[1] >> 4;
        int v42 = v14 + 4;
        *uint64_t v18 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
        v18[1] = ((1048833 * (unint64_t)(224 * v44)) >> 32) + 16;
        unsigned int v43 = v18 + 2;
      }
      if (v19 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          unsigned int v46 = &v43[v45];
          unint64_t v47 = (1048833 * (unint64_t)(224 * (v42[1] >> 4))) >> 32;
          *unsigned int v46 = ((1048833 * (unint64_t)(224 * (*v42 >> 4))) >> 32) + 16;
          v46[1] = v47 + 16;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      int v48 = *v14 >> 4;
      int v49 = v14[1] >> 4;
      v14 += 4;
      *uint64_t v18 = ((1048833 * (unint64_t)(224 * v48)) >> 32) + 16;
      v18[1] = ((1048833 * (unint64_t)(224 * v49)) >> 32) + 16;
      v18 += 2;
    }
    if (v19 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v18[v50];
        unint64_t v52 = (1048833 * (unint64_t)(224 * (v14[1] >> 4))) >> 32;
        *int v51 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
        v51[1] = v52 + 16;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v27 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v9);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v8 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v9 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v8;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      unint64_t v33 = v14 + 4;
      unsigned int v35 = (((1048833 * (unint64_t)(224 * (v14[1] >> 4))) >> 32)
                         + ((1048833 * (unint64_t)(224 * (v14[3] >> 4))) >> 32)
                         + 33) >> 1;
      *uint64_t v20 = (((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(224 * (v14[2] >> 4))) >> 32)
                          + 33) >> 1;
      v20[1] = v35;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        unsigned int v38 = (((1048833 * (unint64_t)(224 * (v33[1] >> 4))) >> 32)
                           + ((1048833 * (unint64_t)(224 * (v33[3] >> 4))) >> 32)
                           + 33) >> 1;
        *unint64_t v37 = (((1048833 * (unint64_t)(224 * (*v33 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (v33[2] >> 4))) >> 32)
                            + 33) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v9 - v30;
    do
    {
      uint64_t v41 = v14;
      int v42 = v20;
      if (v31)
      {
        uint64_t v41 = v14 + 4;
        unsigned int v43 = (((1048833 * (unint64_t)(224 * (v14[1] >> 4))) >> 32)
                           + ((1048833 * (unint64_t)(224 * (v14[3] >> 4))) >> 32)
                           + 33) >> 1;
        *uint64_t v20 = (((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (v14[2] >> 4))) >> 32)
                            + 33) >> 1;
        v20[1] = v43;
        int v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          unsigned int v46 = (((1048833 * (unint64_t)(224 * (v41[1] >> 4))) >> 32)
                             + ((1048833 * (unint64_t)(224 * (v41[3] >> 4))) >> 32)
                             + 33) >> 1;
          *unint64_t v45 = (((1048833 * (unint64_t)(224 * (*v41 >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(224 * (v41[2] >> 4))) >> 32)
                              + 33) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v9)
  {
    if (v31)
    {
      int v47 = *v14 >> 4;
      int v48 = v14[1] >> 4;
      int v49 = v14[2] >> 4;
      int v50 = v14[3] >> 4;
      v14 += 4;
      *uint64_t v20 = (((1048833 * (unint64_t)(224 * v47)) >> 32)
                          + ((1048833 * (unint64_t)(224 * v49)) >> 32)
                          + 33) >> 1;
      v20[1] = (((1048833 * (unint64_t)(224 * v48)) >> 32)
                            + ((1048833 * (unint64_t)(224 * v50)) >> 32)
                            + 33) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v51 = 0;
      do
      {
        unint64_t v52 = &v20[v51];
        unsigned int v53 = (((1048833 * (unint64_t)(224 * (v14[1] >> 4))) >> 32)
                           + ((1048833 * (unint64_t)(224 * (v14[3] >> 4))) >> 32)
                           + 33) >> 1;
        *unint64_t v52 = (((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (v14[2] >> 4))) >> 32)
                            + 33) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v27 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      int v35 = v14[1] >> 4;
      unint64_t v33 = v14 + 4;
      *uint64_t v20 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
      v20[1] = ((1048833 * (unint64_t)(224 * v35)) >> 32) + 16;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        unint64_t v38 = (1048833 * (unint64_t)(224 * (v33[1] >> 4))) >> 32;
        *unint64_t v37 = ((1048833 * (unint64_t)(224 * (*v33 >> 4))) >> 32) + 16;
        v37[1] = v38 + 16;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v30;
    do
    {
      uint64_t v41 = v14;
      int v42 = v20;
      if (v31)
      {
        int v43 = v14[1] >> 4;
        uint64_t v41 = v14 + 4;
        *uint64_t v20 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
        v20[1] = ((1048833 * (unint64_t)(224 * v43)) >> 32) + 16;
        int v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          unint64_t v46 = (1048833 * (unint64_t)(224 * (v41[1] >> 4))) >> 32;
          *unint64_t v45 = ((1048833 * (unint64_t)(224 * (*v41 >> 4))) >> 32) + 16;
          v45[1] = v46 + 16;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if (v31)
    {
      int v47 = *v14 >> 4;
      int v48 = v14[1] >> 4;
      v14 += 4;
      *uint64_t v20 = ((1048833 * (unint64_t)(224 * v47)) >> 32) + 16;
      v20[1] = ((1048833 * (unint64_t)(224 * v48)) >> 32) + 16;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v49 = 0;
      do
      {
        int v50 = &v20[v49];
        unint64_t v51 = (1048833 * (unint64_t)(224 * (v14[1] >> 4))) >> 32;
        unsigned char *v50 = ((1048833 * (unint64_t)(224 * (*v14 >> 4))) >> 32) + 16;
        v50[1] = v51 + 16;
        v49 += 2;
        v14 += 4;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v27 + 2 * i) >> 4))) >> 32;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v9);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v8 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v9 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v8;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      unint64_t v33 = v14 + 4;
      unsigned int v35 = (((1048833 * (unint64_t)(255 * (v14[1] >> 4))) >> 32)
                         + ((1048833 * (unint64_t)(255 * (v14[3] >> 4))) >> 32)
                         + 1) >> 1;
      *uint64_t v20 = (((1048833 * (unint64_t)(255 * (*v14 >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(255 * (v14[2] >> 4))) >> 32)
                          + 1) >> 1;
      v20[1] = v35;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        unsigned int v38 = (((1048833 * (unint64_t)(255 * (v33[1] >> 4))) >> 32)
                           + ((1048833 * (unint64_t)(255 * (v33[3] >> 4))) >> 32)
                           + 1) >> 1;
        *unint64_t v37 = (((1048833 * (unint64_t)(255 * (*v33 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (v33[2] >> 4))) >> 32)
                            + 1) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v9 - v30;
    do
    {
      uint64_t v41 = v14;
      int v42 = v20;
      if (v31)
      {
        uint64_t v41 = v14 + 4;
        unsigned int v43 = (((1048833 * (unint64_t)(255 * (v14[1] >> 4))) >> 32)
                           + ((1048833 * (unint64_t)(255 * (v14[3] >> 4))) >> 32)
                           + 1) >> 1;
        *uint64_t v20 = (((1048833 * (unint64_t)(255 * (*v14 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (v14[2] >> 4))) >> 32)
                            + 1) >> 1;
        v20[1] = v43;
        int v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          unsigned int v46 = (((1048833 * (unint64_t)(255 * (v41[1] >> 4))) >> 32)
                             + ((1048833 * (unint64_t)(255 * (v41[3] >> 4))) >> 32)
                             + 1) >> 1;
          *unint64_t v45 = (((1048833 * (unint64_t)(255 * (*v41 >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(255 * (v41[2] >> 4))) >> 32)
                              + 1) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v9)
  {
    if (v31)
    {
      unsigned int v47 = *v14;
      unsigned int v48 = v14[1];
      unsigned int v49 = v14[2];
      unsigned int v50 = v14[3];
      v14 += 4;
      *uint64_t v20 = (((1048833 * (unint64_t)(255 * (v47 >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(255 * (v49 >> 4))) >> 32)
                          + 1) >> 1;
      v20[1] = (((1048833 * (unint64_t)(255 * (v48 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (v50 >> 4))) >> 32)
                            + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v51 = 0;
      do
      {
        unint64_t v52 = &v20[v51];
        unsigned int v53 = (((1048833 * (unint64_t)(255 * (v14[1] >> 4))) >> 32)
                           + ((1048833 * (unint64_t)(255 * (v14[3] >> 4))) >> 32)
                           + 1) >> 1;
        *unint64_t v52 = (((1048833 * (unint64_t)(255 * (*v14 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (v14[2] >> 4))) >> 32)
                            + 1) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v27 + 2 * i) >> 4))) >> 32;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      unsigned int v35 = v14[1];
      unint64_t v33 = v14 + 4;
      *uint64_t v20 = (1048833 * (unint64_t)(255 * (*v14 >> 4))) >> 32;
      v20[1] = (1048833 * (unint64_t)(255 * (v35 >> 4))) >> 32;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        unsigned int v38 = v33[1];
        *unint64_t v37 = (1048833 * (unint64_t)(255 * (*v33 >> 4))) >> 32;
        v37[1] = (1048833 * (unint64_t)(255 * (v38 >> 4))) >> 32;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v30;
    do
    {
      uint64_t v41 = v14;
      int v42 = v20;
      if (v31)
      {
        unsigned int v43 = v14[1];
        uint64_t v41 = v14 + 4;
        *uint64_t v20 = (1048833 * (unint64_t)(255 * (*v14 >> 4))) >> 32;
        v20[1] = (1048833 * (unint64_t)(255 * (v43 >> 4))) >> 32;
        int v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          unsigned int v46 = v41[1];
          *unint64_t v45 = (1048833 * (unint64_t)(255 * (*v41 >> 4))) >> 32;
          v45[1] = (1048833 * (unint64_t)(255 * (v46 >> 4))) >> 32;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if (v31)
    {
      unsigned int v47 = *v14;
      unsigned int v48 = v14[1];
      v14 += 4;
      *uint64_t v20 = (1048833 * (unint64_t)(255 * (v47 >> 4))) >> 32;
      v20[1] = (1048833 * (unint64_t)(255 * (v48 >> 4))) >> 32;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v49 = 0;
      do
      {
        unsigned int v50 = &v20[v49];
        unsigned int v51 = v14[1];
        unsigned char *v50 = (1048833 * (unint64_t)(255 * (*v14 >> 4))) >> 32;
        v50[1] = (1048833 * (unint64_t)(255 * (v51 >> 4))) >> 32;
        v49 += 2;
        v14 += 4;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    if (v13 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v27 + v30;
    uint64_t v32 = a7[2] + v29 * v18 + v16;
    uint64_t v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(unsigned char *)(v32 + i) = -1;
          *(unsigned char *)(v33 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v31 + 2 * i) >> 4))) >> 32)
                              + 16;
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      unint64_t v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v40 = *v39 >> 4;
      int v41 = v39[1] >> 4;
      unint64_t v37 = v15 + 4;
      unsigned int v42 = ((1048833 * (unint64_t)(224 * (v15[1] >> 4))) >> 32)
          + ((1048833 * (unint64_t)(224 * (v15[3] >> 4))) >> 32)
          + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32)
          + ((1048833 * (unint64_t)(224 * v41)) >> 32)
          + 66;
      unsigned char *v21 = (((1048833 * (unint64_t)(224 * (*v15 >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(224 * (v15[2] >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(224 * v40)) >> 32)
                          + 66) >> 2;
      v21[1] = v42 >> 2;
      unsigned int v38 = v21 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      unsigned int v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v43 = 0;
      unint64_t v44 = v37 + 2;
      do
      {
        unint64_t v45 = &v38[v43];
        unsigned int v46 = ((1048833 * (unint64_t)(224 * (*(v44 - 1) >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * (v44[1] >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v44 + v14 - 2) >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v44 + v14 + 2) >> 4))) >> 32)
            + 66;
        *unint64_t v45 = (((1048833 * (unint64_t)(224 * (*(v44 - 2) >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (*v44 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v44 + v14 - 4) >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v44 + v14) >> 4))) >> 32)
                            + 66) >> 2;
        v45[1] = v46 >> 2;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v24 - v35;
    do
    {
      unint64_t v49 = v15;
      unsigned int v50 = v21;
      if (v9)
      {
        unsigned int v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v52 = *v51 >> 4;
        int v53 = v51[1] >> 4;
        unint64_t v49 = v15 + 4;
        unsigned int v54 = ((1048833 * (unint64_t)(224 * (v15[1] >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * (v15[3] >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * v53)) >> 32)
            + 66;
        unsigned char *v21 = (((1048833 * (unint64_t)(224 * (*v15 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (v15[2] >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * v52)) >> 32)
                            + 66) >> 2;
        v21[1] = v54 >> 2;
        unsigned int v50 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v55 = 0;
        unsigned int v56 = v49 + 2;
        do
        {
          int v57 = &v50[v55];
          unsigned int v58 = ((1048833 * (unint64_t)(224 * (*(v56 - 1) >> 4))) >> 32)
              + ((1048833 * (unint64_t)(224 * (v56[1] >> 4))) >> 32)
              + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v56 + v14 - 2) >> 4))) >> 32)
              + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v56 + v14 + 2) >> 4))) >> 32)
              + 66;
          *int v57 = (((1048833 * (unint64_t)(224 * (*(v56 - 2) >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(224 * (*v56 >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v56 + v14 - 4) >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v56 + v14) >> 4))) >> 32)
                              + 66) >> 2;
          v57[1] = v58 >> 2;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      v21 += v20;
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    if (v13 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v27 + v30;
    uint64_t v32 = a7[2] + v29 * v18 + v16;
    uint64_t v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(unsigned char *)(v32 + i) = -1;
          *(unsigned char *)(v33 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v31 + 2 * i) >> 4))) >> 32)
                              + 16;
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      int v39 = v15[1] >> 4;
      unint64_t v37 = v15 + 4;
      unsigned char *v21 = ((1048833 * (unint64_t)(224 * (*v15 >> 4))) >> 32) + 16;
      v21[1] = ((1048833 * (unint64_t)(224 * v39)) >> 32) + 16;
      unsigned int v38 = v21 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      unsigned int v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (1048833 * (unint64_t)(224 * (v37[1] >> 4))) >> 32;
        unsigned char *v41 = ((1048833 * (unint64_t)(224 * (*v37 >> 4))) >> 32) + 16;
        v41[1] = v42 + 16;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v24 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v21;
      if (v9)
      {
        int v48 = v15[1] >> 4;
        unsigned int v46 = v15 + 4;
        unsigned char *v21 = ((1048833 * (unint64_t)(224 * (*v15 >> 4))) >> 32) + 16;
        v21[1] = ((1048833 * (unint64_t)(224 * v48)) >> 32) + 16;
        unint64_t v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unsigned int v50 = &v47[v49];
          unint64_t v51 = (1048833 * (unint64_t)(224 * (v46[1] >> 4))) >> 32;
          unsigned char *v50 = ((1048833 * (unint64_t)(224 * (*v46 >> 4))) >> 32) + 16;
          v50[1] = v51 + 16;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      v21 += v20;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v29 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v36 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v37 = *v36 >> 4;
      int v38 = v36[1] >> 4;
      unint64_t v34 = v15 + 4;
      unsigned int v39 = ((1048833 * (unint64_t)(224 * (v15[1] >> 4))) >> 32)
          + ((1048833 * (unint64_t)(224 * (v15[3] >> 4))) >> 32)
          + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32)
          + ((1048833 * (unint64_t)(224 * v38)) >> 32)
          + 66;
      unsigned char *v21 = (((1048833 * (unint64_t)(224 * (*v15 >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(224 * (v15[2] >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(224 * v37)) >> 32)
                          + 66) >> 2;
      v21[1] = v39 >> 2;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v40 = 0;
      int v41 = v34 + 2;
      do
      {
        unint64_t v42 = &v35[v40];
        unsigned int v43 = ((1048833 * (unint64_t)(224 * (*(v41 - 1) >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * (v41[1] >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v41 + v14 - 2) >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v41 + v14 + 2) >> 4))) >> 32)
            + 66;
        *unint64_t v42 = (((1048833 * (unint64_t)(224 * (*(v41 - 2) >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (*v41 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v41 + v14 - 4) >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v41 + v14) >> 4))) >> 32)
                            + 66) >> 2;
        v42[1] = v43 >> 2;
        v40 += 2;
        v41 += 4;
      }
      while (v40 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v24 - v32;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v21;
      if (v8)
      {
        int v48 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v49 = *v48 >> 4;
        int v50 = v48[1] >> 4;
        unsigned int v46 = v15 + 4;
        unsigned int v51 = ((1048833 * (unint64_t)(224 * (v15[1] >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * (v15[3] >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * v50)) >> 32)
            + 66;
        unsigned char *v21 = (((1048833 * (unint64_t)(224 * (*v15 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (v15[2] >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * v49)) >> 32)
                            + 66) >> 2;
        v21[1] = v51 >> 2;
        unint64_t v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v52 = 0;
        int v53 = v46 + 2;
        do
        {
          unsigned int v54 = &v47[v52];
          unsigned int v55 = ((1048833 * (unint64_t)(224 * (*(v53 - 1) >> 4))) >> 32)
              + ((1048833 * (unint64_t)(224 * (v53[1] >> 4))) >> 32)
              + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v53 + v14 - 2) >> 4))) >> 32)
              + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v53 + v14 + 2) >> 4))) >> 32)
              + 66;
          *unsigned int v54 = (((1048833 * (unint64_t)(224 * (*(v53 - 2) >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(224 * (*v53 >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v53 + v14 - 4) >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v53 + v14) >> 4))) >> 32)
                              + 66) >> 2;
          v54[1] = v55 >> 2;
          v52 += 2;
          v53 += 4;
        }
        while (v52 < v33);
      }
      v15 += v14;
      v21 += v20;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v29 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      int v36 = v15[1] >> 4;
      unint64_t v34 = v15 + 4;
      unsigned char *v21 = ((1048833 * (unint64_t)(224 * (*v15 >> 4))) >> 32) + 16;
      v21[1] = ((1048833 * (unint64_t)(224 * v36)) >> 32) + 16;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (1048833 * (unint64_t)(224 * (v34[1] >> 4))) >> 32;
        unsigned char *v38 = ((1048833 * (unint64_t)(224 * (*v34 >> 4))) >> 32) + 16;
        v38[1] = v39 + 16;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v40 = 0;
    unint64_t v41 = v24 - v32;
    uint64_t v42 = 2 * v14;
    do
    {
      unsigned int v43 = v15;
      unint64_t v44 = v21;
      if (v8)
      {
        int v45 = v15[1] >> 4;
        unsigned int v43 = v15 + 4;
        unsigned char *v21 = ((1048833 * (unint64_t)(224 * (*v15 >> 4))) >> 32) + 16;
        v21[1] = ((1048833 * (unint64_t)(224 * v45)) >> 32) + 16;
        unint64_t v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          unint64_t v47 = &v44[v46];
          unint64_t v48 = (1048833 * (unint64_t)(224 * (v43[1] >> 4))) >> 32;
          unsigned char *v47 = ((1048833 * (unint64_t)(224 * (*v43 >> 4))) >> 32) + 16;
          v47[1] = v48 + 16;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v33);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v42);
      v21 += v20;
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v59 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + ((unint64_t)(v59 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  unint64_t v23 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v23)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    if (v13 >= v9) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = *a3 + *a4 * v13 + 2 * v11 + v27;
    uint64_t v29 = *a7 + v26 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v29 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v28 + 2 * i) >> 4))) >> 32;
      }
      v28 += v25;
      v29 += v26;
      ++v24;
    }
    while (v24 != v23);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v23 >= v12) {
    unint64_t v31 = v12;
  }
  else {
    unint64_t v31 = 0;
  }
  uint64_t v8 = v8;
  if (v21 >= v10) {
    unint64_t v32 = v10;
  }
  else {
    unint64_t v32 = 0;
  }
  unint64_t v58 = v32;
  unint64_t v33 = v21 - v32;
  if (v12)
  {
    if (v8)
    {
      int v36 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      unsigned int v37 = *v36;
      unsigned int v38 = v36[1];
      unint64_t v34 = v15 + 4;
      unsigned int v39 = ((1048833 * (unint64_t)(255 * (v15[1] >> 4))) >> 32)
          + ((1048833 * (unint64_t)(255 * (v15[3] >> 4))) >> 32)
          + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32)
          + ((1048833 * (unint64_t)(255 * (v38 >> 4))) >> 32)
          + 2;
      *uint64_t v20 = (((1048833 * (unint64_t)(255 * (*v15 >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(255 * (v15[2] >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(255 * (v37 >> 4))) >> 32)
                          + 2) >> 2;
      v20[1] = v39 >> 2;
      unint64_t v35 = v20 + 2;
    }
    else
    {
      unint64_t v34 = v15;
      unint64_t v35 = v20;
    }
    if (v21 != v32)
    {
      unint64_t v40 = 0;
      unint64_t v41 = v34 + 2;
      do
      {
        uint64_t v42 = &v35[v40];
        unsigned int v43 = ((1048833 * (unint64_t)(255 * (*(v41 - 1) >> 4))) >> 32)
            + ((1048833 * (unint64_t)(255 * (v41[1] >> 4))) >> 32)
            + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v41 + v14 - 2) >> 4))) >> 32)
            + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v41 + v14 + 2) >> 4))) >> 32)
            + 2;
        *uint64_t v42 = (((1048833 * (unint64_t)(255 * (*(v41 - 2) >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (*v41 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v41 + v14 - 4) >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v41 + v14) >> 4))) >> 32)
                            + 2) >> 2;
        v42[1] = v43 >> 2;
        v40 += 2;
        v41 += 4;
      }
      while (v40 < v33);
    }
    v15 += v14;
    v20 += v59;
  }
  if (v23 != v31)
  {
    unint64_t v44 = 0;
    unint64_t v57 = v23 - v31;
    do
    {
      int v45 = v15;
      unint64_t v46 = v20;
      uint64_t v47 = v8;
      if (v8)
      {
        unint64_t v48 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        unsigned int v49 = *v48;
        unsigned int v50 = v48[1];
        int v45 = v15 + 4;
        unsigned int v51 = ((1048833 * (unint64_t)(255 * (v15[1] >> 4))) >> 32)
            + ((1048833 * (unint64_t)(255 * (v15[3] >> 4))) >> 32)
            + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32)
            + ((1048833 * (unint64_t)(255 * (v50 >> 4))) >> 32)
            + 2;
        *uint64_t v20 = (((1048833 * (unint64_t)(255 * (*v15 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (v15[2] >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (v49 >> 4))) >> 32)
                            + 2) >> 2;
        v20[1] = v51 >> 2;
        unint64_t v46 = v20 + 2;
      }
      if (v21 != v58)
      {
        unint64_t v52 = 0;
        int v53 = v45 + 2;
        do
        {
          unsigned int v54 = &v46[v52];
          unsigned int v55 = ((1048833 * (unint64_t)(255 * (*(v53 - 1) >> 4))) >> 32)
              + ((1048833 * (unint64_t)(255 * (v53[1] >> 4))) >> 32)
              + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v53 + v14 - 2) >> 4))) >> 32)
              + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v53 + v14 + 2) >> 4))) >> 32)
              + 2;
          *unsigned int v54 = (((1048833 * (unint64_t)(255 * (*(v53 - 2) >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(255 * (*v53 >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v53 + v14 - 4) >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v53 + v14) >> 4))) >> 32)
                              + 2) >> 2;
          v54[1] = v55 >> 2;
          v52 += 2;
          v53 += 4;
        }
        while (v52 < v33);
      }
      v15 += v14;
      v20 += v59;
      v44 += 2;
      uint64_t v8 = v47;
    }
    while (v44 < v57);
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v29 + 2 * i) >> 4))) >> 32;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v36 = v15[1];
      unint64_t v34 = v15 + 4;
      unsigned char *v21 = (1048833 * (unint64_t)(255 * (*v15 >> 4))) >> 32;
      v21[1] = (1048833 * (unint64_t)(255 * (v36 >> 4))) >> 32;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unsigned int v38 = &v35[v37];
        unsigned int v39 = v34[1];
        unsigned char *v38 = (1048833 * (unint64_t)(255 * (*v34 >> 4))) >> 32;
        v38[1] = (1048833 * (unint64_t)(255 * (v39 >> 4))) >> 32;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v40 = 0;
    unint64_t v41 = v24 - v32;
    uint64_t v42 = 2 * v14;
    do
    {
      unsigned int v43 = v15;
      unint64_t v44 = v21;
      if (v8)
      {
        unsigned int v45 = v15[1];
        unsigned int v43 = v15 + 4;
        unsigned char *v21 = (1048833 * (unint64_t)(255 * (*v15 >> 4))) >> 32;
        v21[1] = (1048833 * (unint64_t)(255 * (v45 >> 4))) >> 32;
        unint64_t v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          uint64_t v47 = &v44[v46];
          unsigned int v48 = v43[1];
          unsigned char *v47 = (1048833 * (unint64_t)(255 * (*v43 >> 4))) >> 32;
          v47[1] = (1048833 * (unint64_t)(255 * (v48 >> 4))) >> 32;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v33);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v42);
      v21 += v20;
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * v11;
    if (v13 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    unint64_t v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v33 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v40 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v41 = *v40 >> 4;
      int v42 = v40[1] >> 4;
      unint64_t v37 = v15 + 4;
      unsigned int v43 = ((1048833 * (unint64_t)(224 * (v15[1] >> 4))) >> 32)
          + ((1048833 * (unint64_t)(224 * (v15[3] >> 4))) >> 32)
          + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32)
          + ((1048833 * (unint64_t)(224 * v42)) >> 32)
          + 66;
      *unint64_t v22 = (((1048833 * (unint64_t)(224 * (*v15 >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(224 * (v15[2] >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(224 * v41)) >> 32)
                          + 66) >> 2;
      unsigned int v38 = v22 + 1;
      *unint64_t v23 = v43 >> 2;
      unsigned int v39 = v23 + 1;
    }
    else
    {
      unint64_t v37 = v15;
      unsigned int v38 = v22;
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v44 = 0;
      unsigned int v45 = v37 + 2;
      do
      {
        unsigned int v46 = ((1048833 * (unint64_t)(224 * (*(v45 - 1) >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * (v45[1] >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v45 + v14 - 2) >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v45 + v14 + 2) >> 4))) >> 32)
            + 66;
        *v38++ = (((1048833 * (unint64_t)(224 * (*(v45 - 2) >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(224 * (*v45 >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v45 + v14 - 4) >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v45 + v14) >> 4))) >> 32)
                              + 66) >> 2;
        *v39++ = v46 >> 2;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v36);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      unsigned int v49 = v15;
      unsigned int v50 = v22;
      unsigned int v51 = v23;
      if (v8)
      {
        unint64_t v52 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v53 = *v52 >> 4;
        int v54 = v52[1] >> 4;
        unsigned int v49 = v15 + 4;
        unsigned int v55 = ((1048833 * (unint64_t)(224 * (v15[1] >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * (v15[3] >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32)
            + ((1048833 * (unint64_t)(224 * v54)) >> 32)
            + 66;
        *unint64_t v22 = (((1048833 * (unint64_t)(224 * (*v15 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (v15[2] >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(224 * v53)) >> 32)
                            + 66) >> 2;
        unsigned int v50 = v22 + 1;
        *unint64_t v23 = v55 >> 2;
        unsigned int v51 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v56 = 0;
        unint64_t v57 = v49 + 2;
        do
        {
          unsigned int v58 = ((1048833 * (unint64_t)(224 * (*(v57 - 1) >> 4))) >> 32)
              + ((1048833 * (unint64_t)(224 * (v57[1] >> 4))) >> 32)
              + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v57 + v14 - 2) >> 4))) >> 32)
              + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v57 + v14 + 2) >> 4))) >> 32)
              + 66;
          *v50++ = (((1048833 * (unint64_t)(224 * (*(v57 - 2) >> 4))) >> 32)
                                + ((1048833 * (unint64_t)(224 * (*v57 >> 4))) >> 32)
                                + ((1048833
                                  * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v57 + v14 - 4) >> 4))) >> 32)
                                + ((1048833 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v57 + v14) >> 4))) >> 32)
                                + 66) >> 2;
          *v51++ = v58 >> 2;
          v56 += 2;
          v57 += 4;
        }
        while (v56 < v36);
      }
      v15 += v14;
      v22 += v20;
      v23 += v21;
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_tf44_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * v11;
    if (v13 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    unint64_t v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v33 + i) = ((1048833 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 4))) >> 32)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      int v40 = v15[1] >> 4;
      unint64_t v37 = v15 + 4;
      *unint64_t v22 = ((1048833 * (unint64_t)(224 * (*v15 >> 4))) >> 32) + 16;
      unsigned int v38 = v22 + 1;
      *unint64_t v23 = ((1048833 * (unint64_t)(224 * v40)) >> 32) + 16;
      unsigned int v39 = v23 + 1;
    }
    else
    {
      unint64_t v37 = v15;
      unsigned int v38 = v22;
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unint64_t v42 = (1048833 * (unint64_t)(224 * (v37[1] >> 4))) >> 32;
        *v38++ = ((1048833 * (unint64_t)(224 * (*v37 >> 4))) >> 32) + 16;
        *v39++ = v42 + 16;
        v41 += 2;
        v37 += 4;
      }
      while (v41 < v36);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v22;
      unint64_t v48 = v23;
      if (v8)
      {
        unsigned int v46 = v15 + 4;
        unint64_t v49 = (1048833 * (unint64_t)(224 * (v15[1] >> 4))) >> 32;
        *unint64_t v22 = ((1048833 * (unint64_t)(224 * (*v15 >> 4))) >> 32) + 16;
        unint64_t v47 = v22 + 1;
        *unint64_t v23 = v49 + 16;
        unint64_t v48 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v50 = 0;
        do
        {
          unint64_t v51 = (1048833 * (unint64_t)(224 * (v46[1] >> 4))) >> 32;
          *v47++ = ((1048833 * (unint64_t)(224 * (*v46 >> 4))) >> 32) + 16;
          *v48++ = v51 + 16;
          v50 += 2;
          v46 += 4;
        }
        while (v50 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 += v20;
      v23 += v21;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_tf44_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v59 = a8[2];
  uint64_t v60 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + ((unint64_t)(v60 * v18) >> 1) + (v16 >> 1));
  uint64_t v21 = (unsigned char *)(a7[2] + ((unint64_t)(v59 * v18) >> 1) + (v16 >> 1));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v13 + 2 * v11;
    if (v13 >= v9) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + v29;
    unint64_t v31 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v31 + i) = (1048833 * (unint64_t)(255 * (*(unsigned __int16 *)(v30 + 2 * i) >> 4))) >> 32;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v22 >= v10) {
    unint64_t v34 = v10;
  }
  else {
    unint64_t v34 = 0;
  }
  unint64_t v58 = v34;
  unint64_t v35 = v22 - v34;
  if (v12)
  {
    if (v8)
    {
      unsigned int v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      unsigned int v40 = *v39;
      unsigned int v41 = v39[1];
      unint64_t v36 = v15 + 4;
      unsigned int v42 = ((1048833 * (unint64_t)(255 * (v15[1] >> 4))) >> 32)
          + ((1048833 * (unint64_t)(255 * (v15[3] >> 4))) >> 32)
          + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32)
          + ((1048833 * (unint64_t)(255 * (v41 >> 4))) >> 32)
          + 2;
      *uint64_t v20 = (((1048833 * (unint64_t)(255 * (*v15 >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(255 * (v15[2] >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32)
                          + ((1048833 * (unint64_t)(255 * (v40 >> 4))) >> 32)
                          + 2) >> 2;
      unint64_t v37 = v20 + 1;
      unsigned char *v21 = v42 >> 2;
      unsigned int v38 = v21 + 1;
    }
    else
    {
      unint64_t v36 = v15;
      unint64_t v37 = v20;
      unsigned int v38 = v21;
    }
    if (v22 != v34)
    {
      unint64_t v43 = 0;
      unint64_t v44 = v36 + 2;
      do
      {
        unsigned int v45 = ((1048833 * (unint64_t)(255 * (*(v44 - 1) >> 4))) >> 32)
            + ((1048833 * (unint64_t)(255 * (v44[1] >> 4))) >> 32)
            + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v44 + v14 - 2) >> 4))) >> 32)
            + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v44 + v14 + 2) >> 4))) >> 32)
            + 2;
        *v37++ = (((1048833 * (unint64_t)(255 * (*(v44 - 2) >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(255 * (*v44 >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v44 + v14 - 4) >> 4))) >> 32)
                              + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v44 + v14) >> 4))) >> 32)
                              + 2) >> 2;
        *v38++ = v45 >> 2;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v35);
    }
    v15 += v14;
    v20 += v60;
    v21 += v59;
  }
  if (v24 != v33)
  {
    unint64_t v46 = 0;
    do
    {
      unint64_t v47 = v15;
      unint64_t v48 = v20;
      unint64_t v49 = v21;
      if (v8)
      {
        unint64_t v50 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        unsigned int v51 = *v50;
        unsigned int v52 = v50[1];
        unint64_t v47 = v15 + 4;
        unsigned int v53 = ((1048833 * (unint64_t)(255 * (v15[1] >> 4))) >> 32)
            + ((1048833 * (unint64_t)(255 * (v15[3] >> 4))) >> 32)
            + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 4))) >> 32)
            + ((1048833 * (unint64_t)(255 * (v52 >> 4))) >> 32)
            + 2;
        *uint64_t v20 = (((1048833 * (unint64_t)(255 * (*v15 >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (v15[2] >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14) >> 4))) >> 32)
                            + ((1048833 * (unint64_t)(255 * (v51 >> 4))) >> 32)
                            + 2) >> 2;
        unint64_t v48 = v20 + 1;
        unsigned char *v21 = v53 >> 2;
        unint64_t v49 = v21 + 1;
      }
      if (v22 != v58)
      {
        unint64_t v54 = 0;
        unsigned int v55 = v47 + 2;
        do
        {
          unsigned int v56 = ((1048833 * (unint64_t)(255 * (*(v55 - 1) >> 4))) >> 32)
              + ((1048833 * (unint64_t)(255 * (v55[1] >> 4))) >> 32)
              + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v55 + v14 - 2) >> 4))) >> 32)
              + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v55 + v14 + 2) >> 4))) >> 32)
              + 2;
          *v48++ = (((1048833 * (unint64_t)(255 * (*(v55 - 2) >> 4))) >> 32)
                                + ((1048833 * (unint64_t)(255 * (*v55 >> 4))) >> 32)
                                + ((1048833
                                  * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v55 + v14 - 4) >> 4))) >> 32)
                                + ((1048833 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v55 + v14) >> 4))) >> 32)
                                + 2) >> 2;
          *v49++ = v56 >> 2;
          v54 += 2;
          v55 += 4;
        }
        while (v54 < v35);
      }
      v15 += v14;
      v20 += v60;
      v21 += v59;
      v46 += 2;
    }
    while (v46 < v24 - v33);
  }
  return 0;
}